// This file is part of the bwip-js project available at:
//
// 	  http://metafloor.github.io/bwip-js
//
// Copyright (c) 2011-2024 Mark Warren
//
// This file contains code automatically generated from:
// Barcode Writer in Pure PostScript - Version 2023-04-03
// Copyright (c) 2004-2023 Terry Burton
//
// The MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//
"use strict";

(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        define([], factory);
    } else if (typeof module === 'object' && module.exports) {
        module.exports = factory();
    } else {
        root.bwipjs = factory();
	}
}(typeof self !== 'undefined' ? self : this, function () {

// exports.js
const BWIPJS_VERSION = '4.2.0 (2024-01-02)';

// bwipjs.toCanvas(canvas, options)
// bwipjs.toCanvas(options, canvas)
//
// Uses the built-in canvas drawing.
//
// `canvas` can be an HTMLCanvasElement or an ID string or unique selector string.
// `options` are a bwip-js/BWIPP options object.
//
// This function is synchronous and throws on error.
//
// Returns the HTMLCanvasElement.
function ToCanvas(cvs, opts) {
	if (typeof opts == 'string' || opts instanceof HTMLCanvasElement) {
        let tmp = cvs;
        cvs = opts;
        opts = tmp;
	}
    return _ToAny(bwipp_lookup(opts.bcid), opts, cvs); 
}
// Entry point for the symbol-specific exports
//
// Polymorphic internal interface
// _ToAny(encoder, string, opts) : HTMLCanvasElement
// _ToAny(encoder, HTMLCanvasElement, opts) : HTMLCanvasElement
// _ToAny(encoder, opts, string) : HTMLCanvasElement
// _ToAny(encoder, opts, HTMLCanvasElement) : HTMLCanvasElement
// _ToAny(encoder, opts, drawing) : any
//
// 'string` can be either an `id` or query selector returning a single canvas element.
function _ToAny(encoder, opts, drawing) {
    if (typeof opts == 'string') {
		var canvas = document.getElementById(opts) || document.querySelector(opts);
        if (!(canvas instanceof HTMLCanvasElement)) {
            throw new Error('bwipjs: `' + opts + '`: not a canvas');
        }
        opts = drawing;
        drawing = DrawingCanvas(canvas);
    } else if (opts instanceof HTMLCanvasElement) {
        var canvas = opts;
        opts = drawing;
        drawing = DrawingCanvas(canvas);
    } else if (typeof drawing == 'string') {
		var canvas = document.getElementById(drawing) || document.querySelector(drawing);
        if (!(canvas instanceof HTMLCanvasElement)) {
            throw new Error('bwipjs: `' + drawing + '`: not a canvas');
        }
        drawing = DrawingCanvas(canvas);
    } else if (drawing instanceof HTMLCanvasElement) {
        drawing = DrawingCanvas(drawing);
	} else if (!drawing || typeof drawing != 'object' || !drawing.init) {
        throw new Error('bwipjs: not a canvas or drawing object');
	} 
    return _Render(encoder, opts, drawing);
}

// bwipjs.toSVG(options)
//
// Uses the built-in svg drawing interface.
//
// `options` are a bwip-js/BWIPP options object.
//
// This function is synchronous and throws on error.
//
// Returns a string containing a fully qualified SVG definition,
// including the natural width and height of the image, in pixels:
//
//  <svg version="1.1" width="242" height="200" xmlns="http://www.w3.org/2000/svg">
//   ...
//  </svg>
//
// Available on all platforms.
function ToSVG(opts) {
    return _Render(bwipp_lookup(opts.bcid), opts, DrawingSVG());
}

function FixupOptions(opts) {
	var scale	= opts.scale || 2;
	var scaleX	= +opts.scaleX || scale;
	var scaleY	= +opts.scaleY || scaleX;

	// Fix up padding.
	opts.paddingleft = padding(opts.paddingleft, opts.paddingwidth, opts.padding, scaleX);
	opts.paddingright = padding(opts.paddingright, opts.paddingwidth, opts.padding, scaleX);
	opts.paddingtop = padding(opts.paddingtop, opts.paddingheight, opts.padding, scaleY);
	opts.paddingbottom = padding(opts.paddingbottom, opts.paddingheight, opts.padding, scaleY);

	// We override BWIPP's background color functionality.  If in CMYK, convert to RRGGBB so
	// the drawing interface is consistent.  Likewise, if in CSS-style #rgb or #rrggbb.
    if (opts.backgroundcolor) {
        var bgc = ''+opts.backgroundcolor;
        if (/^[0-9a-fA-F]{8}$/.test(bgc)) {
            var c = parseInt(bgc.substr(0,2), 16) / 255;
            var m = parseInt(bgc.substr(2,2), 16) / 255;
            var y = parseInt(bgc.substr(4,2), 16) / 255;
            var k = parseInt(bgc.substr(6,2), 16) / 255;
            var r = Math.floor((1-c) * (1-k) * 255).toString(16);
            var g = Math.floor((1-m) * (1-k) * 255).toString(16);
            var b = Math.floor((1-y) * (1-k) * 255).toString(16);
            opts.backgroundcolor = (r.length == 1 ? '0' : '') + r +
                                   (g.length == 1 ? '0' : '') + g +
                                   (b.length == 1 ? '0' : '') + b;
        } else {
            if (bgc[0] == '#') {
                bgc = bgc.substr(1);
            }
            if (/^[0-9a-fA-F]{6}$/.test(bgc)) {
                opts.backgroundcolor = bgc;
            } else if (/^[0-9a-fA-F]{3}$/.test(bgc)) {
                opts.backgroundcolor = bgc[0] + bgc[0] + bgc[1] + bgc[1] + bgc[2] + bgc[2];
            } else {
                throw new Error('bwip-js: invalid backgroundcolor: ' + opts.backgroundcolor);
            }
        }
    }

	return opts;

	function padding(a, b, c, s) {
		if (a != null) {
			return a*s;
		}
		if (b != null) {
			return b*s;
		}
		return c*s || 0;
	}
}

var BWIPJS_OPTIONS = {
	bcid:1,
	text:1,
	scale:1,
	scaleX:1,
	scaleY:1,
	rotate:1,
	padding:1,
	paddingwidth:1,
	paddingheight:1,
	paddingtop:1,
	paddingleft:1,
	paddingright:1,
	paddingbottom:1,
	backgroundcolor:1,
};

// bwipjs.render(options, drawing)
//
// Renders a barcode using the provided drawing object.
//
// This function is synchronous and throws on error.
//
// Browser and nodejs usage.
function Render(options, drawing) {
    return _Render(bwipp_lookup(options.bcid), options, drawing);
}

// Called by the public exports
function _Render(encoder, options, drawing) {
	var text = options.text;
	if (!text) {
		throw new ReferenceError('bwip-js: bar code text not specified.');
	}

    // setopts() is optional on the drawing object.
    FixupOptions(options);
    drawing.setopts && drawing.setopts(options);

	// Set the bwip-js defaults
	var scale	= options.scale || 2;
	var scaleX	= +options.scaleX || scale;
	var scaleY	= +options.scaleY || scaleX;
	var rotate	= options.rotate || 'N';

	// Create a barcode writer object.  This is the interface between
	// the low-level BWIPP code, the bwip-js graphics context, and the
	// drawing interface.
	var bw = new BWIPJS(drawing);

	// Set the BWIPP options
	var bwippopts = {};
	for (var id in options) {
		if (!BWIPJS_OPTIONS[id]) {
			bwippopts[id] = options[id];
		}
	}

	// Fix a disconnect in the BWIPP rendering logic
	if (bwippopts.alttext) {
		bwippopts.includetext = true;
	}
	// We use mm rather than inches for height - except pharmacode2 height
	// which is already in mm.
	if (+bwippopts.height && encoder != bwipp_pharmacode2) {
		bwippopts.height = bwippopts.height / 25.4 || 0.5;
	}
	// Likewise, width
	if (+bwippopts.width) {
		bwippopts.width = bwippopts.width / 25.4 || 0;
	}

	// Scale the image
	bw.scale(scaleX, scaleY);

	// Call into the BWIPP cross-compiled code and render the image.
    bwipp_encode(bw, encoder, text, bwippopts);

    // Returns whatever drawing.end() returns, or `false` if nothing rendered.
	return bw.render();
}

// bwipjs.raw(options)
// bwipjs.raw(bcid, text, opts-string)
//
// Invokes the low level BWIPP code and returns the raw encoding data.
//
// This function is synchronous and throws on error.
//
// Browser and nodejs usage.
function ToRaw(bcid, text, options) {
	if (arguments.length == 1) {
		options = bcid;
		bcid = options.bcid;
		text = options.text;
	}

	// The drawing interface is just needed for the pre-init() calls.
    // Don't need to fixup the options - drawing specific.
    var drawing = DrawingBuiltin();
    drawing.setopts(options);

	var bw = new BWIPJS(drawing);
	var stack = bwipp_encode(bw, bwipp_lookup(bcid), text, options, true);

	// bwip-js uses Maps to emulate PostScript dictionary objects; but Maps
	// are not a typical/expected return value.  Convert to plain-old-objects.
	var ids = { pixs:1, pixx:1, pixy:1, sbs:1, bbs:1, bhs:1, width:1, height:1 };
	for (var i = 0; i < stack.length; i++) {
		var elt = stack[i];
		if (elt instanceof Map) {
			var obj = {};
			// Could they make Maps any harder to iterate over???
			for (var keys = elt.keys(), size = elt.size, k = 0; k < size; k++) {
				var id = keys.next().value;
				if (ids[id]) {
					var val = elt.get(id);
					if (val instanceof Array) {
						// The postscript arrays have extra named properties
						// to emulate array views.  Return cleaned up arrays.
						obj[id] = val.b.slice(val.o, val.o + val.length);
					} else {
						obj[id] = val;
					}
				}
			}
			stack[i] = obj;
		} else {
			// This should never exec...
			stack.splice(i--, 1);
		}
	}
	return stack;
}
// bwip-js // Barcode Writer in Pure JavaScript
// https://github.com/metafloor/bwip-js
//
// This code was automatically generated from:
// Barcode Writer in Pure PostScript - Version 2023-04-03
//
// Copyright (c) 2011-2024 Mark Warren
// Copyright (c) 2004-2023 Terry Burton
//
// Licensed MIT. See the LICENSE file in the bwip-js root directory.
// bwip-js/barcode-hdr.js
//
// This code is injected above the cross-compiled barcode.js.

// The BWIPJS object (graphics interface)
var $$ = null;
var $j = 0; // stack pointer
var $k = []; // operand stack
var $_ = {}; // base of the dictionary stack

// Array ctor
//	$a()	: Build a new array up to the Infinity-marker on the stack.
//	$a(arr)	: Convert native array to a "view" of the array.
//	$a(len)	: Create a new array of length `len`
function $a(a) {
    if (!arguments.length) {
        for (var i = $j - 1; i >= 0 && $k[i] !== Infinity; i--);
        if (i < 0) {
            throw new Error('array-marker-not-found');
        }
        a = $k.splice(i + 1, $j - 1 - i);
        $j = i;
    } else if (!(a instanceof Array)) {
        a = new Array(+arguments[0]);
        for (var i = 0, l = a.length; i < l; i++) {
            a[i] = null;
        }
    }
    a.b = a; // base array
    a.o = 0; // offset into base
    return a;
}

// dict ctor
//	$d() : look for the Infinity marker on the stack
function $d() {
    // Build the dictionary in the order the keys/values were pushed so enumeration
    // occurs in the correct sequence.
    for (var mark = $j - 1; mark >= 0 && $k[mark] !== Infinity; mark -= 2) {
        if ($k[mark - 1] === Infinity) {
            throw new Error('dict-malformed-stack');
        }
    }
    if (mark < 0) {
        throw new Error('dict-marker-not-found');
    }
    var d = new Map;
    for (var i = mark + 1; i < $j; i += 2) {
        // Unlike javascript, postscript dict keys differentiate between
        // numbers and the string representation of a number.
        var k = $k[i]; // "key" into the dict entry
        var t = typeof k;
        if (t == 'number' || t == 'string') {
            d.set(k, $k[i + 1]);
        } else if (k instanceof Uint8Array) {
            d.set($z(k), $k[i + 1]);
        } else {
            throw new Error('dict-not-a-valid-key(' + k + ')');
        }
    }
    $j = mark;
    return d;
}

// string ctor
//	s(number)	: create zero-filled string of number-length
//	s(string)	: make a copy of the string
//	s(uint8[])	: make a copy of the string
//
// Returns a Uint8Array-string.
function $s(v) {
    var t = typeof v;
    if (t === 'number') {
        return new Uint8Array(v);
    }
    if (t !== 'string') {
        v = '' + v;
    }
    var s = new Uint8Array(v.length);
    for (var i = 0; i < v.length; i++) {
        s[i] = v.charCodeAt(i);
    }
    return s;
}

// ... n c roll
function $r(n, c) {
    if ($j < n) {
        throw new Error('roll: --stack-underflow--');
    }
    if (!c) {
        return;
    }
    if (c < 0) {
        var t = $k.splice($j - n, -c);
    } else {
        var t = $k.splice($j - n, n - c);
    }
    $k.splice.apply($k, [$j - t.length, 0].concat(t));
}

// Primarily designed to convert uint8-string to string, but will call the
// the toString() method on any value.
function $z(s) {
    if (s instanceof Uint8Array) {
        return String.fromCharCode.apply(null, s);
    }
    return '' + s;
}

// Copies source to dest and returns a view of just the copied characters
function $strcpy(dst, src) {
    if (typeof dst === 'string') {
        dst = $s(dst);
    }
    if (src instanceof Uint8Array) {
        for (var i = 0, l = src.length; i < l; i++) {
            dst[i] = src[i];
        }
    } else {
        for (var i = 0, l = src.length; i < l; i++) {
            dst[i] = src.charCodeAt(i);
        }
    }
    return src.length < dst.length ? dst.subarray(0, src.length) : dst;
}

// Copies source to dest and should (but doesn't) return a view of just the copied elements
function $arrcpy(dst, src) {
    for (var i = 0, l = src.length; i < l; i++) {
        dst[i] = src[i];
    }
    dst.length = src.length;
    return dst;
}

// cvs operator - convert a value to its string representation
//	s : string to store into
//	v : any value
function $cvs(s, v) {
    var t = typeof v;
    if (t == 'number' || t == 'boolean' || v === null) {
        v = '' + v;
    } else if (t !== 'string') {
        v = '--nostringval--';
    }
    for (var i = 0, l = v.length; i < l; i++) {
        s[i] = v.charCodeAt(i);
    }
    $k[$j++] = i < s.length ? s.subarray(0, i) : s;
}
// cvi operator - converts a numeric string value to integer.
function $cvi(s) {
    if (s instanceof Uint8Array) {
        // nul-chars on the end of a string are ignored by postscript but cause javascript
        // to return a zero result.
        return String.fromCharCode.apply(null, s).replace(/\0+$/, '') | 0;
    }
    return ('' + s) | 0;
}

// cvrs operator - convert a number to a radix string
//	s : string to store into
//	n : number
//	r : radix
function $cvrs(s, n, r) {
    return $strcpy(s, (~~n).toString(r).toUpperCase());
}

// cvx - convert to executable.
// This is only used by BWIPP to convert <XX> string literals.
function $cvx(s) {
    s = $z(s)
    var m = /^\s*<((?:[0-9a-fA-F]{2})+)>\s*$/.exec(s);
    if (!m) {
        throw new Error('cvx: not a <HH> hex string literal');
    }
    var h = m[1];
    var l = h.length >> 1;
    var u = new Uint8Array(l);
    for (var i = 0, j = 0; i < l; i++) {
        var c0 = h.charCodeAt(j++);
        var c1 = h.charCodeAt(j++);
        u[i] = ((c0 < 58 ? c0 - 48 : (c0 & 15) + 9) << 4) +
            (c1 < 58 ? c1 - 48 : (c1 & 15) + 9);
    }
    return u;
}

// get operator
//	s : source
//	k : key
function $get(s, k) {
    if (s instanceof Uint8Array) {
        return s[k];
    }
    if (typeof s === 'string') {
        return s.charCodeAt(k);
    }
    if (s instanceof Array) {
        return s.b[s.o + k];
    }
    if (k instanceof Uint8Array) {
        return s.get($z(k));
    }
    return s.get(k);
}

// put operator
//	d : dest
//	k : key
//	v : value
function $put(d, k, v) {
    if (d instanceof Uint8Array) {
        d[k] = v;
    } else if (d instanceof Array) {
        d.b[d.o + k] = v;
    } else if (typeof d == 'object') {
        if (k instanceof Uint8Array) {
            d.set($z(k), v);
        } else {
            d.set(k, v);
        }
    } else {
        throw new Error('put-not-writable-' + (typeof d));
    }
}

// getinterval operator
//	s : src
//	o : offset
//	l : length
function $geti(s, o, l) {
    if (s instanceof Uint8Array) {
        return s.subarray(o, o + l);
    }
    if (s instanceof Array) {
        var a = new Array(l);
        a.b = s.b; // base array
        a.o = s.o + o; // offset into base
        return a;
    }
    // Must be a string
    return s.substr(o, l);
}

// putinterval operator
//	d : dst
//	o : offset
//	s : src
function $puti(d, o, s) {
    if (d instanceof Uint8Array) {
        if (typeof s == 'string') {
            for (var i = 0, l = s.length; i < l; i++) {
                d[o + i] = s.charCodeAt(i);
            }
        } else {
            // When both d and s are the same, we want to copy
            // backwards, which works for the general case as well.
            for (var i = s.length - 1; i >= 0; i--) {
                d[o + i] = s[i];
            }
        }
    } else if (d instanceof Array) {
        // Operate on the base arrays
        var darr = d.b;
        var doff = o + d.o;
        var sarr = s.b;
        var soff = s.o;

        for (var i = 0, l = s.length; i < l; i++) {
            darr[doff + i] = sarr[soff + i];
        }
    } else {
        throw new Error('putinterval-not-writable-' + (typeof d));
    }
}

// type operator
function $type(v) {
    // null can be mis-typed - get it out of the way
    if (v == null) {
        return 'nulltype';
    }
    var t = typeof v;
    if (t == 'number') {
        return v % 1 ? 'realtype' : 'integertype';
    }
    if (t == 'boolean') {
        return 'booleantype';
    }
    if (t == 'string' || v instanceof Uint8Array) {
        return 'stringtype';
    }
    if (t == 'function') {
        return 'operatortype';
    }
    if (v instanceof Array) {
        return 'arraytype';
    }
    return 'dicttype';
    // filetype
    // fonttype
    // gstatetype
    // marktype	(v === Infinity)
    // nametype
    // savetype
}

// anchorsearch operator
//		string seek anchorsearch suffix seek true %if-found
//						         string false	  %if-not-found
function $anchorsearch(str, seek) {
    if (!(str instanceof Uint8Array)) {
        str = $s(str);
    }
    var i = 0,
        ls = str.length,
        lk = seek.length;

    // Optimize for single characters.
    if (lk == 1) {
        var cd = seek instanceof Uint8Array ? seek[0] : seek.charCodeAt(0);
        i = str[0] == cd ? 1 : ls;
    } else if (seek.length <= ls) {
        // Slow path, 
        if (!(seek instanceof Uint8Array)) {
            seek = $s(seek);
        }
        for (; i < lk && str[i] == seek[i]; i++);
    }
    if (i == lk) {
        $k[$j++] = str.subarray(lk);
        $k[$j++] = str.subarray(0, lk);
        $k[$j++] = true;
    } else {
        $k[$j++] = str;
        $k[$j++] = false;
    }
}

// search operator
//		string seek search suffix match prefix true %if-found
//						   string false				%if-not-found
function $search(str, seek) {
    if (!(str instanceof Uint8Array)) {
        str = $s(str);
    }
    var ls = str.length;

    // Virtually all uses of search in BWIPP are for single-characters.
    // Optimize for that case.
    if (seek.length == 1) {
        var lk = 1;
        var cd = seek instanceof Uint8Array ? seek[0] : seek.charCodeAt(0);
        for (var i = 0; i < ls && str[i] != cd; i++);
    } else {
        // Slow path, 
        if (!(seek instanceof Uint8Array)) {
            seek = $s(seek);
        }
        var lk = seek.length;
        var cd = seek[0];
        for (var i = 0; i < ls && str[i] != cd; i++);
        while (i < ls) {
            for (var j = 1; j < lk && str[i + j] === seek[j]; j++);
            if (j === lk) {
                break;
            }
            for (i++; i < ls && str[i] != cd; i++);
        }
    }
    if (i < ls) {
        $k[$j++] = str.subarray(i + lk);
        $k[$j++] = str.subarray(i, i + lk);
        $k[$j++] = str.subarray(0, i);
        $k[$j++] = true;
    } else {
        $k[$j++] = str;
        $k[$j++] = false;
    }
}

// The callback is omitted when forall is being used just to push onto the
// stack.  The callback normally returns undefined.  A return of true means break.
function $forall(o, cb) {
    if (o instanceof Uint8Array) {
        for (var i = 0, l = o.length; i < l; i++) {
            $k[$j++] = o[i];
            if (cb && cb()) break;
        }
    } else if (o instanceof Array) {
        // The array may be a view.
        for (var a = o.b, i = o.o, l = o.o + o.length; i < l; i++) {
            $k[$j++] = a[i];
            if (cb && cb()) break;
        }
    } else if (typeof o === 'string') {
        for (var i = 0, l = o.length; i < l; i++) {
            $k[$j++] = o.charCodeAt(i);
            if (cb && cb()) break;
        }
    } else if (o instanceof Map) {
        for (var keys = o.keys(), i = 0, l = o.size; i < l; i++) {
            var id = keys.next().value;
            $k[$j++] = id;
            $k[$j++] = o.get(id);
            if (cb && cb()) break;
        }
    } else {
        for (var id in o) {
            $k[$j++] = id;
            $k[$j++] = o[id];
            if (cb && cb()) break;
        }
    }
}

function $cleartomark() {
    while ($j > 0 && $k[--$j] !== Infinity);
}

function $counttomark() {
    for (var i = $j - 1; i >= 0 && $k[i] !== Infinity; i--);
    return $j - i - 1;
}

function $aload(a) {
    for (var i = 0, l = a.length, b = a.b, o = a.o; i < l; i++) {
        $k[$j++] = b[o + i];
    }
    // This push has been optimized out.  See $.aload() in psc.js.
    //$k[$j++] = a;
}

function $astore(a) {
    for (var i = 0, l = a.length, b = a.b, o = a.o + l - 1; i < l; i++) {
        b[o - i] = $k[--$j];
    }
    $k[$j++] = a;
}

function $eq(a, b) {
    if (typeof a === 'string' && typeof b === 'string') {
        return a == b;
    }
    if (a instanceof Uint8Array && b instanceof Uint8Array) {
        if (a.length != b.length) {
            return false;
        }
        for (var i = 0, l = a.length; i < l; i++) {
            if (a[i] != b[i]) {
                return false;
            }
        }
        return true;
    }
    if (a instanceof Uint8Array && typeof b === 'string' ||
        b instanceof Uint8Array && typeof a === 'string') {
        if (a instanceof Uint8Array) {
            a = $z(a);
        } else {
            b = $z(b);
        }
        return a == b;
    }
    return a == b;
}

function $ne(a, b) {
    return !$eq(a, b);
}

function $lt(a, b) {
    if (a instanceof Uint8Array) {
        a = $z(a);
    }
    if (b instanceof Uint8Array) {
        b = $z(b);
    }
    return a < b;
}

function $le(a, b) {
    if (a instanceof Uint8Array) {
        a = $z(a);
    }
    if (b instanceof Uint8Array) {
        b = $z(b);
    }
    return a <= b;
}

function $gt(a, b) {
    if (a instanceof Uint8Array) {
        a = $z(a);
    }
    if (b instanceof Uint8Array) {
        b = $z(b);
    }
    return a > b;
}

function $ge(a, b) {
    if (a instanceof Uint8Array) {
        a = $z(a);
    }
    if (b instanceof Uint8Array) {
        b = $z(b);
    }
    return a >= b;
}

function $an(a, b) { // and
    return (typeof a === 'boolean') ? a && b : a & b;
}

function $or(a, b) { // or
    return (typeof a === 'boolean') ? a || b : a | b;
}

function $xo(a, b) { // xor
    return (typeof a === 'boolean') ? !a && b || a && !b : a ^ b;
}

function $nt(a) {
    return typeof a == 'boolean' ? !a : ~a;
}
// emulate single-precision floating-point (pseudo-polyfill for Math.fround)
var $f = (function(fa) {
    return function(v) {
        return Number.isInteger(v) ? v : (fa[0] = v, fa[0]);
    };
})(new Float32Array(1));

// This is a replacement for the BWIPP raiseerror function.
function bwipp_raiseerror() {
    var info = $k[--$j];
    var name = $k[--$j];
    throw new Error($z(name) + ": " + $z(info));
}

// This is a replacement for the BWIPP processoptions function.
// We cannot use the BWIPP version due to two reasons:
// - legacy code allows strings to be numbers and numbers to be strings
// - in javascript, there is no way to tell the difference between a real
//   number that is an integer, and an actual integer.
//
// options currentdict processoptions exec -> options
function bwipp_processoptions() {
    var dict = $k[--$j];
    var opts = $k[$j - 1];
    var map = opts instanceof Map;
    for (var id in dict) {
        var val;
        if (map) {
            if (!opts.has(id)) {
                continue;
            }
            val = opts.get(id);
        } else {
            if (!opts.hasOwnProperty(id)) {
                continue;
            }
            val = opts[id];
        }
        var def = dict[id];
        var typ = typeof def;

        // null is a placeholder for realtype
        if (def == null || typ == 'number') {
            // This allows for numeric strings
            if (!isFinite(+val)) {
                throw new Error('bwipp.invalidOptionType: ' + id +
                    ': not a realtype: ' + val);
            }
            if (typeof val == 'string') {
                val = +val;
                map ? opts.set(id, val) : (opts[id] = val);
            }
        } else if (typ == 'boolean') {
            if (val !== true && val !== false) {
                // In keeping with the ethos of javascript, allow a more relaxed
                // interpretation of boolean.
                if (val == null || (val | 0) === val) {
                    val = !!val;
                } else if (val == 'true') {
                    val = true;
                } else if (val == 'false') {
                    val = false;
                } else {
                    throw new Error('bwipp.invalidOptionType: ' + id +
                        ': not a booleantype: ' + val);
                }
                map ? opts.set(id, val) : (opts[id] = val);
            }
        } else if (typ == 'string' || def instanceof Uint8Array) {
            // This allows numbers to be strings
            if (typeof val == 'number') {
                val = '' + val;
                map ? opts.set(id, val) : (opts[id] = val);
            } else if (typeof val != 'string' && !(val instanceof Uint8Array)) {
                throw new Error('bwipp.invalidOptionType: ' + id +
                    ': not a stringtype: ' + val);
            }
        }
        // Set the option into the dictionary
        dict[id] = val;
    }
}

// Replacement for loadctx which contains complex postscript operations
// that we don't implement correctly.
// f is a reference to the enclosing function.
function bwipp_loadctx(f) {
    if (!f.$ctx) {
        f.$ctx = {};
    }
    var next = Object.getPrototypeOf($_);
    Object.setPrototypeOf(f.$ctx, next);
    Object.setPrototypeOf($_, f.$ctx);
}

function bwipp_parseinput() {
    $_ = Object.create($_); //#200
    bwipp_loadctx(bwipp_parseinput) //#202
    $_.fncvals = $k[--$j]; //#204
    $_.barcode = $k[--$j]; //#205
    var _2 = 'parse'; //#207
    $_[_2] = $get($_.fncvals, _2); //#207
    delete $_.fncvals[_2]; //#207
    var _6 = 'parsefnc'; //#208
    $_[_6] = $get($_.fncvals, _6); //#208
    delete $_.fncvals[_6]; //#208
    var _A = 'parseonly'; //#209
    var _C = $get($_.fncvals, _A) !== undefined; //#209
    $_[_A] = _C; //#209
    delete $_.fncvals[_A]; //#209
    var _E = 'eci'; //#210
    var _G = $get($_.fncvals, _E) !== undefined; //#210
    $_[_E] = _G; //#210
    delete $_.fncvals[_E]; //#210
    if (!bwipp_parseinput.__225__) { //#225
        $_ = Object.create($_); //#225
        $k[$j++] = Infinity; //#223
        var _I = $a(['NUL', 'SOH', 'STX', 'ETX', 'EOT', 'ENQ', 'ACK', 'BEL', 'BS', 'TAB', 'LF', 'VT', 'FF', 'CR', "", "", 'DLE', 'DC1', 'DC2', 'DC3', 'DC4', 'NAK', 'SYN', 'ETB', 'CAN', 'EM', 'SUB', 'ESC', 'FS', 'GS', 'RS', 'US']); //#219
        $k[$j++] = 0; //#223
        for (var _J = 0, _K = _I.length; _J < _K; _J++) { //#223
            var _M = $k[--$j]; //#222
            $k[$j++] = $get(_I, _J); //#222
            $k[$j++] = _M; //#222
            $k[$j++] = $f(_M + 1); //#222
        } //#222
        $j--; //#223
        $_.ctrl = $d(); //#224
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_parseinput.$ctx[id] = $_[id]); //#224
        bwipp_parseinput.__225__ = 1; //#224
        $_ = Object.getPrototypeOf($_); //#224
    } //#224
    $_.msg = $a($_.barcode.length); //#227
    $_.j = 0; //#228
    $k[$j++] = $_.barcode; //#347
    for (;;) { //#347
        $search($k[--$j], "^"); //#230
        var _T = $k[--$j]; //#230
        var _U = $k[--$j]; //#230
        $k[$j++] = _T; //#233
        $k[$j++] = _U.length; //#233
        $k[$j++] = $_.msg; //#233
        $k[$j++] = $_.j; //#233
        $k[$j++] = _U; //#233
        $k[$j++] = Infinity; //#233
        var _X = $k[--$j]; //#233
        var _Y = $k[--$j]; //#233
        $k[$j++] = _X; //#233
        $forall(_Y); //#233
        var _Z = $a(); //#233
        var _a = $k[--$j]; //#233
        $puti($k[--$j], _a, _Z); //#233
        $_.j = $f($k[--$j] + $_.j); //#234
        if ($k[--$j]) { //#345
            $j--; //#236
            for (var _f = 0, _g = 1; _f < _g; _f++) { //#343
                if ($an($nt($_.parse), $nt($_.parsefnc))) { //#243
                    $put($_.msg, $_.j, 94); //#240
                    $_.j = $f($_.j + 1); //#241
                    break; //#242
                } //#242
                $put($_.msg, $_.j, 94); //#246
                $_.j = $f($_.j + 1); //#247
                if ($_.parse) { //#290
                    var _q = $k[--$j]; //#251
                    $k[$j++] = _q; //#262
                    if (_q.length >= 3) { //#262
                        var _r = $k[--$j]; //#252
                        var _s = $geti(_r, 0, 3); //#252
                        var _t = $_.ctrl; //#252
                        var _u = $get(_t, _s) !== undefined; //#253
                        $k[$j++] = _r; //#261
                        $k[$j++] = _t; //#261
                        $k[$j++] = _s; //#261
                        if (_u) { //#260
                            $_.j = $f($_.j - 1); //#254
                            var _w = $k[--$j]; //#255
                            $put($_.msg, $_.j, $get($k[--$j], _w)); //#255
                            $_.j = $f($_.j + 1); //#256
                            var _12 = $k[--$j]; //#257
                            $k[$j++] = $geti(_12, 3, _12.length - 3); //#258
                            break; //#258
                        } else { //#260
                            $j -= 2; //#260
                        } //#260
                    } //#260
                    var _14 = $k[--$j]; //#263
                    $k[$j++] = _14; //#274
                    if (_14.length >= 2) { //#274
                        var _15 = $k[--$j]; //#264
                        var _16 = $geti(_15, 0, 2); //#264
                        var _17 = $_.ctrl; //#264
                        var _18 = $get(_17, _16) !== undefined; //#265
                        $k[$j++] = _15; //#273
                        $k[$j++] = _17; //#273
                        $k[$j++] = _16; //#273
                        if (_18) { //#272
                            $_.j = $f($_.j - 1); //#266
                            var _1A = $k[--$j]; //#267
                            $put($_.msg, $_.j, $get($k[--$j], _1A)); //#267
                            $_.j = $f($_.j + 1); //#268
                            var _1G = $k[--$j]; //#269
                            $k[$j++] = $geti(_1G, 2, _1G.length - 2); //#270
                            break; //#270
                        } else { //#272
                            $j -= 2; //#272
                        } //#272
                    } //#272
                    var _1I = $k[--$j]; //#275
                    $k[$j++] = _1I; //#289
                    if (_1I.length >= 3) { //#289
                        var _1J = $k[--$j]; //#276
                        var _1K = $geti(_1J, 0, 3); //#276
                        $k[$j++] = _1J; //#278
                        $k[$j++] = true; //#278
                        for (var _1L = 0, _1M = _1K.length; _1L < _1M; _1L++) { //#278
                            var _1N = $get(_1K, _1L); //#278
                            if ((_1N < 48) || (_1N > 57)) { //#277
                                $j--; //#277
                                $k[$j++] = false; //#277
                            } //#277
                        } //#277
                        if ($k[--$j]) { //#288
                            var _1P = $k[--$j]; //#280
                            var _1R = $cvi($geti(_1P, 0, 3)); //#280
                            $k[$j++] = _1P; //#283
                            $k[$j++] = _1R; //#283
                            if (_1R > 255) { //#283
                                $j -= 2; //#281
                                $k[$j++] = 'bwipp.invalidOrdinal#282'; //#282
                                $k[$j++] = "Ordinal must be 000 to 255"; //#282
                                bwipp_raiseerror(); //#282
                            } //#282
                            $_.j = $f($_.j - 1); //#284
                            $put($_.msg, $_.j, $k[--$j]); //#285
                            $_.j = $f($_.j + 1); //#286
                            var _1X = $k[--$j]; //#287
                            $k[$j++] = $geti(_1X, 3, _1X.length - 3); //#287
                        } //#287
                    } //#287
                } //#287
                if (($or($_.parseonly, $nt($_.parsefnc))) || ($get($_.msg, $f($_.j - 1)) != 94)) { //#295
                    break; //#295
                } //#295
                $_.j = $f($_.j - 1); //#298
                var _1f = $k[--$j]; //#299
                $k[$j++] = _1f; //#302
                if (_1f.length < 3) { //#302
                    $j--; //#300
                    $k[$j++] = 'bwipp.truncatedFNC#301'; //#301
                    $k[$j++] = "Function character truncated"; //#301
                    bwipp_raiseerror(); //#301
                } //#301
                var _1g = $k[--$j]; //#303
                $k[$j++] = _1g; //#308
                if ($get(_1g, 0) == 94) { //#308
                    $put($_.msg, $_.j, 94); //#304
                    $_.j = $f($_.j + 1); //#305
                    var _1l = $k[--$j]; //#306
                    $k[$j++] = $geti(_1l, 1, _1l.length - 1); //#307
                    break; //#307
                } //#307
                var _1n = $k[--$j]; //#309
                $k[$j++] = _1n; //#326
                if ($eq($geti(_1n, 0, 3), "ECI") && $_.eci) { //#326
                    var _1q = $k[--$j]; //#310
                    $k[$j++] = _1q; //#313
                    if (_1q.length < 9) { //#313
                        $j--; //#311
                        $k[$j++] = 'bwipp.truncatedECI#312'; //#312
                        $k[$j++] = "ECI truncated"; //#312
                        bwipp_raiseerror(); //#312
                    } //#312
                    var _1r = $k[--$j]; //#314
                    var _1s = $geti(_1r, 3, 6); //#314
                    $k[$j++] = _1r; //#320
                    $k[$j++] = _1s; //#320
                    for (var _1t = 0, _1u = _1s.length; _1t < _1u; _1t++) { //#320
                        var _1v = $get(_1s, _1t); //#320
                        if ((_1v < 48) || (_1v > 57)) { //#319
                            $j -= 2; //#317
                            $k[$j++] = 'bwipp.invalidECI#318'; //#318
                            $k[$j++] = "ECI must be 000000 to 999999"; //#318
                            bwipp_raiseerror(); //#318
                        } //#318
                    } //#318
                    var _1w = $k[--$j]; //#321
                    $k[$j++] = 0; //#321
                    $forall(_1w, function() { //#321
                        var _1x = $k[--$j]; //#321
                        var _1y = $k[--$j]; //#321
                        $k[$j++] = ($f(_1y - $f(_1x - 48))) * 10; //#321
                    }); //#321
                    $put($_.msg, $_.j, (~~($k[--$j] / 10)) - 1000000); //#322
                    $_.j = $f($_.j + 1); //#323
                    var _23 = $k[--$j]; //#324
                    $k[$j++] = $geti(_23, 9, _23.length - 9); //#325
                    break; //#325
                } //#325
                var _25 = $k[--$j]; //#327
                $k[$j++] = _25; //#330
                if (_25.length < 4) { //#330
                    $j--; //#328
                    $k[$j++] = 'bwipp.truncatedFNC#329'; //#329
                    $k[$j++] = "Function character truncated"; //#329
                    bwipp_raiseerror(); //#329
                } //#329
                var _26 = $k[--$j]; //#331
                var _27 = $geti(_26, 0, 4); //#331
                var _29 = $get($_.fncvals, _27) !== undefined; //#331
                $k[$j++] = _26; //#336
                $k[$j++] = _27; //#336
                if (!_29) { //#336
                    var _2A = $k[--$j]; //#332
                    var _2B = $s(_2A.length + 28); //#332
                    $puti(_2B, 28, _2A); //#332
                    $puti(_2B, 0, "Unknown function character: "); //#333
                    var _2C = $k[--$j]; //#334
                    $k[$j++] = _2B; //#334
                    $k[$j++] = _2C; //#334
                    $j--; //#334
                    var _2D = $k[--$j]; //#335
                    $k[$j++] = 'bwipp.unknownFNC#335'; //#335
                    $k[$j++] = _2D; //#335
                    bwipp_raiseerror(); //#335
                } //#335
                $put($_.msg, $_.j, $get($_.fncvals, $k[--$j])); //#338
                $_.j = $f($_.j + 1); //#339
                var _2K = $k[--$j]; //#340
                $k[$j++] = $geti(_2K, 4, _2K.length - 4); //#341
                break; //#341
            } //#341
        } else { //#345
            break; //#345
        } //#345
    } //#345
    if ($nt($_.parseonly)) { //#353
        $k[$j++] = $geti($_.msg, 0, $_.j); //#350
    } else { //#353
        $k[$j++] = $s($_.j); //#353
        for (var _2U = 0, _2T = $f($_.j - 1); _2U <= _2T; _2U += 1) { //#353
            var _2V = $k[--$j]; //#353
            $put(_2V, _2U, $get($_.msg, _2U)); //#353
            $k[$j++] = _2V; //#353
        } //#353
    } //#353
    $_ = Object.getPrototypeOf($_); //#356
    $_ = Object.getPrototypeOf($_); //#358
}

function bwipp_gs1process() {
    $_ = Object.create($_); //#383
    bwipp_loadctx(bwipp_gs1process) //#385
    if (!bwipp_gs1process.__2289__) { //#2289
        $_ = Object.create($_); //#2289
        var _1 = new Map([
            ["cset", 'N'],
            ["min", 18],
            ["max", 18],
            ["opt", false],
            ["linters", $a(['lintcsum', 'lintkey'])]
        ]); //#393
        var _2 = $a([_1]); //#393
        var _3 = $a([]); //#395
        var _4 = new Map([
            ["parts", _2],
            ["dlpkey", _3]
        ]); //#395
        var _5 = $a(['lintcsum', 'lintkey']); //#402
        var _6 = new Map([
            ["cset", 'N'],
            ["min", 14],
            ["max", 14],
            ["opt", false],
            ["linters", _5]
        ]); //#402
        var _7 = $a([_6]); //#402
        var _8 = $a(["02", "255", "37"]); //#404
        var _9 = $a(["22", "10", "21"]); //#405
        var _A = $a(["235"]); //#405
        var _B = $a([_9, _A]); //#405
        var _C = new Map([
            ["parts", _7],
            ["ex", _8],
            ["dlpkey", _B]
        ]); //#405
        var _D = $a(['lintcsum', 'lintkey']); //#412
        var _E = new Map([
            ["cset", 'N'],
            ["min", 14],
            ["max", 14],
            ["opt", false],
            ["linters", _D]
        ]); //#412
        var _F = $a([_E]); //#412
        var _G = $a(["37"]); //#414
        var _H = $a([_G]); //#414
        var _I = new Map([
            ["parts", _F],
            ["req", _H]
        ]); //#414
        var _K = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#421
        var _O = new Map([
            ["parts", $a([_K])],
            ["req", $a([$a(["01", "02", "8006", "8026"])])]
        ]); //#423
        var _Q = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a(['lintyymmd0'])]
        ]); //#430
        var _U = new Map([
            ["parts", $a([_Q])],
            ["req", $a([$a(["01", "02", "8006", "8026"])])]
        ]); //#432
        var _W = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a(['lintyymmd0'])]
        ]); //#439
        var _a = new Map([
            ["parts", $a([_W])],
            ["req", $a([$a(["8020"])])]
        ]); //#441
        var _c = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a(['lintyymmd0'])]
        ]); //#448
        var _g = new Map([
            ["parts", $a([_c])],
            ["req", $a([$a(["01", "02", "8006", "8026"])])]
        ]); //#450
        var _i = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a(['lintyymmd0'])]
        ]); //#459
        var _m = new Map([
            ["parts", $a([_i])],
            ["req", $a([$a(["01", "02", "255", "8006", "8026"])])]
        ]); //#461
        var _o = new Map([
            ["cset", 'N'],
            ["min", 2],
            ["max", 2],
            ["opt", false],
            ["linters", $a([])]
        ]); //#468
        var _s = new Map([
            ["parts", $a([_o])],
            ["req", $a([$a(["01", "02", "8006", "8026"])])]
        ]); //#470
        var _u = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#477
        var _z = new Map([
            ["parts", $a([_u])],
            ["ex", $a(["235"])],
            ["req", $a([$a(["01", "8006"])])]
        ]); //#480
        var _11 = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#487
        var _15 = new Map([
            ["parts", $a([_11])],
            ["req", $a([$a(["01"])])]
        ]); //#489
        var _17 = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 28],
            ["opt", false],
            ["linters", $a([])]
        ]); //#496
        var _1B = new Map([
            ["parts", $a([_17])],
            ["req", $a([$a(["01"])])]
        ]); //#498
        var _1D = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 30],
            ["opt", false],
            ["linters", $a([])]
        ]); //#505
        var _1H = new Map([
            ["parts", $a([_1D])],
            ["req", $a([$a(["01", "02", "8006", "8026"])])]
        ]); //#507
        var _1J = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#515
        var _1N = new Map([
            ["parts", $a([_1J])],
            ["req", $a([$a(["01", "02", "8006", "8026"])])]
        ]); //#517
        var _1P = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#524
        var _1T = new Map([
            ["parts", $a([_1P])],
            ["req", $a([$a(["01"])])]
        ]); //#526
        var _1V = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 30],
            ["opt", false],
            ["linters", $a([])]
        ]); //#533
        var _1a = new Map([
            ["parts", $a([_1V])],
            ["req", $a([$a(["01", "8006"]), $a(["21"])])]
        ]); //#535
        var _1c = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 30],
            ["opt", false],
            ["linters", $a([])]
        ]); //#542
        var _1g = new Map([
            ["parts", $a([_1c])],
            ["req", $a([$a(["01", "8006"])])]
        ]); //#544
        var _1i = new Map([
            ["cset", 'N'],
            ["min", 13],
            ["max", 13],
            ["opt", false],
            ["linters", $a(['lintcsum', 'lintkey'])]
        ]); //#551
        var _1k = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 17],
            ["opt", true],
            ["linters", $a([])]
        ]); //#552
        var _1n = new Map([
            ["parts", $a([_1i, _1k])],
            ["dlpkey", $a([])]
        ]); //#554
        var _1p = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#561
        var _1t = new Map([
            ["parts", $a([_1p])],
            ["req", $a([$a(["414"])])]
        ]); //#563
        var _1v = new Map([
            ["cset", 'N'],
            ["min", 13],
            ["max", 13],
            ["opt", false],
            ["linters", $a(['lintcsum', 'lintkey'])]
        ]); //#570
        var _1x = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 12],
            ["opt", true],
            ["linters", $a([])]
        ]); //#571
        var _21 = new Map([
            ["parts", $a([_1v, _1x])],
            ["ex", $a(["01", "02", "415", "8006", "8020", "8026"])],
            ["dlpkey", $a([])]
        ]); //#574
        var _22 = $a([]); //#581
        var _23 = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 8],
            ["opt", false],
            ["linters", _22]
        ]); //#581
        var _27 = new Map([
            ["parts", $a([_23])],
            ["req", $a([$a(["01", "02"])])]
        ]); //#583
        var _29 = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#590
        var _2E = new Map([
            ["parts", $a([_29])],
            ["ex", $a(["310n"])],
            ["req", $a([$a(["01", "02"])])]
        ]); //#593
        var _2G = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#605
        var _2L = new Map([
            ["parts", $a([_2G])],
            ["ex", $a(["311n"])],
            ["req", $a([$a(["01", "02"])])]
        ]); //#608
        var _2N = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#620
        var _2S = new Map([
            ["parts", $a([_2N])],
            ["ex", $a(["312n"])],
            ["req", $a([$a(["01", "02"])])]
        ]); //#623
        var _2U = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#635
        var _2Z = new Map([
            ["parts", $a([_2U])],
            ["ex", $a(["313n"])],
            ["req", $a([$a(["01", "02"])])]
        ]); //#638
        var _2b = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#650
        var _2g = new Map([
            ["parts", $a([_2b])],
            ["ex", $a(["314n"])],
            ["req", $a([$a(["01", "02"])])]
        ]); //#653
        var _2i = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#665
        var _2n = new Map([
            ["parts", $a([_2i])],
            ["ex", $a(["315n"])],
            ["req", $a([$a(["01", "02"])])]
        ]); //#668
        var _2p = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#680
        var _2u = new Map([
            ["parts", $a([_2p])],
            ["ex", $a(["316n"])],
            ["req", $a([$a(["01", "02"])])]
        ]); //#683
        var _2w = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#695
        var _31 = new Map([
            ["parts", $a([_2w])],
            ["ex", $a(["320n"])],
            ["req", $a([$a(["01", "02"])])]
        ]); //#698
        var _33 = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#710
        var _38 = new Map([
            ["parts", $a([_33])],
            ["ex", $a(["321n"])],
            ["req", $a([$a(["01", "02"])])]
        ]); //#713
        var _3A = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#725
        var _3F = new Map([
            ["parts", $a([_3A])],
            ["ex", $a(["322n"])],
            ["req", $a([$a(["01", "02"])])]
        ]); //#728
        var _3H = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#740
        var _3M = new Map([
            ["parts", $a([_3H])],
            ["ex", $a(["323n"])],
            ["req", $a([$a(["01", "02"])])]
        ]); //#743
        var _3O = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#755
        var _3T = new Map([
            ["parts", $a([_3O])],
            ["ex", $a(["324n"])],
            ["req", $a([$a(["01", "02"])])]
        ]); //#758
        var _3V = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#770
        var _3a = new Map([
            ["parts", $a([_3V])],
            ["ex", $a(["325n"])],
            ["req", $a([$a(["01", "02"])])]
        ]); //#773
        var _3c = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#785
        var _3h = new Map([
            ["parts", $a([_3c])],
            ["ex", $a(["326n"])],
            ["req", $a([$a(["01", "02"])])]
        ]); //#788
        var _3j = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#800
        var _3o = new Map([
            ["parts", $a([_3j])],
            ["ex", $a(["327n"])],
            ["req", $a([$a(["01", "02"])])]
        ]); //#803
        var _3q = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#815
        var _3v = new Map([
            ["parts", $a([_3q])],
            ["ex", $a(["328n"])],
            ["req", $a([$a(["01", "02"])])]
        ]); //#818
        var _3x = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#830
        var _42 = new Map([
            ["parts", $a([_3x])],
            ["ex", $a(["329n"])],
            ["req", $a([$a(["01", "02"])])]
        ]); //#833
        var _44 = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#845
        var _49 = new Map([
            ["parts", $a([_44])],
            ["ex", $a(["330n"])],
            ["req", $a([$a(["00", "01"])])]
        ]); //#848
        var _4B = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#860
        var _4G = new Map([
            ["parts", $a([_4B])],
            ["ex", $a(["331n"])],
            ["req", $a([$a(["00", "01"])])]
        ]); //#863
        var _4I = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#875
        var _4N = new Map([
            ["parts", $a([_4I])],
            ["ex", $a(["332n"])],
            ["req", $a([$a(["00", "01"])])]
        ]); //#878
        var _4P = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#890
        var _4U = new Map([
            ["parts", $a([_4P])],
            ["ex", $a(["333n"])],
            ["req", $a([$a(["00", "01"])])]
        ]); //#893
        var _4W = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#905
        var _4b = new Map([
            ["parts", $a([_4W])],
            ["ex", $a(["334n"])],
            ["req", $a([$a(["00", "01"])])]
        ]); //#908
        var _4d = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#920
        var _4i = new Map([
            ["parts", $a([_4d])],
            ["ex", $a(["335n"])],
            ["req", $a([$a(["00", "01"])])]
        ]); //#923
        var _4k = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#935
        var _4p = new Map([
            ["parts", $a([_4k])],
            ["ex", $a(["336n"])],
            ["req", $a([$a(["00", "01"])])]
        ]); //#938
        var _4r = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#950
        var _4w = new Map([
            ["parts", $a([_4r])],
            ["ex", $a(["337n"])],
            ["req", $a([$a(["01"])])]
        ]); //#953
        var _4y = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#965
        var _53 = new Map([
            ["parts", $a([_4y])],
            ["ex", $a(["340n"])],
            ["req", $a([$a(["00", "01"])])]
        ]); //#968
        var _55 = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#980
        var _5A = new Map([
            ["parts", $a([_55])],
            ["ex", $a(["341n"])],
            ["req", $a([$a(["00", "01"])])]
        ]); //#983
        var _5C = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#995
        var _5H = new Map([
            ["parts", $a([_5C])],
            ["ex", $a(["342n"])],
            ["req", $a([$a(["00", "01"])])]
        ]); //#998
        var _5J = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1010
        var _5O = new Map([
            ["parts", $a([_5J])],
            ["ex", $a(["343n"])],
            ["req", $a([$a(["00", "01"])])]
        ]); //#1013
        var _5Q = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1025
        var _5V = new Map([
            ["parts", $a([_5Q])],
            ["ex", $a(["344n"])],
            ["req", $a([$a(["00", "01"])])]
        ]); //#1028
        var _5X = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1040
        var _5c = new Map([
            ["parts", $a([_5X])],
            ["ex", $a(["345n"])],
            ["req", $a([$a(["00", "01"])])]
        ]); //#1043
        var _5e = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1055
        var _5j = new Map([
            ["parts", $a([_5e])],
            ["ex", $a(["346n"])],
            ["req", $a([$a(["00", "01"])])]
        ]); //#1058
        var _5l = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1070
        var _5q = new Map([
            ["parts", $a([_5l])],
            ["ex", $a(["347n"])],
            ["req", $a([$a(["00", "01"])])]
        ]); //#1073
        var _5s = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1085
        var _5x = new Map([
            ["parts", $a([_5s])],
            ["ex", $a(["348n"])],
            ["req", $a([$a(["00", "01"])])]
        ]); //#1088
        var _5z = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1100
        var _64 = new Map([
            ["parts", $a([_5z])],
            ["ex", $a(["349n"])],
            ["req", $a([$a(["00", "01"])])]
        ]); //#1103
        var _66 = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1115
        var _6B = new Map([
            ["parts", $a([_66])],
            ["ex", $a(["350n"])],
            ["req", $a([$a(["01", "02"])])]
        ]); //#1118
        var _6D = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1130
        var _6I = new Map([
            ["parts", $a([_6D])],
            ["ex", $a(["351n"])],
            ["req", $a([$a(["01", "02"])])]
        ]); //#1133
        var _6K = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1145
        var _6P = new Map([
            ["parts", $a([_6K])],
            ["ex", $a(["352n"])],
            ["req", $a([$a(["01", "02"])])]
        ]); //#1148
        var _6R = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1160
        var _6W = new Map([
            ["parts", $a([_6R])],
            ["ex", $a(["353n"])],
            ["req", $a([$a(["00", "01"])])]
        ]); //#1163
        var _6Y = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1175
        var _6d = new Map([
            ["parts", $a([_6Y])],
            ["ex", $a(["354n"])],
            ["req", $a([$a(["00", "01"])])]
        ]); //#1178
        var _6f = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1190
        var _6k = new Map([
            ["parts", $a([_6f])],
            ["ex", $a(["355n"])],
            ["req", $a([$a(["00", "01"])])]
        ]); //#1193
        var _6m = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1205
        var _6r = new Map([
            ["parts", $a([_6m])],
            ["ex", $a(["356n"])],
            ["req", $a([$a(["01", "02"])])]
        ]); //#1208
        var _6t = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1220
        var _6y = new Map([
            ["parts", $a([_6t])],
            ["ex", $a(["357n"])],
            ["req", $a([$a(["01", "02"])])]
        ]); //#1223
        var _70 = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1235
        var _75 = new Map([
            ["parts", $a([_70])],
            ["ex", $a(["360n"])],
            ["req", $a([$a(["01", "02"])])]
        ]); //#1238
        var _77 = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1250
        var _7C = new Map([
            ["parts", $a([_77])],
            ["ex", $a(["361n"])],
            ["req", $a([$a(["01", "02"])])]
        ]); //#1253
        var _7E = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1265
        var _7J = new Map([
            ["parts", $a([_7E])],
            ["ex", $a(["362n"])],
            ["req", $a([$a(["00", "01"])])]
        ]); //#1268
        var _7L = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1280
        var _7Q = new Map([
            ["parts", $a([_7L])],
            ["ex", $a(["363n"])],
            ["req", $a([$a(["00", "01"])])]
        ]); //#1283
        var _7S = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1295
        var _7X = new Map([
            ["parts", $a([_7S])],
            ["ex", $a(["364n"])],
            ["req", $a([$a(["01", "02"])])]
        ]); //#1298
        var _7Z = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1310
        var _7e = new Map([
            ["parts", $a([_7Z])],
            ["ex", $a(["365n"])],
            ["req", $a([$a(["01", "02"])])]
        ]); //#1313
        var _7g = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1325
        var _7l = new Map([
            ["parts", $a([_7g])],
            ["ex", $a(["366n"])],
            ["req", $a([$a(["01", "02"])])]
        ]); //#1328
        var _7n = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1340
        var _7s = new Map([
            ["parts", $a([_7n])],
            ["ex", $a(["367n"])],
            ["req", $a([$a(["00", "01"])])]
        ]); //#1343
        var _7u = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1355
        var _7z = new Map([
            ["parts", $a([_7u])],
            ["ex", $a(["368n"])],
            ["req", $a([$a(["00", "01"])])]
        ]); //#1358
        var _81 = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1370
        var _86 = new Map([
            ["parts", $a([_81])],
            ["ex", $a(["369n"])],
            ["req", $a([$a(["00", "01"])])]
        ]); //#1373
        var _88 = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 8],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1385
        var _8D = new Map([
            ["parts", $a([_88])],
            ["req", $a([$a(["00"]), $a(["02", "8026"])])]
        ]); //#1387
        var _8F = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 15],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1394
        var _8K = new Map([
            ["parts", $a([_8F])],
            ["ex", $a(["390n", "391n", "394n", "8111"])],
            ["req", $a([$a(["255", "8020"])])]
        ]); //#1397
        var _8M = new Map([
            ["cset", 'N'],
            ["min", 3],
            ["max", 3],
            ["opt", false],
            ["linters", $a(['lintiso4217'])]
        ]); //#1413
        var _8O = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 15],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1414
        var _8T = new Map([
            ["parts", $a([_8M, _8O])],
            ["ex", $a(["391n"])],
            ["req", $a([$a(["8020"])])]
        ]); //#1417
        var _8V = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 15],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1433
        var _8b = new Map([
            ["parts", $a([_8V])],
            ["ex", $a(["392n", "393n"])],
            ["req", $a([$a(["01"]), $a(["30", "31nn", "32nn", "35nn", "36nn"])])]
        ]); //#1436
        var _8d = new Map([
            ["cset", 'N'],
            ["min", 3],
            ["max", 3],
            ["opt", false],
            ["linters", $a(['lintiso4217'])]
        ]); //#1452
        var _8f = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 15],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1453
        var _8k = new Map([
            ["parts", $a([_8d, _8f])],
            ["ex", $a(["393n"])],
            ["req", $a([$a(["30", "31nn", "32nn", "35nn", "36nn"])])]
        ]); //#1456
        var _8m = new Map([
            ["cset", 'N'],
            ["min", 4],
            ["max", 4],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1472
        var _8r = new Map([
            ["parts", $a([_8m])],
            ["ex", $a(["394n", "8111"])],
            ["req", $a([$a(["255"])])]
        ]); //#1475
        var _8t = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1485
        var _8y = new Map([
            ["parts", $a([_8t])],
            ["ex", $a(["392n", "393n", "395n", "8005"])],
            ["req", $a([$a(["30", "31nn", "32nn", "35nn", "36nn"])])]
        ]); //#1488
        var _90 = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 30],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1500
        var _92 = new Map([
            ["parts", $a([_90])]
        ]); //#1500
        var _94 = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 30],
            ["opt", false],
            ["linters", $a(['lintkey'])]
        ]); //#1508
        var _97 = new Map([
            ["parts", $a([_94])],
            ["dlpkey", $a([])]
        ]); //#1510
        var _99 = new Map([
            ["cset", 'N'],
            ["min", 17],
            ["max", 17],
            ["opt", false],
            ["linters", $a(['lintcsum', 'lintkey'])]
        ]); //#1517
        var _9C = new Map([
            ["parts", $a([_99])],
            ["dlpkey", $a([])]
        ]); //#1519
        var _9E = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 30],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1526
        var _9I = new Map([
            ["parts", $a([_9E])],
            ["req", $a([$a(["00"])])]
        ]); //#1528
        var _9K = new Map([
            ["cset", 'N'],
            ["min", 13],
            ["max", 13],
            ["opt", false],
            ["linters", $a(['lintcsum', 'lintkey'])]
        ]); //#1535
        var _9M = new Map([
            ["parts", $a([_9K])]
        ]); //#1535
        var _9O = new Map([
            ["cset", 'N'],
            ["min", 13],
            ["max", 13],
            ["opt", false],
            ["linters", $a(['lintcsum', 'lintkey'])]
        ]); //#1546
        var _9T = new Map([
            ["parts", $a([_9O])],
            ["dlpkey", $a([$a(["254"]), $a(["7040"])])]
        ]); //#1548
        var _9V = new Map([
            ["cset", 'N'],
            ["min", 13],
            ["max", 13],
            ["opt", false],
            ["linters", $a(['lintcsum', 'lintkey'])]
        ]); //#1555
        var _9b = new Map([
            ["parts", $a([_9V])],
            ["req", $a([$a(["8020"])])],
            ["dlpkey", $a([$a(["8020"])])]
        ]); //#1558
        var _9d = new Map([
            ["cset", 'N'],
            ["min", 13],
            ["max", 13],
            ["opt", false],
            ["linters", $a(['lintcsum', 'lintkey'])]
        ]); //#1565
        var _9f = new Map([
            ["parts", $a([_9d])]
        ]); //#1565
        var _9h = new Map([
            ["cset", 'N'],
            ["min", 13],
            ["max", 13],
            ["opt", false],
            ["linters", $a(['lintcsum', 'lintkey'])]
        ]); //#1573
        var _9l = new Map([
            ["parts", $a([_9h])],
            ["dlpkey", $a([$a(["7040"])])]
        ]); //#1575
        var _9n = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1582
        var _9q = new Map([
            ["parts", $a([_9n])],
            ["ex", $a(["421"])]
        ]); //#1584
        var _9s = new Map([
            ["cset", 'N'],
            ["min", 3],
            ["max", 3],
            ["opt", false],
            ["linters", $a(['lintiso3166'])]
        ]); //#1591
        var _9u = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 9],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1592
        var _9x = new Map([
            ["parts", $a([_9s, _9u])],
            ["ex", $a(["4307"])]
        ]); //#1594
        var _9z = new Map([
            ["cset", 'N'],
            ["min", 3],
            ["max", 3],
            ["opt", false],
            ["linters", $a(['lintiso3166'])]
        ]); //#1601
        var _A4 = new Map([
            ["parts", $a([_9z])],
            ["ex", $a(["426"])],
            ["req", $a([$a(["01", "02", "8006", "8026"])])]
        ]); //#1604
        var _A6 = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 15],
            ["opt", false],
            ["linters", $a(['lintiso3166list'])]
        ]); //#1611
        var _AB = new Map([
            ["parts", $a([_A6])],
            ["ex", $a(["426"])],
            ["req", $a([$a(["01", "02"])])]
        ]); //#1614
        var _AD = new Map([
            ["cset", 'N'],
            ["min", 3],
            ["max", 3],
            ["opt", false],
            ["linters", $a(['lintiso3166'])]
        ]); //#1621
        var _AI = new Map([
            ["parts", $a([_AD])],
            ["ex", $a(["426"])],
            ["req", $a([$a(["01", "02"])])]
        ]); //#1624
        var _AK = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 15],
            ["opt", false],
            ["linters", $a(['lintiso3166list'])]
        ]); //#1631
        var _AP = new Map([
            ["parts", $a([_AK])],
            ["ex", $a(["426"])],
            ["req", $a([$a(["01", "02"])])]
        ]); //#1634
        var _AR = new Map([
            ["cset", 'N'],
            ["min", 3],
            ["max", 3],
            ["opt", false],
            ["linters", $a(['lintiso3166'])]
        ]); //#1641
        var _AV = new Map([
            ["parts", $a([_AR])],
            ["req", $a([$a(["01", "02"])])]
        ]); //#1643
        var _AX = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 3],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1650
        var _Ac = new Map([
            ["parts", $a([_AX])],
            ["req", $a([$a(["01", "02"]), $a(["422"])])]
        ]); //#1652
        var _Ae = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 35],
            ["opt", false],
            ["linters", $a(['lintpcenc'])]
        ]); //#1659
        var _Ai = new Map([
            ["parts", $a([_Ae])],
            ["req", $a([$a(["00"])])]
        ]); //#1661
        var _Ak = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 70],
            ["opt", false],
            ["linters", $a(['lintpcenc'])]
        ]); //#1669
        var _Ao = new Map([
            ["parts", $a([_Ak])],
            ["req", $a([$a(["00"])])]
        ]); //#1671
        var _Aq = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 70],
            ["opt", false],
            ["linters", $a(['lintpcenc'])]
        ]); //#1678
        var _Au = new Map([
            ["parts", $a([_Aq])],
            ["req", $a([$a(["4302"])])]
        ]); //#1680
        var _Aw = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 70],
            ["opt", false],
            ["linters", $a(['lintpcenc'])]
        ]); //#1687
        var _B0 = new Map([
            ["parts", $a([_Aw])],
            ["req", $a([$a(["00"])])]
        ]); //#1689
        var _B2 = new Map([
            ["cset", 'X'],
            ["min", 2],
            ["max", 2],
            ["opt", false],
            ["linters", $a(['lintiso3166alpha2'])]
        ]); //#1698
        var _B6 = new Map([
            ["parts", $a([_B2])],
            ["req", $a([$a(["00"])])]
        ]); //#1700
        var _B8 = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 30],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1707
        var _BC = new Map([
            ["parts", $a([_B8])],
            ["req", $a([$a(["00"])])]
        ]); //#1709
        var _BE = new Map([
            ["cset", 'N'],
            ["min", 20],
            ["max", 20],
            ["opt", false],
            ["linters", $a(['lintlatlong'])]
        ]); //#1716
        var _BI = new Map([
            ["parts", $a([_BE])],
            ["req", $a([$a(["00"])])]
        ]); //#1718
        var _BK = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 35],
            ["opt", false],
            ["linters", $a(['lintpcenc'])]
        ]); //#1725
        var _BO = new Map([
            ["parts", $a([_BK])],
            ["req", $a([$a(["00"])])]
        ]); //#1727
        var _BQ = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 70],
            ["opt", false],
            ["linters", $a(['lintpcenc'])]
        ]); //#1735
        var _BU = new Map([
            ["parts", $a([_BQ])],
            ["req", $a([$a(["00"])])]
        ]); //#1737
        var _BW = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 70],
            ["opt", false],
            ["linters", $a(['lintpcenc'])]
        ]); //#1744
        var _Ba = new Map([
            ["parts", $a([_BW])],
            ["req", $a([$a(["4312"])])]
        ]); //#1746
        var _Bc = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 70],
            ["opt", false],
            ["linters", $a(['lintpcenc'])]
        ]); //#1753
        var _Bg = new Map([
            ["parts", $a([_Bc])],
            ["req", $a([$a(["00"])])]
        ]); //#1755
        var _Bi = new Map([
            ["cset", 'X'],
            ["min", 2],
            ["max", 2],
            ["opt", false],
            ["linters", $a(['lintiso3166alpha2'])]
        ]); //#1764
        var _Bm = new Map([
            ["parts", $a([_Bi])],
            ["req", $a([$a(["00"])])]
        ]); //#1766
        var _Bo = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1773
        var _Bs = new Map([
            ["parts", $a([_Bo])],
            ["req", $a([$a(["00"])])]
        ]); //#1775
        var _Bu = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 30],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1782
        var _By = new Map([
            ["parts", $a([_Bu])],
            ["req", $a([$a(["00"])])]
        ]); //#1784
        var _C0 = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 35],
            ["opt", false],
            ["linters", $a(['lintpcenc'])]
        ]); //#1791
        var _C4 = new Map([
            ["parts", $a([_C0])],
            ["req", $a([$a(["00"])])]
        ]); //#1793
        var _C6 = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 1],
            ["opt", false],
            ["linters", $a(['lintyesno'])]
        ]); //#1800
        var _CA = new Map([
            ["parts", $a([_C6])],
            ["req", $a([$a(["00"])])]
        ]); //#1802
        var _CC = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a(['lintyymmd0'])]
        ]); //#1811
        var _CE = new Map([
            ["cset", 'N'],
            ["min", 4],
            ["max", 4],
            ["opt", false],
            ["linters", $a(['linthhmm'])]
        ]); //#1812
        var _CI = new Map([
            ["parts", $a([_CC, _CE])],
            ["req", $a([$a(["00"])])]
        ]); //#1814
        var _CK = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a(['lintyymmdd'])]
        ]); //#1822
        var _CO = new Map([
            ["parts", $a([_CK])],
            ["req", $a([$a(["00"])])]
        ]); //#1824
        var _CQ = new Map([
            ["cset", 'N'],
            ["min", 13],
            ["max", 13],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1831
        var _CU = new Map([
            ["parts", $a([_CQ])],
            ["req", $a([$a(["01", "02", "8006", "8026"])])]
        ]); //#1833
        var _CW = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 30],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1840
        var _Ca = new Map([
            ["parts", $a([_CW])],
            ["req", $a([$a(["01", "02"])])]
        ]); //#1842
        var _Cc = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a(['lintyymmdd'])]
        ]); //#1849
        var _Ce = new Map([
            ["cset", 'N'],
            ["min", 4],
            ["max", 4],
            ["opt", false],
            ["linters", $a(['linthhmm'])]
        ]); //#1850
        var _Ci = new Map([
            ["parts", $a([_Cc, _Ce])],
            ["req", $a([$a(["01", "02"])])]
        ]); //#1852
        var _Ck = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 4],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1859
        var _Cp = new Map([
            ["parts", $a([_Ck])],
            ["req", $a([$a(["01"]), $a(["10"])])]
        ]); //#1861
        var _Cr = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 12],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1868
        var _Cv = new Map([
            ["parts", $a([_Cr])],
            ["req", $a([$a(["01", "02"])])]
        ]); //#1870
        var _Cx = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a(['lintyymmdd'])]
        ]); //#1877
        var _D1 = new Map([
            ["parts", $a([_Cx])],
            ["req", $a([$a(["01", "02"])])]
        ]); //#1879
        var _D3 = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a(['lintyymmdd'])]
        ]); //#1886
        var _D5 = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", true],
            ["linters", $a(['lintyymmdd'])]
        ]); //#1887
        var _D9 = new Map([
            ["parts", $a([_D3, _D5])],
            ["req", $a([$a(["01", "02"])])]
        ]); //#1889
        var _DB = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 3],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1896
        var _DF = new Map([
            ["parts", $a([_DB])],
            ["req", $a([$a(["01", "02"])])]
        ]); //#1898
        var _DH = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 10],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1905
        var _DL = new Map([
            ["parts", $a([_DH])],
            ["req", $a([$a(["01", "02"])])]
        ]); //#1907
        var _DN = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 2],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1914
        var _DR = new Map([
            ["parts", $a([_DN])],
            ["req", $a([$a(["01", "02"])])]
        ]); //#1916
        var _DT = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a(['lintyymmdd'])]
        ]); //#1923
        var _DV = new Map([
            ["cset", 'N'],
            ["min", 4],
            ["max", 4],
            ["opt", true],
            ["linters", $a(['linthhmm'])]
        ]); //#1924
        var _DZ = new Map([
            ["parts", $a([_DT, _DV])],
            ["req", $a([$a(["01", "02"])])]
        ]); //#1926
        var _Db = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1933
        var _Dg = new Map([
            ["parts", $a([_Db])],
            ["req", $a([$a(["01", "8006"]), $a(["416"])])]
        ]); //#1935
        var _Di = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1942
        var _Dm = new Map([
            ["parts", $a([_Di])],
            ["req", $a([$a(["01", "8006"])])]
        ]); //#1944
        var _Do = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1951
        var _Ds = new Map([
            ["parts", $a([_Do])],
            ["req", $a([$a(["7021"])])]
        ]); //#1953
        var _Du = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 30],
            ["opt", false],
            ["linters", $a(['lintkey'])]
        ]); //#1960
        var _Dw = new Map([
            ["parts", $a([_Du])]
        ]); //#1960
        var _Dy = new Map([
            ["cset", 'N'],
            ["min", 3],
            ["max", 3],
            ["opt", false],
            ["linters", $a(['lintiso3166999'])]
        ]); //#1968
        var _E0 = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 27],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1969
        var _E4 = new Map([
            ["parts", $a([_Dy, _E0])],
            ["req", $a([$a(["01", "02"])])]
        ]); //#1971
        var _E6 = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 1],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1987
        var _E8 = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 1],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1988
        var _EA = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 1],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1989
        var _EC = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 1],
            ["opt", false],
            ["linters", $a(['lintimporteridx'])]
        ]); //#1990
        var _EE = new Map([
            ["parts", $a([_E6, _E8, _EA, _EC])]
        ]); //#1990
        var _EG = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1998
        var _EK = new Map([
            ["parts", $a([_EG])],
            ["req", $a([$a(["01"])])]
        ]); //#2000
        var _EM = new Map([
            ["cset", 'X'],
            ["min", 2],
            ["max", 2],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2012
        var _EO = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 28],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2013
        var _ES = new Map([
            ["parts", $a([_EM, _EO])],
            ["req", $a([$a(["01", "8004"])])]
        ]); //#2015
        var _EU = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2031
        var _EY = new Map([
            ["parts", $a([_EU])],
            ["req", $a([$a(["01", "8006"])])]
        ]); //#2033
        var _Ea = new Map([
            ["cset", 'N'],
            ["min", 2],
            ["max", 2],
            ["opt", false],
            ["linters", $a(['lintmediatype'])]
        ]); //#2040
        var _Ee = new Map([
            ["parts", $a([_Ea])],
            ["req", $a([$a(["8017", "8018"])])]
        ]); //#2042
        var _Eg = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 25],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2049
        var _Ek = new Map([
            ["parts", $a([_Eg])],
            ["req", $a([$a(["8017", "8018"])])]
        ]); //#2051
        var _Em = new Map([
            ["cset", 'N'],
            ["min", 4],
            ["max", 4],
            ["opt", false],
            ["linters", $a(['lintnonzero'])]
        ]); //#2058
        var _Eo = new Map([
            ["cset", 'N'],
            ["min", 5],
            ["max", 5],
            ["opt", false],
            ["linters", $a(['lintnonzero'])]
        ]); //#2059
        var _Eq = new Map([
            ["cset", 'N'],
            ["min", 3],
            ["max", 3],
            ["opt", false],
            ["linters", $a(['lintnonzero'])]
        ]); //#2060
        var _Es = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 1],
            ["opt", false],
            ["linters", $a(['lintwinding'])]
        ]); //#2061
        var _Eu = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 1],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2062
        var _Ey = new Map([
            ["parts", $a([_Em, _Eo, _Eq, _Es, _Eu])],
            ["req", $a([$a(["01"])])]
        ]); //#2064
        var _F0 = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2071
        var _F2 = new Map([
            ["parts", $a([_F0])]
        ]); //#2071
        var _F4 = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 1],
            ["opt", false],
            ["linters", $a(['lintzero'])]
        ]); //#2079
        var _F6 = new Map([
            ["cset", 'N'],
            ["min", 13],
            ["max", 13],
            ["opt", false],
            ["linters", $a(['lintcsum', 'lintkey'])]
        ]); //#2080
        var _F8 = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 16],
            ["opt", true],
            ["linters", $a([])]
        ]); //#2081
        var _FB = new Map([
            ["parts", $a([_F4, _F6, _F8])],
            ["dlpkey", $a([])]
        ]); //#2083
        var _FD = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 30],
            ["opt", false],
            ["linters", $a(['lintkey'])]
        ]); //#2090
        var _FH = new Map([
            ["parts", $a([_FD])],
            ["dlpkey", $a([$a(["7040"])])]
        ]); //#2092
        var _FJ = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2099
        var _FN = new Map([
            ["parts", $a([_FJ])],
            ["req", $a([$a(["01", "02"])])]
        ]); //#2101
        var _FP = new Map([
            ["cset", 'N'],
            ["min", 14],
            ["max", 14],
            ["opt", false],
            ["linters", $a(['lintcsum'])]
        ]); //#2108
        var _FR = new Map([
            ["cset", 'N'],
            ["min", 4],
            ["max", 4],
            ["opt", false],
            ["linters", $a(['lintpieceoftotal'])]
        ]); //#2109
        var _FW = new Map([
            ["parts", $a([_FP, _FR])],
            ["ex", $a(["01", "37"])],
            ["dlpkey", $a([$a(["22", "10", "21"])])]
        ]); //#2112
        var _FY = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 34],
            ["opt", false],
            ["linters", $a(['lintiban'])]
        ]); //#2119
        var _Fc = new Map([
            ["parts", $a([_FY])],
            ["req", $a([$a(["415"])])]
        ]); //#2121
        var _Fe = new Map([
            ["cset", 'N'],
            ["min", 8],
            ["max", 8],
            ["opt", false],
            ["linters", $a(['lintyymmddhh'])]
        ]); //#2128
        var _Fg = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 4],
            ["opt", true],
            ["linters", $a(['lintmmoptss'])]
        ]); //#2129
        var _Fk = new Map([
            ["parts", $a([_Fe, _Fg])],
            ["req", $a([$a(["01", "02"])])]
        ]); //#2131
        var _Fm = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 50],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2138
        var _Fq = new Map([
            ["parts", $a([_Fm])],
            ["req", $a([$a(["00", "01"])])]
        ]); //#2140
        var _Fs = new Map([
            ["cset", 'Y'],
            ["min", 1],
            ["max", 30],
            ["opt", false],
            ["linters", $a(['lintkey'])]
        ]); //#2147
        var _Fw = new Map([
            ["parts", $a([_Fs])],
            ["dlpkey", $a([$a(["8011"])])]
        ]); //#2149
        var _Fy = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 12],
            ["opt", false],
            ["linters", $a(['lintnozeroprefix'])]
        ]); //#2156
        var _G2 = new Map([
            ["parts", $a([_Fy])],
            ["req", $a([$a(["8010"])])]
        ]); //#2158
        var _G4 = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2165
        var _G8 = new Map([
            ["parts", $a([_G4])],
            ["req", $a([$a(["01", "8006"])])]
        ]); //#2167
        var _GA = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 25],
            ["opt", false],
            ["linters", $a(['lintcsumalpha', 'lintkey'])]
        ]); //#2174
        var _GD = new Map([
            ["parts", $a([_GA])],
            ["dlpkey", $a([])]
        ]); //#2176
        var _GF = new Map([
            ["cset", 'N'],
            ["min", 18],
            ["max", 18],
            ["opt", false],
            ["linters", $a(['lintcsum', 'lintkey'])]
        ]); //#2183
        var _GK = new Map([
            ["parts", $a([_GF])],
            ["ex", $a(["8018"])],
            ["dlpkey", $a([$a(["8019"])])]
        ]); //#2186
        var _GM = new Map([
            ["cset", 'N'],
            ["min", 18],
            ["max", 18],
            ["opt", false],
            ["linters", $a(['lintcsum', 'lintkey'])]
        ]); //#2193
        var _GR = new Map([
            ["parts", $a([_GM])],
            ["ex", $a(["8017"])],
            ["dlpkey", $a([$a(["8019"])])]
        ]); //#2196
        var _GT = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 10],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2203
        var _GX = new Map([
            ["parts", $a([_GT])],
            ["req", $a([$a(["8017", "8018"])])]
        ]); //#2205
        var _GZ = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 25],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2212
        var _Gd = new Map([
            ["parts", $a([_GZ])],
            ["req", $a([$a(["415"])])]
        ]); //#2214
        var _Gf = new Map([
            ["cset", 'N'],
            ["min", 14],
            ["max", 14],
            ["opt", false],
            ["linters", $a(['lintcsum'])]
        ]); //#2221
        var _Gh = new Map([
            ["cset", 'N'],
            ["min", 4],
            ["max", 4],
            ["opt", false],
            ["linters", $a(['lintpieceoftotal'])]
        ]); //#2222
        var _Gm = new Map([
            ["parts", $a([_Gf, _Gh])],
            ["ex", $a(["02", "8006"])],
            ["req", $a([$a(["37"])])]
        ]); //#2225
        var _Go = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 70],
            ["opt", false],
            ["linters", $a(['lintcouponcode'])]
        ]); //#2232
        var _Gq = new Map([
            ["parts", $a([_Go])]
        ]); //#2232
        var _Gs = new Map([
            ["cset", 'N'],
            ["min", 4],
            ["max", 4],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2240
        var _Gw = new Map([
            ["parts", $a([_Gs])],
            ["req", $a([$a(["255"])])]
        ]); //#2242
        var _Gy = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 70],
            ["opt", false],
            ["linters", $a(['lintcouponposoffer'])]
        ]); //#2249
        var _H0 = new Map([
            ["parts", $a([_Gy])]
        ]); //#2249
        var _H2 = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 70],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2257
        var _H6 = new Map([
            ["parts", $a([_H2])],
            ["req", $a([$a(["01"])])]
        ]); //#2259
        var _H8 = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 30],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2266
        var _HA = new Map([
            ["parts", $a([_H8])]
        ]); //#2266
        var _HC = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 90],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2274
        var _HE = new Map([
            ["parts", $a([_HC])]
        ]); //#2274
        var _HF = new Map([
            ["00", _4],
            ["01", _C],
            ["02", _I],
            ["10", _O],
            ["11", _U],
            ["12", _a],
            ["13", _g],
            ["15", _g],
            ["16", _g],
            ["17", _m],
            ["20", _s],
            ["21", _z],
            ["22", _15],
            ["235", _1B],
            ["240", _1H],
            ["241", _1H],
            ["242", _1N],
            ["243", _1T],
            ["250", _1a],
            ["251", _1g],
            ["253", _1n],
            ["254", _1t],
            ["255", _21],
            ["30", _27],
            ["3100", _2E],
            ["3101", _2E],
            ["3102", _2E],
            ["3103", _2E],
            ["3104", _2E],
            ["3105", _2E],
            ["3110", _2L],
            ["3111", _2L],
            ["3112", _2L],
            ["3113", _2L],
            ["3114", _2L],
            ["3115", _2L],
            ["3120", _2S],
            ["3121", _2S],
            ["3122", _2S],
            ["3123", _2S],
            ["3124", _2S],
            ["3125", _2S],
            ["3130", _2Z],
            ["3131", _2Z],
            ["3132", _2Z],
            ["3133", _2Z],
            ["3134", _2Z],
            ["3135", _2Z],
            ["3140", _2g],
            ["3141", _2g],
            ["3142", _2g],
            ["3143", _2g],
            ["3144", _2g],
            ["3145", _2g],
            ["3150", _2n],
            ["3151", _2n],
            ["3152", _2n],
            ["3153", _2n],
            ["3154", _2n],
            ["3155", _2n],
            ["3160", _2u],
            ["3161", _2u],
            ["3162", _2u],
            ["3163", _2u],
            ["3164", _2u],
            ["3165", _2u],
            ["3200", _31],
            ["3201", _31],
            ["3202", _31],
            ["3203", _31],
            ["3204", _31],
            ["3205", _31],
            ["3210", _38],
            ["3211", _38],
            ["3212", _38],
            ["3213", _38],
            ["3214", _38],
            ["3215", _38],
            ["3220", _3F],
            ["3221", _3F],
            ["3222", _3F],
            ["3223", _3F],
            ["3224", _3F],
            ["3225", _3F],
            ["3230", _3M],
            ["3231", _3M],
            ["3232", _3M],
            ["3233", _3M],
            ["3234", _3M],
            ["3235", _3M],
            ["3240", _3T],
            ["3241", _3T],
            ["3242", _3T],
            ["3243", _3T],
            ["3244", _3T],
            ["3245", _3T],
            ["3250", _3a],
            ["3251", _3a],
            ["3252", _3a],
            ["3253", _3a],
            ["3254", _3a],
            ["3255", _3a],
            ["3260", _3h],
            ["3261", _3h],
            ["3262", _3h],
            ["3263", _3h],
            ["3264", _3h],
            ["3265", _3h],
            ["3270", _3o],
            ["3271", _3o],
            ["3272", _3o],
            ["3273", _3o],
            ["3274", _3o],
            ["3275", _3o],
            ["3280", _3v],
            ["3281", _3v],
            ["3282", _3v],
            ["3283", _3v],
            ["3284", _3v],
            ["3285", _3v],
            ["3290", _42],
            ["3291", _42],
            ["3292", _42],
            ["3293", _42],
            ["3294", _42],
            ["3295", _42],
            ["3300", _49],
            ["3301", _49],
            ["3302", _49],
            ["3303", _49],
            ["3304", _49],
            ["3305", _49],
            ["3310", _4G],
            ["3311", _4G],
            ["3312", _4G],
            ["3313", _4G],
            ["3314", _4G],
            ["3315", _4G],
            ["3320", _4N],
            ["3321", _4N],
            ["3322", _4N],
            ["3323", _4N],
            ["3324", _4N],
            ["3325", _4N],
            ["3330", _4U],
            ["3331", _4U],
            ["3332", _4U],
            ["3333", _4U],
            ["3334", _4U],
            ["3335", _4U],
            ["3340", _4b],
            ["3341", _4b],
            ["3342", _4b],
            ["3343", _4b],
            ["3344", _4b],
            ["3345", _4b],
            ["3350", _4i],
            ["3351", _4i],
            ["3352", _4i],
            ["3353", _4i],
            ["3354", _4i],
            ["3355", _4i],
            ["3360", _4p],
            ["3361", _4p],
            ["3362", _4p],
            ["3363", _4p],
            ["3364", _4p],
            ["3365", _4p],
            ["3370", _4w],
            ["3371", _4w],
            ["3372", _4w],
            ["3373", _4w],
            ["3374", _4w],
            ["3375", _4w],
            ["3400", _53],
            ["3401", _53],
            ["3402", _53],
            ["3403", _53],
            ["3404", _53],
            ["3405", _53],
            ["3410", _5A],
            ["3411", _5A],
            ["3412", _5A],
            ["3413", _5A],
            ["3414", _5A],
            ["3415", _5A],
            ["3420", _5H],
            ["3421", _5H],
            ["3422", _5H],
            ["3423", _5H],
            ["3424", _5H],
            ["3425", _5H],
            ["3430", _5O],
            ["3431", _5O],
            ["3432", _5O],
            ["3433", _5O],
            ["3434", _5O],
            ["3435", _5O],
            ["3440", _5V],
            ["3441", _5V],
            ["3442", _5V],
            ["3443", _5V],
            ["3444", _5V],
            ["3445", _5V],
            ["3450", _5c],
            ["3451", _5c],
            ["3452", _5c],
            ["3453", _5c],
            ["3454", _5c],
            ["3455", _5c],
            ["3460", _5j],
            ["3461", _5j],
            ["3462", _5j],
            ["3463", _5j],
            ["3464", _5j],
            ["3465", _5j],
            ["3470", _5q],
            ["3471", _5q],
            ["3472", _5q],
            ["3473", _5q],
            ["3474", _5q],
            ["3475", _5q],
            ["3480", _5x],
            ["3481", _5x],
            ["3482", _5x],
            ["3483", _5x],
            ["3484", _5x],
            ["3485", _5x],
            ["3490", _64],
            ["3491", _64],
            ["3492", _64],
            ["3493", _64],
            ["3494", _64],
            ["3495", _64],
            ["3500", _6B],
            ["3501", _6B],
            ["3502", _6B],
            ["3503", _6B],
            ["3504", _6B],
            ["3505", _6B],
            ["3510", _6I],
            ["3511", _6I],
            ["3512", _6I],
            ["3513", _6I],
            ["3514", _6I],
            ["3515", _6I],
            ["3520", _6P],
            ["3521", _6P],
            ["3522", _6P],
            ["3523", _6P],
            ["3524", _6P],
            ["3525", _6P],
            ["3530", _6W],
            ["3531", _6W],
            ["3532", _6W],
            ["3533", _6W],
            ["3534", _6W],
            ["3535", _6W],
            ["3540", _6d],
            ["3541", _6d],
            ["3542", _6d],
            ["3543", _6d],
            ["3544", _6d],
            ["3545", _6d],
            ["3550", _6k],
            ["3551", _6k],
            ["3552", _6k],
            ["3553", _6k],
            ["3554", _6k],
            ["3555", _6k],
            ["3560", _6r],
            ["3561", _6r],
            ["3562", _6r],
            ["3563", _6r],
            ["3564", _6r],
            ["3565", _6r],
            ["3570", _6y],
            ["3571", _6y],
            ["3572", _6y],
            ["3573", _6y],
            ["3574", _6y],
            ["3575", _6y],
            ["3600", _75],
            ["3601", _75],
            ["3602", _75],
            ["3603", _75],
            ["3604", _75],
            ["3605", _75],
            ["3610", _7C],
            ["3611", _7C],
            ["3612", _7C],
            ["3613", _7C],
            ["3614", _7C],
            ["3615", _7C],
            ["3620", _7J],
            ["3621", _7J],
            ["3622", _7J],
            ["3623", _7J],
            ["3624", _7J],
            ["3625", _7J],
            ["3630", _7Q],
            ["3631", _7Q],
            ["3632", _7Q],
            ["3633", _7Q],
            ["3634", _7Q],
            ["3635", _7Q],
            ["3640", _7X],
            ["3641", _7X],
            ["3642", _7X],
            ["3643", _7X],
            ["3644", _7X],
            ["3645", _7X],
            ["3650", _7e],
            ["3651", _7e],
            ["3652", _7e],
            ["3653", _7e],
            ["3654", _7e],
            ["3655", _7e],
            ["3660", _7l],
            ["3661", _7l],
            ["3662", _7l],
            ["3663", _7l],
            ["3664", _7l],
            ["3665", _7l],
            ["3670", _7s],
            ["3671", _7s],
            ["3672", _7s],
            ["3673", _7s],
            ["3674", _7s],
            ["3675", _7s],
            ["3680", _7z],
            ["3681", _7z],
            ["3682", _7z],
            ["3683", _7z],
            ["3684", _7z],
            ["3685", _7z],
            ["3690", _86],
            ["3691", _86],
            ["3692", _86],
            ["3693", _86],
            ["3694", _86],
            ["3695", _86],
            ["37", _8D],
            ["3900", _8K],
            ["3901", _8K],
            ["3902", _8K],
            ["3903", _8K],
            ["3904", _8K],
            ["3905", _8K],
            ["3906", _8K],
            ["3907", _8K],
            ["3908", _8K],
            ["3909", _8K],
            ["3910", _8T],
            ["3911", _8T],
            ["3912", _8T],
            ["3913", _8T],
            ["3914", _8T],
            ["3915", _8T],
            ["3916", _8T],
            ["3917", _8T],
            ["3918", _8T],
            ["3919", _8T],
            ["3920", _8b],
            ["3921", _8b],
            ["3922", _8b],
            ["3923", _8b],
            ["3924", _8b],
            ["3925", _8b],
            ["3926", _8b],
            ["3927", _8b],
            ["3928", _8b],
            ["3929", _8b],
            ["3930", _8k],
            ["3931", _8k],
            ["3932", _8k],
            ["3933", _8k],
            ["3934", _8k],
            ["3935", _8k],
            ["3936", _8k],
            ["3937", _8k],
            ["3938", _8k],
            ["3939", _8k],
            ["3940", _8r],
            ["3941", _8r],
            ["3942", _8r],
            ["3943", _8r],
            ["3950", _8y],
            ["3951", _8y],
            ["3952", _8y],
            ["3953", _8y],
            ["3954", _8y],
            ["3955", _8y],
            ["400", _92],
            ["401", _97],
            ["402", _9C],
            ["403", _9I],
            ["410", _9M],
            ["411", _9M],
            ["412", _9M],
            ["413", _9M],
            ["414", _9T],
            ["415", _9b],
            ["416", _9f],
            ["417", _9l],
            ["420", _9q],
            ["421", _9x],
            ["422", _A4],
            ["423", _AB],
            ["424", _AI],
            ["425", _AP],
            ["426", _AV],
            ["427", _Ac],
            ["4300", _Ai],
            ["4301", _Ai],
            ["4302", _Ao],
            ["4303", _Au],
            ["4304", _B0],
            ["4305", _B0],
            ["4306", _B0],
            ["4307", _B6],
            ["4308", _BC],
            ["4309", _BI],
            ["4310", _BO],
            ["4311", _BO],
            ["4312", _BU],
            ["4313", _Ba],
            ["4314", _Bg],
            ["4315", _Bg],
            ["4316", _Bg],
            ["4317", _Bm],
            ["4318", _Bs],
            ["4319", _By],
            ["4320", _C4],
            ["4321", _CA],
            ["4322", _CA],
            ["4323", _CA],
            ["4324", _CI],
            ["4325", _CI],
            ["4326", _CO],
            ["7001", _CU],
            ["7002", _Ca],
            ["7003", _Ci],
            ["7004", _Cp],
            ["7005", _Cv],
            ["7006", _D1],
            ["7007", _D9],
            ["7008", _DF],
            ["7009", _DL],
            ["7010", _DR],
            ["7011", _DZ],
            ["7020", _Dg],
            ["7021", _Dm],
            ["7022", _Ds],
            ["7023", _Dw],
            ["7030", _E4],
            ["7031", _E4],
            ["7032", _E4],
            ["7033", _E4],
            ["7034", _E4],
            ["7035", _E4],
            ["7036", _E4],
            ["7037", _E4],
            ["7038", _E4],
            ["7039", _E4],
            ["7040", _EE],
            ["710", _EK],
            ["711", _EK],
            ["712", _EK],
            ["713", _EK],
            ["714", _EK],
            ["715", _EK],
            ["7230", _ES],
            ["7231", _ES],
            ["7232", _ES],
            ["7233", _ES],
            ["7234", _ES],
            ["7235", _ES],
            ["7236", _ES],
            ["7237", _ES],
            ["7238", _ES],
            ["7239", _ES],
            ["7240", _EY],
            ["7241", _Ee],
            ["7242", _Ek],
            ["8001", _Ey],
            ["8002", _F2],
            ["8003", _FB],
            ["8004", _FH],
            ["8005", _FN],
            ["8006", _FW],
            ["8007", _Fc],
            ["8008", _Fk],
            ["8009", _Fq],
            ["8010", _Fw],
            ["8011", _G2],
            ["8012", _G8],
            ["8013", _GD],
            ["8017", _GK],
            ["8018", _GR],
            ["8019", _GX],
            ["8020", _Gd],
            ["8026", _Gm],
            ["8110", _Gq],
            ["8111", _Gw],
            ["8112", _H0],
            ["8200", _H6],
            ["90", _HA],
            ["91", _HE],
            ["92", _HE],
            ["93", _HE],
            ["94", _HE],
            ["95", _HE],
            ["96", _HE],
            ["97", _HE],
            ["98", _HE],
            ["99", _HE]
        ]); //#2286
        $_.gs1syntax = _HF; //#2288
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_gs1process.$ctx[id] = $_[id]); //#2288
        bwipp_gs1process.__2289__ = 1; //#2288
        $_ = Object.getPrototypeOf($_); //#2288
    } //#2288
    if ($eq($k[--$j], 'ai')) { //#2473
        $anchorsearch($k[--$j], "("); //#2296
        if ($nt($k[--$j])) { //#2298
            $j--; //#2297
            $k[$j++] = 'bwipp.GS1aiMissingOpenParen#2297'; //#2297
            $k[$j++] = "AIs must start with '('"; //#2297
            bwipp_raiseerror(); //#2297
        } //#2297
        $j--; //#2299
        $k[$j++] = Infinity; //#2300
        var _HK = $k[--$j]; //#2300
        var _HL = $k[--$j]; //#2300
        $k[$j++] = _HK; //#2307
        $k[$j++] = _HL; //#2307
        for (;;) { //#2307
            var _HM = $k[--$j]; //#2301
            $k[$j++] = _HM; //#2301
            if ($eq(_HM, "")) { //#2301
                $j--; //#2301
                break; //#2301
            } //#2301
            $search($k[--$j], ")"); //#2302
            if ($nt($k[--$j])) { //#2304
                $cleartomark(); //#2303
                $k[$j++] = 'bwipp.GS1aiMissingCloseParen#2303'; //#2303
                $k[$j++] = "AIs must end with ')'"; //#2303
                bwipp_raiseerror(); //#2303
            } //#2303
            var _HP = $k[--$j]; //#2305
            var _HQ = $k[--$j]; //#2305
            $k[$j++] = _HP; //#2305
            $k[$j++] = _HQ; //#2305
            $j--; //#2305
            var _HR = $k[--$j]; //#2305
            var _HS = $k[--$j]; //#2305
            $k[$j++] = _HR; //#2306
            $search(_HS, "("); //#2306
            if ($k[--$j]) { //#2306
                var _HU = $k[--$j]; //#2306
                var _HV = $k[--$j]; //#2306
                $k[$j++] = _HU; //#2306
                $k[$j++] = _HV; //#2306
                $j--; //#2306
                var _HW = $k[--$j]; //#2306
                var _HX = $k[--$j]; //#2306
                $k[$j++] = _HW; //#2306
                $k[$j++] = _HX; //#2306
            } else { //#2306
                $k[$j++] = ""; //#2306
            } //#2306
        } //#2306
        var _HY = $counttomark(); //#2308
        $k[$j++] = _HY; //#2308
        if (_HY > 0) { //#2308
            var _HZ = $k[--$j]; //#2308
            for (var _Hb = _HZ, _Ha = (~~(_HZ / 2)) + 1; _Hb >= _Ha; _Hb -= 1) { //#2308
                $r(_Hb, -1); //#2308
            } //#2308
        } else { //#2308
            $j--; //#2308
        } //#2308
        $astore($a(~~($counttomark() / 2))); //#2309
        $_.ais = $k[--$j]; //#2309
        $astore($a($counttomark())); //#2310
        $k[$j++] = Infinity; //#2311
        var _Hh = $k[--$j]; //#2310
        var _Hi = $k[--$j]; //#2310
        $k[$j++] = _Hh; //#2312
        $forall(_Hi, function() { //#2312
            var _Hk = new Map([
                ["parse", $_.parse],
                ["parseonly", true],
                ["parsefnc", false]
            ]); //#2311
            $k[$j++] = _Hk; //#2311
            bwipp_parseinput(); //#2311
        }); //#2311
        $_.vals = $a(); //#2312
        $j--; //#2313
    } else { //#2473
        $anchorsearch($k[--$j], "http://"); //#2318
        if ($nt($k[--$j])) { //#2321
            $anchorsearch($k[--$j], "https://"); //#2319
            if ($nt($k[--$j])) { //#2321
                $j--; //#2320
                $k[$j++] = 'bwipp.GS1dlURIbadScheme#2320'; //#2320
                $k[$j++] = "Scheme must be http:// or https://"; //#2320
                bwipp_raiseerror(); //#2320
            } //#2320
        } //#2320
        $j--; //#2322
        $search($k[--$j], "/"); //#2325
        if ($nt($k[--$j])) { //#2327
            $j--; //#2326
            $k[$j++] = 'bwipp.GS1dlMissingDomainOrPathInfo#2326'; //#2326
            $k[$j++] = "URI must contain a domain and path info"; //#2326
            bwipp_raiseerror(); //#2326
        } //#2326
        $j -= 2; //#2328
        $search($k[--$j], "#"); //#2331
        if ($k[--$j]) { //#2333
            var _Hu = $k[--$j]; //#2332
            var _Hv = $k[--$j]; //#2332
            $k[$j++] = _Hu; //#2332
            $k[$j++] = _Hv; //#2332
            $j--; //#2332
            var _Hw = $k[--$j]; //#2332
            var _Hx = $k[--$j]; //#2332
            $k[$j++] = _Hw; //#2332
            $k[$j++] = _Hx; //#2332
            $j--; //#2332
        } //#2332
        $search($k[--$j], "?"); //#2336
        if ($nt($k[--$j])) { //#2338
            var _I0 = $k[--$j]; //#2337
            $k[$j++] = ""; //#2337
            $k[$j++] = null; //#2337
            $k[$j++] = _I0; //#2337
        } //#2337
        $_.pp = $k[--$j]; //#2339
        $j--; //#2340
        $_.qp = $k[--$j]; //#2341
        $k[$j++] = Infinity; //#2344
        $k[$j++] = 0; //#2348
        $k[$j++] = 0; //#2348
        $k[$j++] = $_.pp; //#2348
        for (;;) { //#2348
            $search($k[--$j], "/"); //#2346
            if ($nt($k[--$j])) { //#2346
                $j--; //#2346
                break; //#2346
            } //#2346
            var _I6 = $k[--$j]; //#2347
            var _I7 = $k[--$j]; //#2347
            $k[$j++] = _I6.length + 1; //#2347
            $k[$j++] = _I7; //#2347
            $j--; //#2347
            var _I8 = $k[--$j]; //#2347
            var _I9 = $k[--$j]; //#2347
            var _IA = $k[--$j]; //#2347
            $k[$j++] = _IA; //#2347
            $k[$j++] = $f(_I8 + _IA); //#2347
            $k[$j++] = _I9; //#2347
        } //#2347
        $astore($a($counttomark() - 1)); //#2349
        $_.pipos = $k[--$j]; //#2349
        $j -= 2; //#2349
        if ($_.pipos.length <= 1) { //#2352
            $k[$j++] = 'bwipp.GS1dlNoAIinfo#2351'; //#2351
            $k[$j++] = "The path was too short to contain AI info"; //#2351
            bwipp_raiseerror(); //#2351
        } //#2351
        $k[$j++] = false; //#2368
        for (var _IG = $_.pipos.length - 2; _IG >= 0; _IG -= 2) { //#2368
            var _II = $get($_.pipos, _IG); //#2358
            var _IM = $geti($_.pp, _II, $f($f($get($_.pipos, _IG + 1) - _II) - 1)); //#2359
            var _IO = $get($_.gs1syntax, _IM) !== undefined; //#2360
            $k[$j++] = _IG; //#2366
            $k[$j++] = _IM; //#2366
            if (_IO) { //#2365
                var _IS = $get($get($_.gs1syntax, $k[--$j]), 'dlpkey') !== undefined; //#2361
                if (_IS) { //#2363
                    var _IT = $k[--$j]; //#2362
                    var _IU = $k[--$j]; //#2362
                    $k[$j++] = _IT; //#2362
                    $k[$j++] = _IU; //#2362
                    $j--; //#2362
                    $k[$j++] = true; //#2362
                    break; //#2362
                } //#2362
            } else { //#2365
                $j--; //#2365
            } //#2365
            $j--; //#2367
        } //#2367
        if ($nt($k[--$j])) { //#2371
            $k[$j++] = 'bwipp.GS1dlNoAIinfo#2370'; //#2370
            $k[$j++] = "The path does not contain a valid primary key"; //#2370
            bwipp_raiseerror(); //#2370
        } //#2370
        var _IY = $get($_.pipos, $k[--$j]); //#2372
        $_.pp = $geti($_.pp, _IY, $f($_.pp.length - _IY)); //#2372
        $_.uriunescape = function() {
            $_.in = $k[--$j]; //#2375
            $_.out = $s($_.in.length); //#2376
            $k[$j++] = 0; //#2396
            $k[$j++] = 0; //#2396
            for (;;) { //#2396
                var _If = $k[--$j]; //#2378
                var _Ig = $k[--$j]; //#2378
                $k[$j++] = _Ig; //#2378
                $k[$j++] = _If; //#2378
                if (_Ig >= $_.in.length) { //#2378
                    break; //#2378
                } //#2378
                var _Ij = $k[--$j]; //#2379
                var _Ik = $k[--$j]; //#2379
                var _Il = $get($_.in, _Ik); //#2379
                $k[$j++] = _Ik; //#2395
                $k[$j++] = _Ij; //#2395
                $k[$j++] = _Il; //#2395
                if (_Il == 43) { //#2394
                    $j--; //#2381
                    var _In = $k[--$j]; //#2381
                    $put($_.out, _In, 32); //#2381
                    var _Io = $k[--$j]; //#2382
                    $k[$j++] = $f(_Io + 1); //#2382
                    $k[$j++] = $f(_In + 1); //#2382
                } else { //#2394
                    var _Ip = $k[--$j]; //#2384
                    var _Iq = $k[--$j]; //#2384
                    var _Ir = $k[--$j]; //#2384
                    $k[$j++] = _Ir; //#2395
                    $k[$j++] = _Iq; //#2395
                    $k[$j++] = _Ip; //#2395
                    if ((_Ip == 37) && (_Ir < ($_.in.length - 2))) { //#2394
                        $j--; //#2385
                        var _Iu = $strcpy($s(4), "<  >"); //#2386
                        var _Iw = $k[--$j]; //#2386
                        var _Ix = $k[--$j]; //#2386
                        $puti(_Iu, 1, $geti($_.in, $f(_Ix + 1), 2)); //#2386
                        try { //#2387
                            $k[$j++] = _Ix; //#2387
                            $k[$j++] = _Iw; //#2387
                            $k[$j++] = $cvx(_Iu); //#2387
                            $k[$j++] = false
                        } catch (e) {
                            $k[$j++] = true
                        } //#2387
                        if ($k[--$j]) { //#2389
                            $j -= 2; //#2388
                            $k[$j++] = 'bwipp.GS1dlBadHexCharacter#2388'; //#2388
                            $k[$j++] = "Invalid hex character"; //#2388
                            bwipp_raiseerror(); //#2388
                        } //#2388
                        var _J1 = $get($k[--$j], 0); //#2390
                        var _J3 = $k[--$j]; //#2390
                        $put($_.out, _J3, _J1); //#2390
                        var _J4 = $k[--$j]; //#2391
                        $k[$j++] = $f(_J4 + 3); //#2391
                        $k[$j++] = $f(_J3 + 1); //#2391
                    } else { //#2394
                        var _J6 = $k[--$j]; //#2393
                        var _J7 = $k[--$j]; //#2393
                        $put($_.out, _J7, _J6); //#2393
                        var _J8 = $k[--$j]; //#2394
                        $k[$j++] = $f(_J8 + 1); //#2394
                        $k[$j++] = $f(_J7 + 1); //#2394
                    } //#2394
                } //#2394
            } //#2394
            $_.out = $geti($_.out, 0, $k[--$j]); //#2397
            $j--; //#2398
            $k[$j++] = $_.out; //#2399
        }; //#2399
        $_.ais = $a(99); //#2402
        $_.vals = $a(99); //#2403
        $k[$j++] = 0; //#2417
        $k[$j++] = $_.pp; //#2417
        for (;;) { //#2417
            $search($k[--$j], "/"); //#2408
            if ($k[--$j]) { //#2414
                var _JJ = $k[--$j]; //#2409
                var _JK = $k[--$j]; //#2409
                var _JL = $k[--$j]; //#2409
                var _JM = $k[--$j]; //#2409
                $put($_.ais, _JM, _JJ); //#2409
                $k[$j++] = _JM; //#2411
                $search(_JL, "/"); //#2411
                if ($k[--$j]) { //#2411
                    var _JO = $k[--$j]; //#2411
                    var _JP = $k[--$j]; //#2411
                    $k[$j++] = _JO; //#2411
                    $k[$j++] = _JP; //#2411
                    $j--; //#2411
                } else { //#2411
                    var _JQ = $k[--$j]; //#2411
                    $k[$j++] = ""; //#2411
                    $k[$j++] = _JQ; //#2411
                } //#2411
                var _JS = $k[--$j]; //#2412
                var _JT = $k[--$j]; //#2412
                var _JU = $k[--$j]; //#2412
                $k[$j++] = _JU; //#2412
                $k[$j++] = _JT; //#2412
                $k[$j++] = $_.vals; //#2412
                $k[$j++] = _JU; //#2412
                $k[$j++] = _JS; //#2412
                $_.uriunescape(); //#2412
                var _JV = $k[--$j]; //#2412
                var _JW = $k[--$j]; //#2412
                $put($k[--$j], _JW, _JV); //#2412
            } else { //#2414
                $j--; //#2414
                break; //#2414
            } //#2414
            var _JY = $k[--$j]; //#2416
            var _JZ = $k[--$j]; //#2416
            $k[$j++] = $f(_JZ + 1); //#2416
            $k[$j++] = _JY; //#2416
        } //#2416
        var _Ja = $k[--$j]; //#2420
        $k[$j++] = _Ja; //#2438
        if (_Ja > 1) { //#2438
            $k[$j++] = false; //#2434
            $forall($get($get($_.gs1syntax, $get($_.ais, 0)), 'dlpkey'), function() { //#2434
                $_.seq = $k[--$j]; //#2423
                $_.i = 1; //#2424
                $_.j = 0; //#2424
                for (;;) { //#2432
                    if ($_.i >= $_.ais.length) { //#2426
                        break; //#2426
                    } //#2426
                    if ($_.j >= $_.seq.length) { //#2427
                        break; //#2427
                    } //#2427
                    if ($eq($get($_.ais, $_.i), $get($_.seq, $_.j))) { //#2430
                        $_.i = $_.i + 1; //#2429
                    } //#2429
                    $_.j = $_.j + 1; //#2431
                } //#2431
                var _Ju = $k[--$j]; //#2433
                var _Jv = $k[--$j]; //#2433
                $k[$j++] = _Jv; //#2433
                $k[$j++] = _Ju; //#2433
                if ($_.i == _Jv) { //#2433
                    $j--; //#2433
                    $k[$j++] = true; //#2433
                    return true; //#2433
                } //#2433
            }); //#2433
            if ($nt($k[--$j])) { //#2437
                $j--; //#2436
                $k[$j++] = 'bwipp.GS1dlBadPathInfo#2436'; //#2436
                $k[$j++] = "The AIs in the path are not a valid key-qualifier sequence for the key"; //#2436
                bwipp_raiseerror(); //#2436
            } //#2436
        } //#2436
        $k[$j++] = $_.qp; //#2456
        for (;;) { //#2456
            var _Jy = $k[--$j]; //#2442
            $k[$j++] = _Jy; //#2442
            if ($eq(_Jy, "")) { //#2442
                $j--; //#2442
                break; //#2442
            } //#2442
            $search($k[--$j], "&"); //#2443
            if ($k[--$j]) { //#2443
                var _K1 = $k[--$j]; //#2443
                var _K2 = $k[--$j]; //#2443
                $k[$j++] = _K1; //#2443
                $k[$j++] = _K2; //#2443
                $j--; //#2443
            } else { //#2443
                var _K3 = $k[--$j]; //#2443
                $k[$j++] = ""; //#2443
                $k[$j++] = _K3; //#2443
            } //#2443
            $search($k[--$j], "="); //#2444
            if ($k[--$j]) { //#2454
                var _K6 = $k[--$j]; //#2445
                $k[$j++] = _K6; //#2445
                $k[$j++] = true; //#2445
                $forall(_K6, function() { //#2445
                    var _K7 = $k[--$j]; //#2445
                    var _K8 = $k[--$j]; //#2445
                    $k[$j++] = _K8 && ((_K7 >= 48) && (_K7 <= 57)); //#2445
                }); //#2445
                if ($k[--$j]) { //#2451
                    var _KB = $k[--$j]; //#2446
                    var _KC = $k[--$j]; //#2446
                    var _KD = $k[--$j]; //#2446
                    var _KE = $k[--$j]; //#2446
                    var _KF = $k[--$j]; //#2446
                    $put($_.ais, _KF, _KB); //#2446
                    $k[$j++] = _KF; //#2448
                    $k[$j++] = _KE; //#2448
                    $k[$j++] = $_.vals; //#2448
                    $k[$j++] = _KF; //#2448
                    $k[$j++] = _KD; //#2448
                    $_.uriunescape(); //#2448
                    var _KH = $k[--$j]; //#2448
                    var _KI = $k[--$j]; //#2448
                    $put($k[--$j], _KI, _KH); //#2448
                    var _KK = $k[--$j]; //#2449
                    var _KL = $k[--$j]; //#2449
                    $k[$j++] = $f(_KL + 1); //#2449
                    $k[$j++] = _KK; //#2449
                } else { //#2451
                    $j -= 3; //#2451
                } //#2451
            } else { //#2454
                $j--; //#2454
            } //#2454
        } //#2454
        var _KN = $k[--$j]; //#2458
        $_.ais = $geti($_.ais, 0, _KN); //#2458
        $_.vals = $geti($_.vals, 0, _KN); //#2459
        for (var _KT = 0, _KS = $_.ais.length - 1; _KT <= _KS; _KT += 1) { //#2474
            $k[$j++] = _KT; //#2472
            if ($eq($get($_.ais, _KT), "01")) { //#2472
                var _KW = $k[--$j]; //#2465
                var _KY = $get($_.vals, _KW); //#2465
                var _KZ = _KY.length; //#2466
                $k[$j++] = _KW; //#2471
                $k[$j++] = _KY; //#2471
                if ((_KZ == 8) || ((_KZ == 12) || (_KZ == 13))) { //#2470
                    var _Kb = $strcpy($s(14), "00000000000000"); //#2467
                    var _Kc = $k[--$j]; //#2467
                    $puti(_Kb, 14 - _Kc.length, _Kc); //#2467
                    var _Ke = $k[--$j]; //#2468
                    $put($_.vals, _Ke, _Kb); //#2468
                    $k[$j++] = _Ke; //#2468
                } else { //#2470
                    $j--; //#2470
                } //#2470
            } //#2470
            $j--; //#2473
        } //#2473
    } //#2473
    if (!bwipp_gs1process.__2487__) { //#2487
        $_ = Object.create($_); //#2487
        $k[$j++] = Infinity; //#2486
        var _Kf = $a(["00", "01", "02", "03", "04", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "31", "32", "33", "34", "35", "36", "41"]); //#2485
        for (var _Kg = 0, _Kh = _Kf.length; _Kg < _Kh; _Kg++) { //#2486
            var _Ki = $get(_Kf, _Kg); //#2486
            $k[$j++] = _Ki; //#2486
            $k[$j++] = _Ki; //#2486
        } //#2486
        $_.aifixed = $d(); //#2486
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_gs1process.$ctx[id] = $_[id]); //#2486
        bwipp_gs1process.__2487__ = 1; //#2486
        $_ = Object.getPrototypeOf($_); //#2486
    } //#2486
    $k[$j++] = Infinity; //#2495
    var _Kl = $_.ais; //#2490
    for (var _Km = 0, _Kn = _Kl.length; _Km < _Kn; _Km++) { //#2497
        var _Ko = $get(_Kl, _Km); //#2497
        $k[$j++] = true; //#2496
        $k[$j++] = _Ko; //#2496
        if (_Ko.length >= 2) { //#2495
            var _Ks = $get($_.aifixed, $geti($k[--$j], 0, 2)) !== undefined; //#2493
            if (_Ks) { //#2493
                $j--; //#2493
                $k[$j++] = false; //#2493
            } //#2493
        } else { //#2495
            $j--; //#2495
        } //#2495
    } //#2495
    $_.fncs = $a(); //#2495
    $_.lintnumeric = function() {
        var _Ku = $k[--$j]; //#2504
        $k[$j++] = true; //#2506
        $forall(_Ku, function() { //#2506
            var _Kv = $k[--$j]; //#2505
            if ((_Kv < 48) || (_Kv > 57)) { //#2505
                $j--; //#2505
                $k[$j++] = false; //#2505
                return true; //#2505
            } //#2505
        }); //#2505
        if ($nt($k[--$j])) { //#2507
            $j--; //#2507
            $k[$j++] = 'bwipp.GS1notNumeric#2507'; //#2507
            $k[$j++] = "Not numeric"; //#2507
            $k[$j++] = false; //#2507
            return true; //#2507
        } //#2507
    }; //#2507
    $_.lintcset82 = function() {
        var _Kx = $k[--$j]; //#2511
        $k[$j++] = true; //#2516
        $forall(_Kx, function() { //#2516
            var _Ky = $s(1); //#2512
            $put(_Ky, 0, $k[--$j]); //#2512
            $search("!\"%&'()*+,-./0123456789:;<=>?ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz", _Ky); //#2514
            if ($nt($k[--$j])) { //#2514
                $j -= 2; //#2514
                $k[$j++] = false; //#2514
                return true; //#2514
            } //#2514
            $j -= 3; //#2515
        }); //#2515
        if ($nt($k[--$j])) { //#2517
            $j--; //#2517
            $k[$j++] = 'bwipp.GS1badCSET82character#2517'; //#2517
            $k[$j++] = "Invalid CSET 82 character"; //#2517
            $k[$j++] = false; //#2517
            return true; //#2517
        } //#2517
    }; //#2517
    $_.lintcset39 = function() {
        var _L2 = $k[--$j]; //#2521
        $k[$j++] = true; //#2526
        $forall(_L2, function() { //#2526
            var _L3 = $s(1); //#2522
            $put(_L3, 0, $k[--$j]); //#2522
            $search("#-/0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ", _L3); //#2524
            if ($nt($k[--$j])) { //#2524
                $j -= 2; //#2524
                $k[$j++] = false; //#2524
                return true; //#2524
            } //#2524
            $j -= 3; //#2525
        }); //#2525
        if ($nt($k[--$j])) { //#2527
            $j--; //#2527
            $k[$j++] = 'bwipp.GS1badCSET39character#2527'; //#2527
            $k[$j++] = "Invalid CSET 39 character"; //#2527
            $k[$j++] = false; //#2527
            return true; //#2527
        } //#2527
    }; //#2527
    $_.lintkey = function() {
        var _L7 = $k[--$j]; //#2531
        $k[$j++] = _L7; //#2531
        if (_L7.length < 2) { //#2531
            $j -= 2; //#2531
            $k[$j++] = 'bwipp.GS1keyTooShort#2531'; //#2531
            $k[$j++] = "Key is too short"; //#2531
            $k[$j++] = false; //#2531
            return true; //#2531
        } //#2531
        var _L8 = $k[--$j]; //#2532
        var _L9 = $get(_L8, 0); //#2532
        var _LA = $get(_L8, 1); //#2533
        if (((_L9 < 48) || (_L9 > 57)) || ((_LA < 48) || (_LA > 57))) { //#2535
            $j--; //#2534
            $k[$j++] = 'bwipp.GS1badGCP#2534'; //#2534
            $k[$j++] = "Non-numeric company prefix"; //#2534
            $k[$j++] = false; //#2534
            return true; //#2534
        } //#2534
    }; //#2534
    $_.lintimporteridx = function() {
        $search("-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz", $k[--$j]); //#2540
        if ($nt($k[--$j])) { //#2540
            $j -= 2; //#2540
            $k[$j++] = 'bwipp.GS1badImporterIndex#2540'; //#2540
            $k[$j++] = "Invalid importer index"; //#2540
            $k[$j++] = false; //#2540
            return true; //#2540
        } //#2540
        $j -= 3; //#2541
    }; //#2541
    $_.lintcsum = function() {
        $k[$j++] = Infinity; //#2545
        var _LD = $k[--$j]; //#2545
        var _LE = $k[--$j]; //#2545
        var _LF = ((_LE.length % 2) == 0) ? 3 : 1; //#2546
        $k[$j++] = _LD; //#2547
        $k[$j++] = _LF; //#2547
        $forall(_LE, function() { //#2547
            var _LG = $k[--$j]; //#2547
            var _LH = $k[--$j]; //#2547
            $k[$j++] = $f(_LG - 48) * _LH; //#2547
            $k[$j++] = $f(4 - _LH); //#2547
        }); //#2547
        $j--; //#2547
        var _LI = $counttomark() + 1; //#2548
        $k[$j++] = 0; //#2548
        for (var _LJ = 0, _LK = _LI - 1; _LJ < _LK; _LJ++) { //#2548
            var _LL = $k[--$j]; //#2548
            var _LM = $k[--$j]; //#2548
            $k[$j++] = $f(_LM + _LL); //#2548
        } //#2548
        var _LN = $k[--$j]; //#2548
        var _LO = $k[--$j]; //#2548
        $k[$j++] = _LN; //#2548
        $k[$j++] = _LO; //#2548
        $j--; //#2548
        if (($k[--$j] % 10) != 0) { //#2549
            $j--; //#2549
            $k[$j++] = 'bwipp.GS1badChecksum#2549'; //#2549
            $k[$j++] = "Bad checksum"; //#2549
            $k[$j++] = false; //#2549
            return true; //#2549
        } //#2549
    }; //#2549
    if (!bwipp_gs1process.__2562__) { //#2562
        $_ = Object.create($_); //#2562
        $k[$j++] = Infinity; //#2555
        $k[$j++] = 0; //#2555
        for (var _LQ = 0, _LR = "!\"%&'()*+,-./0123456789:;<=>?ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz".length; _LQ < _LR; _LQ++) { //#2555
            var _LT = $k[--$j]; //#2555
            $k[$j++] = $get("!\"%&'()*+,-./0123456789:;<=>?ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz", _LQ); //#2555
            $k[$j++] = _LT; //#2555
            $k[$j++] = $f(_LT + 1); //#2555
        } //#2555
        $j--; //#2555
        $_.cset82 = $d(); //#2556
        $k[$j++] = Infinity; //#2560
        $k[$j++] = 0; //#2560
        for (var _LV = 0, _LW = "23456789ABCDEFGHJKLMNPQRSTUVWXYZ".length; _LV < _LW; _LV++) { //#2560
            var _LY = $k[--$j]; //#2560
            $k[$j++] = $get("23456789ABCDEFGHJKLMNPQRSTUVWXYZ", _LV); //#2560
            $k[$j++] = _LY; //#2560
            $k[$j++] = $f(_LY + 1); //#2560
        } //#2560
        $j--; //#2560
        $_.cset32 = $d(); //#2561
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_gs1process.$ctx[id] = $_[id]); //#2561
        bwipp_gs1process.__2562__ = 1; //#2561
        $_ = Object.getPrototypeOf($_); //#2561
    } //#2561
    $_.lintcsumalpha = function() {
        var _Lb = $k[--$j]; //#2565
        $k[$j++] = _Lb; //#2565
        if (_Lb.length < 2) { //#2565
            $j -= 2; //#2565
            $k[$j++] = 'bwipp.GS1alphaTooShort#2565'; //#2565
            $k[$j++] = "Alphanumeric string is too short to check"; //#2565
            $k[$j++] = false; //#2565
            return true; //#2565
        } //#2565
        var _Lc = $k[--$j]; //#2566
        $k[$j++] = _Lc; //#2568
        $k[$j++] = _Lc.length - 2; //#2568
        $k[$j++] = $geti(_Lc, 0, _Lc.length - 2); //#2568
        $k[$j++] = Infinity; //#2568
        var _Le = $k[--$j]; //#2568
        var _Lf = $k[--$j]; //#2568
        $k[$j++] = _Le; //#2570
        $forall(_Lf, function() { //#2570
            var _Lg = $k[--$j]; //#2569
            var _Li = $get($_.cset82, _Lg) !== undefined; //#2569
            $k[$j++] = _Lg; //#2569
            if (_Li) { //#2569
                var _Ll = $get($_.cset82, $k[--$j]); //#2569
                $k[$j++] = _Ll; //#2569
            } else { //#2569
                $k[$j++] = -1; //#2569
                return true; //#2569
            } //#2569
        }); //#2569
        var _Lm = $k[--$j]; //#2571
        $k[$j++] = _Lm; //#2571
        if (_Lm == -1) { //#2571
            $cleartomark(); //#2571
            $j -= 3; //#2571
            $k[$j++] = 'bwipp.GS1UnknownCSET82Character#2571'; //#2571
            $k[$j++] = "Unknown CSET 82 character"; //#2571
            $k[$j++] = false; //#2571
            return true; //#2571
        } //#2571
        $astore($a($counttomark())); //#2572
        var _Lp = $k[--$j]; //#2572
        var _Lq = $k[--$j]; //#2572
        $k[$j++] = _Lp; //#2572
        $k[$j++] = _Lq; //#2572
        $j--; //#2572
        var _Lr = $k[--$j]; //#2573
        var _Ls = $k[--$j]; //#2573
        var _Lu = $geti($k[--$j], _Ls, 2); //#2574
        $k[$j++] = _Lr; //#2574
        $k[$j++] = _Lu; //#2574
        $k[$j++] = Infinity; //#2574
        var _Lv = $k[--$j]; //#2574
        var _Lw = $k[--$j]; //#2574
        $k[$j++] = _Lv; //#2576
        $forall(_Lw, function() { //#2576
            var _Lx = $k[--$j]; //#2575
            var _Lz = $get($_.cset32, _Lx) !== undefined; //#2575
            $k[$j++] = _Lx; //#2575
            if (_Lz) { //#2575
                var _M2 = $get($_.cset32, $k[--$j]); //#2575
                $k[$j++] = _M2; //#2575
            } else { //#2575
                $k[$j++] = -1; //#2575
                return true; //#2575
            } //#2575
        }); //#2575
        var _M3 = $k[--$j]; //#2577
        $k[$j++] = _M3; //#2577
        if (_M3 == -1) { //#2577
            $cleartomark(); //#2577
            $j -= 2; //#2577
            $k[$j++] = 'bwipp.GS1UnknownCSET32Character#2577'; //#2577
            $k[$j++] = "Unknown CSET 32 character"; //#2577
            $k[$j++] = false; //#2577
            return true; //#2577
        } //#2577
        $astore($a($counttomark())); //#2578
        var _M6 = $k[--$j]; //#2578
        var _M7 = $k[--$j]; //#2578
        $k[$j++] = _M6; //#2578
        $k[$j++] = _M7; //#2578
        $j--; //#2578
        var _M8 = $k[--$j]; //#2579
        var _MB = $k[--$j]; //#2579
        var _MC = $a([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83]); //#2580
        var _MD = _MB.length; //#2582
        $k[$j++] = $f(($get(_M8, 0) << 5) + $get(_M8, 1)); //#2582
        $k[$j++] = _MB; //#2582
        $k[$j++] = _MC; //#2582
        $k[$j++] = _MD; //#2582
        if (_MD > _MC.length) { //#2582
            $j -= 5; //#2582
            $k[$j++] = 'bwipp.GS1alphaTooLong#2582'; //#2582
            $k[$j++] = "Alphanumeric string is too long to check"; //#2582
            $k[$j++] = false; //#2582
            return true; //#2582
        } //#2582
        var _ME = $k[--$j]; //#2583
        var _MG = $geti($k[--$j], 0, _ME); //#2583
        for (var _MH = 0, _MI = _MG.length; _MH < _MI; _MH++) { //#2583
            var _MK = $k[--$j]; //#2583
            $k[$j++] = $get(_MG, _MH); //#2583
            $k[$j++] = _MK; //#2583
        } //#2583
        var _ML = $k[--$j]; //#2584
        $k[$j++] = 0; //#2584
        $forall(_ML, function() { //#2584
            var _MM = $k[--$j]; //#2584
            var _MN = $k[--$j]; //#2584
            var _MO = $k[--$j]; //#2584
            $k[$j++] = $f(_MN + (_MO * _MM)); //#2584
        }); //#2584
        var _MP = $k[--$j]; //#2584
        if ($k[--$j] != (_MP % 1021)) { //#2585
            $j--; //#2585
            $k[$j++] = 'bwipp.GS1badAlphaCheckCharacters#2585'; //#2585
            $k[$j++] = "Bad alphanumeric check characters"; //#2585
            $k[$j++] = false; //#2585
            return true; //#2585
        } //#2585
    }; //#2585
    if (!bwipp_gs1process.__2609__) { //#2609
        $_ = Object.create($_); //#2609
        $k[$j++] = Infinity; //#2608
        var _MR = $a(['004', '008', '010', '012', '016', '020', '024', '028', '031', '032', '036', '040', '044', '048', '050', '051', '052', '056', '060', '064', '068', '070', '072', '074', '076', '084', '086', '090', '092', '096', '100', '104', '108', '112', '116', '120', '124', '132', '136', '140', '144', '148', '152', '156', '158', '162', '166', '170', '174', '175', '178', '180', '184', '188', '191', '192', '196', '203', '204', '208', '212', '214', '218', '222', '226', '231', '232', '233', '234', '238', '239', '242', '246', '248', '250', '254', '258', '260', '262', '266', '268', '270', '275', '276', '288', '292', '296', '300', '304', '308', '312', '316', '320', '324', '328', '332', '334', '336', '340', '344', '348', '352', '356', '360', '364', '368', '372', '376', '380', '384', '388', '392', '398', '400', '404', '408', '410', '414', '417', '418', '422', '426', '428', '430', '434', '438', '440', '442', '446', '450', '454', '458', '462', '466', '470', '474', '478', '480', '484', '492', '496', '498', '499', '500', '504', '508', '512', '516', '520', '524', '528', '531', '533', '534', '535', '540', '548', '554', '558', '562', '566', '570', '574', '578', '580', '581', '583', '584', '585', '586', '591', '598', '600', '604', '608', '612', '616', '620', '624', '626', '630', '634', '638', '642', '643', '646', '652', '654', '659', '660', '662', '663', '666', '670', '674', '678', '682', '686', '688', '690', '694', '702', '703', '704', '705', '706', '710', '716', '724', '728', '729', '732', '740', '744', '748', '752', '756', '760', '762', '764', '768', '772', '776', '780', '784', '788', '792', '795', '796', '798', '800', '804', '807', '818', '826', '831', '832', '833', '834', '840', '850', '854', '858', '860', '862', '876', '882', '887', '894']); //#2607
        for (var _MS = 0, _MT = _MR.length; _MS < _MT; _MS++) { //#2608
            var _MU = $get(_MR, _MS); //#2608
            $k[$j++] = _MU; //#2608
            $k[$j++] = _MU; //#2608
        } //#2608
        $_.iso3166 = $d(); //#2608
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_gs1process.$ctx[id] = $_[id]); //#2608
        bwipp_gs1process.__2609__ = 1; //#2608
        $_ = Object.getPrototypeOf($_); //#2608
    } //#2608
    $_.lintiso3166 = function() {
        var _MZ = $get($_.iso3166, $k[--$j]) !== undefined; //#2612
        if (!_MZ) { //#2612
            $j--; //#2612
            $k[$j++] = 'bwipp.GS1UnknownCountry#2612'; //#2612
            $k[$j++] = "Unknown country code"; //#2612
            $k[$j++] = false; //#2612
            return true; //#2612
        } //#2612
    }; //#2612
    $_.lintiso3166999 = function() {
        var _Ma = $k[--$j]; //#2616
        $k[$j++] = _Ma; //#2620
        if ($ne(_Ma, '999')) { //#2619
            var _Md = $get($_.iso3166, $k[--$j]) !== undefined; //#2617
            if (!_Md) { //#2617
                $j--; //#2617
                $k[$j++] = 'bwipp.GS1UnknownCountryOr999#2617'; //#2617
                $k[$j++] = "Unknown country code or not 999"; //#2617
                $k[$j++] = false; //#2617
                return true; //#2617
            } //#2617
        } else { //#2619
            $j--; //#2619
        } //#2619
    }; //#2619
    $_.lintiso3166list = function() {
        var _Me = $k[--$j]; //#2624
        $k[$j++] = _Me; //#2626
        if ((_Me.length % 3) != 0) { //#2626
            $j -= 2; //#2625
            $k[$j++] = 'bwipp.GS1BadCountryListLength#2625'; //#2625
            $k[$j++] = "Not a group of three-digit country codes"; //#2625
            $k[$j++] = false; //#2625
            return true; //#2625
        } //#2625
        var _Mf = $k[--$j]; //#2628
        $k[$j++] = _Mf; //#2631
        $k[$j++] = true; //#2631
        for (var _Mh = 0, _Mg = _Mf.length - 1; _Mh <= _Mg; _Mh += 3) { //#2631
            var _Mi = $k[--$j]; //#2629
            var _Mj = $k[--$j]; //#2629
            var _Mm = $get($_.iso3166, $geti(_Mj, _Mh, 3)) !== undefined; //#2630
            $k[$j++] = _Mj; //#2630
            $k[$j++] = _Mi; //#2630
            if (!_Mm) { //#2630
                $j -= 2; //#2630
                $k[$j++] = false; //#2630
                break; //#2630
            } //#2630
        } //#2630
        if ($nt($k[--$j])) { //#2632
            $j--; //#2632
            $k[$j++] = 'bwipp.GS1UnknownCountry#2632'; //#2632
            $k[$j++] = "Unknown country code"; //#2632
            $k[$j++] = false; //#2632
            return true; //#2632
        } //#2632
        $j--; //#2633
    }; //#2633
    if (!bwipp_gs1process.__2663__) { //#2663
        $_ = Object.create($_); //#2663
        $k[$j++] = Infinity; //#2662
        var _Mo = $a(['AD', 'AE', 'AF', 'AG', 'AI', 'AL', 'AM', 'AO', 'AQ', 'AR', 'AS', 'AT', 'AU', 'AW', 'AX', 'AZ', 'BA', 'BB', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ', 'BL', 'BM', 'BN', 'BO', 'BQ', 'BR', 'BS', 'BT', 'BV', 'BW', 'BY', 'BZ', 'CA', 'CC', 'CD', 'CF', 'CG', 'CH', 'CI', 'CK', 'CL', 'CM', 'CN', 'CO', 'CR', 'CU', 'CV', 'CW', 'CX', 'CY', 'CZ', 'DE', 'DJ', 'DK', 'DM', 'DO', 'DZ', 'EC', 'EE', 'EG', 'EH', 'ER', 'ES', 'ET', 'FI', 'FJ', 'FK', 'FM', 'FO', 'FR', 'GA', 'GB', 'GD', 'GE', 'GF', 'GG', 'GH', 'GI', 'GL', 'GM', 'GN', 'GP', 'GQ', 'GR', 'GS', 'GT', 'GU', 'GW', 'GY', 'HK', 'HM', 'HN', 'HR', 'HT', 'HU', 'ID', 'IE', 'IL', 'IM', 'IN', 'IO', 'IQ', 'IR', 'IS', 'IT', 'JE', 'JM', 'JO', 'JP', 'KE', 'KG', 'KH', 'KI', 'KM', 'KN', 'KP', 'KR', 'KW', 'KY', 'KZ', 'LA', 'LB', 'LC', 'LI', 'LK', 'LR', 'LS', 'LT', 'LU', 'LV', 'LY', 'MA', 'MC', 'MD', 'ME', 'MF', 'MG', 'MH', 'MK', 'ML', 'MM', 'MN', 'MO', 'MP', 'MQ', 'MR', 'MS', 'MT', 'MU', 'MV', 'MW', 'MX', 'MY', 'MZ', 'NA', 'NC', 'NE', 'NF', 'NG', 'NI', 'NL', 'NO', 'NP', 'NR', 'NU', 'NZ', 'OM', 'PA', 'PE', 'PF', 'PG', 'PH', 'PK', 'PL', 'PM', 'PN', 'PR', 'PS', 'PT', 'PW', 'PY', 'QA', 'RE', 'RO', 'RS', 'RU', 'RW', 'SA', 'SB', 'SC', 'SD', 'SE', 'SG', 'SH', 'SI', 'SJ', 'SK', 'SL', 'SM', 'SN', 'SO', 'SR', 'SS', 'ST', 'SV', 'SX', 'SY', 'SZ', 'TC', 'TD', 'TF', 'TG', 'TH', 'TJ', 'TK', 'TL', 'TM', 'TN', 'TO', 'TR', 'TT', 'TV', 'TW', 'TZ', 'UA', 'UG', 'UM', 'US', 'UY', 'UZ', 'VA', 'VC', 'VE', 'VG', 'VI', 'VN', 'VU', 'WF', 'WS', 'YE', 'YT', 'ZA', 'ZM', 'ZW']); //#2661
        for (var _Mp = 0, _Mq = _Mo.length; _Mp < _Mq; _Mp++) { //#2662
            var _Mr = $get(_Mo, _Mp); //#2662
            $k[$j++] = _Mr; //#2662
            $k[$j++] = _Mr; //#2662
        } //#2662
        $_.iso3166alpha2 = $d(); //#2662
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_gs1process.$ctx[id] = $_[id]); //#2662
        bwipp_gs1process.__2663__ = 1; //#2662
        $_ = Object.getPrototypeOf($_); //#2662
    } //#2662
    $_.lintiso3166alpha2 = function() {
        var _Mw = $get($_.iso3166alpha2, $k[--$j]) !== undefined; //#2666
        if (!_Mw) { //#2666
            $j--; //#2666
            $k[$j++] = 'bwipp.GS1UnknownCountryAlpha#2666'; //#2666
            $k[$j++] = "Unknown country alpha code"; //#2666
            $k[$j++] = false; //#2666
            return true; //#2666
        } //#2666
    }; //#2666
    if (!bwipp_gs1process.__2694__) { //#2694
        $_ = Object.create($_); //#2694
        $k[$j++] = Infinity; //#2693
        var _Mx = $a(['008', '012', '032', '036', '044', '048', '050', '051', '052', '060', '064', '068', '072', '084', '090', '096', '104', '108', '116', '124', '132', '136', '144', '152', '156', '170', '174', '188', '191', '192', '203', '208', '214', '222', '230', '232', '238', '242', '262', '270', '292', '320', '324', '328', '332', '340', '344', '348', '352', '356', '360', '364', '368', '376', '388', '392', '398', '400', '404', '408', '410', '414', '417', '418', '422', '426', '430', '434', '446', '454', '458', '462', '480', '484', '496', '498', '504', '512', '516', '524', '532', '533', '548', '554', '558', '566', '578', '586', '590', '598', '600', '604', '608', '634', '643', '646', '654', '682', '690', '694', '702', '704', '706', '710', '728', '748', '752', '756', '760', '764', '776', '780', '784', '788', '800', '807', '818', '826', '834', '840', '858', '860', '882', '886', '901', '925', '927', '928', '929', '930', '931', '932', '933', '934', '936', '938', '940', '941', '943', '944', '946', '947', '948', '949', '950', '951', '952', '953', '955', '956', '957', '958', '959', '960', '961', '962', '963', '964', '965', '967', '968', '969', '970', '971', '972', '973', '975', '976', '977', '978', '979', '980', '981', '984', '985', '986', '990', '994', '997', '999']); //#2692
        for (var _My = 0, _Mz = _Mx.length; _My < _Mz; _My++) { //#2693
            var _N0 = $get(_Mx, _My); //#2693
            $k[$j++] = _N0; //#2693
            $k[$j++] = _N0; //#2693
        } //#2693
        $_.iso4217 = $d(); //#2693
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_gs1process.$ctx[id] = $_[id]); //#2693
        bwipp_gs1process.__2694__ = 1; //#2693
        $_ = Object.getPrototypeOf($_); //#2693
    } //#2693
    $_.lintiso4217 = function() {
        var _N5 = $get($_.iso4217, $k[--$j]) !== undefined; //#2697
        if (!_N5) { //#2697
            $j--; //#2697
            $k[$j++] = 'bwipp.GS1UnknownCurrency#2697'; //#2697
            $k[$j++] = "Unknown currency code"; //#2697
            $k[$j++] = false; //#2697
            return true; //#2697
        } //#2697
    }; //#2697
    $_.lintiban = function() {
        var _N6 = $k[--$j]; //#2701
        $k[$j++] = _N6; //#2701
        if (_N6.length <= 4) { //#2701
            $j -= 2; //#2701
            $k[$j++] = 'bwipp.GS1tooShort#2701'; //#2701
            $k[$j++] = "IBAN too short"; //#2701
            $k[$j++] = false; //#2701
            return true; //#2701
        } //#2701
        var _N7 = $k[--$j]; //#2702
        $k[$j++] = _N7; //#2707
        $k[$j++] = true; //#2707
        $forall(_N7, function() { //#2707
            var _N8 = $s(1); //#2703
            $put(_N8, 0, $k[--$j]); //#2703
            $search("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ", _N8); //#2705
            if ($nt($k[--$j])) { //#2705
                $j -= 2; //#2705
                $k[$j++] = false; //#2705
                return true; //#2705
            } //#2705
            $j -= 3; //#2706
        }); //#2706
        if ($nt($k[--$j])) { //#2708
            $j--; //#2708
            $k[$j++] = 'bwipp.GS1badIBANcharacter#2708'; //#2708
            $k[$j++] = "Invalid IBAN character"; //#2708
            $k[$j++] = false; //#2708
            return true; //#2708
        } //#2708
        var _NC = $k[--$j]; //#2709
        $k[$j++] = _NC; //#2709
        $k[$j++] = _NC; //#2709
        $k[$j++] = Infinity; //#2709
        var _ND = $k[--$j]; //#2709
        var _NE = $k[--$j]; //#2709
        $k[$j++] = _ND; //#2709
        $k[$j++] = _NE; //#2709
        $k[$j++] = Infinity; //#2709
        var _NF = $k[--$j]; //#2709
        var _NG = $k[--$j]; //#2709
        $k[$j++] = _NF; //#2709
        $forall(_NG); //#2709
        $r($counttomark(), -4); //#2709
        $astore($a($counttomark())); //#2709
        var _NK = $k[--$j]; //#2709
        var _NL = $k[--$j]; //#2709
        $k[$j++] = _NK; //#2709
        $k[$j++] = _NL; //#2709
        $j--; //#2709
        $forall($k[--$j], function() { //#2711
            var _NO = $f($k[--$j] - 48); //#2710
            $k[$j++] = _NO; //#2710
            if (_NO > 9) { //#2710
                var _NQ = $f($k[--$j] - 7); //#2710
                $k[$j++] = ~~(_NQ / 10); //#2710
                $k[$j++] = _NQ % 10; //#2710
            } //#2710
        }); //#2710
        $astore($a($counttomark())); //#2711
        var _NT = $k[--$j]; //#2711
        var _NU = $k[--$j]; //#2711
        $k[$j++] = _NT; //#2711
        $k[$j++] = _NU; //#2711
        $j--; //#2711
        var _NV = $k[--$j]; //#2712
        $k[$j++] = 0; //#2712
        $forall(_NV, function() { //#2712
            var _NW = $k[--$j]; //#2712
            var _NX = $k[--$j]; //#2712
            $k[$j++] = ($f(_NW + (_NX * 10))) % 97; //#2712
        }); //#2712
        if ($k[--$j] != 1) { //#2713
            $j -= 2; //#2713
            $k[$j++] = 'bwipp.GS1badIBANchecksum#2713'; //#2713
            $k[$j++] = "IBAN checksum incorrect"; //#2713
            $k[$j++] = false; //#2713
            return true; //#2713
        } //#2713
        var _Na = $geti($k[--$j], 0, 2); //#2714
        $k[$j++] = _Na; //#2714
        $_.lintiso3166alpha2(); //#2714
    }; //#2714
    $_.lintzero = function() {
        if ($ne($k[--$j], "0")) { //#2718
            $j--; //#2718
            $k[$j++] = 'bwipp.GS1zeroRequired#2718'; //#2718
            $k[$j++] = "Zero is required"; //#2718
            $k[$j++] = false; //#2718
            return true; //#2718
        } //#2718
    }; //#2718
    $_.lintnonzero = function() {
        var _Nc = $k[--$j]; //#2722
        $k[$j++] = false; //#2722
        $forall(_Nc, function() { //#2722
            if ($k[--$j] != 48) { //#2722
                $j--; //#2722
                $k[$j++] = true; //#2722
            } //#2722
        }); //#2722
        if ($nt($k[--$j])) { //#2723
            $j--; //#2723
            $k[$j++] = 'bwipp.GS1zeroNotPermitted#2723'; //#2723
            $k[$j++] = "Zero not permitted"; //#2723
            $k[$j++] = false; //#2723
            return true; //#2723
        } //#2723
    }; //#2723
    $_.lintnozeroprefix = function() {
        var _Nf = $k[--$j]; //#2727
        if ((_Nf.length > 1) && ($get(_Nf, 0) == 48)) { //#2729
            $j--; //#2728
            $k[$j++] = 'bwipp.GS1badZeroPrefix#2728'; //#2728
            $k[$j++] = "Zero prefix is not permitted"; //#2728
            $k[$j++] = false; //#2728
            return true; //#2728
        } //#2728
    }; //#2728
    $_.lintyymmd0 = function() {
        var _Nh = $k[--$j]; //#2733
        var _Nj = $cvi($geti(_Nh, 2, 2)); //#2733
        $k[$j++] = _Nh; //#2733
        if ((_Nj < 1) || (_Nj > 12)) { //#2733
            $j--; //#2733
            $k[$j++] = 'bwipp.GS1badMonth#2733'; //#2733
            $k[$j++] = "Invalid month"; //#2733
            $k[$j++] = false; //#2733
            return true; //#2733
        } //#2733
        var _Nk = $k[--$j]; //#2734
        var _Nm = $cvi($geti(_Nk, 0, 2)); //#2734
        var _Nn = _Nm - 21; //#2735
        $k[$j++] = _Nk; //#2735
        $k[$j++] = _Nm; //#2735
        $k[$j++] = _Nn; //#2735
        if (_Nn >= 51) { //#2735
            $j--; //#2735
            var _No = $k[--$j]; //#2735
            $k[$j++] = $f(_No + 1900); //#2735
        } else { //#2735
            if ($k[--$j] <= -50) { //#2735
                var _Nq = $k[--$j]; //#2735
                $k[$j++] = $f(_Nq + 2100); //#2735
            } else { //#2735
                var _Nr = $k[--$j]; //#2735
                $k[$j++] = $f(_Nr + 2000); //#2735
            } //#2735
        } //#2735
        var _Ns = $k[--$j]; //#2736
        $k[$j++] = ((_Ns % 400) == 0) || (((_Ns % 4) == 0) && ((_Ns % 100) != 0)); //#2737
        $k[$j++] = Infinity; //#2737
        var _Nt = $k[--$j]; //#2737
        var _Nv = $k[--$j] ? 29 : 28; //#2737
        $k[$j++] = _Nt; //#2737
        $k[$j++] = 31; //#2737
        $k[$j++] = _Nv; //#2737
        $k[$j++] = 31; //#2737
        $k[$j++] = 30; //#2737
        $k[$j++] = 31; //#2737
        $k[$j++] = 30; //#2737
        $k[$j++] = 31; //#2737
        $k[$j++] = 31; //#2737
        $k[$j++] = 30; //#2737
        $k[$j++] = 31; //#2737
        $k[$j++] = 30; //#2737
        $k[$j++] = 31; //#2737
        var _Nw = $a(); //#2737
        var _Nx = $k[--$j]; //#2738
        if ($get(_Nw, $cvi($geti(_Nx, 2, 2)) - 1) < $cvi($geti(_Nx, 4, 2))) { //#2739
            $j--; //#2739
            $k[$j++] = 'bwipp.GS1badDay#2739'; //#2739
            $k[$j++] = "Invalid day of month"; //#2739
            $k[$j++] = false; //#2739
            return true; //#2739
        } //#2739
    }; //#2739
    $_.lintyymmdd = function() {
        var _O1 = $k[--$j]; //#2743
        $k[$j++] = _O1; //#2743
        if (_O1.length != 6) { //#2743
            $j--; //#2743
            $k[$j++] = 'bwipp.GS1badDateLength#2743'; //#2743
            $k[$j++] = "Invalid length for date"; //#2743
            $k[$j++] = false; //#2743
            return true; //#2743
        } //#2743
        var _O2 = $k[--$j]; //#2744
        $k[$j++] = _O2; //#2744
        if ($cvi($geti(_O2, 4, 2)) < 1) { //#2744
            $j--; //#2744
            $k[$j++] = 'bwipp.GS1badDay#2744'; //#2744
            $k[$j++] = "Invalid day of month"; //#2744
            $k[$j++] = false; //#2744
            return true; //#2744
        } //#2744
        $_.lintyymmd0(); //#2745
    }; //#2745
    $_.lintyymmddhh = function() {
        var _O4 = $k[--$j]; //#2749
        $k[$j++] = _O4; //#2749
        if (_O4.length != 8) { //#2749
            $j--; //#2749
            $k[$j++] = 'bwipp.GS1badYYMMDDHHLength#2749'; //#2749
            $k[$j++] = "Invalid length for date with hour"; //#2749
            $k[$j++] = false; //#2749
            return true; //#2749
        } //#2749
        var _O5 = $k[--$j]; //#2750
        $k[$j++] = _O5; //#2750
        if ($cvi($geti(_O5, 6, 2)) > 23) { //#2750
            $j -= 2; //#2750
            $k[$j++] = 'bwipp.GS1badHour#2750'; //#2750
            $k[$j++] = "Invalid hour of day"; //#2750
            $k[$j++] = false; //#2750
            return true; //#2750
        } //#2750
        var _O8 = $geti($k[--$j], 0, 6); //#2751
        $k[$j++] = _O8; //#2751
        $_.lintyymmdd(); //#2751
    }; //#2751
    $_.linthhmm = function() {
        var _O9 = $k[--$j]; //#2755
        $k[$j++] = _O9; //#2755
        if ($cvi($geti(_O9, 0, 2)) > 23) { //#2755
            $j -= 2; //#2755
            $k[$j++] = 'bwipp.GS1badHour#2755'; //#2755
            $k[$j++] = "Invalid hour of day"; //#2755
            $k[$j++] = false; //#2755
            return true; //#2755
        } //#2755
        if ($cvi($geti($k[--$j], 2, 2)) > 59) { //#2756
            $j--; //#2756
            $k[$j++] = 'bwipp.GS1badMinute#2756'; //#2756
            $k[$j++] = "Invalid minute in the hour"; //#2756
            $k[$j++] = false; //#2756
            return true; //#2756
        } //#2756
    }; //#2756
    $_.lintmmoptss = function() {
        var _OD = $k[--$j]; //#2760
        var _OE = _OD.length; //#2760
        $k[$j++] = _OD; //#2762
        if ((_OE != 2) && (_OE != 4)) { //#2762
            $j--; //#2761
            $k[$j++] = 'bwipp.GS1badTimeLength#2761'; //#2761
            $k[$j++] = "Invalid length for optional minutes and seconds"; //#2761
            $k[$j++] = false; //#2761
            return true; //#2761
        } //#2761
        var _OF = $k[--$j]; //#2763
        $k[$j++] = _OF; //#2763
        if ($cvi($geti(_OF, 0, 2)) > 59) { //#2763
            $j -= 2; //#2763
            $k[$j++] = 'bwipp.GS1badMinute#2763'; //#2763
            $k[$j++] = "Invalid minute in the hour"; //#2763
            $k[$j++] = false; //#2763
            return true; //#2763
        } //#2763
        var _OH = $k[--$j]; //#2764
        $k[$j++] = _OH; //#2766
        if (_OH.length >= 4) { //#2766
            var _OI = $k[--$j]; //#2765
            $k[$j++] = _OI; //#2765
            if ($cvi($geti(_OI, 2, 2)) > 59) { //#2765
                $j -= 2; //#2765
                $k[$j++] = 'bwipp.GS1badSecond#2765'; //#2765
                $k[$j++] = "Invalid second in the minute"; //#2765
                $k[$j++] = false; //#2765
                return true; //#2765
            } //#2765
        } //#2765
        $j--; //#2767
    }; //#2767
    $_.lintyesno = function() {
        var _OK = $k[--$j]; //#2771
        if ($ne(_OK, "0") && $ne(_OK, "1")) { //#2773
            $j--; //#2772
            $k[$j++] = 'bwipp.GS1badBoolean#2772'; //#2772
            $k[$j++] = "Neither 0 nor 1 for yes or no"; //#2772
            $k[$j++] = false; //#2772
            return true; //#2772
        } //#2772
    }; //#2772
    $_.lintwinding = function() {
        var _OL = $k[--$j]; //#2777
        if ($ne(_OL, "0") && ($ne(_OL, "1") && $ne(_OL, "9"))) { //#2779
            $j--; //#2778
            $k[$j++] = 'bwipp.GS1badWinding#2778'; //#2778
            $k[$j++] = "Invalid winding direction"; //#2778
            $k[$j++] = false; //#2778
            return true; //#2778
        } //#2778
    }; //#2778
    $_.lintpieceoftotal = function() {
        var _OM = $k[--$j]; //#2783
        $k[$j++] = _OM; //#2783
        if ((_OM.length % 2) != 0) { //#2783
            $j -= 2; //#2783
            $k[$j++] = 'bwipp.GS1badPieceTotalLength#2783'; //#2783
            $k[$j++] = "Invalid piece/total length"; //#2783
            $k[$j++] = false; //#2783
            return true; //#2783
        } //#2783
        var _ON = $k[--$j]; //#2784
        var _OP = $cvi($geti(_ON, 0, ~~(_ON.length / 2))); //#2785
        $k[$j++] = _ON; //#2785
        $k[$j++] = _OP; //#2785
        if (_OP == 0) { //#2785
            $j -= 3; //#2785
            $k[$j++] = 'bwipp.GS1badPieceNumber#2785'; //#2785
            $k[$j++] = "Invalid piece number"; //#2785
            $k[$j++] = false; //#2785
            return true; //#2785
        } //#2785
        var _OQ = $k[--$j]; //#2786
        var _OR = $k[--$j]; //#2786
        var _OS = ~~(_OR.length / 2); //#2786
        var _OU = $cvi($geti(_OR, _OS, _OS)); //#2787
        $k[$j++] = _OQ; //#2787
        $k[$j++] = _OU; //#2787
        if (_OU == 0) { //#2787
            $j -= 3; //#2787
            $k[$j++] = 'bwipp.GS1badPieceTotal#2787'; //#2787
            $k[$j++] = "Invalid total number"; //#2787
            $k[$j++] = false; //#2787
            return true; //#2787
        } //#2787
        var _OV = $k[--$j]; //#2788
        if ($gt($k[--$j], _OV)) { //#2788
            $j--; //#2788
            $k[$j++] = 'bwipp.GS1pieceExceedsTotal#2788'; //#2788
            $k[$j++] = "Piece number exceeds total"; //#2788
            $k[$j++] = false; //#2788
            return true; //#2788
        } //#2788
    }; //#2788
    $_.lintpcenc = function() {
        for (;;) { //#2802
            $search($k[--$j], "%"); //#2793
            if ($nt($k[--$j])) { //#2793
                $j--; //#2793
                break; //#2793
            } //#2793
            $j -= 2; //#2794
            var _OZ = $k[--$j]; //#2794
            $k[$j++] = _OZ; //#2794
            if (_OZ.length < 2) { //#2794
                $j -= 2; //#2794
                $k[$j++] = 'bwipp.GS1badPercentEscape#2794'; //#2794
                $k[$j++] = "Invalid % escape"; //#2794
                $k[$j++] = false; //#2794
                break; //#2794
            } //#2794
            var _Oa = $k[--$j]; //#2795
            var _Ob = $geti(_Oa, 0, 2); //#2795
            $k[$j++] = _Oa; //#2800
            $k[$j++] = true; //#2800
            for (var _Oc = 0, _Od = _Ob.length; _Oc < _Od; _Oc++) { //#2800
                var _Of = $s(1); //#2796
                $put(_Of, 0, $get(_Ob, _Oc)); //#2796
                $search("0123456789ABCDEFabcdef", _Of); //#2798
                if ($nt($k[--$j])) { //#2798
                    $j -= 2; //#2798
                    $k[$j++] = false; //#2798
                    break; //#2798
                } //#2798
                $j -= 3; //#2799
            } //#2799
            if ($nt($k[--$j])) { //#2801
                $j -= 2; //#2801
                $k[$j++] = 'bwipp.GS1badPercentChars#2801'; //#2801
                $k[$j++] = "Invalid characters for percent encoding"; //#2801
                $k[$j++] = false; //#2801
                break; //#2801
            } //#2801
        } //#2801
    }; //#2801
    $_.lintcouponcode = function() {
        var _Oi = $k[--$j]; //#2806
        $k[$j++] = _Oi; //#2808
        $k[$j++] = true; //#2808
        $forall(_Oi, function() { //#2808
            var _Oj = $k[--$j]; //#2807
            if ((_Oj < 48) || (_Oj > 57)) { //#2807
                $j--; //#2807
                $k[$j++] = false; //#2807
                return true; //#2807
            } //#2807
        }); //#2807
        if ($nt($k[--$j])) { //#2809
            $j -= 2; //#2809
            $k[$j++] = 'bwipp.GS1couponNotNumeric#2809'; //#2809
            $k[$j++] = "Coupon not numeric"; //#2809
            $k[$j++] = false; //#2809
            return true; //#2809
        } //#2809
        var _Ol = $k[--$j]; //#2812
        $k[$j++] = _Ol; //#2814
        if (_Ol.length < 1) { //#2814
            $j -= 2; //#2813
            $k[$j++] = 'bwipp.GS1couponTooShortGCPVLI#2813'; //#2813
            $k[$j++] = "Coupon too short: Missing GCP VLI"; //#2813
            $k[$j++] = false; //#2813
            return true; //#2813
        } //#2813
        var _Om = $k[--$j]; //#2815
        var _Oo = $cvi($geti(_Om, 0, 1)); //#2815
        $k[$j++] = _Om; //#2817
        $k[$j++] = _Oo; //#2817
        if (_Oo > 6) { //#2817
            $j -= 2; //#2816
            $k[$j++] = 'bwipp.GS1couponBadGCPVLI#2816'; //#2816
            $k[$j++] = "Coupon GCP length indicator must be 0-6"; //#2816
            $k[$j++] = false; //#2816
            return true; //#2816
        } //#2816
        var _Op = $k[--$j]; //#2818
        var _Oq = $k[--$j]; //#2819
        $k[$j++] = _Oq; //#2821
        $k[$j++] = $f($f(_Op + 6) + 1); //#2821
        if (($f($f(_Op + 6) + 1)) > _Oq.length) { //#2821
            $j -= 3; //#2820
            $k[$j++] = 'bwipp.GS1couponTooShortGCP#2820'; //#2820
            $k[$j++] = "Coupon too short: GCP truncated"; //#2820
            $k[$j++] = false; //#2820
            return true; //#2820
        } //#2820
        var _Or = $k[--$j]; //#2822
        var _Os = $k[--$j]; //#2822
        var _Ot = $geti(_Os, _Or, $f(_Os.length - _Or)); //#2822
        $k[$j++] = _Ot; //#2827
        if (_Ot.length < 6) { //#2827
            $j -= 2; //#2826
            $k[$j++] = 'bwipp.GS1couponTooShortOfferCode#2826'; //#2826
            $k[$j++] = "Coupon too short: Offer Code truncated"; //#2826
            $k[$j++] = false; //#2826
            return true; //#2826
        } //#2826
        var _Ou = $k[--$j]; //#2828
        var _Ov = $geti(_Ou, 6, _Ou.length - 6); //#2828
        $k[$j++] = _Ov; //#2833
        if (_Ov.length < 1) { //#2833
            $j -= 2; //#2832
            $k[$j++] = 'bwipp.GS1couponTooShortSaveValueVLI#2832'; //#2832
            $k[$j++] = "Coupon too short: Missing Save Value VLI"; //#2832
            $k[$j++] = false; //#2832
            return true; //#2832
        } //#2832
        var _Ow = $k[--$j]; //#2834
        var _Oy = $cvi($geti(_Ow, 0, 1)); //#2834
        $k[$j++] = _Ow; //#2836
        $k[$j++] = _Oy; //#2836
        if ((_Oy < 1) || (_Oy > 5)) { //#2836
            $j -= 2; //#2835
            $k[$j++] = 'bwipp.GS1couponBadSaveValueVLI#2835'; //#2835
            $k[$j++] = "Coupon Save Value length indicator must be 1-5"; //#2835
            $k[$j++] = false; //#2835
            return true; //#2835
        } //#2835
        var _Oz = $k[--$j]; //#2837
        var _P0 = $k[--$j]; //#2838
        $k[$j++] = _P0; //#2840
        $k[$j++] = $f(_Oz + 1); //#2840
        if ($f(_Oz + 1) > _P0.length) { //#2840
            $j -= 3; //#2839
            $k[$j++] = 'bwipp.GS1couponTooShortSaveValue#2839'; //#2839
            $k[$j++] = "Coupon too short: Save Value truncated"; //#2839
            $k[$j++] = false; //#2839
            return true; //#2839
        } //#2839
        var _P1 = $k[--$j]; //#2841
        var _P2 = $k[--$j]; //#2841
        var _P3 = $geti(_P2, _P1, $f(_P2.length - _P1)); //#2841
        $k[$j++] = _P3; //#2846
        if (_P3.length < 1) { //#2846
            $j -= 2; //#2845
            $k[$j++] = 'bwipp.GS1couponTooShort1stPurchaseRequirementVLI#2845'; //#2845
            $k[$j++] = "Coupon too short: Missing 1st Purchase Requirement VLI"; //#2845
            $k[$j++] = false; //#2845
            return true; //#2845
        } //#2845
        var _P4 = $k[--$j]; //#2847
        var _P6 = $cvi($geti(_P4, 0, 1)); //#2847
        $k[$j++] = _P4; //#2849
        $k[$j++] = _P6; //#2849
        if ((_P6 < 1) || (_P6 > 5)) { //#2849
            $j -= 2; //#2848
            $k[$j++] = 'bwipp.GS1couponBad1stPurchaseRequirementVLI#2848'; //#2848
            $k[$j++] = "Coupon 1st Purchase Requirement length indicator must be 1-5"; //#2848
            $k[$j++] = false; //#2848
            return true; //#2848
        } //#2848
        var _P7 = $k[--$j]; //#2850
        var _P8 = $k[--$j]; //#2851
        $k[$j++] = _P8; //#2853
        $k[$j++] = $f(_P7 + 1); //#2853
        if ($f(_P7 + 1) > _P8.length) { //#2853
            $j -= 3; //#2852
            $k[$j++] = 'bwipp.GS1couponTooShort1stPurchaseRequirement#2852'; //#2852
            $k[$j++] = "Coupon too short: 1st Purchase Requirement truncated"; //#2852
            $k[$j++] = false; //#2852
            return true; //#2852
        } //#2852
        var _P9 = $k[--$j]; //#2854
        var _PA = $k[--$j]; //#2854
        var _PB = $geti(_PA, _P9, $f(_PA.length - _P9)); //#2854
        $k[$j++] = _PB; //#2859
        if (_PB.length < 1) { //#2859
            $j -= 2; //#2858
            $k[$j++] = 'bwipp.GS1couponTooShort1stPurchaseRequirementCode#2858'; //#2858
            $k[$j++] = "Coupon too short: Missing 1st Purchase Requirement Code"; //#2858
            $k[$j++] = false; //#2858
            return true; //#2858
        } //#2858
        var _PC = $k[--$j]; //#2860
        var _PE = $cvi($geti(_PC, 0, 1)); //#2860
        $k[$j++] = _PC; //#2862
        if ((_PE > 4) && (_PE != 9)) { //#2862
            $j -= 2; //#2861
            $k[$j++] = 'bwipp.GS1couponBad1stPurchaseRequirementCode#2861'; //#2861
            $k[$j++] = "Coupon 1st Purchase Requirement Code must be 0-4 or 9"; //#2861
            $k[$j++] = false; //#2861
            return true; //#2861
        } //#2861
        var _PF = $k[--$j]; //#2863
        var _PG = $geti(_PF, 1, _PF.length - 1); //#2863
        $k[$j++] = _PG; //#2868
        if (_PG.length < 3) { //#2868
            $j -= 2; //#2867
            $k[$j++] = 'bwipp.GS1couponTooShort1stPurchaseFamilyCode#2867'; //#2867
            $k[$j++] = "Coupon too short: 1st Purchase Family Code truncated"; //#2867
            $k[$j++] = false; //#2867
            return true; //#2867
        } //#2867
        var _PH = $k[--$j]; //#2869
        var _PI = $geti(_PH, 3, _PH.length - 3); //#2869
        $k[$j++] = _PI; //#2925
        if (_PI.length >= 1) { //#2925
            var _PJ = $k[--$j]; //#2872
            $k[$j++] = _PJ; //#2925
            if ($cvi($geti(_PJ, 0, 1)) == 1) { //#2925
                var _PL = $k[--$j]; //#2873
                var _PM = $geti(_PL, 1, _PL.length - 1); //#2873
                $k[$j++] = _PM; //#2878
                if (_PM.length < 1) { //#2878
                    $j -= 2; //#2877
                    $k[$j++] = 'bwipp.GS1couponTooShortAdditionalPurchaseRulesCode#2877'; //#2877
                    $k[$j++] = "Coupon too short: Missing Additional Purchase Rules Code"; //#2877
                    $k[$j++] = false; //#2877
                    return true; //#2877
                } //#2877
                var _PN = $k[--$j]; //#2879
                $k[$j++] = _PN; //#2881
                if ($cvi($geti(_PN, 0, 1)) > 3) { //#2881
                    $j -= 2; //#2880
                    $k[$j++] = 'bwipp.GS1couponBadAdditionalPurchaseRulesCode#2880'; //#2880
                    $k[$j++] = "Coupon Additional Purchase Rules Code must be 0-3"; //#2880
                    $k[$j++] = false; //#2880
                    return true; //#2880
                } //#2880
                var _PP = $k[--$j]; //#2882
                var _PQ = $geti(_PP, 1, _PP.length - 1); //#2882
                $k[$j++] = _PQ; //#2887
                if (_PQ.length < 1) { //#2887
                    $j -= 2; //#2886
                    $k[$j++] = 'bwipp.GS1couponTooShort2ndPurchaseRequirementVLI#2886'; //#2886
                    $k[$j++] = "Coupon too short: Missing 2nd Purchase Requirement VLI"; //#2886
                    $k[$j++] = false; //#2886
                    return true; //#2886
                } //#2886
                var _PR = $k[--$j]; //#2888
                var _PT = $cvi($geti(_PR, 0, 1)); //#2888
                $k[$j++] = _PR; //#2890
                $k[$j++] = _PT; //#2890
                if ((_PT < 1) || (_PT > 5)) { //#2890
                    $j -= 2; //#2889
                    $k[$j++] = 'bwipp.GS1couponBad2ndPurchaseRequirementVLI#2889'; //#2889
                    $k[$j++] = "Coupon 2nd Purchase Requirement length indicator must be 1-5"; //#2889
                    $k[$j++] = false; //#2889
                    return true; //#2889
                } //#2889
                var _PU = $k[--$j]; //#2891
                var _PV = $k[--$j]; //#2892
                $k[$j++] = _PV; //#2894
                $k[$j++] = $f(_PU + 1); //#2894
                if ($f(_PU + 1) > _PV.length) { //#2894
                    $j -= 3; //#2893
                    $k[$j++] = 'bwipp.GS1couponTooShort2ndPurchaseRequirement#2893'; //#2893
                    $k[$j++] = "Coupon too short: 2nd Purchase Requirement truncated"; //#2893
                    $k[$j++] = false; //#2893
                    return true; //#2893
                } //#2893
                var _PW = $k[--$j]; //#2895
                var _PX = $k[--$j]; //#2895
                var _PY = $geti(_PX, _PW, $f(_PX.length - _PW)); //#2895
                $k[$j++] = _PY; //#2900
                if (_PY.length < 1) { //#2900
                    $j -= 2; //#2899
                    $k[$j++] = 'bwipp.GS1couponTooShort2ndPurchaseRequirementCode#2899'; //#2899
                    $k[$j++] = "Coupon too short: Missing 2nd Purchase Requirement Code"; //#2899
                    $k[$j++] = false; //#2899
                    return true; //#2899
                } //#2899
                var _PZ = $k[--$j]; //#2901
                var _Pb = $cvi($geti(_PZ, 0, 1)); //#2901
                $k[$j++] = _PZ; //#2903
                if ((_Pb > 4) && (_Pb != 9)) { //#2903
                    $j -= 2; //#2902
                    $k[$j++] = 'bwipp.GS1couponBad2ndPurchaseRequirementCode#2902'; //#2902
                    $k[$j++] = "Coupon 2nd Purchase Requirement Code must be 0-4 or 9"; //#2902
                    $k[$j++] = false; //#2902
                    return true; //#2902
                } //#2902
                var _Pc = $k[--$j]; //#2904
                var _Pd = $geti(_Pc, 1, _Pc.length - 1); //#2904
                $k[$j++] = _Pd; //#2909
                if (_Pd.length < 3) { //#2909
                    $j -= 2; //#2908
                    $k[$j++] = 'bwipp.GS1couponTooShort2ndPurchaseFamilyCode#2908'; //#2908
                    $k[$j++] = "Coupon too short: 2nd Purchase Family Code truncated"; //#2908
                    $k[$j++] = false; //#2908
                    return true; //#2908
                } //#2908
                var _Pe = $k[--$j]; //#2910
                var _Pf = $geti(_Pe, 3, _Pe.length - 3); //#2910
                $k[$j++] = _Pf; //#2915
                if (_Pf.length < 1) { //#2915
                    $j -= 2; //#2914
                    $k[$j++] = 'bwipp.GS1couponTooShort2ndPurchaseGCPVLI#2914'; //#2914
                    $k[$j++] = "Coupon too short: Missing 2nd Purchase GCP VLI"; //#2914
                    $k[$j++] = false; //#2914
                    return true; //#2914
                } //#2914
                var _Pg = $k[--$j]; //#2916
                var _Pi = $cvi($geti(_Pg, 0, 1)); //#2916
                $k[$j++] = _Pg; //#2918
                $k[$j++] = _Pi; //#2918
                if ((_Pi > 6) && (_Pi != 9)) { //#2918
                    $j -= 2; //#2917
                    $k[$j++] = 'bwipp.GS1couponBad2ndPurchaseGCPVLI#2917'; //#2917
                    $k[$j++] = "Coupon 2nd Purchase GCP length indicator must be 0-6 or 9"; //#2917
                    $k[$j++] = false; //#2917
                    return true; //#2917
                } //#2917
                var _Pj = $k[--$j]; //#2919
                $k[$j++] = _Pj; //#2919
                if (_Pj != 9) { //#2919
                    var _Pk = $k[--$j]; //#2919
                    $k[$j++] = $f(_Pk + 6); //#2919
                } else { //#2919
                    $j--; //#2919
                    $k[$j++] = 0; //#2919
                } //#2919
                var _Pl = $k[--$j]; //#2919
                var _Pm = $k[--$j]; //#2920
                $k[$j++] = _Pm; //#2922
                $k[$j++] = $f(_Pl + 1); //#2922
                if ($f(_Pl + 1) > _Pm.length) { //#2922
                    $j -= 3; //#2921
                    $k[$j++] = 'bwipp.GS1couponTooShort2ndPurchaseGCP#2921'; //#2921
                    $k[$j++] = "Coupon too short: 2nd Purchase GCP truncated"; //#2921
                    $k[$j++] = false; //#2921
                    return true; //#2921
                } //#2921
                var _Pn = $k[--$j]; //#2923
                var _Po = $k[--$j]; //#2923
                $k[$j++] = $geti(_Po, _Pn, $f(_Po.length - _Pn)); //#2923
            } //#2923
        } //#2923
        var _Pq = $k[--$j]; //#2928
        $k[$j++] = _Pq; //#2972
        if (_Pq.length >= 1) { //#2972
            var _Pr = $k[--$j]; //#2928
            $k[$j++] = _Pr; //#2972
            if ($cvi($geti(_Pr, 0, 1)) == 2) { //#2972
                var _Pt = $k[--$j]; //#2929
                var _Pu = $geti(_Pt, 1, _Pt.length - 1); //#2929
                $k[$j++] = _Pu; //#2934
                if (_Pu.length < 1) { //#2934
                    $j -= 2; //#2933
                    $k[$j++] = 'bwipp.GS1couponTooShort3rdPurchaseRequirementVLI#2933'; //#2933
                    $k[$j++] = "Coupon too short: Missing 3rd Purchase Requirement VLI"; //#2933
                    $k[$j++] = false; //#2933
                    return true; //#2933
                } //#2933
                var _Pv = $k[--$j]; //#2935
                var _Px = $cvi($geti(_Pv, 0, 1)); //#2935
                $k[$j++] = _Pv; //#2937
                $k[$j++] = _Px; //#2937
                if ((_Px < 1) || (_Px > 5)) { //#2937
                    $j -= 2; //#2936
                    $k[$j++] = 'bwipp.GS1couponBad3rdPurchaseRequirementVLI#2936'; //#2936
                    $k[$j++] = "Coupon 3rd Purchase Requirement length indicator must be 1-5"; //#2936
                    $k[$j++] = false; //#2936
                    return true; //#2936
                } //#2936
                var _Py = $k[--$j]; //#2938
                var _Pz = $k[--$j]; //#2939
                $k[$j++] = _Pz; //#2941
                $k[$j++] = $f(_Py + 1); //#2941
                if ($f(_Py + 1) > _Pz.length) { //#2941
                    $j -= 3; //#2940
                    $k[$j++] = 'bwipp.GS1couponTooShort3rdPurchaseRequirement#2940'; //#2940
                    $k[$j++] = "Coupon too short: 3rd Purchase Requirement truncated"; //#2940
                    $k[$j++] = false; //#2940
                    return true; //#2940
                } //#2940
                var _Q0 = $k[--$j]; //#2942
                var _Q1 = $k[--$j]; //#2942
                var _Q2 = $geti(_Q1, _Q0, $f(_Q1.length - _Q0)); //#2942
                $k[$j++] = _Q2; //#2947
                if (_Q2.length < 1) { //#2947
                    $j -= 2; //#2946
                    $k[$j++] = 'bwipp.GS1couponTooShort3rdPurchaseRequirementCode#2946'; //#2946
                    $k[$j++] = "Coupon too short: Missing 3rd Purchase Requirement Code"; //#2946
                    $k[$j++] = false; //#2946
                    return true; //#2946
                } //#2946
                var _Q3 = $k[--$j]; //#2948
                var _Q5 = $cvi($geti(_Q3, 0, 1)); //#2948
                $k[$j++] = _Q3; //#2950
                if ((_Q5 > 4) && (_Q5 != 9)) { //#2950
                    $j -= 2; //#2949
                    $k[$j++] = 'bwipp.GS1couponBad3rdPurchaseRequirementCode#2949'; //#2949
                    $k[$j++] = "Coupon 3rd Purchase Requirement Code must be 0-4 or 9"; //#2949
                    $k[$j++] = false; //#2949
                    return true; //#2949
                } //#2949
                var _Q6 = $k[--$j]; //#2951
                var _Q7 = $geti(_Q6, 1, _Q6.length - 1); //#2951
                $k[$j++] = _Q7; //#2956
                if (_Q7.length < 3) { //#2956
                    $j -= 2; //#2955
                    $k[$j++] = 'bwipp.GS1couponTooShort3rdPurchaseFamilyCode#2955'; //#2955
                    $k[$j++] = "Coupon too short: 3rd Purchase Family Code truncated"; //#2955
                    $k[$j++] = false; //#2955
                    return true; //#2955
                } //#2955
                var _Q8 = $k[--$j]; //#2957
                var _Q9 = $geti(_Q8, 3, _Q8.length - 3); //#2957
                $k[$j++] = _Q9; //#2962
                if (_Q9.length < 1) { //#2962
                    $j -= 2; //#2961
                    $k[$j++] = 'bwipp.GS1couponTooShort3rdPurchaseGCPVLI#2961'; //#2961
                    $k[$j++] = "Coupon too short: Missing 3rd Purchase GCP VLI"; //#2961
                    $k[$j++] = false; //#2961
                    return true; //#2961
                } //#2961
                var _QA = $k[--$j]; //#2963
                var _QC = $cvi($geti(_QA, 0, 1)); //#2963
                $k[$j++] = _QA; //#2965
                $k[$j++] = _QC; //#2965
                if ((_QC > 6) && (_QC != 9)) { //#2965
                    $j -= 2; //#2964
                    $k[$j++] = 'bwipp.GS1couponBad3rdPurchaseGCPVLI#2964'; //#2964
                    $k[$j++] = "Coupon 3rd Purchase GCP length indicator must be 0-6 or 9"; //#2964
                    $k[$j++] = false; //#2964
                    return true; //#2964
                } //#2964
                var _QD = $k[--$j]; //#2966
                $k[$j++] = _QD; //#2966
                if (_QD != 9) { //#2966
                    var _QE = $k[--$j]; //#2966
                    $k[$j++] = $f(_QE + 6); //#2966
                } else { //#2966
                    $j--; //#2966
                    $k[$j++] = 0; //#2966
                } //#2966
                var _QF = $k[--$j]; //#2966
                var _QG = $k[--$j]; //#2967
                $k[$j++] = _QG; //#2969
                $k[$j++] = $f(_QF + 1); //#2969
                if ($f(_QF + 1) > _QG.length) { //#2969
                    $j -= 3; //#2968
                    $k[$j++] = 'bwipp.GS1couponTooShort3rdPurchaseGCP#2968'; //#2968
                    $k[$j++] = "Coupon too short: 3rd Purchase GCP truncated"; //#2968
                    $k[$j++] = false; //#2968
                    return true; //#2968
                } //#2968
                var _QH = $k[--$j]; //#2970
                var _QI = $k[--$j]; //#2970
                $k[$j++] = $geti(_QI, _QH, $f(_QI.length - _QH)); //#2970
            } //#2970
        } //#2970
        $_.couponexpire = -1; //#2975
        var _QK = $k[--$j]; //#2976
        $k[$j++] = _QK; //#2994
        if (_QK.length >= 1) { //#2994
            var _QL = $k[--$j]; //#2976
            $k[$j++] = _QL; //#2994
            if ($cvi($geti(_QL, 0, 1)) == 3) { //#2994
                var _QN = $k[--$j]; //#2977
                var _QO = $geti(_QN, 1, _QN.length - 1); //#2977
                $k[$j++] = _QO; //#2982
                if (_QO.length < 6) { //#2982
                    $j -= 2; //#2981
                    $k[$j++] = 'bwipp.GS1couponTooShortExpirationDate#2981'; //#2981
                    $k[$j++] = "Coupon too short: Expiration date"; //#2981
                    $k[$j++] = false; //#2981
                    return true; //#2981
                } //#2981
                var _QP = $k[--$j]; //#2983
                var _QR = $cvi($geti(_QP, 2, 2)); //#2983
                $k[$j++] = _QP; //#2983
                if ((_QR < 1) || (_QR > 12)) { //#2983
                    $j -= 2; //#2983
                    $k[$j++] = 'bwipp.GS1couponExpirationDateBadMonth#2983'; //#2983
                    $k[$j++] = "Invalid month in expiration date"; //#2983
                    $k[$j++] = false; //#2983
                    return true; //#2983
                } //#2983
                var _QS = $k[--$j]; //#2984
                var _QU = $cvi($geti(_QS, 0, 2)); //#2984
                var _QV = _QU - 21; //#2985
                $k[$j++] = _QS; //#2985
                $k[$j++] = _QU; //#2985
                $k[$j++] = _QV; //#2985
                if (_QV >= 51) { //#2985
                    $j--; //#2985
                    var _QW = $k[--$j]; //#2985
                    $k[$j++] = $f(_QW + 1900); //#2985
                } else { //#2985
                    if ($k[--$j] <= -50) { //#2985
                        var _QY = $k[--$j]; //#2985
                        $k[$j++] = $f(_QY + 2100); //#2985
                    } else { //#2985
                        var _QZ = $k[--$j]; //#2985
                        $k[$j++] = $f(_QZ + 2000); //#2985
                    } //#2985
                } //#2985
                var _Qa = $k[--$j]; //#2986
                $k[$j++] = ((_Qa % 400) == 0) || (((_Qa % 4) == 0) && ((_Qa % 100) != 0)); //#2987
                $k[$j++] = Infinity; //#2987
                var _Qb = $k[--$j]; //#2987
                var _Qd = $k[--$j] ? 29 : 28; //#2987
                $k[$j++] = _Qb; //#2987
                $k[$j++] = 31; //#2987
                $k[$j++] = _Qd; //#2987
                $k[$j++] = 31; //#2987
                $k[$j++] = 30; //#2987
                $k[$j++] = 31; //#2987
                $k[$j++] = 30; //#2987
                $k[$j++] = 31; //#2987
                $k[$j++] = 31; //#2987
                $k[$j++] = 30; //#2987
                $k[$j++] = 31; //#2987
                $k[$j++] = 30; //#2987
                $k[$j++] = 31; //#2987
                var _Qe = $a(); //#2987
                var _Qf = $k[--$j]; //#2988
                var _Qj = $cvi($geti(_Qf, 4, 2)); //#2989
                $k[$j++] = _Qf; //#2990
                if (($get(_Qe, $cvi($geti(_Qf, 2, 2)) - 1) < _Qj) || (_Qj < 1)) { //#2990
                    $j -= 2; //#2990
                    $k[$j++] = 'bwipp.GS1couponExpirationDateBadDay#2990'; //#2990
                    $k[$j++] = "Invalid day of month in expiration date"; //#2990
                    $k[$j++] = false; //#2990
                    return true; //#2990
                } //#2990
                var _Qk = $k[--$j]; //#2991
                $_.couponexpire = $cvi($geti(_Qk, 0, 6)); //#2991
                $k[$j++] = $geti(_Qk, 6, _Qk.length - 6); //#2992
            } //#2992
        } //#2992
        var _Qn = $k[--$j]; //#2997
        $k[$j++] = _Qn; //#3018
        if (_Qn.length >= 1) { //#3018
            var _Qo = $k[--$j]; //#2997
            $k[$j++] = _Qo; //#3018
            if ($cvi($geti(_Qo, 0, 1)) == 4) { //#3018
                var _Qq = $k[--$j]; //#2998
                var _Qr = $geti(_Qq, 1, _Qq.length - 1); //#2998
                $k[$j++] = _Qr; //#3003
                if (_Qr.length < 6) { //#3003
                    $j -= 2; //#3002
                    $k[$j++] = 'bwipp.GS1couponTooShortStartDate#3002'; //#3002
                    $k[$j++] = "Coupon too short: Start date"; //#3002
                    $k[$j++] = false; //#3002
                    return true; //#3002
                } //#3002
                var _Qs = $k[--$j]; //#3004
                var _Qu = $cvi($geti(_Qs, 2, 2)); //#3004
                $k[$j++] = _Qs; //#3004
                if ((_Qu < 1) || (_Qu > 12)) { //#3004
                    $j -= 2; //#3004
                    $k[$j++] = 'bwipp.GS1couponStartDateBadMonth#3004'; //#3004
                    $k[$j++] = "Invalid month in start date"; //#3004
                    $k[$j++] = false; //#3004
                    return true; //#3004
                } //#3004
                var _Qv = $k[--$j]; //#3005
                var _Qx = $cvi($geti(_Qv, 0, 2)); //#3005
                var _Qy = _Qx - 21; //#3006
                $k[$j++] = _Qv; //#3006
                $k[$j++] = _Qx; //#3006
                $k[$j++] = _Qy; //#3006
                if (_Qy >= 51) { //#3006
                    $j--; //#3006
                    var _Qz = $k[--$j]; //#3006
                    $k[$j++] = $f(_Qz + 1900); //#3006
                } else { //#3006
                    if ($k[--$j] <= -50) { //#3006
                        var _R1 = $k[--$j]; //#3006
                        $k[$j++] = $f(_R1 + 2100); //#3006
                    } else { //#3006
                        var _R2 = $k[--$j]; //#3006
                        $k[$j++] = $f(_R2 + 2000); //#3006
                    } //#3006
                } //#3006
                var _R3 = $k[--$j]; //#3007
                $k[$j++] = ((_R3 % 400) == 0) || (((_R3 % 4) == 0) && ((_R3 % 100) != 0)); //#3008
                $k[$j++] = Infinity; //#3008
                var _R4 = $k[--$j]; //#3008
                var _R6 = $k[--$j] ? 29 : 28; //#3008
                $k[$j++] = _R4; //#3008
                $k[$j++] = 31; //#3008
                $k[$j++] = _R6; //#3008
                $k[$j++] = 31; //#3008
                $k[$j++] = 30; //#3008
                $k[$j++] = 31; //#3008
                $k[$j++] = 30; //#3008
                $k[$j++] = 31; //#3008
                $k[$j++] = 31; //#3008
                $k[$j++] = 30; //#3008
                $k[$j++] = 31; //#3008
                $k[$j++] = 30; //#3008
                $k[$j++] = 31; //#3008
                var _R7 = $a(); //#3008
                var _R8 = $k[--$j]; //#3009
                var _RC = $cvi($geti(_R8, 4, 2)); //#3010
                $k[$j++] = _R8; //#3011
                if (($get(_R7, $cvi($geti(_R8, 2, 2)) - 1) < _RC) || (_RC < 1)) { //#3011
                    $j -= 2; //#3011
                    $k[$j++] = 'bwipp.GS1couponStartDateBadDay#3011'; //#3011
                    $k[$j++] = "Invalid day of month in start date"; //#3011
                    $k[$j++] = false; //#3011
                    return true; //#3011
                } //#3011
                var _RD = $k[--$j]; //#3012
                $_.couponstart = $cvi($geti(_RD, 0, 6)); //#3012
                $k[$j++] = _RD; //#3015
                if (($_.couponexpire != -1) && ($_.couponexpire < $_.couponstart)) { //#3015
                    $j -= 2; //#3014
                    $k[$j++] = 'bwipp.GS1couponExpireDateBeforeStartDate#3014'; //#3014
                    $k[$j++] = "Coupon expires before it starts"; //#3014
                    $k[$j++] = false; //#3014
                    return true; //#3014
                } //#3014
                var _RI = $k[--$j]; //#3016
                $k[$j++] = $geti(_RI, 6, _RI.length - 6); //#3016
            } //#3016
        } //#3016
        var _RK = $k[--$j]; //#3021
        $k[$j++] = _RK; //#3034
        if (_RK.length >= 1) { //#3034
            var _RL = $k[--$j]; //#3021
            $k[$j++] = _RL; //#3034
            if ($cvi($geti(_RL, 0, 1)) == 5) { //#3034
                var _RN = $k[--$j]; //#3022
                var _RO = $geti(_RN, 1, _RN.length - 1); //#3022
                $k[$j++] = _RO; //#3027
                if (_RO.length < 1) { //#3027
                    $j -= 2; //#3026
                    $k[$j++] = 'bwipp.GS1couponTooShortSerialNumberVLI#3026'; //#3026
                    $k[$j++] = "Coupon too short: Missing Serial Number VLI"; //#3026
                    $k[$j++] = false; //#3026
                    return true; //#3026
                } //#3026
                var _RP = $k[--$j]; //#3028
                var _RQ = $geti(_RP, 0, 1); //#3028
                $k[$j++] = _RP; //#3031
                $k[$j++] = ($cvi(_RQ) + 6) + 1; //#3031
                if ((($cvi(_RQ) + 6) + 1) > _RP.length) { //#3031
                    $j -= 3; //#3030
                    $k[$j++] = 'bwipp.GS1couponTooShortSerialNumber#3030'; //#3030
                    $k[$j++] = "Coupon too short: Serial Number truncated"; //#3030
                    $k[$j++] = false; //#3030
                    return true; //#3030
                } //#3030
                var _RR = $k[--$j]; //#3032
                var _RS = $k[--$j]; //#3032
                $k[$j++] = $geti(_RS, _RR, $f(_RS.length - _RR)); //#3032
            } //#3032
        } //#3032
        var _RU = $k[--$j]; //#3037
        $k[$j++] = _RU; //#3053
        if (_RU.length >= 1) { //#3053
            var _RV = $k[--$j]; //#3037
            $k[$j++] = _RV; //#3053
            if ($cvi($geti(_RV, 0, 1)) == 6) { //#3053
                var _RX = $k[--$j]; //#3038
                var _RY = $geti(_RX, 1, _RX.length - 1); //#3038
                $k[$j++] = _RY; //#3043
                if (_RY.length < 1) { //#3043
                    $j -= 2; //#3042
                    $k[$j++] = 'bwipp.GS1couponTooShortRetailerGCPGLNVLI#3042'; //#3042
                    $k[$j++] = "Coupon too short: Missing Retailer GCP/GLN VLI"; //#3042
                    $k[$j++] = false; //#3042
                    return true; //#3042
                } //#3042
                var _RZ = $k[--$j]; //#3044
                var _Rb = $cvi($geti(_RZ, 0, 1)); //#3044
                $k[$j++] = _RZ; //#3046
                $k[$j++] = _Rb; //#3046
                if ((_Rb < 1) || (_Rb > 7)) { //#3046
                    $j -= 2; //#3045
                    $k[$j++] = 'bwipp.GS1couponBadRetailerGCPGLNVLI#3045'; //#3045
                    $k[$j++] = "Coupon Retailer GCP/GLN length indicator must be 1-7"; //#3045
                    $k[$j++] = false; //#3045
                    return true; //#3045
                } //#3045
                var _Rc = $k[--$j]; //#3047
                var _Rd = $k[--$j]; //#3048
                $k[$j++] = _Rd; //#3050
                $k[$j++] = $f($f(_Rc + 6) + 1); //#3050
                if (($f($f(_Rc + 6) + 1)) > _Rd.length) { //#3050
                    $j -= 3; //#3049
                    $k[$j++] = 'bwipp.GS1couponTooShortRetailerGCPGLN#3049'; //#3049
                    $k[$j++] = "Coupon too short: Retailer GCP/GLN truncated"; //#3049
                    $k[$j++] = false; //#3049
                    return true; //#3049
                } //#3049
                var _Re = $k[--$j]; //#3051
                var _Rf = $k[--$j]; //#3051
                $k[$j++] = $geti(_Rf, _Re, $f(_Rf.length - _Re)); //#3051
            } //#3051
        } //#3051
        var _Rh = $k[--$j]; //#3056
        $k[$j++] = _Rh; //#3092
        if (_Rh.length >= 1) { //#3092
            var _Ri = $k[--$j]; //#3056
            $k[$j++] = _Ri; //#3092
            if ($cvi($geti(_Ri, 0, 1)) == 9) { //#3092
                var _Rk = $k[--$j]; //#3057
                var _Rl = $geti(_Rk, 1, _Rk.length - 1); //#3057
                $k[$j++] = _Rl; //#3062
                if (_Rl.length < 1) { //#3062
                    $j -= 2; //#3061
                    $k[$j++] = 'bwipp.GS1couponTooShortSaveValueCode#3061'; //#3061
                    $k[$j++] = "Coupon too short: Missing Save Value Code"; //#3061
                    $k[$j++] = false; //#3061
                    return true; //#3061
                } //#3061
                var _Rm = $k[--$j]; //#3063
                var _Ro = $cvi($geti(_Rm, 0, 1)); //#3063
                $k[$j++] = _Rm; //#3065
                if ((_Ro > 6) || ((_Ro == 3) || (_Ro == 4))) { //#3065
                    $j -= 2; //#3064
                    $k[$j++] = 'bwipp.GS1couponBadSaveValueCode#3064'; //#3064
                    $k[$j++] = "Coupon Save Value Code must be 0,1,2,5 or 6"; //#3064
                    $k[$j++] = false; //#3064
                    return true; //#3064
                } //#3064
                var _Rp = $k[--$j]; //#3066
                var _Rq = $geti(_Rp, 1, _Rp.length - 1); //#3066
                $k[$j++] = _Rq; //#3071
                if (_Rq.length < 1) { //#3071
                    $j -= 2; //#3070
                    $k[$j++] = 'bwipp.GS1couponTooShortSaveValueAppliesToItem#3070'; //#3070
                    $k[$j++] = "Coupon too short: Missing Save Value Applies to Item"; //#3070
                    $k[$j++] = false; //#3070
                    return true; //#3070
                } //#3070
                var _Rr = $k[--$j]; //#3072
                $k[$j++] = _Rr; //#3074
                if ($cvi($geti(_Rr, 0, 1)) > 2) { //#3074
                    $j -= 2; //#3073
                    $k[$j++] = 'bwipp.GS1couponBadSaveValueAppliesToItem#3073'; //#3073
                    $k[$j++] = "Coupon Save Value Applies to Item must be 0-2"; //#3073
                    $k[$j++] = false; //#3073
                    return true; //#3073
                } //#3073
                var _Rt = $k[--$j]; //#3075
                var _Ru = $geti(_Rt, 1, _Rt.length - 1); //#3075
                $k[$j++] = _Ru; //#3080
                if (_Ru.length < 1) { //#3080
                    $j -= 2; //#3079
                    $k[$j++] = 'bwipp.GS1couponTooShortStoreCouponFlag#3079'; //#3079
                    $k[$j++] = "Coupon too short: Missing Store Coupon Flag"; //#3079
                    $k[$j++] = false; //#3079
                    return true; //#3079
                } //#3079
                var _Rv = $k[--$j]; //#3081
                var _Rw = $geti(_Rv, 1, _Rv.length - 1); //#3081
                $k[$j++] = _Rw; //#3086
                if (_Rw.length < 1) { //#3086
                    $j -= 2; //#3085
                    $k[$j++] = 'bwipp.GS1couponTooShortDontMultiplyFlag#3085'; //#3085
                    $k[$j++] = "Coupon too short: Missing Don't Multiply Flag"; //#3085
                    $k[$j++] = false; //#3085
                    return true; //#3085
                } //#3085
                var _Rx = $k[--$j]; //#3087
                $k[$j++] = _Rx; //#3089
                if ($cvi($geti(_Rx, 0, 1)) > 1) { //#3089
                    $j -= 2; //#3088
                    $k[$j++] = 'bwipp.GS1couponBadDontMultiplyFlag#3088'; //#3088
                    $k[$j++] = "Don't Multiply Flag must be 0 or 1"; //#3088
                    $k[$j++] = false; //#3088
                    return true; //#3088
                } //#3088
                var _Rz = $k[--$j]; //#3090
                $k[$j++] = $geti(_Rz, 1, _Rz.length - 1); //#3090
            } //#3090
        } //#3090
        var _S1 = $k[--$j]; //#3094
        $k[$j++] = _S1; //#3096
        if (_S1.length != 0) { //#3096
            $j -= 2; //#3095
            $k[$j++] = 'bwipp.GS1couponUnrecognisedOptionalField#3095'; //#3095
            $k[$j++] = "Coupon fields must be 1,2,3,4,5,6 or 9, increasing order"; //#3095
            $k[$j++] = false; //#3095
            return true; //#3095
        } //#3095
        $j--; //#3097
    }; //#3097
    $_.lintcouponposoffer = function() {
        var _S2 = $k[--$j]; //#3101
        $k[$j++] = _S2; //#3103
        $k[$j++] = true; //#3103
        $forall(_S2, function() { //#3103
            var _S3 = $k[--$j]; //#3102
            if ((_S3 < 48) || (_S3 > 57)) { //#3102
                $j--; //#3102
                $k[$j++] = false; //#3102
                return true; //#3102
            } //#3102
        }); //#3102
        if ($nt($k[--$j])) { //#3104
            $j -= 2; //#3104
            $k[$j++] = 'bwipp.GS1couponNotNumeric#3104'; //#3104
            $k[$j++] = "Coupon not numeric"; //#3104
            $k[$j++] = false; //#3104
            return true; //#3104
        } //#3104
        var _S5 = $k[--$j]; //#3106
        $k[$j++] = _S5; //#3108
        if (_S5.length < 1) { //#3108
            $j -= 2; //#3107
            $k[$j++] = 'bwipp.GS1couponTooShortFormatCode#3107'; //#3107
            $k[$j++] = "Coupon too short: Missing Format Code"; //#3107
            $k[$j++] = false; //#3107
            return true; //#3107
        } //#3107
        var _S6 = $k[--$j]; //#3109
        var _S7 = $geti(_S6, 0, 1); //#3109
        $k[$j++] = _S6; //#3111
        if ($ne(_S7, "0") && $ne(_S7, "1")) { //#3111
            $j -= 2; //#3110
            $k[$j++] = 'bwipp.GS1couponBadFormatCode#3110'; //#3110
            $k[$j++] = "Coupon format must be 0 or 1"; //#3110
            $k[$j++] = false; //#3110
            return true; //#3110
        } //#3110
        var _S8 = $k[--$j]; //#3112
        var _S9 = $geti(_S8, 1, _S8.length - 1); //#3112
        $k[$j++] = _S9; //#3116
        if (_S9.length < 1) { //#3116
            $j -= 2; //#3115
            $k[$j++] = 'bwipp.GS1couponTooShortFunderVLI#3115'; //#3115
            $k[$j++] = "Coupon too short: Missing Funder VLI"; //#3115
            $k[$j++] = false; //#3115
            return true; //#3115
        } //#3115
        var _SA = $k[--$j]; //#3117
        var _SC = $cvi($geti(_SA, 0, 1)); //#3117
        $k[$j++] = _SA; //#3119
        $k[$j++] = _SC; //#3119
        if (_SC > 6) { //#3119
            $j -= 3; //#3118
            $k[$j++] = 'bwipp.GS1couponBadFunderVLI#3118'; //#3118
            $k[$j++] = "Coupon Funder length indicator must be 0-6"; //#3118
            $k[$j++] = false; //#3118
            return true; //#3118
        } //#3118
        var _SD = $k[--$j]; //#3120
        var _SE = $k[--$j]; //#3121
        $k[$j++] = _SE; //#3123
        $k[$j++] = $f($f(_SD + 6) + 1); //#3123
        if (($f($f(_SD + 6) + 1)) > _SE.length) { //#3123
            $j -= 3; //#3122
            $k[$j++] = 'bwipp.GS1couponTooShortFunder#3122'; //#3122
            $k[$j++] = "Coupon too short: Truncated Funder ID"; //#3122
            $k[$j++] = false; //#3122
            return true; //#3122
        } //#3122
        var _SF = $k[--$j]; //#3124
        var _SG = $k[--$j]; //#3124
        var _SH = $geti(_SG, _SF, $f(_SG.length - _SF)); //#3124
        $k[$j++] = _SH; //#3128
        if (_SH.length < 6) { //#3128
            $j -= 2; //#3127
            $k[$j++] = 'bwipp.GS1couponTooShortOfferCode#3127'; //#3127
            $k[$j++] = "Coupon too short: Truncated Offer Code"; //#3127
            $k[$j++] = false; //#3127
            return true; //#3127
        } //#3127
        var _SI = $k[--$j]; //#3129
        var _SJ = $geti(_SI, 6, _SI.length - 6); //#3129
        $k[$j++] = _SJ; //#3133
        if (_SJ.length < 1) { //#3133
            $j -= 2; //#3132
            $k[$j++] = 'bwipp.GS1couponTooShortSnVLI#3132'; //#3132
            $k[$j++] = "Coupon too short: Missing SN VLI"; //#3132
            $k[$j++] = false; //#3132
            return true; //#3132
        } //#3132
        var _SK = $k[--$j]; //#3134
        var _SL = $geti(_SK, 0, 1); //#3134
        $k[$j++] = _SK; //#3138
        $k[$j++] = ($cvi(_SL) + 6) + 1; //#3138
        if ((($cvi(_SL) + 6) + 1) > _SK.length) { //#3138
            $j -= 3; //#3137
            $k[$j++] = 'bwipp.GS1couponTooShortSn#3137'; //#3137
            $k[$j++] = "Coupon too short: Truncated SN"; //#3137
            $k[$j++] = false; //#3137
            return true; //#3137
        } //#3137
        var _SM = $k[--$j]; //#3139
        var _SN = $k[--$j]; //#3139
        var _SO = $geti(_SN, _SM, $f(_SN.length - _SM)); //#3139
        $k[$j++] = _SO; //#3142
        if (_SO.length != 0) { //#3142
            $j -= 2; //#3141
            $k[$j++] = 'bwipp.GS1couponTooLong#3141'; //#3141
            $k[$j++] = "Coupon too long"; //#3141
            $k[$j++] = false; //#3141
            return true; //#3141
        } //#3141
        $j--; //#3143
    }; //#3143
    $_.lintlatlong = function() {
        var _SP = $k[--$j]; //#3147
        $k[$j++] = _SP; //#3149
        if (_SP.length != 20) { //#3149
            $j--; //#3148
            $k[$j++] = 'bwipp.GS1badGeoLength#3148'; //#3148
            $k[$j++] = "Invalid length for a geo-location"; //#3148
            $k[$j++] = false; //#3148
            return true; //#3148
        } //#3148
        var _SQ = $k[--$j]; //#3150
        $k[$j++] = _SQ; //#3150
        if ($cvi($geti(_SQ, 0, 10)) > 1800000000) { //#3150
            $j--; //#3150
            $k[$j++] = 'bwipp.GS1badLatitude#3150'; //#3150
            $k[$j++] = "Invalid value for latitude"; //#3150
            $k[$j++] = false; //#3150
            return true; //#3150
        } //#3150
        var _SS = $k[--$j]; //#3151
        $k[$j++] = _SS; //#3151
        if ($cvi($geti(_SS, 10, 10)) > 3600000000) { //#3151
            $j--; //#3151
            $k[$j++] = 'bwipp.GS1badLongitude#3151'; //#3151
            $k[$j++] = "Invalid value for longitude"; //#3151
            $k[$j++] = false; //#3151
            return true; //#3151
        } //#3151
        $j--; //#3152
    }; //#3152
    if (!bwipp_gs1process.__3161__) { //#3161
        $_ = Object.create($_); //#3161
        $k[$j++] = Infinity; //#3160
        var _SU = $a(['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99']); //#3159
        for (var _SV = 0, _SW = _SU.length; _SV < _SW; _SV++) { //#3160
            var _SX = $get(_SU, _SV); //#3160
            $k[$j++] = _SX; //#3160
            $k[$j++] = _SX; //#3160
        } //#3160
        $_.aidcmediatype = $d(); //#3160
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_gs1process.$ctx[id] = $_[id]); //#3160
        bwipp_gs1process.__3161__ = 1; //#3160
        $_ = Object.getPrototypeOf($_); //#3160
    } //#3160
    $_.lintmediatype = function() {
        var _Sc = $get($_.aidcmediatype, $k[--$j]) !== undefined; //#3164
        if (!_Sc) { //#3164
            $j--; //#3164
            $k[$j++] = 'bwipp.GS1UnknownMediaType#3164'; //#3164
            $k[$j++] = "Unknown AIDC media type"; //#3164
            $k[$j++] = false; //#3164
            return true; //#3164
        } //#3164
    }; //#3164
    if (!$_.dontlint) { //#3301
        $k[$j++] = true; //#3207
        for (var _Sg = 0, _Sf = $_.vals.length - 1; _Sg <= _Sf; _Sg += 1) { //#3207
            $_.ai = $get($_.ais, _Sg); //#3172
            $_.val = $get($_.vals, _Sg); //#3173
            var _Sn = $get($_.gs1syntax, $_.ai) !== undefined; //#3174
            if (_Sn) { //#3205
                var _Sr = $get($get($_.gs1syntax, $_.ai), 'parts'); //#3175
                $k[$j++] = _Sr; //#3177
                $k[$j++] = 0; //#3177
                $forall(_Sr, function() { //#3177
                    var _Ss = $k[--$j]; //#3177
                    $k[$j++] = _Ss; //#3177
                    if ($get(_Ss, 'opt')) { //#3177
                        $j--; //#3177
                        $k[$j++] = 0; //#3177
                    } else { //#3177
                        var _Sv = $get($k[--$j], 'min'); //#3177
                        $k[$j++] = _Sv; //#3177
                    } //#3177
                    var _Sw = $k[--$j]; //#3177
                    var _Sx = $k[--$j]; //#3177
                    $k[$j++] = $f(_Sx + _Sw); //#3177
                }); //#3177
                if ($k[--$j] > $_.val.length) { //#3179
                    $j--; //#3178
                    $k[$j++] = 'bwipp.GS1valueTooShort#3178'; //#3178
                    $k[$j++] = "Too short"; //#3178
                    $k[$j++] = false; //#3178
                    break; //#3178
                } //#3178
                var _T0 = $k[--$j]; //#3180
                $k[$j++] = _T0; //#3180
                $k[$j++] = 0; //#3180
                $forall(_T0, function() { //#3180
                    var _T2 = $get($k[--$j], 'max'); //#3180
                    var _T3 = $k[--$j]; //#3180
                    $k[$j++] = $f(_T3 + _T2); //#3180
                }); //#3180
                if ($k[--$j] < $_.val.length) { //#3182
                    $j--; //#3181
                    $k[$j++] = 'bwipp.GS1valueTooLong#3181'; //#3181
                    $k[$j++] = "Too long"; //#3181
                    $k[$j++] = false; //#3181
                    break; //#3181
                } //#3181
                $forall($k[--$j], function() { //#3199
                    $_.props = $k[--$j]; //#3184
                    var _T9 = $get($_.props, 'max'); //#3185
                    var _TA = $_.val; //#3185
                    var _TB = _TA.length; //#3185
                    if (_T9 > _TA.length) { //#3185
                        var _ = _TB; //#3185
                        _TB = _T9; //#3185
                        _T9 = _; //#3185
                    } //#3185
                    $_.eval = $geti($_.val, 0, _T9); //#3186
                    var _TG = $_.eval.length; //#3187
                    $_.val = $geti($_.val, _TG, $_.val.length - _TG); //#3187
                    if ($_.eval.length == 0) { //#3197
                        if ($nt($get($_.props, 'opt'))) { //#3191
                            $j--; //#3190
                            $k[$j++] = 'bwipp.GS1valueTooShort#3190'; //#3190
                            $k[$j++] = "Too short"; //#3190
                            $k[$j++] = false; //#3190
                            return true; //#3190
                        } //#3190
                    } else { //#3197
                        if ($_.eval.length < $get($_.props, 'min')) { //#3195
                            $j--; //#3194
                            $k[$j++] = 'bwipp.GS1valueTooShort#3194'; //#3194
                            $k[$j++] = "Too short"; //#3194
                            $k[$j++] = false; //#3194
                            return true; //#3194
                        } //#3194
                        var _TP = new Map([
                            ["N", 'lintnumeric'],
                            ["X", 'lintcset82'],
                            ["Y", 'lintcset39']
                        ]); //#3196
                        $k[$j++] = $_.eval; //#3196
                        if ($_[$get(_TP, $get($_.props, 'cset'))]() === true) {
                            return true;
                        } //#3196
                        $forall($get($_.props, 'linters'), function() { //#3197
                            var _TZ = $_[$k[--$j]]; //#3197
                            $k[$j++] = $_.eval; //#3197
                            if (_TZ() === true) {
                                return true;
                            } //#3197
                        }); //#3197
                    } //#3197
                }); //#3197
                var _Ta = $k[--$j]; //#3200
                $k[$j++] = _Ta; //#3200
                if ($nt(_Ta)) { //#3200
                    break; //#3200
                } //#3200
                if ($_.val.length != 0) { //#3203
                    $j--; //#3202
                    $k[$j++] = 'bwipp.GS1valueTooLong#3202'; //#3202
                    $k[$j++] = "Too long"; //#3202
                    $k[$j++] = false; //#3202
                    break; //#3202
                } //#3202
            } else { //#3205
                $j--; //#3205
                $k[$j++] = 'bwipp.GS1unknownAI#3205'; //#3205
                $k[$j++] = "Unrecognised AI"; //#3205
                $k[$j++] = false; //#3205
                break; //#3205
            } //#3205
        } //#3205
        if ($nt($k[--$j])) { //#3215
            var _Td = $k[--$j]; //#3209
            var _Tf = $s((_Td.length + $_.ai.length) + 5); //#3209
            $puti(_Tf, 0, "AI "); //#3210
            $puti(_Tf, 3, $_.ai); //#3211
            $puti(_Tf, 3 + $_.ai.length, ": "); //#3212
            $puti(_Tf, 5 + $_.ai.length, _Td); //#3213
            $k[$j++] = _Tf; //#3214
            bwipp_raiseerror(); //#3214
        } //#3214
        $_.aiexists = function() {
            $_.this = $k[--$j]; //#3219
            $_.patt = $k[--$j]; //#3220
            for (var _Tl = 0, _Tm = 1; _Tl < _Tm; _Tl++) { //#3241
                var _Tp = $get($_.aivals, $_.patt) !== undefined; //#3222
                if (_Tp) { //#3222
                    $k[$j++] = true; //#3222
                    break; //#3222
                } //#3222
                if ($_.patt.length == 4) { //#3239
                    if ($eq($geti($_.patt, 3, 1), "n")) { //#3237
                        var _Tv = $eq($geti($_.patt, 2, 1), "n") ? 2 : 3; //#3225
                        $_.pfxlen = _Tv; //#3225
                        var _Tw = $_.ais; //#3227
                        $k[$j++] = false; //#3235
                        for (var _Tx = 0, _Ty = _Tw.length; _Tx < _Ty; _Tx++) { //#3235
                            var _Tz = $get(_Tw, _Tx); //#3235
                            $k[$j++] = _Tz; //#3234
                            if ($ne(_Tz, $_.this) && (_Tz.length == 4)) { //#3233
                                if ($eq($geti($k[--$j], 0, $_.pfxlen), $geti($_.patt, 0, $_.pfxlen))) { //#3231
                                    $j--; //#3230
                                    $k[$j++] = true; //#3230
                                } //#3230
                            } else { //#3233
                                $j--; //#3233
                            } //#3233
                        } //#3233
                        break; //#3236
                    } //#3236
                    $k[$j++] = false; //#3238
                    break; //#3238
                } //#3238
                $k[$j++] = false; //#3240
                break; //#3240
            } //#3240
        }; //#3240
        var _U7 = $_.vals; //#3245
        $_.aivals = new Map; //#3245
        for (var _UA = 0, _U9 = $_.vals.length - 1; _UA <= _U9; _UA += 1) { //#3260
            $_.ai = $get($_.ais, _UA); //#3247
            $_.val = $get($_.vals, _UA); //#3248
            var _UH = $get($_.aivals, $_.ai) !== undefined; //#3249
            if (_UH) { //#3258
                if ($ne($get($_.aivals, $_.ai), $_.val)) { //#3256
                    var _UN = $s($_.ai.length + 40); //#3251
                    $puti(_UN, 0, "Repeated AIs ("); //#3252
                    $puti(_UN, 14, $_.ai); //#3253
                    $puti(_UN, 14 + $_.ai.length, ") must have the same value"); //#3254
                    $k[$j++] = 'bwipp.GS1repeatedDifferingAIs#3255'; //#3255
                    $k[$j++] = _UN; //#3255
                    bwipp_raiseerror(); //#3255
                } //#3255
            } else { //#3258
                $put($_.aivals, $_.ai, $_.val); //#3258
            } //#3258
        } //#3258
        for (var _UV = 0, _UU = $_.vals.length - 1; _UV <= _UU; _UV += 1) { //#3299
            $_.ai = $get($_.ais, _UV); //#3264
            var _Ua = $get($_.gs1syntax, $_.ai); //#3265
            var _Ub = $get(_Ua, 'ex') !== undefined; //#3265
            $k[$j++] = _Ua; //#3280
            $k[$j++] = 'ex'; //#3280
            if (_Ub) { //#3279
                var _Uc = $k[--$j]; //#3266
                $forall($get($k[--$j], _Uc), function() { //#3277
                    $_.patt = $k[--$j]; //#3267
                    $k[$j++] = $_.patt; //#3268
                    $k[$j++] = $_.ai; //#3268
                    $_.aiexists(); //#3268
                    if ($k[--$j]) { //#3276
                        var _Ul = $s(($_.ai.length + $_.patt.length) + 36); //#3269
                        $puti(_Ul, 0, "AIs ("); //#3270
                        $puti(_Ul, 5, $_.ai); //#3271
                        $puti(_Ul, 5 + $_.ai.length, ") and ("); //#3272
                        $puti(_Ul, 12 + $_.ai.length, $_.patt); //#3273
                        $puti(_Ul, (12 + $_.ai.length) + $_.patt.length, ") are mutually exclusive"); //#3274
                        $k[$j++] = 'bwipp.GS1exclusiveAIs#3275'; //#3275
                        $k[$j++] = _Ul; //#3275
                        bwipp_raiseerror(); //#3275
                    } //#3275
                }); //#3275
            } else { //#3279
                $j -= 2; //#3279
            } //#3279
            if ($_.lintreqs) { //#3298
                var _Uv = $get($_.gs1syntax, $_.ai); //#3282
                var _Uw = $get(_Uv, 'req') !== undefined; //#3282
                $k[$j++] = _Uv; //#3297
                $k[$j++] = 'req'; //#3297
                if (_Uw) { //#3296
                    var _Ux = $k[--$j]; //#3283
                    $forall($get($k[--$j], _Ux), function() { //#3294
                        var _V0 = $k[--$j]; //#3284
                        $k[$j++] = false; //#3286
                        $forall(_V0, function() { //#3286
                            $k[$j++] = $_.ai; //#3285
                            $_.aiexists(); //#3285
                            if ($k[--$j]) { //#3285
                                $j--; //#3285
                                $k[$j++] = true; //#3285
                            } //#3285
                        }); //#3285
                        if ($nt($k[--$j])) { //#3293
                            var _V5 = $s($_.ai.length + 47); //#3288
                            $puti(_V5, 0, "One of more requisite AIs for AI ("); //#3289
                            $puti(_V5, 34, $_.ai); //#3290
                            $puti(_V5, 34 + $_.ai.length, ") are missing"); //#3291
                            $k[$j++] = 'bwipp.GS1missingAIs#3292'; //#3292
                            $k[$j++] = _V5; //#3292
                            bwipp_raiseerror(); //#3292
                        } //#3292
                    }); //#3292
                } else { //#3296
                    $j -= 2; //#3296
                } //#3296
            } //#3296
        } //#3296
    } //#3296
    $k[$j++] = $_.ais; //#3305
    $k[$j++] = $_.vals; //#3305
    $k[$j++] = $_.fncs; //#3305
    $_ = Object.getPrototypeOf($_); //#3305
    $_ = Object.getPrototypeOf($_); //#3307
}

function bwipp_renmatrix() {
    if ($_.bwipjs_dontdraw) { //#3569
        return; //#3569
    } //#3569
    $_ = Object.create($_); //#3571
    $_.width = 1; //#3574
    $_.height = 1; //#3575
    $_.barcolor = "unset"; //#3576
    $_.backgroundcolor = "unset"; //#3577
    $_.colormap = "unset"; //#3578
    $_.dotty = false; //#3579
    $_.inkspread = 0; //#3580
    $_.inkspreadh = 0; //#3581
    $_.inkspreadv = 0; //#3582
    $_.includetext = false; //#3583
    $_.txt = $a([]); //#3584
    $_.textcolor = "unset"; //#3585
    $_.textxalign = "unset"; //#3586
    $_.textyalign = "unset"; //#3587
    $_.textfont = "OCR-B"; //#3588
    $_.textsize = 10; //#3589
    $_.textxoffset = 0; //#3590
    $_.textyoffset = 0; //#3591
    $_.textgaps = 0; //#3592
    $_.alttext = ""; //#3593
    $forall($k[--$j], function() { //#3595
        var _3 = $k[--$j]; //#3595
        $_[$k[--$j]] = _3; //#3595
    }); //#3595
    $k[$j++] = $_.opt; //#3596
    delete $_['opt']; //#3596
    $k[$j++] = $_; //#3596
    bwipp_processoptions(); //#3596
    $j--; //#3596
    if ($_.inkspread != 0) { //#3598
        $_.inkspreadh = $_.inkspread; //#3598
    } //#3598
    if ($_.inkspread != 0) { //#3599
        $_.inkspreadv = $_.inkspread; //#3599
    } //#3599
    if ($_.textsize <= 0) { //#3603
        $k[$j++] = 'bwipp.renmatrixBadTextsize#3602'; //#3602
        $k[$j++] = "The font size must be greater than zero"; //#3602
        bwipp_raiseerror(); //#3602
    } //#3602
    $_.xyget = function() {
        var _C = $k[--$j]; //#3605
        var _F = $get($_.pixs, $f($k[--$j] + (_C * $_.pixx))); //#3605
        $k[$j++] = _F; //#3605
    }; //#3605
    $_.cget = function() {
        var _H = $k[--$j]; //#3606
        var _K = $get($_.cache, $f($k[--$j] + (_H * $_.pixx))); //#3606
        var _L = $k[--$j]; //#3606
        $k[$j++] = $an(_L, _K); //#3606
    }; //#3606
    $_.cput = function() {
        var _M = $k[--$j]; //#3608
        $k[$j++] = _M; //#3612
        if ((_M % 4) == 0) { //#3611
            var _N = $k[--$j]; //#3609
            var _O = $k[--$j]; //#3609
            var _P = $k[--$j]; //#3609
            var _Q = $_.pixx; //#3609
            var _R = $_.cache; //#3609
            $put(_R, $f(_P + (_O * _Q)), $or($get(_R, $f(_P + (_O * _Q))), _N)); //#3609
        } else { //#3611
            $j -= 3; //#3611
        } //#3611
    }; //#3611
    $_.abcd = function() {
        $k[$j++] = $s(4); //#3620
        $k[$j++] = 0; //#3620
        $k[$j++] = Infinity; //#3620
        var _U = $k[--$j]; //#3617
        var _V = $k[--$j]; //#3617
        var _W = $k[--$j]; //#3617
        var _X = $k[--$j]; //#3617
        var _a = $f($k[--$j] + (_X * $_.pixx)); //#3618
        $k[$j++] = _W; //#3619
        $k[$j++] = _V; //#3619
        $k[$j++] = _U; //#3619
        $k[$j++] = _a; //#3619
        $aload($geti($_.pixs, _a, 2)); //#3619
        var _d = $k[--$j]; //#3619
        var _e = $k[--$j]; //#3619
        var _i = $geti($_.pixs, $f($k[--$j] + $_.pixx), 2); //#3620
        $k[$j++] = _e; //#3620
        $k[$j++] = _d; //#3620
        $aload(_i); //#3620
        var _j = $a(); //#3620
        for (var _k = 0, _l = _j.length; _k < _l; _k++) { //#3621
            var _n = $k[--$j]; //#3621
            var _o = $k[--$j]; //#3621
            $put(_o, _n, $f($get(_j, _k) + 48)); //#3621
            $k[$j++] = _o; //#3621
            $k[$j++] = $f(_n + 1); //#3621
        } //#3621
        $j--; //#3621
    }; //#3621
    $_.right = function() {
        if ($_.dir != 1) { //#3624
            $k[$j++] = $_.x; //#3624
            $k[$j++] = $_.y; //#3624
            $k[$j++] = $_.dir; //#3624
            $_.cput(); //#3624
            $k[$j++] = $a([$_.x, $_.y]); //#3624
        } //#3624
        $_.x = $_.x + 1; //#3624
        $_.dir = 1; //#3624
    }; //#3624
    $_.down = function() {
        if ($_.dir != 2) { //#3625
            $k[$j++] = $_.x; //#3625
            $k[$j++] = $_.y; //#3625
            $k[$j++] = $_.dir; //#3625
            $_.cput(); //#3625
            $k[$j++] = $a([$_.x, $_.y]); //#3625
        } //#3625
        $_.y = $_.y + 1; //#3625
        $_.dir = 2; //#3625
    }; //#3625
    $_.left = function() {
        if ($_.dir != 4) { //#3626
            $k[$j++] = $_.x; //#3626
            $k[$j++] = $_.y; //#3626
            $k[$j++] = $_.dir; //#3626
            $_.cput(); //#3626
            $k[$j++] = $a([$_.x, $_.y]); //#3626
        } //#3626
        $_.x = $_.x - 1; //#3626
        $_.dir = 4; //#3626
    }; //#3626
    $_.up = function() {
        if ($_.dir != 8) { //#3627
            $k[$j++] = $_.x; //#3627
            $k[$j++] = $_.y; //#3627
            $k[$j++] = $_.dir; //#3627
            $_.cput(); //#3627
            $k[$j++] = $a([$_.x, $_.y]); //#3627
        } //#3627
        $_.y = $_.y - 1; //#3627
        $_.dir = 8; //#3627
    }; //#3627
    $_.trace = function() {
        $_.y = $k[--$j]; //#3631
        $_.x = $k[--$j]; //#3631
        $k[$j++] = 'dir'; //#3633
        $k[$j++] = $f($_.x + 1); //#3633
        $k[$j++] = $f($_.y + 1); //#3633
        $_.xyget(); //#3633
        var _1Q = ($k[--$j] == 1) ? 8 : 4; //#3633
        $_[$k[--$j]] = _1Q; //#3633
        $_.sx = $_.x; //#3634
        $_.sy = $_.y; //#3634
        $_.sdir = $_.dir; //#3634
        $k[$j++] = Infinity; //#3638
        for (;;) { //#3652
            $k[$j++] = $_.x; //#3639
            $k[$j++] = $_.y; //#3639
            $_.abcd(); //#3639
            for (var _1X = 0, _1Y = 1; _1X < _1Y; _1X++) { //#3650
                var _1Z = $k[--$j]; //#3641
                $k[$j++] = _1Z; //#3641
                if ($eq(_1Z, "0001") || ($eq(_1Z, "0011") || $eq(_1Z, "1011"))) { //#3641
                    $j--; //#3641
                    $_.right(); //#3641
                    break; //#3641
                } //#3641
                var _1a = $k[--$j]; //#3642
                $k[$j++] = _1a; //#3642
                if ($eq(_1a, "0010") || ($eq(_1a, "1010") || $eq(_1a, "1110"))) { //#3642
                    $j--; //#3642
                    $_.down(); //#3642
                    break; //#3642
                } //#3642
                var _1b = $k[--$j]; //#3643
                $k[$j++] = _1b; //#3643
                if ($eq(_1b, "1000") || ($eq(_1b, "1100") || $eq(_1b, "1101"))) { //#3643
                    $j--; //#3643
                    $_.left(); //#3643
                    break; //#3643
                } //#3643
                var _1c = $k[--$j]; //#3644
                $k[$j++] = _1c; //#3644
                if ($eq(_1c, "0100") || ($eq(_1c, "0101") || $eq(_1c, "0111"))) { //#3644
                    $j--; //#3644
                    $_.up(); //#3644
                    break; //#3644
                } //#3644
                var _1d = $k[--$j]; //#3645
                $k[$j++] = _1d; //#3649
                if ($eq(_1d, "1001")) { //#3648
                    if ($_.dir == 2) { //#3646
                        $j--; //#3646
                        $_.left(); //#3646
                        break; //#3646
                    } else { //#3646
                        $j--; //#3646
                        $_.right(); //#3646
                        break; //#3646
                    } //#3646
                } else { //#3648
                    if ($_.dir == 1) { //#3648
                        $j--; //#3648
                        $_.down(); //#3648
                        break; //#3648
                    } else { //#3648
                        $j--; //#3648
                        $_.up(); //#3648
                        break; //#3648
                    } //#3648
                } //#3648
            } //#3648
            if (($eq($_.x, $_.sx) && $eq($_.y, $_.sy)) && ($_.dir == $_.sdir)) { //#3651
                break; //#3651
            } //#3651
        } //#3651
        $astore($a($counttomark())); //#3653
        var _1o = $k[--$j]; //#3653
        var _1p = $k[--$j]; //#3653
        $k[$j++] = _1o; //#3653
        $k[$j++] = _1p; //#3653
        $j--; //#3653
    }; //#3653
    $_.drawlayer = function() {
        $_.pixsorig = $_.pixs; //#3679
        $_.pixs = $k[--$j]; //#3680
        $k[$j++] = Infinity; //#3690
        for (var _1t = 0, _1u = $_.pixx + 2; _1t < _1u; _1t++) { //#3684
            $k[$j++] = 0; //#3684
        } //#3684
        for (var _1y = 0, _1z = $_.pixx, _1x = $_.pixs.length - 1; _1z < 0 ? _1y >= _1x : _1y <= _1x; _1y += _1z) { //#3689
            $k[$j++] = 0; //#3687
            $aload($geti($_.pixs, _1y, $_.pixx)); //#3687
            $k[$j++] = 0; //#3688
        } //#3688
        for (var _24 = 0, _25 = $_.pixx + 2; _24 < _25; _24++) { //#3690
            $k[$j++] = 0; //#3690
        } //#3690
        $_.pixs = $a(); //#3690
        $_.pixx = $_.pixx + 2; //#3692
        $_.pixy = $_.pixy + 2; //#3693
        $k[$j++] = Infinity; //#3696
        for (var _2A = 0, _2B = $_.pixs.length; _2A < _2B; _2A++) { //#3696
            $k[$j++] = 0; //#3696
        } //#3696
        $_.cache = $a(); //#3696
        $k[$j++] = Infinity; //#3712
        for (var _2F = 0, _2E = $_.pixy - 2; _2F <= _2E; _2F += 1) { //#3716
            $_.j = _2F; //#3701
            for (var _2I = 0, _2H = $_.pixx - 2; _2I <= _2H; _2I += 1) { //#3715
                $_.i = _2I; //#3703
                $k[$j++] = 'k'; //#3704
                $k[$j++] = $_.i; //#3704
                $k[$j++] = $_.j; //#3704
                $_.abcd(); //#3704
                var _2L = $k[--$j]; //#3704
                $_[$k[--$j]] = _2L; //#3704
                if ($eq($_.k, "0001") || $eq($_.k, "1001")) { //#3709
                    $k[$j++] = 8; //#3706
                    $k[$j++] = $_.i; //#3706
                    $k[$j++] = $_.j; //#3706
                    $_.cget(); //#3706
                    if ($k[--$j] == 0) { //#3708
                        $k[$j++] = $_.i; //#3707
                        $k[$j++] = $_.j; //#3707
                        $_.trace(); //#3707
                    } //#3707
                } //#3707
                if ($eq($_.k, "1110")) { //#3714
                    $k[$j++] = 4; //#3711
                    $k[$j++] = $_.i; //#3711
                    $k[$j++] = $_.j; //#3711
                    $_.cget(); //#3711
                    if ($k[--$j] == 0) { //#3713
                        $k[$j++] = $_.i; //#3712
                        $k[$j++] = $_.j; //#3712
                        $_.trace(); //#3712
                    } //#3712
                } //#3712
            } //#3712
        } //#3712
        $_.paths = $a(); //#3712
        $_.pixx = $_.pixx - 2; //#3720
        $_.pixy = $_.pixy - 2; //#3721
        $$.newpath(); //#3724
        var _2d = $_.paths; //#3725
        for (var _2e = 0, _2f = _2d.length; _2e < _2f; _2e++) { //#3743
            $_.p = $get(_2d, _2e); //#3726
            $_.len = $_.p.length; //#3727
            $aload($get($_.p, $_.len - 1)); //#3728
            $aload($get($_.p, 0)); //#3729
            for (var _2p = 0, _2o = $_.len - 1; _2p <= _2o; _2p += 1) { //#3740
                $_.i = _2p; //#3731
                $aload($get($_.p, ($_.i + 1) % $_.len)); //#3732
                var _2u = $k[--$j]; //#3732
                var _2v = $k[--$j]; //#3732
                var _2w = $k[--$j]; //#3732
                var _2x = $k[--$j]; //#3732
                var _2y = $k[--$j]; //#3732
                var _2z = $k[--$j]; //#3732
                $k[$j++] = _2x; //#3734
                $k[$j++] = _2w; //#3734
                $k[$j++] = _2v; //#3734
                $k[$j++] = _2u; //#3734
                $k[$j++] = _2z; //#3734
                $k[$j++] = _2x; //#3734
                $k[$j++] = $_.inkspreadh; //#3734
                if ($lt(_2u, _2y)) { //#3734
                    var _31 = $k[--$j]; //#3734
                    var _32 = $k[--$j]; //#3734
                    $k[$j++] = $f(_32 + _31); //#3734
                } else { //#3734
                    var _33 = $k[--$j]; //#3734
                    var _34 = $k[--$j]; //#3734
                    $k[$j++] = $f(_34 - _33); //#3734
                } //#3734
                var _35 = $k[--$j]; //#3735
                var _36 = $k[--$j]; //#3735
                var _37 = $k[--$j]; //#3735
                var _38 = $k[--$j]; //#3735
                var _39 = $k[--$j]; //#3736
                $k[$j++] = _39; //#3737
                $k[$j++] = _35; //#3737
                $k[$j++] = _38; //#3737
                $k[$j++] = _37; //#3737
                $k[$j++] = _39; //#3737
                $k[$j++] = $_.inkspreadv; //#3737
                if ($gt(_38, _36)) { //#3737
                    var _3B = $k[--$j]; //#3737
                    var _3C = $k[--$j]; //#3737
                    $k[$j++] = $f(_3C + _3B); //#3737
                } else { //#3737
                    var _3D = $k[--$j]; //#3737
                    var _3E = $k[--$j]; //#3737
                    $k[$j++] = $f(_3E - _3D); //#3737
                } //#3737
                var _3F = $k[--$j]; //#3738
                var _3G = $k[--$j]; //#3738
                var _3H = $k[--$j]; //#3738
                var _3I = $k[--$j]; //#3738
                $k[$j++] = _3H; //#3739
                $k[$j++] = _3G; //#3739
                $k[$j++] = _3I; //#3739
                $k[$j++] = $f($_.pixy - _3F); //#3739
                if ($_.i == 0) { //#3739
                    var _3L = $k[--$j]; //#3739
                    $$.moveto($k[--$j], _3L); //#3739
                } else { //#3739
                    var _3N = $k[--$j]; //#3739
                    $$.lineto($k[--$j], _3N); //#3739
                } //#3739
            } //#3739
            $$.closepath(); //#3741
            $j -= 4; //#3742
        } //#3742
        $$.fill(); //#3744
        $_.pixs = $_.pixsorig; //#3746
    }; //#3746
    $_.drawlayerdots = function() {
        $_.pixsorig = $_.pixs; //#3752
        $_.pixs = $k[--$j]; //#3753
        $$.newpath(); //#3755
        for (var _3U = 0, _3T = $_.pixs.length - 1; _3U <= _3T; _3U += 1) { //#3763
            $_.x = _3U % $_.pixx; //#3757
            $_.y = ~~(_3U / $_.pixx); //#3758
            $k[$j++] = $_.x; //#3759
            $k[$j++] = $_.y; //#3759
            $_.xyget(); //#3759
            if ($k[--$j] == 1) { //#3762
                $$.moveto($f($_.x + 0.5), $f(($_.pixy - $_.y) - 0.5)); //#3760
                $$.arc($f($_.x + 0.5), $f(($_.pixy - $_.y) - 0.5), $f(0.5 - $_.inkspread), 0, 360, 1); //#3761
            } //#3761
        } //#3761
        $$.fill(); //#3764
        $_.pixs = $_.pixsorig; //#3766
    }; //#3766
    $$.save(); //#3770
    $_.inkspread = $_.inkspread / 2; //#3773
    $_.inkspreadh = $_.inkspreadh / 2; //#3774
    $_.inkspreadv = $_.inkspreadv / 2; //#3775
    var _3l = $$.currpos(); //#3776
    $$.translate(_3l.x, _3l.y); //#3776
    $$.scale(($_.width / $_.pixx) * 72, ($_.height / $_.pixy) * 72); //#3777
    $$.moveto(0, 0); //#3778
    $$.lineto($_.pixx, 0); //#3778
    $$.lineto($_.pixx, $_.pixy); //#3778
    $$.lineto(0, $_.pixy); //#3778
    $$.closepath(); //#3778
    if ($eq($_.colormap, "unset")) { //#3783
        var _3w = new Map([
            [1, $_.barcolor]
        ]); //#3782
        $_.colormap = _3w; //#3782
    } //#3782
    var _3x = $_.colormap; //#3785
    for (var _42 = _3x.size, _41 = _3x.keys(), _40 = 0; _40 < _42; _40++) { //#3791
        var _3y = _41.next().value; //#3791
        var _3z = _3x.get(_3y); //#3791
        $k[$j++] = _3y; //#3786
        $k[$j++] = _3z; //#3786
        if ($ne(_3z, "unset")) { //#3786
            $$.setcolor($k[--$j]); //#3786
        } else { //#3786
            $j--; //#3786
        } //#3786
        $_.key = $k[--$j]; //#3787
        $k[$j++] = Infinity; //#3789
        var _45 = $_.pixs; //#3789
        for (var _46 = 0, _47 = _45.length; _46 < _47; _46++) { //#3789
            var _4A = $eq($get(_45, _46), $_.key) ? 1 : 0; //#3789
            $k[$j++] = _4A; //#3789
        } //#3789
        var _4B = $a(); //#3789
        $k[$j++] = _4B; //#3790
        if ($_.dotty) { //#3790
            $_.drawlayerdots(); //#3790
        } else { //#3790
            $_.drawlayer(); //#3790
        } //#3790
    } //#3790
    if ($ne($_.textcolor, "unset")) { //#3794
        $$.setcolor($_.textcolor); //#3794
    } //#3794
    if ($_.includetext) { //#3855
        if (($eq($_.textxalign, "unset") && $eq($_.textyalign, "unset")) && $eq($_.alttext, "")) { //#3853
            $_.s = 0; //#3797
            $_.fn = ""; //#3797
            var _4J = $_.txt; //#3798
            for (var _4K = 0, _4L = _4J.length; _4K < _4L; _4K++) { //#3811
                $forall($get(_4J, _4K)); //#3799
                var _4N = $k[--$j]; //#3800
                var _4O = $k[--$j]; //#3800
                $k[$j++] = _4O; //#3809
                $k[$j++] = _4N; //#3809
                if ((_4N != $_.s) || $ne(_4O, $_.fn)) { //#3808
                    var _4R = $k[--$j]; //#3801
                    $k[$j++] = _4R; //#3804
                    if (_4R <= 0) { //#3804
                        $j -= 5; //#3802
                        $k[$j++] = 'bwipp.renmatrixFontTooSmall#3803'; //#3803
                        $k[$j++] = "The font size is too small"; //#3803
                        bwipp_raiseerror(); //#3803
                    } //#3803
                    var _4S = $k[--$j]; //#3805
                    var _4T = $k[--$j]; //#3805
                    $_.s = _4S; //#3805
                    $_.fn = _4T; //#3805
                    $$.selectfont(_4T, _4S); //#3806
                } else { //#3808
                    $j -= 2; //#3808
                } //#3808
                var _4U = $k[--$j]; //#3810
                $$.moveto($k[--$j], _4U); //#3810
                $$.show($k[--$j], 0, 0); //#3810
            } //#3810
        } else { //#3853
            $$.selectfont($_.textfont, $_.textsize); //#3813
            if ($eq($_.alttext, "")) { //#3819
                $k[$j++] = Infinity; //#3815
                var _4a = $_.txt; //#3815
                for (var _4b = 0, _4c = _4a.length; _4b < _4c; _4b++) { //#3815
                    $forall($get($get(_4a, _4b), 0)); //#3815
                } //#3815
                $_.txt = $a(); //#3815
                $_.tstr = $s($_.txt.length); //#3816
                for (var _4k = 0, _4j = $_.txt.length - 1; _4k <= _4j; _4k += 1) { //#3817
                    $put($_.tstr, _4k, $get($_.txt, _4k)); //#3817
                } //#3817
            } else { //#3819
                $_.tstr = $_.alttext; //#3819
            } //#3819
            if ($_.tstr.length == 0) { //#3829
                $k[$j++] = 0; //#3824
            } else { //#3829
                $$.save(); //#3826
                $$.newpath(); //#3827
                $$.moveto(0, 0); //#3827
                $$.charpath("0", false); //#3827
                var _4q = $$.pathbbox(); //#3827
                $$.restore(); //#3829
                $k[$j++] = _4q.ury; //#3829
            } //#3829
            $_.textascent = $k[--$j]; //#3838
            var _4t = $$.stringwidth($_.tstr); //#3839
            $_.textwidth = $f(_4t.w + (($_.tstr.length - 1) * $_.textgaps)); //#3839
            $_.textxpos = $f($_.textxoffset + ($f($_.pixx - $_.textwidth) / 2)); //#3841
            if ($eq($_.textxalign, "left")) { //#3842
                $_.textxpos = $_.textxoffset; //#3842
            } //#3842
            if ($eq($_.textxalign, "right")) { //#3843
                $_.textxpos = $f(($_.pixx - $_.textxoffset) - $_.textwidth); //#3843
            } //#3843
            if ($eq($_.textxalign, "offleft")) { //#3844
                $_.textxpos = -$f($_.textwidth + $_.textxoffset); //#3844
            } //#3844
            if ($eq($_.textxalign, "offright")) { //#3845
                $_.textxpos = $_.pixx + $_.textxoffset; //#3845
            } //#3845
            if ($eq($_.textxalign, "justify") && ($_.textwidth < $_.pixx)) { //#3849
                $_.textxpos = 0; //#3847
                $_.textgaps = $f($_.pixx - $_.textwidth) / ($_.tstr.length - 1); //#3848
            } //#3848
            $_.textypos = -($f($f($_.textyoffset + $_.textascent) + 1)); //#3850
            if ($eq($_.textyalign, "above")) { //#3851
                $_.textypos = ($_.textyoffset + $_.pixy) + 1; //#3851
            } //#3851
            if ($eq($_.textyalign, "center")) { //#3852
                $_.textypos = $f($_.textyoffset + ($f($_.pixy - $_.textascent) / 2)); //#3852
            } //#3852
            $$.moveto($_.textxpos, $_.textypos); //#3853
            $$.show($_.tstr, $_.textgaps, 0); //#3853
        } //#3853
    } //#3853
    $$.restore(); //#3857
    $_ = Object.getPrototypeOf($_); //#3859
}

function bwipp_ean5() {
    $_ = Object.create($_); //#3981
    $_.dontdraw = false; //#3984
    $_.includetext = false; //#3985
    $_.textfont = "OCR-B"; //#3986
    $_.textsize = 12; //#3987
    $_.textxoffset = 0; //#3988
    $_.textyoffset = null; //#3989
    $_.height = 0.7; //#3990
    $k[$j++] = $_; //#3992
    bwipp_processoptions(); //#3992
    $_.options = $k[--$j]; //#3992
    $_.barcode = $k[--$j]; //#3993
    if ($eq($_.textyoffset, null)) { //#3997
        $_.textyoffset = $f(($_.height * 72) + 1); //#3996
    } //#3996
    bwipp_loadctx(bwipp_ean5) //#3999
    if ($_.barcode.length != 5) { //#4004
        $k[$j++] = 'bwipp.ean5badLength#4003'; //#4003
        $k[$j++] = "EAN-5 add-on must be 5 digits"; //#4003
        bwipp_raiseerror(); //#4003
    } //#4003
    $forall($_.barcode, function() { //#4009
        var _6 = $k[--$j]; //#4006
        if ((_6 < 48) || (_6 > 57)) { //#4008
            $k[$j++] = 'bwipp.ean5badCharacter#4007'; //#4007
            $k[$j++] = "EAN-5 add-on must contain only digits"; //#4007
            bwipp_raiseerror(); //#4007
        } //#4007
    }); //#4007
    if (!bwipp_ean5.__4027__) { //#4027
        $_ = Object.create($_); //#4027
        $_.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "112", "11"]); //#4017
        $_.barchars = "0123456789"; //#4020
        $_.mirrormaps = $a(["11000", "10100", "10010", "10001", "01100", "00110", "00011", "01010", "01001", "00101"]); //#4026
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_ean5.$ctx[id] = $_[id]); //#4026
        bwipp_ean5.__4027__ = 1; //#4026
        $_ = Object.getPrototypeOf($_); //#4026
    } //#4026
    $_.checksum = 0; //#4029
    for (var _A = 0; _A <= 4; _A += 1) { //#4038
        $_.i = _A; //#4031
        $_.barchar = $f($get($_.barcode, $_.i) - 48); //#4032
        if (($_.i % 2) == 0) { //#4036
            $_.checksum = $f(($_.barchar * 3) + $_.checksum); //#4034
        } else { //#4036
            $_.checksum = $f(($_.barchar * 9) + $_.checksum); //#4036
        } //#4036
    } //#4036
    $_.checksum = $_.checksum % 10; //#4039
    $_.mirrormap = $get($_.mirrormaps, $_.checksum); //#4040
    $_.sbs = $s(31); //#4042
    $_.txt = $a(5); //#4043
    for (var _P = 0; _P <= 4; _P += 1) { //#4073
        $_.i = _P; //#4046
        if ($_.i == 0) { //#4052
            $puti($_.sbs, 0, $get($_.encs, 10)); //#4050
        } else { //#4052
            $puti($_.sbs, (($_.i - 1) * 6) + 7, $get($_.encs, 11)); //#4052
        } //#4052
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#4056
        $j--; //#4057
        $_.indx = $k[--$j].length; //#4058
        $j -= 2; //#4059
        $_.enc = $get($_.encs, $_.indx); //#4060
        if ($get($_.mirrormap, $_.i) == 49) { //#4070
            $_.enclen = $_.enc.length; //#4062
            $_.revenc = $s($_.enclen); //#4063
            for (var _o = 0, _n = $_.enclen - 1; _o <= _n; _o += 1) { //#4068
                $_.j = _o; //#4065
                $_.char = $get($_.enc, $_.j); //#4066
                $put($_.revenc, ($_.enclen - $_.j) - 1, $_.char); //#4067
            } //#4067
            $_.enc = $_.revenc; //#4069
        } //#4069
        $puti($_.sbs, ($_.i * 6) + 3, $_.enc); //#4071
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ((($_.i - 1) * 9) + 13) + $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])); //#4072
    } //#4072
    $k[$j++] = Infinity; //#4087
    $k[$j++] = Infinity; //#4078
    var _1B = $_.sbs; //#4078
    for (var _1C = 0, _1D = _1B.length; _1C < _1D; _1C++) { //#4078
        $k[$j++] = $get(_1B, _1C) - 48; //#4078
    } //#4078
    var _1F = $a(); //#4078
    $k[$j++] = Infinity; //#4079
    for (var _1G = 0, _1H = 16; _1G < _1H; _1G++) { //#4079
        $k[$j++] = $_.height; //#4079
    } //#4079
    var _1J = $a(); //#4079
    $k[$j++] = Infinity; //#4080
    for (var _1K = 0, _1L = 16; _1K < _1L; _1K++) { //#4080
        $k[$j++] = 0; //#4080
    } //#4080
    var _1M = $a(); //#4080
    $k[$j++] = 'ren'; //#4083
    $k[$j++] = bwipp_renlinear; //#4083
    $k[$j++] = 'sbs'; //#4083
    $k[$j++] = _1F; //#4083
    $k[$j++] = 'bhs'; //#4083
    $k[$j++] = _1J; //#4083
    $k[$j++] = 'bbs'; //#4083
    $k[$j++] = _1M; //#4083
    if ($_.includetext) { //#4083
        $k[$j++] = 'txt'; //#4082
        $k[$j++] = $_.txt; //#4082
    } //#4082
    $k[$j++] = 'opt'; //#4087
    $k[$j++] = $_.options; //#4087
    $k[$j++] = 'guardrightpos'; //#4087
    $k[$j++] = 10; //#4087
    $k[$j++] = 'guardrightypos'; //#4087
    $k[$j++] = $f($_.textyoffset + 4); //#4087
    $k[$j++] = 'bordertop'; //#4087
    $k[$j++] = 10; //#4087
    var _1R = $d(); //#4087
    $k[$j++] = _1R; //#4090
    if (!$_.dontdraw) { //#4090
        bwipp_renlinear(); //#4090
    } //#4090
    $_ = Object.getPrototypeOf($_); //#4092
    $_ = Object.getPrototypeOf($_); //#4094
}

function bwipp_ean2() {
    $_ = Object.create($_); //#4124
    $_.dontdraw = false; //#4127
    $_.includetext = false; //#4128
    $_.textfont = "OCR-B"; //#4129
    $_.textsize = 12; //#4130
    $_.textxoffset = 0; //#4131
    $_.textyoffset = null; //#4132
    $_.height = 0.7; //#4133
    $k[$j++] = $_; //#4135
    bwipp_processoptions(); //#4135
    $_.options = $k[--$j]; //#4135
    $_.barcode = $k[--$j]; //#4136
    if ($eq($_.textyoffset, null)) { //#4140
        $_.textyoffset = $f(($_.height * 72) + 1); //#4139
    } //#4139
    bwipp_loadctx(bwipp_ean2) //#4142
    if ($_.barcode.length != 2) { //#4147
        $k[$j++] = 'bwipp.ean2badLength#4146'; //#4146
        $k[$j++] = "EAN-2 add-on must be 2 digits"; //#4146
        bwipp_raiseerror(); //#4146
    } //#4146
    $forall($_.barcode, function() { //#4152
        var _6 = $k[--$j]; //#4149
        if ((_6 < 48) || (_6 > 57)) { //#4151
            $k[$j++] = 'bwipp.ean2badCharacter#4150'; //#4150
            $k[$j++] = "EAN-2 add-on must contain only digits"; //#4150
            bwipp_raiseerror(); //#4150
        } //#4150
    }); //#4150
    if (!bwipp_ean2.__4167__) { //#4167
        $_ = Object.create($_); //#4167
        $_.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "112", "11"]); //#4160
        $_.barchars = "0123456789"; //#4163
        $_.mirrormaps = $a(["00", "01", "10", "11"]); //#4166
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_ean2.$ctx[id] = $_[id]); //#4166
        bwipp_ean2.__4167__ = 1; //#4166
        $_ = Object.getPrototypeOf($_); //#4166
    } //#4166
    $_.mirrormap = $get($_.mirrormaps, $cvi($geti($_.barcode, 0, 2)) % 4); //#4169
    $_.sbs = $s(13); //#4171
    $_.txt = $a(2); //#4172
    for (var _G = 0; _G <= 1; _G += 1) { //#4202
        $_.i = _G; //#4175
        if ($_.i == 0) { //#4181
            $puti($_.sbs, 0, $get($_.encs, 10)); //#4179
        } else { //#4181
            $puti($_.sbs, (($_.i - 1) * 6) + 7, $get($_.encs, 11)); //#4181
        } //#4181
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#4185
        $j--; //#4186
        $_.indx = $k[--$j].length; //#4187
        $j -= 2; //#4188
        $_.enc = $get($_.encs, $_.indx); //#4189
        if ($get($_.mirrormap, $_.i) == 49) { //#4199
            $_.enclen = $_.enc.length; //#4191
            $_.revenc = $s($_.enclen); //#4192
            for (var _f = 0, _e = $_.enclen - 1; _f <= _e; _f += 1) { //#4197
                $_.j = _f; //#4194
                $_.char = $get($_.enc, $_.j); //#4195
                $put($_.revenc, ($_.enclen - $_.j) - 1, $_.char); //#4196
            } //#4196
            $_.enc = $_.revenc; //#4198
        } //#4198
        $puti($_.sbs, ($_.i * 6) + 3, $_.enc); //#4200
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ((($_.i - 1) * 9) + 13) + $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])); //#4201
    } //#4201
    $k[$j++] = Infinity; //#4216
    $k[$j++] = Infinity; //#4207
    var _12 = $_.sbs; //#4207
    for (var _13 = 0, _14 = _12.length; _13 < _14; _13++) { //#4207
        $k[$j++] = $get(_12, _13) - 48; //#4207
    } //#4207
    var _16 = $a(); //#4207
    $k[$j++] = Infinity; //#4208
    for (var _17 = 0, _18 = 12; _17 < _18; _17++) { //#4208
        $k[$j++] = $_.height; //#4208
    } //#4208
    var _1A = $a(); //#4208
    $k[$j++] = Infinity; //#4209
    for (var _1B = 0, _1C = 12; _1B < _1C; _1B++) { //#4209
        $k[$j++] = 0; //#4209
    } //#4209
    var _1D = $a(); //#4209
    $k[$j++] = 'ren'; //#4212
    $k[$j++] = bwipp_renlinear; //#4212
    $k[$j++] = 'sbs'; //#4212
    $k[$j++] = _16; //#4212
    $k[$j++] = 'bhs'; //#4212
    $k[$j++] = _1A; //#4212
    $k[$j++] = 'bbs'; //#4212
    $k[$j++] = _1D; //#4212
    if ($_.includetext) { //#4212
        $k[$j++] = 'txt'; //#4211
        $k[$j++] = $_.txt; //#4211
    } //#4211
    $k[$j++] = 'opt'; //#4216
    $k[$j++] = $_.options; //#4216
    $k[$j++] = 'guardrightpos'; //#4216
    $k[$j++] = 10; //#4216
    $k[$j++] = 'guardrightypos'; //#4216
    $k[$j++] = $f($_.textyoffset + 4); //#4216
    $k[$j++] = 'bordertop'; //#4216
    $k[$j++] = 10; //#4216
    var _1I = $d(); //#4216
    $k[$j++] = _1I; //#4219
    if (!$_.dontdraw) { //#4219
        bwipp_renlinear(); //#4219
    } //#4219
    $_ = Object.getPrototypeOf($_); //#4221
    $_ = Object.getPrototypeOf($_); //#4223
}

function bwipp_ean13() {
    $_ = Object.create($_); //#4255
    $_.dontdraw = false; //#4258
    $_.includetext = false; //#4259
    $_.textfont = "OCR-B"; //#4260
    $_.textsize = 12; //#4261
    $_.textxoffset = -10; //#4262
    $_.textyoffset = -4; //#4263
    $_.height = 1; //#4264
    $_.addongap = 12; //#4265
    $_.addontextfont = "unset"; //#4266
    $_.addontextsize = null; //#4267
    $_.addontextxoffset = null; //#4268
    $_.addontextyoffset = null; //#4269
    $k[$j++] = $_; //#4271
    bwipp_processoptions(); //#4271
    $_.options = $k[--$j]; //#4271
    $_.barcode = $k[--$j]; //#4272
    bwipp_loadctx(bwipp_ean13) //#4274
    $search($_.barcode, " "); //#4277
    if ($k[--$j]) { //#4283
        $_.barcode = $k[--$j]; //#4278
        $j--; //#4279
        $_.addon = $k[--$j]; //#4280
    } else { //#4283
        $j--; //#4282
        $_.addon = ""; //#4283
    } //#4283
    if (($_.barcode.length != 12) && ($_.barcode.length != 13)) { //#4289
        $k[$j++] = 'bwipp.ean13badLength#4288'; //#4288
        $k[$j++] = "EAN-13 must be 12 or 13 digits"; //#4288
        bwipp_raiseerror(); //#4288
    } //#4288
    $forall($_.barcode, function() { //#4294
        var _9 = $k[--$j]; //#4291
        if ((_9 < 48) || (_9 > 57)) { //#4293
            $k[$j++] = 'bwipp.ean13badCharacter#4292'; //#4292
            $k[$j++] = "EAN-13 must contain only digits"; //#4292
            bwipp_raiseerror(); //#4292
        } //#4292
    }); //#4292
    if ((($_.addon.length != 0) && ($_.addon.length != 2)) && ($_.addon.length != 5)) { //#4297
        $k[$j++] = 'bwipp.ean13badAddOnLength#4296'; //#4296
        $k[$j++] = "Add-on for EAN-13 must be 2 or 5 digits"; //#4296
        bwipp_raiseerror(); //#4296
    } //#4296
    $_.pad = $s(13); //#4300
    $_.checksum = 0; //#4301
    for (var _E = 0; _E <= 11; _E += 1) { //#4310
        $_.i = _E; //#4303
        $_.barchar = $f($get($_.barcode, $_.i) - 48); //#4304
        if (($_.i % 2) == 0) { //#4308
            $_.checksum = $f($_.barchar + $_.checksum); //#4306
        } else { //#4308
            $_.checksum = $f(($_.barchar * 3) + $_.checksum); //#4308
        } //#4308
    } //#4308
    $_.checksum = ($f(10 - ($_.checksum % 10))) % 10; //#4311
    if ($_.barcode.length == 13) { //#4316
        if ($get($_.barcode, 12) != $f($_.checksum + 48)) { //#4315
            $k[$j++] = 'bwipp.ean13badCheckDigit#4314'; //#4314
            $k[$j++] = "Incorrect EAN-13 check digit provided"; //#4314
            bwipp_raiseerror(); //#4314
        } //#4314
    } //#4314
    $puti($_.pad, 0, $_.barcode); //#4317
    $put($_.pad, 12, $f($_.checksum + 48)); //#4318
    $_.barcode = $_.pad; //#4319
    if (!bwipp_ean13.__4337__) { //#4337
        $_ = Object.create($_); //#4337
        $_.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "111", "11111", "111"]); //#4327
        $_.barchars = "0123456789"; //#4330
        $_.mirrormaps = $a(["000000", "001011", "001101", "001110", "010011", "011001", "011100", "010101", "010110", "011010"]); //#4336
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_ean13.$ctx[id] = $_[id]); //#4336
        bwipp_ean13.__4337__ = 1; //#4336
        $_ = Object.getPrototypeOf($_); //#4336
    } //#4336
    $_.sbs = $s(59); //#4339
    $_.txt = $a(13); //#4340
    $puti($_.sbs, 0, $get($_.encs, 10)); //#4343
    $_.mirrormap = $get($_.mirrormaps, $get($_.barcode, 0) - 48); //#4346
    $put($_.txt, 0, $a([$geti($_.barcode, 0, 1), $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])); //#4347
    for (var _r = 1; _r <= 6; _r += 1) { //#4370
        $_.i = _r; //#4352
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#4353
        $j--; //#4354
        $_.indx = $k[--$j].length; //#4355
        $j -= 2; //#4356
        $_.enc = $get($_.encs, $_.indx); //#4357
        if ($get($_.mirrormap, $_.i - 1) == 49) { //#4367
            $_.enclen = $_.enc.length; //#4359
            $_.revenc = $s($_.enclen); //#4360
            for (var _18 = 0, _17 = $_.enclen - 1; _18 <= _17; _18 += 1) { //#4365
                $_.j = _18; //#4362
                $_.char = $get($_.enc, $_.j); //#4363
                $put($_.revenc, ($_.enclen - $_.j) - 1, $_.char); //#4364
            } //#4364
            $_.enc = $_.revenc; //#4366
        } //#4366
        $puti($_.sbs, (($_.i - 1) * 4) + 3, $_.enc); //#4368
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ((($_.i - 1) * 7) + 14) + $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])); //#4369
    } //#4369
    $puti($_.sbs, ((7 - 1) * 4) + 3, $get($_.encs, 11)); //#4373
    for (var _1Y = 7; _1Y <= 12; _1Y += 1) { //#4386
        $_.i = _1Y; //#4378
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#4379
        $j--; //#4380
        $_.indx = $k[--$j].length; //#4381
        $j -= 2; //#4382
        $_.enc = $get($_.encs, $_.indx); //#4383
        $puti($_.sbs, (($_.i - 1) * 4) + 8, $_.enc); //#4384
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ((($_.i - 1) * 7) + 18) + $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])); //#4385
    } //#4385
    $puti($_.sbs, 56, $get($_.encs, 12)); //#4389
    $k[$j++] = Infinity; //#4391
    var _1y = $_.sbs; //#4391
    for (var _1z = 0, _20 = _1y.length; _1z < _20; _1z++) { //#4391
        $k[$j++] = $get(_1y, _1z) - 48; //#4391
    } //#4391
    $_.sbs = $a(); //#4391
    if ($_.includetext) { //#4398
        $k[$j++] = Infinity; //#4393
        $k[$j++] = $_.height; //#4393
        $k[$j++] = $_.height; //#4393
        for (var _26 = 0, _27 = 12; _26 < _27; _26++) { //#4393
            $k[$j++] = $f($_.height - 0.075); //#4393
        } //#4393
        $k[$j++] = $_.height; //#4393
        $k[$j++] = $_.height; //#4393
        for (var _2B = 0, _2C = 12; _2B < _2C; _2B++) { //#4393
            $k[$j++] = $f($_.height - 0.075); //#4393
        } //#4393
        $k[$j++] = $_.height; //#4393
        $k[$j++] = $_.height; //#4393
        $_.bhs = $a(); //#4393
        $k[$j++] = Infinity; //#4394
        $k[$j++] = 0; //#4394
        $k[$j++] = 0; //#4394
        for (var _2H = 0, _2I = 12; _2H < _2I; _2H++) { //#4394
            $k[$j++] = 0.075; //#4394
        } //#4394
        $k[$j++] = 0; //#4394
        $k[$j++] = 0; //#4394
        for (var _2J = 0, _2K = 12; _2J < _2K; _2J++) { //#4394
            $k[$j++] = 0.075; //#4394
        } //#4394
        $k[$j++] = 0; //#4394
        $k[$j++] = 0; //#4394
        $_.bbs = $a(); //#4394
    } else { //#4398
        $k[$j++] = Infinity; //#4396
        for (var _2M = 0, _2N = 30; _2M < _2N; _2M++) { //#4396
            $k[$j++] = $_.height; //#4396
        } //#4396
        $_.bhs = $a(); //#4396
        $k[$j++] = Infinity; //#4397
        for (var _2Q = 0, _2R = 30; _2Q < _2R; _2Q++) { //#4397
            $k[$j++] = 0; //#4397
        } //#4397
        $_.bbs = $a(); //#4397
        $_.txt = $a([]); //#4398
    } //#4398
    $_.guardrightypos = 0; //#4400
    if ($ne($_.addon, "")) { //#4421
        $k[$j++] = Infinity; //#4411
        $k[$j++] = 'dontdraw'; //#4408
        $k[$j++] = true; //#4408
        $k[$j++] = 'includetext'; //#4408
        $k[$j++] = true; //#4408
        $k[$j++] = 'height'; //#4408
        $k[$j++] = $f($_.height - 0.15); //#4408
        $k[$j++] = 'textxoffset'; //#4408
        if ($ne($_.addontextxoffset, null)) { //#4408
            $k[$j++] = $_.addontextxoffset; //#4408
        } else { //#4408
            $k[$j++] = 95 + $_.addongap; //#4408
        } //#4408
        if ($ne($_.addontextyoffset, null)) { //#4409
            $k[$j++] = 'textyoffset'; //#4409
            $k[$j++] = $_.addontextyoffset; //#4409
        } //#4409
        $k[$j++] = 'textsize'; //#4410
        if ($ne($_.addontextsize, null)) { //#4410
            $k[$j++] = $_.addontextsize; //#4410
        } else { //#4410
            $k[$j++] = $_.textsize; //#4410
        } //#4410
        var _2f = $ne($_.addontextfont, "unset") ? $_.addontextfont : $_.textfont; //#4411
        $k[$j++] = 'textfont'; //#4411
        $k[$j++] = _2f; //#4411
        $_.addopts = $d(); //#4412
        if ($_.addon.length == 2) { //#4413
            $k[$j++] = $_.addon; //#4413
            $k[$j++] = $_.addopts; //#4413
            bwipp_ean2(); //#4413
        } //#4413
        if ($_.addon.length == 5) { //#4414
            $k[$j++] = $_.addon; //#4414
            $k[$j++] = $_.addopts; //#4414
            bwipp_ean5(); //#4414
        } //#4414
        $_.addcode = $k[--$j]; //#4415
        $k[$j++] = Infinity; //#4416
        $aload($_.sbs); //#4416
        $k[$j++] = $_.addongap; //#4416
        $aload($get($_.addcode, "sbs")); //#4416
        $_.sbs = $a(); //#4416
        $k[$j++] = Infinity; //#4417
        $aload($_.bhs); //#4417
        $forall($get($_.addcode, "bhs"), function() { //#4417
            var _2w = $k[--$j]; //#4417
            $k[$j++] = $f(_2w - 0.075); //#4417
        }); //#4417
        $_.bhs = $a(); //#4417
        $k[$j++] = Infinity; //#4418
        $aload($_.bbs); //#4418
        $forall($get($_.addcode, "bbs"), function() { //#4418
            var _31 = $k[--$j]; //#4418
            $k[$j++] = $f(_31 + 0.075); //#4418
        }); //#4418
        $_.bbs = $a(); //#4418
        $k[$j++] = Infinity; //#4419
        $aload($_.txt); //#4419
        $aload($get($_.addcode, "txt")); //#4419
        $_.txt = $a(); //#4419
        $_.guardrightypos = ($_.height * 72) - 6; //#4420
    } //#4420
    var _3E = new Map([
        ["ren", bwipp_renlinear],
        ["sbs", $_.sbs],
        ["bhs", $_.bhs],
        ["bbs", $_.bbs],
        ["txt", $_.txt],
        ["opt", $_.options],
        ["guardrightpos", 10],
        ["guardrightypos", $_.guardrightypos],
        ["borderbottom", 5]
    ]); //#4433
    $k[$j++] = _3E; //#4436
    if (!$_.dontdraw) { //#4436
        bwipp_renlinear(); //#4436
    } //#4436
    $_ = Object.getPrototypeOf($_); //#4438
    $_ = Object.getPrototypeOf($_); //#4440
}

function bwipp_ean8() {
    $_ = Object.create($_); //#4472
    $_.dontdraw = false; //#4475
    $_.includetext = false; //#4476
    $_.textfont = "OCR-B"; //#4477
    $_.textsize = 12; //#4478
    $_.textxoffset = 4; //#4479
    $_.textyoffset = -4; //#4480
    $_.height = 1; //#4481
    $_.addongap = 12; //#4482
    $_.addontextfont = "unset"; //#4483
    $_.addontextsize = null; //#4484
    $_.addontextxoffset = null; //#4485
    $_.addontextyoffset = null; //#4486
    $k[$j++] = $_; //#4488
    bwipp_processoptions(); //#4488
    $_.options = $k[--$j]; //#4488
    $_.barcode = $k[--$j]; //#4489
    bwipp_loadctx(bwipp_ean8) //#4491
    $search($_.barcode, " "); //#4494
    if ($k[--$j]) { //#4500
        $_.barcode = $k[--$j]; //#4495
        $j--; //#4496
        $_.addon = $k[--$j]; //#4497
    } else { //#4500
        $j--; //#4499
        $_.addon = ""; //#4500
    } //#4500
    if (($_.barcode.length != 7) && ($_.barcode.length != 8)) { //#4506
        $k[$j++] = 'bwipp.ean8badLength#4505'; //#4505
        $k[$j++] = "EAN-8 must be 7 or 8 digits"; //#4505
        bwipp_raiseerror(); //#4505
    } //#4505
    $forall($_.barcode, function() { //#4511
        var _9 = $k[--$j]; //#4508
        if ((_9 < 48) || (_9 > 57)) { //#4510
            $k[$j++] = 'bwipp.ean8badCharacter#4509'; //#4509
            $k[$j++] = "EAN-8 must contain only digits"; //#4509
            bwipp_raiseerror(); //#4509
        } //#4509
    }); //#4509
    if ((($_.addon.length != 0) && ($_.addon.length != 2)) && ($_.addon.length != 5)) { //#4514
        $k[$j++] = 'bwipp.ean8badAddOnLength#4513'; //#4513
        $k[$j++] = "Add-on for EAN-8 must be 2 or 5 digits"; //#4513
        bwipp_raiseerror(); //#4513
    } //#4513
    $_.pad = $s(8); //#4517
    $_.checksum = 0; //#4518
    for (var _E = 0; _E <= 6; _E += 1) { //#4527
        $_.i = _E; //#4520
        $_.barchar = $f($get($_.barcode, $_.i) - 48); //#4521
        if (($_.i % 2) != 0) { //#4525
            $_.checksum = $f($_.barchar + $_.checksum); //#4523
        } else { //#4525
            $_.checksum = $f(($_.barchar * 3) + $_.checksum); //#4525
        } //#4525
    } //#4525
    $_.checksum = ($f(10 - ($_.checksum % 10))) % 10; //#4528
    if ($_.barcode.length == 8) { //#4533
        if ($get($_.barcode, 7) != $f($_.checksum + 48)) { //#4532
            $k[$j++] = 'bwipp.ean8badCheckDigit#4531'; //#4531
            $k[$j++] = "Incorrect EAN-8 check digit provided"; //#4531
            bwipp_raiseerror(); //#4531
        } //#4531
    } //#4531
    $puti($_.pad, 0, $_.barcode); //#4534
    $put($_.pad, 7, $f($_.checksum + 48)); //#4535
    $_.barcode = $_.pad; //#4536
    if (!bwipp_ean8.__4548__) { //#4548
        $_ = Object.create($_); //#4548
        $_.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "111", "11111", "111"]); //#4544
        $_.barchars = "0123456789"; //#4547
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_ean8.$ctx[id] = $_[id]); //#4547
        bwipp_ean8.__4548__ = 1; //#4547
        $_ = Object.getPrototypeOf($_); //#4547
    } //#4547
    $_.sbs = $s(43); //#4550
    $_.txt = $a(8); //#4551
    $puti($_.sbs, 0, $get($_.encs, 10)); //#4554
    for (var _e = 0; _e <= 3; _e += 1) { //#4567
        $_.i = _e; //#4559
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#4560
        $j--; //#4561
        $_.indx = $k[--$j].length; //#4562
        $j -= 2; //#4563
        $_.enc = $get($_.encs, $_.indx); //#4564
        $puti($_.sbs, ($_.i * 4) + 3, $_.enc); //#4565
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ($_.i * 7) + $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])); //#4566
    } //#4566
    $puti($_.sbs, (4 * 4) + 3, $get($_.encs, 11)); //#4570
    for (var _14 = 4; _14 <= 7; _14 += 1) { //#4583
        $_.i = _14; //#4575
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#4576
        $j--; //#4577
        $_.indx = $k[--$j].length; //#4578
        $j -= 2; //#4579
        $_.enc = $get($_.encs, $_.indx); //#4580
        $puti($_.sbs, ($_.i * 4) + 8, $_.enc); //#4581
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), (($_.i * 7) + $_.textxoffset) + 4, $_.textyoffset, $_.textfont, $_.textsize])); //#4582
    } //#4582
    $puti($_.sbs, 40, $get($_.encs, 12)); //#4586
    $k[$j++] = Infinity; //#4588
    var _1U = $_.sbs; //#4588
    for (var _1V = 0, _1W = _1U.length; _1V < _1W; _1V++) { //#4588
        $k[$j++] = $get(_1U, _1V) - 48; //#4588
    } //#4588
    $_.sbs = $a(); //#4588
    if ($_.includetext) { //#4595
        $k[$j++] = Infinity; //#4590
        $k[$j++] = $_.height; //#4590
        $k[$j++] = $_.height; //#4590
        for (var _1c = 0, _1d = 8; _1c < _1d; _1c++) { //#4590
            $k[$j++] = $f($_.height - 0.075); //#4590
        } //#4590
        $k[$j++] = $_.height; //#4590
        $k[$j++] = $_.height; //#4590
        for (var _1h = 0, _1i = 8; _1h < _1i; _1h++) { //#4590
            $k[$j++] = $f($_.height - 0.075); //#4590
        } //#4590
        $k[$j++] = $_.height; //#4590
        $k[$j++] = $_.height; //#4590
        $_.bhs = $a(); //#4590
        $k[$j++] = Infinity; //#4591
        $k[$j++] = 0; //#4591
        $k[$j++] = 0; //#4591
        for (var _1n = 0, _1o = 8; _1n < _1o; _1n++) { //#4591
            $k[$j++] = 0.075; //#4591
        } //#4591
        $k[$j++] = 0; //#4591
        $k[$j++] = 0; //#4591
        for (var _1p = 0, _1q = 8; _1p < _1q; _1p++) { //#4591
            $k[$j++] = 0.075; //#4591
        } //#4591
        $k[$j++] = 0; //#4591
        $k[$j++] = 0; //#4591
        $_.bbs = $a(); //#4591
    } else { //#4595
        $k[$j++] = Infinity; //#4593
        for (var _1s = 0, _1t = 22; _1s < _1t; _1s++) { //#4593
            $k[$j++] = $_.height; //#4593
        } //#4593
        $_.bhs = $a(); //#4593
        $k[$j++] = Infinity; //#4594
        for (var _1w = 0, _1x = 22; _1w < _1x; _1w++) { //#4594
            $k[$j++] = 0; //#4594
        } //#4594
        $_.bbs = $a(); //#4594
        $_.txt = $a([]); //#4595
    } //#4595
    $_.guardrightypos = 0; //#4597
    if ($ne($_.addon, "")) { //#4618
        $k[$j++] = Infinity; //#4608
        $k[$j++] = 'dontdraw'; //#4605
        $k[$j++] = true; //#4605
        $k[$j++] = 'includetext'; //#4605
        $k[$j++] = true; //#4605
        $k[$j++] = 'height'; //#4605
        $k[$j++] = $f($_.height - 0.15); //#4605
        $k[$j++] = 'textxoffset'; //#4605
        if ($ne($_.addontextxoffset, null)) { //#4605
            $k[$j++] = $_.addontextxoffset; //#4605
        } else { //#4605
            $k[$j++] = 67 + $_.addongap; //#4605
        } //#4605
        if ($ne($_.addontextyoffset, null)) { //#4606
            $k[$j++] = 'textyoffset'; //#4606
            $k[$j++] = $_.addontextyoffset; //#4606
        } //#4606
        $k[$j++] = 'textsize'; //#4607
        if ($ne($_.addontextsize, null)) { //#4607
            $k[$j++] = $_.addontextsize; //#4607
        } else { //#4607
            $k[$j++] = $_.textsize; //#4607
        } //#4607
        var _2B = $ne($_.addontextfont, "unset") ? $_.addontextfont : $_.textfont; //#4608
        $k[$j++] = 'textfont'; //#4608
        $k[$j++] = _2B; //#4608
        $_.addopts = $d(); //#4609
        if ($_.addon.length == 2) { //#4610
            $k[$j++] = $_.addon; //#4610
            $k[$j++] = $_.addopts; //#4610
            bwipp_ean2(); //#4610
        } //#4610
        if ($_.addon.length == 5) { //#4611
            $k[$j++] = $_.addon; //#4611
            $k[$j++] = $_.addopts; //#4611
            bwipp_ean5(); //#4611
        } //#4611
        $_.addcode = $k[--$j]; //#4612
        $k[$j++] = Infinity; //#4613
        $aload($_.sbs); //#4613
        $k[$j++] = $_.addongap; //#4613
        $aload($get($_.addcode, "sbs")); //#4613
        $_.sbs = $a(); //#4613
        $k[$j++] = Infinity; //#4614
        $aload($_.bhs); //#4614
        $forall($get($_.addcode, "bhs"), function() { //#4614
            var _2S = $k[--$j]; //#4614
            $k[$j++] = $f(_2S - 0.075); //#4614
        }); //#4614
        $_.bhs = $a(); //#4614
        $k[$j++] = Infinity; //#4615
        $aload($_.bbs); //#4615
        $forall($get($_.addcode, "bbs"), function() { //#4615
            var _2X = $k[--$j]; //#4615
            $k[$j++] = $f(_2X + 0.075); //#4615
        }); //#4615
        $_.bbs = $a(); //#4615
        $k[$j++] = Infinity; //#4616
        $aload($_.txt); //#4616
        $aload($get($_.addcode, "txt")); //#4616
        $_.txt = $a(); //#4616
        $_.guardrightypos = ($_.height * 72) - 6; //#4617
    } //#4617
    var _2k = new Map([
        ["ren", bwipp_renlinear],
        ["sbs", $_.sbs],
        ["bhs", $_.bhs],
        ["bbs", $_.bbs],
        ["txt", $_.txt],
        ["opt", $_.options],
        ["guardleftpos", 10],
        ["guardrightpos", 10],
        ["guardrightypos", $_.guardrightypos],
        ["borderbottom", 5]
    ]); //#4631
    $k[$j++] = _2k; //#4634
    if (!$_.dontdraw) { //#4634
        bwipp_renlinear(); //#4634
    } //#4634
    $_ = Object.getPrototypeOf($_); //#4636
    $_ = Object.getPrototypeOf($_); //#4638
}

function bwipp_upca() {
    $_ = Object.create($_); //#4670
    $_.dontdraw = false; //#4673
    $_.includetext = false; //#4674
    $_.textfont = "OCR-B"; //#4675
    $_.textsize = 12; //#4676
    $_.textxoffset = -7; //#4677
    $_.textyoffset = -4; //#4678
    $_.height = 1; //#4679
    $_.addongap = 12; //#4680
    $_.addontextfont = "unset"; //#4681
    $_.addontextsize = null; //#4682
    $_.addontextxoffset = null; //#4683
    $_.addontextyoffset = null; //#4684
    $k[$j++] = $_; //#4686
    bwipp_processoptions(); //#4686
    $_.options = $k[--$j]; //#4686
    $_.barcode = $k[--$j]; //#4687
    bwipp_loadctx(bwipp_upca) //#4689
    $search($_.barcode, " "); //#4692
    if ($k[--$j]) { //#4698
        $_.barcode = $k[--$j]; //#4693
        $j--; //#4694
        $_.addon = $k[--$j]; //#4695
    } else { //#4698
        $j--; //#4697
        $_.addon = ""; //#4698
    } //#4698
    if (($_.barcode.length == 7) || ($_.barcode.length == 8)) { //#4744
        $forall($_.barcode, function() { //#4708
            var _9 = $k[--$j]; //#4705
            if ((_9 < 48) || (_9 > 57)) { //#4707
                $k[$j++] = 'bwipp.upcAupcEbadCharacter#4706'; //#4706
                $k[$j++] = "UPC-E must contain only digits"; //#4706
                bwipp_raiseerror(); //#4706
            } //#4706
        }); //#4706
        var _B = $get($_.barcode, 0); //#4709
        if ((_B != 48) && (_B != 49)) { //#4711
            $k[$j++] = 'bwipp.upcAupcEbadNumberSystem#4710'; //#4710
            $k[$j++] = "UPC-E must have number system 0 or 1"; //#4710
            bwipp_raiseerror(); //#4710
        } //#4710
        for (var _C = 0, _D = 1; _C < _D; _C++) { //#4739
            var _F = ($_.barcode.length == 8) ? 12 : 11; //#4713
            $_.upcacode = $s(_F); //#4713
            if ($f($get($_.barcode, 6) - 48) <= 2) { //#4720
                $puti($_.upcacode, 0, $geti($_.barcode, 0, 3)); //#4715
                $puti($_.upcacode, 3, $geti($_.barcode, 6, 1)); //#4716
                $puti($_.upcacode, 4, "0000"); //#4717
                $puti($_.upcacode, 8, $geti($_.barcode, 3, 3)); //#4718
                break; //#4719
            } //#4719
            if ($f($get($_.barcode, 6) - 48) == 3) { //#4726
                $puti($_.upcacode, 0, $geti($_.barcode, 0, 4)); //#4722
                $puti($_.upcacode, 4, "00000"); //#4723
                $puti($_.upcacode, 9, $geti($_.barcode, 4, 2)); //#4724
                break; //#4725
            } //#4725
            if ($f($get($_.barcode, 6) - 48) == 4) { //#4732
                $puti($_.upcacode, 0, $geti($_.barcode, 0, 5)); //#4728
                $puti($_.upcacode, 5, "00000"); //#4729
                $puti($_.upcacode, 10, $geti($_.barcode, 5, 1)); //#4730
                break; //#4731
            } //#4731
            if ($f($get($_.barcode, 6) - 48) >= 5) { //#4738
                $puti($_.upcacode, 0, $geti($_.barcode, 0, 6)); //#4734
                $puti($_.upcacode, 6, "0000"); //#4735
                $puti($_.upcacode, 10, $geti($_.barcode, 6, 1)); //#4736
                break; //#4737
            } //#4737
        } //#4737
        if ($_.barcode.length == 8) { //#4742
            $puti($_.upcacode, 11, $geti($_.barcode, 7, 1)); //#4741
        } //#4741
        $_.barcode = $_.upcacode; //#4743
    } //#4743
    if (($_.barcode.length != 11) && ($_.barcode.length != 12)) { //#4749
        $k[$j++] = 'bwipp.upcAbadLength#4748'; //#4748
        $k[$j++] = "UPC-A must be 11 or 12 digits"; //#4748
        bwipp_raiseerror(); //#4748
    } //#4748
    var _11 = $_.barcode; //#4750
    for (var _12 = 0, _13 = _11.length; _12 < _13; _12++) { //#4754
        var _14 = $get(_11, _12); //#4754
        if ((_14 < 48) || (_14 > 57)) { //#4753
            $k[$j++] = 'bwipp.upcAbadCharacter#4752'; //#4752
            $k[$j++] = "UPC-A must contain only digits"; //#4752
            bwipp_raiseerror(); //#4752
        } //#4752
    } //#4752
    if ((($_.addon.length != 0) && ($_.addon.length != 2)) && ($_.addon.length != 5)) { //#4757
        $k[$j++] = 'bwipp.upcAbadAddOnLength#4756'; //#4756
        $k[$j++] = "Add-on for UPC-A must be 2 or 5 digits"; //#4756
        bwipp_raiseerror(); //#4756
    } //#4756
    $_.pad = $s(12); //#4760
    $_.checksum = 0; //#4761
    for (var _19 = 0; _19 <= 10; _19 += 1) { //#4770
        $_.i = _19; //#4763
        $_.barchar = $get($_.barcode, $_.i) - 48; //#4764
        if (($_.i % 2) != 0) { //#4768
            $_.checksum = $_.checksum + $_.barchar; //#4766
        } else { //#4768
            $_.checksum = $_.checksum + ($_.barchar * 3); //#4768
        } //#4768
    } //#4768
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#4771
    if ($_.barcode.length == 12) { //#4776
        if ($get($_.barcode, 11) != ($_.checksum + 48)) { //#4775
            $k[$j++] = 'bwipp.upcAbadCheckDigit#4774'; //#4774
            $k[$j++] = "Incorrect UPC check digit provided"; //#4774
            bwipp_raiseerror(); //#4774
        } //#4774
    } //#4774
    $puti($_.pad, 0, $_.barcode); //#4777
    $put($_.pad, 11, $_.checksum + 48); //#4778
    $_.barcode = $_.pad; //#4779
    if (!bwipp_upca.__4791__) { //#4791
        $_ = Object.create($_); //#4791
        $_.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "111", "11111", "111"]); //#4787
        $_.barchars = "0123456789"; //#4790
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_upca.$ctx[id] = $_[id]); //#4790
        bwipp_upca.__4791__ = 1; //#4790
        $_ = Object.getPrototypeOf($_); //#4790
    } //#4790
    $_.sbs = $s(59); //#4793
    $_.txt = $a(12); //#4794
    $puti($_.sbs, 0, $get($_.encs, 10)); //#4797
    for (var _1Z = 0; _1Z <= 5; _1Z += 1) { //#4814
        $_.i = _1Z; //#4802
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#4803
        $j--; //#4804
        $_.indx = $k[--$j].length; //#4805
        $j -= 2; //#4806
        $_.enc = $get($_.encs, $_.indx); //#4807
        $puti($_.sbs, ($_.i * 4) + 3, $_.enc); //#4808
        if ($_.i == 0) { //#4812
            $put($_.txt, 0, $a([$geti($_.barcode, 0, 1), $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize - 2])); //#4810
        } else { //#4812
            $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), (($_.i * 7) + 11) + $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])); //#4812
        } //#4812
    } //#4812
    $puti($_.sbs, (6 * 4) + 3, $get($_.encs, 11)); //#4817
    for (var _28 = 6; _28 <= 11; _28 += 1) { //#4834
        $_.i = _28; //#4822
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#4823
        $j--; //#4824
        $_.indx = $k[--$j].length; //#4825
        $j -= 2; //#4826
        $_.enc = $get($_.encs, $_.indx); //#4827
        $puti($_.sbs, ($_.i * 4) + 8, $_.enc); //#4828
        if ($_.i == 11) { //#4832
            $put($_.txt, 11, $a([$geti($_.barcode, 11, 1), $_.textxoffset + 104, $_.textyoffset, $_.textfont, $_.textsize - 2])); //#4830
        } else { //#4832
            $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), (($_.i * 7) + $_.textxoffset) + 15, $_.textyoffset, $_.textfont, $_.textsize])); //#4832
        } //#4832
    } //#4832
    $puti($_.sbs, 56, $get($_.encs, 12)); //#4837
    $k[$j++] = Infinity; //#4839
    var _2h = $_.sbs; //#4839
    for (var _2i = 0, _2j = _2h.length; _2i < _2j; _2i++) { //#4839
        $k[$j++] = $get(_2h, _2i) - 48; //#4839
    } //#4839
    $_.sbs = $a(); //#4839
    if ($_.includetext) { //#4846
        $k[$j++] = Infinity; //#4841
        for (var _2n = 0, _2o = 4; _2n < _2o; _2n++) { //#4841
            $k[$j++] = $_.height; //#4841
        } //#4841
        for (var _2q = 0, _2r = 10; _2q < _2r; _2q++) { //#4841
            $k[$j++] = $f($_.height - 0.075); //#4841
        } //#4841
        $k[$j++] = $_.height; //#4841
        $k[$j++] = $_.height; //#4841
        for (var _2v = 0, _2w = 10; _2v < _2w; _2v++) { //#4841
            $k[$j++] = $f($_.height - 0.075); //#4841
        } //#4841
        for (var _2y = 0, _2z = 4; _2y < _2z; _2y++) { //#4841
            $k[$j++] = $_.height; //#4841
        } //#4841
        $_.bhs = $a(); //#4841
        $k[$j++] = Infinity; //#4842
        $k[$j++] = 0; //#4842
        $k[$j++] = 0; //#4842
        $k[$j++] = 0; //#4842
        $k[$j++] = 0; //#4842
        for (var _32 = 0, _33 = 10; _32 < _33; _32++) { //#4842
            $k[$j++] = 0.075; //#4842
        } //#4842
        $k[$j++] = 0; //#4842
        $k[$j++] = 0; //#4842
        for (var _34 = 0, _35 = 10; _34 < _35; _34++) { //#4842
            $k[$j++] = 0.075; //#4842
        } //#4842
        $k[$j++] = 0; //#4842
        $k[$j++] = 0; //#4842
        $k[$j++] = 0; //#4842
        $k[$j++] = 0; //#4842
        $_.bbs = $a(); //#4842
    } else { //#4846
        $k[$j++] = Infinity; //#4844
        for (var _37 = 0, _38 = 30; _37 < _38; _37++) { //#4844
            $k[$j++] = $_.height; //#4844
        } //#4844
        $_.bhs = $a(); //#4844
        $k[$j++] = Infinity; //#4845
        for (var _3B = 0, _3C = 30; _3B < _3C; _3B++) { //#4845
            $k[$j++] = 0; //#4845
        } //#4845
        $_.bbs = $a(); //#4845
        $_.txt = $a([]); //#4846
    } //#4846
    $_.guardrightypos = 0; //#4848
    if ($ne($_.addon, "")) { //#4869
        $k[$j++] = Infinity; //#4859
        $k[$j++] = 'dontdraw'; //#4856
        $k[$j++] = true; //#4856
        $k[$j++] = 'includetext'; //#4856
        $k[$j++] = true; //#4856
        $k[$j++] = 'height'; //#4856
        $k[$j++] = $f($_.height - 0.15); //#4856
        $k[$j++] = 'textxoffset'; //#4856
        if ($ne($_.addontextxoffset, null)) { //#4856
            $k[$j++] = $_.addontextxoffset; //#4856
        } else { //#4856
            $k[$j++] = 95 + $_.addongap; //#4856
        } //#4856
        if ($ne($_.addontextyoffset, null)) { //#4857
            $k[$j++] = 'textyoffset'; //#4857
            $k[$j++] = $_.addontextyoffset; //#4857
        } //#4857
        $k[$j++] = 'textsize'; //#4858
        if ($ne($_.addontextsize, null)) { //#4858
            $k[$j++] = $_.addontextsize; //#4858
        } else { //#4858
            $k[$j++] = $_.textsize; //#4858
        } //#4858
        var _3Q = $ne($_.addontextfont, "unset") ? $_.addontextfont : $_.textfont; //#4859
        $k[$j++] = 'textfont'; //#4859
        $k[$j++] = _3Q; //#4859
        $_.addopts = $d(); //#4860
        if ($_.addon.length == 2) { //#4861
            $k[$j++] = $_.addon; //#4861
            $k[$j++] = $_.addopts; //#4861
            bwipp_ean2(); //#4861
        } //#4861
        if ($_.addon.length == 5) { //#4862
            $k[$j++] = $_.addon; //#4862
            $k[$j++] = $_.addopts; //#4862
            bwipp_ean5(); //#4862
        } //#4862
        $_.addcode = $k[--$j]; //#4863
        $k[$j++] = Infinity; //#4864
        $aload($_.sbs); //#4864
        $k[$j++] = $_.addongap; //#4864
        $aload($get($_.addcode, "sbs")); //#4864
        $_.sbs = $a(); //#4864
        $k[$j++] = Infinity; //#4865
        $aload($_.bhs); //#4865
        $forall($get($_.addcode, "bhs"), function() { //#4865
            var _3h = $k[--$j]; //#4865
            $k[$j++] = $f(_3h - 0.075); //#4865
        }); //#4865
        $_.bhs = $a(); //#4865
        $k[$j++] = Infinity; //#4866
        $aload($_.bbs); //#4866
        $forall($get($_.addcode, "bbs"), function() { //#4866
            var _3m = $k[--$j]; //#4866
            $k[$j++] = $f(_3m + 0.075); //#4866
        }); //#4866
        $_.bbs = $a(); //#4866
        $k[$j++] = Infinity; //#4867
        $aload($_.txt); //#4867
        $aload($get($_.addcode, "txt")); //#4867
        $_.txt = $a(); //#4867
        $_.guardrightypos = ($_.height * 72) - 6; //#4868
    } //#4868
    var _3z = new Map([
        ["ren", bwipp_renlinear],
        ["sbs", $_.sbs],
        ["bhs", $_.bhs],
        ["bbs", $_.bbs],
        ["txt", $_.txt],
        ["opt", $_.options],
        ["guardrightpos", 10],
        ["guardrightypos", $_.guardrightypos],
        ["borderbottom", 5]
    ]); //#4881
    $k[$j++] = _3z; //#4884
    if (!$_.dontdraw) { //#4884
        bwipp_renlinear(); //#4884
    } //#4884
    $_ = Object.getPrototypeOf($_); //#4886
    $_ = Object.getPrototypeOf($_); //#4888
}

function bwipp_upce() {
    $_ = Object.create($_); //#4920
    $_.dontdraw = false; //#4923
    $_.includetext = false; //#4924
    $_.textfont = "OCR-B"; //#4925
    $_.textsize = 12; //#4926
    $_.textxoffset = -7; //#4927
    $_.textyoffset = -4; //#4928
    $_.height = 1; //#4929
    $_.addongap = 12; //#4930
    $_.addontextfont = "unset"; //#4931
    $_.addontextsize = null; //#4932
    $_.addontextxoffset = null; //#4933
    $_.addontextyoffset = null; //#4934
    $k[$j++] = $_; //#4936
    bwipp_processoptions(); //#4936
    $_.options = $k[--$j]; //#4936
    $_.barcode = $k[--$j]; //#4937
    bwipp_loadctx(bwipp_upce) //#4939
    $search($_.barcode, " "); //#4942
    if ($k[--$j]) { //#4948
        $_.barcode = $k[--$j]; //#4943
        $j--; //#4944
        $_.addon = $k[--$j]; //#4945
    } else { //#4948
        $j--; //#4947
        $_.addon = ""; //#4948
    } //#4948
    if (($_.barcode.length == 11) || ($_.barcode.length == 12)) { //#4990
        $forall($_.barcode, function() { //#4958
            var _9 = $k[--$j]; //#4955
            if ((_9 < 48) || (_9 > 57)) { //#4957
                $k[$j++] = 'bwipp.upcEupcAbadCharacter#4956'; //#4956
                $k[$j++] = "UPC-A must contain only digits"; //#4956
                bwipp_raiseerror(); //#4956
            } //#4956
        }); //#4956
        for (var _A = 0, _B = 1; _A < _B; _A++) { //#4985
            var _D = ($_.barcode.length == 12) ? 8 : 7; //#4960
            $_.upcecode = $s(_D); //#4960
            if (($f($get($_.barcode, 3) - 48) <= 2) && $eq($geti($_.barcode, 4, 4), "0000")) { //#4966
                $puti($_.upcecode, 0, $geti($_.barcode, 0, 3)); //#4962
                $puti($_.upcecode, 3, $geti($_.barcode, 8, 3)); //#4963
                $puti($_.upcecode, 6, $geti($_.barcode, 3, 1)); //#4964
                break; //#4965
            } //#4965
            if ($eq($geti($_.barcode, 4, 5), "00000")) { //#4972
                $puti($_.upcecode, 0, $geti($_.barcode, 0, 4)); //#4968
                $puti($_.upcecode, 4, $geti($_.barcode, 9, 2)); //#4969
                $puti($_.upcecode, 6, "3"); //#4970
                break; //#4971
            } //#4971
            if ($eq($geti($_.barcode, 5, 5), "00000")) { //#4978
                $puti($_.upcecode, 0, $geti($_.barcode, 0, 5)); //#4974
                $puti($_.upcecode, 5, $geti($_.barcode, 10, 1)); //#4975
                $puti($_.upcecode, 6, "4"); //#4976
                break; //#4977
            } //#4977
            if (($f($get($_.barcode, 10) - 48) >= 5) && $eq($geti($_.barcode, 6, 4), "0000")) { //#4983
                $puti($_.upcecode, 0, $geti($_.barcode, 0, 6)); //#4980
                $puti($_.upcecode, 6, $geti($_.barcode, 10, 1)); //#4981
                break; //#4982
            } //#4982
            $k[$j++] = 'bwipp.upcEupcAnotCompressible#4984'; //#4984
            $k[$j++] = "UPC-A cannot be converted to a UPC-E"; //#4984
            bwipp_raiseerror(); //#4984
        } //#4984
        if ($_.barcode.length == 12) { //#4988
            $puti($_.upcecode, 7, $geti($_.barcode, 11, 1)); //#4987
        } //#4987
        $_.barcode = $_.upcecode; //#4989
    } //#4989
    if (($_.barcode.length != 7) && ($_.barcode.length != 8)) { //#4995
        $k[$j++] = 'bwipp.upcEbadLength#4994'; //#4994
        $k[$j++] = "UPC-E must be 7 or 8 digits"; //#4994
        bwipp_raiseerror(); //#4994
    } //#4994
    var _11 = $_.barcode; //#4996
    for (var _12 = 0, _13 = _11.length; _12 < _13; _12++) { //#5000
        var _14 = $get(_11, _12); //#5000
        if ((_14 < 48) || (_14 > 57)) { //#4999
            $k[$j++] = 'bwipp.upcEbadCharacter#4998'; //#4998
            $k[$j++] = "UPC-E must contain only digits"; //#4998
            bwipp_raiseerror(); //#4998
        } //#4998
    } //#4998
    if ((($_.addon.length != 0) && ($_.addon.length != 2)) && ($_.addon.length != 5)) { //#5003
        $k[$j++] = 'bwipp.upcEbadAddOnLength#5002'; //#5002
        $k[$j++] = "Add-on for UPC-E must be 2 or 5 digits"; //#5002
        bwipp_raiseerror(); //#5002
    } //#5002
    var _19 = $get($_.barcode, 0); //#5006
    if ((_19 != 48) && (_19 != 49)) { //#5008
        $k[$j++] = 'bwipp.upcEbadNumberSystem#5007'; //#5007
        $k[$j++] = "UPC-E must have number system 0 or 1"; //#5007
        bwipp_raiseerror(); //#5007
    } //#5007
    if (!bwipp_upce.__5025__) { //#5025
        $_ = Object.create($_); //#5025
        $_.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "111", "111111"]); //#5016
        $_.barchars = "0123456789"; //#5019
        $_.mirrormaps = $a(["000111", "001011", "001101", "001110", "010011", "011001", "011100", "010101", "010110", "011010"]); //#5024
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_upce.$ctx[id] = $_[id]); //#5024
        bwipp_upce.__5025__ = 1; //#5024
        $_ = Object.getPrototypeOf($_); //#5024
    } //#5024
    for (var _1D = 0, _1E = 1; _1D < _1E; _1D++) { //#5055
        $_.upcacode = $s(11); //#5029
        if (($get($_.barcode, 6) - 48) <= 2) { //#5036
            $puti($_.upcacode, 0, $geti($_.barcode, 0, 3)); //#5031
            $puti($_.upcacode, 3, $geti($_.barcode, 6, 1)); //#5032
            $puti($_.upcacode, 4, "0000"); //#5033
            $puti($_.upcacode, 8, $geti($_.barcode, 3, 3)); //#5034
            break; //#5035
        } //#5035
        if (($get($_.barcode, 6) - 48) == 3) { //#5042
            $puti($_.upcacode, 0, $geti($_.barcode, 0, 4)); //#5038
            $puti($_.upcacode, 4, "00000"); //#5039
            $puti($_.upcacode, 9, $geti($_.barcode, 4, 2)); //#5040
            break; //#5041
        } //#5041
        if (($get($_.barcode, 6) - 48) == 4) { //#5048
            $puti($_.upcacode, 0, $geti($_.barcode, 0, 5)); //#5044
            $puti($_.upcacode, 5, "00000"); //#5045
            $puti($_.upcacode, 10, $geti($_.barcode, 5, 1)); //#5046
            break; //#5047
        } //#5047
        if (($get($_.barcode, 6) - 48) >= 5) { //#5054
            $puti($_.upcacode, 0, $geti($_.barcode, 0, 6)); //#5050
            $puti($_.upcacode, 6, "0000"); //#5051
            $puti($_.upcacode, 10, $geti($_.barcode, 6, 1)); //#5052
            break; //#5053
        } //#5053
    } //#5053
    $_.checksum = 0; //#5056
    for (var _1t = 0; _1t <= 10; _1t += 1) { //#5065
        $_.i = _1t; //#5058
        $_.barchar = $get($_.upcacode, $_.i) - 48; //#5059
        if (($_.i % 2) != 0) { //#5063
            $_.checksum = $_.checksum + $_.barchar; //#5061
        } else { //#5063
            $_.checksum = $_.checksum + ($_.barchar * 3); //#5063
        } //#5063
    } //#5063
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#5066
    if ($_.barcode.length == 8) { //#5071
        if ($get($_.barcode, 7) != ($_.checksum + 48)) { //#5070
            $k[$j++] = 'bwipp.upcEbadCheckDigit#5069'; //#5069
            $k[$j++] = "Incorrect UPC check digit provided"; //#5069
            bwipp_raiseerror(); //#5069
        } //#5069
    } //#5069
    $_.pad = $s(8); //#5072
    $puti($_.pad, 0, $_.barcode); //#5073
    $put($_.pad, 7, $_.checksum + 48); //#5074
    $_.barcode = $_.pad; //#5075
    $_.txt = $a(8); //#5076
    $put($_.txt, 0, $a([$geti($_.barcode, 0, 1), $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize - 2])); //#5077
    $_.mirrormap = $get($_.mirrormaps, $_.checksum); //#5080
    if ($get($_.barcode, 0) == 48) { //#5094
        $_.invt = $s($_.mirrormap.length); //#5084
        for (var _2V = 0, _2U = $_.mirrormap.length - 1; _2V <= _2U; _2V += 1) { //#5092
            $_.i = _2V; //#5086
            if ($get($_.mirrormap, $_.i) == 48) { //#5090
                $put($_.invt, $_.i, 49); //#5088
            } else { //#5090
                $put($_.invt, $_.i, 48); //#5090
            } //#5090
        } //#5090
        $_.mirrormap = $_.invt; //#5093
    } //#5093
    $_.sbs = $s(33); //#5096
    $puti($_.sbs, 0, $get($_.encs, 10)); //#5099
    for (var _2i = 1; _2i <= 6; _2i += 1) { //#5121
        $_.i = _2i; //#5102
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#5104
        $j--; //#5105
        $_.indx = $k[--$j].length; //#5106
        $j -= 2; //#5107
        $_.enc = $get($_.encs, $_.indx); //#5108
        if ($get($_.mirrormap, $_.i - 1) == 49) { //#5118
            $_.enclen = $_.enc.length; //#5110
            $_.revenc = $s($_.enclen); //#5111
            for (var _2z = 0, _2y = $_.enclen - 1; _2z <= _2y; _2z += 1) { //#5116
                $_.j = _2z; //#5113
                $_.char = $get($_.enc, $_.j); //#5114
                $put($_.revenc, ($_.enclen - $_.j) - 1, $_.char); //#5115
            } //#5115
            $_.enc = $_.revenc; //#5117
        } //#5117
        $puti($_.sbs, (($_.i - 1) * 4) + 3, $_.enc); //#5119
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ((($_.i - 1) * 7) + 11) + $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])); //#5120
    } //#5120
    $put($_.txt, 7, $a([$geti($_.barcode, 7, 1), ((6 * 7) + 18) + $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize - 2])); //#5123
    $puti($_.sbs, 27, $get($_.encs, 11)); //#5126
    $k[$j++] = Infinity; //#5128
    var _3X = $_.sbs; //#5128
    for (var _3Y = 0, _3Z = _3X.length; _3Y < _3Z; _3Y++) { //#5128
        $k[$j++] = $get(_3X, _3Y) - 48; //#5128
    } //#5128
    $_.sbs = $a(); //#5128
    if ($_.includetext) { //#5135
        $k[$j++] = Infinity; //#5130
        $k[$j++] = $_.height; //#5130
        $k[$j++] = $_.height; //#5130
        for (var _3f = 0, _3g = 12; _3f < _3g; _3f++) { //#5130
            $k[$j++] = $f($_.height - 0.075); //#5130
        } //#5130
        $k[$j++] = $_.height; //#5130
        $k[$j++] = $_.height; //#5130
        $k[$j++] = $_.height; //#5130
        $_.bhs = $a(); //#5130
        $k[$j++] = Infinity; //#5131
        $k[$j++] = 0; //#5131
        $k[$j++] = 0; //#5131
        for (var _3m = 0, _3n = 12; _3m < _3n; _3m++) { //#5131
            $k[$j++] = 0.075; //#5131
        } //#5131
        $k[$j++] = 0; //#5131
        $k[$j++] = 0; //#5131
        $k[$j++] = 0; //#5131
        $_.bbs = $a(); //#5131
    } else { //#5135
        $k[$j++] = Infinity; //#5133
        for (var _3p = 0, _3q = 17; _3p < _3q; _3p++) { //#5133
            $k[$j++] = $_.height; //#5133
        } //#5133
        $_.bhs = $a(); //#5133
        $k[$j++] = Infinity; //#5134
        for (var _3t = 0, _3u = 17; _3t < _3u; _3t++) { //#5134
            $k[$j++] = 0; //#5134
        } //#5134
        $_.bbs = $a(); //#5134
        $_.txt = $a([]); //#5135
    } //#5135
    $_.guardrightypos = 0; //#5137
    if ($ne($_.addon, "")) { //#5158
        $k[$j++] = Infinity; //#5148
        $k[$j++] = 'dontdraw'; //#5145
        $k[$j++] = true; //#5145
        $k[$j++] = 'includetext'; //#5145
        $k[$j++] = true; //#5145
        $k[$j++] = 'height'; //#5145
        $k[$j++] = $f($_.height - 0.15); //#5145
        $k[$j++] = 'textxoffset'; //#5145
        if ($ne($_.addontextxoffset, null)) { //#5145
            $k[$j++] = $_.addontextxoffset; //#5145
        } else { //#5145
            $k[$j++] = 51 + $_.addongap; //#5145
        } //#5145
        if ($ne($_.addontextyoffset, null)) { //#5146
            $k[$j++] = 'textyoffset'; //#5146
            $k[$j++] = $_.addontextyoffset; //#5146
        } //#5146
        $k[$j++] = 'textsize'; //#5147
        if ($ne($_.addontextsize, null)) { //#5147
            $k[$j++] = $_.addontextsize; //#5147
        } else { //#5147
            $k[$j++] = $_.textsize; //#5147
        } //#5147
        var _48 = $ne($_.addontextfont, "unset") ? $_.addontextfont : $_.textfont; //#5148
        $k[$j++] = 'textfont'; //#5148
        $k[$j++] = _48; //#5148
        $_.addopts = $d(); //#5149
        if ($_.addon.length == 2) { //#5150
            $k[$j++] = $_.addon; //#5150
            $k[$j++] = $_.addopts; //#5150
            bwipp_ean2(); //#5150
        } //#5150
        if ($_.addon.length == 5) { //#5151
            $k[$j++] = $_.addon; //#5151
            $k[$j++] = $_.addopts; //#5151
            bwipp_ean5(); //#5151
        } //#5151
        $_.addcode = $k[--$j]; //#5152
        $k[$j++] = Infinity; //#5153
        $aload($_.sbs); //#5153
        $k[$j++] = $_.addongap; //#5153
        $aload($get($_.addcode, "sbs")); //#5153
        $_.sbs = $a(); //#5153
        $k[$j++] = Infinity; //#5154
        $aload($_.bhs); //#5154
        $forall($get($_.addcode, "bhs"), function() { //#5154
            var _4P = $k[--$j]; //#5154
            $k[$j++] = $f(_4P - 0.075); //#5154
        }); //#5154
        $_.bhs = $a(); //#5154
        $k[$j++] = Infinity; //#5155
        $aload($_.bbs); //#5155
        $forall($get($_.addcode, "bbs"), function() { //#5155
            var _4U = $k[--$j]; //#5155
            $k[$j++] = $f(_4U + 0.075); //#5155
        }); //#5155
        $_.bbs = $a(); //#5155
        $k[$j++] = Infinity; //#5156
        $aload($_.txt); //#5156
        $aload($get($_.addcode, "txt")); //#5156
        $_.txt = $a(); //#5156
        $_.guardrightypos = ($_.height * 72) - 6; //#5157
    } //#5157
    var _4h = new Map([
        ["ren", bwipp_renlinear],
        ["sbs", $_.sbs],
        ["bhs", $_.bhs],
        ["bbs", $_.bbs],
        ["txt", $_.txt],
        ["opt", $_.options],
        ["guardrightpos", 10],
        ["guardrightypos", $_.guardrightypos],
        ["borderbottom", 5]
    ]); //#5170
    $k[$j++] = _4h; //#5173
    if (!$_.dontdraw) { //#5173
        bwipp_renlinear(); //#5173
    } //#5173
    $_ = Object.getPrototypeOf($_); //#5175
    $_ = Object.getPrototypeOf($_); //#5177
}

function bwipp_isbn() {
    $_ = Object.create($_); //#5206
    $_.dontdraw = false; //#5209
    $_.includetext = false; //#5210
    $_.isbntextfont = 'OCR-A'; //#5211
    $_.isbntextsize = 8; //#5212
    $_.isbntextxoffset = null; //#5213
    $_.isbntextyoffset = null; //#5214
    $_.height = 1; //#5215
    $_.addongap = 12; //#5216
    $_.legacy = false; //#5217
    $k[$j++] = $_; //#5219
    bwipp_processoptions(); //#5219
    $_.options = $k[--$j]; //#5219
    $_.barcode = $k[--$j]; //#5220
    $search($_.barcode, " "); //#5223
    if ($k[--$j]) { //#5229
        $_.barcode = $k[--$j]; //#5224
        $j--; //#5225
        $_.addon = $k[--$j]; //#5226
    } else { //#5229
        $j--; //#5228
        $_.addon = ""; //#5229
    } //#5229
    if ((($_.barcode.length != 15) && ($_.barcode.length != 17)) && (($_.barcode.length != 11) && ($_.barcode.length != 13))) { //#5236
        $k[$j++] = 'bwipp.isbnBadLength#5235'; //#5235
        $k[$j++] = "ISBN-13 must be 15 or 17 characters including dashes. ISBN-10 must be 11 or 13 characters including dashes"; //#5235
        bwipp_raiseerror(); //#5235
    } //#5235
    if ((($_.addon.length != 0) && ($_.addon.length != 2)) && ($_.addon.length != 5)) { //#5239
        $k[$j++] = 'bwipp.isbnBadAddOnLength#5238'; //#5238
        $k[$j++] = "Add-on for ISBN must be 2 or 5 digits"; //#5238
        bwipp_raiseerror(); //#5238
    } //#5238
    if ($_.barcode.length >= 15) { //#5303
        var _F = $geti($_.barcode, 0, 4); //#5241
        if ($ne(_F, "978-") && $ne(_F, "979-")) { //#5243
            $k[$j++] = 'bwipp.isbn13badPrefix#5242'; //#5242
            $k[$j++] = "ISBN-13 prefix must be 978- or 979-"; //#5242
            bwipp_raiseerror(); //#5242
        } //#5242
        $_.wasdash = false; //#5244
        $_.numdash = 0; //#5244
        $_.numdigit = 0; //#5244
        var _H = $geti($_.barcode, 5, 9); //#5245
        for (var _I = 0, _J = _H.length; _I < _J; _I++) { //#5258
            var _K = $get(_H, _I); //#5258
            $k[$j++] = _K; //#5253
            if (_K == 45) { //#5253
                if ($_.wasdash) { //#5250
                    $k[$j++] = 'bwipp.isbn13adjacentDashes#5249'; //#5249
                    $k[$j++] = "ISBN-13 does not permit adjacent dashes"; //#5249
                    bwipp_raiseerror(); //#5249
                } //#5249
                $_.wasdash = true; //#5251
                $_.numdash = $_.numdash + 1; //#5252
            } //#5252
            var _N = $k[--$j]; //#5254
            if ((_N >= 48) && (_N <= 57)) { //#5257
                $_.wasdash = false; //#5255
                $_.numdigit = $_.numdigit + 1; //#5256
            } //#5256
        } //#5256
        if (($_.numdash != 2) || ($_.numdigit != 7)) { //#5261
            $k[$j++] = 'bwipp.isbn13numDashesDigits#5260'; //#5260
            $k[$j++] = "Incorrect number of dashes and digits for ISBN-13"; //#5260
            bwipp_raiseerror(); //#5260
        } //#5260
        var _S = $get($_.barcode, 14); //#5262
        if ((_S < 48) || (_S > 57)) { //#5264
            $k[$j++] = 'bwipp.isbn13character15#5263'; //#5263
            $k[$j++] = "ISBN-13 character 15 must be a digit"; //#5263
            bwipp_raiseerror(); //#5263
        } //#5263
        if ($_.barcode.length == 17) { //#5272
            if ($ne($geti($_.barcode, 15, 1), "-")) { //#5268
                $k[$j++] = 'bwipp.isbn13character16#5267'; //#5267
                $k[$j++] = "ISBN-13 penultimate character must be a dash"; //#5267
                bwipp_raiseerror(); //#5267
            } //#5267
            var _X = $get($_.barcode, 16); //#5269
            if ((_X < 48) || (_X > 57)) { //#5271
                $k[$j++] = 'bwipp.isbn13character17#5270'; //#5270
                $k[$j++] = "ISBN-13 final character must be a digit"; //#5270
                bwipp_raiseerror(); //#5270
            } //#5270
        } //#5270
    } else { //#5303
        var _Z = $get($_.barcode, 0); //#5274
        if ((_Z < 48) || (_Z > 57)) { //#5276
            $k[$j++] = 'bwipp.isbn10FirstDigit#5275'; //#5275
            $k[$j++] = "ISBN-10 first character must be a digit"; //#5275
            bwipp_raiseerror(); //#5275
        } //#5275
        $_.wasdash = false; //#5277
        $_.numdash = 0; //#5277
        $_.numdigit = 0; //#5277
        var _b = $geti($_.barcode, 1, 9); //#5278
        for (var _c = 0, _d = _b.length; _c < _d; _c++) { //#5291
            var _e = $get(_b, _c); //#5291
            $k[$j++] = _e; //#5286
            if (_e == 45) { //#5286
                if ($_.wasdash) { //#5283
                    $k[$j++] = 'bwipp.isbn10adjacentDashes#5282'; //#5282
                    $k[$j++] = "ISBN-10 does not permit adjacent dashes"; //#5282
                    bwipp_raiseerror(); //#5282
                } //#5282
                $_.wasdash = true; //#5284
                $_.numdash = $_.numdash + 1; //#5285
            } //#5285
            var _h = $k[--$j]; //#5287
            if ((_h >= 48) && (_h <= 57)) { //#5290
                $_.wasdash = false; //#5288
                $_.numdigit = $_.numdigit + 1; //#5289
            } //#5289
        } //#5289
        if (($_.numdash != 2) || ($_.numdigit != 7)) { //#5294
            $k[$j++] = 'bwipp.isbn10numDashesDigits#5293'; //#5293
            $k[$j++] = "Incorrect number of dashes and digits for ISBN-10"; //#5293
            bwipp_raiseerror(); //#5293
        } //#5293
        var _m = $get($_.barcode, 10); //#5295
        if ((_m < 48) || (_m > 57)) { //#5297
            $k[$j++] = 'bwipp.isbn10character11#5296'; //#5296
            $k[$j++] = "ISBN-10 character 11 must be a digit"; //#5296
            bwipp_raiseerror(); //#5296
        } //#5296
        if ($_.barcode.length == 13) { //#5305
            if ($ne($geti($_.barcode, 11, 1), "-")) { //#5301
                $k[$j++] = 'bwipp.isbn10character12#5300'; //#5300
                $k[$j++] = "ISBN-10 penultimate character must be a dash"; //#5300
                bwipp_raiseerror(); //#5300
            } //#5300
            var _r = $get($_.barcode, 12); //#5302
            if (((_r < 48) || (_r > 57)) && (_r != 88)) { //#5304
                $k[$j++] = 'bwipp.isbn10character13#5303'; //#5303
                $k[$j++] = "ISBN-10 final character must be a digit or X"; //#5303
                bwipp_raiseerror(); //#5303
            } //#5303
        } //#5303
    } //#5303
    $_.isbntxt = $_.barcode; //#5308
    if ($_.isbntxt.length <= 13) { //#5334
        $_.isbn = $s(10); //#5312
        $_.checksum = 0; //#5313
        $_.i = 0; //#5314
        $_.n = 0; //#5314
        for (;;) { //#5326
            $_.isbnchar = $f($get($_.isbntxt, $_.i) - 48); //#5316
            if ($_.isbnchar != -3) { //#5323
                $put($_.isbn, $_.n, $f($_.isbnchar + 48)); //#5318
                if ($_.n < 9) { //#5321
                    $_.checksum = $f($_.checksum + ((10 - $_.n) * $_.isbnchar)); //#5320
                } //#5320
                $_.n = $_.n + 1; //#5322
            } //#5322
            $_.i = $_.i + 1; //#5324
            if ($_.i == $_.isbntxt.length) { //#5325
                break; //#5325
            } //#5325
        } //#5325
        var _1B = ($f(11 - ($_.checksum % 11))) % 11; //#5327
        $k[$j++] = 'checksum'; //#5327
        $k[$j++] = _1B; //#5327
        if (_1B == 10) { //#5327
            $j--; //#5327
            $k[$j++] = 40; //#5327
        } //#5327
        var _1C = $k[--$j]; //#5327
        $_[$k[--$j]] = $f(_1C + 48); //#5327
        $_.isbn = $geti($_.isbn, 0, 9); //#5328
        if ($_.isbntxt.length == 13) { //#5333
            if ($get($_.isbntxt, 12) != $_.checksum) { //#5332
                $k[$j++] = 'bwipp.isbn10badCheckDigit#5331'; //#5331
                $k[$j++] = "Incorrect ISBN-10 check digit provided"; //#5331
                bwipp_raiseerror(); //#5331
            } //#5331
        } //#5331
    } //#5331
    if ((!$_.legacy) || ($_.isbntxt.length >= 15)) { //#5370
        if ($_.isbntxt.length <= 13) { //#5344
            $_.pad = $s(15); //#5340
            $puti($_.pad, 0, "978-"); //#5341
            $puti($_.pad, 4, $geti($_.isbntxt, 0, 11)); //#5342
            $_.isbntxt = $_.pad; //#5343
        } //#5343
        $_.isbn = $s(13); //#5347
        $_.checksum = 0; //#5348
        $_.i = 0; //#5349
        $_.n = 0; //#5349
        for (;;) { //#5361
            $_.isbnchar = $get($_.isbntxt, $_.i) - 48; //#5351
            if ($_.isbnchar != -3) { //#5358
                $put($_.isbn, $_.n, $_.isbnchar + 48); //#5353
                if ($_.n < 12) { //#5356
                    $k[$j++] = 'checksum'; //#5355
                    $k[$j++] = $_.isbnchar; //#5355
                    if (($_.n % 2) != 0) { //#5355
                        var _1e = $k[--$j]; //#5355
                        $k[$j++] = _1e * 3; //#5355
                    } //#5355
                    var _1g = $k[--$j]; //#5355
                    $_[$k[--$j]] = $f(_1g + $_.checksum); //#5355
                } //#5355
                $_.n = $_.n + 1; //#5357
            } //#5357
            $_.i = $_.i + 1; //#5359
            if ($_.i == $_.isbntxt.length) { //#5360
                break; //#5360
            } //#5360
        } //#5360
        $_.checksum = ((10 - ($_.checksum % 10)) % 10) + 48; //#5362
        $_.isbn = $geti($_.isbn, 0, 12); //#5363
        if ($_.isbntxt.length == 17) { //#5368
            if ($get($_.isbntxt, 16) != $_.checksum) { //#5367
                $k[$j++] = 'bwipp.isbn13badCheckDigit#5366'; //#5366
                $k[$j++] = "Incorrect ISBN-13 check digit provided"; //#5366
                bwipp_raiseerror(); //#5366
            } //#5366
        } //#5366
    } //#5366
    var _1u = ($_.isbn.length == 12) ? 22 : 18; //#5373
    $_.pad = $s(_1u); //#5373
    $puti($_.pad, 0, "ISBN "); //#5374
    $puti($_.pad, 5, $_.isbntxt); //#5375
    $put($_.pad, $_.pad.length - 2, 45); //#5376
    $put($_.pad, $_.pad.length - 1, $_.checksum); //#5377
    $_.isbntxt = $_.pad; //#5378
    $_.barcode = $s(12); //#5381
    if ($_.isbn.length == 9) { //#5386
        $puti($_.barcode, 0, "978"); //#5383
        $puti($_.barcode, 3, $_.isbn); //#5384
    } else { //#5386
        $puti($_.barcode, 0, $_.isbn); //#5386
    } //#5386
    if ($ne($_.addon, "")) { //#5396
        var _2E = $s((12 + $_.addon.length) + 1); //#5391
        $puti(_2E, 0, $_.barcode); //#5392
        $puti(_2E, 12, " "); //#5393
        $puti(_2E, 13, $_.addon); //#5394
        $_.barcode = _2E; //#5395
    } //#5395
    $put($_.options, "dontdraw", true); //#5399
    $put($_.options, "addongap", $_.addongap); //#5400
    $k[$j++] = 'args'; //#5401
    $k[$j++] = $_.barcode; //#5401
    $k[$j++] = $_.options; //#5401
    bwipp_ean13(); //#5401
    var _2M = $k[--$j]; //#5401
    $_[$k[--$j]] = _2M; //#5401
    if ($_.includetext) { //#5420
        if ($eq($_.isbntextxoffset, null)) { //#5407
            $k[$j++] = 'isbntextxoffset'; //#5406
            if ($_.isbn.length == 9) { //#5406
                $k[$j++] = -1; //#5406
            } else { //#5406
                $k[$j++] = -12; //#5406
            } //#5406
            var _2R = $k[--$j]; //#5406
            $_[$k[--$j]] = _2R; //#5406
        } //#5406
        if ($eq($_.isbntextyoffset, null)) { //#5410
            $_.isbntextyoffset = ($_.height * 72) + 3; //#5409
        } //#5409
        var _2W = $get($_.args, "txt") !== undefined; //#5411
        if (_2W) { //#5418
            $_.txt = $get($_.args, "txt"); //#5412
            $_.newtxt = $a($_.txt.length + 1); //#5413
            $puti($_.newtxt, 0, $_.txt); //#5414
            $put($_.newtxt, $_.newtxt.length - 1, $a([$_.isbntxt, $_.isbntextxoffset, $_.isbntextyoffset, $_.isbntextfont, $_.isbntextsize])); //#5415
            $put($_.args, "txt", $_.newtxt); //#5416
        } else { //#5418
            $put($_.args, "txt", $a([$a([$_.isbntxt, $_.isbntextxoffset, $_.isbntextyoffset, $_.isbntextfont, $_.isbntextsize])])); //#5418
        } //#5418
    } //#5418
    $put($_.args, "opt", $_.options); //#5422
    $k[$j++] = $_.args; //#5425
    if (!$_.dontdraw) { //#5425
        bwipp_renlinear(); //#5425
    } //#5425
    $_ = Object.getPrototypeOf($_); //#5427
}

function bwipp_ismn() {
    $_ = Object.create($_); //#5456
    $_.dontdraw = false; //#5459
    $_.includetext = false; //#5460
    $_.ismntextfont = 'OCR-A'; //#5461
    $_.ismntextsize = 8; //#5462
    $_.ismntextxoffset = null; //#5463
    $_.ismntextyoffset = null; //#5464
    $_.height = 1; //#5465
    $_.addongap = 12; //#5466
    $_.legacy = false; //#5467
    $k[$j++] = $_; //#5469
    bwipp_processoptions(); //#5469
    $_.options = $k[--$j]; //#5469
    $_.barcode = $k[--$j]; //#5470
    $search($_.barcode, " "); //#5473
    if ($k[--$j]) { //#5479
        $_.barcode = $k[--$j]; //#5474
        $j--; //#5475
        $_.addon = $k[--$j]; //#5476
    } else { //#5479
        $j--; //#5478
        $_.addon = ""; //#5479
    } //#5479
    if ((($_.barcode.length != 15) && ($_.barcode.length != 17)) && (($_.barcode.length != 11) && ($_.barcode.length != 13))) { //#5486
        $k[$j++] = 'bwipp.ismnBadLength#5485'; //#5485
        $k[$j++] = "ISMN-13 must be 15 or 17 characters including dashes. ISMN-10 must be 11 or 13 characters including dashes"; //#5485
        bwipp_raiseerror(); //#5485
    } //#5485
    if ((($_.addon.length != 0) && ($_.addon.length != 2)) && ($_.addon.length != 5)) { //#5489
        $k[$j++] = 'bwipp.ismnBadAddOnLength#5488'; //#5488
        $k[$j++] = "Add-on for ISMN must be 2 or 5 digits"; //#5488
        bwipp_raiseerror(); //#5488
    } //#5488
    if ($_.barcode.length >= 15) { //#5556
        if ($ne($geti($_.barcode, 0, 4), "979-")) { //#5493
            $k[$j++] = 'bwipp.ismn13badPrefix#5492'; //#5492
            $k[$j++] = "ISMN-13 prefix must be 979-"; //#5492
            bwipp_raiseerror(); //#5492
        } //#5492
        $_.wasdash = false; //#5494
        $_.numdash = 0; //#5494
        $_.numdigit = 0; //#5494
        var _H = $geti($_.barcode, 5, 9); //#5495
        for (var _I = 0, _J = _H.length; _I < _J; _I++) { //#5508
            var _K = $get(_H, _I); //#5508
            $k[$j++] = _K; //#5503
            if (_K == 45) { //#5503
                if ($_.wasdash) { //#5500
                    $k[$j++] = 'bwipp.ismn13adjacentDashes#5499'; //#5499
                    $k[$j++] = "ISMN-13 does not permit adjacent dashes"; //#5499
                    bwipp_raiseerror(); //#5499
                } //#5499
                $_.wasdash = true; //#5501
                $_.numdash = $_.numdash + 1; //#5502
            } //#5502
            var _N = $k[--$j]; //#5504
            if ((_N >= 48) && (_N <= 57)) { //#5507
                $_.wasdash = false; //#5505
                $_.numdigit = $_.numdigit + 1; //#5506
            } //#5506
        } //#5506
        if (($_.numdash != 2) || ($_.numdigit != 7)) { //#5511
            $k[$j++] = 'bwipp.ismn13numDashesDigits#5510'; //#5510
            $k[$j++] = "Incorrect number of dashes and digits for ISMN-13"; //#5510
            bwipp_raiseerror(); //#5510
        } //#5510
        var _S = $get($_.barcode, 14); //#5512
        if ((_S < 48) || (_S > 57)) { //#5514
            $k[$j++] = 'bwipp.ismn13character15#5513'; //#5513
            $k[$j++] = "ISMN-13 character 15 must be a digit"; //#5513
            bwipp_raiseerror(); //#5513
        } //#5513
        if ($_.barcode.length == 17) { //#5522
            if ($ne($geti($_.barcode, 15, 1), "-")) { //#5518
                $k[$j++] = 'bwipp.ismn13character16#5517'; //#5517
                $k[$j++] = "ISMN-13 penultimate character must be a dash"; //#5517
                bwipp_raiseerror(); //#5517
            } //#5517
            var _X = $get($_.barcode, 16); //#5519
            if ((_X < 48) || (_X > 57)) { //#5521
                $k[$j++] = 'bwipp.ismn13character17#5520'; //#5520
                $k[$j++] = "ISMN-13 final character must be a digit"; //#5520
                bwipp_raiseerror(); //#5520
            } //#5520
        } //#5520
    } else { //#5556
        if ($ne($geti($_.barcode, 0, 2), "M-")) { //#5526
            $k[$j++] = 'bwipp.ismn10badPrefix#5525'; //#5525
            $k[$j++] = "ISMN-10 prefix must be M-"; //#5525
            bwipp_raiseerror(); //#5525
        } //#5525
        var _b = $get($_.barcode, 2); //#5527
        if ((_b < 48) || (_b > 57)) { //#5529
            $k[$j++] = 'bwipp.ismn10character3#5528'; //#5528
            $k[$j++] = "ISMN-10 character 3 must be a digit"; //#5528
            bwipp_raiseerror(); //#5528
        } //#5528
        $_.wasdash = false; //#5530
        $_.numdash = 0; //#5530
        $_.numdigit = 0; //#5530
        var _d = $geti($_.barcode, 3, 7); //#5531
        for (var _e = 0, _f = _d.length; _e < _f; _e++) { //#5544
            var _g = $get(_d, _e); //#5544
            $k[$j++] = _g; //#5539
            if (_g == 45) { //#5539
                if ($_.wasdash) { //#5536
                    $k[$j++] = 'bwipp.ismn10adjacentDashes#5535'; //#5535
                    $k[$j++] = "ISMN-10 does not permit adjacent dashes"; //#5535
                    bwipp_raiseerror(); //#5535
                } //#5535
                $_.wasdash = true; //#5537
                $_.numdash = $_.numdash + 1; //#5538
            } //#5538
            var _j = $k[--$j]; //#5540
            if ((_j >= 48) && (_j <= 57)) { //#5543
                $_.wasdash = false; //#5541
                $_.numdigit = $_.numdigit + 1; //#5542
            } //#5542
        } //#5542
        if (($_.numdash != 1) || ($_.numdigit != 6)) { //#5547
            $k[$j++] = 'bwipp.ismn10numDashesDigits#5546'; //#5546
            $k[$j++] = "Incorrect number of dashes and digits for ISMN-10"; //#5546
            bwipp_raiseerror(); //#5546
        } //#5546
        var _o = $get($_.barcode, 10); //#5548
        if ((_o < 48) || (_o > 57)) { //#5550
            $k[$j++] = 'bwipp.ismn10character11#5549'; //#5549
            $k[$j++] = "ISMN-10 character 11 must be a digit"; //#5549
            bwipp_raiseerror(); //#5549
        } //#5549
        if ($_.barcode.length == 13) { //#5558
            var _r = $geti($_.barcode, 11, 1); //#5552
            if ($ne(_r, "-")) { //#5554
                $k[$j++] = 'bwipp.ismn10character12#5553'; //#5553
                $k[$j++] = "ISMN-10 penultimate character must be a dash"; //#5553
                bwipp_raiseerror(); //#5553
            } //#5553
            var _t = $get($_.barcode, 12); //#5555
            if (((_t < 48) || (_t > 57)) && (_t != 88)) { //#5557
                $k[$j++] = 'bwipp.ismn10character13#5556'; //#5556
                $k[$j++] = "ISMN-10 final character must be a digit or X"; //#5556
                bwipp_raiseerror(); //#5556
            } //#5556
        } //#5556
    } //#5556
    $_.ismntxt = $_.barcode; //#5561
    $_.legacytxt = ""; //#5564
    if ($_.ismntxt.length <= 13) { //#5571
        $_.legacytxt = $_.ismntxt; //#5566
        $_.pad = $s($_.ismntxt.length + 4); //#5567
        $puti($_.pad, 0, "979-0-"); //#5568
        $puti($_.pad, 6, $geti($_.ismntxt, 2, $_.ismntxt.length - 2)); //#5569
        $_.ismntxt = $_.pad; //#5570
    } //#5570
    $_.ismn = $s(13); //#5574
    $_.checksum = 0; //#5575
    $_.i = 0; //#5576
    $_.n = 0; //#5576
    for (;;) { //#5592
        $_.ismnchar = $get($_.ismntxt, $_.i) - 48; //#5578
        if ($_.ismnchar != -3) { //#5589
            $put($_.ismn, $_.n, $_.ismnchar + 48); //#5580
            if ($_.n < 12) { //#5587
                if (($_.n % 2) == 0) { //#5585
                    $_.checksum = $_.ismnchar + $_.checksum; //#5583
                } else { //#5585
                    $_.checksum = ($_.ismnchar * 3) + $_.checksum; //#5585
                } //#5585
            } //#5585
            $_.n = $_.n + 1; //#5588
        } //#5588
        $_.i = $_.i + 1; //#5590
        if ($_.i == $_.ismntxt.length) { //#5591
            break; //#5591
        } //#5591
    } //#5591
    $_.checksum = ((10 - ($_.checksum % 10)) % 10) + 48; //#5593
    if (($_.barcode.length == 13) || ($_.barcode.length == 17)) { //#5600
        var _1Q = $_.barcode; //#5597
        if ($get(_1Q, _1Q.length - 1) != $_.checksum) { //#5599
            $k[$j++] = 'bwipp.ismnBadCheckDigit#5598'; //#5598
            $k[$j++] = "Incorrect ISMN check digit provided"; //#5598
            bwipp_raiseerror(); //#5598
        } //#5598
    } //#5598
    if ($_.legacy && $ne($_.legacytxt, "")) { //#5607
        $_.ismntxt = $_.legacytxt; //#5604
        $_.pad = $s(18); //#5605
    } else { //#5607
        $_.pad = $s(22); //#5607
    } //#5607
    $puti($_.pad, 0, "ISMN "); //#5609
    $puti($_.pad, 5, $_.ismntxt); //#5610
    $put($_.pad, $_.pad.length - 2, 45); //#5611
    $put($_.pad, $_.pad.length - 1, $_.checksum); //#5612
    $_.ismntxt = $_.pad; //#5613
    $_.barcode = $geti($_.ismn, 0, 12); //#5616
    if ($ne($_.addon, "")) { //#5625
        var _1l = $s((12 + $_.addon.length) + 1); //#5620
        $puti(_1l, 0, $_.barcode); //#5621
        $puti(_1l, 12, " "); //#5622
        $puti(_1l, 13, $_.addon); //#5623
        $_.barcode = _1l; //#5624
    } //#5624
    $put($_.options, "dontdraw", true); //#5628
    $put($_.options, "addongap", $_.addongap); //#5629
    $k[$j++] = 'args'; //#5630
    $k[$j++] = $_.barcode; //#5630
    $k[$j++] = $_.options; //#5630
    bwipp_ean13(); //#5630
    var _1t = $k[--$j]; //#5630
    $_[$k[--$j]] = _1t; //#5630
    if ($_.includetext) { //#5649
        if ($eq($_.ismntextxoffset, null)) { //#5636
            $k[$j++] = 'ismntextxoffset'; //#5635
            if ($_.ismntxt.length == 18) { //#5635
                $k[$j++] = -1; //#5635
            } else { //#5635
                $k[$j++] = -12; //#5635
            } //#5635
            var _1y = $k[--$j]; //#5635
            $_[$k[--$j]] = _1y; //#5635
        } //#5635
        if ($eq($_.ismntextyoffset, null)) { //#5639
            $_.ismntextyoffset = ($_.height * 72) + 3; //#5638
        } //#5638
        var _23 = $get($_.args, "txt") !== undefined; //#5640
        if (_23) { //#5647
            $_.txt = $get($_.args, "txt"); //#5641
            $_.newtxt = $a($_.txt.length + 1); //#5642
            $puti($_.newtxt, 0, $_.txt); //#5643
            $put($_.newtxt, $_.newtxt.length - 1, $a([$_.ismntxt, $_.ismntextxoffset, $_.ismntextyoffset, $_.ismntextfont, $_.ismntextsize])); //#5644
            $put($_.args, "txt", $_.newtxt); //#5645
        } else { //#5647
            $put($_.args, "txt", $a([$a([$_.ismntxt, $_.ismntextxoffset, $_.ismntextyoffset, $_.ismntextfont, $_.ismntextsize])])); //#5647
        } //#5647
    } //#5647
    $put($_.args, "opt", $_.options); //#5651
    $k[$j++] = $_.args; //#5654
    if (!$_.dontdraw) { //#5654
        bwipp_renlinear(); //#5654
    } //#5654
    $_ = Object.getPrototypeOf($_); //#5656
}

function bwipp_issn() {
    $_ = Object.create($_); //#5685
    $_.dontdraw = false; //#5688
    $_.includetext = false; //#5689
    $_.issntextfont = 'OCR-A'; //#5690
    $_.issntextsize = 8; //#5691
    $_.issntextxoffset = null; //#5692
    $_.issntextyoffset = null; //#5693
    $_.height = 1; //#5694
    $_.addongap = 12; //#5695
    $k[$j++] = $_; //#5697
    bwipp_processoptions(); //#5697
    $_.options = $k[--$j]; //#5697
    $_.issntxt = $k[--$j]; //#5698
    $search($_.issntxt, " "); //#5701
    if ($k[--$j]) { //#5707
        $_.issntxt = $k[--$j]; //#5702
        $j--; //#5703
        $_.seqvar = $k[--$j]; //#5704
    } else { //#5707
        $j--; //#5706
        $_.seqvar = "00"; //#5707
    } //#5707
    $search($_.seqvar, " "); //#5711
    if ($k[--$j]) { //#5717
        $_.seqvar = $k[--$j]; //#5712
        $j--; //#5713
        $_.addon = $k[--$j]; //#5714
    } else { //#5717
        $j--; //#5716
        $_.addon = ""; //#5717
    } //#5717
    if (($_.issntxt.length != 8) && ($_.issntxt.length != 9)) { //#5723
        $k[$j++] = 'bwipp.issnBadLength#5722'; //#5722
        $k[$j++] = "ISSN must be 8 or 9 characters including dash, in the format XXXX-XXXX"; //#5722
        bwipp_raiseerror(); //#5722
    } //#5722
    var _D = $geti($_.issntxt, 0, 4); //#5724
    for (var _E = 0, _F = _D.length; _E < _F; _E++) { //#5728
        var _G = $get(_D, _E); //#5728
        if ((_G < 48) || (_G > 57)) { //#5727
            $k[$j++] = 'bwipp.issnFirstThroughFourthNotNumeric#5726'; //#5726
            $k[$j++] = "ISSN first four characters must be numeral characters"; //#5726
            bwipp_raiseerror(); //#5726
        } //#5726
    } //#5726
    if ($ne($geti($_.issntxt, 4, 1), "-")) { //#5731
        $k[$j++] = 'bwipp.issnNeedsDash#5730'; //#5730
        $k[$j++] = "ISSN fifth character must be a dash"; //#5730
        bwipp_raiseerror(); //#5730
    } //#5730
    var _K = $geti($_.issntxt, 5, 3); //#5732
    for (var _L = 0, _M = _K.length; _L < _M; _L++) { //#5736
        var _N = $get(_K, _L); //#5736
        if ((_N < 48) || (_N > 57)) { //#5735
            $k[$j++] = 'bwipp.issnSixthThroughEighthNotNumeric#5734'; //#5734
            $k[$j++] = "ISSN sixth through eighth characters must be numerals"; //#5734
            bwipp_raiseerror(); //#5734
        } //#5734
    } //#5734
    if ($_.issntxt.length == 9) { //#5741
        var _Q = $get($_.issntxt, 8); //#5738
        if (((_Q < 48) || (_Q > 57)) && (_Q != 88)) { //#5740
            $k[$j++] = 'bwipp.issnNinthCharacterBadFormat#5739'; //#5739
            $k[$j++] = "ISSN ninth character must be a number or the character X"; //#5739
            bwipp_raiseerror(); //#5739
        } //#5739
    } //#5739
    if ($_.seqvar.length != 2) { //#5744
        $k[$j++] = 'bwipp.issnBadSequenceVariantLength#5743'; //#5743
        $k[$j++] = "Sequence variant for ISSN must be 2 digits"; //#5743
        bwipp_raiseerror(); //#5743
    } //#5743
    $forall($_.seqvar, function() { //#5749
        var _T = $k[--$j]; //#5746
        if ((_T < 48) || (_T > 57)) { //#5748
            $k[$j++] = 'bwipp.issnSequenceVariantBadCharacter#5747'; //#5747
            $k[$j++] = "Sequence variant for ISSN must contain only digits"; //#5747
            bwipp_raiseerror(); //#5747
        } //#5747
    }); //#5747
    if ((($_.addon.length != 0) && ($_.addon.length != 2)) && ($_.addon.length != 5)) { //#5752
        $k[$j++] = 'bwipp.issnBadAddOnLength#5751'; //#5751
        $k[$j++] = "Add-on for ISSN must be 2 or 5 digits"; //#5751
        bwipp_raiseerror(); //#5751
    } //#5751
    $_.issn = $s(8); //#5755
    $_.checksum = 0; //#5756
    $_.i = 0; //#5757
    $_.n = 0; //#5757
    for (;;) { //#5769
        $_.issnchar = $f($get($_.issntxt, $_.i) - 48); //#5759
        if ($_.issnchar != -3) { //#5766
            $put($_.issn, $_.n, $f($_.issnchar + 48)); //#5761
            if ($_.n < 7) { //#5764
                $_.checksum = $f($_.checksum + ($_.issnchar * (8 - $_.n))); //#5763
            } //#5763
            $_.n = $_.n + 1; //#5765
        } //#5765
        $_.i = $_.i + 1; //#5767
        if ($_.i == $_.issntxt.length) { //#5768
            break; //#5768
        } //#5768
    } //#5768
    $_.checksum = ($f(11 - ($_.checksum % 11))) % 11; //#5770
    var _p = $f($_.checksum + 48); //#5771
    $k[$j++] = 'checksum'; //#5771
    $k[$j++] = _p; //#5771
    if (_p == 58) { //#5771
        $j--; //#5771
        $k[$j++] = 88; //#5771
    } //#5771
    var _q = $k[--$j]; //#5771
    var _r = $k[--$j]; //#5771
    $_[_r] = _q; //#5771
    if ($_.issntxt.length == 9) { //#5776
        if ($get($_.issntxt, 8) != $_.checksum) { //#5775
            $k[$j++] = 'bwipp.issnBadCheckDigit#5774'; //#5774
            $k[$j++] = "Incorrect ISSN check digit provided"; //#5774
            bwipp_raiseerror(); //#5774
        } //#5774
    } //#5774
    $_.pad = $s(14); //#5779
    $puti($_.pad, 0, "ISSN "); //#5780
    $puti($_.pad, 5, $_.issntxt); //#5781
    $put($_.pad, 13, $_.checksum); //#5782
    $_.issntxt = $_.pad; //#5783
    $_.barcode = $geti($_.issn, 0, 7); //#5786
    $_.barcode = $s(12); //#5789
    $puti($_.barcode, 0, "977"); //#5790
    $puti($_.barcode, 3, $_.issn); //#5791
    $puti($_.barcode, 10, $_.seqvar); //#5792
    if ($ne($_.addon, "")) { //#5801
        var _1D = $s((12 + $_.addon.length) + 1); //#5796
        $puti(_1D, 0, $_.barcode); //#5797
        $puti(_1D, 12, " "); //#5798
        $puti(_1D, 13, $_.addon); //#5799
        $_.barcode = _1D; //#5800
    } //#5800
    $put($_.options, "dontdraw", true); //#5804
    $put($_.options, "addongap", $_.addongap); //#5805
    $k[$j++] = 'args'; //#5806
    $k[$j++] = $_.barcode; //#5806
    $k[$j++] = $_.options; //#5806
    bwipp_ean13(); //#5806
    var _1L = $k[--$j]; //#5806
    $_[$k[--$j]] = _1L; //#5806
    if ($_.includetext) { //#5821
        if ($eq($_.issntextxoffset, null)) { //#5810
            $_.issntextxoffset = 10; //#5810
        } //#5810
        if ($eq($_.issntextyoffset, null)) { //#5811
            $_.issntextyoffset = ($_.height * 72) + 3; //#5811
        } //#5811
        var _1S = $get($_.args, "txt") !== undefined; //#5812
        if (_1S) { //#5819
            $_.txt = $get($_.args, "txt"); //#5813
            $_.newtxt = $a($_.txt.length + 1); //#5814
            $puti($_.newtxt, 0, $_.txt); //#5815
            $put($_.newtxt, $_.newtxt.length - 1, $a([$_.issntxt, $_.issntextxoffset, $_.issntextyoffset, $_.issntextfont, $_.issntextsize])); //#5816
            $put($_.args, "txt", $_.newtxt); //#5817
        } else { //#5819
            $put($_.args, "txt", $a([$a([$_.issntxt, $_.issntextxoffset, $_.issntextyoffset, $_.issntextfont, $_.issntextsize])])); //#5819
        } //#5819
    } //#5819
    $put($_.args, "opt", $_.options); //#5823
    $k[$j++] = $_.args; //#5826
    if (!$_.dontdraw) { //#5826
        bwipp_renlinear(); //#5826
    } //#5826
    $_ = Object.getPrototypeOf($_); //#5828
}

function bwipp_mands() {
    $_ = Object.create($_); //#5857
    $_.dontdraw = false; //#5860
    $_.includetext = false; //#5861
    $k[$j++] = $_; //#5863
    bwipp_processoptions(); //#5863
    $_.options = $k[--$j]; //#5863
    $_.barcode = $k[--$j]; //#5864
    $_.barlen = $_.barcode.length; //#5866
    if (($_.barlen != 7) && ($_.barlen != 8)) { //#5871
        $k[$j++] = 'bwipp.MandSbadLength#5870'; //#5870
        $k[$j++] = "M&S barcode must be 7 or 8 characters"; //#5870
        bwipp_raiseerror(); //#5870
    } //#5870
    if ($_.barlen == 7) { //#5875
        var _7 = $strcpy($s(8), "00000000"); //#5874
        $puti(_7, 1, $_.barcode); //#5874
        $_.barcode = _7; //#5874
    } //#5874
    $put($_.options, "dontdraw", true); //#5878
    $k[$j++] = 'args'; //#5879
    $k[$j++] = $_.barcode; //#5879
    $k[$j++] = $_.options; //#5879
    bwipp_ean8(); //#5879
    var _C = $k[--$j]; //#5879
    $_[$k[--$j]] = _C; //#5879
    var _F = $get($_.args, "bbs"); //#5882
    $put(_F, 10, $get(_F, 2)); //#5883
    $put(_F, 11, $get(_F, 2)); //#5884
    var _J = $get($_.args, "bhs"); //#5885
    $put(_J, 10, $get(_J, 2)); //#5886
    $put(_J, 11, $get(_J, 2)); //#5887
    $_.txt = $get($_.args, "txt"); //#5890
    if ($_.barlen == 7) { //#5898
        for (var _P = 0; _P <= 6; _P += 1) { //#5896
            var _Q = $_.txt; //#5893
            $puti($get($get(_Q, _P), 0), 0, $get($get(_Q, _P + 1), 0)); //#5895
        } //#5895
        $puti($get($get($_.txt, 7), 0), 0, " "); //#5897
    } //#5897
    var _Y = $a(10); //#5901
    $puti(_Y, 0, $_.txt); //#5901
    $_.txt = _Y; //#5901
    var _b = $get($_.txt, 0); //#5902
    $put($_.txt, 8, $arrcpy($a(_b.length), _b)); //#5902
    var _g = $get($_.txt, 0); //#5903
    $put($_.txt, 9, $arrcpy($a(_g.length), _g)); //#5903
    $put($get($_.txt, 8), 0, "M"); //#5904
    $put($get($_.txt, 8), 1, -12); //#5904
    $put($get($_.txt, 9), 0, "S"); //#5905
    var _r = $get($_.txt, 9); //#5905
    $put(_r, 1, 69); //#5905
    $put($_.args, "txt", $_.txt); //#5907
    $put($_.args, "opt", $_.options); //#5908
    $k[$j++] = $_.args; //#5911
    if (!$_.dontdraw) { //#5911
        bwipp_renlinear(); //#5911
    } //#5911
    $_ = Object.getPrototypeOf($_); //#5913
}

function bwipp_code128() {
    $_ = Object.create($_); //#5944
    $_.dontdraw = false; //#5947
    $_.includetext = false; //#5948
    $_.textfont = "OCR-B"; //#5949
    $_.textsize = 10; //#5950
    $_.textxoffset = 0; //#5951
    $_.textyoffset = -8; //#5952
    $_.height = 1; //#5953
    $_.encoding = "auto"; //#5954
    $_.raw = false; //#5955
    $_.parse = false; //#5956
    $_.parsefnc = false; //#5957
    $k[$j++] = $_; //#5959
    bwipp_processoptions(); //#5959
    $_.options = $k[--$j]; //#5959
    $_.barcode = $k[--$j]; //#5960
    bwipp_loadctx(bwipp_code128) //#5962
    if (!bwipp_code128.__5971__) { //#5971
        $_ = Object.create($_); //#5971
        $_.sta = -1; //#5966
        $_.stb = -2; //#5966
        $_.stc = -3; //#5966
        $_.swa = -4; //#5967
        $_.swb = -5; //#5967
        $_.swc = -6; //#5967
        $_.fn1 = -7; //#5968
        $_.fn2 = -8; //#5968
        $_.fn3 = -9; //#5968
        $_.fn4 = -10; //#5969
        $_.sft = -11; //#5969
        $_.stp = -12; //#5969
        $_.lka = -13; //#5970
        $_.lkc = -14; //#5970
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code128.$ctx[id] = $_[id]); //#5970
        bwipp_code128.__5971__ = 1; //#5970
        $_ = Object.getPrototypeOf($_); //#5970
    } //#5970
    var _6 = $_.fn1; //#5978
    var _B = new Map([
        ["parse", $_.parse],
        ["parsefnc", $_.parsefnc],
        ["FNC1", $_.fn1],
        ["FNC1", _6],
        ["FNC2", $_.fn2],
        ["FNC3", $_.fn3],
        ["LNKA", $_.lka],
        ["LNKC", $_.lkc]
    ]); //#5983
    $_.fncvals = _B; //#5984
    $k[$j++] = 'msg'; //#5985
    $k[$j++] = $_.barcode; //#5985
    $k[$j++] = $_.fncvals; //#5985
    bwipp_parseinput(); //#5985
    var _E = $k[--$j]; //#5985
    $_[$k[--$j]] = _E; //#5985
    $_.msglen = $_.msg.length; //#5986
    if (!bwipp_code128.__6044__) { //#6044
        $_ = Object.create($_); //#6044
        $_.charmaps = $a([$a([32, 32, "00"]), $a(["!", "!", "01"]), $a(["\"", "\"", "02"]), $a(["#", "#", "03"]), $a(["$", "$", "04"]), $a(["%", "%", "05"]), $a(["&", "&", "06"]), $a(["'", "'", "07"]), $a([40, 40, "08"]), $a([41, 41, "09"]), $a(["*", "*", "10"]), $a(["+", "+", "11"]), $a([",", ",", "12"]), $a(["-", "-", "13"]), $a([".", ".", "14"]), $a(["/", "/", "15"]), $a(["0", "0", "16"]), $a(["1", "1", "17"]), $a(["2", "2", "18"]), $a(["3", "3", "19"]), $a(["4", "4", "20"]), $a(["5", "5", "21"]), $a(["6", "6", "22"]), $a(["7", "7", "23"]), $a(["8", "8", "24"]), $a(["9", "9", "25"]), $a([":", ":", "26"]), $a([";", ";", "27"]), $a(["<", "<", "28"]), $a(["=", "=", "29"]), $a([">", ">", "30"]), $a(["?", "?", "31"]), $a(["@", "@", "32"]), $a(["A", "A", "33"]), $a(["B", "B", "34"]), $a(["C", "C", "35"]), $a(["D", "D", "36"]), $a(["E", "E", "37"]), $a(["F", "F", "38"]), $a(["G", "G", "39"]), $a(["H", "H", "40"]), $a(["I", "I", "41"]), $a(["J", "J", "42"]), $a(["K", "K", "43"]), $a(["L", "L", "44"]), $a(["M", "M", "45"]), $a(["N", "N", "46"]), $a(["O", "O", "47"]), $a(["P", "P", "48"]), $a(["Q", "Q", "49"]), $a(["R", "R", "50"]), $a(["S", "S", "51"]), $a(["T", "T", "52"]), $a(["U", "U", "53"]), $a(["V", "V", "54"]), $a(["W", "W", "55"]), $a(["X", "X", "56"]), $a(["Y", "Y", "57"]), $a(["Z", "Z", "58"]), $a(["[", "[", "59"]), $a([92, 92, "60"]), $a(["]", "]", "61"]), $a(["^", "^", "62"]), $a(["_", "_", "63"]), $a([0, "`", "64"]), $a([1, "a", "65"]), $a([2, "b", "66"]), $a([3, "c", "67"]), $a([4, "d", "68"]), $a([5, "e", "69"]), $a([6, "f", "70"]), $a([7, "g", "71"]), $a([8, "h", "72"]), $a([9, "i", "73"]), $a([10, "j", "74"]), $a([11, "k", "75"]), $a([12, "l", "76"]), $a([13, "m", "77"]), $a([14, "n", "78"]), $a([15, "o", "79"]), $a([16, "p", "80"]), $a([17, "q", "81"]), $a([18, "r", "82"]), $a([19, "s", "83"]), $a([20, "t", "84"]), $a([21, "u", "85"]), $a([22, "v", "86"]), $a([23, "w", "87"]), $a([24, "x", "88"]), $a([25, "y", "89"]), $a([26, "z", "90"]), $a([27, "{", "91"]), $a([28, "|", "92"]), $a([29, "}", "93"]), $a([30, "~", "94"]), $a([31, 127, "95"]), $a([$_.fn3, $_.fn3, "96"]), $a([$_.fn2, $_.fn2, "97"]), $a([$_.sft, $_.sft, "98"]), $a([$_.swc, $_.swc, "99"]), $a([$_.swb, $_.fn4, $_.swb]), $a([$_.fn4, $_.swa, $_.swa]), $a([$_.fn1, $_.fn1, $_.fn1]), $a([$_.sta, $_.sta, $_.sta]), $a([$_.stb, $_.stb, $_.stb]), $a([$_.stc, $_.stc, $_.stc]), $a([$_.stp, $_.stp, $_.stp])]); //#6028
        $_.charvals = $a([new Map, new Map, new Map]); //#6031
        for (var _2X = 0, _2W = $_.charmaps.length - 1; _2X <= _2W; _2X += 1) { //#6040
            $_.i = _2X; //#6033
            $_.encs = $get($_.charmaps, $_.i); //#6034
            for (var _2b = 0; _2b <= 2; _2b += 1) { //#6039
                $_.j = _2b; //#6036
                var _2e = $get($_.encs, $_.j); //#6037
                $k[$j++] = _2e; //#6037
                if ($eq($type(_2e), 'stringtype')) { //#6037
                    var _2h = $get($k[--$j], 0); //#6037
                    $k[$j++] = _2h; //#6037
                } //#6037
                $put($get($_.charvals, $_.j), $k[--$j], $_.i); //#6038
            } //#6038
        } //#6038
        $_.seta = $get($_.charvals, 0); //#6041
        $_.setb = $get($_.charvals, 1); //#6042
        $_.setc = $get($_.charvals, 2); //#6043
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code128.$ctx[id] = $_[id]); //#6043
        bwipp_code128.__6044__ = 1; //#6043
        $_ = Object.getPrototypeOf($_); //#6043
    } //#6043
    $put($_.seta, $_.lka, $get($_.seta, $_.swb)); //#6047
    $put($_.seta, $_.lkc, $get($_.seta, $_.swc)); //#6047
    $put($_.setb, $_.lka, $get($_.setb, $_.swc)); //#6048
    $put($_.setb, $_.lkc, $get($_.setb, $_.swa)); //#6048
    $put($_.setc, $_.lka, $get($_.setc, $_.swa)); //#6049
    $put($_.setc, $_.lkc, $get($_.setc, $_.swb)); //#6049
    if ($_.raw) { //#6051
        $_.encoding = "raw"; //#6051
    } //#6051
    if ($eq($_.encoding, "raw")) { //#6065
        $_.cws = $a($_.barcode.length); //#6054
        $_.i = 0; //#6055
        $_.j = 0; //#6055
        for (;;) { //#6062
            if ($_.i == $_.barcode.length) { //#6057
                break; //#6057
            } //#6057
            $_.cw = $cvi($geti($_.barcode, $_.i + 1, 3)); //#6058
            $put($_.cws, $_.j, $_.cw); //#6059
            $_.i = $_.i + 4; //#6060
            $_.j = $_.j + 1; //#6061
        } //#6061
        $_.cws = $geti($_.cws, 0, $_.j); //#6063
        $_.text = ""; //#6064
    } //#6064
    if ($eq($_.encoding, "auto")) { //#6290
        $_.text = $s($_.msglen); //#6069
        for (var _3k = 0, _3j = $_.msglen - 1; _3k <= _3j; _3k += 1) { //#6073
            $_.i = _3k; //#6071
            var _3p = $get($_.msg, $_.i); //#6072
            $k[$j++] = $_.text; //#6072
            $k[$j++] = $_.i; //#6072
            $k[$j++] = _3p; //#6072
            if (_3p < 0) { //#6072
                $j--; //#6072
                $k[$j++] = 32; //#6072
            } //#6072
            var _3q = $k[--$j]; //#6072
            var _3r = $k[--$j]; //#6072
            $put($k[--$j], _3r, _3q); //#6072
        } //#6072
        $k[$j++] = Infinity; //#6076
        for (var _3u = 0, _3v = $_.msglen; _3u < _3v; _3u++) { //#6076
            $k[$j++] = 0; //#6076
        } //#6076
        $k[$j++] = 0; //#6076
        $_.numSA = $a(); //#6076
        $k[$j++] = Infinity; //#6077
        for (var _3y = 0, _3z = $_.msglen; _3y < _3z; _3y++) { //#6077
            $k[$j++] = 0; //#6077
        } //#6077
        $k[$j++] = 0; //#6077
        $_.numEA = $a(); //#6077
        for (var _42 = $_.msglen - 1; _42 >= 0; _42 -= 1) { //#6087
            $_.i = _42; //#6079
            if ($get($_.msg, $_.i) >= 0) { //#6086
                if ($get($_.msg, $_.i) >= 128) { //#6084
                    $put($_.numEA, $_.i, $f($get($_.numEA, $_.i + 1) + 1)); //#6082
                } else { //#6084
                    $put($_.numSA, $_.i, $f($get($_.numSA, $_.i + 1) + 1)); //#6084
                } //#6084
            } //#6084
        } //#6084
        $_.ea = false; //#6090
        $_.msgtmp = $a([]); //#6090
        for (var _4M = 0, _4L = $_.msglen - 1; _4M <= _4L; _4M += 1) { //#6105
            $_.i = _4M; //#6092
            $_.c = $get($_.msg, $_.i); //#6093
            if ((!$xo($_.ea, $_.c < 128)) && ($_.c >= 0)) { //#6103
                if ($_.ea) { //#6095
                    $k[$j++] = $_.numSA; //#6095
                } else { //#6095
                    $k[$j++] = $_.numEA; //#6095
                } //#6095
                var _4Y = $get($k[--$j], $_.i); //#6095
                var _4b = ($f(_4Y + $_.i) == $_.msglen) ? 3 : 5; //#6096
                if (_4Y < _4b) { //#6101
                    $k[$j++] = Infinity; //#6098
                    $aload($_.msgtmp); //#6098
                    $k[$j++] = $_.fn4; //#6098
                    $_.msgtmp = $a(); //#6098
                } else { //#6101
                    $k[$j++] = Infinity; //#6100
                    $aload($_.msgtmp); //#6100
                    $k[$j++] = $_.fn4; //#6100
                    $k[$j++] = $_.fn4; //#6100
                    $_.msgtmp = $a(); //#6100
                    $_.ea = !$_.ea; //#6101
                } //#6101
            } //#6101
            $k[$j++] = Infinity; //#6104
            $aload($_.msgtmp); //#6104
            if ($_.c >= 0) { //#6104
                $k[$j++] = $_.c & 127; //#6104
            } else { //#6104
                $k[$j++] = $_.c; //#6104
            } //#6104
            $_.msgtmp = $a(); //#6104
        } //#6104
        $_.msg = $_.msgtmp; //#6106
        $_.msglen = $_.msg.length; //#6107
        $_.numsscr = function() {
            $_.n = 0; //#6111
            $_.s = 0; //#6111
            $_.p = $k[--$j]; //#6112
            for (;;) { //#6125
                if ($_.p >= $_.msglen) { //#6113
                    break; //#6113
                } //#6113
                var _4w = $get($_.msg, $_.p); //#6114
                var _4y = $get($_.setc, _4w) !== undefined; //#6115
                $k[$j++] = _4w; //#6115
                if (!_4y) { //#6115
                    $j--; //#6115
                    break; //#6115
                } //#6115
                var _4z = $k[--$j]; //#6116
                $k[$j++] = _4z; //#6121
                if (_4z <= -1) { //#6120
                    var _51 = $k[--$j]; //#6118
                    if ((_51 == $_.fn1) && (($_.s % 2) == 0)) { //#6118
                        $_.s = $_.s + 1; //#6118
                    } else { //#6118
                        break; //#6118
                    } //#6118
                } else { //#6120
                    $j--; //#6120
                } //#6120
                $_.n = $_.n + 1; //#6122
                $_.s = $_.s + 1; //#6123
                $_.p = $f($_.p + 1); //#6124
            } //#6124
            $k[$j++] = $_.n; //#6126
            $k[$j++] = $_.s; //#6126
        }; //#6126
        $_.enca = function() {
            $put($_.cws, $_.j, $get($_.seta, $k[--$j])); //#6131
            $_.j = $_.j + 1; //#6132
        }; //#6132
        $_.encb = function() {
            $put($_.cws, $_.j, $get($_.setb, $k[--$j])); //#6135
            $_.j = $_.j + 1; //#6136
        }; //#6136
        $_.encc = function() {
            var _5L = $k[--$j]; //#6139
            $k[$j++] = _5L; //#6143
            if ($ne($type(_5L), 'arraytype')) { //#6142
                var _5P = $get($_.setc, $k[--$j]); //#6140
                $k[$j++] = _5P; //#6140
            } else { //#6142
                $aload($k[--$j]); //#6142
                var _5R = $k[--$j]; //#6142
                var _5S = $k[--$j]; //#6142
                $k[$j++] = $f($f(_5R - 48) + ($f(_5S - 48) * 10)); //#6142
            } //#6142
            $put($_.cws, $_.j, $k[--$j]); //#6144
            $_.j = $_.j + 1; //#6145
        }; //#6145
        $_.anotb = function() {
            var _5X = $k[--$j]; //#6149
            var _5Z = $get($_.seta, _5X) !== undefined; //#6149
            var _5b = $get($_.setb, _5X) !== undefined; //#6149
            $k[$j++] = _5Z && (!_5b); //#6149
        }; //#6149
        $_.bnota = function() {
            var _5c = $k[--$j]; //#6150
            var _5e = $get($_.setb, _5c) !== undefined; //#6150
            var _5g = $get($_.seta, _5c) !== undefined; //#6150
            $k[$j++] = _5e && (!_5g); //#6150
        }; //#6150
        $k[$j++] = Infinity; //#6153
        for (var _5i = 0, _5j = $_.msg.length; _5i < _5j; _5i++) { //#6153
            $k[$j++] = 0; //#6153
        } //#6153
        $k[$j++] = 9999; //#6153
        $_.nextanotb = $a(); //#6153
        $k[$j++] = Infinity; //#6154
        for (var _5m = 0, _5n = $_.msg.length; _5m < _5n; _5m++) { //#6154
            $k[$j++] = 0; //#6154
        } //#6154
        $k[$j++] = 9999; //#6154
        $_.nextbnota = $a(); //#6154
        for (var _5q = $_.msg.length - 1; _5q >= 0; _5q -= 1) { //#6167
            $_.i = _5q; //#6156
            $k[$j++] = $get($_.msg, $_.i); //#6157
            $_.anotb(); //#6157
            if ($k[--$j]) { //#6160
                $put($_.nextanotb, $_.i, 0); //#6158
            } else { //#6160
                $put($_.nextanotb, $_.i, $f($get($_.nextanotb, $_.i + 1) + 1)); //#6160
            } //#6160
            $k[$j++] = $get($_.msg, $_.i); //#6162
            $_.bnota(); //#6162
            if ($k[--$j]) { //#6165
                $put($_.nextbnota, $_.i, 0); //#6163
            } else { //#6165
                $put($_.nextbnota, $_.i, $f($get($_.nextbnota, $_.i + 1) + 1)); //#6165
            } //#6165
        } //#6165
        $_.abeforeb = function() {
            var _6D = $k[--$j]; //#6170
            $k[$j++] = $lt($get($_.nextanotb, _6D), $get($_.nextbnota, _6D)); //#6170
        }; //#6170
        $_.bbeforea = function() {
            var _6I = $k[--$j]; //#6171
            $k[$j++] = $lt($get($_.nextbnota, _6I), $get($_.nextanotb, _6I)); //#6171
        }; //#6171
        $_.cws = $a(($_.barcode.length * 2) + 3); //#6173
        $_.j = 0; //#6176
        if ($_.msglen > 0) { //#6177
            $k[$j++] = 0; //#6177
            $_.numsscr(); //#6177
        } else { //#6177
            $k[$j++] = -1; //#6177
            $k[$j++] = -1; //#6177
        } //#6177
        $_.nums = $k[--$j]; //#6177
        $_.nchars = $k[--$j]; //#6177
        for (;;) { //#6202
            if ($_.msglen == 0) { //#6183
                $k[$j++] = $_.stb; //#6180
                $_.enca(); //#6180
                $_.cset = "setb"; //#6181
                break; //#6182
            } //#6182
            if (($_.msglen == 2) && ($_.nums == 2)) { //#6188
                $k[$j++] = $_.stc; //#6185
                $_.enca(); //#6185
                $_.cset = "setc"; //#6186
                break; //#6187
            } //#6187
            if ($_.nums >= 4) { //#6193
                $k[$j++] = $_.stc; //#6190
                $_.enca(); //#6190
                $_.cset = "setc"; //#6191
                break; //#6192
            } //#6192
            $k[$j++] = 0; //#6194
            $_.abeforeb(); //#6194
            if ($k[--$j]) { //#6198
                $k[$j++] = $_.sta; //#6195
                $_.enca(); //#6195
                $_.cset = "seta"; //#6196
                break; //#6197
            } //#6197
            $k[$j++] = $_.stb; //#6199
            $_.enca(); //#6199
            $_.cset = "setb"; //#6200
            break; //#6201
        } //#6201
        $_.i = 0; //#6205
        for (;;) { //#6288
            if ($_.i == $_.msglen) { //#6206
                break; //#6206
            } //#6206
            $k[$j++] = $_.i; //#6208
            $_.numsscr(); //#6208
            $_.nums = $k[--$j]; //#6208
            $_.nchars = $k[--$j]; //#6208
            for (;;) { //#6286
                if ((($eq($_.cset, "seta") || $eq($_.cset, "setb")) && ($_.nums >= 4)) && ($get($_.msg, $_.i) != $_.fn1)) { //#6225
                    if (($_.nums % 2) == 0) { //#6223
                        $k[$j++] = $_.swc; //#6215
                        if ($eq($_.cset, "seta")) { //#6215
                            $_.enca(); //#6215
                        } else { //#6215
                            $_.encb(); //#6215
                        } //#6215
                        $_.cset = "setc"; //#6216
                        break; //#6217
                    } else { //#6223
                        $k[$j++] = $get($_.msg, $_.i); //#6219
                        if ($eq($_.cset, "seta")) { //#6219
                            $_.enca(); //#6219
                        } else { //#6219
                            $_.encb(); //#6219
                        } //#6219
                        $_.i = $_.i + 1; //#6220
                        $k[$j++] = $_.swc; //#6221
                        if ($eq($_.cset, "seta")) { //#6221
                            $_.enca(); //#6221
                        } else { //#6221
                            $_.encb(); //#6221
                        } //#6221
                        $_.cset = "setc"; //#6222
                        break; //#6223
                    } //#6223
                } //#6223
                $k[$j++] = $eq($_.cset, "setb"); //#6226
                $k[$j++] = $get($_.msg, $_.i); //#6226
                $_.anotb(); //#6226
                var _72 = $k[--$j]; //#6226
                var _73 = $k[--$j]; //#6226
                if ((_73 && _72)) { //#6238
                    if ($_.i < ($_.msglen - 1)) { //#6234
                        $k[$j++] = $_.i + 1; //#6228
                        $_.bbeforea(); //#6228
                        if ($k[--$j]) { //#6233
                            $k[$j++] = $_.sft; //#6229
                            $_.encb(); //#6229
                            $k[$j++] = $get($_.msg, $_.i); //#6230
                            $_.enca(); //#6230
                            $_.i = $_.i + 1; //#6231
                            break; //#6232
                        } //#6232
                    } //#6232
                    $k[$j++] = $_.swa; //#6235
                    $_.encb(); //#6235
                    $_.cset = "seta"; //#6236
                    break; //#6237
                } //#6237
                $k[$j++] = $eq($_.cset, "seta"); //#6239
                $k[$j++] = $get($_.msg, $_.i); //#6239
                $_.bnota(); //#6239
                var _7I = $k[--$j]; //#6239
                var _7J = $k[--$j]; //#6239
                if ((_7J && _7I)) { //#6251
                    if ($_.i < ($_.msglen - 1)) { //#6247
                        $k[$j++] = $_.i + 1; //#6241
                        $_.abeforeb(); //#6241
                        if ($k[--$j]) { //#6246
                            $k[$j++] = $_.sft; //#6242
                            $_.enca(); //#6242
                            $k[$j++] = $get($_.msg, $_.i); //#6243
                            $_.encb(); //#6243
                            $_.i = $_.i + 1; //#6244
                            break; //#6245
                        } //#6245
                    } //#6245
                    $k[$j++] = $_.swb; //#6248
                    $_.enca(); //#6248
                    $_.cset = "setb"; //#6249
                    break; //#6250
                } //#6250
                if (($eq($_.cset, "setc") && ($_.nums < 2)) && (($get($_.msg, $_.i) > -1) || ($get($_.msg, $_.i) == $_.fn4))) { //#6261
                    $k[$j++] = $_.i; //#6253
                    $_.abeforeb(); //#6253
                    if ($k[--$j]) { //#6257
                        $k[$j++] = $_.swa; //#6254
                        $_.encc(); //#6254
                        $_.cset = "seta"; //#6255
                        break; //#6256
                    } //#6256
                    $k[$j++] = $_.swb; //#6258
                    $_.encc(); //#6258
                    $_.cset = "setb"; //#6259
                    break; //#6260
                } //#6260
                if ($eq($_.cset, "seta")) { //#6268
                    $k[$j++] = $get($_.msg, $_.i); //#6265
                    $_.enca(); //#6265
                    $_.i = $_.i + 1; //#6266
                    break; //#6267
                } //#6267
                if ($eq($_.cset, "setb")) { //#6273
                    $k[$j++] = $get($_.msg, $_.i); //#6270
                    $_.encb(); //#6270
                    $_.i = $_.i + 1; //#6271
                    break; //#6272
                } //#6272
                if ($eq($_.cset, "setc")) { //#6283
                    if ($get($_.msg, $_.i) <= -1) { //#6280
                        $k[$j++] = $get($_.msg, $_.i); //#6276
                        $_.encc(); //#6276
                        $_.i = $_.i + 1; //#6277
                    } else { //#6280
                        $k[$j++] = $geti($_.msg, $_.i, 2); //#6279
                        $_.encc(); //#6279
                        $_.i = $_.i + 2; //#6280
                    } //#6280
                    break; //#6282
                } //#6282
                break; //#6285
            } //#6285
        } //#6285
        $_.cws = $geti($_.cws, 0, $_.j); //#6289
    } //#6289
    var _87 = $a($_.j + 2); //#6293
    $puti(_87, 0, $_.cws); //#6293
    $_.cws = _87; //#6293
    $_.csum = $get($_.cws, 0); //#6294
    for (var _8D = 1, _8C = $_.j - 1; _8D <= _8C; _8D += 1) { //#6298
        $_.i = _8D; //#6296
        $_.csum = $f($_.csum + ($get($_.cws, $_.i) * $_.i)); //#6297
    } //#6297
    $_.csum = $_.csum % 103; //#6299
    $put($_.cws, $_.j, $_.csum); //#6300
    $put($_.cws, $_.j + 1, $get($_.seta, $_.stp)); //#6301
    var _8T = $get($_.options, 'debugcws') !== undefined; //#6303
    if (_8T) { //#6303
        $k[$j++] = 'bwipp.debugcws#6303'; //#6303
        $k[$j++] = $_.cws; //#6303
        bwipp_raiseerror(); //#6303
    } //#6303
    if (!bwipp_code128.__6325__) { //#6325
        $_ = Object.create($_); //#6325
        $_.encs = $a(["212222", "222122", "222221", "121223", "121322", "131222", "122213", "122312", "132212", "221213", "221312", "231212", "112232", "122132", "122231", "113222", "123122", "123221", "223211", "221132", "221231", "213212", "223112", "312131", "311222", "321122", "321221", "312212", "322112", "322211", "212123", "212321", "232121", "111323", "131123", "131321", "112313", "132113", "132311", "211313", "231113", "231311", "112133", "112331", "132131", "113123", "113321", "133121", "313121", "211331", "231131", "213113", "213311", "213131", "311123", "311321", "331121", "312113", "312311", "332111", "314111", "221411", "431111", "111224", "111422", "121124", "121421", "141122", "141221", "112214", "112412", "122114", "122411", "142112", "142211", "241211", "221114", "413111", "241112", "134111", "111242", "121142", "121241", "114212", "124112", "124211", "411212", "421112", "421211", "212141", "214121", "412121", "111143", "111341", "131141", "114113", "114311", "411113", "411311", "113141", "114131", "311141", "411131", "211412", "211214", "211232", "2331112"]); //#6324
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code128.$ctx[id] = $_[id]); //#6324
        bwipp_code128.__6325__ = 1; //#6324
        $_ = Object.getPrototypeOf($_); //#6324
    } //#6324
    $_.sbs = $s(($_.cws.length * 6) + 1); //#6328
    for (var _8b = 0, _8a = $_.cws.length - 1; _8b <= _8a; _8b += 1) { //#6332
        $_.i = _8b; //#6330
        $puti($_.sbs, $_.i * 6, $get($_.encs, $get($_.cws, $_.i))); //#6331
    } //#6331
    $k[$j++] = Infinity; //#6342
    $k[$j++] = Infinity; //#6337
    var _8j = $_.sbs; //#6337
    for (var _8k = 0, _8l = _8j.length; _8k < _8l; _8k++) { //#6337
        $k[$j++] = $get(_8j, _8k) - 48; //#6337
    } //#6337
    var _8n = $a(); //#6337
    $k[$j++] = Infinity; //#6338
    for (var _8p = 0, _8q = ~~(($_.sbs.length + 1) / 2); _8p < _8q; _8p++) { //#6338
        $k[$j++] = $_.height; //#6338
    } //#6338
    var _8s = $a(); //#6338
    $k[$j++] = Infinity; //#6339
    for (var _8u = 0, _8v = ~~(($_.sbs.length + 1) / 2); _8u < _8v; _8u++) { //#6339
        $k[$j++] = 0; //#6339
    } //#6339
    var _8w = $a(); //#6339
    $k[$j++] = 'ren'; //#6342
    $k[$j++] = bwipp_renlinear; //#6342
    $k[$j++] = 'sbs'; //#6342
    $k[$j++] = _8n; //#6342
    $k[$j++] = 'bhs'; //#6342
    $k[$j++] = _8s; //#6342
    $k[$j++] = 'bbs'; //#6342
    $k[$j++] = _8w; //#6342
    $k[$j++] = 'txt'; //#6342
    $k[$j++] = $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])]); //#6342
    $k[$j++] = 'textxalign'; //#6342
    $k[$j++] = "center"; //#6342
    $k[$j++] = 'opt'; //#6342
    $k[$j++] = $_.options; //#6342
    var _95 = $d(); //#6342
    $k[$j++] = _95; //#6345
    if (!$_.dontdraw) { //#6345
        bwipp_renlinear(); //#6345
    } //#6345
    $_ = Object.getPrototypeOf($_); //#6347
    $_ = Object.getPrototypeOf($_); //#6349
}

function bwipp_gs1_128() {
    $_ = Object.create($_); //#6380
    $_.dontdraw = false; //#6383
    $_.includetext = false; //#6384
    $_.textfont = "OCR-B"; //#6385
    $_.textsize = 10; //#6386
    $_.textxoffset = 0; //#6387
    $_.textyoffset = -8; //#6388
    $_.height = 0.5; //#6389
    $_.linkagea = false; //#6390
    $_.linkagec = false; //#6391
    $_.parse = false; //#6392
    $_.dontlint = false; //#6393
    $_.lintreqs = false; //#6394
    $k[$j++] = $_; //#6396
    bwipp_processoptions(); //#6396
    $_.options = $k[--$j]; //#6396
    $_.barcode = $k[--$j]; //#6397
    if ($_.linkagea && $_.linkagec) { //#6401
        $k[$j++] = 'bwipp.gs1128badLinkage#6400'; //#6400
        $k[$j++] = "linkagea and linkagec cannot be used together"; //#6400
        bwipp_raiseerror(); //#6400
    } //#6400
    $_.text = $_.barcode; //#6403
    $k[$j++] = $_.barcode; //#6405
    $k[$j++] = 'ai'; //#6405
    bwipp_gs1process(); //#6405
    $_.fncs = $k[--$j]; //#6406
    $_.vals = $k[--$j]; //#6407
    $_.ais = $k[--$j]; //#6408
    $_.fnc1 = -1; //#6411
    $_.c128 = $a([$_.fnc1]); //#6412
    for (var _D = 0, _C = $_.ais.length - 1; _D <= _C; _D += 1) { //#6428
        $_.i = _D; //#6414
        $_.ai = $get($_.ais, $_.i); //#6415
        $_.val = $get($_.vals, $_.i); //#6416
        var _N = $a(($_.c128.length + $_.ai.length) + $_.val.length); //#6417
        $puti(_N, 0, $_.c128); //#6418
        $k[$j++] = _N; //#6419
        $k[$j++] = _N; //#6419
        $k[$j++] = $_.c128.length; //#6419
        $k[$j++] = $_.ai; //#6419
        $k[$j++] = Infinity; //#6419
        var _R = $k[--$j]; //#6419
        var _S = $k[--$j]; //#6419
        $k[$j++] = _R; //#6419
        $forall(_S); //#6419
        var _T = $a(); //#6419
        var _U = $k[--$j]; //#6419
        $puti($k[--$j], _U, _T); //#6419
        var _W = $k[--$j]; //#6420
        $k[$j++] = _W; //#6420
        $k[$j++] = _W; //#6420
        $k[$j++] = $_.c128.length + $_.ai.length; //#6420
        $k[$j++] = $_.val; //#6420
        $k[$j++] = Infinity; //#6420
        var _a = $k[--$j]; //#6420
        var _b = $k[--$j]; //#6420
        $k[$j++] = _a; //#6420
        $forall(_b); //#6420
        var _c = $a(); //#6420
        var _d = $k[--$j]; //#6420
        $puti($k[--$j], _d, _c); //#6420
        $_.c128 = $k[--$j]; //#6421
        if (($_.i != ($_.ais.length - 1)) && $get($_.fncs, $_.i)) { //#6427
            var _m = $a($_.c128.length + 1); //#6423
            $puti(_m, 0, $_.c128); //#6424
            $put(_m, $_.c128.length, $_.fnc1); //#6425
            $_.c128 = _m; //#6426
        } //#6426
    } //#6426
    $_.barcode = $s(($_.c128.length + 1) * 5); //#6431
    $_.i = 0; //#6432
    $_.j = 0; //#6432
    for (;;) { //#6442
        if ($_.i == $_.c128.length) { //#6433
            break; //#6433
        } //#6433
        var _w = $get($_.c128, $_.i); //#6434
        $k[$j++] = _w; //#6439
        if (_w == $_.fnc1) { //#6438
            $j--; //#6435
            $puti($_.barcode, $_.j, "^FNC1"); //#6435
            $_.j = $_.j + 4; //#6436
        } else { //#6438
            $put($_.barcode, $_.j, $k[--$j]); //#6438
        } //#6438
        $_.i = $_.i + 1; //#6440
        $_.j = $_.j + 1; //#6441
    } //#6441
    if ($_.linkagea || $_.linkagec) { //#6446
        $k[$j++] = $_.barcode; //#6444
        $k[$j++] = $_.j; //#6444
        if ($_.linkagea) { //#6444
            $k[$j++] = "^LNKA"; //#6444
        } else { //#6444
            $k[$j++] = "^LNKC"; //#6444
        } //#6444
        var _1B = $k[--$j]; //#6444
        var _1C = $k[--$j]; //#6444
        $puti($k[--$j], _1C, _1B); //#6444
        $_.j = $_.j + 5; //#6445
    } //#6445
    $_.barcode = $geti($_.barcode, 0, $_.j); //#6447
    delete $_.options["parse"]; //#6450
    $put($_.options, "height", $_.height); //#6451
    $put($_.options, "dontdraw", true); //#6452
    $put($_.options, "parsefnc", true); //#6453
    $k[$j++] = 'args'; //#6454
    $k[$j++] = $_.barcode; //#6454
    $k[$j++] = $_.options; //#6454
    bwipp_code128(); //#6454
    var _1P = $k[--$j]; //#6454
    $_[$k[--$j]] = _1P; //#6454
    $put($_.args, "txt", $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])])); //#6456
    $put($_.args, "textxalign", "center"); //#6457
    $put($_.args, "opt", $_.options); //#6458
    $k[$j++] = $_.args; //#6461
    if (!$_.dontdraw) { //#6461
        bwipp_renlinear(); //#6461
    } //#6461
    $_ = Object.getPrototypeOf($_); //#6463
}

function bwipp_ean14() {
    $_ = Object.create($_); //#6492
    $_.dontdraw = false; //#6495
    $_.includetext = false; //#6496
    $_.textfont = "OCR-B"; //#6497
    $_.textsize = 10; //#6498
    $_.textxoffset = 0; //#6499
    $_.textyoffset = -8; //#6500
    $_.height = 1; //#6501
    $k[$j++] = $_; //#6503
    bwipp_processoptions(); //#6503
    $_.options = $k[--$j]; //#6503
    $_.barcode = $k[--$j]; //#6504
    $_.text = $_.barcode; //#6507
    var _3 = $_.barcode; //#6508
    $k[$j++] = $s(_3.length); //#6509
    $k[$j++] = 0; //#6509
    $forall(_3, function() { //#6509
        var _5 = $k[--$j]; //#6509
        $k[$j++] = _5; //#6509
        if (_5 != 32) { //#6509
            var _6 = $k[--$j]; //#6509
            var _7 = $k[--$j]; //#6509
            var _8 = $k[--$j]; //#6509
            $put(_8, _7, _6); //#6509
            $k[$j++] = _8; //#6509
            $k[$j++] = $f(_7 + 1); //#6509
        } else { //#6509
            $j--; //#6509
        } //#6509
    }); //#6509
    var _9 = $k[--$j]; //#6510
    $_.barcode = $geti($k[--$j], 0, _9); //#6510
    $_.hasspace = $_.text.length != $_.barcode.length; //#6511
    if ($ne($geti($_.barcode, 0, 4), "(01)")) { //#6516
        $k[$j++] = 'bwipp.ean14badAI#6515'; //#6515
        $k[$j++] = "GS1-14 must begin with (01) application identifier"; //#6515
        bwipp_raiseerror(); //#6515
    } //#6515
    if (($_.barcode.length != 17) && ($_.barcode.length != 18)) { //#6519
        $k[$j++] = 'bwipp.ean14badLength#6518'; //#6518
        $k[$j++] = "GS1-14 must be 13 or 14 digits"; //#6518
        bwipp_raiseerror(); //#6518
    } //#6518
    var _K = $geti($_.barcode, 4, $_.barcode.length - 4); //#6520
    for (var _L = 0, _M = _K.length; _L < _M; _L++) { //#6524
        var _N = $get(_K, _L); //#6524
        if ((_N < 48) || (_N > 57)) { //#6523
            $k[$j++] = 'bwipp.ean14badCharacter#6522'; //#6522
            $k[$j++] = "GS1-14 must contain only digits"; //#6522
            bwipp_raiseerror(); //#6522
        } //#6522
    } //#6522
    $_.checksum = 0; //#6527
    for (var _O = 0; _O <= 12; _O += 1) { //#6531
        $_.i = _O; //#6529
        $k[$j++] = 'checksum'; //#6530
        $k[$j++] = $_.checksum; //#6530
        $k[$j++] = $f($get($_.barcode, $_.i + 4) - 48); //#6530
        if (($_.i % 2) == 0) { //#6530
            var _U = $k[--$j]; //#6530
            $k[$j++] = _U * 3; //#6530
        } //#6530
        var _V = $k[--$j]; //#6530
        var _W = $k[--$j]; //#6530
        $_[$k[--$j]] = $f(_W + _V); //#6530
    } //#6530
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#6532
    if ($_.barcode.length == 18) { //#6546
        if ($get($_.barcode, 17) != ($_.checksum + 48)) { //#6536
            $k[$j++] = 'bwipp.ean14badCheckDigit#6535'; //#6535
            $k[$j++] = "Incorrect GS1-14 check digit provided"; //#6535
            bwipp_raiseerror(); //#6535
        } //#6535
    } else { //#6546
        var _d = $s(18); //#6538
        $puti(_d, 0, $_.barcode); //#6539
        $put(_d, 17, $_.checksum + 48); //#6540
        $_.barcode = _d; //#6541
        var _i = $_.hasspace ? 2 : 1; //#6542
        var _j = $s($_.text.length + _i); //#6542
        $puti(_j, _j.length - 2, " "); //#6543
        $put(_j, _j.length - 1, $_.checksum + 48); //#6544
        $puti(_j, 0, $_.text); //#6545
        $_.text = _j; //#6546
    } //#6546
    $_.gtin = $geti($_.barcode, 4, 14); //#6548
    $_.barcode = $s(21); //#6551
    $puti($_.barcode, 0, "^FNC101"); //#6552
    var _r = $_.gtin; //#6553
    $puti($_.barcode, 7, _r); //#6553
    $put($_.options, "dontdraw", true); //#6556
    $put($_.options, "parsefnc", true); //#6557
    $k[$j++] = 'args'; //#6558
    $k[$j++] = $_.barcode; //#6558
    $k[$j++] = $_.options; //#6558
    bwipp_code128(); //#6558
    var _w = $k[--$j]; //#6558
    $_[$k[--$j]] = _w; //#6558
    $put($_.args, "txt", $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])])); //#6560
    $put($_.args, "textxalign", "center"); //#6561
    $put($_.args, "opt", $_.options); //#6562
    $k[$j++] = $_.args; //#6565
    if (!$_.dontdraw) { //#6565
        bwipp_renlinear(); //#6565
    } //#6565
    $_ = Object.getPrototypeOf($_); //#6567
}

function bwipp_sscc18() {
    $_ = Object.create($_); //#6596
    $_.dontdraw = false; //#6599
    $_.includetext = false; //#6600
    $_.textfont = "OCR-B"; //#6601
    $_.textsize = 10; //#6602
    $_.textxoffset = 0; //#6603
    $_.textyoffset = -8; //#6604
    $_.height = 1; //#6605
    $k[$j++] = $_; //#6607
    bwipp_processoptions(); //#6607
    $_.options = $k[--$j]; //#6607
    $_.barcode = $k[--$j]; //#6608
    $_.text = $_.barcode; //#6611
    var _3 = $_.barcode; //#6612
    $k[$j++] = $s(_3.length); //#6613
    $k[$j++] = 0; //#6613
    $forall(_3, function() { //#6613
        var _5 = $k[--$j]; //#6613
        $k[$j++] = _5; //#6613
        if (_5 != 32) { //#6613
            var _6 = $k[--$j]; //#6613
            var _7 = $k[--$j]; //#6613
            var _8 = $k[--$j]; //#6613
            $put(_8, _7, _6); //#6613
            $k[$j++] = _8; //#6613
            $k[$j++] = $f(_7 + 1); //#6613
        } else { //#6613
            $j--; //#6613
        } //#6613
    }); //#6613
    var _9 = $k[--$j]; //#6614
    $_.barcode = $geti($k[--$j], 0, _9); //#6614
    $_.hasspace = $_.text.length != $_.barcode.length; //#6615
    if ($ne($geti($_.barcode, 0, 4), "(00)")) { //#6620
        $k[$j++] = 'bwipp.sscc18badAI#6619'; //#6619
        $k[$j++] = "SSCC-18 must begin with (00) application identifier"; //#6619
        bwipp_raiseerror(); //#6619
    } //#6619
    if (($_.barcode.length != 21) && ($_.barcode.length != 22)) { //#6623
        $k[$j++] = 'bwipp.sscc18badLength#6622'; //#6622
        $k[$j++] = "SSCC-18 must be 17 or 18 digits"; //#6622
        bwipp_raiseerror(); //#6622
    } //#6622
    var _K = $geti($_.barcode, 4, $_.barcode.length - 4); //#6624
    for (var _L = 0, _M = _K.length; _L < _M; _L++) { //#6628
        var _N = $get(_K, _L); //#6628
        if ((_N < 48) || (_N > 57)) { //#6627
            $k[$j++] = 'bwipp.sscc18badCharacter#6626'; //#6626
            $k[$j++] = "SSCC-18 must contain only digits"; //#6626
            bwipp_raiseerror(); //#6626
        } //#6626
    } //#6626
    $_.checksum = 0; //#6631
    for (var _O = 0; _O <= 16; _O += 1) { //#6635
        $_.i = _O; //#6633
        $k[$j++] = 'checksum'; //#6634
        $k[$j++] = $_.checksum; //#6634
        $k[$j++] = $f($get($_.barcode, $_.i + 4) - 48); //#6634
        if (($_.i % 2) == 0) { //#6634
            var _U = $k[--$j]; //#6634
            $k[$j++] = _U * 3; //#6634
        } //#6634
        var _V = $k[--$j]; //#6634
        var _W = $k[--$j]; //#6634
        $_[$k[--$j]] = $f(_W + _V); //#6634
    } //#6634
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#6636
    if ($_.barcode.length == 22) { //#6650
        if ($get($_.barcode, 21) != ($_.checksum + 48)) { //#6640
            $k[$j++] = 'bwipp.sscc18badCheckDigit#6639'; //#6639
            $k[$j++] = "Incorrect SSCC-18 check digit provided"; //#6639
            bwipp_raiseerror(); //#6639
        } //#6639
    } else { //#6650
        var _d = $s(22); //#6642
        $puti(_d, 0, $_.barcode); //#6643
        $put(_d, 21, $_.checksum + 48); //#6644
        $_.barcode = _d; //#6645
        var _i = $_.hasspace ? 2 : 1; //#6646
        var _j = $s($_.text.length + _i); //#6646
        $puti(_j, _j.length - 2, " "); //#6647
        $put(_j, _j.length - 1, $_.checksum + 48); //#6648
        $puti(_j, 0, $_.text); //#6649
        $_.text = _j; //#6650
    } //#6650
    $_.sscc = $geti($_.barcode, 4, 18); //#6652
    $_.barcode = $s(25); //#6655
    $puti($_.barcode, 0, "^FNC100"); //#6656
    var _r = $_.sscc; //#6657
    $puti($_.barcode, 7, _r); //#6657
    $put($_.options, "dontdraw", true); //#6660
    $put($_.options, "parsefnc", true); //#6661
    $k[$j++] = 'args'; //#6662
    $k[$j++] = $_.barcode; //#6662
    $k[$j++] = $_.options; //#6662
    bwipp_code128(); //#6662
    var _w = $k[--$j]; //#6662
    $_[$k[--$j]] = _w; //#6662
    $put($_.args, "txt", $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])])); //#6664
    $put($_.args, "textxalign", "center"); //#6665
    $put($_.args, "opt", $_.options); //#6666
    $k[$j++] = $_.args; //#6669
    if (!$_.dontdraw) { //#6669
        bwipp_renlinear(); //#6669
    } //#6669
    $_ = Object.getPrototypeOf($_); //#6671
}

function bwipp_code39() {
    $_ = Object.create($_); //#6701
    $_.dontdraw = false; //#6704
    $_.includecheck = false; //#6705
    $_.validatecheck = false; //#6706
    $_.includetext = false; //#6707
    $_.includecheckintext = false; //#6708
    $_.hidestars = false; //#6709
    $_.textfont = "OCR-B"; //#6710
    $_.textsize = 10; //#6711
    $_.textyoffset = -8; //#6712
    $_.height = 1; //#6713
    $k[$j++] = $_; //#6715
    bwipp_processoptions(); //#6715
    $_.options = $k[--$j]; //#6715
    $_.barcode = $k[--$j]; //#6716
    bwipp_loadctx(bwipp_code39) //#6718
    if (!bwipp_code39.__6738__) { //#6738
        $_ = Object.create($_); //#6738
        $_.encs = $a(["1113313111", "3113111131", "1133111131", "3133111111", "1113311131", "3113311111", "1133311111", "1113113131", "3113113111", "1133113111", "3111131131", "1131131131", "3131131111", "1111331131", "3111331111", "1131331111", "1111133131", "3111133111", "1131133111", "1111333111", "3111111331", "1131111331", "3131111311", "1111311331", "3111311311", "1131311311", "1111113331", "3111113311", "1131113311", "1111313311", "3311111131", "1331111131", "3331111111", "1311311131", "3311311111", "1331311111", "1311113131", "3311113111", "1331113111", "1313131111", "1313111311", "1311131311", "1113131311", "1311313111"]); //#6732
        $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#6735
        $_.charvals = new Map; //#6736
        for (var _3 = 0; _3 <= 42; _3 += 1) { //#6737
            $put($_.charvals, $geti($_.barchars, _3, 1), _3); //#6737
        } //#6737
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code39.$ctx[id] = $_[id]); //#6737
        bwipp_code39.__6738__ = 1; //#6737
        $_ = Object.getPrototypeOf($_); //#6737
    } //#6737
    for (var _A = 0, _9 = $_.barcode.length - 1; _A <= _9; _A += 1) { //#6745
        var _E = $get($_.charvals, $geti($_.barcode, _A, 1)) !== undefined; //#6742
        if (!_E) { //#6744
            $k[$j++] = 'bwipp.code39badCharacter#6743'; //#6743
            $k[$j++] = "Code 39 must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#6743
            bwipp_raiseerror(); //#6743
        } //#6743
    } //#6743
    $k[$j++] = 'barlen'; //#6747
    $k[$j++] = $_.barcode.length; //#6747
    if ($_.validatecheck) { //#6747
        var _H = $k[--$j]; //#6747
        $k[$j++] = $f(_H - 1); //#6747
    } //#6747
    var _I = $k[--$j]; //#6747
    $_[$k[--$j]] = _I; //#6747
    $_.checksum = 0; //#6749
    for (var _M = 0, _L = $f($_.barlen - 1); _M <= _L; _M += 1) { //#6753
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _M, 1)) + $_.checksum); //#6752
    } //#6752
    $_.checksum = $_.checksum % 43; //#6754
    if ($_.validatecheck) { //#6761
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#6758
            $k[$j++] = 'bwipp.code39badCheckDigit#6757'; //#6757
            $k[$j++] = "Incorrect Code 39 check digit provided"; //#6757
            bwipp_raiseerror(); //#6757
        } //#6757
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#6759
        $_.includecheck = true; //#6760
    } //#6760
    var _f = $_.includecheck ? 3 : 2; //#6763
    $_.sbs = $s($f($_.barlen + _f) * 10); //#6763
    var _j = $_.includecheck ? 3 : 2; //#6764
    $_.txt = $a($f($_.barlen + _j)); //#6764
    $puti($_.sbs, 0, $get($_.encs, 43)); //#6767
    if (!$_.hidestars) { //#6771
        $put($_.txt, 0, $a(["*", 0, $_.textyoffset, $_.textfont, $_.textsize])); //#6769
    } else { //#6771
        $put($_.txt, 0, $a(["", 0, $_.textyoffset, $_.textfont, $_.textsize])); //#6771
    } //#6771
    for (var _11 = 0, _10 = $f($_.barlen - 1); _11 <= _10; _11 += 1) { //#6779
        $_.i = _11; //#6775
        $_.indx = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#6776
        $puti($_.sbs, ($_.i * 10) + 10, $get($_.encs, $_.indx)); //#6777
        $put($_.txt, $_.i + 1, $a([$geti($_.barcode, $_.i, 1), ($_.i + 1) * 16, $_.textyoffset, $_.textfont, $_.textsize])); //#6778
    } //#6778
    if ($_.includecheck) { //#6800
        $puti($_.sbs, $f(($_.barlen * 10) + 10), $get($_.encs, $_.checksum)); //#6783
        if ($_.includecheckintext) { //#6787
            $put($_.txt, $f($_.barlen + 1), $a([$geti($_.barchars, $_.checksum, 1), $f($_.barlen + 1) * 16, $_.textyoffset, $_.textfont, $_.textsize])); //#6785
        } else { //#6787
            $put($_.txt, $f($_.barlen + 1), $a(["", $f($_.barlen + 1) * 16, $_.textyoffset, $_.textfont, $_.textsize])); //#6787
        } //#6787
        $puti($_.sbs, $f(($_.barlen * 10) + 20), $get($_.encs, 43)); //#6789
        if (!$_.hidestars) { //#6793
            $put($_.txt, $f($_.barlen + 2), $a(["*", $f($_.barlen + 2) * 16, $_.textyoffset, $_.textfont, $_.textsize])); //#6791
        } else { //#6793
            $put($_.txt, $f($_.barlen + 2), $a(["", $f($_.barlen + 2) * 16, $_.textyoffset, $_.textfont, $_.textsize])); //#6793
        } //#6793
    } else { //#6800
        $puti($_.sbs, $f(($_.barlen * 10) + 10), $get($_.encs, 43)); //#6796
        if (!$_.hidestars) { //#6800
            $put($_.txt, $f($_.barlen + 1), $a(["*", $f($_.barlen + 1) * 16, $_.textyoffset, $_.textfont, $_.textsize])); //#6798
        } else { //#6800
            $put($_.txt, $f($_.barlen + 1), $a(["", $f($_.barlen + 1) * 16, $_.textyoffset, $_.textfont, $_.textsize])); //#6800
        } //#6800
    } //#6800
    $k[$j++] = Infinity; //#6813
    $k[$j++] = Infinity; //#6807
    var _2M = $_.sbs; //#6807
    for (var _2N = 0, _2O = _2M.length; _2N < _2O; _2N++) { //#6807
        $k[$j++] = $get(_2M, _2N) - 48; //#6807
    } //#6807
    var _2Q = $a(); //#6807
    $k[$j++] = Infinity; //#6808
    for (var _2S = 0, _2T = ~~(($_.sbs.length + 1) / 2); _2S < _2T; _2S++) { //#6808
        $k[$j++] = $_.height; //#6808
    } //#6808
    var _2V = $a(); //#6808
    $k[$j++] = Infinity; //#6809
    for (var _2X = 0, _2Y = ~~(($_.sbs.length + 1) / 2); _2X < _2Y; _2X++) { //#6809
        $k[$j++] = 0; //#6809
    } //#6809
    var _2Z = $a(); //#6809
    $k[$j++] = 'ren'; //#6812
    $k[$j++] = bwipp_renlinear; //#6812
    $k[$j++] = 'sbs'; //#6812
    $k[$j++] = _2Q; //#6812
    $k[$j++] = 'bhs'; //#6812
    $k[$j++] = _2V; //#6812
    $k[$j++] = 'bbs'; //#6812
    $k[$j++] = _2Z; //#6812
    if ($_.includetext) { //#6812
        $k[$j++] = 'txt'; //#6811
        $k[$j++] = $_.txt; //#6811
    } //#6811
    $k[$j++] = 'opt'; //#6813
    $k[$j++] = $_.options; //#6813
    var _2d = $d(); //#6813
    $k[$j++] = _2d; //#6816
    if (!$_.dontdraw) { //#6816
        bwipp_renlinear(); //#6816
    } //#6816
    $_ = Object.getPrototypeOf($_); //#6818
    $_ = Object.getPrototypeOf($_); //#6820
}

function bwipp_code39ext() {
    $_ = Object.create($_); //#6852
    $_.dontdraw = false; //#6855
    $_.includetext = false; //#6856
    $_.parse = false; //#6857
    $k[$j++] = $_; //#6859
    bwipp_processoptions(); //#6859
    $_.options = $k[--$j]; //#6859
    $_.barcode = $k[--$j]; //#6860
    bwipp_loadctx(bwipp_code39ext) //#6862
    var _3 = new Map([
        ["parse", $_.parse],
        ["parseonly", true],
        ["parsefnc", false]
    ]); //#6868
    $_.fncvals = _3; //#6869
    $k[$j++] = 'barcode'; //#6870
    $k[$j++] = $_.barcode; //#6870
    $k[$j++] = $_.fncvals; //#6870
    bwipp_parseinput(); //#6870
    var _6 = $k[--$j]; //#6870
    $_[$k[--$j]] = _6; //#6870
    $_.barlen = $_.barcode.length; //#6871
    delete $_.options["parse"]; //#6872
    $forall($_.barcode, function() { //#6879
        if ($k[--$j] >= 128) { //#6878
            $k[$j++] = 'bwipp.code39extBadCharacter#6877'; //#6877
            $k[$j++] = "Code 39 Extended must contain only ASCII characters"; //#6877
            bwipp_raiseerror(); //#6877
        } //#6877
    }); //#6877
    if (!bwipp_code39ext.__6893__) { //#6893
        $_ = Object.create($_); //#6893
        $_.extencs = $a
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code39ext.$ctx[id] = $_[id]); //#6892
        bwipp_code39ext.__6893__ = 1; //#6892
        $_ = Object.getPrototypeOf($_); //#6892
    } //#6892
    $_.newcode = $s($_.barlen * 2); //#6895
    $_.newtext = $s($_.barlen * 2); //#6896
    $_.j = 0; //#6897
    for (var _K = 0, _J = $_.barlen - 1; _K <= _J; _K += 1) { //#6905
        $_.i = _K; //#6899
        $_.extchar = $get($_.extencs, $get($_.barcode, $_.i)); //#6900
        $puti($_.newcode, $_.j, $_.extchar); //#6901
        var _X = $get($_.barcode, $_.i); //#6902
        $k[$j++] = $_.newtext; //#6902
        $k[$j++] = $_.j; //#6902
        $k[$j++] = _X; //#6902
        if ((_X < 32) || (_X == 127)) { //#6902
            $j--; //#6902
            $k[$j++] = 32; //#6902
        } //#6902
        var _Y = $k[--$j]; //#6902
        var _Z = $k[--$j]; //#6902
        $put($k[--$j], _Z, _Y); //#6902
        if ($_.extchar.length != 1) { //#6903
            $put($_.newtext, $_.j + 1, 32); //#6903
        } //#6903
        $_.j = $_.j + $_.extchar.length; //#6904
    } //#6904
    $_.newcode = $geti($_.newcode, 0, $_.j); //#6906
    $_.newtext = $geti($_.newtext, 0, $_.j); //#6907
    $put($_.options, "dontdraw", true); //#6910
    $k[$j++] = 'args'; //#6911
    $k[$j++] = $_.newcode; //#6911
    $k[$j++] = $_.options; //#6911
    bwipp_code39(); //#6911
    var _p = $k[--$j]; //#6911
    $_[$k[--$j]] = _p; //#6911
    if ($_.includetext) { //#6923
        $_.txt = $get($_.args, "txt"); //#6915
        for (var _w = 0, _v = $_.newtext.length - 1; _w <= _v; _w += 1) { //#6921
            $_.i = _w; //#6917
            $_.txtentry = $get($_.txt, $_.i + 1); //#6918
            $put($_.txtentry, 0, $geti($_.newtext, $_.i, 1)); //#6919
            $put($_.txt, $_.i + 1, $_.txtentry); //#6920
        } //#6920
        $put($_.args, "txt", $_.txt); //#6922
    } //#6922
    $put($_.args, "opt", $_.options); //#6924
    $k[$j++] = $_.args; //#6927
    if (!$_.dontdraw) { //#6927
        bwipp_renlinear(); //#6927
    } //#6927
    $_ = Object.getPrototypeOf($_); //#6929
    $_ = Object.getPrototypeOf($_); //#6931
}

function bwipp_code32() {
    $_ = Object.create($_); //#6960
    $_.dontdraw = false; //#6963
    $_.includetext = false; //#6964
    $_.textfont = "OCR-B"; //#6965
    $_.textsize = 10; //#6966
    $_.textyoffset = -8; //#6967
    $_.textxoffset = 0; //#6968
    $_.height = 1; //#6969
    $k[$j++] = $_; //#6971
    bwipp_processoptions(); //#6971
    $_.options = $k[--$j]; //#6971
    $_.barcode = $k[--$j]; //#6972
    if (($_.barcode.length != 8) && ($_.barcode.length != 9)) { //#6977
        $k[$j++] = 'bwipp.code32badLength#6976'; //#6976
        $k[$j++] = "Italian Pharmacode must be 8 or 9 digits"; //#6976
        bwipp_raiseerror(); //#6976
    } //#6976
    $forall($_.barcode, function() { //#6982
        var _5 = $k[--$j]; //#6979
        if ((_5 < 48) || (_5 > 57)) { //#6981
            $k[$j++] = 'bwipp.code32badCharacter#6980'; //#6980
            $k[$j++] = "Italian Pharmacode must contain only digits"; //#6980
            bwipp_raiseerror(); //#6980
        } //#6980
    }); //#6980
    $_.checksum = 0; //#6985
    for (var _6 = 0; _6 <= 7; _6 += 1) { //#6990
        $_.i = _6; //#6987
        $k[$j++] = $f($get($_.barcode, $_.i) - 48); //#6988
        if (($_.i % 2) != 0) { //#6988
            var _B = $k[--$j]; //#6988
            $k[$j++] = _B * 2; //#6988
        } //#6988
        var _C = $k[--$j]; //#6988
        $k[$j++] = _C; //#6988
        if (_C > 9) { //#6988
            var _D = $k[--$j]; //#6988
            $k[$j++] = $f(_D - 9); //#6988
        } //#6988
        $_.checksum = $f($k[--$j] + $_.checksum); //#6989
    } //#6989
    $_.checksum = $_.checksum % 10; //#6991
    if ($_.barcode.length == 9) { //#6996
        if ($get($_.barcode, 8) != $f($_.checksum + 48)) { //#6995
            $k[$j++] = 'bwipp.code32badCheckDigit#6994'; //#6994
            $k[$j++] = "Incorrect Italian Pharmacode check digit provided"; //#6994
            bwipp_raiseerror(); //#6994
        } //#6994
    } //#6994
    var _L = $s(10); //#6997
    $puti(_L, 0, $_.barcode); //#6998
    $put(_L, 8, $f($_.checksum + 48)); //#6999
    $_.text = _L; //#7000
    $_.val = $cvrs($s(6), $cvi($_.text), 32); //#7003
    $_.barcode = $s(6); //#7004
    for (var _S = 0; _S <= 5; _S += 1) { //#7005
        $put($_.barcode, _S, 48); //#7005
    } //#7005
    $puti($_.barcode, 6 - $_.val.length, $_.val); //#7006
    for (var _X = 0; _X <= 5; _X += 1) { //#7013
        var _Z = $get($_.barcode, _X); //#7010
        $k[$j++] = _X; //#7011
        $k[$j++] = _Z; //#7011
        $k[$j++] = _Z; //#7011
        for (var _a = 0, _b = "AEIO".length; _a < _b; _a++) { //#7011
            if ($k[--$j] >= $get("AEIO", _a)) { //#7011
                var _e = $k[--$j]; //#7011
                $k[$j++] = $f(_e + 1); //#7011
            } //#7011
            var _f = $k[--$j]; //#7011
            $k[$j++] = _f; //#7011
            $k[$j++] = _f; //#7011
        } //#7011
        $j--; //#7011
        var _h = $k[--$j]; //#7012
        $put($_.barcode, $k[--$j], _h); //#7012
    } //#7012
    $puti($_.text, 1, $geti($_.text, 0, 9)); //#7016
    $put($_.text, 0, 65); //#7017
    $put($_.options, "dontdraw", true); //#7020
    $k[$j++] = 'args'; //#7021
    $k[$j++] = $_.barcode; //#7021
    $k[$j++] = $_.options; //#7021
    bwipp_code39(); //#7021
    var _q = $k[--$j]; //#7021
    var _r = $k[--$j]; //#7021
    $_[_r] = _q; //#7021
    $put($_.args, "txt", $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])])); //#7023
    $put($_.args, "textxalign", "center"); //#7024
    $put($_.args, "opt", $_.options); //#7025
    $k[$j++] = $_.args; //#7028
    if (!$_.dontdraw) { //#7028
        bwipp_renlinear(); //#7028
    } //#7028
    $_ = Object.getPrototypeOf($_); //#7030
}

function bwipp_pzn() {
    $_ = Object.create($_); //#7059
    $_.dontdraw = false; //#7062
    $_.includetext = false; //#7063
    $_.textfont = "OCR-B"; //#7064
    $_.textsize = 10; //#7065
    $_.textyoffset = -8; //#7066
    $_.textxoffset = 0; //#7067
    $_.height = 1; //#7068
    $_.pzn8 = false; //#7069
    $k[$j++] = $_; //#7071
    bwipp_processoptions(); //#7071
    $_.options = $k[--$j]; //#7071
    $_.barcode = $k[--$j]; //#7072
    if ($_.pzn8) { //#7081
        if (($_.barcode.length != 7) && ($_.barcode.length != 8)) { //#7078
            $k[$j++] = 'bwipp.pzn8badLength#7077'; //#7077
            $k[$j++] = "PZN8 must be 7 or 8 digits"; //#7077
            bwipp_raiseerror(); //#7077
        } //#7077
    } else { //#7081
        if (($_.barcode.length != 6) && ($_.barcode.length != 7)) { //#7082
            $k[$j++] = 'bwipp.pzn7badLength#7081'; //#7081
            $k[$j++] = "PZN7 must be 6 or 7 digits"; //#7081
            bwipp_raiseerror(); //#7081
        } //#7081
    } //#7081
    $forall($_.barcode, function() { //#7088
        var _8 = $k[--$j]; //#7085
        if ((_8 < 48) || (_8 > 57)) { //#7087
            $k[$j++] = 'bwipp.pznBadCharacter#7086'; //#7086
            $k[$j++] = "PZN must contain only digits"; //#7086
            bwipp_raiseerror(); //#7086
        } //#7086
    }); //#7086
    var _A = $_.pzn8 ? 9 : 8; //#7091
    $_.msglen = _A; //#7091
    $_.checksum = 0; //#7092
    for (var _D = 0, _C = $_.msglen - 3; _D <= _C; _D += 1) { //#7097
        $_.i = _D; //#7094
        var _J = $_.pzn8 ? 1 : 2; //#7095
        $_.checksum = $f(($f($get($_.barcode, $_.i) - 48) * ($_.i + _J)) + $_.checksum); //#7096
    } //#7096
    $_.checksum = $_.checksum % 11; //#7098
    if ($_.checksum == 10) { //#7101
        $k[$j++] = 'bwipp.pznBadInputSequence#7100'; //#7100
        $k[$j++] = "Incorrect PZN input sequence provided"; //#7100
        bwipp_raiseerror(); //#7100
    } //#7100
    if ($_.barcode.length == ($_.msglen - 1)) { //#7106
        if ($get($_.barcode, $_.msglen - 2) != $f($_.checksum + 48)) { //#7105
            $k[$j++] = 'bwipp.pznBadCheckDigit#7104'; //#7104
            $k[$j++] = "Incorrect PZN check digit provided"; //#7104
            bwipp_raiseerror(); //#7104
        } //#7104
    } //#7104
    var _U = $s($_.msglen); //#7107
    $put(_U, 0, 45); //#7108
    $puti(_U, 1, $_.barcode); //#7109
    $put(_U, $_.msglen - 1, $f($_.checksum + 48)); //#7110
    $_.msg = _U; //#7111
    $put($_.options, "dontdraw", true); //#7114
    $k[$j++] = 'args'; //#7115
    $k[$j++] = $_.msg; //#7115
    $k[$j++] = $_.options; //#7115
    bwipp_code39(); //#7115
    var _b = $k[--$j]; //#7115
    $_[$k[--$j]] = _b; //#7115
    $_.text = $s($_.msglen + 5); //#7118
    $puti($_.text, 0, "PZN - "); //#7119
    $puti($_.text, 6, $geti($_.msg, 1, $_.msglen - 1)); //#7120
    var _r = $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])]); //#7122
    $put($_.args, "txt", _r); //#7122
    $put($_.args, "textxalign", "center"); //#7123
    $put($_.args, "opt", $_.options); //#7124
    $k[$j++] = $_.args; //#7127
    if (!$_.dontdraw) { //#7127
        bwipp_renlinear(); //#7127
    } //#7127
    $_ = Object.getPrototypeOf($_); //#7129
}

function bwipp_code93() {
    $_ = Object.create($_); //#7160
    $_.dontdraw = false; //#7163
    $_.includecheck = false; //#7164
    $_.includetext = false; //#7165
    $_.textfont = "OCR-B"; //#7166
    $_.textsize = 10; //#7167
    $_.textyoffset = -8; //#7168
    $_.height = 1; //#7169
    $_.parse = false; //#7170
    $_.parsefnc = false; //#7171
    $k[$j++] = $_; //#7173
    bwipp_processoptions(); //#7173
    $_.options = $k[--$j]; //#7173
    $_.barcode = $k[--$j]; //#7174
    bwipp_loadctx(bwipp_code93) //#7176
    if (!bwipp_code93.__7204__) { //#7204
        $_ = Object.create($_); //#7204
        $_.encs = $a(["131112", "111213", "111312", "111411", "121113", "121212", "121311", "111114", "131211", "141111", "211113", "211212", "211311", "221112", "221211", "231111", "112113", "112212", "112311", "122112", "132111", "111123", "111222", "111321", "121122", "131121", "212112", "212211", "211122", "211221", "221121", "222111", "112122", "112221", "122121", "123111", "121131", "311112", "311211", "321111", "112131", "113121", "211131", "121221", "312111", "311121", "122211", "111141", "1111411"]); //#7190
        $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#7193
        $_.charvals = new Map; //#7194
        for (var _3 = 0; _3 <= 42; _3 += 1) { //#7195
            $put($_.charvals, $get($_.barchars, _3), _3); //#7195
        } //#7195
        $_.sft1 = -1; //#7197
        $_.sft2 = -2; //#7197
        $_.sft3 = -3; //#7197
        $_.sft4 = -4; //#7197
        var _7 = $_.charvals; //#7199
        $put(_7, $_.sft1, 43); //#7199
        $put($_.charvals, $_.sft2, 44); //#7200
        $put($_.charvals, $_.sft3, 45); //#7201
        $put($_.charvals, $_.sft4, 46); //#7202
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code93.$ctx[id] = $_[id]); //#7202
        bwipp_code93.__7204__ = 1; //#7202
        $_ = Object.getPrototypeOf($_); //#7202
    } //#7202
    var _M = new Map([
        ["parse", $_.parse],
        ["parsefnc", $_.parsefnc],
        ["SFT$", $_.sft1],
        ["SFT%", $_.sft2],
        ["SFT/", $_.sft3],
        ["SFT+", $_.sft4]
    ]); //#7213
    $_.fncvals = _M; //#7214
    $k[$j++] = 'msg'; //#7215
    $k[$j++] = $_.barcode; //#7215
    $k[$j++] = $_.fncvals; //#7215
    bwipp_parseinput(); //#7215
    var _P = $k[--$j]; //#7215
    $_[$k[--$j]] = _P; //#7215
    $_.msglen = $_.msg.length; //#7216
    $forall($_.msg, function() { //#7223
        var _V = $get($_.charvals, $k[--$j]) !== undefined; //#7220
        if (!_V) { //#7222
            $k[$j++] = 'bwipp.code93BadCharacter#7221'; //#7221
            $k[$j++] = "Code 93 must only contain digits, capital letters, spaces, the symbols -.$/+ and shift non-data characters"; //#7221
            bwipp_raiseerror(); //#7221
        } //#7221
    }); //#7221
    if ($_.includecheck) { //#7228
        $_.sbs = $s(($_.msglen * 6) + 25); //#7226
    } else { //#7228
        $_.sbs = $s(($_.msglen * 6) + 13); //#7228
    } //#7228
    $_.txt = $a($_.msglen); //#7230
    $puti($_.sbs, 0, $get($_.encs, 47)); //#7233
    $_.checksum1 = 0; //#7235
    $_.checksum2 = 0; //#7235
    for (var _i = 0, _h = $_.msglen - 1; _i <= _h; _i += 1) { //#7244
        $_.i = _i; //#7237
        $_.indx = $get($_.charvals, $get($_.msg, $_.i)); //#7238
        $puti($_.sbs, ($_.i * 6) + 6, $get($_.encs, $_.indx)); //#7239
        var _v = $get($_.msg, $_.i); //#7240
        $k[$j++] = 'char'; //#7240
        $k[$j++] = _v; //#7240
        if (_v < 0) { //#7240
            $j--; //#7240
            $k[$j++] = " "; //#7240
        } else { //#7240
            var _w = $s(1); //#7240
            $put(_w, 0, $k[--$j]); //#7240
            $k[$j++] = _w; //#7240
        } //#7240
        var _y = $k[--$j]; //#7240
        $_[$k[--$j]] = _y; //#7240
        $put($_.txt, $_.i, $a([$_.char, ($_.i * 9) + 9, $_.textyoffset, $_.textfont, $_.textsize])); //#7241
        $_.checksum1 = $f($_.checksum1 + ((((($_.msglen - $_.i) - 1) % 20) + 1) * $_.indx)); //#7242
        $_.checksum2 = $f($_.checksum2 + (((($_.msglen - $_.i) % 15) + 1) * $_.indx)); //#7243
    } //#7243
    if ($_.includecheck) { //#7256
        $_.checksum1 = $_.checksum1 % 47; //#7248
        $_.checksum2 = $f($_.checksum2 + $_.checksum1) % 47; //#7249
        $puti($_.sbs, ($_.msglen * 6) + 6, $get($_.encs, $_.checksum1)); //#7250
        $puti($_.sbs, ($_.msglen * 6) + 12, $get($_.encs, $_.checksum2)); //#7251
        $puti($_.sbs, ($_.msglen * 6) + 18, $get($_.encs, 48)); //#7253
    } else { //#7256
        $puti($_.sbs, ($_.msglen * 6) + 6, $get($_.encs, 48)); //#7256
    } //#7256
    $k[$j++] = Infinity; //#7268
    $k[$j++] = Infinity; //#7262
    var _1c = $_.sbs; //#7262
    for (var _1d = 0, _1e = _1c.length; _1d < _1e; _1d++) { //#7262
        $k[$j++] = $get(_1c, _1d) - 48; //#7262
    } //#7262
    var _1g = $a(); //#7262
    $k[$j++] = Infinity; //#7263
    for (var _1i = 0, _1j = ~~(($_.sbs.length + 1) / 2); _1i < _1j; _1i++) { //#7263
        $k[$j++] = $_.height; //#7263
    } //#7263
    var _1l = $a(); //#7263
    $k[$j++] = Infinity; //#7264
    for (var _1n = 0, _1o = ~~(($_.sbs.length + 1) / 2); _1n < _1o; _1n++) { //#7264
        $k[$j++] = 0; //#7264
    } //#7264
    var _1p = $a(); //#7264
    $k[$j++] = 'ren'; //#7267
    $k[$j++] = bwipp_renlinear; //#7267
    $k[$j++] = 'sbs'; //#7267
    $k[$j++] = _1g; //#7267
    $k[$j++] = 'bhs'; //#7267
    $k[$j++] = _1l; //#7267
    $k[$j++] = 'bbs'; //#7267
    $k[$j++] = _1p; //#7267
    if ($_.includetext) { //#7267
        $k[$j++] = 'txt'; //#7266
        $k[$j++] = $_.txt; //#7266
    } //#7266
    $k[$j++] = 'opt'; //#7268
    $k[$j++] = $_.options; //#7268
    var _1t = $d(); //#7268
    $k[$j++] = _1t; //#7271
    if (!$_.dontdraw) { //#7271
        bwipp_renlinear(); //#7271
    } //#7271
    $_ = Object.getPrototypeOf($_); //#7273
    $_ = Object.getPrototypeOf($_); //#7275
}

function bwipp_code93ext() {
    $_ = Object.create($_); //#7307
    $_.dontdraw = false; //#7310
    $_.includetext = false; //#7311
    $_.parse = false; //#7312
    $k[$j++] = $_; //#7314
    bwipp_processoptions(); //#7314
    $_.options = $k[--$j]; //#7314
    $_.barcode = $k[--$j]; //#7315
    bwipp_loadctx(bwipp_code93ext) //#7317
    var _3 = new Map([
        ["parse", $_.parse],
        ["parseonly", true],
        ["parsefnc", false]
    ]); //#7323
    $_.fncvals = _3; //#7324
    $k[$j++] = 'barcode'; //#7325
    $k[$j++] = $_.barcode; //#7325
    $k[$j++] = $_.fncvals; //#7325
    bwipp_parseinput(); //#7325
    var _6 = $k[--$j]; //#7325
    var _7 = $k[--$j]; //#7325
    $_[_7] = _6; //#7325
    $_.barlen = $_.barcode.length; //#7326
    delete $_.options["parse"]; //#7327
    if (!bwipp_code93ext.__7349__) { //#7349
        $_ = Object.create($_); //#7349
        $_.extencs = $a
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code93ext.$ctx[id] = $_[id]); //#7348
        bwipp_code93ext.__7349__ = 1; //#7348
        $_ = Object.getPrototypeOf($_); //#7348
    } //#7348
    $_.newcode = $s($_.barlen * 6); //#7351
    $_.newtext = $s($_.barlen * 6); //#7352
    $_.j = 0; //#7353
    $_.k = 0; //#7353
    for (var _I = 0, _H = $_.barlen - 1; _I <= _H; _I += 1) { //#7367
        $_.i = _I; //#7355
        var _L = $get($_.barcode, $_.i); //#7356
        $k[$j++] = _L; //#7359
        if (_L > 127) { //#7359
            $j--; //#7358
            $k[$j++] = 'bwipp.code93extbadCharacter#7358'; //#7358
            $k[$j++] = "Code 93 Extended only support ASCII characters with values 0 to 127"; //#7358
            bwipp_raiseerror(); //#7358
        } //#7358
        $_.extchar = $get($_.extencs, $k[--$j]); //#7360
        $_.extlen = $_.extchar.length; //#7361
        $puti($_.newcode, $_.j, $_.extchar); //#7362
        var _X = $get($_.barcode, $_.i); //#7363
        $k[$j++] = $_.newtext; //#7363
        $k[$j++] = $_.k; //#7363
        $k[$j++] = _X; //#7363
        if ((_X < 32) || (_X == 127)) { //#7363
            $j--; //#7363
            $k[$j++] = 32; //#7363
        } //#7363
        var _Y = $k[--$j]; //#7363
        var _Z = $k[--$j]; //#7363
        $put($k[--$j], _Z, _Y); //#7363
        if ($_.extlen != 1) { //#7364
            $put($_.newtext, $_.k + 1, 32); //#7364
        } //#7364
        $_.j = $_.j + $_.extlen; //#7365
        var _i = ($_.extlen == 1) ? 1 : 2; //#7366
        $_.k = $_.k + _i; //#7366
    } //#7366
    $_.newcode = $geti($_.newcode, 0, $_.j); //#7368
    $_.newtext = $geti($_.newtext, 0, $_.k); //#7369
    $put($_.options, "dontdraw", true); //#7372
    $put($_.options, "parsefnc", true); //#7373
    $k[$j++] = 'args'; //#7374
    $k[$j++] = $_.newcode; //#7374
    $k[$j++] = $_.options; //#7374
    bwipp_code93(); //#7374
    var _t = $k[--$j]; //#7374
    $_[$k[--$j]] = _t; //#7374
    if ($_.includetext) { //#7386
        $_.txt = $get($_.args, "txt"); //#7378
        for (var _10 = 0, _z = $_.newtext.length - 1; _10 <= _z; _10 += 1) { //#7384
            $_.i = _10; //#7380
            $_.txtentry = $get($_.txt, $_.i); //#7381
            $put($_.txtentry, 0, $geti($_.newtext, $_.i, 1)); //#7382
            $put($_.txt, $_.i, $_.txtentry); //#7383
        } //#7383
        $put($_.args, "txt", $_.txt); //#7385
    } //#7385
    $put($_.args, "opt", $_.options); //#7387
    $k[$j++] = $_.args; //#7390
    if (!$_.dontdraw) { //#7390
        bwipp_renlinear(); //#7390
    } //#7390
    $_ = Object.getPrototypeOf($_); //#7392
    $_ = Object.getPrototypeOf($_); //#7394
}

function bwipp_interleaved2of5() {
    $_ = Object.create($_); //#7424
    $_.dontdraw = false; //#7427
    $_.includecheck = false; //#7428
    $_.includetext = false; //#7429
    $_.includecheckintext = false; //#7430
    $_.textfont = "OCR-B"; //#7431
    $_.textsize = 10; //#7432
    $_.textyoffset = -8; //#7433
    $_.height = 1; //#7434
    $k[$j++] = $_; //#7436
    bwipp_processoptions(); //#7436
    $_.options = $k[--$j]; //#7436
    $_.barcode = $k[--$j]; //#7437
    bwipp_loadctx(bwipp_interleaved2of5) //#7439
    $forall($_.barcode, function() { //#7446
        var _3 = $k[--$j]; //#7443
        if ((_3 < 48) || (_3 > 57)) { //#7445
            $k[$j++] = 'bwipp.interleaved2of5badCharacter#7444'; //#7444
            $k[$j++] = "Interleaved 2 of 5 must contain only digits"; //#7444
            bwipp_raiseerror(); //#7444
        } //#7444
    }); //#7444
    $_.barlen = $_.barcode.length; //#7448
    if (((($_.barlen % 2) == 0) && $_.includecheck) || ((($_.barlen % 2) != 0) && (!$_.includecheck))) { //#7459
        $_.pad = $s($_.barlen + 1); //#7454
        $put($_.pad, 0, 48); //#7455
        $puti($_.pad, 1, $_.barcode); //#7456
        $_.barcode = $_.pad; //#7457
        $_.barlen = $_.barlen + 1; //#7458
    } //#7458
    if ($_.includecheck) { //#7478
        $_.checksum = 0; //#7463
        for (var _J = 0, _I = $_.barlen - 1; _J <= _I; _J += 1) { //#7471
            $_.i = _J; //#7465
            if (($_.i % 2) == 0) { //#7469
                $_.checksum = $_.checksum + (($get($_.barcode, $_.i) - 48) * 3); //#7467
            } else { //#7469
                $_.checksum = $_.checksum + ($get($_.barcode, $_.i) - 48); //#7469
            } //#7469
        } //#7469
        $_.checksum = (10 - ($_.checksum % 10)) % 10; //#7472
        $_.pad = $s($_.barlen + 1); //#7473
        $puti($_.pad, 0, $_.barcode); //#7474
        $put($_.pad, $_.barlen, $_.checksum + 48); //#7475
        $_.barcode = $_.pad; //#7476
        $_.barlen = $_.barlen + 1; //#7477
    } //#7477
    if (!bwipp_interleaved2of5.__7490__) { //#7490
        $_ = Object.create($_); //#7490
        $_.encs = $a(["11221", "21112", "12112", "22111", "11212", "21211", "12211", "11122", "21121", "12121", "1111", "2111"]); //#7486
        $_.barchars = "0123456789"; //#7489
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_interleaved2of5.$ctx[id] = $_[id]); //#7489
        bwipp_interleaved2of5.__7490__ = 1; //#7489
        $_ = Object.getPrototypeOf($_); //#7489
    } //#7489
    $_.sbs = $s(($_.barlen * 5) + 8); //#7492
    $_.txt = $a($_.barlen); //#7493
    $puti($_.sbs, 0, $get($_.encs, 10)); //#7496
    for (var _o = 0, _n = $_.barlen - 1; _o <= _n; _o += 2) { //#7530
        $_.i = _o; //#7499
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#7501
        $j--; //#7502
        $_.indx = $k[--$j].length; //#7503
        $j -= 2; //#7504
        $_.enca = $get($_.encs, $_.indx); //#7505
        $search($_.barchars, $geti($_.barcode, $_.i + 1, 1)); //#7507
        $j--; //#7508
        $_.indx = $k[--$j].length; //#7509
        $j -= 2; //#7510
        $_.encb = $get($_.encs, $_.indx); //#7511
        $_.intl = $s($_.enca.length * 2); //#7514
        for (var _19 = 0, _18 = $_.enca.length - 1; _19 <= _18; _19 += 1) { //#7521
            $_.j = _19; //#7516
            $_.achar = $get($_.enca, $_.j); //#7517
            $_.bchar = $get($_.encb, $_.j); //#7518
            $put($_.intl, $_.j * 2, $_.achar); //#7519
            $put($_.intl, ($_.j * 2) + 1, $_.bchar); //#7520
        } //#7520
        $puti($_.sbs, ($_.i * 5) + 4, $_.intl); //#7523
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ($_.i * 9) + 4, $_.textyoffset, $_.textfont, $_.textsize])); //#7524
        if (($_.includecheck && (!$_.includecheckintext)) && (($_.barlen - 2) == $_.i)) { //#7528
            $put($_.txt, $_.i + 1, $a([" ", (($_.i + 1) * 9) + 4, $_.textyoffset, $_.textfont, $_.textsize])); //#7526
        } else { //#7528
            $put($_.txt, $_.i + 1, $a([$geti($_.barcode, $_.i + 1, 1), (($_.i + 1) * 9) + 4, $_.textyoffset, $_.textfont, $_.textsize])); //#7528
        } //#7528
    } //#7528
    $puti($_.sbs, ($_.barlen * 5) + 4, $get($_.encs, 11)); //#7533
    $k[$j++] = Infinity; //#7546
    $k[$j++] = Infinity; //#7538
    var _1y = $_.sbs; //#7538
    for (var _1z = 0, _20 = _1y.length; _1z < _20; _1z++) { //#7538
        $k[$j++] = $get(_1y, _1z) - 48; //#7538
    } //#7538
    var _22 = $a(); //#7538
    $k[$j++] = Infinity; //#7539
    for (var _24 = 0, _25 = ~~(($_.sbs.length + 1) / 2); _24 < _25; _24++) { //#7539
        $k[$j++] = $_.height; //#7539
    } //#7539
    var _27 = $a(); //#7539
    $k[$j++] = Infinity; //#7540
    for (var _29 = 0, _2A = ~~(($_.sbs.length + 1) / 2); _29 < _2A; _29++) { //#7540
        $k[$j++] = 0; //#7540
    } //#7540
    var _2B = $a(); //#7540
    $k[$j++] = 'ren'; //#7543
    $k[$j++] = bwipp_renlinear; //#7543
    $k[$j++] = 'sbs'; //#7543
    $k[$j++] = _22; //#7543
    $k[$j++] = 'bhs'; //#7543
    $k[$j++] = _27; //#7543
    $k[$j++] = 'bbs'; //#7543
    $k[$j++] = _2B; //#7543
    if ($_.includetext) { //#7543
        $k[$j++] = 'txt'; //#7542
        $k[$j++] = $_.txt; //#7542
    } //#7542
    $k[$j++] = 'barratio'; //#7546
    $k[$j++] = 2; //#7546
    $k[$j++] = 'spaceratio'; //#7546
    $k[$j++] = 2; //#7546
    $k[$j++] = 'opt'; //#7546
    $k[$j++] = $_.options; //#7546
    var _2F = $d(); //#7546
    $k[$j++] = _2F; //#7549
    if (!$_.dontdraw) { //#7549
        bwipp_renlinear(); //#7549
    } //#7549
    $_ = Object.getPrototypeOf($_); //#7551
    $_ = Object.getPrototypeOf($_); //#7553
}

function bwipp_itf14() {
    $_ = Object.create($_); //#7582
    $_.dontdraw = false; //#7585
    $_.includetext = false; //#7586
    $_.includecheckintext = true; //#7587
    $_.textfont = "OCR-B"; //#7588
    $_.textsize = 10; //#7589
    $_.textxoffset = 0; //#7590
    $_.textyoffset = 3; //#7591
    $_.height = 0.5; //#7592
    $_.showborder = true; //#7593
    $_.borderwidth = 4; //#7594
    $_.borderleft = 15; //#7595
    $_.borderright = 15; //#7596
    $k[$j++] = $_; //#7598
    bwipp_processoptions(); //#7598
    $_.options = $k[--$j]; //#7598
    $_.barcode = $k[--$j]; //#7599
    $_.text = $_.barcode; //#7602
    var _3 = $_.barcode; //#7603
    $k[$j++] = $s(_3.length); //#7604
    $k[$j++] = 0; //#7604
    $forall(_3, function() { //#7604
        var _5 = $k[--$j]; //#7604
        $k[$j++] = _5; //#7604
        if (_5 != 32) { //#7604
            var _6 = $k[--$j]; //#7604
            var _7 = $k[--$j]; //#7604
            var _8 = $k[--$j]; //#7604
            $put(_8, _7, _6); //#7604
            $k[$j++] = _8; //#7604
            $k[$j++] = $f(_7 + 1); //#7604
        } else { //#7604
            $j--; //#7604
        } //#7604
    }); //#7604
    var _9 = $k[--$j]; //#7605
    $_.barcode = $geti($k[--$j], 0, _9); //#7605
    $_.hasspace = $_.text.length != $_.barcode.length; //#7606
    if (($_.barcode.length != 13) && ($_.barcode.length != 14)) { //#7611
        $k[$j++] = 'bwipp.itf14badLength#7610'; //#7610
        $k[$j++] = "ITF-14 must be 13 or 14 digits"; //#7610
        bwipp_raiseerror(); //#7610
    } //#7610
    var _G = $_.barcode; //#7612
    for (var _H = 0, _I = _G.length; _H < _I; _H++) { //#7616
        var _J = $get(_G, _H); //#7616
        if ((_J < 48) || (_J > 57)) { //#7615
            $k[$j++] = 'bwipp.itf14badCharacter#7614'; //#7614
            $k[$j++] = "ITF-14 must contain only digits"; //#7614
            bwipp_raiseerror(); //#7614
        } //#7614
    } //#7614
    $_.checksum = 0; //#7619
    for (var _K = 0; _K <= 12; _K += 1) { //#7623
        $_.i = _K; //#7621
        $k[$j++] = 'checksum'; //#7622
        $k[$j++] = $_.checksum; //#7622
        $k[$j++] = $f($get($_.barcode, $_.i) - 48); //#7622
        if (($_.i % 2) == 0) { //#7622
            var _Q = $k[--$j]; //#7622
            $k[$j++] = _Q * 3; //#7622
        } //#7622
        var _R = $k[--$j]; //#7622
        var _S = $k[--$j]; //#7622
        $_[$k[--$j]] = $f(_S + _R); //#7622
    } //#7622
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#7624
    if ($_.barcode.length == 14) { //#7638
        if ($get($_.barcode, 13) != ($_.checksum + 48)) { //#7628
            $k[$j++] = 'bwipp.itf14badCheckDigit#7627'; //#7627
            $k[$j++] = "Incorrect ITF-14 check digit provided"; //#7627
            bwipp_raiseerror(); //#7627
        } //#7627
    } else { //#7638
        var _Z = $s(14); //#7630
        $puti(_Z, 0, $_.barcode); //#7631
        $put(_Z, 13, $_.checksum + 48); //#7632
        $_.barcode = _Z; //#7633
        var _e = $_.hasspace ? 2 : 1; //#7634
        var _f = $s($_.text.length + _e); //#7634
        $puti(_f, _f.length - 2, " "); //#7635
        $put(_f, _f.length - 1, $_.checksum + 48); //#7636
        $puti(_f, 0, $_.text); //#7637
        $_.text = _f; //#7638
    } //#7638
    var _i = $_.options; //#7642
    $put(_i, "dontdraw", true); //#7642
    $put($_.options, "showborder", $_.showborder); //#7643
    $put($_.options, "borderwidth", $_.borderwidth); //#7644
    $put($_.options, "borderleft", $_.borderleft); //#7645
    $put($_.options, "borderright", $_.borderright); //#7646
    var _r = $_.options; //#7647
    $put(_r, "height", $_.height); //#7647
    $put($_.options, "textyoffset", $_.textyoffset); //#7648
    $k[$j++] = 'args'; //#7649
    $k[$j++] = $_.barcode; //#7649
    $k[$j++] = $_.options; //#7649
    bwipp_interleaved2of5(); //#7649
    var _x = $k[--$j]; //#7649
    $_[$k[--$j]] = _x; //#7649
    $put($_.args, "txt", $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])])); //#7651
    $put($_.args, "textxalign", "center"); //#7652
    $put($_.args, "opt", $_.options); //#7653
    $k[$j++] = $_.args; //#7656
    if (!$_.dontdraw) { //#7656
        bwipp_renlinear(); //#7656
    } //#7656
    $_ = Object.getPrototypeOf($_); //#7658
}

function bwipp_identcode() {
    $_ = Object.create($_); //#7687
    $_.dontdraw = false; //#7690
    $_.includetext = false; //#7691
    $_.textfont = "OCR-B"; //#7692
    $_.textsize = 10; //#7693
    $_.textxoffset = 0; //#7694
    $_.textyoffset = -8; //#7695
    $_.height = 1; //#7696
    $k[$j++] = $_; //#7698
    bwipp_processoptions(); //#7698
    $_.options = $k[--$j]; //#7698
    $_.barcode = $k[--$j]; //#7699
    if (($_.barcode.length != 11) && ($_.barcode.length != 12)) { //#7704
        $k[$j++] = 'bwipp.identcodeBadLength#7703'; //#7703
        $k[$j++] = "Deutsche Post Identcode must be 11 or 12 digits"; //#7703
        bwipp_raiseerror(); //#7703
    } //#7703
    $forall($_.barcode, function() { //#7709
        var _5 = $k[--$j]; //#7706
        if ((_5 < 48) || (_5 > 57)) { //#7708
            $k[$j++] = 'bwipp.identcodeBadCharacter#7707'; //#7707
            $k[$j++] = "Deutsche Post Identcode must contain only digits"; //#7707
            bwipp_raiseerror(); //#7707
        } //#7707
    }); //#7707
    $_.checksum = 0; //#7712
    for (var _6 = 0; _6 <= 10; _6 += 1) { //#7716
        $_.i = _6; //#7714
        $k[$j++] = 'checksum'; //#7715
        $k[$j++] = $_.checksum; //#7715
        $k[$j++] = $f($get($_.barcode, $_.i) - 48); //#7715
        if (($_.i % 2) == 0) { //#7715
            var _C = $k[--$j]; //#7715
            $k[$j++] = _C * 4; //#7715
        } else { //#7715
            var _D = $k[--$j]; //#7715
            $k[$j++] = _D * 9; //#7715
        } //#7715
        var _E = $k[--$j]; //#7715
        var _F = $k[--$j]; //#7715
        $_[$k[--$j]] = $f(_F + _E); //#7715
    } //#7715
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#7717
    if ($_.barcode.length == 12) { //#7722
        if ($get($_.barcode, 11) != ($_.checksum + 48)) { //#7721
            $k[$j++] = 'bwipp.identcodeBadCheckDigit#7720'; //#7720
            $k[$j++] = "Incorrect Deutsche Post Identcode check digit provided"; //#7720
            bwipp_raiseerror(); //#7720
        } //#7720
    } //#7720
    var _M = $s(12); //#7723
    $puti(_M, 0, $_.barcode); //#7724
    $put(_M, 11, $_.checksum + 48); //#7725
    $_.barcode = _M; //#7726
    $_.text = $strcpy($s(16), "  .       .     "); //#7729
    $puti($_.text, 0, $geti($_.barcode, 0, 2)); //#7730
    $puti($_.text, 3, $geti($_.barcode, 2, 3)); //#7731
    $puti($_.text, 7, $geti($_.barcode, 5, 3)); //#7732
    $puti($_.text, 11, $geti($_.barcode, 8, 3)); //#7733
    $puti($_.text, 15, $geti($_.barcode, 11, 1)); //#7734
    $put($_.options, "dontdraw", true); //#7737
    $put($_.options, "includecheck", false); //#7738
    var _i = $_.barcode; //#7739
    $k[$j++] = 'args'; //#7739
    $k[$j++] = _i; //#7739
    $k[$j++] = $_.options; //#7739
    bwipp_interleaved2of5(); //#7739
    var _k = $k[--$j]; //#7739
    $_[$k[--$j]] = _k; //#7739
    var _r = $_.textsize; //#7741
    $put($_.args, "txt", $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, _r])])); //#7741
    $put($_.args, "textxalign", "center"); //#7742
    $put($_.args, "opt", $_.options); //#7743
    $k[$j++] = $_.args; //#7746
    if (!$_.dontdraw) { //#7746
        bwipp_renlinear(); //#7746
    } //#7746
    $_ = Object.getPrototypeOf($_); //#7748
}

function bwipp_leitcode() {
    $_ = Object.create($_); //#7777
    $_.dontdraw = false; //#7780
    $_.includetext = false; //#7781
    $_.textfont = "OCR-B"; //#7782
    $_.textsize = 10; //#7783
    $_.textxoffset = 0; //#7784
    $_.textyoffset = -8; //#7785
    $_.height = 1; //#7786
    $k[$j++] = $_; //#7788
    bwipp_processoptions(); //#7788
    $_.options = $k[--$j]; //#7788
    $_.barcode = $k[--$j]; //#7789
    if (($_.barcode.length != 13) && ($_.barcode.length != 14)) { //#7794
        $k[$j++] = 'bwipp.leitcodeBadLength#7793'; //#7793
        $k[$j++] = "Deutsche Post Leitcode must be 13 or 14 digits"; //#7793
        bwipp_raiseerror(); //#7793
    } //#7793
    $forall($_.barcode, function() { //#7799
        var _5 = $k[--$j]; //#7796
        if ((_5 < 48) || (_5 > 57)) { //#7798
            $k[$j++] = 'bwipp.leitcodeBadCharacter#7797'; //#7797
            $k[$j++] = "Deutsche Post Leitcode must contain only digits"; //#7797
            bwipp_raiseerror(); //#7797
        } //#7797
    }); //#7797
    $_.checksum = 0; //#7802
    for (var _6 = 0; _6 <= 12; _6 += 1) { //#7806
        $_.i = _6; //#7804
        $k[$j++] = 'checksum'; //#7805
        $k[$j++] = $_.checksum; //#7805
        $k[$j++] = $f($get($_.barcode, $_.i) - 48); //#7805
        if (($_.i % 2) == 0) { //#7805
            var _C = $k[--$j]; //#7805
            $k[$j++] = _C * 4; //#7805
        } else { //#7805
            var _D = $k[--$j]; //#7805
            $k[$j++] = _D * 9; //#7805
        } //#7805
        var _E = $k[--$j]; //#7805
        var _F = $k[--$j]; //#7805
        $_[$k[--$j]] = $f(_F + _E); //#7805
    } //#7805
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#7807
    if ($_.barcode.length == 14) { //#7812
        if ($get($_.barcode, 13) != ($_.checksum + 48)) { //#7811
            $k[$j++] = 'bwipp.leitcodeBadCheckDigit#7810'; //#7810
            $k[$j++] = "Incorrect Deutsche Post Leitcode check digit provided"; //#7810
            bwipp_raiseerror(); //#7810
        } //#7810
    } //#7810
    var _M = $s(14); //#7813
    $puti(_M, 0, $_.barcode); //#7814
    $put(_M, 13, $_.checksum + 48); //#7815
    $_.barcode = _M; //#7816
    $_.text = $strcpy($s(18), "     .   .   .    "); //#7819
    $puti($_.text, 0, $geti($_.barcode, 0, 5)); //#7820
    $puti($_.text, 6, $geti($_.barcode, 5, 3)); //#7821
    $puti($_.text, 10, $geti($_.barcode, 8, 3)); //#7822
    $puti($_.text, 14, $geti($_.barcode, 11, 2)); //#7823
    $puti($_.text, 17, $geti($_.barcode, 13, 1)); //#7824
    $put($_.options, "dontdraw", true); //#7827
    $put($_.options, "includecheck", false); //#7828
    var _i = $_.barcode; //#7829
    $k[$j++] = 'args'; //#7829
    $k[$j++] = _i; //#7829
    $k[$j++] = $_.options; //#7829
    bwipp_interleaved2of5(); //#7829
    var _k = $k[--$j]; //#7829
    $_[$k[--$j]] = _k; //#7829
    var _r = $_.textsize; //#7831
    $put($_.args, "txt", $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, _r])])); //#7831
    $put($_.args, "textxalign", "center"); //#7832
    $put($_.args, "opt", $_.options); //#7833
    $k[$j++] = $_.args; //#7836
    if (!$_.dontdraw) { //#7836
        bwipp_renlinear(); //#7836
    } //#7836
    $_ = Object.getPrototypeOf($_); //#7838
}

function bwipp_databaromni() {
    $_ = Object.create($_); //#7869
    $_.dontdraw = false; //#7872
    $_.height = 33 / 72; //#7873
    $_.linkage = false; //#7874
    $_.format = "omni"; //#7875
    $_.barxmult = 33; //#7876
    $k[$j++] = $_; //#7878
    bwipp_processoptions(); //#7878
    $_.options = $k[--$j]; //#7878
    $_.barcode = $k[--$j]; //#7879
    if ($ne($geti($_.barcode, 0, 4), "(01)")) { //#7883
        $k[$j++] = 'bwipp.databaromniBadAI#7882'; //#7882
        $k[$j++] = "GS1 DataBar Omnidirectional must begin with (01) application identifier"; //#7882
        bwipp_raiseerror(); //#7882
    } //#7882
    if (($_.barcode.length != 17) && ($_.barcode.length != 18)) { //#7886
        $k[$j++] = 'bwipp.databaromniBadLength#7885'; //#7885
        $k[$j++] = "GS1 DataBar Omnidirectional must be 13 or 14 digits"; //#7885
        bwipp_raiseerror(); //#7885
    } //#7885
    var _8 = $geti($_.barcode, 4, $_.barcode.length - 4); //#7887
    for (var _9 = 0, _A = _8.length; _9 < _A; _9++) { //#7891
        var _B = $get(_8, _9); //#7891
        if ((_B < 48) || (_B > 57)) { //#7890
            $k[$j++] = 'bwipp.databaromniBadCharacter#7889'; //#7889
            $k[$j++] = "GS1 DataBar Omnidirectional must contain only digits"; //#7889
            bwipp_raiseerror(); //#7889
        } //#7889
    } //#7889
    if ($_.barxmult < 33) { //#7895
        $k[$j++] = 'bwipp.databarStackedOmniBarXmult#7894'; //#7894
        $k[$j++] = "GS1 DataBar Stacked Omnidirectional must have a barxmult of at least 33"; //#7894
        bwipp_raiseerror(); //#7894
    } //#7894
    if ((($ne($_.format, "omni") && $ne($_.format, "stacked")) && $ne($_.format, "stackedomni")) && $ne($_.format, "truncated")) { //#7899
        $k[$j++] = 'bwipp.databaromniBadFormat#7898'; //#7898
        $k[$j++] = "Valid formats are omni, stacked, stackedomni and truncated"; //#7898
        bwipp_raiseerror(); //#7898
    } //#7898
    if ($eq($_.format, "truncated")) { //#7901
        $_.height = 13 / 72; //#7901
    } //#7901
    bwipp_loadctx(bwipp_databaromni) //#7903
    $_.checksum = 0; //#7906
    for (var _I = 0; _I <= 12; _I += 1) { //#7910
        $_.i = _I; //#7908
        $k[$j++] = 'checksum'; //#7909
        $k[$j++] = $_.checksum; //#7909
        $k[$j++] = $f($get($_.barcode, $_.i + 4) - 48); //#7909
        if (($_.i % 2) == 0) { //#7909
            var _O = $k[--$j]; //#7909
            $k[$j++] = _O * 3; //#7909
        } //#7909
        var _P = $k[--$j]; //#7909
        var _Q = $k[--$j]; //#7909
        $_[$k[--$j]] = $f(_Q + _P); //#7909
    } //#7909
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#7911
    if ($_.barcode.length == 18) { //#7916
        if ($get($_.barcode, 17) != ($_.checksum + 48)) { //#7915
            $k[$j++] = 'bwipp.databaromniBadCheckDigit#7914'; //#7914
            $k[$j++] = "Incorrect GS1 DataBar Omnidirectional check digit provided"; //#7914
            bwipp_raiseerror(); //#7914
        } //#7914
    } //#7914
    var _X = $s(18); //#7917
    $puti(_X, 0, $_.barcode); //#7918
    $put(_X, 17, $_.checksum + 48); //#7919
    $_.barcode = _X; //#7920
    $_.txt = $a($_.barcode.length); //#7923
    for (var _e = 0, _d = $_.barcode.length - 1; _e <= _d; _e += 1) { //#7927
        $_.i = _e; //#7925
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), 0, 0, "", 0])); //#7926
    } //#7926
    $_.ncr = function() {
        var _l = $k[--$j]; //#7930
        var _m = $k[--$j]; //#7930
        var _n = $f(_m - _l); //#7930
        if (_l < $f(_m - _l)) { //#7930
            var _ = _n; //#7930
            _n = _l; //#7930
            _l = _; //#7930
        } //#7930
        $k[$j++] = _n; //#7937
        $k[$j++] = 1; //#7937
        $k[$j++] = 1; //#7937
        for (var _p = _m, _o = $f(_l + 1); _p >= _o; _p -= 1) { //#7937
            var _q = $k[--$j]; //#7933
            var _r = $k[--$j]; //#7934
            var _s = $k[--$j]; //#7934
            $k[$j++] = _s; //#7936
            $k[$j++] = _r; //#7936
            $k[$j++] = _q * _p; //#7936
            if ($le(_r, _s)) { //#7936
                var _t = $k[--$j]; //#7935
                var _u = $k[--$j]; //#7935
                $k[$j++] = $f(_u + 1); //#7935
                $k[$j++] = ~~(_t / _u); //#7935
            } //#7935
        } //#7935
        for (;;) { //#7941
            var _v = $k[--$j]; //#7939
            var _w = $k[--$j]; //#7939
            var _x = $k[--$j]; //#7939
            $k[$j++] = _x; //#7939
            $k[$j++] = _w; //#7939
            $k[$j++] = _v; //#7939
            if ($gt(_w, _x)) { //#7939
                break; //#7939
            } //#7939
            var _y = $k[--$j]; //#7940
            var _z = $k[--$j]; //#7940
            $k[$j++] = $f(_z + 1); //#7940
            $k[$j++] = ~~(_y / _z); //#7940
        } //#7940
        var _10 = $k[--$j]; //#7942
        var _11 = $k[--$j]; //#7942
        $k[$j++] = _10; //#7942
        $k[$j++] = _11; //#7942
        $j--; //#7942
        var _12 = $k[--$j]; //#7942
        var _13 = $k[--$j]; //#7942
        $k[$j++] = _12; //#7942
        $k[$j++] = _13; //#7942
        $j--; //#7942
    }; //#7942
    $_.getRSSwidths = function() {
        $_.oe = $k[--$j]; //#7946
        $_.el = $k[--$j]; //#7947
        $_.mw = $k[--$j]; //#7948
        $_.nm = $k[--$j]; //#7949
        $_.val = $k[--$j]; //#7950
        $_.out = $a($_.el); //#7951
        $_.mask = 0; //#7952
        for (var _1D = 0, _1C = $f($_.el - 2); _1D <= _1C; _1D += 1) { //#7979
            $_.bar = _1D; //#7954
            $_.ew = 1; //#7955
            var _1F = $_.bar; //#7956
            $_.mask = $_.mask | ((_1F < 0 ? 1 >>> -_1F : 1 << _1F)); //#7956
            for (;;) { //#7975
                $k[$j++] = 'sval'; //#7957
                $k[$j++] = $f($f($_.nm - $_.ew) - 1); //#7957
                $k[$j++] = $f($f($_.el - $_.bar) - 2); //#7957
                $_.ncr(); //#7957
                var _1K = $k[--$j]; //#7957
                $_[$k[--$j]] = _1K; //#7957
                if (($_.oe && ($_.mask == 0)) && (($f(($f($f($_.nm - $_.ew) - ($_.el * 2))) + ($_.bar * 2))) >= -2)) { //#7960
                    $k[$j++] = 'sval'; //#7959
                    $k[$j++] = $_.sval; //#7959
                    $k[$j++] = $f(($f($f($_.nm - $_.ew) - $_.el)) + $_.bar); //#7959
                    $k[$j++] = $f($f($_.el - $_.bar) - 2); //#7959
                    $_.ncr(); //#7959
                    var _1Z = $k[--$j]; //#7959
                    var _1a = $k[--$j]; //#7959
                    $_[$k[--$j]] = $f(_1a - _1Z); //#7959
                } //#7959
                if ($f($_.el - $_.bar) > 2) { //#7969
                    $_.lval = 0; //#7962
                    for (var _1k = $f(($f(($f($f($_.nm - $_.ew) - $_.el)) + $_.bar)) + 2), _1j = $f($_.mw + 1); _1k >= _1j; _1k -= 1) { //#7966
                        $k[$j++] = $f(($f($f($_.nm - _1k) - $_.ew)) - 1); //#7964
                        $k[$j++] = $f($f($_.el - $_.bar) - 3); //#7964
                        $_.ncr(); //#7964
                        $_.lval = $f($k[--$j] + $_.lval); //#7965
                    } //#7965
                    $_.sval = $f($_.sval - ($_.lval * ($f($f($_.el - $_.bar) - 1)))); //#7967
                } else { //#7969
                    if ($f($_.nm - $_.ew) > $_.mw) { //#7969
                        $_.sval = $f($_.sval - 1); //#7969
                    } //#7969
                } //#7969
                $_.val = $f($_.val - $_.sval); //#7971
                if ($_.val < 0) { //#7972
                    break; //#7972
                } //#7972
                $_.ew = $_.ew + 1; //#7973
                var _24 = $_.bar; //#7974
                $_.mask = $_.mask & (~((_24 < 0 ? 1 >>> -_24 : 1 << _24))); //#7974
            } //#7974
            $_.val = $f($_.val + $_.sval); //#7976
            $_.nm = $f($_.nm - $_.ew); //#7977
            $put($_.out, $_.bar, $_.ew); //#7978
        } //#7978
        $put($_.out, $f($_.el - 1), $_.nm); //#7980
        $k[$j++] = $_.out; //#7981
    }; //#7981
    $k[$j++] = Infinity; //#7986
    var _2H = $_.linkage ? 1 : 0; //#7985
    var _2J = $geti($_.barcode, 4, 13); //#7986
    $k[$j++] = _2H; //#7986
    for (var _2K = 0, _2L = _2J.length; _2K < _2L; _2K++) { //#7986
        $k[$j++] = $f($get(_2J, _2K) - 48); //#7986
    } //#7986
    $_.binval = $a(); //#7986
    for (var _2O = 0; _2O <= 12; _2O += 1) { //#7993
        $_.i = _2O; //#7990
        var _2P = $_.binval; //#7991
        var _2Q = $_.i; //#7991
        $put(_2P, _2Q + 1, $f($get(_2P, _2Q + 1) + (($get($_.binval, $_.i) % 4537077) * 10))); //#7991
        $put($_.binval, $_.i, ~~($get($_.binval, $_.i) / 4537077)); //#7992
    } //#7992
    $_.right = $get($_.binval, 13) % 4537077; //#7994
    var _2c = $_.binval; //#7995
    $put(_2c, 13, ~~($get(_2c, 13) / 4537077)); //#7995
    $_.left = 0; //#7997
    $_.i = true; //#7998
    for (var _2e = 0; _2e <= 13; _2e += 1) { //#8008
        $_.j = _2e; //#8000
        var _2h = $get($_.binval, $_.j); //#8001
        $k[$j++] = _2h; //#8007
        if ((_2h == 0) && $_.i) { //#8006
            $j--; //#8003
        } else { //#8006
            $_.i = false; //#8005
            $_.left = $f($_.left + ($k[--$j] * (~~Math.pow(10, 13 - $_.j)))); //#8006
        } //#8006
    } //#8006
    $_.d1 = ~~($_.left / 1597); //#8010
    $_.d2 = $_.left % 1597; //#8011
    $_.d3 = ~~($_.right / 1597); //#8012
    $_.d4 = $_.right % 1597; //#8013
    if (!bwipp_databaromni.__8030__) { //#8030
        $_ = Object.create($_); //#8030
        $_.tab164 = $a([160, 0, 12, 4, 8, 1, 161, 1, 960, 161, 10, 6, 6, 3, 80, 10, 2014, 961, 8, 8, 4, 5, 31, 34, 2714, 2015, 6, 10, 3, 6, 10, 70, 2840, 2715, 4, 12, 1, 8, 1, 126]); //#8022
        $_.tab154 = $a([335, 0, 5, 10, 2, 7, 4, 84, 1035, 336, 7, 8, 4, 5, 20, 35, 1515, 1036, 9, 6, 6, 3, 48, 10, 1596, 1516, 11, 4, 8, 1, 81, 1]); //#8029
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_databaromni.$ctx[id] = $_[id]); //#8029
        bwipp_databaromni.__8030__ = 1; //#8029
        $_ = Object.getPrototypeOf($_); //#8029
    } //#8029
    $_.i = 0; //#8032
    for (;;) { //#8042
        if ($_.d1 <= $get($_.tab164, $_.i)) { //#8040
            var _2z = $geti($_.tab164, $_.i + 1, 7); //#8034
            for (var _30 = 0, _31 = _2z.length; _30 < _31; _30++) { //#8034
                $k[$j++] = $get(_2z, _30); //#8034
            } //#8034
            $_.d1te = $k[--$j]; //#8035
            $_.d1to = $k[--$j]; //#8035
            $_.d1mwe = $k[--$j]; //#8036
            $_.d1mwo = $k[--$j]; //#8036
            $_.d1ele = $k[--$j]; //#8037
            $_.d1elo = $k[--$j]; //#8037
            $_.d1gs = $k[--$j]; //#8038
            break; //#8039
        } //#8039
        $_.i = $_.i + 8; //#8041
    } //#8041
    $_.i = 0; //#8044
    for (;;) { //#8054
        if ($_.d2 <= $get($_.tab154, $_.i)) { //#8052
            var _3H = $geti($_.tab154, $_.i + 1, 7); //#8046
            for (var _3I = 0, _3J = _3H.length; _3I < _3J; _3I++) { //#8046
                $k[$j++] = $get(_3H, _3I); //#8046
            } //#8046
            $_.d2te = $k[--$j]; //#8047
            $_.d2to = $k[--$j]; //#8047
            $_.d2mwe = $k[--$j]; //#8048
            $_.d2mwo = $k[--$j]; //#8048
            $_.d2ele = $k[--$j]; //#8049
            $_.d2elo = $k[--$j]; //#8049
            $_.d2gs = $k[--$j]; //#8050
            break; //#8051
        } //#8051
        $_.i = $_.i + 8; //#8053
    } //#8053
    $_.i = 0; //#8056
    for (;;) { //#8066
        if ($_.d3 <= $get($_.tab164, $_.i)) { //#8064
            var _3Z = $geti($_.tab164, $_.i + 1, 7); //#8058
            for (var _3a = 0, _3b = _3Z.length; _3a < _3b; _3a++) { //#8058
                $k[$j++] = $get(_3Z, _3a); //#8058
            } //#8058
            $_.d3te = $k[--$j]; //#8059
            $_.d3to = $k[--$j]; //#8059
            $_.d3mwe = $k[--$j]; //#8060
            $_.d3mwo = $k[--$j]; //#8060
            $_.d3ele = $k[--$j]; //#8061
            $_.d3elo = $k[--$j]; //#8061
            $_.d3gs = $k[--$j]; //#8062
            break; //#8063
        } //#8063
        $_.i = $_.i + 8; //#8065
    } //#8065
    $_.i = 0; //#8068
    for (;;) { //#8078
        if ($_.d4 <= $get($_.tab154, $_.i)) { //#8076
            var _3r = $geti($_.tab154, $_.i + 1, 7); //#8070
            for (var _3s = 0, _3t = _3r.length; _3s < _3t; _3s++) { //#8070
                $k[$j++] = $get(_3r, _3s); //#8070
            } //#8070
            $_.d4te = $k[--$j]; //#8071
            $_.d4to = $k[--$j]; //#8071
            $_.d4mwe = $k[--$j]; //#8072
            $_.d4mwo = $k[--$j]; //#8072
            $_.d4ele = $k[--$j]; //#8073
            $_.d4elo = $k[--$j]; //#8073
            $_.d4gs = $k[--$j]; //#8074
            break; //#8075
        } //#8075
        $_.i = $_.i + 8; //#8077
    } //#8077
    $k[$j++] = 'd1wo'; //#8080
    $k[$j++] = ~~($f($_.d1 - $_.d1gs) / $_.d1te); //#8080
    $k[$j++] = $_.d1elo; //#8080
    $k[$j++] = $_.d1mwo; //#8080
    $k[$j++] = 4; //#8080
    $k[$j++] = false; //#8080
    $_.getRSSwidths(); //#8080
    var _48 = $k[--$j]; //#8080
    $_[$k[--$j]] = _48; //#8080
    $k[$j++] = 'd1we'; //#8081
    $k[$j++] = $f($_.d1 - $_.d1gs) % $_.d1te; //#8081
    $k[$j++] = $_.d1ele; //#8081
    $k[$j++] = $_.d1mwe; //#8081
    $k[$j++] = 4; //#8081
    $k[$j++] = true; //#8081
    $_.getRSSwidths(); //#8081
    var _4F = $k[--$j]; //#8081
    $_[$k[--$j]] = _4F; //#8081
    $k[$j++] = 'd2wo'; //#8082
    $k[$j++] = $f($_.d2 - $_.d2gs) % $_.d2to; //#8082
    $k[$j++] = $_.d2elo; //#8082
    $k[$j++] = $_.d2mwo; //#8082
    $k[$j++] = 4; //#8082
    $k[$j++] = true; //#8082
    $_.getRSSwidths(); //#8082
    var _4M = $k[--$j]; //#8082
    $_[$k[--$j]] = _4M; //#8082
    $k[$j++] = 'd2we'; //#8083
    $k[$j++] = ~~($f($_.d2 - $_.d2gs) / $_.d2to); //#8083
    $k[$j++] = $_.d2ele; //#8083
    $k[$j++] = $_.d2mwe; //#8083
    $k[$j++] = 4; //#8083
    $k[$j++] = false; //#8083
    $_.getRSSwidths(); //#8083
    var _4T = $k[--$j]; //#8083
    $_[$k[--$j]] = _4T; //#8083
    $k[$j++] = 'd3wo'; //#8084
    $k[$j++] = ~~($f($_.d3 - $_.d3gs) / $_.d3te); //#8084
    $k[$j++] = $_.d3elo; //#8084
    $k[$j++] = $_.d3mwo; //#8084
    $k[$j++] = 4; //#8084
    $k[$j++] = false; //#8084
    $_.getRSSwidths(); //#8084
    var _4a = $k[--$j]; //#8084
    $_[$k[--$j]] = _4a; //#8084
    $k[$j++] = 'd3we'; //#8085
    $k[$j++] = $f($_.d3 - $_.d3gs) % $_.d3te; //#8085
    $k[$j++] = $_.d3ele; //#8085
    $k[$j++] = $_.d3mwe; //#8085
    $k[$j++] = 4; //#8085
    $k[$j++] = true; //#8085
    $_.getRSSwidths(); //#8085
    var _4h = $k[--$j]; //#8085
    $_[$k[--$j]] = _4h; //#8085
    $k[$j++] = 'd4wo'; //#8086
    $k[$j++] = $f($_.d4 - $_.d4gs) % $_.d4to; //#8086
    $k[$j++] = $_.d4elo; //#8086
    $k[$j++] = $_.d4mwo; //#8086
    $k[$j++] = 4; //#8086
    $k[$j++] = true; //#8086
    $_.getRSSwidths(); //#8086
    var _4o = $k[--$j]; //#8086
    $_[$k[--$j]] = _4o; //#8086
    $k[$j++] = 'd4we'; //#8087
    $k[$j++] = ~~($f($_.d4 - $_.d4gs) / $_.d4to); //#8087
    $k[$j++] = $_.d4ele; //#8087
    $k[$j++] = $_.d4mwe; //#8087
    $k[$j++] = 4; //#8087
    $k[$j++] = false; //#8087
    $_.getRSSwidths(); //#8087
    var _4v = $k[--$j]; //#8087
    $_[$k[--$j]] = _4v; //#8087
    $_.d1w = $a(8); //#8089
    for (var _4y = 0; _4y <= 3; _4y += 1) { //#8094
        $_.i = _4y; //#8091
        $put($_.d1w, $_.i * 2, $get($_.d1wo, $_.i)); //#8092
        $put($_.d1w, ($_.i * 2) + 1, $get($_.d1we, $_.i)); //#8093
    } //#8093
    $_.d2w = $a(8); //#8096
    for (var _5A = 0; _5A <= 3; _5A += 1) { //#8101
        $_.i = _5A; //#8098
        $put($_.d2w, 7 - ($_.i * 2), $get($_.d2wo, $_.i)); //#8099
        $put($_.d2w, 6 - ($_.i * 2), $get($_.d2we, $_.i)); //#8100
    } //#8100
    $_.d3w = $a(8); //#8103
    for (var _5M = 0; _5M <= 3; _5M += 1) { //#8108
        $_.i = _5M; //#8105
        $put($_.d3w, 7 - ($_.i * 2), $get($_.d3wo, $_.i)); //#8106
        $put($_.d3w, 6 - ($_.i * 2), $get($_.d3we, $_.i)); //#8107
    } //#8107
    $_.d4w = $a(8); //#8110
    for (var _5Y = 0; _5Y <= 3; _5Y += 1) { //#8115
        $_.i = _5Y; //#8112
        $put($_.d4w, $_.i * 2, $get($_.d4wo, $_.i)); //#8113
        $put($_.d4w, ($_.i * 2) + 1, $get($_.d4we, $_.i)); //#8114
    } //#8114
    $k[$j++] = Infinity; //#8121
    var _5j = $_.d1w; //#8118
    for (var _5k = 0, _5l = _5j.length; _5k < _5l; _5k++) { //#8118
        $k[$j++] = $get(_5j, _5k); //#8118
    } //#8118
    var _5n = $_.d2w; //#8119
    for (var _5o = 0, _5p = _5n.length; _5o < _5p; _5o++) { //#8119
        $k[$j++] = $get(_5n, _5o); //#8119
    } //#8119
    var _5r = $_.d3w; //#8120
    for (var _5s = 0, _5t = _5r.length; _5s < _5t; _5s++) { //#8120
        $k[$j++] = $get(_5r, _5s); //#8120
    } //#8120
    var _5v = $_.d4w; //#8121
    for (var _5w = 0, _5x = _5v.length; _5w < _5x; _5w++) { //#8121
        $k[$j++] = $get(_5v, _5w); //#8121
    } //#8121
    $_.widths = $a(); //#8121
    if (!bwipp_databaromni.__8137__) { //#8137
        $_ = Object.create($_); //#8137
        $_.checkweights = $a([1, 3, 9, 27, 2, 6, 18, 54, 58, 72, 24, 8, 29, 36, 12, 4, 74, 51, 17, 32, 37, 65, 48, 16, 64, 34, 23, 69, 49, 68, 46, 59]); //#8130
        $_.checkwidths = $a([3, 8, 2, 1, 1, 3, 5, 5, 1, 1, 3, 3, 7, 1, 1, 3, 1, 9, 1, 1, 2, 7, 4, 1, 1, 2, 5, 6, 1, 1, 2, 3, 8, 1, 1, 1, 5, 7, 1, 1, 1, 3, 9, 1, 1]); //#8136
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_databaromni.$ctx[id] = $_[id]); //#8136
        bwipp_databaromni.__8137__ = 1; //#8136
        $_ = Object.getPrototypeOf($_); //#8136
    } //#8136
    $_.checksum = 0; //#8139
    for (var _63 = 0; _63 <= 31; _63 += 1) { //#8143
        $_.i = _63; //#8141
        $_.checksum = $f($_.checksum + ($get($_.widths, $_.i) * $get($_.checkweights, $_.i))); //#8142
    } //#8142
    $_.checksum = $_.checksum % 79; //#8144
    if ($_.checksum >= 8) { //#8145
        $_.checksum = $f($_.checksum + 1); //#8145
    } //#8145
    if ($_.checksum >= 72) { //#8146
        $_.checksum = $f($_.checksum + 1); //#8146
    } //#8146
    $_.checklt = $geti($_.checkwidths, (~~($_.checksum / 9)) * 5, 5); //#8147
    $_.checkrtrev = $geti($_.checkwidths, ($_.checksum % 9) * 5, 5); //#8148
    $_.checkrt = $a(5); //#8149
    for (var _6N = 0; _6N <= 4; _6N += 1) { //#8153
        $_.i = _6N; //#8151
        $put($_.checkrt, $_.i, $get($_.checkrtrev, 4 - $_.i)); //#8152
    } //#8152
    if ($eq($_.format, "omni") || $eq($_.format, "truncated")) { //#8275
        $k[$j++] = Infinity; //#8160
        var _6V = $_.d1w; //#8159
        $k[$j++] = 1; //#8159
        for (var _6W = 0, _6X = _6V.length; _6W < _6X; _6W++) { //#8159
            $k[$j++] = $get(_6V, _6W); //#8159
        } //#8159
        var _6Z = $_.checklt; //#8159
        for (var _6a = 0, _6b = _6Z.length; _6a < _6b; _6a++) { //#8159
            $k[$j++] = $get(_6Z, _6a); //#8159
        } //#8159
        var _6d = $_.d2w; //#8159
        for (var _6e = 0, _6f = _6d.length; _6e < _6f; _6e++) { //#8159
            $k[$j++] = $get(_6d, _6e); //#8159
        } //#8159
        var _6h = $_.d4w; //#8160
        for (var _6i = 0, _6j = _6h.length; _6i < _6j; _6i++) { //#8160
            $k[$j++] = $get(_6h, _6i); //#8160
        } //#8160
        var _6l = $_.checkrt; //#8160
        for (var _6m = 0, _6n = _6l.length; _6m < _6n; _6m++) { //#8160
            $k[$j++] = $get(_6l, _6m); //#8160
        } //#8160
        var _6p = $_.d3w; //#8160
        for (var _6q = 0, _6r = _6p.length; _6q < _6r; _6q++) { //#8160
            $k[$j++] = $get(_6p, _6q); //#8160
        } //#8160
        $k[$j++] = 1; //#8160
        $k[$j++] = 1; //#8160
        $_.sbs = $a(); //#8160
        $k[$j++] = Infinity; //#8170
        var _6u = $_.sbs; //#8165
        $k[$j++] = Infinity; //#8166
        for (var _6w = 0, _6x = ~~(($_.sbs.length + 1) / 2); _6w < _6x; _6w++) { //#8166
            $k[$j++] = $_.height; //#8166
        } //#8166
        var _6z = $a(); //#8166
        $k[$j++] = Infinity; //#8167
        for (var _71 = 0, _72 = ~~(($_.sbs.length + 1) / 2); _71 < _72; _71++) { //#8167
            $k[$j++] = 0; //#8167
        } //#8167
        var _73 = $a(); //#8167
        $k[$j++] = 'ren'; //#8170
        $k[$j++] = bwipp_renlinear; //#8170
        $k[$j++] = 'sbs'; //#8170
        $k[$j++] = _6u; //#8170
        $k[$j++] = 'bhs'; //#8170
        $k[$j++] = _6z; //#8170
        $k[$j++] = 'bbs'; //#8170
        $k[$j++] = _73; //#8170
        $k[$j++] = 'txt'; //#8170
        $k[$j++] = $_.txt; //#8170
        $k[$j++] = 'textxalign'; //#8170
        $k[$j++] = "center"; //#8170
        $k[$j++] = 'opt'; //#8170
        $k[$j++] = $_.options; //#8170
        var _76 = $d(); //#8170
        $k[$j++] = _76; //#8173
        if (!$_.dontdraw) { //#8173
            bwipp_renlinear(); //#8173
        } //#8173
    } else { //#8275
        $k[$j++] = Infinity; //#8177
        var _78 = $_.d1w; //#8177
        $k[$j++] = 1; //#8177
        $k[$j++] = 1; //#8177
        for (var _79 = 0, _7A = _78.length; _79 < _7A; _79++) { //#8177
            $k[$j++] = $get(_78, _79); //#8177
        } //#8177
        var _7C = $_.checklt; //#8177
        for (var _7D = 0, _7E = _7C.length; _7D < _7E; _7D++) { //#8177
            $k[$j++] = $get(_7C, _7D); //#8177
        } //#8177
        var _7G = $_.d2w; //#8177
        for (var _7H = 0, _7I = _7G.length; _7H < _7I; _7H++) { //#8177
            $k[$j++] = $get(_7G, _7H); //#8177
        } //#8177
        $k[$j++] = 1; //#8177
        $k[$j++] = 1; //#8177
        $k[$j++] = 0; //#8177
        $_.top = $a(); //#8177
        $k[$j++] = Infinity; //#8178
        var _7L = $_.d4w; //#8178
        $k[$j++] = 1; //#8178
        $k[$j++] = 1; //#8178
        for (var _7M = 0, _7N = _7L.length; _7M < _7N; _7M++) { //#8178
            $k[$j++] = $get(_7L, _7M); //#8178
        } //#8178
        var _7P = $_.checkrt; //#8178
        for (var _7Q = 0, _7R = _7P.length; _7Q < _7R; _7Q++) { //#8178
            $k[$j++] = $get(_7P, _7Q); //#8178
        } //#8178
        var _7T = $_.d3w; //#8178
        for (var _7U = 0, _7V = _7T.length; _7U < _7V; _7U++) { //#8178
            $k[$j++] = $get(_7T, _7U); //#8178
        } //#8178
        $k[$j++] = 1; //#8178
        $k[$j++] = 1; //#8178
        $k[$j++] = 0; //#8178
        $_.bot = $a(); //#8178
        for (var _7Y = 0; _7Y <= 24; _7Y += 2) { //#8183
            $_.i = _7Y; //#8180
            for (var _7c = 0, _7d = $get($_.top, $_.i); _7c < _7d; _7c++) { //#8181
                $k[$j++] = 0; //#8181
            } //#8181
            for (var _7h = 0, _7i = $get($_.top, $_.i + 1); _7h < _7i; _7h++) { //#8182
                $k[$j++] = 1; //#8182
            } //#8182
        } //#8182
        $astore($a(50)); //#8184
        $_.top = $k[--$j]; //#8184
        for (var _7l = 0; _7l <= 24; _7l += 2) { //#8189
            $_.i = _7l; //#8186
            for (var _7p = 0, _7q = $get($_.bot, $_.i); _7p < _7q; _7p++) { //#8187
                $k[$j++] = 1; //#8187
            } //#8187
            for (var _7u = 0, _7v = $get($_.bot, $_.i + 1); _7u < _7v; _7u++) { //#8188
                $k[$j++] = 0; //#8188
            } //#8188
        } //#8188
        $astore($a(50)); //#8190
        $_.bot = $k[--$j]; //#8190
        if ($eq($_.format, "stacked")) { //#8212
            $_.sep = $a(50); //#8194
            $put($_.sep, 0, 0); //#8195
            for (var _81 = 1; _81 <= 49; _81 += 1) { //#8203
                $_.i = _81; //#8197
                if ($eq($get($_.top, $_.i), $get($_.bot, $_.i))) { //#8201
                    $put($_.sep, $_.i, $f(1 - $get($_.top, $_.i))); //#8199
                } else { //#8201
                    $put($_.sep, $_.i, $f(1 - $get($_.sep, $_.i - 1))); //#8201
                } //#8201
            } //#8201
            $puti($_.sep, 0, $a([0, 0, 0, 0])); //#8204
            $puti($_.sep, 46, $a([0, 0, 0, 0])); //#8205
            $k[$j++] = Infinity; //#8209
            for (var _8M = 0, _8N = 5; _8M < _8N; _8M++) { //#8207
                $aload($_.top); //#8207
            } //#8207
            $aload($_.sep); //#8208
            for (var _8Q = 0, _8R = 7; _8Q < _8R; _8Q++) { //#8209
                $aload($_.bot); //#8209
            } //#8209
            $_.pixs = $a(); //#8209
            $_.pixy = ~~($_.pixs.length / 50); //#8211
        } //#8211
        if ($eq($_.format, "stackedomni")) { //#8262
            $k[$j++] = Infinity; //#8216
            $forall($_.top, function() { //#8216
                var _8X = $k[--$j]; //#8216
                $k[$j++] = $f(1 - _8X); //#8216
            }); //#8216
            $_.sep1 = $a(); //#8216
            $puti($_.sep1, 0, $a([0, 0, 0, 0])); //#8217
            $puti($_.sep1, 46, $a([0, 0, 0, 0])); //#8218
            for (var _8d = 18; _8d <= 30; _8d += 1) { //#8231
                $_.i = _8d; //#8220
                if ($get($_.top, $_.i) == 0) { //#8228
                    if ($get($_.top, $_.i - 1) == 1) { //#8225
                        $k[$j++] = 1; //#8223
                    } else { //#8225
                        var _8n = ($get($_.sep1, $_.i - 1) == 0) ? 1 : 0; //#8225
                        $k[$j++] = _8n; //#8225
                    } //#8225
                } else { //#8228
                    $k[$j++] = 0; //#8228
                } //#8228
                $put($_.sep1, $_.i, $k[--$j]); //#8230
            } //#8230
            $k[$j++] = Infinity; //#8232
            $k[$j++] = 0; //#8232
            $k[$j++] = 0; //#8232
            $k[$j++] = 0; //#8232
            $k[$j++] = 0; //#8232
            for (var _8r = 0, _8s = 21; _8r < _8s; _8r++) { //#8232
                $k[$j++] = 0; //#8232
                $k[$j++] = 1; //#8232
            } //#8232
            $k[$j++] = 0; //#8232
            $k[$j++] = 0; //#8232
            $k[$j++] = 0; //#8232
            $k[$j++] = 0; //#8232
            $_.sep2 = $a(); //#8232
            $k[$j++] = Infinity; //#8233
            $forall($_.bot, function() { //#8233
                var _8v = $k[--$j]; //#8233
                $k[$j++] = $f(1 - _8v); //#8233
            }); //#8233
            $_.sep3 = $a(); //#8233
            $puti($_.sep3, 0, $a([0, 0, 0, 0])); //#8234
            $puti($_.sep3, 46, $a([0, 0, 0, 0])); //#8235
            for (var _91 = 19; _91 <= 31; _91 += 1) { //#8248
                $_.i = _91; //#8237
                if ($get($_.bot, $_.i) == 0) { //#8245
                    if ($get($_.bot, $_.i - 1) == 1) { //#8242
                        $k[$j++] = 1; //#8240
                    } else { //#8242
                        var _9B = ($get($_.sep3, $_.i - 1) == 0) ? 1 : 0; //#8242
                        $k[$j++] = _9B; //#8242
                    } //#8242
                } else { //#8245
                    $k[$j++] = 0; //#8245
                } //#8245
                $put($_.sep3, $_.i, $k[--$j]); //#8247
            } //#8247
            $_.f3 = $a([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1]); //#8249
            $k[$j++] = true; //#8250
            for (var _9G = 0; _9G <= 12; _9G += 1) { //#8250
                var _9L = $k[--$j]; //#8250
                $k[$j++] = _9L && $eq($get($_.bot, _9G + 19), $get($_.f3, _9G)); //#8250
            } //#8250
            if ($k[--$j]) { //#8253
                $puti($_.sep3, 19, $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0])); //#8252
            } //#8252
            $k[$j++] = Infinity; //#8259
            for (var _9Q = 0, _9R = $_.barxmult; _9Q < _9R; _9Q++) { //#8255
                $aload($_.top); //#8255
            } //#8255
            $aload($_.sep1); //#8256
            $aload($_.sep2); //#8257
            $aload($_.sep3); //#8258
            for (var _9X = 0, _9Y = $_.barxmult; _9X < _9Y; _9X++) { //#8259
                $aload($_.bot); //#8259
            } //#8259
            $_.pixs = $a(); //#8259
            $_.pixy = ~~($_.pixs.length / 50); //#8261
        } //#8261
        var _9g = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $_.pixs],
            ["pixx", 50],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", 50 / 72],
            ["opt", $_.options]
        ]); //#8272
        $k[$j++] = _9g; //#8275
        if (!$_.dontdraw) { //#8275
            bwipp_renmatrix(); //#8275
        } //#8275
    } //#8275
    $_ = Object.getPrototypeOf($_); //#8279
    $_ = Object.getPrototypeOf($_); //#8281
}

function bwipp_databarstacked() {
    $_ = Object.create($_); //#8310
    $_.dontdraw = false; //#8313
    $k[$j++] = $_; //#8315
    bwipp_processoptions(); //#8315
    $_.options = $k[--$j]; //#8315
    $_.barcode = $k[--$j]; //#8316
    if ($ne($geti($_.barcode, 0, 4), "(01)")) { //#8321
        $k[$j++] = 'bwipp.databarstackedBadAI#8320'; //#8320
        $k[$j++] = "GS1 DataBar Stacked must begin with (01) application identifier"; //#8320
        bwipp_raiseerror(); //#8320
    } //#8320
    if (($_.barcode.length != 17) && ($_.barcode.length != 18)) { //#8324
        $k[$j++] = 'bwipp.databarstackedBadLength#8323'; //#8323
        $k[$j++] = "GS1 DataBar Stacked must be 13 or 14 digits"; //#8323
        bwipp_raiseerror(); //#8323
    } //#8323
    var _8 = $geti($_.barcode, 4, $_.barcode.length - 4); //#8325
    for (var _9 = 0, _A = _8.length; _9 < _A; _9++) { //#8329
        var _B = $get(_8, _9); //#8329
        if ((_B < 48) || (_B > 57)) { //#8328
            $k[$j++] = 'bwipp.databarstackedBadCharacter#8327'; //#8327
            $k[$j++] = "GS1 DataBar Stacked must contain only digits"; //#8327
            bwipp_raiseerror(); //#8327
        } //#8327
    } //#8327
    $_.checksum = 0; //#8332
    for (var _C = 0; _C <= 12; _C += 1) { //#8336
        $_.i = _C; //#8334
        $k[$j++] = 'checksum'; //#8335
        $k[$j++] = $_.checksum; //#8335
        $k[$j++] = $f($get($_.barcode, $_.i + 4) - 48); //#8335
        if (($_.i % 2) == 0) { //#8335
            var _I = $k[--$j]; //#8335
            $k[$j++] = _I * 3; //#8335
        } //#8335
        var _J = $k[--$j]; //#8335
        var _K = $k[--$j]; //#8335
        $_[$k[--$j]] = $f(_K + _J); //#8335
    } //#8335
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#8337
    if ($_.barcode.length == 18) { //#8342
        if ($get($_.barcode, 17) != ($_.checksum + 48)) { //#8341
            $k[$j++] = 'bwipp.databarstackedBadCheckDigit#8340'; //#8340
            $k[$j++] = "Incorrect GS1 DataBar Stacked check digit provided"; //#8340
            bwipp_raiseerror(); //#8340
        } //#8340
    } //#8340
    var _R = $s(18); //#8343
    $puti(_R, 0, $_.barcode); //#8344
    $put(_R, 17, $_.checksum + 48); //#8345
    $_.barcode = _R; //#8346
    $put($_.options, "dontdraw", true); //#8349
    $put($_.options, "format", "stacked"); //#8350
    $k[$j++] = 'args'; //#8352
    $k[$j++] = $_.barcode; //#8352
    $k[$j++] = $_.options; //#8352
    bwipp_databaromni(); //#8352
    var _Y = $k[--$j]; //#8352
    $_[$k[--$j]] = _Y; //#8352
    $put($_.args, "opt", $_.options); //#8354
    $k[$j++] = $_.args; //#8357
    if (!$_.dontdraw) { //#8357
        bwipp_renmatrix(); //#8357
    } //#8357
    $_ = Object.getPrototypeOf($_); //#8359
}

function bwipp_databarstackedomni() {
    $_ = Object.create($_); //#8388
    $_.dontdraw = false; //#8391
    $k[$j++] = $_; //#8393
    bwipp_processoptions(); //#8393
    $_.options = $k[--$j]; //#8393
    $_.barcode = $k[--$j]; //#8394
    if ($ne($geti($_.barcode, 0, 4), "(01)")) { //#8399
        $k[$j++] = 'bwipp.databarstackedomniBadAI#8398'; //#8398
        $k[$j++] = "GS1 DataBar Stacked Omnidirectional must begin with (01) application identifier"; //#8398
        bwipp_raiseerror(); //#8398
    } //#8398
    if (($_.barcode.length != 17) && ($_.barcode.length != 18)) { //#8402
        $k[$j++] = 'bwipp.databarstackedomniBadLength#8401'; //#8401
        $k[$j++] = "GS1 DataBar Stacked Omnidirectional must be 13 or 14 digits"; //#8401
        bwipp_raiseerror(); //#8401
    } //#8401
    var _8 = $geti($_.barcode, 4, $_.barcode.length - 4); //#8403
    for (var _9 = 0, _A = _8.length; _9 < _A; _9++) { //#8407
        var _B = $get(_8, _9); //#8407
        if ((_B < 48) || (_B > 57)) { //#8406
            $k[$j++] = 'bwipp.databarstackedomniBadCharacter#8405'; //#8405
            $k[$j++] = "GS1 DataBar Stacked Omnidirectional must contain only digits"; //#8405
            bwipp_raiseerror(); //#8405
        } //#8405
    } //#8405
    $_.checksum = 0; //#8410
    for (var _C = 0; _C <= 12; _C += 1) { //#8414
        $_.i = _C; //#8412
        $k[$j++] = 'checksum'; //#8413
        $k[$j++] = $_.checksum; //#8413
        $k[$j++] = $f($get($_.barcode, $_.i + 4) - 48); //#8413
        if (($_.i % 2) == 0) { //#8413
            var _I = $k[--$j]; //#8413
            $k[$j++] = _I * 3; //#8413
        } //#8413
        var _J = $k[--$j]; //#8413
        var _K = $k[--$j]; //#8413
        $_[$k[--$j]] = $f(_K + _J); //#8413
    } //#8413
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#8415
    if ($_.barcode.length == 18) { //#8420
        if ($get($_.barcode, 17) != ($_.checksum + 48)) { //#8419
            $k[$j++] = 'bwipp.databarstackedomniBadCheckDigit#8418'; //#8418
            $k[$j++] = "Incorrect GS1 DataBar Stacked Omnidirectional check digit provided"; //#8418
            bwipp_raiseerror(); //#8418
        } //#8418
    } //#8418
    var _R = $s(18); //#8421
    $puti(_R, 0, $_.barcode); //#8422
    $put(_R, 17, $_.checksum + 48); //#8423
    $_.barcode = _R; //#8424
    $put($_.options, "dontdraw", true); //#8427
    $put($_.options, "format", "stackedomni"); //#8428
    $k[$j++] = 'args'; //#8430
    $k[$j++] = $_.barcode; //#8430
    $k[$j++] = $_.options; //#8430
    bwipp_databaromni(); //#8430
    var _Y = $k[--$j]; //#8430
    $_[$k[--$j]] = _Y; //#8430
    $put($_.args, "opt", $_.options); //#8432
    $k[$j++] = $_.args; //#8435
    if (!$_.dontdraw) { //#8435
        bwipp_renmatrix(); //#8435
    } //#8435
    $_ = Object.getPrototypeOf($_); //#8437
}

function bwipp_databartruncated() {
    $_ = Object.create($_); //#8466
    $_.dontdraw = false; //#8469
    $k[$j++] = $_; //#8471
    bwipp_processoptions(); //#8471
    $_.options = $k[--$j]; //#8471
    $_.barcode = $k[--$j]; //#8472
    if ($ne($geti($_.barcode, 0, 4), "(01)")) { //#8477
        $k[$j++] = 'bwipp.databartruncatedBadAI#8476'; //#8476
        $k[$j++] = "GS1 DataBar Truncated must begin with (01) application identifier"; //#8476
        bwipp_raiseerror(); //#8476
    } //#8476
    if (($_.barcode.length != 17) && ($_.barcode.length != 18)) { //#8480
        $k[$j++] = 'bwipp.databartruncatedBadLength#8479'; //#8479
        $k[$j++] = "GS1 DataBar Truncated must be 13 or 14 digits"; //#8479
        bwipp_raiseerror(); //#8479
    } //#8479
    var _8 = $geti($_.barcode, 4, $_.barcode.length - 4); //#8481
    for (var _9 = 0, _A = _8.length; _9 < _A; _9++) { //#8485
        var _B = $get(_8, _9); //#8485
        if ((_B < 48) || (_B > 57)) { //#8484
            $k[$j++] = 'bwipp.databartruncatedBadCharacter#8483'; //#8483
            $k[$j++] = "GS1 DataBar Truncated must contain only digits"; //#8483
            bwipp_raiseerror(); //#8483
        } //#8483
    } //#8483
    $_.checksum = 0; //#8488
    for (var _C = 0; _C <= 12; _C += 1) { //#8492
        $_.i = _C; //#8490
        $k[$j++] = 'checksum'; //#8491
        $k[$j++] = $_.checksum; //#8491
        $k[$j++] = $f($get($_.barcode, $_.i + 4) - 48); //#8491
        if (($_.i % 2) == 0) { //#8491
            var _I = $k[--$j]; //#8491
            $k[$j++] = _I * 3; //#8491
        } //#8491
        var _J = $k[--$j]; //#8491
        var _K = $k[--$j]; //#8491
        $_[$k[--$j]] = $f(_K + _J); //#8491
    } //#8491
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#8493
    if ($_.barcode.length == 18) { //#8498
        if ($get($_.barcode, 17) != ($_.checksum + 48)) { //#8497
            $k[$j++] = 'bwipp.databartruncatedBadCheckDigit#8496'; //#8496
            $k[$j++] = "Incorrect GS1 DataBar Truncated check digit provided"; //#8496
            bwipp_raiseerror(); //#8496
        } //#8496
    } //#8496
    var _R = $s(18); //#8499
    $puti(_R, 0, $_.barcode); //#8500
    $put(_R, 17, $_.checksum + 48); //#8501
    $_.barcode = _R; //#8502
    $put($_.options, "dontdraw", true); //#8505
    $put($_.options, "format", "truncated"); //#8506
    $k[$j++] = 'args'; //#8508
    $k[$j++] = $_.barcode; //#8508
    $k[$j++] = $_.options; //#8508
    bwipp_databaromni(); //#8508
    var _Y = $k[--$j]; //#8508
    $_[$k[--$j]] = _Y; //#8508
    $put($_.args, "opt", $_.options); //#8510
    $k[$j++] = $_.args; //#8513
    if (!$_.dontdraw) { //#8513
        bwipp_renlinear(); //#8513
    } //#8513
    $_ = Object.getPrototypeOf($_); //#8515
}

function bwipp_databarlimited() {
    $_ = Object.create($_); //#8545
    $_.dontdraw = false; //#8548
    $_.height = 10 / 72; //#8549
    $_.linkage = false; //#8550
    $k[$j++] = $_; //#8552
    bwipp_processoptions(); //#8552
    $_.options = $k[--$j]; //#8552
    $_.barcode = $k[--$j]; //#8553
    bwipp_loadctx(bwipp_databarlimited) //#8555
    if ($ne($geti($_.barcode, 0, 4), "(01)")) { //#8560
        $k[$j++] = 'bwipp.databarlimitedBadAI#8559'; //#8559
        $k[$j++] = "GS1 DataBar Limited must begin with (01) application identifier"; //#8559
        bwipp_raiseerror(); //#8559
    } //#8559
    if (($_.barcode.length != 17) && ($_.barcode.length != 18)) { //#8563
        $k[$j++] = 'bwipp.databarlimitedBadLength#8562'; //#8562
        $k[$j++] = "GS1 DataBar Limited must be 13 or 14 digits"; //#8562
        bwipp_raiseerror(); //#8562
    } //#8562
    var _7 = $get($_.barcode, 4); //#8564
    if ((_7 < 48) || (_7 > 49)) { //#8566
        $k[$j++] = 'bwipp.databarlimitedBadStartDigit#8565'; //#8565
        $k[$j++] = "GS1 DataBar Limited must begin with 0 or 1"; //#8565
        bwipp_raiseerror(); //#8565
    } //#8565
    var _A = $geti($_.barcode, 5, $_.barcode.length - 5); //#8567
    for (var _B = 0, _C = _A.length; _B < _C; _B++) { //#8571
        var _D = $get(_A, _B); //#8571
        if ((_D < 48) || (_D > 57)) { //#8570
            $k[$j++] = 'bwipp.databarlimitedBadCharacter#8569'; //#8569
            $k[$j++] = "GS1 DataBar Limited must contain only digits"; //#8569
            bwipp_raiseerror(); //#8569
        } //#8569
    } //#8569
    $_.checksum = 0; //#8574
    for (var _E = 0; _E <= 12; _E += 1) { //#8578
        $_.i = _E; //#8576
        $k[$j++] = 'checksum'; //#8577
        $k[$j++] = $_.checksum; //#8577
        $k[$j++] = $f($get($_.barcode, $_.i + 4) - 48); //#8577
        if (($_.i % 2) == 0) { //#8577
            var _K = $k[--$j]; //#8577
            $k[$j++] = _K * 3; //#8577
        } //#8577
        var _L = $k[--$j]; //#8577
        var _M = $k[--$j]; //#8577
        $_[$k[--$j]] = $f(_M + _L); //#8577
    } //#8577
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#8579
    if ($_.barcode.length == 18) { //#8584
        if ($get($_.barcode, 17) != ($_.checksum + 48)) { //#8583
            $k[$j++] = 'bwipp.databarlimitedBadCheckDigit#8582'; //#8582
            $k[$j++] = "Incorrect GS1 DataBar Limited check digit provided"; //#8582
            bwipp_raiseerror(); //#8582
        } //#8582
    } //#8582
    var _T = $s(18); //#8585
    $puti(_T, 0, $_.barcode); //#8586
    $put(_T, 17, $_.checksum + 48); //#8587
    $_.barcode = _T; //#8588
    if (!bwipp_databarlimited.__8593__) { //#8593
        $_ = Object.create($_); //#8593
        $_.linkval = $a([2, 0, 1, 5, 1, 3, 3, 5, 3, 1, 0, 9, 6]); //#8592
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_databarlimited.$ctx[id] = $_[id]); //#8592
        bwipp_databarlimited.__8593__ = 1; //#8592
        $_ = Object.getPrototypeOf($_); //#8592
    } //#8592
    $k[$j++] = Infinity; //#8595
    var _Z = $geti($_.barcode, 4, 13); //#8595
    for (var _a = 0, _b = _Z.length; _a < _b; _a++) { //#8595
        $k[$j++] = $f($get(_Z, _a) - 48); //#8595
    } //#8595
    $_.binval = $a(); //#8595
    if ($_.linkage) { //#8602
        for (var _h = 0, _g = $_.binval.length - 1; _h <= _g; _h += 1) { //#8601
            $_.i = _h; //#8599
            $put($_.binval, $_.i, $f($get($_.binval, $_.i) + $get($_.linkval, $_.i))); //#8600
        } //#8600
    } //#8600
    $_.txt = $a($_.barcode.length); //#8605
    for (var _u = 0, _t = $_.barcode.length - 1; _u <= _t; _u += 1) { //#8609
        $_.i = _u; //#8607
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), 0, 0, "", 0])); //#8608
    } //#8608
    $_.ncr = function() {
        var _11 = $k[--$j]; //#8612
        var _12 = $k[--$j]; //#8612
        var _13 = $f(_12 - _11); //#8612
        if (_11 < $f(_12 - _11)) { //#8612
            var _ = _13; //#8612
            _13 = _11; //#8612
            _11 = _; //#8612
        } //#8612
        $k[$j++] = _13; //#8619
        $k[$j++] = 1; //#8619
        $k[$j++] = 1; //#8619
        for (var _15 = _12, _14 = $f(_11 + 1); _15 >= _14; _15 -= 1) { //#8619
            var _16 = $k[--$j]; //#8615
            var _17 = $k[--$j]; //#8616
            var _18 = $k[--$j]; //#8616
            $k[$j++] = _18; //#8618
            $k[$j++] = _17; //#8618
            $k[$j++] = _16 * _15; //#8618
            if ($le(_17, _18)) { //#8618
                var _19 = $k[--$j]; //#8617
                var _1A = $k[--$j]; //#8617
                $k[$j++] = $f(_1A + 1); //#8617
                $k[$j++] = ~~(_19 / _1A); //#8617
            } //#8617
        } //#8617
        for (;;) { //#8623
            var _1B = $k[--$j]; //#8621
            var _1C = $k[--$j]; //#8621
            var _1D = $k[--$j]; //#8621
            $k[$j++] = _1D; //#8621
            $k[$j++] = _1C; //#8621
            $k[$j++] = _1B; //#8621
            if ($gt(_1C, _1D)) { //#8621
                break; //#8621
            } //#8621
            var _1E = $k[--$j]; //#8622
            var _1F = $k[--$j]; //#8622
            $k[$j++] = $f(_1F + 1); //#8622
            $k[$j++] = ~~(_1E / _1F); //#8622
        } //#8622
        var _1G = $k[--$j]; //#8624
        var _1H = $k[--$j]; //#8624
        $k[$j++] = _1G; //#8624
        $k[$j++] = _1H; //#8624
        $j--; //#8624
        var _1I = $k[--$j]; //#8624
        var _1J = $k[--$j]; //#8624
        $k[$j++] = _1I; //#8624
        $k[$j++] = _1J; //#8624
        $j--; //#8624
    }; //#8624
    $_.getRSSwidths = function() {
        $_.oe = $k[--$j]; //#8628
        $_.el = $k[--$j]; //#8629
        $_.mw = $k[--$j]; //#8630
        $_.nm = $k[--$j]; //#8631
        $_.val = $k[--$j]; //#8632
        $_.out = $a($_.el); //#8633
        $_.mask = 0; //#8634
        for (var _1T = 0, _1S = $f($_.el - 2); _1T <= _1S; _1T += 1) { //#8661
            $_.bar = _1T; //#8636
            $_.ew = 1; //#8637
            var _1V = $_.bar; //#8638
            $_.mask = $_.mask | ((_1V < 0 ? 1 >>> -_1V : 1 << _1V)); //#8638
            for (;;) { //#8657
                $k[$j++] = 'sval'; //#8639
                $k[$j++] = $f($f($_.nm - $_.ew) - 1); //#8639
                $k[$j++] = $f($f($_.el - $_.bar) - 2); //#8639
                $_.ncr(); //#8639
                var _1a = $k[--$j]; //#8639
                $_[$k[--$j]] = _1a; //#8639
                if (($_.oe && ($_.mask == 0)) && (($f(($f($f($_.nm - $_.ew) - ($_.el * 2))) + ($_.bar * 2))) >= -2)) { //#8642
                    $k[$j++] = 'sval'; //#8641
                    $k[$j++] = $_.sval; //#8641
                    $k[$j++] = $f(($f($f($_.nm - $_.ew) - $_.el)) + $_.bar); //#8641
                    $k[$j++] = $f($f($_.el - $_.bar) - 2); //#8641
                    $_.ncr(); //#8641
                    var _1p = $k[--$j]; //#8641
                    var _1q = $k[--$j]; //#8641
                    $_[$k[--$j]] = $f(_1q - _1p); //#8641
                } //#8641
                if ($f($_.el - $_.bar) > 2) { //#8651
                    $_.lval = 0; //#8644
                    for (var _20 = $f(($f(($f($f($_.nm - $_.ew) - $_.el)) + $_.bar)) + 2), _1z = $f($_.mw + 1); _20 >= _1z; _20 -= 1) { //#8648
                        $k[$j++] = $f(($f($f($_.nm - _20) - $_.ew)) - 1); //#8646
                        $k[$j++] = $f($f($_.el - $_.bar) - 3); //#8646
                        $_.ncr(); //#8646
                        $_.lval = $f($k[--$j] + $_.lval); //#8647
                    } //#8647
                    $_.sval = $f($_.sval - ($_.lval * ($f($f($_.el - $_.bar) - 1)))); //#8649
                } else { //#8651
                    if ($f($_.nm - $_.ew) > $_.mw) { //#8651
                        $_.sval = $f($_.sval - 1); //#8651
                    } //#8651
                } //#8651
                $_.val = $f($_.val - $_.sval); //#8653
                if ($_.val < 0) { //#8654
                    break; //#8654
                } //#8654
                $_.ew = $_.ew + 1; //#8655
                var _2K = $_.bar; //#8656
                $_.mask = $_.mask & (~((_2K < 0 ? 1 >>> -_2K : 1 << _2K))); //#8656
            } //#8656
            $_.val = $f($_.val + $_.sval); //#8658
            $_.nm = $f($_.nm - $_.ew); //#8659
            $put($_.out, $_.bar, $_.ew); //#8660
        } //#8660
        $put($_.out, $f($_.el - 1), $_.nm); //#8662
        $k[$j++] = $_.out; //#8663
    }; //#8663
    for (var _2W = 0; _2W <= 11; _2W += 1) { //#8670
        $_.i = _2W; //#8667
        var _2X = $_.binval; //#8668
        var _2Y = $_.i; //#8668
        $put(_2X, _2Y + 1, $f($get(_2X, _2Y + 1) + (($get($_.binval, $_.i) % 2013571) * 10))); //#8668
        $put($_.binval, $_.i, ~~($get($_.binval, $_.i) / 2013571)); //#8669
    } //#8669
    $_.d2 = $get($_.binval, 12) % 2013571; //#8671
    var _2k = $_.binval; //#8672
    $put(_2k, 12, ~~($get(_2k, 12) / 2013571)); //#8672
    $_.d1 = 0; //#8674
    $_.i = true; //#8675
    for (var _2m = 0; _2m <= 12; _2m += 1) { //#8685
        $_.j = _2m; //#8677
        var _2p = $get($_.binval, $_.j); //#8678
        $k[$j++] = _2p; //#8684
        if ((_2p == 0) && $_.i) { //#8683
            $j--; //#8680
        } else { //#8683
            $_.i = false; //#8682
            $_.d1 = $f($_.d1 + ($k[--$j] * (~~Math.pow(10, 12 - $_.j)))); //#8683
        } //#8683
    } //#8683
    if (!bwipp_databarlimited.__8697__) { //#8697
        $_ = Object.create($_); //#8697
        $_.tab267 = $a([183063, 0, 17, 9, 6, 3, 6538, 28, 820063, 183064, 13, 13, 5, 4, 875, 728, 1000775, 820064, 9, 17, 3, 6, 28, 6454, 1491020, 1000776, 15, 11, 5, 4, 2415, 203, 1979844, 1491021, 11, 15, 4, 5, 203, 2408, 1996938, 1979845, 19, 7, 8, 1, 17094, 1, 2013570, 1996939, 7, 19, 1, 8, 1, 16632]); //#8696
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_databarlimited.$ctx[id] = $_[id]); //#8696
        bwipp_databarlimited.__8697__ = 1; //#8696
        $_ = Object.getPrototypeOf($_); //#8696
    } //#8696
    $_.i = 0; //#8699
    for (;;) { //#8709
        if ($_.d1 <= $get($_.tab267, $_.i)) { //#8707
            var _32 = $geti($_.tab267, $_.i + 1, 7); //#8701
            for (var _33 = 0, _34 = _32.length; _33 < _34; _33++) { //#8701
                $k[$j++] = $get(_32, _33); //#8701
            } //#8701
            $_.d1te = $k[--$j]; //#8702
            $_.d1to = $k[--$j]; //#8702
            $_.d1mwe = $k[--$j]; //#8703
            $_.d1mwo = $k[--$j]; //#8703
            $_.d1ele = $k[--$j]; //#8704
            $_.d1elo = $k[--$j]; //#8704
            $_.d1gs = $k[--$j]; //#8705
            break; //#8706
        } //#8706
        $_.i = $_.i + 8; //#8708
    } //#8708
    $_.i = 0; //#8711
    for (;;) { //#8721
        if ($_.d2 <= $get($_.tab267, $_.i)) { //#8719
            var _3K = $geti($_.tab267, $_.i + 1, 7); //#8713
            for (var _3L = 0, _3M = _3K.length; _3L < _3M; _3L++) { //#8713
                $k[$j++] = $get(_3K, _3L); //#8713
            } //#8713
            $_.d2te = $k[--$j]; //#8714
            $_.d2to = $k[--$j]; //#8714
            $_.d2mwe = $k[--$j]; //#8715
            $_.d2mwo = $k[--$j]; //#8715
            $_.d2ele = $k[--$j]; //#8716
            $_.d2elo = $k[--$j]; //#8716
            $_.d2gs = $k[--$j]; //#8717
            break; //#8718
        } //#8718
        $_.i = $_.i + 8; //#8720
    } //#8720
    $k[$j++] = 'd1wo'; //#8723
    $k[$j++] = ~~($f($_.d1 - $_.d1gs) / $_.d1te); //#8723
    $k[$j++] = $_.d1elo; //#8723
    $k[$j++] = $_.d1mwo; //#8723
    $k[$j++] = 7; //#8723
    $k[$j++] = false; //#8723
    $_.getRSSwidths(); //#8723
    var _3b = $k[--$j]; //#8723
    $_[$k[--$j]] = _3b; //#8723
    $k[$j++] = 'd1we'; //#8724
    $k[$j++] = $f($_.d1 - $_.d1gs) % $_.d1te; //#8724
    $k[$j++] = $_.d1ele; //#8724
    $k[$j++] = $_.d1mwe; //#8724
    $k[$j++] = 7; //#8724
    $k[$j++] = true; //#8724
    $_.getRSSwidths(); //#8724
    var _3i = $k[--$j]; //#8724
    $_[$k[--$j]] = _3i; //#8724
    $k[$j++] = 'd2wo'; //#8725
    $k[$j++] = ~~($f($_.d2 - $_.d2gs) / $_.d2te); //#8725
    $k[$j++] = $_.d2elo; //#8725
    $k[$j++] = $_.d2mwo; //#8725
    $k[$j++] = 7; //#8725
    $k[$j++] = false; //#8725
    $_.getRSSwidths(); //#8725
    var _3p = $k[--$j]; //#8725
    $_[$k[--$j]] = _3p; //#8725
    $k[$j++] = 'd2we'; //#8726
    $k[$j++] = $f($_.d2 - $_.d2gs) % $_.d2te; //#8726
    $k[$j++] = $_.d2ele; //#8726
    $k[$j++] = $_.d2mwe; //#8726
    $k[$j++] = 7; //#8726
    $k[$j++] = true; //#8726
    $_.getRSSwidths(); //#8726
    var _3w = $k[--$j]; //#8726
    $_[$k[--$j]] = _3w; //#8726
    $_.d1w = $a(14); //#8728
    for (var _3z = 0; _3z <= 6; _3z += 1) { //#8733
        $_.i = _3z; //#8730
        $put($_.d1w, $_.i * 2, $get($_.d1wo, $_.i)); //#8731
        $put($_.d1w, ($_.i * 2) + 1, $get($_.d1we, $_.i)); //#8732
    } //#8732
    $_.d2w = $a(14); //#8735
    for (var _4B = 0; _4B <= 6; _4B += 1) { //#8740
        $_.i = _4B; //#8737
        $put($_.d2w, $_.i * 2, $get($_.d2wo, $_.i)); //#8738
        $put($_.d2w, ($_.i * 2) + 1, $get($_.d2we, $_.i)); //#8739
    } //#8739
    $k[$j++] = Infinity; //#8744
    var _4M = $_.d1w; //#8743
    for (var _4N = 0, _4O = _4M.length; _4N < _4O; _4N++) { //#8743
        $k[$j++] = $get(_4M, _4N); //#8743
    } //#8743
    var _4Q = $_.d2w; //#8744
    for (var _4R = 0, _4S = _4Q.length; _4R < _4S; _4R++) { //#8744
        $k[$j++] = $get(_4Q, _4R); //#8744
    } //#8744
    $_.widths = $a(); //#8744
    if (!bwipp_databarlimited.__8768__) { //#8768
        $_ = Object.create($_); //#8768
        $_.checkweights = $a([1, 3, 9, 27, 81, 65, 17, 51, 64, 14, 42, 37, 22, 66, 20, 60, 2, 6, 18, 54, 73, 41, 34, 13, 39, 28, 84, 74]); //#8751
        $k[$j++] = Infinity; //#8766
        for (var _4W = 0; _4W <= 43; _4W += 1) { //#8754
            $k[$j++] = _4W; //#8754
        } //#8754
        $k[$j++] = 45; //#8756
        $k[$j++] = 52; //#8756
        $k[$j++] = 57; //#8756
        for (var _4X = 63; _4X <= 66; _4X += 1) { //#8756
            $k[$j++] = _4X; //#8756
        } //#8756
        for (var _4Y = 73; _4Y <= 79; _4Y += 1) { //#8757
            $k[$j++] = _4Y; //#8757
        } //#8757
        $k[$j++] = 82; //#8759
        for (var _4Z = 126; _4Z <= 130; _4Z += 1) { //#8759
            $k[$j++] = _4Z; //#8759
        } //#8759
        $k[$j++] = 132; //#8761
        for (var _4a = 141; _4a <= 146; _4a += 1) { //#8761
            $k[$j++] = _4a; //#8761
        } //#8761
        for (var _4b = 210; _4b <= 217; _4b += 1) { //#8762
            $k[$j++] = _4b; //#8762
        } //#8762
        $k[$j++] = 220; //#8764
        for (var _4c = 316; _4c <= 320; _4c += 1) { //#8764
            $k[$j++] = _4c; //#8764
        } //#8764
        $k[$j++] = 322; //#8766
        $k[$j++] = 323; //#8766
        $k[$j++] = 326; //#8766
        $k[$j++] = 337; //#8766
        $_.checkseq = $a(); //#8766
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_databarlimited.$ctx[id] = $_[id]); //#8767
        bwipp_databarlimited.__8768__ = 1; //#8767
        $_ = Object.getPrototypeOf($_); //#8767
    } //#8767
    $_.checksum = 0; //#8770
    for (var _4f = 0; _4f <= 27; _4f += 1) { //#8774
        $_.i = _4f; //#8772
        $_.checksum = $f($_.checksum + ($get($_.widths, $_.i) * $get($_.checkweights, $_.i))); //#8773
    } //#8773
    $_.checksum = $_.checksum % 89; //#8775
    $_.seq = $get($_.checkseq, $_.checksum); //#8776
    $k[$j++] = 'swidths'; //#8777
    $k[$j++] = ~~($_.seq / 21); //#8777
    $k[$j++] = 8; //#8777
    $k[$j++] = 3; //#8777
    $k[$j++] = 6; //#8777
    $k[$j++] = false; //#8777
    $_.getRSSwidths(); //#8777
    var _4s = $k[--$j]; //#8777
    $_[$k[--$j]] = _4s; //#8777
    $k[$j++] = 'bwidths'; //#8778
    $k[$j++] = $_.seq % 21; //#8778
    $k[$j++] = 8; //#8778
    $k[$j++] = 3; //#8778
    $k[$j++] = 6; //#8778
    $k[$j++] = false; //#8778
    $_.getRSSwidths(); //#8778
    var _4v = $k[--$j]; //#8778
    $_[$k[--$j]] = _4v; //#8778
    $_.checkwidths = $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1]); //#8780
    for (var _4y = 0; _4y <= 5; _4y += 1) { //#8785
        $_.i = _4y; //#8782
        $put($_.checkwidths, $_.i * 2, $get($_.swidths, $_.i)); //#8783
        $put($_.checkwidths, ($_.i * 2) + 1, $get($_.bwidths, $_.i)); //#8784
    } //#8784
    $k[$j++] = Infinity; //#8788
    var _59 = $_.d1w; //#8788
    $k[$j++] = 1; //#8788
    for (var _5A = 0, _5B = _59.length; _5A < _5B; _5A++) { //#8788
        $k[$j++] = $get(_59, _5A); //#8788
    } //#8788
    var _5D = $_.checkwidths; //#8788
    for (var _5E = 0, _5F = _5D.length; _5E < _5F; _5E++) { //#8788
        $k[$j++] = $get(_5D, _5E); //#8788
    } //#8788
    var _5H = $_.d2w; //#8788
    for (var _5I = 0, _5J = _5H.length; _5I < _5J; _5I++) { //#8788
        $k[$j++] = $get(_5H, _5I); //#8788
    } //#8788
    $k[$j++] = 1; //#8788
    $k[$j++] = 1; //#8788
    $k[$j++] = 5; //#8788
    $_.sbs = $a(); //#8788
    $k[$j++] = Infinity; //#8799
    var _5M = $_.sbs; //#8794
    $k[$j++] = Infinity; //#8795
    for (var _5O = 0, _5P = ~~(($_.sbs.length + 1) / 2); _5O < _5P; _5O++) { //#8795
        $k[$j++] = $_.height; //#8795
    } //#8795
    var _5R = $a(); //#8795
    $k[$j++] = Infinity; //#8796
    for (var _5T = 0, _5U = ~~(($_.sbs.length + 1) / 2); _5T < _5U; _5T++) { //#8796
        $k[$j++] = 0; //#8796
    } //#8796
    var _5V = $a(); //#8796
    $k[$j++] = 'ren'; //#8799
    $k[$j++] = bwipp_renlinear; //#8799
    $k[$j++] = 'sbs'; //#8799
    $k[$j++] = _5M; //#8799
    $k[$j++] = 'bhs'; //#8799
    $k[$j++] = _5R; //#8799
    $k[$j++] = 'bbs'; //#8799
    $k[$j++] = _5V; //#8799
    $k[$j++] = 'txt'; //#8799
    $k[$j++] = $_.txt; //#8799
    $k[$j++] = 'textxalign'; //#8799
    $k[$j++] = "center"; //#8799
    $k[$j++] = 'opt'; //#8799
    $k[$j++] = $_.options; //#8799
    var _5Y = $d(); //#8799
    $k[$j++] = _5Y; //#8802
    if (!$_.dontdraw) { //#8802
        bwipp_renlinear(); //#8802
    } //#8802
    $_ = Object.getPrototypeOf($_); //#8804
    $_ = Object.getPrototypeOf($_); //#8806
}

function bwipp_databarexpanded() {
    $_ = Object.create($_); //#8838
    $_.parse = false; //#8841
    $_.dontlint = false; //#8842
    $_.lintreqs = true; //#8843
    $_.dontdraw = false; //#8844
    $_.height = 34 / 72; //#8845
    $_.format = "expanded"; //#8846
    $_.segments = -1; //#8847
    $_.linkage = false; //#8848
    $_.barxmult = 34; //#8849
    $k[$j++] = $_; //#8851
    bwipp_processoptions(); //#8851
    $_.options = $k[--$j]; //#8851
    $_.barcode = $k[--$j]; //#8852
    bwipp_loadctx(bwipp_databarexpanded) //#8854
    if ($_.barxmult < 34) { //#8858
        $k[$j++] = 'bwipp.databarStackedOmniBarXmult#8857'; //#8857
        $k[$j++] = "GS1 DataBar Expanded Stacked must have a barxmult of at least 34"; //#8857
        bwipp_raiseerror(); //#8857
    } //#8857
    if ($ne($_.format, "expanded") && $ne($_.format, "expandedstacked")) { //#8862
        $k[$j++] = 'bwipp.databarexpandedBadFormat#8861'; //#8861
        $k[$j++] = "Valid formats are expanded and expandedstacked"; //#8861
        bwipp_raiseerror(); //#8861
    } //#8861
    if ($_.segments == -1) { //#8868
        var _7 = $eq($_.format, "expandedstacked") ? 4 : 22; //#8865
        $_.segments = _7; //#8865
    } else { //#8868
        if ((($_.segments < 2) || ($_.segments > 22)) || (($_.segments % 2) != 0)) { //#8869
            $k[$j++] = 'bwipp.gs1databarexpandedBadSegments#8868'; //#8868
            $k[$j++] = "The number of segments must be even from 2 to 22"; //#8868
            bwipp_raiseerror(); //#8868
        } //#8868
    } //#8868
    $k[$j++] = $_.barcode; //#8872
    $k[$j++] = 'ai'; //#8872
    bwipp_gs1process(); //#8872
    $_.fncs = $k[--$j]; //#8873
    $_.vals = $k[--$j]; //#8874
    $_.ais = $k[--$j]; //#8875
    for (;;) { //#8963
        if ($_.ais.length == 2) { //#8887
            if ($eq($get($_.ais, 0), "01") && $eq($get($_.ais, 1), "3103")) { //#8886
                if ($eq($geti($get($_.vals, 0), 0, 1), "9") && ($cvi($get($_.vals, 1)) <= 32767)) { //#8885
                    $k[$j++] = "0100"; //#8884
                    $k[$j++] = false; //#8884
                    break; //#8884
                } //#8884
            } //#8884
        } //#8884
        if ($_.ais.length == 2) { //#8896
            if ($eq($get($_.ais, 0), "01") && $eq($get($_.ais, 1), "3202")) { //#8895
                if ($eq($geti($get($_.vals, 0), 0, 1), "9") && ($cvi($get($_.vals, 1)) <= 9999)) { //#8894
                    $k[$j++] = "0101"; //#8893
                    $k[$j++] = false; //#8893
                    break; //#8893
                } //#8893
            } //#8893
        } //#8893
        if ($_.ais.length == 2) { //#8905
            if ($eq($get($_.ais, 0), "01") && $eq($get($_.ais, 1), "3203")) { //#8904
                if ($eq($geti($get($_.vals, 0), 0, 1), "9") && ($cvi($get($_.vals, 1)) <= 22767)) { //#8903
                    $k[$j++] = "0101"; //#8902
                    $k[$j++] = false; //#8902
                    break; //#8902
                } //#8902
            } //#8902
        } //#8902
        var _k = $_.ais.length; //#8908
        if ((_k == 2) || (_k == 3)) { //#8939
            $k[$j++] = 'ai310x'; //#8909
            $k[$j++] = false; //#8909
            for (var _l = 3100; _l <= 3109; _l += 1) { //#8909
                var _q = $k[--$j]; //#8909
                $k[$j++] = _q || $eq($cvrs($s(4), _l, 10), $get($_.ais, 1)); //#8909
            } //#8909
            var _r = $k[--$j]; //#8909
            $_[$k[--$j]] = _r; //#8909
            $k[$j++] = 'ai320x'; //#8910
            $k[$j++] = false; //#8910
            for (var _t = 3200; _t <= 3209; _t += 1) { //#8910
                var _y = $k[--$j]; //#8910
                $k[$j++] = _y || $eq($cvrs($s(4), _t, 10), $get($_.ais, 1)); //#8910
            } //#8910
            var _z = $k[--$j]; //#8910
            $_[$k[--$j]] = _z; //#8910
            if ($_.ais.length == 3) { //#8914
                var _12 = $a(["11", "13", "15", "17"]); //#8912
                $k[$j++] = 'aibad'; //#8912
                $k[$j++] = true; //#8912
                for (var _13 = 0, _14 = _12.length; _13 < _14; _13++) { //#8912
                    var _18 = $k[--$j]; //#8912
                    $k[$j++] = _18 && $ne($get(_12, _13), $get($_.ais, 2)); //#8912
                } //#8912
                var _19 = $k[--$j]; //#8912
                $_[$k[--$j]] = _19; //#8912
            } else { //#8914
                $_.aibad = false; //#8914
            } //#8914
            if (($eq($get($_.ais, 0), "01") && ($_.ai310x || $_.ai320x)) && (!$_.aibad)) { //#8938
                if ($_.ais.length == 3) { //#8935
                    var _1P = $cvi($geti($get($_.vals, 2), 2, 2)); //#8920
                    var _1T = $cvi($geti($get($_.vals, 2), 4, 2)); //#8921
                    if ((($eq($geti($get($_.vals, 0), 0, 1), "9") && ($cvi($get($_.vals, 1)) <= 99999)) && ((_1P >= 1) && (_1P <= 12))) && ((_1T >= 0) && (_1T <= 31))) { //#8930
                        if ($_.ai310x && $eq($get($_.ais, 2), "11")) { //#8922
                            $k[$j++] = "0111000"; //#8922
                            $k[$j++] = false; //#8922
                            break; //#8922
                        } //#8922
                        if ($_.ai320x && $eq($get($_.ais, 2), "11")) { //#8923
                            $k[$j++] = "0111001"; //#8923
                            $k[$j++] = false; //#8923
                            break; //#8923
                        } //#8923
                        if ($_.ai310x && $eq($get($_.ais, 2), "13")) { //#8924
                            $k[$j++] = "0111010"; //#8924
                            $k[$j++] = false; //#8924
                            break; //#8924
                        } //#8924
                        if ($_.ai320x && $eq($get($_.ais, 2), "13")) { //#8925
                            $k[$j++] = "0111011"; //#8925
                            $k[$j++] = false; //#8925
                            break; //#8925
                        } //#8925
                        if ($_.ai310x && $eq($get($_.ais, 2), "15")) { //#8926
                            $k[$j++] = "0111100"; //#8926
                            $k[$j++] = false; //#8926
                            break; //#8926
                        } //#8926
                        if ($_.ai320x && $eq($get($_.ais, 2), "15")) { //#8927
                            $k[$j++] = "0111101"; //#8927
                            $k[$j++] = false; //#8927
                            break; //#8927
                        } //#8927
                        if ($_.ai310x && $eq($get($_.ais, 2), "17")) { //#8928
                            $k[$j++] = "0111110"; //#8928
                            $k[$j++] = false; //#8928
                            break; //#8928
                        } //#8928
                        if ($_.ai320x && $eq($get($_.ais, 2), "17")) { //#8929
                            $k[$j++] = "0111111"; //#8929
                            $k[$j++] = false; //#8929
                            break; //#8929
                        } //#8929
                    } //#8929
                } else { //#8935
                    if ($eq($geti($get($_.vals, 0), 0, 1), "9") && ($cvi($get($_.vals, 1)) <= 99999)) { //#8936
                        if ($_.ai310x) { //#8934
                            $k[$j++] = "0111000"; //#8934
                            $k[$j++] = false; //#8934
                            break; //#8934
                        } //#8934
                        if ($_.ai320x) { //#8935
                            $k[$j++] = "0111001"; //#8935
                            $k[$j++] = false; //#8935
                            break; //#8935
                        } //#8935
                    } //#8935
                } //#8935
            } //#8935
        } //#8935
        if ($_.ais.length >= 2) { //#8947
            $k[$j++] = 'ai392x'; //#8943
            $k[$j++] = false; //#8943
            for (var _20 = 3920; _20 <= 3923; _20 += 1) { //#8943
                var _25 = $k[--$j]; //#8943
                $k[$j++] = _25 || $eq($cvrs($s(4), _20, 10), $get($_.ais, 1)); //#8943
            } //#8943
            var _26 = $k[--$j]; //#8943
            $_[$k[--$j]] = _26; //#8943
            if ($eq($get($_.ais, 0), "01") && $_.ai392x) { //#8946
                if ($eq($geti($get($_.vals, 0), 0, 1), "9")) { //#8945
                    $k[$j++] = "01100"; //#8945
                    $k[$j++] = true; //#8945
                    break; //#8945
                } //#8945
            } //#8945
        } //#8945
        if ($_.ais.length >= 2) { //#8955
            $k[$j++] = 'ai393x'; //#8951
            $k[$j++] = false; //#8951
            for (var _2F = 3930; _2F <= 3933; _2F += 1) { //#8951
                var _2K = $k[--$j]; //#8951
                $k[$j++] = _2K || $eq($cvrs($s(4), _2F, 10), $get($_.ais, 1)); //#8951
            } //#8951
            var _2L = $k[--$j]; //#8951
            $_[$k[--$j]] = _2L; //#8951
            if ($eq($get($_.ais, 0), "01") && $_.ai393x) { //#8954
                if ($eq($geti($get($_.vals, 0), 0, 1), "9")) { //#8953
                    $k[$j++] = "01101"; //#8953
                    $k[$j++] = true; //#8953
                    break; //#8953
                } //#8953
            } //#8953
        } //#8953
        if ($eq($get($_.ais, 0), "01")) { //#8958
            $k[$j++] = "1"; //#8958
            $k[$j++] = true; //#8958
            break; //#8958
        } //#8958
        $k[$j++] = "00"; //#8961
        $k[$j++] = true; //#8961
        break; //#8961
    } //#8961
    $_.gpfallow = $k[--$j]; //#8964
    $_.method = $k[--$j]; //#8965
    $_.conv12to40 = function() {
        var _2Y = $strcpy($s(40), "0000000000000000000000000000000000000000"); //#8968
        var _2Z = $k[--$j]; //#8969
        var _2d = $cvrs($s(10), $cvi($geti(_2Z, 0, 3)), 2); //#8969
        $puti($geti(_2Y, 0, 10), 10 - _2d.length, _2d); //#8969
        var _2h = $cvrs($s(10), $cvi($geti(_2Z, 3, 3)), 2); //#8970
        $puti($geti(_2Y, 10, 10), 10 - _2h.length, _2h); //#8970
        var _2l = $cvrs($s(10), $cvi($geti(_2Z, 6, 3)), 2); //#8971
        $puti($geti(_2Y, 20, 10), 10 - _2l.length, _2l); //#8971
        var _2p = $cvrs($s(10), $cvi($geti(_2Z, 9, 3)), 2); //#8972
        $puti($geti(_2Y, 30, 10), 10 - _2p.length, _2p); //#8972
        $k[$j++] = _2Y; //#8973
        $k[$j++] = _2Z; //#8973
        $j--; //#8973
    }; //#8973
    $_.conv13to44 = function() {
        var _2r = $strcpy($s(44), "00000000000000000000000000000000000000000000"); //#8977
        var _2s = $k[--$j]; //#8978
        var _2w = $cvrs($s(4), $cvi($geti(_2s, 0, 1)), 2); //#8978
        $puti($geti(_2r, 0, 4), 4 - _2w.length, _2w); //#8978
        $k[$j++] = _2r; //#8979
        $k[$j++] = _2r; //#8979
        $k[$j++] = $geti(_2s, 1, 12); //#8979
        $_.conv12to40(); //#8979
        var _2y = $k[--$j]; //#8979
        $puti($k[--$j], 4, _2y); //#8979
    }; //#8979
    $_.tobin = function() {
        var _31 = $s($k[--$j]); //#8983
        $k[$j++] = _31; //#8983
        for (var _33 = 0, _32 = _31.length - 1; _33 <= _32; _33 += 1) { //#8983
            var _34 = $k[--$j]; //#8983
            $put(_34, _33, 48); //#8983
            $k[$j++] = _34; //#8983
        } //#8983
        var _35 = $k[--$j]; //#8984
        var _38 = $cvrs($s(_35.length), $k[--$j], 2); //#8984
        $puti(_35, _35.length - _38.length, _38); //#8984
        $k[$j++] = _35; //#8984
    }; //#8984
    $_.fnc1 = -1; //#8987
    $_.lnumeric = -2; //#8987
    $_.lalphanumeric = -3; //#8987
    $_.liso646 = -4; //#8987
    if ($eq($_.method, "00")) { //#8992
        $_.cdf = $a([]); //#8990
        $_.gpf = $a([]); //#8991
    } //#8991
    if ($eq($_.method, "1")) { //#9001
        $k[$j++] = 'cdf'; //#8995
        $k[$j++] = $geti($get($_.vals, 0), 0, 13); //#8995
        $_.conv13to44(); //#8995
        var _3G = $k[--$j]; //#8995
        $_[$k[--$j]] = _3G; //#8995
        $k[$j++] = Infinity; //#8996
        var _3I = $_.cdf; //#8996
        for (var _3J = 0, _3K = _3I.length; _3J < _3K; _3J++) { //#8996
            $k[$j++] = $f($get(_3I, _3J) - 48); //#8996
        } //#8996
        $_.cdf = $a(); //#8996
        $_.gpf = $a([]); //#8997
        $_.ais = $geti($_.ais, 1, $_.ais.length - 1); //#8998
        $_.vals = $geti($_.vals, 1, $_.vals.length - 1); //#8999
        $_.fncs = $geti($_.fncs, 1, $_.fncs.length - 1); //#9000
    } //#9000
    if ($eq($_.method, "0100")) { //#9012
        $_.cdf = $s(55); //#9004
        $k[$j++] = $_.cdf; //#9005
        $k[$j++] = 0; //#9005
        $k[$j++] = $geti($get($_.vals, 0), 1, 12); //#9005
        $_.conv12to40(); //#9005
        var _3d = $k[--$j]; //#9005
        var _3e = $k[--$j]; //#9005
        $puti($k[--$j], _3e, _3d); //#9005
        $k[$j++] = $_.cdf; //#9006
        $k[$j++] = 40; //#9006
        $k[$j++] = $cvi($get($_.vals, 1)); //#9006
        $k[$j++] = 15; //#9006
        $_.tobin(); //#9006
        var _3j = $k[--$j]; //#9006
        var _3k = $k[--$j]; //#9006
        $puti($k[--$j], _3k, _3j); //#9006
        $k[$j++] = Infinity; //#9007
        var _3m = $_.cdf; //#9007
        for (var _3n = 0, _3o = _3m.length; _3n < _3o; _3n++) { //#9007
            $k[$j++] = $get(_3m, _3n) - 48; //#9007
        } //#9007
        $_.cdf = $a(); //#9007
        $_.gpf = $a([]); //#9008
        $_.ais = $a([]); //#9009
        $_.vals = $a([]); //#9010
        $_.fncs = $a([]); //#9011
    } //#9011
    if ($eq($_.method, "0101")) { //#9028
        $_.cdf = $s(55); //#9015
        $k[$j++] = $_.cdf; //#9016
        $k[$j++] = 0; //#9016
        $k[$j++] = $geti($get($_.vals, 0), 1, 12); //#9016
        $_.conv12to40(); //#9016
        var _41 = $k[--$j]; //#9016
        var _42 = $k[--$j]; //#9016
        $puti($k[--$j], _42, _41); //#9016
        if ($eq($get($_.ais, 1), "3202")) { //#9020
            $k[$j++] = $cvi($get($_.vals, 1)); //#9018
            $k[$j++] = 15; //#9018
            $_.tobin(); //#9018
        } else { //#9020
            $k[$j++] = $cvi($get($_.vals, 1)) + 10000; //#9020
            $k[$j++] = 15; //#9020
            $_.tobin(); //#9020
        } //#9020
        $puti($_.cdf, 40, $k[--$j]); //#9022
        $k[$j++] = Infinity; //#9023
        var _4C = $_.cdf; //#9023
        for (var _4D = 0, _4E = _4C.length; _4D < _4E; _4D++) { //#9023
            $k[$j++] = $get(_4C, _4D) - 48; //#9023
        } //#9023
        $_.cdf = $a(); //#9023
        $_.gpf = $a([]); //#9024
        $_.ais = $a([]); //#9025
        $_.vals = $a([]); //#9026
        $_.fncs = $a([]); //#9027
    } //#9027
    if ($_.method.length == 7) { //#9050
        $_.cdf = $s(76); //#9031
        $k[$j++] = $_.cdf; //#9032
        $k[$j++] = 0; //#9032
        $k[$j++] = $geti($get($_.vals, 0), 1, 12); //#9032
        $_.conv12to40(); //#9032
        var _4R = $k[--$j]; //#9032
        var _4S = $k[--$j]; //#9032
        $puti($k[--$j], _4S, _4R); //#9032
        var _4U = $s(6); //#9033
        $puti(_4U, 0, $geti($get($_.ais, 1), 3, 1)); //#9033
        $puti(_4U, 1, $geti($get($_.vals, 1), 1, 5)); //#9034
        $k[$j++] = $cvi(_4U); //#9034
        $k[$j++] = 20; //#9034
        $_.tobin(); //#9034
        $puti($_.cdf, 40, $k[--$j]); //#9035
        if ($_.ais.length == 3) { //#9042
            var _4f = $get($_.vals, 2); //#9037
            $k[$j++] = ($cvi($geti(_4f, 0, 2)) * 384) + ((($cvi($geti(_4f, 2, 2)) - 1) * 32) + $cvi($geti(_4f, 4, 2))); //#9040
        } else { //#9042
            $k[$j++] = 38400; //#9042
        } //#9042
        $k[$j++] = 16; //#9044
        $_.tobin(); //#9044
        $puti($_.cdf, 60, $k[--$j]); //#9044
        $k[$j++] = Infinity; //#9045
        var _4l = $_.cdf; //#9045
        for (var _4m = 0, _4n = _4l.length; _4m < _4n; _4m++) { //#9045
            $k[$j++] = $get(_4l, _4m) - 48; //#9045
        } //#9045
        $_.cdf = $a(); //#9045
        $_.gpf = $a([]); //#9046
        $_.ais = $a([]); //#9047
        $_.vals = $a([]); //#9048
        $_.fncs = $a([]); //#9049
    } //#9049
    if ($eq($_.method, "01100")) { //#9061
        $_.cdf = $s(42); //#9053
        $k[$j++] = $_.cdf; //#9054
        $k[$j++] = 0; //#9054
        $k[$j++] = $geti($get($_.vals, 0), 1, 12); //#9054
        $_.conv12to40(); //#9054
        var _50 = $k[--$j]; //#9054
        var _51 = $k[--$j]; //#9054
        $puti($k[--$j], _51, _50); //#9054
        $k[$j++] = $_.cdf; //#9055
        $k[$j++] = 40; //#9055
        $k[$j++] = $cvi($geti($get($_.ais, 1), 3, 1)); //#9055
        $k[$j++] = 2; //#9055
        $_.tobin(); //#9055
        var _57 = $k[--$j]; //#9055
        var _58 = $k[--$j]; //#9055
        $puti($k[--$j], _58, _57); //#9055
        $k[$j++] = Infinity; //#9056
        var _5A = $_.cdf; //#9056
        for (var _5B = 0, _5C = _5A.length; _5B < _5C; _5B++) { //#9056
            $k[$j++] = $get(_5A, _5B) - 48; //#9056
        } //#9056
        $_.cdf = $a(); //#9056
        $k[$j++] = Infinity; //#9057
        $forall($get($_.vals, 1)); //#9057
        if ($_.ais.length > 2) { //#9057
            $k[$j++] = $_.fnc1; //#9057
        } //#9057
        $_.gpf = $a(); //#9057
        $_.ais = $geti($_.ais, 2, $_.ais.length - 2); //#9058
        $_.vals = $geti($_.vals, 2, $_.vals.length - 2); //#9059
        $_.fncs = $geti($_.fncs, 2, $_.fncs.length - 2); //#9060
    } //#9060
    if ($eq($_.method, "01101")) { //#9073
        $_.cdf = $s(52); //#9064
        $k[$j++] = $_.cdf; //#9065
        $k[$j++] = 0; //#9065
        $k[$j++] = $geti($get($_.vals, 0), 1, 12); //#9065
        $_.conv12to40(); //#9065
        var _5Z = $k[--$j]; //#9065
        var _5a = $k[--$j]; //#9065
        $puti($k[--$j], _5a, _5Z); //#9065
        $k[$j++] = $_.cdf; //#9066
        $k[$j++] = 40; //#9066
        $k[$j++] = $cvi($geti($get($_.ais, 1), 3, 1)); //#9066
        $k[$j++] = 2; //#9066
        $_.tobin(); //#9066
        var _5g = $k[--$j]; //#9066
        var _5h = $k[--$j]; //#9066
        $puti($k[--$j], _5h, _5g); //#9066
        $k[$j++] = $_.cdf; //#9067
        $k[$j++] = 42; //#9067
        $k[$j++] = $cvi($geti($get($_.vals, 1), 0, 3)); //#9067
        $k[$j++] = 10; //#9067
        $_.tobin(); //#9067
        var _5n = $k[--$j]; //#9067
        var _5o = $k[--$j]; //#9067
        $puti($k[--$j], _5o, _5n); //#9067
        $k[$j++] = Infinity; //#9068
        var _5q = $_.cdf; //#9068
        for (var _5r = 0, _5s = _5q.length; _5r < _5s; _5r++) { //#9068
            $k[$j++] = $get(_5q, _5r) - 48; //#9068
        } //#9068
        $_.cdf = $a(); //#9068
        $k[$j++] = Infinity; //#9069
        var _5w = $get($_.vals, 1); //#9069
        var _5x = $geti(_5w, 3, _5w.length - 3); //#9069
        for (var _5y = 0, _5z = _5x.length; _5y < _5z; _5y++) { //#9069
            $k[$j++] = $get(_5x, _5y); //#9069
        } //#9069
        if ($_.ais.length > 2) { //#9069
            $k[$j++] = $_.fnc1; //#9069
        } //#9069
        $_.gpf = $a(); //#9069
        $_.ais = $geti($_.ais, 2, $_.ais.length - 2); //#9070
        $_.vals = $geti($_.vals, 2, $_.vals.length - 2); //#9071
        $_.fncs = $geti($_.fncs, 2, $_.fncs.length - 2); //#9072
    } //#9072
    if ($_.gpfallow) { //#9079
        $_.vlf = $a(2); //#9077
    } else { //#9079
        $_.vlf = $a([]); //#9079
    } //#9079
    if (!bwipp_databarexpanded.__9120__) { //#9120
        $_ = Object.create($_); //#9120
        $k[$j++] = Infinity; //#9093
        for (var _6G = 0; _6G <= 119; _6G += 1) { //#9092
            var _6I = $strcpy($s(2), "00"); //#9085
            var _6K = $cvrs($s(2), _6G, 11); //#9085
            $puti(_6I, 2 - _6K.length, _6K); //#9086
            $k[$j++] = _6G; //#9087
            $k[$j++] = _6I; //#9087
            if ($get(_6I, 0) == 65) { //#9087
                var _6M = $k[--$j]; //#9087
                $put(_6M, 0, 94); //#9087
                $k[$j++] = _6M; //#9087
            } //#9087
            var _6N = $k[--$j]; //#9088
            $k[$j++] = _6N; //#9088
            if ($get(_6N, 1) == 65) { //#9088
                var _6P = $k[--$j]; //#9088
                $put(_6P, 1, 94); //#9088
                $k[$j++] = _6P; //#9088
            } //#9088
            var _6Q = $k[--$j]; //#9089
            var _6T = $strcpy($s(7), "0000000"); //#9090
            var _6V = $cvrs($s(7), $f($k[--$j] + 8), 2); //#9090
            $puti(_6T, 7 - _6V.length, _6V); //#9091
            $k[$j++] = _6Q; //#9091
            $k[$j++] = _6T; //#9091
        } //#9091
        $k[$j++] = $_.lalphanumeric; //#9093
        $k[$j++] = "0000"; //#9093
        $_.numeric = $d(); //#9094
        $k[$j++] = Infinity; //#9103
        for (var _6Y = 48; _6Y <= 57; _6Y += 1) { //#9097
            $k[$j++] = _6Y; //#9097
            $k[$j++] = _6Y - 43; //#9097
            $k[$j++] = 5; //#9097
            $_.tobin(); //#9097
        } //#9097
        $k[$j++] = $_.fnc1; //#9099
        $k[$j++] = "01111"; //#9099
        for (var _6a = 65; _6a <= 90; _6a += 1) { //#9099
            $k[$j++] = _6a; //#9099
            $k[$j++] = _6a - 33; //#9099
            $k[$j++] = 6; //#9099
            $_.tobin(); //#9099
        } //#9099
        $k[$j++] = 42; //#9101
        $k[$j++] = "111010"; //#9101
        for (var _6b = 44; _6b <= 47; _6b += 1) { //#9101
            $k[$j++] = _6b; //#9101
            $k[$j++] = _6b + 15; //#9101
            $k[$j++] = 6; //#9101
            $_.tobin(); //#9101
        } //#9101
        $k[$j++] = $_.lnumeric; //#9103
        $k[$j++] = "000"; //#9103
        $k[$j++] = $_.liso646; //#9103
        $k[$j++] = "00100"; //#9103
        $_.alphanumeric = $d(); //#9104
        $k[$j++] = Infinity; //#9118
        for (var _6f = 48; _6f <= 57; _6f += 1) { //#9107
            $k[$j++] = _6f; //#9107
            $k[$j++] = _6f - 43; //#9107
            $k[$j++] = 5; //#9107
            $_.tobin(); //#9107
        } //#9107
        $k[$j++] = $_.fnc1; //#9109
        $k[$j++] = "01111"; //#9109
        for (var _6h = 65; _6h <= 90; _6h += 1) { //#9109
            $k[$j++] = _6h; //#9109
            $k[$j++] = _6h - 1; //#9109
            $k[$j++] = 7; //#9109
            $_.tobin(); //#9109
        } //#9109
        for (var _6i = 97; _6i <= 122; _6i += 1) { //#9110
            $k[$j++] = _6i; //#9110
            $k[$j++] = _6i - 7; //#9110
            $k[$j++] = 7; //#9110
            $_.tobin(); //#9110
        } //#9110
        $k[$j++] = 33; //#9113
        $k[$j++] = "11101000"; //#9113
        $k[$j++] = 34; //#9113
        $k[$j++] = "11101001"; //#9113
        for (var _6j = 37; _6j <= 47; _6j += 1) { //#9113
            $k[$j++] = _6j; //#9113
            $k[$j++] = _6j + 197; //#9113
            $k[$j++] = 8; //#9113
            $_.tobin(); //#9113
        } //#9113
        for (var _6k = 58; _6k <= 63; _6k += 1) { //#9114
            $k[$j++] = _6k; //#9114
            $k[$j++] = _6k + 187; //#9114
            $k[$j++] = 8; //#9114
            $_.tobin(); //#9114
        } //#9114
        $k[$j++] = 95; //#9118
        $k[$j++] = "11111011"; //#9118
        $k[$j++] = 32; //#9118
        $k[$j++] = "11111100"; //#9118
        $k[$j++] = $_.lnumeric; //#9118
        $k[$j++] = "000"; //#9118
        $k[$j++] = $_.lalphanumeric; //#9118
        $k[$j++] = "00100"; //#9118
        $_.iso646 = $d(); //#9119
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_databarexpanded.$ctx[id] = $_[id]); //#9119
        bwipp_databarexpanded.__9120__ = 1; //#9119
        $_ = Object.getPrototypeOf($_); //#9119
    } //#9119
    for (var _6r = 0, _6q = $_.ais.length - 1; _6r <= _6q; _6r += 1) { //#9138
        $_.i = _6r; //#9124
        $_.ai = $get($_.ais, $_.i); //#9125
        $_.val = $get($_.vals, $_.i); //#9126
        var _71 = $a(($_.gpf.length + $_.ai.length) + $_.val.length); //#9127
        $puti(_71, 0, $_.gpf); //#9128
        $k[$j++] = _71; //#9129
        $k[$j++] = _71; //#9129
        $k[$j++] = $_.gpf.length; //#9129
        $k[$j++] = $_.ai; //#9129
        $k[$j++] = Infinity; //#9129
        var _75 = $k[--$j]; //#9129
        var _76 = $k[--$j]; //#9129
        $k[$j++] = _75; //#9129
        $forall(_76); //#9129
        var _77 = $a(); //#9129
        var _78 = $k[--$j]; //#9129
        $puti($k[--$j], _78, _77); //#9129
        var _7A = $k[--$j]; //#9130
        $k[$j++] = _7A; //#9130
        $k[$j++] = _7A; //#9130
        $k[$j++] = $_.gpf.length + $_.ai.length; //#9130
        $k[$j++] = $_.val; //#9130
        $k[$j++] = Infinity; //#9130
        var _7E = $k[--$j]; //#9130
        var _7F = $k[--$j]; //#9130
        $k[$j++] = _7E; //#9130
        $forall(_7F); //#9130
        var _7G = $a(); //#9130
        var _7H = $k[--$j]; //#9130
        $puti($k[--$j], _7H, _7G); //#9130
        $_.gpf = $k[--$j]; //#9131
        if (($_.i != ($_.ais.length - 1)) && $get($_.fncs, $_.i)) { //#9137
            var _7Q = $a($_.gpf.length + 1); //#9133
            $puti(_7Q, 0, $_.gpf); //#9134
            $put(_7Q, $_.gpf.length, $_.fnc1); //#9135
            $_.gpf = _7Q; //#9136
        } //#9136
    } //#9136
    $_.rembits = function() {
        var _7U = $k[--$j]; //#9142
        var _7V = 48; //#9144
        var _7W = (~~Math.ceil(_7U / 12)) * 12; //#9144
        if (((~~Math.ceil(_7U / 12)) * 12) < 48) { //#9144
            var _ = _7V; //#9144
            _7V = _7W; //#9144
            _7W = _; //#9144
        } //#9144
        var _7X = ~~(_7W / 12); //#9145
        $k[$j++] = _7U; //#9149
        $k[$j++] = _7W; //#9149
        $k[$j++] = _7X; //#9149
        if ((_7X % $_.segments) == 1) { //#9148
            var _7Z = $k[--$j]; //#9146
            var _7a = $k[--$j]; //#9146
            $k[$j++] = $f(_7Z + 1) * 12; //#9146
            $k[$j++] = _7a; //#9146
            $j--; //#9146
        } else { //#9148
            $j--; //#9148
        } //#9148
        var _7b = $k[--$j]; //#9150
        var _7c = $k[--$j]; //#9150
        $k[$j++] = $f(_7b - _7c); //#9150
    }; //#9150
    $_.encode = function() {
        var _7d = $k[--$j]; //#9154
        $k[$j++] = _7d; //#9154
        if ($ne(_7d, 'raw')) { //#9154
            var _7e = $k[--$j]; //#9154
            var _7g = $get(_7e, $k[--$j]); //#9154
            $k[$j++] = _7g; //#9154
        } else { //#9154
            $j--; //#9154
        } //#9154
        $k[$j++] = Infinity; //#9155
        var _7h = $k[--$j]; //#9155
        var _7i = $k[--$j]; //#9155
        $k[$j++] = _7h; //#9155
        $forall(_7i, function() { //#9155
            var _7j = $k[--$j]; //#9155
            $k[$j++] = $f(_7j - 48); //#9155
        }); //#9155
        var _7k = $a(); //#9155
        $puti($_.gpfenc, $_.j, _7k); //#9157
        $_.j = _7k.length + $_.j; //#9158
    }; //#9158
    $k[$j++] = Infinity; //#9162
    for (var _7p = 0, _7q = $_.gpf.length; _7p < _7q; _7p++) { //#9162
        $k[$j++] = 0; //#9162
    } //#9162
    $k[$j++] = 0; //#9162
    $k[$j++] = -1; //#9162
    $_.numericruns = $a(); //#9162
    $k[$j++] = Infinity; //#9163
    for (var _7t = 0, _7u = $_.gpf.length; _7t < _7u; _7t++) { //#9163
        $k[$j++] = 0; //#9163
    } //#9163
    $k[$j++] = 0; //#9163
    $_.alphanumericruns = $a(); //#9163
    $k[$j++] = Infinity; //#9164
    for (var _7x = 0, _7y = $_.gpf.length; _7x < _7y; _7x++) { //#9164
        $k[$j++] = 0; //#9164
    } //#9164
    $k[$j++] = 9999; //#9164
    $_.nextiso646only = $a(); //#9164
    for (var _81 = $_.gpf.length - 1; _81 >= 0; _81 -= 1) { //#9186
        $_.i = _81; //#9166
        var _86 = $strcpy($s(2), "00"); //#9168
        var _89 = $get($_.gpf, $_.i); //#9169
        $k[$j++] = $get($_.gpf, $_.i); //#9169
        $k[$j++] = _86; //#9169
        $k[$j++] = _86; //#9169
        $k[$j++] = 0; //#9169
        $k[$j++] = _89; //#9169
        if (_89 == $_.fnc1) { //#9169
            $j--; //#9169
            $k[$j++] = 94; //#9169
        } //#9169
        var _8B = $k[--$j]; //#9169
        var _8C = $k[--$j]; //#9169
        $put($k[--$j], _8C, _8B); //#9169
        if ($_.i < ($_.gpf.length - 1)) { //#9170
            var _8G = $k[--$j]; //#9170
            var _8J = $get($_.gpf, $_.i + 1); //#9170
            $k[$j++] = _8G; //#9170
            $k[$j++] = _8G; //#9170
            $k[$j++] = 1; //#9170
            $k[$j++] = _8J; //#9170
            if (_8J == $_.fnc1) { //#9170
                $j--; //#9170
                $k[$j++] = 94; //#9170
            } //#9170
            var _8L = $k[--$j]; //#9170
            var _8M = $k[--$j]; //#9170
            $put($k[--$j], _8M, _8L); //#9170
        } //#9170
        var _8Q = $get($_.numeric, $k[--$j]) !== undefined; //#9171
        if (_8Q) { //#9174
            $put($_.numericruns, $_.i, $f($get($_.numericruns, $_.i + 2) + 2)); //#9172
        } else { //#9174
            $put($_.numericruns, $_.i, 0); //#9174
        } //#9174
        var _8Y = $k[--$j]; //#9176
        var _8a = $get($_.alphanumeric, _8Y) !== undefined; //#9176
        $k[$j++] = _8Y; //#9180
        if (_8a) { //#9179
            $put($_.alphanumericruns, $_.i, $f($get($_.alphanumericruns, $_.i + 1) + 1)); //#9177
        } else { //#9179
            $put($_.alphanumericruns, $_.i, 0); //#9179
        } //#9179
        var _8i = $k[--$j]; //#9181
        var _8k = $get($_.iso646, _8i) !== undefined; //#9181
        var _8m = $get($_.alphanumeric, _8i) !== undefined; //#9181
        if (_8k && (!_8m)) { //#9184
            $put($_.nextiso646only, $_.i, 0); //#9182
        } else { //#9184
            $put($_.nextiso646only, $_.i, $f($get($_.nextiso646only, $_.i + 1) + 1)); //#9184
        } //#9184
    } //#9184
    $_.gpfenc = $a(252); //#9189
    $_.i = 0; //#9190
    $_.j = 0; //#9190
    $_.mode = "numeric"; //#9190
    for (;;) { //#9280
        if ($_.i == $_.gpf.length) { //#9192
            break; //#9192
        } //#9192
        for (;;) { //#9279
            if ($eq($_.mode, "numeric")) { //#9228
                if ($_.i <= ($_.gpf.length - 2)) { //#9225
                    var _90 = $s(2); //#9197
                    var _93 = $get($_.gpf, $_.i); //#9198
                    $k[$j++] = _90; //#9198
                    $k[$j++] = _90; //#9198
                    $k[$j++] = 0; //#9198
                    $k[$j++] = _93; //#9198
                    if (_93 == $_.fnc1) { //#9198
                        $j--; //#9198
                        $k[$j++] = 94; //#9198
                    } //#9198
                    var _95 = $k[--$j]; //#9198
                    var _96 = $k[--$j]; //#9198
                    $put($k[--$j], _96, _95); //#9198
                    var _98 = $k[--$j]; //#9199
                    var _9B = $get($_.gpf, $_.i + 1); //#9199
                    $k[$j++] = _98; //#9199
                    $k[$j++] = _98; //#9199
                    $k[$j++] = 1; //#9199
                    $k[$j++] = _9B; //#9199
                    if (_9B == $_.fnc1) { //#9199
                        $j--; //#9199
                        $k[$j++] = 94; //#9199
                    } //#9199
                    var _9D = $k[--$j]; //#9199
                    var _9E = $k[--$j]; //#9199
                    $put($k[--$j], _9E, _9D); //#9199
                    var _9G = $k[--$j]; //#9200
                    var _9I = $get($_.numeric, _9G) !== undefined; //#9200
                    $k[$j++] = _9G; //#9204
                    if (_9I) { //#9204
                        $k[$j++] = $_.numeric; //#9201
                        $_.encode(); //#9201
                        $_.i = $_.i + 2; //#9202
                        break; //#9203
                    } //#9203
                    $j--; //#9205
                    $k[$j++] = $_.lalphanumeric; //#9206
                    $k[$j++] = $_.numeric; //#9206
                    $_.encode(); //#9206
                    $_.mode = "alphanumeric"; //#9207
                    break; //#9208
                } else { //#9225
                    var _9P = $get($_.gpf, $_.i); //#9210
                    if ((_9P < 48) || (_9P > 57)) { //#9214
                        $k[$j++] = $_.lalphanumeric; //#9211
                        $k[$j++] = $_.numeric; //#9211
                        $_.encode(); //#9211
                        $_.mode = "alphanumeric"; //#9212
                        break; //#9213
                    } //#9213
                    $k[$j++] = 'rem'; //#9215
                    $k[$j++] = ((((12 + 1) + $_.method.length) + $_.vlf.length) + $_.cdf.length) + $_.j; //#9215
                    $_.rembits(); //#9215
                    var _9W = $k[--$j]; //#9215
                    $_[$k[--$j]] = _9W; //#9215
                    if (($_.rem >= 4) && ($_.rem <= 6)) { //#9225
                        var _9d = $geti($strcpy($s(6), "000000"), 0, $_.rem); //#9217
                        var _9i = $cvrs($s(4), $f($get($_.gpf, $_.i) - 47), 2); //#9218
                        $puti(_9d, 4 - _9i.length, _9i); //#9219
                        $k[$j++] = _9d; //#9219
                        $k[$j++] = 'raw'; //#9219
                        $_.encode(); //#9219
                        $_.i = $_.i + 1; //#9220
                        break; //#9221
                    } else { //#9225
                        var _9k = $s(2); //#9223
                        $put(_9k, 0, $get($_.gpf, $_.i)); //#9223
                        $put(_9k, 1, 94); //#9223
                        $k[$j++] = _9k; //#9223
                        $k[$j++] = $_.numeric; //#9223
                        $_.encode(); //#9223
                        $_.i = $_.i + 1; //#9224
                        break; //#9225
                    } //#9225
                } //#9225
            } //#9225
            if ($eq($_.mode, "alphanumeric")) { //#9255
                if ($get($_.gpf, $_.i) == $_.fnc1) { //#9236
                    $k[$j++] = $_.fnc1; //#9232
                    $k[$j++] = $_.alphanumeric; //#9232
                    $_.encode(); //#9232
                    $_.mode = "numeric"; //#9233
                    $_.i = $_.i + 1; //#9234
                    break; //#9235
                } //#9235
                var _A0 = $get($_.gpf, $_.i); //#9237
                var _A2 = $get($_.iso646, _A0) !== undefined; //#9237
                var _A4 = $get($_.alphanumeric, _A0) !== undefined; //#9237
                if (_A2 && (!_A4)) { //#9241
                    $k[$j++] = $_.liso646; //#9238
                    $k[$j++] = $_.alphanumeric; //#9238
                    $_.encode(); //#9238
                    $_.mode = "iso646"; //#9239
                    break; //#9240
                } //#9240
                if ($get($_.numericruns, $_.i) >= 6) { //#9246
                    $k[$j++] = $_.lnumeric; //#9243
                    $k[$j++] = $_.alphanumeric; //#9243
                    $_.encode(); //#9243
                    $_.mode = "numeric"; //#9244
                    break; //#9245
                } //#9245
                var _AE = $get($_.numericruns, $_.i); //#9247
                if ((_AE >= 4) && ($f(_AE + $_.i) == $_.gpf.length)) { //#9251
                    $k[$j++] = $_.lnumeric; //#9248
                    $k[$j++] = $_.alphanumeric; //#9248
                    $_.encode(); //#9248
                    $_.mode = "numeric"; //#9249
                    break; //#9250
                } //#9250
                $k[$j++] = $get($_.gpf, $_.i); //#9252
                $k[$j++] = $_.alphanumeric; //#9252
                $_.encode(); //#9252
                $_.i = $_.i + 1; //#9253
                break; //#9254
            } //#9254
            if ($eq($_.mode, "iso646")) { //#9277
                if ($get($_.gpf, $_.i) == $_.fnc1) { //#9263
                    $k[$j++] = $_.fnc1; //#9259
                    $k[$j++] = $_.iso646; //#9259
                    $_.encode(); //#9259
                    $_.mode = "numeric"; //#9260
                    $_.i = $_.i + 1; //#9261
                    break; //#9262
                } //#9262
                if (($get($_.numericruns, $_.i) >= 4) && ($get($_.nextiso646only, $_.i) >= 10)) { //#9268
                    $k[$j++] = $_.lnumeric; //#9265
                    $k[$j++] = $_.iso646; //#9265
                    $_.encode(); //#9265
                    $_.mode = "numeric"; //#9266
                    break; //#9267
                } //#9267
                if (($get($_.alphanumericruns, $_.i) >= 5) && ($get($_.nextiso646only, $_.i) >= 10)) { //#9273
                    $k[$j++] = $_.lalphanumeric; //#9270
                    $k[$j++] = $_.iso646; //#9270
                    $_.encode(); //#9270
                    $_.mode = "alphanumeric"; //#9271
                    break; //#9272
                } //#9272
                $k[$j++] = $get($_.gpf, $_.i); //#9274
                $k[$j++] = $_.iso646; //#9274
                $_.encode(); //#9274
                $_.i = $_.i + 1; //#9275
                break; //#9276
            } //#9276
        } //#9276
    } //#9276
    $_.gpf = $geti($_.gpfenc, 0, $_.j); //#9281
    var _Ay = ((((1 + 12) + $_.method.length) + $_.vlf.length) + $_.cdf.length) + $_.gpf.length; //#9285
    $k[$j++] = _Ay; //#9285
    $k[$j++] = _Ay; //#9285
    $_.rembits(); //#9285
    var _Az = $k[--$j]; //#9285
    $_.pad = $a(_Az); //#9285
    $k[$j++] = _Az; //#9292
    if ($_.vlf.length != 0) { //#9291
        var _B2 = $k[--$j]; //#9287
        var _B4 = ~~($f($k[--$j] + _B2) / 12); //#9288
        $put($_.vlf, 0, _B4 % 2); //#9288
        var _B6 = (_B4 <= 14) ? 0 : 1; //#9289
        $put($_.vlf, 1, _B6); //#9289
    } else { //#9291
        $j -= 2; //#9291
    } //#9291
    if ($_.pad.length > 0) { //#9301
        for (var _BB = 0, _BA = $_.pad.length - 1; _BB <= _BA; _BB += 5) { //#9297
            $_.i = _BB; //#9295
            var _BC = $_.pad; //#9296
            var _BD = $_.i; //#9296
            var _BE = $a([0, 0, 1, 0, 0]); //#9296
            var _BF = $_.pad; //#9296
            var _BG = $_.i; //#9296
            var _BH = 5; //#9296
            var _BI = _BF.length - _BG; //#9296
            if ((_BF.length - _BG) > 5) { //#9296
                var _ = _BH; //#9296
                _BH = _BI; //#9296
                _BI = _; //#9296
            } //#9296
            $puti(_BC, _BD, $geti(_BE, 0, _BI)); //#9296
        } //#9296
        if ($eq($_.mode, "numeric")) { //#9300
            $k[$j++] = Infinity; //#9299
            $k[$j++] = 0; //#9299
            $k[$j++] = 0; //#9299
            $k[$j++] = 0; //#9299
            $k[$j++] = 0; //#9299
            $aload($_.pad); //#9299
            $_.pad = $geti($a(), 0, $_.pad.length); //#9299
        } //#9299
    } //#9299
    $k[$j++] = Infinity; //#9310
    var _BQ = $_.linkage ? 1 : 0; //#9305
    $k[$j++] = _BQ; //#9306
    $forall($_.method, function() { //#9306
        var _BS = $k[--$j]; //#9306
        $k[$j++] = $f(_BS - 48); //#9306
    }); //#9306
    $aload($_.vlf); //#9307
    $aload($_.cdf); //#9308
    $aload($_.gpf); //#9309
    $aload($_.pad); //#9310
    $_.binval = $a(); //#9310
    $_.datalen = ~~($_.binval.length / 12); //#9312
    $_.ncr = function() {
        var _BZ = $k[--$j]; //#9315
        var _Ba = $k[--$j]; //#9315
        var _Bb = $f(_Ba - _BZ); //#9315
        if (_BZ < $f(_Ba - _BZ)) { //#9315
            var _ = _Bb; //#9315
            _Bb = _BZ; //#9315
            _BZ = _; //#9315
        } //#9315
        $k[$j++] = _Bb; //#9322
        $k[$j++] = 1; //#9322
        $k[$j++] = 1; //#9322
        for (var _Bd = _Ba, _Bc = $f(_BZ + 1); _Bd >= _Bc; _Bd -= 1) { //#9322
            var _Be = $k[--$j]; //#9318
            var _Bf = $k[--$j]; //#9319
            var _Bg = $k[--$j]; //#9319
            $k[$j++] = _Bg; //#9321
            $k[$j++] = _Bf; //#9321
            $k[$j++] = _Be * _Bd; //#9321
            if ($le(_Bf, _Bg)) { //#9321
                var _Bh = $k[--$j]; //#9320
                var _Bi = $k[--$j]; //#9320
                $k[$j++] = $f(_Bi + 1); //#9320
                $k[$j++] = ~~(_Bh / _Bi); //#9320
            } //#9320
        } //#9320
        for (;;) { //#9326
            var _Bj = $k[--$j]; //#9324
            var _Bk = $k[--$j]; //#9324
            var _Bl = $k[--$j]; //#9324
            $k[$j++] = _Bl; //#9324
            $k[$j++] = _Bk; //#9324
            $k[$j++] = _Bj; //#9324
            if ($gt(_Bk, _Bl)) { //#9324
                break; //#9324
            } //#9324
            var _Bm = $k[--$j]; //#9325
            var _Bn = $k[--$j]; //#9325
            $k[$j++] = $f(_Bn + 1); //#9325
            $k[$j++] = ~~(_Bm / _Bn); //#9325
        } //#9325
        var _Bo = $k[--$j]; //#9327
        var _Bp = $k[--$j]; //#9327
        $k[$j++] = _Bo; //#9327
        $k[$j++] = _Bp; //#9327
        $j--; //#9327
        var _Bq = $k[--$j]; //#9327
        var _Br = $k[--$j]; //#9327
        $k[$j++] = _Bq; //#9327
        $k[$j++] = _Br; //#9327
        $j--; //#9327
    }; //#9327
    $_.getRSSwidths = function() {
        $_.oe = $k[--$j]; //#9331
        $_.el = $k[--$j]; //#9332
        $_.mw = $k[--$j]; //#9333
        $_.nm = $k[--$j]; //#9334
        $_.val = $k[--$j]; //#9335
        $_.out = $a($_.el); //#9336
        $_.mask = 0; //#9337
        for (var _C1 = 0, _C0 = $f($_.el - 2); _C1 <= _C0; _C1 += 1) { //#9364
            $_.bar = _C1; //#9339
            $_.ew = 1; //#9340
            var _C3 = $_.bar; //#9341
            $_.mask = $_.mask | ((_C3 < 0 ? 1 >>> -_C3 : 1 << _C3)); //#9341
            for (;;) { //#9360
                $k[$j++] = 'sval'; //#9342
                $k[$j++] = $f($f($_.nm - $_.ew) - 1); //#9342
                $k[$j++] = $f($f($_.el - $_.bar) - 2); //#9342
                $_.ncr(); //#9342
                var _C8 = $k[--$j]; //#9342
                $_[$k[--$j]] = _C8; //#9342
                if (($_.oe && ($_.mask == 0)) && (($f(($f($f($_.nm - $_.ew) - ($_.el * 2))) + ($_.bar * 2))) >= -2)) { //#9345
                    $k[$j++] = 'sval'; //#9344
                    $k[$j++] = $_.sval; //#9344
                    $k[$j++] = $f(($f($f($_.nm - $_.ew) - $_.el)) + $_.bar); //#9344
                    $k[$j++] = $f($f($_.el - $_.bar) - 2); //#9344
                    $_.ncr(); //#9344
                    var _CN = $k[--$j]; //#9344
                    var _CO = $k[--$j]; //#9344
                    $_[$k[--$j]] = $f(_CO - _CN); //#9344
                } //#9344
                if ($f($_.el - $_.bar) > 2) { //#9354
                    $_.lval = 0; //#9347
                    for (var _CY = $f(($f(($f($f($_.nm - $_.ew) - $_.el)) + $_.bar)) + 2), _CX = $f($_.mw + 1); _CY >= _CX; _CY -= 1) { //#9351
                        $k[$j++] = $f(($f($f($_.nm - _CY) - $_.ew)) - 1); //#9349
                        $k[$j++] = $f($f($_.el - $_.bar) - 3); //#9349
                        $_.ncr(); //#9349
                        $_.lval = $f($k[--$j] + $_.lval); //#9350
                    } //#9350
                    $_.sval = $f($_.sval - ($_.lval * ($f($f($_.el - $_.bar) - 1)))); //#9352
                } else { //#9354
                    if ($f($_.nm - $_.ew) > $_.mw) { //#9354
                        $_.sval = $f($_.sval - 1); //#9354
                    } //#9354
                } //#9354
                $_.val = $f($_.val - $_.sval); //#9356
                if ($_.val < 0) { //#9357
                    break; //#9357
                } //#9357
                $_.ew = $_.ew + 1; //#9358
                var _Cs = $_.bar; //#9359
                $_.mask = $_.mask & (~((_Cs < 0 ? 1 >>> -_Cs : 1 << _Cs))); //#9359
            } //#9359
            $_.val = $f($_.val + $_.sval); //#9361
            $_.nm = $f($_.nm - $_.ew); //#9362
            $put($_.out, $_.bar, $_.ew); //#9363
        } //#9363
        $put($_.out, $f($_.el - 1), $_.nm); //#9365
        $k[$j++] = $_.out; //#9366
    }; //#9366
    if (!bwipp_databarexpanded.__9377__) { //#9377
        $_ = Object.create($_); //#9377
        $_.tab174 = $a([347, 0, 12, 5, 7, 2, 87, 4, 1387, 348, 10, 7, 5, 4, 52, 20, 2947, 1388, 8, 9, 4, 5, 30, 52, 3987, 2948, 6, 11, 3, 6, 10, 104, 4191, 3988, 4, 13, 1, 8, 1, 204]); //#9376
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_databarexpanded.$ctx[id] = $_[id]); //#9376
        bwipp_databarexpanded.__9377__ = 1; //#9376
        $_ = Object.getPrototypeOf($_); //#9376
    } //#9376
    $_.dxw = $a($_.datalen); //#9379
    for (var _DA = 0, _D9 = $_.datalen - 1; _DA <= _D9; _DA += 1) { //#9420
        $_.x = _DA; //#9383
        $_.d = $geti($_.binval, $_.x * 12, 12); //#9385
        $k[$j++] = 'd'; //#9386
        $k[$j++] = 0; //#9386
        for (var _DE = 0; _DE <= 11; _DE += 1) { //#9386
            $_.j = _DE; //#9386
            var _DJ = $k[--$j]; //#9386
            $k[$j++] = $f(_DJ + ((~~Math.pow(2, 11 - $_.j)) * $get($_.d, $_.j))); //#9386
        } //#9386
        var _DK = $k[--$j]; //#9386
        $_[$k[--$j]] = _DK; //#9386
        $_.j = 0; //#9388
        for (;;) { //#9398
            if ($le($_.d, $get($_.tab174, $_.j))) { //#9396
                var _DS = $geti($_.tab174, $_.j + 1, 7); //#9390
                for (var _DT = 0, _DU = _DS.length; _DT < _DU; _DT++) { //#9390
                    $k[$j++] = $get(_DS, _DT); //#9390
                } //#9390
                $_.dte = $k[--$j]; //#9391
                $_.dto = $k[--$j]; //#9391
                $_.dmwe = $k[--$j]; //#9392
                $_.dmwo = $k[--$j]; //#9392
                $_.dele = $k[--$j]; //#9393
                $_.delo = $k[--$j]; //#9393
                $_.dgs = $k[--$j]; //#9394
                break; //#9395
            } //#9395
            $_.j = $_.j + 8; //#9397
        } //#9397
        $k[$j++] = 'dwo'; //#9400
        $k[$j++] = ~~($f($_.d - $_.dgs) / $_.dte); //#9400
        $k[$j++] = $_.delo; //#9400
        $k[$j++] = $_.dmwo; //#9400
        $k[$j++] = 4; //#9400
        $k[$j++] = true; //#9400
        $_.getRSSwidths(); //#9400
        var _Dj = $k[--$j]; //#9400
        $_[$k[--$j]] = _Dj; //#9400
        $k[$j++] = 'dwe'; //#9401
        $k[$j++] = $f($_.d - $_.dgs) % $_.dte; //#9401
        $k[$j++] = $_.dele; //#9401
        $k[$j++] = $_.dmwe; //#9401
        $k[$j++] = 4; //#9401
        $k[$j++] = false; //#9401
        $_.getRSSwidths(); //#9401
        var _Dq = $k[--$j]; //#9401
        $_[$k[--$j]] = _Dq; //#9401
        $_.dw = $a(8); //#9403
        if (($_.x % 2) == 0) { //#9414
            for (var _Du = 0; _Du <= 3; _Du += 1) { //#9409
                $_.j = _Du; //#9406
                $put($_.dw, 7 - ($_.j * 2), $get($_.dwo, $_.j)); //#9407
                $put($_.dw, 6 - ($_.j * 2), $get($_.dwe, $_.j)); //#9408
            } //#9408
        } else { //#9414
            for (var _E5 = 0; _E5 <= 3; _E5 += 1) { //#9415
                $_.j = _E5; //#9412
                $put($_.dw, $_.j * 2, $get($_.dwo, $_.j)); //#9413
                $put($_.dw, ($_.j * 2) + 1, $get($_.dwe, $_.j)); //#9414
            } //#9414
        } //#9414
        $put($_.dxw, $_.x, $_.dw); //#9418
    } //#9418
    if (!bwipp_databarexpanded.__9444__) { //#9444
        $_ = Object.create($_); //#9444
        $_.finderwidths = $a([1, 8, 4, 1, 1, 1, 1, 4, 8, 1, 3, 6, 4, 1, 1, 1, 1, 4, 6, 3, 3, 4, 6, 1, 1, 1, 1, 6, 4, 3, 3, 2, 8, 1, 1, 1, 1, 8, 2, 3, 2, 6, 5, 1, 1, 1, 1, 5, 6, 2, 2, 2, 9, 1, 1, 1, 1, 9, 2, 2]); //#9430
        $_.finderseq = $a([$a([0, 1]), $a([0, 3, 2]), $a([0, 5, 2, 7]), $a([0, 9, 2, 7, 4]), $a([0, 9, 2, 7, 6, 11]), $a([0, 9, 2, 7, 8, 11, 10]), $a([0, 1, 2, 3, 4, 5, 6, 7]), $a([0, 1, 2, 3, 4, 5, 6, 9, 8]), $a([0, 1, 2, 3, 4, 5, 6, 9, 10, 11]), $a([0, 1, 2, 3, 4, 7, 6, 9, 8, 11, 10])]); //#9443
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_databarexpanded.$ctx[id] = $_[id]); //#9443
        bwipp_databarexpanded.__9444__ = 1; //#9443
        $_ = Object.getPrototypeOf($_); //#9443
    } //#9443
    $_.seq = $get($_.finderseq, ~~(($_.datalen - 2) / 2)); //#9446
    $_.fxw = $a($_.seq.length); //#9447
    for (var _Ed = 0, _Ec = $_.seq.length - 1; _Ed <= _Ec; _Ed += 1) { //#9451
        $_.x = _Ed; //#9449
        $put($_.fxw, $_.x, $geti($_.finderwidths, $get($_.seq, $_.x) * 5, 5)); //#9450
    } //#9450
    if (!bwipp_databarexpanded.__9480__) { //#9480
        $_ = Object.create($_); //#9480
        $_.checkweights = $a([-1, -1, -1, -1, -1, -1, -1, -1, 77, 96, 32, 81, 27, 9, 3, 1, 20, 60, 180, 118, 143, 7, 21, 63, 205, 209, 140, 117, 39, 13, 145, 189, 193, 157, 49, 147, 19, 57, 171, 91, 132, 44, 85, 169, 197, 136, 186, 62, 185, 133, 188, 142, 4, 12, 36, 108, 50, 87, 29, 80, 97, 173, 128, 113, 150, 28, 84, 41, 123, 158, 52, 156, 166, 196, 206, 139, 187, 203, 138, 46, 76, 17, 51, 153, 37, 111, 122, 155, 146, 119, 110, 107, 106, 176, 129, 43, 16, 48, 144, 10, 30, 90, 59, 177, 164, 125, 112, 178, 200, 137, 116, 109, 70, 210, 208, 202, 184, 130, 179, 115, 190, 204, 68, 93, 31, 151, 191, 134, 148, 22, 66, 198, 172, 94, 71, 2, 40, 154, 192, 64, 162, 54, 18, 6, 120, 149, 25, 75, 14, 42, 126, 167, 175, 199, 207, 69, 23, 78, 26, 79, 103, 98, 83, 38, 114, 131, 182, 124, 159, 53, 88, 170, 127, 183, 61, 161, 55, 165, 73, 8, 24, 72, 5, 15, 89, 100, 174, 58, 160, 194, 135, 45]); //#9479
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_databarexpanded.$ctx[id] = $_[id]); //#9479
        bwipp_databarexpanded.__9480__ = 1; //#9479
        $_ = Object.getPrototypeOf($_); //#9479
    } //#9479
    $k[$j++] = Infinity; //#9483
    $forall($_.seq, function() { //#9483
        $aload($geti($_.checkweights, $k[--$j] * 16, 16)); //#9483
    }); //#9483
    var _Er = $a(); //#9483
    $_.checkweightseq = $geti(_Er, 8, _Er.length - 8); //#9484
    $k[$j++] = Infinity; //#9487
    var _Et = $_.dxw; //#9487
    for (var _Eu = 0, _Ev = _Et.length; _Eu < _Ev; _Eu++) { //#9487
        $forall($get(_Et, _Eu)); //#9487
    } //#9487
    $_.widths = $a(); //#9487
    $_.checksum = 0; //#9490
    for (var _F0 = 0, _Ez = $_.widths.length - 1; _F0 <= _Ez; _F0 += 1) { //#9494
        $_.i = _F0; //#9492
        $_.checksum = $f($_.checksum + ($get($_.widths, $_.i) * $get($_.checkweightseq, $_.i))); //#9493
    } //#9493
    $_.checksum = $f(($_.checksum % 211) + (($_.datalen - 3) * 211)); //#9495
    $_.i = 0; //#9497
    for (;;) { //#9507
        if ($_.checksum <= $get($_.tab174, $_.i)) { //#9505
            var _FG = $geti($_.tab174, $_.i + 1, 7); //#9499
            for (var _FH = 0, _FI = _FG.length; _FH < _FI; _FH++) { //#9499
                $k[$j++] = $get(_FG, _FH); //#9499
            } //#9499
            $_.cte = $k[--$j]; //#9500
            $_.cto = $k[--$j]; //#9500
            $_.cmwe = $k[--$j]; //#9501
            $_.cmwo = $k[--$j]; //#9501
            $_.cele = $k[--$j]; //#9502
            $_.celo = $k[--$j]; //#9502
            $_.cgs = $k[--$j]; //#9503
            break; //#9504
        } //#9504
        $_.i = $_.i + 8; //#9506
    } //#9506
    $k[$j++] = 'cwo'; //#9509
    $k[$j++] = ~~($f($_.checksum - $_.cgs) / $_.cte); //#9509
    $k[$j++] = $_.celo; //#9509
    $k[$j++] = $_.cmwo; //#9509
    $k[$j++] = 4; //#9509
    $k[$j++] = true; //#9509
    $_.getRSSwidths(); //#9509
    var _FX = $k[--$j]; //#9509
    $_[$k[--$j]] = _FX; //#9509
    $k[$j++] = 'cwe'; //#9510
    $k[$j++] = $f($_.checksum - $_.cgs) % $_.cte; //#9510
    $k[$j++] = $_.cele; //#9510
    $k[$j++] = $_.cmwe; //#9510
    $k[$j++] = 4; //#9510
    $k[$j++] = false; //#9510
    $_.getRSSwidths(); //#9510
    var _Fe = $k[--$j]; //#9510
    $_[$k[--$j]] = _Fe; //#9510
    $_.cw = $a(8); //#9512
    for (var _Fh = 0; _Fh <= 3; _Fh += 1) { //#9517
        $_.i = _Fh; //#9514
        $put($_.cw, $_.i * 2, $get($_.cwo, $_.i)); //#9515
        $put($_.cw, ($_.i * 2) + 1, $get($_.cwe, $_.i)); //#9516
    } //#9516
    var _Fs = $a(22); //#9519
    $put(_Fs, 0, $_.cw); //#9520
    $puti(_Fs, 1, $_.dxw); //#9520
    $_.dxw = $geti(_Fs, 0, $_.datalen + 1); //#9521
    $_.datalen = $_.dxw.length; //#9522
    $_.rows = $a(~~Math.ceil($_.datalen / $_.segments)); //#9525
    $_.numrows = $_.rows.length; //#9526
    for (var _G4 = 0, _G3 = $_.numrows - 1; _G4 <= _G3; _G4 += 1) { //#9541
        $_.r = _G4; //#9528
        $k[$j++] = Infinity; //#9529
        if ((($_.segments % 4) != 0) && (($_.r % 2) == 1)) { //#9530
            $k[$j++] = 0; //#9530
        } //#9530
        $k[$j++] = 1; //#9538
        $k[$j++] = 1; //#9538
        for (var _G9 = 0, _G8 = $_.segments - 1; _G9 <= _G8; _G9 += 1) { //#9538
            $_.pos = _G9 + ($_.r * $_.segments); //#9533
            if ($_.pos < $_.datalen) { //#9537
                $forall($get($_.dxw, $_.pos)); //#9535
                if (($_.pos % 2) == 0) { //#9536
                    $forall($get($_.fxw, ~~($_.pos / 2))); //#9536
                } //#9536
            } //#9536
        } //#9536
        var _GL = $counttomark() + 2; //#9540
        $k[$j++] = 1; //#9540
        $k[$j++] = 1; //#9540
        $astore($a(_GL)); //#9540
        $put($_.rows, $_.r, $k[--$j]); //#9540
        $j--; //#9540
    } //#9540
    if ($ne($_.format, "expandedstacked")) { //#9669
        var _GS = $get($_.rows, 0); //#9546
        $_.sbs = $geti(_GS, 1, _GS.length - 1); //#9546
        $k[$j++] = Infinity; //#9555
        $k[$j++] = 1; //#9554
        for (var _GW = 0, _GV = $_.datalen - 1; _GW <= _GV; _GW += 1) { //#9554
            $_.i = _GW; //#9551
            $forall($get($_.dxw, $_.i)); //#9552
            if (($_.i % 2) == 0) { //#9553
                $forall($get($_.fxw, ~~($_.i / 2))); //#9553
            } //#9553
        } //#9553
        $k[$j++] = 1; //#9555
        $k[$j++] = 1; //#9555
        $_.sbs = $a(); //#9555
        delete $_.options["parse"]; //#9558
        $k[$j++] = Infinity; //#9565
        var _Gg = $_.sbs; //#9562
        $k[$j++] = Infinity; //#9563
        for (var _Gi = 0, _Gj = ~~(($_.sbs.length + 1) / 2); _Gi < _Gj; _Gi++) { //#9563
            $k[$j++] = $_.height; //#9563
        } //#9563
        var _Gl = $a(); //#9563
        $k[$j++] = Infinity; //#9564
        for (var _Gn = 0, _Go = ~~(($_.sbs.length + 1) / 2); _Gn < _Go; _Gn++) { //#9564
            $k[$j++] = 0; //#9564
        } //#9564
        var _Gp = $a(); //#9564
        $k[$j++] = 'ren'; //#9565
        $k[$j++] = bwipp_renlinear; //#9565
        $k[$j++] = 'sbs'; //#9565
        $k[$j++] = _Gg; //#9565
        $k[$j++] = 'bhs'; //#9565
        $k[$j++] = _Gl; //#9565
        $k[$j++] = 'bbs'; //#9565
        $k[$j++] = _Gp; //#9565
        $k[$j++] = 'opt'; //#9565
        $k[$j++] = $_.options; //#9565
        var _Gr = $d(); //#9565
        $k[$j++] = _Gr; //#9568
        if (!$_.dontdraw) { //#9568
            bwipp_renlinear(); //#9568
        } //#9568
    } else { //#9669
        $_.seps = $a($_.numrows); //#9572
        for (var _Gx = 0, _Gw = $_.numrows - 1; _Gx <= _Gw; _Gx += 1) { //#9628
            $_.r = _Gx; //#9575
            $_.row = $get($_.rows, $_.r); //#9576
            $k[$j++] = Infinity; //#9579
            for (var _H3 = 0, _H2 = $_.row.length - 1; _H3 <= _H2; _H3 += 2) { //#9584
                $_.i = _H3; //#9581
                for (var _H7 = 0, _H8 = $get($_.row, $_.i); _H7 < _H8; _H7++) { //#9582
                    $k[$j++] = 0; //#9582
                } //#9582
                if ($_.i < ($_.row.length - 1)) { //#9583
                    for (var _HE = 0, _HF = $get($_.row, $_.i + 1); _HE < _HF; _HE++) { //#9583
                        $k[$j++] = 1; //#9583
                    } //#9583
                } //#9583
            } //#9583
            $astore($a($counttomark())); //#9585
            $_.row = $k[--$j]; //#9585
            $j--; //#9585
            $k[$j++] = Infinity; //#9588
            $forall($_.row, function() { //#9588
                var _HK = $k[--$j]; //#9588
                $k[$j++] = $f(1 - _HK); //#9588
            }); //#9588
            $_.sep = $a(); //#9588
            $k[$j++] = Infinity; //#9591
            for (var _HO = 19, _HN = $_.row.length - 13; _HO <= _HN; _HO += 98) { //#9590
                $k[$j++] = _HO; //#9590
            } //#9590
            for (var _HR = 68, _HQ = $_.row.length - 13; _HR <= _HQ; _HR += 98) { //#9591
                $k[$j++] = _HR; //#9591
            } //#9591
            $_.finderpos = $a(); //#9591
            var _HT = $_.finderpos; //#9593
            for (var _HU = 0, _HV = _HT.length; _HU < _HV; _HU++) { //#9607
                var _HW = $get(_HT, _HU); //#9607
                for (var _HY = _HW, _HX = $f(_HW + 14); _HY <= _HX; _HY += 1) { //#9606
                    $_.i = _HY; //#9595
                    if ($get($_.row, $_.i) == 0) { //#9603
                        if ($get($_.row, $_.i - 1) == 1) { //#9600
                            $k[$j++] = 1; //#9598
                        } else { //#9600
                            var _Hi = ($get($_.sep, $_.i - 1) == 0) ? 1 : 0; //#9600
                            $k[$j++] = _Hi; //#9600
                        } //#9600
                    } else { //#9603
                        $k[$j++] = 0; //#9603
                    } //#9603
                    $put($_.sep, $_.i, $k[--$j]); //#9605
                } //#9605
            } //#9605
            $puti($_.sep, 0, $a([0, 0, 0, 0])); //#9608
            $puti($_.sep, $_.row.length - 4, $a([0, 0, 0, 0])); //#9609
            if ((($_.segments % 4) == 0) && (($_.r % 2) == 1)) { //#9623
                if (($get($_.rows, $_.r).length != $get($_.rows, 0).length) && (($_.finderpos.length % 2) == 1)) { //#9621
                    $k[$j++] = Infinity; //#9615
                    $k[$j++] = 0; //#9615
                    $aload($_.row); //#9615
                    $_.row = $a(); //#9615
                    $k[$j++] = Infinity; //#9616
                    $k[$j++] = 0; //#9616
                    $aload($_.sep); //#9616
                    $_.sep = $a(); //#9616
                } else { //#9621
                    for (var _I4 = $_.row.length - 1; _I4 >= 0; _I4 -= 1) { //#9618
                        $k[$j++] = $get($_.row, _I4); //#9618
                    } //#9618
                    $astore($_.row); //#9619
                    $j--; //#9619
                    for (var _I9 = $_.sep.length - 1; _I9 >= 0; _I9 -= 1) { //#9620
                        $k[$j++] = $get($_.sep, _I9); //#9620
                    } //#9620
                    $astore($_.sep); //#9621
                    $j--; //#9621
                } //#9621
            } //#9621
            $put($_.rows, $_.r, $_.row); //#9625
            $put($_.seps, $_.r, $_.sep); //#9626
        } //#9626
        $_.pixx = $get($_.rows, 0).length; //#9631
        $k[$j++] = Infinity; //#9632
        for (var _IM = 0, _IN = $_.pixx; _IM < _IN; _IM++) { //#9632
            $k[$j++] = 0; //#9632
        } //#9632
        var _IO = $a(); //#9632
        $puti(_IO, 0, $get($_.rows, $_.numrows - 1)); //#9632
        $put($_.rows, $_.numrows - 1, _IO); //#9633
        $k[$j++] = Infinity; //#9634
        for (var _IV = 0, _IW = $_.pixx; _IV < _IW; _IV++) { //#9634
            $k[$j++] = 0; //#9634
        } //#9634
        var _IX = $a(); //#9634
        $puti(_IX, 0, $get($_.seps, $_.numrows - 1)); //#9634
        $put($_.seps, $_.numrows - 1, _IX); //#9635
        $k[$j++] = Infinity; //#9638
        for (var _Ie = 0, _If = (~~($_.pixx / 2)) + 1; _Ie < _If; _Ie++) { //#9638
            $k[$j++] = 0; //#9638
            $k[$j++] = 1; //#9638
        } //#9638
        $_.sep = $geti($a(), 0, $_.pixx); //#9638
        $puti($_.sep, 0, $a([0, 0, 0, 0])); //#9639
        $puti($_.sep, $_.pixx - 4, $a([0, 0, 0, 0])); //#9640
        $k[$j++] = Infinity; //#9652
        for (var _Iq = 0, _Ip = $_.numrows - 1; _Iq <= _Ip; _Iq += 1) { //#9654
            $_.r = _Iq; //#9645
            if ($_.r != 0) { //#9648
                $aload($get($_.seps, $_.r)); //#9647
            } //#9647
            for (var _Iw = 0, _Ix = $_.barxmult; _Iw < _Ix; _Iw++) { //#9649
                $aload($get($_.rows, $_.r)); //#9649
            } //#9649
            if ($_.r != ($_.numrows - 1)) { //#9653
                $aload($get($_.seps, $_.r)); //#9651
                $aload($_.sep); //#9652
            } //#9652
        } //#9652
        $_.pixs = $a(); //#9652
        delete $_.options["parse"]; //#9657
        var _JH = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", ~~($_.pixs.length / $_.pixx)],
            ["height", (~~($_.pixs.length / $_.pixx)) / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#9666
        $k[$j++] = _JH; //#9669
        if (!$_.dontdraw) { //#9669
            bwipp_renmatrix(); //#9669
        } //#9669
    } //#9669
    $_ = Object.getPrototypeOf($_); //#9673
    $_ = Object.getPrototypeOf($_); //#9675
}

function bwipp_databarexpandedstacked() {
    $_ = Object.create($_); //#9704
    $_.dontdraw = false; //#9707
    $k[$j++] = $_; //#9709
    bwipp_processoptions(); //#9709
    $_.options = $k[--$j]; //#9709
    $_.barcode = $k[--$j]; //#9710
    $put($_.options, "dontdraw", true); //#9713
    $put($_.options, "format", "expandedstacked"); //#9714
    $k[$j++] = 'args'; //#9716
    $k[$j++] = $_.barcode; //#9716
    $k[$j++] = $_.options; //#9716
    bwipp_databarexpanded(); //#9716
    var _6 = $k[--$j]; //#9716
    $_[$k[--$j]] = _6; //#9716
    $put($_.args, "opt", $_.options); //#9718
    $k[$j++] = $_.args; //#9721
    if (!$_.dontdraw) { //#9721
        bwipp_renmatrix(); //#9721
    } //#9721
    $_ = Object.getPrototypeOf($_); //#9723
}

function bwipp_gs1northamericancoupon() {
    $_ = Object.create($_); //#9753
    $_.dontdraw = false; //#9756
    $_.includetext = false; //#9757
    $_.coupontextfont = "OCR-B"; //#9758
    $_.coupontextsize = 9; //#9759
    $_.coupontextxoffset = null; //#9760
    $_.coupontextyoffset = null; //#9761
    $_.parse = false; //#9762
    $_.dontlint = false; //#9763
    $_.lintreqs = true; //#9764
    $k[$j++] = $_; //#9766
    bwipp_processoptions(); //#9766
    $_.options = $k[--$j]; //#9766
    $_.barcode = $k[--$j]; //#9767
    $k[$j++] = $_.barcode; //#9769
    $k[$j++] = 'ai'; //#9769
    bwipp_gs1process(); //#9769
    $j--; //#9770
    $_.vals = $k[--$j]; //#9771
    $_.ais = $k[--$j]; //#9772
    if ($_.ais.length != 1) { //#9777
        $k[$j++] = 'bwipp.gs1northamericancouponBadAIStructure#9776'; //#9776
        $k[$j++] = "A GS1 North American Coupon should consist of a single AI (8110)"; //#9776
        bwipp_raiseerror(); //#9776
    } //#9776
    if ($ne($get($_.ais, 0), "8110")) { //#9780
        $k[$j++] = 'bwipp.gs1northamericancouponBadAIStructure#9779'; //#9779
        $k[$j++] = "A GS1 North American Coupon should consist of a single AI (8110)"; //#9779
        bwipp_raiseerror(); //#9779
    } //#9779
    $_.val = $get($_.vals, 0); //#9783
    $_.vli = $f($get($_.val, 0) - 48); //#9784
    if (($_.vli < 0) || ($_.vli > 6)) { //#9787
        $k[$j++] = 'bwipp.gs1northamericancouponBadVLI#9786'; //#9786
        $k[$j++] = "The AI (8110) data should start with a Company Prefix length indicator in the range 0 to 6"; //#9786
        bwipp_raiseerror(); //#9786
    } //#9786
    $_.gcp = $geti($_.val, 1, $f($_.vli + 6)); //#9788
    $_.cod = $geti($_.val, $f($_.vli + 7), 6); //#9789
    $_.coupontext = $s($_.gcp.length + 7); //#9790
    $puti($_.coupontext, 0, $_.gcp); //#9791
    $puti($_.coupontext, $_.gcp.length, "-"); //#9792
    $puti($_.coupontext, $_.gcp.length + 1, $_.cod); //#9793
    delete $_.options["parse"]; //#9796
    $put($_.options, "dontdraw", true); //#9797
    $k[$j++] = 'args'; //#9799
    $k[$j++] = $_.barcode; //#9799
    $k[$j++] = $_.options; //#9799
    bwipp_databarexpandedstacked(); //#9799
    var _X = $k[--$j]; //#9799
    $_[$k[--$j]] = _X; //#9799
    if ($_.includetext) { //#9818
        if ($eq($_.coupontextxoffset, null)) { //#9805
            $_.coupontextxoffset = 0; //#9804
        } //#9804
        if ($eq($_.coupontextyoffset, null)) { //#9808
            $_.coupontextyoffset = $f(($get($_.args, "height") * 72) + 3); //#9807
        } //#9807
        var _f = $get($_.args, "txt") !== undefined; //#9809
        if (_f) { //#9816
            $_.txt = $get($_.args, "txt"); //#9810
            $_.newtxt = $a($_.txt.length + 1); //#9811
            $puti($_.newtxt, 0, $_.txt); //#9812
            $put($_.newtxt, $_.newtxt.length - 1, $a([$_.coupontext, $_.coupontextxoffset, $_.coupontextyoffset, $_.coupontextfont, $_.coupontextsize])); //#9813
            $put($_.args, "txt", $_.newtxt); //#9814
        } else { //#9816
            $put($_.args, "txt", $a([$a([$_.coupontext, $_.coupontextxoffset, $_.coupontextyoffset, $_.coupontextfont, $_.coupontextsize])])); //#9816
        } //#9816
    } //#9816
    $put($_.args, "opt", $_.options); //#9820
    $k[$j++] = $_.args; //#9823
    if (!$_.dontdraw) { //#9823
        bwipp_renmatrix(); //#9823
    } //#9823
    $_ = Object.getPrototypeOf($_); //#9825
}

function bwipp_pharmacode() {
    $_ = Object.create($_); //#9853
    $_.dontdraw = false; //#9856
    $_.height = (8 * 2.835) / 72; //#9857
    $_.nwidth = 0.5 * 2.835; //#9858
    $_.wwidth = 1.5 * 2.835; //#9859
    $_.swidth = 1 * 2.835; //#9860
    $k[$j++] = $_; //#9862
    bwipp_processoptions(); //#9862
    $_.options = $k[--$j]; //#9862
    $_.barcode = $k[--$j]; //#9863
    if (($_.barcode.length < 1) || ($_.barcode.length > 6)) { //#9868
        $k[$j++] = 'bwipp.pharmacodeBadLength#9867'; //#9867
        $k[$j++] = "Pharmacode must be 1 to 6 digits"; //#9867
        bwipp_raiseerror(); //#9867
    } //#9867
    $forall($_.barcode, function() { //#9873
        var _5 = $k[--$j]; //#9870
        if ((_5 < 48) || (_5 > 57)) { //#9872
            $k[$j++] = 'bwipp.pharmacodeBadCharacter#9871'; //#9871
            $k[$j++] = "Pharmacode must contain only digits"; //#9871
            bwipp_raiseerror(); //#9871
        } //#9871
    }); //#9871
    var _7 = $cvi($_.barcode); //#9874
    if ((_7 < 3) || (_7 > 131070)) { //#9876
        $k[$j++] = 'bwipp.pharmacodeBadValue#9875'; //#9875
        $k[$j++] = "Pharmacode value must be between 3 and 131070"; //#9875
        bwipp_raiseerror(); //#9875
    } //#9875
    $_.txt = $a($_.barcode.length); //#9879
    for (var _C = 0, _B = $_.barcode.length - 1; _C <= _B; _C += 1) { //#9883
        $_.i = _C; //#9881
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), 0, 0, "", 0])); //#9882
    } //#9882
    $_.barcode = $cvrs($s(17), $cvi($_.barcode) + 1, 2); //#9886
    $_.barcode = $geti($_.barcode, 1, $_.barcode.length - 1); //#9887
    $_.barlen = $_.barcode.length; //#9889
    $_.sbs = $a($_.barlen * 2); //#9890
    for (var _U = 0, _T = $_.barlen - 1; _U <= _T; _U += 1) { //#9901
        $_.i = _U; //#9893
        $_.enc = $geti($_.barcode, $_.i, 1); //#9894
        if ($eq($_.enc, "0")) { //#9898
            $put($_.sbs, $_.i * 2, $_.nwidth); //#9896
        } else { //#9898
            $put($_.sbs, $_.i * 2, $_.wwidth); //#9898
        } //#9898
        $put($_.sbs, ($_.i * 2) + 1, $_.swidth); //#9900
    } //#9900
    $k[$j++] = Infinity; //#9911
    var _i = $_.sbs; //#9906
    $k[$j++] = Infinity; //#9907
    for (var _k = 0, _l = ~~(($_.sbs.length + 1) / 2); _k < _l; _k++) { //#9907
        $k[$j++] = $_.height; //#9907
    } //#9907
    var _n = $a(); //#9907
    $k[$j++] = Infinity; //#9908
    for (var _p = 0, _q = ~~(($_.sbs.length + 1) / 2); _p < _q; _p++) { //#9908
        $k[$j++] = 0; //#9908
    } //#9908
    var _r = $a(); //#9908
    $k[$j++] = 'ren'; //#9911
    $k[$j++] = bwipp_renlinear; //#9911
    $k[$j++] = 'sbs'; //#9911
    $k[$j++] = _i; //#9911
    $k[$j++] = 'bhs'; //#9911
    $k[$j++] = _n; //#9911
    $k[$j++] = 'bbs'; //#9911
    $k[$j++] = _r; //#9911
    $k[$j++] = 'txt'; //#9911
    $k[$j++] = $_.txt; //#9911
    $k[$j++] = 'textxalign'; //#9911
    $k[$j++] = "center"; //#9911
    $k[$j++] = 'opt'; //#9911
    $k[$j++] = $_.options; //#9911
    var _u = $d(); //#9911
    $k[$j++] = _u; //#9914
    if (!$_.dontdraw) { //#9914
        bwipp_renlinear(); //#9914
    } //#9914
    $_ = Object.getPrototypeOf($_); //#9916
}

function bwipp_pharmacode2() {
    $_ = Object.create($_); //#9944
    $_.dontdraw = false; //#9947
    $_.includetext = false; //#9948
    $_.height = 4; //#9949
    $k[$j++] = $_; //#9951
    bwipp_processoptions(); //#9951
    $_.options = $k[--$j]; //#9951
    $_.barcode = $k[--$j]; //#9952
    if (($_.barcode.length < 1) || ($_.barcode.length > 8)) { //#9957
        $k[$j++] = 'bwipp.pharmacode2BadLength#9956'; //#9956
        $k[$j++] = "Two-track Pharmacode must be 1 to 6 digits"; //#9956
        bwipp_raiseerror(); //#9956
    } //#9956
    $forall($_.barcode, function() { //#9962
        var _5 = $k[--$j]; //#9959
        if ((_5 < 48) || (_5 > 57)) { //#9961
            $k[$j++] = 'bwipp.pharmacode2badCharacter#9960'; //#9960
            $k[$j++] = "Two-track Pharmacode must contain only digits"; //#9960
            bwipp_raiseerror(); //#9960
        } //#9960
    }); //#9960
    var _7 = $cvi($_.barcode); //#9963
    if ((_7 < 4) || (_7 > 64570080)) { //#9965
        $k[$j++] = 'bwipp.pharmacode2badValue#9964'; //#9964
        $k[$j++] = "Two-track Pharmacode value must be between 4 and 64570080"; //#9964
        bwipp_raiseerror(); //#9964
    } //#9964
    $_.txt = $a($_.barcode.length); //#9968
    for (var _C = 0, _B = $_.barcode.length - 1; _C <= _B; _C += 1) { //#9972
        $_.i = _C; //#9970
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), 0, 0, "", 0])); //#9971
    } //#9971
    $_.encstr = $s(16); //#9974
    $_.sbs = $a(32); //#9975
    $_.bar = (1 / 25.4) * $_.height; //#9976
    $_.spc = (1 / 25.4) * 72; //#9977
    $_.i = 15; //#9980
    $_.val = $cvi($_.barcode); //#9981
    for (;;) { //#9988
        if ($_.val == 0) { //#9983
            break; //#9983
        } //#9983
        var _P = $_.val % 3; //#9984
        $_.val = ~~($f($_.val - $get($a([3, 1, 2]), _P)) / 3); //#9985
        $put($_.encstr, $_.i, $get($a([2, 0, 1]), _P)); //#9986
        $_.i = $_.i - 1; //#9987
    } //#9987
    $_.encstr = $geti($_.encstr, $_.i + 1, 15 - $_.i); //#9989
    $_.bhs = $a($_.encstr.length); //#9992
    $_.bbs = $a($_.encstr.length); //#9993
    for (var _i = 0, _h = $_.encstr.length - 1; _i <= _h; _i += 1) { //#9999
        $_.i = _i; //#9995
        var _l = $get($_.encstr, $_.i); //#9996
        $put($_.bhs, $_.i, $_.bar * $get($a([1, 1, 2]), _l)); //#9997
        $put($_.bbs, $_.i, $get($a([0, $_.bar, 0]), _l)); //#9998
    } //#9998
    $k[$j++] = Infinity; //#10010
    var _w = $_.bhs; //#10004
    var _x = $_.bbs; //#10005
    $k[$j++] = Infinity; //#10006
    for (var _z = 0, _10 = $_.encstr.length * 2; _z < _10; _z++) { //#10006
        $k[$j++] = $_.spc; //#10006
    } //#10006
    var _12 = $a(); //#10006
    $k[$j++] = 'ren'; //#10010
    $k[$j++] = bwipp_renlinear; //#10010
    $k[$j++] = 'bhs'; //#10010
    $k[$j++] = _w; //#10010
    $k[$j++] = 'bbs'; //#10010
    $k[$j++] = _x; //#10010
    $k[$j++] = 'sbs'; //#10010
    $k[$j++] = _12; //#10010
    $k[$j++] = 'txt'; //#10010
    $k[$j++] = $_.txt; //#10010
    $k[$j++] = 'textxalign'; //#10010
    $k[$j++] = "center"; //#10010
    $k[$j++] = 'textyoffset'; //#10010
    $k[$j++] = 4; //#10010
    $k[$j++] = 'opt'; //#10010
    $k[$j++] = $_.options; //#10010
    var _15 = $d(); //#10010
    $k[$j++] = _15; //#10013
    if (!$_.dontdraw) { //#10013
        bwipp_renlinear(); //#10013
    } //#10013
    $_ = Object.getPrototypeOf($_); //#10015
}

function bwipp_code2of5() {
    $_ = Object.create($_); //#10045
    $_.dontdraw = false; //#10048
    $_.includecheck = false; //#10049
    $_.validatecheck = false; //#10050
    $_.includetext = false; //#10051
    $_.includecheckintext = false; //#10052
    $_.textfont = "OCR-B"; //#10053
    $_.textsize = 10; //#10054
    $_.textyoffset = -8; //#10055
    $_.height = 1; //#10056
    $_.version = "industrial"; //#10057
    $k[$j++] = $_; //#10059
    bwipp_processoptions(); //#10059
    $_.options = $k[--$j]; //#10059
    $_.barcode = $k[--$j]; //#10060
    bwipp_loadctx(bwipp_code2of5) //#10062
    $forall($_.barcode, function() { //#10069
        var _3 = $k[--$j]; //#10066
        if ((_3 < 48) || (_3 > 57)) { //#10068
            $k[$j++] = 'bwipp.code2of5badCharacter#10067'; //#10067
            $k[$j++] = "Code 25 must contain only digits"; //#10067
            bwipp_raiseerror(); //#10067
        } //#10067
    }); //#10067
    $k[$j++] = 'barlen'; //#10071
    $k[$j++] = $_.barcode.length; //#10071
    if ($_.validatecheck) { //#10071
        var _6 = $k[--$j]; //#10071
        $k[$j++] = $f(_6 - 1); //#10071
    } //#10071
    var _7 = $k[--$j]; //#10071
    $_[$k[--$j]] = _7; //#10071
    $_.checksum = 0; //#10073
    for (var _B = 0, _A = $f($_.barlen - 1); _B <= _A; _B += 1) { //#10077
        $_.i = _B; //#10075
        $k[$j++] = 'checksum'; //#10076
        $k[$j++] = $_.checksum; //#10076
        $k[$j++] = $f($get($_.barcode, $_.i) - 48); //#10076
        if (($f($_.barlen - $_.i) % 2) != 0) { //#10076
            var _I = $k[--$j]; //#10076
            $k[$j++] = _I * 3; //#10076
        } //#10076
        var _J = $k[--$j]; //#10076
        var _K = $k[--$j]; //#10076
        $_[$k[--$j]] = $f(_K + _J); //#10076
    } //#10076
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#10078
    if ($_.validatecheck) { //#10085
        if ($get($_.barcode, $_.barlen) != ($_.checksum + 48)) { //#10082
            $k[$j++] = 'bwipp.code2of5badCheckDigit#10081'; //#10081
            $k[$j++] = "Incorrect Code 25 check digit provided"; //#10081
            bwipp_raiseerror(); //#10081
        } //#10081
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#10083
        $_.includecheck = true; //#10084
    } //#10084
    if (!bwipp_code2of5.__10113__) { //#10113
        $_ = Object.create($_); //#10113
        var _a = new Map([
            ["industrial", $a(["1111313111", "3111111131", "1131111131", "3131111111", "1111311131", "3111311111", "1131311111", "1111113131", "3111113111", "1131113111", "313111", "31113"])],
            ["iata", $a(["1111313111", "3111111131", "1131111131", "3131111111", "1111311131", "3111311111", "1131311111", "1111113131", "3111113111", "1131113111", "1111", "311"])],
            ["matrix", $a(["113311", "311131", "131131", "331111", "113131", "313111", "133111", "111331", "311311", "131311", "311111", "31111"])],
            ["coop", $a(["331111", "111331", "113131", "113311", "131131", "131311", "133111", "311131", "311311", "313111", "3131", "133"])],
            ["datalogic", $a(["113311", "311131", "131131", "331111", "113131", "313111", "133111", "111331", "311311", "131311", "1111", "311"])]
        ]); //#10110
        $_.versions = _a; //#10112
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code2of5.$ctx[id] = $_[id]); //#10112
        bwipp_code2of5.__10113__ = 1; //#10112
        $_ = Object.getPrototypeOf($_); //#10112
    } //#10112
    var _e = $get($_.versions, $_.version) !== undefined; //#10115
    if (!_e) { //#10117
        $k[$j++] = 'bwipp.code2of5badVersion#10116'; //#10116
        $k[$j++] = "Unrecognised Code 25 version"; //#10116
        bwipp_raiseerror(); //#10116
    } //#10116
    $_.encs = $get($_.versions, $_.version); //#10118
    $_.cs = $get($_.encs, 0).length; //#10120
    $k[$j++] = 'cw'; //#10121
    $k[$j++] = 0; //#10121
    $forall($get($_.encs, 0), function() { //#10121
        var _m = $k[--$j]; //#10121
        var _n = $k[--$j]; //#10121
        $k[$j++] = $f(_n + $f(_m - 48)); //#10121
    }); //#10121
    var _o = $k[--$j]; //#10121
    $_[$k[--$j]] = _o; //#10121
    $_.ss = $get($_.encs, 10).length; //#10122
    $k[$j++] = 'sw'; //#10123
    $k[$j++] = 0; //#10123
    $forall($get($_.encs, 10), function() { //#10123
        var _u = $k[--$j]; //#10123
        var _v = $k[--$j]; //#10123
        $k[$j++] = $f(_v + $f(_u - 48)); //#10123
    }); //#10123
    var _w = $k[--$j]; //#10123
    $_[$k[--$j]] = _w; //#10123
    $_.es = $get($_.encs, 11).length; //#10124
    if (!bwipp_code2of5.__10129__) { //#10129
        $_ = Object.create($_); //#10129
        $_.barchars = "0123456789"; //#10128
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code2of5.$ctx[id] = $_[id]); //#10128
        bwipp_code2of5.__10129__ = 1; //#10128
        $_ = Object.getPrototypeOf($_); //#10128
    } //#10128
    $k[$j++] = 'sbs'; //#10131
    $k[$j++] = $_.barlen; //#10131
    if ($_.includecheck) { //#10131
        var _13 = $k[--$j]; //#10131
        $k[$j++] = $f(_13 + 1); //#10131
    } //#10131
    var _18 = $s($f(($f(($k[--$j] * $_.cs) + $_.ss)) + $_.es)); //#10131
    $_[$k[--$j]] = _18; //#10131
    $k[$j++] = 'txt'; //#10132
    $k[$j++] = $_.barlen; //#10132
    if ($_.includecheck) { //#10132
        var _1C = $k[--$j]; //#10132
        $k[$j++] = $f(_1C + 1); //#10132
    } //#10132
    var _1E = $a($k[--$j]); //#10132
    $_[$k[--$j]] = _1E; //#10132
    $puti($_.sbs, 0, $get($_.encs, 10)); //#10135
    for (var _1L = 0, _1K = $f($_.barlen - 1); _1L <= _1K; _1L += 1) { //#10146
        $_.i = _1L; //#10137
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#10139
        $j--; //#10140
        $_.indx = $k[--$j].length; //#10141
        $j -= 2; //#10142
        $_.enc = $get($_.encs, $_.indx); //#10143
        $puti($_.sbs, ($_.i * $_.cs) + $_.ss, $_.enc); //#10144
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), $f(($_.i * $_.cw) + $_.sw), $_.textyoffset, $_.textfont, $_.textsize])); //#10145
    } //#10145
    if ($_.includecheck) { //#10158
        $puti($_.sbs, $f(($_.barlen * $_.cs) + $_.ss), $get($_.encs, $_.checksum)); //#10150
        $puti($_.sbs, $f(($f(($_.barlen * $_.cs) + $_.cs)) + $_.ss), $get($_.encs, 11)); //#10151
        if ($_.includecheckintext) { //#10155
            $put($_.txt, $_.barlen, $a([$geti($_.barchars, $_.checksum, 1), $f(($_.barlen * $_.cw) + $_.sw), $_.textyoffset, $_.textfont, $_.textsize])); //#10153
        } else { //#10155
            $put($_.txt, $_.barlen, $a([" ", $f(($_.barlen * $_.cw) + $_.sw), $_.textyoffset, $_.textfont, $_.textsize])); //#10155
        } //#10155
    } else { //#10158
        $puti($_.sbs, $f(($_.barlen * $_.cs) + $_.ss), $get($_.encs, 11)); //#10158
    } //#10158
    $k[$j++] = Infinity; //#10170
    $k[$j++] = Infinity; //#10164
    $forall($_.sbs, function() { //#10164
        var _2T = $k[--$j]; //#10164
        $k[$j++] = $f(_2T - 48); //#10164
    }); //#10164
    var _2U = $a(); //#10164
    $k[$j++] = Infinity; //#10165
    for (var _2W = 0, _2X = ~~(($_.sbs.length + 1) / 2); _2W < _2X; _2W++) { //#10165
        $k[$j++] = $_.height; //#10165
    } //#10165
    var _2Z = $a(); //#10165
    $k[$j++] = Infinity; //#10166
    for (var _2b = 0, _2c = ~~(($_.sbs.length + 1) / 2); _2b < _2c; _2b++) { //#10166
        $k[$j++] = 0; //#10166
    } //#10166
    var _2d = $a(); //#10166
    $k[$j++] = 'ren'; //#10169
    $k[$j++] = bwipp_renlinear; //#10169
    $k[$j++] = 'sbs'; //#10169
    $k[$j++] = _2U; //#10169
    $k[$j++] = 'bhs'; //#10169
    $k[$j++] = _2Z; //#10169
    $k[$j++] = 'bbs'; //#10169
    $k[$j++] = _2d; //#10169
    if ($_.includetext) { //#10169
        $k[$j++] = 'txt'; //#10168
        $k[$j++] = $_.txt; //#10168
    } //#10168
    $k[$j++] = 'opt'; //#10170
    $k[$j++] = $_.options; //#10170
    var _2h = $d(); //#10170
    $k[$j++] = _2h; //#10173
    if (!$_.dontdraw) { //#10173
        bwipp_renlinear(); //#10173
    } //#10173
    $_ = Object.getPrototypeOf($_); //#10175
    $_ = Object.getPrototypeOf($_); //#10177
}

function bwipp_industrial2of5() {
    $_ = Object.create($_); //#10206
    $_.dontdraw = false; //#10209
    $k[$j++] = $_; //#10211
    bwipp_processoptions(); //#10211
    $_.options = $k[--$j]; //#10211
    $_.barcode = $k[--$j]; //#10212
    $put($_.options, "dontdraw", true); //#10215
    $put($_.options, "version", "industrial"); //#10216
    $k[$j++] = 'args'; //#10218
    $k[$j++] = $_.barcode; //#10218
    $k[$j++] = $_.options; //#10218
    bwipp_code2of5(); //#10218
    var _6 = $k[--$j]; //#10218
    $_[$k[--$j]] = _6; //#10218
    $put($_.args, "opt", $_.options); //#10220
    $k[$j++] = $_.args; //#10223
    if (!$_.dontdraw) { //#10223
        bwipp_renlinear(); //#10223
    } //#10223
    $_ = Object.getPrototypeOf($_); //#10225
}

function bwipp_iata2of5() {
    $_ = Object.create($_); //#10254
    $_.dontdraw = false; //#10257
    $k[$j++] = $_; //#10259
    bwipp_processoptions(); //#10259
    $_.options = $k[--$j]; //#10259
    $_.barcode = $k[--$j]; //#10260
    $put($_.options, "dontdraw", true); //#10263
    $put($_.options, "version", "iata"); //#10264
    $k[$j++] = 'args'; //#10266
    $k[$j++] = $_.barcode; //#10266
    $k[$j++] = $_.options; //#10266
    bwipp_code2of5(); //#10266
    var _6 = $k[--$j]; //#10266
    $_[$k[--$j]] = _6; //#10266
    $put($_.args, "opt", $_.options); //#10268
    $k[$j++] = $_.args; //#10271
    if (!$_.dontdraw) { //#10271
        bwipp_renlinear(); //#10271
    } //#10271
    $_ = Object.getPrototypeOf($_); //#10273
}

function bwipp_matrix2of5() {
    $_ = Object.create($_); //#10302
    $_.dontdraw = false; //#10305
    $k[$j++] = $_; //#10307
    bwipp_processoptions(); //#10307
    $_.options = $k[--$j]; //#10307
    $_.barcode = $k[--$j]; //#10308
    $put($_.options, "dontdraw", true); //#10311
    $put($_.options, "version", "matrix"); //#10312
    $k[$j++] = 'args'; //#10314
    $k[$j++] = $_.barcode; //#10314
    $k[$j++] = $_.options; //#10314
    bwipp_code2of5(); //#10314
    var _6 = $k[--$j]; //#10314
    $_[$k[--$j]] = _6; //#10314
    $put($_.args, "opt", $_.options); //#10316
    $k[$j++] = $_.args; //#10319
    if (!$_.dontdraw) { //#10319
        bwipp_renlinear(); //#10319
    } //#10319
    $_ = Object.getPrototypeOf($_); //#10321
}

function bwipp_coop2of5() {
    $_ = Object.create($_); //#10350
    $_.dontdraw = false; //#10353
    $k[$j++] = $_; //#10355
    bwipp_processoptions(); //#10355
    $_.options = $k[--$j]; //#10355
    $_.barcode = $k[--$j]; //#10356
    $put($_.options, "dontdraw", true); //#10359
    $put($_.options, "version", "coop"); //#10360
    $k[$j++] = 'args'; //#10362
    $k[$j++] = $_.barcode; //#10362
    $k[$j++] = $_.options; //#10362
    bwipp_code2of5(); //#10362
    var _6 = $k[--$j]; //#10362
    $_[$k[--$j]] = _6; //#10362
    $put($_.args, "opt", $_.options); //#10364
    $k[$j++] = $_.args; //#10367
    if (!$_.dontdraw) { //#10367
        bwipp_renlinear(); //#10367
    } //#10367
    $_ = Object.getPrototypeOf($_); //#10369
}

function bwipp_datalogic2of5() {
    $_ = Object.create($_); //#10398
    $_.dontdraw = false; //#10401
    $k[$j++] = $_; //#10403
    bwipp_processoptions(); //#10403
    $_.options = $k[--$j]; //#10403
    $_.barcode = $k[--$j]; //#10404
    $put($_.options, "dontdraw", true); //#10407
    $put($_.options, "version", "datalogic"); //#10408
    $k[$j++] = 'args'; //#10410
    $k[$j++] = $_.barcode; //#10410
    $k[$j++] = $_.options; //#10410
    bwipp_code2of5(); //#10410
    var _6 = $k[--$j]; //#10410
    $_[$k[--$j]] = _6; //#10410
    $put($_.args, "opt", $_.options); //#10412
    $k[$j++] = $_.args; //#10415
    if (!$_.dontdraw) { //#10415
        bwipp_renlinear(); //#10415
    } //#10415
    $_ = Object.getPrototypeOf($_); //#10417
}

function bwipp_code11() {
    $_ = Object.create($_); //#10447
    $_.dontdraw = false; //#10450
    $_.includecheck = false; //#10451
    $_.validatecheck = false; //#10452
    $_.includetext = false; //#10453
    $_.includecheckintext = false; //#10454
    $_.textfont = "OCR-B"; //#10455
    $_.textsize = 10; //#10456
    $_.textyoffset = -8; //#10457
    $_.height = 1; //#10458
    $k[$j++] = $_; //#10460
    bwipp_processoptions(); //#10460
    $_.options = $k[--$j]; //#10460
    var _1 = $k[--$j]; //#10461
    $_.barcode = _1; //#10461
    bwipp_loadctx(bwipp_code11) //#10463
    if (!bwipp_code11.__10477__) { //#10477
        $_ = Object.create($_); //#10477
        $_.encs = $a(["111131", "311131", "131131", "331111", "113131", "313111", "133111", "111331", "311311", "311111", "113111", "113311"]); //#10471
        $_.barchars = "0123456789-"; //#10474
        $_.charvals = new Map; //#10475
        for (var _3 = 0; _3 <= 10; _3 += 1) { //#10476
            $put($_.charvals, $geti($_.barchars, _3, 1), _3); //#10476
        } //#10476
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code11.$ctx[id] = $_[id]); //#10476
        bwipp_code11.__10477__ = 1; //#10476
        $_ = Object.getPrototypeOf($_); //#10476
    } //#10476
    for (var _A = 0, _9 = $_.barcode.length - 1; _A <= _9; _A += 1) { //#10484
        var _E = $get($_.charvals, $geti($_.barcode, _A, 1)) !== undefined; //#10481
        if (!_E) { //#10483
            $k[$j++] = 'bwipp.code11badCharacter#10482'; //#10482
            $k[$j++] = "Code 11 must contain only digits and dashes"; //#10482
            bwipp_raiseerror(); //#10482
        } //#10482
    } //#10482
    $_.barlen = $_.barcode.length; //#10486
    if ($_.validatecheck) { //#10492
        if ($_.barlen == 11) { //#10490
            $k[$j++] = 'bwipp.code11badLength#10489'; //#10489
            $k[$j++] = "Code 11 cannot be 11 characters using check digits"; //#10489
            bwipp_raiseerror(); //#10489
        } //#10489
        var _K = ($_.barlen <= 10) ? 1 : 2; //#10491
        $_.barlen = $_.barlen - _K; //#10491
    } //#10491
    $k[$j++] = 'numchecks'; //#10494
    if ($_.includecheck || $_.validatecheck) { //#10494
        var _O = ($_.barlen >= 10) ? 2 : 1; //#10494
        $k[$j++] = _O; //#10494
    } else { //#10494
        $k[$j++] = 0; //#10494
    } //#10494
    var _P = $k[--$j]; //#10494
    $_[$k[--$j]] = _P; //#10494
    $_.checksum1 = 0; //#10495
    $_.checksum2 = 0; //#10495
    for (var _T = 0, _S = $_.barlen - 1; _T <= _S; _T += 1) { //#10501
        $_.i = _T; //#10497
        $_.indx = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#10498
        $_.checksum1 = $f($_.checksum1 + ((((($_.barlen - $_.i) - 1) % 10) + 1) * $_.indx)); //#10499
        $_.checksum2 = $f($_.checksum2 + (((($_.barlen - $_.i) % 9) + 1) * $_.indx)); //#10500
    } //#10500
    $_.checksum1 = $_.checksum1 % 11; //#10502
    $_.checksum2 = $f($_.checksum2 + $_.checksum1) % 11; //#10503
    if ($_.validatecheck) { //#10517
        if ($_.numchecks == 1) { //#10512
            var _r = $get($_.barchars, $_.checksum1); //#10506
            if ($get($_.barcode, $_.barlen) != _r) { //#10508
                $k[$j++] = 'bwipp.code11badCheckDigit#10507'; //#10507
                $k[$j++] = "Incorrect Code 11 check digit provided"; //#10507
                bwipp_raiseerror(); //#10507
            } //#10507
        } else { //#10512
            if (($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum1)) || ($get($_.barcode, $_.barlen + 1) != $get($_.barchars, $_.checksum2))) { //#10513
                $k[$j++] = 'bwipp.code11badCheckDigits#10512'; //#10512
                $k[$j++] = "Incorrect Code 11 check digits provided"; //#10512
                bwipp_raiseerror(); //#10512
            } //#10512
        } //#10512
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#10515
        $_.includecheck = true; //#10516
    } //#10516
    $_.sbs = $s($f(($f($_.barlen + $_.numchecks) * 6) + 12)); //#10519
    $_.txt = $a($f($_.barlen + $_.numchecks)); //#10520
    $puti($_.sbs, 0, $get($_.encs, 11)); //#10523
    $_.xpos = 8; //#10525
    for (var _1I = 0, _1H = $_.barlen - 1; _1I <= _1H; _1I += 1) { //#10535
        $_.i = _1I; //#10527
        $_.indx = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#10528
        $_.enc = $get($_.encs, $_.indx); //#10529
        $puti($_.sbs, ($_.i * 6) + 6, $_.enc); //#10530
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#10531
        for (var _1e = 0; _1e <= 5; _1e += 1) { //#10534
            $_.xpos = $f($f($get($_.enc, _1e) - 48) + $_.xpos); //#10533
        } //#10533
    } //#10533
    if ($_.includecheck) { //#10564
        if ($_.barlen >= 10) { //#10561
            $puti($_.sbs, ($_.barlen * 6) + 6, $get($_.encs, $_.checksum1)); //#10540
            $puti($_.sbs, ($_.barlen * 6) + 12, $get($_.encs, $_.checksum2)); //#10541
            if ($_.includecheckintext) { //#10551
                $put($_.txt, $_.barlen, $a([$geti($_.barchars, $_.checksum1, 1), $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#10543
                $_.enc = $get($_.encs, $_.checksum1); //#10544
                for (var _28 = 0; _28 <= 5; _28 += 1) { //#10547
                    $_.xpos = $f($f($get($_.enc, _28) - 48) + $_.xpos); //#10546
                } //#10546
                $put($_.txt, $_.barlen + 1, $a([$geti($_.barchars, $_.checksum2, 1), $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#10548
            } else { //#10551
                $put($_.txt, $_.barlen, $a(["", $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#10550
                $put($_.txt, $_.barlen + 1, $a(["", $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#10551
            } //#10551
            $puti($_.sbs, ($_.barlen * 6) + 18, $get($_.encs, 11)); //#10553
        } else { //#10561
            $puti($_.sbs, ($_.barlen * 6) + 6, $get($_.encs, $_.checksum1)); //#10555
            if ($_.includecheckintext) { //#10559
                $put($_.txt, $_.barlen, $a([$geti($_.barchars, $_.checksum1, 1), $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#10557
            } else { //#10559
                $put($_.txt, $_.barlen, $a(["", $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#10559
            } //#10559
            $puti($_.sbs, ($_.barlen * 6) + 12, $get($_.encs, 11)); //#10561
        } //#10561
    } else { //#10564
        $puti($_.sbs, ($_.barlen * 6) + 6, $get($_.encs, 11)); //#10564
    } //#10564
    $k[$j++] = Infinity; //#10576
    $k[$j++] = Infinity; //#10570
    var _39 = $_.sbs; //#10570
    for (var _3A = 0, _3B = _39.length; _3A < _3B; _3A++) { //#10570
        $k[$j++] = $get(_39, _3A) - 48; //#10570
    } //#10570
    var _3D = $a(); //#10570
    $k[$j++] = Infinity; //#10571
    for (var _3F = 0, _3G = ~~(($_.sbs.length + 1) / 2); _3F < _3G; _3F++) { //#10571
        $k[$j++] = $_.height; //#10571
    } //#10571
    var _3I = $a(); //#10571
    $k[$j++] = Infinity; //#10572
    for (var _3K = 0, _3L = ~~(($_.sbs.length + 1) / 2); _3K < _3L; _3K++) { //#10572
        $k[$j++] = 0; //#10572
    } //#10572
    var _3M = $a(); //#10572
    $k[$j++] = 'ren'; //#10575
    $k[$j++] = bwipp_renlinear; //#10575
    $k[$j++] = 'sbs'; //#10575
    $k[$j++] = _3D; //#10575
    $k[$j++] = 'bhs'; //#10575
    $k[$j++] = _3I; //#10575
    $k[$j++] = 'bbs'; //#10575
    $k[$j++] = _3M; //#10575
    if ($_.includetext) { //#10575
        $k[$j++] = 'txt'; //#10574
        $k[$j++] = $_.txt; //#10574
    } //#10574
    $k[$j++] = 'opt'; //#10576
    $k[$j++] = $_.options; //#10576
    var _3Q = $d(); //#10576
    $k[$j++] = _3Q; //#10579
    if (!$_.dontdraw) { //#10579
        bwipp_renlinear(); //#10579
    } //#10579
    $_ = Object.getPrototypeOf($_); //#10581
    $_ = Object.getPrototypeOf($_); //#10583
}

function bwipp_bc412() {
    $_ = Object.create($_); //#10613
    $_.dontdraw = false; //#10616
    $_.includecheck = false; //#10617
    $_.validatecheck = false; //#10618
    $_.includetext = false; //#10619
    $_.includecheckintext = false; //#10620
    $_.includestartstop = false; //#10621
    $_.semi = false; //#10622
    $_.textfont = "OCR-B"; //#10623
    $_.textsize = 10; //#10624
    $_.textyoffset = -8; //#10625
    $_.height = 1; //#10626
    $k[$j++] = $_; //#10628
    bwipp_processoptions(); //#10628
    $_.options = $k[--$j]; //#10628
    $_.barcode = $k[--$j]; //#10629
    if ($_.semi) { //#10634
        $_.includestartstop = true; //#10633
    } //#10633
    bwipp_loadctx(bwipp_bc412) //#10636
    if (!bwipp_bc412.__10643__) { //#10643
        $_ = Object.create($_); //#10643
        $_.barchars = "0R9GLVHA8EZ4NTS1J2Q6C7DYKBUIX3FWP5M"; //#10640
        $_.charvals = new Map; //#10641
        for (var _3 = 0; _3 <= 34; _3 += 1) { //#10642
            $put($_.charvals, $geti($_.barchars, _3, 1), _3); //#10642
        } //#10642
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_bc412.$ctx[id] = $_[id]); //#10642
        bwipp_bc412.__10643__ = 1; //#10642
        $_ = Object.getPrototypeOf($_); //#10642
    } //#10642
    for (var _A = 0, _9 = $_.barcode.length - 1; _A <= _9; _A += 1) { //#10650
        var _E = $get($_.charvals, $geti($_.barcode, _A, 1)) !== undefined; //#10647
        if (!_E) { //#10649
            $k[$j++] = 'bwipp.bc412badCharacter#10648'; //#10648
            $k[$j++] = "BC412 must contain only digits and capital letters except O"; //#10648
            bwipp_raiseerror(); //#10648
        } //#10648
    } //#10648
    if ($_.semi) { //#10706
        if ($_.validatecheck) { //#10660
            if (($_.barcode.length < 8) || ($_.barcode.length > 19)) { //#10657
                $k[$j++] = 'bwipp.bc412semivalidateBadLength#10656'; //#10656
                $k[$j++] = "BC412 semi with check digit must be 8 to 19 characters long"; //#10656
                bwipp_raiseerror(); //#10656
            } //#10656
        } else { //#10660
            if (($_.barcode.length < 7) || ($_.barcode.length > 18)) { //#10661
                $k[$j++] = 'bwipp.bc412semiBadLength#10660'; //#10660
                $k[$j++] = "BC412 semi must be 7 to 18 characters long"; //#10660
                bwipp_raiseerror(); //#10660
            } //#10660
        } //#10660
        $_.barlen = $_.barcode.length; //#10664
        if (!$_.validatecheck) { //#10672
            $_.barlen = $_.barlen + 1; //#10666
            $_.sbarcode = $s($_.barlen); //#10667
            $put($_.sbarcode, 0, $get($_.barcode, 0)); //#10668
            $put($_.sbarcode, 1, 48); //#10669
            $puti($_.sbarcode, 2, $geti($_.barcode, 1, $_.barlen - 2)); //#10670
            $_.barcode = $_.sbarcode; //#10671
        } //#10671
        $_.sumodd = 0; //#10673
        $_.sumeven = 0; //#10673
        for (var _b = 0, _a = $_.barlen - 1; _b <= _a; _b += 1) { //#10682
            $_.i = _b; //#10675
            $k[$j++] = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#10681
            if (($_.i % 2) == 0) { //#10680
                $_.sumodd = $f($k[--$j] + $_.sumodd); //#10678
            } else { //#10680
                $_.sumeven = $f($k[--$j] + $_.sumeven); //#10680
            } //#10680
        } //#10680
        $_.checksum = ($f(($_.sumodd % 35) + (($_.sumeven % 35) * 2))) % 35; //#10683
        if ($_.validatecheck) { //#10690
            if ($_.checksum != 0) { //#10687
                $k[$j++] = 'bwipp.bc412semiBadCheckDigit#10686'; //#10686
                $k[$j++] = "Incorrect BC412 semi check digit provided"; //#10686
                bwipp_raiseerror(); //#10686
            } //#10686
        } else { //#10690
            $_.checksum = ($_.checksum * 17) % 35; //#10689
            $put($_.barcode, 1, $get($_.barchars, $_.checksum)); //#10690
        } //#10690
    } else { //#10706
        $k[$j++] = 'barlen'; //#10693
        $k[$j++] = $_.barcode.length; //#10693
        if ($_.validatecheck) { //#10693
            var _x = $k[--$j]; //#10693
            $k[$j++] = $f(_x - 1); //#10693
        } //#10693
        var _y = $k[--$j]; //#10693
        $_[$k[--$j]] = _y; //#10693
        $_.checksum = 0; //#10695
        for (var _12 = 0, _11 = $_.barlen - 1; _12 <= _11; _12 += 1) { //#10699
            $_.checksum = $f($get($_.charvals, $geti($_.barcode, _12, 1)) + $_.checksum); //#10698
        } //#10698
        $_.checksum = $_.checksum % 35; //#10700
        if ($_.validatecheck) { //#10707
            if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#10704
                $k[$j++] = 'bwipp.bc412badCheckDigit#10703'; //#10703
                $k[$j++] = "Incorrect BC412 check digit provided"; //#10703
                bwipp_raiseerror(); //#10703
            } //#10703
            $_.barcode = $geti($_.barcode, 0, $_.barlen); //#10705
            $_.includecheck = true; //#10706
        } //#10706
    } //#10706
    if (!bwipp_bc412.__10722__) { //#10722
        $_ = Object.create($_); //#10722
        $_.encs = $a(["11111115", "13111212", "11131113", "12111213", "12121311", "13131111", "12111312", "11131212", "11121411", "11151111", "15111111", "11111511", "12131211", "13121112", "13111311", "11111214", "12121113", "11111313", "13111113", "11121213", "11141112", "11121312", "11141211", "14121111", "12121212", "11131311", "13121211", "12111411", "14111211", "11111412", "12111114", "14111112", "12141111", "11121114", "12131112", "12", "111"]); //#10721
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_bc412.$ctx[id] = $_[id]); //#10721
        bwipp_bc412.__10722__ = 1; //#10721
        $_ = Object.getPrototypeOf($_); //#10721
    } //#10721
    $_.sbs = $s((($_.barlen + 1) * 8) + 5); //#10724
    if ($_.includecheck) { //#10728
        $_.txt = $a($_.barlen + 1); //#10726
    } else { //#10728
        $_.txt = $a($_.barlen); //#10728
    } //#10728
    if ($_.includestartstop) { //#10738
        $puti($_.sbs, 0, $get($_.encs, 35)); //#10733
        $_.pos = 2; //#10734
        $_.txtpos = 3; //#10735
    } else { //#10738
        $_.pos = 0; //#10737
        $_.txtpos = 0; //#10738
    } //#10738
    for (var _1Y = 0, _1X = $_.barlen - 1; _1Y <= _1X; _1Y += 1) { //#10747
        $_.i = _1Y; //#10742
        $_.indx = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#10743
        $puti($_.sbs, $_.pos, $get($_.encs, $_.indx)); //#10744
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ($_.i * 12) + $_.txtpos, $_.textyoffset, $_.textfont, $_.textsize])); //#10745
        $_.pos = $_.pos + 8; //#10746
    } //#10746
    if ($_.includecheck) { //#10758
        $puti($_.sbs, $_.pos, $get($_.encs, $_.checksum)); //#10751
        if ($_.includecheckintext) { //#10755
            $put($_.txt, $_.barlen, $a([$geti($_.barchars, $_.checksum, 1), ($_.barlen * 12) + $_.txtpos, $_.textyoffset, $_.textfont, $_.textsize])); //#10753
        } else { //#10755
            $put($_.txt, $_.barlen, $a(["", ($_.barlen * 12) + $_.txtpos, $_.textyoffset, $_.textfont, $_.textsize])); //#10755
        } //#10755
        $_.pos = $_.pos + 8; //#10757
    } //#10757
    if ($_.includestartstop) { //#10764
        $puti($_.sbs, $_.pos, $get($_.encs, 36)); //#10762
        $_.pos = $_.pos + 3; //#10763
    } //#10763
    $_.sbs = $geti($_.sbs, 0, $_.pos); //#10767
    $k[$j++] = Infinity; //#10776
    $k[$j++] = Infinity; //#10770
    var _2V = $_.sbs; //#10770
    for (var _2W = 0, _2X = _2V.length; _2W < _2X; _2W++) { //#10770
        $k[$j++] = $f($get(_2V, _2W) - 48); //#10770
    } //#10770
    var _2Z = $a(); //#10770
    $k[$j++] = Infinity; //#10771
    for (var _2b = 0, _2c = ~~(($_.sbs.length + 1) / 2); _2b < _2c; _2b++) { //#10771
        $k[$j++] = $_.height; //#10771
    } //#10771
    var _2e = $a(); //#10771
    $k[$j++] = Infinity; //#10772
    for (var _2g = 0, _2h = ~~(($_.sbs.length + 1) / 2); _2g < _2h; _2g++) { //#10772
        $k[$j++] = 0; //#10772
    } //#10772
    var _2i = $a(); //#10772
    $k[$j++] = 'ren'; //#10775
    $k[$j++] = bwipp_renlinear; //#10775
    $k[$j++] = 'sbs'; //#10775
    $k[$j++] = _2Z; //#10775
    $k[$j++] = 'bhs'; //#10775
    $k[$j++] = _2e; //#10775
    $k[$j++] = 'bbs'; //#10775
    $k[$j++] = _2i; //#10775
    if ($_.includetext) { //#10775
        $k[$j++] = 'txt'; //#10774
        $k[$j++] = $_.txt; //#10774
    } //#10774
    $k[$j++] = 'opt'; //#10776
    $k[$j++] = $_.options; //#10776
    var _2m = $d(); //#10776
    $k[$j++] = _2m; //#10779
    if (!$_.dontdraw) { //#10779
        bwipp_renlinear(); //#10779
    } //#10779
    $_ = Object.getPrototypeOf($_); //#10781
    $_ = Object.getPrototypeOf($_); //#10783
}

function bwipp_rationalizedCodabar() {
    $_ = Object.create($_); //#10813
    $_.dontdraw = false; //#10816
    $_.altstartstop = false; //#10817
    $_.includecheck = false; //#10818
    $_.validatecheck = false; //#10819
    $_.includetext = false; //#10820
    $_.includecheckintext = false; //#10821
    $_.textfont = "OCR-B"; //#10822
    $_.textsize = 10; //#10823
    $_.textyoffset = -8; //#10824
    $_.height = 1; //#10825
    $k[$j++] = $_; //#10827
    bwipp_processoptions(); //#10827
    $_.options = $k[--$j]; //#10827
    var _1 = $k[--$j]; //#10828
    $_.barcode = _1; //#10828
    bwipp_loadctx(bwipp_rationalizedCodabar) //#10830
    if (!bwipp_rationalizedCodabar.__10844__) { //#10844
        $_ = Object.create($_); //#10844
        $_.encs = $a(["11111331", "11113311", "11131131", "33111111", "11311311", "31111311", "13111131", "13113111", "13311111", "31131111", "11133111", "11331111", "31113131", "31311131", "31313111", "11313131", "11331311", "13131131", "11131331", "11133311"]); //#10839
        $_.barcharsnormal = "0123456789-$:/.+ABCD"; //#10842
        $_.barcharsalt = "0123456789-$:/.+TN*E"; //#10843
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_rationalizedCodabar.$ctx[id] = $_[id]); //#10843
        bwipp_rationalizedCodabar.__10844__ = 1; //#10843
        $_ = Object.getPrototypeOf($_); //#10843
    } //#10843
    var _5 = $_.altstartstop ? $_.barcharsalt : $_.barcharsnormal; //#10846
    $_.barchars = _5; //#10846
    $_.charvals = new Map; //#10848
    for (var _6 = 0; _6 <= 19; _6 += 1) { //#10849
        $put($_.charvals, $geti($_.barchars, _6, 1), _6); //#10849
    } //#10849
    $_.bodyvals = new Map; //#10850
    for (var _A = 0; _A <= 15; _A += 1) { //#10851
        $put($_.bodyvals, $geti($_.barchars, _A, 1), _A); //#10851
    } //#10851
    $_.ssvals = new Map; //#10852
    for (var _E = 16; _E <= 19; _E += 1) { //#10853
        $put($_.ssvals, $geti($_.barchars, _E, 1), _E); //#10853
    } //#10853
    var _L = $get($_.ssvals, $geti($_.barcode, 0, 1)) !== undefined; //#10856
    var _Q = $get($_.ssvals, $geti($_.barcode, $_.barcode.length - 1, 1)) !== undefined; //#10857
    if ((!_L) || (!_Q)) { //#10863
        if ($_.altstartstop) { //#10861
            $k[$j++] = 'bwipp.rationalizedCodabarBadAltStartStop#10859'; //#10859
            $k[$j++] = "Codabar start and stop characters must be one of E N T or *"; //#10859
            bwipp_raiseerror(); //#10859
        } else { //#10861
            $k[$j++] = 'bwipp.rationalizedCodabarBadStartStop#10861'; //#10861
            $k[$j++] = "Codabar start and stop characters must be one of A B C or D"; //#10861
            bwipp_raiseerror(); //#10861
        } //#10861
    } //#10861
    for (var _U = 1, _T = $_.barcode.length - 2; _U <= _T; _U += 1) { //#10868
        var _Y = $get($_.bodyvals, $geti($_.barcode, _U, 1)) !== undefined; //#10865
        if (!_Y) { //#10867
            $k[$j++] = 'bwipp.rationalizedCodabarBadCharacter#10866'; //#10866
            $k[$j++] = "Codabar body must contain only digits and symbols - $ : / . +"; //#10866
            bwipp_raiseerror(); //#10866
        } //#10866
    } //#10866
    $k[$j++] = 'barlen'; //#10870
    $k[$j++] = $_.barcode.length; //#10870
    if ($_.validatecheck) { //#10870
        var _b = $k[--$j]; //#10870
        $k[$j++] = $f(_b - 1); //#10870
    } //#10870
    var _c = $k[--$j]; //#10870
    $_[$k[--$j]] = _c; //#10870
    $_.checksum = 0; //#10872
    for (var _g = 0, _f = $f($_.barlen - 2); _g <= _f; _g += 1) { //#10876
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _g, 1)) + $_.checksum); //#10875
    } //#10875
    $_.checksum = $f($get($_.charvals, $geti($_.barcode, $_.barcode.length - 1, 1)) + $_.checksum); //#10878
    $_.checksum = ($f(16 - ($_.checksum % 16))) % 16; //#10879
    if ($_.validatecheck) { //#10889
        if ($get($_.barcode, $f($_.barlen - 1)) != $get($_.barchars, $_.checksum)) { //#10883
            $k[$j++] = 'bwipp.rationalizedCodabarBadCheckDigit#10882'; //#10882
            $k[$j++] = "Incorrect Codabar check digit provided"; //#10882
            bwipp_raiseerror(); //#10882
        } //#10882
        var _11 = $s($_.barlen); //#10884
        $puti(_11, 0, $geti($_.barcode, 0, $f($_.barlen - 1))); //#10885
        $puti(_11, $f($_.barlen - 1), $geti($_.barcode, $_.barlen, 1)); //#10886
        $_.barcode = _11; //#10887
        $_.includecheck = true; //#10888
    } //#10888
    $k[$j++] = 'sbs'; //#10891
    $k[$j++] = $_.barlen; //#10891
    if ($_.includecheck) { //#10891
        var _1B = $k[--$j]; //#10891
        $k[$j++] = $f(_1B + 1); //#10891
    } //#10891
    var _1D = $s($k[--$j] * 8); //#10891
    $_[$k[--$j]] = _1D; //#10891
    $k[$j++] = 'txt'; //#10892
    $k[$j++] = $_.barlen; //#10892
    if ($_.includecheck) { //#10892
        var _1H = $k[--$j]; //#10892
        $k[$j++] = $f(_1H + 1); //#10892
    } //#10892
    var _1J = $a($k[--$j]); //#10892
    $_[$k[--$j]] = _1J; //#10892
    $_.xpos = 0; //#10894
    for (var _1N = 0, _1M = $f($_.barlen - 2); _1N <= _1M; _1N += 1) { //#10904
        $_.i = _1N; //#10896
        $_.indx = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#10897
        $_.enc = $get($_.encs, $_.indx); //#10898
        $puti($_.sbs, $_.i * 8, $_.enc); //#10899
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#10900
        for (var _1j = 0; _1j <= 7; _1j += 1) { //#10903
            $_.xpos = $f($f($get($_.enc, _1j) - 48) + $_.xpos); //#10902
        } //#10902
    } //#10902
    if ($_.includecheck) { //#10928
        $puti($_.sbs, $f(($_.barlen * 8) - 8), $get($_.encs, $_.checksum)); //#10909
        if ($_.includecheckintext) { //#10913
            $put($_.txt, $f($_.barlen - 1), $a([$geti($_.barchars, $_.checksum, 1), $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#10911
        } else { //#10913
            $put($_.txt, $f($_.barlen - 1), $a([" ", $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#10913
        } //#10913
        for (var _2B = 0; _2B <= 7; _2B += 1) { //#10917
            $_.xpos = $f($f($get($get($_.encs, $_.checksum), _2B) - 48) + $_.xpos); //#10916
        } //#10916
        $_.indx = $get($_.charvals, $geti($_.barcode, $f($_.barlen - 1), 1)); //#10919
        $_.enc = $get($_.encs, $_.indx); //#10920
        $puti($_.sbs, $_.barlen * 8, $_.enc); //#10921
        $put($_.txt, $_.barlen, $a([$geti($_.barcode, $f($_.barlen - 1), 1), $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#10922
    } else { //#10928
        $_.indx = $get($_.charvals, $geti($_.barcode, $f($_.barlen - 1), 1)); //#10925
        $_.enc = $get($_.encs, $_.indx); //#10926
        $puti($_.sbs, $f(($_.barlen * 8) - 8), $_.enc); //#10927
        $put($_.txt, $f($_.barlen - 1), $a([$geti($_.barcode, $f($_.barlen - 1), 1), $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#10928
    } //#10928
    $k[$j++] = Infinity; //#10940
    $k[$j++] = Infinity; //#10934
    $forall($_.sbs, function() { //#10934
        var _2y = $k[--$j]; //#10934
        $k[$j++] = $f(_2y - 48); //#10934
    }); //#10934
    var _2z = $a(); //#10934
    $k[$j++] = Infinity; //#10935
    for (var _31 = 0, _32 = ~~(($_.sbs.length + 1) / 2); _31 < _32; _31++) { //#10935
        $k[$j++] = $_.height; //#10935
    } //#10935
    var _34 = $a(); //#10935
    $k[$j++] = Infinity; //#10936
    for (var _36 = 0, _37 = ~~(($_.sbs.length + 1) / 2); _36 < _37; _36++) { //#10936
        $k[$j++] = 0; //#10936
    } //#10936
    var _38 = $a(); //#10936
    $k[$j++] = 'ren'; //#10939
    $k[$j++] = bwipp_renlinear; //#10939
    $k[$j++] = 'sbs'; //#10939
    $k[$j++] = _2z; //#10939
    $k[$j++] = 'bhs'; //#10939
    $k[$j++] = _34; //#10939
    $k[$j++] = 'bbs'; //#10939
    $k[$j++] = _38; //#10939
    if ($_.includetext) { //#10939
        $k[$j++] = 'txt'; //#10938
        $k[$j++] = $_.txt; //#10938
    } //#10938
    $k[$j++] = 'opt'; //#10940
    $k[$j++] = $_.options; //#10940
    var _3C = $d(); //#10940
    $k[$j++] = _3C; //#10943
    if (!$_.dontdraw) { //#10943
        bwipp_renlinear(); //#10943
    } //#10943
    $_ = Object.getPrototypeOf($_); //#10945
    $_ = Object.getPrototypeOf($_); //#10947
}

function bwipp_onecode() {
    $_ = Object.create($_); //#10977
    $_.dontdraw = false; //#10980
    $_.height = 0.15; //#10981
    $k[$j++] = $_; //#10983
    bwipp_processoptions(); //#10983
    $_.options = $k[--$j]; //#10983
    $_.barcode = $k[--$j]; //#10984
    bwipp_loadctx(bwipp_onecode) //#10986
    $_.barlen = $_.barcode.length; //#10988
    $forall($_.barcode, function() { //#10994
        var _4 = $k[--$j]; //#10991
        if ((_4 < 48) || (_4 > 57)) { //#10993
            $k[$j++] = 'bwipp.onecodeBadCharacter#10992'; //#10992
            $k[$j++] = "The data must contain only digits"; //#10992
            bwipp_raiseerror(); //#10992
        } //#10992
    }); //#10992
    if (((($_.barlen != 20) && ($_.barlen != 25)) && ($_.barlen != 29)) && ($_.barlen != 31)) { //#10998
        $k[$j++] = 'bwipp.onecodeInvalidLength#10997'; //#10997
        $k[$j++] = "The data must be 20, 25, 29 or 31 digits"; //#10997
        bwipp_raiseerror(); //#10997
    } //#10997
    $k[$j++] = Infinity; //#11007
    var _B = $eq($geti($_.barcode, 5, 1), "9") ? 14 : 11; //#11004
    $k[$j++] = 2; //#11007
    $k[$j++] = 2; //#11007
    $k[$j++] = 5; //#11007
    $k[$j++] = 5; //#11007
    $k[$j++] = _B; //#11007
    $k[$j++] = _B; //#11007
    $k[$j++] = 20; //#11007
    $k[$j++] = 20; //#11007
    $k[$j++] = 25; //#11007
    $k[$j++] = 25; //#11007
    $k[$j++] = 29; //#11007
    $k[$j++] = 29; //#11007
    $_.txtdict = $d(); //#11008
    $_.txt = $a($_.barlen + 6); //#11009
    $_.spacecnt = 0; //#11010
    for (var _H = 0, _G = $_.barlen - 1; _H <= _G; _H += 1) { //#11018
        $_.i = _H; //#11012
        var _K = $get($_.txtdict, $_.i) !== undefined; //#11013
        if (_K) { //#11016
            $put($_.txt, $_.i + $_.spacecnt, $a([" ", 0, 0, "", 0])); //#11014
            $_.spacecnt = $_.spacecnt + 1; //#11015
        } //#11015
        $put($_.txt, $_.i + $_.spacecnt, $a([$geti($_.barcode, $_.i, 1), 0, 0, "", 0])); //#11017
    } //#11017
    $_.txt = $geti($_.txt, 0, $_.barcode.length + $_.spacecnt); //#11019
    $_.normalize = function() {
        $_.base = $k[--$j]; //#11022
        $_.num = $k[--$j]; //#11023
        for (var _e = $_.num.length - 1; _e >= 1; _e -= 1) { //#11028
            $_.i = _e; //#11025
            var _f = $_.num; //#11026
            var _g = $_.i; //#11026
            $put(_f, _g - 1, $f($get(_f, _g - 1) + (~~($get($_.num, $_.i) / $_.base)))); //#11026
            $put($_.num, $_.i, $get($_.num, $_.i) % $_.base); //#11027
        } //#11027
        for (;;) { //#11034
            if ($lt($get($_.num, 0), $_.base)) { //#11030
                break; //#11030
            } //#11030
            $k[$j++] = Infinity; //#11031
            $k[$j++] = 0; //#11031
            $aload($_.num); //#11031
            $_.num = $a(); //#11031
            $put($_.num, 0, $f($get($_.num, 0) + (~~($get($_.num, 1) / $_.base)))); //#11032
            $put($_.num, 1, $get($_.num, 1) % $_.base); //#11033
        } //#11033
        $k[$j++] = Infinity; //#11036
        $_.i = true; //#11036
        var _17 = $_.num; //#11036
        for (var _18 = 0, _19 = _17.length; _18 < _19; _18++) { //#11036
            var _1A = $get(_17, _18); //#11036
            $k[$j++] = _1A; //#11036
            if ((_1A == 0) && $_.i) { //#11036
                $j--; //#11036
            } else { //#11036
                $_.i = false; //#11036
            } //#11036
        } //#11036
        $_.num = $a(); //#11036
        if ($_.num.length == 0) { //#11037
            $_.num = $a([0]); //#11037
        } //#11037
        $k[$j++] = $_.num; //#11038
    }; //#11038
    $_.bigadd = function() {
        var _1G = $k[--$j]; //#11042
        var _1H = $k[--$j]; //#11042
        $_.offset = Math.abs(_1G.length - _1H.length); //#11043
        if (_1G.length < _1H.length) { //#11044
            var _ = _1G; //#11044
            _1G = _1H; //#11044
            _1H = _; //#11044
        } //#11044
        $_.a = _1G; //#11045
        $_.b = _1H; //#11045
        for (var _1K = 0, _1J = $_.b.length - 1; _1K <= _1J; _1K += 1) { //#11048
            var _1L = $_.a; //#11047
            var _1M = $_.offset; //#11047
            $put(_1L, _1K + _1M, $f($get(_1L, _1K + _1M) + $get($_.b, _1K))); //#11047
        } //#11047
        $k[$j++] = $_.a; //#11049
    }; //#11049
    if (!bwipp_onecode.__11060__) { //#11060
        $_ = Object.create($_); //#11060
        var _1V = new Map([
            [20, $a([0])],
            [25, $a([1])],
            [29, $a([1, 0, 0, 0, 0, 1])],
            [31, $a([1, 0, 0, 0, 1, 0, 0, 0, 0, 1])]
        ]); //#11058
        $_.startvals = _1V; //#11059
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_onecode.$ctx[id] = $_[id]); //#11059
        bwipp_onecode.__11060__ = 1; //#11059
        $_ = Object.getPrototypeOf($_); //#11059
    } //#11059
    $k[$j++] = 'binval'; //#11062
    $k[$j++] = $get($_.startvals, $_.barlen); //#11062
    $k[$j++] = Infinity; //#11062
    var _1c = $geti($_.barcode, 20, $_.barlen - 20); //#11062
    for (var _1d = 0, _1e = _1c.length; _1d < _1e; _1d++) { //#11062
        $k[$j++] = $f($get(_1c, _1d) - 48); //#11062
    } //#11062
    var _1g = $a(); //#11062
    $k[$j++] = _1g; //#11062
    $_.bigadd(); //#11062
    var _1h = $k[--$j]; //#11062
    $_[$k[--$j]] = _1h; //#11062
    $k[$j++] = Infinity; //#11063
    $aload($_.binval); //#11063
    $k[$j++] = $f($get($_.barcode, 0) - 48); //#11063
    $_.binval = $a(); //#11063
    $k[$j++] = Infinity; //#11064
    var _1n = $_.binval; //#11064
    for (var _1o = 0, _1p = _1n.length; _1o < _1p; _1o++) { //#11064
        $k[$j++] = $get(_1n, _1o) * 5; //#11064
    } //#11064
    var _1r = $a(); //#11064
    $k[$j++] = 'binval'; //#11064
    $k[$j++] = _1r; //#11064
    $k[$j++] = $a([$f($get($_.barcode, 1) - 48)]); //#11064
    $_.bigadd(); //#11064
    $k[$j++] = 10; //#11064
    $_.normalize(); //#11064
    var _1v = $k[--$j]; //#11064
    $_[$k[--$j]] = _1v; //#11064
    $k[$j++] = Infinity; //#11065
    $aload($_.binval); //#11065
    var _1z = $geti($_.barcode, 2, 18); //#11065
    for (var _20 = 0, _21 = _1z.length; _20 < _21; _20++) { //#11065
        $k[$j++] = $f($get(_1z, _20) - 48); //#11065
    } //#11065
    $_.binval = $a(); //#11065
    $_.bytes = $a(13); //#11068
    var _25 = $_.binval; //#11069
    $_.bintmp = $arrcpy($a(_25.length), _25); //#11069
    for (var _28 = 12; _28 >= 0; _28 -= 1) { //#11079
        $_.i = _28; //#11071
        for (var _2B = 0, _2A = $_.bintmp.length - 2; _2B <= _2A; _2B += 1) { //#11076
            $_.j = _2B; //#11073
            var _2C = $_.bintmp; //#11074
            var _2D = $_.j; //#11074
            $put(_2C, _2D + 1, $f($get(_2C, _2D + 1) + (($get($_.bintmp, $_.j) % 256) * 10))); //#11074
            $put($_.bintmp, $_.j, ~~($get($_.bintmp, $_.j) / 256)); //#11075
        } //#11075
        $put($_.bytes, $_.i, $get($_.bintmp, $_.bintmp.length - 1) % 256); //#11077
        var _2S = $_.bintmp; //#11078
        var _2T = $_.bintmp; //#11078
        $put(_2S, _2T.length - 1, ~~($get(_2S, _2T.length - 1) / 256)); //#11078
    } //#11078
    $_.fcs = 2047; //#11082
    $_.dat = $get($_.bytes, 0) << 5; //#11083
    for (var _2X = 0, _2Y = 6; _2X < _2Y; _2X++) { //#11092
        if ((($_.fcs ^ $_.dat) & 1024) != 0) { //#11088
            $_.fcs = ($_.fcs << 1) ^ 3893; //#11086
        } else { //#11088
            $_.fcs = $_.fcs << 1; //#11088
        } //#11088
        $_.fcs = $_.fcs & 2047; //#11090
        $_.dat = $_.dat << 1; //#11091
    } //#11091
    for (var _2f = 1; _2f <= 12; _2f += 1) { //#11104
        $_.dat = $get($_.bytes, _2f) << 3; //#11094
        for (var _2i = 0, _2j = 8; _2i < _2j; _2i++) { //#11103
            if ((($_.fcs ^ $_.dat) & 1024) != 0) { //#11099
                $_.fcs = ($_.fcs << 1) ^ 3893; //#11097
            } else { //#11099
                $_.fcs = $_.fcs << 1; //#11099
            } //#11099
            $_.fcs = $_.fcs & 2047; //#11101
            $_.dat = $_.dat << 1; //#11102
        } //#11102
    } //#11102
    $_.codewords = $a(10); //#11107
    for (var _2r = 9; _2r >= 0; _2r -= 1) { //#11118
        $_.i = _2r; //#11109
        var _2t = ($_.i == 9) ? 636 : 1365; //#11110
        $_.b = _2t; //#11110
        for (var _2w = 0, _2v = $_.binval.length - 2; _2w <= _2v; _2w += 1) { //#11115
            $_.j = _2w; //#11112
            var _2x = $_.binval; //#11113
            var _2y = $_.j; //#11113
            $put(_2x, _2y + 1, $f($get(_2x, _2y + 1) + (($get($_.binval, $_.j) % $_.b) * 10))); //#11113
            $put($_.binval, $_.j, ~~($get($_.binval, $_.j) / $_.b)); //#11114
        } //#11114
        $put($_.codewords, $_.i, $get($_.binval, $_.binval.length - 1) % $_.b); //#11116
        var _3G = $_.binval; //#11117
        var _3H = $_.binval; //#11117
        $put(_3G, _3H.length - 1, ~~($get(_3G, _3H.length - 1) / $_.b)); //#11117
    } //#11117
    $put($_.codewords, 9, $get($_.codewords, 9) * 2); //#11121
    if (($_.fcs & 1024) != 0) { //#11124
        $put($_.codewords, 0, $f($get($_.codewords, 0) + 659)); //#11123
    } //#11123
    if (!bwipp_onecode.__11225__) { //#11225
        $_ = Object.create($_); //#11225
        $_.tab513 = $a([31, 7936, 47, 7808, 55, 7552, 59, 7040, 61, 6016, 62, 3968, 79, 7744, 87, 7488, 91, 6976, 93, 5952, 94, 3904, 103, 7360, 107, 6848, 109, 5824, 110, 3776, 115, 6592, 117, 5568, 118, 3520, 121, 5056, 122, 3008, 124, 1984, 143, 7712, 151, 7456, 155, 6944, 157, 5920, 158, 3872, 167, 7328, 171, 6816, 173, 5792, 174, 3744, 179, 6560, 181, 5536, 182, 3488, 185, 5024, 186, 2976, 188, 1952, 199, 7264, 203, 6752, 205, 5728, 206, 3680, 211, 6496, 213, 5472, 214, 3424, 217, 4960, 218, 2912, 220, 1888, 227, 6368, 229, 5344, 230, 3296, 233, 4832, 234, 2784, 236, 1760, 241, 4576, 242, 2528, 244, 1504, 248, 992, 271, 7696, 279, 7440, 283, 6928, 285, 5904, 286, 3856, 295, 7312, 299, 6800, 301, 5776, 302, 3728, 307, 6544, 309, 5520, 310, 3472, 313, 5008, 314, 2960, 316, 1936, 327, 7248, 331, 6736, 333, 5712, 334, 3664, 339, 6480, 341, 5456, 342, 3408, 345, 4944, 346, 2896, 348, 1872, 355, 6352, 357, 5328, 358, 3280, 361, 4816, 362, 2768, 364, 1744, 369, 4560, 370, 2512, 372, 1488, 376, 976, 391, 7216, 395, 6704, 397, 5680, 398, 3632, 403, 6448, 405, 5424, 406, 3376, 409, 4912, 410, 2864, 412, 1840, 419, 6320, 421, 5296, 422, 3248, 425, 4784, 426, 2736, 428, 1712, 433, 4528, 434, 2480, 436, 1456, 440, 944, 451, 6256, 453, 5232, 454, 3184, 457, 4720, 458, 2672, 460, 1648, 465, 4464, 466, 2416, 468, 1392, 472, 880, 481, 4336, 482, 2288, 484, 1264, 488, 752, 527, 7688, 535, 7432, 539, 6920, 541, 5896, 542, 3848, 551, 7304, 555, 6792, 557, 5768, 558, 3720, 563, 6536, 565, 5512, 566, 3464, 569, 5000, 570, 2952, 572, 1928, 583, 7240, 587, 6728, 589, 5704, 590, 3656, 595, 6472, 597, 5448, 598, 3400, 601, 4936, 602, 2888, 604, 1864, 611, 6344, 613, 5320, 614, 3272, 617, 4808, 618, 2760, 620, 1736, 625, 4552, 626, 2504, 628, 1480, 632, 968, 647, 7208, 651, 6696, 653, 5672, 654, 3624, 659, 6440, 661, 5416, 662, 3368, 665, 4904, 666, 2856, 668, 1832, 675, 6312, 677, 5288, 678, 3240, 681, 4776, 682, 2728, 684, 1704, 689, 4520, 690, 2472, 692, 1448, 696, 936, 707, 6248, 709, 5224, 710, 3176, 713, 4712, 714, 2664, 716, 1640, 721, 4456, 722, 2408, 724, 1384, 728, 872, 737, 4328, 738, 2280, 740, 1256, 775, 7192, 779, 6680, 781, 5656, 782, 3608, 787, 6424, 789, 5400, 790, 3352, 793, 4888, 794, 2840, 796, 1816, 803, 6296, 805, 5272, 806, 3224, 809, 4760, 810, 2712, 812, 1688, 817, 4504, 818, 2456, 820, 1432, 824, 920, 835, 6232, 837, 5208, 838, 3160, 841, 4696, 842, 2648, 844, 1624, 849, 4440, 850, 2392, 852, 1368, 865, 4312, 866, 2264, 868, 1240, 899, 6200, 901, 5176, 902, 3128, 905, 4664, 906, 2616, 908, 1592, 913, 4408, 914, 2360, 916, 1336, 929, 4280, 930, 2232, 932, 1208, 961, 4216, 962, 2168, 964, 1144, 1039, 7684, 1047, 7428, 1051, 6916, 1053, 5892, 1054, 3844, 1063, 7300, 1067, 6788, 1069, 5764, 1070, 3716, 1075, 6532, 1077, 5508, 1078, 3460, 1081, 4996, 1082, 2948, 1084, 1924, 1095, 7236, 1099, 6724, 1101, 5700, 1102, 3652, 1107, 6468, 1109, 5444, 1110, 3396, 1113, 4932, 1114, 2884, 1116, 1860, 1123, 6340, 1125, 5316, 1126, 3268, 1129, 4804, 1130, 2756, 1132, 1732, 1137, 4548, 1138, 2500, 1140, 1476, 1159, 7204, 1163, 6692, 1165, 5668, 1166, 3620, 1171, 6436, 1173, 5412, 1174, 3364, 1177, 4900, 1178, 2852, 1180, 1828, 1187, 6308, 1189, 5284, 1190, 3236, 1193, 4772, 1194, 2724, 1196, 1700, 1201, 4516, 1202, 2468, 1204, 1444, 1219, 6244, 1221, 5220, 1222, 3172, 1225, 4708, 1226, 2660, 1228, 1636, 1233, 4452, 1234, 2404, 1236, 1380, 1249, 4324, 1250, 2276, 1287, 7188, 1291, 6676, 1293, 5652, 1294, 3604, 1299, 6420, 1301, 5396, 1302, 3348, 1305, 4884, 1306, 2836, 1308, 1812, 1315, 6292, 1317, 5268, 1318, 3220, 1321, 4756, 1322, 2708, 1324, 1684, 1329, 4500, 1330, 2452, 1332, 1428, 1347, 6228, 1349, 5204, 1350, 3156, 1353, 4692, 1354, 2644, 1356, 1620, 1361, 4436, 1362, 2388, 1377, 4308, 1378, 2260, 1411, 6196, 1413, 5172, 1414, 3124, 1417, 4660, 1418, 2612, 1420, 1588, 1425, 4404, 1426, 2356, 1441, 4276, 1442, 2228, 1473, 4212, 1474, 2164, 1543, 7180, 1547, 6668, 1549, 5644, 1550, 3596, 1555, 6412, 1557, 5388, 1558, 3340, 1561, 4876, 1562, 2828, 1564, 1804, 1571, 6284, 1573, 5260, 1574, 3212, 1577, 4748, 1578, 2700, 1580, 1676, 1585, 4492, 1586, 2444, 1603, 6220, 1605, 5196, 1606, 3148, 1609, 4684, 1610, 2636, 1617, 4428, 1618, 2380, 1633, 4300, 1634, 2252, 1667, 6188, 1669, 5164, 1670, 3116, 1673, 4652, 1674, 2604, 1681, 4396, 1682, 2348, 1697, 4268, 1698, 2220, 1729, 4204, 1730, 2156, 1795, 6172, 1797, 5148, 1798, 3100, 1801, 4636, 1802, 2588, 1809, 4380, 1810, 2332, 1825, 4252, 1826, 2204, 1857, 4188, 1858, 2140, 1921, 4156, 1922, 2108, 2063, 7682, 2071, 7426, 2075, 6914, 2077, 5890, 2078, 3842, 2087, 7298, 2091, 6786, 2093, 5762, 2094, 3714, 2099, 6530, 2101, 5506, 2102, 3458, 2105, 4994, 2106, 2946, 2119, 7234, 2123, 6722, 2125, 5698, 2126, 3650, 2131, 6466, 2133, 5442, 2134, 3394, 2137, 4930, 2138, 2882, 2147, 6338, 2149, 5314, 2150, 3266, 2153, 4802, 2154, 2754, 2161, 4546, 2162, 2498, 2183, 7202, 2187, 6690, 2189, 5666, 2190, 3618, 2195, 6434, 2197, 5410, 2198, 3362, 2201, 4898, 2202, 2850, 2211, 6306, 2213, 5282, 2214, 3234, 2217, 4770, 2218, 2722, 2225, 4514, 2226, 2466, 2243, 6242, 2245, 5218, 2246, 3170, 2249, 4706, 2250, 2658, 2257, 4450, 2258, 2402, 2273, 4322, 2311, 7186, 2315, 6674, 2317, 5650, 2318, 3602, 2323, 6418, 2325, 5394, 2326, 3346, 2329, 4882, 2330, 2834, 2339, 6290, 2341, 5266, 2342, 3218, 2345, 4754, 2346, 2706, 2353, 4498, 2354, 2450, 2371, 6226, 2373, 5202, 2374, 3154, 2377, 4690, 2378, 2642, 2385, 4434, 2401, 4306, 2435, 6194, 2437, 5170, 2438, 3122, 2441, 4658, 2442, 2610, 2449, 4402, 2465, 4274, 2497, 4210, 2567, 7178, 2571, 6666, 2573, 5642, 2574, 3594, 2579, 6410, 2581, 5386, 2582, 3338, 2585, 4874, 2586, 2826, 2595, 6282, 2597, 5258, 2598, 3210, 2601, 4746, 2602, 2698, 2609, 4490, 2627, 6218, 2629, 5194, 2630, 3146, 2633, 4682, 2641, 4426, 2657, 4298, 2691, 6186, 2693, 5162, 2694, 3114, 2697, 4650, 2705, 4394, 2721, 4266, 2753, 4202, 2819, 6170, 2821, 5146, 2822, 3098, 2825, 4634, 2833, 4378, 2849, 4250, 2881, 4186, 2945, 4154, 3079, 7174, 3083, 6662, 3085, 5638, 3086, 3590, 3091, 6406, 3093, 5382, 3094, 3334, 3097, 4870, 3107, 6278, 3109, 5254, 3110, 3206, 3113, 4742, 3121, 4486, 3139, 6214, 3141, 5190, 3145, 4678, 3153, 4422, 3169, 4294, 3203, 6182, 3205, 5158, 3209, 4646, 3217, 4390, 3233, 4262, 3265, 4198, 3331, 6166, 3333, 5142, 3337, 4630, 3345, 4374, 3361, 4246, 3393, 4182, 3457, 4150, 3587, 6158, 3589, 5134, 3593, 4622, 3601, 4366, 3617, 4238, 3649, 4174, 3713, 4142, 3841, 4126, 4111, 7681, 4119, 7425, 4123, 6913, 4125, 5889, 4135, 7297, 4139, 6785, 4141, 5761, 4147, 6529, 4149, 5505, 4153, 4993, 4167, 7233, 4171, 6721, 4173, 5697, 4179, 6465, 4181, 5441, 4185, 4929, 4195, 6337, 4197, 5313, 4201, 4801, 4209, 4545, 4231, 7201, 4235, 6689, 4237, 5665, 4243, 6433, 4245, 5409, 4249, 4897, 4259, 6305, 4261, 5281, 4265, 4769, 4273, 4513, 4291, 6241, 4293, 5217, 4297, 4705, 4305, 4449, 4359, 7185, 4363, 6673, 4365, 5649, 4371, 6417, 4373, 5393, 4377, 4881, 4387, 6289, 4389, 5265, 4393, 4753, 4401, 4497, 4419, 6225, 4421, 5201, 4425, 4689, 4483, 6193, 4485, 5169, 4489, 4657, 4615, 7177, 4619, 6665, 4621, 5641, 4627, 6409, 4629, 5385, 4633, 4873, 4643, 6281, 4645, 5257, 4649, 4745, 4675, 6217, 4677, 5193, 4739, 6185, 4741, 5161, 4867, 6169, 4869, 5145, 5127, 7173, 5131, 6661, 5133, 5637, 5139, 6405, 5141, 5381, 5155, 6277, 5157, 5253, 5187, 6213, 5251, 6181, 5379, 6165, 5635, 6157, 6151, 7171, 6155, 6659, 6163, 6403, 6179, 6275, 6211, 5189, 4681, 4433, 4321, 3142, 2634, 2386, 2274, 1612, 1364, 1252, 856, 744, 496]); //#11215
        $_.tab213 = $a([3, 6144, 5, 5120, 6, 3072, 9, 4608, 10, 2560, 12, 1536, 17, 4352, 18, 2304, 20, 1280, 24, 768, 33, 4224, 34, 2176, 36, 1152, 40, 640, 48, 384, 65, 4160, 66, 2112, 68, 1088, 72, 576, 80, 320, 96, 192, 129, 4128, 130, 2080, 132, 1056, 136, 544, 144, 288, 257, 4112, 258, 2064, 260, 1040, 264, 528, 513, 4104, 514, 2056, 516, 1032, 1025, 4100, 1026, 2052, 2049, 4098, 4097, 2050, 1028, 520, 272, 160]); //#11224
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_onecode.$ctx[id] = $_[id]); //#11224
        bwipp_onecode.__11225__ = 1; //#11224
        $_ = Object.getPrototypeOf($_); //#11224
    } //#11224
    $_.chars = $a(10); //#11227
    for (var _3V = 0; _3V <= 9; _3V += 1) { //#11236
        $_.i = _3V; //#11229
        var _3Y = $get($_.codewords, $_.i); //#11230
        $k[$j++] = _3Y; //#11234
        if (_3Y <= 1286) { //#11233
            var _3b = $get($_.tab513, $k[--$j]); //#11231
            $k[$j++] = _3b; //#11231
        } else { //#11233
            var _3e = $get($_.tab213, $f($k[--$j] - 1287)); //#11233
            $k[$j++] = _3e; //#11233
        } //#11233
        $put($_.chars, $_.i, $k[--$j]); //#11235
    } //#11235
    for (var _3i = 9; _3i >= 0; _3i -= 1) { //#11243
        $_.i = _3i; //#11239
        if (((~~Math.pow(2, $_.i)) & $_.fcs) != 0) { //#11242
            $put($_.chars, $_.i, $get($_.chars, $_.i) ^ 8191); //#11241
        } //#11241
    } //#11241
    if (!bwipp_onecode.__11262__) { //#11262
        $_ = Object.create($_); //#11262
        $_.barmap = $a([7, 2, 4, 3, 1, 10, 0, 0, 9, 12, 2, 8, 5, 5, 6, 11, 8, 9, 3, 1, 0, 1, 5, 12, 2, 5, 1, 8, 4, 4, 9, 11, 6, 3, 8, 10, 3, 9, 7, 6, 5, 11, 1, 4, 8, 5, 2, 12, 9, 10, 0, 2, 7, 1, 6, 7, 3, 6, 4, 9, 0, 3, 8, 6, 6, 4, 2, 7, 1, 1, 9, 9, 7, 10, 5, 2, 4, 0, 3, 8, 6, 2, 0, 4, 8, 11, 1, 0, 9, 8, 3, 12, 2, 6, 7, 7, 5, 1, 4, 10, 1, 12, 6, 9, 7, 3, 8, 0, 5, 8, 9, 7, 4, 6, 2, 10, 3, 4, 0, 5, 8, 4, 5, 7, 7, 11, 1, 9, 6, 0, 9, 6, 0, 6, 4, 8, 2, 1, 3, 2, 5, 9, 8, 12, 4, 11, 6, 1, 9, 5, 7, 4, 3, 3, 1, 2, 0, 7, 2, 0, 1, 3, 4, 1, 6, 10, 3, 5, 8, 7, 9, 4, 2, 11, 5, 6, 0, 8, 7, 12, 4, 2, 8, 1, 5, 10, 3, 0, 9, 3, 0, 9, 6, 5, 2, 4, 7, 8, 1, 7, 5, 0, 4, 5, 2, 3, 0, 10, 6, 12, 9, 2, 3, 11, 1, 6, 8, 8, 7, 9, 5, 4, 0, 11, 1, 5, 2, 2, 9, 1, 4, 12, 8, 3, 6, 6, 7, 0, 3, 7, 4, 7, 7, 5, 0, 12, 1, 11, 2, 9, 9, 0, 6, 8, 5, 3, 3, 10, 8, 2]); //#11261
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_onecode.$ctx[id] = $_[id]); //#11261
        bwipp_onecode.__11262__ = 1; //#11261
        $_ = Object.getPrototypeOf($_); //#11261
    } //#11261
    $_.bbs = $a(65); //#11264
    $_.bhs = $a(65); //#11265
    for (var _3u = 0; _3u <= 64; _3u += 1) { //#11286
        $_.i = _3u; //#11267
        $_.dec = ($get($_.chars, $get($_.barmap, $_.i * 4)) & (~~Math.pow(2, $get($_.barmap, ($_.i * 4) + 1)))) != 0; //#11268
        $_.asc = ($get($_.chars, $get($_.barmap, ($_.i * 4) + 2)) & (~~Math.pow(2, $get($_.barmap, ($_.i * 4) + 3)))) != 0; //#11269
        if ((!$_.dec) && (!$_.asc)) { //#11273
            $put($_.bbs, $_.i, (3 * $_.height) / 8); //#11271
            $put($_.bhs, $_.i, (2 * $_.height) / 8); //#11272
        } //#11272
        if ((!$_.dec) && $_.asc) { //#11277
            $put($_.bbs, $_.i, (3 * $_.height) / 8); //#11275
            $put($_.bhs, $_.i, (5 * $_.height) / 8); //#11276
        } //#11276
        if ($_.dec && (!$_.asc)) { //#11281
            $put($_.bbs, $_.i, (0 * $_.height) / 8); //#11279
            $put($_.bhs, $_.i, (5 * $_.height) / 8); //#11280
        } //#11280
        if ($_.dec && $_.asc) { //#11285
            $put($_.bbs, $_.i, (0 * $_.height) / 8); //#11283
            $put($_.bhs, $_.i, (8 * $_.height) / 8); //#11284
        } //#11284
    } //#11284
    $k[$j++] = Infinity; //#11299
    var _4h = $_.bbs; //#11291
    var _4i = $_.bhs; //#11292
    $k[$j++] = Infinity; //#11293
    for (var _4k = 0, _4l = $_.bhs.length - 1; _4k < _4l; _4k++) { //#11293
        $k[$j++] = 1.44; //#11293
        $k[$j++] = 1.872; //#11293
    } //#11293
    $k[$j++] = 1.44; //#11293
    var _4m = $a(); //#11293
    $k[$j++] = 'ren'; //#11299
    $k[$j++] = bwipp_renlinear; //#11299
    $k[$j++] = 'bbs'; //#11299
    $k[$j++] = _4h; //#11299
    $k[$j++] = 'bhs'; //#11299
    $k[$j++] = _4i; //#11299
    $k[$j++] = 'sbs'; //#11299
    $k[$j++] = _4m; //#11299
    $k[$j++] = 'txt'; //#11299
    $k[$j++] = $_.txt; //#11299
    $k[$j++] = 'textxalign'; //#11299
    $k[$j++] = "left"; //#11299
    $k[$j++] = 'textfont'; //#11299
    $k[$j++] = "OCR-B"; //#11299
    $k[$j++] = 'textyoffset'; //#11299
    $k[$j++] = 1; //#11299
    $k[$j++] = 'textxoffset'; //#11299
    $k[$j++] = -0.3; //#11299
    $k[$j++] = 'opt'; //#11299
    $k[$j++] = $_.options; //#11299
    var _4p = $d(); //#11299
    $k[$j++] = _4p; //#11302
    if (!$_.dontdraw) { //#11302
        bwipp_renlinear(); //#11302
    } //#11302
    $_ = Object.getPrototypeOf($_); //#11304
    $_ = Object.getPrototypeOf($_); //#11306
}

function bwipp_postnet() {
    $_ = Object.create($_); //#11336
    $_.dontdraw = false; //#11339
    $_.includetext = false; //#11340
    $_.validatecheck = false; //#11341
    $_.includecheckintext = false; //#11342
    $_.textfont = "OCR-B"; //#11343
    $_.textsize = 10; //#11344
    $_.textyoffset = -8; //#11345
    $_.height = 0.125; //#11346
    $k[$j++] = $_; //#11348
    bwipp_processoptions(); //#11348
    $_.options = $k[--$j]; //#11348
    $_.barcode = $k[--$j]; //#11349
    bwipp_loadctx(bwipp_postnet) //#11351
    $k[$j++] = 'barlen'; //#11353
    $k[$j++] = $_.barcode.length; //#11353
    if ($_.validatecheck) { //#11353
        var _4 = $k[--$j]; //#11353
        $k[$j++] = $f(_4 - 1); //#11353
    } //#11353
    var _5 = $k[--$j]; //#11353
    $_[$k[--$j]] = _5; //#11353
    if ((($_.barlen != 5) && ($_.barlen != 9)) && ($_.barlen != 11)) { //#11358
        $k[$j++] = 'bwipp.postnetBadLength#11357'; //#11357
        $k[$j++] = "USPS POSTNET must be 5, 9 or 11 digits excluding check digit"; //#11357
        bwipp_raiseerror(); //#11357
    } //#11357
    $forall($_.barcode, function() { //#11363
        var _B = $k[--$j]; //#11360
        if ((_B < 48) || (_B > 57)) { //#11362
            $k[$j++] = 'bwipp.postnetBadCharacter#11361'; //#11361
            $k[$j++] = "USPS POSTNET must contain only digits"; //#11361
            bwipp_raiseerror(); //#11361
        } //#11361
    }); //#11361
    if (!bwipp_postnet.__11375__) { //#11375
        $_ = Object.create($_); //#11375
        $_.barchars = "0123456789"; //#11367
        $_.encs = $a(["55222", "22255", "22525", "22552", "25225", "25252", "25522", "52225", "52252", "52522", "5", "5"]); //#11374
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_postnet.$ctx[id] = $_[id]); //#11374
        bwipp_postnet.__11375__ = 1; //#11374
        $_ = Object.getPrototypeOf($_); //#11374
    } //#11374
    $_.checksum = 0; //#11377
    for (var _G = 0, _F = $f($_.barlen - 1); _G <= _F; _G += 1) { //#11381
        $_.i = _G; //#11379
        $_.checksum = $f($_.checksum + $f($get($_.barcode, $_.i) - 48)); //#11380
    } //#11380
    $_.checksum = ($f(10 - ($_.checksum % 10))) % 10; //#11382
    if ($_.validatecheck) { //#11388
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#11386
            $k[$j++] = 'bwipp.postnetBadCheckDigit#11385'; //#11385
            $k[$j++] = "Incorrect USPS POSTNET check digit provided"; //#11385
            bwipp_raiseerror(); //#11385
        } //#11385
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#11387
    } //#11387
    $_.bhs = $a($f(($_.barlen * 5) + 7)); //#11390
    $_.txt = $a($f($_.barlen + 1)); //#11391
    $_.enc = $get($_.encs, 10); //#11394
    $_.heights = $a($_.enc.length); //#11395
    for (var _g = 0, _f = $_.enc.length - 1; _g <= _f; _g += 1) { //#11399
        $_.j = _g; //#11397
        $put($_.heights, $_.j, ($cvi($geti($_.enc, $_.j, 1)) * $_.height) / 5); //#11398
    } //#11398
    $puti($_.bhs, 0, $_.heights); //#11400
    for (var _r = 0, _q = $f($_.barlen - 1); _r <= _q; _r += 1) { //#11412
        $_.i = _r; //#11403
        $_.enc = $get($_.encs, $f($get($_.barcode, $_.i) - 48)); //#11404
        $_.heights = $a($_.enc.length); //#11405
        for (var _11 = 0, _10 = $_.enc.length - 1; _11 <= _10; _11 += 1) { //#11409
            $_.j = _11; //#11407
            $put($_.heights, $_.j, ($cvi($geti($_.enc, $_.j, 1)) * $_.height) / 5); //#11408
        } //#11408
        $puti($_.bhs, ($_.i * 5) + 1, $_.heights); //#11410
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), (($_.i * 5) + 1) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#11411
    } //#11411
    $_.enc = $get($_.encs, $_.checksum); //#11415
    $_.heights = $a($_.enc.length); //#11416
    for (var _1S = 0, _1R = $_.enc.length - 1; _1S <= _1R; _1S += 1) { //#11420
        $_.j = _1S; //#11418
        $put($_.heights, $_.j, ($cvi($geti($_.enc, $_.j, 1)) * $_.height) / 5); //#11419
    } //#11419
    $puti($_.bhs, $f(($_.barlen * 5) + 1), $_.heights); //#11421
    if ($_.includecheckintext) { //#11426
        $put($_.txt, $_.barlen, $a([$geti($_.barchars, $_.checksum, 1), ($f(($_.barlen * 5) + 1)) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#11424
    } else { //#11426
        $put($_.txt, $_.barlen, $a([" ", (($f(($_.barlen * 5) + 1)) * 72) / 25, $_.textyoffset, $_.textfont, $_.textsize])); //#11426
    } //#11426
    $_.enc = $get($_.encs, 11); //#11430
    $_.heights = $a($_.enc.length); //#11431
    for (var _20 = 0, _1z = $_.enc.length - 1; _20 <= _1z; _20 += 1) { //#11435
        $_.j = _20; //#11433
        $put($_.heights, $_.j, ($cvi($geti($_.enc, $_.j, 1)) * $_.height) / 5); //#11434
    } //#11434
    $puti($_.bhs, $f(($_.barlen * 5) + 6), $_.heights); //#11436
    $k[$j++] = Infinity; //#11447
    var _2A = $_.bhs; //#11441
    $k[$j++] = Infinity; //#11442
    for (var _2C = 0, _2D = $_.bhs.length; _2C < _2D; _2C++) { //#11442
        $k[$j++] = 0; //#11442
    } //#11442
    var _2E = $a(); //#11442
    $k[$j++] = Infinity; //#11443
    for (var _2G = 0, _2H = $_.bhs.length - 1; _2G < _2H; _2G++) { //#11443
        $k[$j++] = 1.44; //#11443
        $k[$j++] = 1.872; //#11443
    } //#11443
    $k[$j++] = 1.44; //#11443
    var _2I = $a(); //#11443
    $k[$j++] = 'ren'; //#11446
    $k[$j++] = bwipp_renlinear; //#11446
    $k[$j++] = 'bhs'; //#11446
    $k[$j++] = _2A; //#11446
    $k[$j++] = 'bbs'; //#11446
    $k[$j++] = _2E; //#11446
    $k[$j++] = 'sbs'; //#11446
    $k[$j++] = _2I; //#11446
    if ($_.includetext) { //#11446
        $k[$j++] = 'txt'; //#11445
        $k[$j++] = $_.txt; //#11445
    } //#11445
    $k[$j++] = 'opt'; //#11447
    $k[$j++] = $_.options; //#11447
    var _2M = $d(); //#11447
    $k[$j++] = _2M; //#11450
    if (!$_.dontdraw) { //#11450
        bwipp_renlinear(); //#11450
    } //#11450
    $_ = Object.getPrototypeOf($_); //#11452
    $_ = Object.getPrototypeOf($_); //#11454
}

function bwipp_planet() {
    $_ = Object.create($_); //#11484
    $_.dontdraw = false; //#11487
    $_.includetext = false; //#11488
    $_.validatecheck = false; //#11489
    $_.includecheckintext = false; //#11490
    $_.textfont = "OCR-B"; //#11491
    $_.textsize = 10; //#11492
    $_.textyoffset = -8; //#11493
    $_.height = 0.125; //#11494
    $k[$j++] = $_; //#11496
    bwipp_processoptions(); //#11496
    $_.options = $k[--$j]; //#11496
    $_.barcode = $k[--$j]; //#11497
    bwipp_loadctx(bwipp_planet) //#11499
    $k[$j++] = 'barlen'; //#11501
    $k[$j++] = $_.barcode.length; //#11501
    if ($_.validatecheck) { //#11501
        var _4 = $k[--$j]; //#11501
        $k[$j++] = $f(_4 - 1); //#11501
    } //#11501
    var _5 = $k[--$j]; //#11501
    $_[$k[--$j]] = _5; //#11501
    if (($_.barlen != 11) && ($_.barlen != 13)) { //#11506
        $k[$j++] = 'bwipp.planetBadLength#11505'; //#11505
        $k[$j++] = "USPS PLANET must be 11 or 13 digits excluding check digit"; //#11505
        bwipp_raiseerror(); //#11505
    } //#11505
    $forall($_.barcode, function() { //#11511
        var _A = $k[--$j]; //#11508
        if ((_A < 48) || (_A > 57)) { //#11510
            $k[$j++] = 'bwipp.planetBadCharacter#11509'; //#11509
            $k[$j++] = "USPS PLANET must contain only digits"; //#11509
            bwipp_raiseerror(); //#11509
        } //#11509
    }); //#11509
    if (!bwipp_planet.__11523__) { //#11523
        $_ = Object.create($_); //#11523
        $_.barchars = "0123456789"; //#11515
        $_.encs = $a(["22555", "55522", "55252", "55225", "52552", "52525", "52255", "25552", "25525", "25255", "5", "5"]); //#11522
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_planet.$ctx[id] = $_[id]); //#11522
        bwipp_planet.__11523__ = 1; //#11522
        $_ = Object.getPrototypeOf($_); //#11522
    } //#11522
    $_.checksum = 0; //#11526
    for (var _F = 0, _E = $f($_.barlen - 1); _F <= _E; _F += 1) { //#11530
        $_.i = _F; //#11528
        $_.checksum = $f($_.checksum + $f($get($_.barcode, $_.i) - 48)); //#11529
    } //#11529
    $_.checksum = ($f(10 - ($_.checksum % 10))) % 10; //#11531
    if ($_.validatecheck) { //#11537
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#11535
            $k[$j++] = 'bwipp.planetBadCheckDigit#11534'; //#11534
            $k[$j++] = "Incorrect USPS PLANET check digit provided"; //#11534
            bwipp_raiseerror(); //#11534
        } //#11534
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#11536
    } //#11536
    $_.bhs = $a($f(($_.barlen * 5) + 7)); //#11539
    $_.txt = $a($f($_.barlen + 1)); //#11540
    $_.enc = $get($_.encs, 10); //#11543
    $_.heights = $a($_.enc.length); //#11544
    for (var _f = 0, _e = $_.enc.length - 1; _f <= _e; _f += 1) { //#11548
        $_.j = _f; //#11546
        $put($_.heights, $_.j, ($cvi($geti($_.enc, $_.j, 1)) * $_.height) / 5); //#11547
    } //#11547
    $puti($_.bhs, 0, $_.heights); //#11549
    for (var _q = 0, _p = $f($_.barlen - 1); _q <= _p; _q += 1) { //#11561
        $_.i = _q; //#11552
        $_.enc = $get($_.encs, $f($get($_.barcode, $_.i) - 48)); //#11553
        $_.heights = $a($_.enc.length); //#11554
        for (var _10 = 0, _z = $_.enc.length - 1; _10 <= _z; _10 += 1) { //#11558
            $_.j = _10; //#11556
            $put($_.heights, $_.j, ($cvi($geti($_.enc, $_.j, 1)) * $_.height) / 5); //#11557
        } //#11557
        $puti($_.bhs, ($_.i * 5) + 1, $_.heights); //#11559
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), (($_.i * 5) + 1) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#11560
    } //#11560
    $_.enc = $get($_.encs, $_.checksum); //#11564
    $_.heights = $a($_.enc.length); //#11565
    for (var _1R = 0, _1Q = $_.enc.length - 1; _1R <= _1Q; _1R += 1) { //#11569
        $_.j = _1R; //#11567
        $put($_.heights, $_.j, ($cvi($geti($_.enc, $_.j, 1)) * $_.height) / 5); //#11568
    } //#11568
    $puti($_.bhs, $f(($_.barlen * 5) + 1), $_.heights); //#11570
    if ($_.includecheckintext) { //#11575
        $put($_.txt, $_.barlen, $a([$geti($_.barchars, $_.checksum, 1), ($f(($_.barlen * 5) + 1)) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#11573
    } else { //#11575
        $put($_.txt, $_.barlen, $a([" ", (($f(($_.barlen * 5) + 1)) * 72) / 25, $_.textyoffset, $_.textfont, $_.textsize])); //#11575
    } //#11575
    $_.enc = $get($_.encs, 11); //#11579
    $_.heights = $a($_.enc.length); //#11580
    for (var _1z = 0, _1y = $_.enc.length - 1; _1z <= _1y; _1z += 1) { //#11584
        $_.j = _1z; //#11582
        $put($_.heights, $_.j, ($cvi($geti($_.enc, $_.j, 1)) * $_.height) / 5); //#11583
    } //#11583
    $puti($_.bhs, $f(($_.barlen * 5) + 6), $_.heights); //#11585
    $k[$j++] = Infinity; //#11596
    var _29 = $_.bhs; //#11590
    $k[$j++] = Infinity; //#11591
    for (var _2B = 0, _2C = $_.bhs.length; _2B < _2C; _2B++) { //#11591
        $k[$j++] = 0; //#11591
    } //#11591
    var _2D = $a(); //#11591
    $k[$j++] = Infinity; //#11592
    for (var _2F = 0, _2G = $_.bhs.length - 1; _2F < _2G; _2F++) { //#11592
        $k[$j++] = 1.44; //#11592
        $k[$j++] = 1.872; //#11592
    } //#11592
    $k[$j++] = 1.44; //#11592
    var _2H = $a(); //#11592
    $k[$j++] = 'ren'; //#11595
    $k[$j++] = bwipp_renlinear; //#11595
    $k[$j++] = 'bhs'; //#11595
    $k[$j++] = _29; //#11595
    $k[$j++] = 'bbs'; //#11595
    $k[$j++] = _2D; //#11595
    $k[$j++] = 'sbs'; //#11595
    $k[$j++] = _2H; //#11595
    if ($_.includetext) { //#11595
        $k[$j++] = 'txt'; //#11594
        $k[$j++] = $_.txt; //#11594
    } //#11594
    $k[$j++] = 'opt'; //#11596
    $k[$j++] = $_.options; //#11596
    var _2L = $d(); //#11596
    $k[$j++] = _2L; //#11599
    if (!$_.dontdraw) { //#11599
        bwipp_renlinear(); //#11599
    } //#11599
    $_ = Object.getPrototypeOf($_); //#11601
    $_ = Object.getPrototypeOf($_); //#11603
}

function bwipp_royalmail() {
    $_ = Object.create($_); //#11633
    $_.dontdraw = false; //#11636
    $_.includetext = false; //#11637
    $_.validatecheck = false; //#11638
    $_.includecheckintext = false; //#11639
    $_.textfont = "OCR-B"; //#11640
    $_.textsize = 10; //#11641
    $_.textyoffset = -8; //#11642
    $_.height = 0.175; //#11643
    $k[$j++] = $_; //#11645
    bwipp_processoptions(); //#11645
    $_.options = $k[--$j]; //#11645
    var _1 = $k[--$j]; //#11646
    $_.barcode = _1; //#11646
    bwipp_loadctx(bwipp_royalmail) //#11648
    if (!bwipp_royalmail.__11666__) { //#11666
        $_ = Object.create($_); //#11666
        $_.barchars = "ZUVWXY501234B6789AHCDEFGNIJKLMTOPQRS"; //#11652
        $_.charvals = new Map; //#11653
        for (var _2 = 0; _2 <= 35; _2 += 1) { //#11654
            $put($_.charvals, $geti($_.barchars, _2, 1), _2); //#11654
        } //#11654
        $_.encs = $a(["3300", "2211", "2301", "2310", "3201", "3210", "1122", "0033", "0123", "0132", "1023", "1032", "1302", "0213", "0303", "0312", "1203", "1212", "1320", "0231", "0321", "0330", "1221", "1230", "3102", "2013", "2103", "2112", "3003", "3012", "3120", "2031", "2121", "2130", "3021", "3030", "2", "3"]); //#11665
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_royalmail.$ctx[id] = $_[id]); //#11665
        bwipp_royalmail.__11666__ = 1; //#11665
        $_ = Object.getPrototypeOf($_); //#11665
    } //#11665
    for (var _A = 0, _9 = $_.barcode.length - 1; _A <= _9; _A += 1) { //#11673
        var _E = $get($_.charvals, $geti($_.barcode, _A, 1)) !== undefined; //#11670
        if (!_E) { //#11672
            $k[$j++] = 'bwipp.royalmailBadCharacter#11671'; //#11671
            $k[$j++] = "RM4SCC must contain only capital letters and digits"; //#11671
            bwipp_raiseerror(); //#11671
        } //#11671
    } //#11671
    $k[$j++] = 'barlen'; //#11675
    $k[$j++] = $_.barcode.length; //#11675
    if ($_.validatecheck) { //#11675
        var _H = $k[--$j]; //#11675
        $k[$j++] = $f(_H - 1); //#11675
    } //#11675
    var _I = $k[--$j]; //#11675
    $_[$k[--$j]] = _I; //#11675
    $_.checksumrow = 0; //#11677
    $_.checksumcol = 0; //#11678
    for (var _M = 0, _L = $f($_.barlen - 1); _M <= _L; _M += 1) { //#11684
        $_.i = _M; //#11680
        $_.indx = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#11681
        $_.checksumrow = $_.checksumrow + (~~($_.indx / 6)); //#11682
        $_.checksumcol = $f($_.checksumcol + ($_.indx % 6)); //#11683
    } //#11683
    $_.checksum = $f((($_.checksumrow % 6) * 6) + ($_.checksumcol % 6)); //#11685
    if ($_.validatecheck) { //#11691
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#11689
            $k[$j++] = 'bwipp.royalmailBadCheckDigit#11688'; //#11688
            $k[$j++] = "Incorrect RM4SCC check digit provided"; //#11688
            bwipp_raiseerror(); //#11688
        } //#11688
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#11690
    } //#11690
    $_.encstr = $s($f(($_.barlen * 4) + 6)); //#11693
    $_.txt = $a($f($_.barlen + 1)); //#11694
    $puti($_.encstr, 0, $get($_.encs, 36)); //#11697
    for (var _r = 0, _q = $f($_.barlen - 1); _r <= _q; _r += 1) { //#11704
        $_.i = _r; //#11700
        $_.indx = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#11701
        $puti($_.encstr, ($_.i * 4) + 1, $get($_.encs, $_.indx)); //#11702
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), (($_.i * 4) + 1) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#11703
    } //#11703
    $puti($_.encstr, $f(($_.barlen * 4) + 1), $get($_.encs, $_.checksum)); //#11707
    if ($_.includecheckintext) { //#11711
        $put($_.txt, $_.barlen, $a([$geti($_.barchars, $_.checksum, 1), ($f(($_.barlen * 4) + 1)) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#11709
    } else { //#11711
        $put($_.txt, $_.barlen, $a([" ", ($f(($_.barlen * 4) + 1)) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#11711
    } //#11711
    $puti($_.encstr, $f(($_.barlen * 4) + 5), $get($_.encs, 37)); //#11715
    $_.bbs = $a($_.encstr.length); //#11717
    $_.bhs = $a($_.encstr.length); //#11718
    for (var _1j = 0, _1i = $_.encstr.length - 1; _1j <= _1i; _1j += 1) { //#11738
        $_.i = _1j; //#11720
        $_.enc = $geti($_.encstr, $_.i, 1); //#11721
        if ($eq($_.enc, "0")) { //#11725
            $put($_.bbs, $_.i, (3 * $_.height) / 8); //#11723
            $put($_.bhs, $_.i, (2 * $_.height) / 8); //#11724
        } //#11724
        if ($eq($_.enc, "1")) { //#11729
            $put($_.bbs, $_.i, (0 * $_.height) / 8); //#11727
            $put($_.bhs, $_.i, (5 * $_.height) / 8); //#11728
        } //#11728
        if ($eq($_.enc, "2")) { //#11733
            $put($_.bbs, $_.i, (3 * $_.height) / 8); //#11731
            $put($_.bhs, $_.i, (5 * $_.height) / 8); //#11732
        } //#11732
        if ($eq($_.enc, "3")) { //#11737
            $put($_.bbs, $_.i, (0 * $_.height) / 8); //#11735
            $put($_.bhs, $_.i, (8 * $_.height) / 8); //#11736
        } //#11736
    } //#11736
    $k[$j++] = Infinity; //#11749
    var _2F = $_.bbs; //#11743
    var _2G = $_.bhs; //#11744
    $k[$j++] = Infinity; //#11745
    for (var _2I = 0, _2J = $_.bhs.length - 1; _2I < _2J; _2I++) { //#11745
        $k[$j++] = 1.44; //#11745
        $k[$j++] = 1.872; //#11745
    } //#11745
    $k[$j++] = 1.44; //#11745
    var _2K = $a(); //#11745
    $k[$j++] = 'ren'; //#11748
    $k[$j++] = bwipp_renlinear; //#11748
    $k[$j++] = 'bbs'; //#11748
    $k[$j++] = _2F; //#11748
    $k[$j++] = 'bhs'; //#11748
    $k[$j++] = _2G; //#11748
    $k[$j++] = 'sbs'; //#11748
    $k[$j++] = _2K; //#11748
    if ($_.includetext) { //#11748
        $k[$j++] = 'txt'; //#11747
        $k[$j++] = $_.txt; //#11747
    } //#11747
    $k[$j++] = 'opt'; //#11749
    $k[$j++] = $_.options; //#11749
    var _2O = $d(); //#11749
    $k[$j++] = _2O; //#11752
    if (!$_.dontdraw) { //#11752
        bwipp_renlinear(); //#11752
    } //#11752
    $_ = Object.getPrototypeOf($_); //#11754
    $_ = Object.getPrototypeOf($_); //#11756
}

function bwipp_auspost() {
    $_ = Object.create($_); //#11786
    $_.dontdraw = false; //#11789
    $_.includetext = false; //#11790
    $_.textfont = "OCR-B"; //#11791
    $_.textsize = 10; //#11792
    $_.textyoffset = -8; //#11793
    $_.height = 0.175; //#11794
    $_.custinfoenc = "character"; //#11795
    $k[$j++] = $_; //#11797
    bwipp_processoptions(); //#11797
    $_.options = $k[--$j]; //#11797
    $_.barcode = $k[--$j]; //#11798
    if ($ne($_.custinfoenc, "character") && $ne($_.custinfoenc, "numeric")) { //#11802
        $k[$j++] = 'bwipp.auspostBadCustinfoEncoding#11801'; //#11801
        $k[$j++] = "Customer information encoding must be either character or numeric"; //#11801
        bwipp_raiseerror(); //#11801
    } //#11801
    bwipp_loadctx(bwipp_auspost) //#11804
    if (!bwipp_auspost.__11827__) { //#11827
        $_ = Object.create($_); //#11827
        $_.encs = $a(["000", "001", "002", "010", "011", "012", "020", "021", "022", "100", "101", "102", "110", "111", "112", "120", "121", "122", "200", "201", "202", "210", "211", "212", "220", "221", "222", "300", "301", "302", "310", "311", "312", "320", "321", "322", "023", "030", "031", "032", "033", "103", "113", "123", "130", "131", "132", "133", "203", "213", "223", "230", "231", "232", "233", "303", "313", "323", "330", "331", "332", "333", "003", "013", "00", "01", "02", "10", "11", "12", "20", "21", "22", "30", "13", "3"]); //#11819
        $_.barchars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz #"; //#11822
        var _5 = new Map([
            ["11", 37],
            ["45", 37],
            ["59", 52],
            ["62", 67]
        ]); //#11825
        $_.fcclen = _5; //#11825
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_auspost.$ctx[id] = $_[id]); //#11825
        bwipp_auspost.__11827__ = 1; //#11825
        $_ = Object.getPrototypeOf($_); //#11825
    } //#11825
    $_.barlen = $_.barcode.length; //#11829
    $_.txt = $a($_.barlen - 2); //#11830
    $k[$j++] = $_.fcclen; //#11832
    if ($_.barlen >= 2) { //#11832
        $k[$j++] = $geti($_.barcode, 0, 2); //#11832
    } else { //#11832
        $k[$j++] = ""; //#11832
    } //#11832
    var _E = $k[--$j]; //#11833
    var _F = $k[--$j]; //#11833
    var _G = $get(_F, _E) !== undefined; //#11833
    $k[$j++] = _F; //#11835
    $k[$j++] = _E; //#11835
    if (!_G) { //#11835
        $j -= 2; //#11834
        $k[$j++] = 'bwipp.auspostBadFCC#11834'; //#11834
        $k[$j++] = "Must begin with an FCC, either 11, 45, 59 or 62"; //#11834
        bwipp_raiseerror(); //#11834
    } //#11834
    var _H = $k[--$j]; //#11836
    $_.encstr = $s($get($k[--$j], _H)); //#11836
    $k[$j++] = true; //#11843
    for (var _L = 0, _M = 1; _L < _M; _L++) { //#11843
        if ($_.barlen < 10) { //#11841
            $j--; //#11841
            $k[$j++] = false; //#11841
            break; //#11841
        } //#11841
        var _P = $geti($_.barcode, 2, 8); //#11842
        for (var _Q = 0, _R = _P.length; _Q < _R; _Q++) { //#11842
            var _S = $get(_P, _Q); //#11842
            if ((_S < 48) || (_S > 57)) { //#11842
                $j--; //#11842
                $k[$j++] = false; //#11842
                break; //#11842
            } //#11842
        } //#11842
    } //#11842
    if ($nt($k[--$j])) { //#11846
        $k[$j++] = 'bwipp.auspostIncompleteDPID#11845'; //#11845
        $k[$j++] = "The DPID must be 8 digits"; //#11845
        bwipp_raiseerror(); //#11845
    } //#11845
    var _W = $eq($_.custinfoenc, "numeric") ? 2 : 3; //#11849
    if ((($_.barlen - 10) * _W) > (($_.encstr.length - 22) - 14)) { //#11852
        $k[$j++] = 'bwipp.auspostTooLong#11851'; //#11851
        $k[$j++] = "The message is too long"; //#11851
        bwipp_raiseerror(); //#11851
    } //#11851
    $puti($_.encstr, 0, $get($_.encs, 74)); //#11855
    for (var _b = 0; _b <= 1; _b += 1) { //#11862
        $_.i = _b; //#11859
        $puti($_.encstr, ($_.i * 2) + 2, $get($_.encs, $cvi($geti($_.barcode, $_.i, 1)) + 64)); //#11861
    } //#11861
    for (var _j = 2; _j <= 9; _j += 1) { //#11870
        $_.i = _j; //#11866
        $puti($_.encstr, ($_.i * 2) + 2, $get($_.encs, $cvi($geti($_.barcode, $_.i, 1)) + 64)); //#11868
        $put($_.txt, $_.i - 2, $a([$geti($_.barcode, $_.i, 1), ((($_.i - 2) * 2) + 6) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#11869
    } //#11869
    if ($eq($_.custinfoenc, "numeric")) { //#11898
        for (var _14 = 0, _13 = $_.barlen - 11; _14 <= _13; _14 += 1) { //#11883
            $_.i = _14; //#11875
            var _18 = $get($_.barcode, $_.i + 10); //#11876
            $k[$j++] = $_.encs; //#11879
            $k[$j++] = _18; //#11879
            if ((_18 < 48) || (_18 > 57)) { //#11879
                $k[$j++] = 'bwipp.auspostInvalidCustinfoDigit#11878'; //#11878
                $k[$j++] = "The customer information data contains a non-digit character"; //#11878
                bwipp_raiseerror(); //#11878
            } //#11878
            var _19 = $k[--$j]; //#11880
            $puti($_.encstr, ($_.i * 2) + 22, $get($k[--$j], $f($f(_19 - 48) + 64))); //#11881
            $put($_.txt, $_.i + 8, $a([$geti($_.barcode, $_.i + 10, 1), (($_.i * 2) + 22) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#11882
        } //#11882
        $_.ciflen = ($_.barlen - 10) * 2; //#11884
    } else { //#11898
        for (var _1R = 0, _1Q = $_.barlen - 11; _1R <= _1Q; _1R += 1) { //#11897
            $_.i = _1R; //#11887
            $search($_.barchars, $geti($_.barcode, $_.i + 10, 1)); //#11888
            if ($nt($k[--$j])) { //#11891
                $j--; //#11890
                $k[$j++] = 'bwipp.auspostInvalidCustinfoCharacter#11890'; //#11890
                $k[$j++] = "The customer information contains an invalid character"; //#11890
                bwipp_raiseerror(); //#11890
            } //#11890
            $_.indx = $k[--$j].length; //#11892
            $j -= 2; //#11893
            $_.enc = $get($_.encs, $_.indx); //#11894
            $puti($_.encstr, ($_.i * 3) + 22, $_.enc); //#11895
            $put($_.txt, $_.i + 8, $a([$geti($_.barcode, $_.i + 10, 1), (($_.i * 3) + 22) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#11896
        } //#11896
        $_.ciflen = ($_.barlen - 10) * 3; //#11898
    } //#11898
    for (var _1s = 22 + $_.ciflen, _1r = $_.encstr.length - 14; _1s <= _1r; _1s += 1) { //#11904
        $puti($_.encstr, _1s, $get($_.encs, 75)); //#11903
    } //#11903
    if (!bwipp_auspost.__11927__) { //#11927
        $_ = Object.create($_); //#11927
        $_.rstable = $a(64 * 64); //#11908
        $k[$j++] = $_.rstable; //#11909
        $k[$j++] = 0; //#11909
        $k[$j++] = Infinity; //#11909
        for (var _1y = 0, _1z = 64; _1y < _1z; _1y++) { //#11909
            $k[$j++] = 0; //#11909
        } //#11909
        var _20 = $a(); //#11909
        var _21 = $k[--$j]; //#11909
        $puti($k[--$j], _21, _20); //#11909
        $k[$j++] = $_.rstable; //#11910
        $k[$j++] = 64; //#11910
        $k[$j++] = Infinity; //#11910
        for (var _24 = 0; _24 <= 63; _24 += 1) { //#11910
            $k[$j++] = _24; //#11910
        } //#11910
        var _25 = $a(); //#11910
        var _26 = $k[--$j]; //#11910
        $puti($k[--$j], _26, _25); //#11910
        $_.prev = 1; //#11911
        for (var _28 = 0, _29 = 64; _28 < _29; _28++) { //#11926
            $_.next = $_.prev << 1; //#11913
            if (($_.next & 64) != 0) { //#11916
                $_.next = $_.next ^ 67; //#11915
            } //#11915
            for (var _2D = 0; _2D <= 63; _2D += 1) { //#11924
                $_.j = _2D; //#11918
                $_.nextcell = function() {
                    $k[$j++] = $_.rstable; //#11919
                    $k[$j++] = (64 * $_.next) + $_.j; //#11919
                }; //#11919
                $_.nextcell(); //#11920
                var _2L = $k[--$j]; //#11920
                $put($k[--$j], _2L, $get($_.rstable, (64 * $_.prev) + $_.j) << 1); //#11920
                $_.nextcell(); //#11921
                var _2N = $k[--$j]; //#11921
                if (($get($k[--$j], _2N) & 64) != 0) { //#11923
                    $_.nextcell(); //#11922
                    $_.nextcell(); //#11922
                    var _2Q = $k[--$j]; //#11922
                    var _2S = $get($k[--$j], _2Q); //#11922
                    var _2T = $k[--$j]; //#11922
                    $put($k[--$j], _2T, _2S ^ 67); //#11922
                } //#11922
            } //#11922
            $_.prev = $_.next; //#11925
        } //#11925
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_auspost.$ctx[id] = $_[id]); //#11925
        bwipp_auspost.__11927__ = 1; //#11925
        $_ = Object.getPrototypeOf($_); //#11925
    } //#11925
    $_.rscodes = $a((~~(($_.encstr.length - 16) / 3)) + 4); //#11930
    $k[$j++] = $_.rscodes; //#11931
    $k[$j++] = 0; //#11931
    $k[$j++] = Infinity; //#11931
    for (var _2a = 0, _2b = 4; _2a < _2b; _2a++) { //#11931
        $k[$j++] = 0; //#11931
    } //#11931
    var _2c = $a(); //#11931
    var _2d = $k[--$j]; //#11931
    $puti($k[--$j], _2d, _2c); //#11931
    for (var _2h = 2, _2g = $_.encstr.length - 16; _2h <= _2g; _2h += 3) { //#11939
        $_.i = _2h; //#11933
        $put($_.rscodes, ($_.rscodes.length - (~~(($_.i - 2) / 3))) - 1, (($cvi($geti($_.encstr, $_.i, 1)) * 16) + ($cvi($geti($_.encstr, $_.i + 1, 1)) * 4)) + $cvi($geti($_.encstr, $_.i + 2, 1))); //#11938
    } //#11938
    for (var _2v = $_.rscodes.length - 5; _2v >= 0; _2v -= 1) { //#11948
        $_.i = _2v; //#11941
        for (var _2w = 0; _2w <= 4; _2w += 1) { //#11947
            $_.j = _2w; //#11943
            $put($_.rscodes, $_.i + $_.j, $xo($get($_.rscodes, $_.i + $_.j), $get($_.rstable, $f((64 * $get($a([48, 17, 29, 30, 1]), $_.j)) + $get($_.rscodes, $_.i + 4))))); //#11946
        } //#11946
    } //#11946
    $_.checkcode = $strcpy($s(12), "000000000000"); //#11949
    for (var _3E = 0; _3E <= 3; _3E += 1) { //#11954
        $_.i = _3E; //#11951
        $_.enc = $cvrs($s(3), $get($_.rscodes, 3 - $_.i), 4); //#11952
        $puti($_.checkcode, ($_.i * 3) + (3 - $_.enc.length), $_.enc); //#11953
    } //#11953
    $puti($_.encstr, $_.encstr.length - 14, $_.checkcode); //#11957
    $puti($_.encstr, $_.encstr.length - 2, $get($_.encs, 74)); //#11958
    $_.bbs = $a($_.encstr.length); //#11960
    $_.bhs = $a($_.encstr.length); //#11961
    for (var _3b = 0, _3a = $_.encstr.length - 1; _3b <= _3a; _3b += 1) { //#11981
        $_.i = _3b; //#11963
        $_.enc = $geti($_.encstr, $_.i, 1); //#11964
        if ($eq($_.enc, "0")) { //#11968
            $put($_.bbs, $_.i, (0 * $_.height) / 8); //#11966
            $put($_.bhs, $_.i, (8 * $_.height) / 8); //#11967
        } //#11967
        if ($eq($_.enc, "1")) { //#11972
            $put($_.bbs, $_.i, (3 * $_.height) / 8); //#11970
            $put($_.bhs, $_.i, (5 * $_.height) / 8); //#11971
        } //#11971
        if ($eq($_.enc, "2")) { //#11976
            $put($_.bbs, $_.i, (0 * $_.height) / 8); //#11974
            $put($_.bhs, $_.i, (5 * $_.height) / 8); //#11975
        } //#11975
        if ($eq($_.enc, "3")) { //#11980
            $put($_.bbs, $_.i, (3 * $_.height) / 8); //#11978
            $put($_.bhs, $_.i, (2 * $_.height) / 8); //#11979
        } //#11979
    } //#11979
    $k[$j++] = Infinity; //#11992
    var _47 = $_.bbs; //#11986
    var _48 = $_.bhs; //#11987
    $k[$j++] = Infinity; //#11988
    for (var _4A = 0, _4B = $_.bhs.length - 1; _4A < _4B; _4A++) { //#11988
        $k[$j++] = 1.44; //#11988
        $k[$j++] = 1.872; //#11988
    } //#11988
    $k[$j++] = 1.44; //#11988
    var _4C = $a(); //#11988
    $k[$j++] = 'ren'; //#11991
    $k[$j++] = bwipp_renlinear; //#11991
    $k[$j++] = 'bbs'; //#11991
    $k[$j++] = _47; //#11991
    $k[$j++] = 'bhs'; //#11991
    $k[$j++] = _48; //#11991
    $k[$j++] = 'sbs'; //#11991
    $k[$j++] = _4C; //#11991
    if ($_.includetext) { //#11991
        $k[$j++] = 'txt'; //#11990
        $k[$j++] = $_.txt; //#11990
    } //#11990
    $k[$j++] = 'opt'; //#11992
    $k[$j++] = $_.options; //#11992
    var _4G = $d(); //#11992
    $k[$j++] = _4G; //#11995
    if (!$_.dontdraw) { //#11995
        bwipp_renlinear(); //#11995
    } //#11995
    $_ = Object.getPrototypeOf($_); //#11997
    $_ = Object.getPrototypeOf($_); //#11999
}

function bwipp_kix() {
    $_ = Object.create($_); //#12029
    $_.dontdraw = false; //#12032
    $_.includetext = false; //#12033
    $_.textfont = "OCR-B"; //#12034
    $_.textsize = 10; //#12035
    $_.textyoffset = -8; //#12036
    $_.height = 0.175; //#12037
    $k[$j++] = $_; //#12039
    bwipp_processoptions(); //#12039
    $_.options = $k[--$j]; //#12039
    var _1 = $k[--$j]; //#12040
    $_.barcode = _1; //#12040
    bwipp_loadctx(bwipp_kix) //#12042
    if (!bwipp_kix.__12059__) { //#12059
        $_ = Object.create($_); //#12059
        $_.encs = $a(["0033", "0123", "0132", "1023", "1032", "1122", "0213", "0303", "0312", "1203", "1212", "1302", "0231", "0321", "0330", "1221", "1230", "1320", "2013", "2103", "2112", "3003", "3012", "3102", "2031", "2121", "2130", "3021", "3030", "3120", "2211", "2301", "2310", "3201", "3210", "3300"]); //#12053
        $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"; //#12056
        $_.charvals = new Map; //#12057
        for (var _3 = 0; _3 <= 35; _3 += 1) { //#12058
            $put($_.charvals, $geti($_.barchars, _3, 1), _3); //#12058
        } //#12058
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_kix.$ctx[id] = $_[id]); //#12058
        bwipp_kix.__12059__ = 1; //#12058
        $_ = Object.getPrototypeOf($_); //#12058
    } //#12058
    for (var _A = 0, _9 = $_.barcode.length - 1; _A <= _9; _A += 1) { //#12066
        var _E = $get($_.charvals, $geti($_.barcode, _A, 1)) !== undefined; //#12063
        if (!_E) { //#12065
            $k[$j++] = 'bwipp.kixBadCharacter#12064'; //#12064
            $k[$j++] = "KIX must contain only capital letters and digits"; //#12064
            bwipp_raiseerror(); //#12064
        } //#12064
    } //#12064
    $_.barlen = $_.barcode.length; //#12068
    $_.encstr = $s($_.barlen * 4); //#12069
    $_.txt = $a($_.barlen); //#12070
    for (var _M = 0, _L = $_.barlen - 1; _M <= _L; _M += 1) { //#12077
        $_.i = _M; //#12073
        $_.indx = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#12074
        $puti($_.encstr, $_.i * 4, $get($_.encs, $_.indx)); //#12075
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ($_.i * 4) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#12076
    } //#12076
    $_.bbs = $a($_.encstr.length); //#12079
    $_.bhs = $a($_.encstr.length); //#12080
    for (var _n = 0, _m = $_.encstr.length - 1; _n <= _m; _n += 1) { //#12100
        $_.i = _n; //#12082
        $_.enc = $geti($_.encstr, $_.i, 1); //#12083
        if ($eq($_.enc, "0")) { //#12087
            $put($_.bbs, $_.i, (3 * $_.height) / 8); //#12085
            $put($_.bhs, $_.i, (2 * $_.height) / 8); //#12086
        } //#12086
        if ($eq($_.enc, "1")) { //#12091
            $put($_.bbs, $_.i, (0 * $_.height) / 8); //#12089
            $put($_.bhs, $_.i, (5 * $_.height) / 8); //#12090
        } //#12090
        if ($eq($_.enc, "2")) { //#12095
            $put($_.bbs, $_.i, (3 * $_.height) / 8); //#12093
            $put($_.bhs, $_.i, (5 * $_.height) / 8); //#12094
        } //#12094
        if ($eq($_.enc, "3")) { //#12099
            $put($_.bbs, $_.i, (0 * $_.height) / 8); //#12097
            $put($_.bhs, $_.i, (8 * $_.height) / 8); //#12098
        } //#12098
    } //#12098
    $k[$j++] = Infinity; //#12111
    var _1J = $_.bbs; //#12105
    var _1K = $_.bhs; //#12106
    $k[$j++] = Infinity; //#12107
    for (var _1M = 0, _1N = $_.bhs.length - 1; _1M < _1N; _1M++) { //#12107
        $k[$j++] = 1.44; //#12107
        $k[$j++] = 1.872; //#12107
    } //#12107
    $k[$j++] = 1.44; //#12107
    var _1O = $a(); //#12107
    $k[$j++] = 'ren'; //#12110
    $k[$j++] = bwipp_renlinear; //#12110
    $k[$j++] = 'bbs'; //#12110
    $k[$j++] = _1J; //#12110
    $k[$j++] = 'bhs'; //#12110
    $k[$j++] = _1K; //#12110
    $k[$j++] = 'sbs'; //#12110
    $k[$j++] = _1O; //#12110
    if ($_.includetext) { //#12110
        $k[$j++] = 'txt'; //#12109
        $k[$j++] = $_.txt; //#12109
    } //#12109
    $k[$j++] = 'opt'; //#12111
    $k[$j++] = $_.options; //#12111
    var _1S = $d(); //#12111
    $k[$j++] = _1S; //#12114
    if (!$_.dontdraw) { //#12114
        bwipp_renlinear(); //#12114
    } //#12114
    $_ = Object.getPrototypeOf($_); //#12116
    $_ = Object.getPrototypeOf($_); //#12118
}

function bwipp_japanpost() {
    $_ = Object.create($_); //#12148
    $_.dontdraw = false; //#12151
    $_.includetext = false; //#12152
    $_.includecheckintext = false; //#12153
    $_.textfont = "OCR-B"; //#12154
    $_.textsize = 10; //#12155
    $_.textyoffset = -8; //#12156
    $_.height = 0.175; //#12157
    $k[$j++] = $_; //#12159
    bwipp_processoptions(); //#12159
    $_.options = $k[--$j]; //#12159
    $_.barcode = $k[--$j]; //#12160
    bwipp_loadctx(bwipp_japanpost) //#12162
    $forall($_.barcode, function() { //#12171
        var _3 = $k[--$j]; //#12166
        if (!(((_3 >= 48) && (_3 <= 57)) || (((_3 >= 65) && (_3 <= 90)) || (_3 == 45)))) { //#12170
            $k[$j++] = 'bwipp.japanPostBadCharacter#12169'; //#12169
            $k[$j++] = "Japan Post must contain only digits, capital letters and the dash symbol"; //#12169
            if ('raiseerror'() === true) {
                return true;
            } //#12169
        } //#12169
    }); //#12169
    if (!bwipp_japanpost.__12183__) { //#12183
        $_ = Object.create($_); //#12183
        $_.encs = $a(["300", "330", "312", "132", "321", "303", "123", "231", "213", "033", "030", "120", "102", "210", "012", "201", "021", "003", "333", "31", "13"]); //#12179
        $_.barchars = "0123456789-ABCDEFGHIJKLMNOPQRSTUVWXYZ"; //#12182
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_japanpost.$ctx[id] = $_[id]); //#12182
        bwipp_japanpost.__12183__ = 1; //#12182
        $_ = Object.getPrototypeOf($_); //#12182
    } //#12182
    $_.barlen = $_.barcode.length; //#12185
    $_.encstr = $s(((20 + 1) * 3) + 4); //#12187
    $_.digits = $a(20); //#12188
    $_.txt = $a($_.barlen + 1); //#12189
    $puti($_.encstr, 0, $get($_.encs, 19)); //#12192
    $_.checksum = 0; //#12194
    $_.j = 0; //#12195
    $_.i = 0; //#12195
    $k[$j++] = true; //#12230
    for (var _G = 0, _F = $_.barlen - 1; _G <= _F; _G += 1) { //#12230
        $_.i = _G; //#12198
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#12199
        $j--; //#12200
        $_.indx = $k[--$j].length; //#12201
        $j -= 2; //#12202
        if (($_.indx >= 11) && ($_.indx < 37)) { //#12213
            if ($_.j > 18) { //#12204
                $j--; //#12204
                $k[$j++] = false; //#12204
                break; //#12204
            } //#12204
            $_.digit = (~~(($_.indx - 1) / 10)) + 10; //#12208
            $puti($_.encstr, ($_.j * 3) + 2, $get($_.encs, $_.digit)); //#12209
            $_.checksum = $_.checksum + $_.digit; //#12210
            $put($_.digits, $_.j, $_.digit); //#12211
            $_.j = $_.j + 1; //#12212
        } //#12212
        if ($_.j > 19) { //#12214
            $j--; //#12214
            $k[$j++] = false; //#12214
            break; //#12214
        } //#12214
        $_.digit = 0; //#12215
        if ($_.indx == 37) { //#12218
            $_.digit = 14; //#12217
        } //#12217
        if (($_.indx >= 11) && ($_.indx < 37)) { //#12221
            $_.digit = ($_.indx - 1) % 10; //#12220
        } //#12220
        if ($_.indx < 11) { //#12224
            $_.digit = $_.indx; //#12223
        } //#12223
        $puti($_.encstr, ($_.j * 3) + 2, $get($_.encs, $_.digit)); //#12225
        $_.checksum = $_.checksum + $_.digit; //#12226
        $put($_.digits, $_.j, $_.digit); //#12227
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), (($_.j * 3) + 2) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#12228
        $_.j = $_.j + 1; //#12229
    } //#12229
    if ($nt($k[--$j])) { //#12234
        $k[$j++] = 'bwipp.japanpostTooLong#12233'; //#12233
        $k[$j++] = "The input is too long"; //#12233
        bwipp_raiseerror(); //#12233
    } //#12233
    for (var _16 = $_.j, _15 = 20 - 1; _16 <= _15; _16 += 1) { //#12242
        $_.k = _16; //#12238
        $puti($_.encstr, ($_.k * 3) + 2, $get($_.encs, 14)); //#12239
        $_.checksum = $_.checksum + 14; //#12240
        $put($_.digits, $_.k, 14); //#12241
    } //#12241
    $_.checksum = 19 - ($_.checksum % 19); //#12245
    $puti($_.encstr, 2 + (20 * 3), $get($_.encs, $_.checksum)); //#12246
    $puti($_.encstr, 2 + (21 * 3), $get($_.encs, 20)); //#12249
    $_.checkdigit = " "; //#12250
    if ($_.includecheckintext) { //#12253
        $_.checkdigit = $geti($_.barchars, $_.checksum, 1); //#12252
    } //#12252
    $put($_.txt, $_.i + 1, $a([$_.checkdigit, ((20 * 3) + 2) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#12254
    $puti($_.encstr, ((20 + 1) * 3) + 2, $get($_.encs, 20)); //#12257
    $_.bbs = $a((21 * 3) + 4); //#12259
    $_.bhs = $a($_.bbs.length); //#12260
    for (var _1f = 0, _1e = $_.bbs.length - 1; _1f <= _1e; _1f += 1) { //#12284
        $_.i = _1f; //#12262
        $_.enc = $geti($_.encstr, $_.i, 1); //#12263
        $_.bunit = 0; //#12264
        $_.hunit = 0; //#12265
        if ($eq($_.enc, "0")) { //#12269
            $_.bunit = 3; //#12267
            $_.hunit = 2; //#12268
        } //#12268
        if ($eq($_.enc, "1")) { //#12273
            $_.bunit = 0; //#12271
            $_.hunit = 5; //#12272
        } //#12272
        if ($eq($_.enc, "2")) { //#12277
            $_.bunit = 3; //#12275
            $_.hunit = 5; //#12276
        } //#12276
        if ($eq($_.enc, "3")) { //#12281
            $_.bunit = 0; //#12279
            $_.hunit = 8; //#12280
        } //#12280
        $put($_.bbs, $_.i, ($_.bunit * $_.height) / 8); //#12282
        $put($_.bhs, $_.i, ($_.hunit * $_.height) / 8); //#12283
    } //#12283
    $k[$j++] = Infinity; //#12295
    var _1v = $_.bbs; //#12289
    var _1w = $_.bhs; //#12290
    $k[$j++] = Infinity; //#12291
    for (var _1y = 0, _1z = $_.bhs.length - 1; _1y < _1z; _1y++) { //#12291
        $k[$j++] = 1.44; //#12291
        $k[$j++] = 1.872; //#12291
    } //#12291
    $k[$j++] = 1.44; //#12291
    var _20 = $a(); //#12291
    $k[$j++] = 'ren'; //#12294
    $k[$j++] = bwipp_renlinear; //#12294
    $k[$j++] = 'bbs'; //#12294
    $k[$j++] = _1v; //#12294
    $k[$j++] = 'bhs'; //#12294
    $k[$j++] = _1w; //#12294
    $k[$j++] = 'sbs'; //#12294
    $k[$j++] = _20; //#12294
    if ($_.includetext) { //#12294
        $k[$j++] = 'txt'; //#12293
        $k[$j++] = $_.txt; //#12293
    } //#12293
    $k[$j++] = 'opt'; //#12295
    $k[$j++] = $_.options; //#12295
    var _24 = $d(); //#12295
    $k[$j++] = _24; //#12298
    if (!$_.dontdraw) { //#12298
        bwipp_renlinear(); //#12298
    } //#12298
    $_ = Object.getPrototypeOf($_); //#12300
    $_ = Object.getPrototypeOf($_); //#12302
}

function bwipp_msi() {
    $_ = Object.create($_); //#12332
    $_.dontdraw = false; //#12335
    $_.includecheck = false; //#12336
    $_.includetext = false; //#12337
    $_.includecheckintext = false; //#12338
    $_.checktype = "unset"; //#12339
    $_.badmod11 = false; //#12340
    $_.textfont = "OCR-B"; //#12341
    $_.textsize = 10; //#12342
    $_.textyoffset = -8; //#12343
    $_.height = 1; //#12344
    $k[$j++] = $_; //#12346
    bwipp_processoptions(); //#12346
    $_.options = $k[--$j]; //#12346
    $_.barcode = $k[--$j]; //#12347
    if ($ne($_.checktype, "unset") && (!$_.includecheck)) { //#12351
        $k[$j++] = 'bwipp.msiCheckTypeWithoutCheck#12350'; //#12350
        $k[$j++] = "checktype requires includecheck"; //#12350
        bwipp_raiseerror(); //#12350
    } //#12350
    if ($_.badmod11 && ((($ne($_.checktype, "mod11") && $ne($_.checktype, "ncrmod11")) && $ne($_.checktype, "mod1110")) && $ne($_.checktype, "ncrmod1110"))) { //#12355
        $k[$j++] = 'bwipp.msiBadMod11Mismatch#12354'; //#12354
        $k[$j++] = "badmod11 requires checktype with mod11"; //#12354
        bwipp_raiseerror(); //#12354
    } //#12354
    if ($eq($_.checktype, "unset")) { //#12357
        $_.checktype = "mod10"; //#12357
    } //#12357
    bwipp_loadctx(bwipp_msi) //#12359
    $forall($_.barcode, function() { //#12366
        var _B = $k[--$j]; //#12363
        if ((_B < 48) || (_B > 57)) { //#12365
            $k[$j++] = 'bwipp.msiBadCharacter#12364'; //#12364
            $k[$j++] = "MSI must contain only digits"; //#12364
            bwipp_raiseerror(); //#12364
        } //#12364
    }); //#12364
    if (!bwipp_msi.__12378__) { //#12378
        $_ = Object.create($_); //#12378
        $_.encs = $a(["12121212", "12121221", "12122112", "12122121", "12211212", "12211221", "12212112", "12212121", "21121212", "21121221", "21", "121"]); //#12374
        $_.barchars = "0123456789"; //#12377
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_msi.$ctx[id] = $_[id]); //#12377
        bwipp_msi.__12378__ = 1; //#12377
        $_ = Object.getPrototypeOf($_); //#12377
    } //#12377
    $_.barlen = $_.barcode.length; //#12380
    $_.txtlen = $_.barlen; //#12381
    $_.mod10 = function() {
        $_.code = $k[--$j]; //#12384
        $k[$j++] = 0; //#12385
        $k[$j++] = 0; //#12385
        $forall($_.code, function() { //#12385
            var _I = $k[--$j]; //#12385
            var _J = $k[--$j]; //#12385
            var _K = $k[--$j]; //#12385
            $k[$j++] = $f($f(_I - 48) + (_J * 10)); //#12385
            $k[$j++] = _K; //#12385
        }); //#12385
        $j--; //#12385
        var _L = $k[--$j]; //#12385
        $k[$j++] = _L * 2; //#12386
        $k[$j++] = 0; //#12386
        for (;;) { //#12386
            var _M = $k[--$j]; //#12386
            var _N = $k[--$j]; //#12386
            var _O = ~~(_N / 10); //#12386
            $k[$j++] = $f(_M + (_N % 10)); //#12386
            $k[$j++] = _O; //#12386
            if (_O == 0) { //#12386
                $j--; //#12386
                break; //#12386
            } //#12386
            var _P = $k[--$j]; //#12386
            var _Q = $k[--$j]; //#12386
            $k[$j++] = _P; //#12386
            $k[$j++] = _Q; //#12386
        } //#12386
        $k[$j++] = 0; //#12387
        $k[$j++] = 0; //#12387
        $forall($_.code, function() { //#12387
            var _S = $k[--$j]; //#12387
            var _T = $k[--$j]; //#12387
            var _U = $k[--$j]; //#12387
            $k[$j++] = $f(_T + $f(_S - 48)); //#12387
            $k[$j++] = _U; //#12387
        }); //#12387
        var _V = $k[--$j]; //#12387
        var _W = $k[--$j]; //#12387
        $k[$j++] = _V; //#12387
        $k[$j++] = _W; //#12387
        $j--; //#12387
        var _X = $k[--$j]; //#12387
        var _a = $s($_.code.length + 1); //#12389
        $puti(_a, 0, $_.code); //#12389
        $put(_a, $_.code.length, $f((($f(10 - ($f($k[--$j] + _X) % 10))) % 10) + 48)); //#12389
        $k[$j++] = _a; //#12389
    }; //#12389
    $_.mod11 = function() {
        $_.code = $k[--$j]; //#12393
        $k[$j++] = $_.code.length - 1; //#12394
        $forall($_.code, function() { //#12394
            var _g = $k[--$j]; //#12394
            var _h = $k[--$j]; //#12394
            $k[$j++] = $f(_g - 48); //#12394
            $k[$j++] = $f((_h % 6) + 2); //#12394
            $k[$j++] = $f(_h - 1); //#12394
        }); //#12394
        $j--; //#12394
        $k[$j++] = 0; //#12395
        for (var _j = 0, _k = $_.code.length; _j < _k; _j++) { //#12395
            var _l = $k[--$j]; //#12395
            var _m = $k[--$j]; //#12395
            var _n = $k[--$j]; //#12395
            $k[$j++] = $f(_l + (_n * _m)); //#12395
        } //#12395
        var _p = ($f(11 - ($k[--$j] % 11))) % 11; //#12397
        $k[$j++] = _p; //#12405
        if (_p == 10) { //#12404
            if ($_.badmod11) { //#12401
                $j--; //#12399
                var _s = $s($_.code.length + 2); //#12399
                $puti(_s, 0, $_.code); //#12399
                $puti(_s, $_.code.length, "10"); //#12399
                $k[$j++] = _s; //#12399
            } else { //#12401
                $j--; //#12401
                $k[$j++] = 'bwipp.msiBadMod11NotSpecified#12401'; //#12401
                $k[$j++] = "mod11 check digit is 10 but badmod11 not specified"; //#12401
                bwipp_raiseerror(); //#12401
            } //#12401
        } else { //#12404
            var _w = $s($_.code.length + 1); //#12404
            $puti(_w, 0, $_.code); //#12404
            $put(_w, $_.code.length, $f($k[--$j] + 48)); //#12404
            $k[$j++] = _w; //#12404
        } //#12404
    }; //#12404
    $_.ncrmod11 = function() {
        $_.code = $k[--$j]; //#12409
        $k[$j++] = $_.code.length - 1; //#12410
        $forall($_.code, function() { //#12410
            var _13 = $k[--$j]; //#12410
            var _14 = $k[--$j]; //#12410
            $k[$j++] = $f(_13 - 48); //#12410
            $k[$j++] = $f((_14 % 8) + 2); //#12410
            $k[$j++] = $f(_14 - 1); //#12410
        }); //#12410
        $j--; //#12410
        $k[$j++] = 0; //#12411
        for (var _16 = 0, _17 = $_.code.length; _16 < _17; _16++) { //#12411
            var _18 = $k[--$j]; //#12411
            var _19 = $k[--$j]; //#12411
            var _1A = $k[--$j]; //#12411
            $k[$j++] = $f(_18 + (_1A * _19)); //#12411
        } //#12411
        var _1C = ($f(11 - ($k[--$j] % 11))) % 11; //#12413
        $k[$j++] = _1C; //#12421
        if (_1C == 10) { //#12420
            if ($_.badmod11) { //#12417
                $j--; //#12415
                var _1F = $s($_.code.length + 2); //#12415
                $puti(_1F, 0, $_.code); //#12415
                $puti(_1F, $_.code.length, "10"); //#12415
                $k[$j++] = _1F; //#12415
            } else { //#12417
                $j--; //#12417
                $k[$j++] = 'bwipp.msiBadMod11NotSpecified#12417'; //#12417
                $k[$j++] = "mod11 check digit is 10 but badmod11 not specified"; //#12417
                bwipp_raiseerror(); //#12417
            } //#12417
        } else { //#12420
            var _1J = $s($_.code.length + 1); //#12420
            $puti(_1J, 0, $_.code); //#12420
            $put(_1J, $_.code.length, $f($k[--$j] + 48)); //#12420
            $k[$j++] = _1J; //#12420
        } //#12420
    }; //#12420
    if (!bwipp_msi.__12433__) { //#12433
        $_ = Object.create($_); //#12433
        var _1N = new Map([
            ["mod10", function() {
                $_.mod10(); //#12426
            }],
            ["mod1010", function() {
                $_.mod10(); //#12427
                $_.mod10(); //#12427
            }],
            ["mod11", function() {
                $_.mod11(); //#12428
            }],
            ["ncrmod11", function() {
                $_.ncrmod11(); //#12429
            }],
            ["mod1110", function() {
                $_.mod11(); //#12430
                $_.mod10(); //#12430
            }],
            ["ncrmod1110", function() {
                $_.ncrmod11(); //#12431
                $_.mod10(); //#12431
            }]
        ]); //#12431
        $_.checkfunc = _1N; //#12432
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_msi.$ctx[id] = $_[id]); //#12432
        bwipp_msi.__12433__ = 1; //#12432
        $_ = Object.getPrototypeOf($_); //#12432
    } //#12432
    if ($_.includecheck) { //#12443
        var _1Q = $_.checkfunc; //#12437
        var _1R = $_.checktype; //#12437
        var _1S = $get(_1Q, _1R) !== undefined; //#12437
        $k[$j++] = _1Q; //#12439
        $k[$j++] = _1R; //#12439
        if (!_1S) { //#12439
            $j -= 2; //#12438
            $k[$j++] = 'bwipp.msiBadCharacter#12438'; //#12438
            $k[$j++] = "MSI checktype must be mod10, mod1010, mod11, ncrmod11, mod1110 or ncrmod1110"; //#12438
            bwipp_raiseerror(); //#12438
        } //#12438
        var _1T = $k[--$j]; //#12440
        var _1V = $get($k[--$j], _1T); //#12440
        $k[$j++] = $_.barcode; //#12440
        if (_1V() === true) {
            return true;
        } //#12440
        $_.barcode = $k[--$j]; //#12440
        $_.barlen = $_.barcode.length; //#12441
        if ($_.includecheckintext) { //#12442
            $_.txtlen = $_.barlen; //#12442
        } //#12442
    } //#12442
    $_.sbs = $s(($_.barlen * 8) + 5); //#12445
    $_.txt = $a($_.barlen); //#12446
    $puti($_.sbs, 0, $get($_.encs, 10)); //#12449
    for (var _1k = 0, _1j = $_.barlen - 1; _1k <= _1j; _1k += 1) { //#12461
        $_.i = _1k; //#12452
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#12454
        $j--; //#12455
        $_.indx = $k[--$j].length; //#12456
        $j -= 2; //#12457
        $_.enc = $get($_.encs, $_.indx); //#12458
        $puti($_.sbs, ($_.i * 8) + 2, $_.enc); //#12459
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ($_.i * 12) + 3, $_.textyoffset, $_.textfont, $_.textsize])); //#12460
    } //#12460
    $puti($_.sbs, ($_.barlen * 8) + 2, $get($_.encs, 11)); //#12464
    $k[$j++] = Infinity; //#12475
    $k[$j++] = Infinity; //#12469
    var _2A = $_.sbs; //#12469
    for (var _2B = 0, _2C = _2A.length; _2B < _2C; _2B++) { //#12469
        $k[$j++] = $get(_2A, _2B) - 48; //#12469
    } //#12469
    var _2E = $a(); //#12469
    $k[$j++] = Infinity; //#12470
    for (var _2G = 0, _2H = ~~(($_.sbs.length + 1) / 2); _2G < _2H; _2G++) { //#12470
        $k[$j++] = $_.height; //#12470
    } //#12470
    var _2J = $a(); //#12470
    $k[$j++] = Infinity; //#12471
    for (var _2L = 0, _2M = ~~(($_.sbs.length + 1) / 2); _2L < _2M; _2L++) { //#12471
        $k[$j++] = 0; //#12471
    } //#12471
    var _2N = $a(); //#12471
    $k[$j++] = 'ren'; //#12474
    $k[$j++] = bwipp_renlinear; //#12474
    $k[$j++] = 'sbs'; //#12474
    $k[$j++] = _2E; //#12474
    $k[$j++] = 'bhs'; //#12474
    $k[$j++] = _2J; //#12474
    $k[$j++] = 'bbs'; //#12474
    $k[$j++] = _2N; //#12474
    if ($_.includetext) { //#12474
        $k[$j++] = 'txt'; //#12473
        $k[$j++] = $geti($_.txt, 0, $_.txtlen); //#12473
    } //#12473
    $k[$j++] = 'opt'; //#12475
    $k[$j++] = $_.options; //#12475
    var _2T = $d(); //#12475
    $k[$j++] = _2T; //#12478
    if (!$_.dontdraw) { //#12478
        bwipp_renlinear(); //#12478
    } //#12478
    $_ = Object.getPrototypeOf($_); //#12480
    $_ = Object.getPrototypeOf($_); //#12482
}

function bwipp_plessey() {
    $_ = Object.create($_); //#12512
    $_.dontdraw = false; //#12515
    $_.includetext = false; //#12516
    $_.validatecheck = false; //#12517
    $_.includecheckintext = false; //#12518
    $_.unidirectional = false; //#12519
    $_.textfont = "OCR-B"; //#12520
    $_.textsize = 10; //#12521
    $_.textyoffset = -8; //#12522
    $_.height = 1; //#12523
    $k[$j++] = $_; //#12525
    bwipp_processoptions(); //#12525
    $_.options = $k[--$j]; //#12525
    var _1 = $k[--$j]; //#12526
    $_.barcode = _1; //#12526
    bwipp_loadctx(bwipp_plessey) //#12528
    if (!bwipp_plessey.__12544__) { //#12544
        $_ = Object.create($_); //#12544
        $_.barchars = "0123456789ABCDEF"; //#12532
        $_.charvals = new Map; //#12533
        for (var _2 = 0; _2 <= 15; _2 += 1) { //#12534
            $put($_.charvals, $geti($_.barchars, _2, 1), _2); //#12534
        } //#12534
        $_.encs = $a(["14141414", "32141414", "14321414", "32321414", "14143214", "32143214", "14323214", "32323214", "14141432", "32141432", "14321432", "32321432", "14143232", "32143232", "14323232", "32323232", "32321432", "541412323", "323"]); //#12543
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_plessey.$ctx[id] = $_[id]); //#12543
        bwipp_plessey.__12544__ = 1; //#12543
        $_ = Object.getPrototypeOf($_); //#12543
    } //#12543
    for (var _A = 0, _9 = $_.barcode.length - 1; _A <= _9; _A += 1) { //#12551
        var _E = $get($_.charvals, $geti($_.barcode, _A, 1)) !== undefined; //#12548
        if (!_E) { //#12550
            $k[$j++] = 'bwipp.plesseyBadCharacter#12549'; //#12549
            $k[$j++] = "Plessey must contain only digits and letters A B C D E F"; //#12549
            bwipp_raiseerror(); //#12549
        } //#12549
    } //#12549
    $k[$j++] = 'barlen'; //#12553
    $k[$j++] = $_.barcode.length; //#12553
    if ($_.validatecheck) { //#12553
        var _H = $k[--$j]; //#12553
        $k[$j++] = $f(_H - 2); //#12553
    } //#12553
    var _I = $k[--$j]; //#12553
    $_[$k[--$j]] = _I; //#12553
    $_.checkbits = $a($f(($_.barlen * 4) + 8)); //#12556
    $puti($_.checkbits, $_.barlen * 4, $a([0, 0, 0, 0, 0, 0, 0, 0])); //#12557
    for (var _R = 0, _Q = $f($_.barlen - 1); _R <= _Q; _R += 1) { //#12567
        $_.i = _R; //#12559
        $_.indx = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#12560
        $puti($_.checkbits, $_.i * 4, $a([$_.indx & 1, ($_.indx >>> 1) & 1, ($_.indx >>> 2) & 1, $_.indx >>> 3])); //#12566
    } //#12566
    $_.checksalt = $a([1, 1, 1, 1, 0, 1, 0, 0, 1]); //#12568
    for (var _h = 0, _g = $f(($_.barlen * 4) - 1); _h <= _g; _h += 1) { //#12577
        $_.i = _h; //#12570
        if ($get($_.checkbits, $_.i) == 1) { //#12576
            for (var _l = 0; _l <= 8; _l += 1) { //#12575
                $_.j = _l; //#12573
                $put($_.checkbits, $_.i + $_.j, $xo($get($_.checkbits, $_.i + $_.j), $get($_.checksalt, $_.j))); //#12574
            } //#12574
        } //#12574
    } //#12574
    $_.checkval = 0; //#12578
    for (var _w = 0; _w <= 7; _w += 1) { //#12582
        $_.i = _w; //#12580
        $_.checkval = $f($_.checkval + ((~~Math.pow(2, $_.i)) * $get($_.checkbits, $f(($_.barlen * 4) + $_.i)))); //#12581
    } //#12581
    $_.checksum1 = $_.checkval & 15; //#12583
    $_.checksum2 = $_.checkval >>> 4; //#12584
    if ($_.validatecheck) { //#12591
        if (($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum1)) || ($get($_.barcode, $f($_.barlen + 1)) != $get($_.barchars, $_.checksum2))) { //#12589
            $k[$j++] = 'bwipp.plesseyBadCheckDigits#12588'; //#12588
            $k[$j++] = "Incorrect Plessey check digits provided"; //#12588
            bwipp_raiseerror(); //#12588
        } //#12588
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#12590
    } //#12590
    var _1N = $_.unidirectional ? 27 : 33; //#12593
    $_.sbs = $s($f(($_.barlen * 8) + _1N)); //#12593
    $_.txt = $a($f($_.barlen + 2)); //#12594
    $puti($_.sbs, 0, $get($_.encs, 16)); //#12597
    for (var _1W = 0, _1V = $f($_.barlen - 1); _1W <= _1V; _1W += 1) { //#12604
        $_.i = _1W; //#12600
        $_.indx = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#12601
        $puti($_.sbs, ($_.i * 8) + 8, $get($_.encs, $_.indx)); //#12602
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ($_.i * 20) + 20, $_.textyoffset, $_.textfont, $_.textsize])); //#12603
    } //#12603
    $puti($_.sbs, $f(($_.barlen * 8) + 8), $get($_.encs, $_.checksum1)); //#12607
    $puti($_.sbs, $f(($_.barlen * 8) + 16), $get($_.encs, $_.checksum2)); //#12608
    if ($_.includecheckintext) { //#12614
        $put($_.txt, $_.barlen, $a([$geti($_.barchars, $_.checksum1, 1), $f(($_.barlen * 20) + 20), $_.textyoffset, $_.textfont, $_.textsize])); //#12610
        $put($_.txt, $f($_.barlen + 1), $a([$geti($_.barchars, $_.checksum2, 1), $f(($f($_.barlen + 1) * 20) + 20), $_.textyoffset, $_.textfont, $_.textsize])); //#12611
    } else { //#12614
        $put($_.txt, $_.barlen, $a([" ", $f(($_.barlen * 20) + 20), $_.textyoffset, $_.textfont, $_.textsize])); //#12613
        $put($_.txt, $f($_.barlen + 1), $a([" ", $f(($f($_.barlen + 1) * 20) + 20), $_.textyoffset, $_.textfont, $_.textsize])); //#12614
    } //#12614
    var _2e = $_.unidirectional ? 18 : 17; //#12618
    $puti($_.sbs, $f(($_.barlen * 8) + 24), $get($_.encs, _2e)); //#12618
    $k[$j++] = Infinity; //#12629
    $k[$j++] = Infinity; //#12623
    var _2g = $_.sbs; //#12623
    for (var _2h = 0, _2i = _2g.length; _2h < _2i; _2h++) { //#12623
        $k[$j++] = $get(_2g, _2h) - 48; //#12623
    } //#12623
    var _2k = $a(); //#12623
    $k[$j++] = Infinity; //#12624
    for (var _2m = 0, _2n = ~~(($_.sbs.length + 1) / 2); _2m < _2n; _2m++) { //#12624
        $k[$j++] = $_.height; //#12624
    } //#12624
    var _2p = $a(); //#12624
    $k[$j++] = Infinity; //#12625
    for (var _2r = 0, _2s = ~~(($_.sbs.length + 1) / 2); _2r < _2s; _2r++) { //#12625
        $k[$j++] = 0; //#12625
    } //#12625
    var _2t = $a(); //#12625
    $k[$j++] = 'ren'; //#12628
    $k[$j++] = bwipp_renlinear; //#12628
    $k[$j++] = 'sbs'; //#12628
    $k[$j++] = _2k; //#12628
    $k[$j++] = 'bhs'; //#12628
    $k[$j++] = _2p; //#12628
    $k[$j++] = 'bbs'; //#12628
    $k[$j++] = _2t; //#12628
    if ($_.includetext) { //#12628
        $k[$j++] = 'txt'; //#12627
        $k[$j++] = $_.txt; //#12627
    } //#12627
    $k[$j++] = 'opt'; //#12629
    $k[$j++] = $_.options; //#12629
    var _2x = $d(); //#12629
    $k[$j++] = _2x; //#12632
    if (!$_.dontdraw) { //#12632
        bwipp_renlinear(); //#12632
    } //#12632
    $_ = Object.getPrototypeOf($_); //#12634
    $_ = Object.getPrototypeOf($_); //#12636
}

function bwipp_telepen() {
    $_ = Object.create($_); //#12667
    $_.numeric = false; //#12670
    $_.dontdraw = false; //#12671
    $_.includetext = false; //#12672
    $_.textfont = "OCR-B"; //#12673
    $_.textsize = 10; //#12674
    $_.textyoffset = -8; //#12675
    $_.height = 1; //#12676
    $_.parse = false; //#12677
    $k[$j++] = $_; //#12679
    bwipp_processoptions(); //#12679
    $_.options = $k[--$j]; //#12679
    $_.barcode = $k[--$j]; //#12680
    bwipp_loadctx(bwipp_telepen) //#12682
    var _3 = new Map([
        ["parse", $_.parse],
        ["parseonly", true],
        ["parsefnc", false]
    ]); //#12688
    $_.fncvals = _3; //#12689
    $k[$j++] = 'barcode'; //#12690
    $k[$j++] = $_.barcode; //#12690
    $k[$j++] = $_.fncvals; //#12690
    bwipp_parseinput(); //#12690
    var _6 = $k[--$j]; //#12690
    $_[$k[--$j]] = _6; //#12690
    $_.barlen = $_.barcode.length; //#12691
    delete $_.options["parse"]; //#12692
    if ($_.numeric && (($_.barlen % 2) != 0)) { //#12696
        $k[$j++] = 'bwipp.telepenNumericOddLength#12695'; //#12695
        $k[$j++] = "Telepen Numeric must have an even length"; //#12695
        bwipp_raiseerror(); //#12695
    } //#12695
    if (!bwipp_telepen.__12734__) { //#12734
        $_ = Object.create($_); //#12734
        $_.encs = $a(["31313131", "1131313111", "33313111", "1111313131", "3111313111", "11333131", "13133131", "111111313111", "31333111", "1131113131", "33113131", "1111333111", "3111113131", "1113133111", "1311133111", "111111113131", "3131113111", "11313331", "333331", "111131113111", "31113331", "1133113111", "1313113111", "1111113331", "31131331", "113111113111", "3311113111", "1111131331", "311111113111", "1113111331", "1311111331", "11111111113111", "31313311", "1131311131", "33311131", "1111313311", "3111311131", "11333311", "13133311", "111111311131", "31331131", "1131113311", "33113311", "1111331131", "3111113311", "1113131131", "1311131131", "111111113311", "3131111131", "1131131311", "33131311", "111131111131", "3111131311", "1133111131", "1313111131", "111111131311", "3113111311", "113111111131", "3311111131", "111113111311", "311111111131", "111311111311", "131111111311", "11111111111131", "3131311111", "11313133", "333133", "111131311111", "31113133", "1133311111", "1313311111", "1111113133", "313333", "113111311111", "3311311111", "11113333", "311111311111", "11131333", "13111333", "11111111311111", "31311133", "1131331111", "33331111", "1111311133", "3111331111", "11331133", "13131133", "111111331111", "3113131111", "1131111133", "33111133", "111113131111", "3111111133", "111311131111", "131111131111", "111111111133", "31311313", "113131111111", "3331111111", "1111311313", "311131111111", "11331313", "13131313", "11111131111111", "3133111111", "1131111313", "33111313", "111133111111", "3111111313", "111313111111", "131113111111", "111111111313", "313111111111", "1131131113", "33131113", "11113111111111", "3111131113", "113311111111", "131311111111", "111111131113", "3113111113", "11311111111111", "331111111111", "111113111113", "31111111111111", "111311111113", "131111111113", "1111111111111111"]); //#12733
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_telepen.$ctx[id] = $_[id]); //#12733
        bwipp_telepen.__12734__ = 1; //#12733
        $_ = Object.getPrototypeOf($_); //#12733
    } //#12733
    $_.sbs = $s(($_.barlen * 16) + 48); //#12736
    $_.txt = $a($_.barlen); //#12737
    $_.enc = $get($_.encs, 95); //#12740
    $puti($_.sbs, 0, $_.enc); //#12741
    $_.l = $_.enc.length; //#12742
    $_.checksum = 0; //#12744
    $_.i = 0; //#12745
    $_.j = 0; //#12745
    for (;;) { //#12788
        if ($_.i == $_.barlen) { //#12747
            break; //#12747
        } //#12747
        if ($_.numeric) { //#12781
            if ($get($_.barcode, $_.i) > 16) { //#12769
                $_.np = $geti($_.barcode, $_.i, 2); //#12750
                var _X = $get($_.np, 0); //#12751
                var _Z = $get($_.np, 1); //#12752
                if (((_X < 48) || (_X > 57)) || (((_Z < 48) || (_Z > 57)) && (!(_Z == 88)))) { //#12758
                    $k[$j++] = -1; //#12754
                } else { //#12758
                    var _e = $f($get($_.np, 1) - 48); //#12757
                    $k[$j++] = $f($get($_.np, 0) - 48); //#12757
                    $k[$j++] = _e; //#12757
                    if (_e != 40) { //#12757
                        var _f = $k[--$j]; //#12757
                        var _g = $k[--$j]; //#12757
                        $k[$j++] = $f(($f(_f + (_g * 10))) + 10); //#12757
                    } else { //#12757
                        $j--; //#12757
                    } //#12757
                    var _h = $k[--$j]; //#12758
                    $k[$j++] = $f(_h + 17); //#12758
                } //#12758
                var _i = $k[--$j]; //#12760
                $k[$j++] = _i; //#12762
                if (_i == -1) { //#12762
                    $k[$j++] = 'bwipp.telepenInvalidNumericCharacter#12761'; //#12761
                    $k[$j++] = "Telepen Numeric may contain only digits, or X in even positions"; //#12761
                    bwipp_raiseerror(); //#12761
                } //#12761
                $_.indx = $k[--$j]; //#12763
                $put($_.txt, $_.j, $a([$_.np, ($_.j * 16) + 16, $_.textyoffset, $_.textfont, $_.textsize])); //#12764
                $_.i = $_.i + 2; //#12765
            } else { //#12769
                $_.indx = $get($_.barcode, $_.i); //#12767
                $put($_.txt, $_.j, $a([" ", ($_.j * 16) + 16, $_.textyoffset, $_.textfont, $_.textsize])); //#12768
                $_.i = $_.i + 1; //#12769
            } //#12769
        } else { //#12781
            $_.indx = $get($_.barcode, $_.i); //#12772
            if ($_.indx > 127) { //#12775
                $k[$j++] = 'bwipp.telepenInvalidAlphaCharacter#12774'; //#12774
                $k[$j++] = "Telepen Alpha characters must have ordinal values 0 to 127"; //#12774
                bwipp_raiseerror(); //#12774
            } //#12774
            if (($_.indx >= 32) && ($_.indx <= 126)) { //#12779
                $put($_.txt, $_.j, $a([$geti($_.barcode, $_.i, 1), ($_.j * 16) + 16, $_.textyoffset, $_.textfont, $_.textsize])); //#12777
            } else { //#12779
                $put($_.txt, $_.j, $a([" ", ($_.j * 16) + 16, $_.textyoffset, $_.textfont, $_.textsize])); //#12779
            } //#12779
            $_.i = $_.i + 1; //#12781
        } //#12781
        $_.checksum = $f($_.checksum + $_.indx); //#12783
        $_.enc = $get($_.encs, $_.indx); //#12784
        $puti($_.sbs, $_.l, $_.enc); //#12785
        $_.l = $_.l + $_.enc.length; //#12786
        $_.j = $_.j + 1; //#12787
    } //#12787
    $_.checksum = ($f(127 - ($_.checksum % 127))) % 127; //#12791
    $_.enc = $get($_.encs, $_.checksum); //#12792
    $puti($_.sbs, $_.l, $_.enc); //#12793
    $_.l = $_.l + $_.enc.length; //#12794
    $_.enc = $get($_.encs, 122); //#12797
    $puti($_.sbs, $_.l, $_.enc); //#12798
    $_.l = $_.l + $_.enc.length; //#12799
    $_.sbs = $geti($_.sbs, 0, $_.l); //#12802
    $_.txt = $geti($_.txt, 0, $_.j); //#12803
    $k[$j++] = Infinity; //#12814
    $k[$j++] = Infinity; //#12808
    var _1z = $_.sbs; //#12808
    for (var _20 = 0, _21 = _1z.length; _20 < _21; _20++) { //#12808
        $k[$j++] = $f($get(_1z, _20) - 48); //#12808
    } //#12808
    var _23 = $a(); //#12808
    $k[$j++] = Infinity; //#12809
    for (var _25 = 0, _26 = ~~(($_.sbs.length + 1) / 2); _25 < _26; _25++) { //#12809
        $k[$j++] = $_.height; //#12809
    } //#12809
    var _28 = $a(); //#12809
    $k[$j++] = Infinity; //#12810
    for (var _2A = 0, _2B = ~~(($_.sbs.length + 1) / 2); _2A < _2B; _2A++) { //#12810
        $k[$j++] = 0; //#12810
    } //#12810
    var _2C = $a(); //#12810
    $k[$j++] = 'ren'; //#12813
    $k[$j++] = bwipp_renlinear; //#12813
    $k[$j++] = 'sbs'; //#12813
    $k[$j++] = _23; //#12813
    $k[$j++] = 'bhs'; //#12813
    $k[$j++] = _28; //#12813
    $k[$j++] = 'bbs'; //#12813
    $k[$j++] = _2C; //#12813
    if ($_.includetext) { //#12813
        $k[$j++] = 'txt'; //#12812
        $k[$j++] = $_.txt; //#12812
    } //#12812
    $k[$j++] = 'opt'; //#12814
    $k[$j++] = $_.options; //#12814
    var _2G = $d(); //#12814
    $k[$j++] = _2G; //#12817
    if (!$_.dontdraw) { //#12817
        bwipp_renlinear(); //#12817
    } //#12817
    $_ = Object.getPrototypeOf($_); //#12819
    $_ = Object.getPrototypeOf($_); //#12821
}

function bwipp_telepennumeric() {
    $_ = Object.create($_); //#12850
    $_.dontdraw = false; //#12853
    $k[$j++] = $_; //#12855
    bwipp_processoptions(); //#12855
    $_.options = $k[--$j]; //#12855
    $_.barcode = $k[--$j]; //#12856
    $put($_.options, "dontdraw", true); //#12859
    $put($_.options, "numeric", true); //#12860
    $k[$j++] = 'args'; //#12862
    $k[$j++] = $_.barcode; //#12862
    $k[$j++] = $_.options; //#12862
    bwipp_telepen(); //#12862
    var _6 = $k[--$j]; //#12862
    $_[$k[--$j]] = _6; //#12862
    $put($_.args, "opt", $_.options); //#12864
    $k[$j++] = $_.args; //#12867
    if (!$_.dontdraw) { //#12867
        bwipp_renlinear(); //#12867
    } //#12867
    $_ = Object.getPrototypeOf($_); //#12869
}

function bwipp_posicode() {
    $_ = Object.create($_); //#12900
    $_.dontdraw = false; //#12903
    $_.includetext = false; //#12904
    $_.textfont = "OCR-B"; //#12905
    $_.textsize = 10; //#12906
    $_.textxoffset = 0; //#12907
    $_.textyoffset = -8; //#12908
    $_.height = 1; //#12909
    $_.encoding = "auto"; //#12910
    $_.version = "a"; //#12911
    $_.checkoffset = 0; //#12912
    $_.raw = false; //#12913
    $_.parse = false; //#12914
    $_.parsefnc = false; //#12915
    $k[$j++] = $_; //#12917
    bwipp_processoptions(); //#12917
    $_.options = $k[--$j]; //#12917
    var _1 = $k[--$j]; //#12918
    $_.barcode = _1; //#12918
    bwipp_loadctx(bwipp_posicode) //#12920
    if (!bwipp_posicode.__12963__) { //#12963
        $_ = Object.create($_); //#12963
        $_.la0 = -1; //#12924
        $_.la1 = -2; //#12924
        $_.la2 = -3; //#12924
        $_.sf0 = -4; //#12925
        $_.sf1 = -5; //#12925
        $_.sf2 = -6; //#12925
        $_.fn1 = -7; //#12926
        $_.fn2 = -8; //#12926
        $_.fn3 = -9; //#12926
        $_.fn4 = -10; //#12926
        $_.charmapsnormal = $a([$a(["0", "^", "'"]), $a(["1", ";", 27]), $a(["2", "<", 28]), $a(["3", "=", 29]), $a(["4", ">", 30]), $a(["5", "?", 31]), $a(["6", "@", "!"]), $a(["7", "[", "\""]), $a(["8", 92, "#"]), $a(["9", "]", "&"]), $a(["A", "a", 1]), $a(["B", "b", 2]), $a(["C", "c", 3]), $a(["D", "d", 4]), $a(["E", "e", 5]), $a(["F", "f", 6]), $a(["G", "g", 7]), $a(["H", "h", 8]), $a(["I", "i", 9]), $a(["J", "j", 10]), $a(["K", "k", 11]), $a(["L", "l", 12]), $a(["M", "m", 13]), $a(["N", "n", 14]), $a(["O", "o", 15]), $a(["P", "p", 16]), $a(["Q", "q", 17]), $a(["R", "r", 18]), $a(["S", "s", 19]), $a(["T", "t", 20]), $a(["U", "u", 21]), $a(["V", "v", 22]), $a(["W", "w", 23]), $a(["X", "x", 24]), $a(["Y", "y", 25]), $a(["Z", "z", 26]), $a(["-", "_", 40]), $a([".", "`", 41]), $a([" ", 127, 0]), $a(["$", "{", "*"]), $a(["/", "|", ","]), $a(["+", "}", ":"]), $a(["%", "~", $_.fn1]), $a([$_.la1, $_.la0, $_.fn2]), $a([$_.sf1, $_.sf0, $_.fn3]), $a([$_.sf2, $_.sf2, $_.fn4])]); //#12947
        var _12 = $a(["5", -98, -98]); //#12950
        $_.chapmapslimited = $a([$a(["0", -98, -98]), $a(["1", -98, -98]), $a(["2", -98, -98]), $a(["3", -98, -98]), $a(["4", -98, -98]), _12, $a(["6", -98, -98]), $a(["7", -98, -98]), $a(["8", -98, -98]), $a(["9", -98, -98]), $a(["A", -98, -98]), $a(["B", -98, -98]), $a(["C", -98, -98]), $a(["D", -98, -98]), $a(["E", -98, -98]), $a(["F", -98, -98]), $a(["G", -98, -98]), $a(["H", -98, -98]), $a(["I", -98, -98]), $a(["J", -98, -98]), $a(["K", -98, -98]), $a(["L", -98, -98]), $a(["M", -98, -98]), $a(["N", -98, -98]), $a(["O", -98, -98]), $a(["P", -98, -98]), $a(["Q", -98, -98]), $a(["R", -98, -98]), $a(["S", -98, -98]), $a(["T", -98, -98]), $a(["U", -98, -98]), $a(["V", -98, -98]), $a(["W", -98, -98]), $a(["X", -98, -98]), $a(["Y", -98, -98]), $a(["Z", -98, -98]), $a(["-", -98, -98]), $a([".", -98, -98])]); //#12962
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_posicode.$ctx[id] = $_[id]); //#12962
        bwipp_posicode.__12963__ = 1; //#12962
        $_ = Object.getPrototypeOf($_); //#12962
    } //#12962
    $k[$j++] = 'charmaps'; //#12965
    if ($eq($_.version, "a") || $eq($_.version, "b")) { //#12965
        $k[$j++] = $_.charmapsnormal; //#12965
    } else { //#12965
        $k[$j++] = $_.chapmapslimited; //#12965
    } //#12965
    var _1f = $k[--$j]; //#12965
    $_[$k[--$j]] = _1f; //#12965
    var _1h = $_.charmaps; //#12969
    var _1i = $_.charmaps; //#12969
    var _1j = $_.charmaps; //#12969
    $_.charvals = $a([new Map, new Map, new Map]); //#12970
    for (var _1n = 0, _1m = $_.charmaps.length - 1; _1n <= _1m; _1n += 1) { //#12979
        $_.i = _1n; //#12972
        $_.encs = $get($_.charmaps, $_.i); //#12973
        for (var _1r = 0; _1r <= 2; _1r += 1) { //#12978
            $_.j = _1r; //#12975
            var _1u = $get($_.encs, $_.j); //#12976
            $k[$j++] = _1u; //#12976
            if ($eq($type(_1u), 'stringtype')) { //#12976
                var _1x = $get($k[--$j], 0); //#12976
                $k[$j++] = _1x; //#12976
            } //#12976
            $put($get($_.charvals, $_.j), $k[--$j], $_.i); //#12977
        } //#12977
    } //#12977
    $_.set0 = $get($_.charvals, 0); //#12980
    $_.set1 = $get($_.charvals, 1); //#12981
    $_.set2 = $get($_.charvals, 2); //#12982
    if ($_.raw) { //#12984
        $_.encoding = "raw"; //#12984
    } //#12984
    if ($eq($_.encoding, "raw")) { //#12998
        $_.cws = $a($_.barcode.length); //#12987
        $_.i = 0; //#12988
        $_.j = 0; //#12988
        for (;;) { //#12995
            if ($_.i == $_.barcode.length) { //#12990
                break; //#12990
            } //#12990
            $_.cw = $cvi($geti($_.barcode, $_.i + 1, 3)); //#12991
            $put($_.cws, $_.j, $_.cw); //#12992
            $_.i = $_.i + 4; //#12993
            $_.j = $_.j + 1; //#12994
        } //#12994
        $_.cws = $geti($_.cws, 0, $_.j); //#12996
        $_.text = ""; //#12997
    } //#12997
    if ($eq($_.encoding, "auto")) { //#13113
        var _2W = new Map([
            ["parse", $_.parse],
            ["parsefnc", $_.parsefnc],
            ["FNC1", $_.fn1],
            ["FNC2", $_.fn2],
            ["FNC3", $_.fn3]
        ]); //#13008
        $_.fncvals = _2W; //#13010
        $k[$j++] = 'msg'; //#13011
        $k[$j++] = $_.barcode; //#13011
        $k[$j++] = $_.fncvals; //#13011
        bwipp_parseinput(); //#13011
        var _2Z = $k[--$j]; //#13011
        $_[$k[--$j]] = _2Z; //#13011
        $_.msglen = $_.msg.length; //#13012
        $_.text = $s($_.msglen); //#13014
        for (var _2g = 0, _2f = $_.msglen - 1; _2g <= _2f; _2g += 1) { //#13018
            $_.i = _2g; //#13016
            var _2l = $get($_.msg, $_.i); //#13017
            $k[$j++] = $_.text; //#13017
            $k[$j++] = $_.i; //#13017
            $k[$j++] = _2l; //#13017
            if (_2l < 0) { //#13017
                $j--; //#13017
                $k[$j++] = 32; //#13017
            } //#13017
            var _2m = $k[--$j]; //#13017
            var _2n = $k[--$j]; //#13017
            $put($k[--$j], _2n, _2m); //#13017
        } //#13017
        $k[$j++] = Infinity; //#13021
        for (var _2q = 0, _2r = $_.msglen; _2q < _2r; _2q++) { //#13021
            $k[$j++] = 0; //#13021
        } //#13021
        $k[$j++] = 0; //#13021
        $_.numSA = $a(); //#13021
        $k[$j++] = Infinity; //#13022
        for (var _2u = 0, _2v = $_.msglen; _2u < _2v; _2u++) { //#13022
            $k[$j++] = 0; //#13022
        } //#13022
        $k[$j++] = 0; //#13022
        $_.numEA = $a(); //#13022
        for (var _2y = $_.msglen - 1; _2y >= 0; _2y -= 1) { //#13032
            $_.i = _2y; //#13024
            if ($get($_.msg, $_.i) >= 0) { //#13031
                if ($get($_.msg, $_.i) >= 128) { //#13029
                    $put($_.numEA, $_.i, $f($get($_.numEA, $_.i + 1) + 1)); //#13027
                } else { //#13029
                    $put($_.numSA, $_.i, $f($get($_.numSA, $_.i + 1) + 1)); //#13029
                } //#13029
            } //#13029
        } //#13029
        $_.ea = false; //#13035
        $_.msgtmp = $a([]); //#13035
        for (var _3I = 0, _3H = $_.msglen - 1; _3I <= _3H; _3I += 1) { //#13050
            $_.i = _3I; //#13037
            $_.c = $get($_.msg, $_.i); //#13038
            if ((!$xo($_.ea, $_.c < 128)) && ($_.c >= 0)) { //#13048
                if ($_.ea) { //#13040
                    $k[$j++] = $_.numSA; //#13040
                } else { //#13040
                    $k[$j++] = $_.numEA; //#13040
                } //#13040
                var _3U = $get($k[--$j], $_.i); //#13040
                var _3X = ($f(_3U + $_.i) == $_.msglen) ? 3 : 5; //#13041
                if (_3U < _3X) { //#13046
                    $k[$j++] = Infinity; //#13043
                    $aload($_.msgtmp); //#13043
                    $k[$j++] = $_.fn4; //#13043
                    $_.msgtmp = $a(); //#13043
                } else { //#13046
                    $k[$j++] = Infinity; //#13045
                    $aload($_.msgtmp); //#13045
                    $k[$j++] = $_.fn4; //#13045
                    $k[$j++] = $_.fn4; //#13045
                    $_.msgtmp = $a(); //#13045
                    $_.ea = !$_.ea; //#13046
                } //#13046
            } //#13046
            $k[$j++] = Infinity; //#13049
            $aload($_.msgtmp); //#13049
            if ($_.c >= 0) { //#13049
                $k[$j++] = $_.c & 127; //#13049
            } else { //#13049
                $k[$j++] = $_.c; //#13049
            } //#13049
            $_.msgtmp = $a(); //#13049
        } //#13049
        $_.msg = $_.msgtmp; //#13051
        $_.msglen = $_.msg.length; //#13052
        $_.enc = function() {
            var _3n = $k[--$j]; //#13056
            $put($_.cws, $_.j, $get(_3n, $k[--$j])); //#13056
            $_.j = $_.j + 1; //#13057
        }; //#13057
        $_.cws = $a($_.msglen * 2); //#13060
        $_.i = 0; //#13061
        $_.j = 0; //#13061
        $_.cset = "set0"; //#13061
        for (;;) { //#13111
            if ($_.i == $_.msglen) { //#13063
                break; //#13063
            } //#13063
            for (;;) { //#13109
                $_.char1 = $get($_.msg, $_.i); //#13068
                $k[$j++] = 'char2'; //#13069
                if (($_.i + 1) < $_.msglen) { //#13069
                    $k[$j++] = $get($_.msg, $_.i + 1); //#13069
                } else { //#13069
                    $k[$j++] = -99; //#13069
                } //#13069
                var _45 = $k[--$j]; //#13069
                $_[$k[--$j]] = _45; //#13069
                var _4A = $get($_[$_.cset], $_.char1) !== undefined; //#13072
                if (_4A) { //#13076
                    $k[$j++] = $_.char1; //#13073
                    $k[$j++] = $_[$_.cset]; //#13073
                    $_.enc(); //#13073
                    $_.i = $_.i + 1; //#13074
                    break; //#13075
                } //#13075
                var _4H = $get($_.set2, $_.char1) !== undefined; //#13079
                if (_4H) { //#13084
                    $k[$j++] = $_.sf2; //#13080
                    $k[$j++] = $_[$_.cset]; //#13080
                    $_.enc(); //#13080
                    $k[$j++] = $_.char1; //#13081
                    $k[$j++] = $_.set2; //#13081
                    $_.enc(); //#13081
                    $_.i = $_.i + 1; //#13082
                    break; //#13083
                } //#13083
                var _4R = $get($_[$_.cset], $_.char2) !== undefined; //#13087
                if (!_4R) { //#13105
                    if ($eq($_.cset, "set0")) { //#13093
                        $k[$j++] = $_.la1; //#13089
                        $k[$j++] = $_[$_.cset]; //#13089
                        $_.enc(); //#13089
                        $_.cset = "set1"; //#13090
                    } else { //#13093
                        $k[$j++] = $_.la0; //#13092
                        $k[$j++] = $_[$_.cset]; //#13092
                        $_.enc(); //#13092
                        $_.cset = "set0"; //#13093
                    } //#13093
                    break; //#13095
                } else { //#13105
                    if ($eq($_.cset, "set0")) { //#13102
                        $k[$j++] = $_.sf1; //#13098
                        $k[$j++] = $_[$_.cset]; //#13098
                        $_.enc(); //#13098
                        $k[$j++] = $_.char1; //#13099
                        $k[$j++] = $_.set1; //#13099
                        $_.enc(); //#13099
                    } else { //#13102
                        $k[$j++] = $_.sf0; //#13101
                        $k[$j++] = $_[$_.cset]; //#13101
                        $_.enc(); //#13101
                        $k[$j++] = $_.char1; //#13102
                        $k[$j++] = $_.set0; //#13102
                        $_.enc(); //#13102
                    } //#13102
                    $_.i = $_.i + 1; //#13104
                    break; //#13105
                } //#13105
                break; //#13108
            } //#13108
        } //#13108
        $_.cws = $geti($_.cws, 0, $_.j); //#13112
    } //#13112
    if (!bwipp_posicode.__13163__) { //#13163
        $_ = Object.create($_); //#13163
        var _4s = new Map([
            ["a", $a(["141112", "131212", "121312", "111412", "131113", "121213", "111313", "121114", "111214", "111115", "181111", "171211", "161311", "151411", "141511", "131611", "121711", "111811", "171112", "161212", "151312", "141412", "131512", "121612", "111712", "161113", "151213", "141313", "131413", "121513", "111613", "151114", "141214", "131314", "121414", "111514", "141115", "131215", "121315", "111415", "131116", "121216", "111316", "121117", "111217", "111118", "1<111112", "111111111;1"])],
            ["b", $a(["151213", "141313", "131413", "121513", "141214", "131314", "121414", "131215", "121315", "121216", "191212", "181312", "171412", "161512", "151612", "141712", "131812", "121912", "181213", "171313", "161413", "151513", "141613", "131713", "121813", "171214", "161314", "151414", "141514", "131614", "121714", "161215", "151315", "141415", "131515", "121615", "151216", "141316", "131416", "121516", "141217", "131317", "121417", "131218", "121318", "121219", "1<121312", "121212121<1"])],
            ["limiteda", $a(["111411", "111312", "111213", "111114", "121311", "121212", "121113", "141111", "131211", "131112", "171111", "161211", "151311", "141411", "131511", "121611", "111711", "161112", "151212", "141312", "131412", "121512", "111612", "151113", "141213", "131313", "121413", "111513", "141114", "131214", "121314", "111414", "131115", "121215", "111315", "121116", "111216", "111117", "151111", "1"])],
            ["limitedb", $a(["121512", "121413", "121314", "121215", "131412", "131313", "131214", "151212", "141312", "141213", "181212", "171312", "161412", "151512", "141612", "131712", "121812", "171213", "161313", "151413", "141513", "131613", "121713", "161214", "151314", "141414", "131514", "121614", "151215", "141315", "131415", "121515", "141216", "131316", "121416", "131217", "121317", "121218", "141212", "1"])]
        ]); //#13160
        $_.encmaps = _4s; //#13162
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_posicode.$ctx[id] = $_[id]); //#13162
        bwipp_posicode.__13163__ = 1; //#13162
        $_ = Object.getPrototypeOf($_); //#13162
    } //#13162
    $_.encs = $get($_.encmaps, $_.version); //#13164
    if (!bwipp_posicode.__13174__) { //#13174
        $_ = Object.create($_); //#13174
        $_.c2w = $a([$a([495, 330, 210, 126, 70, 35, 15, 5]), $a([165, 120, 84, 56, 35, 20, 10, 4]), $a([45, 36, 28, 21, 15, 10, 6, 3]), $a([9, 8, 7, 6, 5, 4, 3, 2]), $a([1, 1, 1, 1, 1, 1, 1, 1])]); //#13173
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_posicode.$ctx[id] = $_[id]); //#13173
        bwipp_posicode.__13174__ = 1; //#13173
        $_ = Object.getPrototypeOf($_); //#13173
    } //#13173
    $_.v = 0; //#13175
    var _54 = $_.cws; //#13176
    for (var _55 = 0, _56 = _54.length; _55 < _56; _55++) { //#13185
        $_.cw = $get(_54, _55); //#13177
        for (var _58 = 0, _59 = 6; _58 < _59; _58++) { //#13184
            if ((($_.cw ^ $_.v) & 1) != 0) { //#13181
                $_.v = $_.v ^ 7682; //#13180
            } //#13180
            $_.v = $_.v >>> 1; //#13182
            $_.cw = $_.cw >>> 1; //#13183
        } //#13183
    } //#13183
    $_.v = $_.v + $_.checkoffset; //#13186
    if ($eq($_.version, "limiteda") || $eq($_.version, "limitedb")) { //#13194
        $_.v = $_.v & 1023; //#13189
        if (($_.v > 824) && ($_.v < 853)) { //#13192
            $_.v = $_.v + 292; //#13191
        } //#13191
    } else { //#13194
        $_.v = ($_.v & 1023) + 45; //#13194
    } //#13194
    $_.d = $a([2, 2, 2, 2, 2, 2]); //#13197
    $_.r = 0; //#13198
    $_.c = 0; //#13198
    $_.w = 0; //#13198
    $_.sum = 0; //#13198
    for (;;) { //#13217
        if ($_.sum == $_.v) { //#13200
            break; //#13200
        } //#13200
        $_.t = $f($_.sum + $get($get($_.c2w, $_.r), $_.c)); //#13201
        if ($_.t == $_.v) { //#13206
            $_.w = $_.w + 1; //#13203
            $put($_.d, $_.r, $_.w + 2); //#13204
            $_.sum = $_.t; //#13205
        } //#13205
        if ($_.t > $_.v) { //#13211
            $put($_.d, $_.r, $_.w + 2); //#13208
            $_.r = $_.r + 1; //#13209
            $_.w = 0; //#13210
        } //#13210
        if ($_.t < $_.v) { //#13216
            $_.c = $_.c + 1; //#13213
            $_.w = $_.w + 1; //#13214
            $_.sum = $_.t; //#13215
        } //#13215
    } //#13215
    $k[$j++] = 20; //#13218
    for (var _5p = 0; _5p <= 4; _5p += 1) { //#13218
        var _5s = $k[--$j]; //#13218
        $k[$j++] = $f(_5s - $get($_.d, _5p)); //#13218
    } //#13218
    $put($_.d, 5, $k[--$j]); //#13219
    if ($eq($_.version, "b") || $eq($_.version, "limitedb")) { //#13222
        $k[$j++] = Infinity; //#13221
        var _5x = $_.d; //#13221
        for (var _5y = 0, _5z = _5x.length; _5y < _5z; _5y++) { //#13221
            $k[$j++] = $f($get(_5x, _5y) + 1); //#13221
        } //#13221
        $_.d = $a(); //#13221
    } //#13221
    $_.cbs = $strcpy($s(12), "111111111111"); //#13223
    for (var _64 = 5; _64 >= 0; _64 -= 1) { //#13227
        $_.i = _64; //#13225
        $put($_.cbs, ((5 - $_.i) * 2) + 1, $f($get($_.d, $_.i) + 47)); //#13226
    } //#13226
    $_.sbs = $s(($_.cws.length * 6) + 31); //#13230
    var _6E = $get($_.encs, $_.encs.length - 2); //#13231
    $puti($_.sbs, 0, _6E); //#13232
    $_.j = _6E.length; //#13233
    for (var _6I = 0, _6H = $_.cws.length - 1; _6I <= _6H; _6I += 1) { //#13238
        $_.i = _6I; //#13235
        $puti($_.sbs, $_.j, $get($_.encs, $get($_.cws, $_.i))); //#13236
        $_.j = $_.j + 6; //#13237
    } //#13237
    $puti($_.sbs, $_.j, $_.cbs); //#13239
    $_.j = $_.j + 12; //#13240
    var _6X = $get($_.encs, $_.encs.length - 1); //#13241
    $puti($_.sbs, $_.j, _6X); //#13242
    $_.j = _6X.length + $_.j; //#13243
    $_.sbs = $geti($_.sbs, 0, $_.j); //#13244
    $k[$j++] = Infinity; //#13254
    $k[$j++] = Infinity; //#13249
    var _6e = $_.sbs; //#13249
    for (var _6f = 0, _6g = _6e.length; _6f < _6g; _6f++) { //#13249
        $k[$j++] = $f($get(_6e, _6f) - 48); //#13249
    } //#13249
    var _6i = $a(); //#13249
    $k[$j++] = Infinity; //#13250
    for (var _6k = 0, _6l = ~~(($_.sbs.length + 1) / 2); _6k < _6l; _6k++) { //#13250
        $k[$j++] = $_.height; //#13250
    } //#13250
    var _6n = $a(); //#13250
    $k[$j++] = Infinity; //#13251
    for (var _6p = 0, _6q = ~~(($_.sbs.length + 1) / 2); _6p < _6q; _6p++) { //#13251
        $k[$j++] = 0; //#13251
    } //#13251
    var _6r = $a(); //#13251
    $k[$j++] = 'ren'; //#13254
    $k[$j++] = bwipp_renlinear; //#13254
    $k[$j++] = 'sbs'; //#13254
    $k[$j++] = _6i; //#13254
    $k[$j++] = 'bhs'; //#13254
    $k[$j++] = _6n; //#13254
    $k[$j++] = 'bbs'; //#13254
    $k[$j++] = _6r; //#13254
    $k[$j++] = 'txt'; //#13254
    $k[$j++] = $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])]); //#13254
    $k[$j++] = 'textxalign'; //#13254
    $k[$j++] = "center"; //#13254
    $k[$j++] = 'opt'; //#13254
    $k[$j++] = $_.options; //#13254
    var _70 = $d(); //#13254
    $k[$j++] = _70; //#13257
    if (!$_.dontdraw) { //#13257
        bwipp_renlinear(); //#13257
    } //#13257
    $_ = Object.getPrototypeOf($_); //#13259
    $_ = Object.getPrototypeOf($_); //#13261
}

function bwipp_codablockf() {
    $_ = Object.create($_); //#13292
    $_.dontdraw = false; //#13295
    $_.rows = -1; //#13296
    $_.columns = 8; //#13297
    $_.rowheight = 10; //#13298
    $_.sepheight = 1; //#13299
    $_.parse = false; //#13300
    $_.parsefnc = false; //#13301
    $k[$j++] = $_; //#13303
    bwipp_processoptions(); //#13303
    $_.options = $k[--$j]; //#13303
    $_.barcode = $k[--$j]; //#13304
    if (($_.columns < 4) || ($_.columns > 62)) { //#13308
        $k[$j++] = 'bwipp.codablockfBadColumns#13307'; //#13307
        $k[$j++] = "Codablock F must have 4 to 62 columns"; //#13307
        bwipp_raiseerror(); //#13307
    } //#13307
    if (($_.rows != -1) && (($_.rows < 2) || ($_.rows > 44))) { //#13312
        $k[$j++] = 'bwipp.codablockfBadRows#13311'; //#13311
        $k[$j++] = "Codablock F must have 2 to 44 rows"; //#13311
        bwipp_raiseerror(); //#13311
    } //#13311
    if ($_.rowheight < 8) { //#13316
        $k[$j++] = 'bwipp.codablockfBadRowHeight#13315'; //#13315
        $k[$j++] = "Codablock F must have rowheight of at least 8"; //#13315
        bwipp_raiseerror(); //#13315
    } //#13315
    if ($_.sepheight < 1) { //#13320
        $k[$j++] = 'bwipp.codablockfBadSepHeight#13319'; //#13319
        $k[$j++] = "Codablock F must have sepheight of at least 1"; //#13319
        bwipp_raiseerror(); //#13319
    } //#13319
    bwipp_loadctx(bwipp_codablockf) //#13322
    $k[$j++] = 'c'; //#13324
    if (($_.columns >= 4) && ($_.columns <= 62)) { //#13324
        $k[$j++] = $_.columns; //#13324
    } else { //#13324
        $k[$j++] = 8; //#13324
    } //#13324
    var _C = $k[--$j]; //#13324
    $_[$k[--$j]] = _C; //#13324
    $k[$j++] = 'rows'; //#13325
    if (($_.rows >= 2) && ($_.rows <= 44)) { //#13325
        $k[$j++] = $_.rows; //#13325
    } else { //#13325
        $k[$j++] = -1; //#13325
    } //#13325
    var _H = $k[--$j]; //#13325
    $_[$k[--$j]] = _H; //#13325
    $_.swa = -1; //#13328
    $_.swb = -2; //#13328
    $_.swc = -3; //#13328
    $_.sft = -4; //#13328
    $_.fn1 = -5; //#13329
    $_.fn2 = -6; //#13329
    $_.fn3 = -7; //#13329
    $_.fn4 = -8; //#13329
    $_.sta = -9; //#13330
    $_.stp = -10; //#13330
    var _N = new Map([
        ["parse", $_.parse],
        ["parsefnc", $_.parsefnc],
        ["FNC1", $_.fn1],
        ["FNC3", $_.fn3]
    ]); //#13338
    $_.fncvals = _N; //#13340
    $k[$j++] = 'msg'; //#13341
    $k[$j++] = $_.barcode; //#13341
    $k[$j++] = $_.fncvals; //#13341
    bwipp_parseinput(); //#13341
    var _Q = $k[--$j]; //#13341
    $_[$k[--$j]] = _Q; //#13341
    $_.msglen = $_.msg.length; //#13342
    $_.msgtmp = $a([]); //#13345
    var _U = $_.msg; //#13346
    for (var _V = 0, _W = _U.length; _V < _W; _V++) { //#13349
        $_.char = $get(_U, _V); //#13347
        $k[$j++] = Infinity; //#13348
        $aload($_.msgtmp); //#13348
        if ($_.char < 128) { //#13348
            $k[$j++] = $_.char; //#13348
        } else { //#13348
            $k[$j++] = $_.fn4; //#13348
            $k[$j++] = $_.char & 127; //#13348
        } //#13348
        $_.msgtmp = $a(); //#13348
    } //#13348
    $_.kmsg = $_.msg; //#13350
    $_.msg = $_.msgtmp; //#13351
    $_.msglen = $_.msg.length; //#13352
    if (!bwipp_codablockf.__13409__) { //#13409
        $_ = Object.create($_); //#13409
        $_.charmaps = $a([$a([32, 32, "00"]), $a(["!", "!", "01"]), $a(["\"", "\"", "02"]), $a(["#", "#", "03"]), $a(["$", "$", "04"]), $a(["%", "%", "05"]), $a(["&", "&", "06"]), $a(["'", "'", "07"]), $a([40, 40, "08"]), $a([41, 41, "09"]), $a(["*", "*", "10"]), $a(["+", "+", "11"]), $a([",", ",", "12"]), $a(["-", "-", "13"]), $a([".", ".", "14"]), $a(["/", "/", "15"]), $a(["0", "0", "16"]), $a(["1", "1", "17"]), $a(["2", "2", "18"]), $a(["3", "3", "19"]), $a(["4", "4", "20"]), $a(["5", "5", "21"]), $a(["6", "6", "22"]), $a(["7", "7", "23"]), $a(["8", "8", "24"]), $a(["9", "9", "25"]), $a([":", ":", "26"]), $a([";", ";", "27"]), $a(["<", "<", "28"]), $a(["=", "=", "29"]), $a([">", ">", "30"]), $a(["?", "?", "31"]), $a(["@", "@", "32"]), $a(["A", "A", "33"]), $a(["B", "B", "34"]), $a(["C", "C", "35"]), $a(["D", "D", "36"]), $a(["E", "E", "37"]), $a(["F", "F", "38"]), $a(["G", "G", "39"]), $a(["H", "H", "40"]), $a(["I", "I", "41"]), $a(["J", "J", "42"]), $a(["K", "K", "43"]), $a(["L", "L", "44"]), $a(["M", "M", "45"]), $a(["N", "N", "46"]), $a(["O", "O", "47"]), $a(["P", "P", "48"]), $a(["Q", "Q", "49"]), $a(["R", "R", "50"]), $a(["S", "S", "51"]), $a(["T", "T", "52"]), $a(["U", "U", "53"]), $a(["V", "V", "54"]), $a(["W", "W", "55"]), $a(["X", "X", "56"]), $a(["Y", "Y", "57"]), $a(["Z", "Z", "58"]), $a(["[", "[", "59"]), $a([92, 92, "60"]), $a(["]", "]", "61"]), $a(["^", "^", "62"]), $a(["_", "_", "63"]), $a([0, "`", "64"]), $a([1, "a", "65"]), $a([2, "b", "66"]), $a([3, "c", "67"]), $a([4, "d", "68"]), $a([5, "e", "69"]), $a([6, "f", "70"]), $a([7, "g", "71"]), $a([8, "h", "72"]), $a([9, "i", "73"]), $a([10, "j", "74"]), $a([11, "k", "75"]), $a([12, "l", "76"]), $a([13, "m", "77"]), $a([14, "n", "78"]), $a([15, "o", "79"]), $a([16, "p", "80"]), $a([17, "q", "81"]), $a([18, "r", "82"]), $a([19, "s", "83"]), $a([20, "t", "84"]), $a([21, "u", "85"]), $a([22, "v", "86"]), $a([23, "w", "87"]), $a([24, "x", "88"]), $a([25, "y", "89"]), $a([26, "z", "90"]), $a([27, "{", "91"]), $a([28, "|", "92"]), $a([29, "}", "93"]), $a([30, "~", "94"]), $a([31, 127, "95"]), $a([$_.fn3, $_.fn3, "96"]), $a([$_.fn2, $_.fn2, "97"]), $a([$_.sft, $_.sft, "98"]), $a([$_.swc, $_.swc, "99"]), $a([$_.swb, $_.fn4, $_.swb]), $a([$_.fn4, $_.swa, $_.swa]), $a([$_.fn1, $_.fn1, $_.fn1]), $a([$_.sta, $_.sta, $_.sta]), $a([$_.stp, $_.stp, $_.stp])]); //#13393
        $_.charvals = $a([new Map, new Map, new Map]); //#13396
        for (var _2p = 0, _2o = $_.charmaps.length - 1; _2p <= _2o; _2p += 1) { //#13405
            $_.i = _2p; //#13398
            $_.encs = $get($_.charmaps, $_.i); //#13399
            for (var _2t = 0; _2t <= 2; _2t += 1) { //#13404
                $_.j = _2t; //#13401
                var _2w = $get($_.encs, $_.j); //#13402
                $k[$j++] = _2w; //#13402
                if ($eq($type(_2w), 'stringtype')) { //#13402
                    var _2z = $get($k[--$j], 0); //#13402
                    $k[$j++] = _2z; //#13402
                } //#13402
                $put($get($_.charvals, $_.j), $k[--$j], $_.i); //#13403
            } //#13403
        } //#13403
        $_.seta = $get($_.charvals, 0); //#13406
        $_.setb = $get($_.charvals, 1); //#13407
        $_.setc = $get($_.charvals, 2); //#13408
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_codablockf.$ctx[id] = $_[id]); //#13408
        bwipp_codablockf.__13409__ = 1; //#13408
        $_ = Object.getPrototypeOf($_); //#13408
    } //#13408
    $_.numsscr = function() {
        $_.n = 0; //#13413
        $_.s = 0; //#13413
        $_.p = $k[--$j]; //#13414
        for (;;) { //#13425
            if ($_.p >= $_.msglen) { //#13415
                break; //#13415
            } //#13415
            var _3H = $get($_.msg, $_.p); //#13416
            var _3J = $get($_.setc, _3H) !== undefined; //#13417
            $k[$j++] = _3H; //#13417
            if (!_3J) { //#13417
                $j--; //#13417
                break; //#13417
            } //#13417
            if ($k[--$j] == $_.fn1) { //#13421
                if (($_.s % 2) == 0) { //#13420
                    $_.s = $_.s + 1; //#13420
                } else { //#13420
                    break; //#13420
                } //#13420
            } //#13420
            $_.n = $_.n + 1; //#13422
            $_.s = $_.s + 1; //#13423
            $_.p = $f($_.p + 1); //#13424
        } //#13424
        $k[$j++] = $_.n; //#13426
        $k[$j++] = $_.s; //#13426
    }; //#13426
    $_.enca = function() {
        $put($_.cws, $_.j, $get($_.seta, $k[--$j])); //#13431
        $_.j = $_.j + 1; //#13432
    }; //#13432
    $_.encb = function() {
        $put($_.cws, $_.j, $get($_.setb, $k[--$j])); //#13435
        $_.j = $_.j + 1; //#13436
    }; //#13436
    $_.encc = function() {
        var _3f = $k[--$j]; //#13439
        $k[$j++] = _3f; //#13443
        if ($ne($type(_3f), 'arraytype')) { //#13442
            var _3j = $get($_.setc, $k[--$j]); //#13440
            $k[$j++] = _3j; //#13440
        } else { //#13442
            $aload($k[--$j]); //#13442
            var _3l = $k[--$j]; //#13442
            var _3m = $k[--$j]; //#13442
            $k[$j++] = $f($f(_3l - 48) + ($f(_3m - 48) * 10)); //#13442
        } //#13442
        $put($_.cws, $_.j, $k[--$j]); //#13444
        $_.j = $_.j + 1; //#13445
    }; //#13445
    $_.anotb = function() {
        var _3r = $k[--$j]; //#13449
        var _3t = $get($_.seta, _3r) !== undefined; //#13449
        var _3v = $get($_.setb, _3r) !== undefined; //#13449
        $k[$j++] = _3t && (!_3v); //#13449
    }; //#13449
    $_.bnota = function() {
        var _3w = $k[--$j]; //#13450
        var _3y = $get($_.setb, _3w) !== undefined; //#13450
        var _40 = $get($_.seta, _3w) !== undefined; //#13450
        $k[$j++] = _3y && (!_40); //#13450
    }; //#13450
    $k[$j++] = Infinity; //#13453
    for (var _42 = 0, _43 = $_.msg.length; _42 < _43; _42++) { //#13453
        $k[$j++] = 0; //#13453
    } //#13453
    $k[$j++] = 9999; //#13453
    $_.nextanotb = $a(); //#13453
    $k[$j++] = Infinity; //#13454
    for (var _46 = 0, _47 = $_.msg.length; _46 < _47; _46++) { //#13454
        $k[$j++] = 0; //#13454
    } //#13454
    $k[$j++] = 9999; //#13454
    $_.nextbnota = $a(); //#13454
    for (var _4A = $_.msg.length - 1; _4A >= 0; _4A -= 1) { //#13467
        $_.i = _4A; //#13456
        $k[$j++] = $get($_.msg, $_.i); //#13457
        $_.anotb(); //#13457
        if ($k[--$j]) { //#13460
            $put($_.nextanotb, $_.i, 0); //#13458
        } else { //#13460
            $put($_.nextanotb, $_.i, $f($get($_.nextanotb, $_.i + 1) + 1)); //#13460
        } //#13460
        $k[$j++] = $get($_.msg, $_.i); //#13462
        $_.bnota(); //#13462
        if ($k[--$j]) { //#13465
            $put($_.nextbnota, $_.i, 0); //#13463
        } else { //#13465
            $put($_.nextbnota, $_.i, $f($get($_.nextbnota, $_.i + 1) + 1)); //#13465
        } //#13465
    } //#13465
    $_.abeforeb = function() {
        var _4X = $k[--$j]; //#13470
        $k[$j++] = $lt($get($_.nextanotb, _4X), $get($_.nextbnota, _4X)); //#13470
    }; //#13470
    $_.bbeforea = function() {
        var _4c = $k[--$j]; //#13471
        $k[$j++] = $lt($get($_.nextbnota, _4c), $get($_.nextanotb, _4c)); //#13471
    }; //#13471
    $_.padrow = function() {
        for (var _4i = 0, _4j = $k[--$j]; _4i < _4j; _4i++) { //#13481
            for (;;) { //#13480
                if ($eq($_.cset, "seta")) { //#13477
                    $k[$j++] = $_.swc; //#13477
                    $_.enca(); //#13477
                    $_.cset = "setc"; //#13477
                    break; //#13477
                } //#13477
                if ($eq($_.cset, "setb")) { //#13478
                    $k[$j++] = $_.swc; //#13478
                    $_.encb(); //#13478
                    $_.cset = "setc"; //#13478
                    break; //#13478
                } //#13478
                if ($eq($_.cset, "setc")) { //#13479
                    $k[$j++] = $_.swb; //#13479
                    $_.encc(); //#13479
                    $_.cset = "setb"; //#13479
                    break; //#13479
                } //#13479
            } //#13479
        } //#13479
    }; //#13479
    $_.encafitsrow = function() {
        if (($_.rem <= 2) && ($get($_.msg, $_.i) == $_.fn4)) { //#13496
            var _4z = ($_.rem == 2) && ($get($_.msg, $_.i + 1) <= 95); //#13488
            $k[$j++] = _4z; //#13492
            if (_4z) { //#13492
                $k[$j++] = $_.fn4; //#13489
                $_.enca(); //#13489
                $k[$j++] = $get($_.msg, $_.i + 1); //#13490
                $_.enca(); //#13490
                $_.i = $_.i + 2; //#13491
            } //#13491
        } else { //#13496
            $k[$j++] = $get($_.msg, $_.i); //#13494
            $_.enca(); //#13494
            $_.i = $_.i + 1; //#13495
            $k[$j++] = true; //#13496
        } //#13496
    }; //#13496
    $_.encbfitsrow = function() {
        if (($_.rem <= 2) && ($get($_.msg, $_.i) == $_.fn4)) { //#13512
            var _5I = ($_.rem == 2) && ($get($_.msg, $_.i + 1) >= 32); //#13504
            $k[$j++] = _5I; //#13508
            if (_5I) { //#13508
                $k[$j++] = $_.fn4; //#13505
                $_.encb(); //#13505
                $k[$j++] = $get($_.msg, $_.i + 1); //#13506
                $_.encb(); //#13506
                $_.i = $_.i + 2; //#13507
            } //#13507
        } else { //#13512
            $k[$j++] = $get($_.msg, $_.i); //#13510
            $_.encb(); //#13510
            $_.i = $_.i + 1; //#13511
            $k[$j++] = true; //#13512
        } //#13512
    }; //#13512
    $_.cws = $a($f($_.c + 5) * 44); //#13517
    $_.i = 0; //#13519
    $_.j = 0; //#13519
    $_.r = 1; //#13519
    $_.lastrow = false; //#13520
    for (;;) { //#13687
        if ($_.lastrow) { //#13522
            break; //#13522
        } //#13522
        if ($_.r > 44) { //#13526
            $k[$j++] = 'bwipp.codablockfTooBig#13525'; //#13525
            $k[$j++] = "Maximum length exceeded"; //#13525
            bwipp_raiseerror(); //#13525
        } //#13525
        $k[$j++] = $_.sta; //#13529
        $_.enca(); //#13529
        if ($_.i < $_.msglen) { //#13530
            $k[$j++] = $_.i; //#13530
            $_.numsscr(); //#13530
        } else { //#13530
            $k[$j++] = -1; //#13530
            $k[$j++] = -1; //#13530
        } //#13530
        $_.nums = $k[--$j]; //#13530
        $_.nchars = $k[--$j]; //#13530
        for (;;) { //#13550
            if ($_.msglen == 0) { //#13536
                $k[$j++] = $_.swb; //#13533
                $_.enca(); //#13533
                $_.cset = "setb"; //#13534
                break; //#13535
            } //#13535
            if ($_.nums >= 2) { //#13541
                $k[$j++] = $_.swc; //#13538
                $_.enca(); //#13538
                $_.cset = "setc"; //#13539
                break; //#13540
            } //#13540
            $k[$j++] = $_.i; //#13542
            $_.abeforeb(); //#13542
            if ($k[--$j]) { //#13546
                $k[$j++] = $_.sft; //#13543
                $_.enca(); //#13543
                $_.cset = "seta"; //#13544
                break; //#13545
            } //#13545
            $k[$j++] = $_.swb; //#13547
            $_.enca(); //#13547
            $_.cset = "setb"; //#13548
            break; //#13549
        } //#13549
        $_.j = $_.j + 1; //#13551
        $_.endofrow = false; //#13554
        for (;;) { //#13672
            $_.rem = $f($f($_.c + 3) - ($_.j % $f($_.c + 5))); //#13555
            if (($_.i == $_.msglen) || $_.endofrow) { //#13557
                break; //#13557
            } //#13557
            $k[$j++] = $_.i; //#13559
            $_.numsscr(); //#13559
            $_.nums = $k[--$j]; //#13559
            $_.nchars = $k[--$j]; //#13559
            $k[$j++] = 'remnums'; //#13560
            if ($_.nums > ($_.rem * 2)) { //#13560
                $k[$j++] = $_.rem * 2; //#13560
            } else { //#13560
                $k[$j++] = $_.nums; //#13560
            } //#13560
            var _5y = $k[--$j]; //#13560
            $_[$k[--$j]] = _5y; //#13560
            for (;;) { //#13670
                if ((($eq($_.cset, "seta") || $eq($_.cset, "setb")) && ($_.remnums >= 4)) && ($get($_.msg, $_.i) != $_.fn1)) { //#13598
                    if ((($_.remnums % 2) == 0) && ($_.rem >= 3)) { //#13580
                        $k[$j++] = $_.swc; //#13568
                        if ($eq($_.cset, "seta")) { //#13568
                            $_.enca(); //#13568
                        } else { //#13568
                            $_.encb(); //#13568
                        } //#13568
                        $_.cset = "setc"; //#13569
                        for (var _6B = 0, _6C = 2; _6B < _6C; _6B++) { //#13578
                            if ($get($_.msg, $_.i) == $_.fn1) { //#13576
                                $k[$j++] = $_.fn1; //#13572
                                $_.encc(); //#13572
                                $_.i = $_.i + 1; //#13573
                            } else { //#13576
                                $k[$j++] = $geti($_.msg, $_.i, 2); //#13575
                                $_.encc(); //#13575
                                $_.i = $_.i + 2; //#13576
                            } //#13576
                        } //#13576
                        break; //#13579
                    } //#13579
                    if ((($_.remnums % 2) != 0) && ($_.rem >= 4)) { //#13597
                        $k[$j++] = $get($_.msg, $_.i); //#13583
                        if ($eq($_.cset, "seta")) { //#13583
                            $_.enca(); //#13583
                        } else { //#13583
                            $_.encb(); //#13583
                        } //#13583
                        $_.i = $_.i + 1; //#13584
                        $k[$j++] = $_.swc; //#13585
                        if ($eq($_.cset, "seta")) { //#13585
                            $_.enca(); //#13585
                        } else { //#13585
                            $_.encb(); //#13585
                        } //#13585
                        $_.cset = "setc"; //#13586
                        for (var _6W = 0, _6X = 2; _6W < _6X; _6W++) { //#13595
                            if ($get($_.msg, $_.i) == $_.fn1) { //#13593
                                $k[$j++] = $_.fn1; //#13589
                                $_.encc(); //#13589
                                $_.i = $_.i + 1; //#13590
                            } else { //#13593
                                $k[$j++] = $geti($_.msg, $_.i, 2); //#13592
                                $_.encc(); //#13592
                                $_.i = $_.i + 2; //#13593
                            } //#13593
                        } //#13593
                        break; //#13596
                    } //#13596
                } //#13596
                $k[$j++] = $eq($_.cset, "setb"); //#13599
                $k[$j++] = $get($_.msg, $_.i); //#13599
                $_.anotb(); //#13599
                var _6m = $k[--$j]; //#13599
                var _6n = $k[--$j]; //#13599
                if ((_6n && _6m) && ($_.rem >= 2)) { //#13614
                    if ($_.i < ($_.msglen - 1)) { //#13608
                        $k[$j++] = $_.i + 1; //#13602
                        $_.bbeforea(); //#13602
                        if ($k[--$j]) { //#13607
                            $k[$j++] = $_.sft; //#13603
                            $_.encb(); //#13603
                            $k[$j++] = $get($_.msg, $_.i); //#13604
                            $_.enca(); //#13604
                            $_.i = $_.i + 1; //#13605
                            break; //#13606
                        } //#13606
                    } //#13606
                    $k[$j++] = $_.swa; //#13609
                    $_.encb(); //#13609
                    $_.cset = "seta"; //#13610
                    $k[$j++] = $get($_.msg, $_.i); //#13611
                    $_.enca(); //#13611
                    $_.i = $_.i + 1; //#13612
                    break; //#13613
                } //#13613
                $k[$j++] = $eq($_.cset, "seta"); //#13615
                $k[$j++] = $get($_.msg, $_.i); //#13615
                $_.bnota(); //#13615
                var _77 = $k[--$j]; //#13615
                var _78 = $k[--$j]; //#13615
                if ((_78 && _77) && ($_.rem >= 2)) { //#13630
                    if ($_.i < ($_.msglen - 1)) { //#13624
                        $k[$j++] = $_.i + 1; //#13618
                        $_.abeforeb(); //#13618
                        if ($k[--$j]) { //#13623
                            $k[$j++] = $_.sft; //#13619
                            $_.enca(); //#13619
                            $k[$j++] = $get($_.msg, $_.i); //#13620
                            $_.encb(); //#13620
                            $_.i = $_.i + 1; //#13621
                            break; //#13622
                        } //#13622
                    } //#13622
                    $k[$j++] = $_.swb; //#13625
                    $_.enca(); //#13625
                    $_.cset = "setb"; //#13626
                    $k[$j++] = $get($_.msg, $_.i); //#13627
                    $_.encb(); //#13627
                    $_.i = $_.i + 1; //#13628
                    break; //#13629
                } //#13629
                if (($eq($_.cset, "setc") && ($_.remnums < 2)) && ($_.rem >= 2)) { //#13643
                    $_.rem = $f($_.rem - 1); //#13633
                    $k[$j++] = $_.i; //#13634
                    $_.abeforeb(); //#13634
                    if ($k[--$j]) { //#13641
                        $k[$j++] = $_.swa; //#13635
                        $_.encc(); //#13635
                        $_.cset = "seta"; //#13636
                        $_.encafitsrow(); //#13637
                        if ($k[--$j]) { //#13637
                            break; //#13637
                        } //#13637
                    } else { //#13641
                        $k[$j++] = $_.swb; //#13639
                        $_.encc(); //#13639
                        $_.cset = "setb"; //#13640
                        $_.encbfitsrow(); //#13641
                        if ($k[--$j]) { //#13641
                            break; //#13641
                        } //#13641
                    } //#13641
                } //#13641
                var _7d = $get($_.seta, $get($_.msg, $_.i)) !== undefined; //#13646
                if (($eq($_.cset, "seta") && _7d) && ($_.rem >= 1)) { //#13649
                    $_.encafitsrow(); //#13648
                    if ($k[--$j]) { //#13648
                        break; //#13648
                    } //#13648
                } //#13648
                var _7l = $get($_.setb, $get($_.msg, $_.i)) !== undefined; //#13650
                if (($eq($_.cset, "setb") && _7l) && ($_.rem >= 1)) { //#13653
                    $_.encbfitsrow(); //#13652
                    if ($k[--$j]) { //#13652
                        break; //#13652
                    } //#13652
                } //#13652
                if (($eq($_.cset, "setc") && ($_.remnums >= 2)) && ($_.rem >= 1)) { //#13664
                    if ($get($_.msg, $_.i) == $_.fn1) { //#13661
                        $k[$j++] = $_.fn1; //#13657
                        $_.encc(); //#13657
                        $_.i = $_.i + 1; //#13658
                    } else { //#13661
                        $k[$j++] = $geti($_.msg, $_.i, 2); //#13660
                        $_.encc(); //#13660
                        $_.i = $_.i + 2; //#13661
                    } //#13661
                    break; //#13663
                } //#13663
                $_.endofrow = true; //#13667
                break; //#13668
            } //#13668
        } //#13668
        if ((((($_.r >= $_.rows) || ($_.rows == -1)) && ($_.r > 1)) && ($_.i == $_.msglen)) && ($_.rem >= 2)) { //#13684
            $k[$j++] = $f($_.rem - 2); //#13676
            $_.padrow(); //#13676
            $_.j = $_.j + 3; //#13677
            $k[$j++] = $_.stp; //#13678
            $_.enca(); //#13678
            $_.lastrow = true; //#13679
        } else { //#13684
            $k[$j++] = $_.rem; //#13681
            $_.padrow(); //#13681
            $_.j = $_.j + 1; //#13682
            $k[$j++] = $_.stp; //#13683
            $_.enca(); //#13683
            $_.r = $_.r + 1; //#13684
        } //#13684
    } //#13684
    $_.cws = $geti($_.cws, 0, $_.j); //#13688
    if (!bwipp_codablockf.__13698__) { //#13698
        $_ = Object.create($_); //#13698
        $k[$j++] = Infinity; //#13695
        for (var _8I = 64; _8I <= 95; _8I += 1) { //#13693
            $k[$j++] = _8I; //#13693
        } //#13693
        for (var _8J = 0; _8J <= 15; _8J += 1) { //#13694
            $k[$j++] = _8J; //#13694
        } //#13694
        for (var _8K = 26; _8K <= 63; _8K += 1) { //#13695
            $k[$j++] = _8K; //#13695
        } //#13695
        $_.abmap = $a(); //#13695
        $k[$j++] = Infinity; //#13697
        for (var _8M = 0; _8M <= 85; _8M += 1) { //#13697
            $k[$j++] = _8M; //#13697
        } //#13697
        $_.cmap = $a(); //#13697
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_codablockf.$ctx[id] = $_[id]); //#13697
        bwipp_codablockf.__13698__ = 1; //#13697
        $_ = Object.getPrototypeOf($_); //#13697
    } //#13697
    $_.chkmsg = $a($_.kmsg.length); //#13701
    $_.j = 0; //#13702
    for (var _8T = 0, _8S = $_.kmsg.length - 1; _8T <= _8S; _8T += 1) { //#13708
        $_.i = _8T; //#13704
        $_.char = $get($_.kmsg, $_.i); //#13705
        if ($_.char >= 0) { //#13706
            $put($_.chkmsg, $_.j, $_.char); //#13706
            $_.j = $_.j + 1; //#13706
        } //#13706
        if (($_.char == $_.fn1) && ($_.i != 0)) { //#13707
            $put($_.chkmsg, $_.j, 29); //#13707
            $_.j = $_.j + 1; //#13707
        } //#13707
    } //#13707
    $_.t1 = 0; //#13709
    $_.t2 = 0; //#13709
    $_.k1 = 0; //#13709
    $_.k2 = 0; //#13709
    for (var _8k = 0, _8j = $_.j - 1; _8k <= _8j; _8k += 1) { //#13716
        $_.i = _8k; //#13711
        $_.t1 = ($get($_.chkmsg, $_.i) * $_.i) % 86; //#13712
        $_.t2 = $f($_.t1 + $get($_.chkmsg, $_.i)) % 86; //#13713
        $_.k1 = $f($_.k1 + $_.t2) % 86; //#13714
        $_.k2 = $f($_.k2 + $_.t1) % 86; //#13715
    } //#13715
    $k[$j++] = $_.cws; //#13717
    $k[$j++] = $_.cws.length - 4; //#13717
    if ($ne($_.cset, "setc")) { //#13717
        $k[$j++] = $_.abmap; //#13717
    } else { //#13717
        $k[$j++] = $_.cmap; //#13717
    } //#13717
    var _94 = $get($k[--$j], $_.k1); //#13717
    var _95 = $k[--$j]; //#13717
    $put($k[--$j], _95, _94); //#13717
    $k[$j++] = $_.cws; //#13718
    $k[$j++] = $_.cws.length - 3; //#13718
    if ($ne($_.cset, "setc")) { //#13718
        $k[$j++] = $_.abmap; //#13718
    } else { //#13718
        $k[$j++] = $_.cmap; //#13718
    } //#13718
    var _9E = $get($k[--$j], $_.k2); //#13718
    var _9F = $k[--$j]; //#13718
    $put($k[--$j], _9F, _9E); //#13718
    var _9H = $_.cws; //#13721
    $k[$j++] = _9H; //#13721
    $k[$j++] = 2; //#13721
    if ($get(_9H, 2 - 1) != 99) { //#13721
        $k[$j++] = $_.abmap; //#13721
    } else { //#13721
        $k[$j++] = $_.cmap; //#13721
    } //#13721
    var _9N = $get($k[--$j], $_.r - 2); //#13721
    var _9O = $k[--$j]; //#13721
    $put($k[--$j], _9O, _9N); //#13721
    for (var _9S = 1, _9R = $_.r - 1; _9S <= _9R; _9S += 1) { //#13725
        $_.i = _9S; //#13723
        var _9T = $_.cws; //#13724
        var _9U = $_.i; //#13724
        var _9V = $_.c; //#13724
        $k[$j++] = _9T; //#13724
        $k[$j++] = $f((_9U * $f(_9V + 5)) + 2); //#13724
        if ($get(_9T, $f(($f((_9U * $f(_9V + 5)) + 2)) - 1)) != 99) { //#13724
            $k[$j++] = $_.abmap; //#13724
        } else { //#13724
            $k[$j++] = $_.cmap; //#13724
        } //#13724
        var _9b = $get($k[--$j], $_.i + 42); //#13724
        var _9c = $k[--$j]; //#13724
        $put($k[--$j], _9c, _9b); //#13724
    } //#13724
    for (var _9g = 0, _9f = $_.r - 1; _9g <= _9f; _9g += 1) { //#13736
        $_.rcws = $geti($_.cws, _9g * $f($_.c + 5), $f($_.c + 4)); //#13729
        $_.csum = $get($_.rcws, 0); //#13730
        for (var _9p = 1, _9o = $_.rcws.length - 2; _9p <= _9o; _9p += 1) { //#13734
            $_.i = _9p; //#13732
            $_.csum = $f($_.csum + ($get($_.rcws, $_.i) * $_.i)); //#13733
        } //#13733
        $put($_.rcws, $_.rcws.length - 1, $_.csum % 103); //#13735
    } //#13735
    var _9z = $get($_.options, 'debugcws') !== undefined; //#13738
    if (_9z) { //#13738
        $k[$j++] = 'bwipp.debugcws#13738'; //#13738
        $k[$j++] = $_.cws; //#13738
        bwipp_raiseerror(); //#13738
    } //#13738
    if (!bwipp_codablockf.__13759__) { //#13759
        $_ = Object.create($_); //#13759
        $_.encs = $a(["212222", "222122", "222221", "121223", "121322", "131222", "122213", "122312", "132212", "221213", "221312", "231212", "112232", "122132", "122231", "113222", "123122", "123221", "223211", "221132", "221231", "213212", "223112", "312131", "311222", "321122", "321221", "312212", "322112", "322211", "212123", "212321", "232121", "111323", "131123", "131321", "112313", "132113", "132311", "211313", "231113", "231311", "112133", "112331", "132131", "113123", "113321", "133121", "313121", "211331", "231131", "213113", "213311", "213131", "311123", "311321", "331121", "312113", "312311", "332111", "314111", "221411", "431111", "111224", "111422", "121124", "121421", "141122", "141221", "112214", "112412", "122114", "122411", "142112", "142211", "241211", "221114", "413111", "241112", "134111", "111242", "121142", "121241", "114212", "124112", "124211", "411212", "421112", "421211", "212141", "214121", "412121", "111143", "111341", "131141", "114113", "114311", "411113", "411311", "113141", "114131", "311141", "411131", "211412", "2331112"]); //#13758
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_codablockf.$ctx[id] = $_[id]); //#13758
        bwipp_codablockf.__13759__ = 1; //#13758
        $_ = Object.getPrototypeOf($_); //#13758
    } //#13758
    $_.rowbits = $a($_.r); //#13762
    for (var _A7 = 0, _A6 = $_.r - 1; _A7 <= _A6; _A7 += 1) { //#13774
        $_.i = _A7; //#13764
        $k[$j++] = Infinity; //#13767
        var _AC = $geti($_.cws, $_.i * $f($_.c + 5), $f($_.c + 5)); //#13766
        for (var _AD = 0, _AE = _AC.length; _AD < _AE; _AD++) { //#13768
            $forall($get($_.encs, $get(_AC, _AD)), function() { //#13767
                var _AI = $k[--$j]; //#13767
                $k[$j++] = $f(_AI - 48); //#13767
            }); //#13767
        } //#13767
        $_.sbs = $a(); //#13767
        $k[$j++] = Infinity; //#13770
        var _AK = $_.sbs; //#13771
        $k[$j++] = 0; //#13771
        for (var _AL = 0, _AM = _AK.length; _AL < _AM; _AL++) { //#13771
            var _AO = $k[--$j]; //#13771
            var _AP = (_AO == 1) ? 0 : 1; //#13771
            $k[$j++] = _AO; //#13771
            for (var _AQ = 0, _AR = $get(_AK, _AL); _AQ < _AR; _AQ++) { //#13771
                $k[$j++] = _AP //#13771
            } //#13771
        } //#13771
        $astore($a($counttomark() - 1)); //#13772
        var _AU = $k[--$j]; //#13772
        var _AV = $k[--$j]; //#13772
        $k[$j++] = _AU; //#13772
        $k[$j++] = _AV; //#13772
        $j--; //#13772
        var _AW = $k[--$j]; //#13772
        var _AX = $k[--$j]; //#13772
        $k[$j++] = _AW; //#13772
        $k[$j++] = _AX; //#13772
        $j--; //#13772
        $put($_.rowbits, $_.i, $k[--$j]); //#13773
    } //#13773
    $_.symwid = $f(($_.c * 11) + 57); //#13777
    $k[$j++] = Infinity; //#13790
    for (var _Ae = 0, _Af = $_.symwid * $_.sepheight; _Ae < _Af; _Ae++) { //#13779
        $k[$j++] = 1; //#13779
    } //#13779
    for (var _Ai = 0, _Ah = $_.r - 2; _Ai <= _Ah; _Ai += 1) { //#13788
        $_.i = _Ai; //#13781
        for (var _Ak = 0, _Al = $_.rowheight; _Ak < _Al; _Ak++) { //#13782
            $aload($get($_.rowbits, $_.i)); //#13782
        } //#13782
        for (var _Aq = 0, _Ar = $_.sepheight; _Aq < _Ar; _Aq++) { //#13787
            $k[$j++] = 1; //#13785
            $k[$j++] = 1; //#13785
            $k[$j++] = 0; //#13785
            $k[$j++] = 1; //#13785
            $k[$j++] = 0; //#13785
            $k[$j++] = 0; //#13785
            $k[$j++] = 0; //#13785
            $k[$j++] = 0; //#13785
            $k[$j++] = 1; //#13785
            $k[$j++] = 0; //#13785
            $k[$j++] = 0; //#13785
            for (var _At = 0, _Au = $f($_.symwid - 24); _At < _Au; _At++) { //#13785
                $k[$j++] = 1; //#13785
            } //#13785
            $k[$j++] = 1; //#13786
            $k[$j++] = 1; //#13786
            $k[$j++] = 0; //#13786
            $k[$j++] = 0; //#13786
            $k[$j++] = 0; //#13786
            $k[$j++] = 1; //#13786
            $k[$j++] = 1; //#13786
            $k[$j++] = 1; //#13786
            $k[$j++] = 0; //#13786
            $k[$j++] = 1; //#13786
            $k[$j++] = 0; //#13786
            $k[$j++] = 1; //#13786
            $k[$j++] = 1; //#13786
        } //#13786
    } //#13786
    for (var _Aw = 0, _Ax = $_.rowheight; _Aw < _Ax; _Aw++) { //#13789
        $aload($get($_.rowbits, $_.r - 1)); //#13789
    } //#13789
    for (var _B3 = 0, _B4 = $_.symwid * $_.sepheight; _B3 < _B4; _B3++) { //#13790
        $k[$j++] = 1; //#13790
    } //#13790
    $_.pixs = $a(); //#13790
    var _BE = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $_.pixs],
        ["pixx", $_.symwid],
        ["pixy", ~~($_.pixs.length / $_.symwid)],
        ["height", (~~($_.pixs.length / $_.symwid)) / 72],
        ["width", $_.symwid / 72],
        ["opt", $_.options]
    ]); //#13801
    $k[$j++] = _BE; //#13804
    if (!$_.dontdraw) { //#13804
        bwipp_renmatrix(); //#13804
    } //#13804
    $_ = Object.getPrototypeOf($_); //#13806
    $_ = Object.getPrototypeOf($_); //#13808
}

function bwipp_code16k() {
    $_ = Object.create($_); //#13839
    $_.dontdraw = false; //#13842
    $_.sam = -1; //#13843
    $_.rows = 0; //#13844
    $_.rowheight = 8; //#13845
    $_.sepheight = 1; //#13846
    $_.raw = false; //#13847
    $_.parse = false; //#13848
    $_.parsefnc = false; //#13849
    $k[$j++] = $_; //#13851
    bwipp_processoptions(); //#13851
    $_.options = $k[--$j]; //#13851
    $_.barcode = $k[--$j]; //#13852
    if (($_.rows != 0) && (($_.rows < 2) || ($_.rows > 16))) { //#13856
        $k[$j++] = 'bwipp.code16kBadRows#13855'; //#13855
        $k[$j++] = "Code 16K must have 2 to 16 rows"; //#13855
        bwipp_raiseerror(); //#13855
    } //#13855
    if ($_.rowheight < 8) { //#13860
        $k[$j++] = 'bwipp.code16kBadRowHeight#13859'; //#13859
        $k[$j++] = "Code 16K must have rowheight of at least 8"; //#13859
        bwipp_raiseerror(); //#13859
    } //#13859
    if ($_.sepheight < 1) { //#13864
        $k[$j++] = 'bwipp.code16kBadSepHeight#13863'; //#13863
        $k[$j++] = "Code 16K must have sepheight of at least 1"; //#13863
        bwipp_raiseerror(); //#13863
    } //#13863
    if ($_.sam != -1) { //#13876
        $k[$j++] = true; //#13872
        for (var _8 = 0, _9 = 1; _8 < _9; _8++) { //#13872
            var _A = $_.sam; //#13869
            if ((_A < 12) || (_A > 99)) { //#13869
                $j--; //#13869
                $k[$j++] = false; //#13869
                break; //#13869
            } //#13869
            if (($_.sam % 10) < 2) { //#13870
                $j--; //#13870
                $k[$j++] = false; //#13870
                break; //#13870
            } //#13870
            if ((~~($_.sam / 10)) > ($_.sam % 10)) { //#13871
                $j--; //#13871
                $k[$j++] = false; //#13871
                break; //#13871
            } //#13871
        } //#13871
        if ($nt($k[--$j])) { //#13875
            $k[$j++] = 'bwipp.code16kBadSAM#13874'; //#13874
            $k[$j++] = "SAM must be formatted as \"NM\" for Nth of M symbols, from 2 to 9 symbols"; //#13874
            bwipp_raiseerror(); //#13874
        } //#13874
    } //#13874
    bwipp_loadctx(bwipp_code16k) //#13878
    if ($_.sam != -1) { //#13880
        $_.rows = 16; //#13880
    } //#13880
    if (!bwipp_code16k.__13945__) { //#13945
        $_ = Object.create($_); //#13945
        $_.swa = -1; //#13884
        $_.swb = -2; //#13884
        $_.swc = -3; //#13884
        $_.sa1 = -4; //#13885
        $_.sb1 = -5; //#13885
        $_.sc1 = -6; //#13885
        $_.sa2 = -7; //#13886
        $_.sb2 = -8; //#13886
        $_.sc2 = -9; //#13886
        $_.pad = -10; //#13887
        $_.sb3 = -11; //#13887
        $_.sc3 = -12; //#13887
        $_.fn1 = -13; //#13888
        $_.fn2 = -14; //#13888
        $_.fn3 = -15; //#13888
        $_.fn4 = -16; //#13888
        $_.charmaps = $a([$a([32, 32, "00"]), $a(["!", "!", "01"]), $a(["\"", "\"", "02"]), $a(["#", "#", "03"]), $a(["$", "$", "04"]), $a(["%", "%", "05"]), $a(["&", "&", "06"]), $a(["'", "'", "07"]), $a([40, 40, "08"]), $a([41, 41, "09"]), $a(["*", "*", "10"]), $a(["+", "+", "11"]), $a([",", ",", "12"]), $a(["-", "-", "13"]), $a([".", ".", "14"]), $a(["/", "/", "15"]), $a(["0", "0", "16"]), $a(["1", "1", "17"]), $a(["2", "2", "18"]), $a(["3", "3", "19"]), $a(["4", "4", "20"]), $a(["5", "5", "21"]), $a(["6", "6", "22"]), $a(["7", "7", "23"]), $a(["8", "8", "24"]), $a(["9", "9", "25"]), $a([":", ":", "26"]), $a([";", ";", "27"]), $a(["<", "<", "28"]), $a(["=", "=", "29"]), $a([">", ">", "30"]), $a(["?", "?", "31"]), $a(["@", "@", "32"]), $a(["A", "A", "33"]), $a(["B", "B", "34"]), $a(["C", "C", "35"]), $a(["D", "D", "36"]), $a(["E", "E", "37"]), $a(["F", "F", "38"]), $a(["G", "G", "39"]), $a(["H", "H", "40"]), $a(["I", "I", "41"]), $a(["J", "J", "42"]), $a(["K", "K", "43"]), $a(["L", "L", "44"]), $a(["M", "M", "45"]), $a(["N", "N", "46"]), $a(["O", "O", "47"]), $a(["P", "P", "48"]), $a(["Q", "Q", "49"]), $a(["R", "R", "50"]), $a(["S", "S", "51"]), $a(["T", "T", "52"]), $a(["U", "U", "53"]), $a(["V", "V", "54"]), $a(["W", "W", "55"]), $a(["X", "X", "56"]), $a(["Y", "Y", "57"]), $a(["Z", "Z", "58"]), $a(["[", "[", "59"]), $a([92, 92, "60"]), $a(["]", "]", "61"]), $a(["^", "^", "62"]), $a(["_", "_", "63"]), $a([0, "`", "64"]), $a([1, "a", "65"]), $a([2, "b", "66"]), $a([3, "c", "67"]), $a([4, "d", "68"]), $a([5, "e", "69"]), $a([6, "f", "70"]), $a([7, "g", "71"]), $a([8, "h", "72"]), $a([9, "i", "73"]), $a([10, "j", "74"]), $a([11, "k", "75"]), $a([12, "l", "76"]), $a([13, "m", "77"]), $a([14, "n", "78"]), $a([15, "o", "79"]), $a([16, "p", "80"]), $a([17, "q", "81"]), $a([18, "r", "82"]), $a([19, "s", "83"]), $a([20, "t", "84"]), $a([21, "u", "85"]), $a([22, "v", "86"]), $a([23, "w", "87"]), $a([24, "x", "88"]), $a([25, "y", "89"]), $a([26, "z", "90"]), $a([27, "{", "91"]), $a([28, "|", "92"]), $a([29, "}", "93"]), $a([30, "~", "94"]), $a([31, 127, "95"]), $a([$_.fn3, $_.fn3, "96"]), $a([$_.fn2, $_.fn2, "97"]), $a([$_.sb1, $_.sa1, "98"]), $a([$_.swc, $_.swc, "99"]), $a([$_.swb, $_.fn4, $_.swb]), $a([$_.fn4, $_.swa, $_.swa]), $a([$_.fn1, $_.fn1, $_.fn1]), $a([$_.pad, $_.pad, $_.pad]), $a([$_.sb2, $_.sa2, $_.sb1]), $a([$_.sc2, $_.sc2, $_.sb2]), $a([$_.sc3, $_.sc3, $_.sb3])]); //#13929
        $_.charvals = $a([new Map, new Map, new Map]); //#13932
        for (var _2W = 0, _2V = $_.charmaps.length - 1; _2W <= _2V; _2W += 1) { //#13941
            $_.i = _2W; //#13934
            $_.encs = $get($_.charmaps, $_.i); //#13935
            for (var _2a = 0; _2a <= 2; _2a += 1) { //#13940
                $_.j = _2a; //#13937
                var _2d = $get($_.encs, $_.j); //#13938
                $k[$j++] = _2d; //#13938
                if ($eq($type(_2d), 'stringtype')) { //#13938
                    var _2g = $get($k[--$j], 0); //#13938
                    $k[$j++] = _2g; //#13938
                } //#13938
                $put($get($_.charvals, $_.j), $k[--$j], $_.i); //#13939
            } //#13939
        } //#13939
        $_.seta = $get($_.charvals, 0); //#13942
        $_.setb = $get($_.charvals, 1); //#13943
        $_.setc = $get($_.charvals, 2); //#13944
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code16k.$ctx[id] = $_[id]); //#13944
        bwipp_code16k.__13945__ = 1; //#13944
        $_ = Object.getPrototypeOf($_); //#13944
    } //#13944
    if ($_.raw) { //#14415
        $_.cws = $a($_.barcode.length); //#13949
        $_.i = 0; //#13950
        $_.j = 0; //#13950
        for (;;) { //#13961
            if ($_.i >= ($_.barcode.length - 3)) { //#13952
                break; //#13952
            } //#13952
            if ($get($_.barcode, $_.i) != 94) { //#13953
                break; //#13953
            } //#13953
            var _33 = $geti($_.barcode, $_.i + 1, 3); //#13954
            $k[$j++] = _33; //#13956
            $k[$j++] = false; //#13956
            for (var _34 = 0, _35 = _33.length; _34 < _35; _34++) { //#13956
                var _36 = $get(_33, _34); //#13956
                if ((_36 < 48) || (_36 > 57)) { //#13955
                    $j--; //#13955
                    $k[$j++] = true; //#13955
                } //#13955
            } //#13955
            if ($k[--$j]) { //#13956
                $j--; //#13956
                break; //#13956
            } //#13956
            $_.cw = $cvi($k[--$j]); //#13957
            $put($_.cws, $_.j, $_.cw); //#13958
            $_.i = $_.i + 4; //#13959
            $_.j = $_.j + 1; //#13960
        } //#13960
        if ($_.i != $_.barcode.length) { //#13964
            $k[$j++] = 'bwipp.code16kBadRawFormat#13963'; //#13963
            $k[$j++] = "raw data must be formatted as ^NNN"; //#13963
            bwipp_raiseerror(); //#13963
        } //#13963
        $_.cws = $geti($_.cws, 0, $_.j); //#13965
    } else { //#14415
        var _3O = new Map([
            ["parse", $_.parse],
            ["parsefnc", $_.parsefnc],
            ["eci", true],
            ["FNC1", $_.fn1],
            ["FNC2", $_.fn2],
            ["FNC3", $_.fn3]
        ]); //#13976
        $_.fncvals = _3O; //#13978
        $k[$j++] = 'msg'; //#13979
        $k[$j++] = $_.barcode; //#13979
        $k[$j++] = $_.fncvals; //#13979
        bwipp_parseinput(); //#13979
        var _3R = $k[--$j]; //#13979
        $_[$k[--$j]] = _3R; //#13979
        $_.msglen = $_.msg.length; //#13980
        $k[$j++] = Infinity; //#13983
        for (var _3V = 0, _3W = $_.msglen; _3V < _3W; _3V++) { //#13983
            $k[$j++] = 0; //#13983
        } //#13983
        $k[$j++] = 0; //#13983
        $_.numSA = $a(); //#13983
        $k[$j++] = Infinity; //#13984
        for (var _3Z = 0, _3a = $_.msglen; _3Z < _3a; _3Z++) { //#13984
            $k[$j++] = 0; //#13984
        } //#13984
        $k[$j++] = 0; //#13984
        $_.numEA = $a(); //#13984
        for (var _3d = $_.msglen - 1; _3d >= 0; _3d -= 1) { //#13994
            $_.i = _3d; //#13986
            if ($get($_.msg, $_.i) >= 0) { //#13993
                if ($get($_.msg, $_.i) >= 128) { //#13991
                    $put($_.numEA, $_.i, $f($get($_.numEA, $_.i + 1) + 1)); //#13989
                } else { //#13991
                    $put($_.numSA, $_.i, $f($get($_.numSA, $_.i + 1) + 1)); //#13991
                } //#13991
            } //#13991
        } //#13991
        $_.ea = false; //#13997
        $_.msgtmp = $a([]); //#13997
        for (var _3x = 0, _3w = $_.msglen - 1; _3x <= _3w; _3x += 1) { //#14012
            $_.i = _3x; //#13999
            $_.c = $get($_.msg, $_.i); //#14000
            if ((!$xo($_.ea, $_.c < 128)) && ($_.c >= 0)) { //#14010
                if ($_.ea) { //#14002
                    $k[$j++] = $_.numSA; //#14002
                } else { //#14002
                    $k[$j++] = $_.numEA; //#14002
                } //#14002
                var _49 = $get($k[--$j], $_.i); //#14002
                var _4C = ($f(_49 + $_.i) == $_.msglen) ? 3 : 5; //#14003
                if (_49 < _4C) { //#14008
                    $k[$j++] = Infinity; //#14005
                    $aload($_.msgtmp); //#14005
                    $k[$j++] = $_.fn4; //#14005
                    $_.msgtmp = $a(); //#14005
                } else { //#14008
                    $k[$j++] = Infinity; //#14007
                    $aload($_.msgtmp); //#14007
                    $k[$j++] = $_.fn4; //#14007
                    $k[$j++] = $_.fn4; //#14007
                    $_.msgtmp = $a(); //#14007
                    $_.ea = !$_.ea; //#14008
                } //#14008
            } //#14008
            $k[$j++] = Infinity; //#14011
            $aload($_.msgtmp); //#14011
            if ($_.c >= 0) { //#14011
                $k[$j++] = $_.c & 127; //#14011
            } else { //#14011
                $k[$j++] = $_.c; //#14011
            } //#14011
            $_.msgtmp = $a(); //#14011
        } //#14011
        $_.msg = $_.msgtmp; //#14013
        $_.msglen = $_.msg.length; //#14014
        $_.numsscr = function() {
            $_.n = 0; //#14018
            $_.s = 0; //#14018
            $_.p = $k[--$j]; //#14019
            for (;;) { //#14030
                if ($_.p >= $_.msglen) { //#14020
                    break; //#14020
                } //#14020
                var _4X = $get($_.msg, $_.p); //#14021
                var _4Z = $get($_.setc, _4X) !== undefined; //#14022
                $k[$j++] = _4X; //#14022
                if (!_4Z) { //#14022
                    $j--; //#14022
                    break; //#14022
                } //#14022
                if ($k[--$j] == $_.fn1) { //#14026
                    if (($_.s % 2) == 0) { //#14025
                        $_.s = $_.s + 1; //#14025
                    } else { //#14025
                        break; //#14025
                    } //#14025
                } //#14025
                $_.n = $_.n + 1; //#14027
                $_.s = $_.s + 1; //#14028
                $_.p = $f($_.p + 1); //#14029
            } //#14029
            $k[$j++] = $_.n; //#14031
            $k[$j++] = $_.s; //#14031
        }; //#14031
        $_.enca = function() {
            $put($_.cws, $_.j, $get($_.seta, $k[--$j])); //#14036
            $_.j = $_.j + 1; //#14037
        }; //#14037
        $_.encb = function() {
            $put($_.cws, $_.j, $get($_.setb, $k[--$j])); //#14040
            $_.j = $_.j + 1; //#14041
        }; //#14041
        $_.encc = function() {
            var _4v = $k[--$j]; //#14044
            $k[$j++] = _4v; //#14048
            if ($ne($type(_4v), 'arraytype')) { //#14047
                var _4z = $get($_.setc, $k[--$j]); //#14045
                $k[$j++] = _4z; //#14045
            } else { //#14047
                $aload($k[--$j]); //#14047
                var _51 = $k[--$j]; //#14047
                var _52 = $k[--$j]; //#14047
                $k[$j++] = $f($f(_51 - 48) + ($f(_52 - 48) * 10)); //#14047
            } //#14047
            $put($_.cws, $_.j, $k[--$j]); //#14049
            $_.j = $_.j + 1; //#14050
        }; //#14050
        $_.anotb = function() {
            var _57 = $k[--$j]; //#14054
            var _59 = $get($_.seta, _57) !== undefined; //#14054
            var _5B = $get($_.setb, _57) !== undefined; //#14054
            $k[$j++] = _59 && (!_5B); //#14054
        }; //#14054
        $_.bnota = function() {
            var _5C = $k[--$j]; //#14055
            var _5E = $get($_.setb, _5C) !== undefined; //#14055
            var _5G = $get($_.seta, _5C) !== undefined; //#14055
            $k[$j++] = _5E && (!_5G); //#14055
        }; //#14055
        $k[$j++] = Infinity; //#14058
        for (var _5I = 0, _5J = $_.msg.length; _5I < _5J; _5I++) { //#14058
            $k[$j++] = 0; //#14058
        } //#14058
        $k[$j++] = 9999; //#14058
        $_.nextanotb = $a(); //#14058
        $k[$j++] = Infinity; //#14059
        for (var _5M = 0, _5N = $_.msg.length; _5M < _5N; _5M++) { //#14059
            $k[$j++] = 0; //#14059
        } //#14059
        $k[$j++] = 9999; //#14059
        $_.nextbnota = $a(); //#14059
        for (var _5Q = $_.msg.length - 1; _5Q >= 0; _5Q -= 1) { //#14072
            $_.i = _5Q; //#14061
            $k[$j++] = $get($_.msg, $_.i); //#14062
            $_.anotb(); //#14062
            if ($k[--$j]) { //#14065
                $put($_.nextanotb, $_.i, 0); //#14063
            } else { //#14065
                $put($_.nextanotb, $_.i, $f($get($_.nextanotb, $_.i + 1) + 1)); //#14065
            } //#14065
            $k[$j++] = $get($_.msg, $_.i); //#14067
            $_.bnota(); //#14067
            if ($k[--$j]) { //#14070
                $put($_.nextbnota, $_.i, 0); //#14068
            } else { //#14070
                $put($_.nextbnota, $_.i, $f($get($_.nextbnota, $_.i + 1) + 1)); //#14070
            } //#14070
        } //#14070
        $_.abeforeb = function() {
            var _5n = $k[--$j]; //#14075
            $k[$j++] = $lt($get($_.nextanotb, _5n), $get($_.nextbnota, _5n)); //#14075
        }; //#14075
        $_.bbeforea = function() {
            var _5s = $k[--$j]; //#14076
            $k[$j++] = $lt($get($_.nextbnota, _5s), $get($_.nextanotb, _5s)); //#14076
        }; //#14076
        $_.cws = $a(($_.barcode.length * 2) + 3); //#14078
        $_.i = 0; //#14081
        $_.j = 0; //#14081
        for (;;) { //#14171
            if ($_.sam != -1) { //#14092
                $put($_.cws, 0, (~~($_.sam / 10)) - 1); //#14086
                $put($_.cws, 1, ($_.sam % 10) - 1); //#14087
                $_.j = 2; //#14088
                $_.cset = "setb"; //#14089
                $_.mode = 7; //#14090
                break; //#14091
            } //#14091
            if ($_.msglen == 0) { //#14098
                $_.cset = "setb"; //#14095
                $_.mode = 1; //#14096
                break; //#14097
            } //#14097
            if ($_.msglen >= 2) { //#14107
                $k[$j++] = $get($_.msg, 0) == $_.fn1; //#14101
                $k[$j++] = 1; //#14101
                $_.numsscr(); //#14101
                var _69 = $k[--$j]; //#14101
                var _6A = $k[--$j]; //#14101
                $k[$j++] = _69; //#14101
                $k[$j++] = _6A; //#14101
                $j--; //#14101
                var _6B = $k[--$j]; //#14101
                var _6C = $k[--$j]; //#14101
                if (_6C && (_6B >= 2)) { //#14106
                    $_.cset = "setc"; //#14102
                    $_.mode = 4; //#14103
                    $_.i = 1; //#14104
                    break; //#14105
                } //#14105
            } //#14105
            if ($get($_.msg, 0) == $_.fn1) { //#14114
                $_.cset = "setb"; //#14110
                $_.mode = 3; //#14111
                $_.i = 1; //#14112
                break; //#14113
            } //#14113
            if ($_.msglen >= 2) { //#14160
                $k[$j++] = 0; //#14117
                $_.numsscr(); //#14117
                var _6H = $k[--$j]; //#14117
                var _6I = $k[--$j]; //#14117
                $k[$j++] = _6H; //#14117
                $k[$j++] = _6I; //#14117
                $j--; //#14117
                var _6J = $k[--$j]; //#14117
                if ((_6J >= 2) && ((_6J % 2) == 0)) { //#14121
                    $_.cset = "setc"; //#14118
                    $_.mode = 2; //#14119
                    break; //#14120
                } //#14120
                $k[$j++] = 0; //#14123
                $_.numsscr(); //#14123
                var _6K = $k[--$j]; //#14123
                var _6L = $k[--$j]; //#14123
                $k[$j++] = _6K; //#14123
                $k[$j++] = _6L; //#14123
                $j--; //#14123
                var _6M = $k[--$j]; //#14123
                if ((_6M >= 3) && ((_6M % 2) == 1)) { //#14129
                    $k[$j++] = $get($_.msg, 0); //#14124
                    $_.encb(); //#14124
                    $_.cset = "setc"; //#14125
                    $_.mode = 5; //#14126
                    $_.i = 1; //#14127
                    break; //#14128
                } //#14128
                var _6S = $get($_.setb, $get($_.msg, 0)) !== undefined; //#14131
                $k[$j++] = _6S; //#14132
                $k[$j++] = 1; //#14132
                $_.numsscr(); //#14132
                var _6T = $k[--$j]; //#14132
                var _6U = $k[--$j]; //#14132
                $k[$j++] = _6T; //#14132
                $k[$j++] = _6U; //#14132
                $j--; //#14132
                var _6V = $k[--$j]; //#14132
                var _6W = $k[--$j]; //#14132
                if (_6W && ((_6V >= 2) && ((_6V % 2) == 0))) { //#14138
                    $k[$j++] = $get($_.msg, 0); //#14133
                    $_.encb(); //#14133
                    $_.cset = "setc"; //#14134
                    $_.mode = 5; //#14135
                    $_.i = 1; //#14136
                    break; //#14137
                } //#14137
                var _6c = $get($_.setb, $get($_.msg, 0)) !== undefined; //#14140
                $k[$j++] = _6c; //#14141
                $k[$j++] = 1; //#14141
                $_.numsscr(); //#14141
                var _6d = $k[--$j]; //#14141
                var _6e = $k[--$j]; //#14141
                $k[$j++] = _6d; //#14141
                $k[$j++] = _6e; //#14141
                $j--; //#14141
                var _6f = $k[--$j]; //#14141
                var _6g = $k[--$j]; //#14141
                if (_6g && ((_6f >= 3) && ((_6f % 2) == 1))) { //#14148
                    $k[$j++] = $get($_.msg, 0); //#14142
                    $_.encb(); //#14142
                    $k[$j++] = $get($_.msg, 1); //#14143
                    $_.encb(); //#14143
                    $_.cset = "setc"; //#14144
                    $_.mode = 6; //#14145
                    $_.i = 2; //#14146
                    break; //#14147
                } //#14147
                var _6o = $get($_.setb, $get($_.msg, 0)) !== undefined; //#14150
                var _6s = $get($_.setb, $get($_.msg, 1)) !== undefined; //#14151
                $k[$j++] = _6o && _6s; //#14152
                $k[$j++] = 2; //#14152
                $_.numsscr(); //#14152
                var _6t = $k[--$j]; //#14152
                var _6u = $k[--$j]; //#14152
                $k[$j++] = _6t; //#14152
                $k[$j++] = _6u; //#14152
                $j--; //#14152
                var _6v = $k[--$j]; //#14152
                var _6w = $k[--$j]; //#14152
                if (_6w && ((_6v >= 2) && ((_6v % 2) == 0))) { //#14159
                    $k[$j++] = $get($_.msg, 0); //#14153
                    $_.encb(); //#14153
                    $k[$j++] = $get($_.msg, 1); //#14154
                    $_.encb(); //#14154
                    $_.cset = "setc"; //#14155
                    $_.mode = 6; //#14156
                    $_.i = 2; //#14157
                    break; //#14158
                } //#14158
            } //#14158
            $k[$j++] = 0; //#14162
            $_.abeforeb(); //#14162
            if ($k[--$j]) { //#14166
                $_.cset = "seta"; //#14163
                $_.mode = 0; //#14164
                break; //#14165
            } //#14165
            $_.cset = "setb"; //#14168
            $_.mode = 1; //#14169
            break; //#14170
        } //#14170
        for (;;) { //#14414
            if ($_.i == $_.msglen) { //#14174
                break; //#14174
            } //#14174
            $k[$j++] = $_.i; //#14176
            $_.numsscr(); //#14176
            $_.nums = $k[--$j]; //#14176
            $_.nchars = $k[--$j]; //#14176
            for (;;) { //#14412
                if ($eq($_.cset, "seta")) { //#14253
                    if ($_.i < ($_.msglen - 1)) { //#14190
                        $k[$j++] = $get($_.msg, $_.i); //#14183
                        $_.bnota(); //#14183
                        $k[$j++] = $_.i + 1; //#14184
                        $_.abeforeb(); //#14184
                        var _7E = $k[--$j]; //#14184
                        var _7F = $k[--$j]; //#14184
                        if ((_7F && _7E)) { //#14189
                            $k[$j++] = $_.sb1; //#14185
                            $_.enca(); //#14185
                            $k[$j++] = $get($_.msg, $_.i); //#14186
                            $_.encb(); //#14186
                            $_.i = $_.i + 1; //#14187
                            break; //#14188
                        } //#14188
                    } //#14188
                    if ($_.i < ($_.msglen - 2)) { //#14202
                        $k[$j++] = $get($_.msg, $_.i); //#14193
                        $_.bnota(); //#14193
                        $k[$j++] = $get($_.msg, $_.i + 1); //#14194
                        $_.bnota(); //#14194
                        var _7T = $k[--$j]; //#14194
                        var _7U = $k[--$j]; //#14194
                        $k[$j++] = $an(_7U, _7T); //#14195
                        $k[$j++] = $_.i + 2; //#14195
                        $_.abeforeb(); //#14195
                        var _7W = $k[--$j]; //#14195
                        var _7X = $k[--$j]; //#14195
                        if ((_7X && _7W)) { //#14201
                            $k[$j++] = $_.sb2; //#14196
                            $_.enca(); //#14196
                            $k[$j++] = $get($_.msg, $_.i); //#14197
                            $_.encb(); //#14197
                            $k[$j++] = $get($_.msg, $_.i + 1); //#14198
                            $_.encb(); //#14198
                            $_.i = $_.i + 2; //#14199
                            break; //#14200
                        } //#14200
                    } //#14200
                    $k[$j++] = $get($_.msg, $_.i); //#14204
                    $_.bnota(); //#14204
                    if ($k[--$j]) { //#14208
                        $k[$j++] = $_.swb; //#14205
                        $_.enca(); //#14205
                        $_.cset = "setb"; //#14206
                        break; //#14207
                    } //#14207
                    if ($_.i < ($_.msglen - 4)) { //#14225
                        var _7s = $get($_.seta, $get($_.msg, $_.i + 4)) !== undefined; //#14212
                        if (($_.nums == 4) && _7s) { //#14224
                            $k[$j++] = $_.sc2; //#14213
                            $_.enca(); //#14213
                            for (var _7u = 0, _7v = 2; _7u < _7v; _7u++) { //#14222
                                if ($get($_.msg, $_.i) == $_.fn1) { //#14220
                                    $k[$j++] = $_.fn1; //#14216
                                    $_.encc(); //#14216
                                    $_.i = $_.i + 1; //#14217
                                } else { //#14220
                                    $k[$j++] = $geti($_.msg, $_.i, 2); //#14219
                                    $_.encc(); //#14219
                                    $_.i = $_.i + 2; //#14220
                                } //#14220
                            } //#14220
                            break; //#14223
                        } //#14223
                    } //#14223
                    if ($_.i < ($_.msglen - 6)) { //#14242
                        var _8D = $get($_.seta, $get($_.msg, $_.i + 6)) !== undefined; //#14229
                        if (($_.nums == 6) && _8D) { //#14241
                            $k[$j++] = $_.sc3; //#14230
                            $_.enca(); //#14230
                            for (var _8F = 0, _8G = 3; _8F < _8G; _8F++) { //#14239
                                if ($get($_.msg, $_.i) == $_.fn1) { //#14237
                                    $k[$j++] = $_.fn1; //#14233
                                    $_.encc(); //#14233
                                    $_.i = $_.i + 1; //#14234
                                } else { //#14237
                                    $k[$j++] = $geti($_.msg, $_.i, 2); //#14236
                                    $_.encc(); //#14236
                                    $_.i = $_.i + 2; //#14237
                                } //#14237
                            } //#14237
                            break; //#14240
                        } //#14240
                    } //#14240
                    if (($_.nums >= 4) && (($_.nums % 2) == 0)) { //#14248
                        $k[$j++] = $_.swc; //#14245
                        $_.enca(); //#14245
                        $_.cset = "setc"; //#14246
                        break; //#14247
                    } //#14247
                    $k[$j++] = $get($_.msg, $_.i); //#14250
                    $_.enca(); //#14250
                    $_.i = $_.i + 1; //#14251
                    break; //#14252
                } //#14252
                if ($eq($_.cset, "setb")) { //#14327
                    if ($_.i < ($_.msglen - 1)) { //#14264
                        $k[$j++] = $get($_.msg, $_.i); //#14257
                        $_.anotb(); //#14257
                        $k[$j++] = $_.i + 1; //#14258
                        $_.bbeforea(); //#14258
                        var _8f = $k[--$j]; //#14258
                        var _8g = $k[--$j]; //#14258
                        if ((_8g && _8f)) { //#14263
                            $k[$j++] = $_.sa1; //#14259
                            $_.encb(); //#14259
                            $k[$j++] = $get($_.msg, $_.i); //#14260
                            $_.enca(); //#14260
                            $_.i = $_.i + 1; //#14261
                            break; //#14262
                        } //#14262
                    } //#14262
                    if ($_.i < ($_.msglen - 2)) { //#14276
                        $k[$j++] = $get($_.msg, $_.i); //#14267
                        $_.anotb(); //#14267
                        $k[$j++] = $get($_.msg, $_.i + 1); //#14268
                        $_.anotb(); //#14268
                        var _8u = $k[--$j]; //#14268
                        var _8v = $k[--$j]; //#14268
                        $k[$j++] = $an(_8v, _8u); //#14269
                        $k[$j++] = $_.i + 2; //#14269
                        $_.bbeforea(); //#14269
                        var _8x = $k[--$j]; //#14269
                        var _8y = $k[--$j]; //#14269
                        if ((_8y && _8x)) { //#14275
                            $k[$j++] = $_.sa2; //#14270
                            $_.encb(); //#14270
                            $k[$j++] = $get($_.msg, $_.i); //#14271
                            $_.enca(); //#14271
                            $k[$j++] = $get($_.msg, $_.i + 1); //#14272
                            $_.enca(); //#14272
                            $_.i = $_.i + 2; //#14273
                            break; //#14274
                        } //#14274
                    } //#14274
                    $k[$j++] = $get($_.msg, $_.i); //#14278
                    $_.anotb(); //#14278
                    if ($k[--$j]) { //#14282
                        $k[$j++] = $_.swa; //#14279
                        $_.encb(); //#14279
                        $_.cset = "seta"; //#14280
                        break; //#14281
                    } //#14281
                    if ($_.i < ($_.msglen - 4)) { //#14299
                        var _9J = $get($_.setb, $get($_.msg, $_.i + 4)) !== undefined; //#14286
                        if (($_.nums == 4) && _9J) { //#14298
                            $k[$j++] = $_.sc2; //#14287
                            $_.encb(); //#14287
                            for (var _9L = 0, _9M = 2; _9L < _9M; _9L++) { //#14296
                                if ($get($_.msg, $_.i) == $_.fn1) { //#14294
                                    $k[$j++] = $_.fn1; //#14290
                                    $_.encc(); //#14290
                                    $_.i = $_.i + 1; //#14291
                                } else { //#14294
                                    $k[$j++] = $geti($_.msg, $_.i, 2); //#14293
                                    $_.encc(); //#14293
                                    $_.i = $_.i + 2; //#14294
                                } //#14294
                            } //#14294
                            break; //#14297
                        } //#14297
                    } //#14297
                    if ($_.i < ($_.msglen - 6)) { //#14316
                        var _9e = $get($_.setb, $get($_.msg, $_.i + 6)) !== undefined; //#14303
                        if (($_.nums == 6) && _9e) { //#14315
                            $k[$j++] = $_.sc3; //#14304
                            $_.encb(); //#14304
                            for (var _9g = 0, _9h = 3; _9g < _9h; _9g++) { //#14313
                                if ($get($_.msg, $_.i) == $_.fn1) { //#14311
                                    $k[$j++] = $_.fn1; //#14307
                                    $_.encc(); //#14307
                                    $_.i = $_.i + 1; //#14308
                                } else { //#14311
                                    $k[$j++] = $geti($_.msg, $_.i, 2); //#14310
                                    $_.encc(); //#14310
                                    $_.i = $_.i + 2; //#14311
                                } //#14311
                            } //#14311
                            break; //#14314
                        } //#14314
                    } //#14314
                    if (($_.nums >= 4) && (($_.nums % 2) == 0)) { //#14322
                        $k[$j++] = $_.swc; //#14319
                        $_.encb(); //#14319
                        $_.cset = "setc"; //#14320
                        break; //#14321
                    } //#14321
                    $k[$j++] = $get($_.msg, $_.i); //#14324
                    $_.encb(); //#14324
                    $_.i = $_.i + 1; //#14325
                    break; //#14326
                } //#14326
                if ($eq($_.cset, "setc")) { //#14410
                    if ($_.nums >= 2) { //#14339
                        if ($get($_.msg, $_.i) == $_.fn1) { //#14336
                            $k[$j++] = $_.fn1; //#14332
                            $_.encc(); //#14332
                            $_.i = $_.i + 1; //#14333
                        } else { //#14336
                            $k[$j++] = $geti($_.msg, $_.i, 2); //#14335
                            $_.encc(); //#14335
                            $_.i = $_.i + 2; //#14336
                        } //#14336
                        break; //#14338
                    } //#14338
                    if ($_.i < ($_.msglen - 1)) { //#14349
                        var _AH = $get($_.setb, $get($_.msg, $_.i)) !== undefined; //#14342
                        $k[$j++] = _AH; //#14343
                        $k[$j++] = $_.i + 1; //#14343
                        $_.numsscr(); //#14343
                        var _AJ = $k[--$j]; //#14343
                        var _AK = $k[--$j]; //#14343
                        $k[$j++] = _AJ; //#14343
                        $k[$j++] = _AK; //#14343
                        $j--; //#14343
                        var _AL = $k[--$j]; //#14343
                        var _AM = $k[--$j]; //#14343
                        if (_AM && ((_AL >= 2) && ((_AL % 2) == 0))) { //#14348
                            $k[$j++] = $_.sb1; //#14344
                            $_.encc(); //#14344
                            $k[$j++] = $get($_.msg, $_.i); //#14345
                            $_.encb(); //#14345
                            $_.i = $_.i + 1; //#14346
                            break; //#14347
                        } //#14347
                    } //#14347
                    if ($_.i < ($_.msglen - 1)) { //#14360
                        var _AY = $get($_.setb, $get($_.msg, $_.i)) !== undefined; //#14352
                        $k[$j++] = _AY; //#14353
                        $k[$j++] = $_.i + 1; //#14353
                        $_.numsscr(); //#14353
                        var _Aa = $k[--$j]; //#14353
                        var _Ab = $k[--$j]; //#14353
                        $k[$j++] = _Aa; //#14353
                        $k[$j++] = _Ab; //#14353
                        $j--; //#14353
                        var _Ac = $k[--$j]; //#14353
                        var _Ad = $k[--$j]; //#14353
                        if (_Ad && ((_Ac >= 3) && ((_Ac % 2) == 1))) { //#14359
                            $k[$j++] = $_.sb2; //#14354
                            $_.encc(); //#14354
                            $k[$j++] = $get($_.msg, $_.i); //#14355
                            $_.encb(); //#14355
                            $k[$j++] = $get($_.msg, $_.i + 1); //#14356
                            $_.encb(); //#14356
                            $_.i = $_.i + 2; //#14357
                            break; //#14358
                        } //#14358
                    } //#14358
                    if ($_.i < ($_.msglen - 2)) { //#14372
                        var _As = $get($_.setb, $get($_.msg, $_.i)) !== undefined; //#14363
                        var _Ax = $get($_.setb, $get($_.msg, $_.i + 1)) !== undefined; //#14364
                        $k[$j++] = _As && _Ax; //#14365
                        $k[$j++] = $_.i + 2; //#14365
                        $_.numsscr(); //#14365
                        var _Az = $k[--$j]; //#14365
                        var _B0 = $k[--$j]; //#14365
                        $k[$j++] = _Az; //#14365
                        $k[$j++] = _B0; //#14365
                        $j--; //#14365
                        var _B1 = $k[--$j]; //#14365
                        var _B2 = $k[--$j]; //#14365
                        if (_B2 && ((_B1 >= 2) && ((_B1 % 2) == 0))) { //#14371
                            $k[$j++] = $_.sb2; //#14366
                            $_.encc(); //#14366
                            $k[$j++] = $get($_.msg, $_.i); //#14367
                            $_.encb(); //#14367
                            $k[$j++] = $get($_.msg, $_.i + 1); //#14368
                            $_.encb(); //#14368
                            $_.i = $_.i + 2; //#14369
                            break; //#14370
                        } //#14370
                    } //#14370
                    if ($_.i < ($_.msglen - 3)) { //#14385
                        var _BH = $get($_.setb, $get($_.msg, $_.i)) !== undefined; //#14375
                        var _BM = $get($_.setb, $get($_.msg, $_.i + 1)) !== undefined; //#14376
                        $k[$j++] = _BH && _BM; //#14377
                        $k[$j++] = $_.i + 2; //#14377
                        $_.numsscr(); //#14377
                        var _BO = $k[--$j]; //#14377
                        var _BP = $k[--$j]; //#14377
                        $k[$j++] = _BO; //#14377
                        $k[$j++] = _BP; //#14377
                        $j--; //#14377
                        var _BQ = $k[--$j]; //#14377
                        var _BR = $k[--$j]; //#14377
                        if (_BR && ((_BQ >= 3) && ((_BQ % 2) == 1))) { //#14384
                            $k[$j++] = $_.sb3; //#14378
                            $_.encc(); //#14378
                            $k[$j++] = $get($_.msg, $_.i); //#14379
                            $_.encb(); //#14379
                            $k[$j++] = $get($_.msg, $_.i + 1); //#14380
                            $_.encb(); //#14380
                            $k[$j++] = $get($_.msg, $_.i + 2); //#14381
                            $_.encb(); //#14381
                            $_.i = $_.i + 3; //#14382
                            break; //#14383
                        } //#14383
                    } //#14383
                    if ($_.i < ($_.msglen - 3)) { //#14399
                        var _Bj = $get($_.setb, $get($_.msg, $_.i)) !== undefined; //#14388
                        var _Bo = $get($_.setb, $get($_.msg, $_.i + 1)) !== undefined; //#14389
                        var _Bt = $get($_.setb, $get($_.msg, $_.i + 2)) !== undefined; //#14390
                        $k[$j++] = (_Bj && _Bo) && _Bt; //#14391
                        $k[$j++] = $_.i + 3; //#14391
                        $_.numsscr(); //#14391
                        var _Bv = $k[--$j]; //#14391
                        var _Bw = $k[--$j]; //#14391
                        $k[$j++] = _Bv; //#14391
                        $k[$j++] = _Bw; //#14391
                        $j--; //#14391
                        var _Bx = $k[--$j]; //#14391
                        var _By = $k[--$j]; //#14391
                        if (_By && ((_Bx >= 2) && ((_Bx % 2) == 0))) { //#14398
                            $k[$j++] = $_.sb3; //#14392
                            $_.encc(); //#14392
                            $k[$j++] = $get($_.msg, $_.i); //#14393
                            $_.encb(); //#14393
                            $k[$j++] = $get($_.msg, $_.i + 1); //#14394
                            $_.encb(); //#14394
                            $k[$j++] = $get($_.msg, $_.i + 2); //#14395
                            $_.encb(); //#14395
                            $_.i = $_.i + 3; //#14396
                            break; //#14397
                        } //#14397
                    } //#14397
                    $k[$j++] = $_.i; //#14401
                    $_.abeforeb(); //#14401
                    if ($k[--$j]) { //#14405
                        $k[$j++] = $_.swa; //#14402
                        $_.encc(); //#14402
                        $_.cset = "seta"; //#14403
                        break; //#14404
                    } //#14404
                    $k[$j++] = $_.swb; //#14407
                    $_.encc(); //#14407
                    $_.cset = "setb"; //#14408
                    break; //#14409
                } //#14409
                break; //#14411
            } //#14411
        } //#14411
        $_.cws = $geti($_.cws, 0, $_.j); //#14415
    } //#14415
    if (!bwipp_code16k.__14438__) { //#14438
        $_ = Object.create($_); //#14438
        $_.metrics = $a([$a([2, 7]), $a([3, 12]), $a([4, 17]), $a([5, 22]), $a([6, 27]), $a([7, 32]), $a([8, 37]), $a([9, 42]), $a([10, 47]), $a([11, 52]), $a([12, 57]), $a([13, 62]), $a([14, 67]), $a([15, 72]), $a([16, 77])]); //#14437
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code16k.$ctx[id] = $_[id]); //#14437
        bwipp_code16k.__14438__ = 1; //#14437
        $_ = Object.getPrototypeOf($_); //#14437
    } //#14437
    $_.urows = $_.rows; //#14441
    var _CZ = $_.metrics; //#14442
    for (var _Ca = 0, _Cb = _CZ.length; _Ca < _Cb; _Ca++) { //#14450
        $_.m = $get(_CZ, _Ca); //#14443
        $_.r = $get($_.m, 0); //#14444
        $_.dcws = $get($_.m, 1); //#14445
        $_.okay = true; //#14446
        if (($_.urows != 0) && ($_.urows != $_.r)) { //#14447
            $_.okay = false; //#14447
        } //#14447
        if ($_.cws.length > $_.dcws) { //#14448
            $_.okay = false; //#14448
        } //#14448
        if ($_.okay) { //#14449
            break; //#14449
        } //#14449
    } //#14449
    if (!$_.okay) { //#14454
        $k[$j++] = 'bwipp.code16kNoValidSymbol#14453'; //#14453
        $k[$j++] = "Maximum length exceeded or data too large for given options"; //#14453
        bwipp_raiseerror(); //#14453
    } //#14453
    $k[$j++] = Infinity; //#14457
    $aload($_.cws); //#14457
    for (var _Cr = 0, _Cs = $f($_.dcws - $_.cws.length); _Cr < _Cs; _Cr++) { //#14457
        $k[$j++] = 103; //#14457
    } //#14457
    $_.cws = $a(); //#14457
    $k[$j++] = Infinity; //#14460
    $k[$j++] = $f(($f($_.r - 2) * 7) + $_.mode); //#14460
    $aload($_.cws); //#14460
    $_.cws = $a(); //#14460
    $k[$j++] = 0; //#14463
    for (var _D0 = 0, _Cz = $_.dcws; _D0 <= _Cz; _D0 += 1) { //#14463
        var _D3 = $k[--$j]; //#14463
        $k[$j++] = $f(_D3 + ((_D0 + 2) * $get($_.cws, _D0))); //#14463
    } //#14463
    $_.c1 = $k[--$j] % 107; //#14464
    $k[$j++] = 0; //#14465
    for (var _D7 = 0, _D6 = $_.dcws; _D7 <= _D6; _D7 += 1) { //#14465
        var _DA = $k[--$j]; //#14465
        $k[$j++] = $f(_DA + ((_D7 + 1) * $get($_.cws, _D7))); //#14465
    } //#14465
    $_.c2 = ($f($k[--$j] + ($_.c1 * $f($_.dcws + 2)))) % 107; //#14466
    $k[$j++] = Infinity; //#14467
    $aload($_.cws); //#14467
    $k[$j++] = $_.c1; //#14467
    $k[$j++] = $_.c2; //#14467
    $_.cws = $a(); //#14467
    var _DJ = $get($_.options, 'debugcws') !== undefined; //#14469
    if (_DJ) { //#14469
        $k[$j++] = 'bwipp.debugcws#14469'; //#14469
        $k[$j++] = $_.cws; //#14469
        bwipp_raiseerror(); //#14469
    } //#14469
    if (!bwipp_code16k.__14505__) { //#14505
        $_ = Object.create($_); //#14505
        $_.encs = $a(["212222", "222122", "222221", "121223", "121322", "131222", "122213", "122312", "132212", "221213", "221312", "231212", "112232", "122132", "122231", "113222", "123122", "123221", "223211", "221132", "221231", "213212", "223112", "312131", "311222", "321122", "321221", "312212", "322112", "322211", "212123", "212321", "232121", "111323", "131123", "131321", "112313", "132113", "132311", "211313", "231113", "231311", "112133", "112331", "132131", "113123", "113321", "133121", "313121", "211331", "231131", "213113", "213311", "213131", "311123", "311321", "331121", "312113", "312311", "332111", "314111", "221411", "431111", "111224", "111422", "121124", "121421", "141122", "141221", "112214", "112412", "122114", "122411", "142112", "142211", "241211", "221114", "413111", "241112", "134111", "111242", "121142", "121241", "114212", "124112", "124211", "411212", "421112", "421211", "212141", "214121", "412121", "111143", "111341", "131141", "114113", "114311", "411113", "411311", "113141", "114131", "311141", "411131", "211412", "211214", "211232", "211133"]); //#14490
        $_.startencs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "3112", "3211", "2221", "2122", "1411", "1132", "1231", "1114", "3112"]); //#14496
        $_.stopencsodd = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "3112", "1132", "1231", "1114", "3112", "3211", "2221", "2122", "1411"]); //#14500
        $_.stopencseven = $a(["2122", "1411", "1132", "1231", "1114", "3112", "1132", "1231", "1114", "3112", "3211", "2221", "2122", "1411", "3211", "2221"]); //#14504
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code16k.$ctx[id] = $_[id]); //#14504
        bwipp_code16k.__14505__ = 1; //#14504
        $_ = Object.getPrototypeOf($_); //#14504
    } //#14504
    if (($_.sam == -1) || (((~~($_.sam / 10)) % 2) == 1)) { //#14510
        $_.stopencs = $_.stopencsodd; //#14508
    } else { //#14510
        $_.stopencs = $_.stopencseven; //#14510
    } //#14510
    $_.rowbits = $a($_.r); //#14514
    for (var _DY = 0, _DX = $f($_.r - 1); _DY <= _DX; _DY += 1) { //#14531
        $_.i = _DY; //#14516
        $k[$j++] = Infinity; //#14525
        $k[$j++] = 10; //#14519
        $forall($get($_.startencs, $_.i), function() { //#14519
            var _Dc = $k[--$j]; //#14519
            $k[$j++] = $f(_Dc - 48); //#14519
        }); //#14519
        var _Df = $geti($_.cws, $_.i * 5, 5); //#14521
        $k[$j++] = 1; //#14523
        for (var _Dg = 0, _Dh = _Df.length; _Dg < _Dh; _Dg++) { //#14523
            $forall($get($_.encs, $get(_Df, _Dg)), function() { //#14522
                var _Dl = $k[--$j]; //#14522
                $k[$j++] = $f(_Dl - 48); //#14522
            }); //#14522
        } //#14522
        $forall($get($_.stopencs, $_.i), function() { //#14524
            var _Dp = $k[--$j]; //#14524
            $k[$j++] = $f(_Dp - 48); //#14524
        }); //#14524
        $k[$j++] = 1; //#14525
        $_.sbs = $a(); //#14525
        $k[$j++] = Infinity; //#14527
        var _Dr = $_.sbs; //#14528
        $k[$j++] = 1; //#14528
        for (var _Ds = 0, _Dt = _Dr.length; _Ds < _Dt; _Ds++) { //#14528
            var _Dv = $k[--$j]; //#14528
            var _Dw = (_Dv == 0) ? 1 : 0; //#14528
            $k[$j++] = _Dv; //#14528
            for (var _Dx = 0, _Dy = $get(_Dr, _Ds); _Dx < _Dy; _Dx++) { //#14528
                $k[$j++] = _Dw //#14528
            } //#14528
        } //#14528
        $astore($a($counttomark() - 1)); //#14529
        var _E1 = $k[--$j]; //#14529
        var _E2 = $k[--$j]; //#14529
        $k[$j++] = _E1; //#14529
        $k[$j++] = _E2; //#14529
        $j--; //#14529
        var _E3 = $k[--$j]; //#14529
        var _E4 = $k[--$j]; //#14529
        $k[$j++] = _E3; //#14529
        $k[$j++] = _E4; //#14529
        $j--; //#14529
        $put($_.rowbits, $_.i, $k[--$j]); //#14530
    } //#14530
    $k[$j++] = Infinity; //#14542
    for (var _E9 = 0, _EA = 81 * $_.sepheight; _E9 < _EA; _E9++) { //#14535
        $k[$j++] = 1; //#14535
    } //#14535
    for (var _ED = 0, _EC = $f($_.r - 2); _ED <= _EC; _ED += 1) { //#14540
        $_.i = _ED; //#14537
        for (var _EF = 0, _EG = $_.rowheight; _EF < _EG; _EF++) { //#14538
            $aload($get($_.rowbits, $_.i)); //#14538
        } //#14538
        for (var _EL = 0, _EM = $_.sepheight; _EL < _EM; _EL++) { //#14539
            for (var _EN = 0, _EO = 10; _EN < _EO; _EN++) { //#14539
                $k[$j++] = 0; //#14539
            } //#14539
            for (var _EP = 0, _EQ = 70; _EP < _EQ; _EP++) { //#14539
                $k[$j++] = 1; //#14539
            } //#14539
            $k[$j++] = 0; //#14539
        } //#14539
    } //#14539
    for (var _ES = 0, _ET = $_.rowheight; _ES < _ET; _ES++) { //#14541
        $aload($get($_.rowbits, $f($_.r - 1))); //#14541
    } //#14541
    for (var _EY = 0, _EZ = 81 * $_.sepheight; _EY < _EZ; _EY++) { //#14542
        $k[$j++] = 1; //#14542
    } //#14542
    $_.pixs = $a(); //#14542
    var _Ef = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $_.pixs],
        ["pixx", 81],
        ["pixy", ~~($_.pixs.length / 81)],
        ["height", (~~($_.pixs.length / 81)) / 72],
        ["width", 81 / 72],
        ["opt", $_.options]
    ]); //#14553
    $k[$j++] = _Ef; //#14556
    if (!$_.dontdraw) { //#14556
        bwipp_renmatrix(); //#14556
    } //#14556
    $_ = Object.getPrototypeOf($_); //#14558
    $_ = Object.getPrototypeOf($_); //#14560
}

function bwipp_code49() {
    $_ = Object.create($_); //#14591
    $_.dontdraw = false; //#14594
    $_.sam = -1; //#14595
    $_.append = false; //#14596
    $_.rows = 0; //#14597
    $_.rowheight = 8; //#14598
    $_.sepheight = 1; //#14599
    $_.parse = false; //#14600
    $_.parsefnc = false; //#14601
    $k[$j++] = $_; //#14603
    bwipp_processoptions(); //#14603
    $_.options = $k[--$j]; //#14603
    $_.barcode = $k[--$j]; //#14604
    if (($_.rows != 0) && (($_.rows < 2) || ($_.rows > 8))) { //#14608
        $k[$j++] = 'bwipp.code49badRows#14607'; //#14607
        $k[$j++] = "Code 49 must have 2 to 8 rows"; //#14607
        bwipp_raiseerror(); //#14607
    } //#14607
    if ($_.rowheight < 8) { //#14612
        $k[$j++] = 'bwipp.code49badRowHeight#14611'; //#14611
        $k[$j++] = "Code 49 must have rowheight of at least 8"; //#14611
        bwipp_raiseerror(); //#14611
    } //#14611
    if ($_.sepheight < 1) { //#14616
        $k[$j++] = 'bwipp.code49badSepHeight#14615'; //#14615
        $k[$j++] = "Code 49 must have sepheight of at least 1"; //#14615
        bwipp_raiseerror(); //#14615
    } //#14615
    if ($_.append && ($_.sam != -1)) { //#14620
        $k[$j++] = 'bwipp.code49samAndAppend#14619'; //#14619
        $k[$j++] = "sam and append cannot be specified together"; //#14619
        bwipp_raiseerror(); //#14619
    } //#14619
    if ($_.sam != -1) { //#14632
        $k[$j++] = true; //#14628
        for (var _A = 0, _B = 1; _A < _B; _A++) { //#14628
            var _C = $_.sam; //#14625
            if ((_C < 12) || (_C > 99)) { //#14625
                $j--; //#14625
                $k[$j++] = false; //#14625
                break; //#14625
            } //#14625
            if (($_.sam % 10) < 2) { //#14626
                $j--; //#14626
                $k[$j++] = false; //#14626
                break; //#14626
            } //#14626
            if ((~~($_.sam / 10)) > ($_.sam % 10)) { //#14627
                $j--; //#14627
                $k[$j++] = false; //#14627
                break; //#14627
            } //#14627
        } //#14627
        if ($nt($k[--$j])) { //#14631
            $k[$j++] = 'bwipp.code49badSAM#14630'; //#14630
            $k[$j++] = "SAM must be formatted as \"NM\" for Nth of M symbols, from 2 to 9 symbols"; //#14630
            bwipp_raiseerror(); //#14630
        } //#14630
    } //#14630
    bwipp_loadctx(bwipp_code49) //#14634
    if (!bwipp_code49.__14638__) { //#14638
        $_ = Object.create($_); //#14638
        $_.s1 = -1; //#14637
        $_.s2 = -2; //#14637
        $_.fn1 = -3; //#14637
        $_.fn2 = -4; //#14637
        $_.fn3 = -5; //#14637
        $_.ns = -6; //#14637
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code49.$ctx[id] = $_[id]); //#14637
        bwipp_code49.__14638__ = 1; //#14637
        $_ = Object.getPrototypeOf($_); //#14637
    } //#14637
    var _N = new Map([
        ["parse", $_.parse],
        ["parsefnc", $_.parsefnc],
        ["FNC1", $_.fn1],
        ["FNC2", $_.fn2],
        ["FNC3", $_.fn3]
    ]); //#14646
    $_.fncvals = _N; //#14647
    $k[$j++] = 'msg'; //#14648
    $k[$j++] = $_.barcode; //#14648
    $k[$j++] = $_.fncvals; //#14648
    bwipp_parseinput(); //#14648
    var _Q = $k[--$j]; //#14648
    $_[$k[--$j]] = _Q; //#14648
    $_.msglen = $_.msg.length; //#14649
    $forall($_.msg, function() { //#14655
        if ($k[--$j] > 127) { //#14654
            $k[$j++] = 'bwipp.code49badCharacter#14653'; //#14653
            $k[$j++] = "Code 49 can only support ASCII characters with values 0 to 127"; //#14653
            bwipp_raiseerror(); //#14653
        } //#14653
    }); //#14653
    if (!bwipp_code49.__14697__) { //#14697
        $_ = Object.create($_); //#14697
        $_.charmap = $a(["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "-", ".", " ", "$", "/", "+", "%", $_.s1, $_.s2, $_.fn1, $_.fn2, $_.fn3, $_.ns]); //#14665
        $_.charvals = new Map; //#14668
        for (var _c = 0; _c <= 48; _c += 1) { //#14674
            $_.i = _c; //#14670
            var _f = $get($_.charmap, $_.i); //#14671
            $k[$j++] = _f; //#14672
            if ($eq($type(_f), 'stringtype')) { //#14672
                var _i = $get($k[--$j], 0); //#14672
                $k[$j++] = _i; //#14672
            } //#14672
            $put($_.charvals, $k[--$j], $_.i); //#14673
        } //#14673
        $_.combos = $a(["1 ", "1A", "1B", "1C", "1D", "1E", "1F", "1G", "1H", "1I", "1J", "1K", "1L", "1M", "1N", "1O", "1P", "1Q", "1R", "1S", "1T", "1U", "1V", "1W", "1X", "1Y", "1Z", "11", "12", "13", "14", "15", "  ", "16", "17", "18", " $", " %", "19", "10", "1-", "1.", "1$", " +", "1/", " -", " .", " /", " 0", " 1", " 2", " 3", " 4", " 5", " 6", " 7", " 8", " 9", "1+", "21", "22", "23", "24", "25", "26", " A", " B", " C", " D", " E", " F", " G", " H", " I", " J", " K", " L", " M", " N", " O", " P", " Q", " R", " S", " T", " U", " V", " W", " X", " Y", " Z", "27", "28", "29", "20", "2-", "2.", "2A", "2B", "2C", "2D", "2E", "2F", "2G", "2H", "2I", "2J", "2K", "2L", "2M", "2N", "2O", "2P", "2Q", "2R", "2S", "2T", "2U", "2V", "2W", "2X", "2Y", "2Z", "2$", "2/", "2+", "2%", "2 "]); //#14686
        for (var _n = 0; _n <= 127; _n += 1) { //#14696
            $_.i = _n; //#14688
            var _q = $get($_.combos, $_.i); //#14689
            $_.c1 = $get(_q, 0); //#14689
            $_.c2 = $get(_q, 1); //#14689
            if ($_.c1 == 49) { //#14692
                $put($_.charvals, $_.i, $a([$get($_.charvals, $_.s1), $get($_.charvals, $_.c2)])); //#14691
            } //#14691
            if ($_.c1 == 50) { //#14695
                $put($_.charvals, $_.i, $a([$get($_.charvals, $_.s2), $get($_.charvals, $_.c2)])); //#14694
            } //#14694
        } //#14694
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code49.$ctx[id] = $_[id]); //#14694
        bwipp_code49.__14697__ = 1; //#14694
        $_ = Object.getPrototypeOf($_); //#14694
    } //#14694
    $_.encodealpha = function() {
        var _1G = $get($_.charvals, $k[--$j]); //#14700
        $k[$j++] = _1G; //#14701
        if ($ne($type(_1G), 'arraytype')) { //#14701
            $astore($a(1)); //#14701
        } //#14701
        var _1J = $k[--$j]; //#14702
        $puti($_.cws, $_.j, _1J); //#14702
        $_.j = _1J.length + $_.j; //#14703
    }; //#14703
    $_.base48 = function() {
        var _1N = $k[--$j]; //#14707
        $k[$j++] = 0; //#14707
        $forall(_1N, function() { //#14707
            var _1O = $k[--$j]; //#14707
            var _1P = $k[--$j]; //#14707
            $k[$j++] = $f($f(_1O - 48) + (_1P * 10)); //#14707
        }); //#14707
        $k[$j++] = Infinity; //#14708
        var _1Q = $k[--$j]; //#14708
        var _1R = $k[--$j]; //#14708
        var _1S = $k[--$j]; //#14708
        $k[$j++] = _1Q; //#14708
        $k[$j++] = _1R; //#14708
        for (var _1T = 0, _1U = $f(_1S - 1); _1T < _1U; _1T++) { //#14708
            var _1V = $k[--$j]; //#14708
            $k[$j++] = _1V % 48; //#14708
            $k[$j++] = ~~(_1V / 48); //#14708
        } //#14708
        var _1W = $a(); //#14708
        $k[$j++] = _1W; //#14709
        $k[$j++] = Infinity; //#14709
        var _1X = $k[--$j]; //#14709
        var _1Y = $k[--$j]; //#14709
        $k[$j++] = _1X; //#14709
        $k[$j++] = _1Y; //#14709
        for (var _1Z = _1Y.length - 1; _1Z >= 0; _1Z -= 1) { //#14709
            var _1a = $k[--$j]; //#14709
            $k[$j++] = $get(_1a, _1Z); //#14709
            $k[$j++] = _1a; //#14709
        } //#14709
        $j--; //#14709
        var _1c = $a(); //#14709
        $puti($_.cws, $_.j, _1c); //#14710
        $_.j = _1c.length + $_.j; //#14711
    }; //#14711
    $_.encodenumeric = function() {
        $_.nums = $k[--$j]; //#14715
        var _1i = $_.nums.length; //#14716
        var _1j = _1i % 5; //#14716
        $k[$j++] = 'pre'; //#14716
        $k[$j++] = _1i; //#14716
        $k[$j++] = _1j; //#14716
        if (_1j != 2) { //#14716
            var _1k = $k[--$j]; //#14716
            var _1l = $k[--$j]; //#14716
            $k[$j++] = $f(_1l - _1k); //#14716
        } else { //#14716
            var _1m = $k[--$j]; //#14716
            var _1n = $k[--$j]; //#14716
            $k[$j++] = $f($f(_1n - _1m) - 5); //#14716
        } //#14716
        var _1o = $k[--$j]; //#14716
        $_[$k[--$j]] = _1o; //#14716
        for (var _1s = 0, _1r = $f($_.pre - 1); _1s <= _1r; _1s += 5) { //#14717
            $k[$j++] = 3; //#14717
            $k[$j++] = $geti($_.nums, _1s, 5); //#14717
            $_.base48(); //#14717
        } //#14717
        $_.nums = $geti($_.nums, $_.pre, $f($_.nums.length - $_.pre)); //#14718
        var _21 = $_.nums.length; //#14720
        $k[$j++] = _21; //#14720
        if (_21 == 1) { //#14720
            $k[$j++] = $get($_.nums, $_.i); //#14720
            $_.encodealpha(); //#14720
        } //#14720
        var _25 = $k[--$j]; //#14721
        $k[$j++] = _25; //#14721
        if (_25 == 3) { //#14721
            $k[$j++] = 2; //#14721
            $k[$j++] = $_.nums; //#14721
            $_.base48(); //#14721
        } //#14721
        var _27 = $k[--$j]; //#14722
        $k[$j++] = _27; //#14722
        if (_27 == 4) { //#14722
            $k[$j++] = 3; //#14722
            $k[$j++] = Infinity; //#14722
            $k[$j++] = 49; //#14722
            $k[$j++] = 48; //#14722
            $aload($_.nums); //#14722
            var _29 = $a(); //#14722
            $k[$j++] = _29; //#14722
            $_.base48(); //#14722
        } //#14722
        if ($k[--$j] == 7) { //#14726
            $k[$j++] = 3; //#14724
            $k[$j++] = Infinity; //#14724
            $k[$j++] = 49; //#14724
            $k[$j++] = 48; //#14724
            $aload($geti($_.nums, 0, 4)); //#14724
            var _2D = $a(); //#14724
            $k[$j++] = _2D; //#14724
            $_.base48(); //#14724
            $k[$j++] = 2; //#14725
            $k[$j++] = $geti($_.nums, 4, 3); //#14725
            $_.base48(); //#14725
        } //#14725
    }; //#14725
    $k[$j++] = Infinity; //#14730
    for (var _2H = 0, _2I = $_.msglen; _2H < _2I; _2H++) { //#14730
        $k[$j++] = 0; //#14730
    } //#14730
    $k[$j++] = 0; //#14730
    $_.numericruns = $a(); //#14730
    for (var _2L = $_.msglen - 1; _2L >= 0; _2L -= 1) { //#14739
        $_.i = _2L; //#14732
        var _2O = $get($_.msg, $_.i); //#14733
        if ((_2O >= 48) && (_2O <= 57)) { //#14737
            $put($_.numericruns, $_.i, $f($get($_.numericruns, $_.i + 1) + 1)); //#14735
        } else { //#14737
            $put($_.numericruns, $_.i, 0); //#14737
        } //#14737
    } //#14737
    $_.cws = $a(($_.msglen * 2) + 1); //#14741
    if (!bwipp_code49.__14754__) { //#14754
        $_ = Object.create($_); //#14754
        $_.samval = $a([12, 22, 13, 23, 33, 14, 24, 34, 44, 15, 25, 35, 45, 55, 16, 26, 36, 46, 56, 66, 17, 27, 37, 47, 57, 67, 77, 18, 28, 38, 48, 58, 68, 78, 88, 19, 29, 39, 49, 59, 69, 79, 89, 99]); //#14753
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code49.$ctx[id] = $_[id]); //#14753
        bwipp_code49.__14754__ = 1; //#14753
        $_ = Object.getPrototypeOf($_); //#14753
    } //#14753
    for (;;) { //#14790
        if ($_.append) { //#14763
            $_.mode = 1; //#14759
            $_.method = "alpha"; //#14760
            $_.i = 0; //#14761
            $_.j = 0; //#14761
            break; //#14762
        } //#14762
        if ($_.sam != -1) { //#14770
            $_.mode = 3; //#14765
            $k[$j++] = $_.cws; //#14766
            $k[$j++] = 0; //#14766
            for (var _2d = 0; _2d <= 43; _2d += 1) { //#14766
                $k[$j++] = _2d; //#14766
                if ($get($_.samval, _2d) != $_.sam) { //#14766
                    $j--; //#14766
                } //#14766
            } //#14766
            var _2h = $k[--$j]; //#14766
            var _2i = $k[--$j]; //#14766
            $put($k[--$j], _2i, $f(_2h + 1)); //#14766
            $_.method = "alpha"; //#14767
            $_.i = 0; //#14768
            $_.j = 1; //#14768
            break; //#14769
        } //#14769
        if ($get($_.numericruns, 0) >= 5) { //#14775
            $_.mode = 2; //#14772
            $_.method = "numeric"; //#14773
            $_.i = 0; //#14773
            $_.j = 0; //#14773
            break; //#14774
        } //#14774
        var _2p = $get($_.charvals, $get($_.msg, 0)); //#14776
        $k[$j++] = _2p; //#14783
        if ($ne($type(_2p), 'arraytype')) { //#14783
            $j--; //#14778
            $_.mode = 0; //#14779
            $_.method = "alpha"; //#14780
            $_.i = 0; //#14781
            $_.j = 0; //#14781
            break; //#14782
        } //#14782
        var _2t = ($get($k[--$j], 0) == 43) ? 4 : 5; //#14785
        $_.mode = _2t; //#14785
        $put($_.cws, 0, $get($get($_.charvals, $get($_.msg, 0)), 1)); //#14786
        $_.method = "alpha"; //#14787
        $_.i = 1; //#14788
        $_.j = 1; //#14788
        break; //#14789
    } //#14789
    for (;;) { //#14817
        if ($_.i == $_.msglen) { //#14794
            break; //#14794
        } //#14794
        for (;;) { //#14816
            if ($eq($_.method, "alpha")) { //#14805
                if ($get($_.numericruns, $_.i) >= 5) { //#14801
                    $k[$j++] = $_.ns; //#14798
                    $_.encodealpha(); //#14798
                    $_.method = "numeric"; //#14799
                    break; //#14800
                } //#14800
                $k[$j++] = $get($_.msg, $_.i); //#14802
                $_.encodealpha(); //#14802
                $_.i = $_.i + 1; //#14803
                break; //#14804
            } //#14804
            if ($eq($_.method, "numeric")) { //#14815
                if ($get($_.numericruns, $_.i) < 5) { //#14811
                    $k[$j++] = $_.ns; //#14808
                    $_.encodealpha(); //#14808
                    $_.method = "alpha"; //#14809
                    break; //#14810
                } //#14810
                $k[$j++] = $geti($_.msg, $_.i, $get($_.numericruns, $_.i)); //#14812
                $_.encodenumeric(); //#14812
                $_.i = $f($_.i + $get($_.numericruns, $_.i)); //#14813
                break; //#14814
            } //#14814
        } //#14814
    } //#14814
    $_.cws = $geti($_.cws, 0, $_.j); //#14818
    if (!bwipp_code49.__14832__) { //#14832
        $_ = Object.create($_); //#14832
        $_.metrics = $a([$a([2, 9]), $a([3, 16]), $a([4, 23]), $a([5, 30]), $a([6, 37]), $a([7, 42]), $a([8, 49])]); //#14831
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code49.$ctx[id] = $_[id]); //#14831
        bwipp_code49.__14832__ = 1; //#14831
        $_ = Object.getPrototypeOf($_); //#14831
    } //#14831
    $_.urows = $_.rows; //#14835
    var _3d = $_.metrics; //#14836
    for (var _3e = 0, _3f = _3d.length; _3e < _3f; _3e++) { //#14844
        $_.m = $get(_3d, _3e); //#14837
        $_.r = $get($_.m, 0); //#14838
        $_.dcws = $get($_.m, 1); //#14839
        $_.okay = true; //#14840
        if (($_.urows != 0) && ($_.urows != $_.r)) { //#14841
            $_.okay = false; //#14841
        } //#14841
        if ($_.cws.length > $_.dcws) { //#14842
            $_.okay = false; //#14842
        } //#14842
        if ($_.okay) { //#14843
            break; //#14843
        } //#14843
    } //#14843
    if (!$_.okay) { //#14848
        $k[$j++] = 'bwipp.code49noValidSymbol#14847'; //#14847
        $k[$j++] = "Maximum length exceeded"; //#14847
        bwipp_raiseerror(); //#14847
    } //#14847
    $k[$j++] = Infinity; //#14851
    $aload($_.cws); //#14851
    for (var _3v = 0, _3w = $f($_.dcws - $_.cws.length); _3v < _3w; _3v++) { //#14851
        $k[$j++] = 48; //#14851
    } //#14851
    $_.cws = $a(); //#14851
    $_.ccs = $a($_.r * 8); //#14854
    $_.j = 0; //#14855
    for (var _42 = 0, _41 = $f($_.r - 2); _42 <= _41; _42 += 1) { //#14862
        $_.i = _42; //#14857
        $_.cc = $geti($_.cws, $_.j, 7); //#14858
        $puti($_.ccs, $_.i * 8, $_.cc); //#14859
        var _4B = $_.cc; //#14860
        $k[$j++] = $_.ccs; //#14860
        $k[$j++] = ($_.i * 8) + 7; //#14860
        $k[$j++] = 0; //#14860
        for (var _4C = 0, _4D = _4B.length; _4C < _4D; _4C++) { //#14860
            var _4F = $k[--$j]; //#14860
            $k[$j++] = $f(_4F + $get(_4B, _4C)); //#14860
        } //#14860
        var _4G = $k[--$j]; //#14860
        var _4H = $k[--$j]; //#14860
        $put($k[--$j], _4H, _4G % 49); //#14860
        $_.j = $_.j + 7; //#14861
    } //#14861
    if ($_.j < $_.dcws) { //#14865
        $puti($_.ccs, $_.ccs.length - 8, $geti($_.cws, $_.j, $f($_.dcws - $_.j))); //#14864
    } //#14864
    $_.cr7 = $f(($f($_.r - 2) * 7) + $_.mode); //#14868
    $put($_.ccs, $_.ccs.length - 2, $_.cr7); //#14869
    if (!bwipp_code49.__14878__) { //#14878
        $_ = Object.create($_); //#14878
        var _4Y = $a([1, 9, 31, 26, 2, 12, 17, 23, 37, 18, 22, 6, 27, 44, 15, 43, 39, 11, 13, 5, 41, 33, 36, 8, 4, 32, 3, 19, 40, 25, 29, 10, 24, 30]); //#14874
        $k[$j++] = _4Y; //#14875
        $k[$j++] = _4Y; //#14875
        $k[$j++] = Infinity; //#14875
        var _4Z = $k[--$j]; //#14875
        var _4b = $geti($k[--$j], 0, 32); //#14875
        $k[$j++] = _4Z; //#14875
        $k[$j++] = 20; //#14875
        $aload(_4b); //#14875
        $_.weightx = $a(); //#14875
        var _4d = $k[--$j]; //#14876
        $k[$j++] = _4d; //#14876
        $k[$j++] = _4d; //#14876
        $k[$j++] = Infinity; //#14876
        var _4e = $k[--$j]; //#14876
        var _4g = $geti($k[--$j], 1, 32); //#14876
        $k[$j++] = _4e; //#14876
        $k[$j++] = 16; //#14876
        $aload(_4g); //#14876
        $_.weighty = $a(); //#14876
        $k[$j++] = Infinity; //#14877
        var _4i = $k[--$j]; //#14877
        var _4k = $geti($k[--$j], 2, 32); //#14877
        $k[$j++] = _4i; //#14877
        $k[$j++] = 38; //#14877
        $aload(_4k); //#14877
        $_.weightz = $a(); //#14877
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code49.$ctx[id] = $_[id]); //#14877
        bwipp_code49.__14878__ = 1; //#14877
        $_ = Object.getPrototypeOf($_); //#14877
    } //#14877
    $_.calccheck = function() {
        $_.weights = $k[--$j]; //#14880
        $_.score = 0; //#14881
        for (var _4q = 0, _4p = (~~(($f($_.r - 1) * 8) / 2)) - 1; _4q <= _4p; _4q += 1) { //#14886
            $_.i = _4q; //#14883
            $_.score = $f((($f(($get($_.ccs, $_.i * 2) * 49) + $get($_.ccs, ($_.i * 2) + 1))) * $get($_.weights, $_.i + 1)) + $_.score); //#14885
        } //#14885
        $k[$j++] = $_.score; //#14887
    }; //#14887
    $_.lastrow = $geti($_.ccs, $_.ccs.length - 8, 8); //#14889
    if ($_.r >= 7) { //#14896
        $k[$j++] = $_.cr7 * $get($_.weightz, 0); //#14893
        $k[$j++] = $_.weightz; //#14893
        $_.calccheck(); //#14893
        var _5A = $k[--$j]; //#14893
        var _5C = $f($k[--$j] + _5A) % 2401; //#14894
        $k[$j++] = ~~(_5C / 49); //#14894
        $k[$j++] = _5C % 49; //#14894
        $astore($a(2)); //#14894
        $puti($_.lastrow, 0, $k[--$j]); //#14895
    } //#14895
    $_.wr1 = $f(($get($_.lastrow, 0) * 49) + $get($_.lastrow, 1)); //#14897
    $k[$j++] = $_.cr7 * $get($_.weighty, 0); //#14900
    $k[$j++] = $_.weighty; //#14900
    $_.calccheck(); //#14900
    var _5O = $k[--$j]; //#14900
    var _5U = ($f($f($k[--$j] + _5O) + ($_.wr1 * $get($_.weighty, $f(($_.r * 4) - 3))))) % 2401; //#14902
    $_.wr2 = _5U; //#14902
    $k[$j++] = ~~(_5U / 49); //#14903
    $k[$j++] = _5U % 49; //#14903
    $astore($a(2)); //#14903
    $puti($_.lastrow, 2, $k[--$j]); //#14904
    $k[$j++] = $_.cr7 * $get($_.weightx, 0); //#14907
    $k[$j++] = $_.weightx; //#14907
    $_.calccheck(); //#14907
    var _5c = $k[--$j]; //#14907
    var _5m = ($f(($f($f($k[--$j] + _5c) + ($_.wr1 * $get($_.weightx, $f(($_.r * 4) - 3))))) + ($_.wr2 * $get($_.weightx, $f(($_.r * 4) - 2))))) % 2401; //#14911
    $k[$j++] = ~~(_5m / 49); //#14911
    $k[$j++] = _5m % 49; //#14911
    $astore($a(2)); //#14911
    $puti($_.lastrow, 4, $k[--$j]); //#14912
    var _5s = $geti($_.ccs, $_.ccs.length - 8, 7); //#14915
    $k[$j++] = 0; //#14915
    for (var _5t = 0, _5u = _5s.length; _5t < _5u; _5t++) { //#14915
        var _5w = $k[--$j]; //#14915
        $k[$j++] = $f(_5w + $get(_5s, _5t)); //#14915
    } //#14915
    $put($_.ccs, $_.ccs.length - 1, $k[--$j] % 49); //#14916
    var _61 = $get($_.options, 'debugcws') !== undefined; //#14918
    if (_61) { //#14918
        $k[$j++] = 'bwipp.debugcws#14918'; //#14918
        $k[$j++] = $_.ccs; //#14918
        bwipp_raiseerror(); //#14918
    } //#14918
    if (!bwipp_code49.__15616__) { //#15616
        $_ = Object.create($_); //#15616
        $_.patterns = $a([$a(["11521132", "25112131", "14212132", "25121221", "14221222", "12412132", "23321221", "12421222", "21521221", "15112222", "15121312", "13312222", "24221311", "13321312", "11512222", "22421311", "11521312", "25112311", "14212312", "23312311", "12412312", "21512311", "16121131", "14321131", "12521131", "15212131", "15221221", "13412131", "13421221", "11612131", "16112221", "16121311", "14312221", "14321311", "12512221", "12521311", "15212311", "13412311", "11612311", "11131135", "31131133", "51131131", "21122134", "41122132", "21131224", "41131222", "11113135", "31113133", "51113131", "11122225", "31122223", "51122221", "11131315", "31131313", "51131311", "21113224", "41113222", "21122314", "41122312", "11113315", "31113313", "51113311", "12131134", "32131132", "21231133", "41231131", "22122133", "42122131", "11222134", "22131223", "42131221", "11231224", "31231222", "12113134", "32113132", "12122224", "32122222", "12131314", "32131312", "21231313", "41231311", "22113223", "42113221", "11213224", "22122313", "42122311", "11222314", "31222312", "12113314", "32113312", "21213313", "41213311", "13131133", "33131131", "22231132", "11331133", "31331131", "23122132", "12222133", "23131222", "12231223", "32231221", "21331222", "13113133", "33113131", "13122223", "33122221", "11313133", "13131313", "33131311", "11322223", "22231312", "11331313", "31331311", "23113222", "12213223", "23122312", "12222313", "32222311", "21322312", "13113313", "33113311", "22213312", "11313313", "31313311", "14131132", "23231131", "12331132", "21431131", "24122131", "13222132", "24131221", "13231222", "11422132", "22331221", "11431222", "14113132", "14122222", "12313132", "14131312", "12322222", "23231311", "12331312", "21431311", "24113221", "13213222", "24122311", "13222312", "11413222", "22322311", "11422312", "14113312", "23213311", "12313312", "21413311", "15131131", "13331131", "14222131", "14231221", "12422131", "12431221", "15113131", "15122221", "13313131", "15131311", "13322221", "11513131", "13331311", "11522221", "14213221", "14222311", "12413221", "12422311", "15113311", "13313311", "11513311", "11141134", "31141132", "21132133", "41132131", "21141223", "41141221", "11123134", "31123132", "11132224", "31132222", "11141314", "31141312", "21114133", "41114131", "21123223", "41123221", "21132313", "41132311", "11114224", "31114222", "11123314", "31123312", "21114313", "41114311", "12141133", "32141131", "21241132", "22132132", "11232133", "22141222", "11241223", "31241221", "12123133", "32123131", "12132223", "32132221", "12141313", "32141311", "21241312", "22114132", "11214133", "22123222", "11223223", "22132312", "11232313", "31232311", "12114223", "32114221", "12123313", "32123311", "21223312", "22114312", "11214313", "31214311", "13141132", "22241131", "11341132", "23132131", "12232132", "23141221", "12241222", "21341221", "13123132", "13132222", "11323132", "13141312", "11332222", "22241311", "11341312", "23114131", "12214132", "23123221", "12223222", "23132311", "12232312", "21332311", "13114222", "13123312", "11314222", "22223311", "11323312", "23114311", "12214312", "21314311", "14141131", "12341131", "13232131", "13241221", "11432131", "14123131", "14132221", "12323131", "14141311", "12332221", "12341311", "13214131", "13223221", "11414131", "13232311", "11423221", "11432311", "14114221", "14123311", "12314221", "12323311", "13214311", "11414311", "11151133", "31151131", "21142132", "21151222", "11133133", "31133131", "11142223", "31142221", "11151313", "31151311", "21124132", "21133222", "21142312", "11115133", "31115131", "11124223", "31124221", "11133313", "31133311", "21115222", "21124312", "12151132", "21251131", "22142131", "11242132", "22151221", "11251222", "12133132", "12142222", "12151312", "21251311", "22124131", "11224132", "22133221", "11233222", "22142311", "11242312", "12115132", "12124222", "12133312", "21233311", "22115221", "11215222", "22124311", "11224312", "13151131", "12242131", "12251221", "13133131", "13142221", "11333131", "13151311", "11342221", "12224131", "12233221", "12242311", "13115131", "13124221", "11315131", "13133311", "11324221", "11333311", "12215221", "12224311", "11161132", "21152131", "21161221", "11143132", "11152222", "11161312", "21134131", "21143221", "21152311", "11125132", "11134222", "11143312", "21116131", "21125221", "21134311", "12161131", "11252131", "12143131", "12152221", "12161311", "11234131", "11243221", "11252311", "12125131", "12134221", "12143311", "11216131", "11225221", "11234311", "11111236", "31111234", "51111232", "21111325", "41111323", "61111321", "11111416", "31111414", "51111412", "31211143", "51211141", "12111235", "32111233", "52111231", "21211234", "41211232", "22111324", "42111322", "11211325", "31211323", "51211321", "12111415", "32111413", "52111411", "21211414", "41211412", "12211144", "32211142", "21311143", "41311141", "13111234", "33111232", "22211233", "42211231", "11311234", "31311232", "23111323", "43111321", "12211324", "32211322", "21311323", "41311321", "13111414", "33111412", "22211413", "42211411", "11311414", "31311412", "13211143", "33211141", "22311142", "11411143", "31411141", "14111233", "34111231", "23211232", "12311233", "32311231", "21411232", "24111322", "13211323", "33211321", "22311322", "11411323", "31411321", "14111413", "34111411", "23211412", "12311413", "32311411", "21411412", "14211142", "23311141", "12411142", "21511141", "15111232", "24211231", "13311232", "22411231", "11511232", "25111321", "14211322", "23311321", "12411322", "21511321", "15111412", "24211411", "13311412", "22411411", "11511412", "15211141", "13411141", "11611141", "16111231", "14311231", "12511231", "15211321", "13411321", "11611321", "16111411", "14311411", "12511411", "21121144", "41121142", "11112145", "31112143", "51112141", "11121235", "31121233", "51121231", "21112234", "41112232", "21121324", "41121322", "11112325", "31112323", "51112321", "11121415", "31121413", "51121411", "21112414", "41112412", "22121143", "42121141", "11221144", "31221142", "12112144", "32112142", "12121234", "32121232", "21221233", "41221231", "22112233", "42112231", "11212234", "22121323", "42121321", "11221324", "31221322", "12112324", "32112322", "12121414", "32121412", "21221413", "41221411", "22112413", "42112411", "11212414", "31212412", "23121142", "12221143", "32221141", "21321142", "13112143", "33112141", "13121233", "33121231", "11312143", "22221232", "11321233", "31321231", "23112232", "12212233", "23121322", "12221323", "32221321", "21321322", "13112323", "33112321", "13121413", "33121411", "11312323", "22221412", "11321413", "31321411", "23112412", "12212413", "32212411", "21312412", "24121141", "13221142", "22321141", "11421142", "14112142", "14121232", "12312142", "23221231", "12321232", "21421231", "24112231", "13212232", "24121321", "13221322", "11412232", "22321321", "11421322", "14112322", "14121412", "12312322", "23221411", "12321412", "21421411", "24112411", "13212412", "22312411", "11412412", "14221141", "12421141", "15112141", "15121231", "13312141", "13321231", "11512141", "11521231", "14212231", "14221321", "12412231", "12421321", "15112321", "15121411", "13312321", "13321411", "11512321", "11521411", "14212411", "12412411", "21131143", "41131141", "11122144", "31122142", "11131234", "31131232", "21113143", "41113141", "21122233", "41122231", "21131323", "41131321", "11113234", "31113232", "11122324", "31122322", "11131414", "31131412", "21113323", "41113321", "21122413", "41122411", "11113414", "31113412", "22131142", "11231143", "31231141", "12122143", "32122141", "12131233", "32131231", "21231232", "22113142", "11213143", "22122232", "11222233", "22131322", "11231323", "31231321", "12113233", "32113231", "12122323", "32122321", "12131413", "32131411", "21231412", "22113322", "11213323", "22122412", "11222413", "31222411", "12113413", "32113411", "21213412", "23131141", "12231142", "21331141", "13122142", "13131232", "11322142", "22231231", "11331232", "23113141", "12213142", "23122231", "12222232", "23131321", "12231322", "21331321", "13113232", "13122322", "11313232", "13131412", "11322322", "22231411", "11331412", "23113321", "12213322", "23122411", "12222412", "21322411", "13113412", "22213411", "11313412", "13231141", "11431141", "14122141", "14131231", "12322141", "12331231", "13213141", "13222231", "11413141", "13231321", "11422231", "11431321", "14113231", "14122321", "12313231", "14131411", "12322321", "12331411", "13213321", "13222411", "11413321", "11422411", "14113411", "12313411", "21141142", "11132143", "31132141", "11141233", "31141231", "21123142", "21132232", "21141322", "11114143", "31114141", "11123233", "31123231", "11132323", "31132321", "11141413", "31141411", "21114232", "21123322", "21132412", "11114323", "31114321", "11123413", "31123411", "22141141", "11241142", "12132142", "12141232", "21241231", "22123141", "11223142", "22132231", "11232232", "22141321", "11241322", "12114142", "12123232", "12132322", "12141412", "21241411", "22114231", "11214232", "22123321", "11223322", "22132411", "11232412", "12114322", "12123412", "21223411", "12241141", "13132141", "13141231", "11332141", "11341231", "12223141", "12232231", "12241321", "13114141", "13123231", "11314141", "13132321", "11323231", "13141411", "11332321", "11341411", "12214231", "12223321", "12232411", "13114321", "13123411", "11314321", "11323411", "21151141", "11142142", "11151232", "21133141", "21142231", "21151321", "11124142", "11133232", "11142322", "11151412", "21115141", "21124231", "21133321", "21142411", "11115232", "11124322", "11133412", "11251141", "12142141", "12151231", "11233141", "11242231", "11251321", "12124141", "12133231", "12142321", "12151411", "11215141", "11224231", "11233321", "11242411", "12115231", "12124321", "12133411", "11152141", "11161231", "11134141", "11143231", "11152321", "11161411", "11116141", "11125231", "11134321", "11143411", "21111244", "41111242", "11111335", "31111333", "51111331", "21111424", "41111422", "11111515", "31111513", "51111511", "21211153", "41211151", "22111243", "42111241", "11211244", "31211242", "12111334", "32111332", "21211333", "41211331", "22111423", "42111421", "11211424", "31211422", "12111514", "32111512", "21211513", "41211511", "22211152", "11311153", "31311151", "23111242", "12211243", "32211241", "21311242", "13111333", "33111331", "22211332", "11311333", "31311331", "23111422", "12211423", "32211421", "21311422", "13111513", "33111511", "22211512", "11311513", "31311511", "23211151", "12311152", "21411151", "24111241", "13211242", "22311241", "11411242", "14111332", "23211331", "12311332", "21411331", "24111421", "13211422", "22311421", "11411422", "14111512", "23211511", "12311512", "21411511", "13311151", "11511151", "14211241", "12411241", "15111331", "13311331", "11511331", "14211421", "12411421", "15111511", "13311511", "11511511", "31121152", "21112153", "41112151", "21121243", "41121241", "11112244", "31112242", "11121334", "31121332", "21112333", "41112331", "21121423", "41121421", "11112424", "31112422", "11121514", "31121512", "21112513", "41112511", "12121153", "32121151", "21221152", "22112152", "11212153", "22121242", "11221243", "31221241", "12112243", "32112241", "12121333", "32121331", "21221332", "22112332", "11212333", "22121422", "11221423", "31221421", "12112423", "32112421", "12121513", "32121511", "21221512", "22112512", "11212513", "31212511", "13121152", "22221151", "11321152", "23112151", "12212152", "23121241", "12221242", "21321241", "13112242", "13121332", "11312242", "22221331", "11321332", "23112331", "12212332", "23121421", "12221422", "21321421", "13112422", "13121512", "11312422", "22221511", "11321512", "23112511", "12212512", "21312511", "14121151", "12321151", "13212151", "13221241", "11412151", "11421241", "14112241", "14121331", "12312241", "12321331", "13212331", "13221421", "11412331", "11421421", "14112421", "14121511", "12312421", "12321511", "13212511", "11412511", "11131153", "31131151", "21122152", "21131242", "11113153", "31113151", "11122243", "31122241", "11131333", "31131331", "21113242", "21122332", "21131422", "11113333", "31113331", "11122423", "31122421", "11131513", "31131511", "21113422", "21122512", "12131152", "21231151", "22122151", "11222152", "22131241", "11231242", "12113152", "12122242", "12131332", "21231331", "22113241", "11213242", "22122331", "11222332", "22131421", "11231422", "12113332", "12122422", "12131512", "21231511", "22113421", "11213422", "22122511", "11222512", "13131151", "11331151", "12222151", "12231241", "13113151", "13122241", "11313151", "13131331", "11322241", "11331331", "12213241", "12222331", "12231421", "13113331", "13122421", "11313331", "13131511", "11322421", "11331511", "12213421", "12222511", "11141152", "21132151", "21141241", "11123152", "11132242", "11141332", "21114151", "21123241", "21132331", "21141421", "11114242", "11123332", "11132422", "11141512", "21114331", "21123421", "21132511", "12141151", "11232151", "11241241", "12123151", "12132241", "12141331", "11214151", "11223241", "11232331", "11241421", "12114241", "12123331", "12132421", "12141511", "11214331", "11223421", "11232511", "11151151", "11133151", "11142241", "11151331", "11115151", "11124241", "11133331", "11142421", "11151511", "11111254", "31111252", "21111343", "41111341", "11111434", "31111432", "21111523", "41111521", "11111614", "31111612", "31211161", "12111253", "32111251", "21211252", "22111342", "11211343", "31211341", "12111433", "32111431", "21211432", "22111522", "11211523", "31211521", "12111613", "32111611", "21211612", "12211162", "21311161", "13111252", "22211251", "11311252", "23111341", "12211342", "21311341", "13111432", "22211431", "11311432", "23111521", "12211522", "21311521", "13111612", "22211611", "11311612", "13211161", "11411161", "14111251", "12311251", "13211341", "11411341", "14111431", "12311431", "13211521", "11411521", "14111611", "12311611", "21121162", "11112163", "31112161", "11121253", "31121251", "21112252", "21121342", "11112343", "31112341", "11121433", "31121431", "21112432", "21121522", "11112523", "31112521", "11121613", "31121611", "22121161", "11221162", "12112162", "12121252", "21221251", "22112251", "11212252", "22121341", "11221342", "12112342", "12121432", "21221431", "22112431", "11212432", "22121521", "11221522", "12112522", "12121612", "21221611", "12221161", "13112161", "13121251", "11312161", "11321251", "32121115", "52121113", "21221116", "41221114", "61221112", "22112116", "42112114", "31212115", "51212113", "13121116", "33121114", "22221115", "42221113", "11321116", "31321114", "51321112", "23112115", "43112113", "12212116", "32212114", "52212112", "21312115", "41312113", "61312111", "14121115", "34121113", "23221114", "43221112", "12321115", "32321113", "52321111", "21421114", "41421112", "24112114", "13212115", "33212113", "22312114", "42312112", "11412115", "31412113", "51412111", "15121114", "24221113", "13321114", "33321112", "22421113", "42421111", "11521114", "31521112", "25112113", "14212114", "34212112", "23312113", "43312111", "12412114", "32412112", "21512113", "41512111", "16121113", "25221112", "14321113", "34321111", "23421112", "12521113", "32521111", "15212113", "24312112", "13412113", "33412111", "22512112", "11612113", "31612111", "31131115", "51131113", "21122116", "41122114", "61122112", "31113115", "51113113", "12131116", "32131114", "52131112", "21231115", "41231113", "61231111", "22122115", "42122113", "11222116", "31222114", "51222112", "12113116", "32113114", "52113112", "21213115", "41213113", "61213111", "13131115", "33131113", "22231114", "42231112", "11331115", "31331113", "51331111", "23122114", "43122112", "12222115", "32222113", "52222111", "21322114", "41322112", "13113115", "33113113", "22213114", "42213112", "11313115", "31313113", "51313111", "14131114", "34131112", "23231113", "43231111", "12331114", "32331112", "21431113", "41431111", "24122113", "13222114", "33222112", "22322113", "42322111", "11422114", "31422112", "14113114", "34113112", "23213113", "43213111", "12313114", "32313112", "21413113", "41413111", "15131113", "24231112", "13331113", "33331111", "22431112", "25122112", "14222113", "34222111", "23322112", "12422113", "32422111", "21522112", "15113113", "24213112", "13313113", "33313111", "22413112", "11513113", "31513111", "16131112", "25231111", "14331112", "23431111", "15222112", "24322111", "13422112", "22522111", "16113112", "25213111", "14313112", "23413111", "12513112", "21613111", "11141116", "31141114", "51141112", "21132115", "41132113", "61132111", "11123116", "31123114", "51123112", "21114115", "41114113", "61114111", "12141115", "32141113", "52141111", "21241114", "41241112", "22132114", "42132112", "11232115", "31232113", "51232111", "12123115", "32123113", "52123111", "21223114", "41223112", "22114114", "42114112", "11214115", "31214113", "51214111", "13141114", "33141112", "22241113", "42241111", "11341114", "31341112", "23132113", "43132111", "12232114", "32232112", "21332113", "41332111", "13123114", "33123112", "22223113", "42223111", "11323114", "31323112", "23114113", "43114111", "12214114", "32214112", "21314113", "41314111", "14141113", "34141111", "23241112", "12341113", "32341111", "24132112", "13232113", "33232111", "22332112", "11432113", "31432111", "14123113", "34123111", "23223112", "12323113", "32323111", "21423112", "24114112", "13214113", "33214111", "22314112", "11414113", "31414111", "15141112", "24241111", "13341112", "25132111", "14232112", "23332111", "12432112", "15123112", "24223111", "13323112", "22423111", "11523112", "25114111", "14214112", "23314111", "12414112", "21514111", "16141111", "14341111", "15232111", "13432111", "16123111", "14323111", "12523111", "15214111", "13414111", "11614111", "11151115", "31151113", "51151111", "21142114", "41142112", "11133115", "31133113", "51133111", "21124114", "41124112", "11115115", "31115113", "51115111", "12151114", "32151112", "21251113", "41251111", "22142113", "42142111", "11242114", "31242112", "12133114", "32133112", "21233113", "41233111", "22124113", "42124111", "11224114", "31224112", "12115114", "32115112", "21215113", "41215111", "13151113", "33151111", "22251112", "23142112", "12242113", "32242111", "21342112", "13133113", "33133111", "22233112", "11333113", "31333111", "23124112", "12224113", "32224111", "21324112", "13115113", "33115111", "22215112", "11315113", "31315111", "14151112", "23251111", "24142111", "13242112", "22342111", "14133112", "23233111", "12333112", "21433111", "24124111", "13224112", "22324111", "11424112", "14115112", "23215111", "12315112", "21415111", "15151111", "14242111", "15133111", "13333111", "14224111", "12424111", "15115111", "13315111", "11515111", "11161114", "31161112", "21152113", "41152111", "11143114", "31143112", "21134113", "41134111", "11125114", "31125112", "21116113", "41116111", "12161113", "32161111", "22152112", "11252113", "31252111", "12143113", "32143111", "21243112", "22134112", "11234113", "31234111", "12125113", "32125111", "21225112", "22116112", "11216113", "31216111", "13161112", "23152111", "12252112", "13143112", "22243111", "11343112", "23134111", "12234112", "21334111", "13125112", "22225111", "11325112", "23116111", "12216112", "21316111", "14161111", "13252111", "14143111", "12343111", "13234111", "11434111", "14125111", "12325111", "13216111", "11416111", "31111216", "51111214", "31211125", "51211123", "32111215", "52111213", "21211216", "41211214", "61211212", "12211126", "32211124", "52211122", "21311125", "41311123", "61311121", "13111216", "33111214", "22211215", "42211213", "11311216", "31311214", "51311212", "13211125", "33211123", "22311124", "42311122", "11411125", "31411123", "51411121", "14111215", "34111213", "23211214", "43211212", "12311215", "32311213", "52311211", "21411214", "41411212", "14211124", "34211122", "23311123", "43311121", "12411124", "32411122", "21511123", "41511121", "15111214", "24211213", "13311214", "33311212", "22411213", "42411211", "11511214", "31511212", "15211123", "24311122", "13411123", "33411121", "22511122", "11611123", "31611121", "16111213", "25211212", "14311213", "34311211", "23411212", "12511213", "32511211", "21611212", "21121126", "41121124", "61121122", "31112125", "51112123", "31121215", "51121213", "21112216", "41112214", "61112212", "22121125", "42121123", "11221126", "31221124", "51221122", "12112126", "32112124", "52112122", "12121216", "32121214", "52121212", "21221215", "41221213", "61221211", "22112215", "42112213", "11212216", "31212214", "51212212", "23121124", "43121122", "12221125", "32221123", "52221121", "21321124", "41321122", "13112125", "33112123", "13121215", "33121213", "11312125", "22221214", "42221212", "11321215", "31321213", "51321211", "23112214", "43112212", "12212215", "32212213", "52212211", "21312214", "41312212", "24121123", "13221124", "33221122", "22321123", "42321121", "11421124", "31421122", "14112124", "34112122", "14121214", "34121212", "12312124", "23221213", "43221211", "12321214", "32321212", "21421213", "41421211", "24112213", "13212214", "33212212", "22312213", "42312211", "11412214", "31412212", "25121122", "14221123", "34221121", "23321122", "12421123", "32421121", "21521122", "15112123", "15121213", "13312123", "24221212", "13321213", "33321211", "11512123", "22421212", "11521213", "31521211", "25112212", "14212213", "34212211", "23312212", "12412213", "32412211", "21512212", "15221122", "24321121", "13421122", "22521121", "16112122", "16121212", "14312122", "25221211", "14321212", "12512122", "23421211", "12521212", "15212212", "24312211", "13412212", "22512211", "11612212", "21131125", "41131123", "61131121", "11122126", "31122124", "51122122", "11131216", "31131214", "51131212", "21113125", "41113123", "61113121", "21122215", "41122213", "61122211", "11113216", "31113214", "51113212", "22131124", "42131122", "11231125", "31231123", "51231121", "12122125", "32122123", "52122121", "12131215", "32131213", "52131211", "21231214", "41231212", "22113124", "42113122", "11213125", "22122214", "42122212", "11222215", "31222213", "51222211", "12113215", "32113213", "52113211", "21213214", "41213212", "23131123", "43131121", "12231124", "32231122", "21331123", "41331121", "13122124", "33122122", "13131214", "33131212", "11322124", "22231213", "42231211", "11331214", "31331212", "23113123", "43113121", "12213124", "23122213", "43122211", "12222214", "32222212", "21322213", "41322211", "13113214", "33113212", "22213213", "42213211", "11313214", "31313212", "24131122", "13231123", "33231121", "22331122", "11431123", "31431121", "14122123", "34122121", "14131213", "34131211", "12322123", "23231212", "12331213", "32331211", "21431212", "24113122", "13213123", "24122212", "13222213", "33222211", "11413123", "22322212", "11422213", "31422211", "14113213", "34113211", "23213212", "12313213", "32313211", "21413212", "25131121", "14231122", "23331121", "12431122", "15122122", "15131212", "13322122", "24231211", "13331212", "11522122", "22431211", "25113121", "14213122", "25122211", "14222212", "12413122", "23322211", "12422212", "21522211", "15113212", "24213211", "13313212", "22413211", "11513212", "15231121", "13431121", "16122121", "16131211", "14322121", "14331211", "12522121", "15213121", "15222211", "13413121", "13422211", "11613121", "16113211", "14313211", "12513211", "21141124", "41141122", "11132125", "31132123", "51132121", "11141215", "31141213", "51141211", "21123124", "41123122", "21132214", "41132212", "11114125", "31114123", "51114121", "11123215", "31123213", "51123211", "21114214", "41114212", "22141123", "42141121", "11241124", "31241122", "12132124", "32132122", "12141214", "32141212", "21241213", "41241211", "22123123", "42123121", "11223124", "22132213", "42132211", "11232214", "31232212", "12114124", "32114122", "12123214", "32123212", "21223213", "41223211", "22114213", "42114211", "11214214", "31214212", "23141122", "12241123", "32241121", "21341122", "13132123", "33132121", "13141213", "33141211", "11332123", "22241212", "11341213", "31341211", "23123122", "12223123", "23132212", "12232213", "32232211", "21332212", "13114123", "33114121", "13123213", "33123211", "11314123", "22223212", "11323213", "31323211", "23114212", "12214213", "32214211", "21314212", "24141121", "13241122", "22341121", "14132122", "14141212", "12332122", "23241211", "12341212", "24123121", "13223122", "24132211", "13232212", "11423122", "22332211", "11432212", "14114122", "14123212", "12314122", "23223211", "12323212", "21423211", "24114211", "13214212", "22314211", "11414212", "14241121", "15132121", "15141211", "13332121", "13341211", "14223121", "14232211", "12423121", "12432211", "15114121", "15123211", "13314121", "13323211", "11514121", "11523211", "14214211", "12414211", "21151123", "41151121", "11142124", "31142122", "11151214", "31151212", "21133123", "41133121", "21142213", "41142211", "11124124", "31124122", "11133214", "31133212", "21115123", "41115121", "21124213", "41124211", "11115214", "31115212", "22151122", "11251123", "31251121", "12142123", "32142121", "12151213", "32151211", "21251212", "22133122", "11233123", "22142212", "11242213", "31242211", "12124123", "32124121", "12133213", "32133211", "21233212", "22115122", "11215123", "22124212", "11224213", "31224211", "12115213", "32115211", "21215212", "23151121", "12251122", "13142122", "13151212", "11342122", "22251211", "23133121", "12233122", "23142211", "12242212", "21342211", "13124122", "13133212", "11324122", "22233211", "11333212", "23115121", "12215122", "23124211", "12224212", "21324211", "13115212", "22215211", "11315212", "13251121", "14142121", "14151211", "12342121", "13233121", "13242211", "11433121", "14124121", "14133211", "12324121", "12333211", "13215121", "13224211", "11415121", "11424211", "14115211", "12315211", "21161122", "11152123", "31152121", "11161213", "31161211", "21143122", "21152212", "11134123", "31134121", "11143213", "31143211", "21125122", "21134212", "11116123", "31116121", "11125213", "31125211", "22161121", "12152122", "12161212", "22143121", "11243122", "22152211", "11252212", "12134122", "12143212", "21243211", "22125121", "11225122", "22134211", "11234212", "12116122", "12125212", "21225211", "13152121", "13161211", "12243121", "12252211", "13134121", "13143211", "11334121", "11343211", "12225121", "12234211", "13116121", "13125211", "11316121", "11325211", "21111226", "41111224", "61111222", "31111315", "51111313", "21211135", "41211133", "61211131", "22111225", "42111223", "11211226", "31211224", "51211222", "12111316", "32111314", "52111312", "21211315", "41211313", "61211311", "22211134", "42211132", "11311135", "31311133", "51311131", "23111224", "43111222", "12211225", "32211223", "52211221", "21311224", "41311222", "13111315", "33111313", "22211314", "42211312", "11311315", "31311313", "51311311", "23211133", "43211131", "12311134", "32311132", "21411133", "41411131", "24111223", "13211224", "33211222", "22311223", "42311221", "11411224", "31411222", "14111314", "34111312", "23211313", "43211311", "12311314", "32311312", "21411313", "41411311", "24211132", "13311133", "33311131", "22411132", "11511133", "31511131", "25111222", "14211223", "34211221", "23311222", "12411223", "32411221", "21511222", "15111313", "24211312", "13311313", "33311311", "22411312", "11511313", "31511311", "25211131", "14311132", "23411131", "12511132", "21611131", "15211222", "24311221", "13411222", "22511221", "11611222", "16111312", "25211311", "14311312", "23411311", "12511312", "21611311", "31121134", "51121132", "21112135", "41112133", "61112131", "21121225", "41121223", "61121221", "11112226", "31112224", "51112222", "11121316", "31121314", "51121312", "21112315", "41112313", "61112311", "12121135", "32121133", "52121131", "21221134", "41221132", "22112134", "42112132", "11212135", "22121224", "42121222", "11221225", "31221223", "51221221", "12112225", "32112223", "52112221", "12121315", "32121313", "52121311", "21221314", "41221312", "22112314", "42112312", "11212315", "31212313", "51212311", "13121134", "33121132", "22221133", "42221131", "11321134", "31321132", "23112133", "43112131", "12212134", "23121223", "43121221", "12221224", "32221222", "21321223", "41321221", "13112224", "33112222", "13121314", "33121312", "11312224", "22221313", "42221311", "11321314", "31321312", "23112313", "43112311", "12212314", "32212312", "21312313", "41312311", "14121133", "34121131", "23221132", "12321133", "32321131", "21421132", "24112132", "13212133", "24121222", "13221223", "33221221", "11412133", "22321222", "11421223", "31421221", "14112223", "34112221", "14121313", "34121311", "12312223", "23221312", "12321313", "32321311", "21421312", "24112312", "13212313", "33212311", "22312312", "11412313", "31412311", "15121132", "24221131", "13321132", "22421131"]), $a(["22121116", "42121114", "31221115", "51221113", "32112115", "52112113", "21212116", "41212114", "61212112", "23121115", "43121113", "12221116", "32221114", "52221112", "21321115", "41321113", "61321111", "13112116", "33112114", "22212115", "42212113", "11312116", "31312114", "51312112", "24121114", "13221115", "33221113", "22321114", "42321112", "11421115", "31421113", "51421111", "14112115", "34112113", "23212114", "43212112", "12312115", "32312113", "52312111", "21412114", "41412112", "25121113", "14221114", "34221112", "23321113", "43321111", "12421114", "32421112", "21521113", "41521111", "15112114", "24212113", "13312114", "33312112", "22412113", "42412111", "11512114", "31512112", "15221113", "24321112", "13421113", "33421111", "22521112", "16112113", "25212112", "14312113", "34312111", "23412112", "12512113", "32512111", "21612112", "21131116", "41131114", "61131112", "31122115", "51122113", "21113116", "41113114", "61113112", "22131115", "42131113", "11231116", "31231114", "51231112", "12122116", "32122114", "52122112", "21222115", "41222113", "61222111", "22113115", "42113113", "11213116", "31213114", "51213112", "23131114", "43131112", "12231115", "32231113", "52231111", "21331114", "41331112", "13122115", "33122113", "22222114", "42222112", "11322115", "31322113", "51322111", "23113114", "43113112", "12213115", "32213113", "52213111", "21313114", "41313112", "24131113", "13231114", "33231112", "22331113", "42331111", "11431114", "31431112", "14122114", "34122112", "23222113", "43222111", "12322114", "32322112", "21422113", "41422111", "24113113", "13213114", "33213112", "22313113", "42313111", "11413114", "31413112", "25131112", "14231113", "34231111", "23331112", "12431113", "32431111", "15122113", "24222112", "13322113", "33322111", "22422112", "11522113", "31522111", "25113112", "14213113", "34213111", "23313112", "12413113", "32413111", "21513112", "15231112", "24331111", "13431112", "16122112", "25222111", "14322112", "23422111", "12522112", "15213112", "24313111", "13413112", "22513111", "11613112", "21141115", "41141113", "61141111", "11132116", "31132114", "51132112", "21123115", "41123113", "61123111", "11114116", "31114114", "51114112", "22141114", "42141112", "11241115", "31241113", "51241111", "12132115", "32132113", "52132111", "21232114", "41232112", "22123114", "42123112", "11223115", "31223113", "51223111", "12114115", "32114113", "52114111", "21214114", "41214112", "23141113", "43141111", "12241114", "32241112", "21341113", "41341111", "13132114", "33132112", "22232113", "42232111", "11332114", "31332112", "23123113", "43123111", "12223114", "32223112", "21323113", "41323111", "13114114", "33114112", "22214113", "42214111", "11314114", "31314112", "24141112", "13241113", "33241111", "22341112", "14132113", "34132111", "23232112", "12332113", "32332111", "21432112", "24123112", "13223113", "33223111", "22323112", "11423113", "31423111", "14114113", "34114111", "23214112", "12314113", "32314111", "21414112", "25141111", "14241112", "23341111", "15132112", "24232111", "13332112", "22432111", "25123111", "14223112", "23323111", "12423112", "21523111", "15114112", "24214111", "13314112", "22414111", "11514112", "15241111", "16132111", "14332111", "15223111", "13423111", "16114111", "14314111", "12514111", "21151114", "41151112", "11142115", "31142113", "51142111", "21133114", "41133112", "11124115", "31124113", "51124111", "21115114", "41115112", "22151113", "42151111", "11251114", "31251112", "12142114", "32142112", "21242113", "41242111", "22133113", "42133111", "11233114", "31233112", "12124114", "32124112", "21224113", "41224111", "22115113", "42115111", "11215114", "31215112", "23151112", "12251113", "32251111", "13142113", "33142111", "22242112", "11342113", "31342111", "23133112", "12233113", "32233111", "21333112", "13124113", "33124111", "22224112", "11324113", "31324111", "23115112", "12215113", "32215111", "21315112", "24151111", "13251112", "14142112", "23242111", "12342112", "24133111", "13233112", "22333111", "11433112", "14124112", "23224111", "12324112", "21424111", "24115111", "13215112", "22315111", "11415112", "14251111", "15142111", "13342111", "14233111", "12433111", "15124111", "13324111", "11524111", "14215111", "12415111", "21161113", "41161111", "11152114", "31152112", "21143113", "41143111", "11134114", "31134112", "21125113", "41125111", "11116114", "31116112", "22161112", "12152113", "32152111", "21252112", "22143112", "11243113", "31243111", "12134113", "32134111", "21234112", "22125112", "11225113", "31225111", "12116113", "32116111", "21216112", "23161111", "13152112", "22252111", "23143111", "12243112", "21343111", "13134112", "22234111", "11334112", "23125111", "12225112", "21325111", "13116112", "22216111", "11316112", "14152111", "13243111", "14134111", "12334111", "13225111", "11425111", "14116111", "12316111", "41111215", "61111213", "21211126", "41211124", "61211122", "22111216", "42111214", "31211215", "51211213", "22211125", "42211123", "11311126", "31311124", "51311122", "23111215", "43111213", "12211216", "32211214", "52211212", "21311215", "41311213", "61311211", "23211124", "43211122", "12311125", "32311123", "52311121", "21411124", "41411122", "24111214", "13211215", "33211213", "22311214", "42311212", "11411215", "31411213", "51411211", "24211123", "13311124", "33311122", "22411123", "42411121", "11511124", "31511122", "25111213", "14211214", "34211212", "23311213", "43311211", "12411214", "32411212", "21511213", "41511211", "25211122", "14311123", "34311121", "23411122", "12511123", "32511121", "21611122", "15211213", "24311212", "13411213", "33411211", "22511212", "11611213", "31611211", "31121125", "51121123", "21112126", "41112124", "61112122", "21121216", "41121214", "61121212", "31112215", "51112213", "12121126", "32121124", "52121122", "21221125", "41221123", "61221121", "22112125", "42112123", "11212126", "22121215", "42121213", "11221216", "31221214", "51221212", "12112216", "32112214", "52112212", "21212215", "41212213", "61212211", "13121125", "33121123", "22221124", "42221122", "11321125", "31321123", "51321121", "23112124", "43112122", "12212125", "23121214", "43121212", "12221215", "32221213", "52221211", "21321214", "41321212", "13112215", "33112213", "22212214", "42212212", "11312215", "31312213", "51312211", "14121124", "34121122", "23221123", "43221121", "12321124", "32321122", "21421123", "41421121", "24112123", "13212124", "24121213", "13221214", "33221212", "11412124", "22321213", "42321211", "11421214", "31421212", "14112214", "34112212", "23212213", "43212211", "12312214", "32312212", "21412213", "41412211", "15121123", "24221122", "13321123", "33321121", "22421122", "11521123", "31521121", "25112122", "14212123", "25121212", "14221213", "34221211", "12412123", "23321212", "12421213", "32421211", "21521212", "15112213", "24212212", "13312213", "33312211", "22412212", "11512213", "31512211", "16121122", "25221121", "14321122", "23421121", "12521122", "15212122", "15221212", "13412122", "24321211", "13421212", "11612122", "22521211", "16112212", "25212211", "14312212", "23412211", "12512212", "21612211", "11131126", "31131124", "51131122", "21122125", "41122123", "61122121", "21131215", "41131213", "61131211", "11113126", "31113124", "51113122", "11122216", "31122214", "51122212", "21113215", "41113213", "61113211", "12131125", "32131123", "52131121", "21231124", "41231122", "22122124", "42122122", "11222125", "22131214", "42131212", "11231215", "31231213", "51231211", "12113125", "32113123", "52113121", "12122215", "32122213", "52122211", "21222214", "41222212", "22113214", "42113212", "11213215", "31213213", "51213211", "13131124", "33131122", "22231123", "42231121", "11331124", "31331122", "23122123", "43122121", "12222124", "23131213", "43131211", "12231214", "32231212", "21331213", "41331211", "13113124", "33113122", "13122214", "33122212", "11313124", "22222213", "42222211", "11322214", "31322212", "23113213", "43113211", "12213214", "32213212", "21313213", "41313211", "14131123", "34131121", "23231122", "12331123", "32331121", "21431122", "24122122", "13222123", "24131212", "13231213", "33231211", "11422123", "22331212", "11431213", "31431211", "14113123", "34113121", "14122213", "34122211", "12313123", "23222212", "12322213", "32322211", "21422212", "24113212", "13213213", "33213211", "22313212", "11413213", "31413211", "15131122", "24231121", "13331122", "22431121", "25122121", "14222122", "25131211", "14231212", "12422122", "23331211", "12431212", "15113122", "15122212", "13313122", "24222211", "13322212", "11513122", "22422211", "11522212", "25113211", "14213212", "23313211", "12413212", "21513211", "16131121", "14331121", "15222121", "15231211", "13422121", "13431211", "16113121", "16122211", "14313121", "14322211", "12513121", "12522211", "15213211", "13413211", "11613211", "11141125", "31141123", "51141121", "21132124", "41132122", "21141214", "41141212", "11123125", "31123123", "51123121", "11132215", "31132213", "51132211", "21114124", "41114122", "21123214", "41123212", "11114215", "31114213", "51114211", "12141124", "32141122", "21241123", "41241121", "22132123", "42132121", "11232124", "22141213", "42141211", "11241214", "31241212", "12123124", "32123122", "12132214", "32132212", "21232213", "41232211", "22114123", "42114121", "11214124", "22123213", "42123211", "11223214", "31223212", "12114214", "32114212", "21214213", "41214211", "13141123", "33141121", "22241122", "11341123", "31341121", "23132122", "12232123", "23141212", "12241213", "32241211", "21341212", "13123123", "33123121", "13132213", "33132211", "11323123", "22232212", "11332213", "31332211", "23114122", "12214123", "23123212", "12223213", "32223211", "21323212", "13114213", "33114211", "22214212", "11314213", "31314211", "14141122", "23241121", "12341122", "24132121", "13232122", "24141211", "13241212", "11432122", "22341211", "14123122", "14132212", "12323122", "23232211", "12332212", "21432211", "24114121", "13214122", "24123211", "13223212", "11414122", "22323211", "11423212", "14114212", "23214211", "12314212", "21414211", "15141121", "13341121", "14232121", "14241211", "12432121", "15123121", "15132211", "13323121", "13332211", "11523121", "14214121", "14223211", "12414121", "12423211", "15114211", "13314211", "11514211", "11151124", "31151122", "21142123", "41142121", "21151213", "41151211", "11133124", "31133122", "11142214", "31142212", "21124123", "41124121", "21133213", "41133211", "11115124", "31115122", "11124214", "31124212", "21115213", "41115211", "12151123", "32151121", "21251122", "22142122", "11242123", "22151212", "11251213", "31251211", "12133123", "32133121", "12142213", "32142211", "21242212", "22124122", "11224123", "22133212", "11233213", "31233211", "12115123", "32115121", "12124213", "32124211", "21224212", "22115212", "11215213", "31215211", "13151122", "22251121", "23142121", "12242122", "23151211", "12251212", "13133122", "13142212", "11333122", "22242211", "11342212", "23124121", "12224122", "23133211", "12233212", "21333211", "13115122", "13124212", "11315122", "22224211", "11324212", "23115211", "12215212", "21315211", "14151121", "13242121", "13251211", "14133121", "14142211", "12333121", "12342211", "13224121", "13233211", "11424121", "11433211", "14115121", "14124211", "12315121", "12324211", "13215211", "11415211", "11161123", "31161121", "21152122", "21161212", "11143123", "31143121", "11152213", "31152211", "21134122", "21143212", "11125123", "31125121", "11134213", "31134211", "21116122", "21125212", "12161122", "22152121", "11252122", "22161211", "12143122", "12152212", "21252211", "22134121", "11234122", "22143211", "11243212", "12125122", "12134212", "21234211", "22116121", "11216122", "22125211", "11225212", "13161121", "12252121", "13143121", "13152211", "11343121", "12234121", "12243211", "13125121", "13134211", "11325121", "11334211", "12216121", "12225211", "31111225", "51111223", "21111316", "41111314", "61111312", "31211134", "51211132", "12111226", "32111224", "52111222", "21211225", "41211223", "61211221", "22111315", "42111313", "11211316", "31211314", "51211312", "12211135", "32211133", "52211131", "21311134", "41311132", "13111225", "33111223", "22211224", "42211222", "11311225", "31311223", "51311221", "23111314", "43111312", "12211315", "32211313", "52211311", "21311314", "41311312", "13211134", "33211132", "22311133", "42311131", "11411134", "31411132", "14111224", "34111222", "23211223", "43211221", "12311224", "32311222", "21411223", "41411221", "24111313", "13211314", "33211312", "22311313", "42311311", "11411314", "31411312", "14211133", "34211131", "23311132", "12411133", "32411131", "21511132", "15111223", "24211222", "13311223", "33311221", "22411222", "11511223", "31511221", "25111312", "14211313", "34211311", "23311312", "12411313", "32411311", "21511312", "15211132", "24311131", "13411132", "22511131", "11611132", "16111222", "25211221", "14311222", "23411221", "12511222", "21611221", "15211312", "24311311", "13411312", "22511311", "11611312", "21121135", "41121133", "61121131", "11112136", "31112134", "51112132", "11121226", "31121224", "51121222", "21112225", "41112223", "61112221", "21121315", "41121313", "61121311", "11112316", "31112314", "51112312", "22121134", "42121132", "11221135", "31221133", "51221131", "12112135", "32112133", "52112131", "12121225", "32121223", "52121221", "21221224", "41221222", "22112224", "42112222", "11212225", "22121314", "42121312", "11221315", "31221313", "51221311", "12112315", "32112313", "52112311", "21212314", "41212312", "23121133", "43121131", "12221134", "32221132", "21321133", "41321131", "13112134", "33112132", "13121224", "33121222", "11312134", "22221223", "42221221", "11321224", "31321222", "23112223", "43112221", "12212224", "23121313", "43121311", "12221314", "32221312", "21321313", "41321311", "13112314", "33112312", "22212313", "42212311", "11312314", "31312312", "24121132", "13221133", "33221131", "22321132", "11421133", "31421131", "14112133", "34112131", "14121223", "34121221", "12312133", "23221222", "12321223", "32321221", "21421222", "24112222", "13212223", "24121312", "13221313", "33221311", "11412223", "22321312", "11421313", "31421311", "14112313", "34112311", "23212312", "12312313", "32312311", "21412312", "25121131", "14221132", "23321131", "12421132", "21521131", "15112132", "15121222", "13312132", "24221221", "13321222", "11512132", "22421221", "11521222", "25112221", "14212222", "25121311", "14221312", "12412222", "23321311", "12421312", "21521311", "15112312", "24212311", "13312312", "22412311", "11512312", "15221131", "13421131", "16112131", "16121221", "14312131", "14321221", "12512131", "12521221", "15212221", "15221311", "13412221", "13421311", "11612221", "16112311", "14312311", "12512311", "21131134", "41131132", "11122135", "31122133", "51122131", "11131225", "31131223", "51131221", "21113134", "41113132", "21122224", "41122222", "21131314", "41131312", "11113225", "31113223", "51113221", "11122315", "31122313", "51122311", "21113314", "41113312", "22131133", "42131131", "11231134", "31231132", "12122134", "32122132", "12131224", "32131222", "21231223", "41231221", "22113133", "42113131", "11213134", "22122223", "42122221", "11222224", "22131313", "42131311", "11231314", "31231312", "12113224", "32113222", "12122314", "32122312", "21222313", "41222311", "22113313", "42113311", "11213314", "31213312", "23131132", "12231133", "32231131", "21331132", "13122133", "33122131", "13131223", "33131221", "11322133", "22231222", "11331223", "31331221", "23113132", "12213133", "23122222", "12222223", "23131312", "12231313", "32231311", "21331312", "13113223", "33113221", "13122313", "33122311", "11313223", "22222312", "11322313", "31322311", "23113312", "12213313", "32213311", "21313312", "24131131", "13231132", "22331131", "11431132", "14122132", "14131222", "12322132", "23231221", "12331222", "21431221", "24113131", "13213132", "24122221", "13222222", "24131311", "11413132", "13231312", "11422222", "22331311", "11431312", "14113222", "14122312", "12313222", "23222311", "12322312", "21422311", "24113311", "13213312", "22313311", "11413312", "14231131", "12431131", "15122131", "15131221", "13322131", "13331221", "11522131", "14213131", "14222221", "12413131", "14231311", "12422221", "12431311", "15113221", "15122311", "13313221", "13322311", "11513221", "11522311", "14213311", "12413311", "21141133", "41141131", "11132134", "31132132", "11141224", "31141222", "21123133", "41123131", "21132223", "41132221", "21141313", "41141311", "11114134", "31114132", "11123224", "31123222", "11132314", "31132312", "21114223", "41114221", "21123313", "41123311", "11114314", "31114312", "22141132", "11241133", "31241131", "12132133", "32132131", "12141223", "32141221", "21241222", "22123132", "11223133", "22132222", "11232223", "22141312", "11241313", "31241311", "12114133", "32114131", "12123223", "32123221", "12132313", "32132311", "21232312", "22114222", "11214223", "22123312", "11223313", "31223311", "12114313", "32114311", "21214312", "23141131", "12241132", "21341131", "13132132", "13141222", "11332132", "22241221", "11341222", "23123131", "12223132", "23132221", "12232222", "23141311", "12241312", "21341311", "13114132", "13123222", "11314132", "13132312", "11323222", "22232311", "11332312", "23114221", "12214222", "23123311", "12223312", "21323311", "13114312", "22214311", "11314312", "13241131", "14132131", "14141221", "12332131", "12341221", "13223131", "13232221", "11423131", "13241311", "11432221", "14114131", "14123221", "12314131", "14132311", "12323221", "12332311", "13214221", "13223311", "11414221", "11423311", "14114311", "12314311", "21151132", "11142133", "31142131", "11151223", "31151221", "21133132", "21142222", "21151312", "11124133", "31124131", "11133223", "31133221", "11142313", "31142311", "21115132", "21124222", "21133312", "11115223", "31115221", "11124313", "31124311", "22151131", "11251132", "12142132", "12151222", "21251221", "22133131", "11233132", "22142221", "11242222", "22151311", "11251312", "12124132", "12133222", "12142312", "21242311", "22115131", "11215132", "22124221", "11224222", "22133311", "11233312", "12115222", "12124312", "21224311", "12251131", "13142131", "13151221", "11342131", "12233131", "12242221", "12251311", "13124131", "13133221", "11324131", "13142311", "11333221", "11342311", "12215131", "12224221", "12233311", "13115221", "13124311", "11315221", "11324311", "21161131", "11152132", "11161222", "21143131", "21152221", "21161311", "11134132", "11143222", "11152312", "21125131", "21134221", "21143311", "11116132", "11125222", "11134312", "12152131", "12161221", "11243131", "11252221", "12134131", "12143221", "12152311", "11225131", "11234221", "11243311", "12116131", "12125221", "12134311", "21111235", "41111233", "61111231", "11111326", "31111324", "51111322", "21111415", "41111413", "61111411", "21211144", "41211142", "22111234", "42111232", "11211235", "31211233", "51211231", "12111325", "32111323", "52111321", "21211324", "41211322", "22111414", "42111412", "11211415", "31211413", "51211411", "22211143", "42211141", "11311144", "31311142", "23111233", "43111231", "12211234", "32211232", "21311233", "41311231", "13111324", "33111322", "22211323", "42211321", "11311324", "31311322", "23111413", "43111411", "12211414", "32211412", "21311413", "41311411", "23211142", "12311143", "32311141", "21411142", "24111232", "13211233", "33211231", "22311232", "11411233", "31411231", "14111323", "34111321", "23211322", "12311323", "32311321", "21411322", "24111412", "13211413", "33211411", "22311412", "11411413", "31411411", "24211141", "13311142", "22411141", "11511142", "25111231", "14211232", "23311231", "12411232", "21511231", "15111322", "24211321", "13311322", "22411321", "11511322", "25111411", "14211412", "23311411", "12411412", "21511411", "14311141", "12511141", "15211231", "13411231", "11611231", "16111321", "14311321", "12511321", "15211411", "13411411", "11611411", "31121143", "51121141", "21112144", "41112142", "21121234", "41121232", "11112235", "31112233", "51112231", "11121325", "31121323", "51121321", "21112324", "41112322", "21121414", "41121412", "11112415", "31112413", "51112411", "12121144", "32121142", "21221143", "41221141", "22112143", "42112141", "11212144", "22121233", "42121231", "11221234", "31221232", "12112234", "32112232", "12121324", "32121322", "21221323", "41221321", "22112323", "42112321", "11212324", "22121413", "42121411", "11221414", "31221412", "12112414", "32112412", "21212413", "41212411", "13121143", "33121141", "22221142", "11321143", "31321141", "23112142", "12212143", "23121232", "12221233", "32221231", "21321232", "13112233", "33112231", "13121323", "33121321", "11312233", "22221322", "11321323", "31321321", "23112322", "12212323", "23121412", "12221413", "32221411", "21321412", "13112413", "33112411", "22212412", "11312413", "31312411", "14121142", "23221141", "12321142", "21421141", "24112141", "13212142", "24121231", "13221232", "11412142", "22321231", "11421232", "14112232", "14121322", "12312232", "23221321", "12321322", "21421321", "24112321", "13212322", "24121411", "13221412", "11412322", "22321411", "11421412", "14112412", "23212411", "12312412", "21412411", "15121141", "13321141", "11521141", "14212141", "14221231", "12412141", "12421231", "15112231", "15121321", "13312231", "13321321", "11512231", "11521321", "14212321", "14221411", "12412321", "12421411", "15112411", "13312411", "11512411", "11131144", "31131142", "21122143", "41122141", "21131233", "41131231", "11113144", "31113142", "11122234", "31122232", "11131324", "31131322", "21113233", "41113231", "21122323", "41122321", "21131413", "41131411", "11113324", "31113322", "11122414", "31122412", "21113413", "41113411", "12131143", "32131141", "21231142", "22122142", "11222143", "22131232", "11231233", "31231231", "12113143", "32113141", "12122233", "32122231", "12131323", "32131321", "21231322", "22113232", "11213233", "22122322", "11222323", "22131412", "11231413", "31231411", "12113323", "32113321", "12122413", "32122411", "21222412", "22113412", "11213413", "31213411", "13131142", "22231141", "11331142", "23122141", "12222142", "23131231", "12231232", "21331231", "13113142", "13122232", "11313142", "13131322", "11322232", "22231321", "11331322", "23113231", "12213232", "23122321", "12222322", "23131411", "12231412", "21331411", "13113322", "13122412", "11313322", "22222411", "11322412", "23113411", "12213412", "21313411", "14131141", "12331141", "13222141", "13231231", "11422141", "11431231", "14113141", "14122231", "12313141", "14131321", "12322231", "12331321", "13213231", "13222321", "11413231", "13231411", "11422321", "11431411", "14113321", "14122411", "12313321", "12322411", "13213411", "11413411", "11141143", "31141141", "21132142", "21141232", "11123143", "31123141", "11132233", "31132231", "11141323", "31141321", "21114142", "21123232", "21132322", "21141412", "11114233", "31114231", "11123323", "31123321", "11132413", "31132411", "21114322", "21123412", "12141142", "21241141", "22132141", "11232142", "22141231", "11241232", "12123142", "12132232", "12141322", "21241321", "22114141", "11214142", "22123231", "11223232", "22132321", "11232322", "22141411", "11241412", "12114232", "12123322", "12132412", "21232411", "22114321", "11214322", "22123411", "11223412", "13141141", "11341141", "12232141", "12241231", "13123141", "13132231", "11323141", "13141321", "11332231", "11341321", "12214141", "12223231", "12232321", "12241411", "13114231", "13123321", "11314231", "13132411", "11323321", "11332411", "12214321", "12223411", "11151142", "21142141", "21151231", "11133142", "11142232", "11151322", "21124141", "21133231", "21142321", "21151411", "11115142", "11124232", "11133322", "11142412", "21115231", "21124321", "21133411", "12151141", "11242141", "11251231", "12133141", "12142231", "12151321", "11224141", "11233231", "11242321", "11251411", "12115141", "12124231", "12133321", "12142411", "11215231", "11224321", "11233411", "11161141", "11143141", "11152231", "11161321", "11125141", "11134231", "11143321", "11152411", "11111245", "31111243", "51111241", "21111334", "41111332", "11111425", "31111423", "51111421", "21111514", "41111512", "31211152", "12111244", "32111242", "21211243", "41211241", "22111333", "42111331", "11211334", "31211332", "12111424", "32111422", "21211423", "41211421", "22111513", "42111511", "11211514", "31211512", "12211153", "32211151", "21311152", "13111243", "33111241", "22211242", "11311243", "31311241", "23111332", "12211333", "32211331", "21311332", "13111423", "33111421", "22211422", "11311423", "31311421", "23111512", "12211513", "32211511", "21311512", "13211152", "22311151", "11411152", "14111242", "23211241", "12311242", "21411241", "24111331", "13211332", "22311331", "11411332", "14111422", "23211421", "12311422", "21411421", "24111511", "13211512", "22311511", "11411512", "14211151", "12411151", "15111241", "13311241", "11511241", "14211331", "12411331", "15111421", "13311421", "11511421", "14211511", "12411511", "21121153", "41121151", "11112154", "31112152", "11121244", "31121242", "21112243", "41112241", "21121333", "41121331", "11112334", "31112332", "11121424", "31121422", "21112423", "41112421", "21121513", "41121511", "11112514", "31112512", "22121152", "11221153", "31221151", "12112153", "32112151", "12121243", "32121241", "21221242", "22112242", "11212243", "22121332", "11221333", "31221331", "12112333", "32112331", "12121423", "32121421", "21221422", "22112422", "11212423", "22121512", "11221513", "31221511", "12112513", "32112511", "21212512", "23121151", "12221152", "21321151", "13112152", "13121242", "11312152", "22221241", "11321242", "23112241", "12212242", "23121331", "12221332", "21321331", "13112332", "13121422", "11312332", "22221421", "11321422", "23112421", "12212422", "23121511", "12221512", "21321511", "13112512", "22212511", "11312512", "13221151", "11421151", "14112151", "14121241", "12312151", "12321241", "13212241", "13221331", "11412241", "11421331", "14112331", "14121421", "12312331", "12321421", "13212421", "13221511", "11412421", "11421511", "14112511", "12312511", "21131152", "11122153", "31122151", "11131243", "31131241", "21113152", "21122242", "21131332", "11113243", "31113241", "11122333", "31122331", "11131423", "31131421", "21113332", "21122422", "21131512", "11113423", "31113421", "11122513", "31122511", "22131151", "11231152", "12122152", "12131242", "21231241", "22113151", "11213152", "22122241", "11222242", "22131331", "11231332", "12113242", "12122332", "12131422", "21231421", "22113331", "11213332", "22122421", "11222422", "22131511", "11231512", "12113422", "12122512", "21222511", "12231151", "13122151", "13131241", "11322151", "11331241", "12213151", "12222241", "12231331", "13113241", "13122331", "11313241", "13131421", "11322331", "11331421", "12213331", "12222421", "12231511", "13113421", "13122511", "11313421", "11322511", "21141151", "11132152", "11141242", "21123151", "21132241", "21141331", "11114152", "11123242", "11132332", "11141422", "21114241", "21123331", "21132421", "21141511", "11114332", "11123422", "11132512", "11241151", "12132151", "12141241", "11223151", "11232241", "11241331", "12114151", "12123241", "12132331", "12141421", "11214241", "11223331", "11232421", "11241511", "12114331", "12123421", "12132511", "11142151", "11151241", "11124151", "11133241", "11142331", "11151421", "11115241", "11124331", "11133421", "11142511", "21111253", "41111251", "11111344", "31111342", "21111433", "41111431", "11111524", "31111522", "21111613", "41111611", "21211162", "22111252", "11211253", "31211251", "12111343", "32111341", "21211342", "22111432", "11211433", "31211431", "12111523", "32111521", "21211522", "22111612", "11211613", "31211611", "22211161", "11311162", "23111251", "12211252", "21311251", "13111342", "22211341", "11311342", "23111431", "12211432", "21311431", "13111522", "22211521", "11311522", "23111611", "12211612", "21311611", "12311161", "13211251", "11411251", "14111341", "12311341", "13211431", "11411431", "14111521", "12311521", "13211611", "11411611", "31121161", "21112162", "21121252", "11112253", "31112251", "11121343", "31121341", "21112342", "21121432", "11112433", "31112431", "11121523", "31121521", "21112522", "21121612", "12121162", "21221161", "22112161", "11212162", "22121251", "11221252", "12112252", "12121342", "21221341", "22112341", "11212342", "22121431", "11221432", "12112432", "12121522", "21221521", "22112521", "11212522", "22121611", "11221612", "13121161", "11321161", "12212161", "12221251", "13112251", "13121341", "11312251", "11321341", "12212341", "12221431", "13112431", "13121521", "11312431", "11321521", "12212521", "12221611", "11131162", "21122161", "21131251", "11113162"])]); //#15611
        $_.parity = $a(["1001", "0101", "1100", "0011", "1010", "0110", "1111", "0000"]); //#15615
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code49.$ctx[id] = $_[id]); //#15615
        bwipp_code49.__15616__ = 1; //#15615
        $_ = Object.getPrototypeOf($_); //#15615
    } //#15615
    $_.rowbits = $a($_.r); //#15619
    for (var _6C = 0, _6B = $f($_.r - 1); _6C <= _6B; _6C += 1) { //#15639
        $_.i = _6C; //#15621
        $k[$j++] = 'p'; //#15622
        if ($_.i != $f($_.r - 1)) { //#15622
            $k[$j++] = $get($_.parity, $_.i); //#15622
        } else { //#15622
            $k[$j++] = "0000"; //#15622
        } //#15622
        var _6I = $k[--$j]; //#15622
        $_[$k[--$j]] = _6I; //#15622
        $_.ccrow = $geti($_.ccs, $_.i * 8, 8); //#15623
        $k[$j++] = Infinity; //#15625
        for (var _6N = 0; _6N <= 7; _6N += 2) { //#15625
            $aload($geti($_.ccrow, _6N, 2)); //#15625
            var _6Q = $k[--$j]; //#15625
            var _6R = $k[--$j]; //#15625
            $k[$j++] = $f(_6Q + (_6R * 49)); //#15625
        } //#15625
        $_.scrow = $a(); //#15625
        $k[$j++] = Infinity; //#15633
        $k[$j++] = 10; //#15632
        $k[$j++] = 1; //#15632
        $k[$j++] = 1; //#15632
        for (var _6T = 0; _6T <= 3; _6T += 1) { //#15632
            $_.j = _6T; //#15630
            $forall($get($get($_.patterns, $f($get($_.p, $_.j) - 48)), $get($_.scrow, $_.j)), function() { //#15631
                var _6d = $k[--$j]; //#15631
                $k[$j++] = $f(_6d - 48); //#15631
            }); //#15631
        } //#15631
        $k[$j++] = 4; //#15633
        $k[$j++] = 1; //#15633
        $_.sbs = $a(); //#15633
        $k[$j++] = Infinity; //#15635
        var _6f = $_.sbs; //#15636
        $k[$j++] = 1; //#15636
        for (var _6g = 0, _6h = _6f.length; _6g < _6h; _6g++) { //#15636
            var _6j = $k[--$j]; //#15636
            var _6k = (_6j == 0) ? 1 : 0; //#15636
            $k[$j++] = _6j; //#15636
            for (var _6l = 0, _6m = $get(_6f, _6g); _6l < _6m; _6l++) { //#15636
                $k[$j++] = _6k //#15636
            } //#15636
        } //#15636
        $astore($a($counttomark() - 1)); //#15637
        var _6p = $k[--$j]; //#15637
        var _6q = $k[--$j]; //#15637
        $k[$j++] = _6p; //#15637
        $k[$j++] = _6q; //#15637
        $j--; //#15637
        var _6r = $k[--$j]; //#15637
        var _6s = $k[--$j]; //#15637
        $k[$j++] = _6r; //#15637
        $k[$j++] = _6s; //#15637
        $j--; //#15637
        $put($_.rowbits, $_.i, $k[--$j]); //#15638
    } //#15638
    $k[$j++] = Infinity; //#15650
    for (var _6x = 0, _6y = 81 * $_.sepheight; _6x < _6y; _6x++) { //#15643
        $k[$j++] = 1; //#15643
    } //#15643
    for (var _71 = 0, _70 = $f($_.r - 2); _71 <= _70; _71 += 1) { //#15648
        $_.i = _71; //#15645
        for (var _73 = 0, _74 = $_.rowheight; _73 < _74; _73++) { //#15646
            $aload($get($_.rowbits, $_.i)); //#15646
        } //#15646
        for (var _79 = 0, _7A = $_.sepheight; _79 < _7A; _79++) { //#15647
            for (var _7B = 0, _7C = 10; _7B < _7C; _7B++) { //#15647
                $k[$j++] = 0; //#15647
            } //#15647
            for (var _7D = 0, _7E = 70; _7D < _7E; _7D++) { //#15647
                $k[$j++] = 1; //#15647
            } //#15647
            $k[$j++] = 0; //#15647
        } //#15647
    } //#15647
    for (var _7G = 0, _7H = $_.rowheight; _7G < _7H; _7G++) { //#15649
        $aload($get($_.rowbits, $f($_.r - 1))); //#15649
    } //#15649
    for (var _7M = 0, _7N = 81 * $_.sepheight; _7M < _7N; _7M++) { //#15650
        $k[$j++] = 1; //#15650
    } //#15650
    $_.pixs = $a(); //#15650
    var _7T = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $_.pixs],
        ["pixx", 81],
        ["pixy", ~~($_.pixs.length / 81)],
        ["height", (~~($_.pixs.length / 81)) / 72],
        ["width", 81 / 72],
        ["opt", $_.options]
    ]); //#15661
    $k[$j++] = _7T; //#15664
    if (!$_.dontdraw) { //#15664
        bwipp_renmatrix(); //#15664
    } //#15664
    $_ = Object.getPrototypeOf($_); //#15666
    $_ = Object.getPrototypeOf($_); //#15668
}

function bwipp_flattermarken() {
    $_ = Object.create($_); //#15960
    $_.dontdraw = false; //#15963
    $_.includetext = false; //#15964
    $_.textfont = "OCR-B"; //#15965
    $_.textsize = 10; //#15966
    $_.textyoffset = -8; //#15967
    $_.height = 0.3; //#15968
    $k[$j++] = $_; //#15970
    bwipp_processoptions(); //#15970
    $_.options = $k[--$j]; //#15970
    $_.barcode = $k[--$j]; //#15971
    bwipp_loadctx(bwipp_flattermarken) //#15973
    $forall($_.barcode, function() { //#15980
        var _3 = $k[--$j]; //#15977
        if ((_3 < 48) || (_3 > 57)) { //#15979
            $k[$j++] = 'bwipp.flattermarkenBadCharacter#15978'; //#15978
            $k[$j++] = "Flattermarken must contain only digits"; //#15978
            bwipp_raiseerror(); //#15978
        } //#15978
    }); //#15978
    if (!bwipp_flattermarken.__15991__) { //#15991
        $_ = Object.create($_); //#15991
        $_.encs = $a(["0018", "0117", "0216", "0315", "0414", "0513", "0612", "0711", "0810", "0900"]); //#15987
        $_.barchars = "1234567890"; //#15990
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_flattermarken.$ctx[id] = $_[id]); //#15990
        bwipp_flattermarken.__15991__ = 1; //#15990
        $_ = Object.getPrototypeOf($_); //#15990
    } //#15990
    $_.barlen = $_.barcode.length; //#15993
    $_.sbs = $s($_.barlen * 4); //#15995
    $_.txt = $a($_.barlen); //#15996
    for (var _D = 0, _C = $_.barlen - 1; _D <= _C; _D += 1) { //#16008
        $_.i = _D; //#15999
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#16001
        $j--; //#16002
        $_.indx = $k[--$j].length; //#16003
        $j -= 2; //#16004
        $_.enc = $get($_.encs, $_.indx); //#16005
        $puti($_.sbs, $_.i * 4, $_.enc); //#16006
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), $_.i * 9, $_.textyoffset, $_.textfont, $_.textsize])); //#16007
    } //#16007
    $k[$j++] = Infinity; //#16017
    $k[$j++] = Infinity; //#16013
    var _Z = $_.sbs; //#16013
    for (var _a = 0, _b = _Z.length; _a < _b; _a++) { //#16013
        $k[$j++] = $get(_Z, _a) - 48; //#16013
    } //#16013
    var _d = $a(); //#16013
    $k[$j++] = Infinity; //#16014
    for (var _f = 0, _g = ~~(($_.sbs.length + 1) / 2); _f < _g; _f++) { //#16014
        $k[$j++] = $_.height; //#16014
    } //#16014
    var _i = $a(); //#16014
    $k[$j++] = Infinity; //#16015
    for (var _k = 0, _l = ~~(($_.sbs.length + 1) / 2); _k < _l; _k++) { //#16015
        $k[$j++] = 0; //#16015
    } //#16015
    var _m = $a(); //#16015
    $k[$j++] = 'ren'; //#16017
    $k[$j++] = bwipp_renlinear; //#16017
    $k[$j++] = 'sbs'; //#16017
    $k[$j++] = _d; //#16017
    $k[$j++] = 'bhs'; //#16017
    $k[$j++] = _i; //#16017
    $k[$j++] = 'bbs'; //#16017
    $k[$j++] = _m; //#16017
    $k[$j++] = 'txt'; //#16017
    $k[$j++] = $_.txt; //#16017
    $k[$j++] = 'opt'; //#16017
    $k[$j++] = $_.options; //#16017
    var _p = $d(); //#16017
    $k[$j++] = _p; //#16020
    if (!$_.dontdraw) { //#16020
        bwipp_renlinear(); //#16020
    } //#16020
    $_ = Object.getPrototypeOf($_); //#16022
    $_ = Object.getPrototypeOf($_); //#16024
}

function bwipp_raw() {
    $_ = Object.create($_); //#16052
    $_.dontdraw = false; //#16055
    $_.height = 1; //#16056
    $k[$j++] = $_; //#16058
    bwipp_processoptions(); //#16058
    $_.options = $k[--$j]; //#16058
    $_.barcode = $k[--$j]; //#16059
    $forall($_.barcode, function() { //#16066
        var _3 = $k[--$j]; //#16063
        if ((_3 < 49) || (_3 > 57)) { //#16065
            $k[$j++] = 'bwipp.rawBadCharacter#16064'; //#16064
            $k[$j++] = "Raw must contain only digits 1 to 9"; //#16064
            bwipp_raiseerror(); //#16064
        } //#16064
    }); //#16064
    $k[$j++] = Infinity; //#16074
    $k[$j++] = Infinity; //#16071
    $forall($_.barcode, function() { //#16071
        var _5 = $k[--$j]; //#16071
        $k[$j++] = $f(_5 - 48); //#16071
    }); //#16071
    var _6 = $a(); //#16071
    $k[$j++] = Infinity; //#16072
    for (var _8 = 0, _9 = ~~(($_.barcode.length + 1) / 2); _8 < _9; _8++) { //#16072
        $k[$j++] = $_.height; //#16072
    } //#16072
    var _B = $a(); //#16072
    $k[$j++] = Infinity; //#16073
    for (var _D = 0, _E = ~~(($_.barcode.length + 1) / 2); _D < _E; _D++) { //#16073
        $k[$j++] = 0; //#16073
    } //#16073
    var _F = $a(); //#16073
    $k[$j++] = 'ren'; //#16074
    $k[$j++] = bwipp_renlinear; //#16074
    $k[$j++] = 'sbs'; //#16074
    $k[$j++] = _6; //#16074
    $k[$j++] = 'bhs'; //#16074
    $k[$j++] = _B; //#16074
    $k[$j++] = 'bbs'; //#16074
    $k[$j++] = _F; //#16074
    $k[$j++] = 'opt'; //#16074
    $k[$j++] = $_.options; //#16074
    var _H = $d(); //#16074
    $k[$j++] = _H; //#16077
    if (!$_.dontdraw) { //#16077
        bwipp_renlinear(); //#16077
    } //#16077
    $_ = Object.getPrototypeOf($_); //#16079
}

function bwipp_daft() {
    $_ = Object.create($_); //#16107
    $_.dontdraw = false; //#16110
    $_.height = 0.175; //#16111
    $k[$j++] = $_; //#16113
    bwipp_processoptions(); //#16113
    $_.options = $k[--$j]; //#16113
    $_.barcode = $k[--$j]; //#16114
    $forall($_.barcode, function() { //#16120
        var _3 = $k[--$j]; //#16117
        if ((_3 != 68) && ((_3 != 65) && ((_3 != 70) && (_3 != 84)))) { //#16119
            $k[$j++] = 'bwipp.daftBadCharacter#16118'; //#16118
            $k[$j++] = "DAFT must contain only characters D, A, F and T"; //#16118
            bwipp_raiseerror(); //#16118
        } //#16118
    }); //#16118
    $_.barlen = $_.barcode.length; //#16122
    $_.bbs = $a($_.barlen); //#16124
    $_.bhs = $a($_.barlen); //#16125
    for (var _B = 0, _A = $_.barlen - 1; _B <= _A; _B += 1) { //#16145
        $_.i = _B; //#16127
        $_.enc = $geti($_.barcode, $_.i, 1); //#16128
        if ($eq($_.enc, "D")) { //#16132
            $put($_.bbs, $_.i, (0 * $_.height) / 8); //#16130
            $put($_.bhs, $_.i, (5 * $_.height) / 8); //#16131
        } //#16131
        if ($eq($_.enc, "A")) { //#16136
            $put($_.bbs, $_.i, (3 * $_.height) / 8); //#16134
            $put($_.bhs, $_.i, (5 * $_.height) / 8); //#16135
        } //#16135
        if ($eq($_.enc, "F")) { //#16140
            $put($_.bbs, $_.i, (0 * $_.height) / 8); //#16138
            $put($_.bhs, $_.i, (8 * $_.height) / 8); //#16139
        } //#16139
        if ($eq($_.enc, "T")) { //#16144
            $put($_.bbs, $_.i, (3 * $_.height) / 8); //#16142
            $put($_.bhs, $_.i, (2 * $_.height) / 8); //#16143
        } //#16143
    } //#16143
    $k[$j++] = Infinity; //#16153
    var _h = $_.bbs; //#16150
    var _i = $_.bhs; //#16151
    $k[$j++] = Infinity; //#16152
    for (var _k = 0, _l = $_.bhs.length - 1; _k < _l; _k++) { //#16152
        $k[$j++] = 1.44; //#16152
        $k[$j++] = 1.872; //#16152
    } //#16152
    $k[$j++] = 1.44; //#16152
    var _m = $a(); //#16152
    $k[$j++] = 'ren'; //#16153
    $k[$j++] = bwipp_renlinear; //#16153
    $k[$j++] = 'bbs'; //#16153
    $k[$j++] = _h; //#16153
    $k[$j++] = 'bhs'; //#16153
    $k[$j++] = _i; //#16153
    $k[$j++] = 'sbs'; //#16153
    $k[$j++] = _m; //#16153
    $k[$j++] = 'opt'; //#16153
    $k[$j++] = $_.options; //#16153
    var _o = $d(); //#16153
    $k[$j++] = _o; //#16156
    if (!$_.dontdraw) { //#16156
        bwipp_renlinear(); //#16156
    } //#16156
    $_ = Object.getPrototypeOf($_); //#16158
}

function bwipp_symbol() {
    $_ = Object.create($_); //#16186
    $_.dontdraw = false; //#16189
    $k[$j++] = $_; //#16191
    bwipp_processoptions(); //#16191
    $_.options = $k[--$j]; //#16191
    $_.barcode = $k[--$j]; //#16192
    var _H = new Map([
        ["fima", function() {
            $_.sbs = $a([2.25, 2.25, 2.25, 11.25, 2.25, 11.25, 2.25, 2.25, 2.25]); //#16196
            $_.bhs = $a([0.625, 0.625, 0.625, 0.625, 0.625]); //#16197
            $_.bbs = $a([0, 0, 0, 0, 0]); //#16198
        }],
        ["fimb", function() {
            $_.sbs = $a([2.25, 6.75, 2.25, 2.25, 2.25, 6.25, 2.25, 2.25, 2.25, 6.75, 2.25]); //#16201
            $_.bhs = $a([0.625, 0.625, 0.625, 0.625, 0.625, 0.625]); //#16202
            $_.bbs = $a([0, 0, 0, 0, 0, 0]); //#16203
        }],
        ["fimc", function() {
            $_.sbs = $a([2.25, 2.25, 2.25, 6.75, 2.25, 6.75, 2.25, 6.75, 2.25, 2.25, 2.25]); //#16206
            $_.bhs = $a([0.625, 0.625, 0.625, 0.625, 0.625, 0.625]); //#16207
            $_.bbs = $a([0, 0, 0, 0, 0, 0]); //#16208
        }],
        ["fimd", function() {
            $_.sbs = $a([2.25, 2.25, 2.25, 2.25, 2.25, 6.75, 2.25, 6.75, 2.25, 2.25, 2.25, 2.25, 2.25]); //#16211
            $_.bhs = $a([0.625, 0.625, 0.625, 0.625, 0.625, 0.625, 0.625]); //#16212
            $_.bbs = $a([0, 0, 0, 0, 0, 0, 0]); //#16213
        }],
        ["fime", function() {
            $_.sbs = $a([2.25, 6.75, 2.25, 15.75, 2.25, 6.75, 2.25]); //#16216
            $_.bhs = $a([0.625, 0.625, 0.625, 0.625, 0.625, 0.625, 0.625]); //#16217
            $_.bbs = $a([0, 0, 0, 0, 0, 0, 0]); //#16218
        }]
    ]); //#16218
    $_.symbols = _H; //#16220
    var _K = $get($_.symbols, $_.barcode) !== undefined; //#16223
    if (!_K) { //#16225
        $k[$j++] = 'bwipp.symbolUnknownSymbol#16224'; //#16224
        $k[$j++] = "Unknown symbol name provided"; //#16224
        bwipp_raiseerror(); //#16224
    } //#16224
    if ($get($_.symbols, $_.barcode)() === true) {
        return true;
    } //#16227
    var _S = new Map([
        ["ren", bwipp_renlinear],
        ["sbs", $_.sbs],
        ["bhs", $_.bhs],
        ["bbs", $_.bbs],
        ["opt", $_.options]
    ]); //#16235
    $k[$j++] = _S; //#16238
    if (!$_.dontdraw) { //#16238
        bwipp_renlinear(); //#16238
    } //#16238
    $_ = Object.getPrototypeOf($_); //#16240
}

function bwipp_pdf417() {
    $_ = Object.create($_); //#16271
    $_.dontdraw = false; //#16274
    $_.compact = false; //#16275
    $_.eclevel = -1; //#16276
    $_.columns = 0; //#16277
    $_.rows = 0; //#16278
    $_.rowmult = 3; //#16279
    $_.ccc = false; //#16280
    $_.raw = false; //#16281
    $_.parse = false; //#16282
    $_.parsefnc = false; //#16283
    $k[$j++] = $_; //#16285
    bwipp_processoptions(); //#16285
    $_.options = $k[--$j]; //#16285
    $_.barcode = $k[--$j]; //#16286
    if ($eq($_.barcode, "")) { //#16290
        $k[$j++] = 'bwipp.pdf417emptyData#16289'; //#16289
        $k[$j++] = "The data must not be empty"; //#16289
        bwipp_raiseerror(); //#16289
    } //#16289
    if (($_.eclevel != -1) && (($_.eclevel < 0) || ($_.eclevel > 8))) { //#16294
        $k[$j++] = 'bwipp.pdf417InvalidErrorCorrectionLevel#16293'; //#16293
        $k[$j++] = "Valid error correction levels are 0 to 8"; //#16293
        bwipp_raiseerror(); //#16293
    } //#16293
    if ($_.ccc && $_.raw) { //#16298
        $k[$j++] = 'bwipp.pdf417cccAndRaw#16297'; //#16297
        $k[$j++] = "Cannot combine ccc and raw"; //#16297
        bwipp_raiseerror(); //#16297
    } //#16297
    if ($_.ccc && $_.compact) { //#16302
        $k[$j++] = 'bwipp.pdf417cccAndCompact#16301'; //#16301
        $k[$j++] = "Cannot combine ccc and compact"; //#16301
        bwipp_raiseerror(); //#16301
    } //#16301
    if (($_.rows != 0) && (($_.rows < 3) || ($_.rows > 90))) { //#16306
        $k[$j++] = 'bwipp.pdf417invalidRows#16305'; //#16305
        $k[$j++] = "There must be between 3 and 90 rows"; //#16305
        bwipp_raiseerror(); //#16305
    } //#16305
    if (($_.columns != 0) && (($_.columns < 1) || ($_.columns > 30))) { //#16310
        $k[$j++] = 'bwipp.pdf417invalidColumns#16309'; //#16309
        $k[$j++] = "There must be between 1 and 30 columns"; //#16309
        bwipp_raiseerror(); //#16309
    } //#16309
    if ($_.rowmult <= 0) { //#16314
        $k[$j++] = 'bwipp.pdf417badRowMult#16313'; //#16313
        $k[$j++] = "The row multiplier must be greater than zero"; //#16313
        bwipp_raiseerror(); //#16313
    } //#16313
    bwipp_loadctx(bwipp_pdf417) //#16316
    if (!bwipp_pdf417.__16407__) { //#16407
        $_ = Object.create($_); //#16407
        $_.T = 0; //#16320
        $_.N = 1; //#16320
        $_.B = 2; //#16320
        $_.A = 0; //#16321
        $_.L = 1; //#16321
        $_.M = 2; //#16321
        $_.P = 3; //#16321
        $_.tl = -1; //#16324
        $_.nl = -2; //#16324
        $_.bl = -3; //#16324
        $_.bl6 = -4; //#16324
        $_.bs = -5; //#16324
        $_.al = -6; //#16327
        $_.ll = -7; //#16327
        $_.ml = -8; //#16327
        $_.pl = -9; //#16327
        $_.as = -10; //#16327
        $_.ps = -11; //#16327
        $_.charmaps = $a([$a(["A", "a", "0", ";"]), $a(["B", "b", "1", "<"]), $a(["C", "c", "2", ">"]), $a(["D", "d", "3", "@"]), $a(["E", "e", "4", "["]), $a(["F", "f", "5", 92]), $a(["G", "g", "6", "]"]), $a(["H", "h", "7", "_"]), $a(["I", "i", "8", "`"]), $a(["J", "j", "9", "~"]), $a(["K", "k", "&", "!"]), $a(["L", "l", 13, 13]), $a(["M", "m", 9, 9]), $a(["N", "n", ",", ","]), $a(["O", "o", ":", ":"]), $a(["P", "p", "#", 10]), $a(["Q", "q", "-", "-"]), $a(["R", "r", ".", "."]), $a(["S", "s", "$", "$"]), $a(["T", "t", "/", "/"]), $a(["U", "u", "+", "\""]), $a(["V", "v", "%", "|"]), $a(["W", "w", "*", "*"]), $a(["X", "x", "=", 40]), $a(["Y", "y", "^", 41]), $a(["Z", "z", $_.pl, "?"]), $a([" ", " ", " ", "{"]), $a([$_.ll, $_.as, $_.ll, "}"]), $a([$_.ml, $_.ml, $_.al, "'"]), $a([$_.ps, $_.ps, $_.ps, $_.al])]); //#16362
        $_.charvals = $a([new Map, new Map, new Map, new Map]); //#16365
        $_.alltext = new Map; //#16366
        for (var _10 = 0, _z = $_.charmaps.length - 1; _10 <= _z; _10 += 1) { //#16376
            $_.i = _10; //#16368
            $_.encs = $get($_.charmaps, $_.i); //#16369
            for (var _14 = 0; _14 <= 3; _14 += 1) { //#16375
                $_.j = _14; //#16371
                var _17 = $get($_.encs, $_.j); //#16372
                $k[$j++] = _17; //#16372
                if ($eq($type(_17), 'stringtype')) { //#16372
                    var _1A = $get($k[--$j], 0); //#16372
                    $k[$j++] = _1A; //#16372
                } //#16372
                var _1B = $k[--$j]; //#16373
                $put($get($_.charvals, $_.j), _1B, $_.i); //#16373
                $put($_.alltext, _1B, -1); //#16374
            } //#16374
        } //#16374
        $_.e = 10000; //#16378
        $_.latlen = $a([$a([0, 1, 1, 2]), $a([2, 0, 1, 2]), $a([1, 1, 0, 1]), $a([1, 2, 2, 0])]); //#16386
        $_.latseq = $a([$a([$a([]), $a([$_.ll]), $a([$_.ml]), $a([$_.ml, $_.pl])]), $a([$a([$_.ml, $_.al]), $a([]), $a([$_.ml]), $a([$_.ml, $_.pl])]), $a([$a([$_.al]), $a([$_.ll]), $a([]), $a([$_.pl])]), $a([$a([$_.al]), $a([$_.al, $_.ll]), $a([$_.al, $_.ml]), $a([])])]); //#16394
        $_.shftlen = $a([$a([$_.e, $_.e, $_.e, 1]), $a([1, $_.e, $_.e, 1]), $a([$_.e, $_.e, $_.e, 1]), $a([$_.e, $_.e, $_.e, $_.e])]); //#16402
        $k[$j++] = Infinity; //#16405
        $k[$j++] = $_.tl; //#16405
        $k[$j++] = 900; //#16405
        $k[$j++] = $_.bl; //#16405
        $k[$j++] = 901; //#16405
        $k[$j++] = $_.bl6; //#16405
        $k[$j++] = 924; //#16405
        $k[$j++] = $_.nl; //#16405
        $k[$j++] = 902; //#16405
        $k[$j++] = $_.bs; //#16405
        $k[$j++] = 913; //#16405
        $_.latchcws = $d(); //#16406
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_pdf417.$ctx[id] = $_[id]); //#16406
        bwipp_pdf417.__16407__ = 1; //#16406
        $_ = Object.getPrototypeOf($_); //#16406
    } //#16406
    if ($_.raw) { //#16428
        $_.datcws = $a($_.barcode.length); //#16411
        $_.i = 0; //#16412
        $_.j = 0; //#16412
        for (;;) { //#16423
            if ($_.i >= ($_.barcode.length - 3)) { //#16414
                break; //#16414
            } //#16414
            if ($get($_.barcode, $_.i) != 94) { //#16415
                break; //#16415
            } //#16415
            var _2W = $geti($_.barcode, $_.i + 1, 3); //#16416
            $k[$j++] = _2W; //#16418
            $k[$j++] = false; //#16418
            for (var _2X = 0, _2Y = _2W.length; _2X < _2Y; _2X++) { //#16418
                var _2Z = $get(_2W, _2X); //#16418
                if ((_2Z < 48) || (_2Z > 57)) { //#16417
                    $j--; //#16417
                    $k[$j++] = true; //#16417
                } //#16417
            } //#16417
            if ($k[--$j]) { //#16418
                $j--; //#16418
                break; //#16418
            } //#16418
            $_.cw = $cvi($k[--$j]); //#16419
            $put($_.datcws, $_.j, $_.cw); //#16420
            $_.i = $_.i + 4; //#16421
            $_.j = $_.j + 1; //#16422
        } //#16422
        if ($_.i != $_.barcode.length) { //#16426
            $k[$j++] = 'bwipp.pdf417badRawFormat#16425'; //#16425
            $k[$j++] = "raw data must be formatted as ^NNN"; //#16425
            bwipp_raiseerror(); //#16425
        } //#16425
        $_.datcws = $geti($_.datcws, 0, $_.j); //#16427
    } //#16427
    $_.encb = function() {
        $_.in = $k[--$j]; //#16431
        $_.inlen = $_.in.length; //#16432
        $_.out = $a(((~~($_.inlen / 6)) * 5) + ($_.inlen % 6)); //#16433
        for (var _2t = 0, _2s = (~~($_.inlen / 6)) - 1; _2t <= _2s; _2t += 1) { //#16456
            $_.k = _2t; //#16435
            $k[$j++] = Infinity; //#16436
            $aload($geti($_.in, $_.k * 6, 3)); //#16436
            $_.msbs = $a(); //#16436
            $k[$j++] = Infinity; //#16439
            $aload($_.msbs); //#16438
            var _2z = $k[--$j]; //#16438
            var _30 = $k[--$j]; //#16438
            var _31 = $k[--$j]; //#16438
            $k[$j++] = $f(($f(_2z + (_30 * 256))) + (_31 * 65536)); //#16439
            for (var _32 = 0, _33 = 3; _32 < _33; _32++) { //#16439
                var _34 = $k[--$j]; //#16439
                $k[$j++] = _34 % 900; //#16439
                $k[$j++] = ~~(_34 / 900); //#16439
            } //#16439
            $_.mscs = $a(); //#16439
            $k[$j++] = Infinity; //#16441
            $aload($geti($_.in, ($_.k * 6) + 3, 3)); //#16441
            $_.lsbs = $a(); //#16441
            $k[$j++] = Infinity; //#16444
            $aload($_.lsbs); //#16443
            var _3B = $k[--$j]; //#16443
            var _3C = $k[--$j]; //#16443
            var _3D = $k[--$j]; //#16443
            $k[$j++] = $f(($f(_3B + (_3C * 256))) + (_3D * 65536)); //#16444
            for (var _3E = 0, _3F = 3; _3E < _3F; _3E++) { //#16444
                var _3G = $k[--$j]; //#16444
                $k[$j++] = _3G % 900; //#16444
                $k[$j++] = ~~(_3G / 900); //#16444
            } //#16444
            $_.lscs = $a(); //#16444
            var _3J = $get($_.lscs, 0); //#16446
            var _3L = $get($_.mscs, 0); //#16446
            $put($_.out, ($_.k * 5) + 4, ($f(_3J + (_3L * 316))) % 900); //#16447
            var _3P = $get($_.lscs, 1); //#16448
            var _3R = $get($_.mscs, 0); //#16448
            var _3T = $get($_.mscs, 1); //#16448
            $put($_.out, ($_.k * 5) + 3, ($f(($f(($f((~~(($f(_3J + (_3L * 316))) / 900)) + _3P)) + (_3R * 641))) + (_3T * 316))) % 900); //#16449
            var _3X = $get($_.lscs, 2); //#16450
            var _3Z = $get($_.mscs, 0); //#16450
            var _3b = $get($_.mscs, 1); //#16450
            var _3d = $get($_.mscs, 2); //#16450
            $put($_.out, ($_.k * 5) + 2, ($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_3J + (_3L * 316))) / 900)) + _3P)) + (_3R * 641))) + (_3T * 316))) / 900)) + _3X)) + (_3Z * 20))) + (_3b * 641))) + (_3d * 316))) % 900); //#16451
            var _3h = $get($_.lscs, 3); //#16452
            var _3j = $get($_.mscs, 1); //#16452
            var _3l = $get($_.mscs, 2); //#16452
            $put($_.out, ($_.k * 5) + 1, ($f(($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_3J + (_3L * 316))) / 900)) + _3P)) + (_3R * 641))) + (_3T * 316))) / 900)) + _3X)) + (_3Z * 20))) + (_3b * 641))) + (_3d * 316))) / 900)) + _3h)) + (_3j * 20))) + (_3l * 641))) % 900); //#16453
            $put($_.out, $_.k * 5, ($f((~~(($f(($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_3J + (_3L * 316))) / 900)) + _3P)) + (_3R * 641))) + (_3T * 316))) / 900)) + _3X)) + (_3Z * 20))) + (_3b * 641))) + (_3d * 316))) / 900)) + _3h)) + (_3j * 20))) + (_3l * 641))) / 900)) + ($get($_.mscs, 2) * 20))) % 900); //#16455
        } //#16455
        $_.rem = $_.inlen % 6; //#16457
        if ($_.rem != 0) { //#16462
            $k[$j++] = $_.out; //#16460
            $k[$j++] = $_.out.length - $_.rem; //#16460
            $k[$j++] = Infinity; //#16460
            $aload($geti($_.in, $_.inlen - $_.rem, $_.rem)); //#16460
            var _42 = $a(); //#16460
            var _43 = $k[--$j]; //#16461
            $puti($k[--$j], _43, _42); //#16461
        } //#16461
        $k[$j++] = $_.out; //#16463
    }; //#16463
    if ($_.ccc) { //#16472
        $_.barlen = $_.barcode.length; //#16467
        $_.datcws = $a((((~~($_.barlen / 6)) * 5) + ($_.barlen % 6)) + 2); //#16468
        $put($_.datcws, 0, 920); //#16469
        var _4E = (($_.barlen % 6) == 0) ? 924 : 901; //#16470
        $put($_.datcws, 1, _4E); //#16470
        $k[$j++] = $_.datcws; //#16471
        $k[$j++] = 2; //#16471
        $k[$j++] = Infinity; //#16471
        $forall($_.barcode); //#16471
        var _4H = $a(); //#16471
        $k[$j++] = _4H; //#16471
        $_.encb(); //#16471
        var _4I = $k[--$j]; //#16471
        var _4J = $k[--$j]; //#16471
        $puti($k[--$j], _4J, _4I); //#16471
    } //#16471
    if ((!$_.raw) && (!$_.ccc)) { //#16823
        var _4P = new Map([
            ["parse", $_.parse],
            ["parsefnc", $_.parsefnc],
            ["eci", true]
        ]); //#16480
        $_.fncvals = _4P; //#16482
        $k[$j++] = 'msg'; //#16483
        $k[$j++] = $_.barcode; //#16483
        $k[$j++] = $_.fncvals; //#16483
        bwipp_parseinput(); //#16483
        var _4S = $k[--$j]; //#16483
        $_[$k[--$j]] = _4S; //#16483
        $_.msglen = $_.msg.length; //#16484
        $k[$j++] = Infinity; //#16487
        for (var _4W = 0, _4X = $_.msglen; _4W < _4X; _4W++) { //#16487
            $k[$j++] = 0; //#16487
        } //#16487
        $k[$j++] = 0; //#16487
        $_.numdigits = $a(); //#16487
        $k[$j++] = Infinity; //#16488
        for (var _4a = 0, _4b = $_.msglen; _4a < _4b; _4a++) { //#16488
            $k[$j++] = 0; //#16488
        } //#16488
        $k[$j++] = 0; //#16488
        $_.numtext = $a(); //#16488
        $k[$j++] = Infinity; //#16489
        for (var _4e = 0, _4f = $_.msglen; _4e < _4f; _4e++) { //#16489
            $k[$j++] = 0; //#16489
        } //#16489
        $k[$j++] = 0; //#16489
        $_.numbytes = $a(); //#16489
        $k[$j++] = Infinity; //#16490
        for (var _4i = 0, _4j = $_.msglen; _4i < _4j; _4i++) { //#16490
            $k[$j++] = 0; //#16490
        } //#16490
        $k[$j++] = 0; //#16490
        $_.iseci = $a(); //#16490
        for (var _4m = $_.msglen - 1; _4m >= 0; _4m -= 1) { //#16503
            $_.i = _4m; //#16492
            var _4p = $get($_.msg, $_.i); //#16493
            if ((_4p >= 48) && (_4p <= 57)) { //#16495
                $put($_.numdigits, $_.i, $f($get($_.numdigits, $_.i + 1) + 1)); //#16494
            } //#16494
            var _4z = $get($_.alltext, $get($_.msg, $_.i)) !== undefined; //#16496
            if (_4z && ($get($_.numdigits, $_.i) < 13)) { //#16498
                $put($_.numtext, $_.i, $f($get($_.numtext, $_.i + 1) + 1)); //#16497
            } //#16497
            if ((($get($_.msg, $_.i) >= 0) && ($get($_.numtext, $_.i) < 5)) && ($get($_.numdigits, $_.i) < 13)) { //#16501
                $put($_.numbytes, $_.i, $f($get($_.numbytes, $_.i + 1) + 1)); //#16500
            } //#16500
            $put($_.iseci, $_.i, $get($_.msg, $_.i) <= -1000000); //#16502
        } //#16502
        $_.numdigits = $geti($_.numdigits, 0, $_.msglen); //#16504
        $_.numtext = $geti($_.numtext, 0, $_.msglen); //#16505
        $_.numbytes = $geti($_.numbytes, 0, $_.msglen); //#16506
        $_.seq = $a([]); //#16508
        $_.seqlen = 0; //#16508
        $_.state = $_.T; //#16508
        $_.p = 0; //#16508
        for (;;) { //#16562
            if ($_.p == $_.msglen) { //#16509
                break; //#16509
            } //#16509
            if ($get($_.iseci, $_.p)) { //#16560
                $_.eci = $get($_.msg, $_.p); //#16511
                $k[$j++] = Infinity; //#16514
                $aload($_.seq); //#16513
                $k[$j++] = $a([$_.eci]); //#16514
                $_.seq = $a(); //#16514
                $_.p = $_.p + 1; //#16516
                $k[$j++] = 'seqlen'; //#16517
                $k[$j++] = $_.seqlen; //#16517
                if ($_.eci <= -1810900) { //#16517
                    $k[$j++] = 2; //#16517
                } else { //#16517
                    var _5s = ($_.eci <= -1000900) ? 3 : 2; //#16517
                    $k[$j++] = _5s; //#16517
                } //#16517
                var _5t = $k[--$j]; //#16517
                var _5u = $k[--$j]; //#16517
                $_[$k[--$j]] = $f(_5u + _5t); //#16517
            } else { //#16560
                $_.n = $get($_.numdigits, $_.p); //#16519
                if (($_.n >= 13) || (($_.n == $_.msglen) && ($_.n >= 8))) { //#16560
                    $k[$j++] = Infinity; //#16524
                    $aload($_.seq); //#16522
                    $k[$j++] = $_.nl; //#16524
                    $k[$j++] = Infinity; //#16524
                    $aload($geti($_.msg, $_.p, $_.n)); //#16524
                    var _69 = $a(); //#16524
                    $k[$j++] = _69; //#16524
                    $_.seq = $a(); //#16524
                    $_.state = $_.N; //#16526
                    $_.p = $f($_.p + $_.n); //#16527
                    $_.seqlen = $f(($_.seqlen + 1) + $_.n); //#16528
                } else { //#16560
                    $_.t = $get($_.numtext, $_.p); //#16530
                    if ($_.t >= 5) { //#16560
                        $k[$j++] = Infinity; //#16537
                        $aload($_.seq); //#16533
                        if ($_.state != $_.T) { //#16536
                            $k[$j++] = $_.tl; //#16535
                        } //#16535
                        $k[$j++] = Infinity; //#16537
                        $aload($geti($_.msg, $_.p, $_.t)); //#16537
                        var _6S = $a(); //#16537
                        $k[$j++] = _6S; //#16537
                        $_.seq = $a(); //#16537
                        $_.state = $_.T; //#16539
                        $_.p = $f($_.p + $_.t); //#16540
                        $_.seqlen = $f($f($_.seqlen + 1) + $_.t); //#16541
                    } else { //#16560
                        $_.b = $get($_.numbytes, $_.p); //#16543
                        if (($_.b == 1) && ($_.state == $_.T)) { //#16560
                            $k[$j++] = Infinity; //#16548
                            $aload($_.seq); //#16546
                            $k[$j++] = $_.bs; //#16548
                            $k[$j++] = $a([$get($_.msg, $_.p)]); //#16548
                            $_.seq = $a(); //#16548
                            $_.p = $f($_.p + $_.b); //#16550
                            $_.seqlen = $f($_.seqlen + 2); //#16551
                        } else { //#16560
                            $k[$j++] = Infinity; //#16556
                            $aload($_.seq); //#16554
                            var _6r = (($_.b % 6) != 0) ? $_.bl : $_.bl6; //#16555
                            $k[$j++] = _6r; //#16556
                            $k[$j++] = Infinity; //#16556
                            $aload($geti($_.msg, $_.p, $_.b)); //#16556
                            var _6w = $a(); //#16556
                            $k[$j++] = _6w; //#16556
                            $_.seq = $a(); //#16556
                            $_.state = $_.B; //#16558
                            $_.p = $f($_.p + $_.b); //#16559
                            $_.seqlen = $f($f($_.seqlen + 1) + $_.b); //#16560
                        } //#16560
                    } //#16560
                } //#16560
            } //#16560
        } //#16560
        $_.enca = function() {
            var _77 = $get($get($_.charvals, $_.A), $k[--$j]); //#16565
            $k[$j++] = _77; //#16565
        }; //#16565
        $_.encl = function() {
            var _7C = $get($get($_.charvals, $_.L), $k[--$j]); //#16566
            $k[$j++] = _7C; //#16566
        }; //#16566
        $_.encm = function() {
            var _7H = $get($get($_.charvals, $_.M), $k[--$j]); //#16567
            $k[$j++] = _7H; //#16567
        }; //#16567
        $_.encp = function() {
            var _7M = $get($get($_.charvals, $_.P), $k[--$j]); //#16568
            $k[$j++] = _7M; //#16568
        }; //#16568
        $_.textencfuncs = $a(['enca', 'encl', 'encm', 'encp']); //#16569
        $_.addtotext = function() {
            $put($_.text, $_.l, $k[--$j]); //#16572
            $_.l = $_.l + 1; //#16573
        }; //#16573
        $_.enct = function() {
            $_.in = $k[--$j]; //#16577
            $_.curlen = $a([$_.e, $_.e, $_.e, $_.e]); //#16579
            $put($_.curlen, $_.submode, 0); //#16580
            $_.curseq = $a([$a([]), $a([]), $a([]), $a([])]); //#16581
            $forall($_.in, function() { //#16651
                $_.char = $k[--$j]; //#16586
                for (;;) { //#16607
                    $_.imp = false; //#16590
                    var _7l = $a([$_.A, $_.L, $_.M, $_.P]); //#16591
                    for (var _7m = 0, _7n = _7l.length; _7m < _7n; _7m++) { //#16605
                        $_.x = $get(_7l, _7m); //#16592
                        var _7t = $a([$_.A, $_.L, $_.M, $_.P]); //#16593
                        for (var _7u = 0, _7v = _7t.length; _7u < _7v; _7u++) { //#16604
                            $_.y = $get(_7t, _7u); //#16594
                            $_.cost = $f($get($_.curlen, $_.x) + $get($get($_.latlen, $_.x), $_.y)); //#16595
                            if ($_.cost < $get($_.curlen, $_.y)) { //#16603
                                $put($_.curlen, $_.y, $_.cost); //#16597
                                $k[$j++] = $_.curseq; //#16600
                                $k[$j++] = $_.y; //#16600
                                $k[$j++] = Infinity; //#16600
                                $aload($get($_.curseq, $_.x)); //#16599
                                $aload($get($get($_.latseq, $_.x), $_.y)); //#16600
                                var _8M = $a(); //#16600
                                var _8N = $k[--$j]; //#16601
                                $put($k[--$j], _8N, _8M); //#16601
                                $_.imp = true; //#16602
                            } //#16602
                        } //#16602
                    } //#16602
                    if (!$_.imp) { //#16606
                        break; //#16606
                    } //#16606
                } //#16606
                $_.nxtlen = $a([$_.e, $_.e, $_.e, $_.e]); //#16610
                $_.nxtseq = $a(4); //#16611
                var _8a = $a([$_.A, $_.L, $_.M, $_.P]); //#16613
                for (var _8b = 0, _8c = _8a.length; _8b < _8c; _8b++) { //#16646
                    $_.x = $get(_8a, _8b); //#16614
                    for (;;) { //#16644
                        var _8i = $get($get($_.charvals, $_.x), $_.char) !== undefined; //#16618
                        if (!_8i) { //#16618
                            break; //#16618
                        } //#16618
                        $_.cost = $f($get($_.curlen, $_.x) + 1); //#16621
                        if ($_.cost < $get($_.nxtlen, $_.x)) { //#16625
                            $put($_.nxtlen, $_.x, $_.cost); //#16623
                            $k[$j++] = $_.nxtseq; //#16624
                            $k[$j++] = $_.x; //#16624
                            $k[$j++] = Infinity; //#16624
                            $aload($get($_.curseq, $_.x)); //#16624
                            $k[$j++] = $_.char; //#16624
                            var _8z = $a(); //#16624
                            var _90 = $k[--$j]; //#16624
                            $put($k[--$j], _90, _8z); //#16624
                        } //#16624
                        var _96 = $a([$_.A, $_.L, $_.M, $_.P]); //#16628
                        for (var _97 = 0, _98 = _96.length; _97 < _98; _97++) { //#16641
                            $_.y = $get(_96, _97); //#16629
                            if ($ne($_.x, $_.y)) { //#16640
                                $_.cost = $f($f($get($_.curlen, $_.y) + $get($get($_.shftlen, $_.y), $_.x)) + 1); //#16631
                                if ($_.cost < $get($_.nxtlen, $_.y)) { //#16639
                                    $put($_.nxtlen, $_.y, $_.cost); //#16633
                                    $k[$j++] = $_.nxtseq; //#16637
                                    $k[$j++] = $_.y; //#16637
                                    $k[$j++] = Infinity; //#16637
                                    $aload($get($_.curseq, $_.y)); //#16635
                                    var _9Y = ($_.x == $_.A) ? $_.as : $_.ps; //#16636
                                    $k[$j++] = _9Y; //#16637
                                    $k[$j++] = $_.char; //#16637
                                    var _9a = $a(); //#16637
                                    var _9b = $k[--$j]; //#16638
                                    $put($k[--$j], _9b, _9a); //#16638
                                } //#16638
                            } //#16638
                        } //#16638
                        break; //#16643
                    } //#16643
                } //#16643
                $_.curlen = $_.nxtlen; //#16648
                $_.curseq = $_.nxtseq; //#16649
            }); //#16649
            $_.minseq = $_.e; //#16654
            var _9k = $a([$_.A, $_.L, $_.M, $_.P]); //#16655
            for (var _9l = 0, _9m = _9k.length; _9l < _9m; _9l++) { //#16661
                $_.k = $get(_9k, _9l); //#16656
                if ($get($_.curlen, $_.k) < $_.minseq) { //#16660
                    $_.minseq = $get($_.curlen, $_.k); //#16658
                    $_.txtseq = $get($_.curseq, $_.k); //#16659
                } //#16659
            } //#16659
            $_.text = $a($_.minseq); //#16664
            $_.k = 0; //#16665
            $_.l = 0; //#16665
            for (;;) { //#16685
                if ($_.k >= $_.txtseq.length) { //#16666
                    break; //#16666
                } //#16666
                $_.char = $get($_.txtseq, $_.k); //#16668
                $k[$j++] = $_.char; //#16671
                if ($_[$get($_.textencfuncs, $_.submode)]() === true) {
                    break;
                } //#16671
                $_.addtotext(); //#16671
                $_.k = $_.k + 1; //#16672
                if (($_.char == $_.as) || ($_.char == $_.ps)) { //#16678
                    $k[$j++] = $get($_.txtseq, $_.k); //#16676
                    if ($_.char == $_.as) { //#16676
                        $_.enca(); //#16676
                    } else { //#16676
                        $_.encp(); //#16676
                    } //#16676
                    $_.addtotext(); //#16676
                    $_.k = $_.k + 1; //#16677
                } //#16677
                if ($_.char == $_.al) { //#16681
                    $_.submode = $_.A; //#16681
                } //#16681
                if ($_.char == $_.ll) { //#16682
                    $_.submode = $_.L; //#16682
                } //#16682
                if ($_.char == $_.ml) { //#16683
                    $_.submode = $_.M; //#16683
                } //#16683
                if ($_.char == $_.pl) { //#16684
                    $_.submode = $_.P; //#16684
                } //#16684
            } //#16684
            if (($_.text.length % 2) == 1) { //#16732
                if ($_.submode == $_.P) { //#16728
                    $k[$j++] = 'pad'; //#16689
                    $k[$j++] = $_.al; //#16689
                    $_.encp(); //#16689
                    var _Ab = $k[--$j]; //#16689
                    $_[$k[--$j]] = _Ab; //#16689
                    $_.submode = $_.A; //#16690
                } else { //#16728
                    $_.nextecitext = false; //#16693
                    for (var _Ah = $_.i + 1, _Ag = $_.seq.length - 1; _Ah <= _Ag; _Ah += 1) { //#16700
                        $_.ti = _Ah; //#16696
                        if ($ne($type($get($_.seq, $_.ti)), 'arraytype')) { //#16697
                            $_.nextecitext = false; //#16697
                            break; //#16697
                        } //#16697
                        if ($get($get($_.seq, $_.ti), 0) > -1000000) { //#16698
                            break; //#16698
                        } //#16698
                        $_.nextecitext = true; //#16699
                    } //#16699
                    if ($_.nextecitext) { //#16728
                        if ($_.submode == $_.A) { //#16725
                            var _B0 = $get($get($_.charvals, $_.L), $get($get($_.seq, $_.ti), 0)) !== undefined; //#16703
                            if (_B0) { //#16708
                                $k[$j++] = 'pad'; //#16704
                                $k[$j++] = $_.ll; //#16704
                                $_.enca(); //#16704
                                var _B2 = $k[--$j]; //#16704
                                $_[$k[--$j]] = _B2; //#16704
                                $_.submode = $_.L; //#16705
                            } else { //#16708
                                $k[$j++] = 'pad'; //#16707
                                $k[$j++] = $_.ml; //#16707
                                $_.enca(); //#16707
                                var _B6 = $k[--$j]; //#16707
                                $_[$k[--$j]] = _B6; //#16707
                                $_.submode = $_.M; //#16708
                            } //#16708
                        } else { //#16725
                            if ($_.submode == $_.M) { //#16725
                                var _BI = $get($get($_.charvals, $_.L), $get($get($_.seq, $_.ti), 0)) !== undefined; //#16712
                                if (_BI) { //#16721
                                    $k[$j++] = 'pad'; //#16713
                                    $k[$j++] = $_.ll; //#16713
                                    $_.encm(); //#16713
                                    var _BK = $k[--$j]; //#16713
                                    $_[$k[--$j]] = _BK; //#16713
                                    $_.submode = $_.L; //#16714
                                } else { //#16721
                                    var _BU = $get($get($_.charvals, $_.P), $get($get($_.seq, $_.ti), 0)) !== undefined; //#16716
                                    if (_BU) { //#16721
                                        $k[$j++] = 'pad'; //#16717
                                        $k[$j++] = $_.pl; //#16717
                                        $_.encm(); //#16717
                                        var _BW = $k[--$j]; //#16717
                                        $_[$k[--$j]] = _BW; //#16717
                                        $_.submode = $_.P; //#16718
                                    } else { //#16721
                                        $k[$j++] = 'pad'; //#16720
                                        $k[$j++] = $_.al; //#16720
                                        $_.encm(); //#16720
                                        var _Ba = $k[--$j]; //#16720
                                        $_[$k[--$j]] = _Ba; //#16720
                                        $_.submode = $_.A; //#16721
                                    } //#16721
                                } //#16721
                            } else { //#16725
                                $k[$j++] = 'pad'; //#16724
                                $k[$j++] = $_.ml; //#16724
                                $_.encl(); //#16724
                                var _Be = $k[--$j]; //#16724
                                $_[$k[--$j]] = _Be; //#16724
                                $_.submode = $_.M; //#16725
                            } //#16725
                        } //#16725
                    } else { //#16728
                        $k[$j++] = 'pad'; //#16728
                        $k[$j++] = $_.ps; //#16728
                        if ($_[$get($_.textencfuncs, $_.submode)]() === true) {
                            return true;
                        } //#16728
                        var _Bm = $k[--$j]; //#16728
                        $_[$k[--$j]] = _Bm; //#16728
                    } //#16728
                } //#16728
                $k[$j++] = Infinity; //#16731
                $aload($_.text); //#16731
                $k[$j++] = $_.pad; //#16731
                $_.text = $a(); //#16731
            } //#16731
            $_.out = $a(~~($_.text.length / 2)); //#16734
            for (var _Bv = 0, _Bu = $_.out.length - 1; _Bv <= _Bu; _Bv += 1) { //#16738
                $_.k = _Bv; //#16736
                $put($_.out, $_.k, $f(($get($_.text, $_.k * 2) * 30) + $get($_.text, ($_.k * 2) + 1))); //#16737
            } //#16737
            $k[$j++] = $_.out; //#16740
        }; //#16740
        $_.encn = function() {
            $_.in = $k[--$j]; //#16745
            $_.out = $a([]); //#16746
            for (var _C9 = 0, _C8 = $_.in.length - 1; _C9 <= _C8; _C9 += 44) { //#16774
                $_.k = _C9; //#16748
                $k[$j++] = Infinity; //#16751
                var _CE = $_.in.length - $_.k; //#16750
                $k[$j++] = 1; //#16750
                $k[$j++] = $_.in; //#16750
                $k[$j++] = $_.k; //#16750
                $k[$j++] = _CE; //#16750
                if (_CE > 44) { //#16750
                    $j--; //#16750
                    $k[$j++] = 44; //#16750
                } //#16750
                var _CF = $k[--$j]; //#16750
                var _CG = $k[--$j]; //#16750
                var _CI = $geti($k[--$j], _CG, _CF); //#16750
                for (var _CJ = 0, _CK = _CI.length; _CJ < _CK; _CJ++) { //#16751
                    $k[$j++] = $f($get(_CI, _CJ) - 48); //#16751
                } //#16751
                $_.gmod = $a(); //#16751
                $_.cwn = $a([]); //#16753
                for (;;) { //#16772
                    $_.dv = 900; //#16754
                    $_.gmul = $a([]); //#16755
                    $_.val = 0; //#16755
                    for (;;) { //#16767
                        if ($_.gmod.length == 0) { //#16756
                            break; //#16756
                        } //#16756
                        $_.val = $f(($_.val * 10) + $get($_.gmod, 0)); //#16757
                        $_.gmod = $geti($_.gmod, 1, $_.gmod.length - 1); //#16758
                        if ($_.val < $_.dv) { //#16764
                            if ($_.gmul.length != 0) { //#16762
                                $k[$j++] = Infinity; //#16761
                                $aload($_.gmul); //#16761
                                $k[$j++] = 0; //#16761
                                $_.gmul = $a(); //#16761
                            } //#16761
                        } else { //#16764
                            $k[$j++] = Infinity; //#16764
                            $aload($_.gmul); //#16764
                            $k[$j++] = ~~($_.val / $_.dv); //#16764
                            $_.gmul = $a(); //#16764
                        } //#16764
                        $_.val = $_.val % $_.dv; //#16766
                    } //#16766
                    $_.dv = $_.val; //#16768
                    $k[$j++] = Infinity; //#16769
                    $k[$j++] = $_.dv; //#16769
                    $aload($_.cwn); //#16769
                    $_.cwn = $a(); //#16769
                    $_.gmod = $_.gmul; //#16770
                    if ($_.gmul.length == 0) { //#16771
                        break; //#16771
                    } //#16771
                } //#16771
                $k[$j++] = Infinity; //#16773
                $aload($_.out); //#16773
                $aload($_.cwn); //#16773
                $_.out = $a(); //#16773
            } //#16773
            $k[$j++] = $_.out; //#16775
        }; //#16775
        $_.ence = function() {
            var _Ct = $f((-$get($k[--$j], 0)) - 1000000); //#16780
            $k[$j++] = _Ct; //#16788
            if (_Ct <= 899) { //#16787
                var _Cu = $k[--$j]; //#16781
                $k[$j++] = 927; //#16781
                $k[$j++] = _Cu; //#16781
                $astore($a(2)); //#16781
            } else { //#16787
                var _Cw = $k[--$j]; //#16782
                $k[$j++] = _Cw; //#16788
                if (_Cw <= 810899) { //#16787
                    var _Cx = $k[--$j]; //#16783
                    $k[$j++] = 926; //#16783
                    $k[$j++] = (~~(_Cx / 900)) - 1; //#16783
                    $k[$j++] = _Cx % 900; //#16783
                    $astore($a(3)); //#16783
                } else { //#16787
                    var _Cz = $k[--$j]; //#16784
                    $k[$j++] = _Cz; //#16788
                    if (_Cz <= 811799) { //#16787
                        var _D0 = $k[--$j]; //#16785
                        $k[$j++] = 925; //#16785
                        $k[$j++] = $f(_D0 - 810900); //#16785
                        $astore($a(2)); //#16785
                    } else { //#16787
                        $k[$j++] = 'bwipp.pdf417badECI#16787'; //#16787
                        $k[$j++] = "PDF417 supports ECIs 000000 to 811799"; //#16787
                        bwipp_raiseerror(); //#16787
                    } //#16787
                } //#16787
            } //#16787
        }; //#16787
        $_.encfuncs = $a(['enct', 'encn', 'encb']); //#16791
        $_.addtocws = function() {
            var _D3 = $k[--$j]; //#16794
            $puti($_.datcws, $_.j, _D3); //#16794
            $_.j = _D3.length + $_.j; //#16795
        }; //#16795
        $_.state = $_.T; //#16799
        $_.submode = $_.A; //#16799
        $_.datcws = $a($_.seqlen); //#16800
        $_.i = 0; //#16801
        $_.j = 0; //#16801
        for (;;) { //#16821
            if ($_.i >= $_.seq.length) { //#16802
                break; //#16802
            } //#16802
            $_.chars = $get($_.seq, $_.i); //#16803
            if ($eq($type($_.chars), 'arraytype')) { //#16817
                if ($get($_.chars, 0) <= -1000000) { //#16808
                    $k[$j++] = $_.chars; //#16806
                    $_.ence(); //#16806
                    $_.addtocws(); //#16806
                } else { //#16808
                    $k[$j++] = $_.chars; //#16808
                    if ($_[$get($_.encfuncs, $_.state)]() === true) {
                        break;
                    } //#16808
                    $_.addtocws(); //#16808
                } //#16808
            } else { //#16817
                $k[$j++] = $a([$get($_.latchcws, $_.chars)]); //#16811
                $_.addtocws(); //#16811
                if ($_.chars == $_.tl) { //#16812
                    $_.state = $_.T; //#16812
                    $_.submode = $_.A; //#16812
                } //#16812
                if ($_.chars == $_.nl) { //#16813
                    $_.state = $_.N; //#16813
                } //#16813
                if (($_.chars == $_.bl) || ($_.chars == $_.bl6)) { //#16814
                    $_.state = $_.B; //#16814
                } //#16814
                if ($_.chars == $_.bs) { //#16818
                    $_.i = $_.i + 1; //#16816
                    $k[$j++] = $get($_.seq, $_.i); //#16817
                    $_.encb(); //#16817
                    $_.addtocws(); //#16817
                } //#16817
            } //#16817
            $_.i = $_.i + 1; //#16820
        } //#16820
        $_.datcws = $geti($_.datcws, 0, $_.j); //#16822
    } //#16822
    $_.m = $_.datcws.length; //#16826
    if ($_.eclevel == -1) { //#16832
        if ($_.m <= 40) { //#16828
            $_.eclevel = 2; //#16828
        } //#16828
        if (($_.m >= 41) && ($_.m <= 160)) { //#16829
            $_.eclevel = 3; //#16829
        } //#16829
        if (($_.m >= 161) && ($_.m <= 320)) { //#16830
            $_.eclevel = 4; //#16830
        } //#16830
        if ($_.m >= 321) { //#16831
            $_.eclevel = 5; //#16831
        } //#16831
    } //#16831
    $_.maxeclevel = (~~((Math.log((928 - 1) - $_.m)) / Math.log(2))) - 1; //#16835
    if ($_.eclevel > $_.maxeclevel) { //#16836
        $_.eclevel = $_.maxeclevel; //#16836
    } //#16836
    $_.k = ~~Math.pow(2, $_.eclevel + 1); //#16837
    if ($_.columns == 0) { //#16840
        $_.columns = ~~(Math.round(Math.sqrt(($_.m + $_.k) / 3))); //#16840
    } //#16840
    $k[$j++] = 'c'; //#16841
    if ($_.columns >= 1) { //#16841
        $k[$j++] = $_.columns; //#16841
    } else { //#16841
        $k[$j++] = 1; //#16841
    } //#16841
    var _E8 = $k[--$j]; //#16841
    $_[$k[--$j]] = _E8; //#16841
    $_.r = ~~(Math.ceil((($_.m + $_.k) + 1) / $_.columns)); //#16844
    if (($_.r < $_.rows) && ($_.rows <= 90)) { //#16845
        $_.r = $_.rows; //#16845
    } //#16845
    if ($_.r < 3) { //#16846
        $_.r = 3; //#16846
    } //#16846
    if ($_.r > 90) { //#16851
        $k[$j++] = 'bwipp.pdf417insufficientCapacity#16850'; //#16850
        $k[$j++] = "Insufficient capacity in the symbol"; //#16850
        bwipp_raiseerror(); //#16850
    } //#16850
    var _EJ = $_.c; //#16854
    var _EK = $_.r; //#16854
    var _EL = $_.m; //#16854
    var _EM = 8; //#16854
    var _EN = (~~((Math.log($f(($f((_EJ * _EK) - 1)) - _EL))) / Math.log(2))) - 1; //#16854
    if (((~~((Math.log($f(($f((_EJ * _EK) - 1)) - _EL))) / Math.log(2))) - 1) > 8) { //#16854
        var _ = _EM; //#16854
        _EM = _EN; //#16854
        _EN = _; //#16854
    } //#16854
    $_.maxeclevel = _EN; //#16854
    if ($_.maxeclevel > $_.eclevel) { //#16858
        $_.eclevel = $_.maxeclevel; //#16856
        $_.k = ~~Math.pow(2, $_.eclevel + 1); //#16857
    } //#16857
    $_.n = $f(($_.c * $_.r) - $_.k); //#16861
    $_.cws = $a($f(($_.c * $_.r) + 1)); //#16862
    $put($_.cws, 0, $_.n); //#16863
    $puti($_.cws, 1, $_.datcws); //#16864
    $k[$j++] = $_.cws; //#16865
    $k[$j++] = $_.m + 1; //#16865
    $k[$j++] = Infinity; //#16865
    for (var _Eg = 0, _Eh = $f($f($_.n - $_.m) - 1); _Eg < _Eh; _Eg++) { //#16865
        $k[$j++] = 900; //#16865
    } //#16865
    var _Ei = $a(); //#16865
    var _Ej = $k[--$j]; //#16865
    $puti($k[--$j], _Ej, _Ei); //#16865
    $k[$j++] = $_.cws; //#16866
    $k[$j++] = $_.n; //#16866
    $k[$j++] = Infinity; //#16866
    for (var _Eo = 0, _Ep = $_.k; _Eo < _Ep; _Eo++) { //#16866
        $k[$j++] = 0; //#16866
    } //#16866
    $k[$j++] = 0; //#16866
    var _Eq = $a(); //#16866
    var _Er = $k[--$j]; //#16866
    $puti($k[--$j], _Er, _Eq); //#16866
    $k[$j++] = Infinity; //#16869
    $k[$j++] = 1; //#16869
    for (var _Et = 0, _Eu = 928; _Et < _Eu; _Et++) { //#16869
        var _Ev = $k[--$j]; //#16869
        $k[$j++] = _Ev; //#16869
        $k[$j++] = (_Ev * 3) % 929; //#16869
    } //#16869
    $_.rsalog = $a(); //#16869
    $_.rslog = $a(929); //#16870
    for (var _Ey = 1; _Ey <= 928; _Ey += 1) { //#16871
        $put($_.rslog, $get($_.rsalog, _Ey), _Ey); //#16871
    } //#16871
    $_.rsprod = function() {
        var _F2 = $k[--$j]; //#16875
        var _F3 = $k[--$j]; //#16875
        $k[$j++] = _F3; //#16879
        $k[$j++] = _F2; //#16879
        if ((_F2 != 0) && (_F3 != 0)) { //#16878
            var _F6 = $get($_.rslog, $k[--$j]); //#16876
            var _FB = $get($_.rsalog, $f(_F6 + $get($_.rslog, $k[--$j])) % 928); //#16876
            $k[$j++] = _FB; //#16876
        } else { //#16878
            $j -= 2; //#16878
            $k[$j++] = 0; //#16878
        } //#16878
    }; //#16878
    $k[$j++] = Infinity; //#16883
    $k[$j++] = 1; //#16883
    for (var _FD = 0, _FE = $_.k; _FD < _FE; _FD++) { //#16883
        $k[$j++] = 0; //#16883
    } //#16883
    $_.coeffs = $a(); //#16883
    for (var _FI = 1, _FH = $_.k; _FI <= _FH; _FI += 1) { //#16892
        $_.i = _FI; //#16885
        $put($_.coeffs, $_.i, $get($_.coeffs, $_.i - 1)); //#16886
        for (var _FP = $_.i - 1; _FP >= 1; _FP -= 1) { //#16890
            $_.j = _FP; //#16888
            $k[$j++] = $_.coeffs; //#16889
            $k[$j++] = $_.j; //#16889
            $k[$j++] = $get($_.coeffs, $_.j - 1); //#16889
            $k[$j++] = $get($_.coeffs, $_.j); //#16889
            $k[$j++] = $get($_.rsalog, $_.i); //#16889
            $_.rsprod(); //#16889
            var _Fb = $k[--$j]; //#16889
            var _Fc = $k[--$j]; //#16889
            var _Fd = $k[--$j]; //#16889
            $put($k[--$j], _Fd, $f(_Fc + _Fb) % 929); //#16889
        } //#16889
        $k[$j++] = $_.coeffs; //#16891
        $k[$j++] = 0; //#16891
        $k[$j++] = $get($_.coeffs, 0); //#16891
        $k[$j++] = $get($_.rsalog, $_.i); //#16891
        $_.rsprod(); //#16891
        var _Fl = $k[--$j]; //#16891
        var _Fm = $k[--$j]; //#16891
        $put($k[--$j], _Fm, _Fl); //#16891
    } //#16891
    $_.coeffs = $geti($_.coeffs, 0, $_.coeffs.length - 1); //#16893
    for (var _Fs = $_.coeffs.length - 1; _Fs >= 0; _Fs -= 2) { //#16894
        var _Ft = $_.coeffs; //#16894
        $put(_Ft, _Fs, $f(929 - $get(_Ft, _Fs))); //#16894
    } //#16894
    for (var _Fx = 0, _Fw = $f($_.n - 1); _Fx <= _Fw; _Fx += 1) { //#16903
        $_.t = $f($get($_.cws, _Fx) + $get($_.cws, $_.n)) % 929; //#16898
        for (var _G5 = 0, _G4 = $_.k - 1; _G5 <= _G4; _G5 += 1) { //#16902
            $_.j = _G5; //#16900
            $put($_.cws, $f($_.n + $_.j), ($f($get($_.cws, $f($f($_.n + $_.j) + 1)) + ($f(929 - (($_.t * $get($_.coeffs, ($_.k - $_.j) - 1)) % 929))))) % 929); //#16901
        } //#16901
    } //#16901
    for (var _GM = $_.n, _GL = $f($_.n + $_.k); _GM <= _GL; _GM += 1) { //#16904
        $put($_.cws, _GM, $f(929 - $get($_.cws, _GM)) % 929); //#16904
    } //#16904
    $_.cws = $geti($_.cws, 0, $_.cws.length - 1); //#16907
    var _GU = $get($_.options, 'debugcws') !== undefined; //#16909
    if (_GU) { //#16909
        $k[$j++] = 'bwipp.debugcws#16909'; //#16909
        $k[$j++] = $_.cws; //#16909
        bwipp_raiseerror(); //#16909
    } //#16909
    if (!bwipp_pdf417.__17153__) { //#17153
        $_ = Object.create($_); //#17153
        $_.clusters = $a([$a([120256, 125680, 128380, 120032, 125560, 128318, 108736, 119920, 108640, 86080, 108592, 86048, 110016, 120560, 125820, 109792, 120440, 125758, 88256, 109680, 88160, 89536, 110320, 120700, 89312, 110200, 120638, 89200, 110140, 89840, 110460, 89720, 110398, 89980, 128506, 119520, 125304, 128190, 107712, 119408, 125244, 107616, 119352, 84032, 107568, 119324, 84000, 107544, 83984, 108256, 119672, 125374, 85184, 108144, 119612, 85088, 108088, 119582, 85040, 108060, 85728, 108408, 119742, 85616, 108348, 85560, 108318, 85880, 108478, 85820, 85790, 107200, 119152, 125116, 107104, 119096, 125086, 83008, 107056, 119068, 82976, 107032, 82960, 82952, 83648, 107376, 119228, 83552, 107320, 119198, 83504, 107292, 83480, 83468, 83824, 107452, 83768, 107422, 83740, 83900, 106848, 118968, 125022, 82496, 106800, 118940, 82464, 106776, 118926, 82448, 106764, 82440, 106758, 82784, 106936, 119006, 82736, 106908, 82712, 106894, 82700, 82694, 106974, 82830, 82240, 106672, 118876, 82208, 106648, 118862, 82192, 106636, 82184, 106630, 82180, 82352, 82328, 82316, 82080, 118830, 106572, 106566, 82050, 117472, 124280, 127678, 103616, 117360, 124220, 103520, 117304, 124190, 75840, 103472, 75808, 104160, 117624, 124350, 76992, 104048, 117564, 76896, 103992, 76848, 76824, 77536, 104312, 117694, 77424, 104252, 77368, 77340, 77688, 104382, 77628, 77758, 121536, 126320, 128700, 121440, 126264, 128670, 111680, 121392, 126236, 111648, 121368, 126222, 111632, 121356, 103104, 117104, 124092, 112320, 103008, 117048, 124062, 112224, 121656, 126366, 93248, 74784, 102936, 117006, 93216, 112152, 93200, 75456, 103280, 117180, 93888, 75360, 103224, 117150, 93792, 112440, 121758, 93744, 75288, 93720, 75632, 103356, 94064, 75576, 103326, 94008, 112542, 93980, 75708, 94140, 75678, 94110, 121184, 126136, 128606, 111168, 121136, 126108, 111136, 121112, 126094, 111120, 121100, 111112, 111108, 102752, 116920, 123998, 111456, 102704, 116892, 91712, 74272, 121244, 116878, 91680, 74256, 102668, 91664, 111372, 102662, 74244, 74592, 102840, 116958, 92000, 74544, 102812, 91952, 111516, 102798, 91928, 74508, 74502, 74680, 102878, 92088, 74652, 92060, 74638, 92046, 92126, 110912, 121008, 126044, 110880, 120984, 126030, 110864, 120972, 110856, 120966, 110852, 110850, 74048, 102576, 116828, 90944, 74016, 102552, 116814, 90912, 111000, 121038, 90896, 73992, 102534, 90888, 110982, 90884, 74160, 102620, 91056, 74136, 102606, 91032, 111054, 91020, 74118, 91014, 91100, 91086, 110752, 120920, 125998, 110736, 120908, 110728, 120902, 110724, 110722, 73888, 102488, 116782, 90528, 73872, 102476, 90512, 110796, 102470, 90504, 73860, 90500, 73858, 73944, 90584, 90572, 90566, 120876, 120870, 110658, 102444, 73800, 90312, 90308, 90306, 101056, 116080, 123580, 100960, 116024, 70720, 100912, 115996, 70688, 100888, 70672, 70664, 71360, 101232, 116156, 71264, 101176, 116126, 71216, 101148, 71192, 71180, 71536, 101308, 71480, 101278, 71452, 71612, 71582, 118112, 124600, 127838, 105024, 118064, 124572, 104992, 118040, 124558, 104976, 118028, 104968, 118022, 100704, 115896, 123486, 105312, 100656, 115868, 79424, 70176, 118172, 115854, 79392, 105240, 100620, 79376, 70152, 79368, 70496, 100792, 115934, 79712, 70448, 118238, 79664, 105372, 100750, 79640, 70412, 79628, 70584, 100830, 79800, 70556, 79772, 70542, 70622, 79838, 122176, 126640, 128860, 122144, 126616, 128846, 122128, 126604, 122120, 126598, 122116, 104768, 117936, 124508, 113472, 104736, 126684, 124494, 113440, 122264, 126670, 113424, 104712, 117894, 113416, 122246, 104706, 69952, 100528, 115804, 78656, 69920, 100504, 115790, 96064, 78624, 104856, 117966, 96032, 113560, 122318, 100486, 96016, 78600, 104838, 96008, 69890, 70064, 100572, 78768, 70040, 100558, 96176, 78744, 104910, 96152, 113614, 70022, 78726, 70108, 78812, 70094, 96220, 78798, 122016, 126552, 128814, 122000, 126540, 121992, 126534, 121988, 121986, 104608, 117848, 124462, 113056, 104592, 126574, 113040, 122060, 117830, 113032, 104580, 113028, 104578, 113026, 69792, 100440, 115758, 78240, 69776, 100428, 95136, 78224, 104652, 100422, 95120, 113100, 69764, 95112, 78212, 69762, 78210, 69848, 100462, 78296, 69836, 95192, 78284, 69830, 95180, 78278, 69870, 95214, 121936, 126508, 121928, 126502, 121924, 121922, 104528, 117804, 112848, 104520, 117798, 112840, 121958, 112836, 104514, 112834, 69712, 100396, 78032, 69704, 100390, 94672, 78024, 104550, 94664, 112870, 69698, 94660, 78018, 94658, 78060, 94700, 94694, 126486, 121890, 117782, 104484, 104482, 69672, 77928, 94440, 69666, 77922, 99680, 68160, 99632, 68128, 99608, 115342, 68112, 99596, 68104, 99590, 68448, 99768, 115422, 68400, 99740, 68376, 99726, 68364, 68358, 68536, 99806, 68508, 68494, 68574, 101696, 116400, 123740, 101664, 116376, 101648, 116364, 101640, 116358, 101636, 67904, 99504, 115292, 72512, 67872, 116444, 115278, 72480, 101784, 116430, 72464, 67848, 99462, 72456, 101766, 67842, 68016, 99548, 72624, 67992, 99534, 72600, 101838, 72588, 67974, 68060, 72668, 68046, 72654, 118432, 124760, 127918, 118416, 124748, 118408, 124742, 118404, 118402, 101536, 116312, 105888, 101520, 116300, 105872, 118476, 116294, 105864, 101508, 105860, 101506, 105858, 67744, 99416, 72096, 67728, 116334, 80800, 72080, 101580, 99398, 80784, 105932, 67716, 80776, 72068, 67714, 72066, 67800, 99438, 72152, 67788, 80856, 72140, 67782, 80844, 72134, 67822, 72174, 80878, 126800, 128940, 126792, 128934, 126788, 126786, 118352, 124716, 122576, 126828, 124710, 122568, 126822, 122564, 118338, 122562, 101456, 116268, 105680, 101448, 116262, 114128, 105672, 118374, 114120, 122598, 101442, 114116, 105666, 114114, 67664, 99372, 71888, 67656, 99366, 80336, 71880, 101478, 97232, 80328, 105702, 67650, 97224, 114150, 71874, 97220, 67692, 71916, 67686, 80364, 71910, 97260, 80358, 97254, 126760, 128918, 126756, 126754, 118312, 124694, 122472, 126774, 122468, 118306, 122466, 101416, 116246, 105576, 101412, 113896, 105572, 101410, 113892, 105570, 113890, 67624, 99350, 71784, 101430, 80104, 71780, 67618, 96744, 80100, 71778, 96740, 80098, 96738, 71798, 96758, 126738, 122420, 122418, 105524, 113780, 113778, 71732, 79988, 96500, 96498, 66880, 66848, 98968, 66832, 66824, 66820, 66992, 66968, 66956, 66950, 67036, 67022, 100000, 99984, 115532, 99976, 115526, 99972, 99970, 66720, 98904, 69024, 100056, 98892, 69008, 100044, 69000, 100038, 68996, 66690, 68994, 66776, 98926, 69080, 100078, 69068, 66758, 69062, 66798, 69102, 116560, 116552, 116548, 116546, 99920, 102096, 116588, 115494, 102088, 116582, 102084, 99906, 102082, 66640, 68816, 66632, 98854, 73168, 68808, 66628, 73160, 68804, 66626, 73156, 68802, 66668, 68844, 66662, 73196, 68838, 73190, 124840, 124836, 124834, 116520, 118632, 124854, 118628, 116514, 118626, 99880, 115478, 101992, 116534, 106216, 101988, 99874, 106212, 101986, 106210, 66600, 98838, 68712, 99894, 72936, 68708, 66594, 81384, 72932, 68706, 81380, 72930, 66614, 68726, 72950, 81398, 128980, 128978, 124820, 126900, 124818, 126898, 116500, 118580, 116498, 122740, 118578, 122738, 99860, 101940, 99858, 106100, 101938, 114420]), $a([128352, 129720, 125504, 128304, 129692, 125472, 128280, 129678, 125456, 128268, 125448, 128262, 125444, 125792, 128440, 129758, 120384, 125744, 128412, 120352, 125720, 128398, 120336, 125708, 120328, 125702, 120324, 120672, 125880, 128478, 110144, 120624, 125852, 110112, 120600, 125838, 110096, 120588, 110088, 120582, 110084, 110432, 120760, 125918, 89664, 110384, 120732, 89632, 110360, 120718, 89616, 110348, 89608, 110342, 89952, 110520, 120798, 89904, 110492, 89880, 110478, 89868, 90040, 110558, 90012, 89998, 125248, 128176, 129628, 125216, 128152, 129614, 125200, 128140, 125192, 128134, 125188, 125186, 119616, 125360, 128220, 119584, 125336, 128206, 119568, 125324, 119560, 125318, 119556, 119554, 108352, 119728, 125404, 108320, 119704, 125390, 108304, 119692, 108296, 119686, 108292, 108290, 85824, 108464, 119772, 85792, 108440, 119758, 85776, 108428, 85768, 108422, 85764, 85936, 108508, 85912, 108494, 85900, 85894, 85980, 85966, 125088, 128088, 129582, 125072, 128076, 125064, 128070, 125060, 125058, 119200, 125144, 128110, 119184, 125132, 119176, 125126, 119172, 119170, 107424, 119256, 125166, 107408, 119244, 107400, 119238, 107396, 107394, 83872, 107480, 119278, 83856, 107468, 83848, 107462, 83844, 83842, 83928, 107502, 83916, 83910, 83950, 125008, 128044, 125000, 128038, 124996, 124994, 118992, 125036, 118984, 125030, 118980, 118978, 106960, 119020, 106952, 119014, 106948, 106946, 82896, 106988, 82888, 106982, 82884, 82882, 82924, 82918, 124968, 128022, 124964, 124962, 118888, 124982, 118884, 118882, 106728, 118902, 106724, 106722, 82408, 106742, 82404, 82402, 124948, 124946, 118836, 118834, 106612, 106610, 124224, 127664, 129372, 124192, 127640, 129358, 124176, 127628, 124168, 127622, 124164, 124162, 117568, 124336, 127708, 117536, 124312, 127694, 117520, 124300, 117512, 124294, 117508, 117506, 104256, 117680, 124380, 104224, 117656, 124366, 104208, 117644, 104200, 117638, 104196, 104194, 77632, 104368, 117724, 77600, 104344, 117710, 77584, 104332, 77576, 104326, 77572, 77744, 104412, 77720, 104398, 77708, 77702, 77788, 77774, 128672, 129880, 93168, 128656, 129868, 92664, 128648, 129862, 92412, 128644, 128642, 124064, 127576, 129326, 126368, 124048, 129902, 126352, 128716, 127558, 126344, 124036, 126340, 124034, 126338, 117152, 124120, 127598, 121760, 117136, 124108, 121744, 126412, 124102, 121736, 117124, 121732, 117122, 121730, 103328, 117208, 124142, 112544, 103312, 117196, 112528, 121804, 117190, 112520, 103300, 112516, 103298, 112514, 75680, 103384, 117230, 94112, 75664, 103372, 94096, 112588, 103366, 94088, 75652, 94084, 75650, 75736, 103406, 94168, 75724, 94156, 75718, 94150, 75758, 128592, 129836, 91640, 128584, 129830, 91388, 128580, 91262, 128578, 123984, 127532, 126160, 123976, 127526, 126152, 128614, 126148, 123970, 126146, 116944, 124012, 121296, 116936, 124006, 121288, 126182, 121284, 116930, 121282, 102864, 116972, 111568, 102856, 116966, 111560, 121318, 111556, 102850, 111554, 74704, 102892, 92112, 74696, 102886, 92104, 111590, 92100, 74690, 92098, 74732, 92140, 74726, 92134, 128552, 129814, 90876, 128548, 90750, 128546, 123944, 127510, 126056, 128566, 126052, 123938, 126050, 116840, 123958, 121064, 116836, 121060, 116834, 121058, 102632, 116854, 111080, 121078, 111076, 102626, 111074, 74216, 102646, 91112, 74212, 91108, 74210, 91106, 74230, 91126, 128532, 90494, 128530, 123924, 126004, 123922, 126002, 116788, 120948, 116786, 120946, 102516, 110836, 102514, 110834, 73972, 90612, 73970, 90610, 128522, 123914, 125978, 116762, 120890, 102458, 110714, 123552, 127320, 129198, 123536, 127308, 123528, 127302, 123524, 123522, 116128, 123608, 127342, 116112, 123596, 116104, 123590, 116100, 116098, 101280, 116184, 123630, 101264, 116172, 101256, 116166, 101252, 101250, 71584, 101336, 116206, 71568, 101324, 71560, 101318, 71556, 71554, 71640, 101358, 71628, 71622, 71662, 127824, 129452, 79352, 127816, 129446, 79100, 127812, 78974, 127810, 123472, 127276, 124624, 123464, 127270, 124616, 127846, 124612, 123458, 124610, 115920, 123500, 118224, 115912, 123494, 118216, 124646, 118212, 115906, 118210, 100816, 115948, 105424, 100808, 115942, 105416, 118246, 105412, 100802, 105410, 70608, 100844, 79824, 70600, 100838, 79816, 105446, 79812, 70594, 79810, 70636, 79852, 70630, 79846, 129960, 95728, 113404, 129956, 95480, 113278, 129954, 95356, 95294, 127784, 129430, 78588, 128872, 129974, 95996, 78462, 128868, 127778, 95870, 128866, 123432, 127254, 124520, 123428, 126696, 128886, 123426, 126692, 124514, 126690, 115816, 123446, 117992, 115812, 122344, 117988, 115810, 122340, 117986, 122338, 100584, 115830, 104936, 100580, 113640, 104932, 100578, 113636, 104930, 113634, 70120, 100598, 78824, 70116, 96232, 78820, 70114, 96228, 78818, 96226, 70134, 78838, 129940, 94968, 113022, 129938, 94844, 94782, 127764, 78206, 128820, 127762, 95102, 128818, 123412, 124468, 123410, 126580, 124466, 126578, 115764, 117876, 115762, 122100, 117874, 122098, 100468, 104692, 100466, 113140, 104690, 113138, 69876, 78324, 69874, 95220, 78322, 95218, 129930, 94588, 94526, 127754, 128794, 123402, 124442, 126522, 115738, 117818, 121978, 100410, 104570, 112890, 69754, 78074, 94714, 94398, 123216, 127148, 123208, 127142, 123204, 123202, 115408, 123244, 115400, 123238, 115396, 115394, 99792, 115436, 99784, 115430, 99780, 99778, 68560, 99820, 68552, 99814, 68548, 68546, 68588, 68582, 127400, 129238, 72444, 127396, 72318, 127394, 123176, 127126, 123752, 123172, 123748, 123170, 123746, 115304, 123190, 116456, 115300, 116452, 115298, 116450, 99560, 115318, 101864, 99556, 101860, 99554, 101858, 68072, 99574, 72680, 68068, 72676, 68066, 72674, 68086, 72694, 129492, 80632, 105854, 129490, 80508, 80446, 127380, 72062, 127924, 127378, 80766, 127922, 123156, 123700, 123154, 124788, 123698, 124786, 115252, 116340, 115250, 118516, 116338, 118514, 99444, 101620, 99442, 105972, 101618, 105970, 67828, 72180, 67826, 80884, 72178, 80882, 97008, 114044, 96888, 113982, 96828, 96798, 129482, 80252, 130010, 97148, 80190, 97086, 127370, 127898, 128954, 123146, 123674, 124730, 126842, 115226, 116282, 118394, 122618, 99386, 101498, 105722, 114170, 67706, 71930, 80378, 96632, 113854, 96572, 96542, 80062, 96702, 96444, 96414, 96350, 123048, 123044, 123042, 115048, 123062, 115044, 115042, 99048, 115062, 99044, 99042, 67048, 99062, 67044, 67042, 67062, 127188, 68990, 127186, 123028, 123316, 123026, 123314, 114996, 115572, 114994, 115570, 98932, 100084, 98930, 100082, 66804, 69108, 66802, 69106, 129258, 73084, 73022, 127178, 127450, 123018, 123290, 123834, 114970, 115514, 116602, 98874, 99962, 102138, 66682, 68858, 73210, 81272, 106174, 81212, 81182, 72894, 81342, 97648, 114364, 97592, 114334, 97564, 97550, 81084, 97724, 81054, 97694, 97464, 114270, 97436, 97422, 80990, 97502, 97372, 97358, 97326, 114868, 114866, 98676, 98674, 66292, 66290, 123098, 114842, 115130, 98618, 99194, 66170, 67322, 69310, 73404, 73374, 81592, 106334, 81564, 81550, 73310, 81630, 97968, 114524, 97944, 114510, 97932, 97926, 81500, 98012, 81486, 97998, 97880, 114478, 97868, 97862, 81454, 97902, 97836, 97830, 69470, 73564, 73550, 81752, 106414, 81740, 81734, 73518, 81774, 81708, 81702]), $a([109536, 120312, 86976, 109040, 120060, 86496, 108792, 119934, 86256, 108668, 86136, 129744, 89056, 110072, 129736, 88560, 109820, 129732, 88312, 109694, 129730, 88188, 128464, 129772, 89592, 128456, 129766, 89340, 128452, 89214, 128450, 125904, 128492, 125896, 128486, 125892, 125890, 120784, 125932, 120776, 125926, 120772, 120770, 110544, 120812, 110536, 120806, 110532, 84928, 108016, 119548, 84448, 107768, 119422, 84208, 107644, 84088, 107582, 84028, 129640, 85488, 108284, 129636, 85240, 108158, 129634, 85116, 85054, 128232, 129654, 85756, 128228, 85630, 128226, 125416, 128246, 125412, 125410, 119784, 125430, 119780, 119778, 108520, 119798, 108516, 108514, 83424, 107256, 119166, 83184, 107132, 83064, 107070, 83004, 82974, 129588, 83704, 107390, 129586, 83580, 83518, 128116, 83838, 128114, 125172, 125170, 119284, 119282, 107508, 107506, 82672, 106876, 82552, 106814, 82492, 82462, 129562, 82812, 82750, 128058, 125050, 119034, 82296, 106686, 82236, 82206, 82366, 82108, 82078, 76736, 103920, 117500, 76256, 103672, 117374, 76016, 103548, 75896, 103486, 75836, 129384, 77296, 104188, 129380, 77048, 104062, 129378, 76924, 76862, 127720, 129398, 77564, 127716, 77438, 127714, 124392, 127734, 124388, 124386, 117736, 124406, 117732, 117730, 104424, 117750, 104420, 104418, 112096, 121592, 126334, 92608, 111856, 121468, 92384, 111736, 121406, 92272, 111676, 92216, 111646, 92188, 75232, 103160, 117118, 93664, 74992, 103036, 93424, 112252, 102974, 93304, 74812, 93244, 74782, 93214, 129332, 75512, 103294, 129908, 129330, 93944, 75388, 129906, 93820, 75326, 93758, 127604, 75646, 128756, 127602, 94078, 128754, 124148, 126452, 124146, 126450, 117236, 121844, 117234, 121842, 103412, 103410, 91584, 111344, 121212, 91360, 111224, 121150, 91248, 111164, 91192, 111134, 91164, 91150, 74480, 102780, 91888, 74360, 102718, 91768, 111422, 91708, 74270, 91678, 129306, 74620, 129850, 92028, 74558, 91966, 127546, 128634, 124026, 126202, 116986, 121338, 102906, 90848, 110968, 121022, 90736, 110908, 90680, 110878, 90652, 90638, 74104, 102590, 91000, 74044, 90940, 74014, 90910, 74174, 91070, 90480, 110780, 90424, 110750, 90396, 90382, 73916, 90556, 73886, 90526, 90296, 110686, 90268, 90254, 73822, 90334, 90204, 90190, 71136, 101112, 116094, 70896, 100988, 70776, 100926, 70716, 70686, 129204, 71416, 101246, 129202, 71292, 71230, 127348, 71550, 127346, 123636, 123634, 116212, 116210, 101364, 101362, 79296, 105200, 118140, 79072, 105080, 118078, 78960, 105020, 78904, 104990, 78876, 78862, 70384, 100732, 79600, 70264, 100670, 79480, 105278, 79420, 70174, 79390, 129178, 70524, 129466, 79740, 70462, 79678, 127290, 127866, 123514, 124666, 115962, 118266, 100858, 113376, 122232, 126654, 95424, 113264, 122172, 95328, 113208, 122142, 95280, 113180, 95256, 113166, 95244, 78560, 104824, 117950, 95968, 78448, 104764, 95856, 113468, 104734, 95800, 78364, 95772, 78350, 95758, 70008, 100542, 78712, 69948, 96120, 78652, 69918, 96060, 78622, 96030, 70078, 78782, 96190, 94912, 113008, 122044, 94816, 112952, 122014, 94768, 112924, 94744, 112910, 94732, 94726, 78192, 104636, 95088, 78136, 104606, 95032, 113054, 95004, 78094, 94990, 69820, 78268, 69790, 95164, 78238, 95134, 94560, 112824, 121950, 94512, 112796, 94488, 112782, 94476, 94470, 78008, 104542, 94648, 77980, 94620, 77966, 94606, 69726, 78046, 94686, 94384, 112732, 94360, 112718, 94348, 94342, 77916, 94428, 77902, 94414, 94296, 112686, 94284, 94278, 77870, 94318, 94252, 94246, 68336, 99708, 68216, 99646, 68156, 68126, 68476, 68414, 127162, 123258, 115450, 99834, 72416, 101752, 116414, 72304, 101692, 72248, 101662, 72220, 72206, 67960, 99518, 72568, 67900, 72508, 67870, 72478, 68030, 72638, 80576, 105840, 118460, 80480, 105784, 118430, 80432, 105756, 80408, 105742, 80396, 80390, 72048, 101564, 80752, 71992, 101534, 80696, 71964, 80668, 71950, 80654, 67772, 72124, 67742, 80828, 72094, 80798, 114016, 122552, 126814, 96832, 113968, 122524, 96800, 113944, 122510, 96784, 113932, 96776, 113926, 96772, 80224, 105656, 118366, 97120, 80176, 105628, 97072, 114076, 105614, 97048, 80140, 97036, 80134, 97030, 71864, 101470, 80312, 71836, 97208, 80284, 71822, 97180, 80270, 97166, 67678, 71902, 80350, 97246, 96576, 113840, 122460, 96544, 113816, 122446, 96528, 113804, 96520, 113798, 96516, 96514, 80048, 105564, 96688, 80024, 105550, 96664, 113870, 96652, 80006, 96646, 71772, 80092, 71758, 96732, 80078, 96718, 96416, 113752, 122414, 96400, 113740, 96392, 113734, 96388, 96386, 79960, 105518, 96472, 79948, 96460, 79942, 96454, 71726, 79982, 96494, 96336, 113708, 96328, 113702, 96324, 96322, 79916, 96364, 79910, 96358, 96296, 113686, 96292, 96290, 79894, 96310, 66936, 99006, 66876, 66846, 67006, 68976, 100028, 68920, 99998, 68892, 68878, 66748, 69052, 66718, 69022, 73056, 102072, 116574, 73008, 102044, 72984, 102030, 72972, 72966, 68792, 99934, 73144, 68764, 73116, 68750, 73102, 66654, 68830, 73182, 81216, 106160, 118620, 81184, 106136, 118606, 81168, 106124, 81160, 106118, 81156, 81154, 72880, 101980, 81328, 72856, 101966, 81304, 106190, 81292, 72838, 81286, 68700, 72924, 68686, 81372, 72910, 81358, 114336, 122712, 126894, 114320, 122700, 114312, 122694, 114308, 114306, 81056, 106072, 118574, 97696, 81040, 106060, 97680, 114380, 106054, 97672, 81028, 97668, 81026, 97666, 72792, 101934, 81112, 72780, 97752, 81100, 72774, 97740, 81094, 97734, 68654, 72814, 81134, 97774, 114256, 122668, 114248, 122662, 114244, 114242, 80976, 106028, 97488, 80968, 106022, 97480, 114278, 97476, 80962, 97474, 72748, 81004, 72742, 97516, 80998, 97510, 114216, 122646, 114212, 114210, 80936, 106006, 97384, 80932, 97380, 80930, 97378, 72726, 80950, 97398, 114196, 114194, 80916, 97332, 80914, 97330, 66236, 66206, 67256, 99166, 67228, 67214, 66142, 67294, 69296, 100188, 69272, 100174, 69260, 69254, 67164, 69340, 67150, 69326, 73376, 102232, 116654, 73360, 102220, 73352, 102214, 73348, 73346, 69208, 100142, 73432, 102254, 73420, 69190, 73414, 67118, 69230, 73454, 106320, 118700, 106312, 118694, 106308, 106306, 73296, 102188, 81616, 106348, 102182, 81608, 73284, 81604, 73282, 81602, 69164, 73324, 69158, 81644, 73318, 81638, 122792, 126934, 122788, 122786, 106280, 118678, 114536, 106276, 114532, 106274, 114530, 73256, 102166, 81512, 73252, 98024, 81508, 73250, 98020, 81506, 98018, 69142, 73270, 81526, 98038, 122772, 122770, 106260, 114484, 106258, 114482, 73236, 81460, 73234, 97908, 81458, 97906, 122762, 106250, 114458, 73226, 81434, 97850, 66396, 66382, 67416, 99246, 67404, 67398, 66350, 67438, 69456, 100268, 69448, 100262, 69444, 69442, 67372, 69484, 67366, 69478, 102312, 116694, 102308, 102306, 69416, 100246, 73576, 102326, 73572, 69410, 73570, 67350, 69430, 73590, 118740, 118738, 102292, 106420, 102290, 106418, 69396, 73524, 69394, 81780, 73522, 81778, 118730, 102282, 106394, 69386, 73498, 81722, 66476, 66470, 67496, 99286, 67492, 67490, 66454, 67510, 100308, 100306, 67476, 69556, 67474, 69554, 116714])]); //#17152
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_pdf417.$ctx[id] = $_[id]); //#17152
        bwipp_pdf417.__17153__ = 1; //#17152
        $_ = Object.getPrototypeOf($_); //#17152
    } //#17152
    $_.cwtobits = function() {
        var _Gd = $get($_.clusters, $k[--$j]); //#17157
        $_.v = $get(_Gd, $k[--$j]); //#17157
        $k[$j++] = Infinity; //#17158
        for (var _Gg = 0, _Gh = 17; _Gg < _Gh; _Gg++) { //#17158
            $k[$j++] = 0; //#17158
        } //#17158
        var _Gk = $cvrs($s(17), $_.v, 2); //#17158
        for (var _Gl = 0, _Gm = _Gk.length; _Gl < _Gm; _Gl++) { //#17158
            $k[$j++] = $get(_Gk, _Gl) - 48; //#17158
        } //#17158
        var _Go = $a(); //#17158
        $k[$j++] = $geti(_Go, _Go.length - 17, 17); //#17159
    }; //#17159
    if ($_.compact) { //#17166
        $_.rwid = $f(($f(($f((17 * $_.c) + 17)) + 17)) + 1); //#17164
    } else { //#17166
        $_.rwid = $f(($f(($f(($f((17 * $_.c) + 17)) + 17)) + 17)) + 18); //#17166
    } //#17166
    $_.pixs = $a($_.rwid * $_.r); //#17168
    for (var _Gy = 0, _Gx = $_.r - 1; _Gy <= _Gx; _Gy += 1) { //#17198
        $_.i = _Gy; //#17171
        if (($_.i % 3) == 0) { //#17176
            $_.lcw = ((~~($_.i / 3)) * 30) + (~~(($_.r - 1) / 3)); //#17174
            $_.rcw = $f(($f(((~~($_.i / 3)) * 30) + $_.c)) - 1); //#17175
        } //#17175
        if (($_.i % 3) == 1) { //#17180
            $_.lcw = (((~~($_.i / 3)) * 30) + ($_.eclevel * 3)) + (($_.r - 1) % 3); //#17178
            $_.rcw = ((~~($_.i / 3)) * 30) + (~~(($_.r - 1) / 3)); //#17179
        } //#17179
        if (($_.i % 3) == 2) { //#17184
            $_.lcw = $f(($f(((~~($_.i / 3)) * 30) + $_.c)) - 1); //#17182
            $_.rcw = (((~~($_.i / 3)) * 30) + ($_.eclevel * 3)) + (($_.r - 1) % 3); //#17183
        } //#17183
        $k[$j++] = $_.pixs; //#17194
        $k[$j++] = $_.rwid * $_.i; //#17194
        $k[$j++] = Infinity; //#17194
        $k[$j++] = 1; //#17188
        $k[$j++] = 1; //#17188
        $k[$j++] = 1; //#17188
        $k[$j++] = 1; //#17188
        $k[$j++] = 1; //#17188
        $k[$j++] = 1; //#17188
        $k[$j++] = 1; //#17188
        $k[$j++] = 1; //#17188
        $k[$j++] = 0; //#17188
        $k[$j++] = 1; //#17188
        $k[$j++] = 0; //#17188
        $k[$j++] = 1; //#17188
        $k[$j++] = 0; //#17188
        $k[$j++] = 1; //#17188
        $k[$j++] = 0; //#17188
        $k[$j++] = 0; //#17188
        $k[$j++] = 0; //#17188
        $k[$j++] = $_.lcw; //#17188
        $k[$j++] = $_.i % 3; //#17188
        $_.cwtobits(); //#17188
        $forall($k[--$j]); //#17188
        var _HQ = $geti($_.cws, $_.c * $_.i, $_.c); //#17189
        for (var _HR = 0, _HS = _HQ.length; _HR < _HS; _HR++) { //#17189
            $k[$j++] = $get(_HQ, _HR); //#17189
            $k[$j++] = $_.i % 3; //#17189
            $_.cwtobits(); //#17189
            $forall($k[--$j]); //#17189
        } //#17189
        if ($_.compact) { //#17194
            $k[$j++] = 1; //#17191
        } else { //#17194
            $k[$j++] = $_.rcw; //#17193
            $k[$j++] = $_.i % 3; //#17193
            $_.cwtobits(); //#17193
            $forall($k[--$j]); //#17193
            $k[$j++] = 1; //#17194
            $k[$j++] = 1; //#17194
            $k[$j++] = 1; //#17194
            $k[$j++] = 1; //#17194
            $k[$j++] = 1; //#17194
            $k[$j++] = 1; //#17194
            $k[$j++] = 1; //#17194
            $k[$j++] = 0; //#17194
            $k[$j++] = 1; //#17194
            $k[$j++] = 0; //#17194
            $k[$j++] = 0; //#17194
            $k[$j++] = 0; //#17194
            $k[$j++] = 1; //#17194
            $k[$j++] = 0; //#17194
            $k[$j++] = 1; //#17194
            $k[$j++] = 0; //#17194
            $k[$j++] = 0; //#17194
            $k[$j++] = 1; //#17194
        } //#17194
        var _Ha = $a(); //#17194
        var _Hb = $k[--$j]; //#17196
        $puti($k[--$j], _Hb, _Ha); //#17196
    } //#17196
    var _Hk = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $_.pixs],
        ["pixx", $_.rwid],
        ["pixy", $_.r],
        ["height", ($_.r / 72) * $_.rowmult],
        ["width", $_.rwid / 72],
        ["opt", $_.options]
    ]); //#17208
    $k[$j++] = _Hk; //#17211
    if (!$_.dontdraw) { //#17211
        bwipp_renmatrix(); //#17211
    } //#17211
    $_ = Object.getPrototypeOf($_); //#17213
    $_ = Object.getPrototypeOf($_); //#17215
}

function bwipp_pdf417compact() {
    $_ = Object.create($_); //#17244
    $_.dontdraw = false; //#17247
    $k[$j++] = $_; //#17249
    bwipp_processoptions(); //#17249
    $_.options = $k[--$j]; //#17249
    $_.barcode = $k[--$j]; //#17250
    $put($_.options, "dontdraw", true); //#17253
    $put($_.options, "compact", true); //#17254
    $k[$j++] = 'args'; //#17256
    $k[$j++] = $_.barcode; //#17256
    $k[$j++] = $_.options; //#17256
    bwipp_pdf417(); //#17256
    var _6 = $k[--$j]; //#17256
    $_[$k[--$j]] = _6; //#17256
    $put($_.args, "opt", $_.options); //#17258
    $k[$j++] = $_.args; //#17261
    if (!$_.dontdraw) { //#17261
        bwipp_renmatrix(); //#17261
    } //#17261
    $_ = Object.getPrototypeOf($_); //#17263
}

function bwipp_micropdf417() {
    $_ = Object.create($_); //#17294
    $_.dontdraw = false; //#17297
    $_.version = "unset"; //#17298
    $_.columns = 0; //#17299
    $_.rows = 0; //#17300
    $_.rowmult = 2; //#17301
    $_.cca = false; //#17302
    $_.ccb = false; //#17303
    $_.raw = false; //#17304
    $_.parse = false; //#17305
    $_.parsefnc = false; //#17306
    $k[$j++] = $_; //#17308
    bwipp_processoptions(); //#17308
    $_.options = $k[--$j]; //#17308
    $_.barcode = $k[--$j]; //#17309
    if ($eq($_.barcode, "")) { //#17313
        $k[$j++] = 'bwipp.micropdf417emptyData#17312'; //#17312
        $k[$j++] = "The data must not be empty"; //#17312
        bwipp_raiseerror(); //#17312
    } //#17312
    if ($_.rowmult <= 0) { //#17317
        $k[$j++] = 'bwipp.micropdf417badRowMult#17316'; //#17316
        $k[$j++] = "The row multiplier must be greater than zero"; //#17316
        bwipp_raiseerror(); //#17316
    } //#17316
    if (($_.cca && $_.ccb) || (($_.cca && $_.raw) || ($_.ccb && $_.raw))) { //#17321
        $k[$j++] = 'bwipp.micropdf417ccaAndCcb#17320'; //#17320
        $k[$j++] = "Cannot combine cca, ccb and raw"; //#17320
        bwipp_raiseerror(); //#17320
    } //#17320
    if ($ne($_.version, "unset")) { //#17342
        $search($_.version, "x"); //#17325
        if ($k[--$j]) { //#17340
            var _D = $k[--$j]; //#17326
            var _E = $k[--$j]; //#17326
            $k[$j++] = _D; //#17326
            $k[$j++] = _E; //#17326
            $j--; //#17326
            var _F = $k[--$j]; //#17327
            var _G = $k[--$j]; //#17327
            $k[$j++] = _G; //#17327
            $k[$j++] = _F; //#17327
            $k[$j++] = _G; //#17327
            $k[$j++] = _F; //#17327
            $astore($a(2)); //#17327
            $forall($k[--$j], function() { //#17336
                var _J = $k[--$j]; //#17329
                $k[$j++] = _J; //#17329
                $k[$j++] = true; //#17329
                if (_J.length == 0) { //#17329
                    $j--; //#17329
                    $k[$j++] = false; //#17329
                } //#17329
                var _K = $k[--$j]; //#17330
                var _L = $k[--$j]; //#17330
                $k[$j++] = _K; //#17332
                $forall(_L, function() { //#17332
                    var _M = $k[--$j]; //#17331
                    if ((_M < 48) || (_M > 57)) { //#17331
                        $j--; //#17331
                        $k[$j++] = false; //#17331
                    } //#17331
                }); //#17331
                if ($nt($k[--$j])) { //#17335
                    $k[$j++] = 'bwipp.micropdf417BadVersionBadRowOrColumn#17334'; //#17334
                    $k[$j++] = "version must be formatted as RxC"; //#17334
                    bwipp_raiseerror(); //#17334
                } //#17334
            }); //#17334
            $_.rows = $cvi($k[--$j]); //#17337
            $_.columns = $cvi($k[--$j]); //#17338
        } else { //#17340
            $j--; //#17340
            $k[$j++] = 'bwipp.micropdf417badVersionFormat#17340'; //#17340
            $k[$j++] = "version must be formatted as RxC"; //#17340
            bwipp_raiseerror(); //#17340
        } //#17340
    } //#17340
    bwipp_loadctx(bwipp_micropdf417) //#17344
    if (!bwipp_micropdf417.__17431__) { //#17431
        $_ = Object.create($_); //#17431
        $_.T = 0; //#17348
        $_.N = 1; //#17348
        $_.B = 2; //#17348
        $_.A = 0; //#17349
        $_.L = 1; //#17349
        $_.M = 2; //#17349
        $_.P = 3; //#17349
        $_.tl = -1; //#17352
        $_.nl = -2; //#17352
        $_.bl = -3; //#17352
        $_.bl6 = -4; //#17352
        $_.bs = -5; //#17352
        $_.al = -6; //#17355
        $_.ll = -7; //#17355
        $_.ml = -8; //#17355
        $_.pl = -9; //#17355
        $_.as = -10; //#17355
        $_.ps = -11; //#17355
        $_.charmaps = $a([$a(["A", "a", "0", ";"]), $a(["B", "b", "1", "<"]), $a(["C", "c", "2", ">"]), $a(["D", "d", "3", "@"]), $a(["E", "e", "4", "["]), $a(["F", "f", "5", 92]), $a(["G", "g", "6", "]"]), $a(["H", "h", "7", "_"]), $a(["I", "i", "8", "`"]), $a(["J", "j", "9", "~"]), $a(["K", "k", "&", "!"]), $a(["L", "l", 13, 13]), $a(["M", "m", 9, 9]), $a(["N", "n", ",", ","]), $a(["O", "o", ":", ":"]), $a(["P", "p", "#", 10]), $a(["Q", "q", "-", "-"]), $a(["R", "r", ".", "."]), $a(["S", "s", "$", "$"]), $a(["T", "t", "/", "/"]), $a(["U", "u", "+", "\""]), $a(["V", "v", "%", "|"]), $a(["W", "w", "*", "*"]), $a(["X", "x", "=", 40]), $a(["Y", "y", "^", 41]), $a(["Z", "z", $_.pl, "?"]), $a([" ", " ", " ", "{"]), $a([$_.ll, $_.as, $_.ll, "}"]), $a([$_.ml, $_.ml, $_.al, "'"]), $a([$_.ps, $_.ps, $_.ps, $_.al])]); //#17390
        $_.charvals = $a([new Map, new Map, new Map, new Map]); //#17393
        $_.alltext = new Map; //#17394
        for (var _19 = 0, _18 = $_.charmaps.length - 1; _19 <= _18; _19 += 1) { //#17404
            $_.i = _19; //#17396
            $_.encs = $get($_.charmaps, $_.i); //#17397
            for (var _1D = 0; _1D <= 3; _1D += 1) { //#17403
                $_.j = _1D; //#17399
                var _1G = $get($_.encs, $_.j); //#17400
                $k[$j++] = _1G; //#17400
                if ($eq($type(_1G), 'stringtype')) { //#17400
                    var _1J = $get($k[--$j], 0); //#17400
                    $k[$j++] = _1J; //#17400
                } //#17400
                var _1K = $k[--$j]; //#17401
                $put($get($_.charvals, $_.j), _1K, $_.i); //#17401
                $put($_.alltext, _1K, -1); //#17402
            } //#17402
        } //#17402
        $_.e = 10000; //#17406
        $_.latlen = $a([$a([0, 1, 1, 2]), $a([2, 0, 1, 2]), $a([1, 1, 0, 1]), $a([1, 2, 2, 0])]); //#17414
        $_.latseq = $a([$a([$a([]), $a([$_.ll]), $a([$_.ml]), $a([$_.ml, $_.pl])]), $a([$a([$_.ml, $_.al]), $a([]), $a([$_.ml]), $a([$_.ml, $_.pl])]), $a([$a([$_.al]), $a([$_.ll]), $a([]), $a([$_.pl])]), $a([$a([$_.al]), $a([$_.al, $_.ll]), $a([$_.al, $_.ml]), $a([])])]); //#17422
        $_.shftlen = $a([$a([$_.e, $_.e, $_.e, 1]), $a([1, $_.e, $_.e, 1]), $a([$_.e, $_.e, $_.e, 1]), $a([$_.e, $_.e, $_.e, $_.e])]); //#17430
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_micropdf417.$ctx[id] = $_[id]); //#17430
        bwipp_micropdf417.__17431__ = 1; //#17430
        $_ = Object.getPrototypeOf($_); //#17430
    } //#17430
    if ($_.raw || $_.cca) { //#17452
        $_.datcws = $a($_.barcode.length); //#17435
        $_.i = 0; //#17436
        $_.j = 0; //#17436
        for (;;) { //#17447
            if ($_.i >= ($_.barcode.length - 3)) { //#17438
                break; //#17438
            } //#17438
            if ($get($_.barcode, $_.i) != 94) { //#17439
                break; //#17439
            } //#17439
            var _2a = $geti($_.barcode, $_.i + 1, 3); //#17440
            $k[$j++] = _2a; //#17442
            $k[$j++] = false; //#17442
            for (var _2b = 0, _2c = _2a.length; _2b < _2c; _2b++) { //#17442
                var _2d = $get(_2a, _2b); //#17442
                if ((_2d < 48) || (_2d > 57)) { //#17441
                    $j--; //#17441
                    $k[$j++] = true; //#17441
                } //#17441
            } //#17441
            if ($k[--$j]) { //#17442
                $j--; //#17442
                break; //#17442
            } //#17442
            $_.cw = $cvi($k[--$j]); //#17443
            $put($_.datcws, $_.j, $_.cw); //#17444
            $_.i = $_.i + 4; //#17445
            $_.j = $_.j + 1; //#17446
        } //#17446
        if ($_.i != $_.barcode.length) { //#17450
            $k[$j++] = 'bwipp.micropdf417badCcaRawFormat#17449'; //#17449
            $k[$j++] = "cca and raw data must be formatted as ^NNN"; //#17449
            bwipp_raiseerror(); //#17449
        } //#17449
        $_.datcws = $geti($_.datcws, 0, $_.j); //#17451
    } //#17451
    $_.encb = function() {
        $_.in = $k[--$j]; //#17455
        $_.inlen = $_.in.length; //#17456
        $_.out = $a(((~~($_.inlen / 6)) * 5) + ($_.inlen % 6)); //#17457
        for (var _2x = 0, _2w = (~~($_.inlen / 6)) - 1; _2x <= _2w; _2x += 1) { //#17480
            $_.k = _2x; //#17459
            $k[$j++] = Infinity; //#17460
            $aload($geti($_.in, $_.k * 6, 3)); //#17460
            $_.msbs = $a(); //#17460
            $k[$j++] = Infinity; //#17463
            $aload($_.msbs); //#17462
            var _33 = $k[--$j]; //#17462
            var _34 = $k[--$j]; //#17462
            var _35 = $k[--$j]; //#17462
            $k[$j++] = $f(($f(_33 + (_34 * 256))) + (_35 * 65536)); //#17463
            for (var _36 = 0, _37 = 3; _36 < _37; _36++) { //#17463
                var _38 = $k[--$j]; //#17463
                $k[$j++] = _38 % 900; //#17463
                $k[$j++] = ~~(_38 / 900); //#17463
            } //#17463
            $_.mscs = $a(); //#17463
            $k[$j++] = Infinity; //#17465
            $aload($geti($_.in, ($_.k * 6) + 3, 3)); //#17465
            $_.lsbs = $a(); //#17465
            $k[$j++] = Infinity; //#17468
            $aload($_.lsbs); //#17467
            var _3F = $k[--$j]; //#17467
            var _3G = $k[--$j]; //#17467
            var _3H = $k[--$j]; //#17467
            $k[$j++] = $f(($f(_3F + (_3G * 256))) + (_3H * 65536)); //#17468
            for (var _3I = 0, _3J = 3; _3I < _3J; _3I++) { //#17468
                var _3K = $k[--$j]; //#17468
                $k[$j++] = _3K % 900; //#17468
                $k[$j++] = ~~(_3K / 900); //#17468
            } //#17468
            $_.lscs = $a(); //#17468
            var _3N = $get($_.lscs, 0); //#17470
            var _3P = $get($_.mscs, 0); //#17470
            $put($_.out, ($_.k * 5) + 4, ($f(_3N + (_3P * 316))) % 900); //#17471
            var _3T = $get($_.lscs, 1); //#17472
            var _3V = $get($_.mscs, 0); //#17472
            var _3X = $get($_.mscs, 1); //#17472
            $put($_.out, ($_.k * 5) + 3, ($f(($f(($f((~~(($f(_3N + (_3P * 316))) / 900)) + _3T)) + (_3V * 641))) + (_3X * 316))) % 900); //#17473
            var _3b = $get($_.lscs, 2); //#17474
            var _3d = $get($_.mscs, 0); //#17474
            var _3f = $get($_.mscs, 1); //#17474
            var _3h = $get($_.mscs, 2); //#17474
            $put($_.out, ($_.k * 5) + 2, ($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_3N + (_3P * 316))) / 900)) + _3T)) + (_3V * 641))) + (_3X * 316))) / 900)) + _3b)) + (_3d * 20))) + (_3f * 641))) + (_3h * 316))) % 900); //#17475
            var _3l = $get($_.lscs, 3); //#17476
            var _3n = $get($_.mscs, 1); //#17476
            var _3p = $get($_.mscs, 2); //#17476
            $put($_.out, ($_.k * 5) + 1, ($f(($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_3N + (_3P * 316))) / 900)) + _3T)) + (_3V * 641))) + (_3X * 316))) / 900)) + _3b)) + (_3d * 20))) + (_3f * 641))) + (_3h * 316))) / 900)) + _3l)) + (_3n * 20))) + (_3p * 641))) % 900); //#17477
            $put($_.out, $_.k * 5, ($f((~~(($f(($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_3N + (_3P * 316))) / 900)) + _3T)) + (_3V * 641))) + (_3X * 316))) / 900)) + _3b)) + (_3d * 20))) + (_3f * 641))) + (_3h * 316))) / 900)) + _3l)) + (_3n * 20))) + (_3p * 641))) / 900)) + ($get($_.mscs, 2) * 20))) % 900); //#17479
        } //#17479
        $_.rem = $_.inlen % 6; //#17481
        if ($_.rem != 0) { //#17486
            $k[$j++] = $_.out; //#17484
            $k[$j++] = $_.out.length - $_.rem; //#17484
            $k[$j++] = Infinity; //#17484
            $aload($geti($_.in, $_.inlen - $_.rem, $_.rem)); //#17484
            var _46 = $a(); //#17484
            var _47 = $k[--$j]; //#17485
            $puti($k[--$j], _47, _46); //#17485
        } //#17485
        $k[$j++] = $_.out; //#17487
    }; //#17487
    if ($_.ccb) { //#17496
        $_.barlen = $_.barcode.length; //#17491
        $_.datcws = $a((((~~($_.barlen / 6)) * 5) + ($_.barlen % 6)) + 2); //#17492
        $put($_.datcws, 0, 920); //#17493
        var _4I = (($_.barlen % 6) == 0) ? 924 : 901; //#17494
        $put($_.datcws, 1, _4I); //#17494
        $k[$j++] = $_.datcws; //#17495
        $k[$j++] = 2; //#17495
        $k[$j++] = Infinity; //#17495
        $forall($_.barcode); //#17495
        var _4L = $a(); //#17495
        $k[$j++] = _4L; //#17495
        $_.encb(); //#17495
        var _4M = $k[--$j]; //#17495
        var _4N = $k[--$j]; //#17495
        $puti($k[--$j], _4N, _4M); //#17495
    } //#17495
    if (((!$_.raw) && (!$_.cca)) && (!$_.ccb)) { //#17852
        var _4U = new Map([
            ["parse", $_.parse],
            ["parsefnc", $_.parsefnc],
            ["eci", true]
        ]); //#17504
        $_.fncvals = _4U; //#17506
        $k[$j++] = 'msg'; //#17507
        $k[$j++] = $_.barcode; //#17507
        $k[$j++] = $_.fncvals; //#17507
        bwipp_parseinput(); //#17507
        var _4X = $k[--$j]; //#17507
        $_[$k[--$j]] = _4X; //#17507
        $_.msglen = $_.msg.length; //#17508
        $k[$j++] = Infinity; //#17511
        for (var _4b = 0, _4c = $_.msglen; _4b < _4c; _4b++) { //#17511
            $k[$j++] = 0; //#17511
        } //#17511
        $k[$j++] = 0; //#17511
        $_.numdigits = $a(); //#17511
        $k[$j++] = Infinity; //#17512
        for (var _4f = 0, _4g = $_.msglen; _4f < _4g; _4f++) { //#17512
            $k[$j++] = 0; //#17512
        } //#17512
        $k[$j++] = 0; //#17512
        $_.numtext = $a(); //#17512
        $k[$j++] = Infinity; //#17513
        for (var _4j = 0, _4k = $_.msglen; _4j < _4k; _4j++) { //#17513
            $k[$j++] = 0; //#17513
        } //#17513
        $k[$j++] = 0; //#17513
        $_.numbytes = $a(); //#17513
        $k[$j++] = Infinity; //#17514
        for (var _4n = 0, _4o = $_.msglen; _4n < _4o; _4n++) { //#17514
            $k[$j++] = 0; //#17514
        } //#17514
        $_.iseci = $a(); //#17514
        for (var _4r = $_.msglen - 1; _4r >= 0; _4r -= 1) { //#17527
            $_.i = _4r; //#17516
            var _4u = $get($_.msg, $_.i); //#17517
            if ((_4u >= 48) && (_4u <= 57)) { //#17519
                $put($_.numdigits, $_.i, $f($get($_.numdigits, $_.i + 1) + 1)); //#17518
            } //#17518
            var _54 = $get($_.alltext, $get($_.msg, $_.i)) !== undefined; //#17520
            if (_54 && ($get($_.numdigits, $_.i) < 13)) { //#17522
                $put($_.numtext, $_.i, $f($get($_.numtext, $_.i + 1) + 1)); //#17521
            } //#17521
            if ((($get($_.msg, $_.i) >= 0) && ($get($_.numtext, $_.i) < 5)) && ($get($_.numdigits, $_.i) < 13)) { //#17525
                $put($_.numbytes, $_.i, $f($get($_.numbytes, $_.i + 1) + 1)); //#17524
            } //#17524
            $put($_.iseci, $_.i, $get($_.msg, $_.i) <= -1000000); //#17526
        } //#17526
        $_.numdigits = $geti($_.numdigits, 0, $_.msglen); //#17528
        $_.numtext = $geti($_.numtext, 0, $_.msglen); //#17529
        $_.numbytes = $geti($_.numbytes, 0, $_.msglen); //#17530
        $_.seq = $a([]); //#17532
        $_.seqlen = 0; //#17532
        $_.state = $_.B; //#17532
        $_.p = 0; //#17532
        for (;;) { //#17586
            if ($_.p == $_.msglen) { //#17533
                break; //#17533
            } //#17533
            if ($get($_.iseci, $_.p)) { //#17584
                $_.eci = $get($_.msg, $_.p); //#17535
                $k[$j++] = Infinity; //#17538
                $aload($_.seq); //#17537
                $k[$j++] = $a([$_.eci]); //#17538
                $_.seq = $a(); //#17538
                $_.p = $_.p + 1; //#17540
                $k[$j++] = 'seqlen'; //#17541
                $k[$j++] = $_.seqlen; //#17541
                if ($_.eci <= -1810900) { //#17541
                    $k[$j++] = 2; //#17541
                } else { //#17541
                    var _5x = ($_.eci <= -1000900) ? 3 : 2; //#17541
                    $k[$j++] = _5x; //#17541
                } //#17541
                var _5y = $k[--$j]; //#17541
                var _5z = $k[--$j]; //#17541
                $_[$k[--$j]] = $f(_5z + _5y); //#17541
            } else { //#17584
                $_.n = $get($_.numdigits, $_.p); //#17543
                if (($_.n >= 13) || (($_.n == $_.msglen) && ($_.n >= 8))) { //#17584
                    $k[$j++] = Infinity; //#17548
                    $aload($_.seq); //#17546
                    $k[$j++] = $_.nl; //#17548
                    $k[$j++] = Infinity; //#17548
                    $aload($geti($_.msg, $_.p, $_.n)); //#17548
                    var _6E = $a(); //#17548
                    $k[$j++] = _6E; //#17548
                    $_.seq = $a(); //#17548
                    $_.state = $_.N; //#17550
                    $_.p = $f($_.p + $_.n); //#17551
                    $_.seqlen = $f(($_.seqlen + 1) + $_.n); //#17552
                } else { //#17584
                    $_.t = $get($_.numtext, $_.p); //#17554
                    if ($_.t >= 5) { //#17584
                        $k[$j++] = Infinity; //#17561
                        $aload($_.seq); //#17557
                        if ($_.state != $_.T) { //#17560
                            $k[$j++] = $_.tl; //#17559
                        } //#17559
                        $k[$j++] = Infinity; //#17561
                        $aload($geti($_.msg, $_.p, $_.t)); //#17561
                        var _6X = $a(); //#17561
                        $k[$j++] = _6X; //#17561
                        $_.seq = $a(); //#17561
                        $_.state = $_.T; //#17563
                        $_.p = $f($_.p + $_.t); //#17564
                        $_.seqlen = $f($f($_.seqlen + 1) + $_.t); //#17565
                    } else { //#17584
                        $_.b = $get($_.numbytes, $_.p); //#17567
                        if (($_.b == 1) && ($_.state == $_.T)) { //#17584
                            $k[$j++] = Infinity; //#17572
                            $aload($_.seq); //#17570
                            $k[$j++] = $_.bs; //#17572
                            $k[$j++] = $a([$get($_.msg, $_.p)]); //#17572
                            $_.seq = $a(); //#17572
                            $_.p = $f($_.p + $_.b); //#17574
                            $_.seqlen = $f($_.seqlen + 2); //#17575
                        } else { //#17584
                            $k[$j++] = Infinity; //#17580
                            $aload($_.seq); //#17578
                            var _6w = (($_.b % 6) != 0) ? $_.bl : $_.bl6; //#17579
                            $k[$j++] = _6w; //#17580
                            $k[$j++] = Infinity; //#17580
                            $aload($geti($_.msg, $_.p, $_.b)); //#17580
                            var _71 = $a(); //#17580
                            $k[$j++] = _71; //#17580
                            $_.seq = $a(); //#17580
                            $_.state = $_.B; //#17582
                            $_.p = $f($_.p + $_.b); //#17583
                            $_.seqlen = $f($f($_.seqlen + 1) + $_.b); //#17584
                        } //#17584
                    } //#17584
                } //#17584
            } //#17584
        } //#17584
        $k[$j++] = Infinity; //#17589
        $k[$j++] = $_.tl; //#17589
        $k[$j++] = 900; //#17589
        $k[$j++] = $_.bl; //#17589
        $k[$j++] = 901; //#17589
        $k[$j++] = $_.bl6; //#17589
        $k[$j++] = 924; //#17589
        $k[$j++] = $_.nl; //#17589
        $k[$j++] = 902; //#17589
        $k[$j++] = $_.bs; //#17589
        $k[$j++] = 913; //#17589
        $_.latchcws = $d(); //#17590
        $_.enca = function() {
            var _7I = $get($get($_.charvals, $_.A), $k[--$j]); //#17593
            $k[$j++] = _7I; //#17593
        }; //#17593
        $_.encl = function() {
            var _7N = $get($get($_.charvals, $_.L), $k[--$j]); //#17594
            $k[$j++] = _7N; //#17594
        }; //#17594
        $_.encm = function() {
            var _7S = $get($get($_.charvals, $_.M), $k[--$j]); //#17595
            $k[$j++] = _7S; //#17595
        }; //#17595
        $_.encp = function() {
            var _7X = $get($get($_.charvals, $_.P), $k[--$j]); //#17596
            $k[$j++] = _7X; //#17596
        }; //#17596
        $_.textencfuncs = $a(['enca', 'encl', 'encm', 'encp']); //#17597
        $_.addtotext = function() {
            $put($_.text, $_.l, $k[--$j]); //#17600
            $_.l = $_.l + 1; //#17601
        }; //#17601
        $_.enct = function() {
            $_.in = $k[--$j]; //#17606
            $_.curlen = $a([$_.e, $_.e, $_.e, $_.e]); //#17608
            $put($_.curlen, $_.submode, 0); //#17609
            $_.curseq = $a([$a([]), $a([]), $a([]), $a([])]); //#17610
            $forall($_.in, function() { //#17680
                $_.char = $k[--$j]; //#17615
                for (;;) { //#17636
                    $_.imp = false; //#17619
                    var _7w = $a([$_.A, $_.L, $_.M, $_.P]); //#17620
                    for (var _7x = 0, _7y = _7w.length; _7x < _7y; _7x++) { //#17634
                        $_.x = $get(_7w, _7x); //#17621
                        var _84 = $a([$_.A, $_.L, $_.M, $_.P]); //#17622
                        for (var _85 = 0, _86 = _84.length; _85 < _86; _85++) { //#17633
                            $_.y = $get(_84, _85); //#17623
                            $_.cost = $f($get($_.curlen, $_.x) + $get($get($_.latlen, $_.x), $_.y)); //#17624
                            if ($_.cost < $get($_.curlen, $_.y)) { //#17632
                                $put($_.curlen, $_.y, $_.cost); //#17626
                                $k[$j++] = $_.curseq; //#17629
                                $k[$j++] = $_.y; //#17629
                                $k[$j++] = Infinity; //#17629
                                $aload($get($_.curseq, $_.x)); //#17628
                                $aload($get($get($_.latseq, $_.x), $_.y)); //#17629
                                var _8X = $a(); //#17629
                                var _8Y = $k[--$j]; //#17630
                                $put($k[--$j], _8Y, _8X); //#17630
                                $_.imp = true; //#17631
                            } //#17631
                        } //#17631
                    } //#17631
                    if (!$_.imp) { //#17635
                        break; //#17635
                    } //#17635
                } //#17635
                $_.nxtlen = $a([$_.e, $_.e, $_.e, $_.e]); //#17639
                $_.nxtseq = $a(4); //#17640
                var _8l = $a([$_.A, $_.L, $_.M, $_.P]); //#17642
                for (var _8m = 0, _8n = _8l.length; _8m < _8n; _8m++) { //#17675
                    $_.x = $get(_8l, _8m); //#17643
                    for (;;) { //#17673
                        var _8t = $get($get($_.charvals, $_.x), $_.char) !== undefined; //#17647
                        if (!_8t) { //#17647
                            break; //#17647
                        } //#17647
                        $_.cost = $f($get($_.curlen, $_.x) + 1); //#17650
                        if ($_.cost < $get($_.nxtlen, $_.x)) { //#17654
                            $put($_.nxtlen, $_.x, $_.cost); //#17652
                            $k[$j++] = $_.nxtseq; //#17653
                            $k[$j++] = $_.x; //#17653
                            $k[$j++] = Infinity; //#17653
                            $aload($get($_.curseq, $_.x)); //#17653
                            $k[$j++] = $_.char; //#17653
                            var _9A = $a(); //#17653
                            var _9B = $k[--$j]; //#17653
                            $put($k[--$j], _9B, _9A); //#17653
                        } //#17653
                        var _9H = $a([$_.A, $_.L, $_.M, $_.P]); //#17657
                        for (var _9I = 0, _9J = _9H.length; _9I < _9J; _9I++) { //#17670
                            $_.y = $get(_9H, _9I); //#17658
                            if ($ne($_.x, $_.y)) { //#17669
                                $_.cost = $f($f($get($_.curlen, $_.y) + $get($get($_.shftlen, $_.y), $_.x)) + 1); //#17660
                                if ($_.cost < $get($_.nxtlen, $_.y)) { //#17668
                                    $put($_.nxtlen, $_.y, $_.cost); //#17662
                                    $k[$j++] = $_.nxtseq; //#17666
                                    $k[$j++] = $_.y; //#17666
                                    $k[$j++] = Infinity; //#17666
                                    $aload($get($_.curseq, $_.y)); //#17664
                                    var _9j = ($_.x == $_.A) ? $_.as : $_.ps; //#17665
                                    $k[$j++] = _9j; //#17666
                                    $k[$j++] = $_.char; //#17666
                                    var _9l = $a(); //#17666
                                    var _9m = $k[--$j]; //#17667
                                    $put($k[--$j], _9m, _9l); //#17667
                                } //#17667
                            } //#17667
                        } //#17667
                        break; //#17672
                    } //#17672
                } //#17672
                $_.curlen = $_.nxtlen; //#17677
                $_.curseq = $_.nxtseq; //#17678
            }); //#17678
            $_.minseq = $_.e; //#17683
            var _9v = $a([$_.A, $_.L, $_.M, $_.P]); //#17684
            for (var _9w = 0, _9x = _9v.length; _9w < _9x; _9w++) { //#17690
                $_.k = $get(_9v, _9w); //#17685
                if ($get($_.curlen, $_.k) < $_.minseq) { //#17689
                    $_.minseq = $get($_.curlen, $_.k); //#17687
                    $_.txtseq = $get($_.curseq, $_.k); //#17688
                } //#17688
            } //#17688
            $_.text = $a($_.minseq); //#17693
            $_.k = 0; //#17694
            $_.l = 0; //#17694
            for (;;) { //#17714
                if ($_.k >= $_.txtseq.length) { //#17695
                    break; //#17695
                } //#17695
                $_.char = $get($_.txtseq, $_.k); //#17697
                $k[$j++] = $_.char; //#17700
                if ($_[$get($_.textencfuncs, $_.submode)]() === true) {
                    break;
                } //#17700
                $_.addtotext(); //#17700
                $_.k = $_.k + 1; //#17701
                if (($_.char == $_.as) || ($_.char == $_.ps)) { //#17707
                    $k[$j++] = $get($_.txtseq, $_.k); //#17705
                    if ($_.char == $_.as) { //#17705
                        $_.enca(); //#17705
                    } else { //#17705
                        $_.encp(); //#17705
                    } //#17705
                    $_.addtotext(); //#17705
                    $_.k = $_.k + 1; //#17706
                } //#17706
                if ($_.char == $_.al) { //#17710
                    $_.submode = $_.A; //#17710
                } //#17710
                if ($_.char == $_.ll) { //#17711
                    $_.submode = $_.L; //#17711
                } //#17711
                if ($_.char == $_.ml) { //#17712
                    $_.submode = $_.M; //#17712
                } //#17712
                if ($_.char == $_.pl) { //#17713
                    $_.submode = $_.P; //#17713
                } //#17713
            } //#17713
            if (($_.text.length % 2) == 1) { //#17761
                if ($_.submode == $_.P) { //#17757
                    $k[$j++] = 'pad'; //#17718
                    $k[$j++] = $_.al; //#17718
                    $_.encp(); //#17718
                    var _Am = $k[--$j]; //#17718
                    $_[$k[--$j]] = _Am; //#17718
                    $_.submode = $_.A; //#17719
                } else { //#17757
                    $_.nextecitext = false; //#17722
                    for (var _As = $_.i + 1, _Ar = $_.seq.length - 1; _As <= _Ar; _As += 1) { //#17729
                        $_.ti = _As; //#17725
                        if ($ne($type($get($_.seq, $_.ti)), 'arraytype')) { //#17726
                            $_.nextecitext = false; //#17726
                            break; //#17726
                        } //#17726
                        if ($get($get($_.seq, $_.ti), 0) > -1000000) { //#17727
                            break; //#17727
                        } //#17727
                        $_.nextecitext = true; //#17728
                    } //#17728
                    if ($_.nextecitext) { //#17757
                        if ($_.submode == $_.A) { //#17754
                            var _BB = $get($get($_.charvals, $_.L), $get($get($_.seq, $_.ti), 0)) !== undefined; //#17732
                            if (_BB) { //#17737
                                $k[$j++] = 'pad'; //#17733
                                $k[$j++] = $_.ll; //#17733
                                $_.enca(); //#17733
                                var _BD = $k[--$j]; //#17733
                                $_[$k[--$j]] = _BD; //#17733
                                $_.submode = $_.L; //#17734
                            } else { //#17737
                                $k[$j++] = 'pad'; //#17736
                                $k[$j++] = $_.ml; //#17736
                                $_.enca(); //#17736
                                var _BH = $k[--$j]; //#17736
                                $_[$k[--$j]] = _BH; //#17736
                                $_.submode = $_.M; //#17737
                            } //#17737
                        } else { //#17754
                            if ($_.submode == $_.M) { //#17754
                                var _BT = $get($get($_.charvals, $_.L), $get($get($_.seq, $_.ti), 0)) !== undefined; //#17741
                                if (_BT) { //#17750
                                    $k[$j++] = 'pad'; //#17742
                                    $k[$j++] = $_.ll; //#17742
                                    $_.encm(); //#17742
                                    var _BV = $k[--$j]; //#17742
                                    $_[$k[--$j]] = _BV; //#17742
                                    $_.submode = $_.L; //#17743
                                } else { //#17750
                                    var _Bf = $get($get($_.charvals, $_.P), $get($get($_.seq, $_.ti), 0)) !== undefined; //#17745
                                    if (_Bf) { //#17750
                                        $k[$j++] = 'pad'; //#17746
                                        $k[$j++] = $_.pl; //#17746
                                        $_.encm(); //#17746
                                        var _Bh = $k[--$j]; //#17746
                                        $_[$k[--$j]] = _Bh; //#17746
                                        $_.submode = $_.P; //#17747
                                    } else { //#17750
                                        $k[$j++] = 'pad'; //#17749
                                        $k[$j++] = $_.al; //#17749
                                        $_.encm(); //#17749
                                        var _Bl = $k[--$j]; //#17749
                                        $_[$k[--$j]] = _Bl; //#17749
                                        $_.submode = $_.A; //#17750
                                    } //#17750
                                } //#17750
                            } else { //#17754
                                $k[$j++] = 'pad'; //#17753
                                $k[$j++] = $_.ml; //#17753
                                $_.encl(); //#17753
                                var _Bp = $k[--$j]; //#17753
                                $_[$k[--$j]] = _Bp; //#17753
                                $_.submode = $_.M; //#17754
                            } //#17754
                        } //#17754
                    } else { //#17757
                        $k[$j++] = 'pad'; //#17757
                        $k[$j++] = $_.ps; //#17757
                        if ($_[$get($_.textencfuncs, $_.submode)]() === true) {
                            return true;
                        } //#17757
                        var _Bx = $k[--$j]; //#17757
                        $_[$k[--$j]] = _Bx; //#17757
                    } //#17757
                } //#17757
                $k[$j++] = Infinity; //#17760
                $aload($_.text); //#17760
                $k[$j++] = $_.pad; //#17760
                $_.text = $a(); //#17760
            } //#17760
            $_.out = $a(~~($_.text.length / 2)); //#17763
            for (var _C6 = 0, _C5 = $_.out.length - 1; _C6 <= _C5; _C6 += 1) { //#17767
                $_.k = _C6; //#17765
                $put($_.out, $_.k, $f(($get($_.text, $_.k * 2) * 30) + $get($_.text, ($_.k * 2) + 1))); //#17766
            } //#17766
            $k[$j++] = $_.out; //#17769
        }; //#17769
        $_.encn = function() {
            $_.in = $k[--$j]; //#17774
            $_.out = $a([]); //#17775
            for (var _CK = 0, _CJ = $_.in.length - 1; _CK <= _CJ; _CK += 44) { //#17803
                $_.k = _CK; //#17777
                $k[$j++] = Infinity; //#17780
                var _CP = $_.in.length - $_.k; //#17779
                $k[$j++] = 1; //#17779
                $k[$j++] = $_.in; //#17779
                $k[$j++] = $_.k; //#17779
                $k[$j++] = _CP; //#17779
                if (_CP > 44) { //#17779
                    $j--; //#17779
                    $k[$j++] = 44; //#17779
                } //#17779
                var _CQ = $k[--$j]; //#17779
                var _CR = $k[--$j]; //#17779
                var _CT = $geti($k[--$j], _CR, _CQ); //#17779
                for (var _CU = 0, _CV = _CT.length; _CU < _CV; _CU++) { //#17780
                    $k[$j++] = $f($get(_CT, _CU) - 48); //#17780
                } //#17780
                $_.gmod = $a(); //#17780
                $_.cwn = $a([]); //#17782
                for (;;) { //#17801
                    $_.dv = 900; //#17783
                    $_.gmul = $a([]); //#17784
                    $_.val = 0; //#17784
                    for (;;) { //#17796
                        if ($_.gmod.length == 0) { //#17785
                            break; //#17785
                        } //#17785
                        $_.val = $f(($_.val * 10) + $get($_.gmod, 0)); //#17786
                        $_.gmod = $geti($_.gmod, 1, $_.gmod.length - 1); //#17787
                        if ($_.val < $_.dv) { //#17793
                            if ($_.gmul.length != 0) { //#17791
                                $k[$j++] = Infinity; //#17790
                                $aload($_.gmul); //#17790
                                $k[$j++] = 0; //#17790
                                $_.gmul = $a(); //#17790
                            } //#17790
                        } else { //#17793
                            $k[$j++] = Infinity; //#17793
                            $aload($_.gmul); //#17793
                            $k[$j++] = ~~($_.val / $_.dv); //#17793
                            $_.gmul = $a(); //#17793
                        } //#17793
                        $_.val = $_.val % $_.dv; //#17795
                    } //#17795
                    $_.dv = $_.val; //#17797
                    $k[$j++] = Infinity; //#17798
                    $k[$j++] = $_.dv; //#17798
                    $aload($_.cwn); //#17798
                    $_.cwn = $a(); //#17798
                    $_.gmod = $_.gmul; //#17799
                    if ($_.gmul.length == 0) { //#17800
                        break; //#17800
                    } //#17800
                } //#17800
                $k[$j++] = Infinity; //#17802
                $aload($_.out); //#17802
                $aload($_.cwn); //#17802
                $_.out = $a(); //#17802
            } //#17802
            $k[$j++] = $_.out; //#17804
        }; //#17804
        $_.ence = function() {
            var _D4 = $f((-$get($k[--$j], 0)) - 1000000); //#17809
            $k[$j++] = _D4; //#17817
            if (_D4 <= 899) { //#17816
                var _D5 = $k[--$j]; //#17810
                $k[$j++] = 927; //#17810
                $k[$j++] = _D5; //#17810
                $astore($a(2)); //#17810
            } else { //#17816
                var _D7 = $k[--$j]; //#17811
                $k[$j++] = _D7; //#17817
                if (_D7 <= 810899) { //#17816
                    var _D8 = $k[--$j]; //#17812
                    $k[$j++] = 926; //#17812
                    $k[$j++] = (~~(_D8 / 900)) - 1; //#17812
                    $k[$j++] = _D8 % 900; //#17812
                    $astore($a(3)); //#17812
                } else { //#17816
                    var _DA = $k[--$j]; //#17813
                    $k[$j++] = _DA; //#17817
                    if (_DA <= 811799) { //#17816
                        var _DB = $k[--$j]; //#17814
                        $k[$j++] = 925; //#17814
                        $k[$j++] = $f(_DB - 810900); //#17814
                        $astore($a(2)); //#17814
                    } else { //#17816
                        $k[$j++] = 'bwipp.pdf417badECI#17816'; //#17816
                        $k[$j++] = "PDF417 supports ECIs 000000 to 811799"; //#17816
                        bwipp_raiseerror(); //#17816
                    } //#17816
                } //#17816
            } //#17816
        }; //#17816
        $_.encfuncs = $a(['enct', 'encn', 'encb']); //#17820
        $_.addtocws = function() {
            var _DE = $k[--$j]; //#17823
            $puti($_.datcws, $_.j, _DE); //#17823
            $_.j = _DE.length + $_.j; //#17824
        }; //#17824
        $_.datcws = $a($_.seqlen); //#17829
        $_.i = 0; //#17830
        $_.j = 0; //#17830
        for (;;) { //#17850
            if ($_.i >= $_.seq.length) { //#17831
                break; //#17831
            } //#17831
            $_.chars = $get($_.seq, $_.i); //#17832
            if ($eq($type($_.chars), 'arraytype')) { //#17846
                if ($get($_.chars, 0) <= -1000000) { //#17837
                    $k[$j++] = $_.chars; //#17835
                    $_.ence(); //#17835
                    $_.addtocws(); //#17835
                } else { //#17837
                    $k[$j++] = $_.chars; //#17837
                    if ($_[$get($_.encfuncs, $_.state)]() === true) {
                        break;
                    } //#17837
                    $_.addtocws(); //#17837
                } //#17837
            } else { //#17846
                $k[$j++] = $a([$get($_.latchcws, $_.chars)]); //#17840
                $_.addtocws(); //#17840
                if ($_.chars == $_.tl) { //#17841
                    $_.state = $_.T; //#17841
                    $_.submode = $_.A; //#17841
                } //#17841
                if ($_.chars == $_.nl) { //#17842
                    $_.state = $_.N; //#17842
                } //#17842
                if (($_.chars == $_.bl) || ($_.chars == $_.bl6)) { //#17843
                    $_.state = $_.B; //#17843
                } //#17843
                if ($_.chars == $_.bs) { //#17847
                    $_.i = $_.i + 1; //#17845
                    $k[$j++] = $get($_.seq, $_.i); //#17846
                    $_.encb(); //#17846
                    $_.addtocws(); //#17846
                } //#17846
            } //#17846
            $_.i = $_.i + 1; //#17849
        } //#17849
        $_.datcws = $geti($_.datcws, 0, $_.j); //#17851
    } //#17851
    if (!bwipp_micropdf417.__17915__) { //#17915
        $_ = Object.create($_); //#17915
        $_.ccametrics = $a([$a([2, 5, 4, 39, 0, 19]), $a([2, 6, 4, 1, 0, 33]), $a([2, 7, 5, 32, 0, 12]), $a([2, 8, 5, 8, 0, 40]), $a([2, 9, 6, 14, 0, 46]), $a([2, 10, 6, 43, 0, 23]), $a([2, 12, 7, 20, 0, 52]), $a([3, 4, 4, 11, 43, 23]), $a([3, 5, 5, 1, 33, 13]), $a([3, 6, 6, 5, 37, 17]), $a([3, 7, 7, 15, 47, 27]), $a([3, 8, 7, 21, 1, 33]), $a([4, 3, 4, 40, 20, 52]), $a([4, 4, 5, 43, 23, 3]), $a([4, 5, 6, 46, 26, 6]), $a([4, 6, 7, 34, 14, 46]), $a([4, 7, 8, 29, 9, 41])]); //#17875
        $_.nonccametrics = $a([$a([1, 11, 7, 1, 0, 9]), $a([1, 14, 7, 8, 0, 8]), $a([1, 17, 7, 36, 0, 36]), $a([1, 20, 8, 19, 0, 19]), $a([1, 24, 8, 9, 0, 17]), $a([1, 28, 8, 25, 0, 33]), $a([2, 8, 8, 1, 0, 1]), $a([2, 11, 9, 1, 0, 9]), $a([2, 14, 9, 8, 0, 8]), $a([2, 17, 10, 36, 0, 36]), $a([2, 20, 11, 19, 0, 19]), $a([2, 23, 13, 9, 0, 17]), $a([2, 26, 15, 27, 0, 35]), $a([3, 6, 12, 1, 1, 1]), $a([3, 8, 14, 7, 7, 7]), $a([3, 10, 16, 15, 15, 15]), $a([3, 12, 18, 25, 25, 25]), $a([3, 15, 21, 37, 37, 37]), $a([3, 20, 26, 1, 17, 33]), $a([3, 26, 32, 1, 9, 17]), $a([3, 32, 38, 21, 29, 37]), $a([3, 38, 44, 15, 31, 47]), $a([3, 44, 50, 1, 25, 49]), $a([4, 4, 8, 47, 19, 43]), $a([4, 6, 12, 1, 1, 1]), $a([4, 8, 14, 7, 7, 7]), $a([4, 10, 16, 15, 15, 15]), $a([4, 12, 18, 25, 25, 25]), $a([4, 15, 21, 37, 37, 37]), $a([4, 20, 26, 1, 17, 33]), $a([4, 26, 32, 1, 9, 17]), $a([4, 32, 38, 21, 29, 37]), $a([4, 38, 44, 15, 31, 47]), $a([4, 44, 50, 1, 25, 49])]); //#17914
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_micropdf417.$ctx[id] = $_[id]); //#17914
        bwipp_micropdf417.__17915__ = 1; //#17914
        $_ = Object.getPrototypeOf($_); //#17914
    } //#17914
    $k[$j++] = 'metrics'; //#17917
    if ($_.cca) { //#17917
        $k[$j++] = $_.ccametrics; //#17917
    } else { //#17917
        $k[$j++] = $_.nonccametrics; //#17917
    } //#17917
    var _Eu = $k[--$j]; //#17917
    $_[$k[--$j]] = _Eu; //#17917
    $_.urows = $_.rows; //#17920
    $_.ucols = $_.columns; //#17921
    $forall($_.metrics, function() { //#17936
        $_.m = $k[--$j]; //#17923
        $_.c = $get($_.m, 0); //#17924
        $_.r = $get($_.m, 1); //#17925
        $_.k = $get($_.m, 2); //#17926
        $_.rapl = $get($_.m, 3); //#17927
        $_.rapc = $get($_.m, 4); //#17928
        $_.rapr = $get($_.m, 5); //#17929
        $_.ncws = $f(($_.r * $_.c) - $_.k); //#17930
        $_.okay = true; //#17931
        if ($_.datcws.length > $_.ncws) { //#17932
            $_.okay = false; //#17932
        } //#17932
        if (($_.urows != 0) && ($_.urows != $_.r)) { //#17933
            $_.okay = false; //#17933
        } //#17933
        if (($_.ucols != 0) && ($_.ucols != $_.c)) { //#17934
            $_.okay = false; //#17934
        } //#17934
        if ($_.okay) { //#17935
            return true; //#17935
        } //#17935
    }); //#17935
    if (!$_.okay) { //#17940
        $k[$j++] = 'bwipp.micropdf417noValidSymbol#17939'; //#17939
        $k[$j++] = "Maximum length exceeded or invalid size"; //#17939
        bwipp_raiseerror(); //#17939
    } //#17939
    $_.m = $_.datcws.length; //#17943
    $_.n = $f(($_.c * $_.r) - $_.k); //#17944
    $_.cws = $a($f(($_.c * $_.r) + 1)); //#17945
    $puti($_.cws, 0, $_.datcws); //#17946
    $k[$j++] = $_.cws; //#17947
    $k[$j++] = $_.m; //#17947
    $k[$j++] = Infinity; //#17947
    for (var _Fc = 0, _Fd = $f($_.n - $_.m); _Fc < _Fd; _Fc++) { //#17947
        $k[$j++] = 900; //#17947
    } //#17947
    var _Fe = $a(); //#17947
    var _Ff = $k[--$j]; //#17947
    $puti($k[--$j], _Ff, _Fe); //#17947
    $k[$j++] = $_.cws; //#17948
    $k[$j++] = $_.n; //#17948
    $k[$j++] = Infinity; //#17948
    for (var _Fk = 0, _Fl = $_.k; _Fk < _Fl; _Fk++) { //#17948
        $k[$j++] = 0; //#17948
    } //#17948
    $k[$j++] = 0; //#17948
    var _Fm = $a(); //#17948
    var _Fn = $k[--$j]; //#17948
    $puti($k[--$j], _Fn, _Fm); //#17948
    if (!bwipp_micropdf417.__17955__) { //#17955
        $_ = Object.create($_); //#17955
        $k[$j++] = Infinity; //#17952
        $k[$j++] = 1; //#17952
        for (var _Fp = 0, _Fq = 928; _Fp < _Fq; _Fp++) { //#17952
            var _Fr = $k[--$j]; //#17952
            $k[$j++] = _Fr; //#17952
            $k[$j++] = (_Fr * 3) % 929; //#17952
        } //#17952
        $_.rsalog = $a(); //#17952
        $_.rslog = $a(929); //#17953
        for (var _Fu = 1; _Fu <= 928; _Fu += 1) { //#17954
            $put($_.rslog, $get($_.rsalog, _Fu), _Fu); //#17954
        } //#17954
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_micropdf417.$ctx[id] = $_[id]); //#17954
        bwipp_micropdf417.__17955__ = 1; //#17954
        $_ = Object.getPrototypeOf($_); //#17954
    } //#17954
    $_.rsprod = function() {
        var _Fz = $k[--$j]; //#17959
        var _G0 = $k[--$j]; //#17959
        $k[$j++] = _G0; //#17963
        $k[$j++] = _Fz; //#17963
        if ((_Fz != 0) && (_G0 != 0)) { //#17962
            var _G3 = $get($_.rslog, $k[--$j]); //#17960
            var _G8 = $get($_.rsalog, $f(_G3 + $get($_.rslog, $k[--$j])) % 928); //#17960
            $k[$j++] = _G8; //#17960
        } else { //#17962
            $j -= 2; //#17962
            $k[$j++] = 0; //#17962
        } //#17962
    }; //#17962
    $k[$j++] = Infinity; //#17967
    $k[$j++] = 1; //#17967
    for (var _GA = 0, _GB = $_.k; _GA < _GB; _GA++) { //#17967
        $k[$j++] = 0; //#17967
    } //#17967
    $_.coeffs = $a(); //#17967
    for (var _GF = 1, _GE = $_.k; _GF <= _GE; _GF += 1) { //#17976
        $_.i = _GF; //#17969
        $put($_.coeffs, $_.i, $get($_.coeffs, $_.i - 1)); //#17970
        for (var _GM = $_.i - 1; _GM >= 1; _GM -= 1) { //#17974
            $_.j = _GM; //#17972
            $k[$j++] = $_.coeffs; //#17973
            $k[$j++] = $_.j; //#17973
            $k[$j++] = $get($_.coeffs, $_.j - 1); //#17973
            $k[$j++] = $get($_.coeffs, $_.j); //#17973
            $k[$j++] = $get($_.rsalog, $_.i); //#17973
            $_.rsprod(); //#17973
            var _GY = $k[--$j]; //#17973
            var _GZ = $k[--$j]; //#17973
            var _Ga = $k[--$j]; //#17973
            $put($k[--$j], _Ga, $f(_GZ + _GY) % 929); //#17973
        } //#17973
        $k[$j++] = $_.coeffs; //#17975
        $k[$j++] = 0; //#17975
        $k[$j++] = $get($_.coeffs, 0); //#17975
        $k[$j++] = $get($_.rsalog, $_.i); //#17975
        $_.rsprod(); //#17975
        var _Gi = $k[--$j]; //#17975
        var _Gj = $k[--$j]; //#17975
        $put($k[--$j], _Gj, _Gi); //#17975
    } //#17975
    $_.coeffs = $geti($_.coeffs, 0, $_.coeffs.length - 1); //#17977
    for (var _Gp = $_.coeffs.length - 1; _Gp >= 0; _Gp -= 2) { //#17978
        var _Gq = $_.coeffs; //#17978
        $put(_Gq, _Gp, $f(929 - $get(_Gq, _Gp))); //#17978
    } //#17978
    for (var _Gu = 0, _Gt = $f($_.n - 1); _Gu <= _Gt; _Gu += 1) { //#17987
        $_.t = $f($get($_.cws, _Gu) + $get($_.cws, $_.n)) % 929; //#17982
        for (var _H2 = 0, _H1 = $f($_.k - 1); _H2 <= _H1; _H2 += 1) { //#17986
            $_.j = _H2; //#17984
            $put($_.cws, $f($_.n + $_.j), ($f($get($_.cws, $f($f($_.n + $_.j) + 1)) + ($f(929 - (($_.t * $get($_.coeffs, $f($f($_.k - $_.j) - 1))) % 929))))) % 929); //#17985
        } //#17985
    } //#17985
    for (var _HJ = $_.n, _HI = $f($_.n + $_.k); _HJ <= _HI; _HJ += 1) { //#17988
        $put($_.cws, _HJ, $f(929 - $get($_.cws, _HJ)) % 929); //#17988
    } //#17988
    $_.cws = $geti($_.cws, 0, $_.cws.length - 1); //#17991
    var _HR = $get($_.options, 'debugcws') !== undefined; //#17993
    if (_HR) { //#17993
        $k[$j++] = 'bwipp.debugcws#17993'; //#17993
        $k[$j++] = $_.cws; //#17993
        bwipp_raiseerror(); //#17993
    } //#17993
    if (!bwipp_micropdf417.__18252__) { //#18252
        $_ = Object.create($_); //#18252
        $_.clusters = $a([$a([120256, 125680, 128380, 120032, 125560, 128318, 108736, 119920, 108640, 86080, 108592, 86048, 110016, 120560, 125820, 109792, 120440, 125758, 88256, 109680, 88160, 89536, 110320, 120700, 89312, 110200, 120638, 89200, 110140, 89840, 110460, 89720, 110398, 89980, 128506, 119520, 125304, 128190, 107712, 119408, 125244, 107616, 119352, 84032, 107568, 119324, 84000, 107544, 83984, 108256, 119672, 125374, 85184, 108144, 119612, 85088, 108088, 119582, 85040, 108060, 85728, 108408, 119742, 85616, 108348, 85560, 108318, 85880, 108478, 85820, 85790, 107200, 119152, 125116, 107104, 119096, 125086, 83008, 107056, 119068, 82976, 107032, 82960, 82952, 83648, 107376, 119228, 83552, 107320, 119198, 83504, 107292, 83480, 83468, 83824, 107452, 83768, 107422, 83740, 83900, 106848, 118968, 125022, 82496, 106800, 118940, 82464, 106776, 118926, 82448, 106764, 82440, 106758, 82784, 106936, 119006, 82736, 106908, 82712, 106894, 82700, 82694, 106974, 82830, 82240, 106672, 118876, 82208, 106648, 118862, 82192, 106636, 82184, 106630, 82180, 82352, 82328, 82316, 82080, 118830, 106572, 106566, 82050, 117472, 124280, 127678, 103616, 117360, 124220, 103520, 117304, 124190, 75840, 103472, 75808, 104160, 117624, 124350, 76992, 104048, 117564, 76896, 103992, 76848, 76824, 77536, 104312, 117694, 77424, 104252, 77368, 77340, 77688, 104382, 77628, 77758, 121536, 126320, 128700, 121440, 126264, 128670, 111680, 121392, 126236, 111648, 121368, 126222, 111632, 121356, 103104, 117104, 124092, 112320, 103008, 117048, 124062, 112224, 121656, 126366, 93248, 74784, 102936, 117006, 93216, 112152, 93200, 75456, 103280, 117180, 93888, 75360, 103224, 117150, 93792, 112440, 121758, 93744, 75288, 93720, 75632, 103356, 94064, 75576, 103326, 94008, 112542, 93980, 75708, 94140, 75678, 94110, 121184, 126136, 128606, 111168, 121136, 126108, 111136, 121112, 126094, 111120, 121100, 111112, 111108, 102752, 116920, 123998, 111456, 102704, 116892, 91712, 74272, 121244, 116878, 91680, 74256, 102668, 91664, 111372, 102662, 74244, 74592, 102840, 116958, 92000, 74544, 102812, 91952, 111516, 102798, 91928, 74508, 74502, 74680, 102878, 92088, 74652, 92060, 74638, 92046, 92126, 110912, 121008, 126044, 110880, 120984, 126030, 110864, 120972, 110856, 120966, 110852, 110850, 74048, 102576, 116828, 90944, 74016, 102552, 116814, 90912, 111000, 121038, 90896, 73992, 102534, 90888, 110982, 90884, 74160, 102620, 91056, 74136, 102606, 91032, 111054, 91020, 74118, 91014, 91100, 91086, 110752, 120920, 125998, 110736, 120908, 110728, 120902, 110724, 110722, 73888, 102488, 116782, 90528, 73872, 102476, 90512, 110796, 102470, 90504, 73860, 90500, 73858, 73944, 90584, 90572, 90566, 120876, 120870, 110658, 102444, 73800, 90312, 90308, 90306, 101056, 116080, 123580, 100960, 116024, 70720, 100912, 115996, 70688, 100888, 70672, 70664, 71360, 101232, 116156, 71264, 101176, 116126, 71216, 101148, 71192, 71180, 71536, 101308, 71480, 101278, 71452, 71612, 71582, 118112, 124600, 127838, 105024, 118064, 124572, 104992, 118040, 124558, 104976, 118028, 104968, 118022, 100704, 115896, 123486, 105312, 100656, 115868, 79424, 70176, 118172, 115854, 79392, 105240, 100620, 79376, 70152, 79368, 70496, 100792, 115934, 79712, 70448, 118238, 79664, 105372, 100750, 79640, 70412, 79628, 70584, 100830, 79800, 70556, 79772, 70542, 70622, 79838, 122176, 126640, 128860, 122144, 126616, 128846, 122128, 126604, 122120, 126598, 122116, 104768, 117936, 124508, 113472, 104736, 126684, 124494, 113440, 122264, 126670, 113424, 104712, 117894, 113416, 122246, 104706, 69952, 100528, 115804, 78656, 69920, 100504, 115790, 96064, 78624, 104856, 117966, 96032, 113560, 122318, 100486, 96016, 78600, 104838, 96008, 69890, 70064, 100572, 78768, 70040, 100558, 96176, 78744, 104910, 96152, 113614, 70022, 78726, 70108, 78812, 70094, 96220, 78798, 122016, 126552, 128814, 122000, 126540, 121992, 126534, 121988, 121986, 104608, 117848, 124462, 113056, 104592, 126574, 113040, 122060, 117830, 113032, 104580, 113028, 104578, 113026, 69792, 100440, 115758, 78240, 69776, 100428, 95136, 78224, 104652, 100422, 95120, 113100, 69764, 95112, 78212, 69762, 78210, 69848, 100462, 78296, 69836, 95192, 78284, 69830, 95180, 78278, 69870, 95214, 121936, 126508, 121928, 126502, 121924, 121922, 104528, 117804, 112848, 104520, 117798, 112840, 121958, 112836, 104514, 112834, 69712, 100396, 78032, 69704, 100390, 94672, 78024, 104550, 94664, 112870, 69698, 94660, 78018, 94658, 78060, 94700, 94694, 126486, 121890, 117782, 104484, 104482, 69672, 77928, 94440, 69666, 77922, 99680, 68160, 99632, 68128, 99608, 115342, 68112, 99596, 68104, 99590, 68448, 99768, 115422, 68400, 99740, 68376, 99726, 68364, 68358, 68536, 99806, 68508, 68494, 68574, 101696, 116400, 123740, 101664, 116376, 101648, 116364, 101640, 116358, 101636, 67904, 99504, 115292, 72512, 67872, 116444, 115278, 72480, 101784, 116430, 72464, 67848, 99462, 72456, 101766, 67842, 68016, 99548, 72624, 67992, 99534, 72600, 101838, 72588, 67974, 68060, 72668, 68046, 72654, 118432, 124760, 127918, 118416, 124748, 118408, 124742, 118404, 118402, 101536, 116312, 105888, 101520, 116300, 105872, 118476, 116294, 105864, 101508, 105860, 101506, 105858, 67744, 99416, 72096, 67728, 116334, 80800, 72080, 101580, 99398, 80784, 105932, 67716, 80776, 72068, 67714, 72066, 67800, 99438, 72152, 67788, 80856, 72140, 67782, 80844, 72134, 67822, 72174, 80878, 126800, 128940, 126792, 128934, 126788, 126786, 118352, 124716, 122576, 126828, 124710, 122568, 126822, 122564, 118338, 122562, 101456, 116268, 105680, 101448, 116262, 114128, 105672, 118374, 114120, 122598, 101442, 114116, 105666, 114114, 67664, 99372, 71888, 67656, 99366, 80336, 71880, 101478, 97232, 80328, 105702, 67650, 97224, 114150, 71874, 97220, 67692, 71916, 67686, 80364, 71910, 97260, 80358, 97254, 126760, 128918, 126756, 126754, 118312, 124694, 122472, 126774, 122468, 118306, 122466, 101416, 116246, 105576, 101412, 113896, 105572, 101410, 113892, 105570, 113890, 67624, 99350, 71784, 101430, 80104, 71780, 67618, 96744, 80100, 71778, 96740, 80098, 96738, 71798, 96758, 126738, 122420, 122418, 105524, 113780, 113778, 71732, 79988, 96500, 96498, 66880, 66848, 98968, 66832, 66824, 66820, 66992, 66968, 66956, 66950, 67036, 67022, 100000, 99984, 115532, 99976, 115526, 99972, 99970, 66720, 98904, 69024, 100056, 98892, 69008, 100044, 69000, 100038, 68996, 66690, 68994, 66776, 98926, 69080, 100078, 69068, 66758, 69062, 66798, 69102, 116560, 116552, 116548, 116546, 99920, 102096, 116588, 115494, 102088, 116582, 102084, 99906, 102082, 66640, 68816, 66632, 98854, 73168, 68808, 66628, 73160, 68804, 66626, 73156, 68802, 66668, 68844, 66662, 73196, 68838, 73190, 124840, 124836, 124834, 116520, 118632, 124854, 118628, 116514, 118626, 99880, 115478, 101992, 116534, 106216, 101988, 99874, 106212, 101986, 106210, 66600, 98838, 68712, 99894, 72936, 68708, 66594, 81384, 72932, 68706, 81380, 72930, 66614, 68726, 72950, 81398, 128980, 128978, 124820, 126900, 124818, 126898, 116500, 118580, 116498, 122740, 118578, 122738, 99860, 101940, 99858, 106100, 101938, 114420]), $a([128352, 129720, 125504, 128304, 129692, 125472, 128280, 129678, 125456, 128268, 125448, 128262, 125444, 125792, 128440, 129758, 120384, 125744, 128412, 120352, 125720, 128398, 120336, 125708, 120328, 125702, 120324, 120672, 125880, 128478, 110144, 120624, 125852, 110112, 120600, 125838, 110096, 120588, 110088, 120582, 110084, 110432, 120760, 125918, 89664, 110384, 120732, 89632, 110360, 120718, 89616, 110348, 89608, 110342, 89952, 110520, 120798, 89904, 110492, 89880, 110478, 89868, 90040, 110558, 90012, 89998, 125248, 128176, 129628, 125216, 128152, 129614, 125200, 128140, 125192, 128134, 125188, 125186, 119616, 125360, 128220, 119584, 125336, 128206, 119568, 125324, 119560, 125318, 119556, 119554, 108352, 119728, 125404, 108320, 119704, 125390, 108304, 119692, 108296, 119686, 108292, 108290, 85824, 108464, 119772, 85792, 108440, 119758, 85776, 108428, 85768, 108422, 85764, 85936, 108508, 85912, 108494, 85900, 85894, 85980, 85966, 125088, 128088, 129582, 125072, 128076, 125064, 128070, 125060, 125058, 119200, 125144, 128110, 119184, 125132, 119176, 125126, 119172, 119170, 107424, 119256, 125166, 107408, 119244, 107400, 119238, 107396, 107394, 83872, 107480, 119278, 83856, 107468, 83848, 107462, 83844, 83842, 83928, 107502, 83916, 83910, 83950, 125008, 128044, 125000, 128038, 124996, 124994, 118992, 125036, 118984, 125030, 118980, 118978, 106960, 119020, 106952, 119014, 106948, 106946, 82896, 106988, 82888, 106982, 82884, 82882, 82924, 82918, 124968, 128022, 124964, 124962, 118888, 124982, 118884, 118882, 106728, 118902, 106724, 106722, 82408, 106742, 82404, 82402, 124948, 124946, 118836, 118834, 106612, 106610, 124224, 127664, 129372, 124192, 127640, 129358, 124176, 127628, 124168, 127622, 124164, 124162, 117568, 124336, 127708, 117536, 124312, 127694, 117520, 124300, 117512, 124294, 117508, 117506, 104256, 117680, 124380, 104224, 117656, 124366, 104208, 117644, 104200, 117638, 104196, 104194, 77632, 104368, 117724, 77600, 104344, 117710, 77584, 104332, 77576, 104326, 77572, 77744, 104412, 77720, 104398, 77708, 77702, 77788, 77774, 128672, 129880, 93168, 128656, 129868, 92664, 128648, 129862, 92412, 128644, 128642, 124064, 127576, 129326, 126368, 124048, 129902, 126352, 128716, 127558, 126344, 124036, 126340, 124034, 126338, 117152, 124120, 127598, 121760, 117136, 124108, 121744, 126412, 124102, 121736, 117124, 121732, 117122, 121730, 103328, 117208, 124142, 112544, 103312, 117196, 112528, 121804, 117190, 112520, 103300, 112516, 103298, 112514, 75680, 103384, 117230, 94112, 75664, 103372, 94096, 112588, 103366, 94088, 75652, 94084, 75650, 75736, 103406, 94168, 75724, 94156, 75718, 94150, 75758, 128592, 129836, 91640, 128584, 129830, 91388, 128580, 91262, 128578, 123984, 127532, 126160, 123976, 127526, 126152, 128614, 126148, 123970, 126146, 116944, 124012, 121296, 116936, 124006, 121288, 126182, 121284, 116930, 121282, 102864, 116972, 111568, 102856, 116966, 111560, 121318, 111556, 102850, 111554, 74704, 102892, 92112, 74696, 102886, 92104, 111590, 92100, 74690, 92098, 74732, 92140, 74726, 92134, 128552, 129814, 90876, 128548, 90750, 128546, 123944, 127510, 126056, 128566, 126052, 123938, 126050, 116840, 123958, 121064, 116836, 121060, 116834, 121058, 102632, 116854, 111080, 121078, 111076, 102626, 111074, 74216, 102646, 91112, 74212, 91108, 74210, 91106, 74230, 91126, 128532, 90494, 128530, 123924, 126004, 123922, 126002, 116788, 120948, 116786, 120946, 102516, 110836, 102514, 110834, 73972, 90612, 73970, 90610, 128522, 123914, 125978, 116762, 120890, 102458, 110714, 123552, 127320, 129198, 123536, 127308, 123528, 127302, 123524, 123522, 116128, 123608, 127342, 116112, 123596, 116104, 123590, 116100, 116098, 101280, 116184, 123630, 101264, 116172, 101256, 116166, 101252, 101250, 71584, 101336, 116206, 71568, 101324, 71560, 101318, 71556, 71554, 71640, 101358, 71628, 71622, 71662, 127824, 129452, 79352, 127816, 129446, 79100, 127812, 78974, 127810, 123472, 127276, 124624, 123464, 127270, 124616, 127846, 124612, 123458, 124610, 115920, 123500, 118224, 115912, 123494, 118216, 124646, 118212, 115906, 118210, 100816, 115948, 105424, 100808, 115942, 105416, 118246, 105412, 100802, 105410, 70608, 100844, 79824, 70600, 100838, 79816, 105446, 79812, 70594, 79810, 70636, 79852, 70630, 79846, 129960, 95728, 113404, 129956, 95480, 113278, 129954, 95356, 95294, 127784, 129430, 78588, 128872, 129974, 95996, 78462, 128868, 127778, 95870, 128866, 123432, 127254, 124520, 123428, 126696, 128886, 123426, 126692, 124514, 126690, 115816, 123446, 117992, 115812, 122344, 117988, 115810, 122340, 117986, 122338, 100584, 115830, 104936, 100580, 113640, 104932, 100578, 113636, 104930, 113634, 70120, 100598, 78824, 70116, 96232, 78820, 70114, 96228, 78818, 96226, 70134, 78838, 129940, 94968, 113022, 129938, 94844, 94782, 127764, 78206, 128820, 127762, 95102, 128818, 123412, 124468, 123410, 126580, 124466, 126578, 115764, 117876, 115762, 122100, 117874, 122098, 100468, 104692, 100466, 113140, 104690, 113138, 69876, 78324, 69874, 95220, 78322, 95218, 129930, 94588, 94526, 127754, 128794, 123402, 124442, 126522, 115738, 117818, 121978, 100410, 104570, 112890, 69754, 78074, 94714, 94398, 123216, 127148, 123208, 127142, 123204, 123202, 115408, 123244, 115400, 123238, 115396, 115394, 99792, 115436, 99784, 115430, 99780, 99778, 68560, 99820, 68552, 99814, 68548, 68546, 68588, 68582, 127400, 129238, 72444, 127396, 72318, 127394, 123176, 127126, 123752, 123172, 123748, 123170, 123746, 115304, 123190, 116456, 115300, 116452, 115298, 116450, 99560, 115318, 101864, 99556, 101860, 99554, 101858, 68072, 99574, 72680, 68068, 72676, 68066, 72674, 68086, 72694, 129492, 80632, 105854, 129490, 80508, 80446, 127380, 72062, 127924, 127378, 80766, 127922, 123156, 123700, 123154, 124788, 123698, 124786, 115252, 116340, 115250, 118516, 116338, 118514, 99444, 101620, 99442, 105972, 101618, 105970, 67828, 72180, 67826, 80884, 72178, 80882, 97008, 114044, 96888, 113982, 96828, 96798, 129482, 80252, 130010, 97148, 80190, 97086, 127370, 127898, 128954, 123146, 123674, 124730, 126842, 115226, 116282, 118394, 122618, 99386, 101498, 105722, 114170, 67706, 71930, 80378, 96632, 113854, 96572, 96542, 80062, 96702, 96444, 96414, 96350, 123048, 123044, 123042, 115048, 123062, 115044, 115042, 99048, 115062, 99044, 99042, 67048, 99062, 67044, 67042, 67062, 127188, 68990, 127186, 123028, 123316, 123026, 123314, 114996, 115572, 114994, 115570, 98932, 100084, 98930, 100082, 66804, 69108, 66802, 69106, 129258, 73084, 73022, 127178, 127450, 123018, 123290, 123834, 114970, 115514, 116602, 98874, 99962, 102138, 66682, 68858, 73210, 81272, 106174, 81212, 81182, 72894, 81342, 97648, 114364, 97592, 114334, 97564, 97550, 81084, 97724, 81054, 97694, 97464, 114270, 97436, 97422, 80990, 97502, 97372, 97358, 97326, 114868, 114866, 98676, 98674, 66292, 66290, 123098, 114842, 115130, 98618, 99194, 66170, 67322, 69310, 73404, 73374, 81592, 106334, 81564, 81550, 73310, 81630, 97968, 114524, 97944, 114510, 97932, 97926, 81500, 98012, 81486, 97998, 97880, 114478, 97868, 97862, 81454, 97902, 97836, 97830, 69470, 73564, 73550, 81752, 106414, 81740, 81734, 73518, 81774, 81708, 81702]), $a([109536, 120312, 86976, 109040, 120060, 86496, 108792, 119934, 86256, 108668, 86136, 129744, 89056, 110072, 129736, 88560, 109820, 129732, 88312, 109694, 129730, 88188, 128464, 129772, 89592, 128456, 129766, 89340, 128452, 89214, 128450, 125904, 128492, 125896, 128486, 125892, 125890, 120784, 125932, 120776, 125926, 120772, 120770, 110544, 120812, 110536, 120806, 110532, 84928, 108016, 119548, 84448, 107768, 119422, 84208, 107644, 84088, 107582, 84028, 129640, 85488, 108284, 129636, 85240, 108158, 129634, 85116, 85054, 128232, 129654, 85756, 128228, 85630, 128226, 125416, 128246, 125412, 125410, 119784, 125430, 119780, 119778, 108520, 119798, 108516, 108514, 83424, 107256, 119166, 83184, 107132, 83064, 107070, 83004, 82974, 129588, 83704, 107390, 129586, 83580, 83518, 128116, 83838, 128114, 125172, 125170, 119284, 119282, 107508, 107506, 82672, 106876, 82552, 106814, 82492, 82462, 129562, 82812, 82750, 128058, 125050, 119034, 82296, 106686, 82236, 82206, 82366, 82108, 82078, 76736, 103920, 117500, 76256, 103672, 117374, 76016, 103548, 75896, 103486, 75836, 129384, 77296, 104188, 129380, 77048, 104062, 129378, 76924, 76862, 127720, 129398, 77564, 127716, 77438, 127714, 124392, 127734, 124388, 124386, 117736, 124406, 117732, 117730, 104424, 117750, 104420, 104418, 112096, 121592, 126334, 92608, 111856, 121468, 92384, 111736, 121406, 92272, 111676, 92216, 111646, 92188, 75232, 103160, 117118, 93664, 74992, 103036, 93424, 112252, 102974, 93304, 74812, 93244, 74782, 93214, 129332, 75512, 103294, 129908, 129330, 93944, 75388, 129906, 93820, 75326, 93758, 127604, 75646, 128756, 127602, 94078, 128754, 124148, 126452, 124146, 126450, 117236, 121844, 117234, 121842, 103412, 103410, 91584, 111344, 121212, 91360, 111224, 121150, 91248, 111164, 91192, 111134, 91164, 91150, 74480, 102780, 91888, 74360, 102718, 91768, 111422, 91708, 74270, 91678, 129306, 74620, 129850, 92028, 74558, 91966, 127546, 128634, 124026, 126202, 116986, 121338, 102906, 90848, 110968, 121022, 90736, 110908, 90680, 110878, 90652, 90638, 74104, 102590, 91000, 74044, 90940, 74014, 90910, 74174, 91070, 90480, 110780, 90424, 110750, 90396, 90382, 73916, 90556, 73886, 90526, 90296, 110686, 90268, 90254, 73822, 90334, 90204, 90190, 71136, 101112, 116094, 70896, 100988, 70776, 100926, 70716, 70686, 129204, 71416, 101246, 129202, 71292, 71230, 127348, 71550, 127346, 123636, 123634, 116212, 116210, 101364, 101362, 79296, 105200, 118140, 79072, 105080, 118078, 78960, 105020, 78904, 104990, 78876, 78862, 70384, 100732, 79600, 70264, 100670, 79480, 105278, 79420, 70174, 79390, 129178, 70524, 129466, 79740, 70462, 79678, 127290, 127866, 123514, 124666, 115962, 118266, 100858, 113376, 122232, 126654, 95424, 113264, 122172, 95328, 113208, 122142, 95280, 113180, 95256, 113166, 95244, 78560, 104824, 117950, 95968, 78448, 104764, 95856, 113468, 104734, 95800, 78364, 95772, 78350, 95758, 70008, 100542, 78712, 69948, 96120, 78652, 69918, 96060, 78622, 96030, 70078, 78782, 96190, 94912, 113008, 122044, 94816, 112952, 122014, 94768, 112924, 94744, 112910, 94732, 94726, 78192, 104636, 95088, 78136, 104606, 95032, 113054, 95004, 78094, 94990, 69820, 78268, 69790, 95164, 78238, 95134, 94560, 112824, 121950, 94512, 112796, 94488, 112782, 94476, 94470, 78008, 104542, 94648, 77980, 94620, 77966, 94606, 69726, 78046, 94686, 94384, 112732, 94360, 112718, 94348, 94342, 77916, 94428, 77902, 94414, 94296, 112686, 94284, 94278, 77870, 94318, 94252, 94246, 68336, 99708, 68216, 99646, 68156, 68126, 68476, 68414, 127162, 123258, 115450, 99834, 72416, 101752, 116414, 72304, 101692, 72248, 101662, 72220, 72206, 67960, 99518, 72568, 67900, 72508, 67870, 72478, 68030, 72638, 80576, 105840, 118460, 80480, 105784, 118430, 80432, 105756, 80408, 105742, 80396, 80390, 72048, 101564, 80752, 71992, 101534, 80696, 71964, 80668, 71950, 80654, 67772, 72124, 67742, 80828, 72094, 80798, 114016, 122552, 126814, 96832, 113968, 122524, 96800, 113944, 122510, 96784, 113932, 96776, 113926, 96772, 80224, 105656, 118366, 97120, 80176, 105628, 97072, 114076, 105614, 97048, 80140, 97036, 80134, 97030, 71864, 101470, 80312, 71836, 97208, 80284, 71822, 97180, 80270, 97166, 67678, 71902, 80350, 97246, 96576, 113840, 122460, 96544, 113816, 122446, 96528, 113804, 96520, 113798, 96516, 96514, 80048, 105564, 96688, 80024, 105550, 96664, 113870, 96652, 80006, 96646, 71772, 80092, 71758, 96732, 80078, 96718, 96416, 113752, 122414, 96400, 113740, 96392, 113734, 96388, 96386, 79960, 105518, 96472, 79948, 96460, 79942, 96454, 71726, 79982, 96494, 96336, 113708, 96328, 113702, 96324, 96322, 79916, 96364, 79910, 96358, 96296, 113686, 96292, 96290, 79894, 96310, 66936, 99006, 66876, 66846, 67006, 68976, 100028, 68920, 99998, 68892, 68878, 66748, 69052, 66718, 69022, 73056, 102072, 116574, 73008, 102044, 72984, 102030, 72972, 72966, 68792, 99934, 73144, 68764, 73116, 68750, 73102, 66654, 68830, 73182, 81216, 106160, 118620, 81184, 106136, 118606, 81168, 106124, 81160, 106118, 81156, 81154, 72880, 101980, 81328, 72856, 101966, 81304, 106190, 81292, 72838, 81286, 68700, 72924, 68686, 81372, 72910, 81358, 114336, 122712, 126894, 114320, 122700, 114312, 122694, 114308, 114306, 81056, 106072, 118574, 97696, 81040, 106060, 97680, 114380, 106054, 97672, 81028, 97668, 81026, 97666, 72792, 101934, 81112, 72780, 97752, 81100, 72774, 97740, 81094, 97734, 68654, 72814, 81134, 97774, 114256, 122668, 114248, 122662, 114244, 114242, 80976, 106028, 97488, 80968, 106022, 97480, 114278, 97476, 80962, 97474, 72748, 81004, 72742, 97516, 80998, 97510, 114216, 122646, 114212, 114210, 80936, 106006, 97384, 80932, 97380, 80930, 97378, 72726, 80950, 97398, 114196, 114194, 80916, 97332, 80914, 97330, 66236, 66206, 67256, 99166, 67228, 67214, 66142, 67294, 69296, 100188, 69272, 100174, 69260, 69254, 67164, 69340, 67150, 69326, 73376, 102232, 116654, 73360, 102220, 73352, 102214, 73348, 73346, 69208, 100142, 73432, 102254, 73420, 69190, 73414, 67118, 69230, 73454, 106320, 118700, 106312, 118694, 106308, 106306, 73296, 102188, 81616, 106348, 102182, 81608, 73284, 81604, 73282, 81602, 69164, 73324, 69158, 81644, 73318, 81638, 122792, 126934, 122788, 122786, 106280, 118678, 114536, 106276, 114532, 106274, 114530, 73256, 102166, 81512, 73252, 98024, 81508, 73250, 98020, 81506, 98018, 69142, 73270, 81526, 98038, 122772, 122770, 106260, 114484, 106258, 114482, 73236, 81460, 73234, 97908, 81458, 97906, 122762, 106250, 114458, 73226, 81434, 97850, 66396, 66382, 67416, 99246, 67404, 67398, 66350, 67438, 69456, 100268, 69448, 100262, 69444, 69442, 67372, 69484, 67366, 69478, 102312, 116694, 102308, 102306, 69416, 100246, 73576, 102326, 73572, 69410, 73570, 67350, 69430, 73590, 118740, 118738, 102292, 106420, 102290, 106418, 69396, 73524, 69394, 81780, 73522, 81778, 118730, 102282, 106394, 69386, 73498, 81722, 66476, 66470, 67496, 99286, 67492, 67490, 66454, 67510, 100308, 100306, 67476, 69556, 67474, 69554, 116714])]); //#18236
        $_.raps = $a([$a([802, 930, 946, 818, 882, 890, 826, 954, 922, 986, 970, 906, 778, 794, 786, 914, 978, 982, 980, 916, 948, 932, 934, 942, 940, 936, 808, 812, 814, 806, 822, 950, 918, 790, 788, 820, 884, 868, 870, 878, 876, 872, 840, 856, 860, 862, 846, 844, 836, 838, 834, 866]), $a([718, 590, 622, 558, 550, 566, 534, 530, 538, 570, 562, 546, 610, 626, 634, 762, 754, 758, 630, 628, 612, 614, 582, 578, 706, 738, 742, 740, 748, 620, 556, 552, 616, 744, 712, 716, 708, 710, 646, 654, 652, 668, 664, 696, 688, 656, 720, 592, 600, 604, 732, 734])]); //#18251
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_micropdf417.$ctx[id] = $_[id]); //#18251
        bwipp_micropdf417.__18252__ = 1; //#18251
        $_ = Object.getPrototypeOf($_); //#18251
    } //#18251
    $_.cwtobits = function() {
        var _Hd = $get($_.clusters, $k[--$j]); //#18256
        $_.v = $get(_Hd, $k[--$j]); //#18256
        $k[$j++] = Infinity; //#18257
        for (var _Hg = 0, _Hh = 17; _Hg < _Hh; _Hg++) { //#18257
            $k[$j++] = 0; //#18257
        } //#18257
        var _Hk = $cvrs($s(17), $_.v, 2); //#18257
        for (var _Hl = 0, _Hm = _Hk.length; _Hl < _Hm; _Hl++) { //#18257
            $k[$j++] = $get(_Hk, _Hl) - 48; //#18257
        } //#18257
        var _Ho = $a(); //#18257
        $k[$j++] = $geti(_Ho, _Ho.length - 17, 17); //#18258
    }; //#18258
    $_.raptobits = function() {
        var _Hs = $get($_.raps, $k[--$j]); //#18263
        $_.v = $get(_Hs, $k[--$j]); //#18263
        $k[$j++] = Infinity; //#18264
        for (var _Hv = 0, _Hw = 10; _Hv < _Hw; _Hv++) { //#18264
            $k[$j++] = 0; //#18264
        } //#18264
        var _Hz = $cvrs($s(10), $_.v, 2); //#18264
        for (var _I0 = 0, _I1 = _Hz.length; _I0 < _I1; _I0++) { //#18264
            $k[$j++] = $get(_Hz, _I0) - 48; //#18264
        } //#18264
        var _I3 = $a(); //#18264
        $k[$j++] = $geti(_I3, _I3.length - 10, 10); //#18265
    }; //#18265
    $_.rwid = $get($a([38, 55, 82, 99]), $f($_.c - 1)); //#18269
    if (($_.c == 3) && $_.cca) { //#18270
        $_.rwid = 72; //#18270
    } //#18270
    $_.pixs = $a($_.rwid * $_.r); //#18271
    for (var _IF = 0, _IE = $f($_.r - 1); _IF <= _IE; _IF += 1) { //#18309
        $_.i = _IF; //#18274
        $_.clst = ($f($f($_.i + $_.rapl) - 1)) % 3; //#18275
        $k[$j++] = $_.pixs; //#18307
        $k[$j++] = $_.rwid * $_.i; //#18307
        $k[$j++] = Infinity; //#18307
        if ($_.c == 1) { //#18281
            $k[$j++] = ($f($f($_.i + $_.rapl) - 1)) % 52; //#18278
            $k[$j++] = 0; //#18278
            $_.raptobits(); //#18278
            $aload($k[--$j]); //#18278
            $k[$j++] = $get($_.cws, $_.i); //#18279
            $k[$j++] = $_.clst; //#18279
            $_.cwtobits(); //#18279
            $aload($k[--$j]); //#18279
            $k[$j++] = ($f($f($_.i + $_.rapr) - 1)) % 52; //#18280
            $k[$j++] = 0; //#18280
            $_.raptobits(); //#18280
            $aload($k[--$j]); //#18280
        } //#18280
        if ($_.c == 2) { //#18287
            $k[$j++] = ($f($f($_.i + $_.rapl) - 1)) % 52; //#18283
            $k[$j++] = 0; //#18283
            $_.raptobits(); //#18283
            $aload($k[--$j]); //#18283
            $k[$j++] = $get($_.cws, $_.i * 2); //#18284
            $k[$j++] = $_.clst; //#18284
            $_.cwtobits(); //#18284
            $aload($k[--$j]); //#18284
            $k[$j++] = $get($_.cws, ($_.i * 2) + 1); //#18285
            $k[$j++] = $_.clst; //#18285
            $_.cwtobits(); //#18285
            $aload($k[--$j]); //#18285
            $k[$j++] = ($f($f($_.i + $_.rapr) - 1)) % 52; //#18286
            $k[$j++] = 0; //#18286
            $_.raptobits(); //#18286
            $aload($k[--$j]); //#18286
        } //#18286
        if ($_.c == 3) { //#18297
            if (!$_.cca) { //#18291
                $k[$j++] = ($f($f($_.i + $_.rapl) - 1)) % 52; //#18290
                $k[$j++] = 0; //#18290
                $_.raptobits(); //#18290
                $aload($k[--$j]); //#18290
            } //#18290
            $k[$j++] = $get($_.cws, $_.i * 3); //#18292
            $k[$j++] = $_.clst; //#18292
            $_.cwtobits(); //#18292
            $aload($k[--$j]); //#18292
            $k[$j++] = ($f($f($_.i + $_.rapc) - 1)) % 52; //#18293
            $k[$j++] = 1; //#18293
            $_.raptobits(); //#18293
            $aload($k[--$j]); //#18293
            $k[$j++] = $get($_.cws, ($_.i * 3) + 1); //#18294
            $k[$j++] = $_.clst; //#18294
            $_.cwtobits(); //#18294
            $aload($k[--$j]); //#18294
            $k[$j++] = $get($_.cws, ($_.i * 3) + 2); //#18295
            $k[$j++] = $_.clst; //#18295
            $_.cwtobits(); //#18295
            $aload($k[--$j]); //#18295
            $k[$j++] = ($f($f($_.i + $_.rapr) - 1)) % 52; //#18296
            $k[$j++] = 0; //#18296
            $_.raptobits(); //#18296
            $aload($k[--$j]); //#18296
        } //#18296
        if ($_.c == 4) { //#18306
            $k[$j++] = ($f($f($_.i + $_.rapl) - 1)) % 52; //#18299
            $k[$j++] = 0; //#18299
            $_.raptobits(); //#18299
            $aload($k[--$j]); //#18299
            $k[$j++] = $get($_.cws, $_.i * 4); //#18300
            $k[$j++] = $_.clst; //#18300
            $_.cwtobits(); //#18300
            $aload($k[--$j]); //#18300
            $k[$j++] = $get($_.cws, ($_.i * 4) + 1); //#18301
            $k[$j++] = $_.clst; //#18301
            $_.cwtobits(); //#18301
            $aload($k[--$j]); //#18301
            $k[$j++] = ($f($f($_.i + $_.rapc) - 1)) % 52; //#18302
            $k[$j++] = 1; //#18302
            $_.raptobits(); //#18302
            $aload($k[--$j]); //#18302
            $k[$j++] = $get($_.cws, ($_.i * 4) + 2); //#18303
            $k[$j++] = $_.clst; //#18303
            $_.cwtobits(); //#18303
            $aload($k[--$j]); //#18303
            $k[$j++] = $get($_.cws, ($_.i * 4) + 3); //#18304
            $k[$j++] = $_.clst; //#18304
            $_.cwtobits(); //#18304
            $aload($k[--$j]); //#18304
            $k[$j++] = ($f($f($_.i + $_.rapr) - 1)) % 52; //#18305
            $k[$j++] = 0; //#18305
            $_.raptobits(); //#18305
            $aload($k[--$j]); //#18305
        } //#18305
        $k[$j++] = 1; //#18307
        var _Ji = $a(); //#18307
        var _Jj = $k[--$j]; //#18308
        $puti($k[--$j], _Jj, _Ji); //#18308
    } //#18308
    var _Js = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $_.pixs],
        ["pixx", $_.rwid],
        ["pixy", $_.r],
        ["height", ($_.r / 72) * $_.rowmult],
        ["width", $_.rwid / 72],
        ["opt", $_.options]
    ]); //#18319
    $k[$j++] = _Js; //#18322
    if (!$_.dontdraw) { //#18322
        bwipp_renmatrix(); //#18322
    } //#18322
    $_ = Object.getPrototypeOf($_); //#18324
    $_ = Object.getPrototypeOf($_); //#18326
}

function bwipp_datamatrix() {
    $_ = Object.create($_); //#18357
    $_.dontdraw = false; //#18360
    $_.columns = 0; //#18361
    $_.rows = 0; //#18362
    $_.format = "unset"; //#18363
    $_.version = "unset"; //#18364
    $_.parse = false; //#18365
    $_.parsefnc = false; //#18366
    $_.c40headerlength = -1; //#18367
    $_.raw = false; //#18368
    $_.dmre = false; //#18369
    $k[$j++] = $_; //#18371
    bwipp_processoptions(); //#18371
    $_.options = $k[--$j]; //#18371
    $_.barcode = $k[--$j]; //#18372
    if ($eq($_.barcode, "")) { //#18376
        $k[$j++] = 'bwipp.datamatrixEmptyData#18375'; //#18375
        $k[$j++] = "The data must not be empty"; //#18375
        bwipp_raiseerror(); //#18375
    } //#18375
    if ($ne($_.version, "unset") && (($_.rows != 0) || ($_.columns != 0))) { //#18380
        $k[$j++] = 'bwipp.datamatrixVersionRowsCols#18379'; //#18379
        $k[$j++] = "rows and columns must not be given if version is specified"; //#18379
        bwipp_raiseerror(); //#18379
    } //#18379
    if ($ne($_.version, "unset")) { //#18404
        $search($_.version, "x"); //#18384
        if ($k[--$j]) { //#18400
            var _9 = $k[--$j]; //#18385
            var _A = $k[--$j]; //#18385
            $k[$j++] = _9; //#18385
            $k[$j++] = _A; //#18385
            $j--; //#18385
            var _B = $k[--$j]; //#18386
            var _C = $k[--$j]; //#18386
            $k[$j++] = _C; //#18386
            $k[$j++] = _B; //#18386
            $k[$j++] = _C; //#18386
            $k[$j++] = _B; //#18386
            $astore($a(2)); //#18386
            $forall($k[--$j], function() { //#18395
                var _F = $k[--$j]; //#18388
                $k[$j++] = _F; //#18388
                $k[$j++] = true; //#18388
                if (_F.length == 0) { //#18388
                    $j--; //#18388
                    $k[$j++] = false; //#18388
                } //#18388
                var _G = $k[--$j]; //#18389
                var _H = $k[--$j]; //#18389
                $k[$j++] = _G; //#18391
                $forall(_H, function() { //#18391
                    var _I = $k[--$j]; //#18390
                    if ((_I < 48) || (_I > 57)) { //#18390
                        $j--; //#18390
                        $k[$j++] = false; //#18390
                    } //#18390
                }); //#18390
                if ($nt($k[--$j])) { //#18394
                    $k[$j++] = 'bwipp.datamatrixVersionBadRowOrColumn#18393'; //#18393
                    $k[$j++] = "version must be formatted as RxC"; //#18393
                    bwipp_raiseerror(); //#18393
                } //#18393
            }); //#18393
            $_.rows = $cvi($k[--$j]); //#18396
            $_.columns = $cvi($k[--$j]); //#18397
            $k[$j++] = 'format'; //#18398
            if ($_.rows == $_.columns) { //#18398
                $k[$j++] = "square"; //#18398
            } else { //#18398
                $k[$j++] = "rectangle"; //#18398
            } //#18398
            var _O = $k[--$j]; //#18398
            $_[$k[--$j]] = _O; //#18398
        } else { //#18400
            $j--; //#18400
            $k[$j++] = 'bwipp.datamatrixVersionFormat#18400'; //#18400
            $k[$j++] = "version must be formatted as RxC"; //#18400
            bwipp_raiseerror(); //#18400
        } //#18400
    } else { //#18404
        if ($eq($_.format, "unset")) { //#18405
            $k[$j++] = 'format'; //#18404
            if ($_.dmre) { //#18404
                $k[$j++] = "rectangle"; //#18404
            } else { //#18404
                $k[$j++] = "square"; //#18404
            } //#18404
            var _S = $k[--$j]; //#18404
            $_[$k[--$j]] = _S; //#18404
        } //#18404
    } //#18404
    if ($ne($_.format, "square") && $ne($_.format, "rectangle")) { //#18410
        $k[$j++] = 'bwipp.datamatrixInvalidFormat#18409'; //#18409
        $k[$j++] = "The format must be either square or rectangle"; //#18409
        bwipp_raiseerror(); //#18409
    } //#18409
    bwipp_loadctx(bwipp_datamatrix) //#18412
    if (!bwipp_datamatrix.__18469__) { //#18469
        $_ = Object.create($_); //#18469
        var _18 = $a([16, 64, 1, 4, 36, 1, 1]); //#18458
        $_.metrics = $a([$a([10, 10, 1, 1, 5, 1, 0]), $a([12, 12, 1, 1, 7, 1, 0]), $a([14, 14, 1, 1, 10, 1, 0]), $a([16, 16, 1, 1, 12, 1, 0]), $a([18, 18, 1, 1, 14, 1, 0]), $a([20, 20, 1, 1, 18, 1, 0]), $a([22, 22, 1, 1, 20, 1, 0]), $a([24, 24, 1, 1, 24, 1, 0]), $a([26, 26, 1, 1, 28, 1, 0]), $a([32, 32, 2, 2, 36, 1, 0]), $a([36, 36, 2, 2, 42, 1, 0]), $a([40, 40, 2, 2, 48, 1, 0]), $a([44, 44, 2, 2, 56, 1, 0]), $a([48, 48, 2, 2, 68, 1, 0]), $a([52, 52, 2, 2, 84, 2, 0]), $a([64, 64, 4, 4, 112, 2, 0]), $a([72, 72, 4, 4, 144, 4, 0]), $a([80, 80, 4, 4, 192, 4, 0]), $a([88, 88, 4, 4, 224, 4, 0]), $a([96, 96, 4, 4, 272, 4, 0]), $a([104, 104, 4, 4, 336, 6, 0]), $a([120, 120, 6, 6, 408, 6, 0]), $a([132, 132, 6, 6, 496, 8, 0]), $a([144, 144, 6, 6, 620, 10, 0]), $a([8, 18, 1, 1, 7, 1, 0]), $a([8, 32, 1, 2, 11, 1, 0]), $a([8, 48, 1, 2, 15, 1, 1]), $a([8, 64, 1, 4, 18, 1, 1]), $a([8, 80, 1, 4, 22, 1, 1]), $a([8, 96, 1, 4, 28, 1, 1]), $a([8, 120, 1, 6, 32, 1, 1]), $a([8, 144, 1, 6, 36, 1, 1]), $a([12, 26, 1, 1, 14, 1, 0]), $a([12, 36, 1, 2, 18, 1, 0]), $a([12, 64, 1, 4, 27, 1, 1]), $a([12, 88, 1, 4, 36, 1, 1]), $a([16, 36, 1, 2, 24, 1, 0]), $a([16, 48, 1, 2, 28, 1, 0]), _18, $a([20, 36, 1, 2, 28, 1, 1]), $a([20, 44, 1, 2, 34, 1, 1]), $a([20, 64, 1, 4, 42, 1, 1]), $a([22, 48, 1, 2, 38, 1, 1]), $a([24, 48, 1, 2, 41, 1, 1]), $a([24, 64, 1, 4, 46, 1, 1]), $a([26, 40, 1, 2, 38, 1, 1]), $a([26, 48, 1, 2, 42, 1, 1]), $a([26, 64, 1, 4, 50, 1, 1])]); //#18468
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_datamatrix.$ctx[id] = $_[id]); //#18468
        bwipp_datamatrix.__18469__ = 1; //#18468
        $_ = Object.getPrototypeOf($_); //#18468
    } //#18468
    $_.urows = $_.rows; //#18472
    $_.ucols = $_.columns; //#18473
    $_.fullcws = $a([]); //#18474
    var _1N = $_.metrics; //#18475
    for (var _1O = 0, _1P = _1N.length; _1O < _1P; _1O++) { //#18494
        $_.m = $get(_1N, _1O); //#18476
        $_.rows = $get($_.m, 0); //#18477
        $_.cols = $get($_.m, 1); //#18478
        $_.regh = $get($_.m, 2); //#18479
        $_.regv = $get($_.m, 3); //#18480
        $_.rscw = $get($_.m, 4); //#18481
        $_.rsbl = $get($_.m, 5); //#18482
        $_.doly = $get($_.m, 6); //#18483
        $_.mrows = $f($_.rows - (2 * $_.regh)); //#18484
        $_.mcols = $f($_.cols - (2 * $_.regv)); //#18485
        $_.ncws = $f((~~(($_.mrows * $_.mcols) / 8)) - $_.rscw); //#18486
        $_.okay = true; //#18487
        if (($_.urows != 0) && ($_.urows != $_.rows)) { //#18488
            $_.okay = false; //#18488
        } //#18488
        if (($_.ucols != 0) && ($_.ucols != $_.cols)) { //#18489
            $_.okay = false; //#18489
        } //#18489
        if ($eq($_.format, "square") && $ne($_.rows, $_.cols)) { //#18490
            $_.okay = false; //#18490
        } //#18490
        if ($eq($_.format, "rectangle") && $eq($_.rows, $_.cols)) { //#18491
            $_.okay = false; //#18491
        } //#18491
        if ((!$_.dmre) && ($_.doly == 1)) { //#18492
            $_.okay = false; //#18492
        } //#18492
        if ($_.okay) { //#18493
            $k[$j++] = Infinity; //#18493
            $aload($_.fullcws); //#18493
            $k[$j++] = $_.ncws; //#18493
            $_.fullcws = $a(); //#18493
        } //#18493
    } //#18493
    $k[$j++] = Infinity; //#18495
    for (var _24 = 0, _25 = 1558; _24 < _25; _24++) { //#18495
        $k[$j++] = 10000; //#18495
    } //#18495
    $_.numremcws = $a(); //#18495
    var _27 = $_.fullcws; //#18496
    for (var _28 = 0, _29 = _27.length; _28 < _29; _28++) { //#18496
        $put($_.numremcws, $f($get(_27, _28) - 1), 1); //#18496
    } //#18496
    for (var _2C = 1556; _2C >= 0; _2C -= 1) { //#18502
        $_.i = _2C; //#18498
        if ($get($_.numremcws, $_.i) != 1) { //#18501
            $put($_.numremcws, $_.i, $f($get($_.numremcws, $_.i + 1) + 1)); //#18500
        } //#18500
    } //#18500
    if (!bwipp_datamatrix.__18615__) { //#18615
        $_ = Object.create($_); //#18615
        $_.fnc1 = -1; //#18506
        $_.prog = -2; //#18506
        $_.m05 = -3; //#18506
        $_.m06 = -4; //#18506
        $_.lC = -5; //#18507
        $_.lB = -6; //#18507
        $_.lX = -7; //#18507
        $_.lT = -8; //#18507
        $_.lE = -9; //#18507
        $_.unl = -10; //#18507
        $_.sapp = -11; //#18508
        $_.usft = -12; //#18508
        $_.sft1 = -13; //#18508
        $_.sft2 = -14; //#18508
        $_.sft3 = -15; //#18508
        $_.eci = -16; //#18508
        $_.pad = -17; //#18508
        $_.unlcw = 254; //#18509
        $k[$j++] = Infinity; //#18518
        for (var _2L = 0; _2L <= 128; _2L += 1) { //#18512
            $k[$j++] = _2L; //#18512
            $k[$j++] = _2L + 1; //#18512
        } //#18512
        $k[$j++] = $_.pad; //#18517
        $k[$j++] = 129; //#18517
        for (var _2N = 0; _2N <= 99; _2N += 1) { //#18517
            var _2P = $cvrs($s(2), _2N, 10); //#18515
            var _2R = $strcpy($s(2), "00"); //#18515
            $puti(_2R, 2 - _2P.length, _2P); //#18515
            $k[$j++] = _2R; //#18516
            $k[$j++] = _2N + 130; //#18516
        } //#18516
        var _2e = $a([$_.lC, $_.lB, $_.fnc1, $_.sapp, $_.prog, $_.usft, $_.m05, $_.m06, $_.lX, $_.lT, $_.lE, $_.eci]); //#18518
        $k[$j++] = 229; //#18518
        for (var _2f = 0, _2g = _2e.length; _2f < _2g; _2f++) { //#18518
            var _2j = $f($k[--$j] + 1); //#18518
            $k[$j++] = $get(_2e, _2f); //#18518
            $k[$j++] = _2j; //#18518
            $k[$j++] = _2j; //#18518
        } //#18518
        $j--; //#18518
        $_.Avals = $d(); //#18519
        $k[$j++] = Infinity; //#18521
        var _2l = $_.Avals; //#18521
        for (var _2q = _2l.size, _2p = _2l.keys(), _2o = 0; _2o < _2q; _2o++) { //#18521
            var _2m = _2p.next().value; //#18521
            $k[$j++] = _2m; //#18521
            $k[$j++] = _2l.get(_2m); //#18521
            $k[$j++] = Infinity; //#18521
            var _2r = $k[--$j]; //#18521
            var _2s = $k[--$j]; //#18521
            $k[$j++] = _2r; //#18521
            $k[$j++] = _2s; //#18521
            var _2t = $a(); //#18521
            $k[$j++] = _2t; //#18521
        } //#18521
        $_.Avals = $d(); //#18522
        $k[$j++] = Infinity; //#18530
        $k[$j++] = $_.sft1; //#18529
        $k[$j++] = 0; //#18529
        $k[$j++] = $_.sft2; //#18529
        $k[$j++] = 1; //#18529
        $k[$j++] = $_.sft3; //#18529
        $k[$j++] = 2; //#18529
        $k[$j++] = 32; //#18529
        $k[$j++] = 3; //#18529
        for (var _2y = 48; _2y <= 57; _2y += 1) { //#18529
            $k[$j++] = _2y; //#18529
            $k[$j++] = _2y - 44; //#18529
        } //#18529
        for (var _2z = 65; _2z <= 90; _2z += 1) { //#18530
            $k[$j++] = _2z; //#18530
            $k[$j++] = _2z - 51; //#18530
        } //#18530
        $_.CNvals = $d(); //#18531
        $k[$j++] = Infinity; //#18532
        for (var _31 = 0; _31 <= 31; _31 += 1) { //#18532
            $k[$j++] = _31; //#18532
            $k[$j++] = _31; //#18532
        } //#18532
        $_.C1vals = $d(); //#18532
        $k[$j++] = Infinity; //#18538
        for (var _33 = 33; _33 <= 47; _33 += 1) { //#18534
            $k[$j++] = _33; //#18534
            $k[$j++] = _33 - 33; //#18534
        } //#18534
        for (var _34 = 58; _34 <= 64; _34 += 1) { //#18535
            $k[$j++] = _34; //#18535
            $k[$j++] = _34 - 43; //#18535
        } //#18535
        for (var _35 = 91; _35 <= 95; _35 += 1) { //#18536
            $k[$j++] = _35; //#18536
            $k[$j++] = _35 - 69; //#18536
        } //#18536
        $k[$j++] = $_.fnc1; //#18538
        $k[$j++] = 27; //#18538
        $k[$j++] = $_.usft; //#18538
        $k[$j++] = 30; //#18538
        $_.C2vals = $d(); //#18539
        $k[$j++] = Infinity; //#18540
        for (var _39 = 96; _39 <= 127; _39 += 1) { //#18540
            $k[$j++] = _39; //#18540
            $k[$j++] = _39 - 96; //#18540
        } //#18540
        $_.C3vals = $d(); //#18540
        $k[$j++] = Infinity; //#18545
        var _3B = $_.CNvals; //#18542
        for (var _3G = _3B.size, _3F = _3B.keys(), _3E = 0; _3E < _3G; _3E++) { //#18542
            var _3C = _3F.next().value; //#18542
            $k[$j++] = _3C; //#18542
            $k[$j++] = _3B.get(_3C); //#18542
            $k[$j++] = Infinity; //#18542
            var _3H = $k[--$j]; //#18542
            var _3I = $k[--$j]; //#18542
            $k[$j++] = _3H; //#18542
            $k[$j++] = _3I; //#18542
            var _3J = $a(); //#18542
            $k[$j++] = _3J; //#18542
        } //#18542
        var _3K = $_.C1vals; //#18543
        for (var _3P = _3K.size, _3O = _3K.keys(), _3N = 0; _3N < _3P; _3N++) { //#18543
            var _3L = _3O.next().value; //#18543
            $k[$j++] = _3L; //#18543
            $k[$j++] = _3K.get(_3L); //#18543
            $k[$j++] = Infinity; //#18543
            var _3Q = $k[--$j]; //#18543
            var _3R = $k[--$j]; //#18543
            $k[$j++] = _3Q; //#18543
            $k[$j++] = $get($_.CNvals, $_.sft1); //#18543
            $k[$j++] = _3R; //#18543
            var _3V = $a(); //#18543
            $k[$j++] = _3V; //#18543
        } //#18543
        var _3W = $_.C2vals; //#18544
        for (var _3b = _3W.size, _3a = _3W.keys(), _3Z = 0; _3Z < _3b; _3Z++) { //#18544
            var _3X = _3a.next().value; //#18544
            $k[$j++] = _3X; //#18544
            $k[$j++] = _3W.get(_3X); //#18544
            $k[$j++] = Infinity; //#18544
            var _3c = $k[--$j]; //#18544
            var _3d = $k[--$j]; //#18544
            $k[$j++] = _3c; //#18544
            $k[$j++] = $get($_.CNvals, $_.sft2); //#18544
            $k[$j++] = _3d; //#18544
            var _3h = $a(); //#18544
            $k[$j++] = _3h; //#18544
        } //#18544
        var _3i = $_.C3vals; //#18545
        for (var _3n = _3i.size, _3m = _3i.keys(), _3l = 0; _3l < _3n; _3l++) { //#18545
            var _3j = _3m.next().value; //#18545
            $k[$j++] = _3j; //#18545
            $k[$j++] = _3i.get(_3j); //#18545
            $k[$j++] = Infinity; //#18545
            var _3o = $k[--$j]; //#18545
            var _3p = $k[--$j]; //#18545
            $k[$j++] = _3o; //#18545
            $k[$j++] = $get($_.CNvals, $_.sft3); //#18545
            $k[$j++] = _3p; //#18545
            var _3t = $a(); //#18545
            $k[$j++] = _3t; //#18545
        } //#18545
        $_.Cvals = $d(); //#18546
        $k[$j++] = Infinity; //#18554
        $k[$j++] = $_.sft1; //#18553
        $k[$j++] = 0; //#18553
        $k[$j++] = $_.sft2; //#18553
        $k[$j++] = 1; //#18553
        $k[$j++] = $_.sft3; //#18553
        $k[$j++] = 2; //#18553
        $k[$j++] = 32; //#18553
        $k[$j++] = 3; //#18553
        for (var _3y = 48; _3y <= 57; _3y += 1) { //#18553
            $k[$j++] = _3y; //#18553
            $k[$j++] = _3y - 44; //#18553
        } //#18553
        for (var _3z = 97; _3z <= 122; _3z += 1) { //#18554
            $k[$j++] = _3z; //#18554
            $k[$j++] = _3z - 83; //#18554
        } //#18554
        $_.TNvals = $d(); //#18555
        $k[$j++] = Infinity; //#18556
        for (var _41 = 0; _41 <= 31; _41 += 1) { //#18556
            $k[$j++] = _41; //#18556
            $k[$j++] = _41; //#18556
        } //#18556
        $_.T1vals = $d(); //#18556
        $k[$j++] = Infinity; //#18562
        for (var _43 = 33; _43 <= 47; _43 += 1) { //#18558
            $k[$j++] = _43; //#18558
            $k[$j++] = _43 - 33; //#18558
        } //#18558
        for (var _44 = 58; _44 <= 64; _44 += 1) { //#18559
            $k[$j++] = _44; //#18559
            $k[$j++] = _44 - 43; //#18559
        } //#18559
        for (var _45 = 91; _45 <= 95; _45 += 1) { //#18560
            $k[$j++] = _45; //#18560
            $k[$j++] = _45 - 69; //#18560
        } //#18560
        $k[$j++] = $_.fnc1; //#18562
        $k[$j++] = 27; //#18562
        $k[$j++] = $_.usft; //#18562
        $k[$j++] = 30; //#18562
        $_.T2vals = $d(); //#18563
        $k[$j++] = Infinity; //#18567
        $k[$j++] = 96; //#18566
        $k[$j++] = 0; //#18566
        for (var _49 = 65; _49 <= 90; _49 += 1) { //#18566
            $k[$j++] = _49; //#18566
            $k[$j++] = _49 - 64; //#18566
        } //#18566
        for (var _4A = 123; _4A <= 127; _4A += 1) { //#18567
            $k[$j++] = _4A; //#18567
            $k[$j++] = _4A - 96; //#18567
        } //#18567
        $_.T3vals = $d(); //#18568
        $k[$j++] = Infinity; //#18573
        var _4C = $_.TNvals; //#18570
        for (var _4H = _4C.size, _4G = _4C.keys(), _4F = 0; _4F < _4H; _4F++) { //#18570
            var _4D = _4G.next().value; //#18570
            $k[$j++] = _4D; //#18570
            $k[$j++] = _4C.get(_4D); //#18570
            $k[$j++] = Infinity; //#18570
            var _4I = $k[--$j]; //#18570
            var _4J = $k[--$j]; //#18570
            $k[$j++] = _4I; //#18570
            $k[$j++] = _4J; //#18570
            var _4K = $a(); //#18570
            $k[$j++] = _4K; //#18570
        } //#18570
        var _4L = $_.T1vals; //#18571
        for (var _4Q = _4L.size, _4P = _4L.keys(), _4O = 0; _4O < _4Q; _4O++) { //#18571
            var _4M = _4P.next().value; //#18571
            $k[$j++] = _4M; //#18571
            $k[$j++] = _4L.get(_4M); //#18571
            $k[$j++] = Infinity; //#18571
            var _4R = $k[--$j]; //#18571
            var _4S = $k[--$j]; //#18571
            $k[$j++] = _4R; //#18571
            $k[$j++] = $get($_.TNvals, $_.sft1); //#18571
            $k[$j++] = _4S; //#18571
            var _4W = $a(); //#18571
            $k[$j++] = _4W; //#18571
        } //#18571
        var _4X = $_.T2vals; //#18572
        for (var _4c = _4X.size, _4b = _4X.keys(), _4a = 0; _4a < _4c; _4a++) { //#18572
            var _4Y = _4b.next().value; //#18572
            $k[$j++] = _4Y; //#18572
            $k[$j++] = _4X.get(_4Y); //#18572
            $k[$j++] = Infinity; //#18572
            var _4d = $k[--$j]; //#18572
            var _4e = $k[--$j]; //#18572
            $k[$j++] = _4d; //#18572
            $k[$j++] = $get($_.TNvals, $_.sft2); //#18572
            $k[$j++] = _4e; //#18572
            var _4i = $a(); //#18572
            $k[$j++] = _4i; //#18572
        } //#18572
        var _4j = $_.T3vals; //#18573
        for (var _4o = _4j.size, _4n = _4j.keys(), _4m = 0; _4m < _4o; _4m++) { //#18573
            var _4k = _4n.next().value; //#18573
            $k[$j++] = _4k; //#18573
            $k[$j++] = _4j.get(_4k); //#18573
            $k[$j++] = Infinity; //#18573
            var _4p = $k[--$j]; //#18573
            var _4q = $k[--$j]; //#18573
            $k[$j++] = _4p; //#18573
            $k[$j++] = $get($_.TNvals, $_.sft3); //#18573
            $k[$j++] = _4q; //#18573
            var _4u = $a(); //#18573
            $k[$j++] = _4u; //#18573
        } //#18573
        $_.Tvals = $d(); //#18574
        for (var _4w = 128; _4w <= 255; _4w += 1) { //#18582
            $_.i = _4w; //#18578
            $k[$j++] = $_.Avals; //#18579
            $k[$j++] = $_.i; //#18579
            $k[$j++] = Infinity; //#18579
            $aload($get($_.Avals, $_.usft)); //#18579
            $aload($get($_.Avals, $_.i - 128)); //#18579
            var _55 = $a(); //#18579
            var _56 = $k[--$j]; //#18579
            $put($k[--$j], _56, _55); //#18579
            $k[$j++] = $_.Cvals; //#18580
            $k[$j++] = $_.i; //#18580
            $k[$j++] = Infinity; //#18580
            $aload($get($_.Cvals, $_.usft)); //#18580
            $aload($get($_.Cvals, $_.i - 128)); //#18580
            var _5G = $a(); //#18580
            var _5H = $k[--$j]; //#18580
            $put($k[--$j], _5H, _5G); //#18580
            $k[$j++] = $_.Tvals; //#18581
            $k[$j++] = $_.i; //#18581
            $k[$j++] = Infinity; //#18581
            $aload($get($_.Tvals, $_.usft)); //#18581
            $aload($get($_.Tvals, $_.i - 128)); //#18581
            var _5R = $a(); //#18581
            var _5S = $k[--$j]; //#18581
            $put($k[--$j], _5S, _5R); //#18581
        } //#18581
        $k[$j++] = Infinity; //#18590
        $k[$j++] = 13; //#18589
        $k[$j++] = 0; //#18589
        $k[$j++] = 42; //#18589
        $k[$j++] = 1; //#18589
        $k[$j++] = 62; //#18589
        $k[$j++] = 2; //#18589
        $k[$j++] = 32; //#18589
        $k[$j++] = 3; //#18589
        for (var _5U = 48; _5U <= 57; _5U += 1) { //#18589
            $k[$j++] = _5U; //#18589
            $k[$j++] = _5U - 44; //#18589
        } //#18589
        for (var _5V = 65; _5V <= 90; _5V += 1) { //#18590
            $k[$j++] = _5V; //#18590
            $k[$j++] = _5V - 51; //#18590
        } //#18590
        $_.Xvals = $d(); //#18591
        $k[$j++] = Infinity; //#18593
        var _5X = $_.Xvals; //#18593
        for (var _5c = _5X.size, _5b = _5X.keys(), _5a = 0; _5a < _5c; _5a++) { //#18593
            var _5Y = _5b.next().value; //#18593
            $k[$j++] = _5Y; //#18593
            $k[$j++] = _5X.get(_5Y); //#18593
            $k[$j++] = Infinity; //#18593
            var _5d = $k[--$j]; //#18593
            var _5e = $k[--$j]; //#18593
            $k[$j++] = _5d; //#18593
            $k[$j++] = _5e; //#18593
            var _5f = $a(); //#18593
            $k[$j++] = _5f; //#18593
        } //#18593
        $_.Xvals = $d(); //#18594
        $k[$j++] = Infinity; //#18599
        for (var _5h = 64; _5h <= 94; _5h += 1) { //#18597
            $k[$j++] = _5h; //#18597
            $k[$j++] = _5h - 64; //#18597
        } //#18597
        $k[$j++] = $_.unl; //#18599
        $k[$j++] = 31; //#18599
        for (var _5j = 32; _5j <= 63; _5j += 1) { //#18599
            $k[$j++] = _5j; //#18599
            $k[$j++] = _5j; //#18599
        } //#18599
        $_.Evals = $d(); //#18600
        $k[$j++] = Infinity; //#18602
        var _5l = $_.Evals; //#18602
        for (var _5q = _5l.size, _5p = _5l.keys(), _5o = 0; _5o < _5q; _5o++) { //#18602
            var _5m = _5p.next().value; //#18602
            $k[$j++] = _5m; //#18602
            $k[$j++] = _5l.get(_5m); //#18602
            $k[$j++] = Infinity; //#18602
            var _5r = $k[--$j]; //#18602
            var _5s = $k[--$j]; //#18602
            $k[$j++] = _5r; //#18602
            $k[$j++] = _5s; //#18602
            var _5t = $a(); //#18602
            $k[$j++] = _5t; //#18602
        } //#18602
        $_.Evals = $d(); //#18603
        $k[$j++] = Infinity; //#18606
        for (var _5v = 0; _5v <= 255; _5v += 1) { //#18606
            $k[$j++] = _5v; //#18606
            $k[$j++] = _5v; //#18606
        } //#18606
        $_.Bvals = $d(); //#18607
        $k[$j++] = Infinity; //#18609
        var _5x = $_.Bvals; //#18609
        for (var _62 = _5x.size, _61 = _5x.keys(), _60 = 0; _60 < _62; _60++) { //#18609
            var _5y = _61.next().value; //#18609
            $k[$j++] = _5y; //#18609
            $k[$j++] = _5x.get(_5y); //#18609
            $k[$j++] = Infinity; //#18609
            var _63 = $k[--$j]; //#18609
            var _64 = $k[--$j]; //#18609
            $k[$j++] = _63; //#18609
            $k[$j++] = _64; //#18609
            var _65 = $a(); //#18609
            $k[$j++] = _65; //#18609
        } //#18609
        $_.Bvals = $d(); //#18610
        $_.encvals = $a([$_.Avals, $_.Cvals, $_.Tvals, $_.Xvals, $_.Evals, $_.Bvals]); //#18612
        $_.A = 0; //#18614
        $_.C = 1; //#18614
        $_.T = 2; //#18614
        $_.X = 3; //#18614
        $_.E = 4; //#18614
        $_.B = 5; //#18614
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_datamatrix.$ctx[id] = $_[id]); //#18614
        bwipp_datamatrix.__18615__ = 1; //#18614
        $_ = Object.getPrototypeOf($_); //#18614
    } //#18614
    if ($_.raw) { //#19019
        $_.cws = $a($_.barcode.length); //#18619
        $_.i = 0; //#18620
        $_.j = 0; //#18620
        for (;;) { //#18627
            if ($_.i == $_.barcode.length) { //#18622
                break; //#18622
            } //#18622
            $_.cw = $cvi($geti($_.barcode, $_.i + 1, 3)); //#18623
            $put($_.cws, $_.j, $_.cw); //#18624
            $_.i = $_.i + 4; //#18625
            $_.j = $_.j + 1; //#18626
        } //#18626
        $_.cws = $geti($_.cws, 0, $_.j); //#18628
    } else { //#19019
        var _6Z = new Map([
            ["parse", $_.parse],
            ["parsefnc", $_.parsefnc],
            ["eci", true],
            ["FNC1", $_.fnc1],
            ["PROG", $_.prog]
        ]); //#18638
        $_.fncvals = _6Z; //#18641
        $k[$j++] = 'msg'; //#18642
        $k[$j++] = $_.barcode; //#18642
        $k[$j++] = $_.fncvals; //#18642
        bwipp_parseinput(); //#18642
        var _6c = $k[--$j]; //#18642
        $_[$k[--$j]] = _6c; //#18642
        $_.msglen = $_.msg.length; //#18643
        if ($_.msglen >= 9) { //#18661
            $aload($geti($_.msg, 0, 7)); //#18647
            var _6i = $k[--$j]; //#18648
            var _6j = $k[--$j]; //#18648
            $k[$j++] = _6i == 29; //#18648
            $k[$j++] = _6j; //#18648
            $j--; //#18648
            var _6k = $k[--$j]; //#18648
            var _6l = $k[--$j]; //#18648
            var _6m = $k[--$j]; //#18648
            var _6n = $k[--$j]; //#18649
            var _6o = $k[--$j]; //#18649
            var _6p = $k[--$j]; //#18649
            if (((((_6k && (_6l == 48)) && (_6m == 30)) && (_6n == 62)) && (_6o == 41)) && (_6p == 91)) { //#18660
                $aload($geti($_.msg, $_.msglen - 2, 2)); //#18650
                var _6t = $k[--$j]; //#18651
                var _6u = $k[--$j]; //#18651
                if ((_6t == 4) && (_6u == 30)) { //#18659
                    if ($get($_.msg, 5) == 53) { //#18656
                        $k[$j++] = Infinity; //#18653
                        $k[$j++] = $_.m05; //#18653
                        $aload($geti($_.msg, 7, $_.msg.length - 9)); //#18653
                        $_.msg = $a(); //#18653
                    } else { //#18656
                        if ($get($_.msg, 5) == 54) { //#18657
                            $k[$j++] = Infinity; //#18656
                            $k[$j++] = $_.m06; //#18656
                            $aload($geti($_.msg, 7, $_.msg.length - 9)); //#18656
                            $_.msg = $a(); //#18656
                        } //#18656
                    } //#18656
                } //#18656
            } //#18656
        } //#18656
        $_.msglen = $_.msg.length; //#18662
        $k[$j++] = Infinity; //#18664
        for (var _7B = 0, _7C = $_.msglen; _7B < _7C; _7B++) { //#18664
            $k[$j++] = 0; //#18664
        } //#18664
        $k[$j++] = 0; //#18664
        $_.numD = $a(); //#18664
        $k[$j++] = Infinity; //#18665
        for (var _7F = 0, _7G = $_.msglen; _7F < _7G; _7F++) { //#18665
            $k[$j++] = 0; //#18665
        } //#18665
        $k[$j++] = 9999; //#18665
        $_.nextXterm = $a(); //#18665
        $k[$j++] = Infinity; //#18666
        for (var _7J = 0, _7K = $_.msglen; _7J < _7K; _7J++) { //#18666
            $k[$j++] = 0; //#18666
        } //#18666
        $k[$j++] = 9999; //#18666
        $_.nextNonX = $a(); //#18666
        $k[$j++] = Infinity; //#18667
        for (var _7N = 0, _7O = $_.msglen; _7N < _7O; _7N++) { //#18667
            $k[$j++] = false; //#18667
        } //#18667
        $k[$j++] = false; //#18667
        $_.isECI = $a(); //#18667
        for (var _7R = $_.msglen - 1; _7R >= 0; _7R -= 1) { //#18685
            $_.i = _7R; //#18669
            $_.barchar = $get($_.msg, $_.i); //#18670
            if (($_.barchar >= 48) && ($_.barchar <= 57)) { //#18673
                $put($_.numD, $_.i, $f($get($_.numD, $_.i + 1) + 1)); //#18672
            } //#18672
            if ((($_.barchar == 13) || ($_.barchar == 42)) || ($_.barchar == 62)) { //#18677
                $put($_.nextXterm, $_.i, 0); //#18675
            } else { //#18677
                $put($_.nextXterm, $_.i, $f($get($_.nextXterm, $_.i + 1) + 1)); //#18677
            } //#18677
            var _7o = $get($_.Xvals, $_.barchar) !== undefined; //#18679
            if (!_7o) { //#18682
                $put($_.nextNonX, $_.i, 0); //#18680
            } else { //#18682
                $put($_.nextNonX, $_.i, $f($get($_.nextNonX, $_.i + 1) + 1)); //#18682
            } //#18682
            $put($_.isECI, $_.i, $_.barchar <= -1000000); //#18684
        } //#18684
        $k[$j++] = Infinity; //#18686
        var _7z = $_.nextXterm; //#18686
        for (var _80 = 0, _81 = _7z.length; _80 < _81; _80++) { //#18686
            var _82 = $get(_7z, _80); //#18686
            $k[$j++] = _82; //#18686
            if (_82 > 10000) { //#18686
                $j--; //#18686
                $k[$j++] = 10000; //#18686
            } //#18686
        } //#18686
        $_.nextXterm = $a(); //#18686
        $k[$j++] = Infinity; //#18687
        var _84 = $_.nextNonX; //#18687
        for (var _85 = 0, _86 = _84.length; _85 < _86; _85++) { //#18687
            var _87 = $get(_84, _85); //#18687
            $k[$j++] = _87; //#18687
            if (_87 > 10000) { //#18687
                $j--; //#18687
                $k[$j++] = 10000; //#18687
            } //#18687
        } //#18687
        $_.nextNonX = $a(); //#18687
        $_.isD = function() {
            $k[$j++] = ($_.char >= 48) && ($_.char <= 57); //#18689
        }; //#18689
        $_.isC = function() {
            var _8D = $get($_.CNvals, $_.char) !== undefined; //#18690
            $k[$j++] = _8D; //#18690
        }; //#18690
        $_.isT = function() {
            var _8G = $get($_.TNvals, $_.char) !== undefined; //#18691
            $k[$j++] = _8G; //#18691
        }; //#18691
        $_.isX = function() {
            var _8J = $get($_.Xvals, $_.char) !== undefined; //#18692
            $k[$j++] = _8J; //#18692
        }; //#18692
        $_.isE = function() {
            var _8M = $get($_.Evals, $_.char) !== undefined; //#18693
            $k[$j++] = _8M; //#18693
        }; //#18693
        $_.isEA = function() {
            $k[$j++] = $_.char > 127; //#18694
        }; //#18694
        $_.isFN = function() {
            $k[$j++] = $_.char < 0; //#18695
        }; //#18695
        $_.XtermFirst = function() {
            var _8P = $k[--$j]; //#18696
            $k[$j++] = $lt($get($_.nextXterm, _8P), $get($_.nextNonX, _8P)); //#18696
        }; //#18696
        $_.lookup = function() {
            $_.ac = 1; //#18700
            $_.cc = 2; //#18700
            $_.tc = 2; //#18700
            $_.xc = 2; //#18700
            $_.ec = 2; //#18700
            $_.bc = 2.25; //#18700
            if ($_.mode == $_.A) { //#18701
                $_.ac = 0; //#18701
                $_.cc = 1; //#18701
                $_.tc = 1; //#18701
                $_.xc = 1; //#18701
                $_.ec = 1; //#18701
                $_.bc = 1.25; //#18701
            } //#18701
            if ($_.mode == $_.C) { //#18702
                $_.cc = 0; //#18702
            } //#18702
            if ($_.mode == $_.T) { //#18703
                $_.tc = 0; //#18703
            } //#18703
            if ($_.mode == $_.X) { //#18704
                $_.xc = 0; //#18704
            } //#18704
            if ($_.mode == $_.E) { //#18705
                $_.ec = 0; //#18705
            } //#18705
            if ($_.mode == $_.B) { //#18706
                $_.bc = 0; //#18706
            } //#18706
            for (var _8g = 0, _8h = 1; _8g < _8h; _8g++) { //#18741
                if ($get($_.isECI, $_.i)) { //#18708
                    $k[$j++] = $_.A; //#18708
                    break; //#18708
                } //#18708
                if (($_.c40headerlength != -1) && ($_.i < $_.c40headerlength)) { //#18709
                    $k[$j++] = $_.C; //#18709
                    break; //#18709
                } //#18709
                $_.k = 0; //#18710
                for (;;) { //#18740
                    if (($_.i + $_.k) == $_.msglen) { //#18719
                        var _8t = $a(['ac', 'cc', 'tc', 'xc', 'ec', 'bc']); //#18712
                        for (var _8u = 0, _8v = _8t.length; _8u < _8v; _8u++) { //#18712
                            var _8w = $get(_8t, _8u); //#18712
                            $_[_8w] = Math.ceil($_[_8w]); //#18712
                        } //#18712
                        var _93 = $a([$_.cc, $_.tc, $_.xc, $_.ec, $_.bc]); //#18713
                        $k[$j++] = true; //#18713
                        for (var _94 = 0, _95 = _93.length; _94 < _95; _94++) { //#18713
                            var _98 = $k[--$j]; //#18713
                            $k[$j++] = _98 && ($_.ac <= $get(_93, _94)); //#18713
                        } //#18713
                        if ($k[--$j]) { //#18713
                            $k[$j++] = $_.A; //#18713
                            break; //#18713
                        } //#18713
                        var _9G = $a([$_.ac, $_.cc, $_.tc, $_.xc, $_.ec]); //#18714
                        $k[$j++] = true; //#18714
                        for (var _9H = 0, _9I = _9G.length; _9H < _9I; _9H++) { //#18714
                            var _9L = $k[--$j]; //#18714
                            $k[$j++] = _9L && ($_.bc < $get(_9G, _9H)); //#18714
                        } //#18714
                        if ($k[--$j]) { //#18714
                            $k[$j++] = $_.B; //#18714
                            break; //#18714
                        } //#18714
                        var _9T = $a([$_.ac, $_.cc, $_.tc, $_.xc, $_.bc]); //#18715
                        $k[$j++] = true; //#18715
                        for (var _9U = 0, _9V = _9T.length; _9U < _9V; _9U++) { //#18715
                            var _9Y = $k[--$j]; //#18715
                            $k[$j++] = _9Y && ($_.ec < $get(_9T, _9U)); //#18715
                        } //#18715
                        if ($k[--$j]) { //#18715
                            $k[$j++] = $_.E; //#18715
                            break; //#18715
                        } //#18715
                        var _9g = $a([$_.ac, $_.cc, $_.xc, $_.ec, $_.bc]); //#18716
                        $k[$j++] = true; //#18716
                        for (var _9h = 0, _9i = _9g.length; _9h < _9i; _9h++) { //#18716
                            var _9l = $k[--$j]; //#18716
                            $k[$j++] = _9l && ($_.tc < $get(_9g, _9h)); //#18716
                        } //#18716
                        if ($k[--$j]) { //#18716
                            $k[$j++] = $_.T; //#18716
                            break; //#18716
                        } //#18716
                        var _9t = $a([$_.ac, $_.cc, $_.tc, $_.ec, $_.bc]); //#18717
                        $k[$j++] = true; //#18717
                        for (var _9u = 0, _9v = _9t.length; _9u < _9v; _9u++) { //#18717
                            var _9y = $k[--$j]; //#18717
                            $k[$j++] = _9y && ($_.xc < $get(_9t, _9u)); //#18717
                        } //#18717
                        if ($k[--$j]) { //#18717
                            $k[$j++] = $_.X; //#18717
                            break; //#18717
                        } //#18717
                        $k[$j++] = $_.C; //#18718
                        break; //#18718
                    } //#18718
                    $_.char = $get($_.msg, $_.i + $_.k); //#18720
                    $k[$j++] = 'ac'; //#18721
                    $k[$j++] = $_.ac; //#18721
                    $_.isD(); //#18721
                    if ($k[--$j]) { //#18721
                        var _A8 = $k[--$j]; //#18721
                        $k[$j++] = $f(_A8 + (1 / 2)); //#18721
                    } else { //#18721
                        $_.isEA(); //#18721
                        if ($k[--$j]) { //#18721
                            var _AA = $k[--$j]; //#18721
                            $k[$j++] = Math.ceil(_AA) + 2; //#18721
                        } else { //#18721
                            var _AB = $k[--$j]; //#18721
                            $k[$j++] = Math.ceil(_AB) + 1; //#18721
                        } //#18721
                    } //#18721
                    var _AC = $k[--$j]; //#18721
                    $_[$k[--$j]] = _AC; //#18721
                    $k[$j++] = 'cc'; //#18722
                    $k[$j++] = $_.cc; //#18722
                    $_.isC(); //#18722
                    if ($k[--$j]) { //#18722
                        var _AG = $k[--$j]; //#18722
                        $k[$j++] = $f(_AG + 0.6666667); //#18722
                    } else { //#18722
                        $_.isEA(); //#18722
                        if ($k[--$j]) { //#18722
                            var _AI = $k[--$j]; //#18722
                            $k[$j++] = $f(_AI + 2.6666667); //#18722
                        } else { //#18722
                            var _AJ = $k[--$j]; //#18722
                            $k[$j++] = $f(_AJ + 1.3333334); //#18722
                        } //#18722
                    } //#18722
                    var _AK = $k[--$j]; //#18722
                    $_[$k[--$j]] = _AK; //#18722
                    $k[$j++] = 'tc'; //#18723
                    $k[$j++] = $_.tc; //#18723
                    $_.isT(); //#18723
                    if ($k[--$j]) { //#18723
                        var _AO = $k[--$j]; //#18723
                        $k[$j++] = $f(_AO + 0.6666667); //#18723
                    } else { //#18723
                        $_.isEA(); //#18723
                        if ($k[--$j]) { //#18723
                            var _AQ = $k[--$j]; //#18723
                            $k[$j++] = $f(_AQ + 2.6666667); //#18723
                        } else { //#18723
                            var _AR = $k[--$j]; //#18723
                            $k[$j++] = $f(_AR + 1.3333334); //#18723
                        } //#18723
                    } //#18723
                    var _AS = $k[--$j]; //#18723
                    $_[$k[--$j]] = _AS; //#18723
                    $k[$j++] = 'xc'; //#18724
                    $k[$j++] = $_.xc; //#18724
                    $_.isX(); //#18724
                    if ($k[--$j]) { //#18724
                        var _AW = $k[--$j]; //#18724
                        $k[$j++] = $f(_AW + 0.6666667); //#18724
                    } else { //#18724
                        $_.isEA(); //#18724
                        if ($k[--$j]) { //#18724
                            var _AY = $k[--$j]; //#18724
                            $k[$j++] = $f(_AY + 4.3333334); //#18724
                        } else { //#18724
                            var _AZ = $k[--$j]; //#18724
                            $k[$j++] = $f(_AZ + 3.3333334); //#18724
                        } //#18724
                    } //#18724
                    var _Aa = $k[--$j]; //#18724
                    $_[$k[--$j]] = _Aa; //#18724
                    $k[$j++] = 'ec'; //#18725
                    $k[$j++] = $_.ec; //#18725
                    $_.isE(); //#18725
                    if ($k[--$j]) { //#18725
                        var _Ae = $k[--$j]; //#18725
                        $k[$j++] = $f(_Ae + (3 / 4)); //#18725
                    } else { //#18725
                        $_.isEA(); //#18725
                        if ($k[--$j]) { //#18725
                            var _Ag = $k[--$j]; //#18725
                            $k[$j++] = $f(_Ag + (17 / 4)); //#18725
                        } else { //#18725
                            var _Ah = $k[--$j]; //#18725
                            $k[$j++] = $f(_Ah + (13 / 4)); //#18725
                        } //#18725
                    } //#18725
                    var _Ai = $k[--$j]; //#18725
                    $_[$k[--$j]] = _Ai; //#18725
                    $k[$j++] = 'bc'; //#18726
                    $k[$j++] = $_.bc; //#18726
                    $_.isFN(); //#18726
                    if ($k[--$j]) { //#18726
                        var _Am = $k[--$j]; //#18726
                        $k[$j++] = $f(_Am + 4); //#18726
                    } else { //#18726
                        var _An = $k[--$j]; //#18726
                        $k[$j++] = $f(_An + 1); //#18726
                    } //#18726
                    var _Ao = $k[--$j]; //#18726
                    $_[$k[--$j]] = _Ao; //#18726
                    if ($_.k >= 4) { //#18738
                        var _Aw = $a([$_.cc, $_.tc, $_.xc, $_.ec, $_.bc]); //#18728
                        $k[$j++] = true; //#18728
                        for (var _Ax = 0, _Ay = _Aw.length; _Ax < _Ay; _Ax++) { //#18728
                            var _B1 = $k[--$j]; //#18728
                            $k[$j++] = _B1 && (($_.ac + 1) <= $get(_Aw, _Ax)); //#18728
                        } //#18728
                        if ($k[--$j]) { //#18728
                            $k[$j++] = $_.A; //#18728
                            break; //#18728
                        } //#18728
                        if (($_.bc + 1) <= $_.ac) { //#18729
                            $k[$j++] = $_.B; //#18729
                            break; //#18729
                        } //#18729
                        var _BB = $a([$_.cc, $_.tc, $_.xc, $_.ec]); //#18730
                        $k[$j++] = true; //#18730
                        for (var _BC = 0, _BD = _BB.length; _BC < _BD; _BC++) { //#18730
                            var _BG = $k[--$j]; //#18730
                            $k[$j++] = _BG && (($_.bc + 1) < $get(_BB, _BC)); //#18730
                        } //#18730
                        if ($k[--$j]) { //#18730
                            $k[$j++] = $_.B; //#18730
                            break; //#18730
                        } //#18730
                        var _BO = $a([$_.ac, $_.cc, $_.tc, $_.xc, $_.bc]); //#18731
                        $k[$j++] = true; //#18731
                        for (var _BP = 0, _BQ = _BO.length; _BP < _BQ; _BP++) { //#18731
                            var _BT = $k[--$j]; //#18731
                            $k[$j++] = _BT && (($_.ec + 1) < $get(_BO, _BP)); //#18731
                        } //#18731
                        if ($k[--$j]) { //#18731
                            $k[$j++] = $_.E; //#18731
                            break; //#18731
                        } //#18731
                        var _Bb = $a([$_.ac, $_.cc, $_.xc, $_.ec, $_.bc]); //#18732
                        $k[$j++] = true; //#18732
                        for (var _Bc = 0, _Bd = _Bb.length; _Bc < _Bd; _Bc++) { //#18732
                            var _Bg = $k[--$j]; //#18732
                            $k[$j++] = _Bg && (($_.tc + 1) < $get(_Bb, _Bc)); //#18732
                        } //#18732
                        if ($k[--$j]) { //#18732
                            $k[$j++] = $_.T; //#18732
                            break; //#18732
                        } //#18732
                        var _Bo = $a([$_.ac, $_.cc, $_.tc, $_.ec, $_.bc]); //#18733
                        $k[$j++] = true; //#18733
                        for (var _Bp = 0, _Bq = _Bo.length; _Bp < _Bq; _Bp++) { //#18733
                            var _Bt = $k[--$j]; //#18733
                            $k[$j++] = _Bt && (($_.xc + 1) < $get(_Bo, _Bp)); //#18733
                        } //#18733
                        if ($k[--$j]) { //#18733
                            $k[$j++] = $_.X; //#18733
                            break; //#18733
                        } //#18733
                        var _C0 = $a([$_.ac, $_.tc, $_.ec, $_.bc]); //#18734
                        $k[$j++] = true; //#18734
                        for (var _C1 = 0, _C2 = _C0.length; _C1 < _C2; _C1++) { //#18734
                            var _C5 = $k[--$j]; //#18734
                            $k[$j++] = _C5 && (($_.cc + 1) < $get(_C0, _C1)); //#18734
                        } //#18734
                        if ($k[--$j]) { //#18737
                            if ($_.cc < $_.xc) { //#18735
                                $k[$j++] = $_.C; //#18735
                                break; //#18735
                            } //#18735
                            if ($_.cc == $_.xc) { //#18736
                                $k[$j++] = ($_.i + $_.k) + 1; //#18736
                                $_.XtermFirst(); //#18736
                                if ($k[--$j]) { //#18736
                                    $k[$j++] = $_.X; //#18736
                                    break; //#18736
                                } else { //#18736
                                    $k[$j++] = $_.C; //#18736
                                    break; //#18736
                                } //#18736
                            } //#18736
                        } //#18736
                    } //#18736
                    $_.k = $_.k + 1; //#18739
                } //#18739
            } //#18739
        }; //#18739
        $_.addtocws = function() {
            var _CI = $k[--$j]; //#18745
            $puti($_.cws, $_.j, _CI); //#18745
            $_.j = _CI.length + $_.j; //#18746
        }; //#18746
        $_.ECItocws = function() {
            var _CN = $f((-$k[--$j]) - 1000000); //#18751
            $k[$j++] = _CN; //#18765
            if (_CN <= 126) { //#18764
                var _CO = $k[--$j]; //#18752
                $k[$j++] = $f(_CO + 1); //#18753
                $astore($a(1)); //#18753
            } else { //#18764
                var _CQ = $k[--$j]; //#18754
                $k[$j++] = _CQ; //#18765
                if (_CQ <= 16382) { //#18764
                    var _CS = $f($k[--$j] - 127); //#18756
                    $k[$j++] = (~~(_CS / 254)) + 128; //#18758
                    $k[$j++] = $f((_CS % 254) + 1); //#18758
                    $astore($a(2)); //#18758
                } else { //#18764
                    var _CV = $f($k[--$j] - 16383); //#18761
                    $k[$j++] = (~~(_CV / 64516)) + 192; //#18764
                    $k[$j++] = ((~~(_CV / 254)) % 254) + 1; //#18764
                    $k[$j++] = $f((_CV % 254) + 1); //#18764
                    $astore($a(3)); //#18764
                } //#18764
            } //#18764
        }; //#18764
        $_.encA = function() {
            for (var _CX = 0, _CY = 1; _CX < _CY; _CX++) { //#18790
                if ($get($_.isECI, $_.i)) { //#18775
                    $k[$j++] = $get($_.Avals, $_.eci); //#18771
                    $_.addtocws(); //#18771
                    $k[$j++] = $get($_.msg, $_.i); //#18772
                    $_.ECItocws(); //#18772
                    $_.addtocws(); //#18772
                    $_.i = $_.i + 1; //#18773
                    break; //#18774
                } //#18774
                if ($get($_.numD, $_.i) >= 2) { //#18780
                    var _Cm = $s(2); //#18777
                    $put(_Cm, 0, $get($_.msg, $_.i)); //#18777
                    $put(_Cm, 1, $get($_.msg, $_.i + 1)); //#18777
                    $k[$j++] = $get($_.Avals, _Cm); //#18777
                    $_.addtocws(); //#18777
                    $_.i = $_.i + 2; //#18778
                    break; //#18779
                } //#18779
                $k[$j++] = 'newmode'; //#18781
                $_.lookup(); //#18781
                var _Cw = $k[--$j]; //#18781
                $_[$k[--$j]] = _Cw; //#18781
                if ($_.newmode != $_.mode) { //#18786
                    $k[$j++] = $get($_.Avals, $get($a([-1, $_.lC, $_.lT, $_.lX, $_.lE, $_.lB]), $_.newmode)); //#18783
                    $_.addtocws(); //#18783
                    $_.mode = $_.newmode; //#18784
                    break; //#18785
                } //#18785
                $k[$j++] = $get($_.Avals, $get($_.msg, $_.i)); //#18787
                $_.addtocws(); //#18787
                $_.i = $_.i + 1; //#18788
                break; //#18789
            } //#18789
        }; //#18789
        $_.CTXvalstocws = function() {
            $_.in = $k[--$j]; //#18794
            $k[$j++] = Infinity; //#18795
            for (var _DK = 0, _DJ = $_.in.length - 1; _DK <= _DJ; _DK += 3) { //#18799
                var _DM = $geti($_.in, _DK, 3); //#18797
                $k[$j++] = 0; //#18797
                for (var _DN = 0, _DO = _DM.length; _DN < _DO; _DN++) { //#18797
                    var _DQ = $k[--$j]; //#18797
                    $k[$j++] = $f(_DQ + $get(_DM, _DN)) * 40; //#18797
                } //#18797
                var _DS = (~~($k[--$j] / 40)) + 1; //#18798
                $k[$j++] = ~~(_DS / 256); //#18798
                $k[$j++] = _DS % 256; //#18798
            } //#18798
            $astore($a($counttomark())); //#18800
            var _DV = $k[--$j]; //#18800
            var _DW = $k[--$j]; //#18800
            $k[$j++] = _DV; //#18800
            $k[$j++] = _DW; //#18800
            $j--; //#18800
        }; //#18800
        $_.encCTX = function() {
            $_.p = 0; //#18804
            $_.ctxvals = $a(2500); //#18805
            $_.done = false; //#18806
            for (;;) { //#18885
                if ($_.i == $_.msglen) { //#18810
                    break; //#18810
                } //#18810
                var _Dg = $get($get($_.encvals, $_.mode), $get($_.msg, $_.i)) !== undefined; //#18811
                if (!_Dg) { //#18811
                    break; //#18811
                } //#18811
                if (($_.p % 3) == 0) { //#18880
                    if ($_.p > 0) { //#18825
                        $k[$j++] = 'newmode'; //#18814
                        $_.lookup(); //#18814
                        var _Dj = $k[--$j]; //#18814
                        $_[$k[--$j]] = _Dj; //#18814
                        if ($ne($_.newmode, $_.mode)) { //#18824
                            $k[$j++] = $geti($_.ctxvals, 0, $_.p); //#18816
                            $_.CTXvalstocws(); //#18816
                            $_.addtocws(); //#18816
                            $k[$j++] = $a([$_.unlcw]); //#18817
                            $_.addtocws(); //#18817
                            if ($_.newmode != $_.A) { //#18820
                                $k[$j++] = $get($_.Avals, $get($a([-1, $_.lC, $_.lT, $_.lX, $_.lE, $_.lB]), $_.newmode)); //#18819
                                $_.addtocws(); //#18819
                            } //#18819
                            $_.mode = $_.newmode; //#18821
                            $_.done = true; //#18822
                            break; //#18823
                        } //#18823
                    } //#18823
                    if (($_.msglen - $_.i) <= 3) { //#18879
                        $_.remcws = $get($_.numremcws, $_.j + ((~~($_.p / 3)) * 2)); //#18827
                        $k[$j++] = Infinity; //#18833
                        var _EF = $geti($_.msg, $_.i, $_.msglen - $_.i); //#18829
                        for (var _EG = 0, _EH = _EF.length; _EG < _EH; _EG++) { //#18835
                            var _EI = $get(_EF, _EG); //#18835
                            var _EM = $get($get($_.encvals, $_.mode), _EI) !== undefined; //#18830
                            $k[$j++] = _EI; //#18834
                            if (_EM) { //#18833
                                $aload($get($get($_.encvals, $_.mode), $k[--$j])); //#18831
                            } else { //#18833
                                $j--; //#18833
                                $k[$j++] = -1; //#18833
                                $k[$j++] = -1; //#18833
                                $k[$j++] = -1; //#18833
                                $k[$j++] = -1; //#18833
                            } //#18833
                        } //#18833
                        $_.remvals = $a(); //#18833
                        if (($_.remcws == 2) && ($_.remvals.length == 3)) { //#18847
                            $k[$j++] = Infinity; //#18841
                            $aload($geti($_.ctxvals, 0, $_.p)); //#18840
                            $aload($_.remvals); //#18841
                            var _EZ = $a(); //#18841
                            $k[$j++] = _EZ; //#18842
                            $_.CTXvalstocws(); //#18842
                            $_.addtocws(); //#18842
                            $_.mode = $_.A; //#18843
                            $_.i = $_.msglen; //#18844
                            $_.done = true; //#18845
                            break; //#18846
                        } //#18846
                        if ((($_.remcws == 2) && ($_.remvals.length == 2)) && ($_.mode != $_.X)) { //#18859
                            $k[$j++] = Infinity; //#18853
                            $aload($geti($_.ctxvals, 0, $_.p)); //#18851
                            $aload($_.remvals); //#18852
                            $aload($get($get($_.encvals, $_.mode), $_.sft1)); //#18853
                            var _Ep = $a(); //#18853
                            $k[$j++] = _Ep; //#18854
                            $_.CTXvalstocws(); //#18854
                            $_.addtocws(); //#18854
                            $_.mode = $_.A; //#18855
                            $_.i = $_.msglen; //#18856
                            $_.done = true; //#18857
                            break; //#18858
                        } //#18858
                        if (($_.remcws == 2) && ($_.remvals.length == 1)) { //#18869
                            $k[$j++] = $geti($_.ctxvals, 0, $_.p); //#18862
                            $_.CTXvalstocws(); //#18862
                            $_.addtocws(); //#18862
                            $k[$j++] = $a([$_.unlcw]); //#18863
                            $_.addtocws(); //#18863
                            $k[$j++] = $get($_.Avals, $get($_.msg, $_.i)); //#18864
                            $_.addtocws(); //#18864
                            $_.mode = $_.A; //#18865
                            $_.i = $_.msglen; //#18866
                            $_.done = true; //#18867
                            break; //#18868
                        } //#18868
                        if (($_.remcws == 1) && ($_.remvals.length == 1)) { //#18878
                            $k[$j++] = $geti($_.ctxvals, 0, $_.p); //#18872
                            $_.CTXvalstocws(); //#18872
                            $_.addtocws(); //#18872
                            $k[$j++] = $get($_.Avals, $get($_.msg, $_.i)); //#18873
                            $_.addtocws(); //#18873
                            $_.mode = $_.A; //#18874
                            $_.i = $_.msglen; //#18875
                            $_.done = true; //#18876
                            break; //#18877
                        } //#18877
                    } //#18877
                } //#18877
                var _FO = $get($get($_.encvals, $_.mode), $get($_.msg, $_.i)); //#18881
                $puti($_.ctxvals, $_.p, _FO); //#18882
                $_.p = _FO.length + $_.p; //#18883
                $_.i = $_.i + 1; //#18884
            } //#18884
            if (!$_.done) { //#18909
                for (;;) { //#18893
                    if (($_.p % 3) == 0) { //#18890
                        break; //#18890
                    } //#18890
                    $_.i = $_.i - 1; //#18891
                    $_.p = $_.p - $get($get($_.encvals, $_.mode), $get($_.msg, $_.i)).length; //#18892
                } //#18892
                $k[$j++] = Infinity; //#18895
                $aload($geti($_.ctxvals, 0, $_.p)); //#18895
                var _Fh = $a(); //#18895
                $k[$j++] = _Fh; //#18896
                $_.CTXvalstocws(); //#18896
                $_.addtocws(); //#18896
                $k[$j++] = $a([$_.unlcw]); //#18897
                $_.addtocws(); //#18897
                $_.mode = $_.A; //#18898
                if (($_.i != $_.msglen) && $nt($get($_.isECI, $_.i))) { //#18908
                    if ($get($_.numD, $_.i) >= 2) { //#18906
                        var _Ft = $s(2); //#18902
                        $put(_Ft, 0, $get($_.msg, $_.i)); //#18902
                        $put(_Ft, 1, $get($_.msg, $_.i + 1)); //#18902
                        $k[$j++] = $get($_.Avals, _Ft); //#18902
                        $_.addtocws(); //#18902
                        $_.i = $_.i + 2; //#18903
                    } else { //#18906
                        $k[$j++] = $get($_.Avals, $get($_.msg, $_.i)); //#18905
                        $_.addtocws(); //#18905
                        $_.i = $_.i + 1; //#18906
                    } //#18906
                } //#18906
            } //#18906
        }; //#18906
        $_.Evalstocws = function() {
            $_.in = $k[--$j]; //#18914
            $_.inlen = $_.in.length; //#18915
            $_.outlen = ~~(Math.ceil(($_.in.length / 4) * 3)); //#18916
            $k[$j++] = Infinity; //#18917
            $aload($_.in); //#18917
            $k[$j++] = 0; //#18917
            $k[$j++] = 0; //#18917
            $k[$j++] = 0; //#18917
            $_.in = $a(); //#18917
            $k[$j++] = Infinity; //#18918
            for (var _GG = 0, _GF = $_.inlen - 1; _GG <= _GF; _GG += 4) { //#18924
                var _GI = $geti($_.in, _GG, 4); //#18920
                $k[$j++] = 0; //#18920
                for (var _GJ = 0, _GK = _GI.length; _GJ < _GK; _GJ++) { //#18920
                    var _GM = $k[--$j]; //#18920
                    $k[$j++] = $or(_GM, $get(_GI, _GJ)) << 6; //#18920
                } //#18920
                var _GO = $k[--$j] >>> 6; //#18921
                $k[$j++] = (_GO >>> 16) & 255; //#18923
                $k[$j++] = (_GO >>> 8) & 255; //#18923
                $k[$j++] = _GO & 255; //#18923
            } //#18923
            $astore($a($counttomark())); //#18925
            var _GR = $k[--$j]; //#18925
            var _GS = $k[--$j]; //#18925
            $k[$j++] = _GR; //#18925
            $k[$j++] = _GS; //#18925
            $j--; //#18925
            var _GV = $geti($k[--$j], 0, $_.outlen); //#18926
            $k[$j++] = _GV; //#18926
        }; //#18926
        $_.encE = function() {
            $_.p = 0; //#18930
            $_.edifactvals = $a(2100); //#18931
            for (;;) { //#18960
                if ($_.i == $_.msglen) { //#18935
                    break; //#18935
                } //#18935
                var _Gd = $get($_.Evals, $get($_.msg, $_.i)) !== undefined; //#18936
                if (!_Gd) { //#18936
                    break; //#18936
                } //#18936
                if (($_.p % 4) == 0) { //#18955
                    if (($_.msglen - $_.i) <= 2) { //#18953
                        $_.remcws = $get($_.numremcws, $_.j + ((~~($_.p / 4)) * 3)); //#18939
                        $k[$j++] = Infinity; //#18942
                        var _Gp = $geti($_.msg, $_.i, $_.msglen - $_.i); //#18941
                        for (var _Gq = 0, _Gr = _Gp.length; _Gq < _Gr; _Gq++) { //#18943
                            $aload($get($_.Avals, $get(_Gp, _Gq))); //#18942
                        } //#18942
                        $_.remvals = $a(); //#18942
                        if ((($_.remcws == 1) || ($_.remcws == 2)) && ($_.remvals.length <= $_.remcws)) { //#18952
                            $k[$j++] = $geti($_.edifactvals, 0, $_.p); //#18947
                            $_.Evalstocws(); //#18947
                            $_.addtocws(); //#18947
                            $k[$j++] = $_.remvals; //#18948
                            $_.addtocws(); //#18948
                            $_.mode = $_.A; //#18949
                            $_.i = $_.msglen; //#18950
                            break; //#18951
                        } //#18951
                    } //#18951
                    $_.lookup(); //#18954
                    if ($k[--$j] != $_.mode) { //#18954
                        break; //#18954
                    } //#18954
                } //#18954
                var _HC = $get($_.Evals, $get($_.msg, $_.i)); //#18956
                $puti($_.edifactvals, $_.p, _HC); //#18957
                $_.p = _HC.length + $_.p; //#18958
                $_.i = $_.i + 1; //#18959
            } //#18959
            if ($_.mode != $_.A) { //#18982
                $_.remcws = $f($get($_.numremcws, ($_.j + ((~~($_.p / 4)) * 3)) - 1) - 1); //#18964
                if (((($_.p % 4) != 0) || ($_.i != $_.msglen)) || ($_.remcws >= 3)) { //#18969
                    var _HT = $get($_.Evals, $_.unl); //#18966
                    $puti($_.edifactvals, $_.p, _HT); //#18967
                    $_.p = _HT.length + $_.p; //#18968
                } //#18968
                $k[$j++] = $geti($_.edifactvals, 0, $_.p); //#18970
                $_.Evalstocws(); //#18970
                $_.addtocws(); //#18970
                $_.mode = $_.A; //#18971
                if (($_.i != $_.msglen) && $nt($get($_.isECI, $_.i))) { //#18981
                    if ($get($_.numD, $_.i) >= 2) { //#18979
                        var _Hj = $s(2); //#18975
                        $put(_Hj, 0, $get($_.msg, $_.i)); //#18975
                        $put(_Hj, 1, $get($_.msg, $_.i + 1)); //#18975
                        $k[$j++] = $get($_.Avals, _Hj); //#18975
                        $_.addtocws(); //#18975
                        $_.i = $_.i + 2; //#18976
                    } else { //#18979
                        $k[$j++] = $get($_.Avals, $get($_.msg, $_.i)); //#18978
                        $_.addtocws(); //#18978
                        $_.i = $_.i + 1; //#18979
                    } //#18979
                } //#18979
            } //#18979
        }; //#18979
        $_.encB = function() {
            $_.p = 0; //#18987
            $_.bvals = $a(1558); //#18987
            for (;;) { //#18993
                if ($_.i == $_.msglen) { //#18988
                    break; //#18988
                } //#18988
                $_.lookup(); //#18989
                if ($k[--$j] != $_.mode) { //#18989
                    break; //#18989
                } //#18989
                $put($_.bvals, $_.p, $get($_.msg, $_.i)); //#18990
                $_.p = $_.p + 1; //#18991
                $_.i = $_.i + 1; //#18992
            } //#18992
            $_.remcws = $f($get($_.numremcws, $_.j + $_.p) - 1); //#18994
            $k[$j++] = Infinity; //#19001
            if (($_.remcws == 0) && ($_.i == $_.msglen)) { //#18999
                $k[$j++] = 0; //#18997
            } else { //#18999
                if ($_.p < 250) { //#18999
                    $k[$j++] = $_.p; //#18999
                } else { //#18999
                    $k[$j++] = (~~($_.p / 250)) + 249; //#18999
                    $k[$j++] = $_.p % 250; //#18999
                } //#18999
            } //#18999
            $aload($geti($_.bvals, 0, $_.p)); //#19001
            $_.bvals = $a(); //#19001
            for (var _IS = 0, _IR = $_.bvals.length - 1; _IS <= _IR; _IS += 1) { //#19008
                $_.p = _IS; //#19004
                var _IY = $f(((((($_.j + $_.p) + 1) * 149) % 255) + 1) + $get($_.bvals, $_.p)); //#19006
                $k[$j++] = _IY; //#19006
                if (_IY >= 256) { //#19006
                    var _IZ = $k[--$j]; //#19006
                    $k[$j++] = $f(_IZ - 256); //#19006
                } //#19006
                $put($_.bvals, $_.p, $k[--$j]); //#19007
            } //#19007
            $k[$j++] = $_.bvals; //#19009
            $_.addtocws(); //#19009
            $_.mode = $_.A; //#19010
        }; //#19010
        $_.cws = $a(1558); //#19014
        $_.mode = $_.A; //#19015
        $_.i = 0; //#19015
        $_.j = 0; //#19015
        for (;;) { //#19018
            if ($_.i >= $_.msglen) { //#19016
                break; //#19016
            } //#19016
            if ($_[$get($a(['encA', 'encCTX', 'encCTX', 'encCTX', 'encE', 'encB']), $_.mode)]() === true) {
                break;
            } //#19017
        } //#19017
        $_.cws = $geti($_.cws, 0, $_.j); //#19019
    } //#19019
    $_.datlen = $_.cws.length; //#19024
    $_.remcws = $f($get($_.numremcws, $_.j - 1) - 1); //#19025
    if ($_.remcws > 0) { //#19034
        $k[$j++] = Infinity; //#19027
        $aload($_.cws); //#19027
        for (var _Ix = 0, _Iy = $_.remcws; _Ix < _Iy; _Ix++) { //#19027
            $k[$j++] = 129; //#19027
        } //#19027
        $_.cws = $a(); //#19027
        for (var _J4 = $_.datlen + 1, _J3 = $f($f($_.datlen + $_.remcws) - 1); _J4 <= _J3; _J4 += 1) { //#19033
            $_.i = _J4; //#19029
            var _J6 = (((($_.i + 1) * 149) % 253) + 1) + 129; //#19031
            $k[$j++] = _J6; //#19031
            if (_J6 > 254) { //#19031
                var _J7 = $k[--$j]; //#19031
                $k[$j++] = $f(_J7 - 254); //#19031
            } //#19031
            $put($_.cws, $_.i, $k[--$j]); //#19032
        } //#19032
    } //#19032
    var _JC = $get($_.options, 'debugcws') !== undefined; //#19036
    if (_JC) { //#19036
        $k[$j++] = 'bwipp.debugcws#19036'; //#19036
        $k[$j++] = $_.cws; //#19036
        bwipp_raiseerror(); //#19036
    } //#19036
    var _JE = $_.metrics; //#19039
    for (var _JF = 0, _JG = _JE.length; _JF < _JG; _JF++) { //#19061
        $_.m = $get(_JE, _JF); //#19040
        $_.rows = $get($_.m, 0); //#19041
        $_.cols = $get($_.m, 1); //#19042
        $_.regh = $get($_.m, 2); //#19043
        $_.regv = $get($_.m, 3); //#19044
        $_.rscw = $get($_.m, 4); //#19045
        $_.rsbl = $get($_.m, 5); //#19046
        $_.doly = $get($_.m, 6); //#19047
        $_.mrows = $f($_.rows - (2 * $_.regh)); //#19048
        $_.mcols = $f($_.cols - (2 * $_.regv)); //#19049
        $_.rrows = ~~($_.mrows / $_.regh); //#19050
        $_.rcols = ~~($_.mcols / $_.regv); //#19051
        $_.ncws = $f((~~(($_.mrows * $_.mcols) / 8)) - $_.rscw); //#19052
        $_.okay = true; //#19053
        if ($_.cws.length != $_.ncws) { //#19054
            $_.okay = false; //#19054
        } //#19054
        if (($_.urows != 0) && ($_.urows != $_.rows)) { //#19055
            $_.okay = false; //#19055
        } //#19055
        if (($_.ucols != 0) && ($_.ucols != $_.cols)) { //#19056
            $_.okay = false; //#19056
        } //#19056
        if ($eq($_.format, "square") && $ne($_.rows, $_.cols)) { //#19057
            $_.okay = false; //#19057
        } //#19057
        if ($eq($_.format, "rectangle") && $eq($_.rows, $_.cols)) { //#19058
            $_.okay = false; //#19058
        } //#19058
        if ((!$_.dmre) && ($_.doly == 1)) { //#19059
            $_.okay = false; //#19059
        } //#19059
        if ($_.okay) { //#19060
            break; //#19060
        } //#19060
    } //#19060
    if (!$_.okay) { //#19065
        $k[$j++] = 'bwipp.datamatrixNoValidSymbol#19064'; //#19064
        $k[$j++] = "Maximum length exceeded or invalid size"; //#19064
        bwipp_raiseerror(); //#19064
    } //#19064
    $_.cwbs = $a($_.rsbl); //#19068
    $_.ecbs = $a($_.rsbl); //#19069
    for (var _K5 = 0, _K4 = $f($_.rsbl - 1); _K5 <= _K4; _K5 += 1) { //#19084
        $_.i = _K5; //#19071
        if ($_.cws.length != 1558) { //#19075
            $_.cwbsize = ~~($_.cws.length / $_.rsbl); //#19073
        } else { //#19075
            if ($_.i <= 7) { //#19075
                $_.cwbsize = 156; //#19075
            } else { //#19075
                $_.cwbsize = 155; //#19075
            } //#19075
        } //#19075
        $_.cwb = $a($_.cwbsize); //#19077
        for (var _KE = 0, _KD = $_.cwbsize - 1; _KE <= _KD; _KE += 1) { //#19081
            $_.j = _KE; //#19079
            $put($_.cwb, $_.j, $get($_.cws, $f(($_.j * $_.rsbl) + $_.i))); //#19080
        } //#19080
        $put($_.cwbs, $_.i, $_.cwb); //#19082
        $k[$j++] = $_.ecbs; //#19083
        $k[$j++] = $_.i; //#19083
        $k[$j++] = Infinity; //#19083
        for (var _KT = 0, _KU = ~~($_.rscw / $_.rsbl); _KT < _KU; _KT++) { //#19083
            $k[$j++] = 0; //#19083
        } //#19083
        var _KV = $a(); //#19083
        var _KW = $k[--$j]; //#19083
        $put($k[--$j], _KW, _KV); //#19083
    } //#19083
    if (!bwipp_datamatrix.__19091__) { //#19091
        $_ = Object.create($_); //#19091
        $k[$j++] = Infinity; //#19088
        $k[$j++] = 1; //#19088
        for (var _KY = 0, _KZ = 255; _KY < _KZ; _KY++) { //#19088
            var _Ka = $k[--$j]; //#19088
            var _Kb = _Ka * 2; //#19088
            $k[$j++] = _Ka; //#19088
            $k[$j++] = _Kb; //#19088
            if (_Kb >= 256) { //#19088
                var _Kc = $k[--$j]; //#19088
                $k[$j++] = _Kc ^ 301; //#19088
            } //#19088
        } //#19088
        $_.rsalog = $a(); //#19088
        $_.rslog = $a(256); //#19089
        for (var _Kf = 1; _Kf <= 255; _Kf += 1) { //#19090
            $put($_.rslog, $get($_.rsalog, _Kf), _Kf); //#19090
        } //#19090
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_datamatrix.$ctx[id] = $_[id]); //#19090
        bwipp_datamatrix.__19091__ = 1; //#19090
        $_ = Object.getPrototypeOf($_); //#19090
    } //#19090
    $_.rsprod = function() {
        var _Kk = $k[--$j]; //#19095
        var _Kl = $k[--$j]; //#19095
        $k[$j++] = _Kl; //#19099
        $k[$j++] = _Kk; //#19099
        if ((_Kk != 0) && (_Kl != 0)) { //#19098
            var _Ko = $get($_.rslog, $k[--$j]); //#19096
            var _Kt = $get($_.rsalog, $f(_Ko + $get($_.rslog, $k[--$j])) % 255); //#19096
            $k[$j++] = _Kt; //#19096
        } else { //#19098
            $j -= 2; //#19098
            $k[$j++] = 0; //#19098
        } //#19098
    }; //#19098
    $k[$j++] = Infinity; //#19103
    $k[$j++] = 1; //#19103
    for (var _Kw = 0, _Kx = ~~($_.rscw / $_.rsbl); _Kw < _Kx; _Kw++) { //#19103
        $k[$j++] = 0; //#19103
    } //#19103
    $_.coeffs = $a(); //#19103
    for (var _L2 = 1, _L1 = ~~($_.rscw / $_.rsbl); _L2 <= _L1; _L2 += 1) { //#19112
        $_.i = _L2; //#19105
        $put($_.coeffs, $_.i, $get($_.coeffs, $_.i - 1)); //#19106
        for (var _L9 = $_.i - 1; _L9 >= 1; _L9 -= 1) { //#19110
            $_.j = _L9; //#19108
            $k[$j++] = $_.coeffs; //#19109
            $k[$j++] = $_.j; //#19109
            $k[$j++] = $get($_.coeffs, $_.j - 1); //#19109
            $k[$j++] = $get($_.coeffs, $_.j); //#19109
            $k[$j++] = $get($_.rsalog, $_.i); //#19109
            $_.rsprod(); //#19109
            var _LL = $k[--$j]; //#19109
            var _LM = $k[--$j]; //#19109
            var _LN = $k[--$j]; //#19109
            $put($k[--$j], _LN, $xo(_LM, _LL)); //#19109
        } //#19109
        $k[$j++] = $_.coeffs; //#19111
        $k[$j++] = 0; //#19111
        $k[$j++] = $get($_.coeffs, 0); //#19111
        $k[$j++] = $get($_.rsalog, $_.i); //#19111
        $_.rsprod(); //#19111
        var _LV = $k[--$j]; //#19111
        var _LW = $k[--$j]; //#19111
        $put($k[--$j], _LW, _LV); //#19111
    } //#19111
    $_.coeffs = $geti($_.coeffs, 0, $_.coeffs.length - 1); //#19113
    for (var _Ld = 0, _Lc = $_.cwbs.length - 1; _Ld <= _Lc; _Ld += 1) { //#19129
        $_.i = _Ld; //#19117
        $_.cwb = $get($_.cwbs, $_.i); //#19118
        $_.ecb = $get($_.ecbs, $_.i); //#19119
        for (var _Lm = 0, _Ll = $_.cwb.length - 1; _Lm <= _Ll; _Lm += 1) { //#19128
            $_.t = $xo($get($_.cwb, _Lm), $get($_.ecb, 0)); //#19121
            for (var _Ls = $_.ecb.length - 1; _Ls >= 0; _Ls -= 1) { //#19127
                $_.j = _Ls; //#19123
                $_.p = ($_.ecb.length - $_.j) - 1; //#19124
                $k[$j++] = $_.ecb; //#19125
                $k[$j++] = $_.p; //#19125
                $k[$j++] = $_.t; //#19125
                $k[$j++] = $get($_.coeffs, $_.j); //#19125
                $_.rsprod(); //#19125
                var _M1 = $k[--$j]; //#19125
                var _M2 = $k[--$j]; //#19125
                $put($k[--$j], _M2, _M1); //#19125
                if ($_.j > 0) { //#19126
                    $put($_.ecb, $_.p, $xo($get($_.ecb, $_.p + 1), $get($_.ecb, $_.p))); //#19126
                } //#19126
            } //#19126
        } //#19126
    } //#19126
    if ($_.ncws == 1558) { //#19134
        $k[$j++] = Infinity; //#19133
        var _MF = $geti($_.ecbs, 8, 2); //#19133
        for (var _MG = 0, _MH = _MF.length; _MG < _MH; _MG++) { //#19133
            $k[$j++] = $get(_MF, _MG); //#19133
        } //#19133
        var _MK = $geti($_.ecbs, 0, 8); //#19133
        for (var _ML = 0, _MM = _MK.length; _ML < _MM; _ML++) { //#19133
            $k[$j++] = $get(_MK, _ML); //#19133
        } //#19133
        $_.ecbs = $a(); //#19133
    } //#19133
    $k[$j++] = Infinity; //#19137
    var _MP = $_.cws; //#19137
    for (var _MQ = 0, _MR = _MP.length; _MQ < _MR; _MQ++) { //#19137
        $k[$j++] = $get(_MP, _MQ); //#19137
    } //#19137
    for (var _MU = 0, _MV = $_.rscw; _MU < _MV; _MU++) { //#19137
        $k[$j++] = 0; //#19137
    } //#19137
    $_.cws = $a(); //#19137
    for (var _MZ = 0, _MY = $f($_.rscw - 1); _MZ <= _MY; _MZ += 1) { //#19141
        $_.i = _MZ; //#19139
        $put($_.cws, $f($_.ncws + $_.i), $get($get($_.ecbs, $_.i % $_.rsbl), ~~($_.i / $_.rsbl))); //#19140
    } //#19140
    $_.module = function() {
        var _Mk = $k[--$j]; //#19146
        var _Ml = $k[--$j]; //#19146
        var _Mm = $k[--$j]; //#19146
        var _Mp = $strcpy($s(8), "00000000"); //#19147
        var _Mr = $cvrs($s(8), $k[--$j], 2); //#19147
        $puti(_Mp, 8 - _Mr.length, _Mr); //#19148
        $k[$j++] = _Mm; //#19149
        $k[$j++] = _Ml; //#19149
        $k[$j++] = _Mk; //#19149
        $k[$j++] = _Mp; //#19149
        for (var _Ms = 7; _Ms >= 0; _Ms -= 1) { //#19149
            var _Mt = $k[--$j]; //#19149
            $k[$j++] = $f($get(_Mt, _Ms) - 48); //#19149
            $k[$j++] = _Mt; //#19149
        } //#19149
        $j--; //#19149
        var _Mv = $k[--$j]; //#19150
        var _Mw = $k[--$j]; //#19150
        var _Mx = $k[--$j]; //#19150
        var _My = $k[--$j]; //#19150
        var _Mz = $k[--$j]; //#19150
        var _N0 = $k[--$j]; //#19150
        var _N1 = $k[--$j]; //#19150
        var _N2 = $k[--$j]; //#19150
        var _N3 = $k[--$j]; //#19150
        var _N4 = $k[--$j]; //#19150
        var _N5 = $k[--$j]; //#19150
        $k[$j++] = _N2; //#19167
        $k[$j++] = _N1; //#19167
        $k[$j++] = _N0; //#19167
        $k[$j++] = _Mz; //#19167
        $k[$j++] = _My; //#19167
        $k[$j++] = _Mx; //#19167
        $k[$j++] = _Mw; //#19167
        $k[$j++] = _Mv; //#19167
        $k[$j++] = _N5; //#19167
        $k[$j++] = _N4; //#19167
        $forall(_N3, function() { //#19167
            if ($k[--$j]() === true) {
                return true;
            } //#19153
            var _N7 = $k[--$j]; //#19154
            var _N8 = $k[--$j]; //#19154
            $k[$j++] = _N8; //#19157
            $k[$j++] = _N7; //#19157
            if (_N8 < 0) { //#19157
                var _N9 = $k[--$j]; //#19155
                var _NA = $k[--$j]; //#19155
                $k[$j++] = $f(_NA + $_.mrows); //#19156
                $k[$j++] = $f(_N9 + ($f(4 - ($f($_.mrows + 4) % 8)))); //#19156
            } //#19156
            var _ND = $k[--$j]; //#19158
            $k[$j++] = _ND; //#19161
            if (_ND < 0) { //#19161
                var _NF = $k[--$j]; //#19159
                var _NG = $k[--$j]; //#19159
                $k[$j++] = $f(_NG + ($f(4 - ($f($_.mcols + 4) % 8)))); //#19160
                $k[$j++] = $f(_NF + $_.mcols); //#19160
            } //#19160
            var _NI = $k[--$j]; //#19162
            var _NJ = $k[--$j]; //#19162
            $k[$j++] = _NJ; //#19164
            $k[$j++] = _NI; //#19164
            if (_NJ >= $_.mrows) { //#19164
                var _NL = $k[--$j]; //#19163
                var _NM = $k[--$j]; //#19163
                $k[$j++] = $f(_NM - $_.mrows); //#19163
                $k[$j++] = _NL; //#19163
            } //#19163
            var _NO = $k[--$j]; //#19165
            var _NP = $k[--$j]; //#19165
            var _NS = $k[--$j]; //#19166
            var _NT = $k[--$j]; //#19166
            $put($_.mmat, $f(_NO + (_NP * $_.mcols)), $k[--$j]); //#19166
            $k[$j++] = _NT; //#19166
            $k[$j++] = _NS; //#19166
        }); //#19166
    }; //#19166
    var _Nl = $a([function() {
        var _NV = $k[--$j]; //#19172
        var _NW = $k[--$j]; //#19172
        $k[$j++] = _NW; //#19172
        $k[$j++] = _NV; //#19172
        $k[$j++] = $f(_NW - 2); //#19172
        $k[$j++] = $f(_NV - 2); //#19172
    }, function() {
        var _NX = $k[--$j]; //#19172
        var _NY = $k[--$j]; //#19172
        $k[$j++] = _NY; //#19172
        $k[$j++] = _NX; //#19172
        $k[$j++] = $f(_NY - 2); //#19172
        $k[$j++] = $f(_NX - 1); //#19172
    }, function() {
        var _NZ = $k[--$j]; //#19173
        var _Na = $k[--$j]; //#19173
        $k[$j++] = _Na; //#19173
        $k[$j++] = _NZ; //#19173
        $k[$j++] = $f(_Na - 1); //#19173
        $k[$j++] = $f(_NZ - 2); //#19173
    }, function() {
        var _Nb = $k[--$j]; //#19173
        var _Nc = $k[--$j]; //#19173
        $k[$j++] = _Nc; //#19173
        $k[$j++] = _Nb; //#19173
        $k[$j++] = $f(_Nc - 1); //#19173
        $k[$j++] = $f(_Nb - 1); //#19173
    }, function() {
        var _Nd = $k[--$j]; //#19174
        var _Ne = $k[--$j]; //#19174
        $k[$j++] = _Ne; //#19174
        $k[$j++] = _Nd; //#19174
        $k[$j++] = $f(_Ne - 1); //#19174
        $k[$j++] = _Nd; //#19174
    }, function() {
        var _Nf = $k[--$j]; //#19174
        var _Ng = $k[--$j]; //#19174
        $k[$j++] = _Ng; //#19174
        $k[$j++] = _Nf; //#19174
        $k[$j++] = _Ng; //#19174
        $k[$j++] = $f(_Nf - 2); //#19174
    }, function() {
        var _Nh = $k[--$j]; //#19175
        var _Ni = $k[--$j]; //#19175
        $k[$j++] = _Ni; //#19175
        $k[$j++] = _Nh; //#19175
        $k[$j++] = _Ni; //#19175
        $k[$j++] = $f(_Nh - 1); //#19175
    }, function() {
        var _Nj = $k[--$j]; //#19175
        var _Nk = $k[--$j]; //#19175
        $k[$j++] = _Nk; //#19175
        $k[$j++] = _Nj; //#19175
        $k[$j++] = _Nk; //#19175
        $k[$j++] = _Nj; //#19175
    }]); //#19175
    $_.dmn = _Nl; //#19176
    var _Nu = $a([function() {
        $k[$j++] = $f($_.mrows - 1); //#19179
        $k[$j++] = 0; //#19179
    }, function() {
        $k[$j++] = $f($_.mrows - 1); //#19179
        $k[$j++] = 1; //#19179
    }, function() {
        $k[$j++] = $f($_.mrows - 1); //#19180
        $k[$j++] = 2; //#19180
    }, function() {
        $k[$j++] = 0; //#19180
        $k[$j++] = $f($_.mcols - 2); //#19180
    }, function() {
        $k[$j++] = 0; //#19181
        $k[$j++] = $f($_.mcols - 1); //#19181
    }, function() {
        $k[$j++] = 1; //#19181
        $k[$j++] = $f($_.mcols - 1); //#19181
    }, function() {
        $k[$j++] = 2; //#19182
        $k[$j++] = $f($_.mcols - 1); //#19182
    }, function() {
        $k[$j++] = 3; //#19182
        $k[$j++] = $f($_.mcols - 1); //#19182
    }]); //#19182
    $_.dmc1 = _Nu; //#19183
    var _O3 = $a([function() {
        $k[$j++] = $f($_.mrows - 3); //#19186
        $k[$j++] = 0; //#19186
    }, function() {
        $k[$j++] = $f($_.mrows - 2); //#19186
        $k[$j++] = 0; //#19186
    }, function() {
        $k[$j++] = $f($_.mrows - 1); //#19187
        $k[$j++] = 0; //#19187
    }, function() {
        $k[$j++] = 0; //#19187
        $k[$j++] = $f($_.mcols - 4); //#19187
    }, function() {
        $k[$j++] = 0; //#19188
        $k[$j++] = $f($_.mcols - 3); //#19188
    }, function() {
        $k[$j++] = 0; //#19188
        $k[$j++] = $f($_.mcols - 2); //#19188
    }, function() {
        $k[$j++] = 0; //#19189
        $k[$j++] = $f($_.mcols - 1); //#19189
    }, function() {
        $k[$j++] = 1; //#19189
        $k[$j++] = $f($_.mcols - 1); //#19189
    }]); //#19189
    $_.dmc2 = _O3; //#19190
    var _OC = $a([function() {
        $k[$j++] = $f($_.mrows - 3); //#19193
        $k[$j++] = 0; //#19193
    }, function() {
        $k[$j++] = $f($_.mrows - 2); //#19193
        $k[$j++] = 0; //#19193
    }, function() {
        $k[$j++] = $f($_.mrows - 1); //#19194
        $k[$j++] = 0; //#19194
    }, function() {
        $k[$j++] = 0; //#19194
        $k[$j++] = $f($_.mcols - 2); //#19194
    }, function() {
        $k[$j++] = 0; //#19195
        $k[$j++] = $f($_.mcols - 1); //#19195
    }, function() {
        $k[$j++] = 1; //#19195
        $k[$j++] = $f($_.mcols - 1); //#19195
    }, function() {
        $k[$j++] = 2; //#19196
        $k[$j++] = $f($_.mcols - 1); //#19196
    }, function() {
        $k[$j++] = 3; //#19196
        $k[$j++] = $f($_.mcols - 1); //#19196
    }]); //#19196
    $_.dmc3 = _OC; //#19197
    var _OM = $a([function() {
        $k[$j++] = $f($_.mrows - 1); //#19200
        $k[$j++] = 0; //#19200
    }, function() {
        $k[$j++] = $f($_.mrows - 1); //#19200
        $k[$j++] = $f($_.mcols - 1); //#19200
    }, function() {
        $k[$j++] = 0; //#19201
        $k[$j++] = $f($_.mcols - 3); //#19201
    }, function() {
        $k[$j++] = 0; //#19201
        $k[$j++] = $f($_.mcols - 2); //#19201
    }, function() {
        $k[$j++] = 0; //#19202
        $k[$j++] = $f($_.mcols - 1); //#19202
    }, function() {
        $k[$j++] = 1; //#19202
        $k[$j++] = $f($_.mcols - 3); //#19202
    }, function() {
        $k[$j++] = 1; //#19203
        $k[$j++] = $f($_.mcols - 2); //#19203
    }, function() {
        $k[$j++] = 1; //#19203
        $k[$j++] = $f($_.mcols - 1); //#19203
    }]); //#19203
    $_.dmc4 = _OM; //#19204
    $k[$j++] = Infinity; //#19206
    for (var _OP = 0, _OQ = $_.mrows * $_.mcols; _OP < _OQ; _OP++) { //#19206
        $k[$j++] = -1; //#19206
    } //#19206
    $_.mmat = $a(); //#19206
    for (var _OT = $_.cws.length - 1; _OT >= 0; _OT -= 1) { //#19207
        $k[$j++] = $get($_.cws, _OT); //#19207
    } //#19207
    $k[$j++] = 4; //#19247
    $k[$j++] = 0; //#19247
    for (;;) { //#19247
        var _OW = $k[--$j]; //#19210
        var _OX = $k[--$j]; //#19210
        $k[$j++] = _OX; //#19212
        $k[$j++] = _OW; //#19212
        if ((_OW == 0) && (_OX == $_.mrows)) { //#19212
            $k[$j++] = $_.dmc1; //#19211
            $_.module(); //#19211
        } //#19211
        var _Oa = $k[--$j]; //#19213
        var _Ob = $k[--$j]; //#19213
        $k[$j++] = _Ob; //#19215
        $k[$j++] = _Oa; //#19215
        if (((_Oa == 0) && (_Ob == $f($_.mrows - 2))) && (($_.mcols % 4) != 0)) { //#19215
            $k[$j++] = $_.dmc2; //#19214
            $_.module(); //#19214
        } //#19214
        var _Of = $k[--$j]; //#19216
        var _Og = $k[--$j]; //#19216
        $k[$j++] = _Og; //#19218
        $k[$j++] = _Of; //#19218
        if (((_Of == 0) && (_Og == $f($_.mrows - 2))) && (($_.mcols % 8) == 4)) { //#19218
            $k[$j++] = $_.dmc3; //#19217
            $_.module(); //#19217
        } //#19217
        var _Ok = $k[--$j]; //#19219
        var _Ol = $k[--$j]; //#19219
        $k[$j++] = _Ol; //#19221
        $k[$j++] = _Ok; //#19221
        if (((_Ok == 2) && (_Ol == $f($_.mrows + 4))) && (($_.mcols % 8) == 0)) { //#19221
            $k[$j++] = $_.dmc4; //#19220
            $_.module(); //#19220
        } //#19220
        for (;;) { //#19231
            var _Op = $k[--$j]; //#19224
            var _Oq = $k[--$j]; //#19224
            $k[$j++] = _Oq; //#19228
            $k[$j++] = _Op; //#19228
            if ((_Op >= 0) && (_Oq < $_.mrows)) { //#19228
                var _Os = $k[--$j]; //#19225
                var _Ot = $k[--$j]; //#19225
                $k[$j++] = _Ot; //#19227
                $k[$j++] = _Os; //#19227
                if ($get($_.mmat, $f(_Os + (_Ot * $_.mcols))) == -1) { //#19227
                    $k[$j++] = $_.dmn; //#19226
                    $_.module(); //#19226
                } //#19226
            } //#19226
            var _Oy = $k[--$j]; //#19229
            var _Oz = $k[--$j]; //#19229
            $k[$j++] = $f(_Oz - 2); //#19230
            $k[$j++] = $f(_Oy + 2); //#19230
            if (!(($f(_Oy + 2) < $_.mcols) && ($f(_Oz - 2) >= 0))) { //#19230
                break; //#19230
            } //#19230
        } //#19230
        var _P1 = $k[--$j]; //#19232
        var _P2 = $k[--$j]; //#19232
        $k[$j++] = $f(_P2 + 1); //#19242
        $k[$j++] = $f(_P1 + 3); //#19242
        for (;;) { //#19242
            var _P3 = $k[--$j]; //#19235
            var _P4 = $k[--$j]; //#19235
            $k[$j++] = _P4; //#19239
            $k[$j++] = _P3; //#19239
            if ((_P3 < $_.mcols) && (_P4 >= 0)) { //#19239
                var _P6 = $k[--$j]; //#19236
                var _P7 = $k[--$j]; //#19236
                $k[$j++] = _P7; //#19238
                $k[$j++] = _P6; //#19238
                if ($get($_.mmat, $f(_P6 + (_P7 * $_.mcols))) == -1) { //#19238
                    $k[$j++] = $_.dmn; //#19237
                    $_.module(); //#19237
                } //#19237
            } //#19237
            var _PC = $k[--$j]; //#19240
            var _PD = $k[--$j]; //#19240
            $k[$j++] = $f(_PD + 2); //#19241
            $k[$j++] = $f(_PC - 2); //#19241
            if (!(($f(_PC - 2) >= 0) && ($f(_PD + 2) < $_.mrows))) { //#19241
                break; //#19241
            } //#19241
        } //#19241
        var _PF = $k[--$j]; //#19243
        var _PG = $k[--$j]; //#19243
        $k[$j++] = $f(_PG + 3); //#19245
        $k[$j++] = $f(_PF + 1); //#19245
        if (!(($f(_PF + 1) < $_.mcols) || ($f(_PG + 3) < $_.mrows))) { //#19245
            $j -= 2; //#19245
            break; //#19245
        } //#19245
    } //#19245
    if ($get($_.mmat, $f(($_.mrows * $_.mcols) - 1)) == -1) { //#19253
        $puti($_.mmat, $f(($_.mrows * $f($_.mcols - 1)) - 2), $a([1, 0])); //#19251
        $puti($_.mmat, $f(($_.mrows * $_.mcols) - 2), $a([0, 1])); //#19252
    } //#19252
    $_.pixs = $a($_.rows * $_.cols); //#19256
    $_.cwpos = 0; //#19257
    for (var _Pa = 0, _PZ = $f($_.rows - 1); _Pa <= _PZ; _Pa += 1) { //#19273
        $_.i = _Pa; //#19259
        if (($_.i % ($_.rrows + 2)) == 0) { //#19260
            $k[$j++] = $_.pixs; //#19260
            $k[$j++] = $_.i * $_.cols; //#19260
            $k[$j++] = Infinity; //#19260
            for (var _Ph = 0, _Pi = ~~($_.cols / 2); _Ph < _Pi; _Ph++) { //#19260
                $k[$j++] = 1; //#19260
                $k[$j++] = 0; //#19260
            } //#19260
            var _Pj = $a(); //#19260
            var _Pk = $k[--$j]; //#19260
            $puti($k[--$j], _Pk, _Pj); //#19260
        } //#19260
        if (($_.i % ($_.rrows + 2)) == ($_.rrows + 1)) { //#19261
            $k[$j++] = $_.pixs; //#19261
            $k[$j++] = $_.i * $_.cols; //#19261
            $k[$j++] = Infinity; //#19261
            for (var _Pt = 0, _Pu = $_.cols; _Pt < _Pu; _Pt++) { //#19261
                $k[$j++] = 1; //#19261
            } //#19261
            var _Pv = $a(); //#19261
            var _Pw = $k[--$j]; //#19261
            $puti($k[--$j], _Pw, _Pv); //#19261
        } //#19261
        if ((($_.i % ($_.rrows + 2)) != 0) && (($_.i % ($_.rrows + 2)) != ($_.rrows + 1))) { //#19272
            for (var _Q5 = 0, _Q4 = $f($_.cols - 1); _Q5 <= _Q4; _Q5 += 1) { //#19271
                $_.j = _Q5; //#19264
                if (($_.j % ($_.rcols + 2)) == 0) { //#19265
                    $put($_.pixs, $f(($_.i * $_.cols) + $_.j), 1); //#19265
                } //#19265
                if (($_.j % ($_.rcols + 2)) == ($_.rcols + 1)) { //#19266
                    $put($_.pixs, $f(($_.i * $_.cols) + $_.j), $_.i % 2); //#19266
                } //#19266
                if ((($_.j % ($_.rcols + 2)) != 0) && (($_.j % ($_.rcols + 2)) != ($_.rcols + 1))) { //#19270
                    $put($_.pixs, $f(($_.i * $_.cols) + $_.j), $get($_.mmat, $_.cwpos)); //#19268
                    $_.cwpos = $_.cwpos + 1; //#19269
                } //#19269
            } //#19269
        } //#19269
    } //#19269
    var _Qd = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $_.pixs],
        ["pixx", $_.cols],
        ["pixy", $_.rows],
        ["height", ($_.rows * 2) / 72],
        ["width", ($_.cols * 2) / 72],
        ["opt", $_.options]
    ]); //#19283
    $k[$j++] = _Qd; //#19286
    if (!$_.dontdraw) { //#19286
        bwipp_renmatrix(); //#19286
    } //#19286
    $_ = Object.getPrototypeOf($_); //#19288
    $_ = Object.getPrototypeOf($_); //#19290
}

function bwipp_datamatrixrectangular() {
    $_ = Object.create($_); //#19319
    $_.dontdraw = false; //#19322
    $k[$j++] = $_; //#19324
    bwipp_processoptions(); //#19324
    $_.options = $k[--$j]; //#19324
    $_.barcode = $k[--$j]; //#19325
    $put($_.options, "dontdraw", true); //#19328
    $put($_.options, "format", "rectangle"); //#19329
    $k[$j++] = 'args'; //#19331
    $k[$j++] = $_.barcode; //#19331
    $k[$j++] = $_.options; //#19331
    bwipp_datamatrix(); //#19331
    var _6 = $k[--$j]; //#19331
    $_[$k[--$j]] = _6; //#19331
    $put($_.args, "opt", $_.options); //#19333
    $k[$j++] = $_.args; //#19336
    if (!$_.dontdraw) { //#19336
        bwipp_renmatrix(); //#19336
    } //#19336
    $_ = Object.getPrototypeOf($_); //#19338
}

function bwipp_datamatrixrectangularextension() {
    $_ = Object.create($_); //#19367
    $_.dontdraw = false; //#19370
    $k[$j++] = $_; //#19372
    bwipp_processoptions(); //#19372
    $_.options = $k[--$j]; //#19372
    $_.barcode = $k[--$j]; //#19373
    $put($_.options, "dontdraw", true); //#19376
    $put($_.options, "dmre", true); //#19377
    $k[$j++] = 'args'; //#19379
    $k[$j++] = $_.barcode; //#19379
    $k[$j++] = $_.options; //#19379
    bwipp_datamatrix(); //#19379
    var _6 = $k[--$j]; //#19379
    $_[$k[--$j]] = _6; //#19379
    $put($_.args, "opt", $_.options); //#19381
    $k[$j++] = $_.args; //#19384
    if (!$_.dontdraw) { //#19384
        bwipp_renmatrix(); //#19384
    } //#19384
    $_ = Object.getPrototypeOf($_); //#19386
}

function bwipp_mailmark() {
    $_ = Object.create($_); //#19416
    $_.type = "unset"; //#19419
    $_.parse = false; //#19420
    $_.dontdraw = false; //#19421
    $k[$j++] = $_; //#19423
    bwipp_processoptions(); //#19423
    $_.options = $k[--$j]; //#19423
    $_.barcode = $k[--$j]; //#19424
    var _3 = new Map([
        ["parse", $_.parse],
        ["parseonly", true],
        ["parsefnc", false]
    ]); //#19430
    $_.fncvals = _3; //#19431
    $k[$j++] = 'barcode'; //#19432
    $k[$j++] = $_.barcode; //#19432
    $k[$j++] = $_.fncvals; //#19432
    bwipp_parseinput(); //#19432
    var _6 = $k[--$j]; //#19432
    $_[$k[--$j]] = _6; //#19432
    $_.barlen = $_.barcode.length; //#19433
    delete $_.options["parse"]; //#19434
    var _A = $_['type']; //#19437
    if ($ne(_A, "7") && ($ne(_A, "9") && $ne(_A, "29"))) { //#19439
        $k[$j++] = 'bwipp.mailmarkBadType#19438'; //#19438
        $k[$j++] = "Royal Mail Mailmark type must be 7, 9 or 29"; //#19438
        bwipp_raiseerror(); //#19438
    } //#19438
    var _B = new Map([
        ["7", "24x24"],
        ["9", "32x32"],
        ["29", "16x48"]
    ]); //#19443
    $_.version = $get(_B, $_['type']); //#19444
    var _E = new Map([
        ["7", "square"],
        ["9", "square"],
        ["29", "rectangle"]
    ]); //#19449
    $_.format = $get(_E, $_['type']); //#19450
    if ($_.barcode.length < 45) { //#19455
        $k[$j++] = 'bwipp.mailmarkBadLength#19454'; //#19454
        $k[$j++] = "Royal Mail Mailmark must contain at least 45 characters of Mailmark formatted data, including any required space padding"; //#19454
        bwipp_raiseerror(); //#19454
    } //#19454
    if ($ne($geti($_.barcode, 0, 4), "JGB ")) { //#19458
        $k[$j++] = 'bwipp.mailmarkBadIndicator#19457'; //#19457
        $k[$j++] = "Royal Mail Mailmark must begin with JGB<space> identifier"; //#19457
        bwipp_raiseerror(); //#19457
    } //#19457
    $put($_.options, "dontdraw", true); //#19461
    $put($_.options, "version", $_.version); //#19462
    $put($_.options, "format", $_.format); //#19463
    $put($_.options, "c40headerlength", 45); //#19464
    $k[$j++] = 'args'; //#19465
    $k[$j++] = $_.barcode; //#19465
    $k[$j++] = $_.options; //#19465
    bwipp_datamatrix(); //#19465
    var _S = $k[--$j]; //#19465
    $_[$k[--$j]] = _S; //#19465
    $put($_.args, "opt", $_.options); //#19467
    $k[$j++] = $_.args; //#19470
    if (!$_.dontdraw) { //#19470
        bwipp_renmatrix(); //#19470
    } //#19470
    $_ = Object.getPrototypeOf($_); //#19472
}

function bwipp_qrcode() {
    $_ = Object.create($_); //#19503
    $_.dontdraw = false; //#19506
    $_.format = "unset"; //#19507
    $_.version = "unset"; //#19508
    $_.eclevel = "unset"; //#19509
    $_.parse = false; //#19510
    $_.parsefnc = false; //#19511
    $_.mask = -1; //#19512
    $k[$j++] = $_; //#19514
    bwipp_processoptions(); //#19514
    $_.options = $k[--$j]; //#19514
    $_.barcode = $k[--$j]; //#19515
    bwipp_loadctx(bwipp_qrcode) //#19517
    if ($eq($_.barcode, "")) { //#19521
        $k[$j++] = 'bwipp.qrcodeEmptyData#19520'; //#19520
        $k[$j++] = "The data must not be empty"; //#19520
        bwipp_raiseerror(); //#19520
    } //#19520
    if ($ne($_.version, "unset")) { //#19532
        if ($eq($_.format, "unset")) { //#19530
            $k[$j++] = "full"; //#19527
            if ($eq($geti($_.version, 0, 1), "M")) { //#19527
                $j--; //#19527
                $k[$j++] = "micro"; //#19527
            } //#19527
            if ($eq($geti($_.version, 0, 1), "R")) { //#19528
                $j--; //#19528
                $k[$j++] = "rmqr"; //#19528
            } //#19528
            $_.format = $k[--$j]; //#19529
        } //#19529
    } else { //#19532
        if ($eq($_.format, "unset")) { //#19532
            $_.format = "full"; //#19532
        } //#19532
    } //#19532
    if ($ne($_.format, "full") && ($ne($_.format, "micro") && $ne($_.format, "rmqr"))) { //#19537
        $k[$j++] = 'bwipp.qrcodeInvalidFormat#19536'; //#19536
        $k[$j++] = "The format must be either full, micro or rmqr"; //#19536
        bwipp_raiseerror(); //#19536
    } //#19536
    if ($eq($_.format, "rmqr") && $eq($_.version, "unset")) { //#19541
        $k[$j++] = 'bwipp.qrcodeRMQRwithoutVersion#19540'; //#19540
        $k[$j++] = "A version must be provided for RMQR"; //#19540
        bwipp_raiseerror(); //#19540
    } //#19540
    if ($eq($_.eclevel, "unset")) { //#19544
        $k[$j++] = 'eclevel'; //#19544
        if ($ne($_.format, "micro")) { //#19544
            $k[$j++] = "M"; //#19544
        } else { //#19544
            $k[$j++] = "L"; //#19544
        } //#19544
        var _I = $k[--$j]; //#19544
        $_[$k[--$j]] = _I; //#19544
    } //#19544
    if ($ne($_.eclevel, "L") && ($ne($_.eclevel, "M") && ($ne($_.eclevel, "Q") && $ne($_.eclevel, "H")))) { //#19548
        $k[$j++] = 'bwipp.qrcodeInvalidEClevel#19547'; //#19547
        $k[$j++] = "Error correction level must be either L, M, Q, or H"; //#19547
        bwipp_raiseerror(); //#19547
    } //#19547
    if (($_.mask != -1) && $eq($_.format, "rmqr")) { //#19552
        $k[$j++] = 'bwipp.qrcodeRMQRmask#19551'; //#19551
        $k[$j++] = "A mask cannot be supplied for RMQR"; //#19551
        bwipp_raiseerror(); //#19551
    } //#19551
    if ($_.mask != -1) { //#19558
        var _U = $eq($_.format, "full") ? 8 : 4; //#19555
        if (($_.mask < 1) || ($_.mask > _U)) { //#19557
            $k[$j++] = 'bwipp.qrcodeBadMask#19556'; //#19556
            $k[$j++] = "An invalid mask was supplied"; //#19556
            bwipp_raiseerror(); //#19556
        } //#19556
    } //#19556
    $_.fn1 = -1; //#19561
    var _Y = new Map([
        ["parse", $_.parse],
        ["parsefnc", $_.parsefnc],
        ["eci", true],
        ["FNC1", $_.fn1]
    ]); //#19566
    $_.fncvals = _Y; //#19567
    $k[$j++] = 'msg'; //#19568
    $k[$j++] = $_.barcode; //#19568
    $k[$j++] = $_.fncvals; //#19568
    bwipp_parseinput(); //#19568
    var _b = $k[--$j]; //#19568
    $_[$k[--$j]] = _b; //#19568
    $_.msglen = $_.msg.length; //#19569
    $_.fnc1first = false; //#19572
    if ($_.msglen > 0) { //#19579
        if ($get($_.msg, 0) == $_.fn1) { //#19578
            $_.fnc1first = true; //#19575
            $k[$j++] = Infinity; //#19576
            var _k = $geti($_.msg, 1, $_.msglen - 1); //#19576
            for (var _l = 0, _m = _k.length; _l < _m; _l++) { //#19576
                var _n = $get(_k, _l); //#19576
                $k[$j++] = _n; //#19576
                if (_n == 37) { //#19576
                    var _o = $k[--$j]; //#19576
                    $k[$j++] = _o; //#19576
                    $k[$j++] = _o; //#19576
                } //#19576
            } //#19576
            $_.msg = $a(); //#19576
            $_.msglen = $_.msg.length; //#19577
        } //#19577
    } //#19577
    if (!bwipp_qrcode.__19700__) { //#19700
        $_ = Object.create($_); //#19700
        var _r = $a(['v1to9', 'v10to26', 'v27to40', 'vM1', 'vM2', 'vM3', 'vM4', 'vR7x43', 'vR7x59', 'vR7x77', 'vR7x99', 'vR7x139', 'vR9x43', 'vR9x59', 'vR9x77', 'vR9x99', 'vR9x139', 'vR11x27', 'vR11x43', 'vR11x59', 'vR11x77', 'vR11x99', 'vR11x139', 'vR13x27', 'vR13x43', 'vR13x59', 'vR13x77', 'vR13x99', 'vR13x139', 'vR15x43', 'vR15x59', 'vR15x77', 'vR15x99', 'vR15x139', 'vR17x43', 'vR17x59', 'vR17x77', 'vR17x99', 'vR17x139']); //#19592
        $k[$j++] = 0; //#19593
        for (var _s = 0, _t = _r.length; _s < _t; _s++) { //#19593
            var _v = $k[--$j]; //#19593
            $_[$get(_r, _s)] = _v; //#19593
            $k[$j++] = $f(_v + 1); //#19593
        } //#19593
        $j--; //#19593
        $_.N = 0; //#19599
        $_.A = 1; //#19599
        $_.B = 2; //#19599
        $_.K = 3; //#19599
        $_.E = 4; //#19599
        $k[$j++] = Infinity; //#19604
        $k[$j++] = Infinity; //#19603
        for (var _w = 48; _w <= 57; _w += 1) { //#19603
            $k[$j++] = _w; //#19603
        } //#19603
        var _x = $a(); //#19603
        for (var _y = 0, _z = _x.length; _y < _z; _y++) { //#19604
            $k[$j++] = $get(_x, _y); //#19604
            $k[$j++] = -1; //#19604
        } //#19604
        $_.Nexcl = $d(); //#19605
        $k[$j++] = Infinity; //#19612
        $k[$j++] = Infinity; //#19611
        $k[$j++] = 32; //#19610
        $k[$j++] = 36; //#19610
        $k[$j++] = 37; //#19610
        $k[$j++] = 42; //#19610
        $k[$j++] = 43; //#19610
        $k[$j++] = 45; //#19610
        $k[$j++] = 46; //#19610
        $k[$j++] = 47; //#19610
        $k[$j++] = 58; //#19610
        for (var _12 = 65; _12 <= 90; _12 += 1) { //#19610
            $k[$j++] = _12; //#19610
        } //#19610
        $k[$j++] = $_.fn1; //#19611
        var _14 = $a(); //#19611
        for (var _15 = 0, _16 = _14.length; _15 < _16; _15++) { //#19612
            $k[$j++] = $get(_14, _15); //#19612
            $k[$j++] = -1; //#19612
        } //#19612
        $_.Aexcl = $d(); //#19613
        $k[$j++] = Infinity; //#19621
        $k[$j++] = Infinity; //#19620
        for (var _19 = 129; _19 <= 159; _19 += 1) { //#19619
            $k[$j++] = _19; //#19619
        } //#19619
        for (var _1A = 224; _1A <= 235; _1A += 1) { //#19620
            $k[$j++] = _1A; //#19620
        } //#19620
        var _1B = $a(); //#19620
        for (var _1C = 0, _1D = _1B.length; _1C < _1D; _1C++) { //#19621
            $k[$j++] = $get(_1B, _1C); //#19621
            $k[$j++] = -1; //#19621
        } //#19621
        $_.Kexcl = $d(); //#19622
        $k[$j++] = Infinity; //#19634
        $k[$j++] = $a(["0001", "0010", "0100", "1000", "0111"]); //#19635
        $k[$j++] = $a(["0001", "0010", "0100", "1000", "0111"]); //#19635
        $k[$j++] = $a(["0001", "0010", "0100", "1000", "0111"]); //#19635
        $k[$j++] = $a(["", -1, -1, -1, -1]); //#19635
        $k[$j++] = $a(["0", "1", -1, -1, -1]); //#19635
        $k[$j++] = $a(["00", "01", "10", "11", -1]); //#19635
        $k[$j++] = $a(["000", "001", "010", "011", -1]); //#19635
        for (var _1N = 0, _1O = 32; _1N < _1O; _1N++) { //#19635
            $k[$j++] = $a(["001", "010", "011", "100", "111"]); //#19634
        } //#19634
        $_.mids = $a(); //#19634
        $_.cclens = $a([$a([10, 9, 8, 8]), $a([12, 11, 16, 10]), $a([14, 13, 16, 12]), $a([3, -1, -1, -1]), $a([4, 3, -1, -1]), $a([5, 4, 4, 3]), $a([6, 5, 5, 4]), $a([4, 3, 3, 2]), $a([5, 5, 4, 3]), $a([6, 5, 5, 4]), $a([7, 6, 5, 5]), $a([7, 6, 6, 5]), $a([5, 5, 4, 3]), $a([6, 5, 5, 4]), $a([7, 6, 5, 5]), $a([7, 6, 6, 5]), $a([8, 7, 6, 6]), $a([4, 4, 3, 2]), $a([6, 5, 5, 4]), $a([7, 6, 5, 5]), $a([7, 6, 6, 5]), $a([8, 7, 6, 6]), $a([8, 7, 7, 6]), $a([5, 5, 4, 3]), $a([6, 6, 5, 5]), $a([7, 6, 6, 5]), $a([7, 7, 6, 6]), $a([8, 7, 7, 6]), $a([8, 8, 7, 7]), $a([7, 6, 6, 5]), $a([7, 7, 6, 5]), $a([8, 7, 7, 6]), $a([8, 7, 7, 6]), $a([9, 8, 7, 7]), $a([7, 6, 6, 5]), $a([8, 7, 6, 6]), $a([8, 7, 7, 6]), $a([8, 8, 7, 6]), $a([9, 8, 8, 7])]); //#19678
        $k[$j++] = Infinity; //#19689
        for (var _25 = 0, _26 = 3; _25 < _26; _25++) { //#19683
            $k[$j++] = 4; //#19682
        } //#19682
        $k[$j++] = 3; //#19690
        $k[$j++] = 5; //#19690
        $k[$j++] = 7; //#19690
        $k[$j++] = 9; //#19690
        for (var _27 = 0, _28 = 32; _27 < _28; _27++) { //#19690
            $k[$j++] = 3; //#19689
        } //#19689
        $_.termlens = $a(); //#19689
        $_.padstrs = $a(["11101100", "00010001"]); //#19693
        $_.charmap = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:"; //#19696
        $_.charvals = new Map; //#19697
        for (var _2B = 0; _2B <= 44; _2B += 1) { //#19698
            $put($_.charvals, $get($_.charmap, _2B), _2B); //#19698
        } //#19698
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_qrcode.$ctx[id] = $_[id]); //#19698
        bwipp_qrcode.__19700__ = 1; //#19698
        $_ = Object.getPrototypeOf($_); //#19698
    } //#19698
    $_.tobin = function() {
        var _2H = $s($k[--$j]); //#19704
        $k[$j++] = _2H; //#19704
        for (var _2J = 0, _2I = _2H.length - 1; _2J <= _2I; _2J += 1) { //#19704
            var _2K = $k[--$j]; //#19704
            $put(_2K, _2J, 48); //#19704
            $k[$j++] = _2K; //#19704
        } //#19704
        var _2L = $k[--$j]; //#19705
        var _2O = $cvrs($s(_2L.length), $k[--$j], 2); //#19705
        $puti(_2L, _2L.length - _2O.length, _2O); //#19705
        $k[$j++] = _2L; //#19705
    }; //#19705
    $_.encA = function() {
        $_.in = $k[--$j]; //#19709
        if ($_.fnc1first) { //#19712
            $k[$j++] = Infinity; //#19711
            $forall($_.in, function() { //#19711
                var _2S = $k[--$j]; //#19711
                $k[$j++] = _2S; //#19711
                if (_2S == $_.fn1) { //#19711
                    $j--; //#19711
                    $k[$j++] = 37; //#19711
                } //#19711
            }); //#19711
            $_.in = $a(); //#19711
        } //#19711
        $_.out = $s((~~(($_.in.length * 11) / 2)) + 1); //#19713
        $_.k = 0; //#19714
        $_.m = 0; //#19714
        for (;;) { //#19725
            if ($_.k == $_.in.length) { //#19715
                break; //#19715
            } //#19715
            if ($_.k < ($_.in.length - 1)) { //#19721
                $k[$j++] = $f(($get($_.charvals, $get($_.in, $_.k)) * 45) + $get($_.charvals, $get($_.in, $_.k + 1))); //#19717
                $k[$j++] = 11; //#19717
                $_.tobin(); //#19717
                $_.k = $_.k + 2; //#19718
            } else { //#19721
                $k[$j++] = $get($_.charvals, $get($_.in, $_.k)); //#19720
                $k[$j++] = 6; //#19720
                $_.tobin(); //#19720
                $_.k = $_.k + 1; //#19721
            } //#19721
            var _2s = $k[--$j]; //#19723
            $puti($_.out, $_.m, _2s); //#19723
            $_.m = _2s.length + $_.m; //#19724
        } //#19724
        $k[$j++] = $geti($_.out, 0, $_.m); //#19726
    }; //#19726
    $_.encN = function() {
        $_.in = $k[--$j]; //#19730
        $_.out = $s((~~(($_.in.length * 10) / 3)) + 1); //#19731
        $_.k = 0; //#19732
        $_.m = 0; //#19732
        for (;;) { //#19748
            if ($_.k == $_.in.length) { //#19733
                break; //#19733
            } //#19733
            if ($_.k < ($_.in.length - 2)) { //#19743
                var _38 = $geti($_.in, $_.k, 3); //#19735
                $k[$j++] = 0; //#19735
                for (var _39 = 0, _3A = _38.length; _39 < _3A; _39++) { //#19735
                    var _3C = $k[--$j]; //#19735
                    $k[$j++] = $f($get(_38, _39) + ($f((_3C * 10) - 48))); //#19735
                } //#19735
                $k[$j++] = 10; //#19735
                $_.tobin(); //#19735
                $_.k = $_.k + 3; //#19736
            } else { //#19743
                if ($_.k == ($_.in.length - 2)) { //#19743
                    var _3I = $geti($_.in, $_.k, 2); //#19739
                    $k[$j++] = 0; //#19739
                    for (var _3J = 0, _3K = _3I.length; _3J < _3K; _3J++) { //#19739
                        var _3M = $k[--$j]; //#19739
                        $k[$j++] = $f($get(_3I, _3J) + ($f((_3M * 10) - 48))); //#19739
                    } //#19739
                    $k[$j++] = 7; //#19739
                    $_.tobin(); //#19739
                    $_.k = $_.k + 2; //#19740
                } else { //#19743
                    var _3Q = $geti($_.in, $_.k, 1); //#19742
                    $k[$j++] = 0; //#19742
                    for (var _3R = 0, _3S = _3Q.length; _3R < _3S; _3R++) { //#19742
                        var _3U = $k[--$j]; //#19742
                        $k[$j++] = $f($get(_3Q, _3R) + ($f((_3U * 10) - 48))); //#19742
                    } //#19742
                    $k[$j++] = 4; //#19742
                    $_.tobin(); //#19742
                    $_.k = $_.k + 1; //#19743
                } //#19743
            } //#19743
            var _3W = $k[--$j]; //#19746
            $puti($_.out, $_.m, _3W); //#19746
            $_.m = _3W.length + $_.m; //#19747
        } //#19747
        $k[$j++] = $geti($_.out, 0, $_.m); //#19749
    }; //#19749
    $_.encB = function() {
        $_.in = $k[--$j]; //#19753
        if ($_.fnc1first) { //#19756
            $k[$j++] = Infinity; //#19755
            $forall($_.in, function() { //#19755
                var _3g = $k[--$j]; //#19755
                $k[$j++] = _3g; //#19755
                if (_3g == $_.fn1) { //#19755
                    $j--; //#19755
                    $k[$j++] = 29; //#19755
                } //#19755
            }); //#19755
            $_.in = $a(); //#19755
        } //#19755
        $_.out = $s($_.in.length * 8); //#19757
        for (var _3n = 0, _3m = $_.in.length - 1; _3n <= _3m; _3n += 1) { //#19762
            $_.k = _3n; //#19759
            $k[$j++] = $cvi($get($_.in, $_.k)); //#19760
            $k[$j++] = 8; //#19760
            $_.tobin(); //#19760
            $puti($_.out, $_.k * 8, $k[--$j]); //#19761
        } //#19761
        $k[$j++] = $_.out; //#19763
    }; //#19763
    $_.encK = function() {
        $_.in = $k[--$j]; //#19767
        $_.out = $s((~~($_.in.length / 2)) * 13); //#19768
        $_.k = 0; //#19769
        $_.m = 0; //#19769
        for (;;) { //#19777
            if ($_.k == $_.in.length) { //#19770
                break; //#19770
            } //#19770
            var _46 = $f(($get($_.in, $_.k) * 256) + $get($_.in, $_.k + 1)); //#19772
            $k[$j++] = _46; //#19772
            if (_46 < 57408) { //#19772
                $k[$j++] = 33088; //#19772
            } else { //#19772
                $k[$j++] = 49472; //#19772
            } //#19772
            var _47 = $k[--$j]; //#19772
            var _49 = $f($k[--$j] - _47); //#19773
            $k[$j++] = $f(((_49 >>> 8) * 192) + (_49 & 255)); //#19774
            $k[$j++] = 13; //#19774
            $_.tobin(); //#19774
            var _4A = $k[--$j]; //#19774
            $puti($_.out, $_.m, _4A); //#19774
            $_.m = _4A.length + $_.m; //#19775
            $_.k = $_.k + 2; //#19776
        } //#19776
        $k[$j++] = $_.out; //#19778
    }; //#19778
    $_.encE = function() {
        var _4I = $f((-$get($k[--$j], 0)) - 1000000); //#19783
        $k[$j++] = _4I; //#19789
        if (_4I <= 127) { //#19788
            $k[$j++] = 8; //#19784
            $_.tobin(); //#19784
        } else { //#19788
            var _4J = $k[--$j]; //#19785
            $k[$j++] = _4J; //#19789
            if (_4J <= 16383) { //#19788
                var _4K = $k[--$j]; //#19786
                $k[$j++] = $f(_4K + 32768); //#19786
                $k[$j++] = 16; //#19786
                $_.tobin(); //#19786
            } else { //#19788
                var _4L = $k[--$j]; //#19788
                $k[$j++] = $f(_4L + 12582912); //#19788
                $k[$j++] = 24; //#19788
                $_.tobin(); //#19788
            } //#19788
        } //#19788
    }; //#19788
    $_.encfuncs = $a(['encN', 'encA', 'encB', 'encK', 'encE']); //#19792
    $_.addtobits = function() {
        var _4N = $k[--$j]; //#19795
        $puti($_.bits, $_.j, _4N); //#19795
        $_.j = _4N.length + $_.j; //#19796
    }; //#19796
    $k[$j++] = Infinity; //#19799
    for (var _4S = 0, _4T = $_.msglen; _4S < _4T; _4S++) { //#19799
        $k[$j++] = 0; //#19799
    } //#19799
    $k[$j++] = 0; //#19799
    $_.numNs = $a(); //#19799
    $k[$j++] = Infinity; //#19800
    for (var _4W = 0, _4X = $_.msglen; _4W < _4X; _4W++) { //#19800
        $k[$j++] = 0; //#19800
    } //#19800
    $k[$j++] = 0; //#19800
    $_.numAs = $a(); //#19800
    $k[$j++] = Infinity; //#19801
    for (var _4a = 0, _4b = $_.msglen; _4a < _4b; _4a++) { //#19801
        $k[$j++] = 0; //#19801
    } //#19801
    $k[$j++] = 0; //#19801
    $_.numAorNs = $a(); //#19801
    $k[$j++] = Infinity; //#19802
    for (var _4e = 0, _4f = $_.msglen; _4e < _4f; _4e++) { //#19802
        $k[$j++] = 0; //#19802
    } //#19802
    $k[$j++] = 0; //#19802
    $_.numBs = $a(); //#19802
    $k[$j++] = Infinity; //#19803
    for (var _4i = 0, _4j = $_.msglen; _4i < _4j; _4i++) { //#19803
        $k[$j++] = 0; //#19803
    } //#19803
    $k[$j++] = 0; //#19803
    $_.numKs = $a(); //#19803
    $k[$j++] = Infinity; //#19804
    for (var _4m = 0, _4n = $_.msglen; _4m < _4n; _4m++) { //#19804
        $k[$j++] = 0; //#19804
    } //#19804
    $k[$j++] = 9999; //#19804
    $_.nextNs = $a(); //#19804
    $k[$j++] = Infinity; //#19805
    for (var _4q = 0, _4r = $_.msglen; _4q < _4r; _4q++) { //#19805
        $k[$j++] = 0; //#19805
    } //#19805
    $k[$j++] = 9999; //#19805
    $_.nextBs = $a(); //#19805
    $k[$j++] = Infinity; //#19806
    for (var _4u = 0, _4v = $_.msglen; _4u < _4v; _4u++) { //#19806
        $k[$j++] = 0; //#19806
    } //#19806
    $k[$j++] = 9999; //#19806
    $_.nextAs = $a(); //#19806
    $k[$j++] = Infinity; //#19807
    for (var _4y = 0, _4z = $_.msglen; _4y < _4z; _4y++) { //#19807
        $k[$j++] = 0; //#19807
    } //#19807
    $k[$j++] = 9999; //#19807
    $_.nextKs = $a(); //#19807
    $_.isECI = $a($_.msglen); //#19808
    for (var _54 = $_.msglen - 1; _54 >= 0; _54 -= 1) { //#19838
        $_.i = _54; //#19810
        $_.barchar = $get($_.msg, $_.i); //#19811
        var _5A = $get($_.Kexcl, $_.barchar) !== undefined; //#19812
        if (_5A) { //#19821
            $k[$j++] = 'sjis'; //#19813
            if (($_.i + 1) < $_.msglen) { //#19813
                $k[$j++] = $f(($_.barchar * 256) + $get($_.msg, $_.i + 1)); //#19813
            } else { //#19813
                $k[$j++] = 0; //#19813
            } //#19813
            var _5H = $k[--$j]; //#19813
            $_[$k[--$j]] = _5H; //#19813
            if ((($_.sjis >= 33088) && ($_.sjis <= 40956)) || (($_.sjis >= 57408) && ($_.sjis <= 60351))) { //#19818
                $put($_.nextKs, $_.i, 0); //#19815
                $put($_.numKs, $_.i, $f($get($_.numKs, $_.i + 2) + 1)); //#19816
            } else { //#19818
                $put($_.nextKs, $_.i, $f($get($_.nextKs, $_.i + 1) + 1)); //#19818
            } //#19818
        } else { //#19821
            $put($_.nextKs, $_.i, $f($get($_.nextKs, $_.i + 1) + 1)); //#19821
        } //#19821
        var _5g = $get($_.Nexcl, $_.barchar) !== undefined; //#19823
        if (_5g) { //#19828
            $put($_.nextNs, $_.i, 0); //#19824
            $put($_.numNs, $_.i, $f($get($_.numNs, $_.i + 1) + 1)); //#19825
            $put($_.numAorNs, $_.i, $f($get($_.numAorNs, $_.i + 1) + 1)); //#19826
        } else { //#19828
            $put($_.nextNs, $_.i, $f($get($_.nextNs, $_.i + 1) + 1)); //#19828
        } //#19828
        var _60 = $get($_.Aexcl, $_.barchar) !== undefined; //#19830
        if (_60) { //#19835
            $put($_.nextAs, $_.i, 0); //#19831
            $put($_.numAs, $_.i, $f($get($_.numAs, $_.i + 1) + 1)); //#19832
            $put($_.numAorNs, $_.i, $f($get($_.numAorNs, $_.i + 1) + 1)); //#19833
        } else { //#19835
            $put($_.nextAs, $_.i, $f($get($_.nextAs, $_.i + 1) + 1)); //#19835
        } //#19835
        $put($_.isECI, $_.i, $_.barchar <= -1000000); //#19837
    } //#19837
    for (var _6N = 0, _6M = $_.msglen - 1; _6N <= _6M; _6N += 1) { //#19845
        $_.i = _6N; //#19840
        if ($get($_.numKs, $_.i) > 0) { //#19844
            $put($_.numKs, $_.i + 1, 0); //#19842
            $put($_.nextKs, $_.i + 1, $f($get($_.nextKs, $_.i + 1) + 1)); //#19843
        } //#19843
    } //#19843
    for (var _6Z = $_.msglen - 1; _6Z >= 0; _6Z -= 1) { //#19854
        $_.i = _6Z; //#19847
        if ((($f($get($_.numNs, $_.i) + $f($get($_.numAs, $_.i) + $get($_.numKs, $_.i)))) == 0) && $nt($get($_.isECI, $_.i))) { //#19852
            $put($_.nextBs, $_.i, 0); //#19849
            $put($_.numBs, $_.i, $f($get($_.numBs, $_.i + 1) + 1)); //#19850
        } else { //#19852
            $put($_.nextBs, $_.i, $f($get($_.nextBs, $_.i + 1) + 1)); //#19852
        } //#19852
    } //#19852
    $_.KbeforeB = function() {
        var _71 = $get($k[--$j], $_.ver); //#19856
        $k[$j++] = $ge($_.numK, _71) && ($get($_.nextBs, $f(($_.numK * 2) + $_.i)) == 0); //#19856
    }; //#19856
    $_.KbeforeA = function() {
        var _79 = $get($k[--$j], $_.ver); //#19857
        $k[$j++] = $ge($_.numK, _79) && ($get($_.nextAs, $f(($_.numK * 2) + $_.i)) == 0); //#19857
    }; //#19857
    $_.KbeforeN = function() {
        var _7H = $get($k[--$j], $_.ver); //#19858
        $k[$j++] = $ge($_.numK, _7H) && ($get($_.nextNs, $f(($_.numK * 2) + $_.i)) == 0); //#19858
    }; //#19858
    $_.KbeforeE = function() {
        var _7P = $get($k[--$j], $_.ver); //#19859
        $k[$j++] = $ge($_.numK, _7P) && (($f(($_.numK * 2) + $_.i)) == $_.msglen); //#19859
    }; //#19859
    $_.AbeforeK = function() {
        var _7W = $get($k[--$j], $_.ver); //#19860
        $k[$j++] = $ge($_.numA, _7W) && ($get($_.nextKs, $f($_.numA + $_.i)) == 0); //#19860
    }; //#19860
    $_.AbeforeB = function() {
        var _7e = $get($k[--$j], $_.ver); //#19861
        $k[$j++] = $ge($_.numA, _7e) && ($get($_.nextBs, $f($_.numA + $_.i)) == 0); //#19861
    }; //#19861
    $_.AbeforeN = function() {
        var _7m = $get($k[--$j], $_.ver); //#19862
        $k[$j++] = $ge($_.numA, _7m) && ($get($_.nextNs, $f($_.numA + $_.i)) == 0); //#19862
    }; //#19862
    $_.AbeforeE = function() {
        var _7u = $get($k[--$j], $_.ver); //#19863
        $k[$j++] = $ge($_.numA, _7u) && ($f($_.numA + $_.i) == $_.msglen); //#19863
    }; //#19863
    $_.NbeforeK = function() {
        var _81 = $get($k[--$j], $_.ver); //#19864
        $k[$j++] = $ge($_.numN, _81) && ($get($_.nextKs, $f($_.numN + $_.i)) == 0); //#19864
    }; //#19864
    $_.NbeforeB = function() {
        var _89 = $get($k[--$j], $_.ver); //#19865
        $k[$j++] = $ge($_.numN, _89) && ($get($_.nextBs, $f($_.numN + $_.i)) == 0); //#19865
    }; //#19865
    $_.NbeforeA = function() {
        var _8H = $get($k[--$j], $_.ver); //#19866
        $k[$j++] = $ge($_.numN, _8H) && ($get($_.nextAs, $f($_.numN + $_.i)) == 0); //#19866
    }; //#19866
    $_.NbeforeE = function() {
        var _8P = $get($k[--$j], $_.ver); //#19867
        $k[$j++] = $ge($_.numN, _8P) && ($f($_.numN + $_.i) == $_.msglen); //#19867
    }; //#19867
    $_.AorNbeforeB = function() {
        var _8W = $get($k[--$j], $_.ver); //#19868
        $k[$j++] = $ge($_.numAorN, _8W) && ($get($_.nextBs, $f($_.numAorN + $_.i)) == 0); //#19868
    }; //#19868
    $_.AorNbeforeE = function() {
        var _8e = $get($k[--$j], $_.ver); //#19869
        $k[$j++] = $ge($_.numAorN, _8e) && ($f($_.numAorN + $_.i) == $_.msglen); //#19869
    }; //#19869
    $_.nextNslt = function() {
        if ($get($_.nextNs, $_.i) >= $_.msglen) { //#19871
            $j--; //#19871
            $k[$j++] = true; //#19871
        } else { //#19871
            var _8u = $get($k[--$j], $_.ver); //#19871
            $k[$j++] = $lt($get($_.numNs, $f($get($_.nextNs, $_.i) + $_.i)), _8u); //#19871
        } //#19871
    }; //#19871
    if (!bwipp_qrcode.__19901__) { //#19901
        $_ = Object.create($_); //#19901
        $k[$j++] = Infinity; //#19896
        $k[$j++] = "full"; //#19885
        $k[$j++] = Infinity; //#19885
        for (var _8v = 0; _8v <= 9; _8v += 1) { //#19883
            $k[$j++] = $cvrs($s(2), _8v, 10); //#19883
            $k[$j++] = $_.v1to9; //#19883
        } //#19883
        for (var _8z = 10; _8z <= 26; _8z += 1) { //#19884
            $k[$j++] = $cvrs($s(2), _8z, 10); //#19884
            $k[$j++] = $_.v10to26; //#19884
        } //#19884
        for (var _93 = 27; _93 <= 40; _93 += 1) { //#19885
            $k[$j++] = $cvrs($s(2), _93, 10); //#19885
            $k[$j++] = $_.v27to40; //#19885
        } //#19885
        var _97 = $d(); //#19885
        var _9C = new Map([
            ["M1", $_.vM1],
            ["M2", $_.vM2],
            ["M3", $_.vM3],
            ["M4", $_.vM4]
        ]); //#19888
        var _9j = new Map([
            ["R7x43", $_.vR7x43],
            ["R7x59", $_.vR7x59],
            ["R7x77", $_.vR7x77],
            ["R7x99", $_.vR7x99],
            ["R7x139", $_.vR7x139],
            ["R9x43", $_.vR9x43],
            ["R9x59", $_.vR9x59],
            ["R9x77", $_.vR9x77],
            ["R9x99", $_.vR9x99],
            ["R9x139", $_.vR9x139],
            ["R11x27", $_.vR11x27],
            ["R11x43", $_.vR11x43],
            ["R11x59", $_.vR11x59],
            ["R11x77", $_.vR11x77],
            ["R11x99", $_.vR11x99],
            ["R11x139", $_.vR11x139],
            ["R13x27", $_.vR13x27],
            ["R13x43", $_.vR13x43],
            ["R13x59", $_.vR13x59],
            ["R13x77", $_.vR13x77],
            ["R13x99", $_.vR13x99],
            ["R13x139", $_.vR13x139],
            ["R15x43", $_.vR15x43],
            ["R15x59", $_.vR15x59],
            ["R15x77", $_.vR15x77],
            ["R15x99", $_.vR15x99],
            ["R15x139", $_.vR15x139],
            ["R17x43", $_.vR17x43],
            ["R17x59", $_.vR17x59],
            ["R17x77", $_.vR17x77],
            ["R17x99", $_.vR17x99],
            ["R17x139", $_.vR17x139]
        ]); //#19896
        $k[$j++] = _97; //#19896
        $k[$j++] = "micro"; //#19896
        $k[$j++] = _9C; //#19896
        $k[$j++] = "rmqr"; //#19896
        $k[$j++] = _9j; //#19896
        $_.versetmap = $d(); //#19898
        $_.versetfull = $a([$_.v1to9, $_.v10to26, $_.v27to40]); //#19899
        $_.versetmicro = $a([$_.vM1, $_.vM2, $_.vM3, $_.vM4]); //#19900
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_qrcode.$ctx[id] = $_[id]); //#19900
        bwipp_qrcode.__19901__ = 1; //#19900
        $_ = Object.getPrototypeOf($_); //#19900
    } //#19900
    if ($ne($_.version, "unset")) { //#19919
        var _9y = $get($_.versetmap, $_.format); //#19904
        var _9z = $_.version; //#19904
        var _A0 = $get(_9y, _9z) !== undefined; //#19904
        $k[$j++] = _9y; //#19914
        $k[$j++] = _9z; //#19914
        if (!_A0) { //#19914
            $j -= 2; //#19905
            if ($eq($_.format, "full")) { //#19912
                $k[$j++] = 'bwipp.qrcodeInvalidFullVersion#19907'; //#19907
                $k[$j++] = "Valid versions for QR Code symbols are 1 to 40"; //#19907
                bwipp_raiseerror(); //#19907
            } else { //#19912
                if ($eq($_.format, "micro")) { //#19912
                    $k[$j++] = 'bwipp.qrcodeInvalidMicroVersion#19910'; //#19910
                    $k[$j++] = "Valid versions for Micro QR Code symbols are M1 to M4"; //#19910
                    bwipp_raiseerror(); //#19910
                } else { //#19912
                    $k[$j++] = 'bwipp.qrcodeInvalidRMQRversion#19912'; //#19912
                    $k[$j++] = "Invalid version for an RMQR symbol"; //#19912
                    bwipp_raiseerror(); //#19912
                } //#19912
            } //#19912
        } //#19912
        var _A3 = $k[--$j]; //#19915
        var _A5 = $get($k[--$j], _A3); //#19915
        $k[$j++] = _A5; //#19915
        $k[$j++] = Infinity; //#19915
        var _A6 = $k[--$j]; //#19915
        var _A7 = $k[--$j]; //#19915
        $k[$j++] = _A6; //#19915
        $k[$j++] = _A7; //#19915
        $_.verset = $a(); //#19915
    } else { //#19919
        if ($eq($_.format, "full")) { //#19918
            $_.verset = $_.versetfull; //#19918
        } //#19918
        if ($eq($_.format, "micro")) { //#19919
            $_.verset = $_.versetmicro; //#19919
        } //#19919
    } //#19919
    $k[$j++] = Infinity; //#19924
    for (var _AD = 0, _AE = 39; _AD < _AE; _AD++) { //#19924
        $k[$j++] = -1; //#19924
    } //#19924
    $_.msgbits = $a(); //#19924
    $_.e = 10000; //#19925
    if (!bwipp_qrcode.__19955__) { //#19955
        $_ = Object.create($_); //#19955
        $_.mode0forceKB = $a([1, 1, 1, $_.e, $_.e, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]); //#19931
        $_.mode0forceA = $a([1, 1, 1, $_.e, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]); //#19932
        $_.mode0forceN = $a([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]); //#19933
        $_.mode0NbeforeB = $a([4, 4, 5, $_.e, $_.e, 2, 3, 2, 2, 3, 3, 3, 2, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]); //#19935
        $_.modeBKbeforeB = $a([9, 12, 13, $_.e, $_.e, 4, 6, 4, 5, 6, 6, 6, 5, 6, 6, 6, 7, 4, 6, 6, 6, 7, 7, 5, 6, 6, 7, 7, 7, 6, 6, 7, 7, 7, 6, 7, 7, 7, 8]); //#19937
        $_.modeBKbeforeA = $a([8, 10, 11, $_.e, $_.e, 4, 5, 4, 5, 5, 6, 6, 5, 5, 6, 6, 6, 4, 5, 6, 6, 6, 6, 5, 6, 6, 6, 6, 7, 6, 6, 6, 6, 7, 6, 6, 6, 7, 7]); //#19938
        $_.modeBKbeforeN = $a([8, 9, 11, $_.e, $_.e, 3, 5, 3, 4, 5, 5, 5, 4, 5, 5, 5, 6, 3, 5, 5, 5, 6, 6, 4, 5, 5, 6, 6, 6, 5, 5, 6, 6, 7, 5, 6, 6, 6, 7]); //#19939
        $_.modeBKbeforeE = $a([5, 5, 6, $_.e, $_.e, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 2, 3, 3, 3, 4, 4, 3, 3, 3, 4, 4, 4, 3, 3, 4, 4, 4, 3, 4, 4, 4, 4]); //#19940
        $_.modeBAbeforeK = $a([11, 12, 14, $_.e, $_.e, 5, 7, 5, 6, 7, 8, 8, 6, 7, 8, 8, 8, 6, 7, 8, 8, 8, 8, 6, 8, 8, 8, 8, 9, 8, 8, 8, 8, 9, 8, 8, 8, 9, 9]); //#19942
        $_.modeBAbeforeB = $a([11, 15, 16, $_.e, $_.e, 6, 7, 6, 7, 7, 8, 8, 7, 7, 8, 8, 8, 6, 7, 8, 8, 8, 9, 7, 8, 8, 8, 9, 9, 8, 8, 9, 9, 9, 8, 8, 9, 9, 10]); //#19943
        $_.modeBAbeforeN = $a([12, 13, 15, $_.e, $_.e, 6, 8, 6, 7, 8, 8, 8, 7, 8, 8, 8, 9, 6, 8, 8, 8, 9, 9, 7, 8, 8, 9, 9, 10, 8, 9, 9, 9, 10, 8, 9, 9, 10, 10]); //#19944
        $_.modeBAbeforeE = $a([6, 7, 8, $_.e, $_.e, 3, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 5, 5, 4, 4, 4, 5, 5, 5, 4, 5, 5, 5, 5, 4, 5, 5, 5, 5]); //#19945
        $_.modeBNbeforeK = $a([6, 7, 8, $_.e, $_.e, 3, 4, 3, 4, 4, 5, 5, 4, 4, 5, 5, 5, 3, 4, 5, 5, 5, 5, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]); //#19947
        $_.modeBNbeforeB = $a([6, 8, 9, $_.e, $_.e, 3, 4, 3, 4, 4, 5, 5, 4, 4, 5, 5, 5, 3, 4, 5, 5, 5, 5, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6]); //#19948
        $_.modeBNbeforeA = $a([6, 7, 8, $_.e, $_.e, 3, 4, 3, 4, 4, 5, 5, 4, 4, 5, 5, 5, 4, 4, 5, 5, 5, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 6]); //#19949
        $_.modeBNbeforeE = $a([3, 4, 4, $_.e, $_.e, 2, 3, 2, 2, 3, 3, 3, 2, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]); //#19950
        $_.modeANbeforeA = $a([13, 15, 17, $_.e, 5, 7, 9, 7, 8, 9, 9, 9, 8, 9, 9, 9, 11, 7, 9, 9, 9, 11, 11, 8, 9, 9, 10, 11, 11, 9, 10, 11, 11, 11, 9, 11, 11, 11, 11]); //#19952
        $_.modeANbeforeB = $a([13, 17, 18, $_.e, $_.e, 7, 9, 7, 8, 9, 9, 9, 8, 9, 9, 9, 10, 7, 9, 9, 9, 10, 11, 8, 9, 9, 9, 11, 11, 9, 9, 11, 11, 11, 9, 10, 11, 11, 11]); //#19953
        $_.modeANbeforeE = $a([7, 8, 9, $_.e, 3, 4, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6, 4, 5, 5, 5, 6, 6, 5, 5, 5, 5, 6, 6, 5, 5, 6, 6, 6, 5, 6, 6, 6, 6]); //#19954
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_qrcode.$ctx[id] = $_[id]); //#19954
        bwipp_qrcode.__19955__ = 1; //#19954
        $_ = Object.getPrototypeOf($_); //#19954
    } //#19954
    var _B7 = $_.verset; //#19957
    for (var _B8 = 0, _B9 = _B7.length; _B8 < _B9; _B8++) { //#20089
        $_.ver = $get(_B7, _B8); //#19958
        $_.mode = -1; //#19961
        $_.seq = $a([]); //#19961
        $_.i = 0; //#19961
        for (;;) { //#20058
            if ($_.i >= $_.msglen) { //#19962
                break; //#19962
            } //#19962
            $_.numK = $get($_.numKs, $_.i); //#19963
            $_.numB = $get($_.numBs, $_.i); //#19964
            $_.numA = $get($_.numAs, $_.i); //#19965
            $_.numN = $get($_.numNs, $_.i); //#19966
            $_.numAorN = $get($_.numAorNs, $_.i); //#19967
            $_.eci = $get($_.isECI, $_.i); //#19968
            if ($eq($_.ver, $_.vM1) && ($_.numA >= 1)) { //#19969
                $_.seq = -1; //#19969
                break; //#19969
            } //#19969
            if ($eq($_.ver, $_.vM1) && ($_.numB >= 1)) { //#19970
                $_.seq = -1; //#19970
                break; //#19970
            } //#19970
            if ($eq($_.ver, $_.vM1) && ($_.numK >= 1)) { //#19971
                $_.seq = -1; //#19971
                break; //#19971
            } //#19971
            if ($eq($_.ver, $_.vM1) && $_.eci) { //#19972
                $_.seq = -1; //#19972
                break; //#19972
            } //#19972
            if ($eq($_.ver, $_.vM2) && ($_.numB >= 1)) { //#19973
                $_.seq = -1; //#19973
                break; //#19973
            } //#19973
            if ($eq($_.ver, $_.vM2) && ($_.numK >= 1)) { //#19974
                $_.seq = -1; //#19974
                break; //#19974
            } //#19974
            if ($eq($_.ver, $_.vM2) && $_.eci) { //#19975
                $_.seq = -1; //#19975
                break; //#19975
            } //#19975
            if ($eq($_.ver, $_.vM3) && $_.eci) { //#19976
                $_.seq = -1; //#19976
                break; //#19976
            } //#19976
            if ($eq($_.ver, $_.vM4) && $_.eci) { //#19977
                $_.seq = -1; //#19977
                break; //#19977
            } //#19977
            for (;;) { //#20038
                if ($_.eci) { //#19981
                    $k[$j++] = $_.E; //#19980
                    break; //#19980
                } //#19980
                if ($_.mode == -1) { //#19996
                    $k[$j++] = $_.mode0forceKB; //#19983
                    $_.KbeforeA(); //#19983
                    if ($k[--$j]) { //#19983
                        $k[$j++] = $_.K; //#19983
                        break; //#19983
                    } //#19983
                    $k[$j++] = $_.mode0forceKB; //#19984
                    $_.KbeforeN(); //#19984
                    if ($k[--$j]) { //#19984
                        $k[$j++] = $_.K; //#19984
                        break; //#19984
                    } //#19984
                    $k[$j++] = $_.modeBKbeforeE; //#19985
                    $_.KbeforeB(); //#19985
                    if ($k[--$j]) { //#19985
                        $k[$j++] = $_.K; //#19985
                        break; //#19985
                    } //#19985
                    $k[$j++] = $_.mode0forceKB; //#19986
                    $_.KbeforeE(); //#19986
                    if ($k[--$j]) { //#19986
                        $k[$j++] = $_.K; //#19986
                        break; //#19986
                    } //#19986
                    if ($_.numK >= 1) { //#19987
                        $k[$j++] = $_.B; //#19987
                        break; //#19987
                    } //#19987
                    $k[$j++] = $_.mode0NbeforeB; //#19988
                    $_.NbeforeB(); //#19988
                    if ($k[--$j]) { //#19988
                        $k[$j++] = $_.N; //#19988
                        break; //#19988
                    } //#19988
                    $k[$j++] = $_.mode0forceKB; //#19989
                    $_.NbeforeB(); //#19989
                    if ($k[--$j]) { //#19989
                        $k[$j++] = $_.B; //#19989
                        break; //#19989
                    } //#19989
                    $k[$j++] = $_.modeANbeforeE; //#19990
                    $_.NbeforeA(); //#19990
                    if ($k[--$j]) { //#19990
                        $k[$j++] = $_.N; //#19990
                        break; //#19990
                    } //#19990
                    $k[$j++] = $_.mode0forceN; //#19991
                    $_.NbeforeE(); //#19991
                    if ($k[--$j]) { //#19991
                        $k[$j++] = $_.N; //#19991
                        break; //#19991
                    } //#19991
                    $k[$j++] = $_.modeBAbeforeE; //#19992
                    $_.AbeforeK(); //#19992
                    if ($k[--$j]) { //#19992
                        $k[$j++] = $_.A; //#19992
                        break; //#19992
                    } //#19992
                    $k[$j++] = $_.modeBAbeforeE; //#19993
                    $_.AorNbeforeB(); //#19993
                    if ($k[--$j]) { //#19993
                        $k[$j++] = $_.A; //#19993
                        break; //#19993
                    } //#19993
                    $k[$j++] = $_.mode0forceA; //#19994
                    $_.AorNbeforeE(); //#19994
                    if ($k[--$j]) { //#19994
                        $k[$j++] = $_.A; //#19994
                        break; //#19994
                    } //#19994
                    $k[$j++] = $_.B; //#19995
                    break; //#19995
                } //#19995
                if ($_.mode == $_.B) { //#20014
                    $k[$j++] = $_.modeBKbeforeB; //#19998
                    $_.KbeforeB(); //#19998
                    if ($k[--$j]) { //#19998
                        $k[$j++] = $_.K; //#19998
                        break; //#19998
                    } //#19998
                    $k[$j++] = $_.modeBKbeforeA; //#19999
                    $_.KbeforeA(); //#19999
                    if ($k[--$j]) { //#19999
                        $k[$j++] = $_.K; //#19999
                        break; //#19999
                    } //#19999
                    $k[$j++] = $_.modeBKbeforeN; //#20000
                    $_.KbeforeN(); //#20000
                    if ($k[--$j]) { //#20000
                        $k[$j++] = $_.K; //#20000
                        break; //#20000
                    } //#20000
                    $k[$j++] = $_.modeBKbeforeE; //#20001
                    $_.KbeforeE(); //#20001
                    if ($k[--$j]) { //#20001
                        $k[$j++] = $_.K; //#20001
                        break; //#20001
                    } //#20001
                    $k[$j++] = $_.modeBAbeforeK; //#20002
                    $_.AbeforeK(); //#20002
                    if ($k[--$j]) { //#20002
                        $k[$j++] = $_.A; //#20002
                        break; //#20002
                    } //#20002
                    $k[$j++] = $_.modeBAbeforeB; //#20003
                    $_.AbeforeB(); //#20003
                    if ($k[--$j]) { //#20003
                        $k[$j++] = $_.A; //#20003
                        break; //#20003
                    } //#20003
                    $k[$j++] = $_.modeBAbeforeN; //#20004
                    $_.AbeforeN(); //#20004
                    if ($k[--$j]) { //#20004
                        $k[$j++] = $_.A; //#20004
                        break; //#20004
                    } //#20004
                    $k[$j++] = $_.modeBAbeforeE; //#20005
                    $_.AbeforeE(); //#20005
                    if ($k[--$j]) { //#20005
                        $k[$j++] = $_.A; //#20005
                        break; //#20005
                    } //#20005
                    $k[$j++] = $_.modeBNbeforeK; //#20006
                    $_.NbeforeK(); //#20006
                    if ($k[--$j]) { //#20006
                        $k[$j++] = $_.N; //#20006
                        break; //#20006
                    } //#20006
                    $k[$j++] = $_.modeBNbeforeB; //#20007
                    $_.NbeforeB(); //#20007
                    if ($k[--$j]) { //#20007
                        $k[$j++] = $_.N; //#20007
                        break; //#20007
                    } //#20007
                    $k[$j++] = $_.modeBNbeforeA; //#20008
                    $_.NbeforeA(); //#20008
                    if ($k[--$j]) { //#20008
                        $k[$j++] = $_.N; //#20008
                        break; //#20008
                    } //#20008
                    $k[$j++] = $_.modeBNbeforeE; //#20009
                    $_.NbeforeE(); //#20009
                    if ($k[--$j]) { //#20009
                        $k[$j++] = $_.N; //#20009
                        break; //#20009
                    } //#20009
                    $k[$j++] = $_.modeBAbeforeE; //#20010
                    $_.AorNbeforeE(); //#20010
                    var _DH = $k[--$j]; //#20010
                    if (_DH && $le($_.numAorN, $get($_.modeBAbeforeN, $_.ver))) { //#20012
                        $k[$j++] = $_.modeBNbeforeA; //#20011
                        $_.nextNslt(); //#20011
                        if ($k[--$j]) { //#20011
                            $k[$j++] = $_.A; //#20011
                            break; //#20011
                        } //#20011
                    } //#20011
                    $k[$j++] = $_.B; //#20013
                    break; //#20013
                } //#20013
                if ($_.mode == $_.A) { //#20023
                    if ($_.numK >= 1) { //#20016
                        $k[$j++] = $_.K; //#20016
                        break; //#20016
                    } //#20016
                    if ($_.numB >= 1) { //#20017
                        $k[$j++] = $_.B; //#20017
                        break; //#20017
                    } //#20017
                    $k[$j++] = $_.modeANbeforeA; //#20018
                    $_.NbeforeA(); //#20018
                    if ($k[--$j]) { //#20018
                        $k[$j++] = $_.N; //#20018
                        break; //#20018
                    } //#20018
                    $k[$j++] = $_.modeANbeforeB; //#20019
                    $_.NbeforeB(); //#20019
                    if ($k[--$j]) { //#20019
                        $k[$j++] = $_.N; //#20019
                        break; //#20019
                    } //#20019
                    $k[$j++] = $_.modeANbeforeE; //#20020
                    $_.NbeforeE(); //#20020
                    if ($k[--$j]) { //#20020
                        $k[$j++] = $_.N; //#20020
                        break; //#20020
                    } //#20020
                    if (($_.numA >= 1) || ($_.numN >= 1)) { //#20021
                        $k[$j++] = $_.A; //#20021
                        break; //#20021
                    } //#20021
                    $k[$j++] = $_.B; //#20022
                    break; //#20022
                } //#20022
                if ($_.mode == $_.N) { //#20030
                    if ($_.numK >= 1) { //#20025
                        $k[$j++] = $_.K; //#20025
                        break; //#20025
                    } //#20025
                    if ($_.numB >= 1) { //#20026
                        $k[$j++] = $_.B; //#20026
                        break; //#20026
                    } //#20026
                    if ($_.numA >= 1) { //#20027
                        $k[$j++] = $_.A; //#20027
                        break; //#20027
                    } //#20027
                    if ($_.numN >= 1) { //#20028
                        $k[$j++] = $_.N; //#20028
                        break; //#20028
                    } //#20028
                    $k[$j++] = $_.B; //#20029
                    break; //#20029
                } //#20029
                if ($_.mode == $_.K) { //#20037
                    if ($_.numB >= 1) { //#20032
                        $k[$j++] = $_.B; //#20032
                        break; //#20032
                    } //#20032
                    if ($_.numA >= 1) { //#20033
                        $k[$j++] = $_.A; //#20033
                        break; //#20033
                    } //#20033
                    if ($_.numN >= 1) { //#20034
                        $k[$j++] = $_.N; //#20034
                        break; //#20034
                    } //#20034
                    if ($_.numK >= 1) { //#20035
                        $k[$j++] = $_.K; //#20035
                        break; //#20035
                    } //#20035
                    $k[$j++] = $_.B; //#20036
                    break; //#20036
                } //#20036
            } //#20036
            var _E1 = $k[--$j]; //#20039
            $k[$j++] = _E1; //#20039
            if ((_E1 == $_.K) && $_.fnc1first) { //#20039
                $j--; //#20039
                $k[$j++] = $_.B; //#20039
            } //#20039
            var _E5 = $k[--$j]; //#20040
            $k[$j++] = _E5; //#20056
            if (_E5 == $_.mode) { //#20055
                $j--; //#20041
                var _EB = ($_.mode == $_.K) ? 2 : 1; //#20042
                $_.dat = $geti($_.msg, $_.i, _EB); //#20042
                $k[$j++] = Infinity; //#20045
                $aload($_.seq); //#20044
                $k[$j++] = Infinity; //#20045
                var _EE = $k[--$j]; //#20045
                var _EF = $k[--$j]; //#20045
                $k[$j++] = _EE; //#20045
                $aload(_EF); //#20045
                $aload($_.dat); //#20045
                var _EH = $a(); //#20045
                $k[$j++] = _EH; //#20045
                $_.seq = $a(); //#20045
            } else { //#20055
                $_.mode = $k[--$j]; //#20048
                if ($_.mode == $_.K) { //#20049
                    $k[$j++] = $_.K; //#20049
                    $k[$j++] = $geti($_.msg, $_.i, $_.numK * 2); //#20049
                } //#20049
                if ($_.mode == $_.B) { //#20050
                    $k[$j++] = $_.B; //#20050
                    $k[$j++] = $geti($_.msg, $_.i, $_.numB); //#20050
                } //#20050
                if ($_.mode == $_.A) { //#20051
                    $k[$j++] = $_.A; //#20051
                    $k[$j++] = $geti($_.msg, $_.i, $_.numA); //#20051
                } //#20051
                if ($_.mode == $_.N) { //#20052
                    $k[$j++] = $_.N; //#20052
                    $k[$j++] = $geti($_.msg, $_.i, $_.numN); //#20052
                } //#20052
                if ($_.mode == $_.E) { //#20053
                    $_.mode = -1; //#20053
                    $k[$j++] = $_.E; //#20053
                    $k[$j++] = $geti($_.msg, $_.i, 1); //#20053
                } //#20053
                $_.dat = $k[--$j]; //#20054
                $_.sw = $k[--$j]; //#20054
                $k[$j++] = Infinity; //#20055
                $aload($_.seq); //#20055
                $k[$j++] = $_.sw; //#20055
                $k[$j++] = $_.dat; //#20055
                $_.seq = $a(); //#20055
            } //#20055
            $_.i = $_.i + $_.dat.length; //#20057
        } //#20057
        for (;;) { //#20088
            if ($_.seq == -1) { //#20062
                break; //#20062
            } //#20062
            $_.bits = $s(23648); //#20063
            $_.j = 0; //#20064
            if ($_.fnc1first) { //#20067
                if ($lt($_.ver, $_.vR7x43)) { //#20066
                    $k[$j++] = "0101"; //#20066
                } else { //#20066
                    $k[$j++] = "101"; //#20066
                } //#20066
                $_.addtobits(); //#20066
            } //#20066
            $_.abort = false; //#20068
            for (var _F7 = 0, _F6 = $_.seq.length - 1; _F7 <= _F6; _F7 += 2) { //#20083
                $_.i = _F7; //#20070
                $_.mode = $get($_.seq, $_.i); //#20071
                $k[$j++] = $get($get($_.mids, $_.ver), $_.mode); //#20072
                $_.addtobits(); //#20072
                $_.chars = $get($_.seq, $_.i + 1); //#20073
                $k[$j++] = 'charslen'; //#20074
                $k[$j++] = $_.chars.length; //#20074
                if ($_.mode == $_.K) { //#20074
                    var _FM = $k[--$j]; //#20074
                    $k[$j++] = ~~(_FM / 2); //#20074
                } //#20074
                var _FN = $k[--$j]; //#20074
                $_[$k[--$j]] = _FN; //#20074
                if ($_.mode != $_.E) { //#20081
                    $_.cclen = $get($get($_.cclens, $_.ver), $_.mode); //#20076
                    if ($_.charslen >= (~~Math.pow(2, $_.cclen))) { //#20079
                        $_.abort = true; //#20078
                        break; //#20078
                    } //#20078
                    $k[$j++] = $_.charslen; //#20080
                    $k[$j++] = $_.cclen; //#20080
                    $_.tobin(); //#20080
                    $_.addtobits(); //#20080
                } //#20080
                $k[$j++] = $_.chars; //#20082
                if ($_[$get($_.encfuncs, $_.mode)]() === true) {
                    break;
                } //#20082
                $_.addtobits(); //#20082
            } //#20082
            if ($_.abort) { //#20084
                break; //#20084
            } //#20084
            $_.bits = $geti($_.bits, 0, $_.j); //#20085
            $put($_.msgbits, $_.ver, $_.bits); //#20086
            break; //#20087
        } //#20087
    } //#20087
    if (!bwipp_qrcode.__20173__) { //#20173
        $_ = Object.create($_); //#20173
        $_.metrics = $a([$a(["micro", "M1", $_.vM1, 11, 11, 98, 99, 36, $a([2, 99, 99, 99]), $a([1, 0, -1, -1, -1, -1, -1, -1])]), $a(["micro", "M2", $_.vM2, 13, 13, 98, 99, 80, $a([5, 6, 99, 99]), $a([1, 0, 1, 0, -1, -1, -1, -1])]), $a(["micro", "M3", $_.vM3, 15, 15, 98, 99, 132, $a([6, 8, 99, 99]), $a([1, 0, 1, 0, -1, -1, -1, -1])]), $a(["micro", "M4", $_.vM4, 17, 17, 98, 99, 192, $a([8, 10, 14, 99]), $a([1, 0, 1, 0, 1, 0, -1, -1])]), $a(["full", "1", $_.v1to9, 21, 21, 98, 99, 208, $a([7, 10, 13, 17]), $a([1, 0, 1, 0, 1, 0, 1, 0])]), $a(["full", "2", $_.v1to9, 25, 25, 18, 99, 359, $a([10, 16, 22, 28]), $a([1, 0, 1, 0, 1, 0, 1, 0])]), $a(["full", "3", $_.v1to9, 29, 29, 22, 99, 567, $a([15, 26, 36, 44]), $a([1, 0, 1, 0, 2, 0, 2, 0])]), $a(["full", "4", $_.v1to9, 33, 33, 26, 99, 807, $a([20, 36, 52, 64]), $a([1, 0, 2, 0, 2, 0, 4, 0])]), $a(["full", "5", $_.v1to9, 37, 37, 30, 99, 1079, $a([26, 48, 72, 88]), $a([1, 0, 2, 0, 2, 2, 2, 2])]), $a(["full", "6", $_.v1to9, 41, 41, 34, 99, 1383, $a([36, 64, 96, 112]), $a([2, 0, 4, 0, 4, 0, 4, 0])]), $a(["full", "7", $_.v1to9, 45, 45, 22, 38, 1568, $a([40, 72, 108, 130]), $a([2, 0, 4, 0, 2, 4, 4, 1])]), $a(["full", "8", $_.v1to9, 49, 49, 24, 42, 1936, $a([48, 88, 132, 156]), $a([2, 0, 2, 2, 4, 2, 4, 2])]), $a(["full", "9", $_.v1to9, 53, 53, 26, 46, 2336, $a([60, 110, 160, 192]), $a([2, 0, 3, 2, 4, 4, 4, 4])]), $a(["full", "10", $_.v10to26, 57, 57, 28, 50, 2768, $a([72, 130, 192, 224]), $a([2, 2, 4, 1, 6, 2, 6, 2])]), $a(["full", "11", $_.v10to26, 61, 61, 30, 54, 3232, $a([80, 150, 224, 264]), $a([4, 0, 1, 4, 4, 4, 3, 8])]), $a(["full", "12", $_.v10to26, 65, 65, 32, 58, 3728, $a([96, 176, 260, 308]), $a([2, 2, 6, 2, 4, 6, 7, 4])]), $a(["full", "13", $_.v10to26, 69, 69, 34, 62, 4256, $a([104, 198, 288, 352]), $a([4, 0, 8, 1, 8, 4, 12, 4])]), $a(["full", "14", $_.v10to26, 73, 73, 26, 46, 4651, $a([120, 216, 320, 384]), $a([3, 1, 4, 5, 11, 5, 11, 5])]), $a(["full", "15", $_.v10to26, 77, 77, 26, 48, 5243, $a([132, 240, 360, 432]), $a([5, 1, 5, 5, 5, 7, 11, 7])]), $a(["full", "16", $_.v10to26, 81, 81, 26, 50, 5867, $a([144, 280, 408, 480]), $a([5, 1, 7, 3, 15, 2, 3, 13])]), $a(["full", "17", $_.v10to26, 85, 85, 30, 54, 6523, $a([168, 308, 448, 532]), $a([1, 5, 10, 1, 1, 15, 2, 17])]), $a(["full", "18", $_.v10to26, 89, 89, 30, 56, 7211, $a([180, 338, 504, 588]), $a([5, 1, 9, 4, 17, 1, 2, 19])]), $a(["full", "19", $_.v10to26, 93, 93, 30, 58, 7931, $a([196, 364, 546, 650]), $a([3, 4, 3, 11, 17, 4, 9, 16])]), $a(["full", "20", $_.v10to26, 97, 97, 34, 62, 8683, $a([224, 416, 600, 700]), $a([3, 5, 3, 13, 15, 5, 15, 10])]), $a(["full", "21", $_.v10to26, 101, 101, 28, 50, 9252, $a([224, 442, 644, 750]), $a([4, 4, 17, 0, 17, 6, 19, 6])]), $a(["full", "22", $_.v10to26, 105, 105, 26, 50, 10068, $a([252, 476, 690, 816]), $a([2, 7, 17, 0, 7, 16, 34, 0])]), $a(["full", "23", $_.v10to26, 109, 109, 30, 54, 10916, $a([270, 504, 750, 900]), $a([4, 5, 4, 14, 11, 14, 16, 14])]), $a(["full", "24", $_.v10to26, 113, 113, 28, 54, 11796, $a([300, 560, 810, 960]), $a([6, 4, 6, 14, 11, 16, 30, 2])]), $a(["full", "25", $_.v10to26, 117, 117, 32, 58, 12708, $a([312, 588, 870, 1050]), $a([8, 4, 8, 13, 7, 22, 22, 13])]), $a(["full", "26", $_.v10to26, 121, 121, 30, 58, 13652, $a([336, 644, 952, 1110]), $a([10, 2, 19, 4, 28, 6, 33, 4])]), $a(["full", "27", $_.v27to40, 125, 125, 34, 62, 14628, $a([360, 700, 1020, 1200]), $a([8, 4, 22, 3, 8, 26, 12, 28])]), $a(["full", "28", $_.v27to40, 129, 129, 26, 50, 15371, $a([390, 728, 1050, 1260]), $a([3, 10, 3, 23, 4, 31, 11, 31])]), $a(["full", "29", $_.v27to40, 133, 133, 30, 54, 16411, $a([420, 784, 1140, 1350]), $a([7, 7, 21, 7, 1, 37, 19, 26])]), $a(["full", "30", $_.v27to40, 137, 137, 26, 52, 17483, $a([450, 812, 1200, 1440]), $a([5, 10, 19, 10, 15, 25, 23, 25])]), $a(["full", "31", $_.v27to40, 141, 141, 30, 56, 18587, $a([480, 868, 1290, 1530]), $a([13, 3, 2, 29, 42, 1, 23, 28])]), $a(["full", "32", $_.v27to40, 145, 145, 34, 60, 19723, $a([510, 924, 1350, 1620]), $a([17, 0, 10, 23, 10, 35, 19, 35])]), $a(["full", "33", $_.v27to40, 149, 149, 30, 58, 20891, $a([540, 980, 1440, 1710]), $a([17, 1, 14, 21, 29, 19, 11, 46])]), $a(["full", "34", $_.v27to40, 153, 153, 34, 62, 22091, $a([570, 1036, 1530, 1800]), $a([13, 6, 14, 23, 44, 7, 59, 1])]), $a(["full", "35", $_.v27to40, 157, 157, 30, 54, 23008, $a([570, 1064, 1590, 1890]), $a([12, 7, 12, 26, 39, 14, 22, 41])]), $a(["full", "36", $_.v27to40, 161, 161, 24, 50, 24272, $a([600, 1120, 1680, 1980]), $a([6, 14, 6, 34, 46, 10, 2, 64])]), $a(["full", "37", $_.v27to40, 165, 165, 28, 54, 25568, $a([630, 1204, 1770, 2100]), $a([17, 4, 29, 14, 49, 10, 24, 46])]), $a(["full", "38", $_.v27to40, 169, 169, 32, 58, 26896, $a([660, 1260, 1860, 2220]), $a([4, 18, 13, 32, 48, 14, 42, 32])]), $a(["full", "39", $_.v27to40, 173, 173, 26, 54, 28256, $a([720, 1316, 1950, 2310]), $a([20, 4, 40, 7, 43, 22, 10, 67])]), $a(["full", "40", $_.v27to40, 177, 177, 30, 58, 29648, $a([750, 1372, 2040, 2430]), $a([19, 6, 18, 31, 34, 34, 20, 61])]), $a(["rmqr", "R7x43", $_.vR7x43, 7, 43, 22, 99, 104, $a([99, 7, 99, 10]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R7x59", $_.vR7x59, 7, 59, 20, 40, 171, $a([99, 9, 99, 14]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R7x77", $_.vR7x77, 7, 77, 26, 52, 261, $a([99, 12, 99, 22]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R7x99", $_.vR7x99, 7, 99, 24, 50, 358, $a([99, 16, 99, 30]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R7x139", $_.vR7x139, 7, 139, 28, 56, 545, $a([99, 24, 99, 44]), $a([-1, -1, 1, 0, -1, -1, 2, 0])]), $a(["rmqr", "R9x43", $_.vR9x43, 9, 43, 22, 99, 170, $a([99, 9, 99, 14]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R9x59", $_.vR9x59, 9, 59, 20, 40, 267, $a([99, 12, 99, 22]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R9x77", $_.vR9x77, 9, 77, 26, 52, 393, $a([99, 18, 99, 32]), $a([-1, -1, 1, 0, -1, -1, 1, 1])]), $a(["rmqr", "R9x99", $_.vR9x99, 9, 99, 24, 50, 532, $a([99, 24, 99, 44]), $a([-1, -1, 1, 0, -1, -1, 2, 0])]), $a(["rmqr", "R9x139", $_.vR9x139, 9, 139, 28, 56, 797, $a([99, 36, 99, 66]), $a([-1, -1, 1, 1, -1, -1, 3, 0])]), $a(["rmqr", "R11x27", $_.vR11x27, 11, 27, 98, 99, 122, $a([99, 8, 99, 10]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R11x43", $_.vR11x43, 11, 43, 22, 99, 249, $a([99, 12, 99, 20]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R11x59", $_.vR11x59, 11, 59, 20, 40, 376, $a([99, 16, 99, 32]), $a([-1, -1, 1, 0, -1, -1, 1, 1])]), $a(["rmqr", "R11x77", $_.vR11x77, 11, 77, 26, 52, 538, $a([99, 24, 99, 44]), $a([-1, -1, 1, 0, -1, -1, 1, 1])]), $a(["rmqr", "R11x99", $_.vR11x99, 11, 99, 24, 50, 719, $a([99, 32, 99, 60]), $a([-1, -1, 1, 1, -1, -1, 1, 1])]), $a(["rmqr", "R11x139", $_.vR11x139, 11, 139, 28, 56, 1062, $a([99, 48, 99, 90]), $a([-1, -1, 2, 0, -1, -1, 3, 0])]), $a(["rmqr", "R13x27", $_.vR13x27, 13, 27, 98, 99, 172, $a([99, 9, 99, 14]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R13x43", $_.vR13x43, 13, 43, 22, 99, 329, $a([99, 14, 99, 28]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R13x59", $_.vR13x59, 13, 59, 20, 40, 486, $a([99, 22, 99, 40]), $a([-1, -1, 1, 0, -1, -1, 2, 0])]), $a(["rmqr", "R13x77", $_.vR13x77, 13, 77, 26, 52, 684, $a([99, 32, 99, 56]), $a([-1, -1, 1, 1, -1, -1, 1, 1])]), $a(["rmqr", "R13x99", $_.vR13x99, 13, 99, 24, 50, 907, $a([99, 40, 99, 78]), $a([-1, -1, 1, 1, -1, -1, 1, 2])]), $a(["rmqr", "R13x139", $_.vR13x139, 13, 139, 28, 56, 1328, $a([99, 60, 99, 112]), $a([-1, -1, 2, 1, -1, -1, 2, 2])]), $a(["rmqr", "R15x43", $_.vR15x43, 15, 43, 22, 99, 409, $a([99, 18, 99, 36]), $a([-1, -1, 1, 0, -1, -1, 1, 1])]), $a(["rmqr", "R15x59", $_.vR15x59, 15, 59, 20, 40, 596, $a([99, 26, 99, 48]), $a([-1, -1, 1, 0, -1, -1, 2, 0])]), $a(["rmqr", "R15x77", $_.vR15x77, 15, 77, 26, 52, 830, $a([99, 36, 99, 72]), $a([-1, -1, 1, 1, -1, -1, 2, 1])]), $a(["rmqr", "R15x99", $_.vR15x99, 15, 99, 24, 50, 1095, $a([99, 48, 99, 88]), $a([-1, -1, 2, 0, -1, -1, 4, 0])]), $a(["rmqr", "R15x139", $_.vR15x139, 15, 139, 28, 56, 1594, $a([99, 72, 99, 130]), $a([-1, -1, 2, 1, -1, -1, 1, 4])]), $a(["rmqr", "R17x43", $_.vR17x43, 17, 43, 22, 99, 489, $a([99, 22, 99, 40]), $a([-1, -1, 1, 0, -1, -1, 1, 1])]), $a(["rmqr", "R17x59", $_.vR17x59, 17, 59, 20, 40, 706, $a([99, 32, 99, 60]), $a([-1, -1, 2, 0, -1, -1, 2, 0])]), $a(["rmqr", "R17x77", $_.vR17x77, 17, 77, 26, 52, 976, $a([99, 44, 99, 84]), $a([-1, -1, 2, 0, -1, -1, 1, 2])]), $a(["rmqr", "R17x99", $_.vR17x99, 17, 99, 24, 50, 1283, $a([99, 60, 99, 104]), $a([-1, -1, 2, 1, -1, -1, 4, 0])]), $a(["rmqr", "R17x139", $_.vR17x139, 17, 139, 28, 56, 1860, $a([99, 80, 99, 156]), $a([-1, -1, 4, 0, -1, -1, 2, 4])])]); //#20172
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_qrcode.$ctx[id] = $_[id]); //#20172
        bwipp_qrcode.__20173__ = 1; //#20172
        $_ = Object.getPrototypeOf($_); //#20172
    } //#20172
    $k[$j++] = 'eclval'; //#20175
    $search("LMQH", $_.eclevel); //#20175
    $j--; //#20175
    var _Kj = $k[--$j]; //#20175
    var _Kk = $k[--$j]; //#20175
    $k[$j++] = _Kj.length; //#20175
    $k[$j++] = _Kk; //#20175
    $j--; //#20175
    var _Kl = $k[--$j]; //#20175
    var _Km = $k[--$j]; //#20175
    $k[$j++] = _Kl; //#20175
    $k[$j++] = _Km; //#20175
    $j--; //#20175
    var _Kn = $k[--$j]; //#20175
    $_[$k[--$j]] = _Kn; //#20175
    for (var _Kr = 0, _Kq = $_.metrics.length - 1; _Kr <= _Kq; _Kr += 1) { //#20214
        $_.i = _Kr; //#20177
        $_.m = $get($_.metrics, $_.i); //#20178
        $_.frmt = $get($_.m, 0); //#20179
        $_.vers = $get($_.m, 1); //#20180
        $_.vergrp = $get($_.m, 2); //#20181
        $_.verind = $_.i - 44; //#20182
        $_.rows = $get($_.m, 3); //#20183
        $_.cols = $get($_.m, 4); //#20184
        $_.asp2 = $get($_.m, 5); //#20185
        $_.asp3 = $get($_.m, 6); //#20186
        $_.nmod = $get($_.m, 7); //#20187
        $_.ncws = ~~($_.nmod / 8); //#20188
        $_.rbit = $_.nmod % 8; //#20189
        $_.lc4b = false; //#20190
        if ($eq($_.vers, "M1") || $eq($_.vers, "M3")) { //#20195
            $_.ncws = $_.ncws + 1; //#20192
            $_.rbit = 0; //#20193
            $_.lc4b = true; //#20194
        } //#20194
        $_.ecws = $get($get($_.m, 8), $_.eclval); //#20196
        $_.dcws = $f($_.ncws - $_.ecws); //#20197
        var _LP = $_.lc4b ? 4 : 0; //#20198
        $_.dmod = $f(($_.dcws * 8) - _LP); //#20198
        $_.ecb1 = $get($get($_.m, 9), $_.eclval * 2); //#20199
        $_.ecb2 = $get($get($_.m, 9), $f(($_.eclval * 2) + 1)); //#20200
        $_.okay = true; //#20201
        if ($ne($_.format, $_.frmt)) { //#20202
            $_.okay = false; //#20202
        } //#20202
        if ($eq($_.frmt, "micro") && $_.fnc1first) { //#20203
            $_.okay = false; //#20203
        } //#20203
        if ($ne($_.version, "unset") && $ne($_.version, $_.vers)) { //#20204
            $_.okay = false; //#20204
        } //#20204
        if (($_.ecb1 == -1) || ($_.ecb2 == -1)) { //#20205
            $_.okay = false; //#20205
        } //#20205
        $_.verbits = $get($_.msgbits, $_.vergrp); //#20206
        if ($_.verbits == -1) { //#20210
            $_.okay = false; //#20208
        } else { //#20210
            if ($_.verbits.length > $_.dmod) { //#20210
                $_.okay = false; //#20210
            } //#20210
        } //#20210
        $_.term = $geti("000000000", 0, $get($_.termlens, $_.vergrp)); //#20212
        if ($_.okay) { //#20213
            break; //#20213
        } //#20213
    } //#20213
    if (!$_.okay) { //#20218
        $k[$j++] = 'bwipp.qrcodeNoValidSymbol#20217'; //#20217
        $k[$j++] = "Maximum length exceeded or invalid content"; //#20217
        bwipp_raiseerror(); //#20217
    } //#20217
    $_.format = $_.frmt; //#20220
    $_.version = $_.vers; //#20221
    $_.msgbits = $_.verbits; //#20222
    $_.dcpb = ~~($_.dcws / $f($_.ecb1 + $_.ecb2)); //#20223
    $_.ecpb = (~~($_.ncws / $f($_.ecb1 + $_.ecb2))) - $_.dcpb; //#20224
    var _M3 = $_.term; //#20227
    var _M4 = $_.dmod; //#20227
    var _M5 = $_.msgbits; //#20227
    var _M6 = $_.term; //#20227
    var _M7 = _M6.length; //#20227
    var _M8 = $f(_M4 - _M5.length); //#20227
    if ($f(_M4 - _M5.length) > _M6.length) { //#20227
        var _ = _M7; //#20227
        _M7 = _M8; //#20227
        _M8 = _; //#20227
    } //#20227
    $_.term = $geti(_M3, 0, _M8); //#20227
    var _MC = $s($_.msgbits.length + $_.term.length); //#20228
    $puti(_MC, 0, $_.msgbits); //#20229
    $puti(_MC, $_.msgbits.length, $_.term); //#20230
    $_.msgbits = _MC; //#20231
    $_.pad = $s($_.dmod); //#20234
    for (var _MK = 0, _MJ = $_.pad.length - 1; _MK <= _MJ; _MK += 1) { //#20235
        $put($_.pad, _MK, 48); //#20235
    } //#20235
    $puti($_.pad, 0, $_.msgbits); //#20236
    $_.padnum = 0; //#20237
    var _MR = $_.lc4b ? 5 : 1; //#20238
    for (var _MT = ~~(Math.ceil($_.msgbits.length / 8) * 8), _MS = $f($_.dmod - _MR); _MT <= _MS; _MT += 8) { //#20241
        $puti($_.pad, _MT, $get($_.padstrs, $_.padnum)); //#20239
        $_.padnum = ($_.padnum + 1) % 2; //#20240
    } //#20240
    $_.cws = $a($_.dcws); //#20244
    for (var _Md = 0, _Mc = $_.cws.length - 1; _Md <= _Mc; _Md += 1) { //#20256
        $_.c = _Md; //#20246
        $_.bpcw = 8; //#20247
        if ($_.lc4b && ($_.c == ($_.cws.length - 1))) { //#20248
            $_.bpcw = 4; //#20248
        } //#20248
        $_.cwb = $geti($_.pad, $_.c * 8, $_.bpcw); //#20249
        $_.cw = 0; //#20250
        for (var _Mn = 0, _Mm = $_.bpcw - 1; _Mn <= _Mm; _Mn += 1) { //#20254
            $_.i = _Mn; //#20252
            $_.cw = $f($_.cw + ((~~(Math.pow(2, ($_.bpcw - $_.i) - 1))) * $f($get($_.cwb, $_.i) - 48))); //#20253
        } //#20253
        $put($_.cws, $_.c, $_.cw); //#20255
    } //#20255
    if ($_.lc4b) { //#20259
        var _My = $_.cws; //#20259
        var _Mz = $_.cws; //#20259
        $put(_My, _Mz.length - 1, $get(_My, _Mz.length - 1) << 4); //#20259
    } //#20259
    var _N2 = $get($_.options, 'debugcws') !== undefined; //#20261
    if (_N2) { //#20261
        $k[$j++] = 'bwipp.debugcws#20261'; //#20261
        $k[$j++] = $_.cws; //#20261
        bwipp_raiseerror(); //#20261
    } //#20261
    if (!bwipp_qrcode.__20268__) { //#20268
        $_ = Object.create($_); //#20268
        $k[$j++] = Infinity; //#20265
        $k[$j++] = 1; //#20265
        for (var _N4 = 0, _N5 = 255; _N4 < _N5; _N4++) { //#20265
            var _N6 = $k[--$j]; //#20265
            var _N7 = _N6 * 2; //#20265
            $k[$j++] = _N6; //#20265
            $k[$j++] = _N7; //#20265
            if (_N7 >= 256) { //#20265
                var _N8 = $k[--$j]; //#20265
                $k[$j++] = _N8 ^ 285; //#20265
            } //#20265
        } //#20265
        $_.rsalog = $a(); //#20265
        $_.rslog = $a(256); //#20266
        for (var _NB = 1; _NB <= 255; _NB += 1) { //#20267
            $put($_.rslog, $get($_.rsalog, _NB), _NB); //#20267
        } //#20267
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_qrcode.$ctx[id] = $_[id]); //#20267
        bwipp_qrcode.__20268__ = 1; //#20267
        $_ = Object.getPrototypeOf($_); //#20267
    } //#20267
    $_.rsprod = function() {
        var _NG = $k[--$j]; //#20272
        var _NH = $k[--$j]; //#20272
        $k[$j++] = _NH; //#20276
        $k[$j++] = _NG; //#20276
        if ((_NG != 0) && (_NH != 0)) { //#20275
            var _NK = $get($_.rslog, $k[--$j]); //#20273
            var _NP = $get($_.rsalog, $f(_NK + $get($_.rslog, $k[--$j])) % 255); //#20273
            $k[$j++] = _NP; //#20273
        } else { //#20275
            $j -= 2; //#20275
            $k[$j++] = 0; //#20275
        } //#20275
    }; //#20275
    $k[$j++] = Infinity; //#20280
    $k[$j++] = 1; //#20280
    for (var _NR = 0, _NS = $_.ecpb; _NR < _NS; _NR++) { //#20280
        $k[$j++] = 0; //#20280
    } //#20280
    $_.coeffs = $a(); //#20280
    for (var _NW = 0, _NV = $_.ecpb - 1; _NW <= _NV; _NW += 1) { //#20289
        $_.i = _NW; //#20282
        $put($_.coeffs, $_.i + 1, $get($_.coeffs, $_.i)); //#20283
        for (var _Nd = $_.i; _Nd >= 1; _Nd -= 1) { //#20287
            $_.j = _Nd; //#20285
            $k[$j++] = $_.coeffs; //#20286
            $k[$j++] = $_.j; //#20286
            $k[$j++] = $get($_.coeffs, $_.j - 1); //#20286
            $k[$j++] = $get($_.coeffs, $_.j); //#20286
            $k[$j++] = $get($_.rsalog, $_.i); //#20286
            $_.rsprod(); //#20286
            var _Np = $k[--$j]; //#20286
            var _Nq = $k[--$j]; //#20286
            var _Nr = $k[--$j]; //#20286
            $put($k[--$j], _Nr, $xo(_Nq, _Np)); //#20286
        } //#20286
        $k[$j++] = $_.coeffs; //#20288
        $k[$j++] = 0; //#20288
        $k[$j++] = $get($_.coeffs, 0); //#20288
        $k[$j++] = $get($_.rsalog, $_.i); //#20288
        $_.rsprod(); //#20288
        var _Nz = $k[--$j]; //#20288
        var _O0 = $k[--$j]; //#20288
        $put($k[--$j], _O0, _Nz); //#20288
    } //#20288
    $_.coeffs = $geti($_.coeffs, 0, $_.coeffs.length - 1); //#20290
    $_.rscodes = function() {
        $_.rscws = $k[--$j]; //#20294
        $_.rsnd = $_.rscws.length; //#20295
        $k[$j++] = Infinity; //#20296
        $forall($_.rscws); //#20296
        for (var _O9 = 0, _OA = $_.ecpb; _O9 < _OA; _O9++) { //#20296
            $k[$j++] = 0; //#20296
        } //#20296
        $_.rscws = $a(); //#20296
        for (var _OE = 0, _OD = $_.rsnd - 1; _OE <= _OD; _OE += 1) { //#20304
            $_.m = _OE; //#20298
            $_.k = $get($_.rscws, $_.m); //#20299
            for (var _OK = 0, _OJ = $_.ecpb - 1; _OK <= _OJ; _OK += 1) { //#20303
                $_.j = _OK; //#20301
                $k[$j++] = $_.rscws; //#20302
                $k[$j++] = ($_.m + $_.j) + 1; //#20302
                $k[$j++] = $get($_.coeffs, ($_.ecpb - $_.j) - 1); //#20302
                $k[$j++] = $_.k; //#20302
                $_.rsprod(); //#20302
                var _OX = $k[--$j]; //#20302
                var _OY = $k[--$j]; //#20302
                $put($k[--$j], _OY, $xo(_OX, $get($_.rscws, ($_.m + $_.j) + 1))); //#20302
            } //#20302
        } //#20302
        $k[$j++] = $geti($_.rscws, $_.rsnd, $_.ecpb); //#20305
    }; //#20305
    $_.dcwsb = $a($f($_.ecb1 + $_.ecb2)); //#20309
    $_.ecwsb = $a($f($_.ecb1 + $_.ecb2)); //#20310
    for (var _Om = 0, _Ol = $f($_.ecb1 - 1); _Om <= _Ol; _Om += 1) { //#20315
        $_.i = _Om; //#20312
        $put($_.dcwsb, $_.i, $geti($_.cws, $_.i * $_.dcpb, $_.dcpb)); //#20313
        $k[$j++] = $_.ecwsb; //#20314
        $k[$j++] = $_.i; //#20314
        $k[$j++] = $get($_.dcwsb, $_.i); //#20314
        $_.rscodes(); //#20314
        var _Oz = $k[--$j]; //#20314
        var _P0 = $k[--$j]; //#20314
        $put($k[--$j], _P0, _Oz); //#20314
    } //#20314
    for (var _P4 = 0, _P3 = $f($_.ecb2 - 1); _P4 <= _P3; _P4 += 1) { //#20320
        $_.i = _P4; //#20317
        $put($_.dcwsb, $f($_.ecb1 + $_.i), $geti($_.cws, $f(($_.ecb1 * $_.dcpb) + ($_.i * ($_.dcpb + 1))), $_.dcpb + 1)); //#20318
        $k[$j++] = $_.ecwsb; //#20319
        $k[$j++] = $f($_.ecb1 + $_.i); //#20319
        $k[$j++] = $get($_.dcwsb, $f($_.ecb1 + $_.i)); //#20319
        $_.rscodes(); //#20319
        var _PM = $k[--$j]; //#20319
        var _PN = $k[--$j]; //#20319
        $put($k[--$j], _PN, _PM); //#20319
    } //#20319
    $_.cws = $a($_.ncws); //#20323
    $_.cw = 0; //#20324
    for (var _PT = 0, _PS = $_.dcpb; _PT <= _PS; _PT += 1) { //#20334
        $_.i = _PT; //#20326
        for (var _PX = 0, _PW = $f($f($_.ecb1 + $_.ecb2) - 1); _PX <= _PW; _PX += 1) { //#20333
            $_.j = _PX; //#20328
            if ($_.i < $get($_.dcwsb, $_.j).length) { //#20332
                $put($_.cws, $_.cw, $get($get($_.dcwsb, $_.j), $_.i)); //#20330
                $_.cw = $_.cw + 1; //#20331
            } //#20331
        } //#20331
    } //#20331
    for (var _Pm = 0, _Pl = $_.ecpb - 1; _Pm <= _Pl; _Pm += 1) { //#20342
        $_.i = _Pm; //#20336
        for (var _Pq = 0, _Pp = $f($f($_.ecb1 + $_.ecb2) - 1); _Pq <= _Pp; _Pq += 1) { //#20341
            $_.j = _Pq; //#20338
            $put($_.cws, $_.cw, $get($get($_.ecwsb, $_.j), $_.i)); //#20339
            $_.cw = $_.cw + 1; //#20340
        } //#20340
    } //#20340
    if ($_.rbit > 0) { //#20350
        $_.pad = $a($_.cws.length + 1); //#20346
        $puti($_.pad, 0, $_.cws); //#20347
        $put($_.pad, $_.pad.length - 1, 0); //#20348
        $_.cws = $_.pad; //#20349
    } //#20349
    if ($_.lc4b) { //#20361
        var _Q8 = $_.cws; //#20354
        var _Q9 = $_.dcws; //#20354
        $put(_Q8, $f(_Q9 - 1), $get(_Q8, $f(_Q9 - 1)) >>> 4); //#20354
        for (var _QE = $f($_.dcws - 1), _QD = $_.ncws - 2; _QE <= _QD; _QE += 1) { //#20359
            $_.i = _QE; //#20356
            $put($_.cws, $_.i, ($get($_.cws, $_.i) & 15) << 4); //#20357
            $put($_.cws, $_.i, (($get($_.cws, $_.i + 1) >>> 4) & 15) | $get($_.cws, $_.i)); //#20358
        } //#20358
        $put($_.cws, $_.ncws - 1, ($get($_.cws, $_.ncws - 1) & 15) << 4); //#20360
    } //#20360
    var _QY = $get($_.options, 'debugecc') !== undefined; //#20363
    if (_QY) { //#20363
        $k[$j++] = 'bwipp.debugecc#20363'; //#20363
        $k[$j++] = $_.cws; //#20363
        bwipp_raiseerror(); //#20363
    } //#20363
    $k[$j++] = Infinity; //#20366
    for (var _Qc = 0, _Qd = $_.rows * $_.cols; _Qc < _Qd; _Qc++) { //#20366
        $k[$j++] = -1; //#20366
    } //#20366
    $_.pixs = $a(); //#20366
    $_.qmv = function() {
        var _Qg = $k[--$j]; //#20367
        var _Qh = $k[--$j]; //#20367
        $k[$j++] = $f(_Qh + (_Qg * $_.cols)); //#20367
    }; //#20367
    if ($eq($_.format, "full")) { //#20376
        for (var _Ql = 8, _Qk = $f($_.cols - 9); _Ql <= _Qk; _Ql += 1) { //#20375
            $_.i = _Ql; //#20372
            $k[$j++] = $_.pixs; //#20373
            $k[$j++] = $_.i; //#20373
            $k[$j++] = 6; //#20373
            $_.qmv(); //#20373
            var _Qp = $k[--$j]; //#20373
            $put($k[--$j], _Qp, ($_.i + 1) % 2); //#20373
            $k[$j++] = $_.pixs; //#20374
            $k[$j++] = 6; //#20374
            $k[$j++] = $_.i; //#20374
            $_.qmv(); //#20374
            var _Qu = $k[--$j]; //#20374
            $put($k[--$j], _Qu, ($_.i + 1) % 2); //#20374
        } //#20374
    } //#20374
    if ($eq($_.format, "micro")) { //#20383
        for (var _Qz = 8, _Qy = $f($_.cols - 1); _Qz <= _Qy; _Qz += 1) { //#20382
            $_.i = _Qz; //#20379
            $k[$j++] = $_.pixs; //#20380
            $k[$j++] = $_.i; //#20380
            $k[$j++] = 0; //#20380
            $_.qmv(); //#20380
            var _R3 = $k[--$j]; //#20380
            $put($k[--$j], _R3, ($_.i + 1) % 2); //#20380
            $k[$j++] = $_.pixs; //#20381
            $k[$j++] = 0; //#20381
            $k[$j++] = $_.i; //#20381
            $_.qmv(); //#20381
            var _R8 = $k[--$j]; //#20381
            $put($k[--$j], _R8, ($_.i + 1) % 2); //#20381
        } //#20381
    } //#20381
    if ($eq($_.format, "rmqr")) { //#20402
        for (var _RD = 3, _RC = $f($_.cols - 4); _RD <= _RC; _RD += 1) { //#20389
            $_.i = _RD; //#20386
            $k[$j++] = $_.pixs; //#20387
            $k[$j++] = $_.i; //#20387
            $k[$j++] = 0; //#20387
            $_.qmv(); //#20387
            var _RH = $k[--$j]; //#20387
            $put($k[--$j], _RH, ($_.i + 1) % 2); //#20387
            $k[$j++] = $_.pixs; //#20388
            $k[$j++] = $_.i; //#20388
            $k[$j++] = $f($_.rows - 1); //#20388
            $_.qmv(); //#20388
            var _RN = $k[--$j]; //#20388
            $put($k[--$j], _RN, ($_.i + 1) % 2); //#20388
        } //#20388
        for (var _RR = 3, _RQ = $f($_.rows - 4); _RR <= _RQ; _RR += 1) { //#20394
            $_.i = _RR; //#20391
            $k[$j++] = $_.pixs; //#20392
            $k[$j++] = 0; //#20392
            $k[$j++] = $_.i; //#20392
            $_.qmv(); //#20392
            var _RV = $k[--$j]; //#20392
            $put($k[--$j], _RV, ($_.i + 1) % 2); //#20392
            $k[$j++] = $_.pixs; //#20393
            $k[$j++] = $f($_.cols - 1); //#20393
            $k[$j++] = $_.i; //#20393
            $_.qmv(); //#20393
            var _Rb = $k[--$j]; //#20393
            $put($k[--$j], _Rb, ($_.i + 1) % 2); //#20393
        } //#20393
        for (var _Ri = $f($_.asp2 - 1), _Rj = $f($_.asp3 - $_.asp2), _Rh = $f($_.cols - 13); _Rj < 0 ? _Ri >= _Rh : _Ri <= _Rh; _Ri += _Rj) { //#20401
            $_.i = _Ri; //#20396
            for (var _Rm = 3, _Rl = $f($_.rows - 4); _Rm <= _Rl; _Rm += 1) { //#20400
                $_.j = _Rm; //#20398
                $k[$j++] = $_.pixs; //#20399
                $k[$j++] = $_.i; //#20399
                $k[$j++] = $_.j; //#20399
                $_.qmv(); //#20399
                var _Rr = $k[--$j]; //#20399
                $put($k[--$j], _Rr, ($_.j + 1) % 2); //#20399
            } //#20399
        } //#20399
    } //#20399
    if (!bwipp_qrcode.__20452__) { //#20452
        $_ = Object.create($_); //#20452
        $_.fpat = $a([$a([1, 1, 1, 1, 1, 1, 1, 0]), $a([1, 0, 0, 0, 0, 0, 1, 0]), $a([1, 0, 1, 1, 1, 0, 1, 0]), $a([1, 0, 1, 1, 1, 0, 1, 0]), $a([1, 0, 1, 1, 1, 0, 1, 0]), $a([1, 0, 0, 0, 0, 0, 1, 0]), $a([1, 1, 1, 1, 1, 1, 1, 0]), $a([0, 0, 0, 0, 0, 0, 0, 0])]); //#20415
        $_.fsubpat = $a([$a([1, 1, 1, 1, 1, 9, 9, 9]), $a([1, 0, 0, 0, 1, 9, 9, 9]), $a([1, 0, 1, 0, 1, 9, 9, 9]), $a([1, 0, 0, 0, 1, 9, 9, 9]), $a([1, 1, 1, 1, 1, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9])]); //#20425
        $_.fcorpat = $a([$a([1, 1, 1, 9, 9, 9, 9, 9]), $a([1, 0, 9, 9, 9, 9, 9, 9]), $a([1, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9])]); //#20435
        $_.fnullpat = $a([$a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9])]); //#20445
        var _Si = new Map([
            ["full", $a([$_.fpat, $_.fpat, $_.fpat, $_.fnullpat])],
            ["micro", $a([$_.fpat, $_.fnullpat, $_.fnullpat, $_.fnullpat])],
            ["rmqr", $a([$_.fpat, $_.fcorpat, $_.fcorpat, $_.fsubpat])]
        ]); //#20450
        $_.fpatmap = _Si; //#20451
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_qrcode.$ctx[id] = $_[id]); //#20451
        bwipp_qrcode.__20452__ = 1; //#20451
        $_ = Object.getPrototypeOf($_); //#20451
    } //#20451
    $_.fpats = $get($_.fpatmap, $_.format); //#20453
    for (var _Sn = 0; _Sn <= 7; _Sn += 1) { //#20467
        $_.y = _Sn; //#20455
        for (var _So = 0; _So <= 7; _So += 1) { //#20466
            $_.x = _So; //#20457
            $_.fpb0 = $get($get($get($_.fpats, 0), $_.y), $_.x); //#20458
            $_.fpb1 = $get($get($get($_.fpats, 1), $_.y), $_.x); //#20459
            $_.fpb2 = $get($get($get($_.fpats, 2), $_.y), $_.x); //#20460
            $_.fpb3 = $get($get($get($_.fpats, 3), $_.y), $_.x); //#20461
            if (($_.fpb0 != 9) && ($_.y < $_.rows)) { //#20462
                $k[$j++] = $_.pixs; //#20462
                $k[$j++] = $_.x; //#20462
                $k[$j++] = $_.y; //#20462
                $_.qmv(); //#20462
                var _TK = $k[--$j]; //#20462
                $put($k[--$j], _TK, $_.fpb0); //#20462
            } //#20462
            if ($_.fpb1 != 9) { //#20463
                $k[$j++] = $_.pixs; //#20463
                $k[$j++] = $f($f($_.cols - $_.x) - 1); //#20463
                $k[$j++] = $_.y; //#20463
                $_.qmv(); //#20463
                var _TS = $k[--$j]; //#20463
                $put($k[--$j], _TS, $_.fpb1); //#20463
            } //#20463
            if ($_.fpb2 != 9) { //#20464
                $k[$j++] = $_.pixs; //#20464
                $k[$j++] = $_.x; //#20464
                $k[$j++] = $f($f($_.rows - $_.y) - 1); //#20464
                $_.qmv(); //#20464
                var _Ta = $k[--$j]; //#20464
                $put($k[--$j], _Ta, $_.fpb2); //#20464
            } //#20464
            if ($_.fpb3 != 9) { //#20465
                $k[$j++] = $_.pixs; //#20465
                $k[$j++] = $f($f($_.cols - $_.x) - 1); //#20465
                $k[$j++] = $f($f($_.rows - $_.y) - 1); //#20465
                $_.qmv(); //#20465
                var _Tj = $k[--$j]; //#20465
                $put($k[--$j], _Tj, $_.fpb3); //#20465
            } //#20465
        } //#20465
    } //#20465
    if (!bwipp_qrcode.__20485__) { //#20485
        $_ = Object.create($_); //#20485
        $_.algnpatfull = $a([$a([1, 1, 1, 1, 1]), $a([1, 0, 0, 0, 1]), $a([1, 0, 1, 0, 1]), $a([1, 0, 0, 0, 1]), $a([1, 1, 1, 1, 1])]); //#20477
        $_.algnpatrmqr = $a([$a([1, 1, 1, 9, 9]), $a([1, 0, 1, 9, 9]), $a([1, 1, 1, 9, 9]), $a([9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9])]); //#20484
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_qrcode.$ctx[id] = $_[id]); //#20484
        bwipp_qrcode.__20485__ = 1; //#20484
        $_ = Object.getPrototypeOf($_); //#20484
    } //#20484
    $_.putalgnpat = function() {
        $_.py = $k[--$j]; //#20488
        $_.px = $k[--$j]; //#20489
        for (var _U0 = 0; _U0 <= 4; _U0 += 1) { //#20499
            $_.pb = _U0; //#20491
            for (var _U1 = 0; _U1 <= 4; _U1 += 1) { //#20498
                $_.pa = _U1; //#20493
                $_.algnb = $get($get($_.algnpat, $_.pb), $_.pa); //#20494
                if ($_.algnb != 9) { //#20497
                    $k[$j++] = $_.pixs; //#20496
                    $k[$j++] = $f($_.px + $_.pa); //#20496
                    $k[$j++] = $f($_.py + $_.pb); //#20496
                    $_.qmv(); //#20496
                    var _UE = $k[--$j]; //#20496
                    $put($k[--$j], _UE, $_.algnb); //#20496
                } //#20496
            } //#20496
        } //#20496
    }; //#20496
    if ($eq($_.format, "full")) { //#20515
        $_.algnpat = $_.algnpatfull; //#20502
        for (var _UN = $f($_.asp2 - 2), _UO = $f($_.asp3 - $_.asp2), _UM = $f($_.cols - 13); _UO < 0 ? _UN >= _UM : _UN <= _UM; _UN += _UO) { //#20507
            $_.i = _UN; //#20504
            $k[$j++] = $_.i; //#20505
            $k[$j++] = 4; //#20505
            $_.putalgnpat(); //#20505
            $k[$j++] = 4; //#20506
            $k[$j++] = $_.i; //#20506
            $_.putalgnpat(); //#20506
        } //#20506
        for (var _UW = $f($_.asp2 - 2), _UX = $f($_.asp3 - $_.asp2), _UV = $f($_.cols - 9); _UX < 0 ? _UW >= _UV : _UW <= _UV; _UW += _UX) { //#20514
            $_.x = _UW; //#20509
            for (var _Ud = $f($_.asp2 - 2), _Ue = $f($_.asp3 - $_.asp2), _Uc = $f($_.rows - 9); _Ue < 0 ? _Ud >= _Uc : _Ud <= _Uc; _Ud += _Ue) { //#20513
                $_.y = _Ud; //#20511
                $k[$j++] = $_.x; //#20512
                $k[$j++] = $_.y; //#20512
                $_.putalgnpat(); //#20512
            } //#20512
        } //#20512
    } //#20512
    if ($eq($_.format, "rmqr")) { //#20523
        $_.algnpat = $_.algnpatrmqr; //#20517
        for (var _Uo = $f($_.asp2 - 2), _Up = $f($_.asp3 - $_.asp2), _Un = $f($_.cols - 13); _Up < 0 ? _Uo >= _Un : _Uo <= _Un; _Uo += _Up) { //#20522
            $_.i = _Uo; //#20519
            $k[$j++] = $_.i; //#20520
            $k[$j++] = 0; //#20520
            $_.putalgnpat(); //#20520
            $k[$j++] = $_.i; //#20521
            $k[$j++] = $f($_.rows - 3); //#20521
            $_.putalgnpat(); //#20521
        } //#20521
    } //#20521
    if (!bwipp_qrcode.__20532__) { //#20532
        $_ = Object.create($_); //#20532
        $_.formatmapmicro = $a([$a([$a([1, 8])]), $a([$a([2, 8])]), $a([$a([3, 8])]), $a([$a([4, 8])]), $a([$a([5, 8])]), $a([$a([6, 8])]), $a([$a([7, 8])]), $a([$a([8, 8])]), $a([$a([8, 7])]), $a([$a([8, 6])]), $a([$a([8, 5])]), $a([$a([8, 4])]), $a([$a([8, 3])]), $a([$a([8, 2])]), $a([$a([8, 1])])]); //#20531
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_qrcode.$ctx[id] = $_[id]); //#20531
        bwipp_qrcode.__20532__ = 1; //#20531
        $_ = Object.getPrototypeOf($_); //#20531
    } //#20531
    var _Xs = new Map([
        ["full", $a([$a([$a([0, 8]), $a([8, $f($_.cols - 1)])]), $a([$a([1, 8]), $a([8, $f($_.cols - 2)])]), $a([$a([2, 8]), $a([8, $f($_.cols - 3)])]), $a([$a([3, 8]), $a([8, $f($_.cols - 4)])]), $a([$a([4, 8]), $a([8, $f($_.cols - 5)])]), $a([$a([5, 8]), $a([8, $f($_.cols - 6)])]), $a([$a([7, 8]), $a([8, $f($_.cols - 7)])]), $a([$a([8, 8]), $a([$f($_.cols - 8), 8])]), $a([$a([8, 7]), $a([$f($_.cols - 7), 8])]), $a([$a([8, 5]), $a([$f($_.cols - 6), 8])]), $a([$a([8, 4]), $a([$f($_.cols - 5), 8])]), $a([$a([8, 3]), $a([$f($_.cols - 4), 8])]), $a([$a([8, 2]), $a([$f($_.cols - 3), 8])]), $a([$a([8, 1]), $a([$f($_.cols - 2), 8])]), $a([$a([8, 0]), $a([$f($_.cols - 1), 8])])])],
        ["micro", $_.formatmapmicro],
        ["rmqr", $a([$a([$a([11, 3]), $a([$f($_.cols - 3), $f($_.rows - 6)])]), $a([$a([11, 2]), $a([$f($_.cols - 4), $f($_.rows - 6)])]), $a([$a([11, 1]), $a([$f($_.cols - 5), $f($_.rows - 6)])]), $a([$a([10, 5]), $a([$f($_.cols - 6), $f($_.rows - 2)])]), $a([$a([10, 4]), $a([$f($_.cols - 6), $f($_.rows - 3)])]), $a([$a([10, 3]), $a([$f($_.cols - 6), $f($_.rows - 4)])]), $a([$a([10, 2]), $a([$f($_.cols - 6), $f($_.rows - 5)])]), $a([$a([10, 1]), $a([$f($_.cols - 6), $f($_.rows - 6)])]), $a([$a([9, 5]), $a([$f($_.cols - 7), $f($_.rows - 2)])]), $a([$a([9, 4]), $a([$f($_.cols - 7), $f($_.rows - 3)])]), $a([$a([9, 3]), $a([$f($_.cols - 7), $f($_.rows - 4)])]), $a([$a([9, 2]), $a([$f($_.cols - 7), $f($_.rows - 5)])]), $a([$a([9, 1]), $a([$f($_.cols - 7), $f($_.rows - 6)])]), $a([$a([8, 5]), $a([$f($_.cols - 8), $f($_.rows - 2)])]), $a([$a([8, 4]), $a([$f($_.cols - 8), $f($_.rows - 3)])]), $a([$a([8, 3]), $a([$f($_.cols - 8), $f($_.rows - 4)])]), $a([$a([8, 2]), $a([$f($_.cols - 8), $f($_.rows - 5)])]), $a([$a([8, 1]), $a([$f($_.cols - 8), $f($_.rows - 6)])])])]
    ]); //#20548
    $_.formatmap = $get(_Xs, $_.format); //#20550
    $forall($_.formatmap, function() { //#20553
        $forall($k[--$j], function() { //#20552
            $forall($k[--$j]); //#20552
            $_.qmv(); //#20552
            $put($_.pixs, $k[--$j], 1); //#20552
        }); //#20552
    }); //#20552
    if ($eq($_.format, "full") && ($_.cols >= 45)) { //#20569
        $_.versionmap = $a([$a([$a([$f($_.cols - 9), 5]), $a([5, $f($_.cols - 9)])]), $a([$a([$f($_.cols - 10), 5]), $a([5, $f($_.cols - 10)])]), $a([$a([$f($_.cols - 11), 5]), $a([5, $f($_.cols - 11)])]), $a([$a([$f($_.cols - 9), 4]), $a([4, $f($_.cols - 9)])]), $a([$a([$f($_.cols - 10), 4]), $a([4, $f($_.cols - 10)])]), $a([$a([$f($_.cols - 11), 4]), $a([4, $f($_.cols - 11)])]), $a([$a([$f($_.cols - 9), 3]), $a([3, $f($_.cols - 9)])]), $a([$a([$f($_.cols - 10), 3]), $a([3, $f($_.cols - 10)])]), $a([$a([$f($_.cols - 11), 3]), $a([3, $f($_.cols - 11)])]), $a([$a([$f($_.cols - 9), 2]), $a([2, $f($_.cols - 9)])]), $a([$a([$f($_.cols - 10), 2]), $a([2, $f($_.cols - 10)])]), $a([$a([$f($_.cols - 11), 2]), $a([2, $f($_.cols - 11)])]), $a([$a([$f($_.cols - 9), 1]), $a([1, $f($_.cols - 9)])]), $a([$a([$f($_.cols - 10), 1]), $a([1, $f($_.cols - 10)])]), $a([$a([$f($_.cols - 11), 1]), $a([1, $f($_.cols - 11)])]), $a([$a([$f($_.cols - 9), 0]), $a([0, $f($_.cols - 9)])]), $a([$a([$f($_.cols - 10), 0]), $a([0, $f($_.cols - 10)])]), $a([$a([$f($_.cols - 11), 0]), $a([0, $f($_.cols - 11)])])]); //#20567
    } else { //#20569
        $_.versionmap = $a([]); //#20569
    } //#20569
    var _ZW = $_.versionmap; //#20571
    for (var _ZX = 0, _ZY = _ZW.length; _ZX < _ZY; _ZX++) { //#20573
        $forall($get(_ZW, _ZX), function() { //#20572
            $forall($k[--$j]); //#20572
            $_.qmv(); //#20572
            $put($_.pixs, $k[--$j], 0); //#20572
        }); //#20572
    } //#20572
    if ($eq($_.format, "full")) { //#20578
        $k[$j++] = $_.pixs; //#20577
        $k[$j++] = 8; //#20577
        $k[$j++] = $f($_.rows - 8); //#20577
        $_.qmv(); //#20577
        var _Zg = $k[--$j]; //#20577
        $put($k[--$j], _Zg, 0); //#20577
    } //#20577
    var _a0 = $a([function() {
        var _Zi = $k[--$j]; //#20583
        var _Zj = $k[--$j]; //#20583
        $k[$j++] = $f(_Zj + _Zi) % 2; //#20583
    }, function() {
        var _Zk = $k[--$j]; //#20584
        var _Zl = $k[--$j]; //#20584
        $k[$j++] = _Zk; //#20584
        $k[$j++] = _Zl; //#20584
        $j--; //#20584
        var _Zm = $k[--$j]; //#20584
        $k[$j++] = _Zm % 2; //#20584
    }, function() {
        $j--; //#20585
        var _Zn = $k[--$j]; //#20585
        $k[$j++] = _Zn % 3; //#20585
    }, function() {
        var _Zo = $k[--$j]; //#20586
        var _Zp = $k[--$j]; //#20586
        $k[$j++] = $f(_Zp + _Zo) % 3; //#20586
    }, function() {
        var _Zq = $k[--$j]; //#20587
        var _Zr = $k[--$j]; //#20587
        $k[$j++] = ((~~(_Zq / 2)) + (~~(_Zr / 3))) % 2; //#20587
    }, function() {
        var _Zs = $k[--$j]; //#20588
        var _Zu = $k[--$j] * _Zs; //#20588
        $k[$j++] = $f((_Zu % 2) + (_Zu % 3)); //#20588
    }, function() {
        var _Zv = $k[--$j]; //#20589
        var _Zx = $k[--$j] * _Zv; //#20589
        $k[$j++] = ($f((_Zx % 2) + (_Zx % 3))) % 2; //#20589
    }, function() {
        var _Zy = $k[--$j]; //#20590
        var _Zz = $k[--$j]; //#20590
        $k[$j++] = ($f(((_Zz * _Zy) % 3) + ($f(_Zz + _Zy) % 2))) % 2; //#20590
    }]); //#20590
    var _aB = $a([function() {
        var _a1 = $k[--$j]; //#20593
        var _a2 = $k[--$j]; //#20593
        $k[$j++] = _a1; //#20593
        $k[$j++] = _a2; //#20593
        $j--; //#20593
        var _a3 = $k[--$j]; //#20593
        $k[$j++] = _a3 % 2; //#20593
    }, function() {
        var _a4 = $k[--$j]; //#20594
        var _a5 = $k[--$j]; //#20594
        $k[$j++] = ((~~(_a4 / 2)) + (~~(_a5 / 3))) % 2; //#20594
    }, function() {
        var _a6 = $k[--$j]; //#20595
        var _a8 = $k[--$j] * _a6; //#20595
        $k[$j++] = ($f((_a8 % 2) + (_a8 % 3))) % 2; //#20595
    }, function() {
        var _a9 = $k[--$j]; //#20596
        var _aA = $k[--$j]; //#20596
        $k[$j++] = ($f(((_aA * _a9) % 3) + ($f(_aA + _a9) % 2))) % 2; //#20596
    }]); //#20596
    var _aE = $a([function() {
        var _aC = $k[--$j]; //#20599
        var _aD = $k[--$j]; //#20599
        $k[$j++] = ((~~(_aC / 2)) + (~~(_aD / 3))) % 2; //#20599
    }]); //#20599
    var _aF = new Map([
        ["full", _a0],
        ["micro", _aB],
        ["rmqr", _aE]
    ]); //#20599
    $_.maskfuncs = $get(_aF, $_.format); //#20601
    if ($_.mask != -1) { //#20605
        $_.maskfuncs = $a([$get($_.maskfuncs, $_.mask - 1)]); //#20603
        $_.bestmaskval = $_.mask - 1; //#20604
    } //#20604
    $_.masks = $a($_.maskfuncs.length); //#20606
    for (var _aS = 0, _aR = $_.masks.length - 1; _aS <= _aR; _aS += 1) { //#20620
        $_.m = _aS; //#20608
        $_.mask = $a($_.rows * $_.cols); //#20609
        for (var _aY = 0, _aX = $f($_.rows - 1); _aY <= _aX; _aY += 1) { //#20618
            $_.j = _aY; //#20611
            for (var _ab = 0, _aa = $f($_.cols - 1); _ab <= _aa; _ab += 1) { //#20617
                $_.i = _ab; //#20613
                $k[$j++] = $_.i; //#20614
                $k[$j++] = $_.j; //#20614
                if ($get($_.maskfuncs, $_.m)() === true) {
                    break;
                } //#20614
                var _ah = $k[--$j]; //#20614
                $k[$j++] = _ah == 0; //#20615
                $k[$j++] = $_.pixs; //#20615
                $k[$j++] = $_.i; //#20615
                $k[$j++] = $_.j; //#20615
                $_.qmv(); //#20615
                var _al = $k[--$j]; //#20615
                var _an = $get($k[--$j], _al); //#20615
                var _ao = $k[--$j]; //#20615
                var _ap = (_ao && (_an == -1)) ? 1 : 0; //#20615
                $k[$j++] = _ap; //#20616
                $k[$j++] = $_.mask; //#20616
                $k[$j++] = $_.i; //#20616
                $k[$j++] = $_.j; //#20616
                $_.qmv(); //#20616
                var _at = $k[--$j]; //#20616
                var _au = $k[--$j]; //#20616
                $put(_au, _at, $k[--$j]); //#20616
            } //#20616
        } //#20616
        $put($_.masks, $_.m, $_.mask); //#20619
    } //#20619
    var _b1 = $ne($_.format, "rmqr") ? 1 : 2; //#20623
    $_.posx = $f($_.cols - _b1); //#20623
    $_.posy = $f($_.rows - 1); //#20624
    $_.dir = -1; //#20625
    $_.col = 1; //#20626
    $_.num = 0; //#20627
    for (;;) { //#20650
        if ($_.posx < 0) { //#20629
            break; //#20629
        } //#20629
        $k[$j++] = $_.pixs; //#20630
        $k[$j++] = $_.posx; //#20630
        $k[$j++] = $_.posy; //#20630
        $_.qmv(); //#20630
        var _b7 = $k[--$j]; //#20630
        if ($get($k[--$j], _b7) == -1) { //#20634
            var _bC = $get($_.cws, ~~($_.num / 8)); //#20631
            var _bE = -(7 - ($_.num % 8)); //#20631
            $k[$j++] = ((_bE < 0 ? _bC >>> -_bE : _bC << _bE)) & 1; //#20632
            $k[$j++] = $_.pixs; //#20632
            $k[$j++] = $_.posx; //#20632
            $k[$j++] = $_.posy; //#20632
            $_.qmv(); //#20632
            var _bI = $k[--$j]; //#20632
            var _bJ = $k[--$j]; //#20632
            $put(_bJ, _bI, $k[--$j]); //#20632
            $_.num = $_.num + 1; //#20633
        } //#20633
        if ($_.col == 1) { //#20647
            $_.col = 0; //#20636
            $_.posx = $f($_.posx - 1); //#20637
        } else { //#20647
            $_.col = 1; //#20639
            $_.posx = $f($_.posx + 1); //#20640
            $_.posy = $f($_.posy + $_.dir); //#20641
            if (($_.posy < 0) || ($_.posy >= $_.rows)) { //#20648
                $_.dir = $_.dir * -1; //#20643
                $_.posy = $f($_.posy + $_.dir); //#20644
                $_.posx = $f($_.posx - 2); //#20645
                if ($eq($_.format, "full") && ($_.posx == 6)) { //#20647
                    $_.posx = $f($_.posx - 1); //#20647
                } //#20647
            } //#20647
        } //#20647
    } //#20647
    $_.evalfulln1n3 = function() {
        $_.scrle = $k[--$j]; //#20654
        $k[$j++] = 'scr1'; //#20656
        $k[$j++] = 0; //#20656
        $forall($_.scrle, function() { //#20656
            var _bd = $k[--$j]; //#20656
            $k[$j++] = _bd; //#20656
            if (_bd >= 5) { //#20656
                var _be = $k[--$j]; //#20656
                var _bg = $f($f($k[--$j] + _be) - 2); //#20656
                $k[$j++] = _bg; //#20656
                $k[$j++] = _bg; //#20656
            } //#20656
            $j--; //#20656
        }); //#20656
        var _bh = $k[--$j]; //#20656
        $_[$k[--$j]] = _bh; //#20656
        $_.scr3 = 0; //#20658
        for (var _bl = 3, _bk = $_.scrle.length - 3; _bl <= _bk; _bl += 2) { //#20673
            $_.j = _bl; //#20660
            if (($get($_.scrle, $_.j) % 3) == 0) { //#20672
                $_.fact = ~~($get($_.scrle, $_.j) / 3); //#20662
                var _bu = $geti($_.scrle, $_.j - 2, 5); //#20663
                for (var _bv = 0, _bw = _bu.length; _bv < _bw; _bv++) { //#20663
                    $k[$j++] = $get(_bu, _bv) == $_.fact; //#20663
                } //#20663
                var _bz = $k[--$j]; //#20663
                var _c0 = $k[--$j]; //#20663
                var _c1 = $k[--$j]; //#20663
                $k[$j++] = $an(_c0, _bz); //#20663
                $k[$j++] = _c1; //#20663
                $j--; //#20663
                var _c2 = $k[--$j]; //#20663
                var _c3 = $k[--$j]; //#20663
                var _c4 = $k[--$j]; //#20663
                if (_c4 && (_c3 && _c2)) { //#20671
                    if (($_.j == 3) || (($_.j + 4) >= $_.scrle.length)) { //#20668
                        $_.scr3 = $_.scr3 + 40; //#20665
                    } else { //#20668
                        if (($get($_.scrle, $_.j - 3) >= 4) || ($get($_.scrle, $_.j + 3) >= 4)) { //#20669
                            $_.scr3 = $_.scr3 + 40; //#20668
                        } //#20668
                    } //#20668
                } //#20668
            } //#20668
        } //#20668
        $k[$j++] = $_.scr1; //#20674
        $k[$j++] = $_.scr3; //#20674
    }; //#20674
    $_.evalfull = function() {
        $_.sym = $k[--$j]; //#20679
        $_.n1 = 0; //#20681
        $_.n2 = 0; //#20681
        $_.n3 = 0; //#20681
        $_.rle = $a($f($_.cols + 1)); //#20682
        $_.lastpairs = $a($_.cols); //#20683
        $_.thispairs = $a($_.cols); //#20684
        $_.colsadd1 = $f($_.cols + 1); //#20685
        for (var _cS = 0, _cR = $f($_.cols - 1); _cS <= _cR; _cS += 1) { //#20724
            $_.i = _cS; //#20687
            $k[$j++] = Infinity; //#20690
            var _cU = $_.cols; //#20691
            $k[$j++] = 0; //#20693
            $k[$j++] = 0; //#20693
            for (var _cW = $_.i, _cX = _cU, _cV = $f((_cU * _cU) - 1); _cX < 0 ? _cW >= _cV : _cW <= _cV; _cW += _cX) { //#20693
                var _cZ = $get($_.sym, _cW); //#20692
                var _ca = $k[--$j]; //#20692
                $k[$j++] = _cZ; //#20692
                if ($eq(_ca, _cZ)) { //#20692
                    var _cb = $k[--$j]; //#20692
                    var _cc = $k[--$j]; //#20692
                    $k[$j++] = $f(_cc + 1); //#20692
                    $k[$j++] = _cb; //#20692
                } else { //#20692
                    var _cd = $k[--$j]; //#20692
                    $k[$j++] = 1; //#20692
                    $k[$j++] = _cd; //#20692
                } //#20692
            } //#20692
            $j--; //#20694
            var _cf = $counttomark() + 2; //#20695
            $astore($geti($_.rle, 0, _cf - 2)); //#20695
            $_.evalfulln1n3(); //#20696
            $_.n3 = $f($k[--$j] + $_.n3); //#20696
            $_.n1 = $f($k[--$j] + $_.n1); //#20696
            $j--; //#20697
            $_.symrow = $geti($_.sym, $_.i * $_.cols, $_.cols); //#20700
            $k[$j++] = Infinity; //#20701
            var _cq = $_.symrow; //#20702
            $k[$j++] = 0; //#20704
            $k[$j++] = 0; //#20704
            for (var _cr = 0, _cs = _cq.length; _cr < _cs; _cr++) { //#20704
                var _ct = $get(_cq, _cr); //#20704
                var _cu = $k[--$j]; //#20703
                $k[$j++] = _ct; //#20703
                if ($eq(_cu, _ct)) { //#20703
                    var _cv = $k[--$j]; //#20703
                    var _cw = $k[--$j]; //#20703
                    $k[$j++] = $f(_cw + 1); //#20703
                    $k[$j++] = _cv; //#20703
                } else { //#20703
                    var _cx = $k[--$j]; //#20703
                    $k[$j++] = 1; //#20703
                    $k[$j++] = _cx; //#20703
                } //#20703
            } //#20703
            $j--; //#20705
            var _cz = $counttomark() + 2; //#20706
            $astore($geti($_.rle, 0, _cz - 2)); //#20706
            $_.evalfulln1n3(); //#20707
            $_.n3 = $f($k[--$j] + $_.n3); //#20707
            $_.n1 = $f($k[--$j] + $_.n1); //#20707
            $j--; //#20708
            var _d5 = $_.thispairs; //#20711
            $_.thispairs = $_.lastpairs; //#20711
            $_.lastpairs = _d5; //#20711
            var _d9 = ($get($_.symrow, 0) == 1) ? 0 : 1; //#20712
            var _dA = $_.symrow; //#20713
            $k[$j++] = _d9; //#20713
            for (var _dB = 0, _dC = _dA.length; _dB < _dC; _dB++) { //#20713
                var _dD = $get(_dA, _dB); //#20713
                var _dE = $k[--$j]; //#20713
                $k[$j++] = $f(_dE + _dD); //#20713
                $k[$j++] = _dD; //#20713
            } //#20713
            $j--; //#20714
            $astore($_.thispairs); //#20715
            $j--; //#20715
            if ($_.i > 0) { //#20722
                $k[$j++] = Infinity; //#20717
                $aload($_.lastpairs); //#20718
                $aload($_.thispairs); //#20718
                $k[$j++] = $_.n2; //#20719
                for (var _dL = 0, _dM = $_.cols; _dL < _dM; _dL++) { //#20719
                    var _dN = $k[--$j]; //#20719
                    var _dO = $k[--$j]; //#20719
                    $k[$j++] = _dN; //#20719
                    $k[$j++] = _dO; //#20719
                    var _dQ = $k[$j - 1 - $_.colsadd1]; //#20719
                    if (($f($k[--$j] + _dQ) & 3) == 0) { //#20719
                        var _dS = $k[--$j]; //#20719
                        $k[$j++] = $f(_dS + 3); //#20719
                    } //#20719
                } //#20719
                $_.n2 = $k[--$j]; //#20720
                $cleartomark(); //#20721
            } //#20721
        } //#20721
        $k[$j++] = 'dark'; //#20727
        $k[$j++] = 0; //#20727
        $forall($_.sym, function() { //#20727
            var _dV = $k[--$j]; //#20727
            var _dW = $k[--$j]; //#20727
            $k[$j++] = $f(_dW + _dV); //#20727
        }); //#20727
        var _dX = $k[--$j]; //#20727
        $_[$k[--$j]] = _dX; //#20727
        var _da = $_.cols; //#20728
        $_.n4 = (~~((Math.abs($f((($_.dark * 100) / (_da * _da)) - 50))) / 5)) * 10; //#20728
        $k[$j++] = $f(($f($f($_.n1 + $_.n2) + $_.n3)) + $_.n4); //#20730
    }; //#20730
    $_.evalmicro = function() {
        $_.sym = $k[--$j]; //#20735
        $_.dkrhs = 0; //#20736
        $_.dkbot = 0; //#20736
        for (var _di = 1, _dh = $f($_.cols - 1); _di <= _dh; _di += 1) { //#20741
            $_.i = _di; //#20738
            $k[$j++] = 'dkrhs'; //#20739
            $k[$j++] = $_.dkrhs; //#20739
            $k[$j++] = $_.sym; //#20739
            $k[$j++] = $f($_.cols - 1); //#20739
            $k[$j++] = $_.i; //#20739
            $_.qmv(); //#20739
            var _dn = $k[--$j]; //#20739
            var _dp = $get($k[--$j], _dn); //#20739
            var _dq = $k[--$j]; //#20739
            $_[$k[--$j]] = $f(_dq + _dp); //#20739
            $k[$j++] = 'dkbot'; //#20740
            $k[$j++] = $_.dkbot; //#20740
            $k[$j++] = $_.sym; //#20740
            $k[$j++] = $_.i; //#20740
            $k[$j++] = $f($_.cols - 1); //#20740
            $_.qmv(); //#20740
            var _dw = $k[--$j]; //#20740
            var _dy = $get($k[--$j], _dw); //#20740
            var _dz = $k[--$j]; //#20740
            $_[$k[--$j]] = $f(_dz + _dy); //#20740
        } //#20740
        if ($_.dkrhs <= $_.dkbot) { //#20745
            $k[$j++] = -(($_.dkrhs * 16) + $_.dkbot); //#20743
        } else { //#20745
            $k[$j++] = -(($_.dkbot * 16) + $_.dkrhs); //#20745
        } //#20745
    }; //#20745
    $_.bestscore = 999999999; //#20750
    for (var _e9 = 0, _e8 = $_.masks.length - 1; _e9 <= _e8; _e9 += 1) { //#20772
        $_.m = _e9; //#20752
        $_.masksym = $a($_.rows * $_.cols); //#20753
        for (var _eG = 0, _eF = $f(($_.rows * $_.cols) - 1); _eG <= _eF; _eG += 1) { //#20757
            $_.i = _eG; //#20755
            $put($_.masksym, $_.i, $xo($get($_.pixs, $_.i), $get($get($_.masks, $_.m), $_.i))); //#20756
        } //#20756
        if ($_.masks.length != 1) { //#20770
            if ($eq($_.format, "full")) { //#20762
                $k[$j++] = $_.masksym; //#20760
                $_.evalfull(); //#20760
                $_.score = $k[--$j]; //#20760
            } else { //#20762
                $k[$j++] = $_.masksym; //#20762
                $_.evalmicro(); //#20762
                $_.score = $k[--$j]; //#20762
            } //#20762
            if ($_.score < $_.bestscore) { //#20768
                $_.bestsym = $_.masksym; //#20765
                $_.bestmaskval = $_.m; //#20766
                $_.bestscore = $_.score; //#20767
            } //#20767
        } else { //#20770
            $_.bestsym = $_.masksym; //#20770
        } //#20770
    } //#20770
    $_.pixs = $_.bestsym; //#20773
    if ($eq($_.format, "full")) { //#20778
        $k[$j++] = $_.pixs; //#20777
        $k[$j++] = 8; //#20777
        $k[$j++] = $f($_.cols - 8); //#20777
        $_.qmv(); //#20777
        var _eh = $k[--$j]; //#20777
        $put($k[--$j], _eh, 1); //#20777
    } //#20777
    if (!bwipp_qrcode.__20814__) { //#20814
        $_ = Object.create($_); //#20814
        $_.fmtvalsfull = $a([21522, 20773, 24188, 23371, 17913, 16590, 20375, 19104, 30660, 29427, 32170, 30877, 26159, 25368, 27713, 26998, 5769, 5054, 7399, 6608, 1890, 597, 3340, 2107, 13663, 12392, 16177, 14854, 9396, 8579, 11994, 11245]); //#20787
        $_.fmtvalsmicro = $a([17477, 16754, 20011, 19228, 21934, 20633, 24512, 23287, 26515, 25252, 28157, 26826, 30328, 29519, 31766, 31009, 1758, 1001, 3248, 2439, 5941, 4610, 7515, 6252, 9480, 8255, 12134, 10833, 13539, 12756, 16013, 15290]); //#20793
        $_.fmtvalsrmqr1 = $a([129714, 124311, 121821, 115960, 112748, 108361, 104707, 99878, 98062, 90155, 89697, 82244, 81360, 74485, 72895, 66458, 61898, 61167, 53413, 53120, 45844, 44081, 37499, 36190, 29814, 27475, 21785, 19004, 13992, 10637, 6087, 2274, 258919, 257090, 250376, 249133, 242105, 241308, 233686, 233459, 227035, 223742, 219060, 215185, 209925, 207648, 202090, 199247, 194591, 190266, 186736, 181845, 178881, 173540, 170926, 165003, 163235, 156294, 154828, 148457, 147325, 139352, 138770, 131383]); //#20803
        $_.fmtvalsrmqr2 = $a([133755, 136542, 142100, 144433, 149669, 153472, 158154, 161519, 167879, 168162, 175784, 176525, 183577, 184892, 191606, 193363, 196867, 204326, 204908, 212809, 213981, 220408, 221874, 228759, 230591, 236442, 239056, 244469, 247393, 252228, 255758, 260139, 942, 7307, 8897, 15844, 16752, 24149, 24607, 32570, 34322, 39223, 42877, 47192, 50380, 56297, 58787, 64134, 67798, 71667, 76217, 79516, 84488, 87341, 93031, 95298, 101738, 102991, 109573, 111392, 118708, 118929, 126683, 127486]); //#20813
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_qrcode.$ctx[id] = $_[id]); //#20813
        bwipp_qrcode.__20814__ = 1; //#20813
        $_ = Object.getPrototypeOf($_); //#20813
    } //#20813
    if ($eq($_.format, "full")) { //#20824
        $k[$j++] = 'ecid'; //#20816
        $search("MLHQ", $_.eclevel); //#20816
        $j--; //#20816
        var _eq = $k[--$j]; //#20816
        var _er = $k[--$j]; //#20816
        $k[$j++] = _eq.length; //#20816
        $k[$j++] = _er; //#20816
        $j--; //#20816
        var _es = $k[--$j]; //#20816
        var _et = $k[--$j]; //#20816
        $k[$j++] = _es; //#20816
        $k[$j++] = _et; //#20816
        $j--; //#20816
        var _eu = $k[--$j]; //#20816
        $_[$k[--$j]] = _eu; //#20816
        $_.fmtval = $get($_.fmtvalsfull, ($_.ecid << 3) + $_.bestmaskval); //#20817
        for (var _f2 = 0, _f1 = $_.formatmap.length - 1; _f2 <= _f1; _f2 += 1) { //#20823
            $_.i = _f2; //#20819
            $forall($get($_.formatmap, $_.i), function() { //#20822
                var _f7 = $k[--$j]; //#20821
                $k[$j++] = $_.pixs; //#20821
                $aload(_f7); //#20821
                $_.qmv(); //#20821
                var _f8 = $_.fmtval; //#20821
                var _fA = -(14 - $_.i); //#20821
                var _fB = $k[--$j]; //#20821
                $put($k[--$j], _fB, ((_fA < 0 ? _f8 >>> -_fA : _f8 << _fA)) & 1); //#20821
            }); //#20821
        } //#20821
    } //#20821
    if ($eq($_.format, "micro")) { //#20832
        $_.symid = $get($get($a([$a([0]), $a([1, 2]), $a([3, 4]), $a([5, 6, 7])]), ~~($f($_.cols - 11) / 2)), $_.eclval); //#20826
        $_.fmtval = $get($_.fmtvalsmicro, ($_.symid << 2) + $_.bestmaskval); //#20827
        for (var _fT = 0, _fS = $_.formatmap.length - 1; _fT <= _fS; _fT += 1) { //#20831
            $_.i = _fT; //#20829
            $k[$j++] = $_.pixs; //#20830
            $aload($get($get($_.formatmap, $_.i), 0)); //#20830
            $_.qmv(); //#20830
            var _fZ = $_.fmtval; //#20830
            var _fb = -(14 - $_.i); //#20830
            var _fc = $k[--$j]; //#20830
            $put($k[--$j], _fc, ((_fb < 0 ? _fZ >>> -_fb : _fZ << _fb)) & 1); //#20830
        } //#20830
    } //#20830
    if ($eq($_.format, "rmqr")) { //#20842
        $k[$j++] = 'fmtvalu'; //#20834
        $search("MH", $_.eclevel); //#20834
        $j--; //#20834
        var _fg = $k[--$j]; //#20834
        var _fh = $k[--$j]; //#20834
        $k[$j++] = _fg.length; //#20834
        $k[$j++] = _fh; //#20834
        $j--; //#20834
        var _fi = $k[--$j]; //#20834
        var _fj = $k[--$j]; //#20834
        $k[$j++] = _fi; //#20834
        $k[$j++] = _fj; //#20834
        $j--; //#20834
        var _fk = $k[--$j]; //#20834
        $_[$k[--$j]] = (_fk << 5) + $_.verind; //#20834
        $_.fmtval1 = $get($_.fmtvalsrmqr1, $_.fmtvalu); //#20835
        $_.fmtval2 = $get($_.fmtvalsrmqr2, $_.fmtvalu); //#20836
        for (var _fv = 0, _fu = $_.formatmap.length - 1; _fv <= _fu; _fv += 1) { //#20841
            $_.i = _fv; //#20838
            $k[$j++] = $_.pixs; //#20839
            $aload($get($get($_.formatmap, $_.i), 0)); //#20839
            $_.qmv(); //#20839
            var _g1 = $_.fmtval1; //#20839
            var _g3 = -(17 - $_.i); //#20839
            var _g4 = $k[--$j]; //#20839
            $put($k[--$j], _g4, ((_g3 < 0 ? _g1 >>> -_g3 : _g1 << _g3)) & 1); //#20839
            $k[$j++] = $_.pixs; //#20840
            $aload($get($get($_.formatmap, $_.i), 1)); //#20840
            $_.qmv(); //#20840
            var _gB = $_.fmtval2; //#20840
            var _gD = -(17 - $_.i); //#20840
            var _gE = $k[--$j]; //#20840
            $put($k[--$j], _gE, ((_gD < 0 ? _gB >>> -_gD : _gB << _gD)) & 1); //#20840
        } //#20840
    } //#20840
    if (!bwipp_qrcode.__20853__) { //#20853
        $_ = Object.create($_); //#20853
        $_.vervals = $a([31892, 34236, 39577, 42195, 48118, 51042, 55367, 58893, 63784, 68472, 70749, 76311, 79154, 84390, 87683, 92361, 96236, 102084, 102881, 110507, 110734, 117786, 119615, 126325, 127568, 133589, 136944, 141498, 145311, 150283, 152622, 158308, 161089, 167017]); //#20852
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_qrcode.$ctx[id] = $_[id]); //#20852
        bwipp_qrcode.__20853__ = 1; //#20852
        $_ = Object.getPrototypeOf($_); //#20852
    } //#20852
    if ($eq($_.format, "full") && ($_.cols >= 45)) { //#20862
        $_.verval = $get($_.vervals, (~~($f($_.cols - 17) / 4)) - 7); //#20855
        for (var _gP = 0, _gO = $_.versionmap.length - 1; _gP <= _gO; _gP += 1) { //#20861
            $_.i = _gP; //#20857
            $forall($get($_.versionmap, $_.i), function() { //#20860
                var _gU = $k[--$j]; //#20859
                $k[$j++] = $_.pixs; //#20859
                $forall(_gU); //#20859
                $_.qmv(); //#20859
                var _gV = $_.verval; //#20859
                var _gX = -(17 - $_.i); //#20859
                var _gY = $k[--$j]; //#20859
                $put($k[--$j], _gY, ((_gX < 0 ? _gV >>> -_gX : _gV << _gX)) & 1); //#20859
            }); //#20859
        } //#20859
    } //#20859
    var _gg = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $_.pixs],
        ["pixx", $_.cols],
        ["pixy", $_.rows],
        ["height", ($_.rows * 2) / 72],
        ["width", ($_.cols * 2) / 72],
        ["opt", $_.options]
    ]); //#20872
    $k[$j++] = _gg; //#20875
    if (!$_.dontdraw) { //#20875
        bwipp_renmatrix(); //#20875
    } //#20875
    $_ = Object.getPrototypeOf($_); //#20877
    $_ = Object.getPrototypeOf($_); //#20879
}

function bwipp_swissqrcode() {
    $_ = Object.create($_); //#20909
    $_.dontdraw = false; //#20912
    $_.parse = false; //#20913
    $k[$j++] = $_; //#20915
    bwipp_processoptions(); //#20915
    $_.options = $k[--$j]; //#20915
    $_.barcode = $k[--$j]; //#20916
    var _3 = new Map([
        ["parse", $_.parse],
        ["parseonly", true],
        ["parsefnc", false]
    ]); //#20922
    $_.fncvals = _3; //#20923
    $k[$j++] = 'barcode'; //#20924
    $k[$j++] = $_.barcode; //#20924
    $k[$j++] = $_.fncvals; //#20924
    bwipp_parseinput(); //#20924
    var _6 = $k[--$j]; //#20924
    $_[$k[--$j]] = _6; //#20924
    $_.barlen = $_.barcode.length; //#20925
    delete $_.options["parse"]; //#20926
    if ($_.barcode.length > 997) { //#20931
        $k[$j++] = 'bwipp.swissqrcodeBadLength#20930'; //#20930
        $k[$j++] = "Swiss QR Code input must not exceed 997 digits"; //#20930
        bwipp_raiseerror(); //#20930
    } //#20930
    $put($_.options, "dontdraw", true); //#20934
    $k[$j++] = 'args'; //#20935
    $k[$j++] = $_.barcode; //#20935
    $k[$j++] = $_.options; //#20935
    bwipp_qrcode(); //#20935
    var _E = $k[--$j]; //#20935
    $_[$k[--$j]] = _E; //#20935
    $put($_.args, "opt", $_.options); //#20937
    $k[$j++] = $_.args; //#21006
    if (!$_.dontdraw) { //#21006
        $$.save(); //#20951
        var _K = $$.currpos(); //#20952
        $$.translate(_K.x, _K.y); //#20952
        var _L = 72 / 25.4; //#20953
        $$.scale(_L, _L); //#20953
        $$.save(); //#20956
        $$.newpath(); //#20957
        $$.moveto(0, 0); //#20958
        $$.lineto(46, 0); //#20959
        $$.lineto(46, 46); //#20960
        $$.lineto(0, 46); //#20961
        $$.closepath(); //#20962
        $$.moveto(19.5, 19.5); //#20963
        $$.lineto(19.5, 26.5); //#20964
        $$.lineto(26.5, 26.5); //#20965
        $$.lineto(26.5, 19.5); //#20966
        $$.closepath(); //#20967
        $$.clip(); //#20968
        $$.save(); //#20971
        $$.moveto(0, 0); //#20972
        var _O = (46 / $get($_.args, "pixx")) / 2; //#20973
        $$.scale(_O, _O); //#20973
        bwipp_renmatrix(); //#20974
        $$.restore(); //#20975
        $$.restore(); //#20977
        $$.translate(19.5, 19.5); //#20980
        var _P = 7 / 83; //#20981
        $$.scale(_P, _P); //#20981
        $$.newpath(); //#20983
        $$.moveto(6, 6); //#20984
        $$.lineto(6, 77); //#20985
        $$.lineto(77, 77); //#20986
        $$.lineto(77, 6); //#20987
        $$.closepath(); //#20988
        $$.moveto(49, 18); //#20989
        $$.lineto(49, 34); //#20990
        $$.lineto(65, 34); //#20991
        $$.lineto(65, 49); //#20992
        $$.lineto(49, 49); //#20993
        $$.lineto(49, 65); //#20994
        $$.lineto(34, 65); //#20995
        $$.lineto(34, 49); //#20996
        $$.lineto(18, 49); //#20997
        $$.lineto(18, 34); //#20998
        $$.lineto(34, 34); //#20999
        $$.lineto(34, 18); //#21000
        $$.closepath(); //#21001
        $$.setrgbcolor(0, 0, 0); //#21002
        $$.fill(); //#21002
        $$.restore(); //#21004
    } //#21004
    $_ = Object.getPrototypeOf($_); //#21008
}

function bwipp_microqrcode() {
    $_ = Object.create($_); //#21037
    $_.dontdraw = false; //#21040
    $k[$j++] = $_; //#21042
    bwipp_processoptions(); //#21042
    $_.options = $k[--$j]; //#21042
    $_.barcode = $k[--$j]; //#21043
    $put($_.options, "dontdraw", true); //#21046
    $put($_.options, "format", "micro"); //#21047
    $k[$j++] = 'args'; //#21049
    $k[$j++] = $_.barcode; //#21049
    $k[$j++] = $_.options; //#21049
    bwipp_qrcode(); //#21049
    var _6 = $k[--$j]; //#21049
    $_[$k[--$j]] = _6; //#21049
    $put($_.args, "opt", $_.options); //#21051
    $k[$j++] = $_.args; //#21054
    if (!$_.dontdraw) { //#21054
        bwipp_renmatrix(); //#21054
    } //#21054
    $_ = Object.getPrototypeOf($_); //#21056
}

function bwipp_rectangularmicroqrcode() {
    $_ = Object.create($_); //#21085
    $_.dontdraw = false; //#21088
    $k[$j++] = $_; //#21090
    bwipp_processoptions(); //#21090
    $_.options = $k[--$j]; //#21090
    $_.barcode = $k[--$j]; //#21091
    $put($_.options, "dontdraw", true); //#21094
    $put($_.options, "format", "rmqr"); //#21095
    $k[$j++] = 'args'; //#21097
    $k[$j++] = $_.barcode; //#21097
    $k[$j++] = $_.options; //#21097
    bwipp_qrcode(); //#21097
    var _6 = $k[--$j]; //#21097
    $_[$k[--$j]] = _6; //#21097
    $put($_.args, "opt", $_.options); //#21099
    $k[$j++] = $_.args; //#21102
    if (!$_.dontdraw) { //#21102
        bwipp_renmatrix(); //#21102
    } //#21102
    $_ = Object.getPrototypeOf($_); //#21104
}

function bwipp_maxicode() {
    $_ = Object.create($_); //#21135
    $_.dontdraw = false; //#21138
    $_.mode = -1; //#21139
    $_.sam = -1; //#21140
    $_.parse = false; //#21141
    $_.parsefnc = false; //#21142
    $k[$j++] = $_; //#21144
    bwipp_processoptions(); //#21144
    $_.options = $k[--$j]; //#21144
    $_.barcode = $k[--$j]; //#21145
    if ($eq($_.barcode, "")) { //#21149
        $k[$j++] = 'bwipp.maxicodeEmptyData#21148'; //#21148
        $k[$j++] = "The data must not be empty"; //#21148
        bwipp_raiseerror(); //#21148
    } //#21148
    if (($_.mode != -1) && (($_.mode < 2) || ($_.mode > 6))) { //#21153
        $k[$j++] = 'bwipp.maxicodeBadMode#21152'; //#21152
        $k[$j++] = "Mode must be 2 to 6"; //#21152
        bwipp_raiseerror(); //#21152
    } //#21152
    if ($_.sam != -1) { //#21165
        $k[$j++] = true; //#21161
        for (var _7 = 0, _8 = 1; _7 < _8; _7++) { //#21161
            var _9 = $_.sam; //#21158
            if ((_9 < 12) || (_9 > 88)) { //#21158
                $j--; //#21158
                $k[$j++] = false; //#21158
                break; //#21158
            } //#21158
            var _B = $_.sam % 10; //#21159
            if ((_B < 2) || (_B > 8)) { //#21159
                $j--; //#21159
                $k[$j++] = false; //#21159
                break; //#21159
            } //#21159
            if ((~~($_.sam / 10)) > ($_.sam % 10)) { //#21160
                $j--; //#21160
                $k[$j++] = false; //#21160
                break; //#21160
            } //#21160
        } //#21160
        if ($nt($k[--$j])) { //#21164
            $k[$j++] = 'bwipp.maxicodeBadSAM#21163'; //#21163
            $k[$j++] = "SAM must be formatted as \"NM\" for Nth of M symbols, from 2 to 8 symbols"; //#21163
            bwipp_raiseerror(); //#21163
        } //#21163
    } //#21163
    bwipp_loadctx(bwipp_maxicode) //#21167
    var _H = new Map([
        ["parse", $_.parse],
        ["parsefnc", $_.parsefnc],
        ["eci", true]
    ]); //#21173
    $_.fncvals = _H; //#21175
    $k[$j++] = 'msg'; //#21176
    $k[$j++] = $_.barcode; //#21176
    $k[$j++] = $_.fncvals; //#21176
    bwipp_parseinput(); //#21176
    var _K = $k[--$j]; //#21176
    $_[$k[--$j]] = _K; //#21176
    $_.msglen = $_.msg.length; //#21177
    if (($_.mode == 2) || ($_.mode == 3)) { //#21265
        $_.barcode = $s($_.msglen); //#21183
        for (var _T = 0, _S = $_.msglen - 1; _T <= _S; _T += 1) { //#21189
            $_.i = _T; //#21185
            if ($get($_.msg, $_.i) > 0) { //#21188
                $put($_.barcode, $_.i, $get($_.msg, $_.i)); //#21187
            } //#21187
        } //#21187
        $_.barlen = $_.barcode.length; //#21190
        $_.fid = ""; //#21193
        if ($_.barlen >= 7) { //#21199
            if ($eq($geti($_.barcode, 0, 7), "\x5b\x29\x3e\x1e\x30\x31\x1d")) { //#21198
                $_.fid = $geti($_.barcode, 0, 9); //#21196
                $_.barcode = $geti($_.barcode, 9, $_.barlen - 9); //#21197
            } //#21197
        } //#21197
        $search($_.barcode, "\x1d"); //#21203
        if ($k[--$j]) { //#21225
            $_.pcode = $k[--$j]; //#21204
            $j--; //#21204
            if ($_.mode == 2) { //#21220
                $k[$j++] = true; //#21210
                for (var _p = 0, _q = 1; _p < _q; _p++) { //#21210
                    if ($_.pcode.length > 9) { //#21208
                        $j--; //#21208
                        $k[$j++] = false; //#21208
                        break; //#21208
                    } //#21208
                    $forall($_.pcode, function() { //#21209
                        var _t = $k[--$j]; //#21209
                        if ((_t < 48) || (_t > 57)) { //#21209
                            $j--; //#21209
                            $k[$j++] = false; //#21209
                            return true; //#21209
                        } //#21209
                    }); //#21209
                } //#21209
                if ($nt($k[--$j])) { //#21213
                    $j--; //#21212
                    $k[$j++] = 'bwipp.maxicodeBadMode2PostCode#21212'; //#21212
                    $k[$j++] = "A mode 2 postcode must not exceed 9 digits"; //#21212
                    bwipp_raiseerror(); //#21212
                } //#21212
            } else { //#21220
                $forall($_.pcode, function() { //#21222
                    var _w = $k[--$j]; //#21216
                    if (!((_w == 32) || (((_w >= 34) && (_w <= 58)) || ((_w >= 65) && (_w <= 90))))) { //#21221
                        $j--; //#21220
                        $k[$j++] = 'bwipp.maxicodeBadMode3PostCode#21220'; //#21220
                        $k[$j++] = "A mode 3 postcode must not exceed 6 characters"; //#21220
                        bwipp_raiseerror(); //#21220
                    } //#21220
                }); //#21220
            } //#21220
        } else { //#21225
            $j--; //#21225
            $k[$j++] = 'bwipp.maxicodeExpectedPostCode#21225'; //#21225
            $k[$j++] = "Expected postcode followed by group separator character"; //#21225
            bwipp_raiseerror(); //#21225
        } //#21225
        $search($k[--$j], "\x1d"); //#21227
        if ($k[--$j]) { //#21238
            $_.ccode = $k[--$j]; //#21228
            $j--; //#21228
            $k[$j++] = true; //#21233
            for (var _10 = 0, _11 = 1; _10 < _11; _10++) { //#21233
                if ($_.ccode.length != 3) { //#21231
                    $j--; //#21231
                    $k[$j++] = false; //#21231
                    break; //#21231
                } //#21231
                $forall($_.ccode, function() { //#21232
                    var _14 = $k[--$j]; //#21232
                    if ((_14 < 48) || (_14 > 57)) { //#21232
                        $j--; //#21232
                        $k[$j++] = false; //#21232
                        return true; //#21232
                    } //#21232
                }); //#21232
            } //#21232
            if ($nt($k[--$j])) { //#21236
                $j--; //#21235
                $k[$j++] = 'bwipp.maxicodeBadCountryCode#21235'; //#21235
                $k[$j++] = "Country code must be three digits"; //#21235
                bwipp_raiseerror(); //#21235
            } //#21235
        } else { //#21238
            $j--; //#21238
            $k[$j++] = 'bwipp.maxicodeExpectedCountryCode#21238'; //#21238
            $k[$j++] = "Expected country code followed by group separator character"; //#21238
            bwipp_raiseerror(); //#21238
        } //#21238
        $search($k[--$j], "\x1d"); //#21240
        if ($k[--$j]) { //#21251
            $_.scode = $k[--$j]; //#21241
            $j--; //#21241
            $k[$j++] = true; //#21246
            for (var _19 = 0, _1A = 1; _19 < _1A; _19++) { //#21246
                if ($_.scode.length != 3) { //#21244
                    $j--; //#21244
                    $k[$j++] = false; //#21244
                    break; //#21244
                } //#21244
                $forall($_.scode, function() { //#21245
                    var _1D = $k[--$j]; //#21245
                    if ((_1D < 48) || (_1D > 57)) { //#21245
                        $j--; //#21245
                        $k[$j++] = false; //#21245
                        return true; //#21245
                    } //#21245
                }); //#21245
            } //#21245
            if ($nt($k[--$j])) { //#21249
                $j--; //#21248
                $k[$j++] = 'bwipp.maxicodeBadServiceClass#21248'; //#21248
                $k[$j++] = "Service class must be three digits"; //#21248
                bwipp_raiseerror(); //#21248
            } //#21248
        } else { //#21251
            $j--; //#21251
            $k[$j++] = 'bwipp.maxicodeExpectedServiceClass#21251'; //#21251
            $k[$j++] = "Expected service class followed by group separator character"; //#21251
            bwipp_raiseerror(); //#21251
        } //#21251
        $_.barcode = $k[--$j]; //#21253
        var _1I = $s($_.barcode.length + $_.fid.length); //#21256
        $puti(_1I, 0, $_.fid); //#21257
        $puti(_1I, $_.fid.length, $_.barcode); //#21258
        $_.barcode = _1I; //#21259
        $_.barlen = $_.barcode.length; //#21260
        $k[$j++] = Infinity; //#21262
        var _1N = $_.barcode; //#21262
        for (var _1O = 0, _1P = _1N.length; _1O < _1P; _1O++) { //#21262
            $k[$j++] = $get(_1N, _1O); //#21262
        } //#21262
        $_.msg = $a(); //#21262
        $_.msglen = $_.msg.length; //#21263
    } //#21263
    if (!bwipp_maxicode.__21361__) { //#21361
        $_ = Object.create($_); //#21361
        $_.eci = -1; //#21269
        $_.pad = -2; //#21269
        $_.ns = -3; //#21269
        $_.la = -4; //#21270
        $_.lb = -5; //#21270
        $_.sa = -6; //#21271
        $_.sb = -7; //#21271
        $_.sc = -8; //#21271
        $_.sd = -9; //#21271
        $_.se = -10; //#21271
        $_.sa2 = -11; //#21272
        $_.sa3 = -12; //#21272
        $_.lkc = -13; //#21273
        $_.lkd = -14; //#21273
        $_.lke = -15; //#21273
        $_.pd2 = -16; //#21274
        $_.pd3 = -17; //#21274
        $_.charmaps = $a([$a([13, "`", 192, 224, 0]), $a(["A", "a", 193, 225, 1]), $a(["B", "b", 194, 226, 2]), $a(["C", "c", 195, 227, 3]), $a(["D", "d", 196, 228, 4]), $a(["E", "e", 197, 229, 5]), $a(["F", "f", 198, 230, 6]), $a(["G", "g", 199, 231, 7]), $a(["H", "h", 200, 232, 8]), $a(["I", "i", 201, 233, 9]), $a(["J", "j", 202, 234, 10]), $a(["K", "k", 203, 235, 11]), $a(["L", "l", 204, 236, 12]), $a(["M", "m", 205, 237, 13]), $a(["N", "n", 206, 238, 14]), $a(["O", "o", 207, 239, 15]), $a(["P", "p", 208, 240, 16]), $a(["Q", "q", 209, 241, 17]), $a(["R", "r", 210, 242, 18]), $a(["S", "s", 211, 243, 19]), $a(["T", "t", 212, 244, 20]), $a(["U", "u", 213, 245, 21]), $a(["V", "v", 214, 246, 22]), $a(["W", "w", 215, 247, 23]), $a(["X", "x", 216, 248, 24]), $a(["Y", "y", 217, 249, 25]), $a(["Z", "z", 218, 250, 26]), $a([$_.eci, $_.eci, $_.eci, $_.eci, $_.eci]), $a([28, 28, 28, 28, $_.pad]), $a([29, 29, 29, 29, $_.pad]), $a([30, 30, 30, 30, 27]), $a([$_.ns, $_.ns, $_.ns, $_.ns, $_.ns]), $a([" ", "{", 219, 251, 28]), $a([$_.pad, $_.pad, 220, 252, 29]), $a(["\"", "}", 221, 253, 30]), $a(["#", "~", 222, 254, 31]), $a(["$", 127, 223, 255, 159]), $a(["%", ";", 170, 161, 160]), $a(["&", "<", 172, 168, 162]), $a(["'", "=", 177, 171, 163]), $a([40, ">", 178, 175, 164]), $a([41, "?", 179, 176, 165]), $a(["*", "[", 181, 180, 166]), $a(["+", 92, 185, 183, 167]), $a([",", "]", 186, 184, 169]), $a(["-", "^", 188, 187, 173]), $a([".", "_", 189, 191, 174]), $a(["/", " ", 190, 138, 182]), $a(["0", ",", 128, 139, 149]), $a(["1", ".", 129, 140, 150]), $a(["2", "/", 130, 141, 151]), $a(["3", ":", 131, 142, 152]), $a(["4", "@", 132, 143, 153]), $a(["5", "!", 133, 144, 154]), $a(["6", "|", 134, 145, 155]), $a(["7", $_.pd2, 135, 146, 156]), $a(["8", $_.sa2, 136, 147, 157]), $a(["9", $_.sa3, 137, 148, 158]), $a([":", $_.pd3, $_.la, $_.la, $_.la]), $a([$_.sb, $_.sa, " ", " ", " "]), $a([$_.sc, $_.sc, $_.lkc, $_.sc, $_.sc]), $a([$_.sd, $_.sd, $_.sd, $_.lkd, $_.sd]), $a([$_.se, $_.se, $_.se, $_.se, $_.lke]), $a([$_.lb, $_.la, $_.lb, $_.lb, $_.lb])]); //#21343
        $_.charvals = $a([new Map, new Map, new Map, new Map, new Map]); //#21346
        for (var _3G = 0, _3F = $_.charmaps.length - 1; _3G <= _3F; _3G += 1) { //#21355
            $_.i = _3G; //#21348
            $_.encs = $get($_.charmaps, $_.i); //#21349
            for (var _3K = 0; _3K <= 4; _3K += 1) { //#21354
                $_.j = _3K; //#21351
                var _3N = $get($_.encs, $_.j); //#21352
                $k[$j++] = _3N; //#21352
                if ($eq($type(_3N), 'stringtype')) { //#21352
                    var _3Q = $get($k[--$j], 0); //#21352
                    $k[$j++] = _3Q; //#21352
                } //#21352
                $put($get($_.charvals, $_.j), $k[--$j], $_.i); //#21353
            } //#21353
        } //#21353
        $_.seta = $get($_.charvals, 0); //#21356
        $_.setb = $get($_.charvals, 1); //#21357
        $_.setc = $get($_.charvals, 2); //#21358
        $_.setd = $get($_.charvals, 3); //#21359
        $_.sete = $get($_.charvals, 4); //#21360
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_maxicode.$ctx[id] = $_[id]); //#21360
        bwipp_maxicode.__21361__ = 1; //#21360
        $_ = Object.getPrototypeOf($_); //#21360
    } //#21360
    $k[$j++] = Infinity; //#21364
    for (var _3i = 0, _3j = $_.msglen + 1; _3i < _3j; _3i++) { //#21364
        $k[$j++] = 0; //#21364
    } //#21364
    $_.nseq = $a(); //#21364
    for (var _3m = $_.msglen - 1; _3m >= 0; _3m -= 1) { //#21372
        $_.i = _3m; //#21366
        var _3p = $get($_.msg, $_.i); //#21367
        if ((_3p >= 48) && (_3p <= 57)) { //#21370
            $put($_.nseq, $_.i, $f($get($_.nseq, $_.i + 1) + 1)); //#21368
        } else { //#21370
            $put($_.nseq, $_.i, 0); //#21370
        } //#21370
    } //#21370
    $_.nseq = $geti($_.nseq, 0, $_.msglen); //#21373
    $_.prefixinset = function() {
        $k[$j++] = 0; //#21380
        for (;;) { //#21380
            var _40 = $k[--$j]; //#21378
            var _41 = $k[--$j]; //#21378
            $k[$j++] = _41; //#21378
            $k[$j++] = _40; //#21378
            if (_40 >= _41.length) { //#21378
                break; //#21378
            } //#21378
            var _42 = $k[--$j]; //#21379
            var _43 = $k[--$j]; //#21379
            var _45 = $k[--$j]; //#21379
            var _46 = $get(_45, $get(_43, _42)) !== undefined; //#21379
            $k[$j++] = _45; //#21379
            $k[$j++] = _43; //#21379
            $k[$j++] = _42; //#21379
            if (_46) { //#21379
                var _47 = $k[--$j]; //#21379
                $k[$j++] = $f(_47 + 1); //#21379
            } else { //#21379
                break; //#21379
            } //#21379
        } //#21379
        var _48 = $k[--$j]; //#21381
        var _49 = $k[--$j]; //#21381
        $k[$j++] = _48; //#21381
        $k[$j++] = _49; //#21381
        $j--; //#21381
        var _4A = $k[--$j]; //#21381
        var _4B = $k[--$j]; //#21381
        $k[$j++] = _4A; //#21381
        $k[$j++] = _4B; //#21381
        $j--; //#21381
    }; //#21381
    $_.enc = function() {
        var _4C = $k[--$j]; //#21385
        $put($_.out, $_.j, $get(_4C, $k[--$j])); //#21385
        $_.j = $_.j + 1; //#21386
    }; //#21386
    $_.out = $a(144); //#21389
    $_.i = 0; //#21390
    $_.j = 0; //#21390
    $_.cset = "seta"; //#21390
    for (;;) { //#21542
        if ($_.i == $_.msglen) { //#21399
            if ($ne($_.cset, "seta") && $ne($_.cset, "setb")) { //#21397
                $k[$j++] = $_.la; //#21395
                $k[$j++] = $_[$_.cset]; //#21395
                $_.enc(); //#21395
                $_.cset = "seta"; //#21396
            } //#21396
            break; //#21398
        } //#21398
        for (;;) { //#21541
            if ($get($_.msg, $_.i) <= -1000000) { //#21428
                $k[$j++] = $_.eci; //#21403
                $k[$j++] = $_[$_.cset]; //#21403
                $_.enc(); //#21403
                var _4Z = $f((-$get($_.msg, $_.i)) - 1000000); //#21405
                $k[$j++] = _4Z; //#21423
                if (_4Z <= 31) { //#21422
                    var _4a = $k[--$j]; //#21406
                    $k[$j++] = _4a & 63; //#21407
                    $astore($a(1)); //#21407
                } else { //#21422
                    var _4c = $k[--$j]; //#21408
                    $k[$j++] = _4c; //#21423
                    if (_4c <= 1023) { //#21422
                        var _4d = $k[--$j]; //#21409
                        $k[$j++] = ((_4d >>> 6) & 31) | 32; //#21411
                        $k[$j++] = _4d & 63; //#21411
                        $astore($a(2)); //#21411
                    } else { //#21422
                        var _4f = $k[--$j]; //#21412
                        $k[$j++] = _4f; //#21423
                        if (_4f <= 32767) { //#21422
                            var _4g = $k[--$j]; //#21413
                            $k[$j++] = ((_4g >>> 12) & 47) | 48; //#21416
                            $k[$j++] = (_4g >>> 6) & 63; //#21416
                            $k[$j++] = _4g & 63; //#21416
                            $astore($a(3)); //#21416
                        } else { //#21422
                            var _4i = $k[--$j]; //#21418
                            $k[$j++] = ((_4i >>> 18) & 55) | 56; //#21422
                            $k[$j++] = (_4i >>> 12) & 63; //#21422
                            $k[$j++] = (_4i >>> 6) & 63; //#21422
                            $k[$j++] = _4i & 63; //#21422
                            $astore($a(4)); //#21422
                        } //#21422
                    } //#21422
                } //#21422
                var _4k = $k[--$j]; //#21424
                $puti($_.out, $_.j, _4k); //#21424
                $_.j = _4k.length + $_.j; //#21425
                $_.i = $_.i + 1; //#21426
                break; //#21427
            } //#21427
            if ($get($_.nseq, $_.i) >= 9) { //#21439
                var _4u = $geti($_.msg, $_.i, 9); //#21432
                $k[$j++] = 0; //#21432
                for (var _4v = 0, _4w = _4u.length; _4v < _4w; _4v++) { //#21432
                    var _4y = $k[--$j]; //#21432
                    $k[$j++] = ($f(_4y + $f($get(_4u, _4v) - 48))) * 10; //#21432
                } //#21432
                var _4z = $k[--$j]; //#21432
                $k[$j++] = ~~(_4z / 10); //#21433
                for (var _50 = 0, _51 = 4; _50 < _51; _50++) { //#21433
                    var _52 = $k[--$j]; //#21433
                    $k[$j++] = _52 & 63; //#21433
                    $k[$j++] = _52 >>> 6; //#21433
                } //#21433
                $k[$j++] = $get($_[$_.cset], $_.ns); //#21434
                for (var _57 = 0; _57 <= 10; _57 += 2) { //#21434
                    var _58 = $k[$j - 1 - _57]; //#21434
                    $k[$j++] = _58; //#21434
                } //#21434
                $astore($a(6)); //#21434
                var _5A = $k[--$j]; //#21434
                var _5B = $k[--$j]; //#21434
                var _5C = $k[--$j]; //#21434
                var _5D = $k[--$j]; //#21434
                var _5E = $k[--$j]; //#21434
                var _5F = $k[--$j]; //#21434
                var _5G = $k[--$j]; //#21434
                $k[$j++] = _5A; //#21434
                $k[$j++] = _5G; //#21434
                $k[$j++] = _5F; //#21434
                $k[$j++] = _5E; //#21434
                $k[$j++] = _5D; //#21434
                $k[$j++] = _5C; //#21434
                $k[$j++] = _5B; //#21434
                for (var _5H = 0, _5I = 6; _5H < _5I; _5H++) { //#21434
                    $j--; //#21434
                } //#21434
                $puti($_.out, $_.j, $k[--$j]); //#21435
                $_.i = $_.i + 9; //#21436
                $_.j = $_.j + 6; //#21437
                break; //#21438
            } //#21438
            $_.char1 = $get($_.msg, $_.i); //#21442
            $k[$j++] = 'char2'; //#21443
            if (($_.i + 1) < $_.msglen) { //#21443
                $k[$j++] = $get($_.msg, $_.i + 1); //#21443
            } else { //#21443
                $k[$j++] = -99; //#21443
            } //#21443
            var _5W = $k[--$j]; //#21443
            $_[$k[--$j]] = _5W; //#21443
            $k[$j++] = 'char3'; //#21444
            if (($_.i + 2) < $_.msglen) { //#21444
                $k[$j++] = $get($_.msg, $_.i + 2); //#21444
            } else { //#21444
                $k[$j++] = -99; //#21444
            } //#21444
            var _5d = $k[--$j]; //#21444
            $_[$k[--$j]] = _5d; //#21444
            var _5i = $get($_[$_.cset], $_.char1) !== undefined; //#21447
            if (_5i) { //#21451
                $k[$j++] = $_.char1; //#21448
                $k[$j++] = $_[$_.cset]; //#21448
                $_.enc(); //#21448
                $_.i = $_.i + 1; //#21449
                break; //#21450
            } //#21450
            var _5q = $get($_.setb, $_.char1) !== undefined; //#21454
            if ($eq($_.cset, "seta") && _5q) { //#21464
                var _5t = $get($_.setb, $_.char2) !== undefined; //#21455
                if (_5t) { //#21461
                    $k[$j++] = $_.lb; //#21456
                    $k[$j++] = $_.seta; //#21456
                    $_.enc(); //#21456
                    $_.cset = "setb"; //#21457
                } else { //#21461
                    $k[$j++] = $_.sb; //#21459
                    $k[$j++] = $_.seta; //#21459
                    $_.enc(); //#21459
                    $k[$j++] = $_.char1; //#21460
                    $k[$j++] = $_.setb; //#21460
                    $_.enc(); //#21460
                    $_.i = $_.i + 1; //#21461
                } //#21461
                break; //#21463
            } //#21463
            var _64 = $get($_.seta, $_.char1) !== undefined; //#21467
            if ($eq($_.cset, "setb") && _64) { //#21492
                var _65 = $_.seta; //#21468
                var _66 = $_.msg; //#21468
                var _67 = $_.i; //#21468
                var _68 = $_.msglen; //#21468
                var _69 = $_.i; //#21468
                var _6A = _68 - _69; //#21468
                var _6B = 4; //#21468
                if (4 > (_68 - _69)) { //#21468
                    var _ = _6A; //#21468
                    _6A = _6B; //#21468
                    _6B = _; //#21468
                } //#21468
                $k[$j++] = 'p'; //#21468
                $k[$j++] = _65; //#21468
                $k[$j++] = $geti(_66, _67, _6B); //#21468
                $_.prefixinset(); //#21468
                var _6D = $k[--$j]; //#21468
                $_[$k[--$j]] = _6D; //#21468
                if ($_.p == 1) { //#21473
                    $k[$j++] = $_.sa; //#21470
                    $k[$j++] = $_.setb; //#21470
                    $_.enc(); //#21470
                    $k[$j++] = $_.char1; //#21471
                    $k[$j++] = $_.seta; //#21471
                    $_.enc(); //#21471
                    $_.i = $_.i + 1; //#21472
                } //#21472
                if ($_.p == 2) { //#21479
                    $k[$j++] = $_.sa2; //#21475
                    $k[$j++] = $_.setb; //#21475
                    $_.enc(); //#21475
                    $k[$j++] = $_.char1; //#21476
                    $k[$j++] = $_.seta; //#21476
                    $_.enc(); //#21476
                    $k[$j++] = $_.char2; //#21477
                    $k[$j++] = $_.seta; //#21477
                    $_.enc(); //#21477
                    $_.i = $_.i + 2; //#21478
                } //#21478
                if ($_.p == 3) { //#21486
                    $k[$j++] = $_.sa3; //#21481
                    $k[$j++] = $_.setb; //#21481
                    $_.enc(); //#21481
                    $k[$j++] = $_.char1; //#21482
                    $k[$j++] = $_.seta; //#21482
                    $_.enc(); //#21482
                    $k[$j++] = $_.char2; //#21483
                    $k[$j++] = $_.seta; //#21483
                    $_.enc(); //#21483
                    $k[$j++] = $_.char3; //#21484
                    $k[$j++] = $_.seta; //#21484
                    $_.enc(); //#21484
                    $_.i = $_.i + 3; //#21485
                } //#21485
                if ($_.p >= 4) { //#21490
                    $k[$j++] = $_.la; //#21488
                    $k[$j++] = $_.setb; //#21488
                    $_.enc(); //#21488
                    $_.cset = "seta"; //#21489
                } //#21489
                break; //#21491
            } //#21491
            var _6i = $get($_.seta, $_.char1) !== undefined; //#21495
            if (_6i) { //#21499
                $k[$j++] = $_.la; //#21496
                $k[$j++] = $_[$_.cset]; //#21496
                $_.enc(); //#21496
                $_.cset = "seta"; //#21497
                break; //#21498
            } //#21498
            var _6o = $get($_.setb, $_.char1) !== undefined; //#21500
            if (_6o) { //#21504
                $k[$j++] = $_.lb; //#21501
                $k[$j++] = $_[$_.cset]; //#21501
                $_.enc(); //#21501
                $_.cset = "setb"; //#21502
                break; //#21503
            } //#21503
            var _6u = $get($_.setc, $_.char1) !== undefined; //#21507
            if (_6u) { //#21507
                $_.setx = "setc"; //#21507
                $_.sx = $_.sc; //#21507
                $_.lkx = $_.lkc; //#21507
            } //#21507
            var _6z = $get($_.setd, $_.char1) !== undefined; //#21508
            if (_6z) { //#21508
                $_.setx = "setd"; //#21508
                $_.sx = $_.sd; //#21508
                $_.lkx = $_.lkd; //#21508
            } //#21508
            var _74 = $get($_.sete, $_.char1) !== undefined; //#21509
            if (_74) { //#21509
                $_.setx = "sete"; //#21509
                $_.sx = $_.se; //#21509
                $_.lkx = $_.lke; //#21509
            } //#21509
            var _78 = $_[$_.setx]; //#21512
            var _79 = $_.msg; //#21512
            var _7A = $_.i; //#21512
            var _7B = $_.msglen; //#21512
            var _7C = $_.i; //#21512
            var _7D = _7B - _7C; //#21512
            var _7E = 4; //#21512
            if (4 > (_7B - _7C)) { //#21512
                var _ = _7D; //#21512
                _7D = _7E; //#21512
                _7E = _; //#21512
            } //#21512
            $k[$j++] = 'p'; //#21512
            $k[$j++] = _78; //#21512
            $k[$j++] = $geti(_79, _7A, _7E); //#21512
            $_.prefixinset(); //#21512
            var _7G = $k[--$j]; //#21512
            $_[$k[--$j]] = _7G; //#21512
            if ($_.p == 1) { //#21517
                $k[$j++] = $_.sx; //#21514
                $k[$j++] = $_[$_.cset]; //#21514
                $_.enc(); //#21514
                $k[$j++] = $_.char1; //#21515
                $k[$j++] = $_[$_.setx]; //#21515
                $_.enc(); //#21515
                $_.i = $_.i + 1; //#21516
            } //#21516
            if ($_.p == 2) { //#21524
                $k[$j++] = $_.sx; //#21519
                $k[$j++] = $_[$_.cset]; //#21519
                $_.enc(); //#21519
                $k[$j++] = $_.char1; //#21520
                $k[$j++] = $_[$_.setx]; //#21520
                $_.enc(); //#21520
                $k[$j++] = $_.sx; //#21521
                $k[$j++] = $_[$_.cset]; //#21521
                $_.enc(); //#21521
                $k[$j++] = $_.char2; //#21522
                $k[$j++] = $_[$_.setx]; //#21522
                $_.enc(); //#21522
                $_.i = $_.i + 2; //#21523
            } //#21523
            if ($_.p == 3) { //#21533
                $k[$j++] = $_.sx; //#21526
                $k[$j++] = $_[$_.cset]; //#21526
                $_.enc(); //#21526
                $k[$j++] = $_.char1; //#21527
                $k[$j++] = $_[$_.setx]; //#21527
                $_.enc(); //#21527
                $k[$j++] = $_.sx; //#21528
                $k[$j++] = $_[$_.cset]; //#21528
                $_.enc(); //#21528
                $k[$j++] = $_.char2; //#21529
                $k[$j++] = $_[$_.setx]; //#21529
                $_.enc(); //#21529
                $k[$j++] = $_.sx; //#21530
                $k[$j++] = $_[$_.cset]; //#21530
                $_.enc(); //#21530
                $k[$j++] = $_.char3; //#21531
                $k[$j++] = $_[$_.setx]; //#21531
                $_.enc(); //#21531
                $_.i = $_.i + 3; //#21532
            } //#21532
            if ($_.p >= 4) { //#21538
                $k[$j++] = $_.sx; //#21535
                $k[$j++] = $_[$_.cset]; //#21535
                $_.enc(); //#21535
                $k[$j++] = $_.lkx; //#21536
                $k[$j++] = $_[$_.setx]; //#21536
                $_.enc(); //#21536
                $_.cset = $_.setx; //#21537
            } //#21537
            break; //#21540
        } //#21540
    } //#21540
    $_.encmsg = $geti($_.out, 0, $_.j); //#21543
    $_.padval = $get($_[$_.cset], $_.pad); //#21544
    $k[$j++] = 'sami'; //#21547
    if ($_.sam != -1) { //#21547
        $k[$j++] = $a([$get($_.seta, $_.pad), (((~~($_.sam / 10)) - 1) * 8) + (($_.sam % 10) - 1)]); //#21547
    } else { //#21547
        $k[$j++] = $a([]); //#21547
    } //#21547
    var _8L = $k[--$j]; //#21547
    $_[$k[--$j]] = _8L; //#21547
    $k[$j++] = Infinity; //#21548
    $aload($_.sami); //#21548
    $aload($_.encmsg); //#21548
    $_.encmsg = $a(); //#21548
    if (($_.mode == 2) || ($_.mode == 3)) { //#21607
        if ($_.encmsg.length > 84) { //#21555
            $k[$j++] = 'bwipp.maxicodeMode23TooLong#21554'; //#21554
            $k[$j++] = "The secondary message is too long"; //#21554
            bwipp_raiseerror(); //#21554
        } //#21554
        var _8U = $strcpy($s(4), "0000"); //#21558
        var _8X = $cvrs($s(4), ~~$_.mode, 2); //#21558
        $puti(_8U, 4 - _8X.length, _8X); //#21558
        $_.mdb = _8U; //#21558
        var _8Z = $strcpy($s(10), "0000000000"); //#21559
        var _8c = $cvrs($s(10), $cvi($_.ccode), 2); //#21559
        $puti(_8Z, 10 - _8c.length, _8c); //#21559
        $_.ccb = _8Z; //#21559
        var _8e = $strcpy($s(10), "0000000000"); //#21560
        var _8h = $cvrs($s(10), $cvi($_.scode), 2); //#21560
        $puti(_8e, 10 - _8h.length, _8h); //#21560
        $_.scb = _8e; //#21560
        $_.pcb = $strcpy($s(36), "000000000000000000000000000000000000"); //#21561
        if ($_.mode == 2) { //#21574
            var _8o = $cvrs($s(6), $_.pcode.length, 2); //#21564
            $puti($_.pcb, 6 - _8o.length, _8o); //#21564
            var _8s = $cvrs($s(30), $cvi($_.pcode), 2); //#21565
            $puti($_.pcb, 36 - _8s.length, _8s); //#21565
        } else { //#21574
            $k[$j++] = Infinity; //#21570
            var _8u = $strcpy($s(6), "      "); //#21569
            $k[$j++] = _8u; //#21569
            $k[$j++] = _8u; //#21569
            $k[$j++] = 0; //#21569
            if ($_.pcode.length > 6) { //#21569
                $k[$j++] = $geti($_.pcode, 0, 6); //#21569
            } else { //#21569
                $k[$j++] = $_.pcode; //#21569
            } //#21569
            var _8z = $k[--$j]; //#21569
            var _90 = $k[--$j]; //#21569
            $puti($k[--$j], _90, _8z); //#21569
            $forall($k[--$j], function() { //#21570
                var _95 = $get($_.seta, $k[--$j]); //#21570
                $k[$j++] = _95; //#21570
            }); //#21570
            $_.pccw = $a(); //#21570
            for (var _97 = 0; _97 <= 5; _97 += 1) { //#21575
                $_.i = _97; //#21573
                var _9D = $cvrs($s(6), $get($_.pccw, $_.i), 2); //#21574
                $puti($_.pcb, ((6 * $_.i) + 6) - _9D.length, _9D); //#21574
            } //#21574
        } //#21574
        $_.scm = $s(60); //#21579
        $puti($_.scm, 2, $_.mdb); //#21580
        $puti($_.scm, 38, $geti($_.pcb, 0, 4)); //#21581
        $puti($_.scm, 30, $geti($_.pcb, 4, 6)); //#21582
        $puti($_.scm, 24, $geti($_.pcb, 10, 6)); //#21583
        $puti($_.scm, 18, $geti($_.pcb, 16, 6)); //#21584
        $puti($_.scm, 12, $geti($_.pcb, 22, 6)); //#21585
        $puti($_.scm, 6, $geti($_.pcb, 28, 6)); //#21586
        $puti($_.scm, 0, $geti($_.pcb, 34, 2)); //#21587
        $puti($_.scm, 52, $geti($_.ccb, 0, 2)); //#21588
        $puti($_.scm, 42, $geti($_.ccb, 2, 6)); //#21589
        $puti($_.scm, 36, $geti($_.ccb, 8, 2)); //#21590
        $puti($_.scm, 54, $geti($_.scb, 0, 6)); //#21591
        $puti($_.scm, 48, $geti($_.scb, 6, 4)); //#21592
        $_.pri = $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]); //#21595
        for (var _9t = 0; _9t <= 59; _9t += 1) { //#21601
            $_.i = _9t; //#21597
            $_.ps = ~~($_.i / 6); //#21598
            $_.ep = (~~(Math.pow(2, 5 - ($_.i % 6)))) * ($get($_.scm, $_.i) - 48); //#21599
            $put($_.pri, $_.ps, $f($get($_.pri, $_.ps) + $_.ep)); //#21600
        } //#21600
        $k[$j++] = Infinity; //#21604
        for (var _A5 = 0, _A6 = 84; _A5 < _A6; _A5++) { //#21604
            $k[$j++] = $_.padval; //#21604
        } //#21604
        $_.sec = $a(); //#21604
        $puti($_.sec, 0, $_.encmsg); //#21605
    } //#21605
    if (((($_.mode == 4) || ($_.mode == 5)) || ($_.mode == 6)) || ($_.mode == -1)) { //#21628
        if ($_.mode == -1) { //#21615
            var _AH = ($_.encmsg.length <= 77) ? 5 : 4; //#21614
            $_.mode = _AH; //#21614
        } //#21614
        $k[$j++] = Infinity; //#21617
        var _AJ = ($_.mode == 5) ? 78 : 94; //#21617
        for (var _AK = 0, _AL = _AJ; _AK < _AL; _AK++) { //#21617
            $k[$j++] = $_.padval; //#21617
        } //#21617
        $_.cws = $a(); //#21617
        if ($_.encmsg.length > ($_.cws.length - 1)) { //#21620
            $k[$j++] = 'bwipp.maxicodeMode56TooLong#21619'; //#21619
            $k[$j++] = "The message is too long"; //#21619
            bwipp_raiseerror(); //#21619
        } //#21619
        $put($_.cws, 0, $_.mode); //#21621
        $puti($_.cws, 1, $_.encmsg); //#21622
        $_.pri = $geti($_.cws, 0, 10); //#21625
        $_.sec = $geti($_.cws, 10, $_.cws.length - 10); //#21626
    } //#21626
    $k[$j++] = Infinity; //#21631
    $k[$j++] = 1; //#21631
    for (var _AZ = 0, _Aa = 63; _AZ < _Aa; _AZ++) { //#21631
        var _Ab = $k[--$j]; //#21631
        var _Ac = _Ab * 2; //#21631
        $k[$j++] = _Ab; //#21631
        $k[$j++] = _Ac; //#21631
        if (_Ac >= 64) { //#21631
            var _Ad = $k[--$j]; //#21631
            $k[$j++] = _Ad ^ 67; //#21631
        } //#21631
    } //#21631
    $_.rsalog = $a(); //#21631
    $_.rslog = $a(64); //#21632
    for (var _Ag = 1; _Ag <= 63; _Ag += 1) { //#21633
        $put($_.rslog, $get($_.rsalog, _Ag), _Ag); //#21633
    } //#21633
    $_.rsprod = function() {
        var _Ak = $k[--$j]; //#21637
        var _Al = $k[--$j]; //#21637
        $k[$j++] = _Al; //#21641
        $k[$j++] = _Ak; //#21641
        if ((_Ak != 0) && (_Al != 0)) { //#21640
            var _Ao = $get($_.rslog, $k[--$j]); //#21638
            var _At = $get($_.rsalog, $f(_Ao + $get($_.rslog, $k[--$j])) % 63); //#21638
            $k[$j++] = _At; //#21638
        } else { //#21640
            $j -= 2; //#21640
            $k[$j++] = 0; //#21640
        } //#21640
    }; //#21640
    $_.rscodes = function() {
        $_.rsnum = $k[--$j]; //#21647
        $_.cwb = $k[--$j]; //#21648
        $k[$j++] = Infinity; //#21651
        $k[$j++] = 1; //#21651
        for (var _Ax = 0, _Ay = $_.rsnum; _Ax < _Ay; _Ax++) { //#21651
            $k[$j++] = 0; //#21651
        } //#21651
        $_.coeffs = $a(); //#21651
        for (var _B2 = 1, _B1 = $_.rsnum; _B2 <= _B1; _B2 += 1) { //#21660
            $_.i = _B2; //#21653
            $put($_.coeffs, $_.i, $get($_.coeffs, $_.i - 1)); //#21654
            for (var _B9 = $_.i - 1; _B9 >= 1; _B9 -= 1) { //#21658
                $_.j = _B9; //#21656
                $k[$j++] = $_.coeffs; //#21657
                $k[$j++] = $_.j; //#21657
                $k[$j++] = $get($_.coeffs, $_.j - 1); //#21657
                $k[$j++] = $get($_.coeffs, $_.j); //#21657
                $k[$j++] = $get($_.rsalog, $_.i); //#21657
                $_.rsprod(); //#21657
                var _BL = $k[--$j]; //#21657
                var _BM = $k[--$j]; //#21657
                var _BN = $k[--$j]; //#21657
                $put($k[--$j], _BN, $xo(_BM, _BL)); //#21657
            } //#21657
            $k[$j++] = $_.coeffs; //#21659
            $k[$j++] = 0; //#21659
            $k[$j++] = $get($_.coeffs, 0); //#21659
            $k[$j++] = $get($_.rsalog, $_.i); //#21659
            $_.rsprod(); //#21659
            var _BV = $k[--$j]; //#21659
            var _BW = $k[--$j]; //#21659
            $put($k[--$j], _BW, _BV); //#21659
        } //#21659
        $_.coeffs = $geti($_.coeffs, 0, $_.coeffs.length - 1); //#21661
        $k[$j++] = Infinity; //#21664
        for (var _Bc = 0, _Bd = $_.rsnum; _Bc < _Bd; _Bc++) { //#21664
            $k[$j++] = 0; //#21664
        } //#21664
        $_.ecb = $a(); //#21664
        for (var _Bh = 0, _Bg = $_.cwb.length - 1; _Bh <= _Bg; _Bh += 1) { //#21673
            $_.t = $xo($get($_.cwb, _Bh), $get($_.ecb, 0)); //#21666
            for (var _Bn = $_.ecb.length - 1; _Bn >= 0; _Bn -= 1) { //#21672
                $_.i = _Bn; //#21668
                $_.p = ($_.ecb.length - $_.i) - 1; //#21669
                $k[$j++] = $_.ecb; //#21670
                $k[$j++] = $_.p; //#21670
                $k[$j++] = $_.t; //#21670
                $k[$j++] = $get($_.coeffs, $_.i); //#21670
                $_.rsprod(); //#21670
                var _Bw = $k[--$j]; //#21670
                var _Bx = $k[--$j]; //#21670
                $put($k[--$j], _Bx, _Bw); //#21670
                if ($_.i > 0) { //#21671
                    $put($_.ecb, $_.p, $xo($get($_.ecb, $_.p + 1), $get($_.ecb, $_.p))); //#21671
                } //#21671
            } //#21671
        } //#21671
        $k[$j++] = $_.ecb; //#21675
    }; //#21675
    $k[$j++] = Infinity; //#21680
    for (var _CB = 0, _CA = $_.sec.length - 1; _CB <= _CA; _CB += 2) { //#21680
        $k[$j++] = $get($_.sec, _CB); //#21680
    } //#21680
    $_.seco = $a(); //#21680
    $k[$j++] = Infinity; //#21681
    for (var _CH = 1, _CG = $_.sec.length - 1; _CH <= _CG; _CH += 2) { //#21681
        $k[$j++] = $get($_.sec, _CH); //#21681
    } //#21681
    $_.sece = $a(); //#21681
    var _CM = ($_.sec.length == 84) ? 20 : 28; //#21684
    $_.scodes = _CM; //#21684
    $k[$j++] = 'secochk'; //#21685
    $k[$j++] = $_.seco; //#21685
    $k[$j++] = $_.scodes; //#21685
    $_.rscodes(); //#21685
    var _CP = $k[--$j]; //#21685
    $_[$k[--$j]] = _CP; //#21685
    $k[$j++] = 'secechk'; //#21686
    $k[$j++] = $_.sece; //#21686
    $k[$j++] = $_.scodes; //#21686
    $_.rscodes(); //#21686
    var _CT = $k[--$j]; //#21686
    $_[$k[--$j]] = _CT; //#21686
    $k[$j++] = Infinity; //#21689
    for (var _CX = 0, _CW = $_.scodes - 1; _CX <= _CW; _CX += 1) { //#21689
        $k[$j++] = $get($_.secochk, _CX); //#21689
        $k[$j++] = $get($_.secechk, _CX); //#21689
    } //#21689
    $_.secchk = $a(); //#21689
    $k[$j++] = Infinity; //#21696
    $aload($_.pri); //#21693
    $k[$j++] = $_.pri; //#21694
    $k[$j++] = 10; //#21694
    $_.rscodes(); //#21694
    $aload($k[--$j]); //#21694
    $aload($_.sec); //#21695
    $aload($_.secchk); //#21696
    $_.codewords = $a(); //#21696
    $k[$j++] = Infinity; //#21700
    for (var _Cj = 0, _Ck = 864; _Cj < _Ck; _Cj++) { //#21700
        $k[$j++] = 0; //#21700
    } //#21700
    $_.mods = $a(); //#21700
    for (var _Cm = 0; _Cm <= 143; _Cm += 1) { //#21705
        $_.i = _Cm; //#21702
        $k[$j++] = Infinity; //#21703
        var _Cr = $cvrs($s(6), $get($_.codewords, $_.i), 2); //#21703
        for (var _Cs = 0, _Ct = _Cr.length; _Cs < _Ct; _Cs++) { //#21703
            $k[$j++] = $get(_Cr, _Cs) - 48; //#21703
        } //#21703
        $_.cw = $a(); //#21703
        $puti($_.mods, (6 * $_.i) + (6 - $_.cw.length), $_.cw); //#21704
    } //#21704
    if (!bwipp_maxicode.__21755__) { //#21755
        $_ = Object.create($_); //#21755
        $_.modmap = $a([469, 529, 286, 316, 347, 346, 673, 672, 703, 702, 647, 676, 283, 282, 313, 312, 370, 610, 618, 379, 378, 409, 408, 439, 705, 704, 559, 589, 588, 619, 458, 518, 640, 701, 675, 674, 285, 284, 315, 314, 310, 340, 531, 289, 288, 319, 349, 348, 456, 486, 517, 516, 471, 470, 369, 368, 399, 398, 429, 428, 549, 548, 579, 578, 609, 608, 649, 648, 679, 678, 709, 708, 639, 638, 669, 668, 699, 698, 279, 278, 309, 308, 339, 338, 381, 380, 411, 410, 441, 440, 561, 560, 591, 590, 621, 620, 547, 546, 577, 576, 607, 606, 367, 366, 397, 396, 427, 426, 291, 290, 321, 320, 351, 350, 651, 650, 681, 680, 711, 710, 1, 0, 31, 30, 61, 60, 3, 2, 33, 32, 63, 62, 5, 4, 35, 34, 65, 64, 7, 6, 37, 36, 67, 66, 9, 8, 39, 38, 69, 68, 11, 10, 41, 40, 71, 70, 13, 12, 43, 42, 73, 72, 15, 14, 45, 44, 75, 74, 17, 16, 47, 46, 77, 76, 19, 18, 49, 48, 79, 78, 21, 20, 51, 50, 81, 80, 23, 22, 53, 52, 83, 82, 25, 24, 55, 54, 85, 84, 27, 26, 57, 56, 87, 86, 117, 116, 147, 146, 177, 176, 115, 114, 145, 144, 175, 174, 113, 112, 143, 142, 173, 172, 111, 110, 141, 140, 171, 170, 109, 108, 139, 138, 169, 168, 107, 106, 137, 136, 167, 166, 105, 104, 135, 134, 165, 164, 103, 102, 133, 132, 163, 162, 101, 100, 131, 130, 161, 160, 99, 98, 129, 128, 159, 158, 97, 96, 127, 126, 157, 156, 95, 94, 125, 124, 155, 154, 93, 92, 123, 122, 153, 152, 91, 90, 121, 120, 151, 150, 181, 180, 211, 210, 241, 240, 183, 182, 213, 212, 243, 242, 185, 184, 215, 214, 245, 244, 187, 186, 217, 216, 247, 246, 189, 188, 219, 218, 249, 248, 191, 190, 221, 220, 251, 250, 193, 192, 223, 222, 253, 252, 195, 194, 225, 224, 255, 254, 197, 196, 227, 226, 257, 256, 199, 198, 229, 228, 259, 258, 201, 200, 231, 230, 261, 260, 203, 202, 233, 232, 263, 262, 205, 204, 235, 234, 265, 264, 207, 206, 237, 236, 267, 266, 297, 296, 327, 326, 357, 356, 295, 294, 325, 324, 355, 354, 293, 292, 323, 322, 353, 352, 277, 276, 307, 306, 337, 336, 275, 274, 305, 304, 335, 334, 273, 272, 303, 302, 333, 332, 271, 270, 301, 300, 331, 330, 361, 360, 391, 390, 421, 420, 363, 362, 393, 392, 423, 422, 365, 364, 395, 394, 425, 424, 383, 382, 413, 412, 443, 442, 385, 384, 415, 414, 445, 444, 387, 386, 417, 416, 447, 446, 477, 476, 507, 506, 537, 536, 475, 474, 505, 504, 535, 534, 473, 472, 503, 502, 533, 532, 455, 454, 485, 484, 515, 514, 453, 452, 483, 482, 513, 512, 451, 450, 481, 480, 511, 510, 541, 540, 571, 570, 601, 600, 543, 542, 573, 572, 603, 602, 545, 544, 575, 574, 605, 604, 563, 562, 593, 592, 623, 622, 565, 564, 595, 594, 625, 624, 567, 566, 597, 596, 627, 626, 657, 656, 687, 686, 717, 716, 655, 654, 685, 684, 715, 714, 653, 652, 683, 682, 713, 712, 637, 636, 667, 666, 697, 696, 635, 634, 665, 664, 695, 694, 633, 632, 663, 662, 693, 692, 631, 630, 661, 660, 691, 690, 721, 720, 751, 750, 781, 780, 723, 722, 753, 752, 783, 782, 725, 724, 755, 754, 785, 784, 727, 726, 757, 756, 787, 786, 729, 728, 759, 758, 789, 788, 731, 730, 761, 760, 791, 790, 733, 732, 763, 762, 793, 792, 735, 734, 765, 764, 795, 794, 737, 736, 767, 766, 797, 796, 739, 738, 769, 768, 799, 798, 741, 740, 771, 770, 801, 800, 743, 742, 773, 772, 803, 802, 745, 744, 775, 774, 805, 804, 747, 746, 777, 776, 807, 806, 837, 836, 867, 866, 897, 896, 835, 834, 865, 864, 895, 894, 833, 832, 863, 862, 893, 892, 831, 830, 861, 860, 891, 890, 829, 828, 859, 858, 889, 888, 827, 826, 857, 856, 887, 886, 825, 824, 855, 854, 885, 884, 823, 822, 853, 852, 883, 882, 821, 820, 851, 850, 881, 880, 819, 818, 849, 848, 879, 878, 817, 816, 847, 846, 877, 876, 815, 814, 845, 844, 875, 874, 813, 812, 843, 842, 873, 872, 811, 810, 841, 840, 871, 870, 901, 900, 931, 930, 961, 960, 903, 902, 933, 932, 963, 962, 905, 904, 935, 934, 965, 964, 907, 906, 937, 936, 967, 966, 909, 908, 939, 938, 969, 968, 911, 910, 941, 940, 971, 970, 913, 912, 943, 942, 973, 972, 915, 914, 945, 944, 975, 974, 917, 916, 947, 946, 977, 976, 919, 918, 949, 948, 979, 978, 921, 920, 951, 950, 981, 980, 923, 922, 953, 952, 983, 982, 925, 924, 955, 954, 985, 984, 927, 926, 957, 956, 987, 986, 58, 89, 88, 118, 149, 148, 178, 209, 208, 238, 269, 268, 298, 329, 328, 358, 389, 388, 418, 449, 448, 478, 509, 508, 538, 569, 568, 598, 629, 628, 658, 689, 688, 718, 749, 748, 778, 809, 808, 838, 869, 868, 898, 929, 928, 958, 989, 988]); //#21754
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_maxicode.$ctx[id] = $_[id]); //#21754
        bwipp_maxicode.__21755__ = 1; //#21754
        $_ = Object.getPrototypeOf($_); //#21754
    } //#21754
    $_.pixs = $a(864); //#21758
    $_.j = 0; //#21759
    for (var _D5 = 0, _D4 = $_.mods.length - 1; _D5 <= _D4; _D5 += 1) { //#21766
        $_.i = _D5; //#21761
        if ($get($_.mods, $_.i) == 1) { //#21765
            $put($_.pixs, $_.j, $get($_.modmap, $_.i)); //#21763
            $_.j = $_.j + 1; //#21764
        } //#21764
    } //#21764
    $k[$j++] = Infinity; //#21767
    $aload($geti($_.pixs, 0, $_.j)); //#21767
    $k[$j++] = 28; //#21767
    $k[$j++] = 29; //#21767
    $k[$j++] = 280; //#21767
    $k[$j++] = 281; //#21767
    $k[$j++] = 311; //#21767
    $k[$j++] = 457; //#21767
    $k[$j++] = 488; //#21767
    $k[$j++] = 500; //#21767
    $k[$j++] = 530; //#21767
    $k[$j++] = 670; //#21767
    $k[$j++] = 700; //#21767
    $k[$j++] = 677; //#21767
    $k[$j++] = 707; //#21767
    $_.pixs = $a(); //#21767
    var _DL = new Map([
        ["ren", bwipp_renmaximatrix],
        ["pixs", $_.pixs],
        ["opt", $_.options]
    ]); //#21773
    $k[$j++] = _DL; //#21776
    if (!$_.dontdraw) { //#21776
        bwipp_renmaximatrix(); //#21776
    } //#21776
    $_ = Object.getPrototypeOf($_); //#21778
    $_ = Object.getPrototypeOf($_); //#21780
}

function bwipp_azteccode() {
    $_ = Object.create($_); //#21811
    $_.dontdraw = false; //#21814
    $_.format = "full"; //#21815
    $_.readerinit = false; //#21816
    $_.layers = -1; //#21817
    $_.eclevel = 23; //#21818
    $_.ecaddchars = 3; //#21819
    $_.raw = false; //#21820
    $_.parse = false; //#21821
    $_.parsefnc = false; //#21822
    $k[$j++] = $_; //#21824
    bwipp_processoptions(); //#21824
    $_.options = $k[--$j]; //#21824
    $_.barcode = $k[--$j]; //#21825
    bwipp_loadctx(bwipp_azteccode) //#21827
    if ($eq($_.barcode, "")) { //#21831
        $k[$j++] = 'bwipp.aztecEmptyData#21830'; //#21830
        $k[$j++] = "The data must not be empty"; //#21830
        bwipp_raiseerror(); //#21830
    } //#21830
    if (($_.eclevel < 5) || ($_.eclevel > 95)) { //#21835
        $k[$j++] = 'bwipp.aztecInvalidEClevel#21834'; //#21834
        $k[$j++] = "The EC percentage must be from 5 to 95"; //#21834
        bwipp_raiseerror(); //#21834
    } //#21834
    if ($_.ecaddchars < 3) { //#21839
        $k[$j++] = 'bwipp.aztecInvalidECaddChars#21838'; //#21838
        $k[$j++] = "The number of additional EC codewords must be 3 or more"; //#21838
        bwipp_raiseerror(); //#21838
    } //#21838
    if ($ne($_.format, "full") && ($ne($_.format, "compact") && $ne($_.format, "rune"))) { //#21843
        $k[$j++] = 'bwipp.aztecInvalidFormat#21842'; //#21842
        $k[$j++] = "The format must be either full, compact or rune"; //#21842
        bwipp_raiseerror(); //#21842
    } //#21842
    if ($eq($_.format, "full")) { //#21852
        if ($_.readerinit && (($_.layers < 1) || ($_.layers > 22))) { //#21848
            $k[$j++] = 'bwipp.aztecFullInitInvalidLayers#21847'; //#21847
            $k[$j++] = "Full-range symbols for reader programming must specify from 1 to 22 layers"; //#21847
            bwipp_raiseerror(); //#21847
        } //#21847
        if (($_.layers != -1) && (($_.layers < 1) || ($_.layers > 32))) { //#21851
            $k[$j++] = 'bwipp.aztecFullInvalidLayers#21850'; //#21850
            $k[$j++] = "Layers for full-range symbols must be from 1 to 32"; //#21850
            bwipp_raiseerror(); //#21850
        } //#21850
    } //#21850
    if ($eq($_.format, "compact")) { //#21864
        if ($_.readerinit) { //#21860
            if (($_.layers != -1) && ($_.layers != 1)) { //#21858
                $k[$j++] = 'bwipp.aztecCompactInitInvalidLayers#21857'; //#21857
                $k[$j++] = "Compact symbols for reader programming must have 1 layer"; //#21857
                bwipp_raiseerror(); //#21857
            } //#21857
            $_.layers = 1; //#21859
        } //#21859
        if (($_.layers != -1) && (($_.layers < 1) || ($_.layers > 4))) { //#21863
            $k[$j++] = 'bwipp.aztecCompactInvalidLayers#21862'; //#21862
            $k[$j++] = "Layers for compact symbols must be from 1 to 4"; //#21862
            bwipp_raiseerror(); //#21862
        } //#21862
    } //#21862
    if ($eq($_.format, "rune")) { //#21884
        if ($_.layers != -1) { //#21869
            $k[$j++] = 'bwipp.aztecRuneInvalidLayers#21868'; //#21868
            $k[$j++] = "It is not valid to specify layers for runes"; //#21868
            bwipp_raiseerror(); //#21868
        } //#21868
        if ($_.readerinit) { //#21872
            $k[$j++] = 'bwipp.aztecRuneReaderInit#21871'; //#21871
            $k[$j++] = "Reader initialisation is not compactible with Aztec Runes"; //#21871
            bwipp_raiseerror(); //#21871
        } //#21871
        if ($_.barcode.length == 0) { //#21875
            $k[$j++] = 'bwipp.aztecRuneNotNumeric#21874'; //#21874
            $k[$j++] = "Aztec runes must be numeric"; //#21874
            bwipp_raiseerror(); //#21874
        } //#21874
        $forall($_.barcode, function() { //#21880
            var _S = $k[--$j]; //#21877
            if ((_S < 48) || (_S > 57)) { //#21879
                $k[$j++] = 'bwipp.aztecRuneNotNumeric#21878'; //#21878
                $k[$j++] = "Aztec runes must be numeric"; //#21878
                bwipp_raiseerror(); //#21878
            } //#21878
        }); //#21878
        var _U = $cvi($_.barcode); //#21881
        if ((_U < 0) || (_U > 255)) { //#21883
            $k[$j++] = 'bwipp.aztecRuneInvalid#21882'; //#21882
            $k[$j++] = "Aztec runes must be 0 to 255"; //#21882
            bwipp_raiseerror(); //#21882
        } //#21882
    } //#21882
    $_.fn1 = -1; //#21887
    var _Y = new Map([
        ["parse", $_.parse],
        ["parsefnc", $_.parsefnc],
        ["eci", true],
        ["FNC1", $_.fn1]
    ]); //#21892
    $_.fncvals = _Y; //#21893
    $k[$j++] = 'msg'; //#21894
    $k[$j++] = $_.barcode; //#21894
    $k[$j++] = $_.fncvals; //#21894
    bwipp_parseinput(); //#21894
    var _b = $k[--$j]; //#21894
    $_[$k[--$j]] = _b; //#21894
    $_.msglen = $_.msg.length; //#21895
    if (!bwipp_azteccode.__21995__) { //#21995
        $_ = Object.create($_); //#21995
        $_.U = 0; //#21899
        $_.L = 1; //#21899
        $_.M = 2; //#21899
        $_.P = 3; //#21899
        $_.D = 4; //#21899
        $_.B = 5; //#21899
        $_.lu = -2; //#21902
        $_.ll = -3; //#21902
        $_.lm = -4; //#21902
        $_.lp = -5; //#21903
        $_.ld = -6; //#21903
        $_.su = -7; //#21903
        $_.sp = -8; //#21904
        $_.sb = -9; //#21904
        $_.fl = -10; //#21904
        $_.p2 = -11; //#21905
        $_.p3 = -12; //#21905
        $_.p4 = -13; //#21905
        $_.p5 = -14; //#21905
        $_.charmaps = $a([$a([$_.sp, $_.sp, $_.sp, $_.fl, $_.sp]), $a([32, 32, 32, 13, 32]), $a(["A", "a", 1, $_.p2, "0"]), $a(["B", "b", 2, $_.p3, "1"]), $a(["C", "c", 3, $_.p4, "2"]), $a(["D", "d", 4, $_.p5, "3"]), $a(["E", "e", 5, "!", "4"]), $a(["F", "f", 6, "\"", "5"]), $a(["G", "g", 7, "#", "6"]), $a(["H", "h", 8, "$", "7"]), $a(["I", "i", 9, "%", "8"]), $a(["J", "j", 10, "&", "9"]), $a(["K", "k", 11, "'", ","]), $a(["L", "l", 12, 40, "."]), $a(["M", "m", 13, 41, $_.lu]), $a(["N", "n", 27, "*", $_.su]), $a(["O", "o", 28, "+", -99]), $a(["P", "p", 29, ",", -99]), $a(["Q", "q", 30, "-", -99]), $a(["R", "r", 31, ".", -99]), $a(["S", "s", "@", "/", -99]), $a(["T", "t", 92, ":", -99]), $a(["U", "u", "^", ";", -99]), $a(["V", "v", "_", "<", -99]), $a(["W", "w", "`", "=", -99]), $a(["X", "x", "|", ">", -99]), $a(["Y", "y", "~", "?", -99]), $a(["Z", "z", 127, "[", -99]), $a([$_.ll, $_.su, $_.ll, "]", -99]), $a([$_.lm, $_.lm, $_.lu, "{", -99]), $a([$_.ld, $_.ld, $_.lp, "}", -99]), $a([$_.sb, $_.sb, $_.sb, $_.lu, -99])]); //#21942
        $_.charvals = $a([new Map, new Map, new Map, new Map, new Map]); //#21945
        for (var _1c = 0, _1b = $_.charmaps.length - 1; _1c <= _1b; _1c += 1) { //#21954
            $_.i = _1c; //#21947
            $_.encs = $get($_.charmaps, $_.i); //#21948
            for (var _1g = 0; _1g <= 4; _1g += 1) { //#21953
                $_.j = _1g; //#21950
                var _1j = $get($_.encs, $_.j); //#21951
                $k[$j++] = _1j; //#21951
                if ($eq($type(_1j), 'stringtype')) { //#21951
                    var _1m = $get($k[--$j], 0); //#21951
                    $k[$j++] = _1m; //#21951
                } //#21951
                $put($get($_.charvals, $_.j), $k[--$j], $_.i); //#21952
            } //#21952
        } //#21952
        var _1w = new Map([
            ["\x0d\x0a", $_.p2],
            [". ", $_.p3],
            [", ", $_.p4],
            [": ", $_.p5]
        ]); //#21961
        $_.pcomp = _1w; //#21962
        $_.e = 10000; //#21964
        var _21 = $a([4, 9, 9, 14, 0, 14]); //#21972
        $_.latlen = $a([$a([0, 5, 5, 10, 5, 10]), $a([9, 0, 5, 10, 5, 10]), $a([5, 5, 0, 5, 10, 10]), $a([5, 10, 10, 0, 10, 15]), _21, $a([0, 0, 0, 0, 0, 0])]); //#21974
        $_.latseq = $a([$a([$a([]), $a([$_.ll]), $a([$_.lm]), $a([$_.lm, $_.lp]), $a([$_.ld]), $a([$_.sb])]), $a([$a([$_.ld, $_.lu]), $a([]), $a([$_.lm]), $a([$_.lm, $_.lp]), $a([$_.ld]), $a([$_.sb])]), $a([$a([$_.lu]), $a([$_.ll]), $a([]), $a([$_.lp]), $a([$_.lu, $_.ld]), $a([$_.sb])]), $a([$a([$_.lu]), $a([$_.lu, $_.ll]), $a([$_.lu, $_.lm]), $a([]), $a([$_.lu, $_.ld]), $a([$_.lu, $_.sb])]), $a([$a([$_.lu]), $a([$_.lu, $_.ll]), $a([$_.lu, $_.lm]), $a([$_.lu, $_.lm, $_.lp]), $a([]), $a([$_.lu, $_.sb])]), $a([$a([$_.lu]), $a([$_.ll]), $a([$_.lm]), $a([]), $a([]), $a([])])]); //#21984
        $_.shftlen = $a([$a([$_.e, $_.e, $_.e, 5, $_.e]), $a([5, $_.e, $_.e, 5, $_.e]), $a([$_.e, $_.e, $_.e, 5, $_.e]), $a([$_.e, $_.e, $_.e, $_.e, $_.e]), $a([4, $_.e, $_.e, 4, $_.e])]); //#21993
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_azteccode.$ctx[id] = $_[id]); //#21993
        bwipp_azteccode.__21995__ = 1; //#21993
        $_ = Object.getPrototypeOf($_); //#21993
    } //#21993
    $_.msgbits = ""; //#21998
    if ($ne($_.format, "rune") && $_.raw) { //#21999
        $_.msgbits = $_.barcode; //#21999
    } //#21999
    if ($ne($_.format, "rune") && (!$_.raw)) { //#22290
        $_.charsize = function() {
            var _3v = $k[--$j]; //#22003
            $k[$j++] = _3v; //#22014
            if (_3v >= 0) { //#22012
                $j--; //#22005
                var _3y = $get($a([5, 5, 5, 5, 4, 8]), $k[--$j]); //#22005
                $k[$j++] = _3y; //#22005
            } else { //#22012
                var _3z = $k[--$j]; //#22007
                var _40 = $k[--$j]; //#22007
                $k[$j++] = _3z; //#22007
                $k[$j++] = _40; //#22007
                $j--; //#22007
                var _41 = $k[--$j]; //#22008
                $k[$j++] = _41; //#22013
                if (_41 == $_.fn1) { //#22012
                    $j--; //#22009
                    $k[$j++] = 8; //#22009
                } else { //#22012
                    var _44 = $f((-$k[--$j]) - 1000000); //#22011
                    $k[$j++] = _44; //#22011
                    if (_44 == 0) { //#22011
                        $j--; //#22011
                        $k[$j++] = 1; //#22011
                    } //#22011
                    var _45 = $k[--$j]; //#22012
                    $k[$j++] = (((~~(Math.log(_45) / Math.log(10))) + 1) * 4) + 8; //#22012
                } //#22012
            } //#22012
        }; //#22012
        $_.curlen = $a([0, $_.e, $_.e, $_.e, $_.e, $_.e]); //#22018
        $_.curseq = $a([$a([]), $a([]), $a([]), $a([]), $a([]), $a([])]); //#22019
        $_.backto = $_.U; //#22021
        $_.lastchar = ""; //#22022
        $forall($_.msg, function() { //#22174
            $_.char = $k[--$j]; //#22027
            for (;;) { //#22053
                $_.imp = false; //#22031
                var _4S = $a([$_.U, $_.L, $_.M, $_.P, $_.D, $_.B]); //#22032
                for (var _4T = 0, _4U = _4S.length; _4T < _4U; _4T++) { //#22051
                    $_.x = $get(_4S, _4T); //#22033
                    var _4c = $a([$_.U, $_.L, $_.M, $_.P, $_.D, $_.B]); //#22034
                    for (var _4d = 0, _4e = _4c.length; _4d < _4e; _4d++) { //#22050
                        $_.y = $get(_4c, _4d); //#22035
                        if (($_.x != $_.B) || ($_.y == $_.backto)) { //#22049
                            $_.cost = $f($get($_.curlen, $_.x) + $get($get($_.latlen, $_.x), $_.y)); //#22037
                            if ($_.cost < $get($_.curlen, $_.y)) { //#22048
                                $put($_.curlen, $_.y, $_.cost); //#22039
                                $k[$j++] = $_.curseq; //#22042
                                $k[$j++] = $_.y; //#22042
                                $k[$j++] = Infinity; //#22042
                                $aload($get($_.curseq, $_.x)); //#22041
                                $aload($get($get($_.latseq, $_.x), $_.y)); //#22042
                                var _59 = $a(); //#22042
                                var _5A = $k[--$j]; //#22043
                                $put($k[--$j], _5A, _59); //#22043
                                if ($_.y == $_.B) { //#22046
                                    $k[$j++] = 'backto'; //#22045
                                    if (($_.x == $_.P) || ($_.x == $_.D)) { //#22045
                                        $k[$j++] = $_.U; //#22045
                                    } else { //#22045
                                        $k[$j++] = $_.x; //#22045
                                    } //#22045
                                    var _5K = $k[--$j]; //#22045
                                    $_[$k[--$j]] = _5K; //#22045
                                } //#22045
                                $_.imp = true; //#22047
                            } //#22047
                        } //#22047
                    } //#22047
                } //#22047
                if (!$_.imp) { //#22052
                    break; //#22052
                } //#22052
            } //#22052
            $_.nxtlen = $a([$_.e, $_.e, $_.e, $_.e, $_.e, $_.e]); //#22056
            $_.nxtseq = $a(6); //#22057
            var _5b = $a([$_.U, $_.L, $_.M, $_.P, $_.D, $_.B]); //#22059
            for (var _5c = 0, _5d = _5b.length; _5c < _5d; _5c++) { //#22098
                $_.x = $get(_5b, _5c); //#22060
                for (;;) { //#22096
                    if ($_.char >= 0) { //#22068
                        if ($_.x != $_.B) { //#22066
                            var _5m = $get($get($_.charvals, $_.x), $_.char) !== undefined; //#22066
                            if (!_5m) { //#22066
                                break; //#22066
                            } //#22066
                        } //#22066
                    } else { //#22068
                        if ($_.x != $_.P) { //#22068
                            break; //#22068
                        } //#22068
                    } //#22068
                    $k[$j++] = 'cost'; //#22072
                    $k[$j++] = $get($_.curlen, $_.x); //#22072
                    $k[$j++] = $_.x; //#22072
                    $k[$j++] = $_.char; //#22072
                    $_.charsize(); //#22072
                    var _5u = $k[--$j]; //#22072
                    var _5v = $k[--$j]; //#22072
                    $_[$k[--$j]] = $f(_5v + _5u); //#22072
                    if ($_.cost < $get($_.nxtlen, $_.x)) { //#22076
                        $put($_.nxtlen, $_.x, $_.cost); //#22074
                        $k[$j++] = $_.nxtseq; //#22075
                        $k[$j++] = $_.x; //#22075
                        $k[$j++] = Infinity; //#22075
                        $aload($get($_.curseq, $_.x)); //#22075
                        $k[$j++] = $_.char; //#22075
                        var _6A = $a(); //#22075
                        var _6B = $k[--$j]; //#22075
                        $put($k[--$j], _6B, _6A); //#22075
                    } //#22075
                    if ($_.x == $_.B) { //#22079
                        break; //#22079
                    } //#22079
                    var _6K = $a([$_.U, $_.L, $_.M, $_.P, $_.D]); //#22080
                    for (var _6L = 0, _6M = _6K.length; _6L < _6M; _6L++) { //#22093
                        $_.y = $get(_6K, _6L); //#22081
                        if ($ne($_.x, $_.y)) { //#22092
                            $k[$j++] = 'cost'; //#22083
                            $k[$j++] = $f($get($_.curlen, $_.y) + $get($get($_.shftlen, $_.y), $_.x)); //#22083
                            $k[$j++] = $_.x; //#22083
                            $k[$j++] = $_.char; //#22083
                            $_.charsize(); //#22083
                            var _6a = $k[--$j]; //#22083
                            var _6b = $k[--$j]; //#22083
                            $_[$k[--$j]] = $f(_6b + _6a); //#22083
                            if ($_.cost < $get($_.nxtlen, $_.y)) { //#22091
                                $put($_.nxtlen, $_.y, $_.cost); //#22085
                                $k[$j++] = $_.nxtseq; //#22089
                                $k[$j++] = $_.y; //#22089
                                $k[$j++] = Infinity; //#22089
                                $aload($get($_.curseq, $_.y)); //#22087
                                var _6r = ($_.x == $_.U) ? $_.su : $_.sp; //#22088
                                $k[$j++] = _6r; //#22089
                                $k[$j++] = $_.char; //#22089
                                var _6t = $a(); //#22089
                                var _6u = $k[--$j]; //#22090
                                $put($k[--$j], _6u, _6t); //#22090
                            } //#22090
                        } //#22090
                    } //#22090
                    break; //#22095
                } //#22095
            } //#22095
            if ($ne($_.lastchar, "") && ($_.char >= 0)) { //#22159
                var _6y = $s(2); //#22102
                $put(_6y, 0, $_.lastchar); //#22102
                $put(_6y, 1, $_.char); //#22102
                $_.pchars = _6y; //#22102
                var _73 = $get($_.pcomp, $_.pchars) !== undefined; //#22103
                if (_73) { //#22158
                    var _79 = $a([$_.U, $_.L, $_.M, $_.P, $_.D]); //#22104
                    for (var _7A = 0, _7B = _79.length; _7A < _7B; _7A++) { //#22157
                        $_.i = $get(_79, _7A); //#22105
                        $_.inP = true; //#22106
                        if ($_.i == $_.M) { //#22111
                            if ($_.lastchar == 13) { //#22108
                                $_.inP = false; //#22108
                            } //#22108
                        } else { //#22111
                            if ($_.i == $_.D) { //#22112
                                if (($_.lastchar == 44) || ($_.lastchar == 46)) { //#22111
                                    $_.inP = false; //#22111
                                } //#22111
                            } //#22111
                        } //#22111
                        if ($_.inP && $lt($get($_.curlen, $_.i), $get($_.nxtlen, $_.i))) { //#22156
                            $_.curseqi = $get($_.curseq, $_.i); //#22115
                            $_.lastld = false; //#22116
                            $_.lastsp = false; //#22117
                            $_.lastidx = -1; //#22118
                            for (var _7V = $_.curseqi.length - 1; _7V >= 0; _7V -= 1) { //#22139
                                $_.idx = _7V; //#22120
                                $_.ch = $get($_.curseqi, $_.idx); //#22121
                                if ($_.lastidx == -1) { //#22136
                                    if ($eq($_.ch, $_.lastchar)) { //#22128
                                        $_.lastidx = $_.idx; //#22124
                                        if ($_.idx > 0) { //#22127
                                            if ($get($_.curseqi, $_.idx - 1) == $_.sp) { //#22126
                                                $_.lastsp = true; //#22126
                                            } //#22126
                                        } //#22126
                                    } //#22126
                                } else { //#22136
                                    if (($_.ch < 0) && ($_.ch >= $_.ld)) { //#22137
                                        if ($_.i == $_.P) { //#22134
                                            if ($_.ch == $_.ld) { //#22132
                                                $_.lastld = true; //#22132
                                            } //#22132
                                        } else { //#22134
                                            if ($_.ch != $_.lp) { //#22134
                                                $_.inP = $_.lastsp; //#22134
                                            } //#22134
                                        } //#22134
                                        break; //#22136
                                    } //#22136
                                } //#22136
                            } //#22136
                            if ($_.inP && ($_.lastidx >= 0)) { //#22155
                                $put($_.nxtlen, $_.i, $get($_.curlen, $_.i)); //#22141
                                if ($_.lastidx < ($_.curseqi.length - 1)) { //#22153
                                    if ($_.i == $_.P) { //#22150
                                        if ($_.lastld) { //#22144
                                            $put($_.nxtlen, $_.i, $f($get($_.nxtlen, $_.i) + 1)); //#22144
                                        } //#22144
                                        $k[$j++] = $_.nxtseq; //#22146
                                        $k[$j++] = $_.i; //#22146
                                        $k[$j++] = Infinity; //#22146
                                        $aload($_.curseqi); //#22146
                                        $r($_.curseqi.length - $_.lastidx, -1); //#22146
                                        $j--; //#22146
                                        $k[$j++] = $get($_.pcomp, $_.pchars); //#22146
                                        var _8H = $a(); //#22146
                                        var _8I = $k[--$j]; //#22146
                                        $put($k[--$j], _8I, _8H); //#22146
                                    } else { //#22150
                                        $k[$j++] = $_.nxtseq; //#22149
                                        $k[$j++] = $_.i; //#22149
                                        $k[$j++] = Infinity; //#22149
                                        $aload($_.curseqi); //#22149
                                        var _8N = $a(); //#22149
                                        var _8O = $k[--$j]; //#22149
                                        $put($k[--$j], _8O, _8N); //#22149
                                        $put($get($_.nxtseq, $_.i), $_.lastidx, $get($_.pcomp, $_.pchars)); //#22150
                                    } //#22150
                                } else { //#22153
                                    $k[$j++] = $_.nxtseq; //#22153
                                    $k[$j++] = $_.i; //#22153
                                    $k[$j++] = Infinity; //#22153
                                    $aload($_.curseqi); //#22153
                                    $j--; //#22153
                                    $k[$j++] = $get($_.pcomp, $_.pchars); //#22153
                                    var _8d = $a(); //#22153
                                    var _8e = $k[--$j]; //#22153
                                    $put($k[--$j], _8e, _8d); //#22153
                                } //#22153
                            } //#22153
                        } //#22153
                    } //#22153
                } //#22153
            } //#22153
            if ($ne($get($_.nxtseq, $_.B), null)) { //#22168
                $_.numbytes = 0; //#22163
                $forall($get($_.nxtseq, $_.B), function() { //#22166
                    if ($k[--$j] == $_.sb) { //#22165
                        $k[$j++] = 0; //#22165
                    } else { //#22165
                        $k[$j++] = $_.numbytes + 1; //#22165
                    } //#22165
                    $_.numbytes = $k[--$j]; //#22165
                }); //#22165
                if ($_.numbytes == 32) { //#22167
                    $put($_.nxtlen, $_.B, $f($get($_.nxtlen, $_.B) + 11)); //#22167
                } //#22167
            } //#22167
            $_.curlen = $_.nxtlen; //#22170
            $_.curseq = $_.nxtseq; //#22171
            $k[$j++] = 'lastchar'; //#22172
            if ($_.char >= 0) { //#22172
                $k[$j++] = $_.char; //#22172
            } else { //#22172
                $k[$j++] = ""; //#22172
            } //#22172
            var _90 = $k[--$j]; //#22172
            $_[$k[--$j]] = _90; //#22172
        }); //#22172
        $_.minseq = $_.e; //#22177
        var _99 = $a([$_.U, $_.L, $_.M, $_.P, $_.D, $_.B]); //#22178
        for (var _9A = 0, _9B = _99.length; _9A < _9B; _9A++) { //#22184
            $_.i = $get(_99, _9A); //#22179
            if ($get($_.curlen, $_.i) < $_.minseq) { //#22183
                $_.minseq = $get($_.curlen, $_.i); //#22181
                $_.seq = $get($_.curseq, $_.i); //#22182
            } //#22182
        } //#22182
        $_.tobin = function() {
            var _9O = $s($k[--$j]); //#22188
            $k[$j++] = _9O; //#22188
            for (var _9Q = 0, _9P = _9O.length - 1; _9Q <= _9P; _9Q += 1) { //#22188
                var _9R = $k[--$j]; //#22188
                $put(_9R, _9Q, 48); //#22188
                $k[$j++] = _9R; //#22188
            } //#22188
            var _9S = $k[--$j]; //#22189
            var _9V = $cvrs($s(_9S.length), $k[--$j], 2); //#22189
            $puti(_9S, _9S.length - _9V.length, _9V); //#22189
            $k[$j++] = _9S; //#22189
        }; //#22189
        $_.encu = function() {
            var _9a = $get($get($_.charvals, $_.U), $k[--$j]); //#22192
            $k[$j++] = _9a; //#22192
            $k[$j++] = 5; //#22192
            $_.tobin(); //#22192
        }; //#22192
        $_.encl = function() {
            var _9f = $get($get($_.charvals, $_.L), $k[--$j]); //#22193
            $k[$j++] = _9f; //#22193
            $k[$j++] = 5; //#22193
            $_.tobin(); //#22193
        }; //#22193
        $_.encm = function() {
            var _9k = $get($get($_.charvals, $_.M), $k[--$j]); //#22194
            $k[$j++] = _9k; //#22194
            $k[$j++] = 5; //#22194
            $_.tobin(); //#22194
        }; //#22194
        $_.encd = function() {
            var _9p = $get($get($_.charvals, $_.D), $k[--$j]); //#22195
            $k[$j++] = _9p; //#22195
            $k[$j++] = 4; //#22195
            $_.tobin(); //#22195
        }; //#22195
        $_.encp = function() {
            var _9q = $k[--$j]; //#22198
            $k[$j++] = _9q; //#22215
            if (_9q == $_.fn1) { //#22214
                $j--; //#22199
                $k[$j++] = "00000000"; //#22199
            } else { //#22214
                var _9s = $k[--$j]; //#22201
                $k[$j++] = _9s; //#22215
                if (_9s <= -1000000) { //#22214
                    var _9u = $f((-$k[--$j]) - 1000000); //#22202
                    $k[$j++] = _9u; //#22202
                    $k[$j++] = _9u; //#22202
                    if (_9u == 0) { //#22202
                        $j--; //#22202
                        $k[$j++] = 1; //#22202
                    } //#22202
                    var _9w = ~~(Math.log($k[--$j]) / Math.log(10)); //#22204
                    var _9x = $s(((_9w + 1) * 4) + 8); //#22204
                    $puti(_9x, 0, "00000"); //#22205
                    $k[$j++] = _9w; //#22206
                    $k[$j++] = _9x; //#22206
                    $k[$j++] = _9x; //#22206
                    $k[$j++] = _9w + 1; //#22206
                    $k[$j++] = 3; //#22206
                    $_.tobin(); //#22206
                    var _9y = $k[--$j]; //#22206
                    $puti($k[--$j], 5, _9y); //#22206
                    var _A0 = $k[--$j]; //#22207
                    var _A1 = $k[--$j]; //#22207
                    var _A2 = $k[--$j]; //#22207
                    $k[$j++] = _A0; //#22211
                    $k[$j++] = _A2; //#22211
                    for (var _A3 = _A1; _A3 >= 0; _A3 -= 1) { //#22211
                        var _A4 = $k[--$j]; //#22208
                        var _A5 = $k[--$j]; //#22209
                        $k[$j++] = _A5; //#22210
                        $k[$j++] = ~~(_A4 / 10); //#22210
                        $k[$j++] = _A5; //#22210
                        $k[$j++] = (_A3 * 4) + 8; //#22210
                        $k[$j++] = $f((_A4 % 10) + 2); //#22210
                        $k[$j++] = 4; //#22210
                        $_.tobin(); //#22210
                        var _A6 = $k[--$j]; //#22210
                        var _A7 = $k[--$j]; //#22210
                        $puti($k[--$j], _A7, _A6); //#22210
                    } //#22210
                    $j--; //#22212
                } else { //#22214
                    var _AD = $get($get($_.charvals, $_.P), $k[--$j]); //#22214
                    $k[$j++] = _AD; //#22214
                    $k[$j++] = 5; //#22214
                    $_.tobin(); //#22214
                } //#22214
            } //#22214
        }; //#22214
        $_.encfuncs = $a(['encu', 'encl', 'encm', 'encp', 'encd']); //#22218
        $_.addtomsgbits = function() {
            $_.v = $k[--$j]; //#22221
            $puti($_.msgbits, $_.j, $_.v); //#22222
            $_.j = $_.j + $_.v.length; //#22223
        }; //#22223
        $_.state = $_.U; //#22227
        $_.msgbits = $s($_.minseq); //#22228
        $_.i = 0; //#22229
        $_.j = 0; //#22229
        for (;;) { //#22288
            if ($_.i >= $_.seq.length) { //#22230
                break; //#22230
            } //#22230
            if ($_.state != $_.B) { //#22283
                $_.char = $get($_.seq, $_.i); //#22234
                $k[$j++] = $_.char; //#22237
                if ($_[$get($_.encfuncs, $_.state)]() === true) {
                    break;
                } //#22237
                $_.addtomsgbits(); //#22237
                $_.i = $_.i + 1; //#22238
                if (($_.char == $_.su) || ($_.char == $_.sp)) { //#22244
                    $k[$j++] = $get($_.seq, $_.i); //#22242
                    if ($_.char == $_.su) { //#22242
                        $_.encu(); //#22242
                    } else { //#22242
                        $_.encp(); //#22242
                    } //#22242
                    $_.addtomsgbits(); //#22242
                    $_.i = $_.i + 1; //#22243
                } //#22243
                if ($_.char == $_.lu) { //#22247
                    $_.state = $_.U; //#22247
                } //#22247
                if ($_.char == $_.ll) { //#22248
                    $_.state = $_.L; //#22248
                } //#22248
                if ($_.char == $_.lm) { //#22249
                    $_.state = $_.M; //#22249
                } //#22249
                if ($_.char == $_.lp) { //#22250
                    $_.state = $_.P; //#22250
                } //#22250
                if ($_.char == $_.ld) { //#22251
                    $_.state = $_.D; //#22251
                } //#22251
                if ($_.char == $_.sb) { //#22252
                    $_.state = $_.B; //#22252
                } //#22252
            } else { //#22283
                $_.numbytes = 0; //#22257
                for (;;) { //#22261
                    if (($_.i + $_.numbytes) >= $_.seq.length) { //#22258
                        break; //#22258
                    } //#22258
                    if ($get($_.seq, $_.i + $_.numbytes) < 0) { //#22259
                        break; //#22259
                    } //#22259
                    $_.numbytes = $_.numbytes + 1; //#22260
                } //#22260
                if ($_.numbytes <= 31) { //#22268
                    $k[$j++] = $_.numbytes; //#22265
                    $k[$j++] = 5; //#22265
                    $_.tobin(); //#22265
                    $_.addtomsgbits(); //#22265
                } else { //#22268
                    $k[$j++] = 0; //#22267
                    $k[$j++] = 5; //#22267
                    $_.tobin(); //#22267
                    $_.addtomsgbits(); //#22267
                    $k[$j++] = $_.numbytes - 31; //#22268
                    $k[$j++] = 11; //#22268
                    $_.tobin(); //#22268
                    $_.addtomsgbits(); //#22268
                } //#22268
                for (var _BF = 0, _BG = $_.numbytes; _BF < _BG; _BF++) { //#22275
                    $k[$j++] = $get($_.seq, $_.i); //#22273
                    $k[$j++] = 8; //#22273
                    $_.tobin(); //#22273
                    $_.addtomsgbits(); //#22273
                    $_.i = $_.i + 1; //#22274
                } //#22274
                if ($_.i < $_.seq.length) { //#22284
                    $_.char = $get($_.seq, $_.i); //#22279
                    $_.i = $_.i + 1; //#22280
                    if ($_.char == $_.lu) { //#22281
                        $_.state = $_.U; //#22281
                    } //#22281
                    if ($_.char == $_.ll) { //#22282
                        $_.state = $_.L; //#22282
                    } //#22282
                    if ($_.char == $_.lm) { //#22283
                        $_.state = $_.M; //#22283
                    } //#22283
                } //#22283
            } //#22283
        } //#22283
    } //#22283
    if (!bwipp_azteccode.__22309__) { //#22309
        $_ = Object.create($_); //#22309
        $_.metrics = $a([$a(["rune", 0, 0, 0, 6]), $a(["compact", 1, 1, 17, 6]), $a(["full", 1, 1, 21, 6]), $a(["compact", 2, 0, 40, 6]), $a(["full", 2, 1, 48, 6]), $a(["compact", 3, 0, 51, 8]), $a(["full", 3, 1, 60, 8]), $a(["compact", 4, 0, 76, 8]), $a(["full", 4, 1, 88, 8]), $a(["full", 5, 1, 120, 8]), $a(["full", 6, 1, 156, 8]), $a(["full", 7, 1, 196, 8]), $a(["full", 8, 1, 240, 8]), $a(["full", 9, 1, 230, 10]), $a(["full", 10, 1, 272, 10]), $a(["full", 11, 1, 316, 10]), $a(["full", 12, 1, 364, 10]), $a(["full", 13, 1, 416, 10]), $a(["full", 14, 1, 470, 10]), $a(["full", 15, 1, 528, 10]), $a(["full", 16, 1, 588, 10]), $a(["full", 17, 1, 652, 10]), $a(["full", 18, 1, 720, 10]), $a(["full", 19, 1, 790, 10]), $a(["full", 20, 1, 864, 10]), $a(["full", 21, 1, 940, 10]), $a(["full", 22, 1, 1020, 10]), $a(["full", 23, 0, 920, 12]), $a(["full", 24, 0, 992, 12]), $a(["full", 25, 0, 1066, 12]), $a(["full", 26, 0, 1144, 12]), $a(["full", 27, 0, 1224, 12]), $a(["full", 28, 0, 1306, 12]), $a(["full", 29, 0, 1392, 12]), $a(["full", 30, 0, 1480, 12]), $a(["full", 31, 0, 1570, 12]), $a(["full", 32, 0, 1664, 12])]); //#22308
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_azteccode.$ctx[id] = $_[id]); //#22308
        bwipp_azteccode.__22309__ = 1; //#22308
        $_ = Object.getPrototypeOf($_); //#22308
    } //#22308
    var _CD = $_.metrics; //#22311
    for (var _CE = 0, _CF = _CD.length; _CE < _CF; _CE++) { //#22327
        $_.m = $get(_CD, _CE); //#22312
        $_.frmt = $get($_.m, 0); //#22313
        $_.mlyr = $get($_.m, 1); //#22314
        $_.icap = $get($_.m, 2); //#22315
        $_.ncws = $get($_.m, 3); //#22316
        $_.bpcw = $get($_.m, 4); //#22317
        $_.numecw = ~~(Math.ceil($f((($_.ncws * $_.eclevel) / 100) + $_.ecaddchars))); //#22318
        if ($_.msgbits.length == 0) { //#22319
            $_.numecw = 0; //#22319
        } //#22319
        $_.numdcw = $f($_.ncws - $_.numecw); //#22320
        $_.okay = true; //#22321
        if ($ne($_.format, $_.frmt)) { //#22322
            $_.okay = false; //#22322
        } //#22322
        if ($_.readerinit && ($_.icap != 1)) { //#22323
            $_.okay = false; //#22323
        } //#22323
        if (($_.layers != -1) && ($_.layers != $_.mlyr)) { //#22324
            $_.okay = false; //#22324
        } //#22324
        if ((~~Math.ceil($_.msgbits.length / $_.bpcw)) > $_.numdcw) { //#22325
            $_.okay = false; //#22325
        } //#22325
        if ($_.okay) { //#22326
            break; //#22326
        } //#22326
    } //#22326
    if (!$_.okay) { //#22331
        $k[$j++] = 'bwipp.qrcodeNoValidSymbol#22330'; //#22330
        $k[$j++] = "Maximum length exceeded"; //#22330
        bwipp_raiseerror(); //#22330
    } //#22330
    $_.layers = $_.mlyr; //#22333
    $_.allzero = function() {
        var _Ck = $k[--$j]; //#22336
        $k[$j++] = $eq(_Ck, $geti("000000000000", 0, _Ck.length)); //#22336
    }; //#22336
    $_.allones = function() {
        var _Cm = $k[--$j]; //#22337
        $k[$j++] = $eq(_Cm, $geti("111111111111", 0, _Cm.length)); //#22337
    }; //#22337
    $_.cws = $a($_.ncws); //#22338
    $_.m = 0; //#22339
    $_.c = 0; //#22339
    for (;;) { //#22366
        if ($_.msgbits.length <= $_.m) { //#22341
            break; //#22341
        } //#22341
        if (($_.msgbits.length - $_.m) >= $_.bpcw) { //#22355
            $_.cwb = $geti($_.msgbits, $_.m, $f($_.bpcw - 1)); //#22343
            $_.cwf = $geti($_.msgbits, $f($f($_.m + $_.bpcw) - 1), 1); //#22344
            $k[$j++] = $_.cwb; //#22345
            $_.allzero(); //#22345
            if ($k[--$j]) { //#22345
                $_.cwf = "1"; //#22345
                $_.m = $_.m - 1; //#22345
            } //#22345
            $k[$j++] = $_.cwb; //#22346
            $_.allones(); //#22346
            if ($k[--$j]) { //#22346
                $_.cwf = "0"; //#22346
                $_.m = $_.m - 1; //#22346
            } //#22346
            var _D9 = $s(12); //#22348
            $puti(_D9, 0, $_.cwb); //#22348
            $puti(_D9, $f($_.bpcw - 1), $_.cwf); //#22349
            $_.cwb = $geti(_D9, 0, $_.bpcw); //#22351
        } else { //#22355
            $_.cwb = $geti($_.msgbits, $_.m, $_.msgbits.length - $_.m); //#22353
            var _DL = $strcpy($s(12), "111111111111"); //#22354
            $puti(_DL, 0, $_.cwb); //#22354
            $_.cwb = $geti(_DL, 0, $_.bpcw); //#22354
            $k[$j++] = $_.cwb; //#22355
            $_.allones(); //#22355
            if ($k[--$j]) { //#22355
                $puti($_.cwb, $_.cwb.length - 1, "0"); //#22355
            } //#22355
        } //#22355
        $_.cw = 0; //#22358
        for (var _DV = 0, _DU = $f($_.bpcw - 1); _DV <= _DU; _DV += 1) { //#22362
            $_.i = _DV; //#22360
            $_.cw = $f($_.cw + ((~~(Math.pow(2, $f($f($_.bpcw - $_.i) - 1)))) * $f($get($_.cwb, $_.i) - 48))); //#22361
        } //#22361
        $put($_.cws, $_.c, $_.cw); //#22363
        $_.m = $f($_.m + $_.bpcw); //#22364
        $_.c = $_.c + 1; //#22365
    } //#22365
    $_.cws = $geti($_.cws, 0, $_.c); //#22367
    var _Dm = $get($_.options, 'debugcws') !== undefined; //#22369
    if (_Dm) { //#22369
        $k[$j++] = 'bwipp.debugcws#22369'; //#22369
        $k[$j++] = $_.cws; //#22369
        bwipp_raiseerror(); //#22369
    } //#22369
    $_.rscodes = function() {
        $_.rspm = $k[--$j]; //#22374
        $_.rsgf = $k[--$j]; //#22375
        $_.rsnc = $k[--$j]; //#22376
        $_.rscws = $k[--$j]; //#22377
        $k[$j++] = Infinity; //#22380
        $k[$j++] = 1; //#22380
        for (var _Dt = 0, _Du = $f($_.rsgf - 1); _Dt < _Du; _Dt++) { //#22380
            var _Dv = $k[--$j]; //#22380
            var _Dw = _Dv * 2; //#22380
            $k[$j++] = _Dv; //#22380
            $k[$j++] = _Dw; //#22380
            if (_Dw >= $_.rsgf) { //#22380
                var _Dz = $k[--$j]; //#22380
                $k[$j++] = $xo(_Dz, $_.rspm); //#22380
            } //#22380
        } //#22380
        $_.rsalog = $a(); //#22380
        $_.rslog = $a($_.rsgf); //#22381
        for (var _E5 = 1, _E4 = $f($_.rsgf - 1); _E5 <= _E4; _E5 += 1) { //#22382
            $put($_.rslog, $get($_.rsalog, _E5), _E5); //#22382
        } //#22382
        $_.rsprod = function() {
            var _E9 = $k[--$j]; //#22386
            var _EA = $k[--$j]; //#22386
            $k[$j++] = _EA; //#22390
            $k[$j++] = _E9; //#22390
            if ((_E9 != 0) && (_EA != 0)) { //#22389
                var _ED = $get($_.rslog, $k[--$j]); //#22387
                var _EJ = $get($_.rsalog, $f(_ED + $get($_.rslog, $k[--$j])) % $f($_.rsgf - 1)); //#22387
                $k[$j++] = _EJ; //#22387
            } else { //#22389
                $j -= 2; //#22389
                $k[$j++] = 0; //#22389
            } //#22389
        }; //#22389
        $k[$j++] = Infinity; //#22394
        $k[$j++] = 1; //#22394
        for (var _EL = 0, _EM = $_.rsnc; _EL < _EM; _EL++) { //#22394
            $k[$j++] = 0; //#22394
        } //#22394
        $_.coeffs = $a(); //#22394
        for (var _EQ = 1, _EP = $_.rsnc; _EQ <= _EP; _EQ += 1) { //#22403
            $_.i = _EQ; //#22396
            $put($_.coeffs, $_.i, $get($_.coeffs, $_.i - 1)); //#22397
            for (var _EX = $_.i - 1; _EX >= 1; _EX -= 1) { //#22401
                $_.j = _EX; //#22399
                $k[$j++] = $_.coeffs; //#22400
                $k[$j++] = $_.j; //#22400
                $k[$j++] = $get($_.coeffs, $_.j - 1); //#22400
                $k[$j++] = $get($_.coeffs, $_.j); //#22400
                $k[$j++] = $get($_.rsalog, $_.i); //#22400
                $_.rsprod(); //#22400
                var _Ej = $k[--$j]; //#22400
                var _Ek = $k[--$j]; //#22400
                var _El = $k[--$j]; //#22400
                $put($k[--$j], _El, $xo(_Ek, _Ej)); //#22400
            } //#22400
            $k[$j++] = $_.coeffs; //#22402
            $k[$j++] = 0; //#22402
            $k[$j++] = $get($_.coeffs, 0); //#22402
            $k[$j++] = $get($_.rsalog, $_.i); //#22402
            $_.rsprod(); //#22402
            var _Et = $k[--$j]; //#22402
            var _Eu = $k[--$j]; //#22402
            $put($k[--$j], _Eu, _Et); //#22402
        } //#22402
        $_.nd = $_.rscws.length; //#22406
        $k[$j++] = Infinity; //#22407
        $forall($_.rscws); //#22407
        for (var _Ez = 0, _F0 = $_.rsnc; _Ez < _F0; _Ez++) { //#22407
            $k[$j++] = 0; //#22407
        } //#22407
        $k[$j++] = 0; //#22407
        $_.rscws = $a(); //#22407
        for (var _F4 = 0, _F3 = $_.nd - 1; _F4 <= _F3; _F4 += 1) { //#22414
            $_.k = $xo($get($_.rscws, _F4), $get($_.rscws, $_.nd)); //#22409
            for (var _FC = 0, _FB = $f($_.rsnc - 1); _FC <= _FB; _FC += 1) { //#22413
                $_.j = _FC; //#22411
                $k[$j++] = $_.rscws; //#22412
                $k[$j++] = $_.nd + $_.j; //#22412
                $k[$j++] = $get($_.rscws, ($_.nd + $_.j) + 1); //#22412
                $k[$j++] = $_.k; //#22412
                $k[$j++] = $get($_.coeffs, $f($f($_.rsnc - $_.j) - 1)); //#22412
                $_.rsprod(); //#22412
                var _FP = $k[--$j]; //#22412
                var _FQ = $k[--$j]; //#22412
                var _FR = $k[--$j]; //#22412
                $put($k[--$j], _FR, $xo(_FQ, _FP)); //#22412
            } //#22412
        } //#22412
        $k[$j++] = $geti($_.rscws, 0, $_.rscws.length - 1); //#22417
    }; //#22417
    if ($eq($_.format, "full")) { //#22432
        $_.mode = ($f($_.layers - 1) << 11) + ($_.cws.length - 1); //#22423
        if ($_.readerinit) { //#22424
            $_.mode = $_.mode | 1024; //#22424
        } //#22424
        $_.mode = $a([($_.mode & 61440) >>> 12, ($_.mode & 3840) >>> 8, ($_.mode & 240) >>> 4, $_.mode & 15]); //#22430
        $k[$j++] = 'mode'; //#22431
        $k[$j++] = $_.mode; //#22431
        $k[$j++] = 6; //#22431
        $k[$j++] = 16; //#22431
        $k[$j++] = 19; //#22431
        $_.rscodes(); //#22431
        var _Fh = $k[--$j]; //#22431
        $_[$k[--$j]] = _Fh; //#22431
    } //#22431
    if ($eq($_.format, "compact")) { //#22441
        $_.mode = ($f($_.layers - 1) << 6) + ($_.cws.length - 1); //#22434
        if ($_.readerinit) { //#22435
            $_.mode = $_.mode | 32; //#22435
        } //#22435
        $_.mode = $a([($_.mode & 240) >>> 4, $_.mode & 15]); //#22439
        $k[$j++] = 'mode'; //#22440
        $k[$j++] = $_.mode; //#22440
        $k[$j++] = 5; //#22440
        $k[$j++] = 16; //#22440
        $k[$j++] = 19; //#22440
        $_.rscodes(); //#22440
        var _Fs = $k[--$j]; //#22440
        $_[$k[--$j]] = _Fs; //#22440
    } //#22440
    if ($eq($_.format, "rune")) { //#22450
        $_.mode = $cvi($_.barcode); //#22443
        $_.mode = $a([($_.mode & 240) >>> 4, $_.mode & 15]); //#22447
        $k[$j++] = 'mode'; //#22448
        $k[$j++] = $_.mode; //#22448
        $k[$j++] = 5; //#22448
        $k[$j++] = 16; //#22448
        $k[$j++] = 19; //#22448
        $_.rscodes(); //#22448
        var _G0 = $k[--$j]; //#22448
        $_[$k[--$j]] = _G0; //#22448
        $k[$j++] = Infinity; //#22449
        var _G2 = $_.mode; //#22449
        for (var _G3 = 0, _G4 = _G2.length; _G3 < _G4; _G3++) { //#22449
            $k[$j++] = $get(_G2, _G3) ^ 10; //#22449
        } //#22449
        $_.mode = $a(); //#22449
    } //#22449
    $_.modebits = $s($_.mode.length * 4); //#22451
    for (var _GB = 0, _GA = $_.modebits.length - 1; _GB <= _GA; _GB += 1) { //#22452
        $puti($_.modebits, _GB, "0"); //#22452
    } //#22452
    for (var _GF = 0, _GE = $_.mode.length - 1; _GF <= _GE; _GF += 1) { //#22456
        $_.i = _GF; //#22454
        var _GL = $cvrs($s(4), $get($_.mode, $_.i), 2); //#22455
        $puti($_.modebits, (4 - _GL.length) + (4 * $_.i), _GL); //#22455
    } //#22455
    if (!bwipp_azteccode.__22470__) { //#22470
        $_ = Object.create($_); //#22470
        $_.rsparams = $a([$a([]), $a([]), $a([]), $a([]), $a([]), $a([]), $a([64, 67]), $a([]), $a([256, 301]), $a([]), $a([1024, 1033]), $a([]), $a([4096, 4201])]); //#22469
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_azteccode.$ctx[id] = $_[id]); //#22469
        bwipp_azteccode.__22470__ = 1; //#22469
        $_ = Object.getPrototypeOf($_); //#22469
    } //#22469
    $k[$j++] = 'cws'; //#22471
    $k[$j++] = $_.cws; //#22471
    $k[$j++] = $f($_.ncws - $_.cws.length); //#22471
    $forall($get($_.rsparams, $_.bpcw)); //#22471
    $_.rscodes(); //#22471
    var _Gi = $k[--$j]; //#22471
    $_[$k[--$j]] = _Gi; //#22471
    if ($eq($_.format, "full")) { //#22475
        $_.databits = $s($f((($_.layers * $_.layers) * 16) + ($_.layers * 112))); //#22473
    } else { //#22475
        $_.databits = $s($f((($_.layers * $_.layers) * 16) + ($_.layers * 88))); //#22475
    } //#22475
    for (var _Gv = 0, _Gu = $_.databits.length - 1; _Gv <= _Gu; _Gv += 1) { //#22477
        $puti($_.databits, _Gv, "0"); //#22477
    } //#22477
    for (var _Gz = 0, _Gy = $f($_.ncws - 1); _Gz <= _Gy; _Gz += 1) { //#22483
        $_.i = _Gz; //#22479
        var _H6 = $cvrs($s($_.bpcw), $get($_.cws, $_.i), 2); //#22480
        $puti($_.databits, $f(($f($f($_.bpcw - _H6.length) + ($_.bpcw * $_.i))) + ($f($_.databits.length - ($_.ncws * $_.bpcw)))), _H6); //#22482
    } //#22482
    $_.cmv = function() {
        var _HE = $k[--$j]; //#22486
        var _HF = $k[--$j]; //#22486
        $k[$j++] = $f(($f(_HF - (_HE * $_.size))) + $_.mid); //#22486
    }; //#22486
    $_.lmv = function() {
        $_.lbit = $k[--$j]; //#22490
        $_.llyr = $k[--$j]; //#22491
        $_.lwid = $f($_.fw + ($_.llyr * 4)); //#22492
        $_.ldir = ~~((~~($_.lbit / 2)) / $_.lwid); //#22493
        if ($_.ldir == 0) { //#22498
            $k[$j++] = $f(((-(~~($f($_.lwid - 1) / 2))) + 1) + ((~~($_.lbit / 2)) % $_.lwid)); //#22497
            $k[$j++] = $f(($f((~~(($_.fw - 1) / 2)) + ($_.llyr * 2))) + ($_.lbit % 2)); //#22497
            $_.cmv(); //#22497
        } //#22497
        if ($_.ldir == 1) { //#22503
            $k[$j++] = $f(($f((~~($_.fw / 2)) + ($_.llyr * 2))) + ($_.lbit % 2)); //#22502
            $k[$j++] = $f(((~~($f($_.lwid - 1) / 2)) - 1) - ((~~($_.lbit / 2)) % $_.lwid)); //#22502
            $_.cmv(); //#22502
        } //#22502
        if ($_.ldir == 2) { //#22508
            $k[$j++] = -($f(((-(~~($_.lwid / 2))) + 1) + ((~~($_.lbit / 2)) % $_.lwid))); //#22507
            $k[$j++] = -($f(($f((~~($_.fw / 2)) + ($_.llyr * 2))) + ($_.lbit % 2))); //#22507
            $_.cmv(); //#22507
        } //#22507
        if ($_.ldir == 3) { //#22513
            $k[$j++] = -($f(($f((~~(($_.fw - 1) / 2)) + ($_.llyr * 2))) + ($_.lbit % 2))); //#22512
            $k[$j++] = -($f(((~~($_.lwid / 2)) - 1) - ((~~($_.lbit / 2)) % $_.lwid))); //#22512
            $_.cmv(); //#22512
        } //#22512
    }; //#22512
    if ($eq($_.format, "full")) { //#22518
        $_.fw = 12; //#22518
    } else { //#22518
        $_.fw = 9; //#22518
    } //#22518
    $_.size = $f(($f($_.fw + ($_.layers * 4))) + 2); //#22519
    $k[$j++] = Infinity; //#22520
    for (var _Hu = 0, _Hv = $_.size * $_.size; _Hu < _Hv; _Hu++) { //#22520
        $k[$j++] = -1; //#22520
    } //#22520
    $_.pixs = $a(); //#22520
    $_.mid = $f(((~~($f($_.size - 1) / 2)) * $_.size) + (~~($f($_.size - 1) / 2))); //#22521
    $_.i = 0; //#22524
    for (var _I2 = 1, _I1 = $_.layers; _I2 <= _I1; _I2 += 1) { //#22532
        $_.layer = _I2; //#22526
        for (var _I6 = 0, _I5 = (($_.fw + ($_.layer * 4)) * 8) - 1; _I6 <= _I5; _I6 += 1) { //#22531
            $_.pos = _I6; //#22528
            $k[$j++] = $_.pixs; //#22529
            $k[$j++] = $_.layer; //#22529
            $k[$j++] = $_.pos; //#22529
            $_.lmv(); //#22529
            var _IE = $k[--$j]; //#22529
            $put($k[--$j], _IE, $get($_.databits, ($_.databits.length - $_.i) - 1) - 48); //#22529
            $_.i = $_.i + 1; //#22530
        } //#22530
    } //#22530
    if ($eq($_.format, "full")) { //#22559
        $_.fw = 13; //#22536
        $_.size = $f(($f(($f($_.fw + ($_.layers * 4))) + 2)) + ((~~($f(($f($_.layers + 10.5) / 7.5) - 1))) * 2)); //#22537
        $_.mid = ~~(($_.size * $_.size) / 2); //#22538
        $k[$j++] = Infinity; //#22539
        for (var _IP = 0, _IQ = $_.size * $_.size; _IP < _IQ; _IP++) { //#22539
            $k[$j++] = -2; //#22539
        } //#22539
        $_.npixs = $a(); //#22539
        for (var _IU = 0, _IT = ~~($_.size / 2); _IU <= _IT; _IU += 16) { //#22549
            $_.i = _IU; //#22541
            for (var _IX = 0, _IW = $f($_.size - 1); _IX <= _IW; _IX += 1) { //#22548
                $_.j = _IX; //#22543
                $k[$j++] = $_.npixs; //#22544
                $k[$j++] = (-(~~($_.size / 2))) + $_.j; //#22544
                $k[$j++] = $_.i; //#22544
                $_.cmv(); //#22544
                var _Ig = $k[--$j]; //#22544
                $puti($k[--$j], _Ig, $a([((((~~($_.size / 2)) + $_.j) + $_.i) + 1) % 2])); //#22544
                $k[$j++] = $_.npixs; //#22545
                $k[$j++] = (-(~~($_.size / 2))) + $_.j; //#22545
                $k[$j++] = -$_.i; //#22545
                $_.cmv(); //#22545
                var _Iq = $k[--$j]; //#22545
                $puti($k[--$j], _Iq, $a([((((~~($_.size / 2)) + $_.j) + $_.i) + 1) % 2])); //#22545
                $k[$j++] = $_.npixs; //#22546
                $k[$j++] = $_.i; //#22546
                $k[$j++] = (-(~~($_.size / 2))) + $_.j; //#22546
                $_.cmv(); //#22546
                var _J0 = $k[--$j]; //#22546
                $puti($k[--$j], _J0, $a([((((~~($_.size / 2)) + $_.j) + $_.i) + 1) % 2])); //#22546
                $k[$j++] = $_.npixs; //#22547
                $k[$j++] = -$_.i; //#22547
                $k[$j++] = (-(~~($_.size / 2))) + $_.j; //#22547
                $_.cmv(); //#22547
                var _JA = $k[--$j]; //#22547
                $puti($k[--$j], _JA, $a([((((~~($_.size / 2)) + $_.j) + $_.i) + 1) % 2])); //#22547
            } //#22547
        } //#22547
        $_.j = 0; //#22550
        for (var _JE = 0, _JD = $_.npixs.length - 1; _JE <= _JD; _JE += 1) { //#22557
            $_.i = _JE; //#22552
            if ($get($_.npixs, $_.i) == -2) { //#22556
                $put($_.npixs, $_.i, $get($_.pixs, $_.j)); //#22554
                $_.j = $_.j + 1; //#22555
            } //#22555
        } //#22555
        $_.pixs = $_.npixs; //#22558
    } //#22558
    $_.fw = ~~($_.fw / 2); //#22562
    for (var _JT = -$_.fw, _JS = $_.fw; _JT <= _JS; _JT += 1) { //#22571
        $_.i = _JT; //#22564
        for (var _JX = -$_.fw, _JW = $_.fw; _JX <= _JW; _JX += 1) { //#22570
            $_.j = _JX; //#22566
            $k[$j++] = $_.pixs; //#22567
            $k[$j++] = $_.i; //#22567
            $k[$j++] = $_.j; //#22567
            $_.cmv(); //#22567
            if (Math.abs($_.i) > Math.abs($_.j)) { //#22568
                $k[$j++] = Math.abs($_.i); //#22568
            } else { //#22568
                $k[$j++] = Math.abs($_.j); //#22568
            } //#22568
            var _Jf = $k[--$j]; //#22568
            var _Jg = $k[--$j]; //#22569
            $put($k[--$j], _Jg, $f(_Jf + 1) % 2); //#22569
        } //#22569
    } //#22569
    var _KI = $a([$a([-($_.fw + 1), $_.fw, 1]), $a([-($_.fw + 1), $_.fw + 1, 1]), $a([-$_.fw, $_.fw + 1, 1]), $a([$_.fw + 1, $_.fw + 1, 1]), $a([$_.fw + 1, $_.fw, 1]), $a([$_.fw + 1, -$_.fw, 1]), $a([$_.fw, $_.fw + 1, 0]), $a([$_.fw + 1, -($_.fw + 1), 0]), $a([$_.fw, -($_.fw + 1), 0]), $a([-$_.fw, -($_.fw + 1), 0]), $a([-($_.fw + 1), -($_.fw + 1), 0]), $a([-($_.fw + 1), -$_.fw, 0])]); //#22579
    for (var _KJ = 0, _KK = _KI.length; _KJ < _KK; _KJ++) { //#22580
        $k[$j++] = $_.pixs; //#22580
        $forall($get(_KI, _KJ)); //#22580
        var _KN = $k[--$j]; //#22580
        var _KO = $k[--$j]; //#22580
        var _KP = $k[--$j]; //#22580
        $k[$j++] = _KN; //#22580
        $k[$j++] = _KP; //#22580
        $k[$j++] = _KO; //#22580
        $_.cmv(); //#22580
        var _KQ = $k[--$j]; //#22580
        var _KR = $k[--$j]; //#22580
        $put($k[--$j], _KQ, _KR); //#22580
    } //#22580
    if (!bwipp_azteccode.__22596__) { //#22596
        $_ = Object.create($_); //#22596
        $_.modemapfull = $a([$a([-5, 7]), $a([-4, 7]), $a([-3, 7]), $a([-2, 7]), $a([-1, 7]), $a([1, 7]), $a([2, 7]), $a([3, 7]), $a([4, 7]), $a([5, 7]), $a([7, 5]), $a([7, 4]), $a([7, 3]), $a([7, 2]), $a([7, 1]), $a([7, -1]), $a([7, -2]), $a([7, -3]), $a([7, -4]), $a([7, -5]), $a([5, -7]), $a([4, -7]), $a([3, -7]), $a([2, -7]), $a([1, -7]), $a([-1, -7]), $a([-2, -7]), $a([-3, -7]), $a([-4, -7]), $a([-5, -7]), $a([-7, -5]), $a([-7, -4]), $a([-7, -3]), $a([-7, -2]), $a([-7, -1]), $a([-7, 1]), $a([-7, 2]), $a([-7, 3]), $a([-7, 4]), $a([-7, 5])]); //#22589
        $_.modemapcompact = $a([$a([-3, 5]), $a([-2, 5]), $a([-1, 5]), $a([0, 5]), $a([1, 5]), $a([2, 5]), $a([3, 5]), $a([5, 3]), $a([5, 2]), $a([5, 1]), $a([5, 0]), $a([5, -1]), $a([5, -2]), $a([5, -3]), $a([3, -5]), $a([2, -5]), $a([1, -5]), $a([0, -5]), $a([-1, -5]), $a([-2, -5]), $a([-3, -5]), $a([-5, -3]), $a([-5, -2]), $a([-5, -1]), $a([-5, 0]), $a([-5, 1]), $a([-5, 2]), $a([-5, 3])]); //#22595
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_azteccode.$ctx[id] = $_[id]); //#22595
        bwipp_azteccode.__22596__ = 1; //#22595
        $_ = Object.getPrototypeOf($_); //#22595
    } //#22595
    $k[$j++] = 'modemap'; //#22597
    if ($eq($_.format, "full")) { //#22597
        $k[$j++] = $_.modemapfull; //#22597
    } else { //#22597
        $k[$j++] = $_.modemapcompact; //#22597
    } //#22597
    var _Lf = $k[--$j]; //#22597
    $_[$k[--$j]] = _Lf; //#22597
    for (var _Lj = 0, _Li = $_.modemap.length - 1; _Lj <= _Li; _Lj += 1) { //#22601
        $_.i = _Lj; //#22599
        $k[$j++] = $_.pixs; //#22600
        $forall($get($_.modemap, $_.i)); //#22600
        $_.cmv(); //#22600
        var _Lr = $k[--$j]; //#22600
        $put($k[--$j], _Lr, $get($_.modebits, $_.i) - 48); //#22600
    } //#22600
    var _Lz = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $_.pixs],
        ["pixx", $_.size],
        ["pixy", $_.size],
        ["height", ($_.size * 2) / 72],
        ["width", ($_.size * 2) / 72],
        ["opt", $_.options]
    ]); //#22610
    $k[$j++] = _Lz; //#22613
    if (!$_.dontdraw) { //#22613
        bwipp_renmatrix(); //#22613
    } //#22613
    $_ = Object.getPrototypeOf($_); //#22615
    $_ = Object.getPrototypeOf($_); //#22617
}

function bwipp_azteccodecompact() {
    $_ = Object.create($_); //#22646
    $_.dontdraw = false; //#22649
    $k[$j++] = $_; //#22651
    bwipp_processoptions(); //#22651
    $_.options = $k[--$j]; //#22651
    $_.barcode = $k[--$j]; //#22652
    $put($_.options, "dontdraw", true); //#22655
    $put($_.options, "format", "compact"); //#22656
    $k[$j++] = 'args'; //#22658
    $k[$j++] = $_.barcode; //#22658
    $k[$j++] = $_.options; //#22658
    bwipp_azteccode(); //#22658
    var _6 = $k[--$j]; //#22658
    $_[$k[--$j]] = _6; //#22658
    $put($_.args, "opt", $_.options); //#22660
    $k[$j++] = $_.args; //#22663
    if (!$_.dontdraw) { //#22663
        bwipp_renmatrix(); //#22663
    } //#22663
    $_ = Object.getPrototypeOf($_); //#22665
}

function bwipp_aztecrune() {
    $_ = Object.create($_); //#22694
    $_.dontdraw = false; //#22697
    $k[$j++] = $_; //#22699
    bwipp_processoptions(); //#22699
    $_.options = $k[--$j]; //#22699
    $_.barcode = $k[--$j]; //#22700
    $put($_.options, "dontdraw", true); //#22703
    $put($_.options, "format", "rune"); //#22704
    $k[$j++] = 'args'; //#22706
    $k[$j++] = $_.barcode; //#22706
    $k[$j++] = $_.options; //#22706
    bwipp_azteccode(); //#22706
    var _6 = $k[--$j]; //#22706
    $_[$k[--$j]] = _6; //#22706
    $put($_.args, "opt", $_.options); //#22708
    $k[$j++] = $_.args; //#22711
    if (!$_.dontdraw) { //#22711
        bwipp_renmatrix(); //#22711
    } //#22711
    $_ = Object.getPrototypeOf($_); //#22713
}

function bwipp_codeone() {
    $_ = Object.create($_); //#22744
    $_.dontdraw = false; //#22747
    $_.version = "unset"; //#22748
    $_.parse = false; //#22749
    $_.parsefnc = false; //#22750
    $k[$j++] = $_; //#22752
    bwipp_processoptions(); //#22752
    $_.options = $k[--$j]; //#22752
    $_.barcode = $k[--$j]; //#22753
    var _2 = $a(["unset", "T-16", "T-32", "T-48", "S-10", "S-20", "S-30", "A", "B", "C", "D", "E", "F", "G", "H"]); //#22755
    $k[$j++] = false; //#22756
    for (var _3 = 0, _4 = _2.length; _3 < _4; _3++) { //#22756
        var _7 = $k[--$j]; //#22756
        $k[$j++] = _7 || $eq($get(_2, _3), $_.version); //#22756
    } //#22756
    if ($nt($k[--$j])) { //#22758
        $k[$j++] = 'bwipp.codeoneBadVersion#22757'; //#22757
        $k[$j++] = "version must be A to H, T-16, T-32, T-48, S-10, S-20 or S-30"; //#22757
        bwipp_raiseerror(); //#22757
    } //#22757
    bwipp_loadctx(bwipp_codeone) //#22760
    $_.stype = $eq($geti($_.version, 0, 1), "S"); //#22762
    if (!bwipp_codeone.__22920__) { //#22920
        $_ = Object.create($_); //#22920
        $_.stypevals = $a(["1", "1010", "1100100", "1111101000", "10011100010000", "11000011010100000", "11110100001001000000", "100110001001011010000000", "101111101011110000100000000", "111011100110101100101000000000", "1001010100000010111110010000000000", "1011101001000011101101110100000000000", "1110100011010100101001010001000000000000", "10010001100001001110011100101010000000000000", "10110101111001100010000011110100100000000000000", "11100011010111111010100100110001101000000000000000", "100011100001101111001001101111110000010000000000000000", "101100011010001010111100001011101100010100000000000000000"]); //#22784
        $_.stypemetrics = $a([$a(["S-10", 8, 11, 10, 4, 4, 1, 99, 99, 99]), $a(["S-20", 8, 21, 20, 8, 8, 1, 99, 99, 99]), $a(["S-30", 8, 31, 30, 12, 12, 1, 99, 99, 99])]); //#22792
        $_.nonstypemetrics = $a([$a(["A", 16, 18, 16, 10, 10, 1, 4, 99, 6]), $a(["B", 22, 22, 20, 19, 16, 1, 4, 99, 8]), $a(["C", 28, 32, 28, 44, 26, 1, 4, 22, 11]), $a(["D", 40, 42, 36, 91, 44, 1, 4, 16, 16]), $a(["E", 52, 54, 48, 182, 70, 1, 4, 22, 22]), $a(["F", 70, 76, 68, 370, 140, 2, 4, 22, 31]), $a(["G", 104, 98, 88, 732, 280, 4, 6, 21, 47]), $a(["H", 148, 134, 120, 1480, 560, 8, 6, 20, 69]), $a(["T-16", 16, 17, 16, 10, 10, 1, 99, 99, 99]), $a(["T-32", 16, 33, 32, 24, 16, 1, 99, 99, 99]), $a(["T-48", 16, 49, 48, 38, 22, 1, 99, 99, 99])]); //#22808
        $_.fnc1 = -1; //#22811
        $_.fnc3 = -2; //#22811
        $_.lC = -5; //#22812
        $_.lB = -6; //#22812
        $_.lX = -7; //#22812
        $_.lT = -8; //#22812
        $_.lD = -9; //#22812
        $_.unl = -10; //#22812
        $_.fnc2 = -11; //#22813
        $_.fnc4 = -12; //#22813
        $_.sft1 = -13; //#22813
        $_.sft2 = -14; //#22813
        $_.sft3 = -15; //#22813
        $_.eci = -16; //#22813
        $_.pad = -17; //#22813
        $_.fnc1lD = -18; //#22813
        $_.unlcw = 255; //#22814
        $k[$j++] = Infinity; //#22825
        for (var _S = 0; _S <= 128; _S += 1) { //#22817
            $k[$j++] = _S; //#22817
            $k[$j++] = _S + 1; //#22817
        } //#22817
        $k[$j++] = $_.pad; //#22822
        $k[$j++] = 129; //#22822
        for (var _U = 0; _U <= 99; _U += 1) { //#22822
            var _W = $cvrs($s(2), _U, 10); //#22820
            var _Y = $strcpy($s(2), "00"); //#22820
            $puti(_Y, 2 - _W.length, _W); //#22820
            $k[$j++] = _Y; //#22821
            $k[$j++] = _U + 130; //#22821
        } //#22821
        var _g = $a([$_.lC, $_.lB, $_.fnc1, $_.fnc2, $_.fnc3, $_.fnc4, $_.fnc1lD]); //#22823
        $k[$j++] = 229; //#22823
        for (var _h = 0, _i = _g.length; _h < _i; _h++) { //#22823
            var _l = $f($k[--$j] + 1); //#22823
            $k[$j++] = $get(_g, _h); //#22823
            $k[$j++] = _l; //#22823
            $k[$j++] = _l; //#22823
        } //#22823
        $j--; //#22823
        $k[$j++] = $_.lX; //#22825
        $k[$j++] = 238; //#22825
        $k[$j++] = $_.lT; //#22825
        $k[$j++] = 239; //#22825
        $_.Avals = $d(); //#22827
        $k[$j++] = Infinity; //#22829
        var _p = $_.Avals; //#22829
        for (var _u = _p.size, _t = _p.keys(), _s = 0; _s < _u; _s++) { //#22829
            var _q = _t.next().value; //#22829
            $k[$j++] = _q; //#22829
            $k[$j++] = _p.get(_q); //#22829
            $k[$j++] = Infinity; //#22829
            var _v = $k[--$j]; //#22829
            var _w = $k[--$j]; //#22829
            $k[$j++] = _v; //#22829
            $k[$j++] = _w; //#22829
            var _x = $a(); //#22829
            $k[$j++] = _x; //#22829
        } //#22829
        $_.Avals = $d(); //#22830
        $k[$j++] = Infinity; //#22838
        $k[$j++] = $_.sft1; //#22837
        $k[$j++] = 0; //#22837
        $k[$j++] = $_.sft2; //#22837
        $k[$j++] = 1; //#22837
        $k[$j++] = $_.sft3; //#22837
        $k[$j++] = 2; //#22837
        $k[$j++] = 32; //#22837
        $k[$j++] = 3; //#22837
        for (var _12 = 48; _12 <= 57; _12 += 1) { //#22837
            $k[$j++] = _12; //#22837
            $k[$j++] = _12 - 44; //#22837
        } //#22837
        for (var _13 = 65; _13 <= 90; _13 += 1) { //#22838
            $k[$j++] = _13; //#22838
            $k[$j++] = _13 - 51; //#22838
        } //#22838
        $_.CNvals = $d(); //#22839
        $k[$j++] = Infinity; //#22840
        for (var _15 = 0; _15 <= 31; _15 += 1) { //#22840
            $k[$j++] = _15; //#22840
            $k[$j++] = _15; //#22840
        } //#22840
        $_.C1vals = $d(); //#22840
        $k[$j++] = Infinity; //#22849
        for (var _17 = 33; _17 <= 47; _17 += 1) { //#22842
            $k[$j++] = _17; //#22842
            $k[$j++] = _17 - 33; //#22842
        } //#22842
        for (var _18 = 58; _18 <= 64; _18 += 1) { //#22843
            $k[$j++] = _18; //#22843
            $k[$j++] = _18 - 43; //#22843
        } //#22843
        for (var _19 = 91; _19 <= 95; _19 += 1) { //#22844
            $k[$j++] = _19; //#22844
            $k[$j++] = _19 - 69; //#22844
        } //#22844
        $k[$j++] = $_.fnc1; //#22849
        $k[$j++] = 27; //#22849
        $k[$j++] = $_.fnc2; //#22849
        $k[$j++] = 28; //#22849
        $k[$j++] = $_.fnc3; //#22849
        $k[$j++] = 29; //#22849
        $k[$j++] = $_.fnc4; //#22849
        $k[$j++] = 30; //#22849
        $k[$j++] = $_.pad; //#22849
        $k[$j++] = 31; //#22849
        $_.C2vals = $d(); //#22850
        $k[$j++] = Infinity; //#22851
        for (var _1G = 96; _1G <= 127; _1G += 1) { //#22851
            $k[$j++] = _1G; //#22851
            $k[$j++] = _1G - 96; //#22851
        } //#22851
        $_.C3vals = $d(); //#22851
        $k[$j++] = Infinity; //#22856
        var _1I = $_.CNvals; //#22853
        for (var _1N = _1I.size, _1M = _1I.keys(), _1L = 0; _1L < _1N; _1L++) { //#22853
            var _1J = _1M.next().value; //#22853
            $k[$j++] = _1J; //#22853
            $k[$j++] = _1I.get(_1J); //#22853
            $k[$j++] = Infinity; //#22853
            var _1O = $k[--$j]; //#22853
            var _1P = $k[--$j]; //#22853
            $k[$j++] = _1O; //#22853
            $k[$j++] = _1P; //#22853
            var _1Q = $a(); //#22853
            $k[$j++] = _1Q; //#22853
        } //#22853
        var _1R = $_.C1vals; //#22854
        for (var _1W = _1R.size, _1V = _1R.keys(), _1U = 0; _1U < _1W; _1U++) { //#22854
            var _1S = _1V.next().value; //#22854
            $k[$j++] = _1S; //#22854
            $k[$j++] = _1R.get(_1S); //#22854
            $k[$j++] = Infinity; //#22854
            var _1X = $k[--$j]; //#22854
            var _1Y = $k[--$j]; //#22854
            $k[$j++] = _1X; //#22854
            $k[$j++] = $get($_.CNvals, $_.sft1); //#22854
            $k[$j++] = _1Y; //#22854
            var _1c = $a(); //#22854
            $k[$j++] = _1c; //#22854
        } //#22854
        var _1d = $_.C2vals; //#22855
        for (var _1i = _1d.size, _1h = _1d.keys(), _1g = 0; _1g < _1i; _1g++) { //#22855
            var _1e = _1h.next().value; //#22855
            $k[$j++] = _1e; //#22855
            $k[$j++] = _1d.get(_1e); //#22855
            $k[$j++] = Infinity; //#22855
            var _1j = $k[--$j]; //#22855
            var _1k = $k[--$j]; //#22855
            $k[$j++] = _1j; //#22855
            $k[$j++] = $get($_.CNvals, $_.sft2); //#22855
            $k[$j++] = _1k; //#22855
            var _1o = $a(); //#22855
            $k[$j++] = _1o; //#22855
        } //#22855
        var _1p = $_.C3vals; //#22856
        for (var _1u = _1p.size, _1t = _1p.keys(), _1s = 0; _1s < _1u; _1s++) { //#22856
            var _1q = _1t.next().value; //#22856
            $k[$j++] = _1q; //#22856
            $k[$j++] = _1p.get(_1q); //#22856
            $k[$j++] = Infinity; //#22856
            var _1v = $k[--$j]; //#22856
            var _1w = $k[--$j]; //#22856
            $k[$j++] = _1v; //#22856
            $k[$j++] = $get($_.CNvals, $_.sft3); //#22856
            $k[$j++] = _1w; //#22856
            var _20 = $a(); //#22856
            $k[$j++] = _20; //#22856
        } //#22856
        $_.Cvals = $d(); //#22857
        $k[$j++] = Infinity; //#22865
        $k[$j++] = $_.sft1; //#22864
        $k[$j++] = 0; //#22864
        $k[$j++] = $_.sft2; //#22864
        $k[$j++] = 1; //#22864
        $k[$j++] = $_.sft3; //#22864
        $k[$j++] = 2; //#22864
        $k[$j++] = 32; //#22864
        $k[$j++] = 3; //#22864
        for (var _25 = 48; _25 <= 57; _25 += 1) { //#22864
            $k[$j++] = _25; //#22864
            $k[$j++] = _25 - 44; //#22864
        } //#22864
        for (var _26 = 97; _26 <= 122; _26 += 1) { //#22865
            $k[$j++] = _26; //#22865
            $k[$j++] = _26 - 83; //#22865
        } //#22865
        $_.TNvals = $d(); //#22866
        $k[$j++] = Infinity; //#22867
        for (var _28 = 0; _28 <= 31; _28 += 1) { //#22867
            $k[$j++] = _28; //#22867
            $k[$j++] = _28; //#22867
        } //#22867
        $_.T1vals = $d(); //#22867
        $k[$j++] = Infinity; //#22876
        for (var _2A = 33; _2A <= 47; _2A += 1) { //#22869
            $k[$j++] = _2A; //#22869
            $k[$j++] = _2A - 33; //#22869
        } //#22869
        for (var _2B = 58; _2B <= 64; _2B += 1) { //#22870
            $k[$j++] = _2B; //#22870
            $k[$j++] = _2B - 43; //#22870
        } //#22870
        for (var _2C = 91; _2C <= 95; _2C += 1) { //#22871
            $k[$j++] = _2C; //#22871
            $k[$j++] = _2C - 69; //#22871
        } //#22871
        $k[$j++] = $_.fnc1; //#22876
        $k[$j++] = 27; //#22876
        $k[$j++] = $_.fnc2; //#22876
        $k[$j++] = 28; //#22876
        $k[$j++] = $_.fnc3; //#22876
        $k[$j++] = 29; //#22876
        $k[$j++] = $_.fnc4; //#22876
        $k[$j++] = 30; //#22876
        $k[$j++] = $_.pad; //#22876
        $k[$j++] = 31; //#22876
        $_.T2vals = $d(); //#22877
        $k[$j++] = Infinity; //#22881
        $k[$j++] = 96; //#22880
        $k[$j++] = 0; //#22880
        for (var _2J = 65; _2J <= 90; _2J += 1) { //#22880
            $k[$j++] = _2J; //#22880
            $k[$j++] = _2J - 64; //#22880
        } //#22880
        for (var _2K = 123; _2K <= 127; _2K += 1) { //#22881
            $k[$j++] = _2K; //#22881
            $k[$j++] = _2K - 96; //#22881
        } //#22881
        $_.T3vals = $d(); //#22882
        $k[$j++] = Infinity; //#22887
        var _2M = $_.TNvals; //#22884
        for (var _2R = _2M.size, _2Q = _2M.keys(), _2P = 0; _2P < _2R; _2P++) { //#22884
            var _2N = _2Q.next().value; //#22884
            $k[$j++] = _2N; //#22884
            $k[$j++] = _2M.get(_2N); //#22884
            $k[$j++] = Infinity; //#22884
            var _2S = $k[--$j]; //#22884
            var _2T = $k[--$j]; //#22884
            $k[$j++] = _2S; //#22884
            $k[$j++] = _2T; //#22884
            var _2U = $a(); //#22884
            $k[$j++] = _2U; //#22884
        } //#22884
        var _2V = $_.T1vals; //#22885
        for (var _2a = _2V.size, _2Z = _2V.keys(), _2Y = 0; _2Y < _2a; _2Y++) { //#22885
            var _2W = _2Z.next().value; //#22885
            $k[$j++] = _2W; //#22885
            $k[$j++] = _2V.get(_2W); //#22885
            $k[$j++] = Infinity; //#22885
            var _2b = $k[--$j]; //#22885
            var _2c = $k[--$j]; //#22885
            $k[$j++] = _2b; //#22885
            $k[$j++] = $get($_.TNvals, $_.sft1); //#22885
            $k[$j++] = _2c; //#22885
            var _2g = $a(); //#22885
            $k[$j++] = _2g; //#22885
        } //#22885
        var _2h = $_.T2vals; //#22886
        for (var _2m = _2h.size, _2l = _2h.keys(), _2k = 0; _2k < _2m; _2k++) { //#22886
            var _2i = _2l.next().value; //#22886
            $k[$j++] = _2i; //#22886
            $k[$j++] = _2h.get(_2i); //#22886
            $k[$j++] = Infinity; //#22886
            var _2n = $k[--$j]; //#22886
            var _2o = $k[--$j]; //#22886
            $k[$j++] = _2n; //#22886
            $k[$j++] = $get($_.TNvals, $_.sft2); //#22886
            $k[$j++] = _2o; //#22886
            var _2s = $a(); //#22886
            $k[$j++] = _2s; //#22886
        } //#22886
        var _2t = $_.T3vals; //#22887
        for (var _2y = _2t.size, _2x = _2t.keys(), _2w = 0; _2w < _2y; _2w++) { //#22887
            var _2u = _2x.next().value; //#22887
            $k[$j++] = _2u; //#22887
            $k[$j++] = _2t.get(_2u); //#22887
            $k[$j++] = Infinity; //#22887
            var _2z = $k[--$j]; //#22887
            var _30 = $k[--$j]; //#22887
            $k[$j++] = _2z; //#22887
            $k[$j++] = $get($_.TNvals, $_.sft3); //#22887
            $k[$j++] = _30; //#22887
            var _34 = $a(); //#22887
            $k[$j++] = _34; //#22887
        } //#22887
        $_.Tvals = $d(); //#22888
        for (var _36 = 128; _36 <= 255; _36 += 1) { //#22896
            $_.i = _36; //#22892
            $k[$j++] = $_.Avals; //#22893
            $k[$j++] = $_.i; //#22893
            $k[$j++] = Infinity; //#22893
            $aload($get($_.Avals, $_.fnc4)); //#22893
            $aload($get($_.Avals, $_.i - 128)); //#22893
            var _3F = $a(); //#22893
            var _3G = $k[--$j]; //#22893
            $put($k[--$j], _3G, _3F); //#22893
            $k[$j++] = $_.Cvals; //#22894
            $k[$j++] = $_.i; //#22894
            $k[$j++] = Infinity; //#22894
            $aload($get($_.Cvals, $_.fnc4)); //#22894
            $aload($get($_.Cvals, $_.i - 128)); //#22894
            var _3Q = $a(); //#22894
            var _3R = $k[--$j]; //#22894
            $put($k[--$j], _3R, _3Q); //#22894
            $k[$j++] = $_.Tvals; //#22895
            $k[$j++] = $_.i; //#22895
            $k[$j++] = Infinity; //#22895
            $aload($get($_.Tvals, $_.fnc4)); //#22895
            $aload($get($_.Tvals, $_.i - 128)); //#22895
            var _3b = $a(); //#22895
            var _3c = $k[--$j]; //#22895
            $put($k[--$j], _3c, _3b); //#22895
        } //#22895
        $k[$j++] = Infinity; //#22904
        $k[$j++] = 13; //#22903
        $k[$j++] = 0; //#22903
        $k[$j++] = 42; //#22903
        $k[$j++] = 1; //#22903
        $k[$j++] = 62; //#22903
        $k[$j++] = 2; //#22903
        $k[$j++] = 32; //#22903
        $k[$j++] = 3; //#22903
        for (var _3e = 48; _3e <= 57; _3e += 1) { //#22903
            $k[$j++] = _3e; //#22903
            $k[$j++] = _3e - 44; //#22903
        } //#22903
        for (var _3f = 65; _3f <= 90; _3f += 1) { //#22904
            $k[$j++] = _3f; //#22904
            $k[$j++] = _3f - 51; //#22904
        } //#22904
        $_.Xvals = $d(); //#22905
        $k[$j++] = Infinity; //#22907
        var _3h = $_.Xvals; //#22907
        for (var _3m = _3h.size, _3l = _3h.keys(), _3k = 0; _3k < _3m; _3k++) { //#22907
            var _3i = _3l.next().value; //#22907
            $k[$j++] = _3i; //#22907
            $k[$j++] = _3h.get(_3i); //#22907
            $k[$j++] = Infinity; //#22907
            var _3n = $k[--$j]; //#22907
            var _3o = $k[--$j]; //#22907
            $k[$j++] = _3n; //#22907
            $k[$j++] = _3o; //#22907
            var _3p = $a(); //#22907
            $k[$j++] = _3p; //#22907
        } //#22907
        $_.Xvals = $d(); //#22908
        $k[$j++] = Infinity; //#22911
        for (var _3r = 0; _3r <= 255; _3r += 1) { //#22911
            $k[$j++] = _3r; //#22911
            $k[$j++] = _3r; //#22911
        } //#22911
        $_.Bvals = $d(); //#22912
        $k[$j++] = Infinity; //#22914
        var _3t = $_.Bvals; //#22914
        for (var _3y = _3t.size, _3x = _3t.keys(), _3w = 0; _3w < _3y; _3w++) { //#22914
            var _3u = _3x.next().value; //#22914
            $k[$j++] = _3u; //#22914
            $k[$j++] = _3t.get(_3u); //#22914
            $k[$j++] = Infinity; //#22914
            var _3z = $k[--$j]; //#22914
            var _40 = $k[--$j]; //#22914
            $k[$j++] = _3z; //#22914
            $k[$j++] = _40; //#22914
            var _41 = $a(); //#22914
            $k[$j++] = _41; //#22914
        } //#22914
        $_.Bvals = $d(); //#22915
        $_.encvals = $a([$_.Avals, $_.Cvals, $_.Tvals, $_.Xvals, -1, $_.Bvals]); //#22917
        $_.A = 0; //#22919
        $_.C = 1; //#22919
        $_.T = 2; //#22919
        $_.X = 3; //#22919
        $_.D = 4; //#22919
        $_.B = 5; //#22919
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_codeone.$ctx[id] = $_[id]); //#22919
        bwipp_codeone.__22920__ = 1; //#22919
        $_ = Object.getPrototypeOf($_); //#22919
    } //#22919
    if ($_.stype) { //#23418
        $forall($_.barcode, function() { //#22928
            var _4C = $k[--$j]; //#22925
            if ((_4C < 48) || (_4C > 57)) { //#22927
                $k[$j++] = 'bwipp.codeoneStypeNonDigit#22926'; //#22926
                $k[$j++] = "S-Type symbols can only contain digits"; //#22926
                bwipp_raiseerror(); //#22926
            } //#22926
        }); //#22926
        $_.barlen = $_.barcode.length; //#22930
        if ($_.barlen > 18) { //#22933
            $k[$j++] = 'bwipp.codeoneStypeTooLong#22932'; //#22932
            $k[$j++] = "Maximum length exceeded"; //#22932
            bwipp_raiseerror(); //#22932
        } //#22932
        $_.normalize = function() {
            $_.base = $k[--$j]; //#22936
            $_.num = $k[--$j]; //#22937
            for (var _4I = $_.num.length - 1; _4I >= 1; _4I -= 1) { //#22942
                $_.i = _4I; //#22939
                var _4J = $_.num; //#22940
                var _4K = $_.i; //#22940
                $put(_4J, _4K - 1, $f($get(_4J, _4K - 1) + (~~($get($_.num, $_.i) / $_.base)))); //#22940
                $put($_.num, $_.i, $get($_.num, $_.i) % $_.base); //#22941
            } //#22941
            for (;;) { //#22948
                if ($lt($get($_.num, 0), $_.base)) { //#22944
                    break; //#22944
                } //#22944
                $k[$j++] = Infinity; //#22945
                $k[$j++] = 0; //#22945
                $forall($_.num); //#22945
                $_.num = $a(); //#22945
                $put($_.num, 0, $f($get($_.num, 0) + (~~($get($_.num, 1) / $_.base)))); //#22946
                $put($_.num, 1, $get($_.num, 1) % $_.base); //#22947
            } //#22947
            $k[$j++] = Infinity; //#22950
            $_.i = true; //#22950
            var _4l = $_.num; //#22950
            for (var _4m = 0, _4n = _4l.length; _4m < _4n; _4m++) { //#22950
                var _4o = $get(_4l, _4m); //#22950
                $k[$j++] = _4o; //#22950
                if ((_4o == 0) && $_.i) { //#22950
                    $j--; //#22950
                } else { //#22950
                    $_.i = false; //#22950
                } //#22950
            } //#22950
            $_.num = $a(); //#22950
            if ($_.num.length == 0) { //#22951
                $_.num = $a([0]); //#22951
            } //#22951
            $k[$j++] = $_.num; //#22952
        }; //#22952
        $_.bigadd = function() {
            var _4u = $k[--$j]; //#22956
            var _4v = $k[--$j]; //#22956
            $_.offset = Math.abs(_4u.length - _4v.length); //#22957
            if (_4u.length < _4v.length) { //#22958
                var _ = _4u; //#22958
                _4u = _4v; //#22958
                _4v = _; //#22958
            } //#22958
            $_.a = _4u; //#22959
            $_.b = _4v; //#22959
            for (var _4y = 0, _4x = $_.b.length - 1; _4y <= _4x; _4y += 1) { //#22962
                var _4z = $_.a; //#22961
                var _50 = $_.offset; //#22961
                $put(_4z, _4y + _50, $f($get(_4z, _4y + _50) + $get($_.b, _4y))); //#22961
            } //#22961
            $k[$j++] = $_.a; //#22963
        }; //#22963
        $_.barlen = $_.barcode.length; //#22966
        $_.v = $a([1]); //#22969
        for (var _59 = 0, _58 = $_.barlen - 1; _59 <= _58; _59 += 1) { //#22974
            $_.i = _59; //#22971
            $k[$j++] = Infinity; //#22972
            $forall($get($_.stypevals, $_.i), function() { //#22972
                var _5D = $k[--$j]; //#22972
                $k[$j++] = $f(_5D - 48) * $f($get($_.barcode, ($_.barlen - $_.i) - 1) - 48); //#22972
            }); //#22972
            var _5I = $a(); //#22972
            $k[$j++] = _5I; //#22973
            $k[$j++] = $_.v; //#22973
            $_.bigadd(); //#22973
            $_.v = $k[--$j]; //#22973
        } //#22973
        $k[$j++] = 'v'; //#22975
        $k[$j++] = $_.v; //#22975
        $k[$j++] = 2; //#22975
        $_.normalize(); //#22975
        var _5M = $k[--$j]; //#22975
        $_[$k[--$j]] = _5M; //#22975
        $k[$j++] = Infinity; //#22978
        for (var _5P = 0, _5Q = (5 - ($_.v.length % 5)) % 5; _5P < _5Q; _5P++) { //#22978
            $k[$j++] = 0; //#22978
        } //#22978
        $aload($_.v); //#22978
        $_.v = $a(); //#22978
        $_.cws = $a(~~($_.v.length / 5)); //#22979
        for (var _5X = 0, _5W = $_.cws.length - 1; _5X <= _5W; _5X += 1) { //#22985
            $_.i = _5X; //#22981
            var _5a = $geti($_.v, $_.i * 5, 5); //#22982
            $k[$j++] = 0; //#22983
            for (var _5b = 0, _5c = _5a.length; _5b < _5c; _5b++) { //#22983
                var _5e = $k[--$j]; //#22983
                $k[$j++] = $f(_5e + $get(_5a, _5b)) * 2; //#22983
            } //#22983
            $put($_.cws, $_.i, ~~($k[--$j] / 2)); //#22984
        } //#22984
        $_.metrics = $_.stypemetrics; //#22987
    } else { //#23418
        var _5n = new Map([
            ["parse", $_.parse],
            ["parsefnc", $_.parsefnc],
            ["eci", true],
            ["FNC1", $_.fnc1],
            ["FNC3", $_.fnc3]
        ]); //#22997
        $_.fncvals = _5n; //#22998
        $k[$j++] = 'msg'; //#22999
        $k[$j++] = $_.barcode; //#22999
        $k[$j++] = $_.fncvals; //#22999
        bwipp_parseinput(); //#22999
        var _5q = $k[--$j]; //#22999
        $_[$k[--$j]] = _5q; //#22999
        $_.msglen = $_.msg.length; //#23000
        $_.eciesc = 92; //#23003
        var _5t = $_.msg; //#23004
        $k[$j++] = 'numecis'; //#23004
        $k[$j++] = 0; //#23004
        for (var _5u = 0, _5v = _5t.length; _5u < _5v; _5u++) { //#23004
            if ($get(_5t, _5u) <= -1000000) { //#23004
                var _5x = $k[--$j]; //#23004
                $k[$j++] = $f(_5x + 1); //#23004
            } //#23004
        } //#23004
        var _5y = $k[--$j]; //#23004
        $_[$k[--$j]] = _5y; //#23004
        if ($_.numecis > 0) { //#23031
            $_.msgtmp = $a($f(($f(($_.msg.length * 2) + ($_.numecis * 6))) + 2)); //#23006
            $put($_.msgtmp, 0, $_.pad); //#23007
            $put($_.msgtmp, 1, $_.eciesc); //#23008
            $_.j = 2; //#23009
            for (var _6A = 0, _69 = $_.msg.length - 1; _6A <= _69; _6A += 1) { //#23028
                var _6C = $get($_.msg, _6A); //#23011
                $k[$j++] = _6C; //#23027
                if (_6C <= -1000000) { //#23025
                    var _6G = $geti($cvrs($s(7), -$k[--$j], 10), 1, 6); //#23013
                    for (var _6H = 0, _6I = _6G.length; _6H < _6I; _6H++) { //#23013
                        $k[$j++] = $get(_6G, _6H); //#23013
                    } //#23013
                    $astore($a(6)); //#23013
                    $puti($_.msgtmp, $_.j + 1, $k[--$j]); //#23014
                    $put($_.msgtmp, $_.j, $_.eciesc); //#23015
                    $_.j = $_.j + 7; //#23016
                } else { //#23025
                    var _6S = $k[--$j]; //#23018
                    $k[$j++] = _6S; //#23026
                    if (_6S != $_.eciesc) { //#23025
                        $put($_.msgtmp, $_.j, $k[--$j]); //#23019
                        $_.j = $_.j + 1; //#23020
                    } else { //#23025
                        $j--; //#23022
                        $put($_.msgtmp, $_.j, $_.eciesc); //#23023
                        $put($_.msgtmp, $_.j + 1, $_.eciesc); //#23024
                        $_.j = $_.j + 2; //#23025
                    } //#23025
                } //#23025
            } //#23025
            $_.msg = $geti($_.msgtmp, 0, $_.j); //#23029
            $_.msglen = $_.msg.length; //#23030
        } //#23030
        $_.metrics = $_.nonstypemetrics; //#23033
        $_.fullcws = $a([]); //#23036
        var _6l = $_.metrics; //#23037
        for (var _6m = 0, _6n = _6l.length; _6m < _6n; _6m++) { //#23048
            $_.m = $get(_6l, _6m); //#23038
            $_.vers = $get($_.m, 0); //#23039
            $_.dcws = $get($_.m, 4); //#23040
            $_.okay = true; //#23041
            if ($eq($_.version, "unset")) { //#23045
                if ($_.vers.length != 1) { //#23043
                    $_.okay = false; //#23043
                } //#23043
            } else { //#23045
                if ($ne($_.version, $_.vers)) { //#23045
                    $_.okay = false; //#23045
                } //#23045
            } //#23045
            if ($_.okay) { //#23047
                $k[$j++] = Infinity; //#23047
                $aload($_.fullcws); //#23047
                $k[$j++] = $_.dcws; //#23047
                $_.fullcws = $a(); //#23047
            } //#23047
        } //#23047
        $k[$j++] = Infinity; //#23049
        for (var _71 = 0, _72 = 1480; _71 < _72; _71++) { //#23049
            $k[$j++] = 10000; //#23049
        } //#23049
        $_.numremcws = $a(); //#23049
        var _74 = $_.fullcws; //#23050
        for (var _75 = 0, _76 = _74.length; _75 < _76; _75++) { //#23050
            $put($_.numremcws, $f($get(_74, _75) - 1), 1); //#23050
        } //#23050
        for (var _79 = 1478; _79 >= 0; _79 -= 1) { //#23056
            $_.i = _79; //#23052
            if ($get($_.numremcws, $_.i) != 1) { //#23055
                $put($_.numremcws, $_.i, $f($get($_.numremcws, $_.i + 1) + 1)); //#23054
            } //#23054
        } //#23054
        $k[$j++] = Infinity; //#23058
        for (var _7J = 0, _7K = $_.msglen; _7J < _7K; _7J++) { //#23058
            $k[$j++] = 0; //#23058
        } //#23058
        $k[$j++] = 0; //#23058
        $_.numD = $a(); //#23058
        $k[$j++] = Infinity; //#23059
        for (var _7N = 0, _7O = $_.msglen; _7N < _7O; _7N++) { //#23059
            $k[$j++] = 0; //#23059
        } //#23059
        $k[$j++] = 9999; //#23059
        $_.nextXterm = $a(); //#23059
        $k[$j++] = Infinity; //#23060
        for (var _7R = 0, _7S = $_.msglen; _7R < _7S; _7R++) { //#23060
            $k[$j++] = 0; //#23060
        } //#23060
        $k[$j++] = 9999; //#23060
        $_.nextNonX = $a(); //#23060
        for (var _7V = $_.msglen - 1; _7V >= 0; _7V -= 1) { //#23077
            $_.i = _7V; //#23062
            $_.barchar = $get($_.msg, $_.i); //#23063
            if (($_.barchar >= 48) && ($_.barchar <= 57)) { //#23066
                $put($_.numD, $_.i, $f($get($_.numD, $_.i + 1) + 1)); //#23065
            } //#23065
            if ((($_.barchar == 13) || ($_.barchar == 42)) || ($_.barchar == 62)) { //#23070
                $put($_.nextXterm, $_.i, 0); //#23068
            } else { //#23070
                $put($_.nextXterm, $_.i, $f($get($_.nextXterm, $_.i + 1) + 1)); //#23070
            } //#23070
            var _7s = $get($_.Xvals, $_.barchar) !== undefined; //#23072
            if (!_7s) { //#23075
                $put($_.nextNonX, $_.i, 0); //#23073
            } else { //#23075
                $put($_.nextNonX, $_.i, $f($get($_.nextNonX, $_.i + 1) + 1)); //#23075
            } //#23075
        } //#23075
        $k[$j++] = Infinity; //#23078
        var _80 = $_.nextXterm; //#23078
        for (var _81 = 0, _82 = _80.length; _81 < _82; _81++) { //#23078
            var _83 = $get(_80, _81); //#23078
            $k[$j++] = _83; //#23078
            if (_83 > 10000) { //#23078
                $j--; //#23078
                $k[$j++] = 10000; //#23078
            } //#23078
        } //#23078
        $_.nextXterm = $a(); //#23078
        $k[$j++] = Infinity; //#23079
        var _85 = $_.nextNonX; //#23079
        for (var _86 = 0, _87 = _85.length; _86 < _87; _86++) { //#23079
            var _88 = $get(_85, _86); //#23079
            $k[$j++] = _88; //#23079
            if (_88 > 10000) { //#23079
                $j--; //#23079
                $k[$j++] = 10000; //#23079
            } //#23079
        } //#23079
        $_.nextNonX = $a(); //#23079
        $_.isD = function() {
            $k[$j++] = ($_.char >= 48) && ($_.char <= 57); //#23081
        }; //#23081
        $_.isC = function() {
            var _8E = $get($_.CNvals, $_.char) !== undefined; //#23082
            $k[$j++] = _8E; //#23082
        }; //#23082
        $_.isT = function() {
            var _8H = $get($_.TNvals, $_.char) !== undefined; //#23083
            $k[$j++] = _8H; //#23083
        }; //#23083
        $_.isX = function() {
            var _8K = $get($_.Xvals, $_.char) !== undefined; //#23084
            $k[$j++] = _8K; //#23084
        }; //#23084
        $_.isEA = function() {
            $k[$j++] = $_.char > 127; //#23085
        }; //#23085
        $_.isFN = function() {
            $k[$j++] = $_.char < 0; //#23086
        }; //#23086
        $_.XtermFirst = function() {
            var _8N = $k[--$j]; //#23087
            $k[$j++] = $lt($get($_.nextXterm, _8N), $get($_.nextNonX, _8N)); //#23087
        }; //#23087
        $_.lookup = function() {
            $_.ac = 1; //#23090
            $_.cc = 2; //#23090
            $_.tc = 2; //#23090
            $_.xc = 2; //#23090
            $_.bc = 3; //#23090
            if ($_.mode == $_.A) { //#23091
                $_.ac = 0; //#23091
                $_.cc = 1; //#23091
                $_.tc = 1; //#23091
                $_.xc = 1; //#23091
                $_.bc = 2; //#23091
            } //#23091
            if ($_.mode == $_.C) { //#23092
                $_.cc = 0; //#23092
            } //#23092
            if ($_.mode == $_.T) { //#23093
                $_.tc = 0; //#23093
            } //#23093
            if ($_.mode == $_.X) { //#23094
                $_.xc = 0; //#23094
            } //#23094
            if ($_.mode == $_.B) { //#23095
                $_.bc = 0; //#23095
            } //#23095
            for (var _8c = 0, _8d = 1; _8c < _8d; _8c++) { //#23123
                $_.k = 0; //#23097
                for (;;) { //#23122
                    if (($_.i + $_.k) == $_.msglen) { //#23104
                        var _8l = $a([$_.ac, $_.cc, $_.tc, $_.xc]); //#23099
                        $k[$j++] = true; //#23099
                        for (var _8m = 0, _8n = _8l.length; _8m < _8n; _8m++) { //#23099
                            var _8q = $k[--$j]; //#23099
                            $k[$j++] = _8q && ($_.bc <= Math.ceil($get(_8l, _8m))); //#23099
                        } //#23099
                        if ($k[--$j]) { //#23099
                            $k[$j++] = $_.B; //#23099
                            break; //#23099
                        } //#23099
                        var _8x = $a([$_.cc, $_.tc, $_.xc, $_.bc]); //#23100
                        $k[$j++] = true; //#23100
                        for (var _8y = 0, _8z = _8x.length; _8y < _8z; _8y++) { //#23100
                            var _92 = $k[--$j]; //#23100
                            $k[$j++] = _92 && ($_.ac <= Math.ceil($get(_8x, _8y))); //#23100
                        } //#23100
                        if ($k[--$j]) { //#23100
                            $k[$j++] = $_.A; //#23100
                            break; //#23100
                        } //#23100
                        var _97 = $a([$_.tc, $_.xc]); //#23101
                        $k[$j++] = true; //#23101
                        for (var _98 = 0, _99 = _97.length; _98 < _99; _98++) { //#23101
                            var _9C = $k[--$j]; //#23101
                            $k[$j++] = _9C && (Math.ceil($_.cc) <= Math.ceil($get(_97, _98))); //#23101
                        } //#23101
                        if ($k[--$j]) { //#23101
                            $k[$j++] = $_.C; //#23101
                            break; //#23101
                        } //#23101
                        var _9G = $a([$_.xc]); //#23102
                        $k[$j++] = true; //#23102
                        for (var _9H = 0, _9I = _9G.length; _9H < _9I; _9H++) { //#23102
                            var _9L = $k[--$j]; //#23102
                            $k[$j++] = _9L && (Math.ceil($_.tc) <= Math.ceil($get(_9G, _9H))); //#23102
                        } //#23102
                        if ($k[--$j]) { //#23102
                            $k[$j++] = $_.T; //#23102
                            break; //#23102
                        } //#23102
                        $k[$j++] = $_.X; //#23103
                        break; //#23103
                    } //#23103
                    $_.char = $get($_.msg, $_.i + $_.k); //#23105
                    $k[$j++] = 'ac'; //#23106
                    $k[$j++] = $_.ac; //#23106
                    $_.isD(); //#23106
                    if ($k[--$j]) { //#23106
                        var _9V = $k[--$j]; //#23106
                        $k[$j++] = $f(_9V + (1 / 2)); //#23106
                    } else { //#23106
                        $_.isEA(); //#23106
                        if ($k[--$j]) { //#23106
                            var _9X = $k[--$j]; //#23106
                            $k[$j++] = Math.ceil(_9X) + 2; //#23106
                        } else { //#23106
                            var _9Y = $k[--$j]; //#23106
                            $k[$j++] = Math.ceil(_9Y) + 1; //#23106
                        } //#23106
                    } //#23106
                    var _9Z = $k[--$j]; //#23106
                    $_[$k[--$j]] = _9Z; //#23106
                    $k[$j++] = 'cc'; //#23107
                    $k[$j++] = $_.cc; //#23107
                    $_.isC(); //#23107
                    if ($k[--$j]) { //#23107
                        var _9d = $k[--$j]; //#23107
                        $k[$j++] = $f(_9d + 0.6666667); //#23107
                    } else { //#23107
                        $_.isEA(); //#23107
                        if ($k[--$j]) { //#23107
                            var _9f = $k[--$j]; //#23107
                            $k[$j++] = $f(_9f + 2.6666667); //#23107
                        } else { //#23107
                            var _9g = $k[--$j]; //#23107
                            $k[$j++] = $f(_9g + 1.3333334); //#23107
                        } //#23107
                    } //#23107
                    var _9h = $k[--$j]; //#23107
                    $_[$k[--$j]] = _9h; //#23107
                    $k[$j++] = 'tc'; //#23108
                    $k[$j++] = $_.tc; //#23108
                    $_.isT(); //#23108
                    if ($k[--$j]) { //#23108
                        var _9l = $k[--$j]; //#23108
                        $k[$j++] = $f(_9l + 0.6666667); //#23108
                    } else { //#23108
                        $_.isEA(); //#23108
                        if ($k[--$j]) { //#23108
                            var _9n = $k[--$j]; //#23108
                            $k[$j++] = $f(_9n + 2.6666667); //#23108
                        } else { //#23108
                            var _9o = $k[--$j]; //#23108
                            $k[$j++] = $f(_9o + 1.3333334); //#23108
                        } //#23108
                    } //#23108
                    var _9p = $k[--$j]; //#23108
                    $_[$k[--$j]] = _9p; //#23108
                    $k[$j++] = 'xc'; //#23109
                    $k[$j++] = $_.xc; //#23109
                    $_.isX(); //#23109
                    if ($k[--$j]) { //#23109
                        var _9t = $k[--$j]; //#23109
                        $k[$j++] = $f(_9t + 0.6666667); //#23109
                    } else { //#23109
                        $_.isEA(); //#23109
                        if ($k[--$j]) { //#23109
                            var _9v = $k[--$j]; //#23109
                            $k[$j++] = $f(_9v + 4.3333334); //#23109
                        } else { //#23109
                            var _9w = $k[--$j]; //#23109
                            $k[$j++] = $f(_9w + 3.3333334); //#23109
                        } //#23109
                    } //#23109
                    var _9x = $k[--$j]; //#23109
                    $_[$k[--$j]] = _9x; //#23109
                    $k[$j++] = 'bc'; //#23110
                    $k[$j++] = $_.bc; //#23110
                    $_.isFN(); //#23110
                    if ($k[--$j]) { //#23110
                        var _A1 = $k[--$j]; //#23110
                        $k[$j++] = $f(_A1 + 3); //#23110
                    } else { //#23110
                        var _A2 = $k[--$j]; //#23110
                        $k[$j++] = $f(_A2 + 1); //#23110
                    } //#23110
                    var _A3 = $k[--$j]; //#23110
                    $_[$k[--$j]] = _A3; //#23110
                    if ($_.k >= 3) { //#23120
                        var _AA = $a([$_.ac, $_.cc, $_.tc, $_.xc]); //#23112
                        $k[$j++] = true; //#23112
                        for (var _AB = 0, _AC = _AA.length; _AB < _AC; _AB++) { //#23112
                            var _AF = $k[--$j]; //#23112
                            $k[$j++] = _AF && (($_.bc + 1) <= Math.ceil($get(_AA, _AB))); //#23112
                        } //#23112
                        if ($k[--$j]) { //#23112
                            $k[$j++] = $_.B; //#23112
                            break; //#23112
                        } //#23112
                        var _AM = $a([$_.cc, $_.tc, $_.xc, $_.bc]); //#23113
                        $k[$j++] = true; //#23113
                        for (var _AN = 0, _AO = _AM.length; _AN < _AO; _AN++) { //#23113
                            var _AR = $k[--$j]; //#23113
                            $k[$j++] = _AR && (($_.ac + 1) <= Math.ceil($get(_AM, _AN))); //#23113
                        } //#23113
                        if ($k[--$j]) { //#23113
                            $k[$j++] = $_.A; //#23113
                            break; //#23113
                        } //#23113
                        var _AY = $a([$_.ac, $_.cc, $_.xc, $_.bc]); //#23114
                        $k[$j++] = true; //#23114
                        for (var _AZ = 0, _Aa = _AY.length; _AZ < _Aa; _AZ++) { //#23114
                            var _Ad = $k[--$j]; //#23114
                            $k[$j++] = _Ad && ((Math.ceil($_.tc) + 1) <= Math.ceil($get(_AY, _AZ))); //#23114
                        } //#23114
                        if ($k[--$j]) { //#23114
                            $k[$j++] = $_.T; //#23114
                            break; //#23114
                        } //#23114
                        var _Ai = $a([$_.ac, $_.tc]); //#23115
                        $k[$j++] = true; //#23115
                        for (var _Aj = 0, _Ak = _Ai.length; _Aj < _Ak; _Aj++) { //#23115
                            var _An = $k[--$j]; //#23115
                            $k[$j++] = _An && ((Math.ceil($_.cc) + 1) <= Math.ceil($get(_Ai, _Aj))); //#23115
                        } //#23115
                        if ($k[--$j]) { //#23118
                            if (Math.ceil($_.cc) < Math.ceil($_.xc)) { //#23116
                                $k[$j++] = $_.C; //#23116
                                break; //#23116
                            } //#23116
                            if ($_.cc == $_.xc) { //#23117
                                $k[$j++] = ($_.i + $_.k) + 1; //#23117
                                $_.XtermFirst(); //#23117
                                if ($k[--$j]) { //#23117
                                    $k[$j++] = $_.X; //#23117
                                    break; //#23117
                                } else { //#23117
                                    $k[$j++] = $_.C; //#23117
                                    break; //#23117
                                } //#23117
                            } //#23117
                        } //#23117
                        var _B3 = $a([$_.ac, $_.cc, $_.tc, $_.bc]); //#23119
                        $k[$j++] = true; //#23119
                        for (var _B4 = 0, _B5 = _B3.length; _B4 < _B5; _B4++) { //#23119
                            var _B8 = $k[--$j]; //#23119
                            $k[$j++] = _B8 && ((Math.ceil($_.xc) + 1) <= Math.ceil($get(_B3, _B4))); //#23119
                        } //#23119
                        if ($k[--$j]) { //#23119
                            $k[$j++] = $_.X; //#23119
                            break; //#23119
                        } //#23119
                    } //#23119
                    $_.k = $_.k + 1; //#23121
                } //#23121
            } //#23121
        }; //#23121
        $_.addtocws = function() {
            var _BC = $k[--$j]; //#23127
            $k[$j++] = _BC; //#23129
            if ((_BC.length + $_.j) > 1480) { //#23129
                $j--; //#23128
                $k[$j++] = 'bwipp.codeoneTooLong#23128'; //#23128
                $k[$j++] = "Maximum length exceeded"; //#23128
                bwipp_raiseerror(); //#23128
            } //#23128
            var _BE = $k[--$j]; //#23130
            $puti($_.cws, $_.j, _BE); //#23130
            $_.j = _BE.length + $_.j; //#23131
        }; //#23131
        $_.tobin = function() {
            var _BJ = $s($k[--$j]); //#23135
            $k[$j++] = _BJ; //#23135
            for (var _BL = 0, _BK = _BJ.length - 1; _BL <= _BK; _BL += 1) { //#23135
                var _BM = $k[--$j]; //#23135
                $put(_BM, _BL, 48); //#23135
                $k[$j++] = _BM; //#23135
            } //#23135
            var _BN = $k[--$j]; //#23136
            var _BQ = $cvrs($s(_BN.length), $k[--$j], 2); //#23136
            $puti(_BN, _BN.length - _BQ.length, _BQ); //#23136
            $k[$j++] = _BN; //#23137
            $k[$j++] = Infinity; //#23137
            var _BR = $k[--$j]; //#23137
            var _BS = $k[--$j]; //#23137
            $k[$j++] = _BR; //#23137
            $forall(_BS, function() { //#23137
                var _BT = $k[--$j]; //#23137
                $k[$j++] = $f(_BT - 48); //#23137
            }); //#23137
            var _BU = $a(); //#23137
            $k[$j++] = _BU; //#23137
        }; //#23137
        $_.encA = function() {
            for (var _BV = 0, _BW = 1; _BV < _BW; _BV++) { //#23182
                if ($get($_.numD, $_.i) >= 21) { //#23146
                    $_.Dbits = $a([1, 1, 1, 1]); //#23143
                    $_.mode = $_.D; //#23144
                    break; //#23145
                } //#23145
                var _Be = $get($_.numD, $_.i); //#23147
                if ((_Be >= 13) && ($f(_Be + $_.i) == $_.msglen)) { //#23151
                    $_.Dbits = $a([1, 1, 1, 1]); //#23148
                    $_.mode = $_.D; //#23149
                    break; //#23150
                } //#23150
                if ($get($_.numD, $_.i) >= 2) { //#23156
                    var _Bm = $s(2); //#23153
                    $put(_Bm, 0, $get($_.msg, $_.i)); //#23153
                    $put(_Bm, 1, $get($_.msg, $_.i + 1)); //#23153
                    $k[$j++] = $get($_.Avals, _Bm); //#23153
                    $_.addtocws(); //#23153
                    $_.i = $_.i + 2; //#23154
                    break; //#23155
                } //#23155
                if ($get($_.msg, $_.i) == $_.fnc1) { //#23172
                    if ($get($_.numD, $_.i + 1) >= 15) { //#23164
                        $k[$j++] = $get($_.Avals, $_.fnc1lD); //#23159
                        $_.addtocws(); //#23159
                        $_.i = $_.i + 1; //#23160
                        $_.Dbits = $a([]); //#23161
                        $_.mode = $_.D; //#23162
                        break; //#23163
                    } //#23163
                    var _CB = $get($_.numD, $_.i + 1); //#23165
                    if ((_CB >= 7) && (($f($f(_CB + $_.i) + 1)) == $_.msglen)) { //#23171
                        $k[$j++] = $get($_.Avals, $_.fnc1lD); //#23166
                        $_.addtocws(); //#23166
                        $_.i = $_.i + 1; //#23167
                        $_.Dbits = $a([]); //#23168
                        $_.mode = $_.D; //#23169
                        break; //#23170
                    } //#23170
                } //#23170
                $k[$j++] = 'newmode'; //#23173
                $_.lookup(); //#23173
                var _CK = $k[--$j]; //#23173
                $_[$k[--$j]] = _CK; //#23173
                if ($_.newmode != $_.mode) { //#23178
                    $k[$j++] = $get($_.Avals, $get($a([-1, $_.lC, $_.lT, $_.lX, $_.lD, $_.lB]), $_.newmode)); //#23175
                    $_.addtocws(); //#23175
                    $_.mode = $_.newmode; //#23176
                    break; //#23177
                } //#23177
                $k[$j++] = $get($_.Avals, $get($_.msg, $_.i)); //#23179
                $_.addtocws(); //#23179
                $_.i = $_.i + 1; //#23180
                break; //#23181
            } //#23181
        }; //#23181
        $_.CTXvalstocws = function() {
            $_.in = $k[--$j]; //#23186
            $k[$j++] = Infinity; //#23187
            for (var _Ci = 0, _Ch = $_.in.length - 1; _Ci <= _Ch; _Ci += 3) { //#23191
                var _Ck = $geti($_.in, _Ci, 3); //#23189
                $k[$j++] = 0; //#23189
                for (var _Cl = 0, _Cm = _Ck.length; _Cl < _Cm; _Cl++) { //#23189
                    var _Co = $k[--$j]; //#23189
                    $k[$j++] = $f(_Co + $get(_Ck, _Cl)) * 40; //#23189
                } //#23189
                var _Cq = (~~($k[--$j] / 40)) + 1; //#23190
                $k[$j++] = ~~(_Cq / 256); //#23190
                $k[$j++] = _Cq % 256; //#23190
            } //#23190
            $astore($a($counttomark())); //#23192
            var _Ct = $k[--$j]; //#23192
            var _Cu = $k[--$j]; //#23192
            $k[$j++] = _Ct; //#23192
            $k[$j++] = _Cu; //#23192
            $j--; //#23192
        }; //#23192
        $_.encCTX = function() {
            $_.p = 0; //#23196
            $_.ctxvals = $a(2220); //#23197
            for (;;) { //#23294
                if ($_.i == $_.msglen) { //#23201
                    break; //#23201
                } //#23201
                if (($_.p % 3) == 0) { //#23289
                    if ($get($_.numD, $_.i) >= 12) { //#23208
                        $k[$j++] = $geti($_.ctxvals, 0, $_.p); //#23204
                        $_.CTXvalstocws(); //#23204
                        $_.addtocws(); //#23204
                        $k[$j++] = $a([$_.unlcw]); //#23205
                        $_.addtocws(); //#23205
                        $_.mode = $_.A; //#23206
                        break; //#23207
                    } //#23207
                    var _DA = $get($_.numD, $_.i); //#23209
                    if ((_DA >= 8) && ($f(_DA + $_.i) == $_.msglen)) { //#23214
                        $k[$j++] = $geti($_.ctxvals, 0, $_.p); //#23210
                        $_.CTXvalstocws(); //#23210
                        $_.addtocws(); //#23210
                        $k[$j++] = $a([$_.unlcw]); //#23211
                        $_.addtocws(); //#23211
                        $_.mode = $_.A; //#23212
                        break; //#23213
                    } //#23213
                    if ($_.mode == $_.X) { //#23236
                        var _DP = $get($_.Xvals, $get($_.msg, $_.i)) !== undefined; //#23216
                        if (!_DP) { //#23224
                            $k[$j++] = $geti($_.ctxvals, 0, $_.p); //#23217
                            $_.CTXvalstocws(); //#23217
                            $_.addtocws(); //#23217
                            if (($get($_.numremcws, $_.j) != 1) || ($get($_.msg, $_.i) > 127)) { //#23221
                                $k[$j++] = $a([$_.unlcw]); //#23220
                                $_.addtocws(); //#23220
                            } //#23220
                            $_.mode = $_.A; //#23222
                            break; //#23223
                        } //#23223
                        if (($_.i + 1) < $_.msglen) { //#23230
                            var _Di = $get($_.Xvals, $get($_.msg, $_.i + 1)) !== undefined; //#23226
                            if (!_Di) { //#23226
                                break; //#23226
                            } //#23226
                            if (($_.i + 2) < $_.msglen) { //#23229
                                var _Dp = $get($_.Xvals, $get($_.msg, $_.i + 2)) !== undefined; //#23228
                                if (!_Dp) { //#23228
                                    break; //#23228
                                } //#23228
                            } //#23228
                        } //#23228
                    } else { //#23236
                        $_.lookup(); //#23232
                        if ($k[--$j] != $_.mode) { //#23237
                            $k[$j++] = $geti($_.ctxvals, 0, $_.p); //#23233
                            $_.CTXvalstocws(); //#23233
                            $_.addtocws(); //#23233
                            $k[$j++] = $a([$_.unlcw]); //#23234
                            $_.addtocws(); //#23234
                            $_.mode = $_.A; //#23235
                            break; //#23236
                        } //#23236
                    } //#23236
                    if (($_.msglen - $_.i) <= 3) { //#23288
                        $_.remcws = $get($_.numremcws, $_.j + ((~~($_.p / 3)) * 2)); //#23240
                        $k[$j++] = Infinity; //#23246
                        var _E8 = $geti($_.msg, $_.i, $_.msglen - $_.i); //#23242
                        for (var _E9 = 0, _EA = _E8.length; _E9 < _EA; _E9++) { //#23248
                            var _EB = $get(_E8, _E9); //#23248
                            var _EF = $get($get($_.encvals, $_.mode), _EB) !== undefined; //#23243
                            $k[$j++] = _EB; //#23247
                            if (_EF) { //#23246
                                $aload($get($get($_.encvals, $_.mode), $k[--$j])); //#23244
                            } else { //#23246
                                $j--; //#23246
                                $k[$j++] = -1; //#23246
                                $k[$j++] = -1; //#23246
                                $k[$j++] = -1; //#23246
                                $k[$j++] = -1; //#23246
                            } //#23246
                        } //#23246
                        $_.remvals = $a(); //#23246
                        if (($_.remcws == 2) && ($_.remvals.length == 3)) { //#23259
                            $k[$j++] = Infinity; //#23254
                            $aload($geti($_.ctxvals, 0, $_.p)); //#23253
                            $aload($_.remvals); //#23254
                            var _ES = $a(); //#23254
                            $k[$j++] = _ES; //#23255
                            $_.CTXvalstocws(); //#23255
                            $_.addtocws(); //#23255
                            $_.mode = $_.A; //#23256
                            $_.i = $_.msglen; //#23257
                            break; //#23258
                        } //#23258
                        if ((($_.remcws == 2) && ($_.remvals.length == 2)) && ($_.mode != $_.X)) { //#23270
                            $k[$j++] = Infinity; //#23265
                            $aload($geti($_.ctxvals, 0, $_.p)); //#23263
                            $aload($_.remvals); //#23264
                            $aload($get($get($_.encvals, $_.mode), $_.sft1)); //#23265
                            var _Ei = $a(); //#23265
                            $k[$j++] = _Ei; //#23266
                            $_.CTXvalstocws(); //#23266
                            $_.addtocws(); //#23266
                            $_.mode = $_.A; //#23267
                            $_.i = $_.msglen; //#23268
                            break; //#23269
                        } //#23269
                        if (($_.remcws == 2) && ($_.remvals.length == 1)) { //#23279
                            $k[$j++] = $geti($_.ctxvals, 0, $_.p); //#23273
                            $_.CTXvalstocws(); //#23273
                            $_.addtocws(); //#23273
                            $k[$j++] = $a([$_.unlcw]); //#23274
                            $_.addtocws(); //#23274
                            $k[$j++] = $get($_.Avals, $get($_.msg, $_.i)); //#23275
                            $_.addtocws(); //#23275
                            $_.mode = $_.A; //#23276
                            $_.i = $_.msglen; //#23277
                            break; //#23278
                        } //#23278
                        if (($_.remcws == 1) && ($_.remvals.length == 1)) { //#23287
                            $k[$j++] = $geti($_.ctxvals, 0, $_.p); //#23282
                            $_.CTXvalstocws(); //#23282
                            $_.addtocws(); //#23282
                            $k[$j++] = $get($_.Avals, $get($_.msg, $_.i)); //#23283
                            $_.addtocws(); //#23283
                            $_.mode = $_.A; //#23284
                            $_.i = $_.msglen; //#23285
                            break; //#23286
                        } //#23286
                    } //#23286
                } //#23286
                var _FH = $get($get($_.encvals, $_.mode), $get($_.msg, $_.i)); //#23290
                $puti($_.ctxvals, $_.p, _FH); //#23291
                $_.p = _FH.length + $_.p; //#23292
                $_.i = $_.i + 1; //#23293
            } //#23293
            if ($_.mode != $_.A) { //#23318
                for (;;) { //#23302
                    if (($_.p % 3) == 0) { //#23299
                        break; //#23299
                    } //#23299
                    $_.i = $_.i - 1; //#23300
                    $_.p = $_.p - $get($get($_.encvals, $_.mode), $get($_.msg, $_.i)).length; //#23301
                } //#23301
                $k[$j++] = Infinity; //#23304
                $aload($geti($_.ctxvals, 0, $_.p)); //#23304
                var _Fb = $a(); //#23304
                $k[$j++] = _Fb; //#23305
                $_.CTXvalstocws(); //#23305
                $_.addtocws(); //#23305
                $k[$j++] = $a([$_.unlcw]); //#23306
                $_.addtocws(); //#23306
                $_.mode = $_.A; //#23307
                if ($_.i != $_.msglen) { //#23317
                    if ($get($_.numD, $_.i) >= 2) { //#23315
                        var _Fk = $s(2); //#23311
                        $put(_Fk, 0, $get($_.msg, $_.i)); //#23311
                        $put(_Fk, 1, $get($_.msg, $_.i + 1)); //#23311
                        $k[$j++] = $get($_.Avals, _Fk); //#23311
                        $_.addtocws(); //#23311
                        $_.i = $_.i + 2; //#23312
                    } else { //#23315
                        $k[$j++] = $get($_.Avals, $get($_.msg, $_.i)); //#23314
                        $_.addtocws(); //#23314
                        $_.i = $_.i + 1; //#23315
                    } //#23315
                } //#23315
            } //#23315
        }; //#23315
        $_.encD = function() {
            for (;;) { //#23379
                if ($get($_.numD, $_.i) < 3) { //#23369
                    $_.Drem = (8 - ($_.Dbits.length % 8)) % 8; //#23328
                    $_.remcws = $get($_.numremcws, $_.j + (~~($_.Dbits.length / 8))); //#23329
                    if (((($f($get($_.numremcws, ($_.j + (~~($_.Dbits.length / 8))) - 1) - 1) == 0) && ($_.Drem == 0)) || (($_.remcws == 1) && ($_.Drem != 0))) && ($_.i == $_.msglen)) { //#23338
                        if (($_.Drem == 4) || ($_.Drem == 6)) { //#23335
                            $k[$j++] = Infinity; //#23335
                            $aload($_.Dbits); //#23335
                            $k[$j++] = 1; //#23335
                            $k[$j++] = 1; //#23335
                            $k[$j++] = 1; //#23335
                            $k[$j++] = 1; //#23335
                            $_.Dbits = $a(); //#23335
                        } //#23335
                        if (($_.Drem == 2) || ($_.Drem == 6)) { //#23336
                            $k[$j++] = Infinity; //#23336
                            $aload($_.Dbits); //#23336
                            $k[$j++] = 0; //#23336
                            $k[$j++] = 1; //#23336
                            $_.Dbits = $a(); //#23336
                        } //#23336
                        break; //#23337
                    } //#23337
                    if ((((($_.i == ($_.msglen - 1)) && ($get($_.numD, $_.i) == 1)) || (($_.i == ($_.msglen - 2)) && ($get($_.numD, $_.i) == 2))) && ($_.remcws == 1)) && ($_.Drem == 0)) { //#23343
                        break; //#23343
                    } //#23343
                    if (!(((($_.i == ($_.msglen - 1)) && ($get($_.numD, $_.i) == 1)) && ($_.remcws == 1)) && (($_.Drem == 4) || ($_.Drem == 6)))) { //#23350
                        $k[$j++] = Infinity; //#23348
                        $aload($_.Dbits); //#23348
                        $k[$j++] = 1; //#23348
                        $k[$j++] = 1; //#23348
                        $k[$j++] = 1; //#23348
                        $k[$j++] = 1; //#23348
                        $k[$j++] = 1; //#23348
                        $k[$j++] = 1; //#23348
                        $_.Dbits = $a(); //#23348
                        $_.Drem = (8 - ($_.Dbits.length % 8)) % 8; //#23349
                    } //#23349
                    if (($_.Drem == 4) || ($_.Drem == 6)) { //#23361
                        if ($get($_.numD, $_.i) >= 1) { //#23358
                            $k[$j++] = Infinity; //#23355
                            $aload($_.Dbits); //#23355
                            $k[$j++] = $f($f($get($_.msg, $_.i) - 48) + 1); //#23355
                            $k[$j++] = 4; //#23355
                            $_.tobin(); //#23355
                            $aload($k[--$j]); //#23355
                            $_.Dbits = $a(); //#23355
                            $_.i = $_.i + 1; //#23356
                        } else { //#23358
                            $k[$j++] = Infinity; //#23358
                            $aload($_.Dbits); //#23358
                            $k[$j++] = 1; //#23358
                            $k[$j++] = 1; //#23358
                            $k[$j++] = 1; //#23358
                            $k[$j++] = 1; //#23358
                            $_.Dbits = $a(); //#23358
                        } //#23358
                        $_.Drem = $_.Drem - 4; //#23360
                    } //#23360
                    if ($_.Drem == 2) { //#23365
                        $k[$j++] = Infinity; //#23363
                        $aload($_.Dbits); //#23363
                        $k[$j++] = 0; //#23363
                        $k[$j++] = 1; //#23363
                        $_.Dbits = $a(); //#23363
                        $_.Drem = 0; //#23364
                    } //#23364
                    break; //#23367
                } //#23367
                $k[$j++] = Infinity; //#23375
                $aload($_.Dbits); //#23373
                var _H7 = $geti($_.msg, $_.i, 3); //#23374
                $k[$j++] = 0; //#23374
                for (var _H8 = 0, _H9 = _H7.length; _H8 < _H9; _H8++) { //#23374
                    var _HB = $k[--$j]; //#23374
                    $k[$j++] = ($f(_HB + $f($get(_H7, _H8) - 48))) * 10; //#23374
                } //#23374
                var _HC = $k[--$j]; //#23374
                $k[$j++] = (~~(_HC / 10)) + 1; //#23375
                $k[$j++] = 10; //#23375
                $_.tobin(); //#23375
                $aload($k[--$j]); //#23375
                $_.Dbits = $a(); //#23375
                $_.i = $_.i + 3; //#23377
            } //#23377
            $k[$j++] = Infinity; //#23381
            for (var _HI = 0, _HH = $_.Dbits.length - 1; _HI <= _HH; _HI += 8) { //#23384
                var _HK = $geti($_.Dbits, _HI, 8); //#23383
                $k[$j++] = 0; //#23383
                for (var _HL = 0, _HM = _HK.length; _HL < _HM; _HL++) { //#23383
                    var _HO = $k[--$j]; //#23383
                    $k[$j++] = $f(_HO + $get(_HK, _HL)) * 2; //#23383
                } //#23383
                var _HP = $k[--$j]; //#23383
                $k[$j++] = ~~(_HP / 2); //#23383
            } //#23383
            $astore($a($counttomark())); //#23385
            var _HS = $k[--$j]; //#23385
            var _HT = $k[--$j]; //#23385
            $k[$j++] = _HS; //#23385
            $k[$j++] = _HT; //#23385
            $j--; //#23385
            $_.addtocws(); //#23385
            $_.mode = $_.A; //#23386
        }; //#23386
        $_.encB = function() {
            $_.p = 0; //#23391
            $_.bvals = $a(1480); //#23391
            for (;;) { //#23398
                if ($_.i == $_.msglen) { //#23392
                    break; //#23392
                } //#23392
                if ($get($_.msg, $_.i) < 0) { //#23393
                    break; //#23393
                } //#23393
                $_.lookup(); //#23394
                if ($k[--$j] != $_.mode) { //#23394
                    break; //#23394
                } //#23394
                $put($_.bvals, $_.p, $get($_.msg, $_.i)); //#23395
                $_.p = $_.p + 1; //#23396
                $_.i = $_.i + 1; //#23397
            } //#23397
            $_.remcws = $f($get($_.numremcws, $_.j + $_.p) - 1); //#23399
            $k[$j++] = Infinity; //#23406
            if (($_.remcws == 0) && ($_.i == $_.msglen)) { //#23404
                $k[$j++] = 0; //#23402
            } else { //#23404
                if ($_.p < 250) { //#23404
                    $k[$j++] = $_.p; //#23404
                } else { //#23404
                    $k[$j++] = (~~($_.p / 250)) + 249; //#23404
                    $k[$j++] = $_.p % 250; //#23404
                } //#23404
            } //#23404
            $aload($geti($_.bvals, 0, $_.p)); //#23406
            $_.bvals = $a(); //#23406
            $k[$j++] = $_.bvals; //#23408
            $_.addtocws(); //#23408
            $_.mode = $_.A; //#23409
        }; //#23409
        $_.cws = $a(1480); //#23413
        $_.mode = $_.A; //#23414
        $_.i = 0; //#23414
        $_.j = 0; //#23414
        for (;;) { //#23417
            if ($_.i >= $_.msglen) { //#23415
                break; //#23415
            } //#23415
            if ($_[$get($a(['encA', 'encCTX', 'encCTX', 'encCTX', 'encD', 'encB']), $_.mode)]() === true) {
                break;
            } //#23416
        } //#23416
        $_.cws = $geti($_.cws, 0, $_.j); //#23418
    } //#23418
    var _IC = $_.metrics; //#23423
    for (var _ID = 0, _IE = _IC.length; _ID < _IE; _ID++) { //#23441
        $_.m = $get(_IC, _ID); //#23424
        $_.vers = $get($_.m, 0); //#23425
        $_.rows = $get($_.m, 1); //#23426
        $_.cols = $get($_.m, 2); //#23427
        $_.dcol = $get($_.m, 3); //#23428
        $_.dcws = $get($_.m, 4); //#23429
        $_.rscw = $get($_.m, 5); //#23430
        $_.rsbl = $get($_.m, 6); //#23431
        $_.riso = $get($_.m, 7); //#23432
        $_.risi = $get($_.m, 8); //#23433
        $_.risl = $get($_.m, 9); //#23434
        $_.dcpb = ~~($_.dcws / $_.rsbl); //#23435
        $_.ecpb = ~~($_.rscw / $_.rsbl); //#23436
        $_.okay = true; //#23437
        if ($ne($_.version, "unset") && $ne($_.version, $_.vers)) { //#23438
            $_.okay = false; //#23438
        } //#23438
        if ($_.cws.length > $_.dcws) { //#23439
            $_.okay = false; //#23439
        } //#23439
        if ($_.okay) { //#23440
            break; //#23440
        } //#23440
    } //#23440
    if (!$_.okay) { //#23445
        $k[$j++] = 'bwipp.codeoneNoValidSymbol#23444'; //#23444
        $k[$j++] = "Maximum length exceeded"; //#23444
        bwipp_raiseerror(); //#23444
    } //#23444
    if (!$_.stype) { //#23451
        $k[$j++] = Infinity; //#23449
        $aload($_.cws); //#23449
        for (var _Ip = 0, _Iq = $f($_.dcws - $_.cws.length); _Ip < _Iq; _Ip++) { //#23449
            $k[$j++] = 129; //#23449
        } //#23449
        $_.cws = $a(); //#23449
    } else { //#23451
        $k[$j++] = Infinity; //#23451
        for (var _Iu = 0, _Iv = $f($_.dcws - $_.cws.length); _Iu < _Iv; _Iu++) { //#23451
            $k[$j++] = 0; //#23451
        } //#23451
        $aload($_.cws); //#23451
        $_.cws = $a(); //#23451
    } //#23451
    var _Iz = $get($_.options, 'debugcws') !== undefined; //#23454
    if (_Iz) { //#23454
        $k[$j++] = 'bwipp.debugcws#23454'; //#23454
        $k[$j++] = $_.cws; //#23454
        bwipp_raiseerror(); //#23454
    } //#23454
    $_.cwbs = $a($_.rsbl); //#23457
    $_.ecbs = $a($_.rsbl); //#23458
    for (var _J7 = 0, _J6 = $f($_.rsbl - 1); _J7 <= _J6; _J7 += 1) { //#23467
        $_.i = _J7; //#23460
        $_.cwb = $a($_.dcpb); //#23461
        for (var _JC = 0, _JB = $_.dcpb - 1; _JC <= _JB; _JC += 1) { //#23465
            $_.j = _JC; //#23463
            $put($_.cwb, $_.j, $get($_.cws, $f(($_.j * $_.rsbl) + $_.i))); //#23464
        } //#23464
        $put($_.cwbs, $_.i, $_.cwb); //#23466
    } //#23466
    var _JO = $_.stype ? 32 : 256; //#23470
    $_.gf = _JO; //#23470
    $_['gf-1'] = $_.gf - 1; //#23471
    var _JR = $_.stype ? 37 : 301; //#23472
    $_.pm = _JR; //#23472
    $k[$j++] = Infinity; //#23473
    $k[$j++] = 1; //#23473
    for (var _JT = 0, _JU = $_["gf-1"]; _JT < _JU; _JT++) { //#23473
        var _JV = $k[--$j]; //#23473
        var _JW = _JV * 2; //#23473
        $k[$j++] = _JV; //#23473
        $k[$j++] = _JW; //#23473
        if (_JW >= $_.gf) { //#23473
            var _JZ = $k[--$j]; //#23473
            $k[$j++] = _JZ ^ $_.pm; //#23473
        } //#23473
    } //#23473
    $_.rsalog = $a(); //#23473
    $_.rslog = $a($_.gf); //#23474
    for (var _Jf = 1, _Je = $_["gf-1"]; _Jf <= _Je; _Jf += 1) { //#23475
        $put($_.rslog, $get($_.rsalog, _Jf), _Jf); //#23475
    } //#23475
    $_.rsprod = function() {
        var _Jj = $k[--$j]; //#23477
        var _Jk = $k[--$j]; //#23477
        $k[$j++] = _Jk; //#23481
        $k[$j++] = _Jj; //#23481
        if ((_Jj != 0) && (_Jk != 0)) { //#23480
            var _Jn = $get($_.rslog, $k[--$j]); //#23478
            var _Jt = $get($_.rsalog, $f(_Jn + $get($_.rslog, $k[--$j])) % $_["gf-1"]); //#23478
            $k[$j++] = _Jt; //#23478
        } else { //#23480
            $j -= 2; //#23480
            $k[$j++] = 0; //#23480
        } //#23480
    }; //#23480
    $k[$j++] = Infinity; //#23485
    $k[$j++] = 1; //#23485
    for (var _Jv = 0, _Jw = $_.ecpb; _Jv < _Jw; _Jv++) { //#23485
        $k[$j++] = 0; //#23485
    } //#23485
    $_.coeffs = $a(); //#23485
    for (var _K0 = 0, _Jz = $_.ecpb - 1; _K0 <= _Jz; _K0 += 1) { //#23494
        $_.i = _K0; //#23487
        $put($_.coeffs, $_.i + 1, $get($_.coeffs, $_.i)); //#23488
        for (var _K7 = $_.i; _K7 >= 1; _K7 -= 1) { //#23492
            $_.j = _K7; //#23490
            $k[$j++] = $_.coeffs; //#23491
            $k[$j++] = $_.j; //#23491
            $k[$j++] = $get($_.coeffs, $_.j - 1); //#23491
            $k[$j++] = $get($_.coeffs, $_.j); //#23491
            $k[$j++] = $get($_.rsalog, $_.i); //#23491
            $_.rsprod(); //#23491
            var _KJ = $k[--$j]; //#23491
            var _KK = $k[--$j]; //#23491
            var _KL = $k[--$j]; //#23491
            $put($k[--$j], _KL, $xo(_KK, _KJ)); //#23491
        } //#23491
        $k[$j++] = $_.coeffs; //#23493
        $k[$j++] = 0; //#23493
        $k[$j++] = $get($_.coeffs, 0); //#23493
        $k[$j++] = $get($_.rsalog, $_.i); //#23493
        $_.rsprod(); //#23493
        var _KT = $k[--$j]; //#23493
        var _KU = $k[--$j]; //#23493
        $put($k[--$j], _KU, _KT); //#23493
    } //#23493
    $_.coeffs = $geti($_.coeffs, 0, $_.coeffs.length - 1); //#23495
    for (var _Kb = 0, _Ka = $_.cwbs.length - 1; _Kb <= _Ka; _Kb += 1) { //#23510
        $_.i = _Kb; //#23499
        $k[$j++] = Infinity; //#23500
        $aload($get($_.cwbs, $_.i)); //#23500
        for (var _Kg = 0, _Kh = $_.ecpb; _Kg < _Kh; _Kg++) { //#23500
            $k[$j++] = 0; //#23500
        } //#23500
        $_.rscws = $a(); //#23500
        for (var _Kl = 0, _Kk = $_.dcpb - 1; _Kl <= _Kk; _Kl += 1) { //#23508
            $_.m = _Kl; //#23502
            $_.k = $get($_.rscws, $_.m); //#23503
            for (var _Kr = 0, _Kq = $_.ecpb - 1; _Kr <= _Kq; _Kr += 1) { //#23507
                $_.j = _Kr; //#23505
                $k[$j++] = $_.rscws; //#23506
                $k[$j++] = ($_.m + $_.j) + 1; //#23506
                $k[$j++] = $get($_.coeffs, ($_.ecpb - $_.j) - 1); //#23506
                $k[$j++] = $_.k; //#23506
                $_.rsprod(); //#23506
                var _L4 = $k[--$j]; //#23506
                var _L5 = $k[--$j]; //#23506
                $put($k[--$j], _L5, $xo(_L4, $get($_.rscws, ($_.m + $_.j) + 1))); //#23506
            } //#23506
        } //#23506
        $put($_.ecbs, $_.i, $geti($_.rscws, $_.dcpb, $_.ecpb)); //#23509
    } //#23509
    $k[$j++] = Infinity; //#23513
    $aload($_.cws); //#23513
    for (var _LF = 0, _LG = $_.rscw; _LF < _LG; _LF++) { //#23513
        $k[$j++] = 0; //#23513
    } //#23513
    $_.cws = $a(); //#23513
    for (var _LK = 0, _LJ = $f($_.rscw - 1); _LK <= _LJ; _LK += 1) { //#23517
        $_.i = _LK; //#23515
        $put($_.cws, $f($_.dcws + $_.i), $get($get($_.ecbs, $_.i % $_.rsbl), ~~($_.i / $_.rsbl))); //#23516
    } //#23516
    var _LY = $_.stype ? 5 : 8; //#23520
    $_.mmat = $a($f($_.dcws + $_.rscw) * _LY); //#23520
    $_.r = 0; //#23521
    $_.c = 0; //#23521
    var _Lb = $_.stype ? 2 : 1; //#23522
    for (var _Le = 0, _Lf = _Lb, _Ld = $_.cws.length - 1; _Lf < 0 ? _Le >= _Ld : _Le <= _Ld; _Le += _Lf) { //#23543
        $_.i = _Le; //#23523
        if (!$_.stype) { //#23537
            var _Li = $strcpy($s(8), "00000000"); //#23525
            var _Ln = $cvrs($s(8), $get($_.cws, $_.i), 2); //#23525
            $puti(_Li, 8 - _Ln.length, _Ln); //#23526
            $k[$j++] = _Li; //#23526
            $k[$j++] = Infinity; //#23526
            var _Lo = $k[--$j]; //#23526
            var _Lp = $k[--$j]; //#23526
            $k[$j++] = _Lo; //#23526
            $forall(_Lp, function() { //#23526
                var _Lq = $k[--$j]; //#23526
                $k[$j++] = $f(_Lq - 48); //#23526
            }); //#23526
            var _Lr = $a(); //#23526
            $_.top = $geti(_Lr, 0, 4); //#23527
            $_.bot = $geti(_Lr, 4, 4); //#23528
        } else { //#23537
            var _Lv = $strcpy($s(5), "00000"); //#23530
            var _M0 = $cvrs($s(5), $get($_.cws, $_.i), 2); //#23530
            $puti(_Lv, 5 - _M0.length, _M0); //#23531
            $k[$j++] = _Lv; //#23531
            $k[$j++] = Infinity; //#23531
            var _M1 = $k[--$j]; //#23531
            var _M2 = $k[--$j]; //#23531
            $k[$j++] = _M1; //#23531
            $forall(_M2, function() { //#23531
                var _M3 = $k[--$j]; //#23531
                $k[$j++] = $f(_M3 - 48); //#23531
            }); //#23531
            $_.c1 = $a(); //#23532
            var _M6 = $strcpy($s(5), "00000"); //#23533
            var _MB = $cvrs($s(5), $get($_.cws, $_.i + 1), 2); //#23533
            $puti(_M6, 5 - _MB.length, _MB); //#23534
            $k[$j++] = _M6; //#23534
            $k[$j++] = Infinity; //#23534
            var _MC = $k[--$j]; //#23534
            var _MD = $k[--$j]; //#23534
            $k[$j++] = _MC; //#23534
            $forall(_MD, function() { //#23534
                var _ME = $k[--$j]; //#23534
                $k[$j++] = $f(_ME - 48); //#23534
            }); //#23534
            $_.c2 = $a(); //#23535
            $k[$j++] = Infinity; //#23536
            $aload($geti($_.c1, 0, 3)); //#23536
            $aload($geti($_.c2, 0, 2)); //#23536
            $_.top = $a(); //#23536
            $k[$j++] = Infinity; //#23537
            $aload($geti($_.c1, 3, 2)); //#23537
            $aload($geti($_.c2, 2, 3)); //#23537
            $_.bot = $a(); //#23537
        } //#23537
        $puti($_.mmat, $f(($_.r * $_.dcol) + $_.c), $_.top); //#23539
        $puti($_.mmat, $f((($_.r + 1) * $_.dcol) + $_.c), $_.bot); //#23540
        $_.c = $_.c + $_.top.length; //#23541
        if ($_.c == $_.dcol) { //#23542
            $_.c = 0; //#23542
            $_.r = $_.r + 2; //#23542
        } //#23542
    } //#23542
    $_.mmv = function() {
        var _Mg = $k[--$j]; //#23546
        var _Mh = $k[--$j]; //#23546
        $k[$j++] = $f(_Mh + (_Mg * $_.cols)); //#23546
    }; //#23546
    $k[$j++] = Infinity; //#23547
    for (var _Mk = 0, _Ml = $_.rows * $_.cols; _Mk < _Ml; _Mk++) { //#23547
        $k[$j++] = -1; //#23547
    } //#23547
    $_.pixs = $a(); //#23547
    var _NH = $a([function() {
        for (var _Mo = 0, _Mp = $_.cols; _Mo < _Mp; _Mo++) { //#23551
            $k[$j++] = 0; //#23551
        } //#23551
    }, function() {
        for (var _Mr = 0, _Ms = $_.cols; _Mr < _Ms; _Mr++) { //#23552
            $k[$j++] = 1; //#23552
        } //#23552
    }, function() {
        $k[$j++] = 0; //#23553
        for (var _Mu = 0, _Mv = $f($_.cols - 2); _Mu < _Mv; _Mu++) { //#23553
            $k[$j++] = 1; //#23553
        } //#23553
        $k[$j++] = 0; //#23553
    }, function() {
        $k[$j++] = 0; //#23554
        $k[$j++] = 1; //#23554
        for (var _Mx = 0, _My = $f($_.cols - 4); _Mx < _My; _Mx++) { //#23554
            $k[$j++] = 0; //#23554
        } //#23554
        $k[$j++] = 1; //#23554
        $k[$j++] = 0; //#23554
    }, function() {
        for (var _N0 = 0, _N1 = ~~($f($_.cols - 1) / 2); _N0 < _N1; _N0++) { //#23555
            $k[$j++] = -1; //#23555
        } //#23555
        $k[$j++] = 1; //#23555
        for (var _N3 = 0, _N4 = ~~($f($_.cols - 1) / 2); _N3 < _N4; _N3++) { //#23555
            $k[$j++] = -1; //#23555
        } //#23555
    }, function() {
        for (var _N6 = 0, _N7 = ~~($f($_.cols - 1) / 2); _N6 < _N7; _N6++) { //#23556
            $k[$j++] = -1; //#23556
        } //#23556
        $k[$j++] = 0; //#23556
        for (var _N9 = 0, _NA = ~~($f($_.cols - 1) / 2); _N9 < _NA; _N9++) { //#23556
            $k[$j++] = -1; //#23556
        } //#23556
    }, function() {
        $k[$j++] = 1; //#23557
        for (var _NC = 0, _ND = $f($_.cols - 2); _NC < _ND; _NC++) { //#23557
            $k[$j++] = 0; //#23557
        } //#23557
        $k[$j++] = 1; //#23557
    }, function() {
        $k[$j++] = 1; //#23558
        $k[$j++] = 0; //#23558
        for (var _NF = 0, _NG = $f($_.cols - 4); _NF < _NG; _NF++) { //#23558
            $k[$j++] = 1; //#23558
        } //#23558
        $k[$j++] = 0; //#23558
        $k[$j++] = 1; //#23558
    }]); //#23558
    $_.artifact = _NH; //#23559
    if (!bwipp_codeone.__23573__) { //#23573
        $_ = Object.create($_); //#23573
        var _NI = new Map([
            ["A", "121343"],
            ["B", "12134343"],
            ["C", "12121343"],
            ["D", "1213434343"],
            ["E", "1212134343"],
            ["F", "1212121343"],
            ["G", "121213434343"],
            ["H", "121212134343"],
            ["S", "56661278"],
            ["T", "5666666666127878"]
        ]); //#23571
        $_.cpatmap = _NI; //#23572
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_codeone.$ctx[id] = $_[id]); //#23572
        bwipp_codeone.__23573__ = 1; //#23572
        $_ = Object.getPrototypeOf($_); //#23572
    } //#23572
    $_.cpat = $get($_.cpatmap, $geti($_.vers, 0, 1)); //#23574
    $k[$j++] = $_.pixs; //#23575
    $k[$j++] = 0; //#23575
    $k[$j++] = ~~($f($_.rows - $_.cpat.length) / 2); //#23575
    $_.mmv(); //#23575
    $k[$j++] = Infinity; //#23576
    $forall($_.cpat, function() { //#23576
        if ($get($_.artifact, $f($k[--$j] - 49))() === true) {
            return true;
        } //#23576
    }); //#23576
    var _NV = $a(); //#23576
    var _NW = $k[--$j]; //#23576
    $puti($k[--$j], _NW, _NV); //#23576
    for (var _Na = 0, _NZ = $f($_.risl - 1); _Na <= _NZ; _Na += 1) { //#23591
        $_.i = _Na; //#23580
        for (var _Nf = $_.riso, _Ng = $_.risi, _Ne = $f($_.cols - 1); _Ng < 0 ? _Nf >= _Ne : _Nf <= _Ne; _Nf += _Ng) { //#23590
            $_.j = _Nf; //#23582
            var _Ni = (($_.i % 12) == 0) ? 1 : 0; //#23583
            var _Nj = $a([1, _Ni]); //#23583
            $k[$j++] = _Nj; //#23584
            $k[$j++] = _Nj; //#23584
            $k[$j++] = $_.pixs; //#23584
            $k[$j++] = $_.j; //#23584
            $k[$j++] = $_.i; //#23584
            $_.mmv(); //#23584
            var _Nn = $k[--$j]; //#23585
            var _No = $k[--$j]; //#23585
            $puti(_No, _Nn, $k[--$j]); //#23585
            if ($_.i != $f($_.risl - 1)) { //#23589
                $k[$j++] = $_.pixs; //#23587
                $k[$j++] = $f($f($_.cols - $_.j) - 2); //#23587
                $k[$j++] = $f($f($_.rows - $_.i) - 1); //#23587
                $_.mmv(); //#23587
                var _Nx = $k[--$j]; //#23588
                var _Ny = $k[--$j]; //#23588
                $puti(_Ny, _Nx, $k[--$j]); //#23588
            } else { //#23589
                $j--; //#23589
            } //#23589
        } //#23589
    } //#23589
    if (!bwipp_codeone.__23611__) { //#23611
        $_ = Object.create($_); //#23611
        var _Od = new Map([
            ["A", $a([$a([12, 5])])],
            ["B", $a([$a([16, 7])])],
            ["C", $a([$a([26, 12])])],
            ["D", $a([])],
            ["E", $a([$a([26, 23])])],
            ["F", $a([$a([26, 32]), $a([70, 32]), $a([26, 34]), $a([70, 34])])],
            ["G", $a([$a([27, 48]), $a([69, 48])])],
            ["H", $a([$a([26, 70]), $a([66, 70]), $a([106, 70]), $a([26, 72]), $a([66, 72]), $a([106, 72])])],
            ["S-10", $a([])],
            ["S-20", $a([$a([10, 4])])],
            ["S-30", $a([$a([15, 4]), $a([15, 6])])],
            ["T-16", $a([$a([8, 10])])],
            ["T-32", $a([$a([16, 10]), $a([16, 12])])],
            ["T-48", $a([$a([24, 10]), $a([24, 12]), $a([24, 14])])]
        ]); //#23609
        $_.blackdotmap = _Od; //#23610
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_codeone.$ctx[id] = $_[id]); //#23610
        bwipp_codeone.__23611__ = 1; //#23610
        $_ = Object.getPrototypeOf($_); //#23610
    } //#23610
    $forall($get($_.blackdotmap, $_.vers), function() { //#23612
        var _Oj = $k[--$j]; //#23612
        $k[$j++] = $_.pixs; //#23612
        $aload(_Oj); //#23612
        $_.mmv(); //#23612
        var _Ok = $k[--$j]; //#23612
        $put($k[--$j], _Ok, 1); //#23612
    }); //#23612
    $_.j = 0; //#23615
    for (var _Oo = 0, _On = $_.pixs.length - 1; _Oo <= _On; _Oo += 1) { //#23622
        $_.i = _Oo; //#23617
        if ($get($_.pixs, $_.i) == -1) { //#23621
            $put($_.pixs, $_.i, $get($_.mmat, $_.j)); //#23619
            $_.j = $_.j + 1; //#23620
        } //#23620
    } //#23620
    var _P4 = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $_.pixs],
        ["pixx", $_.cols],
        ["pixy", $_.rows],
        ["height", ($_.rows / 72) * 2],
        ["width", ($_.cols / 72) * 2],
        ["opt", $_.options]
    ]); //#23632
    $k[$j++] = _P4; //#23635
    if (!$_.dontdraw) { //#23635
        bwipp_renmatrix(); //#23635
    } //#23635
    $_ = Object.getPrototypeOf($_); //#23637
    $_ = Object.getPrototypeOf($_); //#23639
}

function bwipp_hanxin() {
    $_ = Object.create($_); //#23670
    $_.dontdraw = false; //#23673
    $_.version = "unset"; //#23674
    $_.eclevel = "L2"; //#23675
    $_.parse = false; //#23676
    $_.parsefnc = false; //#23677
    $_.mask = -1; //#23678
    $k[$j++] = $_; //#23680
    bwipp_processoptions(); //#23680
    $_.options = $k[--$j]; //#23680
    $_.barcode = $k[--$j]; //#23681
    if ($eq($_.barcode, "")) { //#23685
        $k[$j++] = 'bwipp.hanxinEmptyData#23684'; //#23684
        $k[$j++] = "The data must not be empty"; //#23684
        bwipp_raiseerror(); //#23684
    } //#23684
    if ($ne($_.version, "unset")) { //#23697
        var _5 = $_.version.length; //#23688
        var _6 = (_5 >= 1) && (_5 <= 2); //#23688
        $k[$j++] = _6; //#23693
        if (_6) { //#23693
            $j--; //#23689
            var _7 = $_.version; //#23690
            $k[$j++] = true; //#23690
            for (var _8 = 0, _9 = _7.length; _8 < _9; _8++) { //#23690
                var _A = $get(_7, _8); //#23690
                if ((_A < 48) || (_A > 57)) { //#23690
                    $j--; //#23690
                    $k[$j++] = false; //#23690
                } //#23690
            } //#23690
            var _B = $k[--$j]; //#23690
            $k[$j++] = _B; //#23692
            if (_B) { //#23692
                $j--; //#23691
                var _D = $cvi($_.version); //#23691
                $k[$j++] = (_D >= 1) && (_D <= 84); //#23691
            } //#23691
        } //#23691
        if ($nt($k[--$j])) { //#23696
            $k[$j++] = 'bwipp.hanxinInvalidVersion#23695'; //#23695
            $k[$j++] = "Valid versions are 1 to 84"; //#23695
            bwipp_raiseerror(); //#23695
        } //#23695
    } //#23695
    var _G = $_.eclevel.length == 2; //#23699
    $k[$j++] = _G; //#23703
    if (_G) { //#23703
        $j--; //#23700
        $k[$j++] = $geti($_.eclevel, 0, 1); //#23702
        if ($eq("L", "L")) { //#23702
            $j--; //#23701
            var _L = $get($_.eclevel, 1) - 48; //#23701
            $k[$j++] = (_L >= 1) && (_L <= 4); //#23701
        } //#23701
    } //#23701
    if ($nt($k[--$j])) { //#23706
        $k[$j++] = 'bwipp.hanxinInvalidErrorCorrectionLevel#23705'; //#23705
        $k[$j++] = "Valid error correction levels are L1 to L4"; //#23705
        bwipp_raiseerror(); //#23705
    } //#23705
    if ($_.mask != -1) { //#23712
        if (($_.mask < 1) || ($_.mask > 4)) { //#23711
            $k[$j++] = 'bwipp.hanxinInvalidErrorCorrectionLevel#23710'; //#23710
            $k[$j++] = "The valid masks are 1 to 4"; //#23710
            bwipp_raiseerror(); //#23710
        } //#23710
    } //#23710
    bwipp_loadctx(bwipp_hanxin) //#23714
    var _S = new Map([
        ["parse", $_.parse],
        ["parsefnc", $_.parsefnc]
    ]); //#23719
    $_.fncvals = _S; //#23721
    $k[$j++] = 'msg'; //#23722
    $k[$j++] = $_.barcode; //#23722
    $k[$j++] = $_.fncvals; //#23722
    bwipp_parseinput(); //#23722
    var _V = $k[--$j]; //#23722
    $_[$k[--$j]] = _V; //#23722
    $_.msglen = $_.msg.length; //#23723
    $_.tobin = function() {
        var _Z = $s($k[--$j]); //#23726
        $k[$j++] = _Z; //#23726
        for (var _b = 0, _a = _Z.length - 1; _b <= _a; _b += 1) { //#23726
            var _c = $k[--$j]; //#23726
            $put(_c, _b, 48); //#23726
            $k[$j++] = _c; //#23726
        } //#23726
        var _d = $k[--$j]; //#23727
        var _g = $cvrs($s(_d.length), $k[--$j], 2); //#23727
        $puti(_d, _d.length - _g.length, _g); //#23728
        $k[$j++] = _d; //#23728
    }; //#23728
    $_.bits = $s((4 + 13) + ($_.msglen * 8)); //#23732
    $puti($_.bits, 0, "0011"); //#23733
    $k[$j++] = $_.bits; //#23734
    $k[$j++] = 4; //#23734
    $k[$j++] = $_.msglen; //#23734
    $k[$j++] = 13; //#23734
    $_.tobin(); //#23734
    var _m = $k[--$j]; //#23734
    var _n = $k[--$j]; //#23734
    $puti($k[--$j], _n, _m); //#23734
    for (var _r = 0, _q = $_.msglen - 1; _r <= _q; _r += 1) { //#23738
        $_.i = _r; //#23736
        $k[$j++] = $_.bits; //#23737
        $k[$j++] = 17 + ($_.i * 8); //#23737
        $k[$j++] = $get($_.msg, $_.i); //#23737
        $k[$j++] = 8; //#23737
        $_.tobin(); //#23737
        var _x = $k[--$j]; //#23737
        var _y = $k[--$j]; //#23737
        $puti($k[--$j], _y, _x); //#23737
    } //#23737
    if (!bwipp_hanxin.__24081__) { //#24081
        $_ = Object.create($_); //#24081
        var _24 = $a([0, -1, -1]); //#23764
        $_.metrics = $a([$a(["1", 23, -1, 0, 205, $a([1, 21, 4]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 17, 8]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 13, 12]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 9, 16]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["2", 25, -1, 0, 301, $a([1, 31, 6]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 25, 12]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 19, 18]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 15, 22]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["3", 27, -1, 0, 405, $a([1, 42, 8]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 34, 16]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 26, 24]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 20, 30]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["4", 29, 14, 1, 439, $a([1, 46, 8]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 38, 16]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 30, 24]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 22, 32]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["5", 31, 16, 1, 555, $a([1, 57, 12]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 49, 20]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 37, 32]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 14, 20]), $a([1, 13, 22]), $a([0, -1, -1])]), $a(["6", 33, 16, 1, 675, $a([1, 70, 14]), _24, $a([0, -1, -1]), $a([1, 58, 26]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 24, 20]), $a([1, 22, 18]), $a([0, -1, -1]), $a([1, 16, 24]), $a([1, 18, 26]), $a([0, -1, -1])]), $a(["7", 35, 17, 1, 805, $a([1, 84, 16]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 70, 30]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 26, 22]), $a([1, 28, 24]), $a([0, -1, -1]), $a([2, 14, 20]), $a([1, 12, 20]), $a([0, -1, -1])]), $a(["8", 37, 18, 1, 943, $a([1, 99, 18]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 40, 18]), $a([1, 41, 18]), $a([0, -1, -1]), $a([1, 31, 26]), $a([1, 32, 28]), $a([0, -1, -1]), $a([2, 16, 24]), $a([1, 15, 22]), $a([0, -1, -1])]), $a(["9", 39, 19, 1, 1089, $a([1, 114, 22]), $a([0, -1, -1]), $a([0, -1, -1]), $a([2, 48, 20]), $a([0, -1, -1]), $a([0, -1, -1]), $a([2, 24, 20]), $a([1, 26, 22]), $a([0, -1, -1]), $a([2, 18, 28]), $a([1, 18, 26]), $a([0, -1, -1])]), $a(["10", 41, 20, 1, 1243, $a([1, 131, 24]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 52, 22]), $a([1, 57, 24]), $a([0, -1, -1]), $a([2, 27, 24]), $a([1, 29, 24]), $a([0, -1, -1]), $a([2, 21, 32]), $a([1, 19, 30]), $a([0, -1, -1])]), $a(["11", 43, 14, 2, 1289, $a([1, 135, 26]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 56, 24]), $a([1, 57, 24]), $a([0, -1, -1]), $a([2, 28, 24]), $a([1, 31, 26]), $a([0, -1, -1]), $a([2, 22, 32]), $a([1, 21, 32]), $a([0, -1, -1])]), $a(["12", 45, 15, 2, 1455, $a([1, 153, 28]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 62, 26]), $a([1, 65, 28]), $a([0, -1, -1]), $a([2, 32, 28]), $a([1, 33, 28]), $a([0, -1, -1]), $a([3, 17, 26]), $a([1, 22, 30]), $a([0, -1, -1])]), $a(["13", 47, 16, 2, 1629, $a([1, 86, 16]), $a([1, 85, 16]), $a([0, -1, -1]), $a([1, 71, 30]), $a([1, 72, 30]), $a([0, -1, -1]), $a([2, 37, 32]), $a([1, 35, 30]), $a([0, -1, -1]), $a([3, 20, 30]), $a([1, 21, 32]), $a([0, -1, -1])]), $a(["14", 49, 16, 2, 1805, $a([1, 94, 18]), $a([1, 95, 18]), $a([0, -1, -1]), $a([2, 51, 22]), $a([1, 55, 24]), $a([0, -1, -1]), $a([3, 30, 26]), $a([1, 31, 26]), $a([0, -1, -1]), $a([4, 18, 28]), $a([1, 17, 24]), $a([0, -1, -1])]), $a(["15", 51, 17, 2, 1995, $a([1, 104, 20]), $a([1, 105, 20]), $a([0, -1, -1]), $a([2, 57, 24]), $a([1, 61, 26]), $a([0, -1, -1]), $a([3, 33, 28]), $a([1, 36, 30]), $a([0, -1, -1]), $a([4, 20, 30]), $a([1, 19, 30]), $a([0, -1, -1])]), $a(["16", 53, 17, 2, 2187, $a([1, 115, 22]), $a([1, 114, 22]), $a([0, -1, -1]), $a([2, 65, 28]), $a([1, 61, 26]), $a([0, -1, -1]), $a([3, 38, 32]), $a([1, 33, 30]), $a([0, -1, -1]), $a([5, 19, 28]), $a([1, 14, 24]), $a([0, -1, -1])]), $a(["17", 55, 18, 2, 2393, $a([1, 126, 24]), $a([1, 125, 24]), $a([0, -1, -1]), $a([2, 70, 30]), $a([1, 69, 30]), $a([0, -1, -1]), $a([4, 33, 28]), $a([1, 29, 26]), $a([0, -1, -1]), $a([5, 20, 30]), $a([1, 19, 30]), $a([0, -1, -1])]), $a(["18", 57, 19, 2, 2607, $a([1, 136, 26]), $a([1, 137, 26]), $a([0, -1, -1]), $a([3, 56, 24]), $a([1, 59, 26]), $a([0, -1, -1]), $a([5, 35, 30]), $a([0, -1, -1]), $a([0, -1, -1]), $a([6, 18, 28]), $a([1, 21, 28]), $a([0, -1, -1])]), $a(["19", 59, 20, 2, 2829, $a([1, 148, 28]), $a([1, 149, 28]), $a([0, -1, -1]), $a([3, 61, 26]), $a([1, 64, 28]), $a([0, -1, -1]), $a([7, 24, 20]), $a([1, 23, 22]), $a([0, -1, -1]), $a([6, 20, 30]), $a([1, 21, 32]), $a([0, -1, -1])]), $a(["20", 61, 20, 2, 3053, $a([3, 107, 20]), $a([0, -1, -1]), $a([0, -1, -1]), $a([3, 65, 28]), $a([1, 72, 30]), $a([0, -1, -1]), $a([7, 26, 22]), $a([1, 23, 22]), $a([0, -1, -1]), $a([7, 19, 28]), $a([1, 20, 32]), $a([0, -1, -1])]), $a(["21", 63, 21, 2, 3291, $a([3, 115, 22]), $a([0, -1, -1]), $a([0, -1, -1]), $a([4, 56, 24]), $a([1, 63, 28]), $a([0, -1, -1]), $a([7, 28, 24]), $a([1, 25, 22]), $a([0, -1, -1]), $a([8, 18, 28]), $a([1, 21, 22]), $a([0, -1, -1])]), $a(["22", 65, 16, 3, 3383, $a([2, 116, 22]), $a([1, 122, 24]), $a([0, -1, -1]), $a([4, 56, 24]), $a([1, 72, 30]), $a([0, -1, -1]), $a([7, 28, 24]), $a([1, 32, 26]), $a([0, -1, -1]), $a([8, 18, 28]), $a([1, 24, 30]), $a([0, -1, -1])]), $a(["23", 67, 17, 3, 3631, $a([3, 127, 24]), $a([0, -1, -1]), $a([0, -1, -1]), $a([5, 51, 22]), $a([1, 62, 26]), $a([0, -1, -1]), $a([7, 30, 26]), $a([1, 35, 26]), $a([0, -1, -1]), $a([8, 20, 30]), $a([1, 21, 32]), $a([0, -1, -1])]), $a(["24", 69, 17, 3, 3887, $a([2, 135, 26]), $a([1, 137, 26]), $a([0, -1, -1]), $a([5, 56, 24]), $a([1, 59, 26]), $a([0, -1, -1]), $a([7, 33, 28]), $a([1, 30, 28]), $a([0, -1, -1]), $a([11, 16, 24]), $a([1, 19, 26]), $a([0, -1, -1])]), $a(["25", 71, 18, 3, 4151, $a([3, 105, 20]), $a([1, 121, 22]), $a([0, -1, -1]), $a([5, 61, 26]), $a([1, 57, 26]), $a([0, -1, -1]), $a([9, 28, 24]), $a([1, 28, 22]), $a([0, -1, -1]), $a([10, 19, 28]), $a([1, 18, 30]), $a([0, -1, -1])]), $a(["26", 73, 18, 3, 4423, $a([2, 157, 30]), $a([1, 150, 28]), $a([0, -1, -1]), $a([5, 65, 28]), $a([1, 61, 26]), $a([0, -1, -1]), $a([8, 33, 28]), $a([1, 34, 30]), $a([0, -1, -1]), $a([10, 19, 28]), $a([2, 15, 26]), $a([0, -1, -1])]), $a(["27", 75, 19, 3, 4703, $a([3, 126, 24]), $a([1, 115, 22]), $a([0, -1, -1]), $a([7, 51, 22]), $a([1, 54, 22]), $a([0, -1, -1]), $a([8, 35, 30]), $a([1, 37, 30]), $a([0, -1, -1]), $a([15, 15, 22]), $a([1, 10, 22]), $a([0, -1, -1])]), $a(["28", 77, 19, 3, 4991, $a([4, 105, 20]), $a([1, 103, 20]), $a([0, -1, -1]), $a([7, 56, 24]), $a([1, 45, 18]), $a([0, -1, -1]), $a([10, 31, 26]), $a([1, 27, 26]), $a([0, -1, -1]), $a([10, 17, 26]), $a([3, 20, 28]), $a([1, 21, 28])]), $a(["29", 79, 20, 3, 5287, $a([3, 139, 26]), $a([1, 137, 28]), $a([0, -1, -1]), $a([6, 66, 28]), $a([1, 66, 30]), $a([0, -1, -1]), $a([9, 36, 30]), $a([1, 34, 32]), $a([0, -1, -1]), $a([13, 19, 28]), $a([1, 17, 32]), $a([0, -1, -1])]), $a(["30", 81, 20, 3, 5591, $a([6, 84, 16]), $a([1, 82, 16]), $a([0, -1, -1]), $a([6, 70, 30]), $a([1, 68, 30]), $a([0, -1, -1]), $a([7, 35, 30]), $a([3, 33, 28]), $a([1, 32, 28]), $a([13, 20, 30]), $a([1, 20, 28]), $a([0, -1, -1])]), $a(["31", 83, 21, 3, 5903, $a([5, 105, 20]), $a([1, 94, 18]), $a([0, -1, -1]), $a([6, 74, 32]), $a([1, 71, 30]), $a([0, -1, -1]), $a([11, 33, 28]), $a([1, 34, 32]), $a([0, -1, -1]), $a([13, 19, 28]), $a([3, 16, 26]), $a([0, -1, -1])]), $a(["32", 85, 17, 4, 6033, $a([4, 127, 24]), $a([1, 126, 24]), $a([0, -1, -1]), $a([7, 66, 28]), $a([1, 66, 30]), $a([0, -1, -1]), $a([12, 30, 24]), $a([1, 24, 28]), $a([1, 24, 30]), $a([15, 19, 28]), $a([1, 17, 32]), $a([0, -1, -1])]), $a(["33", 87, 17, 4, 6353, $a([7, 84, 16]), $a([1, 78, 16]), $a([0, -1, -1]), $a([7, 70, 30]), $a([1, 66, 28]), $a([0, -1, -1]), $a([12, 33, 28]), $a([1, 32, 30]), $a([0, -1, -1]), $a([14, 21, 32]), $a([1, 24, 28]), $a([0, -1, -1])]), $a(["34", 89, 18, 4, 6689, $a([5, 117, 22]), $a([1, 117, 24]), $a([0, -1, -1]), $a([8, 66, 28]), $a([1, 58, 26]), $a([0, -1, -1]), $a([11, 38, 32]), $a([1, 34, 32]), $a([0, -1, -1]), $a([15, 20, 30]), $a([2, 17, 26]), $a([0, -1, -1])]), $a(["35", 91, 18, 4, 7025, $a([4, 148, 28]), $a([1, 146, 28]), $a([0, -1, -1]), $a([8, 68, 30]), $a([1, 70, 24]), $a([0, -1, -1]), $a([10, 36, 32]), $a([3, 38, 28]), $a([0, -1, -1]), $a([16, 19, 28]), $a([3, 16, 26]), $a([0, -1, -1])]), $a(["36", 93, 19, 4, 7377, $a([4, 126, 24]), $a([2, 135, 26]), $a([0, -1, -1]), $a([8, 70, 28]), $a([2, 43, 26]), $a([0, -1, -1]), $a([13, 32, 28]), $a([2, 41, 30]), $a([0, -1, -1]), $a([17, 19, 28]), $a([3, 15, 26]), $a([0, -1, -1])]), $a(["37", 95, 19, 4, 7729, $a([5, 136, 26]), $a([1, 132, 24]), $a([0, -1, -1]), $a([5, 67, 30]), $a([4, 68, 28]), $a([1, 69, 28]), $a([14, 35, 30]), $a([1, 32, 24]), $a([0, -1, -1]), $a([18, 18, 26]), $a([3, 16, 28]), $a([1, 14, 28])]), $a(["38", 97, 19, 4, 8089, $a([3, 142, 26]), $a([3, 141, 28]), $a([0, -1, -1]), $a([8, 70, 30]), $a([1, 73, 32]), $a([1, 74, 32]), $a([12, 34, 30]), $a([3, 34, 26]), $a([1, 35, 28]), $a([18, 21, 32]), $a([1, 27, 30]), $a([0, -1, -1])]), $a(["39", 99, 20, 4, 8465, $a([5, 116, 22]), $a([2, 103, 20]), $a([1, 102, 20]), $a([9, 74, 32]), $a([1, 74, 30]), $a([0, -1, -1]), $a([14, 34, 28]), $a([2, 32, 32]), $a([1, 32, 30]), $a([19, 21, 32]), $a([1, 25, 26]), $a([0, -1, -1])]), $a(["40", 101, 20, 4, 8841, $a([7, 116, 22]), $a([1, 117, 22]), $a([0, -1, -1]), $a([11, 65, 28]), $a([1, 58, 24]), $a([0, -1, -1]), $a([15, 38, 32]), $a([1, 27, 28]), $a([0, -1, -1]), $a([20, 20, 30]), $a([1, 20, 32]), $a([1, 21, 32])]), $a(["41", 103, 17, 5, 9009, $a([6, 136, 26]), $a([1, 130, 24]), $a([0, -1, -1]), $a([11, 66, 28]), $a([1, 62, 30]), $a([0, -1, -1]), $a([14, 34, 28]), $a([3, 34, 32]), $a([1, 30, 30]), $a([18, 20, 30]), $a([3, 20, 28]), $a([2, 15, 26])]), $a(["42", 105, 17, 5, 9401, $a([5, 105, 20]), $a([2, 115, 22]), $a([2, 116, 22]), $a([10, 75, 32]), $a([1, 73, 32]), $a([0, -1, -1]), $a([16, 38, 32]), $a([1, 27, 28]), $a([0, -1, -1]), $a([22, 19, 28]), $a([2, 16, 30]), $a([1, 19, 30])]), $a(["43", 107, 18, 5, 9799, $a([6, 147, 28]), $a([1, 146, 28]), $a([0, -1, -1]), $a([11, 66, 28]), $a([2, 65, 30]), $a([0, -1, -1]), $a([18, 33, 28]), $a([2, 33, 30]), $a([0, -1, -1]), $a([22, 21, 32]), $a([1, 28, 30]), $a([0, -1, -1])]), $a(["44", 109, 18, 5, 10207, $a([6, 116, 22]), $a([3, 125, 24]), $a([0, -1, -1]), $a([11, 75, 32]), $a([1, 68, 30]), $a([0, -1, -1]), $a([13, 35, 28]), $a([6, 34, 32]), $a([1, 30, 30]), $a([23, 21, 32]), $a([1, 26, 30]), $a([0, -1, -1])]), $a(["45", 111, 18, 5, 10623, $a([7, 105, 20]), $a([4, 95, 18]), $a([0, -1, -1]), $a([12, 67, 28]), $a([1, 63, 30]), $a([1, 62, 32]), $a([21, 31, 26]), $a([2, 33, 32]), $a([0, -1, -1]), $a([23, 21, 32]), $a([2, 24, 30]), $a([0, -1, -1])]), $a(["46", 113, 19, 5, 11045, $a([10, 116, 22]), $a([0, -1, -1]), $a([0, -1, -1]), $a([12, 74, 32]), $a([1, 78, 30]), $a([0, -1, -1]), $a([18, 37, 32]), $a([1, 39, 30]), $a([1, 41, 28]), $a([25, 21, 32]), $a([1, 27, 28]), $a([0, -1, -1])]), $a(["47", 115, 19, 5, 11477, $a([5, 126, 24]), $a([4, 115, 22]), $a([1, 114, 22]), $a([12, 67, 28]), $a([2, 66, 32]), $a([1, 68, 30]), $a([21, 35, 30]), $a([1, 39, 30]), $a([0, -1, -1]), $a([26, 21, 32]), $a([1, 28, 28]), $a([0, -1, -1])]), $a(["48", 117, 19, 5, 11917, $a([9, 126, 24]), $a([1, 117, 22]), $a([0, -1, -1]), $a([13, 75, 32]), $a([1, 68, 30]), $a([0, -1, -1]), $a([20, 35, 30]), $a([3, 35, 28]), $a([0, -1, -1]), $a([27, 21, 32]), $a([1, 28, 30]), $a([0, -1, -1])]), $a(["49", 119, 17, 6, 12111, $a([9, 126, 24]), $a([1, 137, 26]), $a([0, -1, -1]), $a([13, 71, 30]), $a([2, 68, 32]), $a([0, -1, -1]), $a([20, 37, 32]), $a([1, 39, 28]), $a([1, 38, 28]), $a([24, 20, 32]), $a([5, 25, 28]), $a([0, -1, -1])]), $a(["50", 121, 17, 6, 12559, $a([8, 147, 28]), $a([1, 141, 28]), $a([0, -1, -1]), $a([10, 73, 32]), $a([4, 74, 30]), $a([1, 73, 30]), $a([16, 36, 32]), $a([6, 39, 30]), $a([1, 37, 30]), $a([27, 21, 32]), $a([3, 20, 26]), $a([0, -1, -1])]), $a(["51", 123, 18, 6, 13025, $a([9, 137, 26]), $a([1, 135, 26]), $a([0, -1, -1]), $a([12, 70, 30]), $a([4, 75, 32]), $a([0, -1, -1]), $a([24, 35, 30]), $a([1, 40, 28]), $a([0, -1, -1]), $a([23, 20, 32]), $a([8, 24, 30]), $a([0, -1, -1])]), $a(["52", 125, 18, 6, 13489, $a([14, 95, 18]), $a([1, 86, 18]), $a([0, -1, -1]), $a([13, 73, 32]), $a([3, 77, 30]), $a([0, -1, -1]), $a([24, 35, 30]), $a([2, 35, 28]), $a([0, -1, -1]), $a([26, 21, 32]), $a([5, 21, 30]), $a([1, 23, 30])]), $a(["53", 127, 18, 6, 13961, $a([9, 147, 28]), $a([1, 142, 28]), $a([0, -1, -1]), $a([10, 73, 30]), $a([6, 70, 32]), $a([1, 71, 32]), $a([25, 35, 30]), $a([2, 34, 26]), $a([0, -1, -1]), $a([29, 21, 32]), $a([4, 22, 30]), $a([0, -1, -1])]), $a(["54", 129, 18, 6, 14441, $a([11, 126, 24]), $a([1, 131, 24]), $a([0, -1, -1]), $a([16, 74, 32]), $a([1, 79, 30]), $a([0, -1, -1]), $a([25, 38, 32]), $a([1, 25, 30]), $a([0, -1, -1]), $a([33, 21, 32]), $a([1, 28, 28]), $a([0, -1, -1])]), $a(["55", 131, 19, 6, 14939, $a([14, 105, 20]), $a([1, 99, 18]), $a([0, -1, -1]), $a([19, 65, 28]), $a([1, 72, 28]), $a([0, -1, -1]), $a([24, 37, 32]), $a([2, 40, 30]), $a([1, 41, 30]), $a([31, 21, 32]), $a([4, 24, 32]), $a([0, -1, -1])]), $a(["56", 133, 19, 6, 15435, $a([10, 147, 28]), $a([1, 151, 28]), $a([0, -1, -1]), $a([15, 71, 30]), $a([3, 71, 32]), $a([1, 73, 32]), $a([24, 37, 32]), $a([3, 38, 30]), $a([1, 39, 30]), $a([36, 19, 30]), $a([3, 29, 26]), $a([0, -1, -1])]), $a(["57", 135, 19, 6, 15939, $a([15, 105, 20]), $a([1, 99, 18]), $a([0, -1, -1]), $a([19, 70, 30]), $a([1, 64, 28]), $a([0, -1, -1]), $a([27, 38, 32]), $a([2, 25, 26]), $a([0, -1, -1]), $a([38, 20, 30]), $a([2, 18, 28]), $a([0, -1, -1])]), $a(["58", 137, 17, 7, 16171, $a([14, 105, 20]), $a([1, 113, 22]), $a([1, 114, 22]), $a([17, 67, 30]), $a([3, 92, 32]), $a([0, -1, -1]), $a([30, 35, 30]), $a([1, 41, 30]), $a([0, -1, -1]), $a([36, 21, 32]), $a([1, 26, 30]), $a([1, 27, 30])]), $a(["59", 139, 17, 7, 16691, $a([11, 146, 28]), $a([1, 146, 26]), $a([0, -1, -1]), $a([20, 70, 30]), $a([1, 60, 26]), $a([0, -1, -1]), $a([29, 38, 32]), $a([1, 24, 32]), $a([0, -1, -1]), $a([40, 20, 30]), $a([2, 17, 26]), $a([0, -1, -1])]), $a(["60", 141, 18, 7, 17215, $a([3, 137, 26]), $a([1, 136, 26]), $a([10, 126, 24]), $a([22, 65, 28]), $a([1, 75, 30]), $a([0, -1, -1]), $a([30, 37, 32]), $a([1, 51, 30]), $a([0, -1, -1]), $a([42, 20, 30]), $a([1, 21, 30]), $a([0, -1, -1])]), $a(["61", 143, 18, 7, 17751, $a([12, 126, 24]), $a([2, 118, 22]), $a([1, 116, 22]), $a([19, 74, 32]), $a([1, 74, 30]), $a([1, 72, 28]), $a([30, 38, 32]), $a([2, 29, 30]), $a([0, -1, -1]), $a([39, 20, 32]), $a([2, 37, 26]), $a([1, 38, 26])]), $a(["62", 145, 18, 7, 18295, $a([12, 126, 24]), $a([3, 136, 26]), $a([0, -1, -1]), $a([21, 70, 30]), $a([2, 65, 28]), $a([0, -1, -1]), $a([34, 35, 30]), $a([1, 44, 32]), $a([0, -1, -1]), $a([42, 20, 30]), $a([2, 19, 28]), $a([2, 18, 28])]), $a(["63", 147, 18, 7, 18847, $a([12, 126, 24]), $a([3, 117, 22]), $a([1, 116, 22]), $a([25, 61, 26]), $a([2, 62, 28]), $a([0, -1, -1]), $a([34, 35, 30]), $a([1, 40, 32]), $a([1, 41, 32]), $a([45, 20, 30]), $a([1, 20, 32]), $a([1, 21, 32])]), $a(["64", 149, 19, 7, 19403, $a([15, 105, 20]), $a([2, 115, 22]), $a([2, 116, 22]), $a([25, 65, 28]), $a([1, 72, 28]), $a([0, -1, -1]), $a([18, 35, 30]), $a([17, 37, 32]), $a([1, 50, 32]), $a([42, 20, 30]), $a([6, 19, 28]), $a([1, 15, 28])]), $a(["65", 151, 19, 7, 19971, $a([19, 105, 20]), $a([1, 101, 20]), $a([0, -1, -1]), $a([33, 51, 22]), $a([1, 65, 22]), $a([0, -1, -1]), $a([40, 33, 28]), $a([1, 28, 28]), $a([0, -1, -1]), $a([49, 20, 30]), $a([1, 18, 28]), $a([0, -1, -1])]), $a(["66", 153, 17, 8, 20229, $a([18, 105, 20]), $a([2, 117, 22]), $a([0, -1, -1]), $a([26, 65, 28]), $a([1, 80, 30]), $a([0, -1, -1]), $a([35, 35, 30]), $a([3, 35, 28]), $a([1, 36, 28]), $a([52, 18, 28]), $a([2, 38, 30]), $a([0, -1, -1])]), $a(["67", 155, 17, 8, 20805, $a([26, 84, 16]), $a([0, -1, -1]), $a([0, -1, -1]), $a([26, 70, 30]), $a([0, -1, -1]), $a([0, -1, -1]), $a([45, 31, 26]), $a([1, 9, 26]), $a([0, -1, -1]), $a([52, 20, 30]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["68", 157, 17, 8, 21389, $a([16, 126, 24]), $a([1, 114, 22]), $a([1, 115, 22]), $a([23, 70, 30]), $a([3, 65, 28]), $a([1, 66, 28]), $a([40, 35, 30]), $a([1, 43, 30]), $a([0, -1, -1]), $a([46, 20, 30]), $a([7, 19, 28]), $a([1, 16, 28])]), $a(["69", 159, 18, 8, 21993, $a([19, 116, 22]), $a([1, 105, 22]), $a([0, -1, -1]), $a([20, 70, 30]), $a([7, 66, 28]), $a([1, 63, 28]), $a([40, 35, 30]), $a([1, 42, 32]), $a([1, 43, 32]), $a([54, 20, 30]), $a([1, 19, 30]), $a([0, -1, -1])]), $a(["70", 161, 18, 8, 22593, $a([17, 126, 24]), $a([2, 115, 22]), $a([0, -1, -1]), $a([24, 70, 30]), $a([4, 74, 32]), $a([0, -1, -1]), $a([48, 31, 26]), $a([2, 18, 26]), $a([0, -1, -1]), $a([54, 19, 28]), $a([6, 15, 26]), $a([1, 14, 26])]), $a(["71", 163, 18, 8, 23201, $a([29, 84, 16]), $a([0, -1, -1]), $a([0, -1, -1]), $a([29, 70, 30]), $a([0, -1, -1]), $a([0, -1, -1]), $a([6, 34, 30]), $a([3, 36, 30]), $a([38, 33, 28]), $a([58, 20, 30]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["72", 165, 18, 8, 23817, $a([16, 147, 28]), $a([1, 149, 28]), $a([0, -1, -1]), $a([31, 66, 28]), $a([1, 37, 26]), $a([0, -1, -1]), $a([48, 33, 28]), $a([1, 23, 26]), $a([0, -1, -1]), $a([53, 20, 30]), $a([6, 19, 28]), $a([1, 17, 28])]), $a(["73", 167, 19, 8, 24453, $a([20, 115, 22]), $a([2, 134, 24]), $a([0, -1, -1]), $a([29, 66, 28]), $a([2, 56, 26]), $a([2, 57, 26]), $a([45, 36, 30]), $a([2, 15, 28]), $a([0, -1, -1]), $a([59, 20, 30]), $a([2, 21, 32]), $a([0, -1, -1])]), $a(["74", 169, 19, 8, 25085, $a([17, 147, 28]), $a([1, 134, 26]), $a([0, -1, -1]), $a([26, 70, 30]), $a([5, 75, 32]), $a([0, -1, -1]), $a([47, 35, 30]), $a([1, 48, 32]), $a([0, -1, -1]), $a([64, 18, 28]), $a([2, 33, 30]), $a([1, 35, 30])]), $a(["75", 171, 17, 9, 25373, $a([22, 115, 22]), $a([1, 133, 24]), $a([0, -1, -1]), $a([33, 65, 28]), $a([1, 74, 28]), $a([0, -1, -1]), $a([43, 36, 30]), $a([5, 27, 28]), $a([1, 30, 28]), $a([57, 20, 30]), $a([5, 21, 32]), $a([1, 24, 32])]), $a(["76", 173, 17, 9, 26021, $a([18, 136, 26]), $a([2, 142, 26]), $a([0, -1, -1]), $a([33, 66, 28]), $a([2, 49, 26]), $a([0, -1, -1]), $a([48, 35, 30]), $a([2, 38, 28]), $a([0, -1, -1]), $a([64, 20, 30]), $a([1, 20, 32]), $a([0, -1, -1])]), $a(["77", 175, 17, 9, 26677, $a([19, 126, 24]), $a([2, 135, 26]), $a([1, 136, 26]), $a([32, 66, 28]), $a([2, 55, 26]), $a([2, 56, 26]), $a([49, 36, 30]), $a([2, 18, 32]), $a([0, -1, -1]), $a([65, 18, 28]), $a([5, 27, 30]), $a([1, 29, 30])]), $a(["78", 177, 18, 9, 27335, $a([20, 137, 26]), $a([1, 130, 26]), $a([0, -1, -1]), $a([30, 75, 32]), $a([2, 71, 32]), $a([0, -1, -1]), $a([46, 35, 30]), $a([6, 39, 32]), $a([0, -1, -1]), $a([3, 12, 30]), $a([70, 19, 28]), $a([0, -1, -1])]), $a(["79", 179, 18, 9, 28007, $a([20, 147, 28]), $a([0, -1, -1]), $a([0, -1, -1]), $a([35, 70, 30]), $a([0, -1, -1]), $a([0, -1, -1]), $a([49, 35, 30]), $a([5, 35, 28]), $a([0, -1, -1]), $a([70, 20, 30]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["80", 181, 18, 9, 28687, $a([21, 136, 26]), $a([1, 155, 28]), $a([0, -1, -1]), $a([34, 70, 30]), $a([1, 64, 28]), $a([1, 65, 28]), $a([54, 35, 30]), $a([1, 45, 30]), $a([0, -1, -1]), $a([68, 20, 30]), $a([3, 18, 28]), $a([1, 19, 28])]), $a(["81", 183, 18, 9, 29375, $a([19, 126, 24]), $a([5, 115, 22]), $a([1, 114, 22]), $a([33, 70, 30]), $a([3, 65, 28]), $a([1, 64, 28]), $a([52, 35, 30]), $a([3, 41, 32]), $a([1, 40, 32]), $a([67, 20, 30]), $a([5, 21, 32]), $a([1, 24, 32])]), $a(["82", 185, 18, 9, 30071, $a([2, 150, 28]), $a([21, 136, 26]), $a([0, -1, -1]), $a([32, 70, 30]), $a([6, 65, 28]), $a([0, -1, -1]), $a([52, 38, 32]), $a([2, 27, 32]), $a([0, -1, -1]), $a([73, 20, 30]), $a([2, 22, 32]), $a([0, -1, -1])]), $a(["83", 187, 17, 10, 30387, $a([21, 126, 24]), $a([4, 136, 26]), $a([0, -1, -1]), $a([30, 74, 32]), $a([6, 73, 30]), $a([0, -1, -1]), $a([54, 35, 30]), $a([4, 40, 32]), $a([0, -1, -1]), $a([75, 20, 30]), $a([1, 20, 28]), $a([0, -1, -1])]), $a(["84", 189, 17, 10, 31091, $a([30, 105, 20]), $a([1, 114, 22]), $a([0, -1, -1]), $a([3, 45, 22]), $a([55, 47, 20]), $a([0, -1, -1]), $a([2, 26, 26]), $a([62, 33, 28]), $a([0, -1, -1]), $a([79, 18, 28]), $a([4, 33, 30]), $a([0, -1, -1])])]); //#24080
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_hanxin.$ctx[id] = $_[id]); //#24080
        bwipp_hanxin.__24081__ = 1; //#24080
        $_ = Object.getPrototypeOf($_); //#24080
    } //#24080
    $_.eclval = $get($_.eclevel, 1) - 49; //#24083
    var _Ig = $_.metrics; //#24084
    for (var _Ih = 0, _Ii = _Ig.length; _Ih < _Ii; _Ih++) { //#24102
        $_.m = $get(_Ig, _Ih); //#24085
        $_.vers = $get($_.m, 0); //#24086
        $_.size = $get($_.m, 1); //#24087
        $_.alnk = $get($_.m, 2); //#24088
        $_.alnn = $get($_.m, 3); //#24089
        $_.alnr = $f($_.size - ($_.alnk * $_.alnn)); //#24090
        $_.nmod = $get($_.m, 4); //#24091
        $_.ncws = ~~($_.nmod / 8); //#24092
        $_.rbit = $_.nmod % 8; //#24093
        $_.ecbs = $geti($_.m, 5 + ($_.eclval * 3), 3); //#24094
        var _J2 = $_.ecbs; //#24095
        $k[$j++] = 'ecws'; //#24095
        $k[$j++] = 0; //#24095
        for (var _J3 = 0, _J4 = _J2.length; _J3 < _J4; _J3++) { //#24095
            var _J5 = $get(_J2, _J3); //#24095
            var _J8 = $k[--$j]; //#24095
            $k[$j++] = $f(_J8 + ($get(_J5, 0) * $get(_J5, 2))); //#24095
        } //#24095
        var _J9 = $k[--$j]; //#24095
        $_[$k[--$j]] = _J9; //#24095
        $_.dcws = $f($_.ncws - $_.ecws); //#24096
        $_.dmod = $_.dcws * 8; //#24097
        $_.okay = true; //#24098
        if ($ne($_.version, "unset") && $ne($_.version, $_.vers)) { //#24099
            $_.okay = false; //#24099
        } //#24099
        if ($_.bits.length > $_.dmod) { //#24100
            $_.okay = false; //#24100
        } //#24100
        if ($_.okay) { //#24101
            break; //#24101
        } //#24101
    } //#24101
    if (!$_.okay) { //#24106
        $k[$j++] = 'bwipp.hanxinNoValidSymbol#24105'; //#24105
        $k[$j++] = "Maximum length exceeded or invalid content"; //#24105
        bwipp_raiseerror(); //#24105
    } //#24105
    $_.version = $_.vers; //#24108
    $_.msgbits = $_.bits; //#24109
    $_.e1nb = $get($get($_.ecbs, 0), 0); //#24110
    $_.e2nb = $get($get($_.ecbs, 1), 0); //#24110
    $_.e3nb = $get($get($_.ecbs, 2), 0); //#24110
    $_.e1dcws = $get($get($_.ecbs, 0), 1); //#24111
    $_.e2dcws = $get($get($_.ecbs, 1), 1); //#24111
    $_.e3dcws = $get($get($_.ecbs, 2), 1); //#24111
    $_.e1ecws = $get($get($_.ecbs, 0), 2); //#24112
    $_.e2ecws = $get($get($_.ecbs, 1), 2); //#24112
    $_.e3ecws = $get($get($_.ecbs, 2), 2); //#24112
    $_.pad = $s($_.dmod); //#24115
    for (var _Js = 0, _Jr = $_.pad.length - 1; _Js <= _Jr; _Js += 1) { //#24116
        $put($_.pad, _Js, 48); //#24116
    } //#24116
    $puti($_.pad, 0, $_.msgbits); //#24117
    $_.cws = $a($_.dcws); //#24120
    for (var _K0 = 0, _Jz = $_.cws.length - 1; _K0 <= _Jz; _K0 += 1) { //#24130
        $_.c = _K0; //#24122
        $_.cwb = $geti($_.pad, $_.c * 8, 8); //#24123
        $_.cw = 0; //#24124
        for (var _K4 = 0; _K4 <= 7; _K4 += 1) { //#24128
            $_.i = _K4; //#24126
            $_.cw = $f($_.cw + ((~~(Math.pow(2, (8 - $_.i) - 1))) * $f($get($_.cwb, $_.i) - 48))); //#24127
        } //#24127
        $put($_.cws, $_.c, $_.cw); //#24129
    } //#24129
    $_.rscodes = function() {
        $_.rspm = $k[--$j]; //#24134
        $_.rsgf = $k[--$j]; //#24135
        $_.rsnc = $k[--$j]; //#24136
        $_.rscws = $k[--$j]; //#24137
        $k[$j++] = Infinity; //#24140
        $k[$j++] = 1; //#24140
        for (var _KI = 0, _KJ = $f($_.rsgf - 1); _KI < _KJ; _KI++) { //#24140
            var _KK = $k[--$j]; //#24140
            var _KL = _KK * 2; //#24140
            $k[$j++] = _KK; //#24140
            $k[$j++] = _KL; //#24140
            if (_KL >= $_.rsgf) { //#24140
                var _KO = $k[--$j]; //#24140
                $k[$j++] = $xo(_KO, $_.rspm); //#24140
            } //#24140
        } //#24140
        $_.rsalog = $a(); //#24140
        $_.rslog = $a($_.rsgf); //#24141
        for (var _KU = 1, _KT = $f($_.rsgf - 1); _KU <= _KT; _KU += 1) { //#24142
            $put($_.rslog, $get($_.rsalog, _KU), _KU); //#24142
        } //#24142
        $_.rsprod = function() {
            var _KY = $k[--$j]; //#24146
            var _KZ = $k[--$j]; //#24146
            $k[$j++] = _KZ; //#24150
            $k[$j++] = _KY; //#24150
            if ((_KY != 0) && (_KZ != 0)) { //#24149
                var _Kc = $get($_.rslog, $k[--$j]); //#24147
                var _Ki = $get($_.rsalog, $f(_Kc + $get($_.rslog, $k[--$j])) % $f($_.rsgf - 1)); //#24147
                $k[$j++] = _Ki; //#24147
            } else { //#24149
                $j -= 2; //#24149
                $k[$j++] = 0; //#24149
            } //#24149
        }; //#24149
        $k[$j++] = Infinity; //#24154
        $k[$j++] = 1; //#24154
        for (var _Kk = 0, _Kl = $_.rsnc; _Kk < _Kl; _Kk++) { //#24154
            $k[$j++] = 0; //#24154
        } //#24154
        $_.coeffs = $a(); //#24154
        for (var _Kp = 1, _Ko = $_.rsnc; _Kp <= _Ko; _Kp += 1) { //#24163
            $_.i = _Kp; //#24156
            $put($_.coeffs, $_.i, $get($_.coeffs, $_.i - 1)); //#24157
            for (var _Kw = $_.i - 1; _Kw >= 1; _Kw -= 1) { //#24161
                $_.j = _Kw; //#24159
                $k[$j++] = $_.coeffs; //#24160
                $k[$j++] = $_.j; //#24160
                $k[$j++] = $get($_.coeffs, $_.j - 1); //#24160
                $k[$j++] = $get($_.coeffs, $_.j); //#24160
                $k[$j++] = $get($_.rsalog, $_.i); //#24160
                $_.rsprod(); //#24160
                var _L8 = $k[--$j]; //#24160
                var _L9 = $k[--$j]; //#24160
                var _LA = $k[--$j]; //#24160
                $put($k[--$j], _LA, $xo(_L9, _L8)); //#24160
            } //#24160
            $k[$j++] = $_.coeffs; //#24162
            $k[$j++] = 0; //#24162
            $k[$j++] = $get($_.coeffs, 0); //#24162
            $k[$j++] = $get($_.rsalog, $_.i); //#24162
            $_.rsprod(); //#24162
            var _LI = $k[--$j]; //#24162
            var _LJ = $k[--$j]; //#24162
            $put($k[--$j], _LJ, _LI); //#24162
        } //#24162
        $_.nd = $_.rscws.length; //#24166
        $k[$j++] = Infinity; //#24167
        $forall($_.rscws); //#24167
        for (var _LO = 0, _LP = $_.rsnc; _LO < _LP; _LO++) { //#24167
            $k[$j++] = 0; //#24167
        } //#24167
        $k[$j++] = 0; //#24167
        $_.rscws = $a(); //#24167
        for (var _LT = 0, _LS = $_.nd - 1; _LT <= _LS; _LT += 1) { //#24174
            $_.k = $xo($get($_.rscws, _LT), $get($_.rscws, $_.nd)); //#24169
            for (var _Lb = 0, _La = $f($_.rsnc - 1); _Lb <= _La; _Lb += 1) { //#24173
                $_.j = _Lb; //#24171
                $k[$j++] = $_.rscws; //#24172
                $k[$j++] = $_.nd + $_.j; //#24172
                $k[$j++] = $get($_.rscws, ($_.nd + $_.j) + 1); //#24172
                $k[$j++] = $_.k; //#24172
                $k[$j++] = $get($_.coeffs, $f($f($_.rsnc - $_.j) - 1)); //#24172
                $_.rsprod(); //#24172
                var _Lo = $k[--$j]; //#24172
                var _Lp = $k[--$j]; //#24172
                var _Lq = $k[--$j]; //#24172
                $put($k[--$j], _Lq, $xo(_Lp, _Lo)); //#24172
            } //#24172
        } //#24172
        $k[$j++] = $geti($_.rscws, 0, $_.rscws.length - 1); //#24177
    }; //#24177
    $_.dcwsb = $a($f($f($_.e1nb + $_.e2nb) + $_.e3nb)); //#24182
    $_.ecwsb = $a($_.dcwsb.length); //#24183
    $_.in = 0; //#24184
    $_.out = 0; //#24184
    for (var _M2 = 0, _M3 = $_.e1nb; _M2 < _M3; _M2++) { //#24190
        $k[$j++] = $geti($_.cws, $_.in, $_.e1dcws); //#24186
        $k[$j++] = $_.e1ecws; //#24186
        $k[$j++] = 256; //#24186
        $k[$j++] = 355; //#24186
        $_.rscodes(); //#24186
        var _M9 = $k[--$j]; //#24187
        $put($_.dcwsb, $_.out, $geti(_M9, 0, $_.e1dcws)); //#24187
        $put($_.ecwsb, $_.out, $geti(_M9, $_.e1dcws, $_.e1ecws)); //#24188
        $_.in = $f($_.in + $_.e1dcws); //#24189
        $_.out = $_.out + 1; //#24189
    } //#24189
    for (var _MN = 0, _MO = $_.e2nb; _MN < _MO; _MN++) { //#24196
        $k[$j++] = $geti($_.cws, $_.in, $_.e2dcws); //#24192
        $k[$j++] = $_.e2ecws; //#24192
        $k[$j++] = 256; //#24192
        $k[$j++] = 355; //#24192
        $_.rscodes(); //#24192
        var _MU = $k[--$j]; //#24193
        $put($_.dcwsb, $_.out, $geti(_MU, 0, $_.e2dcws)); //#24193
        $put($_.ecwsb, $_.out, $geti(_MU, $_.e2dcws, $_.e2ecws)); //#24194
        $_.in = $f($_.in + $_.e2dcws); //#24195
        $_.out = $_.out + 1; //#24195
    } //#24195
    for (var _Mi = 0, _Mj = $_.e3nb; _Mi < _Mj; _Mi++) { //#24202
        $k[$j++] = $geti($_.cws, $_.in, $_.e3dcws); //#24198
        $k[$j++] = $_.e3ecws; //#24198
        $k[$j++] = 256; //#24198
        $k[$j++] = 355; //#24198
        $_.rscodes(); //#24198
        var _Mp = $k[--$j]; //#24199
        $put($_.dcwsb, $_.out, $geti(_Mp, 0, $_.e3dcws)); //#24199
        $put($_.ecwsb, $_.out, $geti(_Mp, $_.e3dcws, $_.e3ecws)); //#24200
        $_.in = $f($_.in + $_.e3dcws); //#24201
        $_.out = $_.out + 1; //#24201
    } //#24201
    $_.cws = $a($_.ncws); //#24205
    $_.cw = 0; //#24206
    for (var _N6 = 0, _N5 = $_.dcwsb.length - 1; _N6 <= _N5; _N6 += 1) { //#24211
        $_.i = _N6; //#24208
        var _N9 = $get($_.dcwsb, $_.i); //#24209
        $puti($_.cws, $_.cw, _N9); //#24209
        $_.cw = _N9.length + $_.cw; //#24209
        var _NF = $get($_.ecwsb, $_.i); //#24210
        $puti($_.cws, $_.cw, _NF); //#24210
        $_.cw = _NF.length + $_.cw; //#24210
    } //#24210
    $k[$j++] = Infinity; //#24216
    var _NJ = $_.ncws; //#24215
    var _NK = 12; //#24215
    var _NL = _NJ - 1; //#24215
    if ((_NJ - 1) > 12) { //#24215
        var _ = _NK; //#24215
        _NK = _NL; //#24215
        _NL = _; //#24215
    } //#24215
    for (var _NN = 0, _NM = _NL; _NN <= _NM; _NN += 1) { //#24217
        for (var _NQ = _NN, _NP = $_.ncws - 1; _NQ <= _NP; _NQ += 13) { //#24216
            $k[$j++] = _NQ; //#24216
            if (_NQ < $_.ncws) { //#24216
                var _NU = $get($_.cws, $k[--$j]); //#24216
                $k[$j++] = _NU; //#24216
            } else { //#24216
                $j--; //#24216
            } //#24216
        } //#24216
    } //#24216
    $_.cws = $a(); //#24216
    if ($_.rbit > 0) { //#24226
        $_.pad = $a($_.cws.length + 1); //#24222
        $puti($_.pad, 0, $_.cws); //#24223
        $put($_.pad, $_.pad.length - 1, 0); //#24224
        $_.cws = $_.pad; //#24225
    } //#24225
    $k[$j++] = Infinity; //#24229
    for (var _Ng = 0, _Nh = $_.size * $_.size; _Ng < _Nh; _Ng++) { //#24229
        $k[$j++] = -1; //#24229
    } //#24229
    $_.pixs = $a(); //#24229
    $_.qmv = function() {
        var _Nk = $k[--$j]; //#24230
        var _Nl = $k[--$j]; //#24230
        $k[$j++] = $f(_Nl + (_Nk * $_.size)); //#24230
    }; //#24230
    if ($_.alnn != 0) { //#24289
        $_.trmv = function() {
            var _No = $k[--$j]; //#24234
            var _Nq = $k[--$j]; //#24234
            $k[$j++] = $f(($f(($f((_No * $_.size) + $_.size)) - 1)) - _Nq); //#24234
        }; //#24234
        $_.aplot = function() {
            var _Nr = $k[--$j]; //#24236
            var _Ns = $k[--$j]; //#24236
            var _Nt = $k[--$j]; //#24236
            $k[$j++] = _Nr; //#24236
            $k[$j++] = _Nt; //#24236
            $k[$j++] = _Ns; //#24236
            $k[$j++] = _Nr; //#24236
            $k[$j++] = _Ns; //#24236
            $k[$j++] = _Nt; //#24236
            $_.trmv(); //#24236
            var _Nv = $k[--$j]; //#24236
            $put($_.pixs, _Nv, $k[--$j]); //#24236
            $_.trmv(); //#24237
            var _Ny = $k[--$j]; //#24237
            $put($_.pixs, _Ny, $k[--$j]); //#24237
        }; //#24237
        $_.i = 0; //#24239
        $_.stag = 0; //#24239
        for (;;) { //#24261
            if ($_.i >= $_.size) { //#24240
                break; //#24240
            } //#24240
            for (var _O4 = 0, _O3 = $f($_.size - 1); _O4 <= _O3; _O4 += 1) { //#24254
                $_.j = _O4; //#24242
                if ($f($_.j + $_.alnr) < $_.size) { //#24248
                    $k[$j++] = (((((~~($_.j / $_.alnk)) + $_.stag) % 2) == 0) && (!(($_.i == 0) && ($_.j < $_.alnk)))) || (($_.j % $_.alnk) == 0); //#24246
                } else { //#24248
                    $k[$j++] = ($f($_.alnn + $_.stag) % 2) == 0; //#24248
                } //#24248
                if ($k[--$j]) { //#24253
                    $k[$j++] = $_.j; //#24251
                    $k[$j++] = $_.i; //#24251
                    $k[$j++] = 1; //#24251
                    $_.aplot(); //#24251
                    var _OL = $_.j; //#24252
                    var _OM = $_.i; //#24252
                    $k[$j++] = _OL + 1; //#24252
                    $k[$j++] = _OM + 1; //#24252
                    if (((_OM + 1) < $_.size) && ((_OL + 1) < $_.size)) { //#24252
                        $k[$j++] = 0; //#24252
                        $_.aplot(); //#24252
                    } else { //#24252
                        $j -= 2; //#24252
                    } //#24252
                } //#24252
            } //#24252
            if ($f($_.i + $_.alnr) == $_.size) { //#24258
                $_.i = $f($f($_.i + $_.alnr) - 1); //#24256
            } else { //#24258
                $_.i = $f($_.i + $_.alnk); //#24258
            } //#24258
            $_.stag = 1 - $_.stag; //#24260
        } //#24260
        for (var _Ob = $_.alnk, _Oc = $_.alnk, _Oa = $f($_.size - 2); _Oc < 0 ? _Ob >= _Oa : _Ob <= _Oa; _Ob += _Oc) { //#24288
            $_.i = _Ob; //#24263
            if (((~~($_.i / $_.alnk)) % 2) != 0) { //#24275
                $k[$j++] = $_.pixs; //#24265
                $k[$j++] = 0; //#24265
                $k[$j++] = $_.i - 1; //#24265
                $_.trmv(); //#24265
                var _Oh = $k[--$j]; //#24265
                $put($k[--$j], _Oh, 0); //#24265
                $k[$j++] = $_.pixs; //#24266
                $k[$j++] = 0; //#24266
                $k[$j++] = $_.i + 1; //#24266
                $_.trmv(); //#24266
                var _Ol = $k[--$j]; //#24266
                $put($k[--$j], _Ol, 0); //#24266
                $k[$j++] = $_.pixs; //#24267
                $k[$j++] = 1; //#24267
                $k[$j++] = $_.i - 1; //#24267
                $_.trmv(); //#24267
                var _Op = $k[--$j]; //#24267
                $put($k[--$j], _Op, 0); //#24267
                $k[$j++] = $_.pixs; //#24268
                $k[$j++] = 1; //#24268
                $k[$j++] = $_.i; //#24268
                $_.trmv(); //#24268
                var _Ot = $k[--$j]; //#24268
                $put($k[--$j], _Ot, 0); //#24268
                $k[$j++] = $_.pixs; //#24269
                $k[$j++] = 1; //#24269
                $k[$j++] = $_.i + 1; //#24269
                $_.trmv(); //#24269
                var _Ox = $k[--$j]; //#24269
                $put($k[--$j], _Ox, 0); //#24269
                $k[$j++] = $_.pixs; //#24270
                $k[$j++] = $_.i - 1; //#24270
                $k[$j++] = 0; //#24270
                $_.trmv(); //#24270
                var _P1 = $k[--$j]; //#24270
                $put($k[--$j], _P1, 0); //#24270
                $k[$j++] = $_.pixs; //#24271
                $k[$j++] = $_.i + 1; //#24271
                $k[$j++] = 0; //#24271
                $_.trmv(); //#24271
                var _P5 = $k[--$j]; //#24271
                $put($k[--$j], _P5, 0); //#24271
                $k[$j++] = $_.pixs; //#24272
                $k[$j++] = $_.i - 1; //#24272
                $k[$j++] = 1; //#24272
                $_.trmv(); //#24272
                var _P9 = $k[--$j]; //#24272
                $put($k[--$j], _P9, 0); //#24272
                $k[$j++] = $_.pixs; //#24273
                $k[$j++] = $_.i; //#24273
                $k[$j++] = 1; //#24273
                $_.trmv(); //#24273
                var _PD = $k[--$j]; //#24273
                $put($k[--$j], _PD, 0); //#24273
                $k[$j++] = $_.pixs; //#24274
                $k[$j++] = $_.i + 1; //#24274
                $k[$j++] = 1; //#24274
                $_.trmv(); //#24274
                var _PH = $k[--$j]; //#24274
                $put($k[--$j], _PH, 0); //#24274
            } //#24274
            $k[$j++] = $_.pixs; //#24276
            $k[$j++] = $f($_.size - 1); //#24276
            $k[$j++] = $_.i - 1; //#24276
            $_.trmv(); //#24276
            var _PM = $k[--$j]; //#24276
            if ($get($k[--$j], _PM) != 1) { //#24287
                $k[$j++] = $_.pixs; //#24277
                $k[$j++] = $f($_.size - 1); //#24277
                $k[$j++] = $_.i - 1; //#24277
                $_.trmv(); //#24277
                var _PS = $k[--$j]; //#24277
                $put($k[--$j], _PS, 0); //#24277
                $k[$j++] = $_.pixs; //#24278
                $k[$j++] = $f($_.size - 2); //#24278
                $k[$j++] = $_.i - 1; //#24278
                $_.trmv(); //#24278
                var _PX = $k[--$j]; //#24278
                $put($k[--$j], _PX, 0); //#24278
                $k[$j++] = $_.pixs; //#24279
                $k[$j++] = $f($_.size - 2); //#24279
                $k[$j++] = $_.i; //#24279
                $_.trmv(); //#24279
                var _Pc = $k[--$j]; //#24279
                $put($k[--$j], _Pc, 0); //#24279
                $k[$j++] = $_.pixs; //#24280
                $k[$j++] = $f($_.size - 2); //#24280
                $k[$j++] = $_.i + 1; //#24280
                $_.trmv(); //#24280
                var _Ph = $k[--$j]; //#24280
                $put($k[--$j], _Ph, 0); //#24280
                $k[$j++] = $_.pixs; //#24281
                $k[$j++] = $f($_.size - 1); //#24281
                $k[$j++] = $_.i + 1; //#24281
                $_.trmv(); //#24281
                var _Pm = $k[--$j]; //#24281
                $put($k[--$j], _Pm, 0); //#24281
                $k[$j++] = $_.pixs; //#24282
                $k[$j++] = $_.i - 1; //#24282
                $k[$j++] = $f($_.size - 1); //#24282
                $_.trmv(); //#24282
                var _Pr = $k[--$j]; //#24282
                $put($k[--$j], _Pr, 0); //#24282
                $k[$j++] = $_.pixs; //#24283
                $k[$j++] = $_.i - 1; //#24283
                $k[$j++] = $f($_.size - 2); //#24283
                $_.trmv(); //#24283
                var _Pw = $k[--$j]; //#24283
                $put($k[--$j], _Pw, 0); //#24283
                $k[$j++] = $_.pixs; //#24284
                $k[$j++] = $_.i; //#24284
                $k[$j++] = $f($_.size - 2); //#24284
                $_.trmv(); //#24284
                var _Q1 = $k[--$j]; //#24284
                $put($k[--$j], _Q1, 0); //#24284
                $k[$j++] = $_.pixs; //#24285
                $k[$j++] = $_.i + 1; //#24285
                $k[$j++] = $f($_.size - 2); //#24285
                $_.trmv(); //#24285
                var _Q6 = $k[--$j]; //#24285
                $put($k[--$j], _Q6, 0); //#24285
                $k[$j++] = $_.pixs; //#24286
                $k[$j++] = $_.i + 1; //#24286
                $k[$j++] = $f($_.size - 1); //#24286
                $_.trmv(); //#24286
                var _QB = $k[--$j]; //#24286
                $put($k[--$j], _QB, 0); //#24286
            } //#24286
        } //#24286
    } //#24286
    if (!bwipp_hanxin.__24313__) { //#24313
        $_ = Object.create($_); //#24313
        $_.fpat = $a([$a([1, 1, 1, 1, 1, 1, 1, 0]), $a([1, 0, 0, 0, 0, 0, 0, 0]), $a([1, 0, 1, 1, 1, 1, 1, 0]), $a([1, 0, 1, 0, 0, 0, 0, 0]), $a([1, 0, 1, 0, 1, 1, 1, 0]), $a([1, 0, 1, 0, 1, 1, 1, 0]), $a([1, 0, 1, 0, 1, 1, 1, 0]), $a([0, 0, 0, 0, 0, 0, 0, 0])]); //#24302
        $_.fpat2 = $a([$a([1, 1, 1, 0, 1, 0, 1, 0]), $a([1, 1, 1, 0, 1, 0, 1, 0]), $a([1, 1, 1, 0, 1, 0, 1, 0]), $a([0, 0, 0, 0, 1, 0, 1, 0]), $a([1, 1, 1, 1, 1, 0, 1, 0]), $a([0, 0, 0, 0, 0, 0, 1, 0]), $a([1, 1, 1, 1, 1, 1, 1, 0]), $a([0, 0, 0, 0, 0, 0, 0, 0])]); //#24312
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_hanxin.$ctx[id] = $_[id]); //#24312
        bwipp_hanxin.__24313__ = 1; //#24312
        $_ = Object.getPrototypeOf($_); //#24312
    } //#24312
    for (var _QY = 0, _QX = $_.fpat.length - 1; _QY <= _QX; _QY += 1) { //#24325
        $_.y = _QY; //#24315
        for (var _Qc = 0, _Qb = $get($_.fpat, 0).length - 1; _Qc <= _Qb; _Qc += 1) { //#24324
            $_.x = _Qc; //#24317
            $_.fpb = $get($get($_.fpat, $_.y), $_.x); //#24318
            $_.fpb2 = $get($get($_.fpat2, $_.y), $_.x); //#24319
            $k[$j++] = $_.pixs; //#24320
            $k[$j++] = $_.x; //#24320
            $k[$j++] = $_.y; //#24320
            $_.qmv(); //#24320
            var _Qr = $k[--$j]; //#24320
            $put($k[--$j], _Qr, $_.fpb); //#24320
            $k[$j++] = $_.pixs; //#24321
            $k[$j++] = $f($f($_.size - $_.x) - 1); //#24321
            $k[$j++] = $_.y; //#24321
            $_.qmv(); //#24321
            var _Qy = $k[--$j]; //#24321
            $put($k[--$j], _Qy, $_.fpb); //#24321
            $k[$j++] = $_.pixs; //#24322
            $k[$j++] = $f($f($_.size - $_.x) - 1); //#24322
            $k[$j++] = $f($f($_.size - $_.y) - 1); //#24322
            $_.qmv(); //#24322
            var _R6 = $k[--$j]; //#24322
            $put($k[--$j], _R6, $_.fpb); //#24322
            $k[$j++] = $_.pixs; //#24323
            $k[$j++] = $_.x; //#24323
            $k[$j++] = $f($f($_.size - $_.y) - 1); //#24323
            $_.qmv(); //#24323
            var _RD = $k[--$j]; //#24323
            $put($k[--$j], _RD, $_.fpb2); //#24323
        } //#24323
    } //#24323
    $_.functionmap = $a([$a([$a([0, 8]), $a([$f($_.size - 1), $f($_.size - 9)])]), $a([$a([1, 8]), $a([$f($_.size - 2), $f($_.size - 9)])]), $a([$a([2, 8]), $a([$f($_.size - 3), $f($_.size - 9)])]), $a([$a([3, 8]), $a([$f($_.size - 4), $f($_.size - 9)])]), $a([$a([4, 8]), $a([$f($_.size - 5), $f($_.size - 9)])]), $a([$a([5, 8]), $a([$f($_.size - 6), $f($_.size - 9)])]), $a([$a([6, 8]), $a([$f($_.size - 7), $f($_.size - 9)])]), $a([$a([7, 8]), $a([$f($_.size - 8), $f($_.size - 9)])]), $a([$a([8, 8]), $a([$f($_.size - 9), $f($_.size - 9)])]), $a([$a([8, 7]), $a([$f($_.size - 9), $f($_.size - 8)])]), $a([$a([8, 6]), $a([$f($_.size - 9), $f($_.size - 7)])]), $a([$a([8, 5]), $a([$f($_.size - 9), $f($_.size - 6)])]), $a([$a([8, 4]), $a([$f($_.size - 9), $f($_.size - 5)])]), $a([$a([8, 3]), $a([$f($_.size - 9), $f($_.size - 4)])]), $a([$a([8, 2]), $a([$f($_.size - 9), $f($_.size - 3)])]), $a([$a([8, 1]), $a([$f($_.size - 9), $f($_.size - 2)])]), $a([$a([8, 0]), $a([$f($_.size - 9), $f($_.size - 1)])]), $a([$a([$f($_.size - 9), 0]), $a([8, $f($_.size - 1)])]), $a([$a([$f($_.size - 9), 1]), $a([8, $f($_.size - 2)])]), $a([$a([$f($_.size - 9), 2]), $a([8, $f($_.size - 3)])]), $a([$a([$f($_.size - 9), 3]), $a([8, $f($_.size - 4)])]), $a([$a([$f($_.size - 9), 4]), $a([8, $f($_.size - 5)])]), $a([$a([$f($_.size - 9), 5]), $a([8, $f($_.size - 6)])]), $a([$a([$f($_.size - 9), 6]), $a([8, $f($_.size - 7)])]), $a([$a([$f($_.size - 9), 7]), $a([8, $f($_.size - 8)])]), $a([$a([$f($_.size - 9), 8]), $a([8, $f($_.size - 9)])]), $a([$a([$f($_.size - 8), 8]), $a([7, $f($_.size - 9)])]), $a([$a([$f($_.size - 7), 8]), $a([6, $f($_.size - 9)])]), $a([$a([$f($_.size - 6), 8]), $a([5, $f($_.size - 9)])]), $a([$a([$f($_.size - 5), 8]), $a([4, $f($_.size - 9)])]), $a([$a([$f($_.size - 4), 8]), $a([3, $f($_.size - 9)])]), $a([$a([$f($_.size - 3), 8]), $a([2, $f($_.size - 9)])]), $a([$a([$f($_.size - 2), 8]), $a([1, $f($_.size - 9)])]), $a([$a([$f($_.size - 1), 8]), $a([0, $f($_.size - 9)])])]); //#24347
    var _U0 = $_.functionmap; //#24348
    for (var _U1 = 0, _U2 = _U0.length; _U1 < _U2; _U1++) { //#24350
        $forall($get(_U0, _U1), function() { //#24349
            $forall($k[--$j]); //#24349
            $_.qmv(); //#24349
            $put($_.pixs, $k[--$j], 0); //#24349
        }); //#24349
    } //#24349
    var _UD = $a([function() {
        $j -= 2; //#24353
        $k[$j++] = 1; //#24353
    }, function() {
        var _U7 = $k[--$j]; //#24354
        var _U8 = $k[--$j]; //#24354
        $k[$j++] = $f(_U8 + _U7) % 2; //#24354
    }, function() {
        var _U9 = $k[--$j]; //#24355
        var _UA = $k[--$j]; //#24355
        $k[$j++] = ($f(($f(_U9 + _UA) % 3) + (_UA % 3))) % 2; //#24355
    }, function() {
        var _UB = $k[--$j]; //#24356
        var _UC = $k[--$j]; //#24356
        $k[$j++] = ($f((_UC % _UB) + ($f((_UB % _UC) + ($f((_UB % 3) + (_UC % 3))))))) % 2; //#24357
    }]); //#24357
    $_.maskfuncs = _UD; //#24358
    if ($_.mask != -1) { //#24362
        $_.maskfuncs = $a([$get($_.maskfuncs, $_.mask - 1)]); //#24360
        $_.bestmaskval = $_.mask - 1; //#24361
    } //#24361
    $_.masks = $a($_.maskfuncs.length); //#24363
    for (var _UO = 0, _UN = $_.masks.length - 1; _UO <= _UN; _UO += 1) { //#24377
        $_.m = _UO; //#24365
        $_.mask = $a($_.size * $_.size); //#24366
        for (var _UU = 0, _UT = $f($_.size - 1); _UU <= _UT; _UU += 1) { //#24375
            $_.j = _UU; //#24368
            for (var _UX = 0, _UW = $f($_.size - 1); _UX <= _UW; _UX += 1) { //#24374
                $_.i = _UX; //#24370
                $k[$j++] = $_.i + 1; //#24371
                $k[$j++] = $_.j + 1; //#24371
                if ($get($_.maskfuncs, $_.m)() === true) {
                    break;
                } //#24371
                var _Ud = $k[--$j]; //#24371
                $k[$j++] = _Ud == 0; //#24372
                $k[$j++] = $_.pixs; //#24372
                $k[$j++] = $_.i; //#24372
                $k[$j++] = $_.j; //#24372
                $_.qmv(); //#24372
                var _Uh = $k[--$j]; //#24372
                var _Uj = $get($k[--$j], _Uh); //#24372
                var _Uk = $k[--$j]; //#24372
                var _Ul = (_Uk && (_Uj == -1)) ? 1 : 0; //#24372
                $k[$j++] = _Ul; //#24373
                $k[$j++] = $_.mask; //#24373
                $k[$j++] = $_.i; //#24373
                $k[$j++] = $_.j; //#24373
                $_.qmv(); //#24373
                var _Up = $k[--$j]; //#24373
                var _Uq = $k[--$j]; //#24373
                $put(_Uq, _Up, $k[--$j]); //#24373
            } //#24373
        } //#24373
        $put($_.masks, $_.m, $_.mask); //#24376
    } //#24376
    $_.posx = 0; //#24380
    $_.posy = 0; //#24381
    $_.num = 0; //#24382
    for (;;) { //#24392
        if ($_.posy == $_.size) { //#24384
            break; //#24384
        } //#24384
        $k[$j++] = $_.pixs; //#24385
        $k[$j++] = $_.posx; //#24385
        $k[$j++] = $_.posy; //#24385
        $_.qmv(); //#24385
        var _V0 = $k[--$j]; //#24385
        if ($get($k[--$j], _V0) == -1) { //#24389
            var _V5 = $get($_.cws, ~~($_.num / 8)); //#24386
            var _V7 = -(7 - ($_.num % 8)); //#24386
            $k[$j++] = ((_V7 < 0 ? _V5 >>> -_V7 : _V5 << _V7)) & 1; //#24387
            $k[$j++] = $_.pixs; //#24387
            $k[$j++] = $_.posx; //#24387
            $k[$j++] = $_.posy; //#24387
            $_.qmv(); //#24387
            var _VB = $k[--$j]; //#24387
            var _VC = $k[--$j]; //#24387
            $put(_VC, _VB, $k[--$j]); //#24387
            $_.num = $_.num + 1; //#24388
        } //#24388
        $_.posx = $_.posx + 1; //#24390
        if ($_.posx == $_.size) { //#24391
            $_.posx = 0; //#24391
            $_.posy = $_.posy + 1; //#24391
        } //#24391
    } //#24391
    $_.evalfulln1n3 = function() {
        $_.scrle = $k[--$j]; //#24396
        $k[$j++] = 'scr1'; //#24398
        $k[$j++] = 0; //#24398
        $forall($_.scrle, function() { //#24398
            var _VL = $k[--$j]; //#24398
            $k[$j++] = _VL; //#24398
            if (_VL >= 3) { //#24398
                var _VM = $k[--$j]; //#24398
                var _VO = $f($k[--$j] + (_VM * 4)); //#24398
                $k[$j++] = _VO; //#24398
                $k[$j++] = _VO; //#24398
            } //#24398
            $j--; //#24398
        }); //#24398
        var _VP = $k[--$j]; //#24398
        $_[$k[--$j]] = _VP; //#24398
        $_.scr3 = 0; //#24399
        for (var _VT = 5, _VS = $_.scrle.length - 1; _VT <= _VS; _VT += 2) { //#24415
            $_.j = _VT; //#24402
            if (($get($_.scrle, $_.j) % 3) == 0) { //#24414
                $_.fact = ~~($get($_.scrle, $_.j) / 3); //#24404
                var _Vc = $geti($_.scrle, $_.j - 4, 4); //#24405
                for (var _Vd = 0, _Ve = _Vc.length; _Vd < _Ve; _Vd++) { //#24405
                    $k[$j++] = $get(_Vc, _Vd) == $_.fact; //#24405
                } //#24405
                var _Vh = $k[--$j]; //#24405
                var _Vi = $k[--$j]; //#24405
                var _Vj = $k[--$j]; //#24405
                var _Vk = $k[--$j]; //#24405
                if (_Vk && (_Vj && (_Vi && _Vh))) { //#24413
                    if (($_.j == 5) || (($_.j + 2) >= $_.scrle.length)) { //#24410
                        $_.scr3 = $_.scr3 + 50; //#24407
                    } else { //#24410
                        if (($get($_.scrle, $_.j - 5) >= 3) || ($get($_.scrle, $_.j + 1) >= 3)) { //#24411
                            $_.scr3 = $_.scr3 + 50; //#24410
                        } //#24410
                    } //#24410
                } //#24410
            } //#24410
        } //#24410
        for (var _Vy = 1, _Vx = $_.scrle.length - 5; _Vy <= _Vx; _Vy += 2) { //#24431
            $_.j = _Vy; //#24418
            if (($get($_.scrle, $_.j) % 3) == 0) { //#24430
                $_.fact = ~~($get($_.scrle, $_.j) / 3); //#24420
                var _W7 = $geti($_.scrle, $_.j + 1, 4); //#24421
                for (var _W8 = 0, _W9 = _W7.length; _W8 < _W9; _W8++) { //#24421
                    $k[$j++] = $get(_W7, _W8) == $_.fact; //#24421
                } //#24421
                var _WC = $k[--$j]; //#24421
                var _WD = $k[--$j]; //#24421
                var _WE = $k[--$j]; //#24421
                var _WF = $k[--$j]; //#24421
                if (_WF && (_WE && (_WD && _WC))) { //#24429
                    if (($_.j == 1) || (($_.j + 6) >= $_.scrle.length)) { //#24426
                        $_.scr3 = $_.scr3 + 50; //#24423
                    } else { //#24426
                        if (($get($_.scrle, $_.j - 1) >= 3) || ($get($_.scrle, $_.j + 5) >= 3)) { //#24427
                            $_.scr3 = $_.scr3 + 50; //#24426
                        } //#24426
                    } //#24426
                } //#24426
            } //#24426
        } //#24426
        $k[$j++] = $_.scr1; //#24432
        $k[$j++] = $_.scr3; //#24432
    }; //#24432
    $_.evalfull = function() {
        $_.sym = $k[--$j]; //#24437
        $_.n1 = 0; //#24439
        $_.n3 = 0; //#24439
        $_.rle = $a($f($_.size + 1)); //#24440
        $_.lastpairs = $a($_.size); //#24441
        $_.thispairs = $a($_.size); //#24442
        $_.sizeadd1 = $f($_.size + 1); //#24443
        for (var _Wd = 0, _Wc = $f($_.size - 1); _Wd <= _Wc; _Wd += 1) { //#24468
            $_.i = _Wd; //#24445
            $k[$j++] = Infinity; //#24448
            var _Wf = $_.size; //#24449
            $k[$j++] = 0; //#24451
            $k[$j++] = 0; //#24451
            for (var _Wh = $_.i, _Wi = _Wf, _Wg = $f((_Wf * _Wf) - 1); _Wi < 0 ? _Wh >= _Wg : _Wh <= _Wg; _Wh += _Wi) { //#24451
                var _Wk = $get($_.sym, _Wh); //#24450
                var _Wl = $k[--$j]; //#24450
                $k[$j++] = _Wk; //#24450
                if ($eq(_Wl, _Wk)) { //#24450
                    var _Wm = $k[--$j]; //#24450
                    var _Wn = $k[--$j]; //#24450
                    $k[$j++] = $f(_Wn + 1); //#24450
                    $k[$j++] = _Wm; //#24450
                } else { //#24450
                    var _Wo = $k[--$j]; //#24450
                    $k[$j++] = 1; //#24450
                    $k[$j++] = _Wo; //#24450
                } //#24450
            } //#24450
            $j--; //#24452
            var _Wq = $counttomark() + 2; //#24453
            $astore($geti($_.rle, 0, _Wq - 2)); //#24453
            $_.evalfulln1n3(); //#24454
            $_.n3 = $f($k[--$j] + $_.n3); //#24454
            $_.n1 = $f($k[--$j] + $_.n1); //#24454
            $j--; //#24455
            $_.symrow = $geti($_.sym, $_.i * $_.size, $_.size); //#24458
            $k[$j++] = Infinity; //#24459
            var _X1 = $_.symrow; //#24460
            $k[$j++] = 0; //#24462
            $k[$j++] = 0; //#24462
            for (var _X2 = 0, _X3 = _X1.length; _X2 < _X3; _X2++) { //#24462
                var _X4 = $get(_X1, _X2); //#24462
                var _X5 = $k[--$j]; //#24461
                $k[$j++] = _X4; //#24461
                if ($eq(_X5, _X4)) { //#24461
                    var _X6 = $k[--$j]; //#24461
                    var _X7 = $k[--$j]; //#24461
                    $k[$j++] = $f(_X7 + 1); //#24461
                    $k[$j++] = _X6; //#24461
                } else { //#24461
                    var _X8 = $k[--$j]; //#24461
                    $k[$j++] = 1; //#24461
                    $k[$j++] = _X8; //#24461
                } //#24461
            } //#24461
            $j--; //#24463
            var _XA = $counttomark() + 2; //#24464
            $astore($geti($_.rle, 0, _XA - 2)); //#24464
            $_.evalfulln1n3(); //#24465
            $_.n3 = $f($k[--$j] + $_.n3); //#24465
            $_.n1 = $f($k[--$j] + $_.n1); //#24465
            $j--; //#24466
        } //#24466
        $k[$j++] = $f($_.n1 + $_.n3); //#24470
    }; //#24470
    $_.bestscore = 999999999; //#24474
    for (var _XK = 0, _XJ = $_.masks.length - 1; _XK <= _XJ; _XK += 1) { //#24492
        $_.m = _XK; //#24476
        $_.masksym = $a($_.size * $_.size); //#24477
        for (var _XR = 0, _XQ = $f(($_.size * $_.size) - 1); _XR <= _XQ; _XR += 1) { //#24481
            $_.i = _XR; //#24479
            $put($_.masksym, $_.i, $xo($get($_.pixs, $_.i), $get($get($_.masks, $_.m), $_.i))); //#24480
        } //#24480
        if ($_.masks.length != 1) { //#24490
            $k[$j++] = $_.masksym; //#24483
            $_.evalfull(); //#24483
            $_.score = $k[--$j]; //#24483
            if ($_.score < $_.bestscore) { //#24488
                $_.bestsym = $_.masksym; //#24485
                $_.bestmaskval = $_.m; //#24486
                $_.bestscore = $_.score; //#24487
            } //#24487
        } else { //#24490
            $_.bestsym = $_.masksym; //#24490
        } //#24490
    } //#24490
    $_.pixs = $_.bestsym; //#24493
    $_.funval = (((((~~($f($_.size - 21) / 2)) + 20) * 4) + $_.eclval) * 4) + $_.bestmaskval; //#24496
    $k[$j++] = $a([($_.funval & 3840) >>> 8, ($_.funval & 240) >>> 4, $_.funval & 15]); //#24500
    $k[$j++] = 4; //#24500
    $k[$j++] = 16; //#24500
    $k[$j++] = 19; //#24500
    $_.rscodes(); //#24500
    $_.funvals = $k[--$j]; //#24500
    $k[$j++] = Infinity; //#24505
    $forall($_.funvals, function() { //#24504
        $k[$j++] = 4; //#24503
        $_.tobin(); //#24503
        $forall($k[--$j], function() { //#24503
            var _Xw = $k[--$j]; //#24503
            $k[$j++] = $f(_Xw - 48); //#24503
        }); //#24503
    }); //#24503
    $k[$j++] = 0; //#24505
    $k[$j++] = 1; //#24505
    $k[$j++] = 0; //#24505
    $k[$j++] = 1; //#24505
    $k[$j++] = 0; //#24505
    $k[$j++] = 1; //#24505
    $_.funbits = $a(); //#24505
    for (var _Y0 = 0, _Xz = $_.functionmap.length - 1; _Y0 <= _Xz; _Y0 += 1) { //#24512
        $_.i = _Y0; //#24508
        $forall($get($_.functionmap, $_.i), function() { //#24511
            var _Y5 = $k[--$j]; //#24510
            $k[$j++] = $_.pixs; //#24510
            $aload(_Y5); //#24510
            $_.qmv(); //#24510
            var _Y9 = $k[--$j]; //#24510
            $put($k[--$j], _Y9, $get($_.funbits, $_.i)); //#24510
        }); //#24510
    } //#24510
    var _YH = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $_.pixs],
        ["pixx", $_.size],
        ["pixy", $_.size],
        ["height", ($_.size * 2) / 72],
        ["width", ($_.size * 2) / 72],
        ["opt", $_.options]
    ]); //#24522
    $k[$j++] = _YH; //#24525
    if (!$_.dontdraw) { //#24525
        bwipp_renmatrix(); //#24525
    } //#24525
    $_ = Object.getPrototypeOf($_); //#24527
    $_ = Object.getPrototypeOf($_); //#24529
}

function bwipp_dotcode() {
    $_ = Object.create($_); //#24560
    $_.dontdraw = false; //#24563
    $_.rows = -1; //#24564
    $_.columns = -1; //#24565
    $_.ratio = -1; //#24566
    $_.parse = false; //#24567
    $_.parsefnc = false; //#24568
    $_.raw = false; //#24569
    $_.fast = false; //#24570
    $_.mask = -1; //#24571
    $k[$j++] = $_; //#24573
    bwipp_processoptions(); //#24573
    $_.options = $k[--$j]; //#24573
    $_.barcode = $k[--$j]; //#24574
    if ($_.rows != -1) { //#24580
        if ($_.rows < 5) { //#24579
            $k[$j++] = 'bwipp.dotcodeBadRows#24578'; //#24578
            $k[$j++] = "There must be at least 5 rows"; //#24578
            bwipp_raiseerror(); //#24578
        } //#24578
    } //#24578
    if ($_.columns != -1) { //#24586
        if ($_.columns < 5) { //#24585
            $k[$j++] = 'bwipp.dotcodeBadColumns#24584'; //#24584
            $k[$j++] = "There must be at least 5 columns"; //#24584
            bwipp_raiseerror(); //#24584
        } //#24584
    } //#24584
    if ((($_.rows != -1) && ($_.columns != -1)) && ((($_.rows + $_.columns) % 2) != 1)) { //#24590
        $k[$j++] = 'bwipp.dotcodeRowsColumnsBadParity#24589'; //#24589
        $k[$j++] = "Sum of rows and columns must be odd"; //#24589
        bwipp_raiseerror(); //#24589
    } //#24589
    if ((($_.ratio == -1) && ($_.rows == -1)) && ($_.columns == -1)) { //#24595
        $_.ratio = 3 / 2; //#24594
    } //#24594
    if ($_.ratio != -1) { //#24600
        if ($_.ratio <= 0) { //#24599
            $k[$j++] = 'bwipp.dotcodeRatio#24598'; //#24598
            $k[$j++] = "The ratio must be greater than 0"; //#24598
            bwipp_raiseerror(); //#24598
        } //#24598
    } //#24598
    if ($_.mask != -1) { //#24606
        if (($_.mask < 0) || ($_.mask > 3)) { //#24605
            $k[$j++] = 'bwipp.dotcodeBadMask#24604'; //#24604
            $k[$j++] = "Valid mask values are 0 to 3"; //#24604
            bwipp_raiseerror(); //#24604
        } //#24604
    } //#24604
    bwipp_loadctx(bwipp_dotcode) //#24608
    if (!bwipp_dotcode.__24621__) { //#24621
        $_ = Object.create($_); //#24621
        $_.laa = -1; //#24612
        $_.lab = -2; //#24612
        $_.lac = -3; //#24612
        $_.bin = -4; //#24612
        $_.sfa = -5; //#24613
        $_.sfb = -6; //#24613
        $_.sb2 = -7; //#24613
        $_.sb3 = -8; //#24613
        $_.sb4 = -9; //#24614
        $_.sb5 = -10; //#24614
        $_.sb6 = -11; //#24614
        $_.sfc = -12; //#24614
        $_.sc2 = -13; //#24615
        $_.sc3 = -14; //#24615
        $_.sc4 = -15; //#24615
        $_.sc5 = -16; //#24615
        $_.sc6 = -17; //#24616
        $_.sc7 = -18; //#24616
        $_.bsa = -19; //#24616
        $_.bsb = -20; //#24616
        $_.tma = -21; //#24617
        $_.tmb = -22; //#24617
        $_.tmc = -23; //#24617
        $_.tms = -24; //#24617
        $_.fn1 = -25; //#24618
        $_.fn2 = -26; //#24618
        $_.fn3 = -27; //#24618
        $_.crl = -28; //#24618
        $_.aim = -29; //#24619
        $_.m05 = -30; //#24619
        $_.m06 = -31; //#24619
        $_.m12 = -32; //#24619
        $_.mac = -33; //#24620
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_dotcode.$ctx[id] = $_[id]); //#24620
        bwipp_dotcode.__24621__ = 1; //#24620
        $_ = Object.getPrototypeOf($_); //#24620
    } //#24620
    var _N = new Map([
        ["parse", $_.parse],
        ["parsefnc", $_.parsefnc],
        ["eci", true],
        ["FNC1", $_.fn1],
        ["FNC3", $_.fn3]
    ]); //#24630
    $_.fncvals = _N; //#24631
    $k[$j++] = 'msg'; //#24632
    $k[$j++] = $_.barcode; //#24632
    $k[$j++] = $_.fncvals; //#24632
    bwipp_parseinput(); //#24632
    var _Q = $k[--$j]; //#24632
    $_[$k[--$j]] = _Q; //#24632
    $_.msglen = $_.msg.length; //#24633
    var _T = $_.msg; //#24636
    $k[$j++] = 'numecis'; //#24636
    $k[$j++] = 0; //#24636
    for (var _U = 0, _V = _T.length; _U < _V; _U++) { //#24636
        if ($get(_T, _U) <= -1000000) { //#24636
            var _X = $k[--$j]; //#24636
            $k[$j++] = $f(_X + 1); //#24636
        } //#24636
    } //#24636
    var _Y = $k[--$j]; //#24636
    $_[$k[--$j]] = _Y; //#24636
    $_.msgtmp = $a($f($_.msg.length + ($_.numecis * 6))); //#24637
    $_.j = 0; //#24638
    for (var _f = 0, _e = $_.msg.length - 1; _f <= _e; _f += 1) { //#24649
        var _h = $get($_.msg, _f); //#24640
        $k[$j++] = _h; //#24648
        if (_h <= -1000000) { //#24647
            var _l = $geti($cvrs($s(7), -$k[--$j], 10), 1, 6); //#24641
            for (var _m = 0, _n = _l.length; _m < _n; _m++) { //#24641
                $k[$j++] = $get(_l, _m); //#24641
            } //#24641
            $astore($a(6)); //#24641
            $puti($_.msgtmp, $_.j + 1, $k[--$j]); //#24642
            $put($_.msgtmp, $_.j, $_.fn2); //#24643
            $_.j = $_.j + 7; //#24644
        } else { //#24647
            $put($_.msgtmp, $_.j, $k[--$j]); //#24646
            $_.j = $_.j + 1; //#24647
        } //#24647
    } //#24647
    $_.msg = $_.msgtmp; //#24650
    $_.msglen = $_.msg.length; //#24651
    if (!bwipp_dotcode.__24720__) { //#24720
        $_ = Object.create($_); //#24720
        $_.charmaps = $a([$a([32, 32, "00"]), $a(["!", "!", "01"]), $a(["\"", "\"", "02"]), $a(["#", "#", "03"]), $a(["$", "$", "04"]), $a(["%", "%", "05"]), $a(["&", "&", "06"]), $a(["'", "'", "07"]), $a([40, 40, "08"]), $a([41, 41, "09"]), $a(["*", "*", "10"]), $a(["+", "+", "11"]), $a([",", ",", "12"]), $a(["-", "-", "13"]), $a([".", ".", "14"]), $a(["/", "/", "15"]), $a(["0", "0", "16"]), $a(["1", "1", "17"]), $a(["2", "2", "18"]), $a(["3", "3", "19"]), $a(["4", "4", "20"]), $a(["5", "5", "21"]), $a(["6", "6", "22"]), $a(["7", "7", "23"]), $a(["8", "8", "24"]), $a(["9", "9", "25"]), $a([":", ":", "26"]), $a([";", ";", "27"]), $a(["<", "<", "28"]), $a(["=", "=", "29"]), $a([">", ">", "30"]), $a(["?", "?", "31"]), $a(["@", "@", "32"]), $a(["A", "A", "33"]), $a(["B", "B", "34"]), $a(["C", "C", "35"]), $a(["D", "D", "36"]), $a(["E", "E", "37"]), $a(["F", "F", "38"]), $a(["G", "G", "39"]), $a(["H", "H", "40"]), $a(["I", "I", "41"]), $a(["J", "J", "42"]), $a(["K", "K", "43"]), $a(["L", "L", "44"]), $a(["M", "M", "45"]), $a(["N", "N", "46"]), $a(["O", "O", "47"]), $a(["P", "P", "48"]), $a(["Q", "Q", "49"]), $a(["R", "R", "50"]), $a(["S", "S", "51"]), $a(["T", "T", "52"]), $a(["U", "U", "53"]), $a(["V", "V", "54"]), $a(["W", "W", "55"]), $a(["X", "X", "56"]), $a(["Y", "Y", "57"]), $a(["Z", "Z", "58"]), $a(["[", "[", "59"]), $a([92, 92, "60"]), $a(["]", "]", "61"]), $a(["^", "^", "62"]), $a(["_", "_", "63"]), $a([0, "`", "64"]), $a([1, "a", "65"]), $a([2, "b", "66"]), $a([3, "c", "67"]), $a([4, "d", "68"]), $a([5, "e", "69"]), $a([6, "f", "70"]), $a([7, "g", "71"]), $a([8, "h", "72"]), $a([9, "i", "73"]), $a([10, "j", "74"]), $a([11, "k", "75"]), $a([12, "l", "76"]), $a([13, "m", "77"]), $a([14, "n", "78"]), $a([15, "o", "79"]), $a([16, "p", "80"]), $a([17, "q", "81"]), $a([18, "r", "82"]), $a([19, "s", "83"]), $a([20, "t", "84"]), $a([21, "u", "85"]), $a([22, "v", "86"]), $a([23, "w", "87"]), $a([24, "x", "88"]), $a([25, "y", "89"]), $a([26, "z", "90"]), $a([27, "{", "91"]), $a([28, "|", "92"]), $a([29, "}", "93"]), $a([30, "~", "94"]), $a([31, 127, "95"]), $a([$_.sfb, $_.crl, "96"]), $a([$_.sb2, 9, "97"]), $a([$_.sb3, 28, "98"]), $a([$_.sb4, 29, "99"]), $a([$_.sb5, 30, $_.aim]), $a([$_.sb6, $_.sfa, $_.laa]), $a([$_.lab, $_.laa, $_.sfb]), $a([$_.sc2, $_.sc2, $_.sb2]), $a([$_.sc3, $_.sc3, $_.sb3]), $a([$_.sc4, $_.sc4, $_.sb4]), $a([$_.lac, $_.lac, $_.lab]), $a([$_.fn1, $_.fn1, $_.fn1]), $a([$_.fn2, $_.fn2, $_.fn2]), $a([$_.fn3, $_.fn3, $_.fn3]), $a([$_.bsa, $_.bsa, $_.bsa]), $a([$_.bsb, $_.bsb, $_.bsb]), $a([$_.bin, $_.bin, $_.bin])]); //#24695
        $_.charvals = $a([new Map, new Map, new Map]); //#24698
        for (var _3d = 0, _3c = $_.charmaps.length - 1; _3d <= _3c; _3d += 1) { //#24707
            $_.i = _3d; //#24700
            $_.encs = $get($_.charmaps, $_.i); //#24701
            for (var _3h = 0; _3h <= 2; _3h += 1) { //#24706
                $_.j = _3h; //#24703
                var _3k = $get($_.encs, $_.j); //#24704
                $k[$j++] = _3k; //#24704
                if ($eq($type(_3k), 'stringtype')) { //#24704
                    var _3n = $get($k[--$j], 0); //#24704
                    $k[$j++] = _3n; //#24704
                } //#24704
                $put($get($_.charvals, $_.j), $k[--$j], $_.i); //#24705
            } //#24705
        } //#24705
        $_.Avals = $get($_.charvals, 0); //#24708
        $_.Bvals = $get($_.charvals, 1); //#24709
        $put($_.Bvals, $_.m05, 97); //#24710
        $put($_.Bvals, $_.m06, 98); //#24711
        $put($_.Bvals, $_.m12, 99); //#24712
        $put($_.Bvals, $_.mac, 100); //#24713
        $_.Cvals = $get($_.charvals, 2); //#24714
        $k[$j++] = Infinity; //#24716
        var _4H = $a([$_.sc2, $_.sc3, $_.sc4, $_.sc5, $_.sc6, $_.sc7, $_.tma, $_.tmb, $_.tmc, $_.tms]); //#24716
        $k[$j++] = 102; //#24716
        for (var _4I = 0, _4J = _4H.length; _4I < _4J; _4I++) { //#24716
            var _4M = $f($k[--$j] + 1); //#24716
            $k[$j++] = $get(_4H, _4I); //#24716
            $k[$j++] = _4M; //#24716
            $k[$j++] = _4M; //#24716
        } //#24716
        $j--; //#24716
        $_.BINvals = $d(); //#24717
        $_.A = 0; //#24719
        $_.B = 1; //#24719
        $_.C = 2; //#24719
        $_.BIN = 3; //#24719
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_dotcode.$ctx[id] = $_[id]); //#24719
        bwipp_dotcode.__24720__ = 1; //#24719
        $_ = Object.getPrototypeOf($_); //#24719
    } //#24719
    $k[$j++] = Infinity; //#24723
    for (var _4Q = 0, _4R = $_.msglen + 1; _4Q < _4R; _4Q++) { //#24723
        $k[$j++] = 0; //#24723
    } //#24723
    $_.nDigits = $a(); //#24723
    $k[$j++] = Infinity; //#24724
    for (var _4U = 0, _4V = $_.msglen + 1; _4U < _4V; _4U++) { //#24724
        $k[$j++] = false; //#24724
    } //#24724
    $_.SeventeenTen = $a(); //#24724
    $k[$j++] = Infinity; //#24725
    for (var _4Y = 0, _4Z = $_.msglen + 1; _4Y < _4Z; _4Y++) { //#24725
        $k[$j++] = false; //#24725
    } //#24725
    $_.ECI = $a(); //#24725
    $k[$j++] = Infinity; //#24726
    for (var _4c = 0, _4d = $_.msglen + 1; _4c < _4d; _4c++) { //#24726
        $k[$j++] = false; //#24726
    } //#24726
    $_.DatumA = $a(); //#24726
    $k[$j++] = Infinity; //#24727
    for (var _4g = 0, _4h = $_.msglen + 1; _4g < _4h; _4g++) { //#24727
        $k[$j++] = false; //#24727
    } //#24727
    $_.DatumB = $a(); //#24727
    $k[$j++] = Infinity; //#24728
    for (var _4k = 0, _4l = $_.msglen + 1; _4k < _4l; _4k++) { //#24728
        $k[$j++] = false; //#24728
    } //#24728
    $_.DatumC = $a(); //#24728
    $k[$j++] = Infinity; //#24729
    for (var _4o = 0, _4p = $_.msglen + 8; _4o < _4p; _4o++) { //#24729
        $k[$j++] = false; //#24729
    } //#24729
    $_.Binary = $a(); //#24729
    $k[$j++] = Infinity; //#24730
    for (var _4s = 0, _4t = $_.msglen + 1; _4s < _4t; _4s++) { //#24730
        $k[$j++] = 0; //#24730
    } //#24730
    $_.AheadC = $a(); //#24730
    $k[$j++] = Infinity; //#24731
    for (var _4w = 0, _4x = $_.msglen + 1; _4w < _4x; _4w++) { //#24731
        $k[$j++] = 0; //#24731
    } //#24731
    $_.TryC = $a(); //#24731
    $k[$j++] = Infinity; //#24732
    for (var _50 = 0, _51 = $_.msglen + 1; _50 < _51; _50++) { //#24732
        $k[$j++] = 0; //#24732
    } //#24732
    $_.AheadA = $a(); //#24732
    $k[$j++] = Infinity; //#24733
    for (var _54 = 0, _55 = $_.msglen + 1; _54 < _55; _54++) { //#24733
        $k[$j++] = 0; //#24733
    } //#24733
    $_.AheadB = $a(); //#24733
    $k[$j++] = Infinity; //#24734
    for (var _58 = 0, _59 = $_.msglen + 1; _58 < _59; _58++) { //#24734
        $k[$j++] = 0; //#24734
    } //#24734
    $_.UntilEndSeg = $a(); //#24734
    for (var _5C = $_.msglen - 1; _5C >= 0; _5C -= 1) { //#24789
        $_.i = _5C; //#24736
        $_.barchar = $get($_.msg, $_.i); //#24737
        if (($_.barchar >= 48) && ($_.barchar <= 57)) { //#24740
            $put($_.nDigits, $_.i, $f($get($_.nDigits, $_.i + 1) + 1)); //#24739
        } //#24739
        var _5P = $get($_.Avals, $_.barchar) !== undefined; //#24741
        if (_5P) { //#24741
            $put($_.DatumA, $_.i, true); //#24741
        } //#24741
        var _5U = $get($_.Bvals, $_.barchar) !== undefined; //#24742
        if (_5U) { //#24742
            $put($_.DatumB, $_.i, true); //#24742
        } //#24742
        $_.CRLF = false; //#24743
        if (($_.barchar == 13) && ($_.i < ($_.msglen - 1))) { //#24746
            if ($get($_.msg, $_.i + 1) == 10) { //#24745
                $_.CRLF = true; //#24745
            } //#24745
        } //#24745
        if ($_.CRLF) { //#24747
            $put($_.DatumB, $_.i, true); //#24747
        } //#24747
        if ($get($_.nDigits, $_.i) >= 2) { //#24748
            $put($_.DatumC, $_.i, true); //#24748
        } //#24748
        if ($_.barchar < 0) { //#24749
            $put($_.DatumC, $_.i, true); //#24749
        } //#24749
        if ($_.barchar >= 128) { //#24750
            $put($_.Binary, $_.i, true); //#24750
        } //#24750
        if ($get($_.nDigits, $_.i) >= 10) { //#24764
            $k[$j++] = Infinity; //#24752
            $aload($geti($_.msg, $_.i, 10)); //#24753
            for (var _5x = 0, _5y = 1; _5x < _5y; _5x++) { //#24761
                if ($k[--$j] != 48) { //#24755
                    $k[$j++] = false; //#24755
                    break; //#24755
                } //#24755
                if ($k[--$j] != 49) { //#24756
                    $k[$j++] = false; //#24756
                    break; //#24756
                } //#24756
                $j -= 6; //#24757
                if ($k[--$j] != 55) { //#24758
                    $k[$j++] = false; //#24758
                    break; //#24758
                } //#24758
                if ($k[--$j] != 49) { //#24759
                    $k[$j++] = false; //#24759
                    break; //#24759
                } //#24759
                $k[$j++] = true; //#24760
            } //#24760
            $put($_.SeventeenTen, $_.i, $k[--$j]); //#24762
            $cleartomark(); //#24763
        } //#24763
        if (($get($_.nDigits, $_.i + 1) >= 6) && ($get($_.msg, $_.i) == $_.fn2)) { //#24767
            $put($_.ECI, $_.i, true); //#24766
        } //#24766
        if (($_.barchar < 0) && ($_.barchar != $_.fn3)) { //#24774
            $put($_.AheadC, $_.i, $f($get($_.AheadC, $_.i + 1) + 1)); //#24769
        } else { //#24774
            if ($get($_.nDigits, $_.i) <= 1) { //#24774
                $put($_.AheadC, $_.i, 0); //#24772
            } else { //#24774
                $put($_.AheadC, $_.i, $f($get($_.AheadC, $_.i + 2) + 1)); //#24774
            } //#24774
        } //#24774
        if (($get($_.nDigits, $_.i) > 0) && $gt($get($_.AheadC, $_.i), $get($_.AheadC, $_.i + 1))) { //#24779
            $put($_.TryC, $_.i, $get($_.AheadC, $_.i)); //#24778
        } //#24778
        if (($get($_.DatumA, $_.i) && ($get($_.TryC, $_.i) < 2)) && ($_.barchar != $_.fn3)) { //#24782
            $put($_.AheadA, $_.i, $f($get($_.AheadA, $_.i + 1) + 1)); //#24781
        } //#24781
        if (($get($_.DatumB, $_.i) && ($get($_.TryC, $_.i) < 2)) && ($_.barchar != $_.fn3)) { //#24785
            $k[$j++] = $_.AheadB; //#24784
            $k[$j++] = $_.i; //#24784
            $k[$j++] = $_.AheadB; //#24784
            $k[$j++] = $_.i + 1; //#24784
            if ($_.CRLF) { //#24784
                var _7B = $k[--$j]; //#24784
                $k[$j++] = $f(_7B + 1); //#24784
            } //#24784
            var _7C = $k[--$j]; //#24784
            var _7E = $get($k[--$j], _7C); //#24784
            var _7F = $k[--$j]; //#24784
            $put($k[--$j], _7F, $f(_7E + 1)); //#24784
        } //#24784
        if ($_.barchar != $_.fn3) { //#24788
            $put($_.UntilEndSeg, $_.i, $f($get($_.UntilEndSeg, $_.i + 1) + 1)); //#24787
        } //#24787
    } //#24787
    $_.addtocws = function() {
        var _7O = $k[--$j]; //#24792
        $puti($_.cws, $_.j, _7O); //#24792
        $_.j = _7O.length + $_.j; //#24793
    }; //#24793
    $_.base259to103 = function() {
        $_.in = $k[--$j]; //#24798
        $_.inlen = $_.in.length; //#24799
        $k[$j++] = Infinity; //#24800
        for (var _7V = 0, _7W = 5 - $_.inlen; _7V < _7W; _7V++) { //#24800
            $k[$j++] = 0; //#24800
        } //#24800
        $aload($_.in); //#24800
        $_.in = $a(); //#24800
        $_.out = $a(6); //#24801
        $k[$j++] = Infinity; //#24802
        $aload($geti($_.in, 0, 2)); //#24802
        $_.msbs = $a(); //#24802
        $k[$j++] = Infinity; //#24805
        $aload($_.msbs); //#24804
        var _7e = $k[--$j]; //#24804
        var _7f = $k[--$j]; //#24804
        $k[$j++] = $f(_7e + (_7f * 259)); //#24805
        for (var _7g = 0, _7h = 2; _7g < _7h; _7g++) { //#24805
            var _7i = $k[--$j]; //#24805
            $k[$j++] = _7i % 103; //#24805
            $k[$j++] = ~~(_7i / 103); //#24805
        } //#24805
        $_.mscs = $a(); //#24805
        $k[$j++] = Infinity; //#24807
        $aload($geti($_.in, 2, 3)); //#24807
        $_.lsbs = $a(); //#24807
        $k[$j++] = Infinity; //#24810
        $aload($_.lsbs); //#24809
        var _7o = $k[--$j]; //#24809
        var _7p = $k[--$j]; //#24809
        var _7q = $k[--$j]; //#24809
        $k[$j++] = $f(($f(_7o + (_7p * 259))) + (_7q * 67081)); //#24810
        for (var _7r = 0, _7s = 3; _7r < _7s; _7r++) { //#24810
            var _7t = $k[--$j]; //#24810
            $k[$j++] = _7t % 103; //#24810
            $k[$j++] = ~~(_7t / 103); //#24810
        } //#24810
        $_.lscs = $a(); //#24810
        var _7w = $get($_.lscs, 0); //#24812
        var _7y = $get($_.mscs, 0); //#24812
        $put($_.out, 5, ($f(_7w + (_7y * 42))) % 103); //#24813
        var _81 = $get($_.lscs, 1); //#24814
        var _83 = $get($_.mscs, 0); //#24814
        var _85 = $get($_.mscs, 1); //#24814
        $put($_.out, 4, ($f(($f(($f((~~(($f(_7w + (_7y * 42))) / 103)) + _81)) + (_83 * 68))) + (_85 * 42))) % 103); //#24815
        var _88 = $get($_.lscs, 2); //#24816
        var _8A = $get($_.mscs, 0); //#24816
        var _8C = $get($_.mscs, 1); //#24816
        var _8E = $get($_.mscs, 2); //#24816
        $put($_.out, 3, ($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_7w + (_7y * 42))) / 103)) + _81)) + (_83 * 68))) + (_85 * 42))) / 103)) + _88)) + (_8A * 92))) + (_8C * 68))) + (_8E * 42))) % 103); //#24817
        var _8H = $get($_.lscs, 3); //#24818
        var _8J = $get($_.mscs, 0); //#24818
        var _8L = $get($_.mscs, 1); //#24818
        var _8N = $get($_.mscs, 2); //#24818
        $put($_.out, 2, ($f(($f(($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_7w + (_7y * 42))) / 103)) + _81)) + (_83 * 68))) + (_85 * 42))) / 103)) + _88)) + (_8A * 92))) + (_8C * 68))) + (_8E * 42))) / 103)) + _8H)) + (_8J * 15))) + (_8L * 92))) + (_8N * 68))) % 103); //#24819
        var _8Q = $get($_.mscs, 1); //#24820
        var _8S = $get($_.mscs, 2); //#24820
        $put($_.out, 1, ($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_7w + (_7y * 42))) / 103)) + _81)) + (_83 * 68))) + (_85 * 42))) / 103)) + _88)) + (_8A * 92))) + (_8C * 68))) + (_8E * 42))) / 103)) + _8H)) + (_8J * 15))) + (_8L * 92))) + (_8N * 68))) / 103)) + (_8Q * 15))) + (_8S * 92))) % 103); //#24821
        $put($_.out, 0, ($f((~~(($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_7w + (_7y * 42))) / 103)) + _81)) + (_83 * 68))) + (_85 * 42))) / 103)) + _88)) + (_8A * 92))) + (_8C * 68))) + (_8E * 42))) / 103)) + _8H)) + (_8J * 15))) + (_8L * 92))) + (_8N * 68))) / 103)) + (_8Q * 15))) + (_8S * 92))) / 103)) + ($get($_.mscs, 2) * 15))) % 103); //#24823
        $k[$j++] = $geti($_.out, (6 - $_.inlen) - 1, $_.inlen + 1); //#24824
    }; //#24824
    $_.finaliseBIN = function() {
        if ($_.bpos != 0) { //#24831
            $k[$j++] = $geti($_.bvals, 0, $_.bpos); //#24829
            $_.base259to103(); //#24829
            $aload($k[--$j]); //#24829
            $_.bpos = 0; //#24830
        } //#24830
    }; //#24830
    $_.addtobin = function() {
        $put($_.bvals, $_.bpos, $k[--$j]); //#24835
        $_.bpos = $_.bpos + 1; //#24836
        if ($_.bpos == 5) { //#24837
            $_.finaliseBIN(); //#24837
        } //#24837
    }; //#24837
    $_.ECIabc = function() {
        var _8n = $geti($_.msg, $_.i + 1, 6); //#24841
        $k[$j++] = 0; //#24841
        for (var _8o = 0, _8p = _8n.length; _8o < _8p; _8o++) { //#24841
            var _8r = $k[--$j]; //#24841
            $k[$j++] = ($f(_8r + $f($get(_8n, _8o) - 48))) * 10; //#24841
        } //#24841
        var _8t = ~~($k[--$j] / 10); //#24842
        $k[$j++] = _8t; //#24846
        if (_8t >= 40) { //#24846
            var _8v = $f($k[--$j] - 40); //#24844
            var _8w = _8v % 12769; //#24845
            $k[$j++] = (~~(_8v / 12769)) + 40; //#24845
            $k[$j++] = ~~(_8w / 113); //#24845
            $k[$j++] = _8w % 113; //#24845
        } //#24845
    }; //#24845
    $_.ECIbin = function() {
        $k[$j++] = Infinity; //#24858
        var _8z = $geti($_.msg, $_.i + 1, 6); //#24851
        $k[$j++] = 0; //#24851
        for (var _90 = 0, _91 = _8z.length; _90 < _91; _90++) { //#24851
            var _93 = $k[--$j]; //#24851
            $k[$j++] = ($f(_93 + $f($get(_8z, _90) - 48))) * 10; //#24851
        } //#24851
        var _95 = ~~($k[--$j] / 10); //#24852
        $k[$j++] = _95; //#24860
        if (_95 >= 65536) { //#24858
            var _96 = $k[--$j]; //#24853
            var _97 = _96 % 65536; //#24853
            $k[$j++] = 258; //#24853
            $k[$j++] = ~~(_96 / 65536); //#24853
            $k[$j++] = ~~(_97 / 256); //#24853
            $k[$j++] = _97 % 256; //#24853
        } else { //#24858
            var _98 = $k[--$j]; //#24855
            $k[$j++] = _98; //#24859
            if (_98 >= 256) { //#24858
                var _99 = $k[--$j]; //#24856
                $k[$j++] = 257; //#24856
                $k[$j++] = ~~(_99 / 256); //#24856
                $k[$j++] = _99 % 256; //#24856
            } else { //#24858
                var _9A = $k[--$j]; //#24858
                $k[$j++] = 256; //#24858
                $k[$j++] = _9A; //#24858
            } //#24858
        } //#24858
        var _9B = $a(); //#24858
        for (var _9C = 0, _9D = _9B.length; _9C < _9D; _9C++) { //#24863
            $k[$j++] = $get(_9B, _9C); //#24862
            $_.addtobin(); //#24862
        } //#24862
    }; //#24862
    $_.encC = function() {
        for (var _9F = 0, _9G = 1; _9F < _9G; _9F++) { //#24987
            if ($_.i == $_.segstart) { //#24900
                for (var _9J = 0, _9K = 1; _9J < _9K; _9J++) { //#24885
                    if ($_.i > $f($_.segend - 7)) { //#24870
                        $k[$j++] = 0; //#24870
                        break; //#24870
                    } //#24870
                    if ($get($_.msg, $_.segstart) != 91) { //#24871
                        $k[$j++] = 0; //#24871
                        break; //#24871
                    } //#24871
                    if ($get($_.msg, $_.segstart + 1) != 41) { //#24872
                        $k[$j++] = 0; //#24872
                        break; //#24872
                    } //#24872
                    if ($get($_.msg, $_.segstart + 2) != 62) { //#24873
                        $k[$j++] = 0; //#24873
                        break; //#24873
                    } //#24873
                    if ($get($_.msg, $_.segstart + 3) != 30) { //#24874
                        $k[$j++] = 0; //#24874
                        break; //#24874
                    } //#24874
                    var _9b = $get($_.msg, $_.segstart + 4); //#24875
                    if ((_9b < 48) || (_9b > 57)) { //#24875
                        $k[$j++] = 0; //#24875
                        break; //#24875
                    } //#24875
                    var _9e = $get($_.msg, $_.segstart + 5); //#24876
                    if ((_9e < 48) || (_9e > 57)) { //#24876
                        $k[$j++] = 0; //#24876
                        break; //#24876
                    } //#24876
                    if ($get($_.msg, $f($_.segend - 1)) != 4) { //#24877
                        $k[$j++] = 0; //#24877
                        break; //#24877
                    } //#24877
                    var _9o = $f(($f($get($_.msg, $_.segstart + 4) - 48) * 10) + $f($get($_.msg, $_.segstart + 5) - 48)); //#24879
                    $k[$j++] = _9o; //#24879
                    if ((_9o != 5) && ((_9o != 6) && (_9o != 12))) { //#24879
                        $j--; //#24879
                        $k[$j++] = $_.mac; //#24879
                        break; //#24879
                    } //#24879
                    if ($get($_.msg, $_.segstart + 6) != 29) { //#24880
                        $j--; //#24880
                        $k[$j++] = 0; //#24880
                        break; //#24880
                    } //#24880
                    if ($get($_.msg, $f($_.segend - 2)) != 30) { //#24881
                        $j--; //#24881
                        $k[$j++] = 0; //#24881
                        break; //#24881
                    } //#24881
                    var _9w = $k[--$j]; //#24882
                    $k[$j++] = _9w; //#24882
                    if (_9w == 5) { //#24882
                        $j--; //#24882
                        $k[$j++] = $_.m05; //#24882
                        break; //#24882
                    } //#24882
                    if ($k[--$j] == 6) { //#24883
                        $k[$j++] = $_.m06; //#24883
                        break; //#24883
                    } //#24883
                    $k[$j++] = $_.m12; //#24884
                    break; //#24884
                } //#24884
                $_.inmac = $k[--$j]; //#24886
                if ($_.inmac != 0) { //#24899
                    $k[$j++] = $a([$get($_.Cvals, $_.lab)]); //#24888
                    $_.addtocws(); //#24888
                    $_.mode = $_.B; //#24889
                    $k[$j++] = $a([$get($_.Bvals, $_.inmac)]); //#24890
                    $_.addtocws(); //#24890
                    if ($_.inmac == $_.mac) { //#24896
                        $k[$j++] = $a([$get($_.Bvals, $get($_.msg, $_.segstart + 4))]); //#24892
                        $_.addtocws(); //#24892
                        $k[$j++] = $a([$get($_.Bvals, $get($_.msg, $_.segstart + 5))]); //#24893
                        $_.addtocws(); //#24893
                        $_.i = $_.i + 6; //#24894
                    } else { //#24896
                        $_.i = $_.i + 7; //#24896
                    } //#24896
                    break; //#24898
                } //#24898
            } //#24898
            if ($_.i == $_.segstart) { //#24911
                if ($get($_.nDigits, $_.i) >= 2) { //#24906
                    $k[$j++] = $a([$get($_.Cvals, $_.fn1)]); //#24905
                    $_.addtocws(); //#24905
                } //#24905
                if (($get($_.msg, $_.i) == $_.fn1) && ($get($_.nDigits, $_.i + 1) >= 2)) { //#24910
                    $_.i = $_.i + 1; //#24909
                } //#24909
            } //#24909
            if ($get($_.SeventeenTen, $_.i)) { //#24921
                $k[$j++] = $a([$get($_.Cvals, $_.aim), $f(($f($get($_.msg, $_.i + 2) - 48) * 10) + $f($get($_.msg, $_.i + 3) - 48)), $f(($f($get($_.msg, $_.i + 4) - 48) * 10) + $f($get($_.msg, $_.i + 5) - 48)), $f(($f($get($_.msg, $_.i + 6) - 48) * 10) + $f($get($_.msg, $_.i + 7) - 48))]); //#24918
                $_.addtocws(); //#24918
                $_.i = $_.i + 10; //#24919
                break; //#24920
            } //#24920
            if ($get($_.DatumC, $_.i)) { //#24943
                var _BE = $get($_.msg, $_.i); //#24923
                if ((_BE == $_.fn1) || ((_BE == $_.fn2) || (_BE == $_.fn3))) { //#24939
                    $k[$j++] = $a([$get($_.Cvals, $get($_.msg, $_.i))]); //#24924
                    $_.addtocws(); //#24924
                    if ($get($_.ECI, $_.i)) { //#24929
                        $k[$j++] = Infinity; //#24926
                        $_.ECIabc(); //#24926
                        var _BR = $a(); //#24926
                        $k[$j++] = _BR; //#24926
                        $_.addtocws(); //#24926
                        $_.i = $_.i + 7; //#24927
                        break; //#24928
                    } //#24928
                    if (($get($_.msg, $_.i) == $_.fn3) && ($_.segstart != $_.i)) { //#24936
                        $_.i = $_.i + 1; //#24931
                        $_.inmac = 0; //#24932
                        $_.segstart = $_.i; //#24933
                        $_.segend = $f($_.i + $get($_.UntilEndSeg, $_.i)); //#24934
                        break; //#24935
                    } //#24935
                    $_.i = $_.i + 1; //#24937
                    break; //#24938
                } //#24938
                $k[$j++] = $a([$f(($f($get($_.msg, $_.i) - 48) * 10) + $f($get($_.msg, $_.i + 1) - 48))]); //#24940
                $_.addtocws(); //#24940
                $_.i = $_.i + 2; //#24941
                break; //#24942
            } //#24942
            if ($get($_.Binary, $_.i)) { //#24957
                if ($get($_.nDigits, $_.i + 1) > 0) { //#24953
                    if ($get($_.msg, $_.i) < 160) { //#24949
                        $k[$j++] = $a([$get($_.Cvals, $_.bsa), $get($_.Avals, $f($get($_.msg, $_.i) - 128))]); //#24947
                        $_.addtocws(); //#24947
                    } else { //#24949
                        $k[$j++] = $a([$get($_.Cvals, $_.bsb), $get($_.Bvals, $f($get($_.msg, $_.i) - 128))]); //#24949
                        $_.addtocws(); //#24949
                    } //#24949
                    $_.i = $_.i + 1; //#24951
                    break; //#24952
                } //#24952
                $k[$j++] = $a([$get($_.Cvals, $_.bin)]); //#24954
                $_.addtocws(); //#24954
                $_.mode = $_.BIN; //#24955
                break; //#24956
            } //#24956
            $_.m = $get($_.AheadA, $_.i); //#24958
            $_.n = $get($_.AheadB, $_.i); //#24958
            if ($gt($_.m, $_.n)) { //#24963
                $k[$j++] = $a([$get($_.Cvals, $_.laa)]); //#24960
                $_.addtocws(); //#24960
                $_.mode = $_.A; //#24961
                break; //#24962
            } //#24962
            if ($_.i == $_.segstart) { //#24970
                var _Cc = $get($_.msg, $_.i); //#24965
                if ((_Cc == 9) || ((_Cc == 28) || ((_Cc == 29) || (_Cc == 30)))) { //#24969
                    $k[$j++] = $a([$get($_.Cvals, $_.laa)]); //#24966
                    $_.addtocws(); //#24966
                    $_.mode = $_.A; //#24967
                    break; //#24968
                } //#24968
            } //#24968
            if ($_.n > 4) { //#24975
                $k[$j++] = $a([$get($_.Cvals, $_.lab)]); //#24972
                $_.addtocws(); //#24972
                $_.mode = $_.B; //#24973
                break; //#24974
            } //#24974
            $k[$j++] = $a([$get($_.Cvals, $get($a([$_.sfb, $_.sb2, $_.sb3, $_.sb4]), $f($_.n - 1)))]); //#24976
            $_.addtocws(); //#24976
            for (var _Cz = 0, _D0 = $_.n; _Cz < _D0; _Cz++) { //#24985
                if ($get($_.msg, $_.i) == 13) { //#24983
                    $k[$j++] = $a([$get($_.Bvals, $_.crl)]); //#24979
                    $_.addtocws(); //#24979
                    $_.i = $_.i + 2; //#24980
                } else { //#24983
                    $k[$j++] = $a([$get($_.Bvals, $get($_.msg, $_.i))]); //#24982
                    $_.addtocws(); //#24982
                    $_.i = $_.i + 1; //#24983
                } //#24983
            } //#24983
            break; //#24986
        } //#24986
    }; //#24986
    $_.encB = function() {
        for (var _DG = 0, _DH = 1; _DG < _DH; _DG++) { //#25063
            $_.n = $get($_.TryC, $_.i); //#24992
            if ($_.n >= 2) { //#25010
                if ($_.n > 4) { //#24998
                    $k[$j++] = $a([$get($_.Bvals, $_.lac)]); //#24995
                    $_.addtocws(); //#24995
                    $_.mode = $_.C; //#24996
                    break; //#24997
                } //#24997
                $k[$j++] = $a([$get($_.Bvals, $get($a([$_.sfc, $_.sc2, $_.sc3, $_.sc4]), $f($_.n - 1)))]); //#24999
                $_.addtocws(); //#24999
                for (var _Dd = 0, _De = $_.n; _Dd < _De; _Dd++) { //#25008
                    if ($get($_.msg, $_.i) < 0) { //#25006
                        $k[$j++] = $a([$get($_.Cvals, $get($_.msg, $_.i))]); //#25002
                        $_.addtocws(); //#25002
                        $_.i = $_.i + 1; //#25003
                    } else { //#25006
                        $k[$j++] = $a([$f(($f($get($_.msg, $_.i) - 48) * 10) + $f($get($_.msg, $_.i + 1) - 48))]); //#25005
                        $_.addtocws(); //#25005
                        $_.i = $_.i + 2; //#25006
                    } //#25006
                } //#25006
                break; //#25009
            } //#25009
            if ($get($_.DatumB, $_.i)) { //#25040
                var _E2 = $get($_.msg, $_.i); //#25012
                if ((_E2 == $_.fn1) || ((_E2 == $_.fn2) || (_E2 == $_.fn3))) { //#25029
                    $k[$j++] = $a([$get($_.Bvals, $get($_.msg, $_.i))]); //#25013
                    $_.addtocws(); //#25013
                    if ($get($_.ECI, $_.i)) { //#25018
                        $k[$j++] = Infinity; //#25015
                        $_.ECIabc(); //#25015
                        var _EF = $a(); //#25015
                        $k[$j++] = _EF; //#25015
                        $_.addtocws(); //#25015
                        $_.i = $_.i + 7; //#25016
                        break; //#25017
                    } //#25017
                    if (($get($_.msg, $_.i) == $_.fn3) && ($_.i != $_.segstart)) { //#25026
                        $_.i = $_.i + 1; //#25020
                        $_.mode = $_.C; //#25021
                        $_.inmac = 0; //#25022
                        $_.segstart = $_.i; //#25023
                        $_.segend = $f($_.i + $get($_.UntilEndSeg, $_.i)); //#25024
                        break; //#25025
                    } //#25025
                    $_.i = $_.i + 1; //#25027
                    break; //#25028
                } //#25028
                if (($get($_.msg, $_.i) == 13) && ($_.i < ($_.msglen - 1))) { //#25036
                    if ($get($_.msg, $_.i + 1) == 10) { //#25035
                        $k[$j++] = $a([$get($_.Bvals, $_.crl)]); //#25032
                        $_.addtocws(); //#25032
                        $_.i = $_.i + 2; //#25033
                        break; //#25034
                    } //#25034
                } //#25034
                $k[$j++] = $a([$get($_.Bvals, $get($_.msg, $_.i))]); //#25037
                $_.addtocws(); //#25037
                $_.i = $_.i + 1; //#25038
                break; //#25039
            } //#25039
            if ($get($_.Binary, $_.i)) { //#25054
                if ($get($_.DatumB, $_.i + 1)) { //#25050
                    if ($get($_.msg, $_.i) < 160) { //#25046
                        $k[$j++] = $a([$get($_.Bvals, $_.bsa), $get($_.Avals, $f($get($_.msg, $_.i) - 128))]); //#25044
                        $_.addtocws(); //#25044
                    } else { //#25046
                        $k[$j++] = $a([$get($_.Bvals, $_.bsb), $get($_.Bvals, $f($get($_.msg, $_.i) - 128))]); //#25046
                        $_.addtocws(); //#25046
                    } //#25046
                    $_.i = $_.i + 1; //#25048
                    break; //#25049
                } //#25049
                $k[$j++] = $a([$get($_.Bvals, $_.bin)]); //#25051
                $_.addtocws(); //#25051
                $_.mode = $_.BIN; //#25052
                break; //#25053
            } //#25053
            if ($get($_.AheadA, $_.i) == 1) { //#25059
                $k[$j++] = $a([$get($_.Bvals, $_.sfa), $get($_.Avals, $get($_.msg, $_.i))]); //#25056
                $_.addtocws(); //#25056
                $_.i = $_.i + 1; //#25057
                break; //#25058
            } //#25058
            $k[$j++] = $a([$get($_.Bvals, $_.laa)]); //#25060
            $_.addtocws(); //#25060
            $_.mode = $_.A; //#25061
            break; //#25062
        } //#25062
    }; //#25062
    $_.encA = function() {
        for (var _Fe = 0, _Ff = 1; _Fe < _Ff; _Fe++) { //#25141
            $_.n = $get($_.TryC, $_.i); //#25068
            if ($_.n >= 2) { //#25086
                if ($_.n > 4) { //#25074
                    $k[$j++] = $a([$get($_.Avals, $_.lac)]); //#25071
                    $_.addtocws(); //#25071
                    $_.mode = $_.C; //#25072
                    break; //#25073
                } //#25073
                $k[$j++] = $a([$get($_.Avals, $get($a([$_.sfc, $_.sc2, $_.sc3, $_.sc4]), $f($_.n - 1)))]); //#25075
                $_.addtocws(); //#25075
                for (var _G1 = 0, _G2 = $_.n; _G1 < _G2; _G1++) { //#25084
                    if ($get($_.msg, $_.i) < 0) { //#25082
                        $k[$j++] = $a([$get($_.Cvals, $get($_.msg, $_.i))]); //#25078
                        $_.addtocws(); //#25078
                        $_.i = $_.i + 1; //#25079
                    } else { //#25082
                        $k[$j++] = $a([$f(($f($get($_.msg, $_.i) - 48) * 10) + $f($get($_.msg, $_.i + 1) - 48))]); //#25081
                        $_.addtocws(); //#25081
                        $_.i = $_.i + 2; //#25082
                    } //#25082
                } //#25082
                break; //#25085
            } //#25085
            if ($get($_.DatumA, $_.i)) { //#25109
                var _GQ = $get($_.msg, $_.i); //#25088
                if ((_GQ == $_.fn1) || ((_GQ == $_.fn2) || (_GQ == $_.fn3))) { //#25105
                    $k[$j++] = $a([$get($_.Avals, $get($_.msg, $_.i))]); //#25089
                    $_.addtocws(); //#25089
                    if ($get($_.ECI, $_.i)) { //#25094
                        $k[$j++] = Infinity; //#25091
                        $_.ECIabc(); //#25091
                        var _Gd = $a(); //#25091
                        $k[$j++] = _Gd; //#25091
                        $_.addtocws(); //#25091
                        $_.i = $_.i + 7; //#25092
                        break; //#25093
                    } //#25093
                    if (($get($_.msg, $_.i) == $_.fn3) && ($_.i != $_.segstart)) { //#25102
                        $_.i = $_.i + 1; //#25096
                        $_.mode = $_.C; //#25097
                        $_.inmac = 0; //#25098
                        $_.segstart = $_.i; //#25099
                        $_.segend = $f($_.i + $get($_.UntilEndSeg, $_.i)); //#25100
                        break; //#25101
                    } //#25101
                    $_.i = $_.i + 1; //#25103
                    break; //#25104
                } //#25104
                $k[$j++] = $a([$get($_.Avals, $get($_.msg, $_.i))]); //#25106
                $_.addtocws(); //#25106
                $_.i = $_.i + 1; //#25107
                break; //#25108
            } //#25108
            if ($get($_.Binary, $_.i)) { //#25123
                if ($get($_.DatumA, $_.i + 1)) { //#25119
                    if ($get($_.msg, $_.i) < 160) { //#25115
                        $k[$j++] = $a([$get($_.Avals, $_.bsa), $get($_.Avals, $f($get($_.msg, $_.i) - 128))]); //#25113
                        $_.addtocws(); //#25113
                    } else { //#25115
                        $k[$j++] = $a([$get($_.Avals, $_.bsb), $get($_.Bvals, $f($get($_.msg, $_.i) - 128))]); //#25115
                        $_.addtocws(); //#25115
                    } //#25115
                    $_.i = $_.i + 1; //#25117
                    break; //#25118
                } //#25118
                $k[$j++] = $a([$get($_.Avals, $_.bin)]); //#25120
                $_.addtocws(); //#25120
                $_.mode = $_.BIN; //#25121
                break; //#25122
            } //#25122
            $_.n = $get($_.AheadB, $_.i); //#25124
            if ($_.n > 6) { //#25129
                $k[$j++] = $a([$get($_.Avals, $_.lab)]); //#25126
                $_.addtocws(); //#25126
                $_.mode = $_.B; //#25127
                break; //#25128
            } //#25128
            $k[$j++] = $a([$get($_.Avals, $get($a([$_.sfb, $_.sb2, $_.sb3, $_.sb4, $_.sb5, $_.sb6]), $f($_.n - 1)))]); //#25130
            $_.addtocws(); //#25130
            for (var _Ht = 0, _Hu = $_.n; _Ht < _Hu; _Ht++) { //#25139
                if ($get($_.msg, $_.i) == 13) { //#25137
                    $k[$j++] = $a([$get($_.Bvals, $_.crl)]); //#25133
                    $_.addtocws(); //#25133
                    $_.i = $_.i + 2; //#25134
                } else { //#25137
                    $k[$j++] = $a([$get($_.Bvals, $get($_.msg, $_.i))]); //#25136
                    $_.addtocws(); //#25136
                    $_.i = $_.i + 1; //#25137
                } //#25137
            } //#25137
            break; //#25140
        } //#25140
    }; //#25140
    $_.encBIN = function() {
        for (var _IA = 0, _IB = 1; _IA < _IB; _IA++) { //#25203
            $_.n = $get($_.TryC, $_.i); //#25146
            if ($_.n >= 2) { //#25165
                $k[$j++] = Infinity; //#25148
                $_.finaliseBIN(); //#25148
                var _IG = $a(); //#25148
                $k[$j++] = _IG; //#25148
                $_.addtocws(); //#25148
                if ($_.n > 7) { //#25153
                    $k[$j++] = $a([$get($_.BINvals, $_.tmc)]); //#25150
                    $_.addtocws(); //#25150
                    $_.mode = $_.C; //#25151
                    break; //#25152
                } //#25152
                $k[$j++] = $a([$get($_.BINvals, $get($a([$_.sc2, $_.sc3, $_.sc4, $_.sc5, $_.sc6, $_.sc7]), $f($_.n - 2)))]); //#25154
                $_.addtocws(); //#25154
                for (var _Ia = 0, _Ib = $_.n; _Ia < _Ib; _Ia++) { //#25163
                    if ($get($_.msg, $_.i) < 0) { //#25161
                        $k[$j++] = $a([$get($_.Cvals, $get($_.msg, $_.i))]); //#25157
                        $_.addtocws(); //#25157
                        $_.i = $_.i + 1; //#25158
                    } else { //#25161
                        $k[$j++] = $a([$f(($f($get($_.msg, $_.i) - 48) * 10) + $f($get($_.msg, $_.i + 1) - 48))]); //#25160
                        $_.addtocws(); //#25160
                        $_.i = $_.i + 2; //#25161
                    } //#25161
                } //#25161
                break; //#25164
            } //#25164
            if (($get($_.ECI, $_.i) && $get($_.Binary, $_.i + 7))) { //#25171
                $k[$j++] = Infinity; //#25167
                $_.ECIbin(); //#25167
                var _J0 = $a(); //#25167
                $k[$j++] = _J0; //#25167
                $_.addtocws(); //#25167
                $_.i = $_.i + 7; //#25168
                if ($_.i == $_.msglen) { //#25169
                    $k[$j++] = Infinity; //#25169
                    $_.finaliseBIN(); //#25169
                    var _J4 = $a(); //#25169
                    $k[$j++] = _J4; //#25169
                    $_.addtocws(); //#25169
                } //#25169
                break; //#25170
            } //#25170
            if ($get($_.msg, $_.i) >= 0) { //#25181
                if (((($get($_.Binary, $_.i) || $get($_.Binary, $_.i + 1)) || $get($_.Binary, $_.i + 2)) || $get($_.Binary, $_.i + 3)) || ($get($_.ECI, $_.i + 1) && $get($_.Binary, $_.i + 8))) { //#25180
                    $k[$j++] = Infinity; //#25176
                    $k[$j++] = $get($_.msg, $_.i); //#25176
                    $_.addtobin(); //#25176
                    var _JT = $a(); //#25176
                    $k[$j++] = _JT; //#25176
                    $_.addtocws(); //#25176
                    $_.i = $_.i + 1; //#25177
                    if ($_.i == $_.msglen) { //#25178
                        $k[$j++] = Infinity; //#25178
                        $_.finaliseBIN(); //#25178
                        var _JX = $a(); //#25178
                        $k[$j++] = _JX; //#25178
                        $_.addtocws(); //#25178
                    } //#25178
                    break; //#25179
                } //#25179
            } //#25179
            $k[$j++] = Infinity; //#25182
            $_.finaliseBIN(); //#25182
            var _JY = $a(); //#25182
            $k[$j++] = _JY; //#25182
            $_.addtocws(); //#25182
            if ($_.i != ($_.msglen - 1)) { //#25201
                if (($get($_.msg, $_.i) == $_.fn3) && ($_.i != $_.segstart)) { //#25192
                    $k[$j++] = $a([$get($_.BINvals, $_.tms)]); //#25185
                    $_.addtocws(); //#25185
                    $_.i = $_.i + 1; //#25186
                    $_.mode = $_.C; //#25187
                    $_.inmac = 0; //#25188
                    $_.segstart = $_.i; //#25189
                    $_.segend = $f($_.i + $get($_.UntilEndSeg, $_.i)); //#25190
                    break; //#25191
                } //#25191
                if ($gt($get($_.AheadA, $_.i), $get($_.AheadB, $_.i))) { //#25198
                    $k[$j++] = $a([$get($_.BINvals, $_.tma)]); //#25194
                    $_.addtocws(); //#25194
                    $_.mode = $_.A; //#25195
                } else { //#25198
                    $k[$j++] = $a([$get($_.BINvals, $_.tmb)]); //#25197
                    $_.addtocws(); //#25197
                    $_.mode = $_.B; //#25198
                } //#25198
                break; //#25200
            } //#25200
            break; //#25202
        } //#25202
    }; //#25202
    $_.cws = $a(($_.msglen * 2) + 1); //#25206
    $_.mode = $_.C; //#25207
    $_.bvals = $a(5); //#25208
    $_.bpos = 0; //#25208
    $_.inmac = 0; //#25209
    $_.segstart = 0; //#25209
    $_.segend = $get($_.UntilEndSeg, 0); //#25209
    $_.i = 0; //#25210
    $_.j = 0; //#25210
    for (;;) { //#25223
        if ($_.i >= $_.msglen) { //#25211
            break; //#25211
        } //#25211
        if ($_.inmac != 0) { //#25221
            if (($_.inmac != $_.mac) && ($_.i == $f($_.segend - 2))) { //#25216
                $_.i = $_.i + 2; //#25214
                if ($_.i >= $_.msglen) { //#25215
                    break; //#25215
                } //#25215
            } //#25215
            if (($_.inmac == $_.mac) && ($_.i == $f($_.segend - 1))) { //#25220
                $_.i = $_.i + 1; //#25218
                if ($_.i >= $_.msglen) { //#25219
                    break; //#25219
                } //#25219
            } //#25219
        } //#25219
        if ($_[$get($a(['encA', 'encB', 'encC', 'encBIN']), $_.mode)]() === true) {
            break;
        } //#25222
    } //#25222
    $_.cws = $geti($_.cws, 0, $_.j); //#25224
    $_.nd = $_.cws.length; //#25227
    $_.minarea = (((($_.nd + 3) + (~~($_.nd / 2))) * 9) + 2) * 2; //#25228
    if ($_.ratio != -1) { //#25256
        $_.hgt = Math.sqrt($_.minarea / $_.ratio); //#25230
        $_.wid = Math.sqrt($_.minarea * $_.ratio); //#25231
        $_.h = ~~$_.hgt; //#25232
        $_.w = ~~$_.wid; //#25232
        if ((($_.h + $_.w) % 2) == 1) { //#25246
            if (($_.h * $_.w) < $_.minarea) { //#25234
                $_.h = $_.h + 1; //#25234
                $_.w = $_.w + 1; //#25234
            } //#25234
        } else { //#25246
            if (($_.hgt * $_.w) < ($_.wid * $_.h)) { //#25246
                $_.w = $_.w + 1; //#25237
                if (($_.h * $_.w) < $_.minarea) { //#25241
                    $_.w = $_.w - 1; //#25239
                    $_.h = $_.h + 1; //#25239
                    if (($_.h * $_.w) < $_.minarea) { //#25240
                        $_.w = $_.w + 2; //#25240
                    } //#25240
                } //#25240
            } else { //#25246
                $_.h = $_.h + 1; //#25243
                if (($_.h * $_.w) < $_.minarea) { //#25247
                    $_.h = $_.h - 1; //#25245
                    $_.w = $_.w + 1; //#25245
                    if (($_.h * $_.w) < $_.minarea) { //#25246
                        $_.h = $_.h + 2; //#25246
                    } //#25246
                } //#25246
            } //#25246
        } //#25246
        $_.rows = $_.h; //#25250
        $_.columns = $_.w; //#25250
    } else { //#25256
        if ($_.columns == -1) { //#25254
            var _LN = ~~((($_.minarea + $_.rows) - 1) / $_.rows); //#25253
            $k[$j++] = 'columns'; //#25253
            $k[$j++] = _LN; //#25253
            if (((_LN + $_.rows) % 2) == 0) { //#25253
                var _LP = $k[--$j]; //#25253
                $k[$j++] = $f(_LP + 1); //#25253
            } //#25253
            var _LQ = $k[--$j]; //#25253
            $_[$k[--$j]] = _LQ; //#25253
        } //#25253
        if ($_.rows == -1) { //#25257
            var _LW = ~~((($_.minarea + $_.columns) - 1) / $_.columns); //#25256
            $k[$j++] = 'rows'; //#25256
            $k[$j++] = _LW; //#25256
            if (((_LW + $_.columns) % 2) == 0) { //#25256
                var _LY = $k[--$j]; //#25256
                $k[$j++] = $f(_LY + 1); //#25256
            } //#25256
            var _LZ = $k[--$j]; //#25256
            $_[$k[--$j]] = _LZ; //#25256
        } //#25256
    } //#25256
    $_.ndots = ~~(($_.rows * $_.columns) / 2); //#25261
    for (;;) { //#25265
        var _Le = $_.nd + 1; //#25263
        if ((((_Le + ((~~(_Le / 2)) + 3)) * 9) + 2) > $_.ndots) { //#25263
            break; //#25263
        } //#25263
        $_.nd = $_.nd + 1; //#25264
    } //#25264
    $_.nc = (~~($_.nd / 2)) + 3; //#25266
    $_.nw = $_.nd + $_.nc; //#25267
    $_.rembits = $_.ndots - (($_.nw * 9) + 2); //#25268
    if ($_.nd > $_.cws.length) { //#25275
        $k[$j++] = Infinity; //#25273
        $aload($_.cws); //#25271
        var _Lr = ($_.mode == $_.BIN) ? 109 : 106; //#25272
        $k[$j++] = _Lr; //#25273
        for (var _Lu = 0, _Lv = ($_.nd - $_.cws.length) - 1; _Lu < _Lv; _Lu++) { //#25273
            $k[$j++] = 106; //#25273
        } //#25273
        $_.cws = $a(); //#25273
    } //#25274
    var _Ly = $get($_.options, 'debugcws') !== undefined; //#25277
    if (_Ly) { //#25277
        $k[$j++] = 'bwipp.debugcws#25277'; //#25277
        $k[$j++] = $_.cws; //#25277
        bwipp_raiseerror(); //#25277
    } //#25277
    if (($_.nw * 9) > ($_.ndots - 2)) { //#25282
        $k[$j++] = 'bwipp.dotcodeTooLong#25281'; //#25281
        $k[$j++] = "Maximum length exceeded"; //#25281
        bwipp_raiseerror(); //#25281
    } //#25281
    if (!bwipp_dotcode.__25311__) { //#25311
        $_ = Object.create($_); //#25311
        $_.encs = $a
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_dotcode.$ctx[id] = $_[id]); //#25310
        bwipp_dotcode.__25311__ = 1; //#25310
        $_ = Object.getPrototypeOf($_); //#25310
    } //#25310
    if (($_.rows % 2) == 0) { //#25331
        $_.sixedges = $a([$a([$_.columns - 1, $_.rows - 2]), $a([0, $_.rows - 2]), $a([$_.columns - 2, $_.rows - 1]), $a([1, $_.rows - 1]), $a([$_.columns - 1, 0]), $a([0, 0])]); //#25322
    } else { //#25331
        $_.sixedges = $a([$a([$_.columns - 2, 0]), $a([$_.columns - 2, $_.rows - 1]), $a([$_.columns - 1, 1]), $a([$_.columns - 1, $_.rows - 2]), $a([0, 0]), $a([0, $_.rows - 1])]); //#25331
    } //#25331
    $_.dmv = function() {
        var _MY = $k[--$j]; //#25334
        var _MZ = $k[--$j]; //#25334
        $k[$j++] = $f(_MZ + (_MY * $_.columns)); //#25334
    }; //#25334
    $_.outline = $a($_.rows * $_.columns); //#25337
    for (var _Mf = 0, _Me = $_.rows - 1; _Mf <= _Me; _Mf += 1) { //#25344
        $_.y = _Mf; //#25339
        for (var _Mi = 0, _Mh = $_.columns - 1; _Mi <= _Mh; _Mi += 1) { //#25343
            $_.x = _Mi; //#25341
            $k[$j++] = $_.outline; //#25342
            $k[$j++] = $_.x; //#25342
            $k[$j++] = $_.y; //#25342
            $_.dmv(); //#25342
            var _Mo = $k[--$j]; //#25342
            $put($k[--$j], _Mo, (($_.x + $_.y) % 2) - 1); //#25342
        } //#25342
    } //#25342
    var _Mq = $_.sixedges; //#25345
    for (var _Mr = 0, _Ms = _Mq.length; _Mr < _Ms; _Mr++) { //#25347
        $k[$j++] = $_.outline; //#25346
        $aload($get(_Mq, _Mr)); //#25346
        $_.dmv(); //#25346
        var _Mv = $k[--$j]; //#25346
        $put($k[--$j], _Mv, 1); //#25346
    } //#25346
    $_.clearcol = function() {
        $_.x = $k[--$j]; //#25350
        $k[$j++] = true; //#25354
        for (var _N1 = $_.x & 1, _N0 = $_.rows - 1; _N1 <= _N0; _N1 += 2) { //#25354
            $k[$j++] = $_.x; //#25353
            $k[$j++] = _N1; //#25353
            $_.dmv(); //#25353
            if ($get($_.sym, $k[--$j]) == 1) { //#25353
                $j--; //#25353
                $k[$j++] = false; //#25353
                break; //#25353
            } //#25353
        } //#25353
    }; //#25353
    $_.clearrow = function() {
        $_.y = $k[--$j]; //#25358
        $k[$j++] = true; //#25362
        for (var _NA = $_.y & 1, _N9 = $_.columns - 1; _NA <= _N9; _NA += 2) { //#25362
            $k[$j++] = _NA; //#25361
            $k[$j++] = $_.y; //#25361
            $_.dmv(); //#25361
            if ($get($_.sym, $k[--$j]) == 1) { //#25361
                $j--; //#25361
                $k[$j++] = false; //#25361
                break; //#25361
            } //#25361
        } //#25361
    }; //#25361
    $_.evalsymbol = function() {
        $_.sym = $k[--$j]; //#25367
        $_.worst = 9999999; //#25370
        var _NK = $a([$a(['x', 0]), $a(['x', 1]), $a(['y', 0]), $a(['y', 1])]); //#25371
        for (var _NL = 0, _NM = _NK.length; _NL < _NM; _NL++) { //#25389
            $aload($get(_NK, _NL)); //#25372
            $_.fl = $k[--$j]; //#25372
            $_.dir = $k[--$j]; //#25372
            $_.sum = 0; //#25373
            $_.first = -1; //#25373
            $_.last = -1; //#25373
            var _NR = $eq($_.dir, 'x') ? $_.columns : $_.rows; //#25374
            for (var _NT = 0, _NS = _NR - 1; _NT <= _NS; _NT += 1) { //#25385
                $_[$_.dir] = _NT; //#25375
                var _NV = $_.sym; //#25376
                var _NX = $_[$_.dir]; //#25377
                var _NZ = $eq($_.dir, 'x') ? $_.rows : $_.columns; //#25378
                var _Nc = (_NZ - 1) * $_.fl; //#25379
                if ($eq($_.dir, 'y')) { //#25379
                    var _ = _Nc; //#25379
                    _Nc = _NX; //#25379
                    _NX = _; //#25379
                } //#25379
                $k[$j++] = _NV; //#25380
                $k[$j++] = _NX; //#25380
                $k[$j++] = _Nc; //#25380
                $_.dmv(); //#25380
                var _Nd = $k[--$j]; //#25380
                if ($get($k[--$j], _Nd) == 1) { //#25384
                    if ($_.first == -1) { //#25381
                        $_.first = $_[$_.dir]; //#25381
                    } //#25381
                    $_.last = $_[$_.dir]; //#25382
                    $_.sum = $_.sum + 1; //#25383
                } //#25383
            } //#25383
            var _Nq = $eq($_.dir, 'x') ? $_.rows : $_.columns; //#25387
            var _Nr = ($f($f($_.sum + $_.last) - $_.first)) * _Nq; //#25388
            $k[$j++] = _Nr; //#25388
            if (_Nr < $_.worst) { //#25388
                $_.worst = $k[--$j]; //#25388
            } else { //#25388
                $j--; //#25388
            } //#25388
        } //#25388
        $_.pen = 0; //#25391
        if ((($_.rows % 2) == 1) || ($_.rows <= 12)) { //#25409
            $_.sum = 0; //#25397
            $_.p = 0; //#25397
            for (var _Ny = 1, _Nx = $_.columns - 2; _Ny <= _Nx; _Ny += 1) { //#25407
                $k[$j++] = _Ny; //#25399
                $_.clearcol(); //#25399
                if ($k[--$j]) { //#25405
                    $_.sum = $_.sum + 1; //#25400
                    $k[$j++] = 'p'; //#25401
                    if ($_.sum == 1) { //#25401
                        $k[$j++] = $_.rows; //#25401
                    } else { //#25401
                        $k[$j++] = $_.p * $_.rows; //#25401
                    } //#25401
                    var _O5 = $k[--$j]; //#25401
                    $_[$k[--$j]] = _O5; //#25401
                } else { //#25405
                    $_.sum = 0; //#25403
                    $_.pen = $_.pen + $_.p; //#25404
                    $_.p = 0; //#25405
                } //#25405
            } //#25405
            $_.pen = $_.pen + $_.p; //#25408
        } //#25408
        if ((($_.rows % 2) == 0) || ($_.columns <= 12)) { //#25427
            $_.sum = 0; //#25415
            $_.p = 0; //#25415
            for (var _OF = 1, _OE = $_.rows - 2; _OF <= _OE; _OF += 1) { //#25425
                $k[$j++] = _OF; //#25417
                $_.clearrow(); //#25417
                if ($k[--$j]) { //#25423
                    $_.sum = $_.sum + 1; //#25418
                    $k[$j++] = 'p'; //#25419
                    if ($_.sum == 1) { //#25419
                        $k[$j++] = $_.columns; //#25419
                    } else { //#25419
                        $k[$j++] = $_.p * $_.columns; //#25419
                    } //#25419
                    var _OM = $k[--$j]; //#25419
                    $_[$k[--$j]] = _OM; //#25419
                } else { //#25423
                    $_.sum = 0; //#25421
                    $_.pen = $_.pen + $_.p; //#25422
                    $_.p = 0; //#25423
                } //#25423
            } //#25423
            $_.pen = $_.pen + $_.p; //#25426
        } //#25426
        $k[$j++] = Infinity; //#25437
        for (var _OT = 0, _OU = ($_.columns + 4) * 2; _OT < _OU; _OT++) { //#25431
            $k[$j++] = 0; //#25431
        } //#25431
        for (var _OY = 0, _OZ = $_.columns, _OX = $_.sym.length - 1; _OZ < 0 ? _OY >= _OX : _OY <= _OX; _OY += _OZ) { //#25436
            $k[$j++] = 0; //#25434
            $k[$j++] = 0; //#25434
            $aload($geti($_.sym, _OY, $_.columns)); //#25434
            $k[$j++] = 0; //#25435
            $k[$j++] = 0; //#25435
        } //#25435
        for (var _Oe = 0, _Of = ($_.columns + 4) * 2; _Oe < _Of; _Oe++) { //#25437
            $k[$j++] = 0; //#25437
        } //#25437
        $_.symp = $a(); //#25437
        $_.columns = $_.columns + 4; //#25441
        $_.rows = $_.rows + 4; //#25442
        $_.sum = 0; //#25443
        for (var _Ol = 2, _Ok = $_.rows - 3; _Ol <= _Ok; _Ol += 1) { //#25461
            $_.y = _Ol; //#25445
            for (var _Op = ($_.y & 1) + 2, _Oo = $_.columns - 3; _Op <= _Oo; _Op += 2) { //#25460
                $_.x = _Op; //#25447
                for (var _Oq = 0, _Or = 1; _Oq < _Or; _Oq++) { //#25459
                    $k[$j++] = $_.symp; //#25449
                    $k[$j++] = $_.x - 1; //#25449
                    $k[$j++] = $_.y - 1; //#25449
                    $_.dmv(); //#25449
                    var _Ov = $k[--$j]; //#25449
                    if ($get($k[--$j], _Ov) == 1) { //#25449
                        break; //#25449
                    } //#25449
                    $k[$j++] = $_.symp; //#25450
                    $k[$j++] = $_.x + 1; //#25450
                    $k[$j++] = $_.y - 1; //#25450
                    $_.dmv(); //#25450
                    var _P1 = $k[--$j]; //#25450
                    if ($get($k[--$j], _P1) == 1) { //#25450
                        break; //#25450
                    } //#25450
                    $k[$j++] = $_.symp; //#25451
                    $k[$j++] = $_.x - 1; //#25451
                    $k[$j++] = $_.y + 1; //#25451
                    $_.dmv(); //#25451
                    var _P7 = $k[--$j]; //#25451
                    if ($get($k[--$j], _P7) == 1) { //#25451
                        break; //#25451
                    } //#25451
                    $k[$j++] = $_.symp; //#25452
                    $k[$j++] = $_.x + 1; //#25452
                    $k[$j++] = $_.y + 1; //#25452
                    $_.dmv(); //#25452
                    var _PD = $k[--$j]; //#25452
                    if ($get($k[--$j], _PD) == 1) { //#25452
                        break; //#25452
                    } //#25452
                    $k[$j++] = $_.symp; //#25453
                    $k[$j++] = $_.x; //#25453
                    $k[$j++] = $_.y; //#25453
                    $_.dmv(); //#25453
                    var _PJ = $k[--$j]; //#25453
                    if ($get($k[--$j], _PJ) == 0) { //#25453
                        $_.sum = $_.sum + 1; //#25453
                        break; //#25453
                    } //#25453
                    $k[$j++] = $_.symp; //#25454
                    $k[$j++] = $_.x - 2; //#25454
                    $k[$j++] = $_.y; //#25454
                    $_.dmv(); //#25454
                    var _PQ = $k[--$j]; //#25454
                    if ($get($k[--$j], _PQ) == 1) { //#25454
                        break; //#25454
                    } //#25454
                    $k[$j++] = $_.symp; //#25455
                    $k[$j++] = $_.x; //#25455
                    $k[$j++] = $_.y - 2; //#25455
                    $_.dmv(); //#25455
                    var _PW = $k[--$j]; //#25455
                    if ($get($k[--$j], _PW) == 1) { //#25455
                        break; //#25455
                    } //#25455
                    $k[$j++] = $_.symp; //#25456
                    $k[$j++] = $_.x + 2; //#25456
                    $k[$j++] = $_.y; //#25456
                    $_.dmv(); //#25456
                    var _Pc = $k[--$j]; //#25456
                    if ($get($k[--$j], _Pc) == 1) { //#25456
                        break; //#25456
                    } //#25456
                    $k[$j++] = $_.symp; //#25457
                    $k[$j++] = $_.x; //#25457
                    $k[$j++] = $_.y + 2; //#25457
                    $_.dmv(); //#25457
                    var _Pi = $k[--$j]; //#25457
                    if ($get($k[--$j], _Pi) == 1) { //#25457
                        break; //#25457
                    } //#25457
                    $_.sum = $_.sum + 1; //#25458
                } //#25458
            } //#25458
        } //#25458
        $_.columns = $_.columns - 4; //#25462
        $_.rows = $_.rows - 4; //#25463
        if ($_.worst == 0) { //#25468
            $k[$j++] = -99999; //#25466
        } else { //#25468
            $k[$j++] = $f(($f($_.worst - ($_.sum * $_.sum))) - $_.pen); //#25468
        } //#25468
    }; //#25468
    $k[$j++] = Infinity; //#25474
    $k[$j++] = 1; //#25474
    for (var _Pt = 0, _Pu = 112; _Pt < _Pu; _Pt++) { //#25474
        var _Pv = $k[--$j]; //#25474
        $k[$j++] = _Pv; //#25474
        $k[$j++] = (_Pv * 3) % 113; //#25474
    } //#25474
    $_.rsalog = $a(); //#25474
    $_.step = (~~($_.nw / 112)) + 1; //#25475
    $_.offset = function() {
        var _Pz = $k[--$j]; //#25476
        $k[$j++] = $f((_Pz * $_.step) + $_.start); //#25476
    }; //#25476
    $_.bestscore = -99999999; //#25484
    $k[$j++] = 'masks'; //#25489
    if ($_.mask != -1) { //#25488
        $k[$j++] = $a([$_.mask]); //#25486
    } else { //#25488
        if ($_.fast) { //#25488
            $k[$j++] = $a([3, 2, 1, 0]); //#25488
        } else { //#25488
            $k[$j++] = $a([0, 1, 2, 3]); //#25488
        } //#25488
    } //#25488
    var _Q7 = $k[--$j]; //#25489
    $_[$k[--$j]] = _Q7; //#25489
    $_.litmasks = $a(4); //#25490
    $forall($_.masks, function() { //#25592
        $_.mask = $k[--$j]; //#25493
        $k[$j++] = Infinity; //#25499
        var _QG = $_.cws; //#25498
        $k[$j++] = $_.mask; //#25498
        $k[$j++] = $get($a([0, 3, 7, 17]), $_.mask); //#25498
        $k[$j++] = 0; //#25498
        for (var _QH = 0, _QI = _QG.length; _QH < _QI; _QH++) { //#25498
            var _QK = $k[--$j]; //#25498
            var _QL = $k[--$j]; //#25498
            $k[$j++] = $f($get(_QG, _QH) + _QK) % 113; //#25498
            $k[$j++] = _QL; //#25498
            $k[$j++] = $f(_QK + _QL); //#25498
        } //#25498
        $j -= 2; //#25498
        for (var _QN = 0, _QO = $_.nc; _QN < _QO; _QN++) { //#25499
            $k[$j++] = 0; //#25499
        } //#25499
        $_.rscws = $a(); //#25499
        for (var _QS = 0, _QR = $_.step - 1; _QS <= _QR; _QS += 1) { //#25523
            $_.start = _QS; //#25502
            $_.ND = ~~((((($_.nd + 1) - $_.start) + $_.step) - 1) / $_.step); //#25503
            $_.NW = ~~((((($_.nw + 1) - $_.start) + $_.step) - 1) / $_.step); //#25504
            $_.NC = $_.NW - $_.ND; //#25505
            $k[$j++] = Infinity; //#25506
            $k[$j++] = 1; //#25506
            for (var _Qe = 0, _Qf = $_.NC; _Qe < _Qf; _Qe++) { //#25506
                $k[$j++] = 0; //#25506
            } //#25506
            $_.coeffs = $a(); //#25506
            for (var _Qj = 1, _Qi = $_.NC; _Qj <= _Qi; _Qj += 1) { //#25513
                $_.i = _Qj; //#25508
                for (var _Ql = $_.NC; _Ql >= 1; _Ql -= 1) { //#25512
                    $_.j = _Ql; //#25510
                    $put($_.coeffs, $_.j, ($f($f($get($_.coeffs, $_.j) + 113) - (($get($_.rsalog, $_.i) * $get($_.coeffs, $_.j - 1)) % 113))) % 113); //#25511
                } //#25511
            } //#25511
            for (var _Qz = 0, _Qy = $_.ND - 1; _Qz <= _Qy; _Qz += 1) { //#25521
                $k[$j++] = 't'; //#25515
                $k[$j++] = $_.rscws; //#25515
                $k[$j++] = _Qz; //#25515
                $_.offset(); //#25515
                var _R1 = $k[--$j]; //#25515
                var _R3 = $get($k[--$j], _R1); //#25515
                $k[$j++] = _R3; //#25515
                $k[$j++] = $_.rscws; //#25515
                $k[$j++] = $_.ND; //#25515
                $_.offset(); //#25515
                var _R6 = $k[--$j]; //#25515
                var _R8 = $get($k[--$j], _R6); //#25515
                var _R9 = $k[--$j]; //#25515
                $_[$k[--$j]] = $f(_R9 + _R8) % 113; //#25515
                for (var _RD = 0, _RC = $_.NC - 2; _RD <= _RC; _RD += 1) { //#25519
                    $_.j = _RD; //#25517
                    $k[$j++] = $_.rscws; //#25518
                    $k[$j++] = $_.ND + $_.j; //#25518
                    $_.offset(); //#25518
                    $k[$j++] = $_.rscws; //#25518
                    $k[$j++] = ($_.ND + $_.j) + 1; //#25518
                    $_.offset(); //#25518
                    var _RK = $k[--$j]; //#25518
                    var _RM = $get($k[--$j], _RK); //#25518
                    var _RR = $k[--$j]; //#25518
                    $put($k[--$j], _RR, ($f($f(_RM + 113) - (($_.t * $get($_.coeffs, $_.j + 1)) % 113))) % 113); //#25518
                } //#25518
                $k[$j++] = $_.rscws; //#25520
                $k[$j++] = ($_.ND + $_.NC) - 1; //#25520
                $_.offset(); //#25520
                var _Ra = $k[--$j]; //#25520
                $put($k[--$j], _Ra, ($f(113 - (($_.t * $get($_.coeffs, $_.NC)) % 113))) % 113); //#25520
            } //#25520
            for (var _Rf = $_.ND, _Re = $_.NW - 1; _Rf <= _Re; _Rf += 1) { //#25522
                $k[$j++] = _Rf; //#25522
                $k[$j++] = $_.rscws; //#25522
                $k[$j++] = _Rf; //#25522
                $_.offset(); //#25522
                var _Ri = $k[--$j]; //#25522
                var _Rj = $k[--$j]; //#25522
                var _Rk = $k[--$j]; //#25522
                $k[$j++] = _Rj; //#25522
                $k[$j++] = _Ri; //#25522
                $k[$j++] = 113; //#25522
                $k[$j++] = $_.rscws; //#25522
                $k[$j++] = _Rk; //#25522
                $_.offset(); //#25522
                var _Rl = $k[--$j]; //#25522
                var _Rn = $get($k[--$j], _Rl); //#25522
                var _Ro = $k[--$j]; //#25522
                var _Rp = $k[--$j]; //#25522
                $put($k[--$j], _Rp, $f(_Ro - _Rn) % 113); //#25522
            } //#25522
        } //#25522
        $_.bits = $s($_.ndots); //#25526
        $puti($_.bits, 0, $get($a(["00", "01", "10", "11"]), $_.mask)); //#25527
        for (var _Rz = 1, _Ry = $_.nw; _Rz <= _Ry; _Rz += 1) { //#25531
            $_.i = _Rz; //#25529
            $puti($_.bits, (($_.i - 1) * 9) + 2, $get($_.encs, $get($_.rscws, $_.i))); //#25530
        } //#25530
        if ($_.rembits > 0) { //#25534
            $puti($_.bits, ($_.nw * 9) + 2, $geti("11111111111111111", 0, $_.rembits)); //#25533
        } //#25533
        var _SC = $_.outline; //#25537
        $_.pixs = $arrcpy($a(_SC.length), _SC); //#25537
        $_.posx = 0; //#25538
        $k[$j++] = 'posy'; //#25539
        if (($_.rows % 2) == 0) { //#25539
            $k[$j++] = 0; //#25539
        } else { //#25539
            $k[$j++] = $_.rows - 1; //#25539
        } //#25539
        var _SH = $k[--$j]; //#25539
        $_[$k[--$j]] = _SH; //#25539
        var _SL = $geti($_.bits, 0, $_.bits.length - 6); //#25540
        for (var _SM = 0, _SN = _SL.length; _SM < _SN; _SM++) { //#25558
            $k[$j++] = $get(_SL, _SM); //#25556
            for (;;) { //#25556
                $k[$j++] = $_.pixs; //#25542
                $k[$j++] = $_.posx; //#25542
                $k[$j++] = $_.posy; //#25542
                $_.dmv(); //#25542
                var _SS = $k[--$j]; //#25542
                if ($get($k[--$j], _SS) == -1) { //#25542
                    break; //#25542
                } //#25542
                if (($_.rows % 2) == 0) { //#25553
                    $_.posy = $_.posy + 1; //#25544
                    if ($_.posy == $_.rows) { //#25548
                        $_.posy = 0; //#25546
                        $_.posx = $_.posx + 1; //#25547
                    } //#25547
                } else { //#25553
                    $_.posx = $_.posx + 1; //#25550
                    if ($_.posx == $_.columns) { //#25554
                        $_.posx = 0; //#25552
                        $_.posy = $_.posy - 1; //#25553
                    } //#25553
                } //#25553
            } //#25553
            $k[$j++] = $_.pixs; //#25557
            $k[$j++] = $_.posx; //#25557
            $k[$j++] = $_.posy; //#25557
            $_.dmv(); //#25557
            var _Sh = $k[--$j]; //#25557
            var _Si = $k[--$j]; //#25557
            $put(_Si, _Sh, $f($k[--$j] - 48)); //#25557
        } //#25557
        for (var _Sk = 0; _Sk <= 5; _Sk += 1) { //#25563
            $_.i = _Sk; //#25560
            $k[$j++] = $_.pixs; //#25561
            $aload($get($_.sixedges, $_.i)); //#25561
            $_.dmv(); //#25561
            var _St = $k[--$j]; //#25562
            $put($k[--$j], _St, $get($_.bits, ($_.bits.length - 6) + $_.i) - 48); //#25562
        } //#25562
        $k[$j++] = 'score'; //#25566
        $k[$j++] = $_.pixs; //#25566
        $_.evalsymbol(); //#25566
        var _Sw = $k[--$j]; //#25566
        $_[$k[--$j]] = _Sw; //#25566
        if ($_.score > $_.bestscore) { //#25571
            $_.bestsym = $_.pixs; //#25568
            $_.bestscore = $_.score; //#25569
            if ($_.fast && ($_.bestscore > (~~(($_.rows * $_.columns) / 2)))) { //#25570
                return true; //#25570
            } //#25570
        } //#25570
        var _T6 = $_.pixs; //#25574
        $_.litmask = $arrcpy($a(_T6.length), _T6); //#25574
        for (var _T9 = 0; _T9 <= 5; _T9 += 1) { //#25579
            $_.i = _T9; //#25576
            $k[$j++] = $_.litmask; //#25577
            $aload($get($_.sixedges, $_.i)); //#25577
            $_.dmv(); //#25577
            var _TE = $k[--$j]; //#25578
            $put($k[--$j], _TE, 1); //#25578
        } //#25578
        $put($_.litmasks, $_.mask, $_.litmask); //#25580
        if ($_.fast) { //#25590
            $k[$j++] = 'score'; //#25584
            $k[$j++] = $_.litmask; //#25584
            $_.evalsymbol(); //#25584
            var _TL = $k[--$j]; //#25584
            $_[$k[--$j]] = _TL; //#25584
            if ($gt($_.score, $_.bestscore)) { //#25589
                $_.bestsym = $_.litmask; //#25586
                $_.bestscore = $_.score; //#25587
                if ($_.bestscore > (~~(($_.rows * $_.columns) / 2))) { //#25588
                    return true; //#25588
                } //#25588
            } //#25588
        } //#25588
    }); //#25588
    $_.pixs = $_.bestsym; //#25593
    if ((!$_.fast) && ($_.bestscore <= (~~(($_.rows * $_.columns) / 2)))) { //#25607
        $_.bestscore = -99999999; //#25597
        $forall($_.masks, function() { //#25605
            $_.litmask = $get($_.litmasks, $k[--$j]); //#25599
            $k[$j++] = 'score'; //#25600
            $k[$j++] = $_.litmask; //#25600
            $_.evalsymbol(); //#25600
            var _Te = $k[--$j]; //#25600
            $_[$k[--$j]] = _Te; //#25600
            if ($_.score > $_.bestscore) { //#25604
                $_.bestsym = $_.litmask; //#25602
                $_.bestscore = $_.score; //#25603
            } //#25603
        }); //#25603
        $_.pixs = $_.bestsym; //#25606
    } //#25606
    var _Tr = new Map([
        ["ren", bwipp_renmatrix],
        ["dotty", true],
        ["pixs", $_.pixs],
        ["pixx", $_.columns],
        ["pixy", $_.rows],
        ["height", ($_.rows * 2) / 72],
        ["width", ($_.columns * 2) / 72],
        ["opt", $_.options]
    ]); //#25618
    $k[$j++] = _Tr; //#25621
    if (!$_.dontdraw) { //#25621
        bwipp_renmatrix(); //#25621
    } //#25621
    $_ = Object.getPrototypeOf($_); //#25623
    $_ = Object.getPrototypeOf($_); //#25625
}

function bwipp_ultracode() {
    $_ = Object.create($_); //#25656
    $_.dontdraw = false; //#25659
    $_.eclevel = "EC2"; //#25660
    $_.parse = false; //#25661
    $_.parsefnc = false; //#25662
    $_.start = 257; //#25663
    $_.link1 = 0; //#25664
    $_.raw = false; //#25665
    $_.rev = 2; //#25666
    $k[$j++] = $_; //#25668
    bwipp_processoptions(); //#25668
    $_.options = $k[--$j]; //#25668
    $_.barcode = $k[--$j]; //#25669
    var _2 = $_.rev; //#25671
    if ((_2 != 1) && (_2 != 2)) { //#25673
        $k[$j++] = 'bwipp.ultracodeInvalidRevision#25672'; //#25672
        $k[$j++] = "Valid revisions are 1 and 2"; //#25672
        bwipp_raiseerror(); //#25672
    } //#25672
    var _4 = $_.eclevel.length == 3; //#25675
    $k[$j++] = _4; //#25679
    if (_4) { //#25679
        $j--; //#25676
        $k[$j++] = $geti($_.eclevel, 0, 2); //#25678
        if ($eq("EC", "EC")) { //#25678
            $j--; //#25677
            var _9 = $get($_.eclevel, 2) - 48; //#25677
            var _B = ($_.rev == 2) ? 1 : 0; //#25677
            $k[$j++] = (_9 >= _B) && (_9 <= 5); //#25677
        } //#25677
    } //#25677
    if ($nt($k[--$j])) { //#25682
        $k[$j++] = 'bwipp.ultracodeInvalidErrorCorrectionLevel#25681'; //#25681
        $k[$j++] = "Valid error correction levels are EC1 to EC5, and EC0 for legacy revision 1"; //#25681
        bwipp_raiseerror(); //#25681
    } //#25681
    bwipp_loadctx(bwipp_ultracode) //#25684
    if ($_.raw) { //#25721
        $_.dcws = $a($_.barcode.length); //#25688
        $_.i = 0; //#25689
        $_.j = 0; //#25689
        for (;;) { //#25696
            if ($_.i == $_.barcode.length) { //#25691
                break; //#25691
            } //#25691
            $_.cw = $cvi($geti($_.barcode, $_.i + 1, 3)); //#25692
            $put($_.dcws, $_.j, $_.cw); //#25693
            $_.i = $_.i + 4; //#25694
            $_.j = $_.j + 1; //#25695
        } //#25695
        $_.dcws = $geti($_.dcws, 0, $_.j); //#25697
    } else { //#25721
        $_.fn1 = -1; //#25702
        $_.fn3 = -2; //#25702
        var _X = new Map([
            ["parse", $_.parse],
            ["parsefnc", $_.parsefnc],
            ["FNC1", $_.fn1],
            ["FNC3", $_.fn3]
        ]); //#25707
        $_.fncvals = _X; //#25708
        $k[$j++] = 'msg'; //#25709
        $k[$j++] = $_.barcode; //#25709
        $k[$j++] = $_.fncvals; //#25709
        bwipp_parseinput(); //#25709
        var _a = $k[--$j]; //#25709
        $_[$k[--$j]] = _a; //#25709
        $_.msglen = $_.msg.length; //#25710
        $_.scr = $a([]); //#25712
        $_.scp = $a([]); //#25713
        $k[$j++] = Infinity; //#25719
        $aload($_.scr); //#25715
        $aload($_.scp); //#25716
        $forall($_.msg, function() { //#25720
            var _i = $k[--$j]; //#25718
            $k[$j++] = _i; //#25718
            if (_i == $_.fn1) { //#25718
                $j--; //#25718
                $k[$j++] = 268; //#25718
            } //#25718
            var _k = $k[--$j]; //#25719
            $k[$j++] = _k; //#25719
            if (_k == $_.fn3) { //#25719
                $j--; //#25719
                $k[$j++] = 269; //#25719
            } //#25719
        }); //#25719
        $_.dcws = $a(); //#25719
    } //#25721
    var _o = $get($_.options, 'debugcws') !== undefined; //#25725
    if (_o) { //#25725
        $k[$j++] = 'bwipp.debugcws#25725'; //#25725
        $k[$j++] = $_.dcws; //#25725
        bwipp_raiseerror(); //#25725
    } //#25725
    $_.mcc = $_.dcws.length + 3; //#25727
    $_.eclval = $get($_.eclevel, 2) - 48; //#25729
    if ($_.eclval != 0) { //#25733
        $k[$j++] = 'qcc'; //#25731
        $k[$j++] = $get($a([0, 1, 2, 4, 6, 8]), $_.eclval); //#25731
        $k[$j++] = ~~($_.mcc / 25); //#25731
        if (($_.mcc % 25) != 0) { //#25731
            var _z = $k[--$j]; //#25731
            $k[$j++] = $f(_z + 1); //#25731
        } //#25731
        var _10 = $k[--$j]; //#25731
        var _11 = $k[--$j]; //#25731
        $_[$k[--$j]] = $f((_11 * _10) + 5); //#25731
    } else { //#25733
        $_.qcc = 3; //#25733
    } //#25733
    $_.acc = ($_.qcc - 3) + (78 * $_.link1); //#25735
    $_.tcc = $_.mcc + $_.qcc; //#25736
    if (!bwipp_ultracode.__25747__) { //#25747
        $_ = Object.create($_); //#25747
        $_.metrics = $a([$a([2, 7, 37, 5]), $a([3, 36, 84, 13]), $a([4, 85, 161, 22]), $a([5, 142, 282, 29])]); //#25746
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_ultracode.$ctx[id] = $_[id]); //#25746
        bwipp_ultracode.__25747__ = 1; //#25746
        $_ = Object.getPrototypeOf($_); //#25746
    } //#25746
    var _1D = $_.metrics; //#25749
    for (var _1E = 0, _1F = _1D.length; _1E < _1F; _1E++) { //#25758
        $_.m = $get(_1D, _1E); //#25750
        $_.rows = $get($_.m, 0); //#25751
        $_.minc = $get($_.m, 1); //#25752
        $_.maxc = $get($_.m, 2); //#25753
        $_.mcol = $get($_.m, 3); //#25754
        $_.okay = true; //#25755
        if (($_.tcc < $_.minc) || ($_.tcc > $_.maxc)) { //#25756
            $_.okay = false; //#25756
        } //#25756
        if ($_.okay) { //#25757
            break; //#25757
        } //#25757
    } //#25757
    if (!$_.okay) { //#25762
        $k[$j++] = 'bwipp.ultracodeNoValidSymbol#25761'; //#25761
        $k[$j++] = "Maximum length exceeded or invalid content"; //#25761
        bwipp_raiseerror(); //#25761
    } //#25761
    for (var _1W = $_.mcol; _1W <= 61; _1W += 1) { //#25776
        $_.columns = _1W; //#25766
        $k[$j++] = $_.columns; //#25768
        if ($_.columns >= 15) { //#25768
            var _1Z = $k[--$j]; //#25768
            $k[$j++] = $f(_1Z - 1); //#25768
        } //#25768
        if ($_.columns >= 31) { //#25769
            var _1b = $k[--$j]; //#25769
            $k[$j++] = $f(_1b - 1); //#25769
        } //#25769
        if ($_.columns >= 47) { //#25770
            var _1d = $k[--$j]; //#25770
            $k[$j++] = $f(_1d - 1); //#25770
        } //#25770
        var _1h = $f(($f(($k[--$j] * $_.rows) - 3)) - $_.tcc); //#25771
        $k[$j++] = _1h; //#25774
        if (_1h >= 0) { //#25774
            $_.pads = $k[--$j]; //#25772
            break; //#25773
        } //#25773
        $j--; //#25775
    } //#25775
    $_.dcc = $f($_.columns - $_.mcol); //#25777
    $k[$j++] = Infinity; //#25786
    $k[$j++] = $_.start; //#25784
    $k[$j++] = $_.mcc; //#25784
    $k[$j++] = $_.acc; //#25784
    $aload($_.dcws); //#25784
    for (var _1q = 0, _1r = $_.qcc; _1q < _1r; _1q++) { //#25785
        $k[$j++] = 0; //#25785
    } //#25785
    $k[$j++] = 0; //#25786
    $_.rsseq = $a(); //#25786
    $k[$j++] = Infinity; //#25790
    $k[$j++] = 1; //#25790
    for (var _1t = 0, _1u = 282; _1t < _1u; _1t++) { //#25790
        var _1v = $k[--$j]; //#25790
        $k[$j++] = _1v; //#25790
        $k[$j++] = (_1v * 3) % 283; //#25790
    } //#25790
    $_.rsalog = $a(); //#25790
    $_.rslog = $a(283); //#25791
    for (var _1y = 1; _1y <= 282; _1y += 1) { //#25792
        $put($_.rslog, $get($_.rsalog, _1y), _1y); //#25792
    } //#25792
    $_.rsprod = function() {
        var _22 = $k[--$j]; //#25796
        var _23 = $k[--$j]; //#25796
        $k[$j++] = _23; //#25800
        $k[$j++] = _22; //#25800
        if ((_22 != 0) && (_23 != 0)) { //#25799
            var _26 = $get($_.rslog, $k[--$j]); //#25797
            var _2B = $get($_.rsalog, $f(_26 + $get($_.rslog, $k[--$j])) % 282); //#25797
            $k[$j++] = _2B; //#25797
        } else { //#25799
            $j -= 2; //#25799
            $k[$j++] = 0; //#25799
        } //#25799
    }; //#25799
    $_.n = $_.mcc; //#25804
    $_.k = $_.qcc; //#25804
    $k[$j++] = Infinity; //#25805
    $k[$j++] = 1; //#25805
    for (var _2F = 0, _2G = $_.k; _2F < _2G; _2F++) { //#25805
        $k[$j++] = 0; //#25805
    } //#25805
    $_.coeffs = $a(); //#25805
    for (var _2K = 1, _2J = $_.k; _2K <= _2J; _2K += 1) { //#25814
        $_.i = _2K; //#25807
        $put($_.coeffs, $_.i, $get($_.coeffs, $_.i - 1)); //#25808
        for (var _2R = $_.i - 1; _2R >= 1; _2R -= 1) { //#25812
            $_.j = _2R; //#25810
            $k[$j++] = $_.coeffs; //#25811
            $k[$j++] = $_.j; //#25811
            $k[$j++] = $get($_.coeffs, $_.j - 1); //#25811
            $k[$j++] = $get($_.coeffs, $_.j); //#25811
            $k[$j++] = $get($_.rsalog, $_.i); //#25811
            $_.rsprod(); //#25811
            var _2d = $k[--$j]; //#25811
            var _2e = $k[--$j]; //#25811
            var _2f = $k[--$j]; //#25811
            $put($k[--$j], _2f, $f(_2e + _2d) % 283); //#25811
        } //#25811
        $k[$j++] = $_.coeffs; //#25813
        $k[$j++] = 0; //#25813
        $k[$j++] = $get($_.coeffs, 0); //#25813
        $k[$j++] = $get($_.rsalog, $_.i); //#25813
        $_.rsprod(); //#25813
        var _2n = $k[--$j]; //#25813
        var _2o = $k[--$j]; //#25813
        $put($k[--$j], _2o, _2n); //#25813
    } //#25813
    $_.coeffs = $geti($_.coeffs, 0, $_.coeffs.length - 1); //#25815
    for (var _2u = $_.coeffs.length - 1; _2u >= 0; _2u -= 2) { //#25816
        var _2v = $_.coeffs; //#25816
        $put(_2v, _2u, $f(283 - $get(_2v, _2u))); //#25816
    } //#25816
    for (var _2z = 0, _2y = $_.n - 1; _2z <= _2y; _2z += 1) { //#25825
        $_.t = $f($get($_.rsseq, _2z) + $get($_.rsseq, $_.n)) % 283; //#25820
        for (var _37 = 0, _36 = $_.k - 1; _37 <= _36; _37 += 1) { //#25824
            $_.j = _37; //#25822
            $put($_.rsseq, $_.n + $_.j, ($f($get($_.rsseq, ($_.n + $_.j) + 1) + ($f(283 - (($_.t * $get($_.coeffs, ($_.k - $_.j) - 1)) % 283))))) % 283); //#25823
        } //#25823
    } //#25823
    for (var _3O = $_.n, _3N = $_.n + $_.k; _3O <= _3N; _3O += 1) { //#25826
        $put($_.rsseq, _3O, $f(283 - $get($_.rsseq, _3O)) % 283); //#25826
    } //#25826
    $_.ecws = $geti($_.rsseq, $_.n, $_.k); //#25827
    var _3X = $get($_.options, 'debugecc') !== undefined; //#25829
    if (_3X) { //#25829
        $k[$j++] = 'bwipp.debugecc#25829'; //#25829
        $k[$j++] = $_.ecws; //#25829
        bwipp_raiseerror(); //#25829
    } //#25829
    if (!bwipp_ultracode.__25888__) { //#25888
        $_ = Object.create($_); //#25888
        $_.tiles = $a([13135, 13136, 13153, 13156, 13163, 13165, 13513, 13515, 13516, 13531, 13535, 13536, 13561, 13563, 13565, 13613, 13615, 13616, 13631, 13635, 13636, 13651, 13653, 13656, 15135, 15136, 15153, 15163, 15165, 15313, 15315, 15316, 15351, 15353, 15356, 15361, 15363, 15365, 15613, 15615, 15616, 15631, 15635, 15636, 15651, 15653, 15656, 16135, 16136, 16153, 16156, 16165, 16313, 16315, 16316, 16351, 16353, 16356, 16361, 16363, 16365, 16513, 16515, 16516, 16531, 16535, 16536, 16561, 16563, 16565, 31315, 31316, 31351, 31356, 31361, 31365, 31513, 31515, 31516, 31531, 31535, 31536, 31561, 31563, 31565, 31613, 31615, 31631, 31635, 31636, 31651, 31653, 31656, 35131, 35135, 35136, 35151, 35153, 35156, 35161, 35163, 35165, 35315, 35316, 35351, 35356, 35361, 35365, 35613, 35615, 35616, 35631, 35635, 35636, 35651, 35653, 35656, 36131, 36135, 36136, 36151, 36153, 36156, 36163, 36165, 36315, 36316, 36351, 36356, 36361, 36365, 36513, 36515, 36516, 36531, 36535, 36536, 36561, 36563, 36565, 51313, 51315, 51316, 51351, 51353, 51356, 51361, 51363, 51365, 51513, 51516, 51531, 51536, 51561, 51563, 51613, 51615, 51616, 51631, 51635, 51636, 51651, 51653, 51656, 53131, 53135, 53136, 53151, 53153, 53156, 53161, 53163, 53165, 53513, 53516, 53531, 53536, 53561, 53563, 53613, 53615, 53616, 53631, 53635, 53636, 53651, 53653, 53656, 56131, 56135, 56136, 56151, 56153, 56156, 56161, 56163, 56165, 56313, 56315, 56316, 56351, 56353, 56356, 56361, 56363, 56365, 56513, 56516, 56531, 56536, 56561, 56563, 61313, 61315, 61316, 61351, 61353, 61356, 61361, 61363, 61365, 61513, 61515, 61516, 61531, 61535, 61536, 61561, 61563, 61565, 61615, 61631, 61635, 61651, 61653, 63131, 63135, 63136, 63151, 63153, 63156, 63161, 63163, 63165, 63513, 63515, 63516, 63531, 63535, 63536, 63561, 63563, 63565, 63613, 63615, 63631, 63635, 63651, 63653, 65131, 65135, 65136, 65151, 65153, 65156, 65161, 65163, 65165, 65313, 65315, 65316, 65351, 65353, 65356, 65361, 65363, 65365, 65613, 65615, 65631, 65635, 65651, 65653, 56565, 51515]); //#25862
        $_.dccurev1 = $a([51363, 51563, 51653, 53153, 53163, 53513, 53563, 53613, 53653, 56153, 56163, 56313, 56353, 56363, 56513, 56563, 51316, 51356, 51536, 51616, 53156, 53516, 53536, 53616, 53636, 53656, 56136, 56156, 56316, 56356, 56516, 56536]); //#25869
        $_.dcclrev1 = $a([61351, 61361, 61531, 61561, 61631, 61651, 63131, 63151, 63161, 63531, 63561, 63631, 65131, 65161, 65351, 65631, 31351, 31361, 31531, 31561, 31631, 31651, 35131, 35151, 35161, 35361, 35631, 35651, 36131, 36151, 36351, 36531]); //#25875
        $_.dccurev2 = $a([15316, 16316, 13516, 16516, 13616, 15616, 13136, 15136, 16136, 13536, 16536, 13636, 13156, 16156, 15356, 13656, 15313, 16313, 13513, 16513, 13613, 15613, 13153, 15153, 16153, 16353, 13653, 15653, 13163, 15163, 15363, 13563]); //#25881
        $_.dcclrev2 = $a([36315, 36515, 35615, 35135, 36135, 31535, 36535, 31635, 35635, 35165, 36165, 31365, 35365, 36365, 31565, 36565, 61315, 65315, 63515, 61615, 65135, 61535, 63535, 61635, 63635, 65635, 63165, 65165, 61365, 65365, 61565, 63565]); //#25887
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_ultracode.$ctx[id] = $_[id]); //#25887
        bwipp_ultracode.__25888__ = 1; //#25887
        $_ = Object.getPrototypeOf($_); //#25887
    } //#25887
    $k[$j++] = 'dccu'; //#25890
    if ($_.rev == 1) { //#25890
        $k[$j++] = $_.dccurev1; //#25890
    } else { //#25890
        $k[$j++] = $_.dccurev2; //#25890
    } //#25890
    var _3i = $k[--$j]; //#25890
    $_[$k[--$j]] = _3i; //#25890
    $k[$j++] = 'dccl'; //#25891
    if ($_.rev == 1) { //#25891
        $k[$j++] = $_.dcclrev1; //#25891
    } else { //#25891
        $k[$j++] = $_.dcclrev2; //#25891
    } //#25891
    var _3n = $k[--$j]; //#25891
    $_[$k[--$j]] = _3n; //#25891
    $_.rows = $f(($_.rows * 6) + 1); //#25894
    $_.columns = $_.columns + 6; //#25895
    $k[$j++] = Infinity; //#25896
    for (var _3t = 0, _3u = $_.rows * $_.columns; _3t < _3u; _3t++) { //#25896
        $k[$j++] = -1; //#25896
    } //#25896
    $_.pixs = $a(); //#25896
    $_.qmv = function() {
        var _3x = $k[--$j]; //#25897
        var _3y = $k[--$j]; //#25897
        $k[$j++] = $f(_3y + (_3x * $_.columns)); //#25897
    }; //#25897
    for (var _41 = 0, _40 = $_.columns - 1; _41 <= _40; _41 += 1) { //#25906
        $_.i = _41; //#25899
        for (var _44 = 0, _43 = $f($_.rows - 1); _44 <= _43; _44 += 6) { //#25903
            $_.j = _44; //#25901
            if ($_.i >= 5) { //#25902
                $k[$j++] = $_.pixs; //#25902
                $k[$j++] = $_.i; //#25902
                $k[$j++] = $_.j; //#25902
                $_.qmv(); //#25902
                var _4A = $k[--$j]; //#25902
                $put($k[--$j], _4A, ($_.i % 2) * 9); //#25902
            } //#25902
        } //#25902
        $k[$j++] = $_.pixs; //#25904
        $k[$j++] = $_.i; //#25904
        $k[$j++] = 0; //#25904
        $_.qmv(); //#25904
        var _4E = $k[--$j]; //#25904
        $put($k[--$j], _4E, 9); //#25904
        $k[$j++] = $_.pixs; //#25905
        $k[$j++] = $_.i; //#25905
        $k[$j++] = $f($_.rows - 1); //#25905
        $_.qmv(); //#25905
        var _4J = $k[--$j]; //#25905
        $put($k[--$j], _4J, 9); //#25905
    } //#25905
    for (var _4N = 1, _4M = $f($_.rows - 2); _4N <= _4M; _4N += 1) { //#25919
        $_.i = _4N; //#25908
        for (var _4Q = 3, _4P = $_.columns - 1; _4Q <= _4P; _4Q += 16) { //#25912
            $_.j = _4Q; //#25910
            $k[$j++] = $_.pixs; //#25911
            $k[$j++] = $_.j; //#25911
            $k[$j++] = $_.i; //#25911
            $_.qmv(); //#25911
            var _4V = $k[--$j]; //#25911
            $put($k[--$j], _4V, (1 - ($_.i % 2)) * 9); //#25911
        } //#25911
        $k[$j++] = $_.pixs; //#25913
        $k[$j++] = 0; //#25913
        $k[$j++] = $_.i; //#25913
        $_.qmv(); //#25913
        var _4Z = $k[--$j]; //#25913
        $put($k[--$j], _4Z, 9); //#25913
        $k[$j++] = $_.pixs; //#25914
        $k[$j++] = 1; //#25914
        $k[$j++] = $_.i; //#25914
        $_.qmv(); //#25914
        var _4e = $k[--$j]; //#25914
        $put($k[--$j], _4e, (1 - ($_.i % 2)) * 9); //#25914
        $k[$j++] = $_.pixs; //#25915
        $k[$j++] = 2; //#25915
        $k[$j++] = $_.i; //#25915
        $_.qmv(); //#25915
        var _4i = $k[--$j]; //#25915
        $put($k[--$j], _4i, 0); //#25915
        $k[$j++] = $_.pixs; //#25916
        $k[$j++] = 3; //#25916
        $k[$j++] = $_.i; //#25916
        $_.qmv(); //#25916
        var _4m = $k[--$j]; //#25916
        $put($k[--$j], _4m, 9); //#25916
        $k[$j++] = $_.pixs; //#25917
        $k[$j++] = 4; //#25917
        $k[$j++] = $_.i; //#25917
        $_.qmv(); //#25917
        var _4q = $k[--$j]; //#25917
        $put($k[--$j], _4q, 0); //#25917
        $k[$j++] = $_.pixs; //#25918
        $k[$j++] = $_.columns - 1; //#25918
        $k[$j++] = $_.i; //#25918
        $_.qmv(); //#25918
        var _4v = $k[--$j]; //#25918
        $put($k[--$j], _4v, 9); //#25918
    } //#25918
    $_.i = (~~($_.rows / 2)) - 5; //#25922
    $k[$j++] = Infinity; //#25926
    var _52 = $cvrs($s(5), $get($_.dccu, $_.dcc), 10); //#25924
    for (var _53 = 0, _54 = _52.length; _53 < _54; _53++) { //#25924
        $k[$j++] = $get(_52, _53) - 48; //#25924
    } //#25924
    var _5A = $cvrs($s(5), $get($_.dccl, $_.dcc), 10); //#25926
    $k[$j++] = 0; //#25926
    for (var _5B = 0, _5C = _5A.length; _5B < _5C; _5B++) { //#25926
        $k[$j++] = $get(_5A, _5B) - 48; //#25926
    } //#25926
    var _5E = $a(); //#25926
    for (var _5F = 0, _5G = _5E.length; _5F < _5G; _5F++) { //#25930
        $k[$j++] = $get(_5E, _5F); //#25928
        $k[$j++] = $_.pixs; //#25928
        $k[$j++] = 2; //#25928
        $k[$j++] = $_.i; //#25928
        $_.qmv(); //#25928
        var _5K = $k[--$j]; //#25928
        var _5L = $k[--$j]; //#25928
        $put(_5L, _5K, $k[--$j]); //#25928
        $_.i = $_.i + 1; //#25929
    } //#25929
    $k[$j++] = Infinity; //#25942
    $k[$j++] = $_.start; //#25936
    $k[$j++] = $_.mcc; //#25936
    $aload($_.ecws); //#25936
    $k[$j++] = $_.tcc; //#25940
    $k[$j++] = 283; //#25940
    $k[$j++] = $_.acc; //#25940
    $aload($_.dcws); //#25940
    for (var _5V = 0, _5W = $_.pads; _5V < _5W; _5V++) { //#25941
        $k[$j++] = 284; //#25941
    } //#25941
    $k[$j++] = $_.qcc; //#25942
    $_.tileseq = $a(); //#25942
    $_.x = 5; //#25945
    $_.y = 1; //#25945
    var _5Z = $_.tileseq; //#25946
    for (var _5a = 0, _5b = _5Z.length; _5a < _5b; _5a++) { //#25959
        var _5g = $cvrs($s(5), $get($_.tiles, $get(_5Z, _5a)), 10); //#25947
        for (var _5h = 0, _5i = _5g.length; _5h < _5i; _5h++) { //#25950
            $k[$j++] = $get(_5g, _5h); //#25948
            $k[$j++] = $_.pixs; //#25948
            $k[$j++] = $_.x; //#25948
            $k[$j++] = $_.y; //#25948
            $_.qmv(); //#25948
            var _5n = $k[--$j]; //#25948
            var _5o = $k[--$j]; //#25948
            $put(_5o, _5n, $f($k[--$j] - 48)); //#25948
            $_.y = $_.y + 1; //#25949
        } //#25949
        if ($_.y != $f($_.rows - 1)) { //#25956
            $_.y = $_.y + 1; //#25952
        } else { //#25956
            $_.x = $_.x + 1; //#25954
            $_.y = 1; //#25954
            $k[$j++] = $_.pixs; //#25955
            $k[$j++] = $_.x; //#25955
            $k[$j++] = $_.y; //#25955
            $_.qmv(); //#25955
            var _5y = $k[--$j]; //#25955
            if ($get($k[--$j], _5y) != -1) { //#25957
                $_.x = $_.x + 1; //#25956
            } //#25956
        } //#25956
    } //#25956
    if (!bwipp_ultracode.__25970__) { //#25970
        $_ = Object.create($_); //#25970
        var _62 = new Map([
            [0, "FFFFFF"],
            [9, "000000"],
            [1, "00FFFF"],
            [3, "FF00FF"],
            [5, "FFFF00"],
            [6, "00FF00"]
        ]); //#25968
        $_.colormap = _62; //#25969
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_ultracode.$ctx[id] = $_[id]); //#25969
        bwipp_ultracode.__25970__ = 1; //#25969
        $_ = Object.getPrototypeOf($_); //#25969
    } //#25969
    var _6B = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $_.pixs],
        ["pixx", $_.columns],
        ["pixy", $_.rows],
        ["height", ($_.rows / 72) * 2],
        ["width", ($_.columns / 72) * 2],
        ["colormap", $_.colormap],
        ["opt", $_.options]
    ]); //#25981
    $k[$j++] = _6B; //#25984
    if (!$_.dontdraw) { //#25984
        bwipp_renmatrix(); //#25984
    } //#25984
    $_ = Object.getPrototypeOf($_); //#25986
    $_ = Object.getPrototypeOf($_); //#25988
}

function bwipp_jabcode() {
    $_ = Object.create($_); //#26017
    $_.dontdraw = false; //#26020
    $_.rows = -1; //#26021
    $_.columns = -1; //#26022
    $_.slave = false; //#26023
    $_.colors = 16; //#26024
    $_.eclevel = 6; //#26025
    $_.raw = false; //#26026
    $_.parse = false; //#26027
    $_.parsefnc = false; //#26028
    $_.mask = -1; //#26029
    $k[$j++] = $_; //#26031
    bwipp_processoptions(); //#26031
    $_.options = $k[--$j]; //#26031
    $_.barcode = $k[--$j]; //#26032
    $_.databpm = ~~(Math.round(Math.log($_.colors) / Math.log(2))); //#26034
    var _3 = $_.colors; //#26035
    $k[$j++] = 'metabpm'; //#26035
    $k[$j++] = _3; //#26035
    if (_3 > 8) { //#26035
        $j--; //#26035
        $k[$j++] = 8; //#26035
    } //#26035
    var _4 = $k[--$j]; //#26035
    $_[$k[--$j]] = ~~(Math.round(Math.log(_4) / Math.log(2))); //#26035
    $_.fn1 = -1; //#26038
    var _9 = new Map([
        ["parse", $_.parse],
        ["parsefnc", $_.parsefnc],
        ["FNC1", $_.fn1]
    ]); //#26042
    $_.fncvals = _9; //#26043
    $k[$j++] = 'msg'; //#26044
    $k[$j++] = $_.barcode; //#26044
    $k[$j++] = $_.fncvals; //#26044
    bwipp_parseinput(); //#26044
    var _C = $k[--$j]; //#26044
    $_[$k[--$j]] = _C; //#26044
    $_.msglen = $_.msg.length; //#26045
    $_.addtobits = function() {
        var _F = $k[--$j]; //#26066
        $puti($_.bits, $_.j, _F); //#26066
        $_.j = _F.length + $_.j; //#26067
    }; //#26067
    $_.tofixedbits = function() {
        var _K = $strcpy($s(13), "0000000000000"); //#26071
        var _L = $k[--$j]; //#26071
        var _O = $cvrs($s(13), $k[--$j], 2); //#26071
        $puti(_K, $f(_L - _O.length), _O); //#26072
        $k[$j++] = $geti(_K, 0, _L); //#26073
    }; //#26073
    var _R = ($_.msglen <= 15) ? 4 : 17; //#26077
    $_.bits = $s(((7 + _R) + ($_.msglen * 8)) + 12); //#26077
    $_.j = 0; //#26078
    $k[$j++] = 31; //#26079
    $k[$j++] = 5; //#26079
    $_.tofixedbits(); //#26079
    $_.addtobits(); //#26079
    $k[$j++] = "00"; //#26080
    $_.addtobits(); //#26080
    if ($_.msglen <= 15) { //#26085
        $k[$j++] = $_.msglen; //#26082
        $k[$j++] = 4; //#26082
        $_.tofixedbits(); //#26082
        $_.addtobits(); //#26082
    } else { //#26085
        $k[$j++] = "0000"; //#26084
        $_.addtobits(); //#26084
        $k[$j++] = $_.msglen - 16; //#26085
        $k[$j++] = 13; //#26085
        $_.tofixedbits(); //#26085
        $_.addtobits(); //#26085
    } //#26085
    for (var _Z = 0, _Y = $_.msglen - 1; _Z <= _Y; _Z += 1) { //#26089
        $k[$j++] = $get($_.msg, _Z); //#26088
        $k[$j++] = 8; //#26088
        $_.tofixedbits(); //#26088
        $_.addtobits(); //#26088
    } //#26088
    $k[$j++] = 28; //#26090
    $k[$j++] = 5; //#26090
    $_.tofixedbits(); //#26090
    $_.addtobits(); //#26090
    $k[$j++] = 31; //#26091
    $k[$j++] = 5; //#26091
    $_.tofixedbits(); //#26091
    $_.addtobits(); //#26091
    $k[$j++] = "11"; //#26092
    $_.addtobits(); //#26092
    $_.diffside = 21; //#26095
    $_.sameshape = false; //#26096
    $_.sameecc = false; //#26097
    $_.hasslaves = false; //#26098
    $_.metrics = function() {
        $_.mc = $k[--$j]; //#26102
        $_.mr = $k[--$j]; //#26102
        var _e = $_.mc; //#26103
        var _f = $_.mr; //#26103
        var _g = $_.mc; //#26104
        var _h = $_.mr; //#26104
        var _i = $_.colors; //#26106
        var _j = 64; //#26106
        if (64 > _i) { //#26106
            var _ = _i; //#26106
            _i = _j; //#26106
            _j = _; //#26106
        } //#26106
        var _l = $_.slave ? 7 : 17; //#26107
        $k[$j++] = _e * _f; //#26135
        $k[$j++] = ((((~~($f(_g - 25) / 16)) + 2) * ((~~($f(_h - 25) / 16)) + 2)) - 4) * 7; //#26135
        $k[$j++] = _j * 2; //#26135
        $k[$j++] = _l * 4; //#26135
        if (!$_.slave) { //#26134
            var _p = $eq($_.mr, $_.mc) ? 0 : 1; //#26111
            $_.metass = _p; //#26111
            var _q = $_.mr; //#26112
            var _r = $_.mc; //#26112
            if ($lt(_q, _r)) { //#26112
                var _ = _r; //#26112
                _r = _q; //#26112
                _q = _; //#26112
            } //#26112
            $_.metavf = $get($a([0, 1, 2, 2, 3, 3, 3, 3]), ~~($f(_q - 21) / 16)); //#26113
            $k[$j++] = 'metavlen'; //#26114
            if ($_.metass == 0) { //#26114
                $k[$j++] = $a([2, 2, 3, 4]); //#26114
            } else { //#26114
                $k[$j++] = $a([4, 6, 8, 10]); //#26114
            } //#26114
            var _z = $get($k[--$j], $_.metavf); //#26114
            $_[$k[--$j]] = _z; //#26114
            $_.metaelen = $f(($_.metavf * 2) + 10); //#26115
            $k[$j++] = $f($f(7 + $_.metavlen) + $_.metaelen); //#26118
            if ($_.hasslaves) { //#26118
                var _15 = $k[--$j]; //#26118
                $k[$j++] = $f(_15 + 4); //#26118
            } //#26118
            var _18 = ~~(Math.ceil(($k[--$j] * 2) / $_.metabpm)); //#26121
            $_.nummetabits = $f((_18 * $_.metabpm) + 6); //#26121
            $k[$j++] = _18 + 6; //#26122
        } else { //#26134
            $k[$j++] = 3; //#26125
            if (!$_.sameshape) { //#26125
                var _1B = $k[--$j]; //#26125
                $k[$j++] = $f(_1B + 5); //#26125
            } //#26125
            if ($_.hasslaves) { //#26126
                var _1D = $k[--$j]; //#26126
                $k[$j++] = $f(_1D + 3); //#26126
            } //#26126
            if (!$_.sameecc) { //#26131
                var _1F = $_.mr; //#26128
                var _1G = $_.mc; //#26128
                if ($lt(_1F, _1G)) { //#26128
                    var _ = _1G; //#26128
                    _1G = _1F; //#26128
                    _1F = _; //#26128
                } //#26128
                var _1J = $k[--$j]; //#26130
                $k[$j++] = $f(_1J + $get($a([10, 12, 14, 14, 16, 16, 16, 16]), ~~($f(_1F - 21) / 16))); //#26130
            } //#26130
            var _1M = ~~(Math.ceil(($k[--$j] * 2) / $_.metabpm)); //#26134
            $_.nummetabits = _1M * $_.metabpm; //#26134
            $k[$j++] = _1M; //#26134
        } //#26134
        var _1O = $k[--$j]; //#26137
        $_.nummetamodules = _1O; //#26137
        var _1P = $k[--$j]; //#26138
        var _1Q = $k[--$j]; //#26138
        var _1R = $k[--$j]; //#26138
        $_.numdatamodules = $f($k[--$j] - ($f(_1R + ($f(_1Q + $f(_1P + _1O)))))); //#26138
        $_.numdatabits = $_.numdatamodules * $_.databpm; //#26139
    }; //#26139
    $_.coderate = $get($a([0.67, 0.63, 0.57, 0.55, 0.5, 0.43, 0.34, 0.25, 0.2, 0.17, 0.14]), $_.eclevel); //#26143
    $_.grosslen = ~~Math.ceil($_.bits.length / $_.coderate); //#26144
    $_.snapsize = function() {
        var _1b = (~~Math.ceil($k[--$j])) - 18; //#26145
        $k[$j++] = _1b; //#26145
        if (_1b < 0) { //#26145
            $j--; //#26145
            $k[$j++] = 0; //#26145
        } //#26145
        var _1c = $k[--$j]; //#26145
        $k[$j++] = ((~~(_1c / 4)) * 4) + 21; //#26145
    }; //#26145
    if (($_.rows == -1) && ($_.columns == -1)) { //#26174
        $k[$j++] = 'size'; //#26148
        $k[$j++] = Math.sqrt($_.grosslen); //#26148
        $_.snapsize(); //#26148
        var _1g = $k[--$j]; //#26148
        $_[$k[--$j]] = _1g; //#26148
        for (;;) { //#26153
            $k[$j++] = $_.size; //#26150
            $k[$j++] = $_.size; //#26150
            $_.metrics(); //#26150
            if ($_.grosslen <= $_.numdatabits) { //#26151
                break; //#26151
            } //#26151
            $_.size = $f($_.size + 4); //#26152
        } //#26152
        $_.rows = $_.size; //#26154
        $_.columns = $_.size; //#26155
    } else { //#26174
        if (($_.columns == -1) && ($_.rows != -1)) { //#26164
            $k[$j++] = 'columns'; //#26158
            $k[$j++] = $_.grosslen / $_.rows; //#26158
            $_.snapsize(); //#26158
            var _1t = $k[--$j]; //#26158
            $_[$k[--$j]] = _1t; //#26158
            for (;;) { //#26163
                $k[$j++] = $_.rows; //#26160
                $k[$j++] = $_.columns; //#26160
                $_.metrics(); //#26160
                if ($_.grosslen <= $_.numdatabits) { //#26161
                    break; //#26161
                } //#26161
                $_.columns = $f($_.columns + 4); //#26162
            } //#26162
        } //#26162
        if (($_.rows == -1) && ($_.columns != -1)) { //#26172
            $k[$j++] = 'rows'; //#26166
            $k[$j++] = $_.grosslen / $_.columns; //#26166
            $_.snapsize(); //#26166
            var _24 = $k[--$j]; //#26166
            $_[$k[--$j]] = _24; //#26166
            for (;;) { //#26171
                $k[$j++] = $_.rows; //#26168
                $k[$j++] = $_.columns; //#26168
                $_.metrics(); //#26168
                if ($_.grosslen <= $_.numdatabits) { //#26169
                    break; //#26169
                } //#26169
                $_.rows = $f($_.rows + 4); //#26170
            } //#26170
        } //#26170
        if (($_.rows != -1) && ($_.columns != -1)) { //#26175
            $k[$j++] = $_.rows; //#26174
            $k[$j++] = $_.columns; //#26174
            $_.metrics(); //#26174
        } //#26174
    } //#26174
    $_.C = $_.numdatabits; //#26177
    $_.cols = $_.columns; //#26178
    if (($_.rows > 145) || ($_.cols > 145)) { //#26183
        $k[$j++] = 'bwipp.jabcodeNoValidSymbol#26182'; //#26182
        $k[$j++] = "Maximum length exceeded or invalid content"; //#26182
        bwipp_raiseerror(); //#26182
    } //#26182
    $_.min = $_.C; //#26186
    for (var _2K = 3; _2K <= 8; _2K += 1) { //#26198
        $_.i = _2K; //#26188
        for (var _2M = $_.i + 1; _2M <= 9; _2M += 1) { //#26197
            $_.j = _2M; //#26190
            $_.dist = (((~~($_.C / $_.j)) * $_.j) - ((~~($_.C / $_.j)) * $_.i)) - $_.bits.length; //#26191
            if (($_.dist < $_.min) && ($_.dist >= 0)) { //#26196
                $_.datawc = $_.i; //#26193
                $_.datawr = $_.j; //#26194
                $_.min = $_.dist; //#26195
            } //#26195
        } //#26195
    } //#26195
    $_.tmpbits = $s(((~~($_.C / $_.datawr)) * $_.datawr) - ((~~($_.C / $_.datawr)) * $_.datawc)); //#26201
    $puti($_.tmpbits, 0, $_.bits); //#26202
    for (var _2m = $_.bits.length, _2l = $_.tmpbits.length - 1; _2m <= _2l; _2m += 1) { //#26206
        var _2o = $get($_.tmpbits, _2m - 1); //#26204
        $k[$j++] = _2m; //#26204
        $k[$j++] = _2o; //#26204
        if ((_2o % 2) == 0) { //#26204
            var _2p = $k[--$j]; //#26204
            $k[$j++] = $f(_2p + 1); //#26204
        } else { //#26204
            var _2q = $k[--$j]; //#26204
            $k[$j++] = $f(_2q - 1); //#26204
        } //#26204
        var _2s = $k[--$j]; //#26205
        $put($_.tmpbits, $k[--$j], _2s); //#26205
    } //#26205
    $_.bits = $_.tmpbits; //#26207
    $_.m0 = 22609 + 1; //#26211
    $_.m1 = 62509 - 65536; //#26211
    $_.m2 = 19605; //#26211
    $_.m3 = 32557; //#26211
    $_.lcg64_temper = function() {
        $_.p00 = $_.m0 * $_.s0; //#26217
        $_.p01 = $_.m0 * $_.s1; //#26217
        $_.p02 = $_.m0 * $_.s2; //#26217
        $_.p03 = $_.m0 * $_.s3; //#26217
        $_.p10 = $_.m1 * $_.s0; //#26218
        $_.p11 = $_.m1 * $_.s1; //#26218
        $_.p12 = $_.m1 * $_.s2; //#26218
        $_.p13 = $_.m1 * $_.s3; //#26218
        $_.p20 = $_.m2 * $_.s0; //#26219
        $_.p21 = $_.m2 * $_.s1; //#26219
        $_.p22 = $_.m2 * $_.s2; //#26219
        $_.p23 = $_.m2 * $_.s3; //#26219
        $_.p30 = $_.m3 * $_.s0; //#26220
        $_.p31 = $_.m3 * $_.s1; //#26220
        $_.p32 = $_.m3 * $_.s2; //#26220
        $_.p33 = $_.m3 * $_.s3; //#26220
        $_.s3 = ($_.p33 % 65536) + 1; //#26222
        $_.s2 = (($_.p32 % 65536) + (~~($_.p33 / 65536))) + ($_.p23 % 65536); //#26224
        $_.s1 = ((($_.p31 % 65536) + (~~($_.p32 / 65536))) + (($_.p22 % 65536) + (~~($_.p23 / 65536)))) + ($_.p13 % 65536); //#26227
        $_.s0 = (((($_.p30 % 65536) + (~~($_.p31 / 65536))) + (($_.p21 % 65536) + (~~($_.p22 / 65536)))) + (($_.p12 % 65536) + (~~($_.p13 / 65536)))) + ($_.p03 % 65536); //#26231
        $_.s3 = $_.s3 + 65536; //#26234
        $_.s2 = $_.s2 + 65535; //#26235
        $_.s1 = $_.s1 + 65535; //#26236
        $_.s0 = $_.s0 + 65535; //#26237
        $_.s2 = (~~($_.s3 / 65536)) + $_.s2; //#26240
        $_.s3 = $_.s3 % 65536; //#26240
        $_.s1 = (~~($_.s2 / 65536)) + $_.s1; //#26241
        $_.s2 = $_.s2 % 65536; //#26241
        $_.s0 = (~~($_.s1 / 65536)) + $_.s0; //#26242
        $_.s1 = $_.s1 % 65536; //#26242
        $_.s0 = $_.s0 % 65536; //#26243
        var _3x = (((($_.s0 - 32768) * 65536) + $_.s1) ^ 2147483648) & 4294967295; //#26248
        var _3y = _3x ^ (_3x >>> 11); //#26249
        var _3z = _3y ^ ((_3y << 7) & -1658038656); //#26250
        var _40 = (_3z ^ ((_3z << 15) & -272236544)) & 4294967295; //#26252
        $k[$j++] = _40 ^ (_40 >>> 18); //#26252
    }; //#26252
    $_.createMatrixA = function() {
        $k[$j++] = 'nb_pcb'; //#26258
        if ($_.wr < 4) { //#26258
            $k[$j++] = ~~($_.Pg_sub_block / 2); //#26258
        } else { //#26258
            $k[$j++] = (~~($_.Pg_sub_block / $_.wr)) * $_.wc; //#26258
        } //#26258
        var _46 = $k[--$j]; //#26258
        $_[$k[--$j]] = _46; //#26258
        $_.offset = ~~Math.ceil($_.Pg_sub_block / 32); //#26259
        $_.effwidth = $_.offset * 32; //#26260
        $_.matrixA = $a($_.offset * $_.nb_pcb); //#26261
        for (var _4G = 0, _4F = ($_.offset * $_.nb_pcb) - 1; _4G <= _4F; _4G += 1) { //#26262
            $put($_.matrixA, _4G, 0); //#26262
        } //#26262
        $_.permutation = $a($_.Pg_sub_block); //#26263
        for (var _4M = 0, _4L = $_.Pg_sub_block - 1; _4M <= _4L; _4M += 1) { //#26264
            $put($_.permutation, _4M, _4M); //#26264
        } //#26264
        for (var _4R = 0, _4Q = (~~($_.Pg_sub_block / $_.wr)) - 1; _4R <= _4Q; _4R += 1) { //#26273
            $_.i = _4R; //#26267
            for (var _4U = 0, _4T = $f($_.wr - 1); _4U <= _4T; _4U += 1) { //#26272
                $_.j = _4U; //#26269
                var _4V = $_.matrixA; //#26270
                var _4W = $_.i; //#26270
                var _4X = $_.effwidth; //#26270
                var _4Y = $_.wr; //#26270
                var _4Z = $_.j; //#26270
                var _4f = $f(31 - (($f(($_.i * $f($_.effwidth + $_.wr)) + $_.j)) % 32)); //#26271
                $put(_4V, ~~(($f((_4W * $f(_4X + _4Y)) + _4Z)) / 32), $get(_4V, ~~(($f((_4W * $f(_4X + _4Y)) + _4Z)) / 32)) | ((_4f < 0 ? 1 >>> -_4f : 1 << _4f))); //#26271
            } //#26271
        } //#26271
        $_.s0 = 0; //#26276
        $_.s1 = 0; //#26276
        $_.s2 = 11; //#26276
        $_.s3 = 64569; //#26276
        for (var _4i = 1, _4h = $f($_.wc - 1); _4i <= _4h; _4i += 1) { //#26299
            $_.i = _4i; //#26278
            $_.off_index = (~~($_.Pg_sub_block / $_.wr)) * $_.i; //#26279
            for (var _4o = 0, _4n = $_.Pg_sub_block - 1; _4o <= _4n; _4o += 1) { //#26298
                $_.j = _4o; //#26281
                $_.lcg64_temper(); //#26282
                var _4p = $k[--$j]; //#26283
                $k[$j++] = _4p; //#26283
                if (_4p < 0) { //#26283
                    var _4q = $k[--$j]; //#26283
                    $k[$j++] = $f((_4q ^ 2147483648) + 2147483648); //#26283
                } //#26283
                $_.pos = ~~(($k[--$j] / 4294967296) * ($_.Pg_sub_block - $_.j)); //#26285
                for (var _4x = 0, _4w = (~~($_.Pg_sub_block / $_.wr)) - 1; _4x <= _4w; _4x += 1) { //#26294
                    $_.k = _4x; //#26287
                    var _4y = $_.matrixA; //#26288
                    var _4z = $_.off_index; //#26288
                    var _50 = $_.k; //#26288
                    var _51 = $_.offset; //#26288
                    var _52 = $_.j; //#26288
                    var _5A = $get($_.matrixA, (~~($get($_.permutation, $_.pos) / 32)) + ($_.k * $_.offset)); //#26290
                    var _5E = -($f(31 - ($get($_.permutation, $_.pos) % 32))); //#26291
                    var _5G = 31 - ($_.j % 32); //#26292
                    $put(_4y, ((_4z + _50) * _51) + (~~(_52 / 32)), $get(_4y, ((_4z + _50) * _51) + (~~(_52 / 32))) | ((_5G < 0 ? (((_5E < 0 ? _5A >>> -_5E : _5A << _5E)) & 1) >>> -_5G : (((_5E < 0 ? _5A >>> -_5E : _5A << _5E)) & 1) << _5G))); //#26293
                } //#26293
                var _5J = $_.permutation; //#26295
                var _5K = $_.Pg_sub_block; //#26295
                var _5L = $_.j; //#26295
                $put(_5J, (_5K - 1) - _5L, $get($_.permutation, $_.pos)); //#26297
                $put($_.permutation, $_.pos, $get(_5J, (_5K - 1) - _5L)); //#26297
            } //#26297
        } //#26297
    }; //#26297
    $_.createMetadataMatrixA = function() {
        $_.nb_pcb = ~~($_.Pg_sub_block / 2); //#26305
        $_.offset = ~~Math.ceil($_.Pg_sub_block / 32); //#26306
        $_.matrixA = $a($_.offset * $_.nb_pcb); //#26307
        for (var _5Y = 0, _5X = ($_.offset * $_.nb_pcb) - 1; _5Y <= _5X; _5Y += 1) { //#26308
            $put($_.matrixA, _5Y, 0); //#26308
        } //#26308
        $_.permutation = $a($_.Pg_sub_block); //#26309
        for (var _5e = 0, _5d = $_.Pg_sub_block - 1; _5e <= _5d; _5e += 1) { //#26310
            $put($_.permutation, _5e, _5e); //#26310
        } //#26310
        $_.s0 = 0; //#26313
        $_.s1 = 0; //#26313
        $_.s2 = 0; //#26313
        $_.s3 = 38545; //#26313
        $_.nb_once = ~~((~~($f((($_.nb_pcb / $_.wc) * $_.Pg_sub_block) + 3))) / $_.nb_pcb); //#26314
        for (var _5m = 0, _5l = $_.nb_pcb - 1; _5m <= _5l; _5m += 1) { //#26329
            $_.i = _5m; //#26316
            for (var _5p = 0, _5o = $_.nb_once - 1; _5p <= _5o; _5p += 1) { //#26328
                $_.j = _5p; //#26318
                $_.lcg64_temper(); //#26319
                var _5q = $k[--$j]; //#26320
                $k[$j++] = _5q; //#26320
                if (_5q < 0) { //#26320
                    var _5r = $k[--$j]; //#26320
                    $k[$j++] = $f((_5r ^ 2147483648) + 2147483648); //#26320
                } //#26320
                $_.pos = ~~(($k[--$j] / 4294967296) * ($_.Pg_sub_block - $_.j)); //#26322
                var _5v = $_.matrixA; //#26323
                var _5w = $_.i; //#26323
                var _5x = $_.offset; //#26323
                var _60 = $get($_.permutation, $_.pos); //#26323
                var _65 = $f(31 - ($get($_.permutation, $_.pos) % 32)); //#26324
                $put(_5v, (_5w * _5x) + (~~(_60 / 32)), $get(_5v, (_5w * _5x) + (~~(_60 / 32))) | ((_65 < 0 ? 1 >>> -_65 : 1 << _65))); //#26324
                var _68 = $_.permutation; //#26325
                var _69 = $_.Pg_sub_block; //#26325
                var _6A = $_.j; //#26325
                $put(_68, (_69 - 1) - _6A, $get($_.permutation, $_.pos)); //#26327
                $put($_.permutation, $_.pos, $get(_68, (_69 - 1) - _6A)); //#26327
            } //#26327
        } //#26327
    }; //#26327
    $_.GaussJordan = function() {
        $k[$j++] = 'nb_pcb'; //#26335
        if ($_.wr < 4) { //#26335
            $k[$j++] = ~~($_.Pg_sub_block / 2); //#26335
        } else { //#26335
            $k[$j++] = (~~($_.Pg_sub_block / $_.wr)) * $_.wc; //#26335
        } //#26335
        var _6K = $k[--$j]; //#26335
        $_[$k[--$j]] = _6K; //#26335
        $_.offset = ~~Math.ceil($_.Pg_sub_block / 32); //#26336
        var _6N = $_.matrixA; //#26337
        $_.matrixH = $arrcpy($a(_6N.length), _6N); //#26337
        $k[$j++] = Infinity; //#26338
        for (var _6R = 0, _6S = $_.Pg_sub_block; _6R < _6S; _6R++) { //#26338
            $k[$j++] = 0; //#26338
        } //#26338
        $_.column_arrangement = $a(); //#26338
        $k[$j++] = Infinity; //#26339
        for (var _6V = 0, _6W = $_.Pg_sub_block; _6V < _6W; _6V++) { //#26339
            $k[$j++] = false; //#26339
        } //#26339
        $_.processed_column = $a(); //#26339
        $k[$j++] = Infinity; //#26340
        for (var _6Z = 0, _6a = $_.nb_pcb; _6Z < _6a; _6Z++) { //#26340
            $k[$j++] = 0; //#26340
        } //#26340
        $_.zero_lines_nb = $a(); //#26340
        $k[$j++] = Infinity; //#26341
        for (var _6d = 0, _6e = $_.Pg_sub_block * 2; _6d < _6e; _6d++) { //#26341
            $k[$j++] = 0; //#26341
        } //#26341
        $_.swap_col = $a(); //#26341
        $_.zero_lines = 0; //#26342
        $_.loop0 = 0; //#26344
        for (var _6i = 0, _6h = $_.nb_pcb - 1; _6i <= _6h; _6i += 1) { //#26382
            $_.i = _6i; //#26346
            $_.pivot_column = $_.Pg_sub_block + 1; //#26347
            for (var _6m = 0, _6l = $_.Pg_sub_block - 1; _6m <= _6l; _6m += 1) { //#26355
                $_.j = _6m; //#26349
                var _6r = $get($_.matrixH, ~~(((($_.offset * 32) * $_.i) + $_.j) / 32)); //#26350
                var _6v = -(31 - (((($_.offset * 32) * $_.i) + $_.j) % 32)); //#26351
                if ((((_6v < 0 ? _6r >>> -_6v : _6r << _6v)) & 1) == 1) { //#26354
                    $_.pivot_column = $_.j; //#26352
                    break; //#26353
                } //#26353
            } //#26353
            if ($_.pivot_column < $_.Pg_sub_block) { //#26380
                $put($_.processed_column, $_.pivot_column, true); //#26357
                $put($_.column_arrangement, $_.pivot_column, $_.i); //#26358
                if ($_.pivot_column >= $_.nb_pcb) { //#26362
                    $put($_.swap_col, $_.loop0 * 2, $_.pivot_column); //#26360
                    $_.loop0 = $_.loop0 + 1; //#26361
                } //#26361
                $_.off_index = ~~($_.pivot_column / 32); //#26363
                $_.off_index1 = $_.pivot_column % 32; //#26364
                for (var _7E = 0, _7D = $_.nb_pcb - 1; _7E <= _7D; _7E += 1) { //#26377
                    $_.j = _7E; //#26366
                    if ($_.i != $_.j) { //#26376
                        var _7L = $get($_.matrixH, $_.off_index + ($_.j * $_.offset)); //#26368
                        var _7N = -(31 - $_.off_index1); //#26369
                        if ((((_7N < 0 ? _7L >>> -_7N : _7L << _7N)) & 1) == 1) { //#26375
                            for (var _7Q = 0, _7P = $_.offset - 1; _7Q <= _7P; _7Q += 1) { //#26374
                                $_.k = _7Q; //#26371
                                var _7R = $_.matrixH; //#26372
                                var _7S = $_.offset; //#26372
                                var _7T = $_.j; //#26372
                                var _7U = $_.k; //#26372
                                $put(_7R, (_7S * _7T) + _7U, $xo($get(_7R, (_7S * _7T) + _7U), $get($_.matrixH, ($_.offset * $_.i) + $_.k))); //#26373
                            } //#26373
                        } //#26373
                    } //#26373
                } //#26373
            } else { //#26380
                $put($_.zero_lines_nb, $_.zero_lines, $_.i); //#26379
                $_.zero_lines = $_.zero_lines + 1; //#26380
            } //#26380
        } //#26380
        $_.matrix_rank = $_.nb_pcb - $_.zero_lines; //#26384
        $_.loop2 = 0; //#26385
        for (var _7k = $_.matrix_rank, _7j = $_.nb_pcb - 1; _7k <= _7j; _7k += 1) { //#26405
            $_.i = _7k; //#26387
            if ($get($_.column_arrangement, $_.i) > 0) { //#26404
                for (var _7q = 0, _7p = $_.nb_pcb - 1; _7q <= _7p; _7q += 1) { //#26403
                    $_.j = _7q; //#26390
                    if ($nt($get($_.processed_column, $_.j))) { //#26402
                        $put($_.column_arrangement, $_.j, $get($_.column_arrangement, $_.i)); //#26392
                        $put($_.column_arrangement, $_.i, 0); //#26393
                        $put($_.processed_column, $_.j, true); //#26394
                        $put($_.processed_column, $_.i, false); //#26395
                        $put($_.swap_col, $_.loop0 * 2, $_.i); //#26396
                        $put($_.swap_col, ($_.loop0 * 2) + 1, $_.j); //#26397
                        $put($_.column_arrangement, $_.i, $_.j); //#26398
                        $_.loop0 = $_.loop0 + 1; //#26399
                        $_.loop2 = $_.loop2 + 1; //#26400
                        break; //#26401
                    } //#26401
                } //#26401
            } //#26401
        } //#26401
        $_.loop1 = 0; //#26407
        for (var _8I = 0, _8H = $_.nb_pcb - 1; _8I <= _8H; _8I += 1) { //#26416
            $_.kl = _8I; //#26409
            if ($nt($get($_.processed_column, $_.kl)) && ($_.loop1 < ($_.loop0 - $_.loop2))) { //#26415
                $put($_.column_arrangement, $_.kl, $get($_.column_arrangement, $get($_.swap_col, $_.loop1 * 2))); //#26411
                $put($_.processed_column, $_.kl, true); //#26412
                $put($_.swap_col, ($_.loop1 * 2) + 1, $_.kl); //#26413
                $_.loop1 = $_.loop1 + 1; //#26414
            } //#26414
        } //#26414
        $_.loop1 = 0; //#26418
        for (var _8e = 0, _8d = $_.nb_pcb - 1; _8e <= _8d; _8e += 1) { //#26425
            $_.kl = _8e; //#26420
            if ($nt($get($_.processed_column, $_.kl))) { //#26424
                $put($_.column_arrangement, $_.kl, $get($_.zero_lines_nb, $_.loop1)); //#26422
                $_.loop1 = $_.loop1 + 1; //#26423
            } //#26423
        } //#26423
        for (var _8q = 0, _8p = $_.nb_pcb - 1; _8q <= _8p; _8q += 1) { //#26434
            $_.i = _8q; //#26428
            for (var _8t = 0, _8s = $_.offset - 1; _8t <= _8s; _8t += 1) { //#26433
                $_.j = _8t; //#26430
                $put($_.matrixA, ($_.i * $_.offset) + $_.j, $get($_.matrixH, $f(($get($_.column_arrangement, $_.i) * $_.offset) + $_.j))); //#26432
            } //#26432
        } //#26432
        $_.tmp = 0; //#26436
        for (var _97 = 0, _96 = $_.loop0 - 1; _97 <= _96; _97 += 1) { //#26458
            $_.i = _97; //#26438
            for (var _9A = 0, _99 = $_.nb_pcb - 1; _9A <= _99; _9A += 1) { //#26457
                $_.j = _9A; //#26440
                var _9H = $get($_.matrixA, (~~($get($_.swap_col, $_.i * 2) / 32)) + ($_.j * $_.offset)); //#26441
                var _9L = -($f(31 - ($get($_.swap_col, $_.i * 2) % 32))); //#26442
                $_.tmp = (((-(((_9L < 0 ? _9H >>> -_9L : _9H << _9L)) & 1)) ^ $_.tmp) & 1) ^ $_.tmp; //#26443
                var _9O = $_.matrixA; //#26444
                var _9R = $get($_.swap_col, $_.i * 2); //#26444
                var _9S = $_.j; //#26444
                var _9T = $_.offset; //#26444
                var _9b = $get($_.matrixA, (~~($get($_.swap_col, ($_.i * 2) + 1) / 32)) + ($_.j * $_.offset)); //#26446
                var _9f = -($f(31 - ($get($_.swap_col, ($_.i * 2) + 1) % 32))); //#26447
                var _9q = $f(31 - ($get($_.swap_col, $_.i * 2) % 32)); //#26449
                $put(_9O, (~~(_9R / 32)) + (_9S * _9T), $get(_9O, (~~(_9R / 32)) + (_9S * _9T)) ^ (((-(((_9f < 0 ? _9b >>> -_9f : _9b << _9f)) & 1)) ^ $get($_.matrixA, (~~($get($_.swap_col, $_.i * 2) / 32)) + ($_.j * $_.offset))) & ((_9q < 0 ? 1 >>> -_9q : 1 << _9q)))); //#26450
                var _9r = $_.matrixA; //#26451
                var _9u = $get($_.swap_col, ($_.i * 2) + 1); //#26451
                var _9v = $_.j; //#26451
                var _9w = $_.offset; //#26451
                var _A9 = $f(31 - ($get($_.swap_col, ($_.i * 2) + 1) % 32)); //#26455
                $put(_9r, (~~(_9u / 32)) + (_9v * _9w), $get(_9r, (~~(_9u / 32)) + (_9v * _9w)) ^ (((-($_.tmp & 1)) ^ $get($_.matrixA, (~~($get($_.swap_col, ($_.i * 2) + 1) / 32)) + ($_.j * $_.offset))) & ((_A9 < 0 ? 1 >>> -_A9 : 1 << _A9)))); //#26456
            } //#26456
        } //#26456
    }; //#26456
    $_.createGeneratorMatrix = function() {
        $_.pn = $_.Pg_sub_block - $_.matrix_rank; //#26464
        $_.offset = ~~Math.ceil($_.pn / 32); //#26465
        $_.effwidth = $_.offset * 32; //#26466
        $_.offset_cap = ~~Math.ceil($_.Pg_sub_block / 32); //#26467
        $_.G = $a($_.offset * $_.Pg_sub_block); //#26468
        for (var _AL = 0, _AK = ($_.offset * $_.Pg_sub_block) - 1; _AL <= _AK; _AL += 1) { //#26471
            $put($_.G, _AL, 0); //#26470
        } //#26470
        for (var _AP = 0, _AO = $_.pn - 1; _AP <= _AO; _AP += 1) { //#26476
            $_.i = _AP; //#26473
            var _AQ = $_.G; //#26474
            var _AR = $_.Pg_sub_block; //#26474
            var _AS = $_.pn; //#26474
            var _AT = $_.i; //#26474
            var _AU = $_.offset; //#26474
            var _AV = $_.i; //#26474
            var _AY = 31 - ($_.i % 32); //#26475
            $put(_AQ, (((_AR - _AS) + _AT) * _AU) + (~~(_AV / 32)), $get(_AQ, (((_AR - _AS) + _AT) * _AU) + (~~(_AV / 32))) | ((_AY < 0 ? 1 >>> -_AY : 1 << _AY))); //#26475
        } //#26475
        $_.matrix_index = $_.Pg_sub_block - $_.pn; //#26477
        $_.loop0 = 0; //#26478
        for (var _Af = 0, _Ae = (($_.Pg_sub_block - $_.pn) * $_.effwidth) - 1; _Af <= _Ae; _Af += 1) { //#26495
            $_.i = _Af; //#26480
            if ($_.matrix_index >= $_.Pg_sub_block) { //#26484
                $_.loop0 = $_.loop0 + 1; //#26482
                $_.matrix_index = $_.Pg_sub_block - $_.pn; //#26483
            } //#26483
            if (($_.i % $_.effwidth) < $_.pn) { //#26494
                var _Ao = $_.G; //#26486
                var _Ap = $_.i; //#26486
                var _Av = $get($_.matrixA, (~~($_.matrix_index / 32)) + ($_.offset_cap * $_.loop0)); //#26488
                var _Ax = -(31 - ($_.matrix_index % 32)); //#26489
                var _B2 = 31 - ($_.i % 32); //#26491
                $put(_Ao, ~~(_Ap / 32), $get(_Ao, ~~(_Ap / 32)) ^ (((-(((_Ax < 0 ? _Av >>> -_Ax : _Av << _Ax)) & 1)) ^ $get($_.G, ~~($_.i / 32))) & ((_B2 < 0 ? 1 >>> -_B2 : 1 << _B2)))); //#26492
                $_.matrix_index = $_.matrix_index + 1; //#26493
            } //#26493
        } //#26493
    }; //#26493
    $_.ldpc = function() {
        $_.wr = $k[--$j]; //#26501
        $_.wc = $k[--$j]; //#26502
        $k[$j++] = Infinity; //#26503
        var _B6 = $k[--$j]; //#26503
        var _B7 = $k[--$j]; //#26503
        $k[$j++] = _B6; //#26503
        $forall(_B7, function() { //#26503
            var _B8 = $k[--$j]; //#26503
            $k[$j++] = $f(_B8 - 48); //#26503
        }); //#26503
        $_.data = $a(); //#26503
        $_.Pn = $_.data.length; //#26505
        if ($_.wr != -1) { //#26520
            $_.Pg = ~~((Math.ceil((Math.ceil(($_.Pn * $_.wr) / $f($_.wr - $_.wc))) / $_.wr)) * $_.wr); //#26507
            $_.nb_sub_blocks = (~~($_.Pg / 2700)) + 1; //#26508
            $_.Pg_sub_block = (~~((~~($_.Pg / $_.nb_sub_blocks)) / $_.wr)) * $_.wr; //#26509
            $_.Pn_sub_block = ~~(($_.Pg_sub_block * $f($_.wr - $_.wc)) / $_.wr); //#26510
            $_.nb_sub_blocks = ~~($_.Pg / $_.Pg_sub_block); //#26511
            $k[$j++] = 'encoding_iterations'; //#26512
            $k[$j++] = ~~($_.Pg / $_.Pg_sub_block); //#26512
            if (($_.Pn_sub_block * $_.nb_sub_blocks) < $_.Pn) { //#26512
                var _BY = $k[--$j]; //#26512
                $k[$j++] = $f(_BY - 1); //#26512
            } //#26512
            var _BZ = $k[--$j]; //#26512
            $_[$k[--$j]] = _BZ; //#26512
            $_.createMatrixA(); //#26513
        } else { //#26520
            $_.Pg = $_.Pn * 2; //#26515
            $_.nb_sub_blocks = 1; //#26516
            $_.Pg_sub_block = $_.Pg; //#26517
            $_.Pn_sub_block = $_.Pn; //#26518
            $_.encoding_iterations = 1; //#26519
            $_.createMetadataMatrixA(); //#26520
        } //#26520
        $_.GaussJordan(); //#26522
        $_.createGeneratorMatrix(); //#26523
        $_.ecc_encoded_data = $a($_.Pg); //#26525
        $_.offset = ~~(Math.ceil(($_.Pg_sub_block - $_.matrix_rank) / 32)); //#26527
        for (var _Bk = 0, _Bj = $_.encoding_iterations - 1; _Bk <= _Bj; _Bk += 1) { //#26543
            $_.iter = _Bk; //#26529
            for (var _Bn = 0, _Bm = $_.Pg_sub_block - 1; _Bn <= _Bm; _Bn += 1) { //#26542
                $_.i = _Bn; //#26531
                $_.temp = 0; //#26532
                $_.loop0 = 0; //#26533
                $_.offset_index = $_.offset * $_.i; //#26534
                for (var _Bv = $_.iter * $_.Pn_sub_block, _Bu = (($_.iter + 1) * $_.Pn_sub_block) - 1; _Bv <= _Bu; _Bv += 1) { //#26540
                    var _C1 = $get($_.G, $_.offset_index + (~~($_.loop0 / 32))); //#26537
                    var _C3 = -(31 - ($_.loop0 % 32)); //#26537
                    $_.temp = ($get($_.data, _Bv) & (((_C3 < 0 ? _C1 >>> -_C3 : _C1 << _C3)) & 1)) ^ $_.temp; //#26538
                    $_.loop0 = $_.loop0 + 1; //#26539
                } //#26539
                $put($_.ecc_encoded_data, $_.i + ($_.iter * $_.Pg_sub_block), $_.temp); //#26541
            } //#26541
        } //#26541
        if ($_.encoding_iterations != $_.nb_sub_blocks) { //#26567
            $_.start = $_.encoding_iterations * $_.Pn_sub_block; //#26546
            $_.last_index = $_.encoding_iterations * $_.Pg_sub_block; //#26547
            $_.Pg_sub_block = $_.Pg - ($_.encoding_iterations * $_.Pg_sub_block); //#26548
            $_.Pn_sub_block = ~~(($_.Pg_sub_block * $f($_.wr - $_.wc)) / $_.wr); //#26549
            $_.createMatrixA(); //#26550
            $_.GaussJordan(); //#26551
            $_.createGeneratorMatrix(); //#26552
            $_.offset = ~~(Math.ceil(($_.Pg_sub_block - $_.matrix_rank) / 32)); //#26553
            for (var _CS = 0, _CR = $_.Pg_sub_block - 1; _CS <= _CR; _CS += 1) { //#26566
                $_.i = _CS; //#26555
                $_.temp = 0; //#26556
                $_.loop0 = 0; //#26557
                $_.offset_index = $_.offset * $_.i; //#26558
                for (var _CY = $_.start, _CX = $_.Pn - 1; _CY <= _CX; _CY += 1) { //#26564
                    var _Ce = $get($_.G, $_.offset_index + (~~($_.loop0 / 32))); //#26561
                    var _Cg = -(31 - ($_.loop0 % 32)); //#26561
                    $_.temp = ($get($_.data, _CY) & (((_Cg < 0 ? _Ce >>> -_Cg : _Ce << _Cg)) & 1)) ^ $_.temp; //#26562
                    $_.loop0 = $_.loop0 + 1; //#26563
                } //#26563
                $put($_.ecc_encoded_data, $_.i + $_.last_index, $_.temp); //#26565
            } //#26565
        } //#26565
        $_.out = $s($_.Pg); //#26569
        for (var _Cr = 0, _Cq = $_.Pg - 1; _Cr <= _Cq; _Cr += 1) { //#26573
            $put($_.out, _Cr, $f($get($_.ecc_encoded_data, _Cr) + 48)); //#26572
        } //#26572
        $k[$j++] = $_.out; //#26574
    }; //#26574
    $k[$j++] = 'bits'; //#26579
    $k[$j++] = $_.bits; //#26579
    $k[$j++] = $_.datawc; //#26579
    $k[$j++] = $_.datawr; //#26579
    $_.ldpc(); //#26579
    var _Cz = $k[--$j]; //#26579
    $_[$k[--$j]] = _Cz; //#26579
    $_.s0 = 0; //#26582
    $_.s1 = 0; //#26582
    $_.s2 = 3; //#26582
    $_.s3 = 30151; //#26582
    for (var _D2 = $_.bits.length - 1; _D2 >= 1; _D2 -= 1) { //#26592
        $_.l = _D2; //#26584
        $_.lcg64_temper(); //#26585
        var _D3 = $k[--$j]; //#26586
        $k[$j++] = _D3; //#26586
        if (_D3 < 0) { //#26586
            var _D4 = $k[--$j]; //#26586
            $k[$j++] = $f((_D4 ^ 2147483648) + 2147483648); //#26586
        } //#26586
        $_.r = ~~(($k[--$j] / 4294967296) * ($_.l + 1)); //#26588
        $put($_.bits, $_.l, $get($_.bits, $_.r)); //#26590
        $put($_.bits, $_.r, $get($_.bits, $_.l)); //#26591
    } //#26591
    $_.tmpbits = $s($_.C); //#26595
    $puti($_.tmpbits, 0, $_.bits); //#26596
    $_.j = $_.bits.length; //#26597
    for (var _DO = 0, _DP = ~~(($f($f($_.C - $_.j) + 1)) / 2); _DO < _DP; _DO++) { //#26602
        $put($_.tmpbits, $_.j, 48); //#26599
        if (($_.j + 1) < $_.C) { //#26600
            $put($_.tmpbits, $_.j + 1, 49); //#26600
        } //#26600
        $_.j = $_.j + 2; //#26601
    } //#26601
    $_.bits = $_.tmpbits; //#26603
    if ($_.colors == 4) { //#26668
        $_.bi = 0; //#26607
        $_.gi = 1; //#26607
        $_.mi = 2; //#26607
        $_.yi = 3; //#26607
        $_.ki = 4; //#26608
        $_.wi = 5; //#26608
        $k[$j++] = Infinity; //#26611
        $k[$j++] = $_.bi; //#26611
        $k[$j++] = "0000FF"; //#26611
        $k[$j++] = $_.gi; //#26611
        $k[$j++] = "00FF00"; //#26611
        $k[$j++] = $_.mi; //#26611
        $k[$j++] = "FF00FF"; //#26611
        $k[$j++] = $_.yi; //#26611
        $k[$j++] = "FFFF00"; //#26611
        $k[$j++] = $_.ki; //#26611
        $k[$j++] = "000000"; //#26611
        $k[$j++] = $_.wi; //#26611
        $k[$j++] = "FFFFFF"; //#26611
        $_.palette = $d(); //#26612
        $_.metacolorindex = $a([$_.bi, $_.gi, $_.mi, $_.yi]); //#26613
        $_.palettelayout = $a([$_.bi, $_.gi, $_.mi, $_.yi]); //#26614
    } else { //#26668
        var _Dw = new Map([
            [8, $a([2, 2, 2])],
            [16, $a([4, 2, 2])],
            [32, $a([4, 4, 2])],
            [64, $a([4, 4, 4])],
            [128, $a([8, 4, 4])],
            [256, $a([8, 8, 4])]
        ]); //#26623
        $_.rgbres = $get(_Dw, $_.colors); //#26624
        $k[$j++] = 'rvals'; //#26626
        $k[$j++] = $get($_.rgbres, 0); //#26626
        $k[$j++] = Infinity; //#26626
        var _E1 = $k[--$j]; //#26626
        var _E3 = $f($k[--$j] - 1); //#26626
        $k[$j++] = _E1; //#26626
        $k[$j++] = _E3; //#26626
        for (var _E5 = 0, _E4 = _E3; _E5 <= _E4; _E5 += 1) { //#26626
            var _E6 = $k[--$j]; //#26626
            $k[$j++] = ~~(Math.round(_E5 * (255 / _E6))); //#26626
            $k[$j++] = _E6; //#26626
        } //#26626
        $j--; //#26626
        var _E7 = $a(); //#26626
        $_[$k[--$j]] = _E7; //#26626
        $k[$j++] = 'gvals'; //#26627
        $k[$j++] = $get($_.rgbres, 1); //#26627
        $k[$j++] = Infinity; //#26627
        var _EB = $k[--$j]; //#26627
        var _ED = $f($k[--$j] - 1); //#26627
        $k[$j++] = _EB; //#26627
        $k[$j++] = _ED; //#26627
        for (var _EF = 0, _EE = _ED; _EF <= _EE; _EF += 1) { //#26627
            var _EG = $k[--$j]; //#26627
            $k[$j++] = ~~(Math.round(_EF * (255 / _EG))); //#26627
            $k[$j++] = _EG; //#26627
        } //#26627
        $j--; //#26627
        var _EH = $a(); //#26627
        $_[$k[--$j]] = _EH; //#26627
        $k[$j++] = 'bvals'; //#26628
        $k[$j++] = $get($_.rgbres, 2); //#26628
        $k[$j++] = Infinity; //#26628
        var _EL = $k[--$j]; //#26628
        var _EN = $f($k[--$j] - 1); //#26628
        $k[$j++] = _EL; //#26628
        $k[$j++] = _EN; //#26628
        for (var _EP = 0, _EO = _EN; _EP <= _EO; _EP += 1) { //#26628
            var _EQ = $k[--$j]; //#26628
            $k[$j++] = ~~(Math.round(_EP * (255 / _EQ))); //#26628
            $k[$j++] = _EQ; //#26628
        } //#26628
        $j--; //#26628
        var _ER = $a(); //#26628
        $_[$k[--$j]] = _ER; //#26628
        var _ET = $_.colors; //#26630
        $_.palette = new Map; //#26630
        var _EU = $_.colors; //#26631
        var _EV = 64; //#26631
        if (64 > _EU) { //#26631
            var _ = _EU; //#26631
            _EU = _EV; //#26631
            _EV = _; //#26631
        } //#26631
        $_.palettelayout = $a(_EV); //#26631
        $_.i = 0; //#26632
        $_.j = 8; //#26632
        $forall($_.rvals, function() { //#26666
            $_.r = $k[--$j]; //#26634
            $forall($_.gvals, function() { //#26665
                $_.g = $k[--$j]; //#26636
                $forall($_.bvals, function() { //#26664
                    $_.b = $k[--$j]; //#26638
                    var _Eh = $strcpy($s(6), "000000"); //#26640
                    var _Ej = $cvrs($s(6), (($_.r << 16) | ($_.g << 8)) | $_.b, 16); //#26640
                    $puti(_Eh, 6 - _Ej.length, _Ej); //#26640
                    $k[$j++] = _Eh; //#26642
                    $k[$j++] = false; //#26642
                    if ($eq(_Eh, "000000")) { //#26642
                        $_.ki = $_.i; //#26642
                        $j--; //#26642
                        $k[$j++] = true; //#26642
                    } //#26642
                    var _El = $k[--$j]; //#26643
                    var _Em = $k[--$j]; //#26643
                    $k[$j++] = _Em; //#26643
                    $k[$j++] = _El; //#26643
                    if ($eq(_Em, "0000FF")) { //#26643
                        $_.bi = $_.i; //#26643
                        $j--; //#26643
                        $k[$j++] = true; //#26643
                    } //#26643
                    var _Eo = $k[--$j]; //#26644
                    var _Ep = $k[--$j]; //#26644
                    $k[$j++] = _Ep; //#26644
                    $k[$j++] = _Eo; //#26644
                    if ($eq(_Ep, "00FF00")) { //#26644
                        $_.gi = $_.i; //#26644
                        $j--; //#26644
                        $k[$j++] = true; //#26644
                    } //#26644
                    var _Er = $k[--$j]; //#26645
                    var _Es = $k[--$j]; //#26645
                    $k[$j++] = _Es; //#26645
                    $k[$j++] = _Er; //#26645
                    if ($eq(_Es, "00FFFF")) { //#26645
                        $_.ci = $_.i; //#26645
                        $j--; //#26645
                        $k[$j++] = true; //#26645
                    } //#26645
                    var _Eu = $k[--$j]; //#26646
                    var _Ev = $k[--$j]; //#26646
                    $k[$j++] = _Ev; //#26646
                    $k[$j++] = _Eu; //#26646
                    if ($eq(_Ev, "FF0000")) { //#26646
                        $_.ri = $_.i; //#26646
                        $j--; //#26646
                        $k[$j++] = true; //#26646
                    } //#26646
                    var _Ex = $k[--$j]; //#26647
                    var _Ey = $k[--$j]; //#26647
                    $k[$j++] = _Ey; //#26647
                    $k[$j++] = _Ex; //#26647
                    if ($eq(_Ey, "FF00FF")) { //#26647
                        $_.mi = $_.i; //#26647
                        $j--; //#26647
                        $k[$j++] = true; //#26647
                    } //#26647
                    var _F0 = $k[--$j]; //#26648
                    var _F1 = $k[--$j]; //#26648
                    $k[$j++] = _F1; //#26648
                    $k[$j++] = _F0; //#26648
                    if ($eq(_F1, "FFFF00")) { //#26648
                        $_.yi = $_.i; //#26648
                        $j--; //#26648
                        $k[$j++] = true; //#26648
                    } //#26648
                    var _F3 = $k[--$j]; //#26649
                    var _F4 = $k[--$j]; //#26649
                    $k[$j++] = _F4; //#26649
                    $k[$j++] = _F3; //#26649
                    if ($eq(_F4, "FFFFFF")) { //#26649
                        $_.wi = $_.i; //#26649
                        $j--; //#26649
                        $k[$j++] = true; //#26649
                    } //#26649
                    if ($nt($k[--$j])) { //#26661
                        if (($_.colors <= 64) || ((($_.colors == 128) && (((($_.r == 0) || ($_.r == 73)) || ($_.r == 182)) || ($_.r == 255))) || ((($_.colors == 256) && (((($_.r == 0) || ($_.r == 73)) || ($_.r == 182)) || ($_.r == 255))) && (((($_.g == 0) || ($_.g == 73)) || ($_.g == 182)) || ($_.g == 255))))) { //#26660
                            $put($_.palettelayout, $_.j, $_.i); //#26658
                            $_.j = $_.j + 1; //#26659
                        } //#26659
                    } //#26659
                    $put($_.palette, $_.i, $k[--$j]); //#26662
                    $_.i = $_.i + 1; //#26663
                }); //#26663
            }); //#26663
        }); //#26663
        $puti($_.palettelayout, 0, $a([$_.ki, $_.bi, $_.gi, $_.ci, $_.ri, $_.mi, $_.yi, $_.wi])); //#26667
        $_.metacolorindex = $a([$_.ki, $_.bi, $_.gi, $_.ci, $_.ri, $_.mi, $_.yi, $_.wi]); //#26668
    } //#26668
    $k[$j++] = Infinity; //#26672
    for (var _Fp = 0, _Fq = $_.rows * $_.cols; _Fp < _Fq; _Fp++) { //#26672
        $k[$j++] = -1; //#26672
    } //#26672
    $_.pixs = $a(); //#26672
    $_.jmv = function() {
        var _Ft = $k[--$j]; //#26673
        var _Fu = $k[--$j]; //#26673
        $k[$j++] = $f(_Fu + (_Ft * $_.cols)); //#26673
    }; //#26673
    if (!$_.slave) { //#26703
        $_.fpat = $a([$a([1, 1, 1, 0, 0]), $a([1, 2, 2, 0, 0]), $a([1, 2, 1, 2, 1]), $a([0, 0, 2, 2, 1]), $a([0, 0, 1, 1, 1])]); //#26683
        $_.fmap = $a([$a([-1, $_.bi, $_.yi]), $a([-1, $_.yi, $_.bi]), $a([-1, $_.gi, $_.mi]), $a([-1, $_.mi, $_.gi])]); //#26689
    } else { //#26703
        $_.fpat = $a([$a([0, 0, 0, 0, 0]), $a([0, 2, 2, 0, 0]), $a([0, 2, 1, 2, 0]), $a([0, 0, 2, 2, 0]), $a([0, 0, 0, 0, 0])]); //#26697
        $_.fmap = $a([$a([-1, $_.ki, $_.wi]), $a([-1, $_.ki, $_.wi]), $a([-1, $_.ki, $_.wi]), $a([-1, $_.ki, $_.wi])]); //#26703
    } //#26703
    for (var _GY = 0; _GY <= 4; _GY += 1) { //#26715
        $_.y = _GY; //#26706
        for (var _GZ = 0; _GZ <= 4; _GZ += 1) { //#26714
            $_.x = _GZ; //#26708
            $_.fpb = $get($get($_.fpat, $_.y), $_.x); //#26709
            $k[$j++] = $_.pixs; //#26710
            $k[$j++] = $_.x + 1; //#26710
            $k[$j++] = $_.y + 1; //#26710
            $_.jmv(); //#26710
            var _Gm = $k[--$j]; //#26710
            $put($k[--$j], _Gm, $get($get($_.fmap, 0), $_.fpb)); //#26710
            $k[$j++] = $_.pixs; //#26711
            $k[$j++] = $_.x + 1; //#26711
            $k[$j++] = $f($f($_.rows - $_.y) - 2); //#26711
            $_.jmv(); //#26711
            var _Gw = $k[--$j]; //#26711
            $put($k[--$j], _Gw, $get($get($_.fmap, 1), $_.fpb)); //#26711
            $k[$j++] = $_.pixs; //#26712
            $k[$j++] = $f($f($_.x + $_.cols) - 6); //#26712
            $k[$j++] = $_.y + 1; //#26712
            $_.jmv(); //#26712
            var _H6 = $k[--$j]; //#26712
            $put($k[--$j], _H6, $get($get($_.fmap, 2), $_.fpb)); //#26712
            $k[$j++] = $_.pixs; //#26713
            $k[$j++] = $f($f($_.x + $_.cols) - 6); //#26713
            $k[$j++] = $f($f($_.rows - $_.y) - 2); //#26713
            $_.jmv(); //#26713
            var _HH = $k[--$j]; //#26713
            $put($k[--$j], _HH, $get($get($_.fmap, 3), $_.fpb)); //#26713
        } //#26713
    } //#26713
    $_.algnpat0 = $a([$a([$_.ki, $_.ki, -1]), $a([$_.ki, $_.wi, $_.ki]), $a([-1, $_.ki, $_.ki])]); //#26722
    $_.algnpat1 = $a([$a([-1, $_.ki, $_.ki]), $a([$_.ki, $_.wi, $_.ki]), $a([$_.ki, $_.ki, -1])]); //#26727
    $_.num = (~~Math.round($_.cols / 16)) - 1; //#26728
    $_.algnrpos = $a([3, 17]); //#26729
    if ($_.num > 0) { //#26732
        $k[$j++] = Infinity; //#26731
        for (var _Hk = 0, _Hj = $_.num; _Hk <= _Hj; _Hk += 1) { //#26731
            $k[$j++] = (~~(_Hk * ($f($_.cols - 7) / $_.num))) + 3; //#26731
        } //#26731
        $_.algnrpos = $a(); //#26731
    } //#26731
    $_.num = (~~Math.round($_.rows / 16)) - 1; //#26733
    $_.algncpos = $a([3, 17]); //#26734
    if ($_.num > 0) { //#26737
        $k[$j++] = Infinity; //#26736
        for (var _Ht = 0, _Hs = $_.num; _Ht <= _Hs; _Ht += 1) { //#26736
            $k[$j++] = (~~(_Ht * ($f($_.rows - 7) / $_.num))) + 3; //#26736
        } //#26736
        $_.algncpos = $a(); //#26736
    } //#26736
    $_.putalgnpat = function() {
        $_.pp = $k[--$j]; //#26739
        $_.py = $k[--$j]; //#26740
        $_.px = $k[--$j]; //#26741
        for (var _I0 = 0; _I0 <= 2; _I0 += 1) { //#26748
            $_.pb = _I0; //#26743
            for (var _I1 = 0; _I1 <= 2; _I1 += 1) { //#26747
                $_.pa = _I1; //#26745
                $k[$j++] = $_.pixs; //#26746
                $k[$j++] = $f($_.px + $_.pa); //#26746
                $k[$j++] = $f($_.py + $_.pb); //#26746
                $_.jmv(); //#26746
                var _IC = $k[--$j]; //#26746
                $put($k[--$j], _IC, $get($get($_.pp, $_.pb), $_.pa)); //#26746
            } //#26746
        } //#26746
    }; //#26746
    for (var _IG = 0, _IF = $_.algncpos.length - 1; _IG <= _IF; _IG += 1) { //#26760
        $_.j = _IG; //#26751
        $_.y = $get($_.algncpos, $_.j); //#26752
        for (var _IM = 0, _IL = $_.algnrpos.length - 1; _IM <= _IL; _IM += 1) { //#26759
            $_.i = _IM; //#26754
            $_.x = $get($_.algnrpos, $_.i); //#26755
            $k[$j++] = $_.pixs; //#26756
            $k[$j++] = $_.x; //#26756
            $k[$j++] = $_.y; //#26756
            $_.jmv(); //#26756
            var _IT = $k[--$j]; //#26756
            if ($get($k[--$j], _IT) == -1) { //#26758
                $k[$j++] = $f($_.x - 1); //#26757
                $k[$j++] = $f($_.y - 1); //#26757
                if ((($_.i + $_.j) % 2) == 0) { //#26757
                    $k[$j++] = $_.algnpat0; //#26757
                } else { //#26757
                    $k[$j++] = $_.algnpat1; //#26757
                } //#26757
                $_.putalgnpat(); //#26757
            } //#26757
        } //#26757
    } //#26757
    if (!$_.slave) { //#26812
        var _JL = $a([$a([6, 1]), $a([6, 2]), $a([6, 3]), $a([6, 4]), $a([6, 5]), $a([6, 6]), $a([5, 6]), $a([4, 6]), $a([3, 6]), $a([2, 6]), $a([1, 6]), $a([7, 1]), $a([7, 2]), $a([7, 3]), $a([7, 4]), $a([7, 5]), $a([7, 6]), $a([7, 7]), $a([6, 7]), $a([5, 7]), $a([4, 7]), $a([3, 7]), $a([2, 7]), $a([1, 7]), $a([8, 1]), $a([8, 2]), $a([8, 3]), $a([8, 4]), $a([8, 5]), $a([8, 6]), $a([8, 7]), $a([8, 8]), $a([7, 8]), $a([6, 8]), $a([5, 8]), $a([4, 8]), $a([3, 8]), $a([2, 8]), $a([1, 8]), $a([9, 1]), $a([9, 2]), $a([9, 3]), $a([9, 4]), $a([9, 5])]); //#26771
        for (var _JM = 0, _JN = _JL.length; _JM < _JN; _JM++) { //#26775
            $aload($get(_JL, _JM)); //#26773
            $_.y = $k[--$j]; //#26773
            $_.x = $k[--$j]; //#26773
            $k[$j++] = $a([$_.x, $_.y]); //#26774
            $k[$j++] = $a([-$_.x, $_.y]); //#26774
            $k[$j++] = $a([-$_.x, -$_.y]); //#26774
            $k[$j++] = $a([$_.x, -$_.y]); //#26774
        } //#26774
        $astore($a(176)); //#26776
        $_.metadatamap = $k[--$j]; //#26776
        $_.palettemap1 = $a([$a([4, 1]), $a([4, 2]), $a([5, 1]), $a([5, 2]), $a([2, 4]), $a([2, 5]), $a([1, 4]), $a([1, 5]), $a([-2, 1]), $a([-2, 2]), $a([-1, 1]), $a([-1, 2]), $a([-4, 4]), $a([-4, 5]), $a([-5, 4]), $a([-5, 5])]); //#26781
        $_.palettemap2 = $a([$a([-4, -5]), $a([-4, -4]), $a([-5, -5]), $a([-5, -4]), $a([-2, -2]), $a([-2, -1]), $a([-1, -2]), $a([-1, -1]), $a([2, -5]), $a([2, -4]), $a([1, -5]), $a([1, -4]), $a([4, -2]), $a([4, -1]), $a([5, -2]), $a([5, -1])]); //#26786
    } else { //#26812
        $k[$j++] = Infinity; //#26799
        for (var _KD = 1; _KD <= 19; _KD += 1) { //#26796
            $_.i = _KD; //#26794
            $k[$j++] = $a([0, $_.i]); //#26795
            $k[$j++] = $a([1, $_.i]); //#26795
        } //#26795
        for (var _KI = 5; _KI <= 12; _KI += 1) { //#26800
            $_.i = _KI; //#26798
            $k[$j++] = $a([2, $_.i]); //#26799
            $k[$j++] = $a([3, $_.i]); //#26799
        } //#26799
        $_.metadatamap = $a(); //#26799
        $k[$j++] = Infinity; //#26807
        for (var _KO = 5; _KO <= 12; _KO += 1) { //#26804
            $k[$j++] = _KO; //#26804
            $k[$j++] = Infinity; //#26804
            var _KP = $k[--$j]; //#26804
            var _KQ = $k[--$j]; //#26804
            $k[$j++] = _KP; //#26804
            $k[$j++] = 4; //#26804
            $k[$j++] = _KQ; //#26804
            var _KR = $a(); //#26804
            $k[$j++] = _KR; //#26804
        } //#26804
        for (var _KS = 12; _KS >= 5; _KS -= 1) { //#26805
            $k[$j++] = _KS; //#26805
            $k[$j++] = Infinity; //#26805
            var _KT = $k[--$j]; //#26805
            var _KU = $k[--$j]; //#26805
            $k[$j++] = _KT; //#26805
            $k[$j++] = 5; //#26805
            $k[$j++] = _KU; //#26805
            var _KV = $a(); //#26805
            $k[$j++] = _KV; //#26805
        } //#26805
        for (var _KW = 5; _KW <= 12; _KW += 1) { //#26806
            $k[$j++] = _KW; //#26806
            $k[$j++] = Infinity; //#26806
            var _KX = $k[--$j]; //#26806
            var _KY = $k[--$j]; //#26806
            $k[$j++] = _KX; //#26806
            $k[$j++] = 6; //#26806
            $k[$j++] = _KY; //#26806
            var _KZ = $a(); //#26806
            $k[$j++] = _KZ; //#26806
        } //#26806
        for (var _Ka = 12; _Ka >= 5; _Ka -= 1) { //#26807
            $k[$j++] = _Ka; //#26807
            $k[$j++] = Infinity; //#26807
            var _Kb = $k[--$j]; //#26807
            var _Kc = $k[--$j]; //#26807
            $k[$j++] = _Kb; //#26807
            $k[$j++] = 7; //#26807
            $k[$j++] = _Kc; //#26807
            var _Kd = $a(); //#26807
            $k[$j++] = _Kd; //#26807
        } //#26807
        $_.palettemap1 = $a(); //#26807
        $k[$j++] = Infinity; //#26811
        var _Kf = $_.palettemap1; //#26811
        for (var _Kg = 0, _Kh = _Kf.length; _Kg < _Kh; _Kg++) { //#26811
            $k[$j++] = $get(_Kf, _Kg); //#26811
            $k[$j++] = Infinity; //#26811
            var _Kj = $k[--$j]; //#26811
            var _Kk = $k[--$j]; //#26811
            $k[$j++] = _Kj; //#26811
            $aload(_Kk); //#26811
            var _Kl = $k[--$j]; //#26811
            var _Km = $k[--$j]; //#26811
            $k[$j++] = -_Km; //#26811
            $k[$j++] = -_Kl; //#26811
            var _Kn = $a(); //#26811
            $k[$j++] = _Kn; //#26811
        } //#26811
        $_.palettemap2 = $a(); //#26811
    } //#26812
    var _Kp = $_.metadatamap; //#26817
    for (var _Kq = 0, _Kr = _Kp.length; _Kq < _Kr; _Kq++) { //#26821
        var _Ks = $get(_Kp, _Kq); //#26821
        var _Kt = $get(_Ks, 0); //#26818
        $k[$j++] = _Ks; //#26818
        $k[$j++] = _Kt; //#26818
        if (_Kt < 0) { //#26818
            var _Kv = $k[--$j]; //#26818
            var _Kw = $k[--$j]; //#26818
            $put(_Kw, 0, $f($f(_Kv + $_.cols) - 1)); //#26818
            $k[$j++] = _Kw; //#26818
        } else { //#26818
            $j--; //#26818
        } //#26818
        var _Kx = $k[--$j]; //#26819
        var _Ky = $get(_Kx, 1); //#26819
        $k[$j++] = _Kx; //#26819
        $k[$j++] = _Ky; //#26819
        if (_Ky < 0) { //#26819
            var _L0 = $k[--$j]; //#26819
            var _L1 = $k[--$j]; //#26819
            $put(_L1, 1, $f($f(_L0 + $_.rows) - 1)); //#26819
            $k[$j++] = _L1; //#26819
        } else { //#26819
            $j--; //#26819
        } //#26819
        $j--; //#26820
    } //#26820
    var _L2 = $_.palettemap1; //#26822
    for (var _L3 = 0, _L4 = _L2.length; _L3 < _L4; _L3++) { //#26826
        var _L5 = $get(_L2, _L3); //#26826
        var _L6 = $get(_L5, 0); //#26823
        $k[$j++] = _L5; //#26823
        $k[$j++] = _L6; //#26823
        if (_L6 < 0) { //#26823
            var _L8 = $k[--$j]; //#26823
            var _L9 = $k[--$j]; //#26823
            $put(_L9, 0, $f($f(_L8 + $_.cols) - 1)); //#26823
            $k[$j++] = _L9; //#26823
        } else { //#26823
            $j--; //#26823
        } //#26823
        var _LA = $k[--$j]; //#26824
        var _LB = $get(_LA, 1); //#26824
        $k[$j++] = _LA; //#26824
        $k[$j++] = _LB; //#26824
        if (_LB < 0) { //#26824
            var _LD = $k[--$j]; //#26824
            var _LE = $k[--$j]; //#26824
            $put(_LE, 1, $f($f(_LD + $_.rows) - 1)); //#26824
            $k[$j++] = _LE; //#26824
        } else { //#26824
            $j--; //#26824
        } //#26824
        $j--; //#26825
    } //#26825
    var _LF = $_.palettemap2; //#26827
    for (var _LG = 0, _LH = _LF.length; _LG < _LH; _LG++) { //#26831
        var _LI = $get(_LF, _LG); //#26831
        var _LJ = $get(_LI, 0); //#26828
        $k[$j++] = _LI; //#26828
        $k[$j++] = _LJ; //#26828
        if (_LJ < 0) { //#26828
            var _LL = $k[--$j]; //#26828
            var _LM = $k[--$j]; //#26828
            $put(_LM, 0, $f($f(_LL + $_.cols) - 1)); //#26828
            $k[$j++] = _LM; //#26828
        } else { //#26828
            $j--; //#26828
        } //#26828
        var _LN = $k[--$j]; //#26829
        var _LO = $get(_LN, 1); //#26829
        $k[$j++] = _LN; //#26829
        $k[$j++] = _LO; //#26829
        if (_LO < 0) { //#26829
            var _LQ = $k[--$j]; //#26829
            var _LR = $k[--$j]; //#26829
            $put(_LR, 1, $f($f(_LQ + $_.rows) - 1)); //#26829
            $k[$j++] = _LR; //#26829
        } else { //#26829
            $j--; //#26829
        } //#26829
        $j--; //#26830
    } //#26830
    for (var _LU = 0, _LT = $f($_.nummetamodules - 1); _LU <= _LT; _LU += 1) { //#26836
        $k[$j++] = $_.pixs; //#26835
        $aload($get($_.metadatamap, _LU)); //#26835
        $_.jmv(); //#26835
        var _LY = $k[--$j]; //#26835
        $put($k[--$j], _LY, 0); //#26835
    } //#26835
    if (!$_.slave) { //#26849
        var _Lb = $_.colors; //#26841
        var _Lc = 16; //#26841
        if (16 > _Lb) { //#26841
            var _ = _Lb; //#26841
            _Lb = _Lc; //#26841
            _Lc = _; //#26841
        } //#26841
        for (var _Le = 0, _Ld = _Lc - 1; _Le <= _Ld; _Le += 1) { //#26846
            $_.i = _Le; //#26842
            var _Lh = $get($_.palettelayout, $_.i); //#26843
            $k[$j++] = _Lh; //#26844
            $k[$j++] = $_.pixs; //#26844
            $k[$j++] = _Lh; //#26844
            $aload($get($_.palettemap1, $_.i)); //#26844
            $_.jmv(); //#26844
            var _Lm = $k[--$j]; //#26844
            var _Ln = $k[--$j]; //#26844
            $put($k[--$j], _Lm, _Ln); //#26844
            var _Lq = $k[--$j]; //#26845
            $k[$j++] = $_.pixs; //#26845
            $k[$j++] = _Lq; //#26845
            $aload($get($_.palettemap2, $_.i)); //#26845
            $_.jmv(); //#26845
            var _Lu = $k[--$j]; //#26845
            var _Lv = $k[--$j]; //#26845
            $put($k[--$j], _Lu, _Lv); //#26845
        } //#26845
        $_.i = 16; //#26847
    } else { //#26849
        $_.i = 0; //#26849
    } //#26849
    $_.j = $_.nummetamodules; //#26853
    for (var _M1 = $_.i, _M0 = $_.palettelayout.length - 1; _M1 <= _M0; _M1 += 2) { //#26863
        $_.i = _M1; //#26855
        var _M4 = $get($_.palettelayout, $_.i); //#26856
        $k[$j++] = _M4; //#26857
        $k[$j++] = $_.pixs; //#26857
        $k[$j++] = _M4; //#26857
        $aload($get($_.metadatamap, $_.j)); //#26857
        $_.jmv(); //#26857
        var _M9 = $k[--$j]; //#26857
        var _MA = $k[--$j]; //#26857
        $put($k[--$j], _M9, _MA); //#26857
        var _MD = $k[--$j]; //#26858
        $k[$j++] = $_.pixs; //#26858
        $k[$j++] = _MD; //#26858
        $aload($get($_.metadatamap, $f($_.j + 2))); //#26858
        $_.jmv(); //#26858
        var _MH = $k[--$j]; //#26858
        var _MI = $k[--$j]; //#26858
        $put($k[--$j], _MH, _MI); //#26858
        var _MM = $get($_.palettelayout, $_.i + 1); //#26859
        $k[$j++] = _MM; //#26860
        $k[$j++] = $_.pixs; //#26860
        $k[$j++] = _MM; //#26860
        $aload($get($_.metadatamap, $f($_.j + 1))); //#26860
        $_.jmv(); //#26860
        var _MR = $k[--$j]; //#26860
        var _MS = $k[--$j]; //#26860
        $put($k[--$j], _MR, _MS); //#26860
        var _MV = $k[--$j]; //#26861
        $k[$j++] = $_.pixs; //#26861
        $k[$j++] = _MV; //#26861
        $aload($get($_.metadatamap, $f($_.j + 3))); //#26861
        $_.jmv(); //#26861
        var _MZ = $k[--$j]; //#26861
        var _Ma = $k[--$j]; //#26861
        $put($k[--$j], _MZ, _Ma); //#26861
        $_.j = $f($_.j + 4); //#26862
    } //#26862
    var _N2 = $a([function() {
        var _Md = $k[--$j]; //#26867
        var _Me = $k[--$j]; //#26867
        $k[$j++] = $f(_Me + _Md) % $_.colors; //#26867
    }, function() {
        $j--; //#26868
        var _Mh = $k[--$j]; //#26868
        $k[$j++] = _Mh % $_.colors; //#26868
    }, function() {
        var _Mi = $k[--$j]; //#26869
        var _Mj = $k[--$j]; //#26869
        $k[$j++] = _Mi; //#26869
        $k[$j++] = _Mj; //#26869
        $j--; //#26869
        var _Ml = $k[--$j]; //#26869
        $k[$j++] = _Ml % $_.colors; //#26869
    }, function() {
        var _Mm = $k[--$j]; //#26870
        var _Mn = $k[--$j]; //#26870
        $k[$j++] = ((~~(_Mm / 3)) + (~~(_Mn / 2))) % $_.colors; //#26870
    }, function() {
        var _Mp = $k[--$j]; //#26871
        var _Mq = $k[--$j]; //#26871
        $k[$j++] = ((~~(_Mp / 2)) + (~~(_Mq / 3))) % $_.colors; //#26871
    }, function() {
        var _Ms = $k[--$j]; //#26872
        var _Mu = $f($k[--$j] + _Ms); //#26872
        $k[$j++] = ((~~(_Mu / 2)) + (~~(_Mu / 3))) % $_.colors; //#26872
    }, function() {
        var _Mw = $k[--$j]; //#26873
        var _Mx = $k[--$j]; //#26873
        $k[$j++] = ($f(((_Mw * (_Mx * _Mx)) % 7) + ((($f(_Mw + (_Mx * _Mx))) * 2) % 19))) % $_.colors; //#26873
    }, function() {
        var _Mz = $k[--$j]; //#26874
        var _N0 = $k[--$j]; //#26874
        $k[$j++] = ($f(((_N0 * (_Mz * _Mz)) % 5) + (($f((_Mz * _Mz) + (_N0 * 2))) % 13))) % $_.colors; //#26874
    }]); //#26874
    $_.maskfuncs = _N2; //#26875
    if ($_.mask != -1) { //#26879
        $_.maskfuncs = $a([$get($_.maskfuncs, $_.mask)]); //#26877
        $_.bestmaskval = $_.mask; //#26878
    } //#26878
    $_.masks = $a($_.maskfuncs.length); //#26880
    for (var _ND = 0, _NC = $_.masks.length - 1; _ND <= _NC; _ND += 1) { //#26893
        $_.m = _ND; //#26882
        $_.mask = $a($_.rows * $_.cols); //#26883
        for (var _NJ = 0, _NI = $f($_.rows - 1); _NJ <= _NI; _NJ += 1) { //#26891
            $_.j = _NJ; //#26885
            for (var _NM = 0, _NL = $f($_.cols - 1); _NM <= _NL; _NM += 1) { //#26890
                $_.i = _NM; //#26887
                $k[$j++] = $_.pixs; //#26888
                $k[$j++] = $_.i; //#26888
                $k[$j++] = $_.j; //#26888
                $_.jmv(); //#26888
                var _NQ = $k[--$j]; //#26888
                if ($get($k[--$j], _NQ) == -1) { //#26888
                    $k[$j++] = $_.i; //#26888
                    $k[$j++] = $_.j; //#26888
                    if ($get($_.maskfuncs, $_.m)() === true) {
                        break;
                    } //#26888
                } else { //#26888
                    $k[$j++] = 0; //#26888
                } //#26888
                $k[$j++] = $_.mask; //#26889
                $k[$j++] = $_.i; //#26889
                $k[$j++] = $_.j; //#26889
                $_.jmv(); //#26889
                var _Nb = $k[--$j]; //#26889
                var _Nc = $k[--$j]; //#26889
                $put(_Nc, _Nb, $k[--$j]); //#26889
            } //#26889
        } //#26889
        $put($_.masks, $_.m, $_.mask); //#26892
    } //#26892
    $_.posx = 0; //#26896
    $_.posy = 0; //#26896
    $_.i = 0; //#26897
    for (;;) { //#26907
        if ($_.posx == $_.cols) { //#26899
            break; //#26899
        } //#26899
        $k[$j++] = $_.pixs; //#26900
        $k[$j++] = $_.posx; //#26900
        $k[$j++] = $_.posy; //#26900
        $_.jmv(); //#26900
        var _Nm = $k[--$j]; //#26900
        if ($get($k[--$j], _Nm) == -1) { //#26904
            var _Ns = $geti($_.bits, $_.i, $_.databpm); //#26901
            $k[$j++] = 0; //#26901
            for (var _Nt = 0, _Nu = _Ns.length; _Nt < _Nu; _Nt++) { //#26901
                var _Nw = $k[--$j]; //#26901
                $k[$j++] = ($f(_Nw + $f($get(_Ns, _Nt) - 48))) * 2; //#26901
            } //#26901
            var _Nx = $k[--$j]; //#26901
            $k[$j++] = ~~(_Nx / 2); //#26902
            $k[$j++] = $_.pixs; //#26902
            $k[$j++] = $_.posx; //#26902
            $k[$j++] = $_.posy; //#26902
            $_.jmv(); //#26902
            var _O1 = $k[--$j]; //#26902
            var _O2 = $k[--$j]; //#26902
            $put(_O2, _O1, $k[--$j]); //#26902
            $_.i = $_.i + $_.databpm; //#26903
        } //#26903
        $_.posy = $_.posy + 1; //#26905
        if ($_.posy == $_.rows) { //#26906
            $_.posy = 0; //#26906
            $_.posx = $_.posx + 1; //#26906
        } //#26906
    } //#26906
    $_.evalrle = function() {
        $_.scrle = $k[--$j]; //#26911
        $_.scr1 = 0; //#26912
        $_.scr3 = 0; //#26912
        for (var _OD = 0, _OC = $_.scrle.length - 2; _OD <= _OC; _OD += 2) { //#26934
            $_.j = _OD; //#26914
            if ($get($_.scrle, $_.j + 1) != -1) { //#26933
                var _OJ = $get($_.scrle, $_.j); //#26917
                $k[$j++] = _OJ; //#26917
                if (_OJ >= 5) { //#26917
                    $_.scr1 = $f($f($k[--$j] - 2) + $_.scr1); //#26917
                } else { //#26917
                    $j--; //#26917
                } //#26917
                if (($_.j >= 4) && ($_.j <= ($_.scrle.length - 5))) { //#26932
                    var _OR = $geti($_.scrle, $_.j - 4, 10); //#26920
                    $k[$j++] = _OR; //#26921
                    for (var _OS = 0, _OT = _OR.length; _OS < _OT; _OS++) { //#26921
                        $k[$j++] = $get(_OR, _OS) == 1; //#26921
                    } //#26921
                    $j--; //#26921
                    for (var _OV = 0, _OW = 4; _OV < _OW; _OV++) { //#26921
                        var _OX = $k[--$j]; //#26921
                        var _OY = $k[--$j]; //#26921
                        $k[$j++] = _OX; //#26921
                        $k[$j++] = _OY; //#26921
                        $j--; //#26921
                        var _OZ = $k[--$j]; //#26921
                        var _Oa = $k[--$j]; //#26921
                        $k[$j++] = $an(_Oa, _OZ); //#26921
                    } //#26921
                    if ($k[--$j]) { //#26931
                        $k[$j++] = Infinity; //#26922
                        var _Oc = $k[--$j]; //#26922
                        var _Od = $k[--$j]; //#26922
                        $k[$j++] = _Oc; //#26922
                        $aload(_Od); //#26922
                        var _Oe = $k[--$j]; //#26923
                        var _Of = $k[--$j]; //#26923
                        var _Og = $k[--$j]; //#26923
                        var _Oh = $k[--$j]; //#26923
                        var _Oi = $k[--$j]; //#26923
                        var _Oj = $k[--$j]; //#26923
                        var _Ok = $k[--$j]; //#26923
                        var _Ol = $k[--$j]; //#26923
                        var _Om = $k[--$j]; //#26923
                        $k[$j++] = _Om; //#26929
                        $k[$j++] = _Ol; //#26929
                        $k[$j++] = _Ok; //#26929
                        $k[$j++] = _Oj; //#26929
                        $k[$j++] = _Oi; //#26929
                        $k[$j++] = _Oh; //#26929
                        $k[$j++] = _Og; //#26929
                        $k[$j++] = _Of; //#26929
                        $k[$j++] = _Oe; //#26929
                        if (($eq(_Om, _Oi) && $eq(_Om, _Oe)) && $eq(_Ok, _Og)) { //#26929
                            var _On = $k[--$j]; //#26925
                            var _Oo = $k[--$j]; //#26925
                            var _Op = $k[--$j]; //#26925
                            $_.c4 = _Op; //#26925
                            $_.c5 = _On; //#26925
                            $k[$j++] = _Op; //#26928
                            $k[$j++] = _Oo; //#26928
                            if ((($_.c4 == $_.bi) && ($_.c5 == $_.yi)) || ((($_.c4 == $_.yi) && ($_.c5 == $_.bi)) || ((($_.c4 == $_.gi) && ($_.c5 == $_.mi)) || (($_.c4 == $_.mi) && ($_.c5 == $_.gi))))) { //#26928
                                $_.scr3 = $_.scr3 + 100; //#26928
                            } //#26928
                        } //#26928
                        $cleartomark(); //#26930
                    } else { //#26931
                        $j--; //#26931
                    } //#26931
                } //#26931
            } //#26931
        } //#26931
        $k[$j++] = $_.scr1; //#26935
        $k[$j++] = $_.scr3; //#26935
    }; //#26935
    $_.evalmask = function() {
        $_.sym = $k[--$j]; //#26939
        $_.n1 = 0; //#26941
        $_.n2 = 0; //#26941
        $_.n3 = 0; //#26941
        var _PA = $_.rows; //#26942
        var _PB = $_.cols; //#26942
        if (_PA < _PB) { //#26942
            var _ = _PB; //#26942
            _PB = _PA; //#26942
            _PA = _; //#26942
        } //#26942
        $_.rle = $a($f((_PA * 2) + 2)); //#26942
        $_.lastpairs = $a($_.cols); //#26943
        $_.thispairs = $a($_.cols); //#26944
        for (var _PJ = 0, _PI = $f($_.cols - 1); _PJ <= _PI; _PJ += 1) { //#26956
            $_.i = _PJ; //#26948
            $k[$j++] = Infinity; //#26949
            $k[$j++] = 0; //#26952
            $k[$j++] = -1; //#26952
            for (var _PP = $_.i, _PQ = $_.cols, _PO = $f(($_.rows * $_.cols) - 1); _PQ < 0 ? _PP >= _PO : _PP <= _PO; _PP += _PQ) { //#26952
                var _PS = $get($_.sym, _PP); //#26951
                var _PT = $k[--$j]; //#26951
                $k[$j++] = _PT; //#26951
                $k[$j++] = _PS; //#26951
                if ($eq(_PT, _PS)) { //#26951
                    $j--; //#26951
                    var _PU = $k[--$j]; //#26951
                    var _PV = $k[--$j]; //#26951
                    $k[$j++] = $f(_PV + 1); //#26951
                    $k[$j++] = _PU; //#26951
                } else { //#26951
                    var _PW = $k[--$j]; //#26951
                    $k[$j++] = 1; //#26951
                    $k[$j++] = _PW; //#26951
                } //#26951
            } //#26951
            var _PY = $counttomark() + 2; //#26953
            $astore($geti($_.rle, 0, _PY - 2)); //#26953
            $_.evalrle(); //#26954
            $_.n3 = $f($k[--$j] + $_.n3); //#26954
            $_.n1 = $f($k[--$j] + $_.n1); //#26954
            $j--; //#26955
        } //#26955
        for (var _Pg = 0, _Pf = $f($_.rows - 1); _Pg <= _Pf; _Pg += 1) { //#26983
            $_.i = _Pg; //#26959
            $_.symrow = $geti($_.sym, $_.i * $_.cols, $_.cols); //#26962
            $k[$j++] = Infinity; //#26963
            var _Pm = $_.symrow; //#26964
            $k[$j++] = 0; //#26966
            $k[$j++] = -1; //#26966
            for (var _Pn = 0, _Po = _Pm.length; _Pn < _Po; _Pn++) { //#26966
                var _Pp = $get(_Pm, _Pn); //#26966
                var _Pq = $k[--$j]; //#26965
                $k[$j++] = _Pq; //#26965
                $k[$j++] = _Pp; //#26965
                if ($eq(_Pq, _Pp)) { //#26965
                    $j--; //#26965
                    var _Pr = $k[--$j]; //#26965
                    var _Ps = $k[--$j]; //#26965
                    $k[$j++] = $f(_Ps + 1); //#26965
                    $k[$j++] = _Pr; //#26965
                } else { //#26965
                    var _Pt = $k[--$j]; //#26965
                    $k[$j++] = 1; //#26965
                    $k[$j++] = _Pt; //#26965
                } //#26965
            } //#26965
            var _Pv = $counttomark() + 2; //#26967
            $astore($geti($_.rle, 0, _Pv - 2)); //#26967
            $_.evalrle(); //#26968
            $_.n3 = $f($k[--$j] + $_.n3); //#26968
            $_.n1 = $f($k[--$j] + $_.n1); //#26968
            $j--; //#26969
            var _Q1 = $_.thispairs; //#26972
            $_.thispairs = $_.lastpairs; //#26972
            $_.lastpairs = _Q1; //#26972
            var _Q3 = $_.symrow; //#26973
            $k[$j++] = -1; //#26973
            for (var _Q4 = 0, _Q5 = _Q3.length; _Q4 < _Q5; _Q4++) { //#26973
                var _Q6 = $get(_Q3, _Q4); //#26973
                var _Q7 = $k[--$j]; //#26973
                $k[$j++] = _Q6; //#26973
                $k[$j++] = _Q7; //#26973
                if ($ne(_Q6, _Q7)) { //#26973
                    $j--; //#26973
                    var _Q8 = $k[--$j]; //#26973
                    $k[$j++] = -1; //#26973
                    $k[$j++] = _Q8; //#26973
                } //#26973
            } //#26973
            $j--; //#26974
            $astore($_.thispairs); //#26975
            $j--; //#26975
            if ($_.i > 0) { //#26982
                $k[$j++] = Infinity; //#26977
                $aload($_.lastpairs); //#26978
                $aload($_.thispairs); //#26978
                $k[$j++] = $_.n2; //#26979
                for (var _QF = 0, _QG = $_.cols; _QF < _QG; _QF++) { //#26979
                    var _QH = $k[--$j]; //#26979
                    var _QI = $k[--$j]; //#26979
                    $k[$j++] = _QH; //#26979
                    $k[$j++] = _QI; //#26979
                    if (_QI != -1) { //#26979
                        var _QK = $k[$j - 1 - $f($_.cols + 1)]; //#26979
                        if ($eq($k[--$j], _QK)) { //#26979
                            var _QM = $k[--$j]; //#26979
                            $k[$j++] = $f(_QM + 3); //#26979
                        } //#26979
                    } else { //#26979
                        $j--; //#26979
                    } //#26979
                } //#26979
                $_.n2 = $k[--$j]; //#26980
                $cleartomark(); //#26981
            } //#26981
        } //#26981
        $k[$j++] = $f($f($_.n1 + $_.n2) + $_.n3); //#26985
    }; //#26985
    $_.bestscore = 999999999; //#26989
    for (var _QT = 0, _QS = $_.masks.length - 1; _QT <= _QS; _QT += 1) { //#27007
        $_.m = _QT; //#26991
        $_.masksym = $a($_.rows * $_.cols); //#26992
        for (var _Qa = 0, _QZ = $f(($_.rows * $_.cols) - 1); _Qa <= _QZ; _Qa += 1) { //#26996
            $_.i = _Qa; //#26994
            $put($_.masksym, $_.i, $xo($get($_.pixs, $_.i), $get($get($_.masks, $_.m), $_.i))); //#26995
        } //#26995
        if ($_.masks.length != 1) { //#27005
            $k[$j++] = $_.masksym; //#26998
            $_.evalmask(); //#26998
            $_.score = $k[--$j]; //#26998
            if ($_.score < $_.bestscore) { //#27003
                $_.bestsym = $_.masksym; //#27000
                $_.bestmaskval = $_.m; //#27001
                $_.bestscore = $_.score; //#27002
            } //#27002
        } else { //#27005
            $_.bestsym = $_.masksym; //#27005
        } //#27005
    } //#27005
    $_.pixs = $_.bestsym; //#27008
    $_.metamask = $_.bestmaskval; //#27009
    $_.addtometapart = function() {
        var _Qw = $k[--$j]; //#27013
        $puti($_.metapart, $_.p, _Qw); //#27013
        $_.p = _Qw.length + $_.p; //#27014
    }; //#27014
    $_.addtometabits = function() {
        var _R0 = $k[--$j]; //#27018
        $puti($_.metabits, $_.q, _R0); //#27018
        $_.q = _R0.length + $_.q; //#27019
    }; //#27019
    $_.metapart = $s(40); //#27022
    $_.metabits = $s($_.nummetabits); //#27023
    $_.p = 0; //#27024
    $_.q = 0; //#27024
    if (!$_.slave) { //#27079
        $k[$j++] = (~~(Math.round(Math.log($_.colors) / Math.log(2)))) - 1; //#27029
        $k[$j++] = 3; //#27029
        $_.tofixedbits(); //#27029
        $_.addtometapart(); //#27029
        $k[$j++] = $geti($_.metapart, 0, $_.p); //#27030
        $k[$j++] = 2; //#27030
        $k[$j++] = -1; //#27030
        $_.ldpc(); //#27030
        $_.addtometabits(); //#27030
        $_.p = 0; //#27030
        $k[$j++] = $_.metass; //#27033
        $k[$j++] = 1; //#27033
        $_.tofixedbits(); //#27033
        $_.addtometapart(); //#27033
        $k[$j++] = $_.metavf; //#27034
        $k[$j++] = 2; //#27034
        $_.tofixedbits(); //#27034
        $_.addtometapart(); //#27034
        $k[$j++] = $_.metamask; //#27035
        $k[$j++] = 3; //#27035
        $_.tofixedbits(); //#27035
        $_.addtometapart(); //#27035
        if ($_.hasslaves) { //#27036
            $k[$j++] = "1"; //#27036
        } else { //#27036
            $k[$j++] = "0"; //#27036
        } //#27036
        $_.addtometapart(); //#27036
        $k[$j++] = $geti($_.metapart, 0, $_.p); //#27037
        $k[$j++] = 2; //#27037
        $k[$j++] = -1; //#27037
        $_.ldpc(); //#27037
        $_.addtometabits(); //#27037
        $_.p = 0; //#27037
        if ($_.metass == 0) { //#27047
            $k[$j++] = $f(($f((~~($f($_.cols - 17) / 4)) - $get($a([0, 4, 8, 16]), $_.metavf))) - 1); //#27042
            $k[$j++] = $_.metavlen; //#27042
            $_.tofixedbits(); //#27042
            $_.addtometapart(); //#27042
        } else { //#27047
            $k[$j++] = (~~($f($_.cols - 17) / 4)) - 1; //#27045
            $k[$j++] = ~~($_.metavlen / 2); //#27045
            $_.tofixedbits(); //#27045
            $_.addtometapart(); //#27045
            $k[$j++] = (~~($f($_.rows - 17) / 4)) - 1; //#27047
            $k[$j++] = ~~($_.metavlen / 2); //#27047
            $_.tofixedbits(); //#27047
            $_.addtometapart(); //#27047
        } //#27047
        $k[$j++] = $_.datawc - 3; //#27049
        $k[$j++] = ~~($_.metaelen / 2); //#27049
        $_.tofixedbits(); //#27049
        $_.addtometapart(); //#27049
        $k[$j++] = $_.datawr - 4; //#27050
        $k[$j++] = ~~($_.metaelen / 2); //#27050
        $_.tofixedbits(); //#27050
        $_.addtometapart(); //#27050
        if ($_.hasslaves) { //#27053
            $k[$j++] = 0; //#27052
            $k[$j++] = 4; //#27052
            $_.tofixedbits(); //#27052
            $_.addtometapart(); //#27052
        } //#27052
        $k[$j++] = $geti($_.metapart, 0, $_.p); //#27054
        $k[$j++] = 2; //#27054
        $k[$j++] = -1; //#27054
        $_.ldpc(); //#27054
        $_.addtometabits(); //#27054
        $_.p = 0; //#27054
    } else { //#27079
        var _Rc = $_.sameshape ? 0 : 1; //#27059
        $k[$j++] = _Rc; //#27059
        $k[$j++] = 1; //#27059
        $_.tofixedbits(); //#27059
        $_.addtometapart(); //#27059
        var _Re = $_.sameecc ? 0 : 1; //#27060
        $k[$j++] = _Re; //#27060
        $k[$j++] = 1; //#27060
        $_.tofixedbits(); //#27060
        $_.addtometapart(); //#27060
        var _Rg = $_.hasslaves ? 1 : 0; //#27061
        $k[$j++] = _Rg; //#27061
        $k[$j++] = 1; //#27061
        $_.tofixedbits(); //#27061
        $_.addtometapart(); //#27061
        $k[$j++] = $geti($_.metapart, 0, $_.p); //#27062
        $k[$j++] = 2; //#27062
        $k[$j++] = -1; //#27062
        $_.ldpc(); //#27062
        $_.addtometabits(); //#27062
        $_.p = 0; //#27062
        if (!$_.sameshape) { //#27068
            $k[$j++] = (~~(($_.diffside - 17) / 4)) - 1; //#27067
            $k[$j++] = 5; //#27067
            $_.tofixedbits(); //#27067
            $_.addtometapart(); //#27067
        } //#27067
        if ($_.hasslaves) { //#27071
            $k[$j++] = 0; //#27070
            $k[$j++] = 3; //#27070
            $_.tofixedbits(); //#27070
            $_.addtometapart(); //#27070
        } //#27070
        $k[$j++] = $geti($_.metapart, 0, $_.p); //#27072
        $k[$j++] = 2; //#27072
        $k[$j++] = -1; //#27072
        $_.ldpc(); //#27072
        $_.addtometabits(); //#27072
        $_.p = 0; //#27072
        if (!$_.sameecc) { //#27078
            $k[$j++] = $_.datawc - 3; //#27076
            $k[$j++] = ~~($_.metaelen / 2); //#27076
            $_.tofixedbits(); //#27076
            $_.addtometapart(); //#27076
            $k[$j++] = $_.datawr - 4; //#27077
            $k[$j++] = ~~($_.metaelen / 2); //#27077
            $_.tofixedbits(); //#27077
            $_.addtometapart(); //#27077
        } //#27077
        $k[$j++] = $geti($_.metapart, 0, $_.p); //#27079
        $k[$j++] = 2; //#27079
        $k[$j++] = -1; //#27079
        $_.ldpc(); //#27079
        $_.addtometabits(); //#27079
        $_.p = 0; //#27079
    } //#27079
    for (var _S1 = $_.q, _S0 = $f($_.nummetabits - 1); _S1 <= _S0; _S1 += 1) { //#27084
        $put($_.metabits, _S1, 48); //#27083
    } //#27083
    $_.i = 0; //#27087
    $_.j = 0; //#27087
    if (!$_.slave) { //#27095
        var _S6 = $geti($_.metabits, $_.i, 6); //#27089
        for (var _S7 = 0, _S8 = _S6.length; _S7 < _S8; _S7++) { //#27093
            $k[$j++] = $get(_S6, _S7); //#27090
            if ($_.colors == 4) { //#27090
                $k[$j++] = $a([$_.bi, $_.yi]); //#27090
            } else { //#27090
                $k[$j++] = $a([$_.ki, $_.wi]); //#27090
            } //#27090
            var _SH = $k[--$j]; //#27090
            var _SJ = $get(_SH, $f($k[--$j] - 48)); //#27090
            $k[$j++] = _SJ; //#27091
            $k[$j++] = $_.pixs; //#27091
            $aload($get($_.metadatamap, $_.j)); //#27091
            $_.jmv(); //#27091
            var _SO = $k[--$j]; //#27091
            var _SP = $k[--$j]; //#27091
            $put(_SP, _SO, $k[--$j]); //#27091
            $_.j = $_.j + 1; //#27092
        } //#27092
        $_.i = $_.i + 6; //#27094
    } //#27094
    for (var _SW = 0, _SX = ~~($f($_.nummetabits - $_.i) / $_.metabpm); _SW < _SX; _SW++) { //#27102
        var _Sb = $geti($_.metabits, $_.i, $_.metabpm); //#27097
        $k[$j++] = 0; //#27097
        for (var _Sc = 0, _Sd = _Sb.length; _Sc < _Sd; _Sc++) { //#27097
            var _Sf = $k[--$j]; //#27097
            $k[$j++] = ($f(_Sf + $f($get(_Sb, _Sc) - 48))) * 2; //#27097
        } //#27097
        var _Si = $get($_.metacolorindex, ~~($k[--$j] / 2)); //#27098
        $k[$j++] = _Si; //#27099
        $k[$j++] = $_.pixs; //#27099
        $aload($get($_.metadatamap, $_.j)); //#27099
        $_.jmv(); //#27099
        var _Sn = $k[--$j]; //#27099
        var _So = $k[--$j]; //#27099
        $put(_So, _Sn, $k[--$j]); //#27099
        $_.i = $f($_.i + $_.metabpm); //#27100
        $_.j = $_.j + 1; //#27101
    } //#27101
    var _T0 = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $_.pixs],
        ["pixx", $_.cols],
        ["pixy", $_.rows],
        ["colormap", $_.palette],
        ["height", ($_.rows * 2) / 72],
        ["width", ($_.cols * 2) / 72],
        ["opt", $_.options]
    ]); //#27112
    $k[$j++] = _T0; //#27115
    if (!$_.dontdraw) { //#27115
        bwipp_renmatrix(); //#27115
    } //#27115
    $_ = Object.getPrototypeOf($_); //#27117
}

function bwipp_gs1_cc() {
    $_ = Object.create($_); //#27150
    $_.parse = false; //#27153
    $_.dontlint = false; //#27154
    $_.lintreqs = false; //#27155
    $_.dontdraw = false; //#27156
    $_.ccversion = "a"; //#27157
    $_.cccolumns = -1; //#27158
    $_.lintype = ""; //#27159
    $_.linwidth = -1; //#27160
    $k[$j++] = $_; //#27162
    bwipp_processoptions(); //#27162
    $_.options = $k[--$j]; //#27162
    $_.barcode = $k[--$j]; //#27163
    bwipp_loadctx(bwipp_gs1_cc) //#27165
    if (($ne($_.ccversion, "a") && $ne($_.ccversion, "b")) && $ne($_.ccversion, "c")) { //#27169
        $k[$j++] = 'bwipp.gs1ccBadCCversion#27168'; //#27168
        $k[$j++] = "ccversion must be a, b or c"; //#27168
        bwipp_raiseerror(); //#27168
    } //#27168
    if ($_.cccolumns > 30) { //#27173
        $k[$j++] = 'bwipp.gs1ccColumnsTooBig#27172'; //#27172
        $k[$j++] = "The maximum number of composite component columns is 30"; //#27172
        bwipp_raiseerror(); //#27172
    } //#27172
    if (!bwipp_gs1_cc.__27190__) { //#27190
        $_ = Object.create($_); //#27190
        var _6 = new Map([
            ["ean13", 4],
            ["upca", 4],
            ["ean8", 3],
            ["upce", 2],
            ["gs1-128", 4],
            ["databaromni", 4],
            ["databarstacked", 2],
            ["databarstackedomni", 2],
            ["databartruncated", 4],
            ["databarlimited", 3],
            ["databarexpanded", 4],
            ["databarexpandedstacked", 4]
        ]); //#27188
        $_.lintypecccolumns = _6; //#27189
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_gs1_cc.$ctx[id] = $_[id]); //#27189
        bwipp_gs1_cc.__27190__ = 1; //#27189
        $_ = Object.getPrototypeOf($_); //#27189
    } //#27189
    if ($ne($_.lintype, "")) { //#27196
        var _B = $get($_.lintypecccolumns, $_.lintype) !== undefined; //#27193
        if (!_B) { //#27195
            $k[$j++] = 'bwipp.gs1ccBadLinType#27194'; //#27194
            $k[$j++] = "The lintype is not recognised"; //#27194
            bwipp_raiseerror(); //#27194
        } //#27194
    } //#27194
    if ($_.cccolumns == -1) { //#27209
        if ($eq($_.lintype, "gs1-128") && $eq($_.ccversion, "c")) { //#27206
            if ($_.linwidth < 0) { //#27203
                $k[$j++] = 'bwipp.gs1ccMissingLinWidth#27202'; //#27202
                $k[$j++] = "linwidth must be set for a GS1-128 with a CC-C composite component"; //#27202
                bwipp_raiseerror(); //#27202
            } //#27202
            $k[$j++] = ~~(($_.linwidth - 52) / 17); //#27204
        } else { //#27206
            $k[$j++] = $get($_.lintypecccolumns, $_.lintype); //#27206
        } //#27206
        $_.cccolumns = $k[--$j]; //#27208
    } //#27208
    $k[$j++] = $_.barcode; //#27211
    $k[$j++] = 'ai'; //#27211
    bwipp_gs1process(); //#27211
    $_.fncs = $k[--$j]; //#27212
    $_.vals = $k[--$j]; //#27213
    $_.ais = $k[--$j]; //#27214
    $_.isupper = function() {
        var _P = $k[--$j]; //#27217
        $k[$j++] = (_P >= 65) && (_P <= 90); //#27217
    }; //#27217
    $_.isnum0 = function() {
        var _Q = $k[--$j]; //#27218
        $k[$j++] = (_Q >= 48) && (_Q <= 57); //#27218
    }; //#27218
    $_.isnum1 = function() {
        var _R = $k[--$j]; //#27219
        $k[$j++] = (_R >= 49) && (_R <= 57); //#27219
    }; //#27219
    for (;;) { //#27265
        if ($_.ais.length >= 1) { //#27227
            if (($eq($get($_.ais, 0), "10") || $eq($get($_.ais, 0), "11")) || $eq($get($_.ais, 0), "17")) { //#27226
                $k[$j++] = -1; //#27225
                $k[$j++] = "10"; //#27225
                break; //#27225
            } //#27225
        } //#27225
        if ($_.ais.length >= 1) { //#27260
            if ($eq($get($_.ais, 0), "90")) { //#27259
                $_.v = $get($_.vals, 0); //#27232
                if ($_.v.length >= 1) { //#27237
                    $k[$j++] = $get($_.v, 0); //#27234
                    $_.isupper(); //#27234
                    if ($k[--$j]) { //#27236
                        $k[$j++] = 0; //#27235
                        $k[$j++] = "11"; //#27235
                        break; //#27235
                    } //#27235
                } //#27235
                if ($_.v.length >= 2) { //#27243
                    $k[$j++] = $get($_.v, 0); //#27239
                    $_.isnum1(); //#27239
                    $k[$j++] = $get($_.v, 1); //#27240
                    $_.isupper(); //#27240
                    var _n = $k[--$j]; //#27240
                    var _o = $k[--$j]; //#27240
                    if ((_o && _n)) { //#27242
                        $k[$j++] = 1; //#27241
                        $k[$j++] = "11"; //#27241
                        break; //#27241
                    } //#27241
                } //#27241
                if ($_.v.length >= 3) { //#27250
                    $k[$j++] = $get($_.v, 0); //#27245
                    $_.isnum1(); //#27245
                    $k[$j++] = $get($_.v, 1); //#27246
                    $_.isnum0(); //#27246
                    var _u = $k[--$j]; //#27246
                    var _v = $k[--$j]; //#27246
                    $k[$j++] = $an(_v, _u); //#27247
                    $k[$j++] = $get($_.v, 2); //#27247
                    $_.isupper(); //#27247
                    var _y = $k[--$j]; //#27247
                    var _z = $k[--$j]; //#27247
                    if ((_z && _y)) { //#27249
                        $k[$j++] = 2; //#27248
                        $k[$j++] = "11"; //#27248
                        break; //#27248
                    } //#27248
                } //#27248
                if ($_.v.length >= 4) { //#27258
                    $k[$j++] = $get($_.v, 0); //#27252
                    $_.isnum1(); //#27252
                    $k[$j++] = $get($_.v, 1); //#27253
                    $_.isnum0(); //#27253
                    var _15 = $k[--$j]; //#27253
                    var _16 = $k[--$j]; //#27253
                    $k[$j++] = $an(_16, _15); //#27254
                    $k[$j++] = $get($_.v, 2); //#27254
                    $_.isnum0(); //#27254
                    var _19 = $k[--$j]; //#27254
                    var _1A = $k[--$j]; //#27254
                    $k[$j++] = $an(_1A, _19); //#27255
                    $k[$j++] = $get($_.v, 3); //#27255
                    $_.isupper(); //#27255
                    var _1D = $k[--$j]; //#27255
                    var _1E = $k[--$j]; //#27255
                    if ((_1E && _1D)) { //#27257
                        $k[$j++] = 3; //#27256
                        $k[$j++] = "11"; //#27256
                        break; //#27256
                    } //#27256
                } //#27256
            } //#27256
        } //#27256
        $k[$j++] = -1; //#27263
        $k[$j++] = "0"; //#27263
        break; //#27263
    } //#27263
    $_.method = $k[--$j]; //#27266
    $_.npre = $k[--$j]; //#27267
    $_.tobin = function() {
        var _1I = $s($k[--$j]); //#27270
        $k[$j++] = _1I; //#27270
        for (var _1K = 0, _1J = _1I.length - 1; _1K <= _1J; _1K += 1) { //#27270
            var _1L = $k[--$j]; //#27270
            $put(_1L, _1K, 48); //#27270
            $k[$j++] = _1L; //#27270
        } //#27270
        var _1M = $k[--$j]; //#27271
        var _1P = $cvrs($s(_1M.length), $k[--$j], 2); //#27271
        $puti(_1M, _1M.length - _1P.length, _1P); //#27271
        $k[$j++] = _1M; //#27271
    }; //#27271
    if (!bwipp_gs1_cc.__27322__) { //#27322
        $_ = Object.create($_); //#27322
        $_.fnc1 = -1; //#27276
        $_.lnumeric = -2; //#27276
        $_.lalphanumeric = -3; //#27276
        $_.liso646 = -4; //#27276
        $k[$j++] = Infinity; //#27281
        for (var _1Q = 65; _1Q <= 90; _1Q += 1) { //#27279
            $k[$j++] = _1Q; //#27279
            $k[$j++] = _1Q - 65; //#27279
            $k[$j++] = 5; //#27279
            $_.tobin(); //#27279
        } //#27279
        for (var _1R = 48; _1R <= 57; _1R += 1) { //#27280
            $k[$j++] = _1R; //#27280
            $k[$j++] = _1R + 4; //#27280
            $k[$j++] = 6; //#27280
            $_.tobin(); //#27280
        } //#27280
        $k[$j++] = $_.fnc1; //#27281
        $k[$j++] = "11111"; //#27281
        $_.alpha = $d(); //#27282
        $k[$j++] = Infinity; //#27294
        for (var _1U = 0; _1U <= 119; _1U += 1) { //#27293
            var _1W = $strcpy($s(2), "00"); //#27286
            var _1Y = $cvrs($s(2), _1U, 11); //#27286
            $puti(_1W, 2 - _1Y.length, _1Y); //#27287
            $k[$j++] = _1U; //#27288
            $k[$j++] = _1W; //#27288
            if ($get(_1W, 0) == 65) { //#27288
                var _1a = $k[--$j]; //#27288
                $put(_1a, 0, 94); //#27288
                $k[$j++] = _1a; //#27288
            } //#27288
            var _1b = $k[--$j]; //#27289
            $k[$j++] = _1b; //#27289
            if ($get(_1b, 1) == 65) { //#27289
                var _1d = $k[--$j]; //#27289
                $put(_1d, 1, 94); //#27289
                $k[$j++] = _1d; //#27289
            } //#27289
            var _1e = $k[--$j]; //#27290
            var _1h = $strcpy($s(7), "0000000"); //#27291
            var _1j = $cvrs($s(7), $f($k[--$j] + 8), 2); //#27291
            $puti(_1h, 7 - _1j.length, _1j); //#27292
            $k[$j++] = _1e; //#27292
            $k[$j++] = _1h; //#27292
        } //#27292
        $k[$j++] = $_.lalphanumeric; //#27294
        $k[$j++] = "0000"; //#27294
        $_.numeric = $d(); //#27295
        $k[$j++] = Infinity; //#27304
        for (var _1m = 48; _1m <= 57; _1m += 1) { //#27298
            $k[$j++] = _1m; //#27298
            $k[$j++] = _1m - 43; //#27298
            $k[$j++] = 5; //#27298
            $_.tobin(); //#27298
        } //#27298
        $k[$j++] = $_.fnc1; //#27300
        $k[$j++] = "01111"; //#27300
        for (var _1o = 65; _1o <= 90; _1o += 1) { //#27300
            $k[$j++] = _1o; //#27300
            $k[$j++] = _1o - 33; //#27300
            $k[$j++] = 6; //#27300
            $_.tobin(); //#27300
        } //#27300
        $k[$j++] = 42; //#27302
        $k[$j++] = "111010"; //#27302
        for (var _1p = 44; _1p <= 47; _1p += 1) { //#27302
            $k[$j++] = _1p; //#27302
            $k[$j++] = _1p + 15; //#27302
            $k[$j++] = 6; //#27302
            $_.tobin(); //#27302
        } //#27302
        $k[$j++] = $_.lnumeric; //#27304
        $k[$j++] = "000"; //#27304
        $k[$j++] = $_.liso646; //#27304
        $k[$j++] = "00100"; //#27304
        $_.alphanumeric = $d(); //#27305
        $k[$j++] = Infinity; //#27319
        for (var _1t = 48; _1t <= 57; _1t += 1) { //#27308
            $k[$j++] = _1t; //#27308
            $k[$j++] = _1t - 43; //#27308
            $k[$j++] = 5; //#27308
            $_.tobin(); //#27308
        } //#27308
        $k[$j++] = $_.fnc1; //#27310
        $k[$j++] = "01111"; //#27310
        for (var _1v = 65; _1v <= 90; _1v += 1) { //#27310
            $k[$j++] = _1v; //#27310
            $k[$j++] = _1v - 1; //#27310
            $k[$j++] = 7; //#27310
            $_.tobin(); //#27310
        } //#27310
        for (var _1w = 97; _1w <= 122; _1w += 1) { //#27311
            $k[$j++] = _1w; //#27311
            $k[$j++] = _1w - 7; //#27311
            $k[$j++] = 7; //#27311
            $_.tobin(); //#27311
        } //#27311
        $k[$j++] = 33; //#27314
        $k[$j++] = "11101000"; //#27314
        $k[$j++] = 34; //#27314
        $k[$j++] = "11101001"; //#27314
        for (var _1x = 37; _1x <= 47; _1x += 1) { //#27314
            $k[$j++] = _1x; //#27314
            $k[$j++] = _1x + 197; //#27314
            $k[$j++] = 8; //#27314
            $_.tobin(); //#27314
        } //#27314
        for (var _1y = 58; _1y <= 63; _1y += 1) { //#27315
            $k[$j++] = _1y; //#27315
            $k[$j++] = _1y + 187; //#27315
            $k[$j++] = 8; //#27315
            $_.tobin(); //#27315
        } //#27315
        $k[$j++] = 95; //#27319
        $k[$j++] = "11111011"; //#27319
        $k[$j++] = 32; //#27319
        $k[$j++] = "11111100"; //#27319
        $k[$j++] = $_.lnumeric; //#27319
        $k[$j++] = "000"; //#27319
        $k[$j++] = $_.lalphanumeric; //#27319
        $k[$j++] = "00100"; //#27319
        $_.iso646 = $d(); //#27320
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_gs1_cc.$ctx[id] = $_[id]); //#27320
        bwipp_gs1_cc.__27322__ = 1; //#27320
        $_ = Object.getPrototypeOf($_); //#27320
    } //#27320
    if ($eq($_.method, "10")) { //#27357
        if ($eq($get($_.ais, 0), "11") || $eq($get($_.ais, 0), "17")) { //#27340
            var _29 = $get($_.vals, 0); //#27326
            var _2E = $strcpy($s(16), "0000000000000000"); //#27330
            var _2G = $cvrs($s(16), ($cvi($geti(_29, 0, 2)) * 384) + ((($cvi($geti(_29, 2, 2)) - 1) * 32) + $cvi($geti(_29, 4, 2))), 2); //#27330
            $puti(_2E, 16 - _2G.length, _2G); //#27331
            $k[$j++] = _2E; //#27334
            $k[$j++] = Infinity; //#27334
            var _2H = $k[--$j]; //#27333
            var _2I = $k[--$j]; //#27333
            $k[$j++] = _2H; //#27333
            $k[$j++] = 1; //#27333
            $k[$j++] = 0; //#27333
            $forall(_2I, function() { //#27333
                var _2J = $k[--$j]; //#27333
                $k[$j++] = $f(_2J - 48); //#27333
            }); //#27333
            var _2M = $eq($get($_.ais, 0), "11") ? 0 : 1; //#27334
            $k[$j++] = _2M; //#27334
            $_.cdf = $a(); //#27335
            $_.ais = $geti($_.ais, 1, $_.ais.length - 1); //#27336
            $_.vals = $geti($_.vals, 1, $_.vals.length - 1); //#27337
            $_.fncs = $geti($_.fncs, 1, $_.fncs.length - 1); //#27338
        } else { //#27340
            $_.cdf = $a([1, 0, 1, 1]); //#27340
        } //#27340
        if ($_.ais.length != 0) { //#27354
            if ($eq($get($_.ais, 0), "10")) { //#27350
                $k[$j++] = Infinity; //#27344
                $forall($get($_.vals, 0)); //#27344
                $_.gpf = $a(); //#27344
                if ($_.ais.length > 1) { //#27345
                    $k[$j++] = Infinity; //#27345
                    $aload($_.gpf); //#27345
                    $k[$j++] = $_.fnc1; //#27345
                    $_.gpf = $a(); //#27345
                } //#27345
                $_.ais = $geti($_.ais, 1, $_.ais.length - 1); //#27346
                $_.vals = $geti($_.vals, 1, $_.vals.length - 1); //#27347
                $_.fncs = $geti($_.fncs, 1, $_.fncs.length - 1); //#27348
            } else { //#27350
                $_.gpf = $a([$_.fnc1]); //#27350
            } //#27350
        } else { //#27354
            $k[$j++] = Infinity; //#27353
            $aload($_.cdf); //#27353
            $k[$j++] = 0; //#27353
            $k[$j++] = 0; //#27353
            $k[$j++] = 0; //#27353
            $k[$j++] = 0; //#27353
            $k[$j++] = 0; //#27353
            $k[$j++] = 1; //#27353
            $k[$j++] = 1; //#27353
            $k[$j++] = 1; //#27353
            $k[$j++] = 1; //#27353
            $_.cdf = $a(); //#27353
            $_.gpf = $a([]); //#27354
        } //#27354
        $_.mode = "numeric"; //#27356
    } //#27356
    if ($eq($_.method, "11")) { //#27451
        $_.cdf = $a([1, 1]); //#27360
        $_.ai90 = $get($_.vals, 0); //#27361
        if ($f($_.npre + 1) != $_.ai90.length) { //#27365
            $k[$j++] = $geti($_.ai90, $f($_.npre + 1), $f($f($_.ai90.length - $_.npre) - 1)); //#27363
        } else { //#27365
            $k[$j++] = ""; //#27365
        } //#27365
        $_.ai90rem = $k[--$j]; //#27367
        $k[$j++] = 'nalpha'; //#27368
        $k[$j++] = 0; //#27368
        $forall($_.ai90rem, function() { //#27368
            var _39 = $k[--$j]; //#27368
            if ((_39 >= 65) && (_39 <= 90)) { //#27368
                var _3A = $k[--$j]; //#27368
                $k[$j++] = $f(_3A + 1); //#27368
            } //#27368
        }); //#27368
        var _3B = $k[--$j]; //#27368
        $_[$k[--$j]] = _3B; //#27368
        $k[$j++] = 'nnums'; //#27369
        $k[$j++] = 0; //#27369
        $forall($_.ai90rem, function() { //#27369
            var _3E = $k[--$j]; //#27369
            if ((_3E >= 48) && (_3E <= 57)) { //#27369
                var _3F = $k[--$j]; //#27369
                $k[$j++] = $f(_3F + 1); //#27369
            } //#27369
        }); //#27369
        var _3G = $k[--$j]; //#27369
        $_[$k[--$j]] = _3G; //#27369
        $k[$j++] = 'mode'; //#27370
        if ($gt($_.nalpha, $_.nnums)) { //#27370
            $k[$j++] = "alpha"; //#27370
        } else { //#27370
            if ($_.nalpha == 0) { //#27370
                $k[$j++] = "numeric"; //#27370
            } else { //#27370
                $k[$j++] = "alphanumeric"; //#27370
            } //#27370
        } //#27370
        var _3L = $k[--$j]; //#27370
        $_[$k[--$j]] = _3L; //#27370
        if ($f($_.nalpha + $_.nnums) != $_.ai90rem.length) { //#27371
            $_.mode = "alphanumeric"; //#27371
        } //#27371
        $k[$j++] = Infinity; //#27376
        $aload($_.cdf); //#27373
        if ($eq($_.mode, "alphanumeric")) { //#27374
            $k[$j++] = 0; //#27374
        } //#27374
        if ($eq($_.mode, "numeric")) { //#27375
            $k[$j++] = 1; //#27375
            $k[$j++] = 0; //#27375
        } //#27375
        if ($eq($_.mode, "alpha")) { //#27376
            $k[$j++] = 1; //#27376
            $k[$j++] = 1; //#27376
        } //#27376
        $_.cdf = $a(); //#27376
        $k[$j++] = 'ais1'; //#27378
        if ($_.ais.length > 1) { //#27378
            $k[$j++] = $get($_.ais, 1); //#27378
        } else { //#27378
            $k[$j++] = -1; //#27378
        } //#27378
        var _3Y = $k[--$j]; //#27378
        $_[$k[--$j]] = _3Y; //#27378
        $k[$j++] = 'vals1'; //#27379
        if ($_.vals.length > 1) { //#27379
            $k[$j++] = $get($_.vals, 1); //#27379
        } else { //#27379
            $k[$j++] = -1; //#27379
        } //#27379
        var _3d = $k[--$j]; //#27379
        $_[$k[--$j]] = _3d; //#27379
        if ($eq($_.ais1, "21") || $eq($_.ais1, "8004")) { //#27383
            $k[$j++] = Infinity; //#27381
            $aload($_.cdf); //#27381
            if ($eq($_.ais1, "21")) { //#27381
                $k[$j++] = 1; //#27381
                $k[$j++] = 0; //#27381
            } else { //#27381
                $k[$j++] = 1; //#27381
                $k[$j++] = 1; //#27381
            } //#27381
            $_.cdf = $a(); //#27381
        } else { //#27383
            $k[$j++] = Infinity; //#27383
            $aload($_.cdf); //#27383
            $k[$j++] = 0; //#27383
            $_.cdf = $a(); //#27383
        } //#27383
        $k[$j++] = 'nval'; //#27385
        if ($_.npre != 0) { //#27385
            $k[$j++] = $cvi($geti($_.ai90, 0, $_.npre)); //#27385
        } else { //#27385
            $k[$j++] = 0; //#27385
        } //#27385
        var _3q = $k[--$j]; //#27385
        $_[$k[--$j]] = _3q; //#27385
        $search("BDHIJKLNPQRSTVXZ", $geti($_.ai90, $_.npre, 1)); //#27386
        if ($k[--$j]) { //#27390
            var _3w = $k[--$j]; //#27387
            var _3x = $k[--$j]; //#27387
            $k[$j++] = _3w.length; //#27387
            $k[$j++] = _3x; //#27387
            $j--; //#27387
            var _3y = $k[--$j]; //#27387
            var _3z = $k[--$j]; //#27387
            $k[$j++] = _3y; //#27387
            $k[$j++] = _3z; //#27387
            $j--; //#27387
            $_.aval = $k[--$j]; //#27388
        } else { //#27390
            $j--; //#27390
            $_.aval = -1; //#27390
        } //#27390
        if (($_.nval < 31) && ($_.aval != -1)) { //#27416
            var _44 = $strcpy($s(5), "00000"); //#27393
            var _47 = $cvrs($s(5), $_.nval, 2); //#27393
            $puti(_44, 5 - _47.length, _47); //#27394
            $k[$j++] = _44; //#27395
            $k[$j++] = Infinity; //#27395
            var _48 = $k[--$j]; //#27395
            var _49 = $k[--$j]; //#27395
            $k[$j++] = _48; //#27395
            $forall(_49, function() { //#27395
                var _4A = $k[--$j]; //#27395
                $k[$j++] = $f(_4A - 48); //#27395
            }); //#27395
            $_.nbits = $a(); //#27395
            var _4D = $strcpy($s(4), "0000"); //#27396
            var _4G = $cvrs($s(4), $_.aval, 2); //#27396
            $puti(_4D, 4 - _4G.length, _4G); //#27397
            $k[$j++] = _4D; //#27398
            $k[$j++] = Infinity; //#27398
            var _4H = $k[--$j]; //#27398
            var _4I = $k[--$j]; //#27398
            $k[$j++] = _4H; //#27398
            $forall(_4I, function() { //#27398
                var _4J = $k[--$j]; //#27398
                $k[$j++] = $f(_4J - 48); //#27398
            }); //#27398
            $_.abits = $a(); //#27398
            $k[$j++] = Infinity; //#27402
            $aload($_.cdf); //#27400
            $aload($_.nbits); //#27401
            $aload($_.abits); //#27402
            $_.cdf = $a(); //#27402
        } else { //#27416
            var _4Q = $strcpy($s(10), "0000000000"); //#27405
            var _4T = $cvrs($s(10), $_.nval, 2); //#27405
            $puti(_4Q, 10 - _4T.length, _4T); //#27406
            $k[$j++] = _4Q; //#27407
            $k[$j++] = Infinity; //#27407
            var _4U = $k[--$j]; //#27407
            var _4V = $k[--$j]; //#27407
            $k[$j++] = _4U; //#27407
            $forall(_4V, function() { //#27407
                var _4W = $k[--$j]; //#27407
                $k[$j++] = $f(_4W - 48); //#27407
            }); //#27407
            $_.nbits = $a(); //#27407
            var _4Z = $strcpy($s(5), "00000"); //#27408
            var _4e = $cvrs($s(5), $f($get($_.ai90, $_.npre) - 65), 2); //#27408
            $puti(_4Z, 5 - _4e.length, _4e); //#27409
            $k[$j++] = _4Z; //#27410
            $k[$j++] = Infinity; //#27410
            var _4f = $k[--$j]; //#27410
            var _4g = $k[--$j]; //#27410
            $k[$j++] = _4f; //#27410
            $forall(_4g, function() { //#27410
                var _4h = $k[--$j]; //#27410
                $k[$j++] = $f(_4h - 48); //#27410
            }); //#27410
            $_.abits = $a(); //#27410
            $k[$j++] = Infinity; //#27415
            $aload($_.cdf); //#27412
            $k[$j++] = 1; //#27414
            $k[$j++] = 1; //#27414
            $k[$j++] = 1; //#27414
            $k[$j++] = 1; //#27414
            $k[$j++] = 1; //#27414
            $aload($_.nbits); //#27414
            $aload($_.abits); //#27415
            $_.cdf = $a(); //#27415
        } //#27416
        if ($ne($_.mode, "alpha")) { //#27434
            $k[$j++] = Infinity; //#27419
            $forall($_.ai90rem); //#27419
            if ($_.ais.length > 1) { //#27419
                $k[$j++] = $_.fnc1; //#27419
            } //#27419
            $_.gpf = $a(); //#27419
        } else { //#27434
            $k[$j++] = Infinity; //#27421
            $forall($_.ai90rem); //#27421
            if ($_.ais.length > 1) { //#27421
                $k[$j++] = $_.fnc1; //#27421
            } //#27421
            $_.in = $a(); //#27421
            $_.out = $a($_.in.length * 6); //#27422
            $_.j = 0; //#27423
            for (var _50 = 0, _4z = $_.in.length - 1; _50 <= _4z; _50 += 1) { //#27428
                var _54 = $get($_.alpha, $get($_.in, _50)); //#27425
                $k[$j++] = _54; //#27426
                $k[$j++] = _54; //#27426
                $k[$j++] = Infinity; //#27426
                var _55 = $k[--$j]; //#27426
                var _56 = $k[--$j]; //#27426
                $k[$j++] = _55; //#27426
                $forall(_56, function() { //#27426
                    var _57 = $k[--$j]; //#27426
                    $k[$j++] = $f(_57 - 48); //#27426
                }); //#27426
                $puti($_.out, $_.j, $a()); //#27426
                $_.j = $k[--$j].length + $_.j; //#27427
            } //#27427
            $k[$j++] = Infinity; //#27431
            $aload($_.cdf); //#27430
            $aload($geti($_.out, 0, $_.j)); //#27431
            $_.cdf = $a(); //#27431
            $_.gpf = $a([]); //#27433
            if ($_.ais.length > 1) { //#27434
                $_.mode = "numeric"; //#27434
            } //#27434
        } //#27434
        $_.ais = $geti($_.ais, 1, $_.ais.length - 1); //#27436
        $_.vals = $geti($_.vals, 1, $_.vals.length - 1); //#27437
        $_.fncs = $geti($_.fncs, 1, $_.fncs.length - 1); //#27438
        if ($_.ais.length != 0) { //#27450
            if ($eq($_.ais1, "21") || $eq($_.ais1, "8004")) { //#27449
                $k[$j++] = Infinity; //#27443
                $aload($_.gpf); //#27442
                $forall($_.vals1); //#27443
                $_.gpf = $a(); //#27443
                $_.ais = $geti($_.ais, 1, $_.ais.length - 1); //#27445
                $_.vals = $geti($_.vals, 1, $_.vals.length - 1); //#27446
                $_.fncs = $geti($_.fncs, 1, $_.fncs.length - 1); //#27447
                if ($_.ais.length != 0) { //#27448
                    $k[$j++] = Infinity; //#27448
                    $aload($_.gpf); //#27448
                    $k[$j++] = $_.fnc1; //#27448
                    $_.gpf = $a(); //#27448
                } //#27448
            } //#27448
        } //#27448
    } //#27448
    if ($eq($_.method, "0")) { //#27457
        $_.cdf = $a([0]); //#27454
        $_.gpf = $a([]); //#27455
        $_.mode = "numeric"; //#27456
    } //#27456
    for (var _5r = 0, _5q = $_.ais.length - 1; _5r <= _5q; _5r += 1) { //#27475
        $_.i = _5r; //#27461
        $_.ai = $get($_.ais, $_.i); //#27462
        $_.val = $get($_.vals, $_.i); //#27463
        var _61 = $a(($_.gpf.length + $_.ai.length) + $_.val.length); //#27464
        $puti(_61, 0, $_.gpf); //#27465
        $k[$j++] = _61; //#27466
        $k[$j++] = _61; //#27466
        $k[$j++] = $_.gpf.length; //#27466
        $k[$j++] = $_.ai; //#27466
        $k[$j++] = Infinity; //#27466
        var _65 = $k[--$j]; //#27466
        var _66 = $k[--$j]; //#27466
        $k[$j++] = _65; //#27466
        $forall(_66); //#27466
        var _67 = $a(); //#27466
        var _68 = $k[--$j]; //#27466
        $puti($k[--$j], _68, _67); //#27466
        var _6A = $k[--$j]; //#27467
        $k[$j++] = _6A; //#27467
        $k[$j++] = _6A; //#27467
        $k[$j++] = $_.gpf.length + $_.ai.length; //#27467
        $k[$j++] = $_.val; //#27467
        $k[$j++] = Infinity; //#27467
        var _6E = $k[--$j]; //#27467
        var _6F = $k[--$j]; //#27467
        $k[$j++] = _6E; //#27467
        $forall(_6F); //#27467
        var _6G = $a(); //#27467
        var _6H = $k[--$j]; //#27467
        $puti($k[--$j], _6H, _6G); //#27467
        $_.gpf = $k[--$j]; //#27468
        if (($_.i != ($_.ais.length - 1)) && $get($_.fncs, $_.i)) { //#27474
            var _6Q = $a($_.gpf.length + 1); //#27470
            $puti(_6Q, 0, $_.gpf); //#27471
            $put(_6Q, $_.gpf.length, $_.fnc1); //#27472
            $_.gpf = _6Q; //#27473
        } //#27473
    } //#27473
    if (!bwipp_gs1_cc.__27491__) { //#27491
        $_ = Object.create($_); //#27491
        var _6c = new Map([
            ["a", $a([$a([167, 138, 118, 108, 88, 78, 59]), $a([167, 138, 118, 98, 78]), $a([197, 167, 138, 108, 78])])],
            ["b", $a([$a([336, 296, 256, 208, 160, 104, 56]), $a([768, 648, 536, 416, 304, 208, 152, 112, 72, 32]), $a([1184, 1016, 840, 672, 496, 352, 264, 208, 152, 96, 56])])]
        ]); //#27488
        $_.bitcapsmaps = _6c; //#27490
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_gs1_cc.$ctx[id] = $_[id]); //#27490
        bwipp_gs1_cc.__27491__ = 1; //#27490
        $_ = Object.getPrototypeOf($_); //#27490
    } //#27490
    $_.rembits = function() {
        $_.used = $k[--$j]; //#27494
        if ($ne($_.ccversion, "c")) { //#27517
            $_.bitcaps = $get($get($_.bitcapsmaps, $_.ccversion), $f($_.cccolumns - 2)); //#27496
            $k[$j++] = -1; //#27497
            $forall($_.bitcaps, function() { //#27497
                var _6m = $k[--$j]; //#27497
                $k[$j++] = _6m; //#27497
                if ($ge(_6m, $_.used)) { //#27497
                    var _6o = $k[--$j]; //#27497
                    var _6p = $k[--$j]; //#27497
                    $k[$j++] = _6o; //#27497
                    $k[$j++] = _6p; //#27497
                } //#27497
                $j--; //#27497
            }); //#27497
            var _6q = $k[--$j]; //#27498
            $k[$j++] = _6q; //#27498
            if (_6q != -1) { //#27498
                var _6s = $k[--$j]; //#27498
                $k[$j++] = $f(_6s - $_.used); //#27498
            } //#27498
        } else { //#27517
            var _6t = new Map([
                ["c", -1]
            ]); //#27500
            var _6v = $get(_6t, $_.ccversion); //#27500
            var _6x = ~~Math.ceil($_.used / 8); //#27501
            $_.m = ((~~(_6x / 6)) * 5) + (_6x % 6); //#27501
            if ($_.m <= 40) { //#27502
                $k[$j++] = 8; //#27502
            } //#27502
            if (($_.m >= 41) && ($_.m <= 160)) { //#27503
                $k[$j++] = 16; //#27503
            } //#27503
            if (($_.m >= 161) && ($_.m <= 320)) { //#27504
                $k[$j++] = 32; //#27504
            } //#27504
            if (($_.m >= 321) && ($_.m <= 833)) { //#27505
                $k[$j++] = 64; //#27505
            } //#27505
            if ($_.m >= 834) { //#27506
                $k[$j++] = 32; //#27506
            } //#27506
            $_.eccws = $k[--$j]; //#27507
            $_.m = $f($f($_.m + $_.eccws) + 3); //#27508
            if ($_.cccolumns > 30) { //#27509
                $_.cccolumns = 30; //#27509
            } //#27509
            for (;;) { //#27513
                if (((~~Math.ceil($_.m / $_.cccolumns)) <= 30) || ($_.cccolumns >= 30)) { //#27511
                    break; //#27511
                } //#27511
                $_.cccolumns = $_.cccolumns + 1; //#27512
            } //#27512
            $_.r = ~~Math.ceil($_.m / $_.cccolumns); //#27514
            if ($_.r < 3) { //#27515
                $_.r = 3; //#27515
            } //#27515
            var _7K = $f(($f(($_.cccolumns * $_.r) - $_.eccws)) - 3); //#27516
            $_.tgt = ($f(((~~(_7K / 5)) * 6) + (_7K % 5))) * 8; //#27516
            if ($_.used <= 8304) { //#27517
                $k[$j++] = $f($_.tgt - $_.used); //#27517
            } else { //#27517
                $k[$j++] = -1; //#27517
            } //#27517
        } //#27517
        var _7O = $k[--$j]; //#27519
        $k[$j++] = _7O; //#27532
        if (_7O == -1) { //#27532
            $j--; //#27520
            if ($eq($_.ccversion, "a")) { //#27528
                $_.ccversion = "b"; //#27522
            } else { //#27528
                if ($eq($_.ccversion, "b") && $eq($_.lintype, "gs1-128")) { //#27528
                    $_.ccversion = "c"; //#27525
                    $_.cccolumns = ~~(($_.linwidth - 52) / 17); //#27526
                } else { //#27528
                    $_.ccversion = -1; //#27528
                } //#27528
            } //#27528
            $k[$j++] = $_.used; //#27531
            $_.rembits(); //#27531
        } //#27531
    }; //#27531
    $_.encode = function() {
        var _7U = $k[--$j]; //#27536
        $k[$j++] = _7U; //#27536
        if ($ne(_7U, 'raw')) { //#27536
            var _7V = $k[--$j]; //#27536
            var _7X = $get(_7V, $k[--$j]); //#27536
            $k[$j++] = _7X; //#27536
        } else { //#27536
            $j--; //#27536
        } //#27536
        $k[$j++] = Infinity; //#27537
        var _7Y = $k[--$j]; //#27537
        var _7Z = $k[--$j]; //#27537
        $k[$j++] = _7Y; //#27537
        $forall(_7Z, function() { //#27537
            var _7a = $k[--$j]; //#27537
            $k[$j++] = $f(_7a - 48); //#27537
        }); //#27537
        var _7b = $a(); //#27537
        $puti($_.gpfenc, $_.j, _7b); //#27539
        $_.j = _7b.length + $_.j; //#27540
    }; //#27540
    $k[$j++] = Infinity; //#27544
    for (var _7g = 0, _7h = $_.gpf.length; _7g < _7h; _7g++) { //#27544
        $k[$j++] = 0; //#27544
    } //#27544
    $k[$j++] = 0; //#27544
    $k[$j++] = -1; //#27544
    $_.numericruns = $a(); //#27544
    $k[$j++] = Infinity; //#27545
    for (var _7k = 0, _7l = $_.gpf.length; _7k < _7l; _7k++) { //#27545
        $k[$j++] = 0; //#27545
    } //#27545
    $k[$j++] = 0; //#27545
    $_.alphanumericruns = $a(); //#27545
    $k[$j++] = Infinity; //#27546
    for (var _7o = 0, _7p = $_.gpf.length; _7o < _7p; _7o++) { //#27546
        $k[$j++] = 0; //#27546
    } //#27546
    $k[$j++] = 9999; //#27546
    $_.nextiso646only = $a(); //#27546
    for (var _7s = $_.gpf.length - 1; _7s >= 0; _7s -= 1) { //#27568
        $_.i = _7s; //#27548
        var _7x = $strcpy($s(2), "00"); //#27550
        var _80 = $get($_.gpf, $_.i); //#27551
        $k[$j++] = $get($_.gpf, $_.i); //#27551
        $k[$j++] = _7x; //#27551
        $k[$j++] = _7x; //#27551
        $k[$j++] = 0; //#27551
        $k[$j++] = _80; //#27551
        if (_80 == $_.fnc1) { //#27551
            $j--; //#27551
            $k[$j++] = 94; //#27551
        } //#27551
        var _82 = $k[--$j]; //#27551
        var _83 = $k[--$j]; //#27551
        $put($k[--$j], _83, _82); //#27551
        if ($_.i < ($_.gpf.length - 1)) { //#27552
            var _87 = $k[--$j]; //#27552
            var _8A = $get($_.gpf, $_.i + 1); //#27552
            $k[$j++] = _87; //#27552
            $k[$j++] = _87; //#27552
            $k[$j++] = 1; //#27552
            $k[$j++] = _8A; //#27552
            if (_8A == $_.fnc1) { //#27552
                $j--; //#27552
                $k[$j++] = 94; //#27552
            } //#27552
            var _8C = $k[--$j]; //#27552
            var _8D = $k[--$j]; //#27552
            $put($k[--$j], _8D, _8C); //#27552
        } //#27552
        var _8H = $get($_.numeric, $k[--$j]) !== undefined; //#27553
        if (_8H) { //#27556
            $put($_.numericruns, $_.i, $f($get($_.numericruns, $_.i + 2) + 2)); //#27554
        } else { //#27556
            $put($_.numericruns, $_.i, 0); //#27556
        } //#27556
        var _8P = $k[--$j]; //#27558
        var _8R = $get($_.alphanumeric, _8P) !== undefined; //#27558
        $k[$j++] = _8P; //#27562
        if (_8R) { //#27561
            $put($_.alphanumericruns, $_.i, $f($get($_.alphanumericruns, $_.i + 1) + 1)); //#27559
        } else { //#27561
            $put($_.alphanumericruns, $_.i, 0); //#27561
        } //#27561
        var _8Z = $k[--$j]; //#27563
        var _8b = $get($_.iso646, _8Z) !== undefined; //#27563
        var _8d = $get($_.alphanumeric, _8Z) !== undefined; //#27563
        if (_8b && (!_8d)) { //#27566
            $put($_.nextiso646only, $_.i, 0); //#27564
        } else { //#27566
            $put($_.nextiso646only, $_.i, $f($get($_.nextiso646only, $_.i + 1) + 1)); //#27566
        } //#27566
    } //#27566
    $_.gpfenc = $a(8304); //#27571
    $_.i = 0; //#27572
    $_.j = 0; //#27572
    for (;;) { //#27662
        if ($_.i == $_.gpf.length) { //#27574
            break; //#27574
        } //#27574
        for (;;) { //#27661
            if ($eq($_.mode, "numeric")) { //#27610
                if ($_.i <= ($_.gpf.length - 2)) { //#27607
                    var _8r = $s(2); //#27579
                    var _8u = $get($_.gpf, $_.i); //#27580
                    $k[$j++] = _8r; //#27580
                    $k[$j++] = _8r; //#27580
                    $k[$j++] = 0; //#27580
                    $k[$j++] = _8u; //#27580
                    if (_8u == $_.fnc1) { //#27580
                        $j--; //#27580
                        $k[$j++] = 94; //#27580
                    } //#27580
                    var _8w = $k[--$j]; //#27580
                    var _8x = $k[--$j]; //#27580
                    $put($k[--$j], _8x, _8w); //#27580
                    var _8z = $k[--$j]; //#27581
                    var _92 = $get($_.gpf, $_.i + 1); //#27581
                    $k[$j++] = _8z; //#27581
                    $k[$j++] = _8z; //#27581
                    $k[$j++] = 1; //#27581
                    $k[$j++] = _92; //#27581
                    if (_92 == $_.fnc1) { //#27581
                        $j--; //#27581
                        $k[$j++] = 94; //#27581
                    } //#27581
                    var _94 = $k[--$j]; //#27581
                    var _95 = $k[--$j]; //#27581
                    $put($k[--$j], _95, _94); //#27581
                    var _97 = $k[--$j]; //#27582
                    var _99 = $get($_.numeric, _97) !== undefined; //#27582
                    $k[$j++] = _97; //#27586
                    if (_99) { //#27586
                        $k[$j++] = $_.numeric; //#27583
                        $_.encode(); //#27583
                        $_.i = $_.i + 2; //#27584
                        break; //#27585
                    } //#27585
                    $j--; //#27587
                    $k[$j++] = $_.lalphanumeric; //#27588
                    $k[$j++] = $_.numeric; //#27588
                    $_.encode(); //#27588
                    $_.mode = "alphanumeric"; //#27589
                    break; //#27590
                } else { //#27607
                    var _9G = $get($_.gpf, $_.i); //#27592
                    if ((_9G < 48) || (_9G > 57)) { //#27596
                        $k[$j++] = $_.lalphanumeric; //#27593
                        $k[$j++] = $_.numeric; //#27593
                        $_.encode(); //#27593
                        $_.mode = "alphanumeric"; //#27594
                        break; //#27595
                    } //#27595
                    $k[$j++] = 'rem'; //#27597
                    $k[$j++] = $_.cdf.length + $_.j; //#27597
                    $_.rembits(); //#27597
                    var _9L = $k[--$j]; //#27597
                    $_[$k[--$j]] = _9L; //#27597
                    if (($_.rem >= 4) && ($_.rem <= 6)) { //#27607
                        var _9S = $geti($strcpy($s(6), "000000"), 0, $_.rem); //#27599
                        var _9X = $cvrs($s(4), $f($get($_.gpf, $_.i) - 47), 2); //#27600
                        $puti(_9S, 4 - _9X.length, _9X); //#27601
                        $k[$j++] = _9S; //#27601
                        $k[$j++] = 'raw'; //#27601
                        $_.encode(); //#27601
                        $_.i = $_.i + 1; //#27602
                        break; //#27603
                    } else { //#27607
                        var _9Z = $s(2); //#27605
                        $put(_9Z, 0, $get($_.gpf, $_.i)); //#27605
                        $put(_9Z, 1, 94); //#27605
                        $k[$j++] = _9Z; //#27605
                        $k[$j++] = $_.numeric; //#27605
                        $_.encode(); //#27605
                        $_.i = $_.i + 1; //#27606
                        break; //#27607
                    } //#27607
                } //#27607
            } //#27607
            if ($eq($_.mode, "alphanumeric")) { //#27637
                if ($get($_.gpf, $_.i) == $_.fnc1) { //#27618
                    $k[$j++] = $_.fnc1; //#27614
                    $k[$j++] = $_.alphanumeric; //#27614
                    $_.encode(); //#27614
                    $_.mode = "numeric"; //#27615
                    $_.i = $_.i + 1; //#27616
                    break; //#27617
                } //#27617
                var _9p = $get($_.gpf, $_.i); //#27619
                var _9r = $get($_.iso646, _9p) !== undefined; //#27619
                var _9t = $get($_.alphanumeric, _9p) !== undefined; //#27619
                if (_9r && (!_9t)) { //#27623
                    $k[$j++] = $_.liso646; //#27620
                    $k[$j++] = $_.alphanumeric; //#27620
                    $_.encode(); //#27620
                    $_.mode = "iso646"; //#27621
                    break; //#27622
                } //#27622
                if ($get($_.numericruns, $_.i) >= 6) { //#27628
                    $k[$j++] = $_.lnumeric; //#27625
                    $k[$j++] = $_.alphanumeric; //#27625
                    $_.encode(); //#27625
                    $_.mode = "numeric"; //#27626
                    break; //#27627
                } //#27627
                var _A3 = $get($_.numericruns, $_.i); //#27629
                if ((_A3 >= 4) && ($f(_A3 + $_.i) == $_.gpf.length)) { //#27633
                    $k[$j++] = $_.lnumeric; //#27630
                    $k[$j++] = $_.alphanumeric; //#27630
                    $_.encode(); //#27630
                    $_.mode = "numeric"; //#27631
                    break; //#27632
                } //#27632
                $k[$j++] = $get($_.gpf, $_.i); //#27634
                $k[$j++] = $_.alphanumeric; //#27634
                $_.encode(); //#27634
                $_.i = $_.i + 1; //#27635
                break; //#27636
            } //#27636
            if ($eq($_.mode, "iso646")) { //#27659
                if ($get($_.gpf, $_.i) == $_.fnc1) { //#27645
                    $k[$j++] = $_.fnc1; //#27641
                    $k[$j++] = $_.iso646; //#27641
                    $_.encode(); //#27641
                    $_.mode = "numeric"; //#27642
                    $_.i = $_.i + 1; //#27643
                    break; //#27644
                } //#27644
                if (($get($_.numericruns, $_.i) >= 4) && ($get($_.nextiso646only, $_.i) >= 10)) { //#27650
                    $k[$j++] = $_.lnumeric; //#27647
                    $k[$j++] = $_.iso646; //#27647
                    $_.encode(); //#27647
                    $_.mode = "numeric"; //#27648
                    break; //#27649
                } //#27649
                if (($get($_.alphanumericruns, $_.i) >= 5) && ($get($_.nextiso646only, $_.i) >= 10)) { //#27655
                    $k[$j++] = $_.lalphanumeric; //#27652
                    $k[$j++] = $_.iso646; //#27652
                    $_.encode(); //#27652
                    $_.mode = "alphanumeric"; //#27653
                    break; //#27654
                } //#27654
                $k[$j++] = $get($_.gpf, $_.i); //#27656
                $k[$j++] = $_.iso646; //#27656
                $_.encode(); //#27656
                $_.i = $_.i + 1; //#27657
                break; //#27658
            } //#27658
        } //#27658
    } //#27658
    $_.gpf = $geti($_.gpfenc, 0, $_.j); //#27663
    $k[$j++] = 'pad'; //#27666
    $k[$j++] = $_.cdf.length + $_.gpf.length; //#27666
    $_.rembits(); //#27666
    var _Am = $a($k[--$j]); //#27666
    $_[$k[--$j]] = _Am; //#27666
    if ($_.pad.length > 0) { //#27678
        for (var _Ar = 0, _Aq = $_.pad.length - 1; _Ar <= _Aq; _Ar += 5) { //#27671
            $_.i = _Ar; //#27669
            var _As = $_.pad; //#27670
            var _At = $_.i; //#27670
            var _Au = $a([0, 0, 1, 0, 0]); //#27670
            var _Av = $_.pad; //#27670
            var _Aw = $_.i; //#27670
            var _Ax = 5; //#27670
            var _Ay = _Av.length - _Aw; //#27670
            if ((_Av.length - _Aw) > 5) { //#27670
                var _ = _Ax; //#27670
                _Ax = _Ay; //#27670
                _Ay = _; //#27670
            } //#27670
            $puti(_As, _At, $geti(_Au, 0, _Ay)); //#27670
        } //#27670
        if ($eq($_.mode, "numeric")) { //#27674
            $k[$j++] = Infinity; //#27673
            $k[$j++] = 0; //#27673
            $k[$j++] = 0; //#27673
            $k[$j++] = 0; //#27673
            $k[$j++] = 0; //#27673
            $aload($_.pad); //#27673
            $_.pad = $geti($a(), 0, $_.pad.length); //#27673
        } //#27673
        if ($eq($_.mode, "alpha")) { //#27677
            $k[$j++] = Infinity; //#27676
            $k[$j++] = 1; //#27676
            $k[$j++] = 1; //#27676
            $k[$j++] = 1; //#27676
            $k[$j++] = 1; //#27676
            $k[$j++] = 1; //#27676
            $k[$j++] = 0; //#27676
            $k[$j++] = 0; //#27676
            $k[$j++] = 0; //#27676
            $k[$j++] = 0; //#27676
            $aload($_.pad); //#27676
            $_.pad = $geti($a(), 0, $_.pad.length); //#27676
        } //#27676
    } //#27676
    $k[$j++] = Infinity; //#27684
    $aload($_.cdf); //#27682
    $aload($_.gpf); //#27683
    $aload($_.pad); //#27684
    $_.bits = $a(); //#27684
    if (!bwipp_gs1_cc.__27702__) { //#27702
        $_ = Object.create($_); //#27702
        $k[$j++] = Infinity; //#27690
        $k[$j++] = $a([0, 0, 0, 0, 0, 0, 1]); //#27690
        for (var _BF = 0, _BG = 68; _BF < _BG; _BF++) { //#27690
            $k[$j++] = $a(7); //#27690
        } //#27690
        $_.pwr928 = $a(); //#27690
        for (var _BJ = 1; _BJ <= 68; _BJ += 1) { //#27701
            $_.j = _BJ; //#27693
            $_.v = 0; //#27694
            for (var _BK = 6; _BK >= 1; _BK -= 1) { //#27699
                $_.i = _BK; //#27696
                $_.v = $f(($get($get($_.pwr928, $_.j - 1), $_.i) * 2) + (~~($_.v / 928))); //#27697
                $put($get($_.pwr928, $_.j), $_.i, $_.v % 928); //#27698
            } //#27698
            $put($get($_.pwr928, $_.j), 0, $f(($get($get($_.pwr928, $_.j - 1), 0) * 2) + (~~($_.v / 928)))); //#27700
        } //#27700
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_gs1_cc.$ctx[id] = $_[id]); //#27700
        bwipp_gs1_cc.__27702__ = 1; //#27700
        $_ = Object.getPrototypeOf($_); //#27700
    } //#27700
    if ($_.ccversion == "a") { //#27744
        $k[$j++] = Infinity; //#27705
        for (var _Bg = 0, _Bh = 28; _Bg < _Bh; _Bg++) { //#27705
            $k[$j++] = 0; //#27705
        } //#27705
        $_.cws = $a(); //#27705
        $_.b = 0; //#27706
        $_.c = 0; //#27706
        for (;;) { //#27730
            if ($_.b == $_.bits.length) { //#27708
                break; //#27708
            } //#27708
            var _Bl = $_.bits; //#27709
            var _Bm = $_.b; //#27709
            var _Bn = $_.bits; //#27709
            var _Bo = $_.b; //#27709
            var _Bp = _Bn.length - _Bo; //#27709
            var _Bq = 69; //#27709
            if (69 > (_Bn.length - _Bo)) { //#27709
                var _ = _Bp; //#27709
                _Bp = _Bq; //#27709
                _Bq = _; //#27709
            } //#27709
            $_.bs = $geti(_Bl, _Bm, _Bq); //#27709
            $_.bsl = $_.bs.length; //#27710
            $_.cs = $geti($_.cws, $_.c, (~~($_.bsl / 10)) + 1); //#27711
            $_.csl = $_.cs.length; //#27712
            for (var _C0 = 0, _Bz = $_.bsl - 1; _C0 <= _Bz; _C0 += 1) { //#27722
                $_.i = _C0; //#27714
                for (var _C3 = 0, _C2 = $_.csl - 1; _C3 <= _C2; _C3 += 1) { //#27721
                    $_.j = _C3; //#27716
                    var _C4 = $_.cs; //#27717
                    var _C5 = $_.j; //#27717
                    $put(_C4, _C5, $f($get(_C4, _C5) + ($get($get($_.pwr928, $_.i), ($_.j + 7) - $_.csl) * $get($_.bs, ($_.bsl - $_.i) - 1)))); //#27720
                } //#27720
            } //#27720
            for (var _CI = $_.csl - 1; _CI >= 1; _CI -= 1) { //#27727
                $_.i = _CI; //#27724
                var _CJ = $_.cs; //#27725
                var _CK = $_.i; //#27725
                $put(_CJ, _CK - 1, $f($get(_CJ, _CK - 1) + (~~($get($_.cs, $_.i) / 928)))); //#27725
                var _CP = $_.cs; //#27726
                var _CQ = $_.i; //#27726
                $put(_CP, _CQ, $get(_CP, _CQ) % 928); //#27726
            } //#27726
            $_.b = $_.b + $_.bsl; //#27728
            $_.c = $_.c + $_.csl; //#27729
        } //#27729
        $_.cws = $geti($_.cws, 0, $_.c); //#27731
        $_.barcode = $s($_.cws.length * 4); //#27732
        for (var _Cd = 0, _Cc = $_.cws.length - 1; _Cd <= _Cc; _Cd += 1) { //#27738
            $_.i = _Cd; //#27734
            var _Cf = $strcpy($s(4), "^000"); //#27735
            var _Ck = $cvrs($s(4), $get($_.cws, $_.i), 10); //#27735
            $puti(_Cf, 4 - _Ck.length, _Ck); //#27736
            $puti($_.barcode, $_.i * 4, _Cf); //#27737
        } //#27737
        delete $_.options["parse"]; //#27739
        $put($_.options, "dontdraw", true); //#27740
        $put($_.options, "cca", true); //#27741
        $put($_.options, "columns", $_.cccolumns); //#27742
        $k[$j++] = 'args'; //#27743
        $k[$j++] = $_.barcode; //#27743
        $k[$j++] = $_.options; //#27743
        bwipp_micropdf417(); //#27743
        var _Cu = $k[--$j]; //#27743
        $_[$k[--$j]] = _Cu; //#27743
    } //#27743
    if ($_.ccversion == "b") { //#27758
        $_.barcode = $s(~~($_.bits.length / 8)); //#27747
        for (var _D1 = 0, _D0 = $_.barcode.length - 1; _D1 <= _D0; _D1 += 1) { //#27752
            $_.i = _D1; //#27749
            var _D4 = $geti($_.bits, $_.i * 8, 8); //#27750
            $k[$j++] = 0; //#27750
            for (var _D5 = 0, _D6 = _D4.length; _D5 < _D6; _D5++) { //#27750
                var _D8 = $k[--$j]; //#27750
                $k[$j++] = $f(_D8 + $get(_D4, _D5)) * 2; //#27750
            } //#27750
            $put($_.barcode, $_.i, ~~($k[--$j] / 2)); //#27751
        } //#27751
        delete $_.options["parse"]; //#27753
        $put($_.options, "dontdraw", true); //#27754
        $put($_.options, "ccb", true); //#27755
        $put($_.options, "columns", $_.cccolumns); //#27756
        $k[$j++] = 'args'; //#27757
        $k[$j++] = $_.barcode; //#27757
        $k[$j++] = $_.options; //#27757
        bwipp_micropdf417(); //#27757
        var _DJ = $k[--$j]; //#27757
        $_[$k[--$j]] = _DJ; //#27757
    } //#27757
    if ($_.ccversion == "c") { //#27773
        $_.barcode = $s(~~($_.bits.length / 8)); //#27761
        for (var _DQ = 0, _DP = $_.barcode.length - 1; _DQ <= _DP; _DQ += 1) { //#27766
            $_.i = _DQ; //#27763
            var _DT = $geti($_.bits, $_.i * 8, 8); //#27764
            $k[$j++] = 0; //#27764
            for (var _DU = 0, _DV = _DT.length; _DU < _DV; _DU++) { //#27764
                var _DX = $k[--$j]; //#27764
                $k[$j++] = $f(_DX + $get(_DT, _DU)) * 2; //#27764
            } //#27764
            $put($_.barcode, $_.i, ~~($k[--$j] / 2)); //#27765
        } //#27765
        delete $_.options["parse"]; //#27767
        $put($_.options, "dontdraw", true); //#27768
        $put($_.options, "ccc", true); //#27769
        $put($_.options, "columns", $_.cccolumns); //#27770
        $put($_.options, "eclevel", (~~(Math.log($_.eccws) / Math.log(2))) - 1); //#27771
        $k[$j++] = 'args'; //#27772
        $k[$j++] = $_.barcode; //#27772
        $k[$j++] = $_.options; //#27772
        bwipp_pdf417(); //#27772
        var _Dk = $k[--$j]; //#27772
        $_[$k[--$j]] = _Dk; //#27772
    } //#27772
    $k[$j++] = $_.args; //#27776
    if (!$_.dontdraw) { //#27776
        bwipp_renmatrix(); //#27776
    } //#27776
    $_ = Object.getPrototypeOf($_); //#27778
    $_ = Object.getPrototypeOf($_); //#27780
}

function bwipp_ean13composite() {
    $_ = Object.create($_); //#27812
    $_.dontdraw = false; //#27815
    $_.usematrix = false; //#27816
    $_.parse = false; //#27817
    $_.dontlint = false; //#27818
    $_.lintreqs = true; //#27819
    $k[$j++] = $_; //#27821
    bwipp_processoptions(); //#27821
    $_.options = $k[--$j]; //#27821
    $_.barcode = $k[--$j]; //#27822
    if ($_.dontdraw) { //#27824
        $_.usematrix = true; //#27824
    } //#27824
    $search($_.barcode, "|"); //#27827
    if ($k[--$j]) { //#27832
        $_.linear = $k[--$j]; //#27828
        $j--; //#27829
        $_.comp = $k[--$j]; //#27830
    } else { //#27832
        $j--; //#27832
        $k[$j++] = 'bwipp.missingCompositeComponent#27832'; //#27832
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#27832
        bwipp_raiseerror(); //#27832
    } //#27832
    $put($_.options, "lintype", "ean13"); //#27835
    $put($_.options, "inkspread", "0"); //#27836
    $put($_.options, "dontdraw", true); //#27837
    $put($_.options, "dontlint", true); //#27838
    var _C = $s($_.comp.length + 18); //#27841
    $puti(_C, 0, "(01)00000000000000"); //#27842
    $puti(_C, 18, $_.comp); //#27843
    $k[$j++] = _C; //#27844
    $k[$j++] = 'ai'; //#27844
    bwipp_gs1process(); //#27844
    $j -= 3; //#27844
    $k[$j++] = $_.linear; //#27847
    $k[$j++] = $_.options; //#27847
    bwipp_ean13(); //#27847
    if (!$_.usematrix) { //#27937
        $$.save(); //#27849
        bwipp_renlinear(); //#27851
        $$.rmoveto(-1, 72); //#27854
        $k[$j++] = Infinity; //#27865
        $k[$j++] = Infinity; //#27859
        $k[$j++] = 0; //#27857
        $k[$j++] = 1; //#27857
        for (var _H = 0, _I = 93; _H < _I; _H++) { //#27857
            $k[$j++] = 0; //#27857
        } //#27857
        $k[$j++] = 1; //#27858
        $k[$j++] = 0; //#27858
        $k[$j++] = 1; //#27858
        $k[$j++] = 0; //#27858
        for (var _J = 0, _K = 93; _J < _K; _J++) { //#27858
            $k[$j++] = 0; //#27858
        } //#27858
        $k[$j++] = 0; //#27859
        $k[$j++] = 1; //#27859
        $k[$j++] = 0; //#27859
        $k[$j++] = 1; //#27859
        for (var _L = 0, _M = 93; _L < _M; _L++) { //#27859
            $k[$j++] = 0; //#27859
        } //#27859
        $k[$j++] = 1; //#27859
        $k[$j++] = 0; //#27859
        var _N = $a(); //#27859
        $k[$j++] = 'ren'; //#27865
        $k[$j++] = bwipp_renmatrix; //#27865
        $k[$j++] = 'pixs'; //#27865
        $k[$j++] = _N; //#27865
        $k[$j++] = 'pixx'; //#27865
        $k[$j++] = 97; //#27865
        $k[$j++] = 'pixy'; //#27865
        $k[$j++] = 3; //#27865
        $k[$j++] = 'height'; //#27865
        $k[$j++] = 6 / 72; //#27865
        $k[$j++] = 'width'; //#27865
        $k[$j++] = 97 / 72; //#27865
        $k[$j++] = 'opt'; //#27865
        $k[$j++] = $_.options; //#27865
        var _P = $d(); //#27865
        $k[$j++] = _P; //#27866
        bwipp_renmatrix(); //#27866
        $$.rmoveto(-2, 6); //#27869
        $k[$j++] = $_.comp; //#27869
        $k[$j++] = $_.options; //#27869
        bwipp_gs1_cc(); //#27869
        bwipp_renmatrix(); //#27869
        $$.restore(); //#27871
    } else { //#27937
        $_.linsym = $k[--$j]; //#27873
        $_.sbs = $get($_.linsym, 'sbs'); //#27874
        $_.bhs = $get($_.linsym, 'bhs'); //#27875
        $_.bbs = $get($_.linsym, 'bbs'); //#27876
        $k[$j++] = 'linwidth'; //#27877
        $k[$j++] = 0; //#27877
        $forall($_.sbs, function() { //#27877
            var _a = $k[--$j]; //#27877
            var _b = $k[--$j]; //#27877
            $k[$j++] = $f(_b + $cvi(_a)); //#27877
        }); //#27877
        var _c = $k[--$j]; //#27877
        $_[$k[--$j]] = _c; //#27877
        $k[$j++] = 'compsym'; //#27879
        $k[$j++] = $_.comp; //#27879
        $k[$j++] = $_.options; //#27879
        bwipp_gs1_cc(); //#27879
        var _g = $k[--$j]; //#27879
        $_[$k[--$j]] = _g; //#27879
        $_.ccpixs = $get($_.compsym, 'pixs'); //#27880
        $_.ccpixx = $get($_.compsym, 'pixx'); //#27881
        $k[$j++] = Infinity; //#27883
        for (var _n = 0, _o = $f($_.ccpixx - 97); _n < _o; _n++) { //#27883
            $k[$j++] = 0; //#27883
        } //#27883
        $_.linpad = $a(); //#27883
        $_.diff = $f(($f($f($_.linwidth + $_.linpad.length) + 2)) - $_.ccpixx); //#27885
        if ($_.diff > 0) { //#27891
            $k[$j++] = Infinity; //#27887
            for (var _v = 0, _w = $_.diff; _v < _w; _v++) { //#27887
                $k[$j++] = 0; //#27887
            } //#27887
            $_.ccrpad = $a(); //#27887
            $_.pixx = $f($_.ccpixx + $_.diff); //#27888
        } else { //#27891
            $_.ccrpad = $a(0); //#27890
            $_.pixx = $_.ccpixx; //#27891
        } //#27891
        $k[$j++] = Infinity; //#27919
        for (var _15 = 0, _16 = $_.ccpixx, _14 = $_.ccpixs.length - 1; _16 < 0 ? _15 >= _14 : _15 <= _14; _15 += _16) { //#27898
            $_.i = _15; //#27896
            for (var _17 = 0, _18 = 2; _17 < _18; _17++) { //#27897
                $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#27897
                $aload($_.ccrpad); //#27897
            } //#27897
        } //#27897
        for (var _1E = 0, _1F = 2; _1E < _1F; _1E++) { //#27899
            $aload($_.linpad); //#27899
            $k[$j++] = 0; //#27899
            $k[$j++] = 1; //#27899
            for (var _1H = 0, _1I = 93; _1H < _1I; _1H++) { //#27899
                $k[$j++] = 0; //#27899
            } //#27899
            $k[$j++] = 1; //#27899
            $k[$j++] = 0; //#27899
            $aload($_.ccrpad); //#27899
        } //#27899
        for (var _1K = 0, _1L = 2; _1K < _1L; _1K++) { //#27900
            $aload($_.linpad); //#27900
            $k[$j++] = 1; //#27900
            $k[$j++] = 0; //#27900
            for (var _1N = 0, _1O = 93; _1N < _1O; _1N++) { //#27900
                $k[$j++] = 0; //#27900
            } //#27900
            $k[$j++] = 0; //#27900
            $k[$j++] = 1; //#27900
            $aload($_.ccrpad); //#27900
        } //#27900
        for (var _1Q = 0, _1R = 2; _1Q < _1R; _1Q++) { //#27901
            $aload($_.linpad); //#27901
            $k[$j++] = 0; //#27901
            $k[$j++] = 1; //#27901
            for (var _1T = 0, _1U = 93; _1T < _1U; _1T++) { //#27901
                $k[$j++] = 0; //#27901
            } //#27901
            $k[$j++] = 1; //#27901
            $k[$j++] = 0; //#27901
            $aload($_.ccrpad); //#27901
        } //#27901
        for (var _1W = 71; _1W >= 0; _1W -= 1) { //#27920
            $_.y = _1W; //#27903
            $aload($_.linpad); //#27904
            $k[$j++] = 0; //#27918
            for (var _1a = 0, _1Z = $_.sbs.length - 1; _1a <= _1Z; _1a += 1) { //#27918
                $_.i = _1a; //#27907
                if (($_.i % 2) == 0) { //#27916
                    var _1f = $get($_.bbs, ~~($_.i / 2)) * 72; //#27910
                    if ((_1f > $_.y) || (($f(_1f + ($get($_.bhs, ~~($_.i / 2)) * 72))) < $_.y)) { //#27913
                        for (var _1o = 0, _1p = $cvi($get($_.sbs, $_.i)); _1o < _1p; _1o++) { //#27911
                            $k[$j++] = 0; //#27911
                        } //#27911
                    } else { //#27913
                        for (var _1t = 0, _1u = $cvi($get($_.sbs, $_.i)); _1t < _1u; _1t++) { //#27913
                            $k[$j++] = 1; //#27913
                        } //#27913
                    } //#27913
                } else { //#27916
                    for (var _1y = 0, _1z = $cvi($get($_.sbs, $_.i)); _1y < _1z; _1y++) { //#27916
                        $k[$j++] = 0; //#27916
                    } //#27916
                } //#27916
            } //#27916
            $k[$j++] = 0; //#27919
        } //#27919
        $_.pixs = $a(); //#27919
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#27923
        var _29 = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#27931
        $k[$j++] = _29; //#27938
        if (!$_.dontdraw) { //#27938
            $$.save(); //#27935
            bwipp_renmatrix(); //#27936
            $$.restore(); //#27937
        } //#27937
    } //#27937
    $_ = Object.getPrototypeOf($_); //#27941
}

function bwipp_ean8composite() {
    $_ = Object.create($_); //#27973
    $_.dontdraw = false; //#27976
    $_.usematrix = false; //#27977
    $_.parse = false; //#27978
    $_.dontlint = false; //#27979
    $_.lintreqs = true; //#27980
    $k[$j++] = $_; //#27982
    bwipp_processoptions(); //#27982
    $_.options = $k[--$j]; //#27982
    $_.barcode = $k[--$j]; //#27983
    if ($_.dontdraw) { //#27985
        $_.usematrix = true; //#27985
    } //#27985
    $search($_.barcode, "|"); //#27988
    if ($k[--$j]) { //#27993
        $_.linear = $k[--$j]; //#27989
        $j--; //#27990
        $_.comp = $k[--$j]; //#27991
    } else { //#27993
        $j--; //#27993
        $k[$j++] = 'bwipp.missingCompositeComponent#27993'; //#27993
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#27993
        bwipp_raiseerror(); //#27993
    } //#27993
    $put($_.options, "lintype", "ean8"); //#27997
    $put($_.options, "inkspread", "0"); //#27998
    $put($_.options, "dontdraw", true); //#27999
    $put($_.options, "dontlint", true); //#28000
    var _C = $s($_.comp.length + 18); //#28003
    $puti(_C, 0, "(01)00000000000000"); //#28004
    $puti(_C, 18, $_.comp); //#28005
    $k[$j++] = _C; //#28006
    $k[$j++] = 'ai'; //#28006
    bwipp_gs1process(); //#28006
    $j -= 3; //#28006
    $k[$j++] = $_.linear; //#28009
    $k[$j++] = $_.options; //#28009
    bwipp_ean8(); //#28009
    if (!$_.usematrix) { //#28101
        $$.save(); //#28011
        bwipp_renlinear(); //#28013
        $$.rmoveto(-1, 72); //#28016
        $k[$j++] = Infinity; //#28027
        $k[$j++] = Infinity; //#28021
        $k[$j++] = 0; //#28019
        $k[$j++] = 1; //#28019
        for (var _H = 0, _I = 65; _H < _I; _H++) { //#28019
            $k[$j++] = 0; //#28019
        } //#28019
        $k[$j++] = 1; //#28020
        $k[$j++] = 0; //#28020
        $k[$j++] = 1; //#28020
        $k[$j++] = 0; //#28020
        for (var _J = 0, _K = 65; _J < _K; _J++) { //#28020
            $k[$j++] = 0; //#28020
        } //#28020
        $k[$j++] = 0; //#28021
        $k[$j++] = 1; //#28021
        $k[$j++] = 0; //#28021
        $k[$j++] = 1; //#28021
        for (var _L = 0, _M = 65; _L < _M; _L++) { //#28021
            $k[$j++] = 0; //#28021
        } //#28021
        $k[$j++] = 1; //#28021
        $k[$j++] = 0; //#28021
        var _N = $a(); //#28021
        $k[$j++] = 'ren'; //#28027
        $k[$j++] = bwipp_renmatrix; //#28027
        $k[$j++] = 'pixs'; //#28027
        $k[$j++] = _N; //#28027
        $k[$j++] = 'pixx'; //#28027
        $k[$j++] = 69; //#28027
        $k[$j++] = 'pixy'; //#28027
        $k[$j++] = 3; //#28027
        $k[$j++] = 'height'; //#28027
        $k[$j++] = 6 / 72; //#28027
        $k[$j++] = 'width'; //#28027
        $k[$j++] = 69 / 72; //#28027
        $k[$j++] = 'opt'; //#28027
        $k[$j++] = $_.options; //#28027
        var _P = $d(); //#28027
        $k[$j++] = _P; //#28028
        bwipp_renmatrix(); //#28028
        $k[$j++] = $_.comp; //#28031
        $k[$j++] = $_.options; //#28031
        bwipp_gs1_cc(); //#28031
        var _S = $k[--$j]; //#28032
        $$.rmoveto($f(69 - $get(_S, "pixx")), 6); //#28032
        $k[$j++] = _S; //#28033
        bwipp_renmatrix(); //#28033
        $$.restore(); //#28035
    } else { //#28101
        $_.linsym = $k[--$j]; //#28037
        $_.sbs = $get($_.linsym, 'sbs'); //#28038
        $_.bhs = $get($_.linsym, 'bhs'); //#28039
        $_.bbs = $get($_.linsym, 'bbs'); //#28040
        $k[$j++] = 'linwidth'; //#28041
        $k[$j++] = 0; //#28041
        $forall($_.sbs, function() { //#28041
            var _c = $k[--$j]; //#28041
            var _d = $k[--$j]; //#28041
            $k[$j++] = $f(_d + $cvi(_c)); //#28041
        }); //#28041
        var _e = $k[--$j]; //#28041
        $_[$k[--$j]] = _e; //#28041
        var _g = $_.comp; //#28043
        $k[$j++] = 'compsym'; //#28043
        $k[$j++] = _g; //#28043
        $k[$j++] = $_.options; //#28043
        bwipp_gs1_cc(); //#28043
        var _i = $k[--$j]; //#28043
        $_[$k[--$j]] = _i; //#28043
        $_.ccpixs = $get($_.compsym, 'pixs'); //#28044
        $_.ccpixx = $get($_.compsym, 'pixx'); //#28045
        $k[$j++] = Infinity; //#28047
        for (var _p = 0, _q = $f($_.ccpixx - 69); _p < _q; _p++) { //#28047
            $k[$j++] = 0; //#28047
        } //#28047
        $_.linpad = $a(); //#28047
        $_.diff = $f(($f($f($_.linwidth + $_.linpad.length) + 2)) - $_.ccpixx); //#28049
        if ($_.diff > 0) { //#28055
            $k[$j++] = Infinity; //#28051
            for (var _x = 0, _y = $_.diff; _x < _y; _x++) { //#28051
                $k[$j++] = 0; //#28051
            } //#28051
            $_.ccrpad = $a(); //#28051
            $_.pixx = $f($_.ccpixx + $_.diff); //#28052
        } else { //#28055
            $_.ccrpad = $a(0); //#28054
            $_.pixx = $_.ccpixx; //#28055
        } //#28055
        $k[$j++] = Infinity; //#28083
        for (var _17 = 0, _18 = $_.ccpixx, _16 = $_.ccpixs.length - 1; _18 < 0 ? _17 >= _16 : _17 <= _16; _17 += _18) { //#28062
            $_.i = _17; //#28060
            for (var _19 = 0, _1A = 2; _19 < _1A; _19++) { //#28061
                $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#28061
                $aload($_.ccrpad); //#28061
            } //#28061
        } //#28061
        for (var _1G = 0, _1H = 2; _1G < _1H; _1G++) { //#28063
            $aload($_.linpad); //#28063
            $k[$j++] = 0; //#28063
            $k[$j++] = 1; //#28063
            for (var _1J = 0, _1K = 65; _1J < _1K; _1J++) { //#28063
                $k[$j++] = 0; //#28063
            } //#28063
            $k[$j++] = 1; //#28063
            $k[$j++] = 0; //#28063
            $aload($_.ccrpad); //#28063
        } //#28063
        for (var _1M = 0, _1N = 2; _1M < _1N; _1M++) { //#28064
            $aload($_.linpad); //#28064
            $k[$j++] = 1; //#28064
            $k[$j++] = 0; //#28064
            for (var _1P = 0, _1Q = 65; _1P < _1Q; _1P++) { //#28064
                $k[$j++] = 0; //#28064
            } //#28064
            $k[$j++] = 0; //#28064
            $k[$j++] = 1; //#28064
            $aload($_.ccrpad); //#28064
        } //#28064
        for (var _1S = 0, _1T = 2; _1S < _1T; _1S++) { //#28065
            $aload($_.linpad); //#28065
            $k[$j++] = 0; //#28065
            $k[$j++] = 1; //#28065
            for (var _1V = 0, _1W = 65; _1V < _1W; _1V++) { //#28065
                $k[$j++] = 0; //#28065
            } //#28065
            $k[$j++] = 1; //#28065
            $k[$j++] = 0; //#28065
            $aload($_.ccrpad); //#28065
        } //#28065
        for (var _1Y = 71; _1Y >= 0; _1Y -= 1) { //#28084
            $_.y = _1Y; //#28067
            $aload($_.linpad); //#28068
            $k[$j++] = 0; //#28082
            for (var _1c = 0, _1b = $_.sbs.length - 1; _1c <= _1b; _1c += 1) { //#28082
                $_.i = _1c; //#28071
                if (($_.i % 2) == 0) { //#28080
                    var _1h = $get($_.bbs, ~~($_.i / 2)) * 72; //#28074
                    if ((_1h > $_.y) || (($f(_1h + ($get($_.bhs, ~~($_.i / 2)) * 72))) < $_.y)) { //#28077
                        for (var _1q = 0, _1r = $cvi($get($_.sbs, $_.i)); _1q < _1r; _1q++) { //#28075
                            $k[$j++] = 0; //#28075
                        } //#28075
                    } else { //#28077
                        for (var _1v = 0, _1w = $cvi($get($_.sbs, $_.i)); _1v < _1w; _1v++) { //#28077
                            $k[$j++] = 1; //#28077
                        } //#28077
                    } //#28077
                } else { //#28080
                    for (var _20 = 0, _21 = $cvi($get($_.sbs, $_.i)); _20 < _21; _20++) { //#28080
                        $k[$j++] = 0; //#28080
                    } //#28080
                } //#28080
            } //#28080
            $k[$j++] = 0; //#28083
        } //#28083
        $_.pixs = $a(); //#28083
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#28087
        var _2B = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#28095
        $k[$j++] = _2B; //#28102
        if (!$_.dontdraw) { //#28102
            $$.save(); //#28099
            bwipp_renmatrix(); //#28100
            $$.restore(); //#28101
        } //#28101
    } //#28101
    $_ = Object.getPrototypeOf($_); //#28105
}

function bwipp_upcacomposite() {
    $_ = Object.create($_); //#28137
    $_.dontdraw = false; //#28140
    $_.usematrix = false; //#28141
    $_.parse = false; //#28142
    $_.dontlint = false; //#28143
    $_.lintreqs = true; //#28144
    $k[$j++] = $_; //#28146
    bwipp_processoptions(); //#28146
    $_.options = $k[--$j]; //#28146
    $_.barcode = $k[--$j]; //#28147
    if ($_.dontdraw) { //#28149
        $_.usematrix = true; //#28149
    } //#28149
    $search($_.barcode, "|"); //#28152
    if ($k[--$j]) { //#28157
        $_.linear = $k[--$j]; //#28153
        $j--; //#28154
        $_.comp = $k[--$j]; //#28155
    } else { //#28157
        $j--; //#28157
        $k[$j++] = 'bwipp.missingCompositeComponent#28157'; //#28157
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#28157
        bwipp_raiseerror(); //#28157
    } //#28157
    $put($_.options, "lintype", "ean13"); //#28160
    $put($_.options, "inkspread", "0"); //#28161
    $put($_.options, "dontdraw", true); //#28162
    $put($_.options, "dontlint", true); //#28163
    var _C = $s($_.comp.length + 18); //#28166
    $puti(_C, 0, "(01)00000000000000"); //#28167
    $puti(_C, 18, $_.comp); //#28168
    $k[$j++] = _C; //#28169
    $k[$j++] = 'ai'; //#28169
    bwipp_gs1process(); //#28169
    $j -= 3; //#28169
    $k[$j++] = $_.linear; //#28172
    $k[$j++] = $_.options; //#28172
    bwipp_upca(); //#28172
    if (!$_.usematrix) { //#28262
        $$.save(); //#28174
        bwipp_renlinear(); //#28176
        $$.rmoveto(-1, 72); //#28179
        $k[$j++] = Infinity; //#28190
        $k[$j++] = Infinity; //#28184
        $k[$j++] = 0; //#28182
        $k[$j++] = 1; //#28182
        for (var _H = 0, _I = 93; _H < _I; _H++) { //#28182
            $k[$j++] = 0; //#28182
        } //#28182
        $k[$j++] = 1; //#28183
        $k[$j++] = 0; //#28183
        $k[$j++] = 1; //#28183
        $k[$j++] = 0; //#28183
        for (var _J = 0, _K = 93; _J < _K; _J++) { //#28183
            $k[$j++] = 0; //#28183
        } //#28183
        $k[$j++] = 0; //#28184
        $k[$j++] = 1; //#28184
        $k[$j++] = 0; //#28184
        $k[$j++] = 1; //#28184
        for (var _L = 0, _M = 93; _L < _M; _L++) { //#28184
            $k[$j++] = 0; //#28184
        } //#28184
        $k[$j++] = 1; //#28184
        $k[$j++] = 0; //#28184
        var _N = $a(); //#28184
        $k[$j++] = 'ren'; //#28190
        $k[$j++] = bwipp_renmatrix; //#28190
        $k[$j++] = 'pixs'; //#28190
        $k[$j++] = _N; //#28190
        $k[$j++] = 'pixx'; //#28190
        $k[$j++] = 97; //#28190
        $k[$j++] = 'pixy'; //#28190
        $k[$j++] = 3; //#28190
        $k[$j++] = 'height'; //#28190
        $k[$j++] = 6 / 72; //#28190
        $k[$j++] = 'width'; //#28190
        $k[$j++] = 97 / 72; //#28190
        $k[$j++] = 'opt'; //#28190
        $k[$j++] = $_.options; //#28190
        var _P = $d(); //#28190
        $k[$j++] = _P; //#28191
        bwipp_renmatrix(); //#28191
        $$.rmoveto(-2, 6); //#28194
        $k[$j++] = $_.comp; //#28194
        $k[$j++] = $_.options; //#28194
        bwipp_gs1_cc(); //#28194
        bwipp_renmatrix(); //#28194
        $$.restore(); //#28196
    } else { //#28262
        $_.linsym = $k[--$j]; //#28198
        $_.sbs = $get($_.linsym, 'sbs'); //#28199
        $_.bhs = $get($_.linsym, 'bhs'); //#28200
        $_.bbs = $get($_.linsym, 'bbs'); //#28201
        $k[$j++] = 'linwidth'; //#28202
        $k[$j++] = 0; //#28202
        $forall($_.sbs, function() { //#28202
            var _a = $k[--$j]; //#28202
            var _b = $k[--$j]; //#28202
            $k[$j++] = $f(_b + $cvi(_a)); //#28202
        }); //#28202
        var _c = $k[--$j]; //#28202
        $_[$k[--$j]] = _c; //#28202
        $k[$j++] = 'compsym'; //#28204
        $k[$j++] = $_.comp; //#28204
        $k[$j++] = $_.options; //#28204
        bwipp_gs1_cc(); //#28204
        var _g = $k[--$j]; //#28204
        $_[$k[--$j]] = _g; //#28204
        $_.ccpixs = $get($_.compsym, 'pixs'); //#28205
        $_.ccpixx = $get($_.compsym, 'pixx'); //#28206
        $k[$j++] = Infinity; //#28208
        for (var _n = 0, _o = $f($_.ccpixx - 97); _n < _o; _n++) { //#28208
            $k[$j++] = 0; //#28208
        } //#28208
        $_.linpad = $a(); //#28208
        $_.diff = $f(($f($f($_.linwidth + $_.linpad.length) + 2)) - $_.ccpixx); //#28210
        if ($_.diff > 0) { //#28216
            $k[$j++] = Infinity; //#28212
            for (var _v = 0, _w = $_.diff; _v < _w; _v++) { //#28212
                $k[$j++] = 0; //#28212
            } //#28212
            $_.ccrpad = $a(); //#28212
            $_.pixx = $f($_.ccpixx + $_.diff); //#28213
        } else { //#28216
            $_.ccrpad = $a(0); //#28215
            $_.pixx = $_.ccpixx; //#28216
        } //#28216
        $k[$j++] = Infinity; //#28244
        for (var _15 = 0, _16 = $_.ccpixx, _14 = $_.ccpixs.length - 1; _16 < 0 ? _15 >= _14 : _15 <= _14; _15 += _16) { //#28223
            $_.i = _15; //#28221
            for (var _17 = 0, _18 = 2; _17 < _18; _17++) { //#28222
                $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#28222
                $aload($_.ccrpad); //#28222
            } //#28222
        } //#28222
        for (var _1E = 0, _1F = 2; _1E < _1F; _1E++) { //#28224
            $aload($_.linpad); //#28224
            $k[$j++] = 0; //#28224
            $k[$j++] = 1; //#28224
            for (var _1H = 0, _1I = 93; _1H < _1I; _1H++) { //#28224
                $k[$j++] = 0; //#28224
            } //#28224
            $k[$j++] = 1; //#28224
            $k[$j++] = 0; //#28224
            $aload($_.ccrpad); //#28224
        } //#28224
        for (var _1K = 0, _1L = 2; _1K < _1L; _1K++) { //#28225
            $aload($_.linpad); //#28225
            $k[$j++] = 1; //#28225
            $k[$j++] = 0; //#28225
            for (var _1N = 0, _1O = 93; _1N < _1O; _1N++) { //#28225
                $k[$j++] = 0; //#28225
            } //#28225
            $k[$j++] = 0; //#28225
            $k[$j++] = 1; //#28225
            $aload($_.ccrpad); //#28225
        } //#28225
        for (var _1Q = 0, _1R = 2; _1Q < _1R; _1Q++) { //#28226
            $aload($_.linpad); //#28226
            $k[$j++] = 0; //#28226
            $k[$j++] = 1; //#28226
            for (var _1T = 0, _1U = 93; _1T < _1U; _1T++) { //#28226
                $k[$j++] = 0; //#28226
            } //#28226
            $k[$j++] = 1; //#28226
            $k[$j++] = 0; //#28226
            $aload($_.ccrpad); //#28226
        } //#28226
        for (var _1W = 71; _1W >= 0; _1W -= 1) { //#28245
            $_.y = _1W; //#28228
            $aload($_.linpad); //#28229
            $k[$j++] = 0; //#28243
            for (var _1a = 0, _1Z = $_.sbs.length - 1; _1a <= _1Z; _1a += 1) { //#28243
                $_.i = _1a; //#28232
                if (($_.i % 2) == 0) { //#28241
                    var _1f = $get($_.bbs, ~~($_.i / 2)) * 72; //#28235
                    if ((_1f > $_.y) || (($f(_1f + ($get($_.bhs, ~~($_.i / 2)) * 72))) < $_.y)) { //#28238
                        for (var _1o = 0, _1p = $cvi($get($_.sbs, $_.i)); _1o < _1p; _1o++) { //#28236
                            $k[$j++] = 0; //#28236
                        } //#28236
                    } else { //#28238
                        for (var _1t = 0, _1u = $cvi($get($_.sbs, $_.i)); _1t < _1u; _1t++) { //#28238
                            $k[$j++] = 1; //#28238
                        } //#28238
                    } //#28238
                } else { //#28241
                    for (var _1y = 0, _1z = $cvi($get($_.sbs, $_.i)); _1y < _1z; _1y++) { //#28241
                        $k[$j++] = 0; //#28241
                    } //#28241
                } //#28241
            } //#28241
            $k[$j++] = 0; //#28244
        } //#28244
        $_.pixs = $a(); //#28244
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#28248
        var _29 = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#28256
        $k[$j++] = _29; //#28263
        if (!$_.dontdraw) { //#28263
            $$.save(); //#28260
            bwipp_renmatrix(); //#28261
            $$.restore(); //#28262
        } //#28262
    } //#28262
    $_ = Object.getPrototypeOf($_); //#28266
}

function bwipp_upcecomposite() {
    $_ = Object.create($_); //#28298
    $_.dontdraw = false; //#28301
    $_.usematrix = false; //#28302
    $_.parse = false; //#28303
    $_.dontlint = false; //#28304
    $_.lintreqs = true; //#28305
    $k[$j++] = $_; //#28307
    bwipp_processoptions(); //#28307
    $_.options = $k[--$j]; //#28307
    $_.barcode = $k[--$j]; //#28308
    if ($_.dontdraw) { //#28310
        $_.usematrix = true; //#28310
    } //#28310
    $search($_.barcode, "|"); //#28313
    if ($k[--$j]) { //#28318
        $_.linear = $k[--$j]; //#28314
        $j--; //#28315
        $_.comp = $k[--$j]; //#28316
    } else { //#28318
        $j--; //#28318
        $k[$j++] = 'bwipp.missingCompositeComponent#28318'; //#28318
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#28318
        bwipp_raiseerror(); //#28318
    } //#28318
    $put($_.options, "lintype", "upce"); //#28321
    $put($_.options, "inkspread", "0"); //#28322
    $put($_.options, "dontdraw", true); //#28323
    $put($_.options, "dontlint", true); //#28324
    var _C = $s($_.comp.length + 18); //#28327
    $puti(_C, 0, "(01)00000000000000"); //#28328
    $puti(_C, 18, $_.comp); //#28329
    $k[$j++] = _C; //#28330
    $k[$j++] = 'ai'; //#28330
    bwipp_gs1process(); //#28330
    $j -= 3; //#28330
    $k[$j++] = $_.linear; //#28333
    $k[$j++] = $_.options; //#28333
    bwipp_upce(); //#28333
    if (!$_.usematrix) { //#28423
        $$.save(); //#28335
        bwipp_renlinear(); //#28337
        $$.rmoveto(-1, 72); //#28340
        $k[$j++] = Infinity; //#28351
        $k[$j++] = Infinity; //#28345
        $k[$j++] = 0; //#28343
        $k[$j++] = 1; //#28343
        for (var _H = 0, _I = 49; _H < _I; _H++) { //#28343
            $k[$j++] = 0; //#28343
        } //#28343
        $k[$j++] = 1; //#28344
        $k[$j++] = 0; //#28344
        $k[$j++] = 1; //#28344
        $k[$j++] = 0; //#28344
        for (var _J = 0, _K = 49; _J < _K; _J++) { //#28344
            $k[$j++] = 0; //#28344
        } //#28344
        $k[$j++] = 0; //#28345
        $k[$j++] = 1; //#28345
        $k[$j++] = 0; //#28345
        $k[$j++] = 1; //#28345
        for (var _L = 0, _M = 49; _L < _M; _L++) { //#28345
            $k[$j++] = 0; //#28345
        } //#28345
        $k[$j++] = 1; //#28345
        $k[$j++] = 0; //#28345
        var _N = $a(); //#28345
        $k[$j++] = 'ren'; //#28351
        $k[$j++] = bwipp_renmatrix; //#28351
        $k[$j++] = 'pixs'; //#28351
        $k[$j++] = _N; //#28351
        $k[$j++] = 'pixx'; //#28351
        $k[$j++] = 53; //#28351
        $k[$j++] = 'pixy'; //#28351
        $k[$j++] = 3; //#28351
        $k[$j++] = 'height'; //#28351
        $k[$j++] = 6 / 72; //#28351
        $k[$j++] = 'width'; //#28351
        $k[$j++] = 53 / 72; //#28351
        $k[$j++] = 'opt'; //#28351
        $k[$j++] = $_.options; //#28351
        var _P = $d(); //#28351
        $k[$j++] = _P; //#28352
        bwipp_renmatrix(); //#28352
        $$.rmoveto(-2, 6); //#28355
        $k[$j++] = $_.comp; //#28355
        $k[$j++] = $_.options; //#28355
        bwipp_gs1_cc(); //#28355
        bwipp_renmatrix(); //#28355
        $$.restore(); //#28357
    } else { //#28423
        $_.linsym = $k[--$j]; //#28359
        $_.sbs = $get($_.linsym, 'sbs'); //#28360
        $_.bhs = $get($_.linsym, 'bhs'); //#28361
        $_.bbs = $get($_.linsym, 'bbs'); //#28362
        $k[$j++] = 'linwidth'; //#28363
        $k[$j++] = 0; //#28363
        $forall($_.sbs, function() { //#28363
            var _a = $k[--$j]; //#28363
            var _b = $k[--$j]; //#28363
            $k[$j++] = $f(_b + $cvi(_a)); //#28363
        }); //#28363
        var _c = $k[--$j]; //#28363
        $_[$k[--$j]] = _c; //#28363
        $k[$j++] = 'compsym'; //#28365
        $k[$j++] = $_.comp; //#28365
        $k[$j++] = $_.options; //#28365
        bwipp_gs1_cc(); //#28365
        var _g = $k[--$j]; //#28365
        $_[$k[--$j]] = _g; //#28365
        $_.ccpixs = $get($_.compsym, 'pixs'); //#28366
        $_.ccpixx = $get($_.compsym, 'pixx'); //#28367
        $k[$j++] = Infinity; //#28369
        for (var _n = 0, _o = $f($_.ccpixx - 53); _n < _o; _n++) { //#28369
            $k[$j++] = 0; //#28369
        } //#28369
        $_.linpad = $a(); //#28369
        $_.diff = $f(($f($f($_.linwidth + $_.linpad.length) + 2)) - $_.ccpixx); //#28371
        if ($_.diff > 0) { //#28377
            $k[$j++] = Infinity; //#28373
            for (var _v = 0, _w = $_.diff; _v < _w; _v++) { //#28373
                $k[$j++] = 0; //#28373
            } //#28373
            $_.ccrpad = $a(); //#28373
            $_.pixx = $f($_.ccpixx + $_.diff); //#28374
        } else { //#28377
            $_.ccrpad = $a(0); //#28376
            $_.pixx = $_.ccpixx; //#28377
        } //#28377
        $k[$j++] = Infinity; //#28405
        for (var _15 = 0, _16 = $_.ccpixx, _14 = $_.ccpixs.length - 1; _16 < 0 ? _15 >= _14 : _15 <= _14; _15 += _16) { //#28384
            $_.i = _15; //#28382
            for (var _17 = 0, _18 = 2; _17 < _18; _17++) { //#28383
                $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#28383
                $aload($_.ccrpad); //#28383
            } //#28383
        } //#28383
        for (var _1E = 0, _1F = 2; _1E < _1F; _1E++) { //#28385
            $aload($_.linpad); //#28385
            $k[$j++] = 0; //#28385
            $k[$j++] = 1; //#28385
            for (var _1H = 0, _1I = 49; _1H < _1I; _1H++) { //#28385
                $k[$j++] = 0; //#28385
            } //#28385
            $k[$j++] = 1; //#28385
            $k[$j++] = 0; //#28385
            $aload($_.ccrpad); //#28385
        } //#28385
        for (var _1K = 0, _1L = 2; _1K < _1L; _1K++) { //#28386
            $aload($_.linpad); //#28386
            $k[$j++] = 1; //#28386
            $k[$j++] = 0; //#28386
            for (var _1N = 0, _1O = 49; _1N < _1O; _1N++) { //#28386
                $k[$j++] = 0; //#28386
            } //#28386
            $k[$j++] = 0; //#28386
            $k[$j++] = 1; //#28386
            $aload($_.ccrpad); //#28386
        } //#28386
        for (var _1Q = 0, _1R = 2; _1Q < _1R; _1Q++) { //#28387
            $aload($_.linpad); //#28387
            $k[$j++] = 0; //#28387
            $k[$j++] = 1; //#28387
            for (var _1T = 0, _1U = 49; _1T < _1U; _1T++) { //#28387
                $k[$j++] = 0; //#28387
            } //#28387
            $k[$j++] = 1; //#28387
            $k[$j++] = 0; //#28387
            $aload($_.ccrpad); //#28387
        } //#28387
        for (var _1W = 71; _1W >= 0; _1W -= 1) { //#28406
            $_.y = _1W; //#28389
            $aload($_.linpad); //#28390
            $k[$j++] = 0; //#28404
            for (var _1a = 0, _1Z = $_.sbs.length - 1; _1a <= _1Z; _1a += 1) { //#28404
                $_.i = _1a; //#28393
                if (($_.i % 2) == 0) { //#28402
                    var _1f = $get($_.bbs, ~~($_.i / 2)) * 72; //#28396
                    if ((_1f > $_.y) || (($f(_1f + ($get($_.bhs, ~~($_.i / 2)) * 72))) < $_.y)) { //#28399
                        for (var _1o = 0, _1p = $cvi($get($_.sbs, $_.i)); _1o < _1p; _1o++) { //#28397
                            $k[$j++] = 0; //#28397
                        } //#28397
                    } else { //#28399
                        for (var _1t = 0, _1u = $cvi($get($_.sbs, $_.i)); _1t < _1u; _1t++) { //#28399
                            $k[$j++] = 1; //#28399
                        } //#28399
                    } //#28399
                } else { //#28402
                    for (var _1y = 0, _1z = $cvi($get($_.sbs, $_.i)); _1y < _1z; _1y++) { //#28402
                        $k[$j++] = 0; //#28402
                    } //#28402
                } //#28402
            } //#28402
            $k[$j++] = 0; //#28405
        } //#28405
        $_.pixs = $a(); //#28405
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#28409
        var _29 = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#28417
        $k[$j++] = _29; //#28424
        if (!$_.dontdraw) { //#28424
            $$.save(); //#28421
            bwipp_renmatrix(); //#28422
            $$.restore(); //#28423
        } //#28423
    } //#28423
    $_ = Object.getPrototypeOf($_); //#28427
}

function bwipp_databaromnicomposite() {
    $_ = Object.create($_); //#28459
    $_.dontdraw = false; //#28462
    $_.usematrix = false; //#28463
    $_.parse = false; //#28464
    $_.dontlint = false; //#28465
    $_.lintreqs = true; //#28466
    $k[$j++] = $_; //#28468
    bwipp_processoptions(); //#28468
    $_.options = $k[--$j]; //#28468
    $_.barcode = $k[--$j]; //#28469
    if ($_.dontdraw) { //#28471
        $_.usematrix = true; //#28471
    } //#28471
    $search($_.barcode, "|"); //#28474
    if ($k[--$j]) { //#28479
        $_.linear = $k[--$j]; //#28475
        $j--; //#28476
        $_.comp = $k[--$j]; //#28477
    } else { //#28479
        $j--; //#28479
        $k[$j++] = 'bwipp.missingCompositeComponent#28479'; //#28479
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#28479
        bwipp_raiseerror(); //#28479
    } //#28479
    if (!$_.usematrix) { //#28482
        $$.save(); //#28482
    } //#28482
    $put($_.options, "lintype", "databaromni"); //#28484
    $put($_.options, "linkage", true); //#28485
    $put($_.options, "inkspread", "0"); //#28486
    $put($_.options, "dontdraw", true); //#28487
    $put($_.options, "dontlint", true); //#28488
    var _F = $s($_.linear.length + $_.comp.length); //#28491
    $puti(_F, 0, $_.linear); //#28492
    $puti(_F, $_.linear.length, $_.comp); //#28493
    $k[$j++] = _F; //#28494
    $k[$j++] = 'ai'; //#28494
    bwipp_gs1process(); //#28494
    $j -= 3; //#28494
    $k[$j++] = $_.linear; //#28497
    $k[$j++] = $_.options; //#28497
    bwipp_databaromni(); //#28497
    var _L = $k[--$j]; //#28498
    $_.linsbs = $get(_L, "sbs"); //#28498
    $_.linheight = $get($get(_L, "bhs"), 0) * 72; //#28499
    $k[$j++] = _L; //#28500
    if (!$_.usematrix) { //#28500
        bwipp_renlinear(); //#28500
    } else { //#28500
        $j--; //#28500
    } //#28500
    $_.sepfinder = function() {
        $_.fp = $k[--$j]; //#28504
        for (var _U = $_.fp, _T = $f($_.fp + 12); _U <= _T; _U += 1) { //#28517
            $_.i = _U; //#28506
            if ($get($_.bot, $_.i) == 0) { //#28514
                if ($get($_.bot, $_.i - 1) == 1) { //#28511
                    $k[$j++] = 1; //#28509
                } else { //#28511
                    var _e = ($get($_.sep, $_.i - 1) == 0) ? 1 : 0; //#28511
                    $k[$j++] = _e; //#28511
                } //#28511
            } else { //#28514
                $k[$j++] = 0; //#28514
            } //#28514
            $put($_.sep, $_.i, $k[--$j]); //#28516
        } //#28516
        $_.f3 = $a([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1]); //#28518
        $k[$j++] = true; //#28519
        for (var _j = 0; _j <= 12; _j += 1) { //#28519
            var _p = $k[--$j]; //#28519
            $k[$j++] = _p && $eq($get($_.bot, $f(_j + $_.fp)), $get($_.f3, _j)); //#28519
        } //#28519
        if ($k[--$j]) { //#28522
            $puti($_.sep, $_.fp, $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0])); //#28521
        } //#28521
    }; //#28521
    $k[$j++] = Infinity; //#28524
    $k[$j++] = 0; //#28525
    $forall($_.linsbs, function() { //#28525
        var _v = $k[--$j]; //#28525
        var _w = $k[--$j]; //#28525
        var _x = (_w == 1) ? 0 : 1; //#28525
        $k[$j++] = _w; //#28525
        for (var _y = 0, _z = _v; _y < _z; _y++) { //#28525
            $k[$j++] = _x //#28525
        } //#28525
    }); //#28525
    $astore($a($counttomark() - 1)); //#28526
    $_.bot = $k[--$j]; //#28526
    $j -= 2; //#28526
    $k[$j++] = Infinity; //#28527
    $forall($_.bot, function() { //#28527
        var _14 = $k[--$j]; //#28527
        $k[$j++] = $f(1 - _14); //#28527
    }); //#28527
    $_.sep = $a(); //#28527
    $puti($_.sep, 0, $a([0, 0, 0])); //#28528
    $puti($_.sep, $_.sep.length - 4, $a([0, 0, 0, 0])); //#28529
    $k[$j++] = 18; //#28530
    $_.sepfinder(); //#28530
    $k[$j++] = 64; //#28530
    $_.sepfinder(); //#28530
    if (!$_.usematrix) { //#28581
        $$.rmoveto(0, $_.linheight); //#28532
        var _1H = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $_.sep],
            ["pixx", $_.sep.length],
            ["pixy", 1],
            ["height", 1 / 72],
            ["width", $_.sep.length / 72],
            ["opt", $_.options]
        ]); //#28539
        $k[$j++] = _1H; //#28540
        bwipp_renmatrix(); //#28540
        $$.rmoveto(-5, 1); //#28543
        $k[$j++] = $_.comp; //#28543
        $k[$j++] = $_.options; //#28543
        bwipp_gs1_cc(); //#28543
        bwipp_renmatrix(); //#28543
        $$.restore(); //#28545
    } else { //#28581
        $k[$j++] = 'compsym'; //#28547
        $k[$j++] = $_.comp; //#28547
        $k[$j++] = $_.options; //#28547
        bwipp_gs1_cc(); //#28547
        var _1M = $k[--$j]; //#28547
        $_[$k[--$j]] = _1M; //#28547
        $_.ccpixs = $get($_.compsym, 'pixs'); //#28548
        $_.ccpixx = $get($_.compsym, 'pixx'); //#28549
        $k[$j++] = Infinity; //#28552
        $k[$j++] = 0; //#28552
        $forall($_.linsbs, function() { //#28552
            var _1T = $k[--$j]; //#28552
            var _1U = $k[--$j]; //#28552
            var _1V = (_1U == 0) ? 1 : 0; //#28552
            $k[$j++] = _1U; //#28552
            for (var _1W = 0, _1X = $cvi(_1T); _1W < _1X; _1W++) { //#28552
                $k[$j++] = _1V //#28552
            } //#28552
        }); //#28552
        $_.linpixs = $a(); //#28552
        $k[$j++] = Infinity; //#28554
        $k[$j++] = 0; //#28554
        $aload($_.sep); //#28554
        $_.sep = $a(); //#28554
        $_.linheight = ~~$_.linheight; //#28556
        $k[$j++] = Infinity; //#28563
        for (var _1f = 0, _1g = $_.ccpixx, _1e = $_.ccpixs.length - 1; _1g < 0 ? _1f >= _1e : _1f <= _1e; _1f += _1g) { //#28562
            $_.i = _1f; //#28560
            for (var _1h = 0, _1i = 2; _1h < _1i; _1h++) { //#28561
                $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#28561
                $k[$j++] = 0; //#28561
            } //#28561
        } //#28561
        $k[$j++] = 0; //#28563
        $k[$j++] = 0; //#28563
        $k[$j++] = 0; //#28563
        $k[$j++] = 0; //#28563
        $aload($_.sep); //#28563
        for (var _1p = 0, _1q = $_.linheight; _1p < _1q; _1p++) { //#28563
            $k[$j++] = 0; //#28563
            $k[$j++] = 0; //#28563
            $k[$j++] = 0; //#28563
            $k[$j++] = 0; //#28563
            $aload($_.linpixs); //#28563
        } //#28563
        $_.pixs = $a(); //#28563
        $_.pixx = $f($_.ccpixx + 1); //#28565
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#28567
        var _22 = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#28575
        $k[$j++] = _22; //#28582
        if (!$_.dontdraw) { //#28582
            $$.save(); //#28579
            bwipp_renmatrix(); //#28580
            $$.restore(); //#28581
        } //#28581
    } //#28581
    $_ = Object.getPrototypeOf($_); //#28585
}

function bwipp_databarstackedcomposite() {
    $_ = Object.create($_); //#28616
    $_.dontdraw = false; //#28619
    $_.usematrix = false; //#28620
    $_.parse = false; //#28621
    $_.dontlint = false; //#28622
    $_.lintreqs = true; //#28623
    $k[$j++] = $_; //#28625
    bwipp_processoptions(); //#28625
    $_.options = $k[--$j]; //#28625
    $_.barcode = $k[--$j]; //#28626
    if ($_.dontdraw) { //#28628
        $_.usematrix = true; //#28628
    } //#28628
    $search($_.barcode, "|"); //#28631
    if ($k[--$j]) { //#28636
        $_.linear = $k[--$j]; //#28632
        $j--; //#28633
        $_.comp = $k[--$j]; //#28634
    } else { //#28636
        $j--; //#28636
        $k[$j++] = 'bwipp.missingCompositeComponent#28636'; //#28636
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#28636
        bwipp_raiseerror(); //#28636
    } //#28636
    if (!$_.usematrix) { //#28639
        $$.save(); //#28639
    } //#28639
    $put($_.options, "lintype", "databarstacked"); //#28641
    $put($_.options, "linkage", true); //#28642
    $put($_.options, "inkspread", "0"); //#28643
    $put($_.options, "dontdraw", true); //#28644
    $put($_.options, "dontlint", true); //#28645
    var _F = $s($_.linear.length + $_.comp.length); //#28648
    $puti(_F, 0, $_.linear); //#28649
    $puti(_F, $_.linear.length, $_.comp); //#28650
    $k[$j++] = _F; //#28651
    $k[$j++] = 'ai'; //#28651
    bwipp_gs1process(); //#28651
    $j -= 3; //#28651
    $k[$j++] = $_.linear; //#28654
    $k[$j++] = $_.options; //#28654
    bwipp_databarstacked(); //#28654
    var _L = $k[--$j]; //#28655
    $_.bot = $geti($get(_L, "pixs"), 0, $get(_L, "pixx")); //#28655
    $_.linheight = $get(_L, "pixy"); //#28656
    $k[$j++] = _L; //#28657
    if (!$_.usematrix) { //#28657
        bwipp_renmatrix(); //#28657
    } else { //#28657
        $_.linpixs = $get($k[--$j], 'pixs'); //#28657
    } //#28657
    $_.sepfinder = function() {
        $_.fp = $k[--$j]; //#28661
        for (var _X = $_.fp, _W = $f($_.fp + 12); _X <= _W; _X += 1) { //#28674
            $_.i = _X; //#28663
            if ($get($_.bot, $_.i) == 0) { //#28671
                if ($get($_.bot, $_.i - 1) == 1) { //#28668
                    $k[$j++] = 1; //#28666
                } else { //#28668
                    var _h = ($get($_.sep, $_.i - 1) == 0) ? 1 : 0; //#28668
                    $k[$j++] = _h; //#28668
                } //#28668
            } else { //#28671
                $k[$j++] = 0; //#28671
            } //#28671
            $put($_.sep, $_.i, $k[--$j]); //#28673
        } //#28673
        $_.f3 = $a([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1]); //#28675
        $k[$j++] = true; //#28676
        for (var _m = 0; _m <= 12; _m += 1) { //#28676
            var _s = $k[--$j]; //#28676
            $k[$j++] = _s && $eq($get($_.bot, $f(_m + $_.fp)), $get($_.f3, _m)); //#28676
        } //#28676
        if ($k[--$j]) { //#28679
            $puti($_.sep, $_.fp, $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0])); //#28678
        } //#28678
    }; //#28678
    $k[$j++] = Infinity; //#28681
    var _x = $_.bot; //#28681
    for (var _y = 0, _z = _x.length; _y < _z; _y++) { //#28681
        $k[$j++] = $f(1 - $get(_x, _y)); //#28681
    } //#28681
    $_.sep = $a(); //#28681
    $puti($_.sep, 0, $a([0, 0, 0, 0])); //#28682
    $puti($_.sep, $_.sep.length - 4, $a([0, 0, 0, 0])); //#28683
    $k[$j++] = 18; //#28684
    $_.sepfinder(); //#28684
    if (!$_.usematrix) { //#28734
        $$.rmoveto(0, $_.linheight); //#28686
        var _1D = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $_.sep],
            ["pixx", $_.sep.length],
            ["pixy", 1],
            ["height", 1 / 72],
            ["width", $_.sep.length / 72],
            ["opt", $_.options]
        ]); //#28693
        $k[$j++] = _1D; //#28694
        bwipp_renmatrix(); //#28694
        $$.rmoveto(1, 1); //#28697
        $k[$j++] = $_.comp; //#28697
        $k[$j++] = $_.options; //#28697
        bwipp_gs1_cc(); //#28697
        bwipp_renmatrix(); //#28697
        $$.restore(); //#28699
    } else { //#28734
        $k[$j++] = 'compsym'; //#28701
        $k[$j++] = $_.comp; //#28701
        $k[$j++] = $_.options; //#28701
        bwipp_gs1_cc(); //#28701
        var _1I = $k[--$j]; //#28701
        $_[$k[--$j]] = _1I; //#28701
        $_.ccpixs = $get($_.compsym, 'pixs'); //#28702
        $_.ccpixx = $get($_.compsym, 'pixx'); //#28703
        $_.linwidth = $_.sep.length; //#28705
        $k[$j++] = Infinity; //#28715
        for (var _1S = 0, _1T = $_.ccpixx, _1R = $_.ccpixs.length - 1; _1T < 0 ? _1S >= _1R : _1S <= _1R; _1S += _1T) { //#28711
            $_.i = _1S; //#28709
            for (var _1U = 0, _1V = 2; _1U < _1V; _1U++) { //#28710
                $k[$j++] = 0; //#28710
                $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#28710
            } //#28710
        } //#28710
        $aload($_.sep); //#28712
        $k[$j++] = 0; //#28716
        $k[$j++] = 0; //#28716
        $k[$j++] = 0; //#28716
        $k[$j++] = 0; //#28716
        $k[$j++] = 0; //#28716
        $k[$j++] = 0; //#28716
        for (var _1e = 0, _1f = $_.linwidth, _1d = $_.linpixs.length - 1; _1f < 0 ? _1e >= _1d : _1e <= _1d; _1e += _1f) { //#28716
            $_.i = _1e; //#28714
            $aload($geti($_.linpixs, $_.i, $_.linwidth)); //#28715
            $k[$j++] = 0; //#28715
            $k[$j++] = 0; //#28715
            $k[$j++] = 0; //#28715
            $k[$j++] = 0; //#28715
            $k[$j++] = 0; //#28715
            $k[$j++] = 0; //#28715
        } //#28715
        $_.pixs = $a(); //#28715
        $_.pixx = $f($_.ccpixx + 1); //#28718
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#28720
        var _1u = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#28728
        $k[$j++] = _1u; //#28735
        if (!$_.dontdraw) { //#28735
            $$.save(); //#28732
            bwipp_renmatrix(); //#28733
            $$.restore(); //#28734
        } //#28734
    } //#28734
    $_ = Object.getPrototypeOf($_); //#28738
}

function bwipp_databarstackedomnicomposite() {
    $_ = Object.create($_); //#28769
    $_.dontdraw = false; //#28772
    $_.usematrix = false; //#28773
    $_.parse = false; //#28774
    $_.dontlint = false; //#28775
    $_.lintreqs = true; //#28776
    $k[$j++] = $_; //#28778
    bwipp_processoptions(); //#28778
    $_.options = $k[--$j]; //#28778
    $_.barcode = $k[--$j]; //#28779
    if ($_.dontdraw) { //#28781
        $_.usematrix = true; //#28781
    } //#28781
    $search($_.barcode, "|"); //#28784
    if ($k[--$j]) { //#28789
        $_.linear = $k[--$j]; //#28785
        $j--; //#28786
        $_.comp = $k[--$j]; //#28787
    } else { //#28789
        $j--; //#28789
        $k[$j++] = 'bwipp.missingCompositeComponent#28789'; //#28789
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#28789
        bwipp_raiseerror(); //#28789
    } //#28789
    if (!$_.usematrix) { //#28792
        $$.save(); //#28792
    } //#28792
    $put($_.options, "lintype", "databarstackedomni"); //#28794
    $put($_.options, "linkage", true); //#28795
    $put($_.options, "inkspread", "0"); //#28796
    $put($_.options, "dontdraw", true); //#28797
    $put($_.options, "dontlint", true); //#28798
    var _F = $s($_.linear.length + $_.comp.length); //#28801
    $puti(_F, 0, $_.linear); //#28802
    $puti(_F, $_.linear.length, $_.comp); //#28803
    $k[$j++] = _F; //#28804
    $k[$j++] = 'ai'; //#28804
    bwipp_gs1process(); //#28804
    $j -= 3; //#28804
    $k[$j++] = $_.linear; //#28807
    $k[$j++] = $_.options; //#28807
    bwipp_databarstackedomni(); //#28807
    var _L = $k[--$j]; //#28808
    $_.bot = $geti($get(_L, "pixs"), 0, $get(_L, "pixx")); //#28808
    $_.linheight = $get(_L, "pixy"); //#28809
    $k[$j++] = _L; //#28810
    if (!$_.usematrix) { //#28810
        bwipp_renmatrix(); //#28810
    } else { //#28810
        $_.linpixs = $get($k[--$j], 'pixs'); //#28810
    } //#28810
    $_.sepfinder = function() {
        $_.fp = $k[--$j]; //#28814
        for (var _X = $_.fp, _W = $f($_.fp + 12); _X <= _W; _X += 1) { //#28827
            $_.i = _X; //#28816
            if ($get($_.bot, $_.i) == 0) { //#28824
                if ($get($_.bot, $_.i - 1) == 1) { //#28821
                    $k[$j++] = 1; //#28819
                } else { //#28821
                    var _h = ($get($_.sep, $_.i - 1) == 0) ? 1 : 0; //#28821
                    $k[$j++] = _h; //#28821
                } //#28821
            } else { //#28824
                $k[$j++] = 0; //#28824
            } //#28824
            $put($_.sep, $_.i, $k[--$j]); //#28826
        } //#28826
        $_.f3 = $a([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1]); //#28828
        $k[$j++] = true; //#28829
        for (var _m = 0; _m <= 12; _m += 1) { //#28829
            var _s = $k[--$j]; //#28829
            $k[$j++] = _s && $eq($get($_.bot, $f(_m + $_.fp)), $get($_.f3, _m)); //#28829
        } //#28829
        if ($k[--$j]) { //#28832
            $puti($_.sep, $_.fp, $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0])); //#28831
        } //#28831
    }; //#28831
    $k[$j++] = Infinity; //#28834
    var _x = $_.bot; //#28834
    for (var _y = 0, _z = _x.length; _y < _z; _y++) { //#28834
        $k[$j++] = $f(1 - $get(_x, _y)); //#28834
    } //#28834
    $_.sep = $a(); //#28834
    $puti($_.sep, 0, $a([0, 0, 0, 0])); //#28835
    $puti($_.sep, $_.sep.length - 4, $a([0, 0, 0, 0])); //#28836
    $k[$j++] = 18; //#28837
    $_.sepfinder(); //#28837
    if (!$_.usematrix) { //#28887
        $$.rmoveto(0, $_.linheight); //#28839
        var _1D = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $_.sep],
            ["pixx", $_.sep.length],
            ["pixy", 1],
            ["height", 1 / 72],
            ["width", $_.sep.length / 72],
            ["opt", $_.options]
        ]); //#28846
        $k[$j++] = _1D; //#28847
        bwipp_renmatrix(); //#28847
        $$.rmoveto(1, 1); //#28850
        $k[$j++] = $_.comp; //#28850
        $k[$j++] = $_.options; //#28850
        bwipp_gs1_cc(); //#28850
        bwipp_renmatrix(); //#28850
        $$.restore(); //#28852
    } else { //#28887
        $k[$j++] = 'compsym'; //#28854
        $k[$j++] = $_.comp; //#28854
        $k[$j++] = $_.options; //#28854
        bwipp_gs1_cc(); //#28854
        var _1I = $k[--$j]; //#28854
        $_[$k[--$j]] = _1I; //#28854
        $_.ccpixs = $get($_.compsym, 'pixs'); //#28855
        $_.ccpixx = $get($_.compsym, 'pixx'); //#28856
        $_.linwidth = $_.sep.length; //#28858
        $k[$j++] = Infinity; //#28868
        for (var _1S = 0, _1T = $_.ccpixx, _1R = $_.ccpixs.length - 1; _1T < 0 ? _1S >= _1R : _1S <= _1R; _1S += _1T) { //#28864
            $_.i = _1S; //#28862
            for (var _1U = 0, _1V = 2; _1U < _1V; _1U++) { //#28863
                $k[$j++] = 0; //#28863
                $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#28863
            } //#28863
        } //#28863
        $aload($_.sep); //#28865
        $k[$j++] = 0; //#28869
        $k[$j++] = 0; //#28869
        $k[$j++] = 0; //#28869
        $k[$j++] = 0; //#28869
        $k[$j++] = 0; //#28869
        $k[$j++] = 0; //#28869
        for (var _1e = 0, _1f = $_.linwidth, _1d = $_.linpixs.length - 1; _1f < 0 ? _1e >= _1d : _1e <= _1d; _1e += _1f) { //#28869
            $_.i = _1e; //#28867
            $aload($geti($_.linpixs, $_.i, $_.linwidth)); //#28868
            $k[$j++] = 0; //#28868
            $k[$j++] = 0; //#28868
            $k[$j++] = 0; //#28868
            $k[$j++] = 0; //#28868
            $k[$j++] = 0; //#28868
            $k[$j++] = 0; //#28868
        } //#28868
        $_.pixs = $a(); //#28868
        $_.pixx = $f($_.ccpixx + 1); //#28871
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#28873
        var _1u = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#28881
        $k[$j++] = _1u; //#28888
        if (!$_.dontdraw) { //#28888
            $$.save(); //#28885
            bwipp_renmatrix(); //#28886
            $$.restore(); //#28887
        } //#28887
    } //#28887
    $_ = Object.getPrototypeOf($_); //#28891
}

function bwipp_databartruncatedcomposite() {
    $_ = Object.create($_); //#28923
    $_.dontdraw = false; //#28926
    $_.usematrix = false; //#28927
    $_.parse = false; //#28928
    $_.dontlint = false; //#28929
    $_.lintreqs = true; //#28930
    $k[$j++] = $_; //#28932
    bwipp_processoptions(); //#28932
    $_.options = $k[--$j]; //#28932
    $_.barcode = $k[--$j]; //#28933
    if ($_.dontdraw) { //#28935
        $_.usematrix = true; //#28935
    } //#28935
    $search($_.barcode, "|"); //#28938
    if ($k[--$j]) { //#28943
        $_.linear = $k[--$j]; //#28939
        $j--; //#28940
        $_.comp = $k[--$j]; //#28941
    } else { //#28943
        $j--; //#28943
        $k[$j++] = 'bwipp.missingCompositeComponent#28943'; //#28943
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#28943
        bwipp_raiseerror(); //#28943
    } //#28943
    if (!$_.usematrix) { //#28946
        $$.save(); //#28946
    } //#28946
    $put($_.options, "lintype", "databartruncated"); //#28948
    $put($_.options, "linkage", true); //#28949
    $put($_.options, "inkspread", "0"); //#28950
    $put($_.options, "dontdraw", true); //#28951
    $put($_.options, "dontlint", true); //#28952
    var _F = $s($_.linear.length + $_.comp.length); //#28955
    $puti(_F, 0, $_.linear); //#28956
    $puti(_F, $_.linear.length, $_.comp); //#28957
    $k[$j++] = _F; //#28958
    $k[$j++] = 'ai'; //#28958
    bwipp_gs1process(); //#28958
    $j -= 3; //#28958
    $k[$j++] = $_.linear; //#28961
    $k[$j++] = $_.options; //#28961
    bwipp_databartruncated(); //#28961
    var _L = $k[--$j]; //#28962
    $_.linsbs = $get(_L, "sbs"); //#28962
    $_.linheight = $get($get(_L, "bhs"), 0) * 72; //#28963
    $k[$j++] = _L; //#28964
    if (!$_.usematrix) { //#28964
        bwipp_renlinear(); //#28964
    } else { //#28964
        $j--; //#28964
    } //#28964
    $_.sepfinder = function() {
        $_.fp = $k[--$j]; //#28968
        for (var _U = $_.fp, _T = $f($_.fp + 12); _U <= _T; _U += 1) { //#28981
            $_.i = _U; //#28970
            if ($get($_.bot, $_.i) == 0) { //#28978
                if ($get($_.bot, $_.i - 1) == 1) { //#28975
                    $k[$j++] = 1; //#28973
                } else { //#28975
                    var _e = ($get($_.sep, $_.i - 1) == 0) ? 1 : 0; //#28975
                    $k[$j++] = _e; //#28975
                } //#28975
            } else { //#28978
                $k[$j++] = 0; //#28978
            } //#28978
            $put($_.sep, $_.i, $k[--$j]); //#28980
        } //#28980
        $_.f3 = $a([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1]); //#28982
        $k[$j++] = true; //#28983
        for (var _j = 0; _j <= 12; _j += 1) { //#28983
            var _p = $k[--$j]; //#28983
            $k[$j++] = _p && $eq($get($_.bot, $f(_j + $_.fp)), $get($_.f3, _j)); //#28983
        } //#28983
        if ($k[--$j]) { //#28986
            $puti($_.sep, $_.fp, $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0])); //#28985
        } //#28985
    }; //#28985
    $k[$j++] = Infinity; //#28988
    $k[$j++] = 0; //#28989
    $forall($_.linsbs, function() { //#28989
        var _v = $k[--$j]; //#28989
        var _w = $k[--$j]; //#28989
        var _x = (_w == 1) ? 0 : 1; //#28989
        $k[$j++] = _w; //#28989
        for (var _y = 0, _z = _v; _y < _z; _y++) { //#28989
            $k[$j++] = _x //#28989
        } //#28989
    }); //#28989
    $astore($a($counttomark() - 1)); //#28990
    $_.bot = $k[--$j]; //#28990
    $j -= 2; //#28990
    $k[$j++] = Infinity; //#28991
    $forall($_.bot, function() { //#28991
        var _14 = $k[--$j]; //#28991
        $k[$j++] = $f(1 - _14); //#28991
    }); //#28991
    $_.sep = $a(); //#28991
    $puti($_.sep, 0, $a([0, 0, 0])); //#28992
    $puti($_.sep, $_.sep.length - 4, $a([0, 0, 0, 0])); //#28993
    $k[$j++] = 18; //#28994
    $_.sepfinder(); //#28994
    $k[$j++] = 64; //#28994
    $_.sepfinder(); //#28994
    if (!$_.usematrix) { //#29045
        $$.rmoveto(0, $_.linheight); //#28996
        var _1H = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $_.sep],
            ["pixx", $_.sep.length],
            ["pixy", 1],
            ["height", 1 / 72],
            ["width", $_.sep.length / 72],
            ["opt", $_.options]
        ]); //#29003
        $k[$j++] = _1H; //#29004
        bwipp_renmatrix(); //#29004
        $$.rmoveto(-5, 1); //#29007
        $k[$j++] = $_.comp; //#29007
        $k[$j++] = $_.options; //#29007
        bwipp_gs1_cc(); //#29007
        bwipp_renmatrix(); //#29007
        $$.restore(); //#29009
    } else { //#29045
        $k[$j++] = 'compsym'; //#29011
        $k[$j++] = $_.comp; //#29011
        $k[$j++] = $_.options; //#29011
        bwipp_gs1_cc(); //#29011
        var _1M = $k[--$j]; //#29011
        $_[$k[--$j]] = _1M; //#29011
        $_.ccpixs = $get($_.compsym, 'pixs'); //#29012
        $_.ccpixx = $get($_.compsym, 'pixx'); //#29013
        $k[$j++] = Infinity; //#29016
        $k[$j++] = 0; //#29016
        $forall($_.linsbs, function() { //#29016
            var _1T = $k[--$j]; //#29016
            var _1U = $k[--$j]; //#29016
            var _1V = (_1U == 0) ? 1 : 0; //#29016
            $k[$j++] = _1U; //#29016
            for (var _1W = 0, _1X = $cvi(_1T); _1W < _1X; _1W++) { //#29016
                $k[$j++] = _1V //#29016
            } //#29016
        }); //#29016
        $_.linpixs = $a(); //#29016
        $k[$j++] = Infinity; //#29018
        $k[$j++] = 0; //#29018
        $aload($_.sep); //#29018
        $_.sep = $a(); //#29018
        $_.linheight = ~~$_.linheight; //#29020
        $k[$j++] = Infinity; //#29027
        for (var _1f = 0, _1g = $_.ccpixx, _1e = $_.ccpixs.length - 1; _1g < 0 ? _1f >= _1e : _1f <= _1e; _1f += _1g) { //#29026
            $_.i = _1f; //#29024
            for (var _1h = 0, _1i = 2; _1h < _1i; _1h++) { //#29025
                $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#29025
                $k[$j++] = 0; //#29025
            } //#29025
        } //#29025
        $k[$j++] = 0; //#29027
        $k[$j++] = 0; //#29027
        $k[$j++] = 0; //#29027
        $k[$j++] = 0; //#29027
        $aload($_.sep); //#29027
        for (var _1p = 0, _1q = $_.linheight; _1p < _1q; _1p++) { //#29027
            $k[$j++] = 0; //#29027
            $k[$j++] = 0; //#29027
            $k[$j++] = 0; //#29027
            $k[$j++] = 0; //#29027
            $aload($_.linpixs); //#29027
        } //#29027
        $_.pixs = $a(); //#29027
        $_.pixx = $f($_.ccpixx + 1); //#29029
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#29031
        var _22 = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#29039
        $k[$j++] = _22; //#29046
        if (!$_.dontdraw) { //#29046
            $$.save(); //#29043
            bwipp_renmatrix(); //#29044
            $$.restore(); //#29045
        } //#29045
    } //#29045
    $_ = Object.getPrototypeOf($_); //#29049
}

function bwipp_databarlimitedcomposite() {
    $_ = Object.create($_); //#29081
    $_.dontdraw = false; //#29084
    $_.usematrix = false; //#29085
    $_.parse = false; //#29086
    $_.dontlint = false; //#29087
    $_.lintreqs = true; //#29088
    $k[$j++] = $_; //#29090
    bwipp_processoptions(); //#29090
    $_.options = $k[--$j]; //#29090
    $_.barcode = $k[--$j]; //#29091
    if ($_.dontdraw) { //#29093
        $_.usematrix = true; //#29093
    } //#29093
    $search($_.barcode, "|"); //#29096
    if ($k[--$j]) { //#29101
        $_.linear = $k[--$j]; //#29097
        $j--; //#29098
        $_.comp = $k[--$j]; //#29099
    } else { //#29101
        $j--; //#29101
        $k[$j++] = 'bwipp.missingCompositeComponent#29101'; //#29101
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#29101
        bwipp_raiseerror(); //#29101
    } //#29101
    if (!$_.usematrix) { //#29104
        $$.save(); //#29104
    } //#29104
    $put($_.options, "lintype", "databarlimited"); //#29106
    $put($_.options, "linkage", true); //#29107
    $put($_.options, "inkspread", "0"); //#29108
    $put($_.options, "dontdraw", true); //#29109
    $put($_.options, "dontlint", true); //#29110
    var _F = $s($_.linear.length + $_.comp.length); //#29113
    $puti(_F, 0, $_.linear); //#29114
    $puti(_F, $_.linear.length, $_.comp); //#29115
    $k[$j++] = _F; //#29116
    $k[$j++] = 'ai'; //#29116
    bwipp_gs1process(); //#29116
    $j -= 3; //#29116
    $k[$j++] = $_.linear; //#29119
    $k[$j++] = $_.options; //#29119
    bwipp_databarlimited(); //#29119
    var _L = $k[--$j]; //#29120
    $_.linsbs = $get(_L, "sbs"); //#29120
    $_.linheight = $get($get(_L, "bhs"), 0) * 72; //#29121
    $k[$j++] = _L; //#29122
    if (!$_.usematrix) { //#29122
        bwipp_renlinear(); //#29122
    } else { //#29122
        $j--; //#29122
    } //#29122
    $k[$j++] = Infinity; //#29125
    $k[$j++] = 1; //#29126
    $forall($_.linsbs, function() { //#29126
        var _R = $k[--$j]; //#29126
        var _S = $k[--$j]; //#29126
        var _T = (_S == 0) ? 1 : 0; //#29126
        $k[$j++] = _S; //#29126
        for (var _U = 0, _V = _R; _U < _V; _U++) { //#29126
            $k[$j++] = _T //#29126
        } //#29126
    }); //#29126
    $astore($a($counttomark() - 1)); //#29127
    $_.sep = $k[--$j]; //#29127
    $j -= 2; //#29127
    $puti($_.sep, 0, $a([0, 0, 0])); //#29128
    var _c = $_.sep; //#29129
    $puti($_.sep, _c.length - 9, $a([0, 0, 0, 0, 0, 0, 0, 0, 0])); //#29129
    if (!$_.usematrix) { //#29194
        $$.rmoveto(0, $_.linheight); //#29132
        var _g = $_.sep; //#29134
        var _k = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", _g],
            ["pixx", $_.sep.length],
            ["pixy", 1],
            ["height", 1 / 72],
            ["width", $_.sep.length / 72],
            ["opt", $_.options]
        ]); //#29139
        $k[$j++] = _k; //#29140
        bwipp_renmatrix(); //#29140
        $k[$j++] = $_.comp; //#29143
        $k[$j++] = $_.options; //#29143
        bwipp_gs1_cc(); //#29143
        var _n = $k[--$j]; //#29144
        $$.rmoveto($f(72 - $get(_n, "pixx")), 1); //#29144
        $k[$j++] = _n; //#29145
        bwipp_renmatrix(); //#29145
        $$.restore(); //#29147
    } else { //#29194
        $k[$j++] = 'compsym'; //#29149
        $k[$j++] = $_.comp; //#29149
        $k[$j++] = $_.options; //#29149
        bwipp_gs1_cc(); //#29149
        var _r = $k[--$j]; //#29149
        $_[$k[--$j]] = _r; //#29149
        $_.ccpixs = $get($_.compsym, 'pixs'); //#29150
        $_.ccpixx = $get($_.compsym, 'pixx'); //#29151
        $k[$j++] = Infinity; //#29154
        $k[$j++] = 0; //#29154
        $forall($_.linsbs, function() { //#29154
            var _y = $k[--$j]; //#29154
            var _z = $k[--$j]; //#29154
            var _10 = (_z == 0) ? 1 : 0; //#29154
            $k[$j++] = _z; //#29154
            for (var _11 = 0, _12 = $cvi(_y); _11 < _12; _11++) { //#29154
                $k[$j++] = _10 //#29154
            } //#29154
        }); //#29154
        $_.linpixs = $a(); //#29154
        $k[$j++] = Infinity; //#29156
        $k[$j++] = 0; //#29156
        $aload($_.sep); //#29156
        $_.sep = $a(); //#29156
        $_.linheight = ~~$_.linheight; //#29158
        if ($_.ccpixx == 72) { //#29177
            $k[$j++] = Infinity; //#29166
            for (var _1B = 0, _1C = $_.ccpixx, _1A = $_.ccpixs.length - 1; _1C < 0 ? _1B >= _1A : _1B <= _1A; _1B += _1C) { //#29165
                $_.i = _1B; //#29163
                for (var _1D = 0, _1E = 2; _1D < _1E; _1D++) { //#29164
                    $k[$j++] = 0; //#29164
                    $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#29164
                    $k[$j++] = 0; //#29164
                    $k[$j++] = 0; //#29164
                    $k[$j++] = 0; //#29164
                    $k[$j++] = 0; //#29164
                    $k[$j++] = 0; //#29164
                    $k[$j++] = 0; //#29164
                } //#29164
            } //#29164
            $aload($_.sep); //#29166
            for (var _1L = 0, _1M = $_.linheight; _1L < _1M; _1L++) { //#29166
                $aload($_.linpixs); //#29166
            } //#29166
            $_.pixs = $a(); //#29166
            $_.pixx = $_.linpixs.length; //#29168
        } else { //#29177
            $k[$j++] = Infinity; //#29175
            for (var _1T = 0, _1U = $_.ccpixx, _1S = $_.ccpixs.length - 1; _1U < 0 ? _1T >= _1S : _1T <= _1S; _1T += _1U) { //#29174
                $_.i = _1T; //#29172
                for (var _1V = 0, _1W = 2; _1V < _1W; _1V++) { //#29173
                    $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#29173
                    $k[$j++] = 0; //#29173
                    $k[$j++] = 0; //#29173
                    $k[$j++] = 0; //#29173
                    $k[$j++] = 0; //#29173
                    $k[$j++] = 0; //#29173
                    $k[$j++] = 0; //#29173
                } //#29173
            } //#29173
            $k[$j++] = 0; //#29175
            $k[$j++] = 0; //#29175
            $k[$j++] = 0; //#29175
            $k[$j++] = 0; //#29175
            $k[$j++] = 0; //#29175
            $k[$j++] = 0; //#29175
            $k[$j++] = 0; //#29175
            $k[$j++] = 0; //#29175
            $k[$j++] = 0; //#29175
            $aload($_.sep); //#29175
            for (var _1d = 0, _1e = $_.linheight; _1d < _1e; _1d++) { //#29175
                $k[$j++] = 0; //#29175
                $k[$j++] = 0; //#29175
                $k[$j++] = 0; //#29175
                $k[$j++] = 0; //#29175
                $k[$j++] = 0; //#29175
                $k[$j++] = 0; //#29175
                $k[$j++] = 0; //#29175
                $k[$j++] = 0; //#29175
                $k[$j++] = 0; //#29175
                $aload($_.linpixs); //#29175
            } //#29175
            $_.pixs = $a(); //#29175
            $_.pixx = $f($_.ccpixx + 6); //#29177
        } //#29177
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#29180
        var _1q = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#29188
        $k[$j++] = _1q; //#29195
        if (!$_.dontdraw) { //#29195
            $$.save(); //#29192
            bwipp_renmatrix(); //#29193
            $$.restore(); //#29194
        } //#29194
    } //#29194
    $_ = Object.getPrototypeOf($_); //#29198
}

function bwipp_databarexpandedcomposite() {
    $_ = Object.create($_); //#29230
    $_.dontdraw = false; //#29233
    $_.usematrix = false; //#29234
    $_.parse = false; //#29235
    $_.dontlint = false; //#29236
    $_.lintreqs = true; //#29237
    $k[$j++] = $_; //#29239
    bwipp_processoptions(); //#29239
    $_.options = $k[--$j]; //#29239
    $_.barcode = $k[--$j]; //#29240
    if ($_.dontdraw) { //#29242
        $_.usematrix = true; //#29242
    } //#29242
    $search($_.barcode, "|"); //#29245
    if ($k[--$j]) { //#29250
        $_.linear = $k[--$j]; //#29246
        $j--; //#29247
        $_.comp = $k[--$j]; //#29248
    } else { //#29250
        $j--; //#29250
        $k[$j++] = 'bwipp.missingCompositeComponent#29250'; //#29250
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#29250
        bwipp_raiseerror(); //#29250
    } //#29250
    if (!$_.usematrix) { //#29253
        $$.save(); //#29253
    } //#29253
    $put($_.options, "lintype", "databarexpanded"); //#29255
    $put($_.options, "linkage", true); //#29256
    $put($_.options, "inkspread", "0"); //#29257
    $put($_.options, "dontdraw", true); //#29258
    $put($_.options, "dontlint", true); //#29259
    var _F = $s($_.linear.length + $_.comp.length); //#29262
    $puti(_F, 0, $_.linear); //#29263
    $puti(_F, $_.linear.length, $_.comp); //#29264
    $k[$j++] = _F; //#29265
    $k[$j++] = 'ai'; //#29265
    bwipp_gs1process(); //#29265
    $j -= 3; //#29265
    $k[$j++] = $_.linear; //#29268
    $k[$j++] = $_.options; //#29268
    bwipp_databarexpanded(); //#29268
    var _L = $k[--$j]; //#29269
    $_.linsbs = $get(_L, "sbs"); //#29269
    $_.linheight = $get($get(_L, "bhs"), 0) * 72; //#29270
    $k[$j++] = _L; //#29271
    if (!$_.usematrix) { //#29271
        bwipp_renlinear(); //#29271
    } else { //#29271
        $j--; //#29271
    } //#29271
    $_.sepfinder = function() {
        $_.fp = $k[--$j]; //#29275
        for (var _U = $_.fp, _T = $f($_.fp + 12); _U <= _T; _U += 1) { //#29288
            $_.i = _U; //#29277
            if ($get($_.bot, $_.i) == 0) { //#29285
                if ($get($_.bot, $_.i - 1) == 1) { //#29282
                    $k[$j++] = 1; //#29280
                } else { //#29282
                    var _e = ($get($_.sep, $_.i - 1) == 0) ? 1 : 0; //#29282
                    $k[$j++] = _e; //#29282
                } //#29282
            } else { //#29285
                $k[$j++] = 0; //#29285
            } //#29285
            $put($_.sep, $_.i, $k[--$j]); //#29287
        } //#29287
    }; //#29287
    $k[$j++] = Infinity; //#29290
    $k[$j++] = 0; //#29291
    $forall($_.linsbs, function() { //#29291
        var _j = $k[--$j]; //#29291
        var _k = $k[--$j]; //#29291
        var _l = (_k == 1) ? 0 : 1; //#29291
        $k[$j++] = _k; //#29291
        for (var _m = 0, _n = _j; _m < _n; _m++) { //#29291
            $k[$j++] = _l //#29291
        } //#29291
    }); //#29291
    $astore($a($counttomark() - 1)); //#29292
    $_.bot = $k[--$j]; //#29292
    $j -= 2; //#29292
    $k[$j++] = Infinity; //#29293
    $forall($_.bot, function() { //#29293
        var _s = $k[--$j]; //#29293
        $k[$j++] = $f(1 - _s); //#29293
    }); //#29293
    $_.sep = $a(); //#29293
    $puti($_.sep, 0, $a([0, 0, 0])); //#29294
    $puti($_.sep, $_.sep.length - 4, $a([0, 0, 0, 0])); //#29295
    $k[$j++] = Infinity; //#29298
    for (var _11 = 18, _10 = $_.bot.length - 13; _11 <= _10; _11 += 98) { //#29297
        $k[$j++] = _11; //#29297
    } //#29297
    for (var _14 = 69, _13 = $_.bot.length - 13; _14 <= _13; _14 += 98) { //#29298
        $k[$j++] = _14; //#29298
    } //#29298
    var _15 = $a(); //#29298
    for (var _16 = 0, _17 = _15.length; _16 < _17; _16++) { //#29299
        $k[$j++] = $get(_15, _16); //#29299
        $_.sepfinder(); //#29299
    } //#29299
    if (!$_.usematrix) { //#29352
        $$.rmoveto(0, $_.linheight); //#29302
        var _1F = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $_.sep],
            ["pixx", $_.sep.length],
            ["pixy", 1],
            ["height", 1 / 72],
            ["width", $_.sep.length / 72],
            ["opt", $_.options]
        ]); //#29309
        $k[$j++] = _1F; //#29310
        bwipp_renmatrix(); //#29310
        $$.rmoveto(1, 1); //#29313
        $k[$j++] = $_.comp; //#29313
        $k[$j++] = $_.options; //#29313
        bwipp_gs1_cc(); //#29313
        bwipp_renmatrix(); //#29313
        $$.restore(); //#29315
    } else { //#29352
        $k[$j++] = 'compsym'; //#29317
        $k[$j++] = $_.comp; //#29317
        $k[$j++] = $_.options; //#29317
        bwipp_gs1_cc(); //#29317
        var _1K = $k[--$j]; //#29317
        $_[$k[--$j]] = _1K; //#29317
        $_.ccpixs = $get($_.compsym, 'pixs'); //#29318
        $_.ccpixx = $get($_.compsym, 'pixx'); //#29319
        $k[$j++] = Infinity; //#29322
        $k[$j++] = 0; //#29322
        $forall($_.linsbs, function() { //#29322
            var _1R = $k[--$j]; //#29322
            var _1S = $k[--$j]; //#29322
            var _1T = (_1S == 0) ? 1 : 0; //#29322
            $k[$j++] = _1S; //#29322
            for (var _1U = 0, _1V = $cvi(_1R); _1U < _1V; _1U++) { //#29322
                $k[$j++] = _1T //#29322
            } //#29322
        }); //#29322
        $_.linpixs = $a(); //#29322
        $k[$j++] = Infinity; //#29324
        $k[$j++] = 0; //#29324
        $aload($_.sep); //#29324
        $_.sep = $a(); //#29324
        $_.linheight = ~~$_.linheight; //#29326
        $_.diff = $f($_.linpixs.length - $_.ccpixx); //#29327
        $k[$j++] = Infinity; //#29328
        for (var _1d = 0, _1e = $f($_.diff - 2); _1d < _1e; _1d++) { //#29328
            $k[$j++] = 0; //#29328
        } //#29328
        $_.ccrpad = $a(); //#29328
        $k[$j++] = Infinity; //#29334
        for (var _1j = 0, _1k = $_.ccpixx, _1i = $_.ccpixs.length - 1; _1k < 0 ? _1j >= _1i : _1j <= _1i; _1j += _1k) { //#29333
            $_.i = _1j; //#29331
            for (var _1l = 0, _1m = 2; _1l < _1m; _1l++) { //#29332
                $k[$j++] = 0; //#29332
                $k[$j++] = 0; //#29332
                $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#29332
                $aload($_.ccrpad); //#29332
            } //#29332
        } //#29332
        $aload($_.sep); //#29334
        for (var _1u = 0, _1v = $_.linheight; _1u < _1v; _1u++) { //#29334
            $aload($_.linpixs); //#29334
        } //#29334
        $_.pixs = $a(); //#29334
        $_.pixx = $_.linpixs.length; //#29337
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#29338
        var _27 = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#29346
        $k[$j++] = _27; //#29353
        if (!$_.dontdraw) { //#29353
            $$.save(); //#29350
            bwipp_renmatrix(); //#29351
            $$.restore(); //#29352
        } //#29352
    } //#29352
    $_ = Object.getPrototypeOf($_); //#29356
}

function bwipp_databarexpandedstackedcomposite() {
    $_ = Object.create($_); //#29387
    $_.dontdraw = false; //#29390
    $_.usematrix = false; //#29391
    $_.parse = false; //#29392
    $_.dontlint = false; //#29393
    $_.lintreqs = true; //#29394
    $k[$j++] = $_; //#29396
    bwipp_processoptions(); //#29396
    $_.options = $k[--$j]; //#29396
    $_.barcode = $k[--$j]; //#29397
    if ($_.dontdraw) { //#29399
        $_.usematrix = true; //#29399
    } //#29399
    $search($_.barcode, "|"); //#29402
    if ($k[--$j]) { //#29407
        $_.linear = $k[--$j]; //#29403
        $j--; //#29404
        $_.comp = $k[--$j]; //#29405
    } else { //#29407
        $j--; //#29407
        $k[$j++] = 'bwipp.missingCompositeComponent#29407'; //#29407
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#29407
        bwipp_raiseerror(); //#29407
    } //#29407
    if (!$_.usematrix) { //#29410
        $$.save(); //#29410
    } //#29410
    $put($_.options, "lintype", "databarexpandedstacked"); //#29412
    $put($_.options, "linkage", true); //#29413
    $put($_.options, "inkspread", "0"); //#29414
    $put($_.options, "dontdraw", true); //#29415
    $put($_.options, "dontlint", true); //#29416
    var _F = $s($_.linear.length + $_.comp.length); //#29419
    $puti(_F, 0, $_.linear); //#29420
    $puti(_F, $_.linear.length, $_.comp); //#29421
    $k[$j++] = _F; //#29422
    $k[$j++] = 'ai'; //#29422
    bwipp_gs1process(); //#29422
    $j -= 3; //#29422
    $k[$j++] = $_.linear; //#29425
    $k[$j++] = $_.options; //#29425
    bwipp_databarexpandedstacked(); //#29425
    var _L = $k[--$j]; //#29426
    $_.bot = $geti($get(_L, "pixs"), 0, $get(_L, "pixx")); //#29426
    $_.linheight = $get(_L, "pixy"); //#29427
    $k[$j++] = _L; //#29428
    if (!$_.usematrix) { //#29428
        bwipp_renmatrix(); //#29428
    } else { //#29428
        $_.linpixs = $get($k[--$j], 'pixs'); //#29428
    } //#29428
    $_.sepfinder = function() {
        $_.fp = $k[--$j]; //#29432
        for (var _X = $_.fp, _W = $f($_.fp + 12); _X <= _W; _X += 1) { //#29445
            $_.i = _X; //#29434
            if ($get($_.bot, $_.i) == 0) { //#29442
                if ($get($_.bot, $_.i - 1) == 1) { //#29439
                    $k[$j++] = 1; //#29437
                } else { //#29439
                    var _h = ($get($_.sep, $_.i - 1) == 0) ? 1 : 0; //#29439
                    $k[$j++] = _h; //#29439
                } //#29439
            } else { //#29442
                $k[$j++] = 0; //#29442
            } //#29442
            $put($_.sep, $_.i, $k[--$j]); //#29444
        } //#29444
    }; //#29444
    $k[$j++] = Infinity; //#29447
    var _l = $_.bot; //#29447
    for (var _m = 0, _n = _l.length; _m < _n; _m++) { //#29447
        $k[$j++] = $f(1 - $get(_l, _m)); //#29447
    } //#29447
    $_.sep = $a(); //#29447
    $puti($_.sep, 0, $a([0, 0, 0, 0])); //#29448
    $puti($_.sep, $_.sep.length - 4, $a([0, 0, 0, 0])); //#29449
    $k[$j++] = Infinity; //#29452
    for (var _x = 19, _w = $_.bot.length - 13; _x <= _w; _x += 98) { //#29451
        $k[$j++] = _x; //#29451
    } //#29451
    for (var _10 = 70, _z = $_.bot.length - 13; _10 <= _z; _10 += 98) { //#29452
        $k[$j++] = _10; //#29452
    } //#29452
    var _11 = $a(); //#29452
    for (var _12 = 0, _13 = _11.length; _12 < _13; _12++) { //#29453
        $k[$j++] = $get(_11, _12); //#29453
        $_.sepfinder(); //#29453
    } //#29453
    if (!$_.usematrix) { //#29500
        $$.rmoveto(0, $_.linheight); //#29455
        var _1B = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $_.sep],
            ["pixx", $_.sep.length],
            ["pixy", 1],
            ["height", 1 / 72],
            ["width", $_.sep.length / 72],
            ["opt", $_.options]
        ]); //#29462
        $k[$j++] = _1B; //#29463
        bwipp_renmatrix(); //#29463
        var _1E = ($get($_.bot, 0) == 0) ? 2 : 0; //#29466
        $$.rmoveto(_1E, 1); //#29466
        $k[$j++] = $_.comp; //#29467
        $k[$j++] = $_.options; //#29467
        bwipp_gs1_cc(); //#29467
        bwipp_renmatrix(); //#29467
        $$.restore(); //#29469
    } else { //#29500
        $k[$j++] = 'compsym'; //#29471
        $k[$j++] = $_.comp; //#29471
        $k[$j++] = $_.options; //#29471
        bwipp_gs1_cc(); //#29471
        var _1J = $k[--$j]; //#29471
        $_[$k[--$j]] = _1J; //#29471
        $_.ccpixs = $get($_.compsym, 'pixs'); //#29472
        $_.ccpixx = $get($_.compsym, 'pixx'); //#29473
        $_.pixx = $_.sep.length; //#29475
        $k[$j++] = Infinity; //#29476
        for (var _1S = 0, _1T = ~~(($f($f($_.pixx - $_.ccpixx) + 1)) / 2); _1S < _1T; _1S++) { //#29476
            $k[$j++] = 0; //#29476
        } //#29476
        $_.cclpad = $a(); //#29476
        $k[$j++] = Infinity; //#29477
        for (var _1X = 0, _1Y = ~~($f($_.pixx - $_.ccpixx) / 2); _1X < _1Y; _1X++) { //#29477
            $k[$j++] = 0; //#29477
        } //#29477
        $_.ccrpad = $a(); //#29477
        $k[$j++] = Infinity; //#29483
        for (var _1d = 0, _1e = $_.ccpixx, _1c = $_.ccpixs.length - 1; _1e < 0 ? _1d >= _1c : _1d <= _1c; _1d += _1e) { //#29482
            $_.i = _1d; //#29480
            for (var _1f = 0, _1g = 2; _1f < _1g; _1f++) { //#29481
                $aload($_.cclpad); //#29481
                $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#29481
                $aload($_.ccrpad); //#29481
            } //#29481
        } //#29481
        $aload($_.sep); //#29483
        $aload($_.linpixs); //#29483
        $_.pixs = $a(); //#29483
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#29486
        var _1y = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#29494
        $k[$j++] = _1y; //#29501
        if (!$_.dontdraw) { //#29501
            $$.save(); //#29498
            bwipp_renmatrix(); //#29499
            $$.restore(); //#29500
        } //#29500
    } //#29500
    $_ = Object.getPrototypeOf($_); //#29504
}

function bwipp_gs1_128composite() {
    $_ = Object.create($_); //#29536
    $_.dontdraw = false; //#29539
    $_.usematrix = false; //#29540
    $_.parse = false; //#29541
    $_.dontlint = false; //#29542
    $_.lintreqs = true; //#29543
    $k[$j++] = $_; //#29545
    bwipp_processoptions(); //#29545
    $_.options = $k[--$j]; //#29545
    $_.barcode = $k[--$j]; //#29546
    if ($_.dontdraw) { //#29548
        $_.usematrix = true; //#29548
    } //#29548
    $search($_.barcode, "|"); //#29551
    if ($k[--$j]) { //#29556
        $_.linear = $k[--$j]; //#29552
        $j--; //#29553
        $_.comp = $k[--$j]; //#29554
    } else { //#29556
        $j--; //#29556
        $k[$j++] = 'bwipp.missingCompositeComponent#29556'; //#29556
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#29556
        bwipp_raiseerror(); //#29556
    } //#29556
    if (!$_.usematrix) { //#29559
        $$.save(); //#29559
    } //#29559
    $put($_.options, "inkspread", "0"); //#29561
    $put($_.options, "dontdraw", true); //#29562
    $put($_.options, "dontlint", true); //#29563
    var _D = $s($_.linear.length + $_.comp.length); //#29566
    $puti(_D, 0, $_.linear); //#29567
    $puti(_D, $_.linear.length, $_.comp); //#29568
    $k[$j++] = _D; //#29569
    $k[$j++] = 'ai'; //#29569
    bwipp_gs1process(); //#29569
    $j -= 3; //#29569
    $put($_.options, "linkagea", true); //#29572
    $k[$j++] = $_.linear; //#29573
    $k[$j++] = Infinity; //#29573
    $forall($_.options); //#29573
    var _K = $d(); //#29573
    $k[$j++] = _K; //#29573
    bwipp_gs1_128(); //#29573
    var _M = $get($k[--$j], "sbs"); //#29574
    $k[$j++] = 0; //#29574
    $forall(_M, function() { //#29574
        var _N = $k[--$j]; //#29574
        var _O = $k[--$j]; //#29574
        $k[$j++] = $f(_O + _N); //#29574
    }); //#29574
    $_.linwidth = $k[--$j]; //#29574
    $put($_.options, "lintype", "gs1-128"); //#29577
    $put($_.options, "linwidth", $_.linwidth); //#29578
    $k[$j++] = $_.comp; //#29579
    $k[$j++] = $_.options; //#29579
    bwipp_gs1_cc(); //#29579
    $_.compsym = $k[--$j]; //#29579
    if ($get($_.compsym, "pixx") == 99) { //#29580
        $k[$j++] = "a"; //#29580
    } else { //#29580
        $k[$j++] = "c"; //#29580
    } //#29580
    $_.linktype = $k[--$j]; //#29580
    if ($eq($_.linktype, "a")) { //#29588
        $put($_.options, "linkagea", true); //#29584
        $put($_.options, "linkagec", false); //#29585
    } else { //#29588
        $put($_.options, "linkagea", false); //#29587
        $put($_.options, "linkagec", true); //#29588
    } //#29588
    $k[$j++] = $_.linear; //#29590
    $k[$j++] = Infinity; //#29590
    $forall($_.options); //#29590
    var _g = $d(); //#29590
    $k[$j++] = _g; //#29590
    bwipp_gs1_128(); //#29590
    var _h = $k[--$j]; //#29591
    $_.linsbs = $get(_h, "sbs"); //#29591
    $_.linheight = $get($get(_h, "bhs"), 0) * 72; //#29592
    $k[$j++] = _h; //#29593
    if (!$_.usematrix) { //#29593
        bwipp_renlinear(); //#29593
    } else { //#29593
        $j--; //#29593
    } //#29593
    $k[$j++] = Infinity; //#29596
    $k[$j++] = 1; //#29597
    $forall($_.linsbs, function() { //#29597
        var _n = $k[--$j]; //#29597
        var _o = $k[--$j]; //#29597
        var _p = (_o == 0) ? 1 : 0; //#29597
        $k[$j++] = _o; //#29597
        for (var _q = 0, _r = _n; _q < _r; _q++) { //#29597
            $k[$j++] = _p //#29597
        } //#29597
    }); //#29597
    $astore($a($counttomark() - 1)); //#29598
    $_.sep = $k[--$j]; //#29598
    $j -= 2; //#29598
    if (!$_.usematrix) { //#29609
        $$.rmoveto(0, $_.linheight); //#29600
        var _11 = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $_.sep],
            ["pixx", $_.sep.length],
            ["pixy", 1],
            ["height", 1 / 72],
            ["width", $_.sep.length / 72],
            ["opt", $_.options]
        ]); //#29607
        $k[$j++] = _11; //#29608
        bwipp_renmatrix(); //#29608
    } //#29608
    if ($eq($_.linktype, "a")) { //#29617
        $_.s = ~~($f($_.linwidth - 2) / 11); //#29613
        $_.p = ~~(($_.s - 9) / 2); //#29614
        $k[$j++] = 'x'; //#29615
        $k[$j++] = ((($_.s - $_.p) - 1) * 11) + 10; //#29615
        if ($_.p == 0) { //#29615
            var _18 = $k[--$j]; //#29615
            $k[$j++] = $f(_18 + 2); //#29615
        } //#29615
        var _19 = $k[--$j]; //#29615
        $_[$k[--$j]] = $f(_19 - 99); //#29615
    } else { //#29617
        $_.x = -7; //#29617
    } //#29617
    if (!$_.usematrix) { //#29675
        $$.rmoveto($_.x, 1); //#29621
        $k[$j++] = $_.compsym; //#29621
        bwipp_renmatrix(); //#29621
        $$.restore(); //#29623
    } else { //#29675
        $_.ccpixs = $get($_.compsym, 'pixs'); //#29625
        $_.ccpixx = $get($_.compsym, 'pixx'); //#29626
        $k[$j++] = Infinity; //#29629
        $forall($_.linsbs, function() { //#29629
            var _1J = $k[--$j]; //#29629
            var _1K = $k[--$j]; //#29629
            var _1L = (_1K == 1) ? 0 : 1; //#29629
            $k[$j++] = _1K; //#29629
            for (var _1M = 0, _1N = _1J; _1M < _1N; _1M++) { //#29629
                $k[$j++] = _1L //#29629
            } //#29629
        }); //#29629
        $_.linpixs = $a(); //#29629
        if ($_.x > 0) { //#29637
            $k[$j++] = Infinity; //#29633
            for (var _1R = 0, _1S = $_.x; _1R < _1S; _1R++) { //#29633
                $k[$j++] = 0; //#29633
            } //#29633
            $_.cclpad = $a(); //#29633
            $_.linlpad = $a(0); //#29634
        } else { //#29637
            $_.cclpad = $a(0); //#29636
            $k[$j++] = Infinity; //#29637
            for (var _1X = 0, _1Y = -$_.x; _1X < _1Y; _1X++) { //#29637
                $k[$j++] = 0; //#29637
            } //#29637
            $_.linlpad = $a(); //#29637
        } //#29637
        $_.diff = $f($_.linwidth - $f($_.ccpixx + $_.x)); //#29640
        if ($_.diff > 0) { //#29646
            $k[$j++] = Infinity; //#29642
            for (var _1f = 0, _1g = $_.diff; _1f < _1g; _1f++) { //#29642
                $k[$j++] = 0; //#29642
            } //#29642
            $_.ccrpad = $a(); //#29642
            $_.linrpad = $a(0); //#29643
        } else { //#29646
            $_.ccrpad = $a(0); //#29645
            $k[$j++] = Infinity; //#29646
            for (var _1l = 0, _1m = -$_.diff; _1l < _1m; _1l++) { //#29646
                $k[$j++] = 0; //#29646
            } //#29646
            $_.linrpad = $a(); //#29646
        } //#29646
        $_.linheight = ~~$_.linheight; //#29649
        var _1q = $eq($_.linktype, "a") ? 2 : 3; //#29650
        $_.ccrepeat = _1q; //#29650
        $k[$j++] = Infinity; //#29657
        for (var _1u = 0, _1v = $_.ccpixx, _1t = $_.ccpixs.length - 1; _1v < 0 ? _1u >= _1t : _1u <= _1t; _1u += _1v) { //#29655
            $_.i = _1u; //#29653
            for (var _1x = 0, _1y = $_.ccrepeat; _1x < _1y; _1x++) { //#29654
                $aload($_.cclpad); //#29654
                $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#29654
                $aload($_.ccrpad); //#29654
            } //#29654
        } //#29654
        $aload($_.linlpad); //#29656
        $aload($_.sep); //#29656
        $aload($_.linrpad); //#29656
        for (var _29 = 0, _2A = $_.linheight; _29 < _2A; _29++) { //#29657
            $aload($_.linlpad); //#29657
            $aload($_.linpixs); //#29657
            $aload($_.linrpad); //#29657
        } //#29657
        $_.pixs = $a(); //#29657
        $_.pixx = $f($f($_.cclpad.length + $_.ccpixx) + $_.ccrpad.length); //#29660
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#29661
        var _2Q = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#29669
        $k[$j++] = _2Q; //#29676
        if (!$_.dontdraw) { //#29676
            $$.save(); //#29673
            bwipp_renmatrix(); //#29674
            $$.restore(); //#29675
        } //#29675
    } //#29675
    $_ = Object.getPrototypeOf($_); //#29679
}

function bwipp_gs1datamatrix() {
    $_ = Object.create($_); //#29709
    $_.dontdraw = false; //#29712
    $_.parse = false; //#29713
    $_.dontlint = false; //#29714
    $_.lintreqs = true; //#29715
    $_.gssep = false; //#29716
    $k[$j++] = $_; //#29718
    bwipp_processoptions(); //#29718
    $_.options = $k[--$j]; //#29718
    $_.barcode = $k[--$j]; //#29719
    $k[$j++] = $_.barcode; //#29721
    $k[$j++] = 'ai'; //#29721
    bwipp_gs1process(); //#29721
    $_.fncs = $k[--$j]; //#29722
    $_.vals = $k[--$j]; //#29723
    $_.ais = $k[--$j]; //#29724
    $_.fnc1 = -1; //#29727
    $_.dmtx = $a([$_.fnc1]); //#29728
    for (var _A = 0, _9 = $_.ais.length - 1; _A <= _9; _A += 1) { //#29744
        $_.i = _A; //#29730
        $_.ai = $get($_.ais, $_.i); //#29731
        $_.val = $get($_.vals, $_.i); //#29732
        var _K = $a(($_.dmtx.length + $_.ai.length) + $_.val.length); //#29733
        $puti(_K, 0, $_.dmtx); //#29734
        $k[$j++] = _K; //#29735
        $k[$j++] = _K; //#29735
        $k[$j++] = $_.dmtx.length; //#29735
        $k[$j++] = $_.ai; //#29735
        $k[$j++] = Infinity; //#29735
        var _O = $k[--$j]; //#29735
        var _P = $k[--$j]; //#29735
        $k[$j++] = _O; //#29735
        $forall(_P); //#29735
        var _Q = $a(); //#29735
        var _R = $k[--$j]; //#29735
        $puti($k[--$j], _R, _Q); //#29735
        var _T = $k[--$j]; //#29736
        $k[$j++] = _T; //#29736
        $k[$j++] = _T; //#29736
        $k[$j++] = $_.dmtx.length + $_.ai.length; //#29736
        $k[$j++] = $_.val; //#29736
        $k[$j++] = Infinity; //#29736
        var _X = $k[--$j]; //#29736
        var _Y = $k[--$j]; //#29736
        $k[$j++] = _X; //#29736
        $forall(_Y); //#29736
        var _Z = $a(); //#29736
        var _a = $k[--$j]; //#29736
        $puti($k[--$j], _a, _Z); //#29736
        $_.dmtx = $k[--$j]; //#29737
        if (($_.i != ($_.ais.length - 1)) && $get($_.fncs, $_.i)) { //#29743
            var _j = $a($_.dmtx.length + 1); //#29739
            $puti(_j, 0, $_.dmtx); //#29740
            $k[$j++] = _j; //#29741
            $k[$j++] = _j; //#29741
            $k[$j++] = $_.dmtx.length; //#29741
            if ($_.gssep) { //#29741
                $k[$j++] = 29; //#29741
            } else { //#29741
                $k[$j++] = $_.fnc1; //#29741
            } //#29741
            var _o = $k[--$j]; //#29741
            var _p = $k[--$j]; //#29741
            $put($k[--$j], _p, _o); //#29741
            $_.dmtx = $k[--$j]; //#29742
        } //#29742
    } //#29742
    $_.barcode = $s(($_.dmtx.length + 1) * 5); //#29747
    $_.i = 0; //#29748
    $_.j = 0; //#29748
    for (;;) { //#29758
        if ($_.i == $_.dmtx.length) { //#29749
            break; //#29749
        } //#29749
        var _y = $get($_.dmtx, $_.i); //#29750
        $k[$j++] = _y; //#29755
        if (_y == $_.fnc1) { //#29754
            $j--; //#29751
            $puti($_.barcode, $_.j, "^FNC1"); //#29751
            $_.j = $_.j + 4; //#29752
        } else { //#29754
            $put($_.barcode, $_.j, $k[--$j]); //#29754
        } //#29754
        $_.i = $_.i + 1; //#29756
        $_.j = $_.j + 1; //#29757
    } //#29757
    $_.barcode = $geti($_.barcode, 0, $_.j); //#29759
    delete $_.options["parse"]; //#29762
    $put($_.options, "dontdraw", true); //#29763
    $put($_.options, "parsefnc", true); //#29764
    $k[$j++] = 'args'; //#29765
    $k[$j++] = $_.barcode; //#29765
    $k[$j++] = $_.options; //#29765
    bwipp_datamatrix(); //#29765
    var _1G = $k[--$j]; //#29765
    $_[$k[--$j]] = _1G; //#29765
    $put($_.args, "opt", $_.options); //#29767
    $k[$j++] = $_.args; //#29770
    if (!$_.dontdraw) { //#29770
        bwipp_renmatrix(); //#29770
    } //#29770
    $_ = Object.getPrototypeOf($_); //#29772
}

function bwipp_gs1datamatrixrectangular() {
    $_ = Object.create($_); //#29802
    $_.parse = false; //#29805
    $_.dontlint = false; //#29806
    $_.lintreqs = true; //#29807
    $_.dontdraw = false; //#29808
    $_.gssep = false; //#29809
    $k[$j++] = $_; //#29811
    bwipp_processoptions(); //#29811
    $_.options = $k[--$j]; //#29811
    $_.barcode = $k[--$j]; //#29812
    $k[$j++] = $_.barcode; //#29814
    $k[$j++] = 'ai'; //#29814
    bwipp_gs1process(); //#29814
    $_.fncs = $k[--$j]; //#29815
    $_.vals = $k[--$j]; //#29816
    $_.ais = $k[--$j]; //#29817
    $_.fnc1 = -1; //#29820
    $_.dmtx = $a([$_.fnc1]); //#29821
    for (var _A = 0, _9 = $_.ais.length - 1; _A <= _9; _A += 1) { //#29837
        $_.i = _A; //#29823
        $_.ai = $get($_.ais, $_.i); //#29824
        $_.val = $get($_.vals, $_.i); //#29825
        var _K = $a(($_.dmtx.length + $_.ai.length) + $_.val.length); //#29826
        $puti(_K, 0, $_.dmtx); //#29827
        $k[$j++] = _K; //#29828
        $k[$j++] = _K; //#29828
        $k[$j++] = $_.dmtx.length; //#29828
        $k[$j++] = $_.ai; //#29828
        $k[$j++] = Infinity; //#29828
        var _O = $k[--$j]; //#29828
        var _P = $k[--$j]; //#29828
        $k[$j++] = _O; //#29828
        $forall(_P); //#29828
        var _Q = $a(); //#29828
        var _R = $k[--$j]; //#29828
        $puti($k[--$j], _R, _Q); //#29828
        var _T = $k[--$j]; //#29829
        $k[$j++] = _T; //#29829
        $k[$j++] = _T; //#29829
        $k[$j++] = $_.dmtx.length + $_.ai.length; //#29829
        $k[$j++] = $_.val; //#29829
        $k[$j++] = Infinity; //#29829
        var _X = $k[--$j]; //#29829
        var _Y = $k[--$j]; //#29829
        $k[$j++] = _X; //#29829
        $forall(_Y); //#29829
        var _Z = $a(); //#29829
        var _a = $k[--$j]; //#29829
        $puti($k[--$j], _a, _Z); //#29829
        $_.dmtx = $k[--$j]; //#29830
        if (($_.i != ($_.ais.length - 1)) && $get($_.fncs, $_.i)) { //#29836
            var _j = $a($_.dmtx.length + 1); //#29832
            $puti(_j, 0, $_.dmtx); //#29833
            $k[$j++] = _j; //#29834
            $k[$j++] = _j; //#29834
            $k[$j++] = $_.dmtx.length; //#29834
            if ($_.gssep) { //#29834
                $k[$j++] = 29; //#29834
            } else { //#29834
                $k[$j++] = $_.fnc1; //#29834
            } //#29834
            var _o = $k[--$j]; //#29834
            var _p = $k[--$j]; //#29834
            $put($k[--$j], _p, _o); //#29834
            $_.dmtx = $k[--$j]; //#29835
        } //#29835
    } //#29835
    $_.barcode = $s(($_.dmtx.length + 1) * 5); //#29840
    $_.i = 0; //#29841
    $_.j = 0; //#29841
    for (;;) { //#29851
        if ($_.i == $_.dmtx.length) { //#29842
            break; //#29842
        } //#29842
        var _y = $get($_.dmtx, $_.i); //#29843
        $k[$j++] = _y; //#29848
        if (_y == $_.fnc1) { //#29847
            $j--; //#29844
            $puti($_.barcode, $_.j, "^FNC1"); //#29844
            $_.j = $_.j + 4; //#29845
        } else { //#29847
            $put($_.barcode, $_.j, $k[--$j]); //#29847
        } //#29847
        $_.i = $_.i + 1; //#29849
        $_.j = $_.j + 1; //#29850
    } //#29850
    $_.barcode = $geti($_.barcode, 0, $_.j); //#29852
    delete $_.options["parse"]; //#29855
    $put($_.options, "dontdraw", true); //#29856
    $put($_.options, "parsefnc", true); //#29857
    $put($_.options, "format", "rectangle"); //#29858
    $k[$j++] = 'args'; //#29859
    $k[$j++] = $_.barcode; //#29859
    $k[$j++] = $_.options; //#29859
    bwipp_datamatrix(); //#29859
    var _1H = $k[--$j]; //#29859
    $_[$k[--$j]] = _1H; //#29859
    $put($_.args, "opt", $_.options); //#29861
    $k[$j++] = $_.args; //#29864
    if (!$_.dontdraw) { //#29864
        bwipp_renmatrix(); //#29864
    } //#29864
    $_ = Object.getPrototypeOf($_); //#29866
}

function bwipp_gs1dldatamatrix() {
    $_ = Object.create($_); //#29896
    $_.parse = false; //#29899
    $_.dontlint = false; //#29900
    $_.lintreqs = true; //#29901
    $_.dontdraw = false; //#29902
    $k[$j++] = $_; //#29904
    bwipp_processoptions(); //#29904
    $_.options = $k[--$j]; //#29904
    $_.barcode = $k[--$j]; //#29905
    var _3 = new Map([
        ["parse", $_.parse],
        ["parseonly", true],
        ["parsefnc", false]
    ]); //#29911
    $_.fncvals = _3; //#29912
    $k[$j++] = 'barcode'; //#29913
    $k[$j++] = $_.barcode; //#29913
    $k[$j++] = $_.fncvals; //#29913
    bwipp_parseinput(); //#29913
    var _6 = $k[--$j]; //#29913
    $_[$k[--$j]] = _6; //#29913
    $k[$j++] = $_.barcode; //#29915
    $k[$j++] = 'dl'; //#29915
    bwipp_gs1process(); //#29915
    $j -= 3; //#29915
    delete $_.options["parse"]; //#29918
    $put($_.options, "dontdraw", true); //#29919
    $k[$j++] = 'args'; //#29920
    $k[$j++] = $_.barcode; //#29920
    $k[$j++] = $_.options; //#29920
    bwipp_datamatrix(); //#29920
    var _D = $k[--$j]; //#29920
    $_[$k[--$j]] = _D; //#29920
    $put($_.args, "opt", $_.options); //#29922
    $k[$j++] = $_.args; //#29925
    if (!$_.dontdraw) { //#29925
        bwipp_renmatrix(); //#29925
    } //#29925
    $_ = Object.getPrototypeOf($_); //#29927
}

function bwipp_gs1qrcode() {
    $_ = Object.create($_); //#29956
    $_.parse = false; //#29959
    $_.dontlint = false; //#29960
    $_.lintreqs = true; //#29961
    $_.dontdraw = false; //#29962
    $k[$j++] = $_; //#29964
    bwipp_processoptions(); //#29964
    $_.options = $k[--$j]; //#29964
    $_.barcode = $k[--$j]; //#29965
    $k[$j++] = $_.barcode; //#29967
    $k[$j++] = 'ai'; //#29967
    bwipp_gs1process(); //#29967
    $_.fncs = $k[--$j]; //#29968
    $_.vals = $k[--$j]; //#29969
    $_.ais = $k[--$j]; //#29970
    $_.fnc1 = -1; //#29973
    $_.qrc = $a([$_.fnc1]); //#29974
    for (var _A = 0, _9 = $_.ais.length - 1; _A <= _9; _A += 1) { //#29990
        $_.i = _A; //#29976
        $_.ai = $get($_.ais, $_.i); //#29977
        $_.val = $get($_.vals, $_.i); //#29978
        var _K = $a(($_.qrc.length + $_.ai.length) + $_.val.length); //#29979
        $puti(_K, 0, $_.qrc); //#29980
        $k[$j++] = _K; //#29981
        $k[$j++] = _K; //#29981
        $k[$j++] = $_.qrc.length; //#29981
        $k[$j++] = $_.ai; //#29981
        $k[$j++] = Infinity; //#29981
        var _O = $k[--$j]; //#29981
        var _P = $k[--$j]; //#29981
        $k[$j++] = _O; //#29981
        $forall(_P); //#29981
        var _Q = $a(); //#29981
        var _R = $k[--$j]; //#29981
        $puti($k[--$j], _R, _Q); //#29981
        var _T = $k[--$j]; //#29982
        $k[$j++] = _T; //#29982
        $k[$j++] = _T; //#29982
        $k[$j++] = $_.qrc.length + $_.ai.length; //#29982
        $k[$j++] = $_.val; //#29982
        $k[$j++] = Infinity; //#29982
        var _X = $k[--$j]; //#29982
        var _Y = $k[--$j]; //#29982
        $k[$j++] = _X; //#29982
        $forall(_Y); //#29982
        var _Z = $a(); //#29982
        var _a = $k[--$j]; //#29982
        $puti($k[--$j], _a, _Z); //#29982
        $_.qrc = $k[--$j]; //#29983
        if (($_.i != ($_.ais.length - 1)) && $get($_.fncs, $_.i)) { //#29989
            var _j = $a($_.qrc.length + 1); //#29985
            $puti(_j, 0, $_.qrc); //#29986
            $put(_j, $_.qrc.length, $_.fnc1); //#29987
            $_.qrc = _j; //#29988
        } //#29988
    } //#29988
    $_.barcode = $s(($_.qrc.length + 1) * 5); //#29993
    $_.i = 0; //#29994
    $_.j = 0; //#29994
    for (;;) { //#30004
        if ($_.i == $_.qrc.length) { //#29995
            break; //#29995
        } //#29995
        var _t = $get($_.qrc, $_.i); //#29996
        $k[$j++] = _t; //#30001
        if (_t == $_.fnc1) { //#30000
            $j--; //#29997
            $puti($_.barcode, $_.j, "^FNC1"); //#29997
            $_.j = $_.j + 4; //#29998
        } else { //#30000
            $put($_.barcode, $_.j, $k[--$j]); //#30000
        } //#30000
        $_.i = $_.i + 1; //#30002
        $_.j = $_.j + 1; //#30003
    } //#30003
    $_.barcode = $geti($_.barcode, 0, $_.j); //#30005
    delete $_.options["parse"]; //#30008
    $put($_.options, "dontdraw", true); //#30009
    $put($_.options, "parsefnc", true); //#30010
    $k[$j++] = 'args'; //#30011
    $k[$j++] = $_.barcode; //#30011
    $k[$j++] = $_.options; //#30011
    bwipp_qrcode(); //#30011
    var _1B = $k[--$j]; //#30011
    $_[$k[--$j]] = _1B; //#30011
    $put($_.args, "opt", $_.options); //#30013
    $k[$j++] = $_.args; //#30016
    if (!$_.dontdraw) { //#30016
        bwipp_renmatrix(); //#30016
    } //#30016
    $_ = Object.getPrototypeOf($_); //#30018
}

function bwipp_gs1dlqrcode() {
    $_ = Object.create($_); //#30048
    $_.parse = false; //#30051
    $_.dontlint = false; //#30052
    $_.lintreqs = true; //#30053
    $_.dontdraw = false; //#30054
    $k[$j++] = $_; //#30056
    bwipp_processoptions(); //#30056
    $_.options = $k[--$j]; //#30056
    $_.barcode = $k[--$j]; //#30057
    var _3 = new Map([
        ["parse", $_.parse],
        ["parseonly", true],
        ["parsefnc", false]
    ]); //#30063
    $_.fncvals = _3; //#30064
    $k[$j++] = 'barcode'; //#30065
    $k[$j++] = $_.barcode; //#30065
    $k[$j++] = $_.fncvals; //#30065
    bwipp_parseinput(); //#30065
    var _6 = $k[--$j]; //#30065
    $_[$k[--$j]] = _6; //#30065
    $k[$j++] = $_.barcode; //#30067
    $k[$j++] = 'dl'; //#30067
    bwipp_gs1process(); //#30067
    $j -= 3; //#30067
    delete $_.options["parse"]; //#30070
    $put($_.options, "dontdraw", true); //#30071
    $k[$j++] = 'args'; //#30072
    $k[$j++] = $_.barcode; //#30072
    $k[$j++] = $_.options; //#30072
    bwipp_qrcode(); //#30072
    var _D = $k[--$j]; //#30072
    $_[$k[--$j]] = _D; //#30072
    $put($_.args, "opt", $_.options); //#30074
    $k[$j++] = $_.args; //#30077
    if (!$_.dontdraw) { //#30077
        bwipp_renmatrix(); //#30077
    } //#30077
    $_ = Object.getPrototypeOf($_); //#30079
}

function bwipp_gs1dotcode() {
    $_ = Object.create($_); //#30109
    $_.dontdraw = false; //#30112
    $_.parse = false; //#30113
    $_.dontlint = false; //#30114
    $_.lintreqs = true; //#30115
    $k[$j++] = $_; //#30117
    bwipp_processoptions(); //#30117
    $_.options = $k[--$j]; //#30117
    $_.barcode = $k[--$j]; //#30118
    $k[$j++] = $_.barcode; //#30120
    $k[$j++] = 'ai'; //#30120
    bwipp_gs1process(); //#30120
    $_.fncs = $k[--$j]; //#30121
    $_.vals = $k[--$j]; //#30122
    $_.ais = $k[--$j]; //#30123
    $_.fnc1 = -1; //#30126
    $_.dmtx = $a([$_.fnc1]); //#30127
    for (var _A = 0, _9 = $_.ais.length - 1; _A <= _9; _A += 1) { //#30143
        $_.i = _A; //#30129
        $_.ai = $get($_.ais, $_.i); //#30130
        $_.val = $get($_.vals, $_.i); //#30131
        var _K = $a(($_.dmtx.length + $_.ai.length) + $_.val.length); //#30132
        $puti(_K, 0, $_.dmtx); //#30133
        $k[$j++] = _K; //#30134
        $k[$j++] = _K; //#30134
        $k[$j++] = $_.dmtx.length; //#30134
        $k[$j++] = $_.ai; //#30134
        $k[$j++] = Infinity; //#30134
        var _O = $k[--$j]; //#30134
        var _P = $k[--$j]; //#30134
        $k[$j++] = _O; //#30134
        $forall(_P); //#30134
        var _Q = $a(); //#30134
        var _R = $k[--$j]; //#30134
        $puti($k[--$j], _R, _Q); //#30134
        var _T = $k[--$j]; //#30135
        $k[$j++] = _T; //#30135
        $k[$j++] = _T; //#30135
        $k[$j++] = $_.dmtx.length + $_.ai.length; //#30135
        $k[$j++] = $_.val; //#30135
        $k[$j++] = Infinity; //#30135
        var _X = $k[--$j]; //#30135
        var _Y = $k[--$j]; //#30135
        $k[$j++] = _X; //#30135
        $forall(_Y); //#30135
        var _Z = $a(); //#30135
        var _a = $k[--$j]; //#30135
        $puti($k[--$j], _a, _Z); //#30135
        $_.dmtx = $k[--$j]; //#30136
        if (($_.i != ($_.ais.length - 1)) && $get($_.fncs, $_.i)) { //#30142
            var _j = $a($_.dmtx.length + 1); //#30138
            $puti(_j, 0, $_.dmtx); //#30139
            $put(_j, $_.dmtx.length, $_.fnc1); //#30140
            $_.dmtx = _j; //#30141
        } //#30141
    } //#30141
    $_.barcode = $s(($_.dmtx.length + 1) * 5); //#30146
    $_.i = 0; //#30147
    $_.j = 0; //#30147
    for (;;) { //#30157
        if ($_.i == $_.dmtx.length) { //#30148
            break; //#30148
        } //#30148
        var _t = $get($_.dmtx, $_.i); //#30149
        $k[$j++] = _t; //#30154
        if (_t == $_.fnc1) { //#30153
            $j--; //#30150
            $puti($_.barcode, $_.j, "^FNC1"); //#30150
            $_.j = $_.j + 4; //#30151
        } else { //#30153
            $put($_.barcode, $_.j, $k[--$j]); //#30153
        } //#30153
        $_.i = $_.i + 1; //#30155
        $_.j = $_.j + 1; //#30156
    } //#30156
    $_.barcode = $geti($_.barcode, 0, $_.j); //#30158
    delete $_.options["parse"]; //#30161
    $put($_.options, "dontdraw", true); //#30162
    $put($_.options, "parsefnc", true); //#30163
    $k[$j++] = 'args'; //#30164
    $k[$j++] = $_.barcode; //#30164
    $k[$j++] = $_.options; //#30164
    bwipp_dotcode(); //#30164
    var _1B = $k[--$j]; //#30164
    $_[$k[--$j]] = _1B; //#30164
    $put($_.args, "opt", $_.options); //#30166
    $k[$j++] = $_.args; //#30169
    if (!$_.dontdraw) { //#30169
        bwipp_renmatrix(); //#30169
    } //#30169
    $_ = Object.getPrototypeOf($_); //#30171
}

function bwipp_hibccode39() {
    $_ = Object.create($_); //#30202
    $_.dontdraw = false; //#30205
    $_.textfont = "OCR-B"; //#30206
    $_.textsize = 10; //#30207
    $_.textyoffset = -8; //#30208
    $_.textxoffset = 0; //#30209
    $_.validatecheck = false; //#30210
    $k[$j++] = $_; //#30212
    bwipp_processoptions(); //#30212
    $_.options = $k[--$j]; //#30212
    $_.barcode = $k[--$j]; //#30213
    bwipp_loadctx(bwipp_hibccode39) //#30215
    if (!bwipp_hibccode39.__30222__) { //#30222
        $_ = Object.create($_); //#30222
        $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#30219
        $_.charvals = new Map; //#30220
        for (var _2 = 0; _2 <= 42; _2 += 1) { //#30221
            $put($_.charvals, $geti($_.barchars, _2, 1), _2); //#30221
        } //#30221
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_hibccode39.$ctx[id] = $_[id]); //#30221
        bwipp_hibccode39.__30222__ = 1; //#30221
        $_ = Object.getPrototypeOf($_); //#30221
    } //#30221
    for (var _9 = 0, _8 = $_.barcode.length - 1; _9 <= _8; _9 += 1) { //#30229
        var _D = $get($_.charvals, $geti($_.barcode, _9, 1)) !== undefined; //#30226
        if (!_D) { //#30228
            $k[$j++] = 'bwipp.hibccode39badCharacter#30227'; //#30227
            $k[$j++] = "HIBC Code 39 must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#30227
            bwipp_raiseerror(); //#30227
        } //#30227
    } //#30227
    $k[$j++] = 'barlen'; //#30231
    $k[$j++] = $_.barcode.length; //#30231
    if ($_.validatecheck) { //#30231
        var _G = $k[--$j]; //#30231
        $k[$j++] = $f(_G - 1); //#30231
    } //#30231
    var _H = $k[--$j]; //#30231
    $_[$k[--$j]] = _H; //#30231
    $_.checksum = 41; //#30233
    for (var _L = 0, _K = $f($_.barlen - 1); _L <= _K; _L += 1) { //#30237
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _L, 1)) + $_.checksum); //#30236
    } //#30236
    $_.checksum = $_.checksum % 43; //#30238
    if ($_.validatecheck) { //#30244
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#30242
            $k[$j++] = 'bwipp.hibccode39badCheckDigit#30241'; //#30241
            $k[$j++] = "Incorrect HIBC Code 39 check digit provided"; //#30241
            bwipp_raiseerror(); //#30241
        } //#30241
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#30243
    } //#30243
    var _d = $s($f($_.barlen + 2)); //#30246
    $puti(_d, 1, $_.barcode); //#30246
    $_.barcode = _d; //#30246
    $put($_.barcode, 0, 43); //#30247
    $put($_.barcode, $f($_.barlen + 1), $get($_.barchars, $_.checksum)); //#30248
    $_.text = $s($f($_.barlen + 4)); //#30250
    $put($_.text, 0, 42); //#30251
    $puti($_.text, 1, $_.barcode); //#30252
    var _u = $get($_.barcode, $f($_.barlen + 1)); //#30253
    $k[$j++] = $_.text; //#30253
    $k[$j++] = $f($_.barlen + 2); //#30253
    $k[$j++] = _u; //#30253
    if (_u == 32) { //#30253
        $j--; //#30253
        $k[$j++] = 95; //#30253
    } //#30253
    var _v = $k[--$j]; //#30253
    var _w = $k[--$j]; //#30253
    $put($k[--$j], _w, _v); //#30253
    $put($_.text, $f($_.barlen + 3), 42); //#30254
    $put($_.options, "dontdraw", true); //#30257
    $put($_.options, "includecheck", false); //#30258
    $put($_.options, "validatecheck", false); //#30259
    $k[$j++] = 'args'; //#30260
    $k[$j++] = $_.barcode; //#30260
    $k[$j++] = $_.options; //#30260
    bwipp_code39(); //#30260
    var _15 = $k[--$j]; //#30260
    $_[$k[--$j]] = _15; //#30260
    $put($_.args, "txt", $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])])); //#30262
    $put($_.args, "textxalign", "center"); //#30263
    $put($_.args, "opt", $_.options); //#30264
    $k[$j++] = $_.args; //#30267
    if (!$_.dontdraw) { //#30267
        bwipp_renlinear(); //#30267
    } //#30267
    $_ = Object.getPrototypeOf($_); //#30269
    $_ = Object.getPrototypeOf($_); //#30271
}

function bwipp_hibccode128() {
    $_ = Object.create($_); //#30302
    $_.dontdraw = false; //#30305
    $_.textfont = "OCR-B"; //#30306
    $_.textsize = 10; //#30307
    $_.textyoffset = -8; //#30308
    $_.textxoffset = 0; //#30309
    $_.validatecheck = false; //#30310
    $k[$j++] = $_; //#30312
    bwipp_processoptions(); //#30312
    $_.options = $k[--$j]; //#30312
    $_.barcode = $k[--$j]; //#30313
    bwipp_loadctx(bwipp_hibccode128) //#30315
    if (!bwipp_hibccode128.__30322__) { //#30322
        $_ = Object.create($_); //#30322
        $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#30319
        $_.charvals = new Map; //#30320
        for (var _2 = 0; _2 <= 42; _2 += 1) { //#30321
            $put($_.charvals, $geti($_.barchars, _2, 1), _2); //#30321
        } //#30321
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_hibccode128.$ctx[id] = $_[id]); //#30321
        bwipp_hibccode128.__30322__ = 1; //#30321
        $_ = Object.getPrototypeOf($_); //#30321
    } //#30321
    for (var _9 = 0, _8 = $_.barcode.length - 1; _9 <= _8; _9 += 1) { //#30329
        var _D = $get($_.charvals, $geti($_.barcode, _9, 1)) !== undefined; //#30326
        if (!_D) { //#30328
            $k[$j++] = 'bwipp.hibccode128badCharacter#30327'; //#30327
            $k[$j++] = "HIBC Code 128 must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#30327
            bwipp_raiseerror(); //#30327
        } //#30327
    } //#30327
    $k[$j++] = 'barlen'; //#30331
    $k[$j++] = $_.barcode.length; //#30331
    if ($_.validatecheck) { //#30331
        var _G = $k[--$j]; //#30331
        $k[$j++] = $f(_G - 1); //#30331
    } //#30331
    var _H = $k[--$j]; //#30331
    $_[$k[--$j]] = _H; //#30331
    $_.checksum = 41; //#30333
    for (var _L = 0, _K = $f($_.barlen - 1); _L <= _K; _L += 1) { //#30337
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _L, 1)) + $_.checksum); //#30336
    } //#30336
    $_.checksum = $_.checksum % 43; //#30338
    if ($_.validatecheck) { //#30344
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#30342
            $k[$j++] = 'bwipp.hibccode128badCheckDigit#30341'; //#30341
            $k[$j++] = "Incorrect HIBC Code 128 check digit provided"; //#30341
            bwipp_raiseerror(); //#30341
        } //#30341
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#30343
    } //#30343
    var _d = $s($f($_.barlen + 2)); //#30346
    $puti(_d, 1, $_.barcode); //#30346
    $_.barcode = _d; //#30346
    $put($_.barcode, 0, 43); //#30347
    $put($_.barcode, $f($_.barlen + 1), $get($_.barchars, $_.checksum)); //#30348
    $_.text = $s($f($_.barlen + 4)); //#30350
    $put($_.text, 0, 42); //#30351
    $puti($_.text, 1, $_.barcode); //#30352
    var _u = $get($_.barcode, $f($_.barlen + 1)); //#30353
    $k[$j++] = $_.text; //#30353
    $k[$j++] = $f($_.barlen + 2); //#30353
    $k[$j++] = _u; //#30353
    if (_u == 32) { //#30353
        $j--; //#30353
        $k[$j++] = 95; //#30353
    } //#30353
    var _v = $k[--$j]; //#30353
    var _w = $k[--$j]; //#30353
    $put($k[--$j], _w, _v); //#30353
    $put($_.text, $f($_.barlen + 3), 42); //#30354
    $put($_.options, "dontdraw", true); //#30357
    $put($_.options, "validatecheck", false); //#30358
    $k[$j++] = 'args'; //#30359
    $k[$j++] = $_.barcode; //#30359
    $k[$j++] = $_.options; //#30359
    bwipp_code128(); //#30359
    var _14 = $k[--$j]; //#30359
    $_[$k[--$j]] = _14; //#30359
    $put($_.args, "txt", $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])])); //#30361
    $put($_.args, "textxalign", "center"); //#30362
    $put($_.args, "opt", $_.options); //#30363
    $k[$j++] = $_.args; //#30366
    if (!$_.dontdraw) { //#30366
        bwipp_renlinear(); //#30366
    } //#30366
    $_ = Object.getPrototypeOf($_); //#30368
    $_ = Object.getPrototypeOf($_); //#30370
}

function bwipp_hibcdatamatrix() {
    $_ = Object.create($_); //#30401
    $_.dontdraw = false; //#30404
    $_.validatecheck = false; //#30405
    $k[$j++] = $_; //#30407
    bwipp_processoptions(); //#30407
    $_.options = $k[--$j]; //#30407
    $_.barcode = $k[--$j]; //#30408
    bwipp_loadctx(bwipp_hibcdatamatrix) //#30410
    if (!bwipp_hibcdatamatrix.__30417__) { //#30417
        $_ = Object.create($_); //#30417
        $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#30414
        $_.charvals = new Map; //#30415
        for (var _2 = 0; _2 <= 42; _2 += 1) { //#30416
            $put($_.charvals, $geti($_.barchars, _2, 1), _2); //#30416
        } //#30416
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_hibcdatamatrix.$ctx[id] = $_[id]); //#30416
        bwipp_hibcdatamatrix.__30417__ = 1; //#30416
        $_ = Object.getPrototypeOf($_); //#30416
    } //#30416
    for (var _9 = 0, _8 = $_.barcode.length - 1; _9 <= _8; _9 += 1) { //#30424
        var _D = $get($_.charvals, $geti($_.barcode, _9, 1)) !== undefined; //#30421
        if (!_D) { //#30423
            $k[$j++] = 'bwipp.hibcdatamatrixBadCharacter#30422'; //#30422
            $k[$j++] = "HIBC Data Matrix must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#30422
            bwipp_raiseerror(); //#30422
        } //#30422
    } //#30422
    $k[$j++] = 'barlen'; //#30426
    $k[$j++] = $_.barcode.length; //#30426
    if ($_.validatecheck) { //#30426
        var _G = $k[--$j]; //#30426
        $k[$j++] = $f(_G - 1); //#30426
    } //#30426
    var _H = $k[--$j]; //#30426
    $_[$k[--$j]] = _H; //#30426
    $_.checksum = 41; //#30428
    for (var _L = 0, _K = $f($_.barlen - 1); _L <= _K; _L += 1) { //#30432
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _L, 1)) + $_.checksum); //#30431
    } //#30431
    $_.checksum = $_.checksum % 43; //#30433
    if ($_.validatecheck) { //#30439
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#30437
            $k[$j++] = 'bwipp.hibcdatamatrixBadCheckDigit#30436'; //#30436
            $k[$j++] = "Incorrect HIBC Data Matrix check digit provided"; //#30436
            bwipp_raiseerror(); //#30436
        } //#30436
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#30438
    } //#30438
    var _d = $s($f($_.barlen + 2)); //#30441
    $puti(_d, 1, $_.barcode); //#30441
    $_.barcode = _d; //#30441
    $put($_.barcode, 0, 43); //#30442
    $put($_.barcode, $f($_.barlen + 1), $get($_.barchars, $_.checksum)); //#30443
    $put($_.options, "dontdraw", true); //#30446
    $put($_.options, "validatecheck", false); //#30447
    $k[$j++] = 'args'; //#30448
    $k[$j++] = $_.barcode; //#30448
    $k[$j++] = $_.options; //#30448
    bwipp_datamatrix(); //#30448
    var _p = $k[--$j]; //#30448
    $_[$k[--$j]] = _p; //#30448
    var _r = $_.args; //#30450
    $put(_r, "opt", $_.options); //#30450
    $k[$j++] = $_.args; //#30453
    if (!$_.dontdraw) { //#30453
        bwipp_renmatrix(); //#30453
    } //#30453
    $_ = Object.getPrototypeOf($_); //#30455
    $_ = Object.getPrototypeOf($_); //#30457
}

function bwipp_hibcdatamatrixrectangular() {
    $_ = Object.create($_); //#30488
    $_.dontdraw = false; //#30491
    $_.validatecheck = false; //#30492
    $k[$j++] = $_; //#30494
    bwipp_processoptions(); //#30494
    $_.options = $k[--$j]; //#30494
    $_.barcode = $k[--$j]; //#30495
    bwipp_loadctx(bwipp_hibcdatamatrixrectangular) //#30497
    if (!bwipp_hibcdatamatrixrectangular.__30504__) { //#30504
        $_ = Object.create($_); //#30504
        $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#30501
        $_.charvals = new Map; //#30502
        for (var _2 = 0; _2 <= 42; _2 += 1) { //#30503
            $put($_.charvals, $geti($_.barchars, _2, 1), _2); //#30503
        } //#30503
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_hibcdatamatrixrectangular.$ctx[id] = $_[id]); //#30503
        bwipp_hibcdatamatrixrectangular.__30504__ = 1; //#30503
        $_ = Object.getPrototypeOf($_); //#30503
    } //#30503
    for (var _9 = 0, _8 = $_.barcode.length - 1; _9 <= _8; _9 += 1) { //#30511
        var _D = $get($_.charvals, $geti($_.barcode, _9, 1)) !== undefined; //#30508
        if (!_D) { //#30510
            $k[$j++] = 'bwipp.hibcdatamatrixrectangularBadCharacter#30509'; //#30509
            $k[$j++] = "HIBC Data Matrix Rectangular must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#30509
            bwipp_raiseerror(); //#30509
        } //#30509
    } //#30509
    $k[$j++] = 'barlen'; //#30513
    $k[$j++] = $_.barcode.length; //#30513
    if ($_.validatecheck) { //#30513
        var _G = $k[--$j]; //#30513
        $k[$j++] = $f(_G - 1); //#30513
    } //#30513
    var _H = $k[--$j]; //#30513
    $_[$k[--$j]] = _H; //#30513
    $_.checksum = 41; //#30515
    for (var _L = 0, _K = $f($_.barlen - 1); _L <= _K; _L += 1) { //#30519
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _L, 1)) + $_.checksum); //#30518
    } //#30518
    $_.checksum = $_.checksum % 43; //#30520
    if ($_.validatecheck) { //#30526
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#30524
            $k[$j++] = 'bwipp.hibcdatamatrixrectangularBadCheckDigit#30523'; //#30523
            $k[$j++] = "Incorrect HIBC Data Matrix Rectangular check digit provided"; //#30523
            bwipp_raiseerror(); //#30523
        } //#30523
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#30525
    } //#30525
    var _d = $s($f($_.barlen + 2)); //#30528
    $puti(_d, 1, $_.barcode); //#30528
    $_.barcode = _d; //#30528
    $put($_.barcode, 0, 43); //#30529
    $put($_.barcode, $f($_.barlen + 1), $get($_.barchars, $_.checksum)); //#30530
    $put($_.options, "dontdraw", true); //#30533
    $put($_.options, "validatecheck", false); //#30534
    $put($_.options, "format", "rectangle"); //#30535
    $k[$j++] = 'args'; //#30536
    $k[$j++] = $_.barcode; //#30536
    $k[$j++] = $_.options; //#30536
    bwipp_datamatrix(); //#30536
    var _q = $k[--$j]; //#30536
    var _r = $k[--$j]; //#30536
    $_[_r] = _q; //#30536
    $put($_.args, "opt", $_.options); //#30538
    $k[$j++] = $_.args; //#30541
    if (!$_.dontdraw) { //#30541
        bwipp_renmatrix(); //#30541
    } //#30541
    $_ = Object.getPrototypeOf($_); //#30543
    $_ = Object.getPrototypeOf($_); //#30545
}

function bwipp_hibcpdf417() {
    $_ = Object.create($_); //#30576
    $_.dontdraw = false; //#30579
    $_.columns = 2; //#30580
    $_.validatecheck = false; //#30581
    $k[$j++] = $_; //#30583
    bwipp_processoptions(); //#30583
    $_.options = $k[--$j]; //#30583
    $_.barcode = $k[--$j]; //#30584
    bwipp_loadctx(bwipp_hibcpdf417) //#30586
    if (!bwipp_hibcpdf417.__30593__) { //#30593
        $_ = Object.create($_); //#30593
        $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#30590
        $_.charvals = new Map; //#30591
        for (var _2 = 0; _2 <= 42; _2 += 1) { //#30592
            $put($_.charvals, $geti($_.barchars, _2, 1), _2); //#30592
        } //#30592
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_hibcpdf417.$ctx[id] = $_[id]); //#30592
        bwipp_hibcpdf417.__30593__ = 1; //#30592
        $_ = Object.getPrototypeOf($_); //#30592
    } //#30592
    for (var _9 = 0, _8 = $_.barcode.length - 1; _9 <= _8; _9 += 1) { //#30600
        var _D = $get($_.charvals, $geti($_.barcode, _9, 1)) !== undefined; //#30597
        if (!_D) { //#30599
            $k[$j++] = 'bwipp.hibcpdf417BadCharacter#30598'; //#30598
            $k[$j++] = "HIBC PDF417 must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#30598
            bwipp_raiseerror(); //#30598
        } //#30598
    } //#30598
    $k[$j++] = 'barlen'; //#30602
    $k[$j++] = $_.barcode.length; //#30602
    if ($_.validatecheck) { //#30602
        var _G = $k[--$j]; //#30602
        $k[$j++] = $f(_G - 1); //#30602
    } //#30602
    var _H = $k[--$j]; //#30602
    $_[$k[--$j]] = _H; //#30602
    $_.checksum = 41; //#30604
    for (var _L = 0, _K = $f($_.barlen - 1); _L <= _K; _L += 1) { //#30608
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _L, 1)) + $_.checksum); //#30607
    } //#30607
    $_.checksum = $_.checksum % 43; //#30609
    if ($_.validatecheck) { //#30615
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#30613
            $k[$j++] = 'bwipp.hibcpdf417BadCheckDigit#30612'; //#30612
            $k[$j++] = "Incorrect HIBC PDF417 check digit provided"; //#30612
            bwipp_raiseerror(); //#30612
        } //#30612
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#30614
    } //#30614
    var _d = $s($f($_.barlen + 2)); //#30617
    $puti(_d, 1, $_.barcode); //#30617
    $_.barcode = _d; //#30617
    $put($_.barcode, 0, 43); //#30618
    $put($_.barcode, $f($_.barlen + 1), $get($_.barchars, $_.checksum)); //#30619
    $put($_.options, "dontdraw", true); //#30622
    $put($_.options, "columns", $_.columns); //#30623
    $put($_.options, "validatecheck", false); //#30624
    var _p = $_.barcode; //#30625
    $k[$j++] = 'args'; //#30625
    $k[$j++] = _p; //#30625
    $k[$j++] = $_.options; //#30625
    bwipp_pdf417(); //#30625
    var _r = $k[--$j]; //#30625
    $_[$k[--$j]] = _r; //#30625
    $put($_.args, "opt", $_.options); //#30627
    $k[$j++] = $_.args; //#30630
    if (!$_.dontdraw) { //#30630
        bwipp_renmatrix(); //#30630
    } //#30630
    $_ = Object.getPrototypeOf($_); //#30632
    $_ = Object.getPrototypeOf($_); //#30634
}

function bwipp_hibcmicropdf417() {
    $_ = Object.create($_); //#30665
    $_.dontdraw = false; //#30668
    $_.columns = 2; //#30669
    $_.validatecheck = false; //#30670
    $k[$j++] = $_; //#30672
    bwipp_processoptions(); //#30672
    $_.options = $k[--$j]; //#30672
    $_.barcode = $k[--$j]; //#30673
    bwipp_loadctx(bwipp_hibcmicropdf417) //#30675
    if (!bwipp_hibcmicropdf417.__30682__) { //#30682
        $_ = Object.create($_); //#30682
        $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#30679
        $_.charvals = new Map; //#30680
        for (var _2 = 0; _2 <= 42; _2 += 1) { //#30681
            $put($_.charvals, $geti($_.barchars, _2, 1), _2); //#30681
        } //#30681
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_hibcmicropdf417.$ctx[id] = $_[id]); //#30681
        bwipp_hibcmicropdf417.__30682__ = 1; //#30681
        $_ = Object.getPrototypeOf($_); //#30681
    } //#30681
    for (var _9 = 0, _8 = $_.barcode.length - 1; _9 <= _8; _9 += 1) { //#30689
        var _D = $get($_.charvals, $geti($_.barcode, _9, 1)) !== undefined; //#30686
        if (!_D) { //#30688
            $k[$j++] = 'bwipp.hibcmicropdf417BadCharacter#30687'; //#30687
            $k[$j++] = "HIBC MicroPDF417 must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#30687
            bwipp_raiseerror(); //#30687
        } //#30687
    } //#30687
    $k[$j++] = 'barlen'; //#30691
    $k[$j++] = $_.barcode.length; //#30691
    if ($_.validatecheck) { //#30691
        var _G = $k[--$j]; //#30691
        $k[$j++] = $f(_G - 1); //#30691
    } //#30691
    var _H = $k[--$j]; //#30691
    $_[$k[--$j]] = _H; //#30691
    $_.checksum = 41; //#30693
    for (var _L = 0, _K = $f($_.barlen - 1); _L <= _K; _L += 1) { //#30697
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _L, 1)) + $_.checksum); //#30696
    } //#30696
    $_.checksum = $_.checksum % 43; //#30698
    if ($_.validatecheck) { //#30704
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#30702
            $k[$j++] = 'bwipp.hibcmicropdf417BadCheckDigit#30701'; //#30701
            $k[$j++] = "Incorrect HIBC MicroPDF417 check digit provided"; //#30701
            bwipp_raiseerror(); //#30701
        } //#30701
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#30703
    } //#30703
    var _d = $s($f($_.barlen + 2)); //#30706
    $puti(_d, 1, $_.barcode); //#30706
    $_.barcode = _d; //#30706
    $put($_.barcode, 0, 43); //#30707
    $put($_.barcode, $f($_.barlen + 1), $get($_.barchars, $_.checksum)); //#30708
    $put($_.options, "dontdraw", true); //#30711
    var _m = $_.options; //#30712
    $put(_m, "columns", $_.columns); //#30712
    $put($_.options, "validatecheck", false); //#30713
    $k[$j++] = 'args'; //#30714
    $k[$j++] = $_.barcode; //#30714
    $k[$j++] = $_.options; //#30714
    bwipp_micropdf417(); //#30714
    var _r = $k[--$j]; //#30714
    $_[$k[--$j]] = _r; //#30714
    $put($_.args, "opt", $_.options); //#30716
    $k[$j++] = $_.args; //#30719
    if (!$_.dontdraw) { //#30719
        bwipp_renmatrix(); //#30719
    } //#30719
    $_ = Object.getPrototypeOf($_); //#30721
    $_ = Object.getPrototypeOf($_); //#30723
}

function bwipp_hibcqrcode() {
    $_ = Object.create($_); //#30754
    $_.dontdraw = false; //#30757
    $_.validatecheck = false; //#30758
    $k[$j++] = $_; //#30760
    bwipp_processoptions(); //#30760
    $_.options = $k[--$j]; //#30760
    $_.barcode = $k[--$j]; //#30761
    bwipp_loadctx(bwipp_hibcqrcode) //#30763
    if (!bwipp_hibcqrcode.__30770__) { //#30770
        $_ = Object.create($_); //#30770
        $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#30767
        $_.charvals = new Map; //#30768
        for (var _2 = 0; _2 <= 42; _2 += 1) { //#30769
            $put($_.charvals, $geti($_.barchars, _2, 1), _2); //#30769
        } //#30769
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_hibcqrcode.$ctx[id] = $_[id]); //#30769
        bwipp_hibcqrcode.__30770__ = 1; //#30769
        $_ = Object.getPrototypeOf($_); //#30769
    } //#30769
    for (var _9 = 0, _8 = $_.barcode.length - 1; _9 <= _8; _9 += 1) { //#30777
        var _D = $get($_.charvals, $geti($_.barcode, _9, 1)) !== undefined; //#30774
        if (!_D) { //#30776
            $k[$j++] = 'bwipp.hibcqrcodeBadCharacter#30775'; //#30775
            $k[$j++] = "HIBC QR Code must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#30775
            bwipp_raiseerror(); //#30775
        } //#30775
    } //#30775
    $k[$j++] = 'barlen'; //#30779
    $k[$j++] = $_.barcode.length; //#30779
    if ($_.validatecheck) { //#30779
        var _G = $k[--$j]; //#30779
        $k[$j++] = $f(_G - 1); //#30779
    } //#30779
    var _H = $k[--$j]; //#30779
    $_[$k[--$j]] = _H; //#30779
    $_.checksum = 41; //#30781
    for (var _L = 0, _K = $f($_.barlen - 1); _L <= _K; _L += 1) { //#30785
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _L, 1)) + $_.checksum); //#30784
    } //#30784
    $_.checksum = $_.checksum % 43; //#30786
    if ($_.validatecheck) { //#30792
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#30790
            $k[$j++] = 'bwipp.hibcqrcodeBadCheckDigit#30789'; //#30789
            $k[$j++] = "Incorrect HIBC QR Code check digit provided"; //#30789
            bwipp_raiseerror(); //#30789
        } //#30789
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#30791
    } //#30791
    var _d = $s($f($_.barlen + 2)); //#30794
    $puti(_d, 1, $_.barcode); //#30794
    $_.barcode = _d; //#30794
    $put($_.barcode, 0, 43); //#30795
    $put($_.barcode, $f($_.barlen + 1), $get($_.barchars, $_.checksum)); //#30796
    $put($_.options, "dontdraw", true); //#30799
    $put($_.options, "validatecheck", false); //#30800
    $k[$j++] = 'args'; //#30801
    $k[$j++] = $_.barcode; //#30801
    $k[$j++] = $_.options; //#30801
    bwipp_qrcode(); //#30801
    var _p = $k[--$j]; //#30801
    $_[$k[--$j]] = _p; //#30801
    var _r = $_.args; //#30803
    $put(_r, "opt", $_.options); //#30803
    $k[$j++] = $_.args; //#30806
    if (!$_.dontdraw) { //#30806
        bwipp_renmatrix(); //#30806
    } //#30806
    $_ = Object.getPrototypeOf($_); //#30808
    $_ = Object.getPrototypeOf($_); //#30810
}

function bwipp_hibccodablockf() {
    $_ = Object.create($_); //#30841
    $_.dontdraw = false; //#30844
    $_.validatecheck = false; //#30845
    $k[$j++] = $_; //#30847
    bwipp_processoptions(); //#30847
    $_.options = $k[--$j]; //#30847
    $_.barcode = $k[--$j]; //#30848
    bwipp_loadctx(bwipp_hibccodablockf) //#30850
    if (!bwipp_hibccodablockf.__30857__) { //#30857
        $_ = Object.create($_); //#30857
        $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#30854
        $_.charvals = new Map; //#30855
        for (var _2 = 0; _2 <= 42; _2 += 1) { //#30856
            $put($_.charvals, $geti($_.barchars, _2, 1), _2); //#30856
        } //#30856
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_hibccodablockf.$ctx[id] = $_[id]); //#30856
        bwipp_hibccodablockf.__30857__ = 1; //#30856
        $_ = Object.getPrototypeOf($_); //#30856
    } //#30856
    for (var _9 = 0, _8 = $_.barcode.length - 1; _9 <= _8; _9 += 1) { //#30864
        var _D = $get($_.charvals, $geti($_.barcode, _9, 1)) !== undefined; //#30861
        if (!_D) { //#30863
            $k[$j++] = 'bwipp.codablockfBadCharacter#30862'; //#30862
            $k[$j++] = "HIBC Codablock F must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#30862
            bwipp_raiseerror(); //#30862
        } //#30862
    } //#30862
    $k[$j++] = 'barlen'; //#30866
    $k[$j++] = $_.barcode.length; //#30866
    if ($_.validatecheck) { //#30866
        var _G = $k[--$j]; //#30866
        $k[$j++] = $f(_G - 1); //#30866
    } //#30866
    var _H = $k[--$j]; //#30866
    $_[$k[--$j]] = _H; //#30866
    $_.checksum = 41; //#30868
    for (var _L = 0, _K = $f($_.barlen - 1); _L <= _K; _L += 1) { //#30872
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _L, 1)) + $_.checksum); //#30871
    } //#30871
    $_.checksum = $_.checksum % 43; //#30873
    if ($_.validatecheck) { //#30879
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#30877
            $k[$j++] = 'bwipp.hibccodablockfBadCheckDigit#30876'; //#30876
            $k[$j++] = "Incorrect HIBC Codablock F check digit provided"; //#30876
            bwipp_raiseerror(); //#30876
        } //#30876
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#30878
    } //#30878
    var _c = $_.barlen; //#30881
    var _d = $s($f(_c + 2)); //#30881
    $puti(_d, 1, $_.barcode); //#30881
    $_.barcode = _d; //#30881
    $put($_.barcode, 0, 43); //#30882
    $put($_.barcode, $f($_.barlen + 1), $get($_.barchars, $_.checksum)); //#30883
    $put($_.options, "dontdraw", true); //#30886
    $put($_.options, "validatecheck", false); //#30887
    $k[$j++] = 'args'; //#30888
    $k[$j++] = $_.barcode; //#30888
    $k[$j++] = $_.options; //#30888
    bwipp_codablockf(); //#30888
    var _p = $k[--$j]; //#30888
    $_[$k[--$j]] = _p; //#30888
    var _r = $_.args; //#30890
    $put(_r, "opt", $_.options); //#30890
    $k[$j++] = $_.args; //#30893
    if (!$_.dontdraw) { //#30893
        bwipp_renmatrix(); //#30893
    } //#30893
    $_ = Object.getPrototypeOf($_); //#30895
    $_ = Object.getPrototypeOf($_); //#30897
}

function bwipp_hibcazteccode() {
    $_ = Object.create($_); //#30928
    $_.dontdraw = false; //#30931
    $_.validatecheck = false; //#30932
    $k[$j++] = $_; //#30934
    bwipp_processoptions(); //#30934
    $_.options = $k[--$j]; //#30934
    $_.barcode = $k[--$j]; //#30935
    bwipp_loadctx(bwipp_hibcazteccode) //#30937
    if (!bwipp_hibcazteccode.__30944__) { //#30944
        $_ = Object.create($_); //#30944
        $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#30941
        $_.charvals = new Map; //#30942
        for (var _2 = 0; _2 <= 42; _2 += 1) { //#30943
            $put($_.charvals, $geti($_.barchars, _2, 1), _2); //#30943
        } //#30943
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_hibcazteccode.$ctx[id] = $_[id]); //#30943
        bwipp_hibcazteccode.__30944__ = 1; //#30943
        $_ = Object.getPrototypeOf($_); //#30943
    } //#30943
    for (var _9 = 0, _8 = $_.barcode.length - 1; _9 <= _8; _9 += 1) { //#30951
        var _D = $get($_.charvals, $geti($_.barcode, _9, 1)) !== undefined; //#30948
        if (!_D) { //#30950
            $k[$j++] = 'bwipp.hibcazteccodeBadCharacter#30949'; //#30949
            $k[$j++] = "HIBC Aztec Code must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#30949
            bwipp_raiseerror(); //#30949
        } //#30949
    } //#30949
    $k[$j++] = 'barlen'; //#30953
    $k[$j++] = $_.barcode.length; //#30953
    if ($_.validatecheck) { //#30953
        var _G = $k[--$j]; //#30953
        $k[$j++] = $f(_G - 1); //#30953
    } //#30953
    var _H = $k[--$j]; //#30953
    $_[$k[--$j]] = _H; //#30953
    $_.checksum = 41; //#30955
    for (var _L = 0, _K = $f($_.barlen - 1); _L <= _K; _L += 1) { //#30959
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _L, 1)) + $_.checksum); //#30958
    } //#30958
    $_.checksum = $_.checksum % 43; //#30960
    if ($_.validatecheck) { //#30966
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#30964
            $k[$j++] = 'bwipp.hibcazteccodeBadCheckDigit#30963'; //#30963
            $k[$j++] = "Incorrect HIBC Aztec Code check digit provided"; //#30963
            bwipp_raiseerror(); //#30963
        } //#30963
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#30965
    } //#30965
    var _d = $s($f($_.barlen + 2)); //#30968
    $puti(_d, 1, $_.barcode); //#30968
    $_.barcode = _d; //#30968
    $put($_.barcode, 0, 43); //#30969
    $put($_.barcode, $f($_.barlen + 1), $get($_.barchars, $_.checksum)); //#30970
    $put($_.options, "dontdraw", true); //#30973
    $put($_.options, "validatecheck", false); //#30974
    $k[$j++] = 'args'; //#30975
    $k[$j++] = $_.barcode; //#30975
    $k[$j++] = $_.options; //#30975
    bwipp_azteccode(); //#30975
    var _p = $k[--$j]; //#30975
    $_[$k[--$j]] = _p; //#30975
    var _r = $_.args; //#30977
    $put(_r, "opt", $_.options); //#30977
    $k[$j++] = $_.args; //#30980
    if (!$_.dontdraw) { //#30980
        bwipp_renmatrix(); //#30980
    } //#30980
    $_ = Object.getPrototypeOf($_); //#30982
    $_ = Object.getPrototypeOf($_); //#30984
}

function bwipp_channelcode() {
    $_ = Object.create($_); //#31012
    $_.options = $k[--$j]; //#31014
    $_.barcode = $k[--$j]; //#31015
    $_.dontdraw = false; //#31017
    $_.shortfinder = false; //#31018
    $_.includetext = false; //#31019
    $_.includecheck = false; //#31020
    $_.height = 1; //#31021
    $forall($_.options, function() { //#31032
        var _3 = $k[--$j]; //#31032
        $_[$k[--$j]] = _3; //#31032
    }); //#31032
    $_.height = +$_.height; //#31034
    if (($_.barcode.length < 2) || ($_.barcode.length > 7)) { //#31039
        $k[$j++] = 'bwipp.channelcodeBadLength#31038'; //#31038
        $k[$j++] = "Channel Code must be 2 to 7 digits"; //#31038
        bwipp_raiseerror(); //#31038
    } //#31038
    $forall($_.barcode, function() { //#31044
        var _9 = $k[--$j]; //#31041
        if ((_9 < 48) || (_9 > 57)) { //#31043
            $k[$j++] = 'bwipp.channelcodeBadCharacter#31042'; //#31042
            $k[$j++] = "Channel Code must contain only digits"; //#31042
            bwipp_raiseerror(); //#31042
        } //#31042
    }); //#31042
    if ($cvi($_.barcode) > $get($a([26, 292, 3493, 44072, 576688, 7742862]), $_.barcode.length - 2)) { //#31047
        $k[$j++] = 'bwipp.channelcodeTooBig#31046'; //#31046
        $k[$j++] = "The Channel Code value is too big for the number of channels"; //#31046
        bwipp_raiseerror(); //#31046
    } //#31046
    $_.nextb = function() {
        var _E = $k[--$j]; //#31050
        var _N = (($f($get($_.s, _E) + ($f($get($_.b, $f(_E - 1)) + $f($get($_.b, $f(_E - 2)) + $get($_.s, $f(_E - 1))))))) > 4) ? 1 : 2; //#31055
        $k[$j++] = _E; //#31071
        $k[$j++] = _N; //#31071
        if (_E < $f($_.chan + 2)) { //#31069
            var _P = $k[--$j]; //#31057
            var _Q = $k[--$j]; //#31057
            var _R = $k[--$j]; //#31057
            $k[$j++] = _R; //#31060
            $k[$j++] = _Q; //#31060
            $k[$j++] = _P; //#31060
            for (var _T = _P, _S = _R; _T <= _S; _T += 1) { //#31060
                var _V = $k[--$j]; //#31058
                var _W = $k[--$j]; //#31058
                $put($_.b, _W, _T); //#31058
                var _X = $k[--$j]; //#31059
                var _Y = $k[--$j]; //#31059
                $k[$j++] = _Y; //#31059
                $k[$j++] = _X; //#31059
                $k[$j++] = _W; //#31059
                $k[$j++] = _V; //#31059
                $k[$j++] = $f($f(_X - _T) + 1); //#31059
                $k[$j++] = _Y; //#31059
                $k[$j++] = $f(_W + 1); //#31059
                $_.nexts(); //#31059
            } //#31059
        } else { //#31069
            var _Z = $k[--$j]; //#31062
            var _a = $k[--$j]; //#31062
            var _b = $k[--$j]; //#31062
            $k[$j++] = _b; //#31070
            $k[$j++] = _a; //#31070
            $k[$j++] = _Z; //#31070
            if ($le(_Z, _b)) { //#31070
                var _d = $k[--$j]; //#31063
                var _e = $k[--$j]; //#31063
                var _f = $k[--$j]; //#31063
                $put($_.b, _e, _f); //#31063
                $k[$j++] = _f; //#31068
                $k[$j++] = _e; //#31068
                $k[$j++] = _d; //#31068
                if ($_.value == $_.target) { //#31068
                    $k[$j++] = Infinity; //#31066
                    for (var _i = 3; _i <= 10; _i += 1) { //#31066
                        $k[$j++] = $get($_.s, _i); //#31066
                        $k[$j++] = $get($_.b, _i); //#31066
                    } //#31066
                    $_.out = $geti($a(), 0, $_.chan * 2); //#31067
                } //#31067
                $_.value = $_.value + 1; //#31069
            } //#31069
        } //#31069
        $j -= 4; //#31072
    }; //#31073
    $_.nexts = function() {
        var _r = $k[--$j]; //#31076
        $k[$j++] = _r; //#31076
        if (_r < $f($_.chan + 2)) { //#31076
            $k[$j++] = 1; //#31076
        } else { //#31076
            var _t = $k[--$j]; //#31076
            var _u = $k[--$j]; //#31076
            $k[$j++] = _u; //#31076
            $k[$j++] = _t; //#31076
            $k[$j++] = _u; //#31076
        } //#31076
        var _v = $k[--$j]; //#31076
        var _w = $k[--$j]; //#31076
        var _x = $k[--$j]; //#31076
        $k[$j++] = _x; //#31079
        $k[$j++] = _w; //#31079
        for (var _z = _v, _y = _x; _z <= _y; _z += 1) { //#31079
            var _11 = $k[--$j]; //#31077
            $put($_.s, _11, _z); //#31077
            var _12 = $k[--$j]; //#31078
            var _13 = $k[--$j]; //#31078
            $k[$j++] = _13; //#31078
            $k[$j++] = _12; //#31078
            $k[$j++] = _11; //#31078
            $k[$j++] = $f($f(_12 - _z) + 1); //#31078
            $k[$j++] = _13; //#31078
            $k[$j++] = _11; //#31078
            $_.nextb(); //#31078
        } //#31078
        $j -= 3; //#31080
    }; //#31081
    $_.encode = function() {
        $_.chan = $k[--$j]; //#31084
        $_.target = $k[--$j]; //#31085
        $_.value = 0; //#31086
        $_.out = -1; //#31087
        $_.b = $a([1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]); //#31088
        $_.s = $a([0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]); //#31089
        var _18 = $_.chan; //#31090
        $k[$j++] = _18; //#31090
        $k[$j++] = _18; //#31090
        $k[$j++] = 3; //#31090
        $_.nexts(); //#31090
        $k[$j++] = $_.out; //#31091
    }; //#31092
    $_.barlen = $_.barcode.length; //#31094
    $k[$j++] = 'finder'; //#31097
    if ($_.shortfinder) { //#31097
        $k[$j++] = $a([1, 1, 1, 1, 1]); //#31097
    } else { //#31097
        $k[$j++] = $a([1, 1, 1, 1, 1, 1, 1, 1, 1]); //#31097
    } //#31097
    var _1E = $k[--$j]; //#31097
    $_[$k[--$j]] = _1E; //#31097
    $k[$j++] = 'data'; //#31100
    $k[$j++] = $cvi($_.barcode); //#31100
    $k[$j++] = $_.barlen + 1; //#31100
    $_.encode(); //#31100
    var _1I = $k[--$j]; //#31100
    $_[$k[--$j]] = _1I; //#31100
    $_.check = $a([]); //#31103
    if ($_.includecheck) { //#31119
        $_.mod23 = $get($a([$a([]), $a([]), $a([13, 12, 4, 9, 3, 1]), $a([13, 2, 12, 3, 18, 16, 4, 1]), $a([11, 16, 17, 8, 20, 4, 10, 2, 5, 1]), $a([1, 4, 16, 18, 3, 12, 2, 8, 9, 13, 6, 1]), $a([20, 16, 22, 13, 15, 12, 5, 4, 8, 9, 21, 3, 7, 1]), $a([2, 6, 18, 8, 1, 3, 9, 4, 12, 13, 16, 2, 6, 18, 8, 1])]), $_.barlen); //#31113
        $k[$j++] = 0; //#31117
        for (var _1Z = 0, _1Y = $_.data.length - 1; _1Z <= _1Y; _1Z += 1) { //#31117
            var _1e = $k[--$j]; //#31116
            $k[$j++] = $f(_1e + ($f($get($_.data, _1Z) - 1) * $get($_.mod23, _1Z))); //#31116
        } //#31116
        var _1f = $k[--$j]; //#31118
        $k[$j++] = _1f % 23; //#31118
        $k[$j++] = 3; //#31118
        $_.encode(); //#31118
        $_.check = $k[--$j]; //#31118
    } //#31118
    $k[$j++] = Infinity; //#31125
    $aload($_.finder); //#31123
    $aload($_.data); //#31124
    $aload($_.check); //#31125
    $_.sbs = $a(); //#31125
    $_.txt = $a($_.barlen); //#31129
    for (var _1p = 0, _1o = $_.barlen - 1; _1p <= _1o; _1p += 1) { //#31133
        $_.i = _1p; //#31131
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), 0, 0, "", 0])); //#31132
    } //#31132
    $k[$j++] = Infinity; //#31143
    var _1w = $_.sbs; //#31138
    $k[$j++] = Infinity; //#31139
    for (var _1y = 0, _1z = ~~(($_.sbs.length + 1) / 2); _1y < _1z; _1y++) { //#31139
        $k[$j++] = $_.height; //#31139
    } //#31139
    var _21 = $a(); //#31139
    $k[$j++] = Infinity; //#31140
    for (var _23 = 0, _24 = ~~(($_.sbs.length + 1) / 2); _23 < _24; _23++) { //#31140
        $k[$j++] = 0; //#31140
    } //#31140
    var _25 = $a(); //#31140
    $k[$j++] = 'ren'; //#31143
    $k[$j++] = bwipp_renlinear; //#31143
    $k[$j++] = 'sbs'; //#31143
    $k[$j++] = _1w; //#31143
    $k[$j++] = 'bhs'; //#31143
    $k[$j++] = _21; //#31143
    $k[$j++] = 'bbs'; //#31143
    $k[$j++] = _25; //#31143
    $k[$j++] = 'txt'; //#31143
    $k[$j++] = $_.txt; //#31143
    $k[$j++] = 'textxalign'; //#31143
    $k[$j++] = "center"; //#31143
    $k[$j++] = 'opt'; //#31143
    $k[$j++] = $_.options; //#31143
    var _28 = $d(); //#31143
    $k[$j++] = _28; //#31146
    if (!$_.dontdraw) { //#31146
        bwipp_renlinear(); //#31146
    } //#31146
    $_ = Object.getPrototypeOf($_); //#31148
}

function bwipp_renlinear() {
    if ($_.bwipjs_dontdraw) { //#31176
        return; //#31176
    } //#31176
    $_ = Object.create($_); //#31177
    $_.args = $k[--$j]; //#31179
    $_.sbs = $a([]); //#31182
    $_.bhs = $a([]); //#31183
    $_.bbs = $a([]); //#31184
    $_.txt = $a([]); //#31185
    $_.barcolor = "unset"; //#31186
    $_.includetext = false; //#31187
    $_.textcolor = "unset"; //#31188
    $_.textxalign = "unset"; //#31189
    $_.textyalign = "unset"; //#31190
    $_.textfont = "OCR-B"; //#31191
    $_.textsize = 10; //#31192
    $_.textxoffset = 0; //#31193
    $_.textyoffset = 0; //#31194
    $_.textgaps = 0; //#31195
    $_.alttext = ""; //#31196
    $_.bordercolor = "unset"; //#31197
    $_.backgroundcolor = "unset"; //#31198
    $_.inkspread = 0; //#31199
    $_.width = 0; //#31200
    $_.barratio = 1; //#31201
    $_.spaceratio = 1; //#31202
    $_.showborder = false; //#31203
    $_.borderleft = 10; //#31204
    $_.borderright = 10; //#31205
    $_.bordertop = 1; //#31206
    $_.borderbottom = 1; //#31207
    $_.borderwidth = 0.5; //#31208
    $_.guardwhitespace = false; //#31209
    $_.guardleftpos = 0; //#31210
    $_.guardleftypos = 0; //#31211
    $_.guardrightpos = 0; //#31212
    $_.guardrightypos = 0; //#31213
    $_.guardwidth = 7; //#31214
    $_.guardheight = 7; //#31215
    $forall($_.args, function() { //#31218
        var _7 = $k[--$j]; //#31218
        $_[$k[--$j]] = _7; //#31218
    }); //#31218
    var _9 = $_.opt; //#31219
    for (var _E = _9.size, _D = _9.keys(), _C = 0; _C < _E; _C++) { //#31219
        var _A = _D.next().value; //#31219
        $_[_A] = _9.get(_A); //#31219
    } //#31219
    $_.barcolor = "" + $_.barcolor; //#31221
    $_.textcolor = "" + $_.textcolor; //#31222
    $_.textxalign = "" + $_.textxalign; //#31223
    $_.textyalign = "" + $_.textyalign; //#31224
    $_.textfont = "" + $_.textfont; //#31225
    $_.textsize = +$_.textsize; //#31226
    $_.textxoffset = +$_.textxoffset; //#31227
    $_.textyoffset = +$_.textyoffset; //#31228
    $_.textgaps = +$_.textgaps; //#31229
    $_.alttext = "" + $_.alttext; //#31230
    $_.bordercolor = "" + $_.bordercolor; //#31231
    $_.backgroundcolor = "" + $_.backgroundcolor; //#31232
    $_.inkspread = +$_.inkspread; //#31233
    $_.width = +$_.width; //#31234
    $_.barratio = +$_.barratio; //#31235
    $_.spaceratio = +$_.spaceratio; //#31236
    $_.borderleft = +$_.borderleft; //#31237
    $_.borderright = +$_.borderright; //#31238
    $_.bordertop = +$_.bordertop; //#31239
    $_.borderbottom = +$_.borderbottom; //#31240
    $_.borderwidth = +$_.borderwidth; //#31241
    $_.guardleftpos = +$_.guardleftpos; //#31242
    $_.guardleftypos = +$_.guardleftypos; //#31243
    $_.guardrightpos = +$_.guardrightpos; //#31244
    $_.guardrightypos = +$_.guardrightypos; //#31245
    $_.guardwidth = +$_.guardwidth; //#31246
    $_.guardheight = +$_.guardheight; //#31247
    $_.bars = $a(~~(($_.sbs.length + 1) / 2)); //#31250
    $_.x = 0; //#31251
    $_.maxh = 0; //#31251
    for (var _k = 0, _j = ((~~(($_.sbs.length + 1) / 2)) * 2) - 2; _k <= _j; _k += 1) { //#31270
        $_.i = _k; //#31253
        if (($_.i % 2) == 0) { //#31267
            $_.d = $f(($f(($get($_.sbs, $_.i) * $_.barratio) - $_.barratio)) + 1); //#31255
            if ($get($_.sbs, $_.i) != 0) { //#31264
                $_.h = $get($_.bhs, ~~($_.i / 2)) * 72; //#31257
                $_.c = $f(($_.d / 2) + $_.x); //#31258
                $_.y = $get($_.bbs, ~~($_.i / 2)) * 72; //#31259
                $_.w = $f($_.d - $_.inkspread); //#31260
                $put($_.bars, ~~($_.i / 2), $a([$_.h, $_.c, $_.y, $_.w])); //#31261
                if ($f($_.h + $_.y) > $_.maxh) { //#31262
                    $_.maxh = $f($_.h + $_.y); //#31262
                } //#31262
            } else { //#31264
                $put($_.bars, ~~($_.i / 2), -1); //#31264
            } //#31264
        } else { //#31267
            $_.d = $f(($f(($get($_.sbs, $_.i) * $_.spaceratio) - $_.spaceratio)) + 1); //#31267
        } //#31267
        $_.x = $f($_.x + $_.d); //#31269
    } //#31269
    $$.save(); //#31272
    var _1P = $$.currpos(); //#31274
    $$.translate(_1P.x, _1P.y); //#31274
    if ($_.width != 0) { //#31279
        $$.scale(($_.width * 72) / $_.x, 1); //#31278
    } //#31278
    $$.newpath(); //#31282
    $$.moveto(-$_.borderleft, -$_.borderbottom); //#31283
    $$.rlineto($f($f($_.x + $_.borderleft) + $_.borderright), 0); //#31284
    $$.rlineto(0, $f($f($_.maxh + $_.borderbottom) + $_.bordertop)); //#31285
    $$.rlineto(-($f($f($_.x + $_.borderleft) + $_.borderright)), 0); //#31286
    $$.rlineto(0, -($f($f($_.maxh + $_.borderbottom) + $_.bordertop))); //#31287
    $$.closepath(); //#31288
    if ($_.showborder) { //#31296
        $$.save(); //#31292
        if ($ne($_.bordercolor, "unset")) { //#31293
            $$.setcolor($_.bordercolor); //#31293
        } //#31293
        $$.setlinewidth($_.borderwidth); //#31294
        $$.stroke(); //#31294
        $$.restore(); //#31295
    } //#31295
    $$.save(); //#31299
    if ($ne($_.barcolor, "unset")) { //#31301
        $$.setcolor($_.barcolor); //#31301
    } //#31301
    var _1n = $_.bars; //#31302
    for (var _1o = 0, _1p = _1n.length; _1o < _1p; _1o++) { //#31308
        var _1q = $get(_1n, _1o); //#31308
        $k[$j++] = _1q; //#31307
        if (_1q != -1) { //#31306
            $aload($k[--$j]); //#31304
            $$.newpath(); //#31304
            $$.setlinewidth($k[--$j]); //#31304
            var _1t = $k[--$j]; //#31304
            $$.moveto($k[--$j], _1t); //#31304
            $$.rlineto(0, $k[--$j]); //#31304
            $$.stroke(); //#31304
        } else { //#31306
            $j--; //#31306
        } //#31306
    } //#31306
    $$.restore(); //#31309
    if ($ne($_.textcolor, "unset")) { //#31312
        $$.setcolor($_.textcolor); //#31312
    } //#31312
    if ($_.includetext) { //#31369
        if (($eq($_.textxalign, "unset") && $eq($_.textyalign, "unset")) && $eq($_.alttext, "")) { //#31367
            $_.s = 0; //#31315
            $_.fn = ""; //#31315
            var _22 = $_.txt; //#31316
            for (var _23 = 0, _24 = _22.length; _23 < _24; _23++) { //#31325
                $forall($get(_22, _23)); //#31317
                var _26 = $k[--$j]; //#31318
                var _27 = $k[--$j]; //#31318
                $k[$j++] = _27; //#31323
                $k[$j++] = _26; //#31323
                if ((_26 != $_.s) || $ne(_27, $_.fn)) { //#31322
                    var _2A = $k[--$j]; //#31319
                    var _2B = $k[--$j]; //#31319
                    $_.s = _2A; //#31319
                    $_.fn = _2B; //#31319
                    $$.selectfont(_2B, _2A); //#31320
                } else { //#31322
                    $j -= 2; //#31322
                } //#31322
                var _2C = $k[--$j]; //#31324
                $$.moveto($k[--$j], _2C); //#31324
                $$.show($k[--$j], 0, 0); //#31324
            } //#31324
        } else { //#31367
            $$.selectfont($_.textfont, $_.textsize); //#31327
            if ($eq($_.alttext, "")) { //#31333
                $k[$j++] = Infinity; //#31329
                var _2I = $_.txt; //#31329
                for (var _2J = 0, _2K = _2I.length; _2J < _2K; _2J++) { //#31329
                    $forall($get($get(_2I, _2J), 0)); //#31329
                } //#31329
                $_.txt = $a(); //#31329
                $_.tstr = $s($_.txt.length); //#31330
                for (var _2S = 0, _2R = $_.txt.length - 1; _2S <= _2R; _2S += 1) { //#31331
                    $put($_.tstr, _2S, $get($_.txt, _2S)); //#31331
                } //#31331
            } else { //#31333
                $_.tstr = $_.alttext; //#31333
            } //#31333
            if ($_.tstr.length == 0) { //#31343
                $k[$j++] = 0; //#31338
            } else { //#31343
                $$.save(); //#31340
                $$.newpath(); //#31341
                $$.moveto(0, 0); //#31341
                $$.charpath("0", false); //#31341
                var _2Y = $$.pathbbox(); //#31341
                $$.restore(); //#31343
                $k[$j++] = _2Y.ury; //#31343
            } //#31343
            $_.textascent = $k[--$j]; //#31352
            var _2b = $$.stringwidth($_.tstr); //#31353
            $_.textwidth = $f(_2b.w + (($_.tstr.length - 1) * $_.textgaps)); //#31353
            $_.textxpos = $f($_.textxoffset + ($f($_.x - $_.textwidth) / 2)); //#31355
            if ($eq($_.textxalign, "left")) { //#31356
                $_.textxpos = $_.textxoffset; //#31356
            } //#31356
            if ($eq($_.textxalign, "right")) { //#31357
                $_.textxpos = $f($f($_.x - $_.textxoffset) - $_.textwidth); //#31357
            } //#31357
            if ($eq($_.textxalign, "offleft")) { //#31358
                $_.textxpos = -$f($_.textwidth + $_.textxoffset); //#31358
            } //#31358
            if ($eq($_.textxalign, "offright")) { //#31359
                $_.textxpos = $f($_.x + $_.textxoffset); //#31359
            } //#31359
            if ($eq($_.textxalign, "justify") && ($_.textwidth < $_.x)) { //#31363
                $_.textxpos = 0; //#31361
                $_.textgaps = $f($_.x - $_.textwidth) / ($_.tstr.length - 1); //#31362
            } //#31362
            $_.textypos = -($f($f($_.textyoffset + $_.textascent) + 1)); //#31364
            if ($eq($_.textyalign, "above")) { //#31365
                $_.textypos = $f($f($_.textyoffset + $_.maxh) + 1); //#31365
            } //#31365
            if ($eq($_.textyalign, "center")) { //#31366
                $_.textypos = $f($_.textyoffset + ($f($_.maxh - $_.textascent) / 2)); //#31366
            } //#31366
            $$.moveto($_.textxpos, $_.textypos); //#31367
            $$.show($_.tstr, $_.textgaps, 0); //#31367
        } //#31367
    } //#31367
    if ($_.guardwhitespace) { //#31382
        $$.selectfont("OCR-B", $_.guardheight * 2); //#31373
        if ($_.guardleftpos != 0) { //#31377
            $$.moveto($f((-$_.guardleftpos) - 1), $f(($f($_.guardleftypos - ($_.guardheight / 2))) - 1.5)); //#31375
            $$.show("<", 0, 0); //#31376
        } //#31376
        if ($_.guardrightpos != 0) { //#31381
            $$.moveto($f(($f($f($_.guardrightpos + $_.x) - $_.guardwidth)) + 1), $f(($f($_.guardrightypos - ($_.guardheight / 2))) - 1.5)); //#31379
            $$.show(">", 0, 0); //#31380
        } //#31380
    } //#31380
    $$.restore(); //#31384
    $_ = Object.getPrototypeOf($_); //#31386
}

function bwipp_renmaximatrix() {
    if ($_.bwipjs_dontdraw) { //#31404
        return; //#31404
    } //#31404
    $_ = Object.create($_); //#31406
    $_.args = $k[--$j]; //#31408
    $_.barcolor = "unset"; //#31411
    $_.backgroundcolor = "unset"; //#31412
    $forall($_.args, function() { //#31415
        var _3 = $k[--$j]; //#31415
        $_[$k[--$j]] = _3; //#31415
    }); //#31415
    var _5 = $_.opt; //#31416
    for (var _A = _5.size, _9 = _5.keys(), _8 = 0; _8 < _A; _8++) { //#31416
        var _6 = _9.next().value; //#31416
        $_[_6] = _5.get(_6); //#31416
    } //#31416
    $_.barcolor = "" + $_.barcolor; //#31418
    $_.backgroundcolor = "" + $_.backgroundcolor; //#31419
    $$.save(); //#31421
    if ($ne($_.barcolor, "unset")) { //#31423
        $$.setcolor($_.barcolor); //#31423
    } //#31423
    $$.maxicode($_.pixs); //#31424
    $$.restore(); //#31426
    $_ = Object.getPrototypeOf($_); //#31428
}
// bwip-js/barcode-ftr.js
//
// This code is injected below the cross-compiled barcode.js.

// `encoder` is one of the bwipp_ functions
function bwipp_encode(bwipjs, encoder, text, opts, dontdraw) {
    if (typeof text !== 'string') {
        throw new Error('bwipp.typeError: barcode text not a string (' +
            text + ')');
    }
    opts = opts || {};
    if (typeof opts === 'string') {
        var tmp = opts.split(' ');
        opts = {};
        for (var i = 0; i < tmp.length; i++) {
            if (!tmp[i]) {
                continue;
            }
            var eq = tmp[i].indexOf('=');
            if (eq == -1) {
                opts[tmp[i]] = true;
            } else {
                opts[tmp[i].substr(0, eq)] = tmp[i].substr(eq + 1);
            }
        }
    } else if (typeof opts !== 'object' || opts.constructor !== Object) {
        throw new Error('bwipp.typeError: options not an object');
    }

    // Convert utf-16 to utf-8 unless caller has pre-encoded the text.
    if (opts.binarytext) {
        // No 16-bit chars allowed.
        if (/[\u0100-\uffff]/.test(text)) {
            throw new Error('bwip-js: 16-bit chars not allowed with binarytext');
        }
    } else if (/[\u0080-\uffff]/.test(text)) {
        text = unescape(encodeURIComponent(text));
    }

    // Convert opts to a Map
    var map = new Map;
    for (var id in opts) {
        if (opts.hasOwnProperty(id)) {
            map.set(id, opts[id]);
        }
    }

    // Set up the initial postscript state and invoke the encoder
    $$ = bwipjs;
    $k = [text, map];
    $j = 2;
    $_ = {
        bwipjs_dontdraw: opts.dontdraw || dontdraw || false
    };
    encoder();

    // Return what is left on the stack.  This branch should only be taken
    // when running with the dontdraw option.
    if ($j) {
        return $k.splice(0, $j);
    }

    return true;
}

function bwipp_lookup(symbol) {
    if (!symbol) {
        throw new Error("bwipp.undefinedEncoder: bcid is not defined");
    }
    switch (symbol.replace(/-/g, "_")) {
        case "auspost":
            return bwipp_auspost;
        case "azteccode":
            return bwipp_azteccode;
        case "azteccodecompact":
            return bwipp_azteccodecompact;
        case "aztecrune":
            return bwipp_aztecrune;
        case "bc412":
            return bwipp_bc412;
        case "channelcode":
            return bwipp_channelcode;
        case "codablockf":
            return bwipp_codablockf;
        case "code11":
            return bwipp_code11;
        case "code128":
            return bwipp_code128;
        case "code16k":
            return bwipp_code16k;
        case "code2of5":
            return bwipp_code2of5;
        case "code32":
            return bwipp_code32;
        case "code39":
            return bwipp_code39;
        case "code39ext":
            return bwipp_code39ext;
        case "code49":
            return bwipp_code49;
        case "code93":
            return bwipp_code93;
        case "code93ext":
            return bwipp_code93ext;
        case "codeone":
            return bwipp_codeone;
        case "coop2of5":
            return bwipp_coop2of5;
        case "daft":
            return bwipp_daft;
        case "databarexpanded":
            return bwipp_databarexpanded;
        case "databarexpandedcomposite":
            return bwipp_databarexpandedcomposite;
        case "databarexpandedstacked":
            return bwipp_databarexpandedstacked;
        case "databarexpandedstackedcomposite":
            return bwipp_databarexpandedstackedcomposite;
        case "databarlimited":
            return bwipp_databarlimited;
        case "databarlimitedcomposite":
            return bwipp_databarlimitedcomposite;
        case "databaromni":
            return bwipp_databaromni;
        case "databaromnicomposite":
            return bwipp_databaromnicomposite;
        case "databarstacked":
            return bwipp_databarstacked;
        case "databarstackedcomposite":
            return bwipp_databarstackedcomposite;
        case "databarstackedomni":
            return bwipp_databarstackedomni;
        case "databarstackedomnicomposite":
            return bwipp_databarstackedomnicomposite;
        case "databartruncated":
            return bwipp_databartruncated;
        case "databartruncatedcomposite":
            return bwipp_databartruncatedcomposite;
        case "datalogic2of5":
            return bwipp_datalogic2of5;
        case "datamatrix":
            return bwipp_datamatrix;
        case "datamatrixrectangular":
            return bwipp_datamatrixrectangular;
        case "datamatrixrectangularextension":
            return bwipp_datamatrixrectangularextension;
        case "dotcode":
            return bwipp_dotcode;
        case "ean13":
            return bwipp_ean13;
        case "ean13composite":
            return bwipp_ean13composite;
        case "ean14":
            return bwipp_ean14;
        case "ean2":
            return bwipp_ean2;
        case "ean5":
            return bwipp_ean5;
        case "ean8":
            return bwipp_ean8;
        case "ean8composite":
            return bwipp_ean8composite;
        case "flattermarken":
            return bwipp_flattermarken;
        case "gs1_128":
            return bwipp_gs1_128;
        case "gs1_128composite":
            return bwipp_gs1_128composite;
        case "gs1_cc":
            return bwipp_gs1_cc;
        case "gs1datamatrix":
            return bwipp_gs1datamatrix;
        case "gs1datamatrixrectangular":
            return bwipp_gs1datamatrixrectangular;
        case "gs1dldatamatrix":
            return bwipp_gs1dldatamatrix;
        case "gs1dlqrcode":
            return bwipp_gs1dlqrcode;
        case "gs1dotcode":
            return bwipp_gs1dotcode;
        case "gs1northamericancoupon":
            return bwipp_gs1northamericancoupon;
        case "gs1qrcode":
            return bwipp_gs1qrcode;
        case "hanxin":
            return bwipp_hanxin;
        case "hibcazteccode":
            return bwipp_hibcazteccode;
        case "hibccodablockf":
            return bwipp_hibccodablockf;
        case "hibccode128":
            return bwipp_hibccode128;
        case "hibccode39":
            return bwipp_hibccode39;
        case "hibcdatamatrix":
            return bwipp_hibcdatamatrix;
        case "hibcdatamatrixrectangular":
            return bwipp_hibcdatamatrixrectangular;
        case "hibcmicropdf417":
            return bwipp_hibcmicropdf417;
        case "hibcpdf417":
            return bwipp_hibcpdf417;
        case "hibcqrcode":
            return bwipp_hibcqrcode;
        case "iata2of5":
            return bwipp_iata2of5;
        case "identcode":
            return bwipp_identcode;
        case "industrial2of5":
            return bwipp_industrial2of5;
        case "interleaved2of5":
            return bwipp_interleaved2of5;
        case "isbn":
            return bwipp_isbn;
        case "ismn":
            return bwipp_ismn;
        case "issn":
            return bwipp_issn;
        case "itf14":
            return bwipp_itf14;
        case "jabcode":
            return bwipp_jabcode;
        case "japanpost":
            return bwipp_japanpost;
        case "kix":
            return bwipp_kix;
        case "leitcode":
            return bwipp_leitcode;
        case "mailmark":
            return bwipp_mailmark;
        case "mands":
            return bwipp_mands;
        case "matrix2of5":
            return bwipp_matrix2of5;
        case "maxicode":
            return bwipp_maxicode;
        case "micropdf417":
            return bwipp_micropdf417;
        case "microqrcode":
            return bwipp_microqrcode;
        case "msi":
            return bwipp_msi;
        case "onecode":
            return bwipp_onecode;
        case "pdf417":
            return bwipp_pdf417;
        case "pdf417compact":
            return bwipp_pdf417compact;
        case "pharmacode":
            return bwipp_pharmacode;
        case "pharmacode2":
            return bwipp_pharmacode2;
        case "planet":
            return bwipp_planet;
        case "plessey":
            return bwipp_plessey;
        case "posicode":
            return bwipp_posicode;
        case "postnet":
            return bwipp_postnet;
        case "pzn":
            return bwipp_pzn;
        case "qrcode":
            return bwipp_qrcode;
        case "rationalizedCodabar":
            return bwipp_rationalizedCodabar;
        case "raw":
            return bwipp_raw;
        case "rectangularmicroqrcode":
            return bwipp_rectangularmicroqrcode;
        case "royalmail":
            return bwipp_royalmail;
        case "sscc18":
            return bwipp_sscc18;
        case "swissqrcode":
            return bwipp_swissqrcode;
        case "symbol":
            return bwipp_symbol;
        case "telepen":
            return bwipp_telepen;
        case "telepennumeric":
            return bwipp_telepennumeric;
        case "ultracode":
            return bwipp_ultracode;
        case "upca":
            return bwipp_upca;
        case "upcacomposite":
            return bwipp_upcacomposite;
        case "upce":
            return bwipp_upce;
        case "upcecomposite":
            return bwipp_upcecomposite;
    }
    throw new Error("bwipp.unknownEncoder: unknown encoder name: " + symbol);
}
var BWIPP_VERSION = '2023-04-03';
// file : bwipjs.js
//
// Graphics-context interface to the BWIPP cross-compiled code

var BWIPJS = (function() {

// Math.floor(), etc. are notoriously slow.  Caching seems to help.
var floor = Math.floor;
var round = Math.round;
var ceil  = Math.ceil;
var min	  = Math.min;
var max	  = Math.max;

function BWIPJS(drawing) {
	if (this.constructor !== BWIPJS) {
		return new BWIPJS(drawing);
	}
	this.gstk	 = [];		// Graphics save/restore stack
	this.cmds	 = [];		// Graphics primitives to replay when rendering
	this.drawing = drawing;	// Drawing interface

	this.reset();

	// Drawing surface bounding box
	this.minx = this.miny = Infinity;
	this.maxx = this.maxy = -Infinity;
};

// All graphics state that must be saved/restored is given a prefix of g_
BWIPJS.prototype.reset = function() {
	// Current Transform Matrix - since we don't do rotation, we can fake
	// the matrix math
	this.g_tdx	= 0;		// CTM x-offset
	this.g_tdy	= 0;		// CTM y-offset
	this.g_tsx	= 1;		// CTM x-scale factor
	this.g_tsy	= 1;		// CTM y-scale factor

	this.g_posx	= 0;		// current x position
	this.g_posy	= 0;		// current y position
	this.g_penw	= 1;		// current line/pen width
	this.g_path	= [];		// current path
	this.g_font	= null;		// current font object
	this.g_rgb  = [0,0,0];	// current color (black)
    this.g_clip = false;    // clip region active
};
BWIPJS.prototype.save = function() {
	// clone all g_ properties
	var ctx = {};
	for (var id in this) {
		if (id.indexOf('g_') == 0) {
			ctx[id] = clone(this[id]);
		}
	}
	this.gstk.push(ctx);

	// Perform a deep clone of the graphics state properties
	function clone(v) {
		if (v instanceof Array) {
			var t = [];
			for (var i = 0; i < v.length; i++)
				t[i] = clone(v[i]);
			return t;
		}
		if (v instanceof Object) {
			var t = {};
			for (var id in v)
				t[id] = clone(v[id]);
			return t;
		}
		return v;
	}
};
BWIPJS.prototype.restore = function() {
	if (!this.gstk.length) {
		throw new Error('grestore: stack underflow');
	}
	var ctx  = this.gstk.pop();
    var self = this;
    if (this.g_clip && !ctx.g_clip) {
        this.cmds.push(function() {
                self.drawing.unclip();
            });
    }
	for (var id in ctx) {
		this[id] = ctx[id];
	}
};
// Per the postscript spec:
//	As discussed in Section 4.4.1, Current Path, points entered into a path
//	are immediately converted to device coordinates by the current
//	transformation matrix (CTM); subsequent modifications to the CTM do not
//	affect existing points.  `currentpoint` computes the user space
//	coordinates corresponding to the current point according to the current
//	value of the CTM. Thus, if a current point is set and then the CTM is
//	changed, the coordinates returned by currentpoint will be different
//	from those that were originally specified for the point. 
BWIPJS.prototype.currpos = function() {
	return { x:(this.g_posx-this.g_tdx)/this.g_tsx,
			 y:(this.g_posy-this.g_tdy)/this.g_tsy
		};
};
BWIPJS.prototype.currfont = function() {
	return this.g_font;
};
BWIPJS.prototype.translate = function(x, y) {
	this.g_tdx = this.g_tsx * x;
	this.g_tdy = this.g_tsy * y;
};
BWIPJS.prototype.scale = function(x, y) {
	this.g_tsx *= x;
	this.g_tsy *= y;
	var sxy = this.drawing.scale(this.g_tsx, this.g_tsy);
	if (sxy && sxy[0] && sxy[1]) {
		this.g_tsx = sxy[0];
		this.g_tsy = sxy[1];
	}
};
BWIPJS.prototype.setlinewidth = function(w) {
	this.g_penw = w;
};
BWIPJS.prototype.selectfont = function(f, z) {
	this.g_font = { FontName:this.jsstring(f), FontSize:+z };
};
BWIPJS.prototype.getfont = function() {
	return this.g_font.FontName;
};
// Special function for converting a Uint8Array string to string.
BWIPJS.prototype.jsstring = function(s) {
	if (s instanceof Uint8Array) {
		// Postscript (like C) treats nul-char as end of string.
		//for (var i = 0, l = s.length; i < l && s[i]; i++);
		//if (i < l) {
		//	return String.fromCharCode.apply(null,s.subarray(0, i));
		//}
		return String.fromCharCode.apply(null,s)
	}
	return ''+s;
};
// Special function to replace setanycolor in BWIPP.
// Converts a string of hex digits either rgb, rrggbb or ccmmyykk.
// Or CSS-style #rgb and #rrggbb.
BWIPJS.prototype.setcolor = function(s) {
	if (s instanceof Uint8Array) {
		s = this.jsstring(s);
	}
    if (!s) {
        return;
    }
    if (!/^(?:#?[0-9a-fA-F]{3}(?:[0-9a-fA-F]{3})?|[0-9a-fA-F]{8})$/.test(s)) {
        throw new Error('bwip-js: invalid color: ' + s); 
    }
    if (s[0] == '#') {
        s = s.substr(1);
    }
    if (s.length == 3) {
		var r = parseInt(s[0], 16);
		var g = parseInt(s[1], 16);
		var b = parseInt(s[2], 16);
		this.g_rgb = [ r<<4|r, g<<4|g, b<<4|b ];
    } else if (s.length == 6) {
		var r = parseInt(s.substr(0,2), 16);
		var g = parseInt(s.substr(2,2), 16);
		var b = parseInt(s.substr(4,2), 16);
		this.g_rgb = [ r, g, b ];
	} else {
		var c = parseInt(s.substr(0,2), 16) / 255;
		var m = parseInt(s.substr(2,2), 16) / 255;
		var y = parseInt(s.substr(4,2), 16) / 255;
		var k = parseInt(s.substr(6,2), 16) / 255;
		var r = round((1-c) * (1-k) * 255);
		var g = round((1-m) * (1-k) * 255);
		var b = round((1-y) * (1-k) * 255);
		this.g_rgb = [ r, g, b ];
    }
};
// Used only by swissqrcode
BWIPJS.prototype.setrgbcolor = function(r,g,b) {
    this.g_rgb = [ r, g, b ];
};
// Returns the current rgb values as a 'RRGGBB'
BWIPJS.prototype.getRGB = function() {
	var r = this.g_rgb[0].toString(16);
	var g = this.g_rgb[1].toString(16);
	var b = this.g_rgb[2].toString(16);
	return '00'.substr(r.length) + r + '00'.substr(g.length) + g + '00'.substr(b.length) + b;
};
BWIPJS.prototype.newpath = function() {
	this.g_path = [];
};
BWIPJS.prototype.closepath = function() {
	var path = this.g_path;
	var plen = path.length;
	if (!plen) return;

	var f = plen-1;
	for ( ; f >= 0 && path[f].op == 'l'; f--);
	f++;
	if (f < plen-1) {
		var poly = [];
		var xmin = Infinity;
		var ymin = Infinity;
		var xmax = -Infinity;
		var ymax = -Infinity;
		for (var i = f; i < plen; i++) {
			var a = path[i];
			poly.push([ a.x0, a.y0 ]);
			if (xmin > a.x0) xmin = a.x0;
			if (xmax < a.x0) xmax = a.x0;
			if (ymin > a.y0) ymin = a.y0;
			if (ymax < a.y0) ymax = a.y0;
		}
		var a = path[plen-1];
		var b = path[f];
		if (a.x1 != b.x0 || a.y1 != b.y0) {
			poly.push([ a.x1, a.y1 ]);
			if (xmin > a.x1) xmin = a.x1;
			if (xmax < a.x1) xmax = a.x1;
			if (ymin > a.y1) ymin = a.y1;
			if (ymax < a.y1) ymax = a.y1;
		}
		path.splice(f, plen-f,
					{ op:'p', x0:xmin, y0:ymin, x1:xmax, y1:ymax, poly:poly });
	} else {
		path.push({ op:'c' });
	}
};
BWIPJS.prototype.moveto = function(x,y) {
	this.g_posx = this.g_tdx + this.g_tsx * x;
	this.g_posy = this.g_tdy + this.g_tsy * y;
};
BWIPJS.prototype.rmoveto = function(x,y) {
	this.g_posx += this.g_tsx * x;
	this.g_posy += this.g_tsy * y;
};
BWIPJS.prototype.lineto = function(x,y) {
	var x0 = round(this.g_posx);
	var y0 = round(this.g_posy);
	this.g_posx = this.g_tdx + this.g_tsx * x;
	this.g_posy = this.g_tdy + this.g_tsy * y;
	var x1 = round(this.g_posx);
	var y1 = round(this.g_posy);

	this.g_path.push({ op:'l', x0:x0, y0:y0, x1:x1, y1:y1 });
};
BWIPJS.prototype.rlineto = function(x,y) {
	var x0 = round(this.g_posx);
	var y0 = round(this.g_posy);
	this.g_posx += this.g_tsx * x;
	this.g_posy += this.g_tsy * y;
	var x1 = round(this.g_posx);
	var y1 = round(this.g_posy);

	this.g_path.push({ op:'l', x0:x0, y0:y0, x1:x1, y1:y1 });
};
// implements both arc and arcn
BWIPJS.prototype.arc = function(x,y,r,sa,ea,ccw) {
	if (sa == ea) {
		return;
	}
	// For now, we only implement full circles...
	if (sa != 0 && sa != 360 || ea != 0 && ea != 360) {
		throw new Error('arc: not a full circle (' + sa + ',' + ea + ')');
	}

	x = this.g_tdx + this.g_tsx * x;
	y = this.g_tdy + this.g_tsy * y;

	// e == ellipse
	var rx = r * this.g_tsx;
	var ry = r * this.g_tsy;
	this.g_path.push({ op:'e', x0:x-rx, y0:y-ry, x1:x+rx, y1:y+ry,
								x:x, y:y, rx:rx, ry:ry, sa:sa, ea:ea, ccw:ccw });
};
BWIPJS.prototype.stringwidth = function(str) {
	var tsx  = this.g_tsx;
	var tsy  = this.g_tsy;
	var size = +this.g_font.FontSize || 10;

	// The string can be either a uint8-string or regular string
	str = this.toUCS2(this.jsstring(str));

	var bbox = this.drawing.measure(str, this.g_font.FontName, size*tsx, size*tsy);

	return { w:bbox.width/tsx, h:(bbox.ascent+bbox.descent)/tsy,
			 a:bbox.ascent/tsy, d:bbox.descent/tsy };
};
BWIPJS.prototype.charpath = function(str, b) {
	var sw = this.stringwidth(str);

	// Emulate the char-path by placing a rectangle around it
	this.rlineto(0, sw.a);
	this.rlineto(sw.w, 0);
	this.rlineto(0, -sw.h);
};
BWIPJS.prototype.pathbbox = function() {
	if (!this.g_path.length)	throw new Error('pathbbox: --nocurrentpoint--');
	var path = this.g_path;
	var llx = Infinity;
	var lly = Infinity;
	var urx = -Infinity;
	var ury = -Infinity;
	for (var i = 0; i < path.length; i++) {
		var a = path[i];
		if (a.op == 'c') {
			continue;
		}
		if (a.x0 < a.x1) {
			if (llx > a.x0) llx = a.x0;
			if (urx < a.x1) urx = a.x1;
		} else {
			if (llx > a.x1) llx = a.x1;
			if (urx < a.x0) urx = a.x0;
		}
		if (a.y0 < a.y1) {
			if (lly > a.y0) lly = a.y0;
			if (ury < a.y1) ury = a.y1;
		} else {
			if (lly > a.y1) lly = a.y1;
			if (ury < a.y0) ury = a.y0;
		}
	}

	// Convert to user-space coordinates
	var rv = {	llx:(llx-this.g_tdx)/this.g_tsx,
				lly:(lly-this.g_tdy)/this.g_tsy,
				urx:(urx-this.g_tdx)/this.g_tsx,
				ury:(ury-this.g_tdy)/this.g_tsy };
	return rv;
};
// Tranforms the pts array to standard (not y-inverted), unscalled values.
BWIPJS.prototype.transform = function(pts) {
	var minx = this.minx;
	var maxy = this.maxy;

	for (var i = 0; i < pts.length; i++) {
		var pt = pts[i];
		pt[0] = pt[0] - minx;
		pt[1] = maxy - pt[1];
	}
};
BWIPJS.prototype.stroke = function() {
	var tsx  = this.g_tsx;
	var tsy  = this.g_tsy;
	var path = this.g_path;
	var rgb  = this.getRGB();
	this.g_path = [];

	// This is a "super majority" round i.e. if over .66 round up.
	var penw = floor(this.g_penw * tsx + 0.66);
	var penh = floor(this.g_penw * tsy + 0.66);

	// Calculate the bounding boxes
	var nlines = 0, npolys = 0;
	for (var i = 0; i < path.length; i++) {
		var a = path[i];
		if (a.op == 'l') {
			// We only stroke vertical and horizontal lines.  Complex shapes are
			// always filled.
			if (a.x0 != a.x1 && a.y0 != a.y1) {
				throw new Error('stroke: --not-orthogonal--');
			}
			var x0 = a.x0;
			var y0 = a.y0;
			var x1 = a.x1;
			var y1 = a.y1;

			// Half widths (may be factional)
			var penw2 = penw/2;
			var penh2 = penh/2;

			if (x0 > x1) { var t = x0; x0 = x1; x1 = t; }
			if (y0 > y1) { var t = y0; y0 = y1; y1 = t; }
			if (x0 == x1) {
				this.bbox(x0-penw2, y0, x0+penw-penw2-1, y1); 	// vertical line
			} else {
				this.bbox(x0, y0-penh+penh2+1, x1, y1+penh2);	// horizontal line
			}
			nlines++;
		} else if (a.op == 'p') {
			// Closed (rectangular) poly (border around the barcode)
			var minx = Infinity;
			var miny = Infinity;
			var maxx = -Infinity;
			var maxy = -Infinity;
			var pts  = a.poly;
			if (pts.length != 4) {
				throw new Error('stroke: --not-a-rect--');
			}
			for (var i = 0, j = pts.length-1; i < pts.length; j = i++) {
				var xj = pts[j][0];
				var yj = pts[j][1];
				var xi = pts[i][0];
				var yi = pts[i][1];

				if (xi != xj && yi != yj) {
					throw new Error('stroke: --not-orthogonal--');
				}

				if (xi < minx) minx = xi;
				if (xi > maxx) maxx = xi;
				if (yi < miny) miny = yi;
				if (yi > maxy) maxy = yi;
			}

			// Half widths (integer)
			var penw2 = ceil(penw/2);
			var penh2 = ceil(penh/2);

			// We render these as two polygons plus a fill.
			// When border width is odd, allocate the bigger half to the outside.
			this.bbox(minx-penw2, miny-penh2, maxx+penw2, maxy+penh2);
			npolys++;
		} else {
			throw new Error('stroke: --not-a-line--');
		}
	}

	// Draw the lines
	var self = this;
	this.cmds.push(function() {
		// Half widths (big half and remaining half)
		var bigw2 = ceil(penw/2);
		var bigh2 = ceil(penh/2);
		var remw2 = penw - bigw2;
		var remh2 = penh - bigh2;

		for (var i = 0; i < path.length; i++) {
			var a = path[i]
			if (a.op == 'l') {
				var pts = [ [ a.x0, a.y0 ], [ a.x1, a.y1 ] ];
				self.transform(pts);
				self.drawing.line(pts[0][0], pts[0][1], pts[1][0], pts[1][1],
							a.x0 == a.x1 ? penw : penh, rgb);
				self.fill(rgb);
			} else {
				var pts = a.poly;
				self.transform(pts);
				var x0 = min(pts[0][0], pts[2][0]);
				var x1 = max(pts[0][0], pts[2][0]);
				var y0 = min(pts[0][1], pts[2][1]);
				var y1 = max(pts[0][1], pts[2][1]);

				// Top and left edges are "inside" the polygon.
				// Bottom and right edges are outside.
				self.drawing.polygon([
						[ x0-bigw2, y0-bigh2 ],
						[ x0-bigw2, y1+bigh2+1 ],
						[ x1+bigw2+1, y1+bigh2+1 ],
						[ x1+bigw2+1, y0-bigh2 ]
					]);
				self.drawing.polygon([
						[ x0+remw2, y0+remh2 ],
						[ x0+remw2, y1-remh2+1 ],
						[ x1-remw2+1, y1-remh2+1 ],
						[ x1-remw2+1, y0+remh2 ],
					]);
				self.drawing.fill(rgb);
			}
		}
	});
};
BWIPJS.prototype.fill = function() {
	var path = this.g_path;
	var rgb  = this.getRGB();
	this.g_path = [];

	// Calculate the bounding boxes
	for (var p = 0; p < path.length; p++) {
		var a = path[p];
		if (a.op == 'p') {  // polygon
			var minx = Infinity;
			var miny = Infinity;
			var maxx = -Infinity;
			var maxy = -Infinity;
			var pts  = a.poly;
			for (var i = 0; i < pts.length; i++) {
				var xi = pts[i][0];
				var yi = pts[i][1];

				if (xi < minx) minx = xi;
				if (xi > maxx) maxx = xi;
				if (yi < miny) miny = yi;
				if (yi > maxy) maxy = yi;
			}
			// With polygons, the right and bottom edges are "outside" and do not
			// contribute to the bounding box.  But we are in postscript inverted-y
			// mode.
			this.bbox(minx, miny+1, maxx-1, maxy);
		} else if (a.op == 'e') {	// ellipse
			this.bbox(a.x - a.rx, a.y - a.ry, a.x + a.rx, a.y + a.ry);
		} else {
			throw new Error('fill: --not-a-polygon--');
		}
	}

	// Render the poly
	var self = this;
	this.cmds.push(function() {
		for (var i = 0; i < path.length; i++) {
			var a = path[i];
			if (a.op == 'p') {
				var pts = a.poly
				self.transform(pts);
				self.drawing.polygon(pts);
			} else if (a.op == 'e') {
				var pts = [ [ a.x, a.y ] ];
				self.transform(pts);
				self.drawing.ellipse(pts[0][0], pts[0][1], a.rx, a.ry, a.ccw);
			}
		}
		self.drawing.fill(rgb);
	});
};
BWIPJS.prototype.clip = function() {
	var path = this.g_path;
	this.g_path = [];
    this.g_clip = true;

	var self = this;
	this.cmds.push(function() {
        var polys = [];
		for (var i = 0; i < path.length; i++) {
			var a = path[i];
			if (a.op == 'p') {
				var pts = a.poly
				self.transform(pts);
                polys.push(pts);
			} else {
                throw new Error('clip: only polygon regions supported');
			}
		}
		self.drawing.clip(polys);
	});
};

// The pix array is in standard (not y-inverted postscript) orientation.
BWIPJS.prototype.maxicode = function(pix) {
	var tsx = this.g_tsx;
	var tsy = this.g_tsy;
	var rgb = this.getRGB();

	// Module width.  Module height is an integer multiple of tsy.
	var twidth = 1.04 * tsx * 100;
	var mwidth = (twidth / 30)|0;
	if (twidth - (mwidth*30-1) > 9) {
		mwidth++;
	}

	// Dimensions needed for plotting the hexagons.  These must be integer values.
	var w, h, wgap, hgap;
	// if (opts.??? ) {
	//	// Create a one or two pixel gap
	//	wgap = (mwidth & 1) ? 1 : 2;
	//	hgap = 1;
	//	w = mwidth - gap;
	//	h = 4 * tsy;
	// } else {
		// Create a 1/8mm gap
		wgap = (tsx/2)|0;
		hgap = (tsy/2)|0;
		w = mwidth - wgap;
		if (w & 1) {
			w--;
		}
		h = ((4*tsy)|0) - hgap;
	//}

	// These must be integer values
	var w2 = w / 2 - 1;			// half width
	var qh = ((w2+1) / 2)|0;	// quarter height
	var vh = h - 2 - 2 * qh;	// side height

	// Bounding box
	this.bbox(0, 0, mwidth*30 - wgap, tsy * 3 * 32 + tsy * 4 - hgap);

	// Render the elements
	var self = this;
	this.cmds.push(function() {
		// Draw the hexagons
		for (var i = 0; i < pix.length; i++) {
			var c = pix[i];
			var x = c % 30;
			var y = (c / 30)|0;

			// Adjust x,y to the top of hexagon
			x *= mwidth;
			x += (y & 1) ? mwidth : mwidth/2;
			x = x|0;

			y = 33 - y;	// invert for postscript notation
			y *= tsy * 3;
			y += tsy * 2 - h/2;
			y = y|0;
			
			// Build bottom up so the drawing is top-down.
			var pts = [ [ x-0.5, y-- ] ]; 
			y -= qh-1;
			pts.push([x-1-w2, y--]);
			y -= vh;
			pts.push([x-1-w2, y--]);
			y -= qh-1;
			pts.push([x-0.5, y++]);
			y += qh-1;
			pts.push([x+w2, y++]);
			y += vh;
			pts.push([x+w2, y++]);

			self.transform(pts);
			self.drawing.hexagon(pts, rgb);
		}
		self.drawing.fill(rgb);


		// Draw the rings
		var x = (14 * mwidth + mwidth/2 + 0.01)|0;
		var y = ((12 * 4 + 3) * tsy - qh/2 + 0.01)|0;
		self.drawing.ellipse(x, y, (0.5774*3.5*tsx+0.01)|0, (0.5774*3.5*tsy+0.01)|0, true);
		self.drawing.ellipse(x, y, (1.3359*3.5*tsx+0.01)|0, (1.3359*3.5*tsy+0.01)|0, false);
		self.drawing.fill(rgb);
		self.drawing.ellipse(x, y, (2.1058*3.5*tsx+0.01)|0, (2.1058*3.5*tsy+0.01)|0, true);
		self.drawing.ellipse(x, y, (2.8644*3.5*tsx+0.01)|0, (2.8644*3.5*tsy+0.01)|0, false);
		self.drawing.fill(rgb);
		self.drawing.ellipse(x, y, (3.6229*3.5*tsx+0.01)|0, (3.6229*3.5*tsy+0.01)|0, true);
		self.drawing.ellipse(x, y, (4.3814*3.5*tsx+0.01)|0, (4.3814*3.5*tsy+0.01)|0, false);
		self.drawing.fill(rgb);

	});
};
// UTF-8 to UCS-2 (no surrogates)
BWIPJS.prototype.toUCS2 = function(str) {
    return str.replace(/[\xc0-\xdf][\x80-\xbf]|[\xe0-\xff][\x80-\xbf]{2}/g,
                      function(s) {
                          var code;
                          if (s.length == 2) {
                              code = ((s.charCodeAt(0)&0x1f)<<6)|
                                     (s.charCodeAt(1)&0x3f);
                          } else {
                              code = ((s.charCodeAt(0)&0x0f)<<12)|
                                     ((s.charCodeAt(1)&0x3f)<<6)|
                                     (s.charCodeAt(2)&0x3f);
                          }
                          return String.fromCharCode(code);
                      });
};
// dx,dy are inter-character gaps
BWIPJS.prototype.show = function(str, dx, dy) {
	if (!str.length) {
		return;
	}

	// Capture current graphics state
	var tsx	 = this.g_tsx;
	var tsy  = this.g_tsy;
	var name = this.g_font.FontName || 'OCR-B';
	var size = (this.g_font.FontSize || 10);
	var szx  = size * tsx;
	var szy  = size * tsy;
	var posx = this.g_posx;
	var posy = this.g_posy;
	var rgb  = this.getRGB();

	// The string can be either a uint8-string or regular string.
	str = this.toUCS2(this.jsstring(str));

	// Convert dx,dy to device space
	dx = tsx * dx || 0;
	dy = tsy * dy || 0;

	// Bounding box.
	var base = posy + dy;
	var bbox = this.drawing.measure(str, name, szx, szy);
	var width = bbox.width + (str.length-1) * dx;
	this.bbox(posx, base-bbox.descent+1, posx+width-1, base+bbox.ascent);
	this.g_posx += width;

	var self = this;
	self.cmds.push(function() {
		// self.transform()
		var x = posx - self.minx;
		var y = self.maxy - posy;
		self.drawing.text(x, y, str, rgb, { name:name, width:szx, height:szy, dx:dx });
	});
};
// drawing surface bounding box
BWIPJS.prototype.bbox = function(x0, y0, x1, y1) {
	if (x0 > x1) { var t = x0; x0 = x1; x1 = t; }
	if (y0 > y1) { var t = y0; y0 = y1; y1 = t; }

	x0 = floor(x0);
	y0 = floor(y0);
	x1 = ceil(x1);
	y1 = ceil(y1);

	if (this.minx > x0) this.minx = x0;
    if (this.maxx < x1)	this.maxx = x1;
    if (this.miny > y0)	this.miny = y0;
	if (this.maxy < y1)	this.maxy = y1;
};
BWIPJS.prototype.render = function() {
	if (this.minx === Infinity) {
        // Most likely, `dontdraw` was set in the options
        return false;
	}
	// Draw the image
	this.drawing.init(this.maxx - this.minx + 1, this.maxy - this.miny + 1,
					  this.g_tsx, this.g_tsy);
	for (var i = 0, l = this.cmds.length; i < l; i++) {
		this.cmds[i]();
	}
	return this.drawing.end();
};

return BWIPJS;
})();	// BWIPJS closure
// drawing-builtin.js
//
// The aliased (except the fonts) graphics used by drawing-canvas.js and
// drawing-zlibpng.js
//
// All x,y and lengths are integer values.
//
// For the methods that take a color `rgb` parameter, the value is always a
// string with format RRGGBB.
function DrawingBuiltin() {
	var floor = Math.floor;

	// Unrolled x,y rotate/translate matrix
	var tx0 = 0, tx1 = 0, tx2 = 0, tx3 = 0;
	var ty0 = 0, ty1 = 0, ty2 = 0, ty3 = 0;

    var opts;                   // see setopts()
	var gs_image, gs_rowbyte;	// rowbyte will be 1 for png's, 0 for canvas
	var gs_width, gs_height;	// image size, in pixels
	var gs_dx, gs_dy;			// x,y translate (padding)
	var gs_r, gs_g, gs_b;		// rgb
	var gs_xymap;				// edge map
    var gs_xyclip;              // clip region map (similar to xymap)

	return {
        // setopts() is called after the options are fixed-up/normalized,
        // but before calling into BWIPP.
        // This method allows omitting the options in the constructor call.
        // The method is optional.
        setopts(options) {
            opts = options;
        },

		// Ensure compliant bar codes by always using integer scaling factors.
		scale : function(sx, sy) {
            // swissqrcode requires clipping and drawing that are not scaled to the
            // the barcode module size.
            if (opts.bcid == 'swissqrcode') {
                return [ sx, sy ];
            } else {
			    return [ (sx|0)||1, (sy|0)||1 ];
            }
		},

		// Measure text.  This and scale() are the only drawing primitives that
		// are called before init().
		//
		// `font` is the font name typically OCR-A or OCR-B.
		// `fwidth` and `fheight` are the requested font cell size.  They will
		// usually be the same, except when the scaling is not symetric.
		measure : function(str, font, fwidth, fheight) {
			fwidth = fwidth|0;
			fheight = fheight|0;

			var fontid = FontLib.lookup(font);
			var width = 0;
			var ascent = 0;
			var descent = 0;
			for (var i = 0, l = str.length; i < l; i++) {
				var ch = str.charCodeAt(i);
				var glyph = FontLib.getglyph(fontid, ch, fwidth, fheight);

				ascent  = Math.max(ascent, glyph.top);
				descent = Math.max(descent, glyph.height - glyph.top);

				if (i == l-1) {
					width += glyph.left + glyph.width;
				} else {
					width += glyph.advance;
				}
			}
			return { width:width, ascent:ascent, descent:descent };
		},

		// width and height represent the maximum bounding box the graphics will occupy.
		// The dimensions are for an unrotated rendering.  Adjust as necessary.
		init : function(width, height) {
			// Add in the effects of padding.  These are always set before the
			// drawing constructor is called.
			var padl = opts.paddingleft;
			var padr = opts.paddingright;
			var padt = opts.paddingtop;
			var padb = opts.paddingbottom;
			var rot  = opts.rotate || 'N';

			width  += padl + padr;
			height += padt + padb;

			if (+opts.sizelimit && +opts.sizelimit < width * height) {
				throw new Error('Image size over limit');
			}

			// Transform indexes are: x, y, w, h
			switch (rot) {
			// tx = w-y, ty = x
			case 'R': tx1 = -1; tx2 = 1; ty0 = 1; break;
			// tx = w-x, ty = h-y
			case 'I': tx0 = -1; tx2 = 1; ty1 = -1; ty3 = 1; break;
			// tx = y, ty = h-x
			case 'L': tx1 = 1; ty0 = -1; ty3 = 1; break;
			// tx = x, ty = y
			default:  tx0 = ty1 = 1; break;
			}

			// Setup the graphics state
			var swap = rot == 'L' || rot == 'R';
			gs_width  = swap ? height : width;
			gs_height = swap ? width : height;
			gs_dx = padl;
			gs_dy = padt;
			gs_xymap = [];
			gs_xymap.min = Infinity;
            gs_xyclip = null;
			gs_r = gs_g = gs_b = 0;

			// Get the rgba image from the constructor
			var res = this.image(gs_width, gs_height);
			gs_image   = res.buffer;
			gs_rowbyte = res.ispng ? 1 : 0;
		},
		// Unconnected stroked lines are used to draw the bars in linear barcodes;
		// and the border around a linear barcode (e.g. ITF-14)
		// No line cap should be applied.  These lines are always orthogonal.
		line : function(x0, y0, x1, y1, lw, rgb) {
			x0 = x0|0;
			y0 = y0|0;
			x1 = x1|0;
			y1 = y1|0;

			// Most linear barcodes, the line width will be integral.  The exceptions
			// are variable width barcodes (e.g. code39) and the postal 4-state codes.
			lw = Math.round(lw) || 1;

			if (y1 < y0) { var t = y0; y0 = y1; y1 = t; }
			if (x1 < x0) { var t = x0; x0 = x1; x1 = t; }

			gs_r = parseInt(rgb.substr(0,2), 16);
			gs_g = parseInt(rgb.substr(2,2), 16);
			gs_b = parseInt(rgb.substr(4,2), 16);

			// Horizontal or vertical line?
			var w2 = (lw/2)|0;
			if (x0 == x1) {
				// Vertical line
				x0 = x0 - lw + w2;  // big half
				x1 = x1 + w2 - 1;   // small half
			} else {
				// Horizontal line (inverted halves)
				y0 = y0 - w2;
				y1 = y1 + lw - w2 - 1;
			}
			for (var y = y0; y <= y1; y++) {
				for (var x = x0; x <= x1; x++) {
					set(x, y, 255);
				}
			}
		},

		// Polygons are used to draw the connected regions in a 2d barcode.
		// These will always be unstroked, filled, orthogonal shapes.
        // 
		// You will see a series of polygon() calls, followed by a fill().
		polygon : function(pts) {
			var npts = pts.length;
			for (var j = npts-1, i = 0; i < npts; j = i++) {
				if (pts[j][0] == pts[i][0]) {
					// Vertical lines do not get their end points. End points
					// are added by the horizontal line logic.
					var xj = pts[j][0]|0;	// i or j, doesn't matter
					var yj = pts[j][1]|0;
					var yi = pts[i][1]|0;
					if (yj > yi) {
						for (var y = yi+1; y < yj; y++) {
							addPoint(xj, y);
						}
					} else {
						for (var y = yj+1; y < yi; y++) {
							addPoint(xj, y);
						}
					}
				} else {
					var xj = pts[j][0]|0;
					var xi = pts[i][0]|0;
					var yj = pts[j][1]|0;	// i or j, doesn't matter

					// Horizontal lines are tricky.  As a rule, top lines get filled,
					// bottom lines do not (similar to how left edges get filled and
					// right edges do not).
					//
					// Where it gets complex is deciding whether the line actually
					// adds edges.  There are cases where a horizontal line does
					// not add anything to the scanline plotting.  And it doesn't
					// actually matter whether the line is a top or bottom edge,
					// the logic is the same.
					//
					// A left edge is added if the edge to its left is below.
					// A right edge is added if the edge to its right is below.
					if (xj < xi) {
						var yl = pts[j == 0 ? npts-1 : j-1][1];	// left edge
						var yr = pts[i == npts-1 ? 0 : i+1][1];	// right edge
						if (yl > yj) {
							addPoint(xj, yj);
						}
						if (yr > yj) {
							addPoint(xi, yj);
						}
					} else {
						var yl = pts[i == npts-1 ? 0 : i+1][1];	// left edge
						var yr = pts[j == 0 ? npts-1 : j-1][1];	// right edge
						if (yl > yj) {
							addPoint(xi, yj);
						}
						if (yr > yj) {
							addPoint(xj, yj);
						}
					}
				}
			}
		},
		// An unstroked, filled hexagon used by maxicode.  You can choose to fill
		// each individually, or wait for the final fill().
		//
		// The hexagon is drawn from the top, counter-clockwise.
		//
		// The X-coordinate for the top and bottom points on the hexagon is always
		// .5 pixels.  We draw our hexagons with a 2 pixel flat top.
		//
		// All other points of the polygon/hexagon are guaranteed to be integer values.
		hexagon : function(pts, rgb) {
			var x = pts[0][0]|0;
			var y = pts[0][1]|0;
			var qh = (pts[1][1] - pts[0][1])|0;		// height of triangle (quarter height)
			var vh = (pts[2][1] - pts[1][1] - 1)|0;	// height of vertical side
			var xl = (pts[2][0])|0;					// left side
			var xr = (pts[4][0])|0;					// right side

			gs_r = parseInt(rgb.substr(0,2), 16);
			gs_g = parseInt(rgb.substr(2,2), 16);
			gs_b = parseInt(rgb.substr(4,2), 16);

			fillSegment(x, x+1, y++);
			for (var k = 1; k < qh; k++) {
				fillSegment(x-2*k, x+1+2*k, y++);
			}
			for (var k = 0; k <= vh; k++) {
				fillSegment(xl, xr, y++);
			}
			for (var k = qh-1; k >= 1; k--) {
				fillSegment(x-2*k, x+1+2*k, y++);
			}
			fillSegment(x, x+1, y);
		},
		// An unstroked, filled ellipse.  Used by dotcode and maxicode at present.
		// maxicode issues pairs of ellipse calls (one cw, one ccw) followed by a fill()
		// to create the bullseye rings.  dotcode issues all of its ellipses then a
		// fill().
		ellipse : function(x, y, rx, ry, ccw) {
			drawEllipse((x-rx)|0, (y-ry)|0, (x+rx)|0, (y+ry)|0, ccw);
		},
		// PostScript's default fill rule is non-zero but since there are never
        // intersecting regions, we use the easier to implement even-odd.
		fill : function(rgb) {
			gs_r = parseInt(rgb.substr(0,2), 16);
			gs_g = parseInt(rgb.substr(2,2), 16);
			gs_b = parseInt(rgb.substr(4,2), 16);

			evenodd();
			gs_xymap = [];
			gs_xymap.min = Infinity;
		},
        // Currently only used by swissqrcode.  The `polys` area is an array of
        // arrays of points.  Each array of points is identical to the `pts`
        // parameter passed to polygon().  The postscript default clipping rule,
        // like the fill rule, is even-odd winding.
        clip : function(polys) {
            if (!gs_xyclip) {
                gs_xyclip = [];
                gs_xyclip.min = Infinity;
            }
            // Swap out the xymap for the clip map so addPoint() works on it.
            var xymap = gs_xymap;
            gs_xymap = gs_xyclip;

            // Now just use the polygon() logic to fill in the clipping regions.
            for (var i = 0, l = polys.length; i < l; i++) {
                this.polygon(polys[i]);
            }

            // Restore
            gs_xymap = xymap;
        },
        unclip : function() {
            gs_xyclip = null;
        },
		// Draw text with optional inter-character spacing.  `y` is the baseline.
		// font is an object with properties { name, width, height, dx }
		// width and height are the font cell size.
		// dx is extra space requested between characters (usually zero).
		text : function(x, y, str, rgb, font) {
			x = x|0;
			y = y|0;

			gs_r = parseInt(rgb.substr(0,2), 16);
			gs_g = parseInt(rgb.substr(2,2), 16);
			gs_b = parseInt(rgb.substr(4,2), 16);

			var fontid  = FontLib.lookup(font.name);
			var fwidth  = font.width|0;
			var fheight = font.height|0;
			var dx      = font.dx|0;
			for (var k = 0; k < str.length; k++) {
				var ch = str.charCodeAt(k);
				var glyph = FontLib.getglyph(fontid, ch, fwidth, fheight);

				var gt = y - glyph.top;
				var gl = glyph.left;
				var gw = glyph.width;
				var gh = glyph.height;
				var gb = glyph.bytes;
				var go = glyph.offset;		// offset into bytes

				for (var i = 0; i < gw; i++) {
					for (var j = 0; j < gh; j++) {
						var a = gb[go + j * gw + i];
						if (a) {
							set(x+gl+i, gt+j, a);
						}
					}
				}
				x += glyph.advance + dx;
			}
		},
		// Called after all drawing is complete.
		end : function() {
		},
	};

	// This code is specialized to deal with two types of RGBA buffers:
	// - canvas style, which is true RGBA
	// - PNG style, which has a one-byte "filter code" prefixing each row.
	function set(x, y, a) {
        if (gs_xyclip && clipped(x, y)) {
            return;
        }
		// translate/rotate
		x += gs_dx;
		y += gs_dy;
		var tx = tx0 * x + tx1 * y + tx2 * (gs_width-1) + tx3 * (gs_height-1);
		var ty = ty0 * x + ty1 * y + ty2 * (gs_width-1) + ty3 * (gs_height-1);

		// https://en.wikipedia.org/wiki/Alpha_compositing
		var offs = (ty * gs_width + tx) * 4 + (ty+1) * gs_rowbyte;
		var dsta = gs_image[offs+3] / 255;
		var srca = a / 255;
		var inva = (1 - srca) * dsta;
		var outa = srca + inva;

		gs_image[offs+0] = ((gs_r * srca + gs_image[offs+0] * inva) / outa)|0;
		gs_image[offs+1] = ((gs_g * srca + gs_image[offs+1] * inva) / outa)|0;
		gs_image[offs+2] = ((gs_b * srca + gs_image[offs+2] * inva) / outa)|0;
		gs_image[offs+3] = (255 * outa)|0;
	}

	// Add a point on an edge to the scanline map.
	function addPoint(x, y) {
		if (gs_xymap.min > y) gs_xymap.min = y;
		if (!gs_xymap[y]) {
			gs_xymap[y] = [ x ];
		} else {
			gs_xymap[y].push(x);
		}
	}

	function fillSegment(x0, x1, y) {
		while (x0 <= x1) {
			set(x0++, y, 255);
		}
	}

	// even-odd fill
	//
	// This implementation is optimized for BWIPP's simple usage.
	// It is not a general purpose scanline fill.  It relies heavily on
	// polygon() creating the correct intersections.
	function evenodd() {
		var ymin = gs_xymap.min;
		var ymax = gs_xymap.length-1;

		for (var y = ymin; y <= ymax; y++) {
			var pts = gs_xymap[y];
			if (!pts) {
				continue
			}
			pts.sort(function(a, b) { return a - b; });

			var wn = false;
			var xl = 0;
			for (var n = 0, npts = pts.length; n < npts; n++) {
				var x = pts[n];
				if (wn) {
					fillSegment(xl, x-1, y);
				} else {
					xl = x;
				}
				wn = !wn;
			}
		}
	}

	function drawEllipse(x0, y0, x1, y1, dir) {
		x0 = x0|0;
		y0 = y0|0;
		x1 = x1|0;
		y1 = y1|0;

		var a = Math.abs(x1-x0);
		var b = Math.abs(y1-y0);
		var b1 = b & 1;
		var dx = 4*(1-a)*b*b;
		var dy = 4*(b1+1)*a*a;
		var err = dx + dy + b1*a*a;
		var e2;

		// Left and right edges
		var left = [], right = [];
		left.min = right.min = Infinity;

		if (x0 > x1) { x0 = x1; x1 += a; }
		if (y0 > y1) y0 = y1;
		y0 += ((b+1)/2)|0;
		y1 = y0 - b1;
		a *= 8*a; b1 = 8*b*b;

		do {
			maxedge(right, x1, y0);	// 1st quadrant
			minedge(left, x0, y0);	// 2nd quadrant
			minedge(left, x0, y1);	// 3rd quadrant
			maxedge(right, x1, y1);	// 4th quadrant
			e2 = 2*err;
			if (e2 >= dx) { x0++; x1--; dx += b1; err += dx; }
			if (e2 <= dy) { y0++; y1--; dy += a;  err += dy; }
		} while (x0 <= x1);

		while (y0-y1 < b) {	// too early stop of flat ellipse
			maxedge(right, x1+1, y0);
			minedge(left, x0-1, y0++);
			minedge(left, x0-1, y1);
			maxedge(right, x1+1, y1--);
		}

		for (var y = left.min, max = left.length-1; y <= max; y++) {
			addPoint(left[y], y);
		}
		// The points we calculated are "inside".  The fill algorithm excludes 
		// right edges, so +1 on each x.
		for (var y = right.min, max = right.length-1; y <= max; y++) {
			addPoint(right[y]+1, y);
		}

		function minedge(e, x, y) {
			if (e.min > y) e.min = y;
			var ey = e[y];
			if (ey == null || ey > x) {
				e[y] = x;
			}
		}

		function maxedge(e, x, y) {
			if (e.min > y) e.min = y;
			var ey = e[y];
			if (ey == null || ey < x) {
				e[y] = x;
			}
		}
	}

    // Returns true if outside the clipping region.
	function clipped(x, y) {
        var pts = gs_xyclip[y];
        if (!pts) {
            return true;
        }
        if (!pts.sorted) {
			pts.sort(function(a, b) { return a - b; });
            pts.sorted = true;
        }

        var wn = false;
        for (var n = 0, npts = pts.length; n < npts; n++) {
            var xn = pts[n];
            if (xn > x) {
                return !wn; 
            } else if (xn == x) {
                return wn;
            }
            wn = !wn;
		}
        return true;
	}

	// Returns 1 if clockwise, -1 if ccw.
	function polydir(pts) {
		var xp = 0;
		for (var i = 0, l = pts.length, j = l-1; i < l; j = i++) {
			xp += pts[j][0] * pts[i][1] - pts[i][0] * pts[j][1];
		}
		return xp > 0 ? 1 : -1;
	}
}
// drawing-canvas.js
//
// `maybe` maybe the canvas, pre v4.0.
function DrawingCanvas(canvas, maybe) {
    // Pre setops() backward compatibility
    if (maybe && maybe instanceof HTMLCanvasElement) {
        canvas = maybe;
    }

	var img;
	var ctx = canvas.getContext('2d', { willReadFrequently:true });
	var drawing = DrawingBuiltin();

	// Provide our specializations for the builtin drawing
	drawing.image = image;
	drawing.end = end;

    // Reflect setopts() into the super
    var opts;
    var _setopts = drawing.setopts;
    drawing.setopts = function (options) {
        opts = options;
        _setopts && _setopts.call(drawing, options);
    };

	return drawing;


	// Called by DrawingBuiltin.init() to get the ARGB bitmap for rendering.
	function image(width, height) {
		canvas.width  = width;
		canvas.height = height;

		// Set background 
		ctx.setTransform(1, 0, 0, 1, 0, 0);
		if (/^[0-9a-fA-F]{6}$/.test(''+opts.backgroundcolor)) {
			ctx.fillStyle = '#' + opts.backgroundcolor;
			ctx.fillRect(0, 0, width, height);
		} else {
			ctx.clearRect(0, 0, width, height);
		}

		// Prepare the bitmap 
		img = ctx.getImageData(0, 0, width, height);

		// The return value is designed for both canvas pure-RGBA and PNG RGBA
		return { buffer:img.data, ispng:false };
	}

	function end() {
		ctx.putImageData(img, 0, 0);
        return canvas;
	}
}
// drawing-svg.js
//
// Converts the drawing primitives into the equivalent SVG.  Linear barcodes
// are rendered as a series of stroked paths.  2D barcodes are rendered as a 
// series of filled paths.
//
// Rotation is handled during drawing.  The resulting SVG will contain the 
// already-rotated barcode without an SVG transform.
//
// If the requested barcode image contains text, the glyph paths are 
// extracted from the font file (via the builtin FontLib and stb_truetype.js)
// and added as filled SVG paths.
//
function DrawingSVG() {
    // Unrolled x,y rotate/translate matrix
    var tx0 = 0, tx1 = 0, tx2 = 0, tx3 = 0;
    var ty0 = 0, ty1 = 0, ty2 = 0, ty3 = 0;

    var opts;
    var svg = '';
    var path;
    var clipid = '';
	var clips = [];
    var lines = {};

    // Magic number to approximate an ellipse/circle using 4 cubic beziers.
    var ELLIPSE_MAGIC = 0.55228475 - 0.00045;

    // Global graphics state
    var gs_width, gs_height;    // image size, in pixels
    var gs_dx, gs_dy;           // x,y translate (padding)

    return {
        // setopts() is called after the options are fixed-up/normalized,
        // but before calling into BWIPP.
        // This allows omitting the options in the constructor call.
        // It is also your last chance to amend the options before usage.
        setopts(options) {
            opts = options;
        },

        // measure() and scale() are the only drawing primitives that are called before init().

        // Make no adjustments
        scale(sx, sy) {
        },
        // Measure text.
        // `font` is the font name typically OCR-A or OCR-B.
        // `fwidth` and `fheight` are the requested font cell size.  They will
        // usually be the same, except when the scaling is not symetric.
        measure(str, font, fwidth, fheight) {
            fwidth = fwidth|0;
            fheight = fheight|0;

            var fontid = FontLib.lookup(font);
            var width = 0;
            var ascent = 0;
            var descent = 0;
            for (var i = 0; i < str.length; i++) {
                var ch = str.charCodeAt(i);
                var glyph = FontLib.getpaths(fontid, ch, fwidth, fheight);
                if (!glyph) {
                    continue;
                }
                ascent  = Math.max(ascent, glyph.ascent);
                descent = Math.max(descent, -glyph.descent);
                width  += glyph.advance;
            }
            return { width, ascent, descent };
        },

        // `width` and `height` represent the maximum bounding box the graphics will
        // occupy.  The dimensions are for an unrotated rendering.  Adjust as necessary.
        init(width, height) {
            // Add in the effects of padding.  These are always set before the
            // drawing constructor is called.
            var padl = opts.paddingleft;
            var padr = opts.paddingright;
            var padt = opts.paddingtop;
            var padb = opts.paddingbottom;
            var rot  = opts.rotate || 'N';

            width  += padl + padr;
            height += padt + padb;

            // Transform indexes are: x, y, w, h
            switch (rot) {
            // tx = w-y, ty = x
            case 'R': tx1 = -1; tx2 = 1; ty0 = 1; break;
            // tx = w-x, ty = h-y
            case 'I': tx0 = -1; tx2 = 1; ty1 = -1; ty3 = 1; break;
            // tx = y, ty = h-x
            case 'L': tx1 = 1; ty0 = -1; ty3 = 1; break;
            // tx = x, ty = y
            default:  tx0 = ty1 = 1; break;
            }

            // Setup the graphics state
            var swap = rot == 'L' || rot == 'R';
            gs_width  = swap ? height : width;
            gs_height = swap ? width : height;
            gs_dx = padl;
            gs_dy = padt;
        },
        // Unconnected stroked lines are used to draw the bars in linear barcodes.
        // No line cap should be applied.  These lines are always orthogonal.
        line(x0, y0, x1, y1, lw, rgb) {
            // Try to get non-blurry lines...
            x0 = x0|0;
            y0 = y0|0;
            x1 = x1|0;
            y1 = y1|0;
            lw = Math.round(lw);

            // Try to keep the lines "crisp" by using with the SVG line drawing spec to
            // our advantage.
            if (lw & 1) {
                if (x0 == x1) {
                    x0 += 0.5;
                    x1 += 0.5;
                }
                if (y0 == y1) {
                    y0 += 0.5;
                    y1 += 0.5;
                }
            }

            // Group together all lines of the same width and emit as single paths.
            // Dramatically reduces resulting text size.
            var key = '' + lw + '#' + rgb;
            if (!lines[key]) {
                lines[key] = '<path stroke="#' + rgb + '" stroke-width="' + lw + '" d="';
            }
            lines[key] += 'M' + transform(x0, y0) + 'L' + transform(x1, y1);
        },
        // Polygons are used to draw the connected regions in a 2d barcode.
        // These will always be unstroked, filled, non-intersecting,
        // orthogonal shapes.
        // You will see a series of polygon() calls, followed by a fill().
        polygon(pts) {
            if (!path) {
                path = '<path d="';
            }
            path += 'M' + transform(pts[0][0], pts[0][1]);
            for (var i = 1, n = pts.length; i < n; i++) {
                var p = pts[i];
                path += 'L' + transform(p[0], p[1]);
            }
            path += 'Z';
        },
        // An unstroked, filled hexagon used by maxicode.  You can choose to fill
        // each individually, or wait for the final fill().
        //
        // The hexagon is drawn from the top, counter-clockwise.
        hexagon(pts, rgb) {
            this.polygon(pts); // A hexagon is just a polygon...
        },
        // An unstroked, filled ellipse.  Used by dotcode and maxicode at present.
        // maxicode issues pairs of ellipse calls (one cw, one ccw) followed by a fill()
        // to create the bullseye rings.  dotcode issues all of its ellipses then a
        // fill().
        ellipse(x, y, rx, ry, ccw) {
            if (!path) {
                path = '<path d="';
            }
            var dx = rx * ELLIPSE_MAGIC;
            var dy = ry * ELLIPSE_MAGIC;

            // Since there are never overlapping regions, we don't worry about cw/ccw.
            path += 'M' + transform(x - rx, y) +
                    'C' + transform(x - rx, y - dy) + ' ' +
                          transform(x - dx, y - ry) + ' ' +
                          transform(x,      y - ry) +
                    'C' + transform(x + dx, y - ry) + ' ' +
                          transform(x + rx, y - dy) + ' ' +
                          transform(x + rx, y) + 
                    'C' + transform(x + rx, y + dy) + ' ' +
                          transform(x + dx, y + ry) + ' ' +
                          transform(x,      y + ry) +  
                    'C' + transform(x - dx, y + ry) + ' ' +
                          transform(x - rx, y + dy) + ' ' +
                          transform(x - rx, y) + 
                    'Z';
        },
        // PostScript's default fill rule is non-zero but there are never intersecting
        // regions so use even-odd as it is easier to work with.
        fill(rgb) {
            if (path) {
                svg += path + '" fill="#' + rgb + '" fill-rule="evenodd"' +
					   (clipid ? ' clip-path="url(#' + clipid + ')"' : '') +
					   ' />\n';
                path = null;
            }
        },
        // Currently only used by swissqrcode.  The `polys` area is an array of
        // arrays of points.  Each array of points is identical to the `pts`
        // parameter passed to polygon().  The clipping rule, like the fill rule,
        // defaults to non-zero winding.
        clip : function(polys) {
			var path = '<clipPath id="clip' + clips.length + '"><path d="';
            for (let j = 0; j < polys.length; j++) {
                let pts = polys[j];
				path += 'M' + transform(pts[0][0], pts[0][1]);
				for (var i = 1, n = pts.length; i < n; i++) {
					var p = pts[i];
					path += 'L' + transform(p[0], p[1]);
				}
				path += 'Z';
            }
		    path += '" clip-rule="nonzero" /></clipPath>';
			clipid = "clip" + clips.length;
			clips.push(path);
        },
        unclip : function() {
			clipid = '';
		},
        // Draw text with optional inter-character spacing.  `y` is the baseline.
        // font is an object with properties { name, width, height, dx }
        // width and height are the font cell size.
        // dx is extra space requested between characters (usually zero).
        text(x, y, str, rgb, font) {
            var fontid  = FontLib.lookup(font.name);
            var fwidth  = font.width|0;
            var fheight = font.height|0;
            var dx      = font.dx|0;
            var path = '';
            for (var k = 0; k < str.length; k++) {
                var ch = str.charCodeAt(k);
                var glyph = FontLib.getpaths(fontid, ch, fwidth, fheight);
                if (!glyph) {
                    continue;
                }
                if (glyph.length) {
                    // A glyph is composed of sequence of curve and line segments.
                    // M is move-to
                    // L is line-to
                    // Q is quadratic bezier curve-to
                    // C is cubic bezier curve-to
                    for (var i = 0, l = glyph.length; i < l; i++) {
                        let seg = glyph[i];
                        if (seg.type == 'M' || seg.type == 'L') {
                            path += seg.type + transform(seg.x + x, y - seg.y);
                        } else if (seg.type == 'Q') {
                            path += seg.type + transform(seg.cx + x, y - seg.cy) + ' ' +
                                               transform(seg.x + x,  y - seg.y);
                        } else if (seg.type == 'C') {
                            path += seg.type + transform(seg.cx1 + x, y - seg.cy1) + ' ' +
                                               transform(seg.cx2 + x, y - seg.cy2) + ' ' +
                                               transform(seg.x + x,   y - seg.y);
                        }
                    }
                    // Close the shape
                    path += 'Z';
                }
                x += glyph.advance + dx;
            }
            if (path) {
                svg += '<path d="' + path + '" fill="#' + rgb + '" />\n';
            }
        },
        // Called after all drawing is complete.  The return value from this method
        // will be the return value from `bwipjs.render()`.
        end() {
            var linesvg = '';
            for (var key in lines) {
                linesvg += lines[key] + '" />\n';
            }
            var bg = opts.backgroundcolor;
            //return '<svg version="1.1" width="' + gs_width + '" height="' + gs_height +
            return '<svg version="1.1" viewBox="0 0 ' + gs_width + ' ' + gs_height +
                        '" xmlns="http://www.w3.org/2000/svg">\n' +
						(clips.length ? '<defs>' + clips.join('') + '</defs>' : '') +
                        (/^[0-9A-Fa-f]{6}$/.test(''+bg)
                            ? '<rect width="100%" height="100%" fill="#' + bg + '" />\n'
                            : '') +
                        linesvg + svg + '</svg>\n';
        },
    };

    // translate/rotate and return as an SVG coordinate pair
    function transform(x, y) {
        x += gs_dx;
        y += gs_dy;
        var tx = tx0 * x + tx1 * y + tx2 * (gs_width-1) + tx3 * (gs_height-1);
        var ty = ty0 * x + ty1 * y + ty2 * (gs_width-1) + ty3 * (gs_height-1);
        return '' + ((tx|0) == tx ? tx : tx.toFixed(2)) + ' ' +
                    ((ty|0) == ty ? ty : ty.toFixed(2));
    }
}
// fontlib.js
var FontLib = (function() {
    var fonts = [];
    var names = {};
    var glyphcache = {};
    var glyphmru = {};
    var glyphcount = 0;

    // Sentinel to simplify moving entries around in the list.
    glyphmru.next = glyphmru;
    glyphmru.prev = glyphmru;

    return {
        lookup:lookup,
        monochrome:monochrome,
        getglyph:getglyph,
        getpaths:getpaths,
        loadFont:loadFont,
    };

    // loadFont(name, data)
    // loadFont(name, mult, data)
    // loadFont(name, multy, multx, data)   // note order: y,x
    // data must be the font data, either a binary or base64 encoded string.
    function loadFont(name /*...args*/) {
        var multx = 100;
        var multy = 100;
        var data = null;

        if (arguments.length == 2) {
            data = arguments[1];
        } else if (arguments.length == 3) {
            multx = multy = +arguments[1] || 100;
            data = arguments[2];
        } else if (arguments.length == 4) {
            multy = +arguments[1] || 100;
            multx = +arguments[2] || 100;
            data = arguments[3];
        } else {
            throw new Error("bwipjs: loadFont: invalid number of arguments");
        }

        var font = STBTT.InitFont(toUint8Array(data));
        font.bwipjs_name = name;
        font.bwipjs_multx = multx;
        font.bwipjs_multy = multy;

        var fontid = fonts.push(font)-1;
        names[name.toUpperCase()] = fontid;
        return fontid;
    }

    // Always returns a valid font-id (default OCR-B)
    function lookup(name) {
        var fontid = names[name.toUpperCase()];
        return fontid === undefined ? 1 : fontid;       // OCR B default
    }

    // Not supported by stbtt
    function monochrome(mono) {
        if (mono) {
            throw new Error('bwipjs: monochrome fonts not implemented');
        }
    }

    function getglyph(fontid, charcode, width, height) {
        fontid   = fontid|0;
        charcode = charcode|0;
        width    = +width;
        height   = +height;
        if (!width || width < 8) {
            width = 8;
        }
        if (!height || height < 8) {
            height = width;
        }
        if (fontid < 0 || fontid >= fonts.length) {
            fontid = 1;     // OCR B default
        }
        if (!charcode || charcode < 32) {
            charcode = 32;
        }

        // In the cache?
        var cachekey = '' + fontid + 'c' + charcode + 'w' + width + 'h' + height; 
        var glyph = glyphcache[cachekey];
        if (glyph) {
            // Unthread from the MRU
            glyph.prev.next = glyph.next;
            glyph.next.prev = glyph.prev;

            // Thread back onto the top
            var sntl = glyphmru;
            sntl.next.prev = glyph;
            glyph.next = sntl.next;
            glyph.prev = sntl;
            sntl.next = glyph;
            
            return glyph;
        }

        var font = fonts[fontid];
        var glyph = STBTT.GetGlyph(font, charcode, width * font.bwipjs_multx / 100,
                                                   height * font.bwipjs_multy / 100) ||
                    STBTT.GetGlyph(font, 0, width * font.bwipjs_multx / 100,
                                                   height * font.bwipjs_multy / 100);
        
        glyph.bytes = glyph.pixels;
        glyph.cachekey = cachekey;
        glyph.offset = 0;

        //glyph = {
        //      top:font.GlyphTop(),
        //      left:font.GlyphLeft(),
        //      width:font.GlyphWidth(),
        //      height:font.GlyphHeight(),
        //      advance:font.GlyphAdvance(),
        //      bitmap:font.GlyphBitmap(),
        //      offset:0,
        //      cachekey:cachekey,
        //  };

        // Purge old
        if (glyphcount > 250) {
            var sntl = glyphmru;
            var temp = sntl.prev;
            temp.prev.next = sntl;
            sntl.prev = temp.prev;
            temp.next = temp.prev = null;
            delete glyphcache[temp.cachekey];
        } else {
            glyphcount++;
        }

        // Add to cache and to the top of the MRU
        glyphcache[cachekey] = glyph;

        var sntl = glyphmru;
        sntl.next.prev = glyph;
        glyph.next = sntl.next;
        glyph.prev = sntl;
        sntl.next = glyph;

        return glyph;
    }

    function getpaths(fontid, charcode, width, height) {
        fontid   = fontid|0;
        charcode = charcode|0;
        width    = +width;
        height   = +height;
        if (!width || width < 8) {
            width = 8;
        }
        if (!height || height < 8) {
            height = width;
        }
        if (fontid < 0 || fontid >= fonts.length) {
            fontid = 1;     // OCR B default
        }
        if (!charcode || charcode < 32) {
            charcode = 32;
        }

        var font = fonts[fontid];
        return STBTT.GetPaths(font, charcode, width * font.bwipjs_multx / 100,
                                              height * font.bwipjs_multy / 100);
    }
})();

// This is needed to make the default exports traceable by esbuild
// during its tree shaking phase.  See issue #298.
function LoadFont() {
    return FontLib.loadFont.apply(FontLib, Array.prototype.slice.call(arguments));
}

// bwip-js/stb_trutype.js
//
// JavaScript implementation of stb_truetype.h @ https://github.com/nothings/stb.
//
// This file is part of the bwip-js project available at:
//
// 		http://metafloor.github.io/bwip-js
//
// Copyright (c) 2019 Mark Warren : MIT LICENSE

// Copyright notice from stb_truetype.h:
//
// MIT License
//
// Copyright (c) 2017 Sean Barrett
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
// of the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

var STBTT = (function () {

var	STBTT_vmove	 = 1,
	STBTT_vline	 = 2,
	STBTT_vcurve = 3,
	STBTT_vcubic = 4,

	STBTT_PLATFORM_ID_UNICODE	= 0,
	STBTT_PLATFORM_ID_MAC		= 1,
	STBTT_PLATFORM_ID_ISO		= 2,
	STBTT_PLATFORM_ID_MICROSOFT = 3,

	STBTT_UNICODE_EID_UNICODE_1_0		= 0,
	STBTT_UNICODE_EID_UNICODE_1_1		= 1,
	STBTT_UNICODE_EID_ISO_10646			= 2,
	STBTT_UNICODE_EID_UNICODE_2_0_BMP	= 3,
	STBTT_UNICODE_EID_UNICODE_2_0_FULL	= 4,

	STBTT_MS_EID_SYMBOL			= 0,
	STBTT_MS_EID_UNICODE_BMP	= 1,
	STBTT_MS_EID_SHIFTJIS		= 2,
	STBTT_MS_EID_UNICODE_FULL	= 10;

var floor = Math.floor;
var ceil  = Math.ceil;
var sqrt  = Math.sqrt;
var abs   = Math.abs;

// Allocate an array of objects - replaces malloc(sizeof struct * n)
function oalloc(n) {
	var o = [];
	for (var i = 0; i < n; i++) {
		o.push({});
	}
	return o;
}

//static unsigned char stbtt__buf_get8(stbtt__buf * b)
function stbtt__buf_get8(b) {
    return b[b.cursor++]||0;
}

//static unsigned char stbtt__buf_peek8(stbtt__buf * b)
function stbtt__buf_peek8(b) {
    return b[b.cursor];
}

//static void stbtt__buf_seek(stbtt__buf * b, int o)
function stbtt__buf_seek(b, o) {
    b.cursor = (o > b.length || o < 0) ? b.length : o;
}

//static void stbtt__buf_skip(stbtt__buf * b, int o)
function stbtt__buf_skip(b, o) {
    stbtt__buf_seek(b, b.cursor + o);
}

//static unsigned int stbtt__buf_get(stbtt__buf * b, int n)
function stbtt__buf_get(b, n) {
    var v = 0;
    for (var i = 0; i < n; i++) {
        v = (v << 8) | stbtt__buf_get8(b);
    }
    return v;
}

// This function is only called once with a real 'p', all other uses are
// for a NULL buffer.  The for real usage, the code is inlined.
//static stbtt__buf stbtt__new_buf(const void *p, int size)
function stbtt__null_buf() {
	return { length:0 };
}

//static stbtt__buf stbtt__buf_range(const stbtt__buf * b, int o, int s)
function stbtt__buf_range(b, o, s) {
    if (o < 0 || s < 0 || o > b.length || s > b.length - o) {
        return stbtt__null_buf();
    }
	var r = b.subarray(o, o + s);
	r.cursor = 0;
	return r;
}

//static stbtt__buf stbtt__cff_get_index(stbtt__buf * b)
function stbtt__cff_get_index(b) {
    var start = b.cursor;
    var count = stbtt__buf_get(b, 2);
    if (count) {
        var offsize = stbtt__buf_get8(b);
        stbtt__buf_skip(b, offsize * count);
        stbtt__buf_skip(b, stbtt__buf_get(b, offsize) - 1);
    }
    return stbtt__buf_range(b, start, b.cursor - start);
}

//static unsigned int stbtt__cff_int(stbtt__buf * b)
function stbtt__cff_int(b) {
    var b0 = stbtt__buf_get8(b);
    if (b0 >= 32 && b0 <= 246) {
        return b0 - 139;
    } else if (b0 >= 247 && b0 <= 250) {
        return (b0 - 247) * 256 + stbtt__buf_get8(b) + 108;
    } else if (b0 >= 251 && b0 <= 254) {
        return -(b0 - 251) * 256 - stbtt__buf_get8(b) - 108;
    } else if (b0 == 28) {
        return stbtt__buf_get(b, 2);
    } else if (b0 == 29) {
        return stbtt__buf_get(b, 4);
    }
    return 0;
}

//static void stbtt__cff_skip_operand(stbtt__buf * b)
function stbtt__cff_skip_operand(b) {
    var b0 = stbtt__buf_peek8(b);
    if (b0 == 30) {
        stbtt__buf_skip(b, 1);
        while (b.cursor < b.length) {
            var v = stbtt__buf_get8(b);
            if ((v & 0xF) == 0xF || (v >> 4) == 0xF) {
                break;
            }
        }
    } else {
        stbtt__cff_int(b);
    }
}

//static stbtt__buf stbtt__dict_get(stbtt__buf * b, int key)
function stbtt__dict_get(b, key) {
    stbtt__buf_seek(b, 0);
    while (b.cursor < b.length) {
        var start = b.cursor, end, op;
        while (stbtt__buf_peek8(b) >= 28) {
            stbtt__cff_skip_operand(b);
        }
        end = b.cursor;
        op = stbtt__buf_get8(b);
        if (op == 12) {
            op = stbtt__buf_get8(b) | 0x100;
        }
        if (op == key) {
            return stbtt__buf_range(b, start, end - start);
        }
    }
    return stbtt__buf_range(b, 0, 0);
}

//static void stbtt__dict_get_ints(stbtt__buf * b, int key, int outcount, unsigned int *out)
function stbtt__dict_get_ints(b, key, outcount, out) {
    var operands = stbtt__dict_get(b, key);
    for (var i = 0; i < outcount && operands.cursor < operands.length; i++) {
        out[i] = stbtt__cff_int(operands);
    }
}
// single-integer format of above since javascript doesn't have address-of
function stbtt__dict_get_int(b, key, out) {
    var operands = stbtt__dict_get(b, key);
    if (operands.cursor < operands.length) {
        out = stbtt__cff_int(operands);
    }
	return out;
}

//static int stbtt__cff_index_count(stbtt__buf * b)
function stbtt__cff_index_count(b) {
    stbtt__buf_seek(b, 0);
    return stbtt__buf_get(b, 2);
}

//static stbtt__buf stbtt__cff_index_get(stbtt__buf b, int i)
function stbtt__cff_index_get(b, i) {
    var count, offsize, start, end;
    stbtt__buf_seek(b, 0);
    count = stbtt__buf_get(b, 2);
    offsize = stbtt__buf_get8(b);
    stbtt__buf_skip(b, i * offsize);
    start = stbtt__buf_get(b, offsize);
    end = stbtt__buf_get(b, offsize);
    return stbtt__buf_range(b, 2 + (count + 1) * offsize + start, end - start);
}

// Convert sign-extend a 16-bit integer to JS number
function INT16(n) {
	return n & 0x8000 ? (0xffff0000|n)>>0 : n;
}

//static unsigned short ttUSHORT(unsigned char *p)
function ttUSHORT(b, o) {
    return b[o] * 256 + b[o+1];
}

//static short ttSHORT(unsigned char *p)
function ttSHORT(b, o) {
    var n = b[o] * 256 + b[o+1];
	return n & 0x8000 ? (0xffff0000|n)>>0 : n;
}

//static unsigned int ttULONG(unsigned char *p)
function ttULONG(b, o) {
    return (b[o] << 24) + (b[o+1] << 16) + (b[o+2] << 8) + b[o+3];
}

//static unsigned int stbtt__find_table(unsigned char *data, unsigned int fontstart, const char *tag)
function stbtt__find_table(data, fontstart, tag) {
    var num_tables = ttUSHORT(data, fontstart + 4);
    var tabledir = fontstart + 12;
    for (var i = 0; i < num_tables; ++i) {
        var loc = tabledir + 16 * i;
        if (data[loc] == tag[0] && data[loc+1] == tag[1] && data[loc+2] == tag[2] && data[loc+3] == tag[3]) {
            return ttULONG(data, loc + 8);
        }
    }
    return 0;
}

//static stbtt__buf stbtt__get_subrs(stbtt__buf cff, stbtt__buf fontdict)
function stbtt__get_subrs(cff, fontdict) {
    var private_loc = [ 0, 0 ];
    stbtt__dict_get_ints(fontdict, 18, 2, private_loc);
    if (!private_loc[1] || !private_loc[0]) {
        return stbtt__null_buf();
    }
    var pdict = stbtt__buf_range(cff, private_loc[1], private_loc[0]);
    var subrsoff = stbtt__dict_get_int(pdict, 19, 0);
    if (!subrsoff) {
        return stbtt__null_buf();
    }
    stbtt__buf_seek(cff, private_loc[1] + subrsoff);
    return stbtt__cff_get_index(cff);
}

//static int stbtt_InitFont_internal(stbtt_fontinfo * info, unsigned char *data, int fontstart)
function stbtt_InitFont_internal(info, data, fontstart) {
    var cmap, t, i, numTables;

    info.data = data;
    info.fontstart = fontstart;
    info.cff = stbtt__null_buf();

    cmap = stbtt__find_table(data, fontstart, [ 99, 109, 97, 112 ]);		//"cmap"
    info.loca = stbtt__find_table(data, fontstart, [ 108, 111, 99, 97 ]);	//"loca"
    info.head = stbtt__find_table(data, fontstart, [ 104, 101, 97, 100 ]);	//"head"
    info.glyf = stbtt__find_table(data, fontstart, [ 103, 108, 121, 102 ]);	//"glyf"
    info.hhea = stbtt__find_table(data, fontstart, [ 104, 104, 101, 97 ]);	//"hhea"
    info.hmtx = stbtt__find_table(data, fontstart, [ 104, 109, 116, 120 ]);	//"hmtx"
    info.kern = stbtt__find_table(data, fontstart, [ 107, 101, 114, 110 ]);	//"kern"

    if (!cmap || !info.head || !info.hhea || !info.hmtx) {
        return 0;
    }
    if (info.glyf) {
        if (!info.loca) {
            return 0;
        }
    } else {
        var b, topdict, topdictidx, cff,
			cstype = 2, charstrings = 0, fdarrayoff = 0, fdselectoff = 0;

        cff = stbtt__find_table(data, fontstart, [ 67, 70, 70, 32 ]);	//"CFF "
        if (!cff) {
            return 0;
        }

        info.fontdicts = stbtt__null_buf();
        info.fdselect = stbtt__null_buf();

        info.cff = data.subarray(cff); //stbtt__new_buf(data + cff, 512 * 1024 * 1024);
		info.cff.cursor = 0;
        b = info.cff;

        stbtt__buf_skip(b, 2);
        stbtt__buf_seek(b, stbtt__buf_get8(b));

        stbtt__cff_get_index(b);
        topdictidx = stbtt__cff_get_index(b);
        topdict = stbtt__cff_index_get(topdictidx, 0);
        stbtt__cff_get_index(b);
        info.gsubrs = stbtt__cff_get_index(b);

        charstrings = stbtt__dict_get_int(topdict, 17, charstrings);
        cstype = stbtt__dict_get_int(topdict, 0x100 | 6, cstype);
        fdarrayoff = stbtt__dict_get_int(topdict, 0x100 | 36, fdarrayoff);
        fdselectoff = stbtt__dict_get_int(topdict, 0x100 | 37, fdselectoff);
        info.subrs = stbtt__get_subrs(b, topdict);

        if (cstype != 2) {
            return 0;
        }
        if (charstrings == 0) {
            return 0;
        }

        if (fdarrayoff) {
            if (!fdselectoff) {
                return 0;
            }
            stbtt__buf_seek(b, fdarrayoff);
            info.fontdicts = stbtt__cff_get_index(b);
            info.fdselect = stbtt__buf_range(b, fdselectoff, b.length - fdselectoff);
        }

        stbtt__buf_seek(b, charstrings);
        info.charstrings = stbtt__cff_get_index(b);
    }

    t = stbtt__find_table(data, fontstart, [ 109, 97, 120, 112 ]);	//"maxp"
    if (t) {
        info.numGlyphs = ttUSHORT(data, t + 4);
    }
    else {
        info.numGlyphs = 0xffff;
    }

    numTables = ttUSHORT(data, cmap + 2);
    info.index_map = 0;
    for (i = 0; i < numTables; ++i) {
        var encoding_record = cmap + 4 + 8 * i;

        switch (ttUSHORT(data, encoding_record)) {
        case STBTT_PLATFORM_ID_MICROSOFT:
            switch (ttUSHORT(data, encoding_record + 2)) {
            case STBTT_MS_EID_UNICODE_BMP:
            case STBTT_MS_EID_UNICODE_FULL:
                info.index_map = cmap + ttULONG(data, encoding_record + 4);
                break;
            }
            break;
        case STBTT_PLATFORM_ID_UNICODE:
            info.index_map = cmap + ttULONG(data, encoding_record + 4);
            break;
        }
    }
    if (info.index_map == 0) {
        return 0;
    }

    info.indexToLocFormat = ttUSHORT(data, info.head + 50);
    return 1;
}

//extern int stbtt_FindGlyphIndex(const stbtt_fontinfo * info, int unicode_codepoint)
function stbtt_FindGlyphIndex(info, unicode_codepoint) {
    var data = info.data, index_map = info.index_map;

    var format = ttUSHORT(data, index_map + 0);
    if (format == 0) {
        var bytes = ttUSHORT(data, index_map + 2);
        if (unicode_codepoint < bytes - 6) {
            return data[index_map + 6 + unicode_codepoint];
		}
        return 0;
    } else if (format == 6) {
        var first = ttUSHORT(data, index_map + 6),
            count = ttUSHORT(data, index_map + 8);
        if (unicode_codepoint >= first && unicode_codepoint < first + count) {
            return ttUSHORT(data, index_map + 10 + (unicode_codepoint - first) * 2);
		}
        return 0;
    } else if (format == 2) {
        return 0;
    } else if (format == 4) {
        var segcount = ttUSHORT(data, index_map + 6) >> 1,
            searchRange = ttUSHORT(data, index_map + 8) >> 1,
            entrySelector = ttUSHORT(data, index_map + 10),
            rangeShift = ttUSHORT(data, index_map + 12) >> 1,
			endCount = index_map + 14,
            search = endCount;

        if (unicode_codepoint > 0xffff) {
            return 0;
        }

        if (unicode_codepoint >= ttUSHORT(data, search + rangeShift * 2)) {
            search += rangeShift * 2;
        }

        search -= 2;
        while (entrySelector) {
            searchRange >>= 1;
            var end = ttUSHORT(data, search + searchRange * 2);
            if (unicode_codepoint > end) {
                search += searchRange * 2;
            }
            --entrySelector;
        }
        search += 2;

		var offset, start, item = (search - endCount) >>> 1;

		start = ttUSHORT(data, index_map + 14 + segcount * 2 + 2 + 2 * item);
		if (unicode_codepoint < start) {
			return 0;
		}

		offset = ttUSHORT(data, index_map + 14 + segcount * 6 + 2 + 2 * item);
		if (offset == 0) {
			return unicode_codepoint + ttSHORT(data, index_map + 14 + segcount * 4 + 2 + 2 * item);
		}
		return ttUSHORT(data, offset + (unicode_codepoint - start) * 2 +
								index_map + 14 + segcount * 6 + 2 +	2 * item);
    } else if (format == 12 || format == 13) {
        var ngroups = ttULONG(data, index_map + 12),
			low = 0, high = ngroups;
         while (low < high) {
            var mid = low + ((high - low) >> 1);
            var start_char = ttULONG(data, index_map + 16 + mid * 12);
            var end_char = ttULONG(data, index_map + 16 + mid * 12 + 4);
            if (unicode_codepoint < start_char) {
                high = mid;
            } else if (unicode_codepoint > end_char) {
                low = mid + 1;
            } else {
                var start_glyph = ttULONG(data, index_map + 16 + mid * 12 + 8);
                if (format == 12) {
                    return start_glyph + unicode_codepoint - start_char;
				} else {
                    return start_glyph;
                }
            }
        }
        return 0;
    }
    return 0;
}

//static void stbtt_setvertex(stbtt_vertex * v, unsigned char type, int x, int y, int cx, int cy)
function stbtt_setvertex(v, type, x, y, cx, cy) {
    v.type = type;
    v.x = x;
    v.y = y;
    v.cx = cx;
    v.cy = cy;
}

//static int stbtt__GetGlyfOffset(const stbtt_fontinfo * info, int glyph_index)
function stbtt__GetGlyfOffset(info, glyph_index) {
    var  g1, g2;
    if (glyph_index >= info.numGlyphs) {
        return -1;
    }
    if (info.indexToLocFormat >= 2) {
        return -1;
    }

    if (info.indexToLocFormat == 0) {
        g1 = info.glyf + ttUSHORT(info.data, info.loca + glyph_index * 2) * 2;
        g2 = info.glyf + ttUSHORT(info.data, info.loca + glyph_index * 2 + 2) * 2;
    } else {
        g1 = info.glyf + ttULONG(info.data, info.loca + glyph_index * 4);
        g2 = info.glyf + ttULONG(info.data, info.loca + glyph_index * 4 + 4);
    }

    return g1 == g2 ? -1 : g1;
}

//extern int stbtt_GetGlyphBox(const stbtt_fontinfo * info, int glyph_index, int *x0, int *y0, int *x1, int *y1)
function stbtt_GetGlyphBox(info, glyph_index, out) {
    if (info.cff.length) {
        stbtt__GetGlyphInfoT2(info, glyph_index, out);
    } else {
        var g = stbtt__GetGlyfOffset(info, glyph_index);
        if (g < 0) {
            return 0;
        }
	    out.x0 = ttSHORT(info.data, g + 2);
		out.y0 = ttSHORT(info.data, g + 4);
		out.x1 = ttSHORT(info.data, g + 6);
		out.y1 = ttSHORT(info.data, g + 8);
    }
    return 1;
}

//static int stbtt__close_shape(stbtt_vertex * vertices, int num_vertices, int was_off,
//                   int start_off, int sx, int sy, int scx, int scy, int cx, int cy)
function stbtt__close_shape(vertices, num_vertices, was_off, start_off, sx, sy, scx, scy, cx, cy) {
    if (start_off) {
        if (was_off) {
            stbtt_setvertex(vertices[num_vertices++], STBTT_vcurve,
                            (cx + scx) >> 1, (cy + scy) >> 1, cx, cy);
		}
        stbtt_setvertex(vertices[num_vertices++], STBTT_vcurve, sx, sy, scx, scy);
    } else {
        if (was_off) {
            stbtt_setvertex(vertices[num_vertices++], STBTT_vcurve, sx, sy, cx, cy);
		} else {
            stbtt_setvertex(vertices[num_vertices++], STBTT_vline, sx, sy, 0, 0);
		}
    }
    return num_vertices;
}

//static int stbtt__GetGlyphShapeTT(const stbtt_fontinfo * info, int glyph_index, stbtt_vertex ** pvertices)
function stbtt__GetGlyphShapeTT(info, glyph_index) {
    var data = info.data,
		g = stbtt__GetGlyfOffset(info, glyph_index);

	if (g < 0) {
        return null;
    }

	var vertices = [];
    var numberOfContours = ttSHORT(data, g);
    if (numberOfContours > 0) {
        var flags = 0, flagcount,
			i, j = 0, m, n, next_move, was_off = 0, off, start_off = 0,
			x, y, cx, cy, sx, sy, scx, scy;
        var endPtsOfContours = g + 10;
        var ins = ttUSHORT(data, g + 10 + numberOfContours * 2);
        var points = data.subarray(g + 10 + numberOfContours * 2 + 2 + ins);
		var ptsoff = 0;

        n = 1 + ttUSHORT(data, endPtsOfContours + numberOfContours * 2 - 2);
        m = n + 2 * numberOfContours;

        vertices = oalloc(m);
        next_move = 0;
        flagcount = 0;
        off = m - n;

        for (i = 0; i < n; ++i) {
            if (flagcount == 0) {
                flags = points[ptsoff++];
                if (flags & 8) {
                    flagcount = points[ptsoff++];
                }
            } else {
                --flagcount;
            }
            vertices[off + i].type = flags;
        }

        x = 0;
        for (i = 0; i < n; ++i) {
            flags = vertices[off + i].type;
            if (flags & 2) {
                var dx = points[ptsoff++];
                x += (flags & 16) ? dx : -dx;
            } else {
                if (!(flags & 16)) {
                    x = x + INT16(points[ptsoff] * 256 + points[ptsoff+1]);
                    ptsoff += 2;
                }
            }
            vertices[off + i].x = x;
        }

        y = 0;
        for (i = 0; i < n; ++i) {
            flags = vertices[off + i].type;
            if (flags & 4) {
                var dy = points[ptsoff++];
                y += (flags & 32) ? dy : -dy;
            } else {
                if (!(flags & 32)) {
                    y = y + INT16(points[ptsoff] * 256 + points[ptsoff+1]);
                    ptsoff += 2;
                }
            }
            vertices[off + i].y = y;
        }

        var num_vertices = 0;
        sx = sy = cx = cy = scx = scy = 0;
        for (i = 0; i < n; ++i) {
            flags = vertices[off + i].type;
            x = vertices[off + i].x;
            y = vertices[off + i].y;

            if (next_move == i) {
                if (i != 0) {
                    num_vertices = stbtt__close_shape(vertices, num_vertices, was_off, start_off,
											sx, sy, scx, scy, cx, cy);
				}
                start_off = !(flags & 1);
                if (start_off) {
                    scx = x;
                    scy = y;
                    if (!(vertices[off + i + 1].type & 1)) {
                        sx = (x + vertices[off + i + 1].x) >> 1;
                        sy = (y + vertices[off + i + 1].y) >> 1;
                    } else {
                        sx = vertices[off + i + 1].x;
                        sy = vertices[off + i + 1].y;
                        ++i;
                    }
                } else {
                    sx = x;
                    sy = y;
                }
                stbtt_setvertex(vertices[num_vertices++], STBTT_vmove, sx, sy, 0, 0);
                was_off = 0;
                next_move = 1 + ttUSHORT(data, endPtsOfContours + j * 2);
                ++j;
            } else {
                if (!(flags & 1)) {
                    if (was_off) {
                        stbtt_setvertex(vertices[num_vertices++], STBTT_vcurve,
                                        (cx + x) >> 1, (cy + y) >> 1, cx, cy);
					}
                    cx = x;
                    cy = y;
                    was_off = 1;
                } else {
                    if (was_off) {
                        stbtt_setvertex(vertices[num_vertices++], STBTT_vcurve, x, y, cx, cy);
                    } else {
                        stbtt_setvertex(vertices[num_vertices++], STBTT_vline, x, y, 0, 0);
					}
                    was_off = 0;
                }
            }
        }
        vertices.length = stbtt__close_shape(vertices, num_vertices, was_off, start_off,
												sx, sy, scx, scy, cx, cy);
    } else if (numberOfContours == -1) {
        var more = 1;
        var comp = g + 10;
         while (more) {
            var flags, gidx, mtx = [ 1, 0, 0, 1, 0, 0 ];

            flags = ttSHORT(data, comp);
            comp += 2;
            gidx = ttSHORT(data, comp);
            comp += 2;

            if (flags & 2) {
                if (flags & 1) {
                    mtx[4] = ttSHORT(data, comp);
                    comp += 2;
                    mtx[5] = ttSHORT(data, comp);
                    comp += 2;
                } else {
                    mtx[4] = stbtt__buf_get8(data, comp);
                    comp += 1;
                    mtx[5] = stbtt__buf_get8(data, comp);
                    comp += 1;
                }
            }
            if (flags & (1 << 3)) {
                mtx[0] = mtx[3] = ttSHORT(data, comp) / 16384.0;
                comp += 2;
                mtx[1] = mtx[2] = 0;
            } else if (flags & (1 << 6)) {
                mtx[0] = ttSHORT(data, comp) / 16384.0;
                comp += 2;
                mtx[1] = mtx[2] = 0;
                mtx[3] = ttSHORT(data, comp) / 16384.0;
                comp += 2;
            } else if (flags & (1 << 7)) {
                mtx[0] = ttSHORT(data, comp) / 16384.0;
                comp += 2;
                mtx[1] = ttSHORT(data, comp) / 16384.0;
                comp += 2;
                mtx[2] = ttSHORT(data, comp) / 16384.0;
                comp += 2;
                mtx[3] = ttSHORT(data, comp) / 16384.0;
                comp += 2;
            }

            var m = sqrt(mtx[0] * mtx[0] + mtx[1] * mtx[1]);
            var n = sqrt(mtx[2] * mtx[2] + mtx[3] * mtx[3]);
            var comp_verts = stbtt_GetGlyphShape(info, gidx);
            if (comp_verts.length > 0) {
                for (var i = 0, l = comp_verts.length; i < l; ++i) {
                    var v = comp_verts[i], x, y;
					x = v.x;
					y = v.y;
                    v.x = floor(m * (mtx[0] * x + mtx[2] * y + mtx[4]));
                    v.y = floor(n * (mtx[1] * x + mtx[3] * y + mtx[5]));
                    x = v.cx;
                    y = v.cy;
                    v.cx = floor(m * (mtx[0] * x + mtx[2] * y + mtx[4]));
                    v.cy = floor(n * (mtx[1] * x + mtx[3] * y + mtx[5]));
                }

				vertices = vertices.concat(comp_verts);
            }
            more = flags & (1 << 5);
        }
    }
	//console.log('vertices(' + vertices.length + ')');
	//for (var i = 0; i < vertices.length; i++) {
	//	var pt = vertices[i];
	//	console.log(`${i}: ${pt.x},${pt.y} / ${pt.cx},${pt.cy} / ${pt.type}`);
	//}

    return vertices;
}

//static void stbtt__track_vertex(stbtt__csctx * c, int x, int y)
function stbtt__track_vertex(c, x, y) {
    if (x > c.max_x || !c.started) {
        c.max_x = x;
    }
    if (y > c.max_y || !c.started) {
        c.max_y = y;
    }
    if (x < c.min_x || !c.started) {
        c.min_x = x;
    }
    if (y < c.min_y || !c.started) {
        c.min_y = y;
    }
    c.started = 1;
}

//static void stbtt__csctx_v(stbtt__csctx * c, unsigned char type, int x, int y, int cx, int cy, int cx1, int cy1)
function stbtt__csctx_v(c, type, x, y, cx, cy, cx1, cy1) {
	stbtt__track_vertex(c, x, y);
	if (type == STBTT_vcubic) {
		stbtt__track_vertex(c, cx, cy);
		stbtt__track_vertex(c, cx1, cy1);
	}
	var v = {};
	stbtt_setvertex(v, type, x, y, cx, cy);
	v.cx1 = cx1;
	v.cy1 = cy1;
	c.vertices.push(v);
 }

//static void stbtt__csctx_close_shape(stbtt__csctx * ctx)
function stbtt__csctx_close_shape(ctx) {
    if (ctx.first_x != ctx.x || ctx.first_y != ctx.y) {
        stbtt__csctx_v(ctx, STBTT_vline, ctx.first_x, ctx.first_y, 0, 0, 0, 0);
	}
}

//static void stbtt__csctx_rmove_to(stbtt__csctx * ctx, float dx, float dy)
function stbtt__csctx_rmove_to(ctx, dx, dy) {
    stbtt__csctx_close_shape(ctx);
    ctx.first_x = ctx.x = ctx.x + dx;
    ctx.first_y = ctx.y = ctx.y + dy;
    stbtt__csctx_v(ctx, STBTT_vmove, ctx.x, ctx.y, 0, 0, 0, 0);
}

//static void stbtt__csctx_rline_to(stbtt__csctx * ctx, float dx, float dy)
function stbtt__csctx_rline_to(ctx, dx, dy) {
    ctx.x += dx;
    ctx.y += dy;
    stbtt__csctx_v(ctx, STBTT_vline, ctx.x, ctx.y, 0, 0, 0, 0);
}

//static void stbtt__csctx_rccurve_to(stbtt__csctx * ctx, float dx1, float dy1, float dx2,
//									float dy2, float dx3, float dy3)
function stbtt__csctx_rccurve_to(ctx, dx1, dy1, dx2, dy2, dx3, dy3) {
    var cx1 = ctx.x + dx1,
		cy1 = ctx.y + dy1,
		cx2 = cx1 + dx2,
		cy2 = cy1 + dy2;
    ctx.x = cx2 + dx3;
    ctx.y = cy2 + dy3;
    stbtt__csctx_v(ctx, STBTT_vcubic, ctx.x, ctx.y, cx1, cy1, cx2, cy2);
}

//static stbtt__buf stbtt__get_subr(stbtt__buf idx, int n)
function stbtt__get_subr(b, n) {
    var count = stbtt__cff_index_count(b);
    var bias = 107;
    if (count >= 33900) {
        bias = 32768;
    } else if (count >= 1240) {
        bias = 1131;
    }
    n += bias;
    if (n < 0 || n >= count) {
        return stbtt__null_buf();
    }
    return stbtt__cff_index_get(b, n);
}

//static stbtt__buf stbtt__cid_get_glyph_subrs(const stbtt_fontinfo * info, int glyph_index)
function stbtt__cid_get_glyph_subrs(info, glyph_index) {
    var fdselect = info.fdselect;
    var nranges, start, end, v, fmt, fdselector = -1, i;

    stbtt__buf_seek(fdselect, 0);
    fmt = stbtt__buf_get8(fdselect);
    if (fmt == 0) {
        stbtt__buf_skip(fdselect, glyph_index);
        fdselector = stbtt__buf_get8(fdselect);
    } else if (fmt == 3) {
        nranges = stbtt__buf_get(fdselect, 2);
        start = stbtt__buf_get(fdselect, 2);
        for (i = 0; i < nranges; i++) {
            v = stbtt__buf_get8(fdselect);
            end = stbtt__buf_get(fdselect, 2);
            if (glyph_index >= start && glyph_index < end) {
                fdselector = v;
                break;
            }
            start = end;
        }
    }
    if (fdselector == -1) {
        stbtt__null_buf();
    }
    return stbtt__get_subrs(info.cff, stbtt__cff_index_get(info.fontdicts, fdselector));
}

//static int stbtt__run_charstring(const stbtt_fontinfo * info, int glyph_index,
//								   stbtt__csctx * c)
function stbtt__run_charstring(info, glyph_index, c) {
    var in_header = 1, maskbits = 0, subr_stack_height = 0, sp = 0, v, i, b0,
		has_subrs = 0, clear_stack,
		s = [], subr_stack = [], subrs = info.subrs, b, f;

    b = stbtt__cff_index_get(info.charstrings, glyph_index);
    while (b.cursor < b.length) {
        i = 0;
        clear_stack = 1;
        b0 = stbtt__buf_get8(b);
        switch (b0) {
        case 0x13:
        case 0x14:
            if (in_header) {
                maskbits += (sp / 2)|0;
            }
            in_header = 0;
            stbtt__buf_skip(b, ((maskbits + 7) / 8)|0);
            break;

        case 0x01:
        case 0x03:
        case 0x12:
        case 0x17:
            maskbits += (sp / 2)|0;
            break;

        case 0x15:
            in_header = 0;
            if (sp < 2) {
                return 0;
            }
            stbtt__csctx_rmove_to(c, s[sp - 2], s[sp - 1]);
            break;
        case 0x04:
            in_header = 0;
            if (sp < 1) {
                return 0;
            }
            stbtt__csctx_rmove_to(c, 0, s[sp - 1]);
            break;
        case 0x16:
            in_header = 0;
            if (sp < 1) {
                return 0;
            }
            stbtt__csctx_rmove_to(c, s[sp - 1], 0);
            break;

        case 0x05:
            if (sp < 2) {
                return 0;
            }
            for (; i + 1 < sp; i += 2) {
                stbtt__csctx_rline_to(c, s[i], s[i + 1]);
            }
            break;

        case 0x07:
            if (sp < 1) {
                return 0;
            }
			for (;;) {
                if (i >= sp) {
                    break;
                }
                stbtt__csctx_rline_to(c, 0, s[i]);
                i++;
                if (i >= sp) {
                    break;
                }
                stbtt__csctx_rline_to(c, s[i], 0);
                i++;
			}
			break;
        case 0x06:
            if (sp < 1) {
                return 0;
            }
            for (;;) {
                if (i >= sp) {
                    break;
                }
                stbtt__csctx_rline_to(c, s[i], 0);
                i++;
                if (i >= sp) {
                    break;
                }
                stbtt__csctx_rline_to(c, 0, s[i]);
                i++;
            }
            break;

        case 0x1F:
            if (sp < 4) {
                return 0;
            }
			for (;;) {
                if (i + 3 >= sp) {
                    break;
                }
                stbtt__csctx_rccurve_to(c, s[i], 0, s[i + 1], s[i + 2],
                                        (sp - i == 5) ? s[i + 4] : 0.0,
                                        s[i + 3]);
                i += 4;
                if (i + 3 >= sp) {
                    break;
                }
                stbtt__csctx_rccurve_to(c, 0, s[i], s[i + 1],
                                        s[i + 2], s[i + 3],
                                        (sp - i == 5) ? s[i + 4] : 0.0);
                i += 4;
			}
			break;
        case 0x1E:
            if (sp < 4) {
                return 0;
            }
            for (;;) {
                if (i + 3 >= sp) {
                    break;
                }
                stbtt__csctx_rccurve_to(c, 0, s[i], s[i + 1],
                                        s[i + 2], s[i + 3],
                                        (sp - i == 5) ? s[i + 4] : 0.0);
                i += 4;
                if (i + 3 >= sp) {
                    break;
                }
                stbtt__csctx_rccurve_to(c, s[i], 0, s[i + 1], s[i + 2],
                                        (sp - i == 5) ? s[i + 4] : 0.0,
                                        s[i + 3]);
                i += 4;
            }
            break;

        case 0x08:
            if (sp < 6) {
                return 0;
            }
            for (; i + 5 < sp; i += 6) {
                stbtt__csctx_rccurve_to(c, s[i], s[i + 1],
                                        s[i + 2], s[i + 3],
                                        s[i + 4], s[i + 5]);
			}
            break;

        case 0x18:
            if (sp < 8) {
                return 0;
            }
            for (; i + 5 < sp - 2; i += 6) {
                stbtt__csctx_rccurve_to(c, s[i], s[i + 1],
                                        s[i + 2], s[i + 3],
                                        s[i + 4], s[i + 5]);
			}
            if (i + 1 >= sp) {
                return 0;
            }
            stbtt__csctx_rline_to(c, s[i], s[i + 1]);
            break;

        case 0x19:
            if (sp < 8) {
                return 0;
            }
            for (; i + 1 < sp - 6; i += 2) {
                stbtt__csctx_rline_to(c, s[i], s[i + 1]);
            }
            if (i + 5 >= sp) {
                return 0;
            }
            stbtt__csctx_rccurve_to(c, s[i], s[i + 1], s[i + 2],
                                    s[i + 3], s[i + 4], s[i + 5]);
            break;

        case 0x1A:
        case 0x1B:
            if (sp < 4) {
                return 0;
            }
            f = 0.0;
            if (sp & 1) {
                f = s[i];
                i++;
            }
            for (; i + 3 < sp; i += 4) {
                if (b0 == 0x1B) {
                    stbtt__csctx_rccurve_to(c, s[i], f,
                                            s[i + 1],
                                            s[i + 2],
                                            s[i + 3], 0.0);
                } else {
                    stbtt__csctx_rccurve_to(c, f, s[i],
                                            s[i + 1],
                                            s[i + 2], 0.0,
                                            s[i + 3]);
				}
                f = 0.0;
            }
            break;

        case 0x0A:
            if (!has_subrs) {
                if (info.fdselect.length) {
                    subrs = stbtt__cid_get_glyph_subrs(info, glyph_index);
				}
                has_subrs = 1;
            }

        case 0x1D:
            if (sp < 1) {
                return 0;
            }
            v = s[--sp]|0;
            if (subr_stack_height >= 10) {
                return 0;
            }
            subr_stack[subr_stack_height++] = b;
            b = stbtt__get_subr(b0 == 0x0A ? subrs : info.gsubrs, v);
            if (b.length == 0) {
                return 0;
            }
            b.cursor = 0;
            clear_stack = 0;
            break;

        case 0x0B:
            if (subr_stack_height <= 0) {
                return 0;
            }
            b = subr_stack[--subr_stack_height];
            clear_stack = 0;
            break;

        case 0x0E:
            stbtt__csctx_close_shape(c);
            return 1;

        case 0x0C:
            var dx1, dx2, dx3, dx4, dx5, dx6, dy1, dy2, dy3, dy4, dy5, dy6,
				dx, dy, b1 = stbtt__buf_get8(b);
            switch (b1) {
            case 0x22:
                if (sp < 7) {
                    return 0;
                }
                dx1 = s[0];
                dx2 = s[1];
                dy2 = s[2];
                dx3 = s[3];
                dx4 = s[4];
                dx5 = s[5];
                dx6 = s[6];
                stbtt__csctx_rccurve_to(c, dx1, 0, dx2, dy2, dx3, 0);
                stbtt__csctx_rccurve_to(c, dx4, 0, dx5, -dy2, dx6, 0);
                break;

            case 0x23:
                if (sp < 13) {
                    return 0;
                }
                dx1 = s[0];
                dy1 = s[1];
                dx2 = s[2];
                dy2 = s[3];
                dx3 = s[4];
                dy3 = s[5];
                dx4 = s[6];
                dy4 = s[7];
                dx5 = s[8];
                dy5 = s[9];
                dx6 = s[10];
                dy6 = s[11];

                stbtt__csctx_rccurve_to(c, dx1, dy1, dx2, dy2, dx3, dy3);
                stbtt__csctx_rccurve_to(c, dx4, dy4, dx5, dy5, dx6, dy6);
                break;

            case 0x24:
                if (sp < 9) {
                    return 0;
                }
                dx1 = s[0];
                dy1 = s[1];
                dx2 = s[2];
                dy2 = s[3];
                dx3 = s[4];
                dx4 = s[5];
                dx5 = s[6];
                dy5 = s[7];
                dx6 = s[8];
                stbtt__csctx_rccurve_to(c, dx1, dy1, dx2, dy2, dx3, 0);
                stbtt__csctx_rccurve_to(c, dx4, 0, dx5, dy5, dx6, -(dy1 + dy2 + dy5));
                break;

            case 0x25:
                if (sp < 11) {
                    return 0;
                }
                dx1 = s[0];
                dy1 = s[1];
                dx2 = s[2];
                dy2 = s[3];
                dx3 = s[4];
                dy3 = s[5];
                dx4 = s[6];
                dy4 = s[7];
                dx5 = s[8];
                dy5 = s[9];
                dx6 = dy6 = s[10];
                dx = dx1 + dx2 + dx3 + dx4 + dx5;
                dy = dy1 + dy2 + dy3 + dy4 + dy5;
                if (abs(dx) > abs(dy)) {
                    dy6 = -dy;
                } else {
                    dx6 = -dx;
                }
                stbtt__csctx_rccurve_to(c, dx1, dy1, dx2, dy2, dx3, dy3);
                stbtt__csctx_rccurve_to(c, dx4, dy4, dx5, dy5, dx6, dy6);
                break;

            default:
                return 0;
            }
        	break;

        default:
            if (b0 != 255 && b0 != 28 && (b0 < 32 || b0 > 254)) {
                return 0;
            }
            if (b0 == 255) {
                // f = (float)(stbtt_int32)stbtt__buf_get32(&b) / 0x10000;
                f = (stbtt__buf_get(b, 4)|0) / 0x10000;
            } else {
                stbtt__buf_skip(b, -1);
                // f = (float)(stbtt_int16)stbtt__cff_int(&b);
                f = ((stbtt__cff_int(b)<<16)|0)>>16;
            }
            if (sp >= 48) {
                return 0;
            }
            s[sp++] = f;
            clear_stack = 0;
            break;
        }
        if (clear_stack) {
            sp = 0;
        }
    }
    return 0;
}

function stbtt__csctx_init() {
	return { started:0, first_x:0, first_y:0, x:0, y:0,
			min_x:0, max_x:0, min_y:0, max_y:0,
			vertices:[]
		};
}

//static int stbtt__GetGlyphShapeT2(const stbtt_fontinfo * info, int glyph_index,
//									stbtt_vertex ** pvertices)
function stbtt__GetGlyphShapeT2(info, glyph_index) {
    var output_ctx = stbtt__csctx_init();
    if (stbtt__run_charstring(info, glyph_index, output_ctx)) {
		return output_ctx.vertices;
    }
    return null;
}

//static int stbtt__GetGlyphInfoT2(const stbtt_fontinfo * info, int glyph_index, int *x0,
//                      int *y0, int *x1, int *y1)
function stbtt__GetGlyphInfoT2(info, glyph_index, out) {
    var c = stbtt__csctx_init();
    var r = stbtt__run_charstring(info, glyph_index, c);
	out.x0 = r ? c.min_x : 0;
	out.y0 = r ? c.min_y : 0;
	out.x1 = r ? c.max_x : 0;
	out.y1 = r ? c.max_y : 0;
    return r && c.vertices ? c.vertices.length : 0;
}

//extern int stbtt_GetGlyphShape(const stbtt_fontinfo * info, int glyph_index,
//								 stbtt_vertex ** pvertices)
function stbtt_GetGlyphShape(info, glyph_index) {
    if (!info.cff.length) {
        return stbtt__GetGlyphShapeTT(info, glyph_index);
    } else {
        return stbtt__GetGlyphShapeT2(info, glyph_index);
    }
}

//extern void stbtt_GetGlyphHMetrics(const stbtt_fontinfo * info, int glyph_index,
//                       int *advanceWidth, int *leftSideBearing)
function stbtt_GetGlyphHMetrics(info, glyph_index) {
    var numOfLongHorMetrics = ttUSHORT(info.data, info.hhea + 34);
    if (glyph_index < numOfLongHorMetrics) {
		return {
				advanceWidth:   ttSHORT(info.data, info.hmtx + 4 * glyph_index),
				leftSideBearing:ttSHORT(info.data, info.hmtx + 4 * glyph_index + 2)
			};
    } else {
		return {
				advanceWidth:   ttSHORT(info.data, info.hmtx + 4 * (numOfLongHorMetrics - 1)),
				leftSideBearing:ttSHORT(info.data, info.hmtx + 4 * numOfLongHorMetrics +
											2 * (glyph_index - numOfLongHorMetrics))
			};
    }
}

//extern void stbtt_GetCodepointHMetrics(const stbtt_fontinfo * info, int codepoint,
//                           int *advanceWidth, int *leftSideBearing)
function stbtt_GetCodepointHMetrics(info, codepoint) {
     return stbtt_GetGlyphHMetrics(info, stbtt_FindGlyphIndex(info, codepoint));
}

//extern void stbtt_GetFontVMetrics(const stbtt_fontinfo * info, int *ascent, int *descent, int *lineGap)
function stbtt_GetFontVMetrics(info) {
	return {
        ascent:	ttSHORT(info.data, info.hhea + 4),
        descent:ttSHORT(info.data, info.hhea + 6),
        linegap:ttSHORT(info.data, info.hhea + 8),
	};
}

//extern void stbtt_GetGlyphBitmapBoxSubpixel(const stbtt_fontinfo * font, int glyph,
//                              float scale_x, float scale_y, float shift_x, float shift_y,
//								int *ix0, int *iy0, int *ix1, int *iy1)
function stbtt_GetGlyphBitmapBoxSubpixel(font, glyph, scale_x, scale_y, shift_x, shift_y) {
    var tmp = {};
    if (!stbtt_GetGlyphBox(font, glyph, tmp)) {
		return { x0:0, y0:0, x1:0, y1:0 };
    }
	return {
			x0:floor(tmp.x0 * scale_x + shift_x),
			y0:floor(-tmp.y1 * scale_y + shift_y),
			x1:ceil(tmp.x1 * scale_x + shift_x),
			y1:ceil(-tmp.y0 * scale_y + shift_y),
		};
}

//extern void stbtt_GetCodepointBitmapBoxSubpixel(const stbtt_fontinfo * font,
//                                    int codepoint, float scale_x, float scale_y, float shift_x,
//                                    float shift_y, int *ix0, int *iy0, int *ix1, int *iy1)
function stbtt_GetCodepointBitmapBoxSubpixel(font, codepoint, scale_x, scale_y, shift_x, shift_y) {
    return stbtt_GetGlyphBitmapBoxSubpixel(font, stbtt_FindGlyphIndex(font, codepoint),
											scale_x, scale_y, shift_x, shift_y);
}

//extern void stbtt_GetCodepointBitmapBox(const stbtt_fontinfo * font, int codepoint,	float scale_x, float scale_y,
//										int *ix0, int *iy0, int *ix1, int *iy1)
function stbtt_GetCodepointBitmapBox(font, codepoint, scale_x, scale_y) {
    return stbtt_GetCodepointBitmapBoxSubpixel(font, codepoint, scale_x, scale_y, 0, 0);
}

//static stbtt__active_edge *stbtt__new_active(stbtt__hheap * hh, stbtt__edge * e, int off_x, float start_point, void *userdata)
function stbtt__new_active(e, off_x, start_point) {
    var dxdy = (e.x1 - e.x0) / (e.y1 - e.y0);
	return {
		fdx:dxdy,
		fdy:dxdy != 0.0 ? (1.0 / dxdy) : 0.0,
		fx:(e.x0 + dxdy * (start_point - e.y0)) - (off_x|0),
		direction:e.invert ? 1.0 : -1.0,
		sy:e.y0,
		ey:e.y1,
		next:0,
    };
}

//static void stbtt__handle_clipped_edge(float *scanline, int x, stbtt__active_edge * e,
//                           float x0, float y0, float x1, float y1)
function stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x1, y1) {
	x = x|0;
    if (y0 == y1) {
        return;
    }
    if (y0 > e.ey) {
        return;
    }
    if (y1 < e.sy) {
        return;
    }
    if (y0 < e.sy) {
        x0 += (x1 - x0) * (e.sy - y0) / (y1 - y0);
        y0 = e.sy;
    }
    if (y1 > e.ey) {
        x1 += (x1 - x0) * (e.ey - y1) / (y1 - y0);
        y1 = e.ey;
    }

    if (x0 <= x && x1 <= x) {
        scanline[x] += e.direction * (y1 - y0);
    } else if (x0 >= x + 1 && x1 >= x + 1) {

    } else {
        scanline[x] += e.direction * (y1 - y0) * (1 - ((x0 - x) + (x1 - x)) / 2);
    }
}

//static void stbtt__fill_active_edges_new(float *scanline, float *scanline_fill, int len,
//                             stbtt__active_edge * e, float y_top)
// The C implementation passed scanline_fill as a +1 pointer on the call, and then -1 in
// places in this function.  That doesn't work with array-views, so we reverse the handling.
function stbtt__fill_active_edges_new(scanline, scanline_fill, len, e, y_top) {
    var y_bottom = y_top + 1;
    while (e) {
        if (e.fdx == 0) {
            var x0 = e.fx;
            if (x0 < len) {
                if (x0 >= 0) {
                    stbtt__handle_clipped_edge(scanline, x0, e, x0, y_top, x0, y_bottom);
                    stbtt__handle_clipped_edge(scanline_fill, x0+1, e, x0, y_top, x0, y_bottom);
                } else {
                    stbtt__handle_clipped_edge(scanline_fill, 0, e, x0, y_top, x0, y_bottom);
                }
            }
        } else {
            var x0 = e.fx,
				dx = e.fdx,
				xb = x0 + dx,
				x_top, x_bottom,
				sy0, sy1,
				dy = e.fdy;

            if (e.sy > y_top) {
                x_top = x0 + dx * (e.sy - y_top);
                sy0 = e.sy;
            } else {
                x_top = x0;
                sy0 = y_top;
            }
            if (e.ey < y_bottom) {
                x_bottom = x0 + dx * (e.ey - y_top);
                sy1 = e.ey;
            } else {
                x_bottom = xb;
                sy1 = y_bottom;
            }

            if (x_top >= 0 && x_bottom >= 0 && x_top < len && x_bottom < len) {
                if ((x_top|0) == (x_bottom|0)) {
                    var height = sy1 - sy0,
						x = x_top|0;
                    scanline[x] += e.direction * (1 - ((x_top - x) + (x_bottom - x)) / 2) * height;
                    scanline_fill[x+1] += e.direction * height;
                } else {
                    var t, x, x1, x2, y_crossing, step, sign, area;
                    if (x_top > x_bottom) {
                        sy0 = y_bottom - (sy0 - y_top);
                        sy1 = y_bottom - (sy1 - y_top);
                        t = sy0, sy0 = sy1, sy1 = t;
                        t = x_bottom, x_bottom = x_top, x_top = t;
                        dx = -dx;
                        dy = -dy;
                        t = x0, x0 = xb, xb = t;
                    }

                    x1 = x_top|0;
                    x2 = x_bottom|0;
                    y_crossing = (x1 + 1 - x0) * dy + y_top;
                    sign = e.direction;
                    area = sign * (y_crossing - sy0);

                    scanline[x1] += area * (1 - ((x_top - x1) + (x1 + 1 - x1)) / 2);

                    step = sign * dy;
                    for (x = x1 + 1; x < x2; ++x) {
                        scanline[x] += area + step / 2;
                        area += step;
                    }
                    y_crossing += dy * (x2 - (x1 + 1));

                    scanline[x2] += area + sign * (1 - ((x2 - x2) + (x_bottom - x2)) / 2) *
												(sy1 - y_crossing);
                    scanline_fill[x2+1] += sign * (sy1 - sy0);
                }
            } else {
                for (var x = 0; x < len; ++x) {
                    var y0 = y_top,
						x1 = x,
						x2 = x + 1,
						x3 = xb,
						y3 = y_bottom,
						y1 = (x - x0) / dx + y_top,
						y2 = (x + 1 - x0) / dx + y_top;

                    if (x0 < x1 && x3 > x2) {
                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x1, y1);
                        stbtt__handle_clipped_edge(scanline, x, e, x1, y1, x2, y2);
                        stbtt__handle_clipped_edge(scanline, x, e, x2, y2, x3, y3);
                    } else if (x3 < x1 && x0 > x2) {
                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x2, y2);
                        stbtt__handle_clipped_edge(scanline, x, e, x2, y2, x1, y1);
                        stbtt__handle_clipped_edge(scanline, x, e, x1, y1, x3, y3);
                    } else if (x0 < x1 && x3 > x1) {
                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x1, y1);
                        stbtt__handle_clipped_edge(scanline, x, e, x1, y1, x3, y3);
                    } else if (x3 < x1 && x0 > x1) {
                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x1, y1);
                        stbtt__handle_clipped_edge(scanline, x, e, x1, y1, x3, y3);
                    } else if (x0 < x2 && x3 > x2) {
                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x2, y2);
                        stbtt__handle_clipped_edge(scanline, x, e, x2, y2, x3, y3);
                    } else if (x3 < x2 && x0 > x2) {
                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x2, y2);
                        stbtt__handle_clipped_edge(scanline, x, e, x2, y2, x3, y3);
                    } else {
                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x3, y3);
                    }
                }
            }
        }
        e = e.next;
    }
}

//static void stbtt__rasterize_sorted_edges(stbtt__bitmap * result, stbtt__edge * e, int n,
//                              int vsubsample, int off_x, int off_y, void *userdata)
function stbtt__rasterize_sorted_edges(result, edges, nedges, vsubsample, off_x, off_y) {
	vsubsample |= 0, off_x |= 0, off_y |= 0;
    var active = null, z;
    var y = off_y, j = 0, i;
    var scanline = new Float32Array(result.w * 2 + 1);
    var scanline2 = scanline.subarray(result.w);
	var eoff = 0;

    edges[nedges].y0 = off_y + result.h + 1;
    while (j < result.h) {
        var scan_y_top = y + 0.0,
			scan_y_bottom = y + 1.0,
			step = active;

		// F'ing IE
		if (scanline.fill) { scanline.fill(0); }
		else { for (var $i = 0, $l = scanline.length; $i < $l; $i++) scanline[$i] = 0; }

        while (step) {
            z = step;
			step = z.next;
            if (z.ey <= scan_y_top) {
                z.direction = 0;
            } else {
			}
        }

        while (edges[eoff].y0 <= scan_y_bottom) {
            if (edges[eoff].y0 != edges[eoff].y1) {
                z = stbtt__new_active(edges[eoff], off_x, scan_y_top);
				z.next = active;
				active = z;
            }
            ++eoff;
        }

        if (active) {
			// C implementation passed scanline2+1.  See function for details.
            stbtt__fill_active_edges_new(scanline, scanline2, result.w, active, scan_y_top);
		}
		for (var i = 0, sum = 0; i < result.w; ++i) {
			var k, m;
			sum += scanline2[i];
			k = scanline[i] + sum;
			k = abs(k) * 255 + 0.5;
			m = k>>>0;
			if (m > 255) {
				m = 255;
			}
			result.pixels[j * result.stride + i] = m;
        }

        step = active;
        while (step) {
            z = step;
            z.fx += z.fdx;
            step = z.next;
        }
        ++y;
        ++j;
    }
}

//static void stbtt__sort_edges_ins_sort(stbtt__edge * p, int n)
function stbtt__sort_edges_ins_sort(p, n) {
    for (var i = 1; i < n; ++i) {
        var t = p[i], j = i;
        while (j > 0 && t.y0 < p[j-1].y0) {
             p[j] = p[j - 1];
            --j;
        }
        if (i != j) {
            p[j] = t;
        }
    }
}

//static void stbtt__sort_edges_quicksort(stbtt__edge * p, int n)
// The C implementation messed with the p pointer.  JS uses an offset instead.
function stbtt__sort_edges_quicksort(p, o, n) {
    while (n > 12) {
        var t, c, i, j, z,
			m = n >> 1,
			c01 = p[o].y0 < p[o+m].y0,
			c12 = p[o+m].y0 < p[o+n-1].y0;

        if (c01 != c12) {
            c = p[o].y0 < p[o+n-11].y0;
            z = (c == c12) ? 0 : n - 1;
            t = p[o+z];
            p[o+z] = p[o+m];
            p[o+m] = t;
        }

        t = p[o];
        p[o] = p[o+m];
        p[o+m] = t;

        i = 1;
        j = n - 1;
        for (;;) {
            for ( ; p[o+i].y0 < p[o].y0; ++i) {
            }
            for ( ; p[o].y0 < p[o+j].y0; --j) {
            }
            if (i >= j) {
                break;
            }
            t = p[o+i];
            p[o+i] = p[o+j];
            p[o+j] = t;

            ++i;
            --j;
        }

        if (j < n - i) {
            stbtt__sort_edges_quicksort(p, o, j);
            o += i;
            n -= i;
        } else {
            stbtt__sort_edges_quicksort(p, o + i, n - i);
            n = j;
        }
    }
}

//static void stbtt__sort_edges(stbtt__edge * p, int n)
function stbtt__sort_edges(p, n) {
    stbtt__sort_edges_quicksort(p, 0, n);
    stbtt__sort_edges_ins_sort(p, n);
}

//static void stbtt__rasterize(stbtt__bitmap * result, stbtt__point * pts, int *wcount,
//                 int windings, float scale_x, float scale_y, float shift_x,
//                 float shift_y, int off_x, int off_y, int invert,
//                 void *userdata)
function stbtt__rasterize(result, pts, wcount, scale_x, scale_y, shift_x, shift_y, off_x, off_y, invert) {
    var y_scale_inv = invert ? -scale_y : scale_y,
		e, n, i, j, k, m,
		vsubsample = 1;

    n = 0;
    for (i = 0; i < wcount.length; ++i) {
        n += wcount[i];
    }

    e = oalloc(n + 1);
    n = 0;
    m = 0;
    for (i = 0; i < wcount.length; ++i) {
        var p = m;
        m += wcount[i];
        j = wcount[i] - 1;
        for (k = 0; k < wcount[i]; j = k++) {
            var a = k, b = j;
            if (pts[p+j].y == pts[p+k].y) {
                continue;
            }

            e[n].invert = 0;
            if (invert ? pts[p+j].y > pts[p+k].y : pts[p+j].y < pts[p+k].y) {
                e[n].invert = 1;
                a = j, b = k;
            }
            e[n].x0 = pts[p+a].x * scale_x + shift_x;
            e[n].y0 = (pts[p+a].y * y_scale_inv + shift_y) * vsubsample;
            e[n].x1 = pts[p+b].x * scale_x + shift_x;
            e[n].y1 = (pts[p+b].y * y_scale_inv + shift_y) * vsubsample;
            ++n;
        }
    }

    stbtt__sort_edges(e, n);
    stbtt__rasterize_sorted_edges(result, e, n, vsubsample, off_x, off_y);
 }

//static int stbtt__tesselate_curve(stbtt__point * points, int *num_points, float x0,
//                       float y0, float x1, float y1, float x2, float y2,
//                       float objspace_flatness_squared, int n)
function stbtt__tesselate_curve(points, x0, y0, x1, y1, x2, y2, objspace_flatness_squared, n) {
    var mx = (x0 + 2 * x1 + x2) / 4,
		my = (y0 + 2 * y1 + y2) / 4,
		dx = (x0 + x2) / 2 - mx,
		dy = (y0 + y2) / 2 - my;
    if (n > 16) {
        return 1;
    }
    if (dx * dx + dy * dy > objspace_flatness_squared) {
        stbtt__tesselate_curve(points, x0, y0, (x0 + x1) / 2.0, (y0 + y1) / 2.0, mx, my,
                               objspace_flatness_squared, n + 1);
        stbtt__tesselate_curve(points, mx, my, (x1 + x2) / 2.0, (y1 + y2) / 2.0, x2, y2,
                               objspace_flatness_squared, n + 1);
    } else {
		points.push({ x:x2, y:y2 });
    }
    return 1;
}

//static void stbtt__tesselate_cubic(stbtt__point * points, int *num_points, float x0,
//                       float y0, float x1, float y1, float x2, float y2,
//                       float x3, float y3, float objspace_flatness_squared, int n)
function stbtt__tesselate_cubic(points, x0, y0, x1, y1, x2, y2, x3, y3, objspace_flatness_squared, n) {
    var dx0 = x1 - x0,
		dy0 = y1 - y0,
		dx1 = x2 - x1,
		dy1 = y2 - y1,
		dx2 = x3 - x2,
		dy2 = y3 - y2,
		dx = x3 - x0,
		dy = y3 - y0,
		longlen = sqrt(dx0 * dx0 + dy0 * dy0) +
				  sqrt(dx1 * dx1 + dy1 * dy1) +
                  sqrt(dx2 * dx2 + dy2 * dy2),
		shortlen = sqrt(dx * dx + dy * dy),
		flatness_squared = longlen * longlen - shortlen * shortlen;
    if (n > 16) {
        return;
    }

    if (flatness_squared > objspace_flatness_squared) {
        var x01 = (x0 + x1) / 2,
			y01 = (y0 + y1) / 2,
			x12 = (x1 + x2) / 2,
			y12 = (y1 + y2) / 2,
			x23 = (x2 + x3) / 2,
			y23 = (y2 + y3) / 2,
			xa = (x01 + x12) / 2,
			ya = (y01 + y12) / 2,
			xb = (x12 + x23) / 2,
			yb = (y12 + y23) / 2,
			mx = (xa + xb) / 2,
			my = (ya + yb) / 2;

        stbtt__tesselate_cubic(points, x0, y0, x01, y01, xa, ya, mx, my,
								objspace_flatness_squared, n + 1);
        stbtt__tesselate_cubic(points, mx, my, xb, yb, x23, y23, x3, y3,
								objspace_flatness_squared, n + 1);
    } else {
		points.push({ x:x3, y:y3 });
    }
}

//static stbtt__point *stbtt_FlattenCurves(stbtt_vertex * vertices, int num_verts,
//        float objspace_flatness, int **contour_lengths, int *num_contours, void *userdata)
function stbtt_FlattenCurves(vertices, objspace_flatness, contour_lengths) {
    var points = [],
		objspace_flatness_squared = objspace_flatness * objspace_flatness,
		n = -1, start = 0,
		x = 0, y = 0;
	for (var i = 0, nverts = vertices.length; i < nverts; ++i) {
		switch (vertices[i].type) {
		case STBTT_vmove:
			if (n >= 0) {
				contour_lengths[n] = points.length - start;
			}
			++n;
			start = points.length;
			x = vertices[i].x, y = vertices[i].y;
			points.push({ x:x, y:y });
			break;
		case STBTT_vline:
			x = vertices[i].x, y = vertices[i].y;
			points.push({ x:x, y:y });
			break;
		case STBTT_vcurve:
			stbtt__tesselate_curve(points, x, y, vertices[i].cx, vertices[i].cy,
								   vertices[i].x, vertices[i].y, objspace_flatness_squared, 0);
			x = vertices[i].x, y = vertices[i].y;
			break;
		case STBTT_vcubic:
			stbtt__tesselate_cubic(points, x, y, vertices[i].cx, vertices[i].cy,
								   vertices[i].cx1, vertices[i].cy1, vertices[i].x, vertices[i].y,
								   objspace_flatness_squared, 0);
			x = vertices[i].x, y = vertices[i].y;
			break;
		}
	}
	contour_lengths[n] = points.length - start;

	//console.log("--cl(" + (n+1) + '):');
	//for (var i = 0; i <= n; i++) {
	//	console.log(" %d", contour_lengths[i]);
	//}
	//console.log("\n--pts(" + points.length + '):');
	//for (var i = 0; i < points.length; i++) {
	//	var pt = points[i];
	//	console.log(i + ': ' + pt.x  + ',' + pt.y);
	//}

    return points;
}

//extern void stbtt_Rasterize(stbtt__bitmap * result, float flatness_in_pixels,
//                stbtt_vertex * vertices, int num_verts, float scale_x,
//                float scale_y, float shift_x, float shift_y, int x_off,
//                int y_off, int invert, void *userdata)
function stbtt_Rasterize(result, flatness_in_pixels, vertices, scale_x, scale_y, shift_x, shift_y,
						 x_off, y_off, invert) {
	x_off |= 0, y_off |= 0;
    var scale = scale_x > scale_y ? scale_y : scale_x,
		wcount = [],
		windings = stbtt_FlattenCurves(vertices, flatness_in_pixels / scale, wcount);
    if (windings) {
        stbtt__rasterize(result, windings, wcount, scale_x, scale_y,
						 shift_x, shift_y, x_off, y_off, invert);
    }
}

//extern void stbtt_MakeGlyphBitmapSubpixel(const stbtt_fontinfo * info,
//                              unsigned char *output, int out_w, int out_h,
//                              int out_stride, float scale_x, float scale_y,
//                              float shift_x, float shift_y, int glyph)
function stbtt_MakeGlyphBitmapSubpixel(info, buffer, out_w, out_h, out_stride,
									scale_x, scale_y, shift_x, shift_y, glyph) {
    var vertices = stbtt_GetGlyphShape(info, glyph);
    var gbm = {};
    var rect = stbtt_GetGlyphBitmapBoxSubpixel(info, glyph, scale_x, scale_y, shift_x, shift_y);
    gbm.pixels = buffer;
    gbm.w = out_w|0;
    gbm.h = out_h|0;
    gbm.stride = out_stride|0;

    if (gbm.w && gbm.h) {
        stbtt_Rasterize(gbm, 0.35, vertices, scale_x, scale_y, shift_x, shift_y, rect.x0, rect.y0, 1);
	}
}

//extern void stbtt_MakeCodepointBitmapSubpixel(const stbtt_fontinfo * info,
//                                  unsigned char *output, int out_w,
//                                  int out_h, int out_stride, float scale_x,
//                                  float scale_y, float shift_x,
//                                  float shift_y, int codepoint)
function stbtt_MakeCodepointBitmapSubpixel(info, buffer, out_w, out_h, out_stride,
									scale_x, scale_y, shift_x, shift_y, codepoint) {
    stbtt_MakeGlyphBitmapSubpixel(info, buffer, out_w, out_h, out_stride,
                                  scale_x, scale_y, shift_x, shift_y,
                                  stbtt_FindGlyphIndex(info, codepoint));
}

//extern int stbtt_InitFont(stbtt_fontinfo * info, const unsigned char *data, int offset)
function stbtt_InitFont(font, data, offset) {
    return stbtt_InitFont_internal(font, data, offset);
}


function InitFont(data) {
	var font = {};
    if (!stbtt_InitFont_internal(font, data, 0)) {
		return null;
	}

	var vm = stbtt_GetFontVMetrics(font);

	font.ascent = vm.ascent;
	font.descent = vm.descent;
	font.linegap = vm.linegap;

	return font;
}

function GetGlyph(font, codepoint, size_x, size_y) {
	size_y = size_y || size_x;
	var scale_x = size_x / font.ascent;
	var scale_y = size_y / font.ascent;

	var glyph = stbtt_FindGlyphIndex(font, codepoint);
	if (!glyph && codepoint) {
		return null;
	}

    var vertices = stbtt_GetGlyphShape(font, glyph);
	var rect = stbtt_GetGlyphBitmapBoxSubpixel(font, glyph, scale_x, scale_y, 0, 0);
	var width = rect.x1 - rect.x0;
	var height = rect.y1 - rect.y0;
	var pixels = null;

	if (width && height) {
		var gbm = {
			pixels : (pixels = new Uint8Array(width * height)),
			w : width,
			h : height,
			stride : width,
		}
		stbtt_Rasterize(gbm, 0.35, vertices, scale_x, scale_y, 0, 0, rect.x0, rect.y0, 1);
	}

	var hmetrics = stbtt_GetGlyphHMetrics(font, glyph);
	return {
		glyph:glyph, pixels:pixels, width:width, height:height, top:-rect.y0, left:rect.x0,
		advance:floor(hmetrics.advanceWidth * scale_x),
	}
}
function GetPaths(font, codepoint, size_x, size_y) {
	size_y = size_y || size_x;
	var scale_x = size_x / font.ascent;
	var scale_y = size_y / font.ascent;

	var glyph = stbtt_FindGlyphIndex(font, codepoint);
	if (!glyph && codepoint) {
		return null;
	}
    var vertices = stbtt_GetGlyphShape(font, glyph);
	var hmetrics = stbtt_GetGlyphHMetrics(font, glyph);

	// The hmetrics just give us advance.  We need ascent and descent as well.
	var ascent = 0;
	var descent = 0;

	// Convert to SVG notation
	var paths = [];
	if (vertices) {
		for (var i = 0, l = vertices.length; i < l; i++) {
			var v = vertices[i];
			var path;
			if (v.type == STBTT_vmove) {
				path = { type:'M', x:v.x * scale_x, y:v.y * scale_y };
			} else if (v.type == STBTT_vline) {
				path = { type:'L', x:v.x * scale_x, y:v.y * scale_y };
			} else if (v.type == STBTT_vcurve) {
				path = { type:'Q', x:v.x * scale_x, y:v.y * scale_y,
								  cx:v.cx * scale_x, cy:v.cy * scale_y };
			} else if (v.type == STBTT_vcubic) {
				path = { type:'C', x:v.x * scale_x, y:v.y * scale_y,
								 cx1:v.cx * scale_x, cy1:v.cy * scale_y,
								 cx2:v.cx1 * scale_x, cy2:v.cy1 * scale_y };
			} else {
				continue;
			}
			if (path.y > ascent)  ascent  = path.y;
			if (path.y < descent) descent = path.y;
			paths.push(path);
		}
	}

	// Add the glyph metrics to the returned array.
	paths.advance = hmetrics.advanceWidth * scale_x;
	paths.ascent  = ascent;
	paths.descent = descent;
	return paths;
}


// exports
return {
	InitFont:	InitFont,
	GetGlyph:	GetGlyph,
	GetPaths:	GetPaths,
}

})();
function toUint8Array(data) {
    if (typeof data == "string") {
        var binary = /[^A-Za-z0-9+\/=\s]/.test(data);
        var bstr = binary ? data : atob(data),
            len = bstr.length,
            bytes = new Uint8Array(len);
        for (var i = 0; i < len; i++) {
            bytes[i] = bstr.charCodeAt(i);
        }
        return bytes;
    } else if (data instanceof Uint8Array) {
        return data;
    } else if (data instanceof ArrayBuffer) {
        return new Uint8Array(data);
    }
    throw new ReferenceError("data must be a binary or base64 encoded string or Uint8Array");
}

FontLib.loadFont("OCR-A", 100, 100, "");
FontLib.loadFont("OCR-B", 96, 100, "");
    return {
        toCanvas:ToCanvas, toSVG:ToSVG, render:Render, raw:ToRaw,
        drawingCanvas:DrawingCanvas, drawingSVG:DrawingSVG,
        fixupOptions:FixupOptions, loadFont:LoadFont, FontLib:FontLib,
        BWIPJS_VERSION:BWIPJS_VERSION, BWIPP_VERSION:BWIPP_VERSION,
    };
}));

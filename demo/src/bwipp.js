// bwip-js // Barcode Writer in Pure JavaScript
// https://github.com/metafloor/bwip-js
//
// This code was automatically generated from:
// Barcode Writer in Pure PostScript - Version 2024-06-18
//
// Copyright (c) 2011-2025 Mark Warren
// Copyright (c) 2004-2024 Terry Burton
//
// Licensed MIT. See the LICENSE file in the bwip-js root directory.
// bwip-js/barcode-hdr.js
//
// This code is injected above the cross-compiled barcode.js.

// The BWIPJS object (graphics interface)
var $$ = null;
var $j = 0; // stack pointer
var $k = []; // operand stack
var $_ = {}; // base of the dictionary stack

// Array ctor
//  $a()    : Build a new array up to the Infinity-marker on the stack.
//  $a(arr) : Convert native array to a "view" of the array.
//  $a(len) : Create a new array of length `len`
function $a(a) {
    if (!arguments.length) {
        for (var i = $j - 1; i >= 0 && $k[i] !== Infinity; i--);
        if (i < 0) {
            throw new Error('array-marker-not-found');
        }
        a = $k.splice(i + 1, $j - 1 - i);
        $j = i;
    } else if (!(a instanceof Array)) {
        a = new Array(+arguments[0]);
        for (var i = 0, l = a.length; i < l; i++) {
            a[i] = null;
        }
    }
    a.b = a; // base array
    a.o = 0; // offset into base
    return a;
}

// dict ctor
//  $d() : look for the Infinity marker on the stack
function $d() {
    // Build the dictionary in the order the keys/values were pushed so enumeration
    // occurs in the correct sequence.
    for (var mark = $j - 1; mark >= 0 && $k[mark] !== Infinity; mark -= 2) {
        if ($k[mark - 1] === Infinity) {
            throw new Error('dict-malformed-stack');
        }
    }
    if (mark < 0) {
        throw new Error('dict-marker-not-found');
    }
    var d = new Map;
    for (var i = mark + 1; i < $j; i += 2) {
        // Unlike javascript, postscript dict keys differentiate between
        // numbers and the string representation of a number.
        var k = $k[i]; // "key" into the dict entry
        var t = typeof k;
        if (t == 'number' || t == 'string') {
            d.set(k, $k[i + 1]);
        } else if (k instanceof Uint8Array) {
            d.set($z(k), $k[i + 1]);
        } else {
            throw new Error('dict-not-a-valid-key(' + k + ')');
        }
    }
    $j = mark;
    return d;
}

// string ctor
//  s(number)   : create zero-filled string of number-length
//  s(string)   : make a copy of the string
//  s(uint8[])  : make a copy of the string
//
// Returns a Uint8Array-string.
function $s(v) {
    var t = typeof v;
    if (t === 'number') {
        return new Uint8Array(v);
    }
    if (t !== 'string') {
        v = '' + v;
    }
    var s = new Uint8Array(v.length);
    for (var i = 0, l = v.length; i < l; i++) {
        s[i] = v.charCodeAt(i);
    }
    return s;
}

// ... n c roll
function $r(n, c) {
    if ($j < n) {
        throw new Error('roll: --stack-underflow--');
    }
    if (!c) {
        return;
    }
    if (c < 0) {
        var t = $k.splice($j - n, -c);
    } else {
        var t = $k.splice($j - n, n - c);
    }
    $k.splice.apply($k, [$j - t.length, 0].concat(t));
}

// Primarily designed to convert uint8-string to string, but will call the
// the toString() method on any value.
function $z(s) {
    if (s instanceof Uint8Array) {
        return String.fromCharCode.apply(null, s);
    }
    return '' + s;
}

// Copies source to dest and returns a view of just the copied characters
function $strcpy(dst, src) {
    if (typeof dst === 'string') {
        dst = $s(dst);
    }
    if (src instanceof Uint8Array) {
        for (var i = 0, l = src.length; i < l; i++) {
            dst[i] = src[i];
        }
    } else {
        for (var i = 0, l = src.length; i < l; i++) {
            dst[i] = src.charCodeAt(i);
        }
    }
    return src.length < dst.length ? dst.subarray(0, src.length) : dst;
}

// Copies source to dest and should (but doesn't) return a view of just the copied elements
function $arrcpy(dst, src) {
    for (var i = 0, l = src.length; i < l; i++) {
        dst[i] = src[i];
    }
    dst.length = src.length;
    return dst;
}

// cvs operator - convert a value to its string representation
//  s : string to store into
//  v : any value
function $cvs(s, v) {
    var t = typeof v;
    if (t == 'number' || t == 'boolean' || v === null) {
        v = '' + v;
    } else if (t !== 'string') {
        v = '--nostringval--';
    }
    for (var i = 0, l = v.length; i < l; i++) {
        s[i] = v.charCodeAt(i);
    }
    $k[$j++] = i < s.length ? s.subarray(0, i) : s;
}
// cvi operator - converts a numeric string value to integer.
function $cvi(s) {
    if (s instanceof Uint8Array) {
        // nul-chars on the end of a string are ignored by postscript but cause javascript
        // to return a zero result.
        return String.fromCharCode.apply(null, s).replace(/\0+$/, '') | 0;
    }
    return ('' + s) | 0;
}

// cvrs operator - convert a number to a radix string
//  s : string to store into
//  n : number
//  r : radix
function $cvrs(s, n, r) {
    return $strcpy(s, (~~n).toString(r).toUpperCase());
}

// cvx - convert to executable.
// This is only used by BWIPP to convert <XX> string literals.
function $cvx(s) {
    s = $z(s)
    var m = /^\s*<((?:[0-9a-fA-F]{2})+)>\s*$/.exec(s);
    if (!m) {
        throw new Error('cvx: not a <HH> hex string literal');
    }
    var h = m[1];
    var l = h.length >> 1;
    var u = new Uint8Array(l);
    for (var i = 0, j = 0; i < l; i++) {
        var c0 = h.charCodeAt(j++);
        var c1 = h.charCodeAt(j++);
        u[i] = ((c0 < 58 ? c0 - 48 : (c0 & 15) + 9) << 4) +
            (c1 < 58 ? c1 - 48 : (c1 & 15) + 9);
    }
    return u;
}

// get operator
//  s : source
//  k : key
function $get(s, k) {
    if (s instanceof Uint8Array) {
        return s[k];
    }
    if (typeof s === 'string') {
        return s.charCodeAt(k);
    }
    if (s instanceof Array) {
        return s.b[s.o + k];
    }
    if (k instanceof Uint8Array) {
        return s.get($z(k));
    }
    return s.get(k);
}

// put operator
//  d : dest
//  k : key
//  v : value
function $put(d, k, v) {
    if (d instanceof Uint8Array) {
        d[k] = v;
    } else if (d instanceof Array) {
        d.b[d.o + k] = v;
    } else if (typeof d == 'object') {
        if (k instanceof Uint8Array) {
            d.set($z(k), v);
        } else {
            d.set(k, v);
        }
    } else {
        throw new Error('put-not-writable-' + (typeof d));
    }
}

// getinterval operator
//  s : src
//  o : offset
//  l : length
function $geti(s, o, l) {
    if (s instanceof Uint8Array) {
        return s.subarray(o, o + l);
    }
    if (s instanceof Array) {
        var a = new Array(l);
        a.b = s.b; // base array
        a.o = s.o + o; // offset into base
        return a;
    }
    // Must be a string
    return s.substr(o, l);
}

// putinterval operator
//  d : dst
//  o : offset
//  s : src
function $puti(d, o, s) {
    if (d instanceof Uint8Array) {
        if (typeof s == 'string') {
            for (var i = 0, l = s.length; i < l; i++) {
                d[o + i] = s.charCodeAt(i);
            }
        } else {
            // When both d and s are the same, we want to copy
            // backwards, which works for the general case as well.
            for (var i = s.length - 1; i >= 0; i--) {
                d[o + i] = s[i];
            }
        }
    } else if (d instanceof Array) {
        // Operate on the base arrays
        var darr = d.b;
        var doff = o + d.o;
        var sarr = s.b;
        var soff = s.o;

        for (var i = 0, l = s.length; i < l; i++) {
            darr[doff + i] = sarr[soff + i];
        }
    } else {
        throw new Error('putinterval-not-writable-' + (typeof d));
    }
}

// type operator
function $type(v) {
    // null can be mis-typed - get it out of the way
    if (v == null) {
        return 'nulltype';
    }
    var t = typeof v;
    if (t == 'number') {
        return v % 1 ? 'realtype' : 'integertype';
    }
    if (t == 'boolean') {
        return 'booleantype';
    }
    if (t == 'string' || v instanceof Uint8Array) {
        return 'stringtype';
    }
    if (t == 'function') {
        return 'operatortype';
    }
    if (v instanceof Array) {
        return 'arraytype';
    }
    return 'dicttype';
    // filetype
    // fonttype
    // gstatetype
    // marktype (v === Infinity)
    // nametype
    // savetype
}

// anchorsearch operator
//      string seek anchorsearch suffix seek true %if-found
//                               string false     %if-not-found
function $anchorsearch(str, seek) {
    if (!(str instanceof Uint8Array)) {
        str = $s(str);
    }
    var i = 0,
        ls = str.length,
        lk = seek.length;

    // Optimize for single characters.
    if (lk == 1) {
        var cd = seek instanceof Uint8Array ? seek[0] : seek.charCodeAt(0);
        i = str[0] == cd ? 1 : ls;
    } else if (seek.length <= ls) {
        // Slow path,
        if (!(seek instanceof Uint8Array)) {
            seek = $s(seek);
        }
        for (; i < lk && str[i] == seek[i]; i++);
    }
    if (i == lk) {
        $k[$j++] = str.subarray(lk);
        $k[$j++] = str.subarray(0, lk);
        $k[$j++] = true;
    } else {
        $k[$j++] = str;
        $k[$j++] = false;
    }
}

// search operator
//      string seek search suffix match prefix true %if-found
//                         string false             %if-not-found
function $search(str, seek) {
    if (!(str instanceof Uint8Array)) {
        str = $s(str);
    }
    var ls = str.length;

    // Virtually all uses of search in BWIPP are for single-characters.
    // Optimize for that case.
    if (seek.length == 1) {
        var lk = 1;
        var cd = seek instanceof Uint8Array ? seek[0] : seek.charCodeAt(0);
        for (var i = 0; i < ls && str[i] != cd; i++);
    } else {
        // Slow path,
        if (!(seek instanceof Uint8Array)) {
            seek = $s(seek);
        }
        var lk = seek.length;
        var cd = seek[0];
        for (var i = 0; i < ls && str[i] != cd; i++);
        while (i < ls) {
            for (var j = 1; j < lk && str[i + j] === seek[j]; j++);
            if (j === lk) {
                break;
            }
            for (i++; i < ls && str[i] != cd; i++);
        }
    }
    if (i < ls) {
        $k[$j++] = str.subarray(i + lk);
        $k[$j++] = str.subarray(i, i + lk);
        $k[$j++] = str.subarray(0, i);
        $k[$j++] = true;
    } else {
        $k[$j++] = str;
        $k[$j++] = false;
    }
}

// The callback is omitted when forall is being used just to push onto the
// stack.  The callback normally returns undefined.  A return of true means break.
function $forall(o, cb) {
    if (o instanceof Uint8Array) {
        for (var i = 0, l = o.length; i < l; i++) {
            $k[$j++] = o[i];
            if (cb && cb()) break;
        }
    } else if (o instanceof Array) {
        // The array may be a view.
        for (var a = o.b, i = o.o, l = o.o + o.length; i < l; i++) {
            $k[$j++] = a[i];
            if (cb && cb()) break;
        }
    } else if (typeof o === 'string') {
        for (var i = 0, l = o.length; i < l; i++) {
            $k[$j++] = o.charCodeAt(i);
            if (cb && cb()) break;
        }
    } else if (o instanceof Map) {
        for (var keys = o.keys(), i = 0, l = o.size; i < l; i++) {
            var id = keys.next().value;
            $k[$j++] = id;
            $k[$j++] = o.get(id);
            if (cb && cb()) break;
        }
    } else {
        for (var id in o) {
            $k[$j++] = id;
            $k[$j++] = o[id];
            if (cb && cb()) break;
        }
    }
}

function $cleartomark() {
    while ($j > 0 && $k[--$j] !== Infinity);
}

function $counttomark() {
    for (var i = $j - 1; i >= 0 && $k[i] !== Infinity; i--);
    return $j - i - 1;
}

function $aload(a) {
    for (var i = 0, l = a.length, b = a.b, o = a.o; i < l; i++) {
        $k[$j++] = b[o + i];
    }
    // This push has been optimized out.  See $.aload() in psc.js.
    //$k[$j++] = a;
}

function $astore(a) {
    for (var i = 0, l = a.length, b = a.b, o = a.o + l - 1; i < l; i++) {
        b[o - i] = $k[--$j];
    }
    $k[$j++] = a;
}

function $eq(a, b) {
    if (typeof a === 'string' && typeof b === 'string') {
        return a == b;
    }
    if (a instanceof Uint8Array && b instanceof Uint8Array) {
        if (a.length != b.length) {
            return false;
        }
        for (var i = 0, l = a.length; i < l; i++) {
            if (a[i] != b[i]) {
                return false;
            }
        }
        return true;
    }
    if (a instanceof Uint8Array && typeof b === 'string' ||
        b instanceof Uint8Array && typeof a === 'string') {
        if (a instanceof Uint8Array) {
            a = $z(a);
        } else {
            b = $z(b);
        }
        return a == b;
    }
    return a == b;
}

function $ne(a, b) {
    return !$eq(a, b);
}

function $lt(a, b) {
    if (a instanceof Uint8Array) {
        a = $z(a);
    }
    if (b instanceof Uint8Array) {
        b = $z(b);
    }
    return a < b;
}

function $le(a, b) {
    if (a instanceof Uint8Array) {
        a = $z(a);
    }
    if (b instanceof Uint8Array) {
        b = $z(b);
    }
    return a <= b;
}

function $gt(a, b) {
    if (a instanceof Uint8Array) {
        a = $z(a);
    }
    if (b instanceof Uint8Array) {
        b = $z(b);
    }
    return a > b;
}

function $ge(a, b) {
    if (a instanceof Uint8Array) {
        a = $z(a);
    }
    if (b instanceof Uint8Array) {
        b = $z(b);
    }
    return a >= b;
}

function $an(a, b) { // and
    return (typeof a === 'boolean') ? a && b : a & b;
}

function $or(a, b) { // or
    return (typeof a === 'boolean') ? a || b : a | b;
}

function $xo(a, b) { // xor
    return (typeof a === 'boolean') ? !a && b || a && !b : a ^ b;
}

function $nt(a) {
    return typeof a == 'boolean' ? !a : ~a;
}
// emulate single-precision floating-point (pseudo-polyfill for Math.fround)
var $f = (function(fa) {
    return function(v) {
        return Number.isInteger(v) ? v : (fa[0] = v, fa[0]);
    };
})(new Float32Array(1));

// This is a replacement for the BWIPP raiseerror function.
function bwipp_raiseerror() {
    var info = $k[--$j];
    var name = $k[--$j];
    if (typeof info == 'string' || info instanceof Uint8Array) {
        throw new Error($z(name) + ": " + $z(info));
    } else {
        $k[$j++] = info;
        throw new Error($z(name));
    }
}

// This is a replacement for the BWIPP processoptions function.
// We cannot use the BWIPP version due to two reasons:
// - legacy code allows strings to be numbers and numbers to be strings
// - in javascript, there is no way to tell the difference between a real
//   number that is an integer, and an actual integer.
//
// options currentdict processoptions exec -> options
function bwipp_processoptions() {
    var dict = $k[--$j];
    var opts = $k[$j - 1];
    if (typeof opts == 'string') {
        let vals = opts.trim().split(/ +/g)
        $k[$j - 1] = opts = new Map();
        for (let i = 0; i < vals.length; i++) {
            let pair = vals[i].split('=');
            if (pair.length == 1) {
                opts.set(pair[0], true);
            } else {
                opts.set(pair[0], pair[1]);
            }
        }
    }
    for (var id in dict) {
        var val;
        if (!opts.has(id)) {
            continue;
        }
        val = opts.get(id);
        var def = dict[id];
        var typ = typeof def;

        // null is a placeholder for realtype
        if (def == null || typ == 'number') {
            // This allows for numeric strings
            if (!isFinite(+val)) {
                throw new Error('bwipp.invalidOptionType: ' + id +
                    ': not a realtype: ' + val);
            }
            if (typeof val == 'string') {
                val = +val;
                opts.set(id, val);
            }
        } else if (typ == 'boolean') {
            if (val !== true && val !== false) {
                // In keeping with the ethos of javascript, allow a more relaxed
                // interpretation of boolean.
                if (val == null || (val | 0) === val) {
                    val = !!val;
                } else if (val == 'true') {
                    val = true;
                } else if (val == 'false') {
                    val = false;
                } else {
                    throw new Error('bwipp.invalidOptionType: ' + id +
                        ': not a booleantype: ' + val);
                }
                opts.set(id, val);
            }
        } else if (typ == 'string' || def instanceof Uint8Array) {
            // This allows numbers to be strings
            if (typeof val == 'number') {
                val = '' + val;
                opts.set(id, val);
            } else if (typeof val != 'string' && !(val instanceof Uint8Array)) {
                throw new Error('bwipp.invalidOptionType: ' + id +
                    ': not a stringtype: ' + val);
            }
        }
        // Set the option into the dictionary
        dict[id] = val;
    }
}

// Replacement for loadctx which contains complex postscript operations
// that we don't implement correctly.
// f is a reference to the enclosing function.
function bwipp_loadctx(f) {
    if (!f.$ctx) {
        f.$ctx = {};
    }
    var next = Object.getPrototypeOf($_);
    Object.setPrototypeOf(f.$ctx, next);
    Object.setPrototypeOf($_, f.$ctx);
}

function bwipp_parseinput() {
    $_ = Object.create($_); //#200
    bwipp_loadctx(bwipp_parseinput); //#202
    $_.fncvals = $k[--$j]; //#204
    $_.barcode = $k[--$j]; //#205
    var _2 = 'parse'; //#207
    $_[_2] = $get($_.fncvals, _2); //#207
    delete $_.fncvals[_2]; //#207
    var _6 = 'parsefnc'; //#208
    $_[_6] = $get($_.fncvals, _6); //#208
    delete $_.fncvals[_6]; //#208
    var _A = 'parseonly'; //#209
    var _C = $get($_.fncvals, _A) !== undefined; //#209
    $_[_A] = _C; //#209
    delete $_.fncvals[_A]; //#209
    var _E = 'eci'; //#210
    var _G = $get($_.fncvals, _E) !== undefined; //#210
    $_[_E] = _G; //#210
    delete $_.fncvals[_E]; //#210
    if (!bwipp_parseinput.__225__) { //#225
        $_ = Object.create($_); //#225
        $k[$j++] = Infinity; //#214
        var _I = $a(['NUL', 'SOH', 'STX', 'ETX', 'EOT', 'ENQ', 'ACK', 'BEL', 'BS', 'TAB', 'LF', 'VT', 'FF', 'CR', "", "", 'DLE', 'DC1', 'DC2', 'DC3', 'DC4', 'NAK', 'SYN', 'ETB', 'CAN', 'EM', 'SUB', 'ESC', 'FS', 'GS', 'RS', 'US']); //#219
        $k[$j++] = 0; //#223
        for (var _J = 0, _K = _I.length; _J < _K; _J++) { //#223
            var _M = $k[--$j]; //#222
            $k[$j++] = $get(_I, _J); //#222
            $k[$j++] = _M; //#222
            $k[$j++] = $f(_M + 1); //#222
        } //#222
        $j--; //#223
        $_.ctrl = $d(); //#224
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_parseinput.$ctx[id] = $_[id]); //#224
        bwipp_parseinput.__225__ = 1; //#224
        $_ = Object.getPrototypeOf($_); //#224
    } //#224
    $_.msg = $a($_.barcode.length); //#227
    $_.j = 0; //#228
    $k[$j++] = $_.barcode; //#347
    for (;;) { //#347
        $search($k[--$j], "^"); //#230
        var _T = $k[--$j]; //#230
        var _U = $k[--$j]; //#230
        $k[$j++] = _T; //#233
        $k[$j++] = _U.length; //#233
        $k[$j++] = $_.msg; //#233
        $k[$j++] = $_.j; //#233
        $k[$j++] = _U; //#233
        $k[$j++] = Infinity; //#233
        var _X = $k[--$j]; //#233
        var _Y = $k[--$j]; //#233
        $k[$j++] = _X; //#233
        $forall(_Y); //#233
        var _Z = $a(); //#233
        var _a = $k[--$j]; //#233
        $puti($k[--$j], _a, _Z); //#233
        $_.j = $f($k[--$j] + $_.j); //#234
        if ($k[--$j]) { //#345
            $j--; //#236
            for (var _f = 0, _g = 1; _f < _g; _f++) { //#343
                if ($an($nt($_.parse), $nt($_.parsefnc))) { //#243
                    $put($_.msg, $_.j, 94); //#240
                    $_.j = $f($_.j + 1); //#241
                    break; //#242
                } //#242
                $put($_.msg, $_.j, 94); //#246
                $_.j = $f($_.j + 1); //#247
                if ($_.parse) { //#290
                    var _q = $k[--$j]; //#251
                    $k[$j++] = _q; //#262
                    if (_q.length >= 3) { //#262
                        var _r = $k[--$j]; //#252
                        var _s = $geti(_r, 0, 3); //#252
                        var _t = $_.ctrl; //#252
                        var _u = $get(_t, _s) !== undefined; //#253
                        $k[$j++] = _r; //#261
                        $k[$j++] = _t; //#261
                        $k[$j++] = _s; //#261
                        if (_u) { //#260
                            $_.j = $f($_.j - 1); //#254
                            var _w = $k[--$j]; //#255
                            $put($_.msg, $_.j, $get($k[--$j], _w)); //#255
                            $_.j = $f($_.j + 1); //#256
                            var _12 = $k[--$j]; //#257
                            $k[$j++] = $geti(_12, 3, _12.length - 3); //#258
                            break; //#258
                        } else { //#260
                            $j -= 2; //#260
                        } //#260
                    } //#260
                    var _14 = $k[--$j]; //#263
                    $k[$j++] = _14; //#274
                    if (_14.length >= 2) { //#274
                        var _15 = $k[--$j]; //#264
                        var _16 = $geti(_15, 0, 2); //#264
                        var _17 = $_.ctrl; //#264
                        var _18 = $get(_17, _16) !== undefined; //#265
                        $k[$j++] = _15; //#273
                        $k[$j++] = _17; //#273
                        $k[$j++] = _16; //#273
                        if (_18) { //#272
                            $_.j = $f($_.j - 1); //#266
                            var _1A = $k[--$j]; //#267
                            $put($_.msg, $_.j, $get($k[--$j], _1A)); //#267
                            $_.j = $f($_.j + 1); //#268
                            var _1G = $k[--$j]; //#269
                            $k[$j++] = $geti(_1G, 2, _1G.length - 2); //#270
                            break; //#270
                        } else { //#272
                            $j -= 2; //#272
                        } //#272
                    } //#272
                    var _1I = $k[--$j]; //#275
                    $k[$j++] = _1I; //#289
                    if (_1I.length >= 3) { //#289
                        var _1J = $k[--$j]; //#276
                        var _1K = $geti(_1J, 0, 3); //#276
                        $k[$j++] = _1J; //#278
                        $k[$j++] = true; //#278
                        for (var _1L = 0, _1M = _1K.length; _1L < _1M; _1L++) { //#278
                            var _1N = $get(_1K, _1L); //#278
                            if ((_1N < 48) || (_1N > 57)) { //#277
                                $j--; //#277
                                $k[$j++] = false; //#277
                            } //#277
                        } //#277
                        if ($k[--$j]) { //#288
                            var _1P = $k[--$j]; //#280
                            var _1R = $cvi($geti(_1P, 0, 3)); //#280
                            $k[$j++] = _1P; //#283
                            $k[$j++] = _1R; //#283
                            if (_1R > 255) { //#283
                                $j -= 2; //#281
                                $k[$j++] = 'bwipp.invalidOrdinal#282'; //#282
                                $k[$j++] = "Ordinal must be 000 to 255"; //#282
                                bwipp_raiseerror(); //#282
                            } //#282
                            $_.j = $f($_.j - 1); //#284
                            $put($_.msg, $_.j, $k[--$j]); //#285
                            $_.j = $f($_.j + 1); //#286
                            var _1X = $k[--$j]; //#287
                            $k[$j++] = $geti(_1X, 3, _1X.length - 3); //#287
                        } //#287
                    } //#287
                } //#287
                if (($or($_.parseonly, $nt($_.parsefnc))) || ($get($_.msg, $f($_.j - 1)) != 94)) { //#295
                    break; //#295
                } //#295
                $_.j = $f($_.j - 1); //#298
                var _1f = $k[--$j]; //#299
                $k[$j++] = _1f; //#302
                if (_1f.length < 3) { //#302
                    $j--; //#300
                    $k[$j++] = 'bwipp.truncatedFNC#301'; //#301
                    $k[$j++] = "Function character truncated"; //#301
                    bwipp_raiseerror(); //#301
                } //#301
                var _1g = $k[--$j]; //#303
                $k[$j++] = _1g; //#308
                if ($get(_1g, 0) == 94) { //#308
                    $put($_.msg, $_.j, 94); //#304
                    $_.j = $f($_.j + 1); //#305
                    var _1l = $k[--$j]; //#306
                    $k[$j++] = $geti(_1l, 1, _1l.length - 1); //#307
                    break; //#307
                } //#307
                var _1n = $k[--$j]; //#309
                $k[$j++] = _1n; //#326
                if ($eq($geti(_1n, 0, 3), "ECI") && $_.eci) { //#326
                    var _1q = $k[--$j]; //#310
                    $k[$j++] = _1q; //#313
                    if (_1q.length < 9) { //#313
                        $j--; //#311
                        $k[$j++] = 'bwipp.truncatedECI#312'; //#312
                        $k[$j++] = "ECI truncated"; //#312
                        bwipp_raiseerror(); //#312
                    } //#312
                    var _1r = $k[--$j]; //#314
                    var _1s = $geti(_1r, 3, 6); //#314
                    $k[$j++] = _1r; //#320
                    $k[$j++] = _1s; //#320
                    for (var _1t = 0, _1u = _1s.length; _1t < _1u; _1t++) { //#320
                        var _1v = $get(_1s, _1t); //#320
                        if ((_1v < 48) || (_1v > 57)) { //#319
                            $j -= 2; //#317
                            $k[$j++] = 'bwipp.invalidECI#318'; //#318
                            $k[$j++] = "ECI must be 000000 to 999999"; //#318
                            bwipp_raiseerror(); //#318
                        } //#318
                    } //#318
                    var _1w = $k[--$j]; //#321
                    $k[$j++] = 0; //#321
                    $forall(_1w, function() { //#321
                        var _1x = $k[--$j]; //#321
                        var _1y = $k[--$j]; //#321
                        $k[$j++] = ($f(_1y - $f(_1x - 48))) * 10; //#321
                    }); //#321
                    $put($_.msg, $_.j, (~~($k[--$j] / 10)) - 1000000); //#322
                    $_.j = $f($_.j + 1); //#323
                    var _23 = $k[--$j]; //#324
                    $k[$j++] = $geti(_23, 9, _23.length - 9); //#325
                    break; //#325
                } //#325
                var _25 = $k[--$j]; //#327
                $k[$j++] = _25; //#330
                if (_25.length < 4) { //#330
                    $j--; //#328
                    $k[$j++] = 'bwipp.truncatedFNC#329'; //#329
                    $k[$j++] = "Function character truncated"; //#329
                    bwipp_raiseerror(); //#329
                } //#329
                var _26 = $k[--$j]; //#331
                var _27 = $geti(_26, 0, 4); //#331
                var _29 = $get($_.fncvals, _27) !== undefined; //#331
                $k[$j++] = _26; //#336
                $k[$j++] = _27; //#336
                if (!_29) { //#336
                    var _2A = $k[--$j]; //#332
                    var _2B = $s(_2A.length + 28); //#332
                    $puti(_2B, 28, _2A); //#332
                    $puti(_2B, 0, "Unknown function character: "); //#333
                    var _2C = $k[--$j]; //#334
                    $k[$j++] = _2B; //#334
                    $k[$j++] = _2C; //#334
                    $j--; //#334
                    var _2D = $k[--$j]; //#335
                    $k[$j++] = 'bwipp.unknownFNC#335'; //#335
                    $k[$j++] = _2D; //#335
                    bwipp_raiseerror(); //#335
                } //#335
                $put($_.msg, $_.j, $get($_.fncvals, $k[--$j])); //#338
                $_.j = $f($_.j + 1); //#339
                var _2K = $k[--$j]; //#340
                $k[$j++] = $geti(_2K, 4, _2K.length - 4); //#341
                break; //#341
            } //#341
        } else { //#345
            break; //#345
        } //#345
    } //#345
    if ($nt($_.parseonly)) { //#353
        $k[$j++] = $geti($_.msg, 0, $_.j); //#350
    } else { //#353
        $k[$j++] = $s($_.j); //#353
        for (var _2U = 0, _2T = $f($_.j - 1); _2U <= _2T; _2U += 1) { //#353
            var _2V = $k[--$j]; //#353
            $put(_2V, _2U, $get($_.msg, _2U)); //#353
            $k[$j++] = _2V; //#353
        } //#353
    } //#353
    $_ = Object.getPrototypeOf($_); //#356
    $_ = Object.getPrototypeOf($_); //#358
} //bwipp_parseinput
function bwipp_gs1process() {
    $_ = Object.create($_); //#383
    bwipp_loadctx(bwipp_gs1process); //#385
    if (!bwipp_gs1process.__2469__) { //#2469
        $_ = Object.create($_); //#2469
        var _1 = new Map([
            ["cset", 'N'],
            ["min", 18],
            ["max", 18],
            ["opt", false],
            ["linters", $a(['lintcsum', 'lintkey'])]
        ]); //#393
        var _2 = $a([_1]); //#393
        var _3 = $a([]); //#395
        var _4 = new Map([
            ["parts", _2],
            ["dlpkey", _3]
        ]); //#395
        var _5 = $a(['lintcsum', 'lintkey']); //#402
        var _6 = new Map([
            ["cset", 'N'],
            ["min", 14],
            ["max", 14],
            ["opt", false],
            ["linters", _5]
        ]); //#402
        var _7 = $a([_6]); //#402
        var _8 = $a(["255", "37"]); //#404
        var _9 = $a(["22", "10", "21"]); //#405
        var _A = $a(["235"]); //#405
        var _B = $a([_9, _A]); //#405
        var _C = new Map([
            ["parts", _7],
            ["ex", _8],
            ["dlpkey", _B]
        ]); //#405
        var _D = $a(['lintcsum', 'lintkey']); //#412
        var _E = new Map([
            ["cset", 'N'],
            ["min", 14],
            ["max", 14],
            ["opt", false],
            ["linters", _D]
        ]); //#412
        var _F = $a([_E]); //#412
        var _G = $a(["01", "03"]); //#414
        var _H = $a(["37"]); //#415
        var _I = $a([_H]); //#415
        var _J = $a([_I]); //#415
        var _K = new Map([
            ["parts", _F],
            ["ex", _G],
            ["req", _J]
        ]); //#415
        var _L = $a(['lintcsum', 'lintkey']); //#422
        var _M = new Map([
            ["cset", 'N'],
            ["min", 14],
            ["max", 14],
            ["opt", false],
            ["linters", _L]
        ]); //#422
        var _N = $a([_M]); //#422
        var _P = new Map([
            ["parts", _N],
            ["ex", $a(["01", "02", "37"])],
            ["dlattr", false]
        ]); //#425
        var _R = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#432
        var _a = new Map([
            ["parts", $a([_R])],
            ["req", $a([$a([$a(["01"]), $a(["02"]), $a(["03"]), $a(["8006"]), $a(["8026"])])])]
        ]); //#434
        var _c = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a(['lintyymmd0'])]
        ]); //#441
        var _k = new Map([
            ["parts", $a([_c])],
            ["req", $a([$a([$a(["01"]), $a(["02"]), $a(["8006"]), $a(["8026"])])])]
        ]); //#443
        var _m = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a(['lintyymmd0'])]
        ]); //#450
        var _r = new Map([
            ["parts", $a([_m])],
            ["req", $a([$a([$a(["8020"])])])]
        ]); //#452
        var _t = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a(['lintyymmd0'])]
        ]); //#459
        var _11 = new Map([
            ["parts", $a([_t])],
            ["req", $a([$a([$a(["01"]), $a(["02"]), $a(["8006"]), $a(["8026"])])])]
        ]); //#461
        var _13 = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a(['lintyymmd0'])]
        ]); //#470
        var _1C = new Map([
            ["parts", $a([_13])],
            ["req", $a([$a([$a(["01"]), $a(["02"]), $a(["255"]), $a(["8006"]), $a(["8026"])])])]
        ]); //#472
        var _1E = new Map([
            ["cset", 'N'],
            ["min", 2],
            ["max", 2],
            ["opt", false],
            ["linters", $a([])]
        ]); //#479
        var _1M = new Map([
            ["parts", $a([_1E])],
            ["req", $a([$a([$a(["01"]), $a(["02"]), $a(["8006"]), $a(["8026"])])])]
        ]); //#481
        var _1O = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#488
        var _1W = new Map([
            ["parts", $a([_1O])],
            ["ex", $a(["235"])],
            ["req", $a([$a([$a(["01"]), $a(["03"]), $a(["8006"])])])],
            ["dlattr", false]
        ]); //#492
        var _1Y = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#499
        var _1d = new Map([
            ["parts", $a([_1Y])],
            ["req", $a([$a([$a(["01"])])])],
            ["dlattr", false]
        ]); //#502
        var _1f = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 28],
            ["opt", false],
            ["linters", $a([])]
        ]); //#509
        var _1k = new Map([
            ["parts", $a([_1f])],
            ["req", $a([$a([$a(["01"])])])],
            ["dlattr", false]
        ]); //#512
        var _1m = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 30],
            ["opt", false],
            ["linters", $a([])]
        ]); //#519
        var _1u = new Map([
            ["parts", $a([_1m])],
            ["req", $a([$a([$a(["01"]), $a(["02"]), $a(["8006"]), $a(["8026"])])])]
        ]); //#521
        var _1w = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#529
        var _24 = $a([$a([$a(["01"]), $a(["02"]), $a(["03"]), $a(["8006"]), $a(["8026"])])]); //#531
        var _25 = new Map([
            ["parts", $a([_1w])],
            ["req", _24]
        ]); //#531
        var _27 = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#538
        var _2C = new Map([
            ["parts", $a([_27])],
            ["req", $a([$a([$a(["01"])])])]
        ]); //#540
        var _2E = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 30],
            ["opt", false],
            ["linters", $a([])]
        ]); //#547
        var _2M = new Map([
            ["parts", $a([_2E])],
            ["req", $a([$a([$a(["01"]), $a(["8006"])]), $a([$a(["21"])])])]
        ]); //#549
        var _2O = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 30],
            ["opt", false],
            ["linters", $a([])]
        ]); //#556
        var _2U = new Map([
            ["parts", $a([_2O])],
            ["req", $a([$a([$a(["01"]), $a(["8006"])])])]
        ]); //#558
        var _2W = new Map([
            ["cset", 'N'],
            ["min", 13],
            ["max", 13],
            ["opt", false],
            ["linters", $a(['lintcsum', 'lintkey'])]
        ]); //#565
        var _2Y = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 17],
            ["opt", true],
            ["linters", $a([])]
        ]); //#566
        var _2b = new Map([
            ["parts", $a([_2W, _2Y])],
            ["dlpkey", $a([])]
        ]); //#568
        var _2d = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#575
        var _2i = new Map([
            ["parts", $a([_2d])],
            ["req", $a([$a([$a(["414"])])])],
            ["dlattr", false]
        ]); //#578
        var _2k = new Map([
            ["cset", 'N'],
            ["min", 13],
            ["max", 13],
            ["opt", false],
            ["linters", $a(['lintcsum', 'lintkey'])]
        ]); //#585
        var _2m = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 12],
            ["opt", true],
            ["linters", $a([])]
        ]); //#586
        var _2q = new Map([
            ["parts", $a([_2k, _2m])],
            ["ex", $a(["01", "02", "415", "8006", "8020", "8026"])],
            ["dlpkey", $a([])]
        ]); //#589
        var _2s = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 8],
            ["opt", false],
            ["linters", $a([])]
        ]); //#596
        var _2y = new Map([
            ["parts", $a([_2s])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#598
        var _30 = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#605
        var _37 = new Map([
            ["parts", $a([_30])],
            ["ex", $a(["310n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#608
        var _39 = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#620
        var _3G = new Map([
            ["parts", $a([_39])],
            ["ex", $a(["311n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#623
        var _3I = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#635
        var _3P = new Map([
            ["parts", $a([_3I])],
            ["ex", $a(["312n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#638
        var _3R = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#650
        var _3Y = new Map([
            ["parts", $a([_3R])],
            ["ex", $a(["313n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#653
        var _3a = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#665
        var _3h = new Map([
            ["parts", $a([_3a])],
            ["ex", $a(["314n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#668
        var _3j = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#680
        var _3q = new Map([
            ["parts", $a([_3j])],
            ["ex", $a(["315n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#683
        var _3s = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#695
        var _3z = new Map([
            ["parts", $a([_3s])],
            ["ex", $a(["316n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#698
        var _41 = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#710
        var _48 = new Map([
            ["parts", $a([_41])],
            ["ex", $a(["320n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#713
        var _4A = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#725
        var _4H = new Map([
            ["parts", $a([_4A])],
            ["ex", $a(["321n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#728
        var _4J = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#740
        var _4Q = new Map([
            ["parts", $a([_4J])],
            ["ex", $a(["322n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#743
        var _4S = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#755
        var _4Z = new Map([
            ["parts", $a([_4S])],
            ["ex", $a(["323n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#758
        var _4b = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#770
        var _4i = new Map([
            ["parts", $a([_4b])],
            ["ex", $a(["324n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#773
        var _4k = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#785
        var _4r = new Map([
            ["parts", $a([_4k])],
            ["ex", $a(["325n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#788
        var _4t = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#800
        var _50 = new Map([
            ["parts", $a([_4t])],
            ["ex", $a(["326n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#803
        var _52 = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#815
        var _59 = new Map([
            ["parts", $a([_52])],
            ["ex", $a(["327n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#818
        var _5B = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#830
        var _5I = new Map([
            ["parts", $a([_5B])],
            ["ex", $a(["328n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#833
        var _5K = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#845
        var _5R = new Map([
            ["parts", $a([_5K])],
            ["ex", $a(["329n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#848
        var _5T = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#860
        var _5a = new Map([
            ["parts", $a([_5T])],
            ["ex", $a(["330n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#863
        var _5c = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#875
        var _5j = new Map([
            ["parts", $a([_5c])],
            ["ex", $a(["331n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#878
        var _5l = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#890
        var _5s = new Map([
            ["parts", $a([_5l])],
            ["ex", $a(["332n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#893
        var _5u = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#905
        var _61 = new Map([
            ["parts", $a([_5u])],
            ["ex", $a(["333n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#908
        var _63 = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#920
        var _6A = new Map([
            ["parts", $a([_63])],
            ["ex", $a(["334n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#923
        var _6C = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#935
        var _6J = new Map([
            ["parts", $a([_6C])],
            ["ex", $a(["335n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#938
        var _6L = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#950
        var _6S = new Map([
            ["parts", $a([_6L])],
            ["ex", $a(["336n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#953
        var _6U = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#965
        var _6a = new Map([
            ["parts", $a([_6U])],
            ["ex", $a(["337n"])],
            ["req", $a([$a([$a(["01"])])])]
        ]); //#968
        var _6c = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#980
        var _6j = new Map([
            ["parts", $a([_6c])],
            ["ex", $a(["340n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#983
        var _6l = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#995
        var _6s = new Map([
            ["parts", $a([_6l])],
            ["ex", $a(["341n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#998
        var _6u = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1010
        var _71 = new Map([
            ["parts", $a([_6u])],
            ["ex", $a(["342n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#1013
        var _73 = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1025
        var _7A = new Map([
            ["parts", $a([_73])],
            ["ex", $a(["343n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#1028
        var _7C = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1040
        var _7J = new Map([
            ["parts", $a([_7C])],
            ["ex", $a(["344n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#1043
        var _7L = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1055
        var _7S = new Map([
            ["parts", $a([_7L])],
            ["ex", $a(["345n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#1058
        var _7U = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1070
        var _7b = new Map([
            ["parts", $a([_7U])],
            ["ex", $a(["346n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#1073
        var _7d = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1085
        var _7k = new Map([
            ["parts", $a([_7d])],
            ["ex", $a(["347n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#1088
        var _7m = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1100
        var _7t = new Map([
            ["parts", $a([_7m])],
            ["ex", $a(["348n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#1103
        var _7v = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1115
        var _82 = new Map([
            ["parts", $a([_7v])],
            ["ex", $a(["349n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#1118
        var _84 = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1130
        var _8B = new Map([
            ["parts", $a([_84])],
            ["ex", $a(["350n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1133
        var _8D = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1145
        var _8K = new Map([
            ["parts", $a([_8D])],
            ["ex", $a(["351n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1148
        var _8M = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1160
        var _8T = new Map([
            ["parts", $a([_8M])],
            ["ex", $a(["352n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1163
        var _8V = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1175
        var _8c = new Map([
            ["parts", $a([_8V])],
            ["ex", $a(["353n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#1178
        var _8e = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1190
        var _8l = new Map([
            ["parts", $a([_8e])],
            ["ex", $a(["354n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#1193
        var _8n = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1205
        var _8u = new Map([
            ["parts", $a([_8n])],
            ["ex", $a(["355n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#1208
        var _8w = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1220
        var _93 = new Map([
            ["parts", $a([_8w])],
            ["ex", $a(["356n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1223
        var _95 = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1235
        var _9C = new Map([
            ["parts", $a([_95])],
            ["ex", $a(["357n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1238
        var _9E = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1250
        var _9L = new Map([
            ["parts", $a([_9E])],
            ["ex", $a(["360n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1253
        var _9N = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1265
        var _9U = new Map([
            ["parts", $a([_9N])],
            ["ex", $a(["361n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1268
        var _9W = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1280
        var _9d = new Map([
            ["parts", $a([_9W])],
            ["ex", $a(["362n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#1283
        var _9f = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1295
        var _9m = new Map([
            ["parts", $a([_9f])],
            ["ex", $a(["363n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#1298
        var _9o = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1310
        var _9v = new Map([
            ["parts", $a([_9o])],
            ["ex", $a(["364n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1313
        var _9x = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1325
        var _A4 = new Map([
            ["parts", $a([_9x])],
            ["ex", $a(["365n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1328
        var _A6 = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1340
        var _AD = new Map([
            ["parts", $a([_A6])],
            ["ex", $a(["366n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1343
        var _AF = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1355
        var _AM = new Map([
            ["parts", $a([_AF])],
            ["ex", $a(["367n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#1358
        var _AO = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1370
        var _AV = new Map([
            ["parts", $a([_AO])],
            ["ex", $a(["368n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#1373
        var _AX = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1385
        var _Ae = new Map([
            ["parts", $a([_AX])],
            ["ex", $a(["369n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#1388
        var _Ag = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 8],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1400
        var _Ao = new Map([
            ["parts", $a([_Ag])],
            ["req", $a([$a([$a(["00"])]), $a([$a(["02"]), $a(["8026"])])])]
        ]); //#1402
        var _Aq = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 15],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1409
        var _Ax = new Map([
            ["parts", $a([_Aq])],
            ["ex", $a(["390n", "391n", "394n", "8111"])],
            ["req", $a([$a([$a(["255"]), $a(["8020"])])])]
        ]); //#1412
        var _Az = new Map([
            ["cset", 'N'],
            ["min", 3],
            ["max", 3],
            ["opt", false],
            ["linters", $a(['lintiso4217'])]
        ]); //#1428
        var _B1 = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 15],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1429
        var _B7 = new Map([
            ["parts", $a([_Az, _B1])],
            ["ex", $a(["391n"])],
            ["req", $a([$a([$a(["8020"])])])]
        ]); //#1432
        var _B9 = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 15],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1448
        var _BL = new Map([
            ["parts", $a([_B9])],
            ["ex", $a(["392n", "393n"])],
            ["req", $a([$a([$a(["01"])]), $a([$a(["30"]), $a(["31nn"]), $a(["32nn"]), $a(["35nn"]), $a(["36nn"])])])]
        ]); //#1451
        var _BN = new Map([
            ["cset", 'N'],
            ["min", 3],
            ["max", 3],
            ["opt", false],
            ["linters", $a(['lintiso4217'])]
        ]); //#1467
        var _BP = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 15],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1468
        var _BZ = new Map([
            ["parts", $a([_BN, _BP])],
            ["ex", $a(["393n"])],
            ["req", $a([$a([$a(["30"]), $a(["31nn"]), $a(["32nn"]), $a(["35nn"]), $a(["36nn"])])])]
        ]); //#1471
        var _Bb = new Map([
            ["cset", 'N'],
            ["min", 4],
            ["max", 4],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1487
        var _Bh = new Map([
            ["parts", $a([_Bb])],
            ["ex", $a(["394n", "8111"])],
            ["req", $a([$a([$a(["255"])])])]
        ]); //#1490
        var _Bj = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1500
        var _Bt = new Map([
            ["parts", $a([_Bj])],
            ["ex", $a(["392n", "393n", "395n", "8005"])],
            ["req", $a([$a([$a(["30"]), $a(["31nn"]), $a(["32nn"]), $a(["35nn"]), $a(["36nn"])])])]
        ]); //#1503
        var _Bv = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 30],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1515
        var _Bx = new Map([
            ["parts", $a([_Bv])]
        ]); //#1515
        var _Bz = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 30],
            ["opt", false],
            ["linters", $a(['lintkey'])]
        ]); //#1523
        var _C2 = new Map([
            ["parts", $a([_Bz])],
            ["dlpkey", $a([])]
        ]); //#1525
        var _C4 = new Map([
            ["cset", 'N'],
            ["min", 17],
            ["max", 17],
            ["opt", false],
            ["linters", $a(['lintcsum', 'lintkey'])]
        ]); //#1532
        var _C7 = new Map([
            ["parts", $a([_C4])],
            ["dlpkey", $a([])]
        ]); //#1534
        var _C9 = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 30],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1541
        var _CE = new Map([
            ["parts", $a([_C9])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1543
        var _CG = new Map([
            ["cset", 'N'],
            ["min", 13],
            ["max", 13],
            ["opt", false],
            ["linters", $a(['lintcsum', 'lintkey'])]
        ]); //#1550
        var _CI = new Map([
            ["parts", $a([_CG])]
        ]); //#1550
        var _CK = new Map([
            ["cset", 'N'],
            ["min", 13],
            ["max", 13],
            ["opt", false],
            ["linters", $a(['lintcsum', 'lintkey'])]
        ]); //#1561
        var _CP = new Map([
            ["parts", $a([_CK])],
            ["dlpkey", $a([$a(["254"]), $a(["7040"])])]
        ]); //#1563
        var _CR = new Map([
            ["cset", 'N'],
            ["min", 13],
            ["max", 13],
            ["opt", false],
            ["linters", $a(['lintcsum', 'lintkey'])]
        ]); //#1570
        var _CY = new Map([
            ["parts", $a([_CR])],
            ["req", $a([$a([$a(["8020"])])])],
            ["dlpkey", $a([$a(["8020"])])]
        ]); //#1573
        var _Ca = new Map([
            ["cset", 'N'],
            ["min", 13],
            ["max", 13],
            ["opt", false],
            ["linters", $a(['lintcsum', 'lintkey'])]
        ]); //#1580
        var _Cc = new Map([
            ["parts", $a([_Ca])]
        ]); //#1580
        var _Ce = new Map([
            ["cset", 'N'],
            ["min", 13],
            ["max", 13],
            ["opt", false],
            ["linters", $a(['lintcsum', 'lintkey'])]
        ]); //#1588
        var _Ci = new Map([
            ["parts", $a([_Ce])],
            ["dlpkey", $a([$a(["7040"])])]
        ]); //#1590
        var _Ck = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1597
        var _Cn = new Map([
            ["parts", $a([_Ck])],
            ["ex", $a(["421"])]
        ]); //#1599
        var _Cp = new Map([
            ["cset", 'N'],
            ["min", 3],
            ["max", 3],
            ["opt", false],
            ["linters", $a(['lintiso3166'])]
        ]); //#1606
        var _Cr = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 9],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1607
        var _Cu = new Map([
            ["parts", $a([_Cp, _Cr])],
            ["ex", $a(["4307"])]
        ]); //#1609
        var _Cw = new Map([
            ["cset", 'N'],
            ["min", 3],
            ["max", 3],
            ["opt", false],
            ["linters", $a(['lintiso3166'])]
        ]); //#1616
        var _D5 = new Map([
            ["parts", $a([_Cw])],
            ["ex", $a(["426"])],
            ["req", $a([$a([$a(["01"]), $a(["02"]), $a(["8006"]), $a(["8026"])])])]
        ]); //#1619
        var _D7 = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 15],
            ["opt", false],
            ["linters", $a(['lintiso3166list'])]
        ]); //#1626
        var _DE = new Map([
            ["parts", $a([_D7])],
            ["ex", $a(["426"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1629
        var _DG = new Map([
            ["cset", 'N'],
            ["min", 3],
            ["max", 3],
            ["opt", false],
            ["linters", $a(['lintiso3166'])]
        ]); //#1636
        var _DN = new Map([
            ["parts", $a([_DG])],
            ["ex", $a(["426"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1639
        var _DP = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 15],
            ["opt", false],
            ["linters", $a(['lintiso3166list'])]
        ]); //#1646
        var _DW = new Map([
            ["parts", $a([_DP])],
            ["ex", $a(["426"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1649
        var _DY = new Map([
            ["cset", 'N'],
            ["min", 3],
            ["max", 3],
            ["opt", false],
            ["linters", $a(['lintiso3166'])]
        ]); //#1656
        var _De = new Map([
            ["parts", $a([_DY])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1658
        var _Dg = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 3],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1665
        var _Do = new Map([
            ["parts", $a([_Dg])],
            ["req", $a([$a([$a(["01"]), $a(["02"])]), $a([$a(["422"])])])]
        ]); //#1667
        var _Dq = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 35],
            ["opt", false],
            ["linters", $a(['lintpcenc'])]
        ]); //#1674
        var _Dv = new Map([
            ["parts", $a([_Dq])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1676
        var _Dx = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 70],
            ["opt", false],
            ["linters", $a(['lintpcenc'])]
        ]); //#1684
        var _E2 = new Map([
            ["parts", $a([_Dx])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1686
        var _E4 = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 70],
            ["opt", false],
            ["linters", $a(['lintpcenc'])]
        ]); //#1693
        var _E9 = new Map([
            ["parts", $a([_E4])],
            ["req", $a([$a([$a(["4302"])])])]
        ]); //#1695
        var _EB = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 70],
            ["opt", false],
            ["linters", $a(['lintpcenc'])]
        ]); //#1702
        var _EG = new Map([
            ["parts", $a([_EB])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1704
        var _EI = new Map([
            ["cset", 'X'],
            ["min", 2],
            ["max", 2],
            ["opt", false],
            ["linters", $a(['lintiso3166alpha2'])]
        ]); //#1713
        var _EN = new Map([
            ["parts", $a([_EI])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1715
        var _EP = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 30],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1722
        var _EU = new Map([
            ["parts", $a([_EP])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1724
        var _EW = new Map([
            ["cset", 'N'],
            ["min", 10],
            ["max", 10],
            ["opt", false],
            ["linters", $a(['lintlatitude'])]
        ]); //#1731
        var _EY = new Map([
            ["cset", 'N'],
            ["min", 10],
            ["max", 10],
            ["opt", false],
            ["linters", $a(['lintlongitude'])]
        ]); //#1732
        var _Ed = new Map([
            ["parts", $a([_EW, _EY])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1734
        var _Ef = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 35],
            ["opt", false],
            ["linters", $a(['lintpcenc'])]
        ]); //#1741
        var _Ek = new Map([
            ["parts", $a([_Ef])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1743
        var _Em = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 70],
            ["opt", false],
            ["linters", $a(['lintpcenc'])]
        ]); //#1751
        var _Er = new Map([
            ["parts", $a([_Em])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1753
        var _Et = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 70],
            ["opt", false],
            ["linters", $a(['lintpcenc'])]
        ]); //#1760
        var _Ey = new Map([
            ["parts", $a([_Et])],
            ["req", $a([$a([$a(["4312"])])])]
        ]); //#1762
        var _F0 = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 70],
            ["opt", false],
            ["linters", $a(['lintpcenc'])]
        ]); //#1769
        var _F5 = new Map([
            ["parts", $a([_F0])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1771
        var _F7 = new Map([
            ["cset", 'X'],
            ["min", 2],
            ["max", 2],
            ["opt", false],
            ["linters", $a(['lintiso3166alpha2'])]
        ]); //#1780
        var _FC = new Map([
            ["parts", $a([_F7])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1782
        var _FE = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1789
        var _FJ = new Map([
            ["parts", $a([_FE])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1791
        var _FL = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 30],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1798
        var _FQ = new Map([
            ["parts", $a([_FL])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1800
        var _FS = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 35],
            ["opt", false],
            ["linters", $a(['lintpcenc'])]
        ]); //#1807
        var _FX = new Map([
            ["parts", $a([_FS])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1809
        var _FZ = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 1],
            ["opt", false],
            ["linters", $a(['lintyesno'])]
        ]); //#1816
        var _Fe = new Map([
            ["parts", $a([_FZ])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1818
        var _Fg = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a(['lintyymmd0'])]
        ]); //#1827
        var _Fi = new Map([
            ["cset", 'N'],
            ["min", 4],
            ["max", 4],
            ["opt", false],
            ["linters", $a(['linthhmm'])]
        ]); //#1828
        var _Fn = new Map([
            ["parts", $a([_Fg, _Fi])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1830
        var _Fp = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a(['lintyymmdd'])]
        ]); //#1838
        var _Fu = new Map([
            ["parts", $a([_Fp])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1840
        var _Fw = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1847
        var _Fy = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 1],
            ["opt", true],
            ["linters", $a(['linthyphen'])]
        ]); //#1848
        var _G4 = new Map([
            ["parts", $a([_Fw, _Fy])],
            ["ex", $a(["4331"])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1851
        var _G6 = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1858
        var _G8 = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 1],
            ["opt", true],
            ["linters", $a(['linthyphen'])]
        ]); //#1859
        var _GE = new Map([
            ["parts", $a([_G6, _G8])],
            ["ex", $a(["4330"])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1862
        var _GG = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1869
        var _GI = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 1],
            ["opt", true],
            ["linters", $a(['linthyphen'])]
        ]); //#1870
        var _GO = new Map([
            ["parts", $a([_GG, _GI])],
            ["ex", $a(["4333"])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1873
        var _GQ = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1880
        var _GS = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 1],
            ["opt", true],
            ["linters", $a(['linthyphen'])]
        ]); //#1881
        var _GY = new Map([
            ["parts", $a([_GQ, _GS])],
            ["ex", $a(["4332"])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1884
        var _Ga = new Map([
            ["cset", 'N'],
            ["min", 13],
            ["max", 13],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1891
        var _Gi = new Map([
            ["parts", $a([_Ga])],
            ["req", $a([$a([$a(["01"]), $a(["02"]), $a(["8006"]), $a(["8026"])])])]
        ]); //#1893
        var _Gk = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 30],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1900
        var _Gq = new Map([
            ["parts", $a([_Gk])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1902
        var _Gs = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a(['lintyymmdd'])]
        ]); //#1909
        var _Gu = new Map([
            ["cset", 'N'],
            ["min", 4],
            ["max", 4],
            ["opt", false],
            ["linters", $a(['linthhmm'])]
        ]); //#1910
        var _H0 = new Map([
            ["parts", $a([_Gs, _Gu])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1912
        var _H2 = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 4],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1919
        var _H9 = new Map([
            ["parts", $a([_H2])],
            ["req", $a([$a([$a(["01"])]), $a([$a(["10"])])])]
        ]); //#1921
        var _HB = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 12],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1928
        var _HH = new Map([
            ["parts", $a([_HB])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1930
        var _HJ = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a(['lintyymmdd'])]
        ]); //#1937
        var _HP = new Map([
            ["parts", $a([_HJ])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1939
        var _HR = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a(['lintyymmdd'])]
        ]); //#1946
        var _HT = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", true],
            ["linters", $a(['lintyymmdd'])]
        ]); //#1947
        var _HZ = new Map([
            ["parts", $a([_HR, _HT])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1949
        var _Hb = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 3],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1956
        var _Hh = new Map([
            ["parts", $a([_Hb])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1958
        var _Hj = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 10],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1965
        var _Hp = new Map([
            ["parts", $a([_Hj])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1967
        var _Hr = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 2],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1974
        var _Hx = new Map([
            ["parts", $a([_Hr])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1976
        var _Hz = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a(['lintyymmdd'])]
        ]); //#1983
        var _I1 = new Map([
            ["cset", 'N'],
            ["min", 4],
            ["max", 4],
            ["opt", true],
            ["linters", $a(['linthhmm'])]
        ]); //#1984
        var _I7 = new Map([
            ["parts", $a([_Hz, _I1])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1986
        var _I9 = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1993
        var _IH = new Map([
            ["parts", $a([_I9])],
            ["req", $a([$a([$a(["01"]), $a(["8006"])]), $a([$a(["416"])])])]
        ]); //#1995
        var _IJ = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2002
        var _IP = new Map([
            ["parts", $a([_IJ])],
            ["req", $a([$a([$a(["01"]), $a(["8006"])])])]
        ]); //#2004
        var _IR = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2011
        var _IW = new Map([
            ["parts", $a([_IR])],
            ["req", $a([$a([$a(["7021"])])])]
        ]); //#2013
        var _IY = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 30],
            ["opt", false],
            ["linters", $a(['lintkey'])]
        ]); //#2020
        var _Ia = new Map([
            ["parts", $a([_IY])]
        ]); //#2020
        var _Ic = new Map([
            ["cset", 'N'],
            ["min", 3],
            ["max", 3],
            ["opt", false],
            ["linters", $a(['lintiso3166999'])]
        ]); //#2028
        var _Ie = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 27],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2029
        var _Ik = new Map([
            ["parts", $a([_Ic, _Ie])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#2031
        var _Im = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 1],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2047
        var _Io = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 1],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2048
        var _Iq = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 1],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2049
        var _Is = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 1],
            ["opt", false],
            ["linters", $a(['lintimporteridx'])]
        ]); //#2050
        var _Iu = new Map([
            ["parts", $a([_Im, _Io, _Iq, _Is])],
            ["dlattr", false]
        ]); //#2052
        var _Iw = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2059
        var _J1 = new Map([
            ["parts", $a([_Iw])],
            ["req", $a([$a([$a(["01"])])])]
        ]); //#2061
        var _J3 = new Map([
            ["cset", 'X'],
            ["min", 2],
            ["max", 2],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2073
        var _J5 = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 28],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2074
        var _JB = new Map([
            ["parts", $a([_J3, _J5])],
            ["req", $a([$a([$a(["01"]), $a(["8004"])])])]
        ]); //#2076
        var _JD = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2092
        var _JJ = new Map([
            ["parts", $a([_JD])],
            ["req", $a([$a([$a(["01"]), $a(["8006"])])])]
        ]); //#2094
        var _JL = new Map([
            ["cset", 'N'],
            ["min", 2],
            ["max", 2],
            ["opt", false],
            ["linters", $a(['lintmediatype'])]
        ]); //#2101
        var _JR = new Map([
            ["parts", $a([_JL])],
            ["req", $a([$a([$a(["8017"]), $a(["8018"])])])]
        ]); //#2103
        var _JT = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 25],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2110
        var _JZ = new Map([
            ["parts", $a([_JT])],
            ["req", $a([$a([$a(["8017"]), $a(["8018"])])])]
        ]); //#2112
        var _Jb = new Map([
            ["cset", 'N'],
            ["min", 8],
            ["max", 8],
            ["opt", false],
            ["linters", $a(['lintyyyymmdd'])]
        ]); //#2119
        var _Jh = new Map([
            ["parts", $a([_Jb])],
            ["ex", $a(["7251"])],
            ["req", $a([$a([$a(["8018"])])])],
            ["dlattr", false]
        ]); //#2123
        var _Jj = new Map([
            ["cset", 'N'],
            ["min", 8],
            ["max", 8],
            ["opt", false],
            ["linters", $a(['lintyyyymmdd'])]
        ]); //#2130
        var _Jl = new Map([
            ["cset", 'N'],
            ["min", 4],
            ["max", 4],
            ["opt", false],
            ["linters", $a(['linthhmm'])]
        ]); //#2131
        var _Jr = new Map([
            ["parts", $a([_Jj, _Jl])],
            ["ex", $a(["7250"])],
            ["req", $a([$a([$a(["8018"])])])],
            ["dlattr", false]
        ]); //#2135
        var _Jt = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 1],
            ["opt", false],
            ["linters", $a(['lintiso5218'])]
        ]); //#2142
        var _Jy = new Map([
            ["parts", $a([_Jt])],
            ["req", $a([$a([$a(["8018"])])])],
            ["dlattr", false]
        ]); //#2145
        var _K0 = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 40],
            ["opt", false],
            ["linters", $a(['lintpcenc'])]
        ]); //#2152
        var _K7 = new Map([
            ["parts", $a([_K0])],
            ["ex", $a(["7256", "7259"])],
            ["req", $a([$a([$a(["8017"]), $a(["8018"])])])],
            ["dlattr", false]
        ]); //#2156
        var _K9 = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 10],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2164
        var _KG = new Map([
            ["parts", $a([_K9])],
            ["ex", $a(["7256", "7259"])],
            ["req", $a([$a([$a(["8017"]), $a(["8018"])])])],
            ["dlattr", false]
        ]); //#2168
        var _KI = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 90],
            ["opt", false],
            ["linters", $a(['lintpcenc'])]
        ]); //#2175
        var _KO = new Map([
            ["parts", $a([_KI])],
            ["req", $a([$a([$a(["8017"]), $a(["8018"])])])],
            ["dlattr", false]
        ]); //#2178
        var _KQ = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 70],
            ["opt", false],
            ["linters", $a(['lintpcenc'])]
        ]); //#2185
        var _KV = new Map([
            ["parts", $a([_KQ])],
            ["req", $a([$a([$a(["8018"])])])],
            ["dlattr", false]
        ]); //#2188
        var _KX = new Map([
            ["cset", 'X'],
            ["min", 3],
            ["max", 3],
            ["opt", false],
            ["linters", $a(['lintposinseqslash'])]
        ]); //#2195
        var _Kc = new Map([
            ["parts", $a([_KX])],
            ["req", $a([$a([$a(["8018", "7259"])])])],
            ["dlattr", false]
        ]); //#2198
        var _Ke = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 40],
            ["opt", false],
            ["linters", $a(['lintpcenc'])]
        ]); //#2205
        var _Kk = new Map([
            ["parts", $a([_Ke])],
            ["ex", $a(["7256"])],
            ["req", $a([$a([$a(["8018"])])])],
            ["dlattr", false]
        ]); //#2209
        var _Km = new Map([
            ["cset", 'N'],
            ["min", 4],
            ["max", 4],
            ["opt", false],
            ["linters", $a(['lintnonzero'])]
        ]); //#2216
        var _Ko = new Map([
            ["cset", 'N'],
            ["min", 5],
            ["max", 5],
            ["opt", false],
            ["linters", $a(['lintnonzero'])]
        ]); //#2217
        var _Kq = new Map([
            ["cset", 'N'],
            ["min", 3],
            ["max", 3],
            ["opt", false],
            ["linters", $a(['lintnonzero'])]
        ]); //#2218
        var _Ks = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 1],
            ["opt", false],
            ["linters", $a(['lintwinding'])]
        ]); //#2219
        var _Ku = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 1],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2220
        var _Kz = new Map([
            ["parts", $a([_Km, _Ko, _Kq, _Ks, _Ku])],
            ["req", $a([$a([$a(["01"])])])]
        ]); //#2222
        var _L1 = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2229
        var _L3 = new Map([
            ["parts", $a([_L1])]
        ]); //#2229
        var _L5 = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 1],
            ["opt", false],
            ["linters", $a(['lintzero'])]
        ]); //#2237
        var _L7 = new Map([
            ["cset", 'N'],
            ["min", 13],
            ["max", 13],
            ["opt", false],
            ["linters", $a(['lintcsum', 'lintkey'])]
        ]); //#2238
        var _L9 = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 16],
            ["opt", true],
            ["linters", $a([])]
        ]); //#2239
        var _LC = new Map([
            ["parts", $a([_L5, _L7, _L9])],
            ["dlpkey", $a([])]
        ]); //#2241
        var _LE = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 30],
            ["opt", false],
            ["linters", $a(['lintkey'])]
        ]); //#2248
        var _LI = new Map([
            ["parts", $a([_LE])],
            ["dlpkey", $a([$a(["7040"])])]
        ]); //#2250
        var _LK = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2257
        var _LQ = new Map([
            ["parts", $a([_LK])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#2259
        var _LS = new Map([
            ["cset", 'N'],
            ["min", 14],
            ["max", 14],
            ["opt", false],
            ["linters", $a(['lintcsum'])]
        ]); //#2266
        var _LU = new Map([
            ["cset", 'N'],
            ["min", 4],
            ["max", 4],
            ["opt", false],
            ["linters", $a(['lintpieceoftotal'])]
        ]); //#2267
        var _LZ = new Map([
            ["parts", $a([_LS, _LU])],
            ["ex", $a(["01", "37"])],
            ["dlpkey", $a([$a(["22", "10", "21"])])]
        ]); //#2270
        var _Lb = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 34],
            ["opt", false],
            ["linters", $a(['lintiban'])]
        ]); //#2277
        var _Lg = new Map([
            ["parts", $a([_Lb])],
            ["req", $a([$a([$a(["415"])])])]
        ]); //#2279
        var _Li = new Map([
            ["cset", 'N'],
            ["min", 8],
            ["max", 8],
            ["opt", false],
            ["linters", $a(['lintyymmddhh'])]
        ]); //#2286
        var _Lk = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 4],
            ["opt", true],
            ["linters", $a(['lintmmoptss'])]
        ]); //#2287
        var _Lq = new Map([
            ["parts", $a([_Li, _Lk])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#2289
        var _Ls = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 50],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2296
        var _Ly = new Map([
            ["parts", $a([_Ls])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#2298
        var _M0 = new Map([
            ["cset", 'Y'],
            ["min", 1],
            ["max", 30],
            ["opt", false],
            ["linters", $a(['lintkey'])]
        ]); //#2305
        var _M4 = new Map([
            ["parts", $a([_M0])],
            ["dlpkey", $a([$a(["8011"])])]
        ]); //#2307
        var _M6 = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 12],
            ["opt", false],
            ["linters", $a(['lintnozeroprefix'])]
        ]); //#2314
        var _MB = new Map([
            ["parts", $a([_M6])],
            ["req", $a([$a([$a(["8010"])])])],
            ["dlattr", false]
        ]); //#2317
        var _MD = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2324
        var _MJ = new Map([
            ["parts", $a([_MD])],
            ["req", $a([$a([$a(["01"]), $a(["8006"])])])]
        ]); //#2326
        var _ML = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 25],
            ["opt", false],
            ["linters", $a(['lintcsumalpha', 'lintkey'])]
        ]); //#2333
        var _MO = new Map([
            ["parts", $a([_ML])],
            ["dlpkey", $a([])]
        ]); //#2335
        var _MQ = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 25],
            ["opt", false],
            ["linters", $a(['lintcsumalpha', 'lintkey', 'linthasnondigit'])]
        ]); //#2342
        var _MV = new Map([
            ["parts", $a([_MQ])],
            ["req", $a([$a([$a(["01"])])])],
            ["dlattr", false]
        ]); //#2345
        var _MX = new Map([
            ["cset", 'N'],
            ["min", 18],
            ["max", 18],
            ["opt", false],
            ["linters", $a(['lintcsum', 'lintkey'])]
        ]); //#2352
        var _Mc = new Map([
            ["parts", $a([_MX])],
            ["ex", $a(["8018"])],
            ["dlpkey", $a([$a(["8019"])])]
        ]); //#2355
        var _Me = new Map([
            ["cset", 'N'],
            ["min", 18],
            ["max", 18],
            ["opt", false],
            ["linters", $a(['lintcsum', 'lintkey'])]
        ]); //#2362
        var _Mj = new Map([
            ["parts", $a([_Me])],
            ["ex", $a(["8017"])],
            ["dlpkey", $a([$a(["8019"])])]
        ]); //#2365
        var _Ml = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 10],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2372
        var _Mr = new Map([
            ["parts", $a([_Ml])],
            ["req", $a([$a([$a(["8017"]), $a(["8018"])])])],
            ["dlattr", false]
        ]); //#2375
        var _Mt = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 25],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2382
        var _My = new Map([
            ["parts", $a([_Mt])],
            ["req", $a([$a([$a(["415"])])])]
        ]); //#2384
        var _N0 = new Map([
            ["cset", 'N'],
            ["min", 14],
            ["max", 14],
            ["opt", false],
            ["linters", $a(['lintcsum'])]
        ]); //#2391
        var _N2 = new Map([
            ["cset", 'N'],
            ["min", 4],
            ["max", 4],
            ["opt", false],
            ["linters", $a(['lintpieceoftotal'])]
        ]); //#2392
        var _N8 = new Map([
            ["parts", $a([_N0, _N2])],
            ["ex", $a(["02", "8006"])],
            ["req", $a([$a([$a(["37"])])])]
        ]); //#2395
        var _NA = new Map([
            ["cset", 'Z'],
            ["min", 1],
            ["max", 90],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2402
        var _NO = new Map([
            ["parts", $a([_NA])],
            ["req", $a([$a([$a(["00"]), $a(["01", "21"]), $a(["253"]), $a(["255"]), $a(["8003"]), $a(["8004"]), $a(["8006", "21"]), $a(["8010", "8011"]), $a(["8017"]), $a(["8018"])])])]
        ]); //#2404
        var _NQ = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 70],
            ["opt", false],
            ["linters", $a(['lintcouponcode'])]
        ]); //#2411
        var _NS = new Map([
            ["parts", $a([_NQ])]
        ]); //#2411
        var _NU = new Map([
            ["cset", 'N'],
            ["min", 4],
            ["max", 4],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2419
        var _NZ = new Map([
            ["parts", $a([_NU])],
            ["req", $a([$a([$a(["255"])])])]
        ]); //#2421
        var _Nb = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 70],
            ["opt", false],
            ["linters", $a(['lintcouponposoffer'])]
        ]); //#2428
        var _Nd = new Map([
            ["parts", $a([_Nb])]
        ]); //#2428
        var _Nf = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 70],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2436
        var _Nk = new Map([
            ["parts", $a([_Nf])],
            ["req", $a([$a([$a(["01"])])])],
            ["dlattr", false]
        ]); //#2439
        var _Nm = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 30],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2446
        var _No = new Map([
            ["parts", $a([_Nm])]
        ]); //#2446
        var _Nq = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 90],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2454
        var _Ns = new Map([
            ["parts", $a([_Nq])]
        ]); //#2454
        var _Nt = new Map([
            ["00", _4],
            ["01", _C],
            ["02", _K],
            ["03", _P],
            ["10", _a],
            ["11", _k],
            ["12", _r],
            ["13", _11],
            ["15", _11],
            ["16", _11],
            ["17", _1C],
            ["20", _1M],
            ["21", _1W],
            ["22", _1d],
            ["235", _1k],
            ["240", _1u],
            ["241", _1u],
            ["242", _25],
            ["243", _2C],
            ["250", _2M],
            ["251", _2U],
            ["253", _2b],
            ["254", _2i],
            ["255", _2q],
            ["30", _2y],
            ["3100", _37],
            ["3101", _37],
            ["3102", _37],
            ["3103", _37],
            ["3104", _37],
            ["3105", _37],
            ["3110", _3G],
            ["3111", _3G],
            ["3112", _3G],
            ["3113", _3G],
            ["3114", _3G],
            ["3115", _3G],
            ["3120", _3P],
            ["3121", _3P],
            ["3122", _3P],
            ["3123", _3P],
            ["3124", _3P],
            ["3125", _3P],
            ["3130", _3Y],
            ["3131", _3Y],
            ["3132", _3Y],
            ["3133", _3Y],
            ["3134", _3Y],
            ["3135", _3Y],
            ["3140", _3h],
            ["3141", _3h],
            ["3142", _3h],
            ["3143", _3h],
            ["3144", _3h],
            ["3145", _3h],
            ["3150", _3q],
            ["3151", _3q],
            ["3152", _3q],
            ["3153", _3q],
            ["3154", _3q],
            ["3155", _3q],
            ["3160", _3z],
            ["3161", _3z],
            ["3162", _3z],
            ["3163", _3z],
            ["3164", _3z],
            ["3165", _3z],
            ["3200", _48],
            ["3201", _48],
            ["3202", _48],
            ["3203", _48],
            ["3204", _48],
            ["3205", _48],
            ["3210", _4H],
            ["3211", _4H],
            ["3212", _4H],
            ["3213", _4H],
            ["3214", _4H],
            ["3215", _4H],
            ["3220", _4Q],
            ["3221", _4Q],
            ["3222", _4Q],
            ["3223", _4Q],
            ["3224", _4Q],
            ["3225", _4Q],
            ["3230", _4Z],
            ["3231", _4Z],
            ["3232", _4Z],
            ["3233", _4Z],
            ["3234", _4Z],
            ["3235", _4Z],
            ["3240", _4i],
            ["3241", _4i],
            ["3242", _4i],
            ["3243", _4i],
            ["3244", _4i],
            ["3245", _4i],
            ["3250", _4r],
            ["3251", _4r],
            ["3252", _4r],
            ["3253", _4r],
            ["3254", _4r],
            ["3255", _4r],
            ["3260", _50],
            ["3261", _50],
            ["3262", _50],
            ["3263", _50],
            ["3264", _50],
            ["3265", _50],
            ["3270", _59],
            ["3271", _59],
            ["3272", _59],
            ["3273", _59],
            ["3274", _59],
            ["3275", _59],
            ["3280", _5I],
            ["3281", _5I],
            ["3282", _5I],
            ["3283", _5I],
            ["3284", _5I],
            ["3285", _5I],
            ["3290", _5R],
            ["3291", _5R],
            ["3292", _5R],
            ["3293", _5R],
            ["3294", _5R],
            ["3295", _5R],
            ["3300", _5a],
            ["3301", _5a],
            ["3302", _5a],
            ["3303", _5a],
            ["3304", _5a],
            ["3305", _5a],
            ["3310", _5j],
            ["3311", _5j],
            ["3312", _5j],
            ["3313", _5j],
            ["3314", _5j],
            ["3315", _5j],
            ["3320", _5s],
            ["3321", _5s],
            ["3322", _5s],
            ["3323", _5s],
            ["3324", _5s],
            ["3325", _5s],
            ["3330", _61],
            ["3331", _61],
            ["3332", _61],
            ["3333", _61],
            ["3334", _61],
            ["3335", _61],
            ["3340", _6A],
            ["3341", _6A],
            ["3342", _6A],
            ["3343", _6A],
            ["3344", _6A],
            ["3345", _6A],
            ["3350", _6J],
            ["3351", _6J],
            ["3352", _6J],
            ["3353", _6J],
            ["3354", _6J],
            ["3355", _6J],
            ["3360", _6S],
            ["3361", _6S],
            ["3362", _6S],
            ["3363", _6S],
            ["3364", _6S],
            ["3365", _6S],
            ["3370", _6a],
            ["3371", _6a],
            ["3372", _6a],
            ["3373", _6a],
            ["3374", _6a],
            ["3375", _6a],
            ["3400", _6j],
            ["3401", _6j],
            ["3402", _6j],
            ["3403", _6j],
            ["3404", _6j],
            ["3405", _6j],
            ["3410", _6s],
            ["3411", _6s],
            ["3412", _6s],
            ["3413", _6s],
            ["3414", _6s],
            ["3415", _6s],
            ["3420", _71],
            ["3421", _71],
            ["3422", _71],
            ["3423", _71],
            ["3424", _71],
            ["3425", _71],
            ["3430", _7A],
            ["3431", _7A],
            ["3432", _7A],
            ["3433", _7A],
            ["3434", _7A],
            ["3435", _7A],
            ["3440", _7J],
            ["3441", _7J],
            ["3442", _7J],
            ["3443", _7J],
            ["3444", _7J],
            ["3445", _7J],
            ["3450", _7S],
            ["3451", _7S],
            ["3452", _7S],
            ["3453", _7S],
            ["3454", _7S],
            ["3455", _7S],
            ["3460", _7b],
            ["3461", _7b],
            ["3462", _7b],
            ["3463", _7b],
            ["3464", _7b],
            ["3465", _7b],
            ["3470", _7k],
            ["3471", _7k],
            ["3472", _7k],
            ["3473", _7k],
            ["3474", _7k],
            ["3475", _7k],
            ["3480", _7t],
            ["3481", _7t],
            ["3482", _7t],
            ["3483", _7t],
            ["3484", _7t],
            ["3485", _7t],
            ["3490", _82],
            ["3491", _82],
            ["3492", _82],
            ["3493", _82],
            ["3494", _82],
            ["3495", _82],
            ["3500", _8B],
            ["3501", _8B],
            ["3502", _8B],
            ["3503", _8B],
            ["3504", _8B],
            ["3505", _8B],
            ["3510", _8K],
            ["3511", _8K],
            ["3512", _8K],
            ["3513", _8K],
            ["3514", _8K],
            ["3515", _8K],
            ["3520", _8T],
            ["3521", _8T],
            ["3522", _8T],
            ["3523", _8T],
            ["3524", _8T],
            ["3525", _8T],
            ["3530", _8c],
            ["3531", _8c],
            ["3532", _8c],
            ["3533", _8c],
            ["3534", _8c],
            ["3535", _8c],
            ["3540", _8l],
            ["3541", _8l],
            ["3542", _8l],
            ["3543", _8l],
            ["3544", _8l],
            ["3545", _8l],
            ["3550", _8u],
            ["3551", _8u],
            ["3552", _8u],
            ["3553", _8u],
            ["3554", _8u],
            ["3555", _8u],
            ["3560", _93],
            ["3561", _93],
            ["3562", _93],
            ["3563", _93],
            ["3564", _93],
            ["3565", _93],
            ["3570", _9C],
            ["3571", _9C],
            ["3572", _9C],
            ["3573", _9C],
            ["3574", _9C],
            ["3575", _9C],
            ["3600", _9L],
            ["3601", _9L],
            ["3602", _9L],
            ["3603", _9L],
            ["3604", _9L],
            ["3605", _9L],
            ["3610", _9U],
            ["3611", _9U],
            ["3612", _9U],
            ["3613", _9U],
            ["3614", _9U],
            ["3615", _9U],
            ["3620", _9d],
            ["3621", _9d],
            ["3622", _9d],
            ["3623", _9d],
            ["3624", _9d],
            ["3625", _9d],
            ["3630", _9m],
            ["3631", _9m],
            ["3632", _9m],
            ["3633", _9m],
            ["3634", _9m],
            ["3635", _9m],
            ["3640", _9v],
            ["3641", _9v],
            ["3642", _9v],
            ["3643", _9v],
            ["3644", _9v],
            ["3645", _9v],
            ["3650", _A4],
            ["3651", _A4],
            ["3652", _A4],
            ["3653", _A4],
            ["3654", _A4],
            ["3655", _A4],
            ["3660", _AD],
            ["3661", _AD],
            ["3662", _AD],
            ["3663", _AD],
            ["3664", _AD],
            ["3665", _AD],
            ["3670", _AM],
            ["3671", _AM],
            ["3672", _AM],
            ["3673", _AM],
            ["3674", _AM],
            ["3675", _AM],
            ["3680", _AV],
            ["3681", _AV],
            ["3682", _AV],
            ["3683", _AV],
            ["3684", _AV],
            ["3685", _AV],
            ["3690", _Ae],
            ["3691", _Ae],
            ["3692", _Ae],
            ["3693", _Ae],
            ["3694", _Ae],
            ["3695", _Ae],
            ["37", _Ao],
            ["3900", _Ax],
            ["3901", _Ax],
            ["3902", _Ax],
            ["3903", _Ax],
            ["3904", _Ax],
            ["3905", _Ax],
            ["3906", _Ax],
            ["3907", _Ax],
            ["3908", _Ax],
            ["3909", _Ax],
            ["3910", _B7],
            ["3911", _B7],
            ["3912", _B7],
            ["3913", _B7],
            ["3914", _B7],
            ["3915", _B7],
            ["3916", _B7],
            ["3917", _B7],
            ["3918", _B7],
            ["3919", _B7],
            ["3920", _BL],
            ["3921", _BL],
            ["3922", _BL],
            ["3923", _BL],
            ["3924", _BL],
            ["3925", _BL],
            ["3926", _BL],
            ["3927", _BL],
            ["3928", _BL],
            ["3929", _BL],
            ["3930", _BZ],
            ["3931", _BZ],
            ["3932", _BZ],
            ["3933", _BZ],
            ["3934", _BZ],
            ["3935", _BZ],
            ["3936", _BZ],
            ["3937", _BZ],
            ["3938", _BZ],
            ["3939", _BZ],
            ["3940", _Bh],
            ["3941", _Bh],
            ["3942", _Bh],
            ["3943", _Bh],
            ["3950", _Bt],
            ["3951", _Bt],
            ["3952", _Bt],
            ["3953", _Bt],
            ["3954", _Bt],
            ["3955", _Bt],
            ["400", _Bx],
            ["401", _C2],
            ["402", _C7],
            ["403", _CE],
            ["410", _CI],
            ["411", _CI],
            ["412", _CI],
            ["413", _CI],
            ["414", _CP],
            ["415", _CY],
            ["416", _Cc],
            ["417", _Ci],
            ["420", _Cn],
            ["421", _Cu],
            ["422", _D5],
            ["423", _DE],
            ["424", _DN],
            ["425", _DW],
            ["426", _De],
            ["427", _Do],
            ["4300", _Dv],
            ["4301", _Dv],
            ["4302", _E2],
            ["4303", _E9],
            ["4304", _EG],
            ["4305", _EG],
            ["4306", _EG],
            ["4307", _EN],
            ["4308", _EU],
            ["4309", _Ed],
            ["4310", _Ek],
            ["4311", _Ek],
            ["4312", _Er],
            ["4313", _Ey],
            ["4314", _F5],
            ["4315", _F5],
            ["4316", _F5],
            ["4317", _FC],
            ["4318", _FJ],
            ["4319", _FQ],
            ["4320", _FX],
            ["4321", _Fe],
            ["4322", _Fe],
            ["4323", _Fe],
            ["4324", _Fn],
            ["4325", _Fn],
            ["4326", _Fu],
            ["4330", _G4],
            ["4331", _GE],
            ["4332", _GO],
            ["4333", _GY],
            ["7001", _Gi],
            ["7002", _Gq],
            ["7003", _H0],
            ["7004", _H9],
            ["7005", _HH],
            ["7006", _HP],
            ["7007", _HZ],
            ["7008", _Hh],
            ["7009", _Hp],
            ["7010", _Hx],
            ["7011", _I7],
            ["7020", _IH],
            ["7021", _IP],
            ["7022", _IW],
            ["7023", _Ia],
            ["7030", _Ik],
            ["7031", _Ik],
            ["7032", _Ik],
            ["7033", _Ik],
            ["7034", _Ik],
            ["7035", _Ik],
            ["7036", _Ik],
            ["7037", _Ik],
            ["7038", _Ik],
            ["7039", _Ik],
            ["7040", _Iu],
            ["710", _J1],
            ["711", _J1],
            ["712", _J1],
            ["713", _J1],
            ["714", _J1],
            ["715", _J1],
            ["7230", _JB],
            ["7231", _JB],
            ["7232", _JB],
            ["7233", _JB],
            ["7234", _JB],
            ["7235", _JB],
            ["7236", _JB],
            ["7237", _JB],
            ["7238", _JB],
            ["7239", _JB],
            ["7240", _JJ],
            ["7241", _JR],
            ["7242", _JZ],
            ["7250", _Jh],
            ["7251", _Jr],
            ["7252", _Jy],
            ["7253", _K7],
            ["7254", _K7],
            ["7255", _KG],
            ["7256", _KO],
            ["7257", _KV],
            ["7258", _Kc],
            ["7259", _Kk],
            ["8001", _Kz],
            ["8002", _L3],
            ["8003", _LC],
            ["8004", _LI],
            ["8005", _LQ],
            ["8006", _LZ],
            ["8007", _Lg],
            ["8008", _Lq],
            ["8009", _Ly],
            ["8010", _M4],
            ["8011", _MB],
            ["8012", _MJ],
            ["8013", _MO],
            ["8014", _MV],
            ["8017", _Mc],
            ["8018", _Mj],
            ["8019", _Mr],
            ["8020", _My],
            ["8026", _N8],
            ["8030", _NO],
            ["8110", _NS],
            ["8111", _NZ],
            ["8112", _Nd],
            ["8200", _Nk],
            ["90", _No],
            ["91", _Ns],
            ["92", _Ns],
            ["93", _Ns],
            ["94", _Ns],
            ["95", _Ns],
            ["96", _Ns],
            ["97", _Ns],
            ["98", _Ns],
            ["99", _Ns]
        ]); //#2466
        $_.gs1syntax = _Nt; //#2468
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_gs1process.$ctx[id] = $_[id]); //#2468
        bwipp_gs1process.__2469__ = 1; //#2468
        $_ = Object.getPrototypeOf($_); //#2468
    } //#2468
    if ($eq($k[--$j], 'ai')) { //#2700
        $anchorsearch($k[--$j], "\("); //#2476
        if ($nt($k[--$j])) { //#2478
            $j--; //#2477
            $k[$j++] = 'bwipp.GS1aiMissingOpenParen#2477'; //#2477
            $k[$j++] = "AIs must start with '\('"; //#2477
            bwipp_raiseerror(); //#2477
        } //#2477
        $j--; //#2479
        $k[$j++] = Infinity; //#2480
        var _Ny = $k[--$j]; //#2480
        var _Nz = $k[--$j]; //#2480
        $k[$j++] = _Ny; //#2487
        $k[$j++] = _Nz; //#2487
        for (;;) { //#2487
            var _O0 = $k[--$j]; //#2481
            $k[$j++] = _O0; //#2481
            if ($eq(_O0, "")) { //#2481
                $j--; //#2481
                break; //#2481
            } //#2481
            $search($k[--$j], "\)"); //#2482
            if ($nt($k[--$j])) { //#2484
                $cleartomark(); //#2483
                $k[$j++] = 'bwipp.GS1aiMissingCloseParen#2483'; //#2483
                $k[$j++] = "AIs must end with '\)'"; //#2483
                bwipp_raiseerror(); //#2483
            } //#2483
            var _O3 = $k[--$j]; //#2485
            var _O4 = $k[--$j]; //#2485
            $k[$j++] = _O3; //#2485
            $k[$j++] = _O4; //#2485
            $j--; //#2485
            var _O5 = $k[--$j]; //#2485
            var _O6 = $k[--$j]; //#2485
            $k[$j++] = _O5; //#2486
            $search(_O6, "\("); //#2486
            if ($k[--$j]) { //#2486
                var _O8 = $k[--$j]; //#2486
                var _O9 = $k[--$j]; //#2486
                $k[$j++] = _O8; //#2486
                $k[$j++] = _O9; //#2486
                $j--; //#2486
                var _OA = $k[--$j]; //#2486
                var _OB = $k[--$j]; //#2486
                $k[$j++] = _OA; //#2486
                $k[$j++] = _OB; //#2486
            } else { //#2486
                $k[$j++] = ""; //#2486
            } //#2486
        } //#2486
        var _OC = $counttomark(); //#2488
        $k[$j++] = _OC; //#2488
        if (_OC > 0) { //#2488
            var _OD = $k[--$j]; //#2488
            for (var _OF = _OD, _OE = (~~(_OD / 2)) + 1; _OF >= _OE; _OF -= 1) { //#2488
                $r(_OF, -1); //#2488
            } //#2488
        } else { //#2488
            $j--; //#2488
        } //#2488
        $astore($a(~~($counttomark() / 2))); //#2489
        $_.ais = $k[--$j]; //#2489
        $astore($a($counttomark())); //#2490
        $k[$j++] = Infinity; //#2490
        var _OL = $k[--$j]; //#2490
        var _OM = $k[--$j]; //#2490
        $k[$j++] = _OL; //#2492
        $forall(_OM, function() { //#2492
            var _OO = new Map([
                ["parse", $_.parse],
                ["parseonly", true],
                ["parsefnc", false]
            ]); //#2491
            $k[$j++] = _OO; //#2491
            bwipp_parseinput(); //#2491
        }); //#2491
        $_.vals = $a(); //#2492
        $j--; //#2493
    } else { //#2700
        $anchorsearch($k[--$j], "http://"); //#2498
        if ($nt($k[--$j])) { //#2503
            $anchorsearch($k[--$j], "HTTP://"); //#2499
            if ($nt($k[--$j])) { //#2503
                $anchorsearch($k[--$j], "https://"); //#2500
                if ($nt($k[--$j])) { //#2503
                    $anchorsearch($k[--$j], "HTTPS://"); //#2501
                    if ($nt($k[--$j])) { //#2503
                        $j--; //#2502
                        $k[$j++] = 'bwipp.GS1dlURIbadScheme#2502'; //#2502
                        $k[$j++] = "Scheme must be http:// HTTP:// https:// or HTTPS://"; //#2502
                        bwipp_raiseerror(); //#2502
                    } //#2502
                } //#2502
            } //#2502
        } //#2502
        $j--; //#2504
        $search($k[--$j], "/"); //#2507
        if ($nt($k[--$j])) { //#2509
            $j--; //#2508
            $k[$j++] = 'bwipp.GS1dlMissingDomainOrPathInfo#2508'; //#2508
            $k[$j++] = "URI must contain a domain and path info"; //#2508
            bwipp_raiseerror(); //#2508
        } //#2508
        $j -= 2; //#2510
        $search($k[--$j], "#"); //#2513
        if ($k[--$j]) { //#2515
            var _Oc = $k[--$j]; //#2514
            var _Od = $k[--$j]; //#2514
            $k[$j++] = _Oc; //#2514
            $k[$j++] = _Od; //#2514
            $j--; //#2514
            var _Oe = $k[--$j]; //#2514
            var _Of = $k[--$j]; //#2514
            $k[$j++] = _Oe; //#2514
            $k[$j++] = _Of; //#2514
            $j--; //#2514
        } //#2514
        $search($k[--$j], "?"); //#2518
        if ($nt($k[--$j])) { //#2520
            var _Oi = $k[--$j]; //#2519
            $k[$j++] = ""; //#2519
            $k[$j++] = null; //#2519
            $k[$j++] = _Oi; //#2519
        } //#2519
        $_.pp = $k[--$j]; //#2521
        $j--; //#2522
        $_.qp = $k[--$j]; //#2523
        $k[$j++] = Infinity; //#2526
        $k[$j++] = 0; //#2530
        $k[$j++] = 0; //#2530
        $k[$j++] = $_.pp; //#2530
        for (;;) { //#2530
            $search($k[--$j], "/"); //#2528
            if ($nt($k[--$j])) { //#2528
                $j--; //#2528
                break; //#2528
            } //#2528
            var _Oo = $k[--$j]; //#2529
            var _Op = $k[--$j]; //#2529
            $k[$j++] = _Oo.length + 1; //#2529
            $k[$j++] = _Op; //#2529
            $j--; //#2529
            var _Oq = $k[--$j]; //#2529
            var _Or = $k[--$j]; //#2529
            var _Os = $k[--$j]; //#2529
            $k[$j++] = _Os; //#2529
            $k[$j++] = $f(_Oq + _Os); //#2529
            $k[$j++] = _Or; //#2529
        } //#2529
        $astore($a($counttomark() - 1)); //#2531
        $_.pipos = $k[--$j]; //#2531
        $j -= 2; //#2531
        if ($_.pipos.length <= 1) { //#2534
            $k[$j++] = 'bwipp.GS1dlNoAIinfo#2533'; //#2533
            $k[$j++] = "The path was too short to contain AI info"; //#2533
            bwipp_raiseerror(); //#2533
        } //#2533
        $k[$j++] = false; //#2550
        for (var _Oy = $_.pipos.length - 2; _Oy >= 0; _Oy -= 2) { //#2550
            var _P0 = $get($_.pipos, _Oy); //#2540
            var _P4 = $geti($_.pp, _P0, $f($f($get($_.pipos, _Oy + 1) - _P0) - 1)); //#2541
            var _P6 = $get($_.gs1syntax, _P4) !== undefined; //#2542
            $k[$j++] = _Oy; //#2548
            $k[$j++] = _P4; //#2548
            if (_P6) { //#2547
                var _PA = $get($get($_.gs1syntax, $k[--$j]), 'dlpkey') !== undefined; //#2543
                if (_PA) { //#2545
                    var _PB = $k[--$j]; //#2544
                    var _PC = $k[--$j]; //#2544
                    $k[$j++] = _PB; //#2544
                    $k[$j++] = _PC; //#2544
                    $j--; //#2544
                    $k[$j++] = true; //#2544
                    break; //#2544
                } //#2544
            } else { //#2547
                $j--; //#2547
            } //#2547
            $j--; //#2549
        } //#2549
        if ($nt($k[--$j])) { //#2553
            $k[$j++] = 'bwipp.GS1dlNoAIinfo#2552'; //#2552
            $k[$j++] = "The path does not contain a valid primary key"; //#2552
            bwipp_raiseerror(); //#2552
        } //#2552
        var _PG = $get($_.pipos, $k[--$j]); //#2554
        $_.pp = $geti($_.pp, _PG, $f($_.pp.length - _PG)); //#2554
        $_.uriunescape = function() {
            $_.qq = $k[--$j]; //#2557
            $_.in = $k[--$j]; //#2558
            $_.out = $s($_.in.length); //#2559
            $k[$j++] = 0; //#2583
            $k[$j++] = 0; //#2583
            for (;;) { //#2583
                var _PO = $k[--$j]; //#2561
                var _PP = $k[--$j]; //#2561
                $k[$j++] = _PP; //#2561
                $k[$j++] = _PO; //#2561
                if (_PP >= $_.in.length) { //#2561
                    break; //#2561
                } //#2561
                var _PS = $k[--$j]; //#2562
                var _PT = $k[--$j]; //#2562
                var _PU = $get($_.in, _PT); //#2562
                $k[$j++] = _PT; //#2582
                $k[$j++] = _PS; //#2582
                $k[$j++] = _PU; //#2582
                if ((_PU == 43) && $_.qq) { //#2581
                    $j--; //#2564
                    var _PX = $k[--$j]; //#2564
                    $put($_.out, _PX, 32); //#2564
                    var _PY = $k[--$j]; //#2565
                    $k[$j++] = $f(_PY + 1); //#2565
                    $k[$j++] = $f(_PX + 1); //#2565
                } else { //#2581
                    var _PZ = $k[--$j]; //#2567
                    var _Pa = $k[--$j]; //#2567
                    var _Pb = $k[--$j]; //#2567
                    $k[$j++] = _Pb; //#2582
                    $k[$j++] = _Pa; //#2582
                    $k[$j++] = _PZ; //#2582
                    if ((_PZ == 37) && (_Pb < ($_.in.length - 2))) { //#2581
                        $j--; //#2568
                        var _Pe = $k[--$j]; //#2569
                        var _Pf = $k[--$j]; //#2569
                        var _Pg = $geti($_.in, $f(_Pf + 1), 2); //#2569
                        $k[$j++] = _Pf; //#2576
                        $k[$j++] = _Pe; //#2576
                        $k[$j++] = 0; //#2576
                        for (var _Ph = 0, _Pi = _Pg.length; _Ph < _Pi; _Ph++) { //#2576
                            var _Pj = $get(_Pg, _Ph); //#2576
                            $k[$j++] = _Pj; //#2574
                            if ((_Pj >= 48) && (_Pj <= 57)) { //#2573
                                var _Pk = $k[--$j]; //#2570
                                $k[$j++] = $f(_Pk - 48); //#2570
                            } else { //#2573
                                var _Pl = $k[--$j]; //#2571
                                $k[$j++] = _Pl; //#2574
                                if ((_Pl >= 65) && (_Pl <= 70)) { //#2573
                                    var _Pm = $k[--$j]; //#2571
                                    $k[$j++] = $f(_Pm - 55); //#2571
                                } else { //#2573
                                    var _Pn = $k[--$j]; //#2572
                                    $k[$j++] = _Pn; //#2574
                                    if ((_Pn >= 97) && (_Pn <= 102)) { //#2573
                                        var _Po = $k[--$j]; //#2572
                                        $k[$j++] = $f(_Po - 87); //#2572
                                    } else { //#2573
                                        $j -= 2; //#2573
                                        $k[$j++] = 'bwipp.GS1dlBadHexCharacter#2573'; //#2573
                                        $k[$j++] = "Invalid hex character"; //#2573
                                        bwipp_raiseerror(); //#2573
                                    } //#2573
                                } //#2573
                            } //#2573
                            var _Pp = $k[--$j]; //#2575
                            var _Pq = $k[--$j]; //#2575
                            $k[$j++] = $f(_Pp + (_Pq * 16)); //#2575
                        } //#2575
                        var _Ps = $k[--$j]; //#2577
                        var _Pt = $k[--$j]; //#2577
                        $put($_.out, _Pt, _Ps); //#2577
                        var _Pu = $k[--$j]; //#2578
                        $k[$j++] = $f(_Pu + 3); //#2578
                        $k[$j++] = $f(_Pt + 1); //#2578
                    } else { //#2581
                        var _Pw = $k[--$j]; //#2580
                        var _Px = $k[--$j]; //#2580
                        $put($_.out, _Px, _Pw); //#2580
                        var _Py = $k[--$j]; //#2581
                        $k[$j++] = $f(_Py + 1); //#2581
                        $k[$j++] = $f(_Px + 1); //#2581
                    } //#2581
                } //#2581
            } //#2581
            $_.out = $geti($_.out, 0, $k[--$j]); //#2584
            $j--; //#2585
            $k[$j++] = $_.out; //#2586
        }; //#2586
        $_.isvaliddlpkeyseq = function() {
            $_.in = $k[--$j]; //#2590
            $k[$j++] = false; //#2604
            $forall($get($get($_.gs1syntax, $get($_.in, 0)), 'dlpkey'), function() { //#2604
                $_.seq = $k[--$j]; //#2593
                $_.i = 1; //#2594
                $_.j = 0; //#2594
                for (;;) { //#2602
                    if ($_.i >= $_.in.length) { //#2596
                        break; //#2596
                    } //#2596
                    if ($_.j >= $_.seq.length) { //#2597
                        break; //#2597
                    } //#2597
                    if ($eq($get($_.in, $_.i), $get($_.seq, $_.j))) { //#2600
                        $_.i = $_.i + 1; //#2599
                    } //#2599
                    $_.j = $_.j + 1; //#2601
                } //#2601
                if ($_.i == $_.in.length) { //#2603
                    $j--; //#2603
                    $k[$j++] = true; //#2603
                    return true; //#2603
                } //#2603
            }); //#2603
        }; //#2603
        $_.ais = $a(99); //#2607
        $_.vals = $a(99); //#2608
        $k[$j++] = 0; //#2622
        $k[$j++] = $_.pp; //#2622
        for (;;) { //#2622
            $search($k[--$j], "/"); //#2613
            if ($k[--$j]) { //#2619
                var _QU = $k[--$j]; //#2614
                var _QV = $k[--$j]; //#2614
                var _QW = $k[--$j]; //#2614
                var _QX = $k[--$j]; //#2614
                $put($_.ais, _QX, _QU); //#2614
                $k[$j++] = _QX; //#2616
                $search(_QW, "/"); //#2616
                if ($k[--$j]) { //#2616
                    var _QZ = $k[--$j]; //#2616
                    var _Qa = $k[--$j]; //#2616
                    $k[$j++] = _QZ; //#2616
                    $k[$j++] = _Qa; //#2616
                    $j--; //#2616
                } else { //#2616
                    var _Qb = $k[--$j]; //#2616
                    $k[$j++] = ""; //#2616
                    $k[$j++] = _Qb; //#2616
                } //#2616
                var _Qd = $k[--$j]; //#2617
                var _Qe = $k[--$j]; //#2617
                var _Qf = $k[--$j]; //#2617
                $k[$j++] = _Qf; //#2617
                $k[$j++] = _Qe; //#2617
                $k[$j++] = $_.vals; //#2617
                $k[$j++] = _Qf; //#2617
                $k[$j++] = _Qd; //#2617
                $k[$j++] = false; //#2617
                $_.uriunescape(); //#2617
                var _Qg = $k[--$j]; //#2617
                var _Qh = $k[--$j]; //#2617
                $put($k[--$j], _Qh, _Qg); //#2617
            } else { //#2619
                $j--; //#2619
                break; //#2619
            } //#2619
            var _Qj = $k[--$j]; //#2621
            var _Qk = $k[--$j]; //#2621
            $k[$j++] = $f(_Qk + 1); //#2621
            $k[$j++] = _Qj; //#2621
        } //#2621
        var _Ql = $k[--$j]; //#2623
        $_.plen = _Ql; //#2623
        $k[$j++] = _Ql; //#2630
        if (_Ql > 1) { //#2630
            $k[$j++] = $geti($_.ais, 0, $_.plen); //#2627
            $_.isvaliddlpkeyseq(); //#2627
            if ($nt($k[--$j])) { //#2629
                $j--; //#2628
                $k[$j++] = 'bwipp.GS1dlBadPathInfo#2628'; //#2628
                $k[$j++] = "The AIs in the path are not a valid key-qualifier sequence for the key"; //#2628
                bwipp_raiseerror(); //#2628
            } //#2628
        } //#2628
        $k[$j++] = $_.qp; //#2648
        for (;;) { //#2648
            var _Qr = $k[--$j]; //#2634
            $k[$j++] = _Qr; //#2634
            if ($eq(_Qr, "")) { //#2634
                $j--; //#2634
                break; //#2634
            } //#2634
            $search($k[--$j], "&"); //#2635
            if ($k[--$j]) { //#2635
                var _Qu = $k[--$j]; //#2635
                var _Qv = $k[--$j]; //#2635
                $k[$j++] = _Qu; //#2635
                $k[$j++] = _Qv; //#2635
                $j--; //#2635
            } else { //#2635
                var _Qw = $k[--$j]; //#2635
                $k[$j++] = ""; //#2635
                $k[$j++] = _Qw; //#2635
            } //#2635
            $search($k[--$j], "="); //#2636
            if ($k[--$j]) { //#2646
                var _Qz = $k[--$j]; //#2637
                $k[$j++] = _Qz; //#2637
                $k[$j++] = true; //#2637
                $forall(_Qz, function() { //#2637
                    var _R0 = $k[--$j]; //#2637
                    var _R1 = $k[--$j]; //#2637
                    $k[$j++] = _R1 && ((_R0 >= 48) && (_R0 <= 57)); //#2637
                }); //#2637
                if ($k[--$j]) { //#2643
                    var _R4 = $k[--$j]; //#2638
                    var _R5 = $k[--$j]; //#2638
                    var _R6 = $k[--$j]; //#2638
                    var _R7 = $k[--$j]; //#2638
                    var _R8 = $k[--$j]; //#2638
                    $put($_.ais, _R8, _R4); //#2638
                    $k[$j++] = _R8; //#2640
                    $k[$j++] = _R7; //#2640
                    $k[$j++] = $_.vals; //#2640
                    $k[$j++] = _R8; //#2640
                    $k[$j++] = _R6; //#2640
                    $k[$j++] = true; //#2640
                    $_.uriunescape(); //#2640
                    var _RA = $k[--$j]; //#2640
                    var _RB = $k[--$j]; //#2640
                    $put($k[--$j], _RB, _RA); //#2640
                    var _RD = $k[--$j]; //#2641
                    var _RE = $k[--$j]; //#2641
                    $k[$j++] = $f(_RE + 1); //#2641
                    $k[$j++] = _RD; //#2641
                } else { //#2643
                    $j -= 3; //#2643
                } //#2643
            } else { //#2646
                $j--; //#2646
            } //#2646
        } //#2646
        var _RH = $k[--$j]; //#2651
        var _RJ = $geti($_.ais, $_.plen, $f(_RH - $_.plen)); //#2651
        $k[$j++] = _RH; //#2665
        for (var _RK = 0, _RL = _RJ.length; _RK < _RL; _RK++) { //#2665
            var _RM = $get(_RJ, _RK); //#2665
            var _RO = $get($_.gs1syntax, _RM) !== undefined; //#2652
            $k[$j++] = _RM; //#2656
            if (_RO) { //#2655
                var _RQ = $k[--$j]; //#2653
                var _RR = $get($_.gs1syntax, _RQ); //#2653
                var _RS = $get(_RR, 'dlattr') !== undefined; //#2653
                $k[$j++] = _RQ; //#2653
                $k[$j++] = _RR; //#2653
                $k[$j++] = 'dlattr'; //#2653
                if (_RS) { //#2653
                    var _RT = $k[--$j]; //#2653
                    var _RV = $get($k[--$j], _RT); //#2653
                    $k[$j++] = _RV; //#2653
                } else { //#2653
                    $j -= 2; //#2653
                    $k[$j++] = true; //#2653
                } //#2653
            } else { //#2655
                $k[$j++] = $_.dontlint; //#2655
            } //#2655
            if ($nt($k[--$j])) { //#2663
                var _RY = $k[--$j]; //#2658
                var _RZ = _RY.length; //#2658
                var _Ra = $s(_RZ + 46); //#2658
                $puti(_Ra, 0, "AI \("); //#2659
                $puti(_Ra, 4, _RY); //#2660
                $puti(_Ra, _RZ + 4, "\) is not a valid GS1 DL URI data attribute"); //#2661
                $k[$j++] = _RY; //#2662
                $k[$j++] = _Ra; //#2662
                $k[$j++] = _RZ; //#2662
                $j--; //#2662
                var _Rb = $k[--$j]; //#2662
                var _Rc = $k[--$j]; //#2662
                $k[$j++] = _Rb; //#2662
                $k[$j++] = _Rc; //#2662
                $j--; //#2662
                var _Rd = $k[--$j]; //#2662
                $k[$j++] = 'bwipp.GS1dlInvalidDataAttribute#2662'; //#2662
                $k[$j++] = _Rd; //#2662
                bwipp_raiseerror(); //#2662
            } //#2662
            $j--; //#2664
        } //#2664
        var _Rg = $k[--$j]; //#2668
        var _Ri = $geti($_.ais, $_.plen, $f(_Rg - $_.plen)); //#2668
        $k[$j++] = _Rg; //#2683
        for (var _Rj = 0, _Rk = _Ri.length; _Rj < _Rk; _Rj++) { //#2683
            $k[$j++] = $get(_Ri, _Rj); //#2681
            for (var _Rn = $_.plen; _Rn >= 1; _Rn -= 1) { //#2681
                var _Ro = $k[--$j]; //#2670
                $k[$j++] = _Ro; //#2672
                $k[$j++] = _Rn; //#2672
                $k[$j++] = _Ro; //#2672
                $k[$j++] = Infinity; //#2670
                $aload($geti($_.ais, 0, $_.plen)); //#2671
                $r($counttomark() + 3, -2); //#2672
                var _Rt = $k[--$j]; //#2672
                var _Ru = $k[--$j]; //#2672
                $k[$j++] = _Rt; //#2672
                $r(_Ru, 1); //#2672
                var _Rv = $a(); //#2672
                $k[$j++] = _Rv; //#2673
                $_.isvaliddlpkeyseq(); //#2673
                if ($k[--$j]) { //#2680
                    var _Rx = $k[--$j]; //#2674
                    var _Ry = $k[--$j]; //#2674
                    $k[$j++] = _Rx; //#2674
                    $k[$j++] = _Ry; //#2674
                    $j--; //#2674
                    var _Rz = $k[--$j]; //#2675
                    var _S0 = _Rz.length; //#2675
                    var _S1 = $s(_S0 + 50); //#2675
                    $puti(_S1, 0, "AI \("); //#2676
                    $puti(_S1, 4, _Rz); //#2677
                    $puti(_S1, _S0 + 4, "\) from query params should be in the path info"); //#2678
                    $k[$j++] = _Rz; //#2679
                    $k[$j++] = _S1; //#2679
                    $k[$j++] = _S0; //#2679
                    $j--; //#2679
                    var _S2 = $k[--$j]; //#2679
                    var _S3 = $k[--$j]; //#2679
                    $k[$j++] = _S2; //#2679
                    $k[$j++] = _S3; //#2679
                    $j--; //#2679
                    var _S4 = $k[--$j]; //#2679
                    $k[$j++] = 'bwipp.GS1dlAttributeMustBeQualifier#2679'; //#2679
                    $k[$j++] = _S4; //#2679
                    bwipp_raiseerror(); //#2679
                } //#2679
            } //#2679
            $j--; //#2682
        } //#2682
        var _S6 = $k[--$j]; //#2685
        $_.ais = $geti($_.ais, 0, _S6); //#2685
        $_.vals = $geti($_.vals, 0, _S6); //#2686
        for (var _SC = 0, _SB = $_.ais.length - 1; _SC <= _SB; _SC += 1) { //#2701
            $k[$j++] = _SC; //#2699
            if ($eq($get($_.ais, _SC), "01")) { //#2699
                var _SF = $k[--$j]; //#2692
                var _SH = $get($_.vals, _SF); //#2692
                var _SI = _SH.length; //#2693
                $k[$j++] = _SF; //#2698
                $k[$j++] = _SH; //#2698
                if ((_SI == 8) || ((_SI == 12) || (_SI == 13))) { //#2697
                    var _SK = $strcpy($s(14), "00000000000000"); //#2694
                    $k[$j++] = _SK; //#2694
                    $k[$j++] = _SK; //#2694
                    $r(3, -1); //#2694
                    var _SL = $k[--$j]; //#2694
                    $puti($k[--$j], 14 - _SL.length, _SL); //#2694
                    var _SO = $k[--$j]; //#2695
                    var _SP = $k[--$j]; //#2695
                    $put($_.vals, _SP, _SO); //#2695
                    $k[$j++] = _SP; //#2695
                } else { //#2697
                    $j--; //#2697
                } //#2697
            } //#2697
            $j--; //#2700
        } //#2700
    } //#2700
    if (!bwipp_gs1process.__2714__) { //#2714
        $_ = Object.create($_); //#2714
        $k[$j++] = Infinity; //#2707
        var _SQ = $a(["00", "01", "02", "03", "04", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "31", "32", "33", "34", "35", "36", "41"]); //#2712
        for (var _SR = 0, _SS = _SQ.length; _SR < _SS; _SR++) { //#2713
            var _ST = $get(_SQ, _SR); //#2713
            $k[$j++] = _ST; //#2713
            $k[$j++] = _ST; //#2713
        } //#2713
        $_.aifixed = $d(); //#2713
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_gs1process.$ctx[id] = $_[id]); //#2713
        bwipp_gs1process.__2714__ = 1; //#2713
        $_ = Object.getPrototypeOf($_); //#2713
    } //#2713
    $k[$j++] = Infinity; //#2716
    var _SW = $_.ais; //#2717
    for (var _SX = 0, _SY = _SW.length; _SX < _SY; _SX++) { //#2724
        var _SZ = $get(_SW, _SX); //#2724
        $k[$j++] = true; //#2723
        $k[$j++] = _SZ; //#2723
        if (_SZ.length >= 2) { //#2722
            var _Sd = $get($_.aifixed, $geti($k[--$j], 0, 2)) !== undefined; //#2720
            if (_Sd) { //#2720
                $j--; //#2720
                $k[$j++] = false; //#2720
            } //#2720
        } else { //#2722
            $j--; //#2722
        } //#2722
    } //#2722
    $_.fncs = $a(); //#2722
    if (!bwipp_gs1process.__2749__) { //#2749
        $_ = Object.create($_); //#2749
        $k[$j++] = Infinity; //#2730
        $k[$j++] = 0; //#2732
        for (var _Sf = 0, _Sg = "!\"%&'\(\)*+,-./0123456789:;<=>?ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz".length; _Sf < _Sg; _Sf++) { //#2732
            var _Si = $k[--$j]; //#2732
            $k[$j++] = $get("!\"%&'\(\)*+,-./0123456789:;<=>?ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz", _Sf); //#2732
            $k[$j++] = _Si; //#2732
            $k[$j++] = $f(_Si + 1); //#2732
        } //#2732
        $j--; //#2732
        $_.cset82 = $d(); //#2733
        $k[$j++] = Infinity; //#2735
        $k[$j++] = 0; //#2737
        for (var _Sk = 0, _Sl = "#-/0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ".length; _Sk < _Sl; _Sk++) { //#2737
            var _Sn = $k[--$j]; //#2737
            $k[$j++] = $get("#-/0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ", _Sk); //#2737
            $k[$j++] = _Sn; //#2737
            $k[$j++] = $f(_Sn + 1); //#2737
        } //#2737
        $j--; //#2737
        $_.cset39 = $d(); //#2738
        $k[$j++] = Infinity; //#2740
        $k[$j++] = 0; //#2742
        for (var _Sp = 0, _Sq = "23456789ABCDEFGHJKLMNPQRSTUVWXYZ".length; _Sp < _Sq; _Sp++) { //#2742
            var _Ss = $k[--$j]; //#2742
            $k[$j++] = $get("23456789ABCDEFGHJKLMNPQRSTUVWXYZ", _Sp); //#2742
            $k[$j++] = _Ss; //#2742
            $k[$j++] = $f(_Ss + 1); //#2742
        } //#2742
        $j--; //#2742
        $_.cset32 = $d(); //#2743
        $k[$j++] = Infinity; //#2745
        $k[$j++] = 0; //#2747
        for (var _Su = 0, _Sv = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_".length; _Su < _Sv; _Su++) { //#2747
            var _Sx = $k[--$j]; //#2747
            $k[$j++] = $get("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", _Su); //#2747
            $k[$j++] = _Sx; //#2747
            $k[$j++] = $f(_Sx + 1); //#2747
        } //#2747
        $j--; //#2747
        $_.cset64 = $d(); //#2748
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_gs1process.$ctx[id] = $_[id]); //#2748
        bwipp_gs1process.__2749__ = 1; //#2748
        $_ = Object.getPrototypeOf($_); //#2748
    } //#2748
    $_.lintnumeric = function() {
        var _T0 = $k[--$j]; //#2752
        $k[$j++] = true; //#2752
        $forall(_T0, function() { //#2752
            var _T1 = $k[--$j]; //#2752
            if ((_T1 < 48) || (_T1 > 57)) { //#2752
                $j--; //#2752
                $k[$j++] = false; //#2752
                return true; //#2752
            } //#2752
        }); //#2752
        if ($nt($k[--$j])) { //#2753
            $j--; //#2753
            $k[$j++] = 'bwipp.GS1notNumeric#2753'; //#2753
            $k[$j++] = "Not numeric"; //#2753
            $k[$j++] = false; //#2753
            return true; //#2753
        } //#2753
    }; //#2753
    $_.lintcset82 = function() {
        var _T3 = $k[--$j]; //#2757
        $k[$j++] = true; //#2757
        $forall(_T3, function() { //#2757
            var _T6 = $get($_.cset82, $k[--$j]) !== undefined; //#2757
            if (!_T6) { //#2757
                $j--; //#2757
                $k[$j++] = false; //#2757
                return true; //#2757
            } //#2757
        }); //#2757
        if ($nt($k[--$j])) { //#2758
            $j--; //#2758
            $k[$j++] = 'bwipp.GS1badCSET82character#2758'; //#2758
            $k[$j++] = "Invalid CSET 82 character"; //#2758
            $k[$j++] = false; //#2758
            return true; //#2758
        } //#2758
    }; //#2758
    $_.lintcset39 = function() {
        var _T8 = $k[--$j]; //#2762
        $k[$j++] = true; //#2762
        $forall(_T8, function() { //#2762
            var _TB = $get($_.cset39, $k[--$j]) !== undefined; //#2762
            if (!_TB) { //#2762
                $j--; //#2762
                $k[$j++] = false; //#2762
                return true; //#2762
            } //#2762
        }); //#2762
        if ($nt($k[--$j])) { //#2763
            $j--; //#2763
            $k[$j++] = 'bwipp.GS1badCSET39character#2763'; //#2763
            $k[$j++] = "Invalid CSET 39 character"; //#2763
            $k[$j++] = false; //#2763
            return true; //#2763
        } //#2763
    }; //#2763
    $_.lintcset64 = function() {
        var _TD = $k[--$j]; //#2768
        $k[$j++] = true; //#2768
        $forall(_TD, function() { //#2768
            var _TE = $k[--$j]; //#2768
            var _TG = $get($_.cset64, _TE) !== undefined; //#2768
            if ((!_TG) && (_TE != 61)) { //#2768
                $j--; //#2768
                $k[$j++] = false; //#2768
                return true; //#2768
            } //#2768
        }); //#2768
        if ($nt($k[--$j])) { //#2769
            $j--; //#2769
            $k[$j++] = 'bwipp.GS1badCSET64character#2769'; //#2769
            $k[$j++] = "Invalid CSET 64 character"; //#2769
            $k[$j++] = false; //#2769
            return true; //#2769
        } //#2769
    }; //#2769
    $_.lintkey = function() {
        var _TI = $k[--$j]; //#2773
        $k[$j++] = _TI; //#2773
        if (_TI.length < 2) { //#2773
            $j -= 2; //#2773
            $k[$j++] = 'bwipp.GS1keyTooShort#2773'; //#2773
            $k[$j++] = "Key is too short"; //#2773
            $k[$j++] = false; //#2773
            return true; //#2773
        } //#2773
        var _TJ = $k[--$j]; //#2774
        var _TK = $get(_TJ, 0); //#2774
        var _TL = $get(_TJ, 1); //#2775
        if (((_TK < 48) || (_TK > 57)) || ((_TL < 48) || (_TL > 57))) { //#2777
            $j--; //#2776
            $k[$j++] = 'bwipp.GS1badGCP#2776'; //#2776
            $k[$j++] = "Non-numeric company prefix"; //#2776
            $k[$j++] = false; //#2776
            return true; //#2776
        } //#2776
    }; //#2776
    $_.lintimporteridx = function() {
        $search("-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz", $k[--$j]); //#2782
        if ($nt($k[--$j])) { //#2782
            $j -= 2; //#2782
            $k[$j++] = 'bwipp.GS1badImporterIndex#2782'; //#2782
            $k[$j++] = "Invalid importer index"; //#2782
            $k[$j++] = false; //#2782
            return true; //#2782
        } //#2782
        $j -= 3; //#2783
    }; //#2783
    $_.lintcsum = function() {
        $k[$j++] = Infinity; //#2787
        var _TO = $k[--$j]; //#2787
        var _TP = $k[--$j]; //#2787
        var _TQ = ((_TP.length % 2) == 0) ? 3 : 1; //#2788
        $k[$j++] = _TO; //#2789
        $k[$j++] = _TQ; //#2789
        $forall(_TP, function() { //#2789
            var _TR = $k[--$j]; //#2789
            var _TS = $k[--$j]; //#2789
            $k[$j++] = $f(_TR - 48) * _TS; //#2789
            $k[$j++] = $f(4 - _TS); //#2789
        }); //#2789
        $j--; //#2789
        var _TT = $counttomark() + 1; //#2790
        $k[$j++] = 0; //#2790
        for (var _TU = 0, _TV = _TT - 1; _TU < _TV; _TU++) { //#2790
            var _TW = $k[--$j]; //#2790
            var _TX = $k[--$j]; //#2790
            $k[$j++] = $f(_TX + _TW); //#2790
        } //#2790
        var _TY = $k[--$j]; //#2790
        var _TZ = $k[--$j]; //#2790
        $k[$j++] = _TY; //#2790
        $k[$j++] = _TZ; //#2790
        $j--; //#2790
        if (($k[--$j] % 10) != 0) { //#2791
            $j--; //#2791
            $k[$j++] = 'bwipp.GS1badChecksum#2791'; //#2791
            $k[$j++] = "Bad checksum"; //#2791
            $k[$j++] = false; //#2791
            return true; //#2791
        } //#2791
    }; //#2791
    $_.lintcsumalpha = function() {
        var _Tb = $k[--$j]; //#2795
        $k[$j++] = _Tb; //#2795
        if (_Tb.length < 2) { //#2795
            $j -= 2; //#2795
            $k[$j++] = 'bwipp.GS1alphaTooShort#2795'; //#2795
            $k[$j++] = "Alphanumeric string is too short to check"; //#2795
            $k[$j++] = false; //#2795
            return true; //#2795
        } //#2795
        var _Tc = $k[--$j]; //#2796
        $k[$j++] = _Tc; //#2798
        $k[$j++] = _Tc.length - 2; //#2798
        $k[$j++] = $geti(_Tc, 0, _Tc.length - 2); //#2798
        $k[$j++] = Infinity; //#2798
        var _Te = $k[--$j]; //#2798
        var _Tf = $k[--$j]; //#2798
        $k[$j++] = _Te; //#2800
        $forall(_Tf, function() { //#2800
            var _Tg = $k[--$j]; //#2799
            var _Ti = $get($_.cset82, _Tg) !== undefined; //#2799
            $k[$j++] = _Tg; //#2799
            if (_Ti) { //#2799
                var _Tl = $get($_.cset82, $k[--$j]); //#2799
                $k[$j++] = _Tl; //#2799
            } else { //#2799
                $k[$j++] = -1; //#2799
                return true; //#2799
            } //#2799
        }); //#2799
        var _Tm = $k[--$j]; //#2801
        $k[$j++] = _Tm; //#2801
        if (_Tm == -1) { //#2801
            $cleartomark(); //#2801
            $j -= 3; //#2801
            $k[$j++] = 'bwipp.GS1UnknownCSET82Character#2801'; //#2801
            $k[$j++] = "Unknown CSET 82 character"; //#2801
            $k[$j++] = false; //#2801
            return true; //#2801
        } //#2801
        $astore($a($counttomark())); //#2802
        var _Tp = $k[--$j]; //#2802
        var _Tq = $k[--$j]; //#2802
        $k[$j++] = _Tp; //#2802
        $k[$j++] = _Tq; //#2802
        $j--; //#2802
        $r(3, 1); //#2803
        var _Tr = $k[--$j]; //#2804
        var _Tt = $geti($k[--$j], _Tr, 2); //#2804
        $k[$j++] = _Tt; //#2804
        $k[$j++] = Infinity; //#2804
        var _Tu = $k[--$j]; //#2804
        var _Tv = $k[--$j]; //#2804
        $k[$j++] = _Tu; //#2806
        $forall(_Tv, function() { //#2806
            var _Tw = $k[--$j]; //#2805
            var _Ty = $get($_.cset32, _Tw) !== undefined; //#2805
            $k[$j++] = _Tw; //#2805
            if (_Ty) { //#2805
                var _U1 = $get($_.cset32, $k[--$j]); //#2805
                $k[$j++] = _U1; //#2805
            } else { //#2805
                $k[$j++] = -1; //#2805
                return true; //#2805
            } //#2805
        }); //#2805
        var _U2 = $k[--$j]; //#2807
        $k[$j++] = _U2; //#2807
        if (_U2 == -1) { //#2807
            $cleartomark(); //#2807
            $j -= 2; //#2807
            $k[$j++] = 'bwipp.GS1UnknownCSET32Character#2807'; //#2807
            $k[$j++] = "Unknown CSET 32 character"; //#2807
            $k[$j++] = false; //#2807
            return true; //#2807
        } //#2807
        $astore($a($counttomark())); //#2808
        var _U5 = $k[--$j]; //#2808
        var _U6 = $k[--$j]; //#2808
        $k[$j++] = _U5; //#2808
        $k[$j++] = _U6; //#2808
        $j--; //#2808
        var _U7 = $k[--$j]; //#2809
        var _UA = $k[--$j]; //#2809
        var _UB = $a([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83]); //#2810
        var _UC = _UA.length; //#2812
        $k[$j++] = $f(($get(_U7, 0) << 5) + $get(_U7, 1)); //#2812
        $k[$j++] = _UA; //#2812
        $k[$j++] = _UB; //#2812
        $k[$j++] = _UC; //#2812
        if (_UC > _UB.length) { //#2812
            $j -= 5; //#2812
            $k[$j++] = 'bwipp.GS1alphaTooLong#2812'; //#2812
            $k[$j++] = "Alphanumeric string is too long to check"; //#2812
            $k[$j++] = false; //#2812
            return true; //#2812
        } //#2812
        var _UD = $k[--$j]; //#2813
        var _UF = $geti($k[--$j], 0, _UD); //#2813
        for (var _UG = 0, _UH = _UF.length; _UG < _UH; _UG++) { //#2813
            var _UJ = $k[--$j]; //#2813
            $k[$j++] = $get(_UF, _UG); //#2813
            $k[$j++] = _UJ; //#2813
        } //#2813
        var _UK = $k[--$j]; //#2814
        $k[$j++] = 0; //#2814
        $forall(_UK, function() { //#2814
            $r(3, -1); //#2814
            var _UL = $k[--$j]; //#2814
            var _UM = $k[--$j]; //#2814
            var _UN = $k[--$j]; //#2814
            $k[$j++] = $f(_UN + (_UL * _UM)); //#2814
        }); //#2814
        var _UO = $k[--$j]; //#2814
        if ($k[--$j] != (_UO % 1021)) { //#2815
            $j--; //#2815
            $k[$j++] = 'bwipp.GS1badAlphaCheckCharacters#2815'; //#2815
            $k[$j++] = "Bad alphanumeric check characters"; //#2815
            $k[$j++] = false; //#2815
            return true; //#2815
        } //#2815
    }; //#2815
    if (!bwipp_gs1process.__2839__) { //#2839
        $_ = Object.create($_); //#2839
        $k[$j++] = Infinity; //#2819
        var _UQ = $a(['004', '008', '010', '012', '016', '020', '024', '028', '031', '032', '036', '040', '044', '048', '050', '051', '052', '056', '060', '064', '068', '070', '072', '074', '076', '084', '086', '090', '092', '096', '100', '104', '108', '112', '116', '120', '124', '132', '136', '140', '144', '148', '152', '156', '158', '162', '166', '170', '174', '175', '178', '180', '184', '188', '191', '192', '196', '203', '204', '208', '212', '214', '218', '222', '226', '231', '232', '233', '234', '238', '239', '242', '246', '248', '250', '254', '258', '260', '262', '266', '268', '270', '275', '276', '288', '292', '296', '300', '304', '308', '312', '316', '320', '324', '328', '332', '334', '336', '340', '344', '348', '352', '356', '360', '364', '368', '372', '376', '380', '384', '388', '392', '398', '400', '404', '408', '410', '414', '417', '418', '422', '426', '428', '430', '434', '438', '440', '442', '446', '450', '454', '458', '462', '466', '470', '474', '478', '480', '484', '492', '496', '498', '499', '500', '504', '508', '512', '516', '520', '524', '528', '531', '533', '534', '535', '540', '548', '554', '558', '562', '566', '570', '574', '578', '580', '581', '583', '584', '585', '586', '591', '598', '600', '604', '608', '612', '616', '620', '624', '626', '630', '634', '638', '642', '643', '646', '652', '654', '659', '660', '662', '663', '666', '670', '674', '678', '682', '686', '688', '690', '694', '702', '703', '704', '705', '706', '710', '716', '724', '728', '729', '732', '740', '744', '748', '752', '756', '760', '762', '764', '768', '772', '776', '780', '784', '788', '792', '795', '796', '798', '800', '804', '807', '818', '826', '831', '832', '833', '834', '840', '850', '854', '858', '860', '862', '876', '882', '887', '894']); //#2837
        for (var _UR = 0, _US = _UQ.length; _UR < _US; _UR++) { //#2838
            var _UT = $get(_UQ, _UR); //#2838
            $k[$j++] = _UT; //#2838
            $k[$j++] = _UT; //#2838
        } //#2838
        $_.iso3166 = $d(); //#2838
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_gs1process.$ctx[id] = $_[id]); //#2838
        bwipp_gs1process.__2839__ = 1; //#2838
        $_ = Object.getPrototypeOf($_); //#2838
    } //#2838
    $_.lintiso3166 = function() {
        var _UY = $get($_.iso3166, $k[--$j]) !== undefined; //#2842
        if (!_UY) { //#2842
            $j--; //#2842
            $k[$j++] = 'bwipp.GS1UnknownCountry#2842'; //#2842
            $k[$j++] = "Unknown country code"; //#2842
            $k[$j++] = false; //#2842
            return true; //#2842
        } //#2842
    }; //#2842
    $_.lintiso3166999 = function() {
        var _UZ = $k[--$j]; //#2846
        $k[$j++] = _UZ; //#2850
        if ($ne(_UZ, '999')) { //#2849
            var _Uc = $get($_.iso3166, $k[--$j]) !== undefined; //#2847
            if (!_Uc) { //#2847
                $j--; //#2847
                $k[$j++] = 'bwipp.GS1UnknownCountryOr999#2847'; //#2847
                $k[$j++] = "Unknown country code or not 999"; //#2847
                $k[$j++] = false; //#2847
                return true; //#2847
            } //#2847
        } else { //#2849
            $j--; //#2849
        } //#2849
    }; //#2849
    $_.lintiso3166list = function() {
        var _Ud = $k[--$j]; //#2854
        $k[$j++] = _Ud; //#2856
        if ((_Ud.length % 3) != 0) { //#2856
            $j -= 2; //#2855
            $k[$j++] = 'bwipp.GS1BadCountryListLength#2855'; //#2855
            $k[$j++] = "Not a group of three-digit country codes"; //#2855
            $k[$j++] = false; //#2855
            return true; //#2855
        } //#2855
        var _Ue = $k[--$j]; //#2858
        $k[$j++] = _Ue; //#2861
        $k[$j++] = true; //#2861
        for (var _Ug = 0, _Uf = _Ue.length - 1; _Ug <= _Uf; _Ug += 3) { //#2861
            var _Uh = $k[--$j]; //#2859
            var _Ui = $k[--$j]; //#2859
            var _Ul = $get($_.iso3166, $geti(_Ui, _Ug, 3)) !== undefined; //#2860
            $k[$j++] = _Ui; //#2860
            $k[$j++] = _Uh; //#2860
            if (!_Ul) { //#2860
                $j -= 2; //#2860
                $k[$j++] = false; //#2860
                break; //#2860
            } //#2860
        } //#2860
        if ($nt($k[--$j])) { //#2862
            $j--; //#2862
            $k[$j++] = 'bwipp.GS1UnknownCountry#2862'; //#2862
            $k[$j++] = "Unknown country code"; //#2862
            $k[$j++] = false; //#2862
            return true; //#2862
        } //#2862
        $j--; //#2863
    }; //#2863
    if (!bwipp_gs1process.__2893__) { //#2893
        $_ = Object.create($_); //#2893
        $k[$j++] = Infinity; //#2867
        var _Un = $a(['AD', 'AE', 'AF', 'AG', 'AI', 'AL', 'AM', 'AO', 'AQ', 'AR', 'AS', 'AT', 'AU', 'AW', 'AX', 'AZ', 'BA', 'BB', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ', 'BL', 'BM', 'BN', 'BO', 'BQ', 'BR', 'BS', 'BT', 'BV', 'BW', 'BY', 'BZ', 'CA', 'CC', 'CD', 'CF', 'CG', 'CH', 'CI', 'CK', 'CL', 'CM', 'CN', 'CO', 'CR', 'CU', 'CV', 'CW', 'CX', 'CY', 'CZ', 'DE', 'DJ', 'DK', 'DM', 'DO', 'DZ', 'EC', 'EE', 'EG', 'EH', 'ER', 'ES', 'ET', 'FI', 'FJ', 'FK', 'FM', 'FO', 'FR', 'GA', 'GB', 'GD', 'GE', 'GF', 'GG', 'GH', 'GI', 'GL', 'GM', 'GN', 'GP', 'GQ', 'GR', 'GS', 'GT', 'GU', 'GW', 'GY', 'HK', 'HM', 'HN', 'HR', 'HT', 'HU', 'ID', 'IE', 'IL', 'IM', 'IN', 'IO', 'IQ', 'IR', 'IS', 'IT', 'JE', 'JM', 'JO', 'JP', 'KE', 'KG', 'KH', 'KI', 'KM', 'KN', 'KP', 'KR', 'KW', 'KY', 'KZ', 'LA', 'LB', 'LC', 'LI', 'LK', 'LR', 'LS', 'LT', 'LU', 'LV', 'LY', 'MA', 'MC', 'MD', 'ME', 'MF', 'MG', 'MH', 'MK', 'ML', 'MM', 'MN', 'MO', 'MP', 'MQ', 'MR', 'MS', 'MT', 'MU', 'MV', 'MW', 'MX', 'MY', 'MZ', 'NA', 'NC', 'NE', 'NF', 'NG', 'NI', 'NL', 'NO', 'NP', 'NR', 'NU', 'NZ', 'OM', 'PA', 'PE', 'PF', 'PG', 'PH', 'PK', 'PL', 'PM', 'PN', 'PR', 'PS', 'PT', 'PW', 'PY', 'QA', 'RE', 'RO', 'RS', 'RU', 'RW', 'SA', 'SB', 'SC', 'SD', 'SE', 'SG', 'SH', 'SI', 'SJ', 'SK', 'SL', 'SM', 'SN', 'SO', 'SR', 'SS', 'ST', 'SV', 'SX', 'SY', 'SZ', 'TC', 'TD', 'TF', 'TG', 'TH', 'TJ', 'TK', 'TL', 'TM', 'TN', 'TO', 'TR', 'TT', 'TV', 'TW', 'TZ', 'UA', 'UG', 'UM', 'US', 'UY', 'UZ', 'VA', 'VC', 'VE', 'VG', 'VI', 'VN', 'VU', 'WF', 'WS', 'YE', 'YT', 'ZA', 'ZM', 'ZW']); //#2891
        for (var _Uo = 0, _Up = _Un.length; _Uo < _Up; _Uo++) { //#2892
            var _Uq = $get(_Un, _Uo); //#2892
            $k[$j++] = _Uq; //#2892
            $k[$j++] = _Uq; //#2892
        } //#2892
        $_.iso3166alpha2 = $d(); //#2892
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_gs1process.$ctx[id] = $_[id]); //#2892
        bwipp_gs1process.__2893__ = 1; //#2892
        $_ = Object.getPrototypeOf($_); //#2892
    } //#2892
    $_.lintiso3166alpha2 = function() {
        var _Uv = $get($_.iso3166alpha2, $k[--$j]) !== undefined; //#2896
        if (!_Uv) { //#2896
            $j--; //#2896
            $k[$j++] = 'bwipp.GS1UnknownCountryAlpha#2896'; //#2896
            $k[$j++] = "Unknown country alpha code"; //#2896
            $k[$j++] = false; //#2896
            return true; //#2896
        } //#2896
    }; //#2896
    if (!bwipp_gs1process.__2924__) { //#2924
        $_ = Object.create($_); //#2924
        $k[$j++] = Infinity; //#2900
        var _Uw = $a(['008', '012', '032', '036', '044', '048', '050', '051', '052', '060', '064', '068', '072', '084', '090', '096', '104', '108', '116', '124', '132', '136', '144', '152', '156', '170', '174', '188', '191', '192', '203', '208', '214', '222', '230', '232', '238', '242', '262', '270', '292', '320', '324', '328', '332', '340', '344', '348', '352', '356', '360', '364', '368', '376', '388', '392', '398', '400', '404', '408', '410', '414', '417', '418', '422', '426', '430', '434', '446', '454', '458', '462', '480', '484', '496', '498', '504', '512', '516', '524', '532', '533', '548', '554', '558', '566', '578', '586', '590', '598', '600', '604', '608', '634', '643', '646', '654', '682', '690', '694', '702', '704', '706', '710', '728', '748', '752', '756', '760', '764', '776', '780', '784', '788', '800', '807', '818', '826', '834', '840', '858', '860', '882', '886', '901', '925', '927', '928', '929', '930', '931', '932', '933', '934', '936', '938', '940', '941', '943', '944', '946', '947', '948', '949', '950', '951', '952', '953', '955', '956', '957', '958', '959', '960', '961', '962', '963', '964', '965', '967', '968', '969', '970', '971', '972', '973', '975', '976', '977', '978', '979', '980', '981', '984', '985', '986', '990', '994', '997', '999']); //#2922
        for (var _Ux = 0, _Uy = _Uw.length; _Ux < _Uy; _Ux++) { //#2923
            var _Uz = $get(_Uw, _Ux); //#2923
            $k[$j++] = _Uz; //#2923
            $k[$j++] = _Uz; //#2923
        } //#2923
        $_.iso4217 = $d(); //#2923
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_gs1process.$ctx[id] = $_[id]); //#2923
        bwipp_gs1process.__2924__ = 1; //#2923
        $_ = Object.getPrototypeOf($_); //#2923
    } //#2923
    $_.lintiso4217 = function() {
        var _V4 = $get($_.iso4217, $k[--$j]) !== undefined; //#2927
        if (!_V4) { //#2927
            $j--; //#2927
            $k[$j++] = 'bwipp.GS1UnknownCurrency#2927'; //#2927
            $k[$j++] = "Unknown currency code"; //#2927
            $k[$j++] = false; //#2927
            return true; //#2927
        } //#2927
    }; //#2927
    $_.lintiso5218 = function() {
        var _V5 = $k[--$j]; //#2931
        if ($ne(_V5, "0") && ($ne(_V5, "1") && ($ne(_V5, "2") && $ne(_V5, "9")))) { //#2933
            $j--; //#2932
            $k[$j++] = 'bwipp.GS1biologicalSexCode#2932'; //#2932
            $k[$j++] = "Invalid biological sex code"; //#2932
            $k[$j++] = false; //#2932
            return true; //#2932
        } //#2932
    }; //#2932
    $_.lintiban = function() {
        var _V6 = $k[--$j]; //#2937
        $k[$j++] = _V6; //#2937
        if (_V6.length <= 4) { //#2937
            $j -= 2; //#2937
            $k[$j++] = 'bwipp.GS1tooShort#2937'; //#2937
            $k[$j++] = "IBAN too short"; //#2937
            $k[$j++] = false; //#2937
            return true; //#2937
        } //#2937
        var _V7 = $k[--$j]; //#2938
        $k[$j++] = _V7; //#2943
        $k[$j++] = true; //#2943
        $forall(_V7, function() { //#2943
            var _V8 = $s(1); //#2939
            $k[$j++] = _V8; //#2939
            $k[$j++] = _V8; //#2939
            $k[$j++] = 0; //#2939
            $r(4, -1); //#2939
            var _V9 = $k[--$j]; //#2939
            var _VA = $k[--$j]; //#2939
            $put($k[--$j], _VA, _V9); //#2939
            $search("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ", $k[--$j]); //#2941
            if ($nt($k[--$j])) { //#2941
                $j -= 2; //#2941
                $k[$j++] = false; //#2941
                return true; //#2941
            } //#2941
            $j -= 3; //#2942
        }); //#2942
        if ($nt($k[--$j])) { //#2944
            $j--; //#2944
            $k[$j++] = 'bwipp.GS1badIBANcharacter#2944'; //#2944
            $k[$j++] = "Invalid IBAN character"; //#2944
            $k[$j++] = false; //#2944
            return true; //#2944
        } //#2944
        var _VF = $k[--$j]; //#2945
        $k[$j++] = _VF; //#2945
        $k[$j++] = _VF; //#2945
        $k[$j++] = Infinity; //#2945
        var _VG = $k[--$j]; //#2945
        var _VH = $k[--$j]; //#2945
        $k[$j++] = _VG; //#2945
        $k[$j++] = _VH; //#2945
        $k[$j++] = Infinity; //#2945
        var _VI = $k[--$j]; //#2945
        var _VJ = $k[--$j]; //#2945
        $k[$j++] = _VI; //#2945
        $forall(_VJ); //#2945
        $r($counttomark(), -4); //#2945
        $astore($a($counttomark())); //#2945
        var _VN = $k[--$j]; //#2945
        var _VO = $k[--$j]; //#2945
        $k[$j++] = _VN; //#2945
        $k[$j++] = _VO; //#2945
        $j--; //#2945
        $forall($k[--$j], function() { //#2947
            var _VR = $f($k[--$j] - 48); //#2946
            $k[$j++] = _VR; //#2946
            if (_VR > 9) { //#2946
                var _VT = $f($k[--$j] - 7); //#2946
                $k[$j++] = ~~(_VT / 10); //#2946
                $k[$j++] = _VT % 10; //#2946
            } //#2946
        }); //#2946
        $astore($a($counttomark())); //#2947
        var _VW = $k[--$j]; //#2947
        var _VX = $k[--$j]; //#2947
        $k[$j++] = _VW; //#2947
        $k[$j++] = _VX; //#2947
        $j--; //#2947
        var _VY = $k[--$j]; //#2948
        $k[$j++] = 0; //#2948
        $forall(_VY, function() { //#2948
            var _VZ = $k[--$j]; //#2948
            var _Va = $k[--$j]; //#2948
            $k[$j++] = ($f(_VZ + (_Va * 10))) % 97; //#2948
        }); //#2948
        if ($k[--$j] != 1) { //#2949
            $j -= 2; //#2949
            $k[$j++] = 'bwipp.GS1badIBANchecksum#2949'; //#2949
            $k[$j++] = "IBAN checksum incorrect"; //#2949
            $k[$j++] = false; //#2949
            return true; //#2949
        } //#2949
        var _Vd = $geti($k[--$j], 0, 2); //#2950
        $k[$j++] = _Vd; //#2950
        $_.lintiso3166alpha2(); //#2950
    }; //#2950
    $_.lintzero = function() {
        if ($ne($k[--$j], "0")) { //#2954
            $j--; //#2954
            $k[$j++] = 'bwipp.GS1zeroRequired#2954'; //#2954
            $k[$j++] = "Zero is required"; //#2954
            $k[$j++] = false; //#2954
            return true; //#2954
        } //#2954
    }; //#2954
    $_.lintnonzero = function() {
        var _Vf = $k[--$j]; //#2958
        $k[$j++] = false; //#2958
        $forall(_Vf, function() { //#2958
            if ($k[--$j] != 48) { //#2958
                $j--; //#2958
                $k[$j++] = true; //#2958
            } //#2958
        }); //#2958
        if ($nt($k[--$j])) { //#2959
            $j--; //#2959
            $k[$j++] = 'bwipp.GS1zeroNotPermitted#2959'; //#2959
            $k[$j++] = "Zero not permitted"; //#2959
            $k[$j++] = false; //#2959
            return true; //#2959
        } //#2959
    }; //#2959
    $_.lintnozeroprefix = function() {
        var _Vi = $k[--$j]; //#2963
        if ((_Vi.length > 1) && ($get(_Vi, 0) == 48)) { //#2965
            $j--; //#2964
            $k[$j++] = 'bwipp.GS1badZeroPrefix#2964'; //#2964
            $k[$j++] = "Zero prefix is not permitted"; //#2964
            $k[$j++] = false; //#2964
            return true; //#2964
        } //#2964
    }; //#2964
    $_.linthasnondigit = function() {
        var _Vk = $k[--$j]; //#2969
        $k[$j++] = false; //#2969
        $forall(_Vk, function() { //#2969
            var _Vl = $k[--$j]; //#2969
            if ((_Vl < 48) || (_Vl > 57)) { //#2969
                $j--; //#2969
                $k[$j++] = true; //#2969
                return true; //#2969
            } //#2969
        }); //#2969
        if ($nt($k[--$j])) { //#2970
            $k[$j++] = 'bwipp.GS1requiresNonDigit#2970'; //#2970
            $k[$j++] = "A non-digit character is required"; //#2970
            $k[$j++] = false; //#2970
            return true; //#2970
        } //#2970
    }; //#2970
    $_.linthyphen = function() {
        if ($ne($k[--$j], "-")) { //#2974
            $j--; //#2974
            $k[$j++] = 'bwipp.GS1hyphenRequired#2974'; //#2974
            $k[$j++] = "A hyphen is required"; //#2974
            $k[$j++] = false; //#2974
            return true; //#2974
        } //#2974
    }; //#2974
    $_.lintyyyymmd0 = function() {
        var _Vo = $k[--$j]; //#2978
        var _Vq = $cvi($geti(_Vo, 4, 2)); //#2978
        $k[$j++] = _Vo; //#2978
        if ((_Vq < 1) || (_Vq > 12)) { //#2978
            $j--; //#2978
            $k[$j++] = 'bwipp.GS1badMonth#2978'; //#2978
            $k[$j++] = "Invalid month"; //#2978
            $k[$j++] = false; //#2978
            return true; //#2978
        } //#2978
        var _Vr = $k[--$j]; //#2979
        var _Vt = $cvi($geti(_Vr, 0, 4)); //#2979
        $k[$j++] = _Vr; //#2980
        $k[$j++] = ((_Vt % 400) == 0) || (((_Vt % 4) == 0) && ((_Vt % 100) != 0)); //#2980
        $k[$j++] = Infinity; //#2980
        $k[$j++] = 31; //#2980
        $r(3, -1); //#2980
        var _Vv = $k[--$j] ? 29 : 28; //#2980
        $k[$j++] = _Vv; //#2980
        $k[$j++] = 31; //#2980
        $k[$j++] = 30; //#2980
        $k[$j++] = 31; //#2980
        $k[$j++] = 30; //#2980
        $k[$j++] = 31; //#2980
        $k[$j++] = 31; //#2980
        $k[$j++] = 30; //#2980
        $k[$j++] = 31; //#2980
        $k[$j++] = 30; //#2980
        $k[$j++] = 31; //#2980
        var _Vw = $a(); //#2980
        var _Vx = $k[--$j]; //#2981
        if ($get(_Vw, $cvi($geti(_Vx, 4, 2)) - 1) < $cvi($geti(_Vx, 6, 2))) { //#2982
            $j--; //#2982
            $k[$j++] = 'bwipp.GS1badDay#2982'; //#2982
            $k[$j++] = "Invalid day of month"; //#2982
            $k[$j++] = false; //#2982
            return true; //#2982
        } //#2982
    }; //#2982
    $_.lintyyyymmdd = function() {
        var _W1 = $k[--$j]; //#2986
        $k[$j++] = _W1; //#2986
        if (_W1.length != 8) { //#2986
            $j--; //#2986
            $k[$j++] = 'bwipp.GS1badDateLength#2986'; //#2986
            $k[$j++] = "Invalid length for yyyymmdd date"; //#2986
            $k[$j++] = false; //#2986
            return true; //#2986
        } //#2986
        var _W2 = $k[--$j]; //#2987
        $k[$j++] = _W2; //#2987
        if ($cvi($geti(_W2, 6, 2)) < 1) { //#2987
            $j--; //#2987
            $k[$j++] = 'bwipp.GS1badDay#2987'; //#2987
            $k[$j++] = "Invalid day of month"; //#2987
            $k[$j++] = false; //#2987
            return true; //#2987
        } //#2987
        $_.lintyyyymmd0(); //#2988
    }; //#2988
    $_.lintyymmd0 = function() {
        var _W4 = $k[--$j]; //#2992
        var _W6 = $cvi($geti(_W4, 0, 2)); //#2992
        var _W7 = _W6 - 21; //#2993
        $k[$j++] = _W4; //#2993
        $k[$j++] = _W6; //#2993
        $k[$j++] = _W7; //#2993
        if (_W7 >= 51) { //#2993
            $j--; //#2993
            $k[$j++] = "19"; //#2993
        } else { //#2993
            if ($k[--$j] <= -50) { //#2993
                $k[$j++] = "21"; //#2993
            } else { //#2993
                $k[$j++] = "20"; //#2993
            } //#2993
        } //#2993
        var _W9 = $k[--$j]; //#2993
        var _WA = $k[--$j]; //#2993
        $k[$j++] = _W9; //#2993
        $k[$j++] = _WA; //#2993
        $j--; //#2993
        var _WB = $s(8); //#2994
        $k[$j++] = _WB; //#2994
        $k[$j++] = _WB; //#2994
        $k[$j++] = 0; //#2994
        $r(4, -1); //#2994
        var _WC = $k[--$j]; //#2994
        var _WD = $k[--$j]; //#2994
        $puti($k[--$j], _WD, _WC); //#2994
        var _WF = $k[--$j]; //#2994
        $k[$j++] = _WF; //#2994
        $k[$j++] = _WF; //#2994
        $k[$j++] = 2; //#2994
        $r(4, -1); //#2994
        var _WG = $k[--$j]; //#2994
        var _WH = $k[--$j]; //#2994
        $puti($k[--$j], _WH, _WG); //#2994
        $_.lintyyyymmd0(); //#2995
    }; //#2995
    $_.lintyymmdd = function() {
        var _WJ = $k[--$j]; //#2999
        $k[$j++] = _WJ; //#2999
        if (_WJ.length != 6) { //#2999
            $j--; //#2999
            $k[$j++] = 'bwipp.GS1badDateLength#2999'; //#2999
            $k[$j++] = "Invalid length for yymmdd date"; //#2999
            $k[$j++] = false; //#2999
            return true; //#2999
        } //#2999
        var _WK = $k[--$j]; //#3000
        $k[$j++] = _WK; //#3000
        if ($cvi($geti(_WK, 4, 2)) < 1) { //#3000
            $j--; //#3000
            $k[$j++] = 'bwipp.GS1badDay#3000'; //#3000
            $k[$j++] = "Invalid day of month"; //#3000
            $k[$j++] = false; //#3000
            return true; //#3000
        } //#3000
        $_.lintyymmd0(); //#3001
    }; //#3001
    $_.lintyymmddhh = function() {
        var _WM = $k[--$j]; //#3005
        $k[$j++] = _WM; //#3005
        if (_WM.length != 8) { //#3005
            $j--; //#3005
            $k[$j++] = 'bwipp.GS1badYYMMDDHHLength#3005'; //#3005
            $k[$j++] = "Invalid length for yymmdd date with hour"; //#3005
            $k[$j++] = false; //#3005
            return true; //#3005
        } //#3005
        var _WN = $k[--$j]; //#3006
        $k[$j++] = _WN; //#3006
        if ($cvi($geti(_WN, 6, 2)) > 23) { //#3006
            $j -= 2; //#3006
            $k[$j++] = 'bwipp.GS1badHour#3006'; //#3006
            $k[$j++] = "Invalid hour of day"; //#3006
            $k[$j++] = false; //#3006
            return true; //#3006
        } //#3006
        var _WQ = $geti($k[--$j], 0, 6); //#3007
        $k[$j++] = _WQ; //#3007
        $_.lintyymmdd(); //#3007
    }; //#3007
    $_.linthhmm = function() {
        var _WR = $k[--$j]; //#3011
        $k[$j++] = _WR; //#3011
        if ($cvi($geti(_WR, 0, 2)) > 23) { //#3011
            $j -= 2; //#3011
            $k[$j++] = 'bwipp.GS1badHour#3011'; //#3011
            $k[$j++] = "Invalid hour of day"; //#3011
            $k[$j++] = false; //#3011
            return true; //#3011
        } //#3011
        if ($cvi($geti($k[--$j], 2, 2)) > 59) { //#3012
            $j--; //#3012
            $k[$j++] = 'bwipp.GS1badMinute#3012'; //#3012
            $k[$j++] = "Invalid minute in the hour"; //#3012
            $k[$j++] = false; //#3012
            return true; //#3012
        } //#3012
    }; //#3012
    $_.lintmmoptss = function() {
        var _WV = $k[--$j]; //#3016
        var _WW = _WV.length; //#3016
        $k[$j++] = _WV; //#3018
        if ((_WW != 2) && (_WW != 4)) { //#3018
            $j--; //#3017
            $k[$j++] = 'bwipp.GS1badTimeLength#3017'; //#3017
            $k[$j++] = "Invalid length for optional minutes and seconds"; //#3017
            $k[$j++] = false; //#3017
            return true; //#3017
        } //#3017
        var _WX = $k[--$j]; //#3019
        $k[$j++] = _WX; //#3019
        if ($cvi($geti(_WX, 0, 2)) > 59) { //#3019
            $j -= 2; //#3019
            $k[$j++] = 'bwipp.GS1badMinute#3019'; //#3019
            $k[$j++] = "Invalid minute in the hour"; //#3019
            $k[$j++] = false; //#3019
            return true; //#3019
        } //#3019
        var _WZ = $k[--$j]; //#3020
        $k[$j++] = _WZ; //#3022
        if (_WZ.length >= 4) { //#3022
            var _Wa = $k[--$j]; //#3021
            $k[$j++] = _Wa; //#3021
            if ($cvi($geti(_Wa, 2, 2)) > 59) { //#3021
                $j -= 2; //#3021
                $k[$j++] = 'bwipp.GS1badSecond#3021'; //#3021
                $k[$j++] = "Invalid second in the minute"; //#3021
                $k[$j++] = false; //#3021
                return true; //#3021
            } //#3021
        } //#3021
        $j--; //#3023
    }; //#3023
    $_.lintyesno = function() {
        var _Wc = $k[--$j]; //#3027
        if ($ne(_Wc, "0") && $ne(_Wc, "1")) { //#3029
            $j--; //#3028
            $k[$j++] = 'bwipp.GS1badBoolean#3028'; //#3028
            $k[$j++] = "Neither 0 nor 1 for yes or no"; //#3028
            $k[$j++] = false; //#3028
            return true; //#3028
        } //#3028
    }; //#3028
    $_.lintwinding = function() {
        var _Wd = $k[--$j]; //#3033
        if ($ne(_Wd, "0") && ($ne(_Wd, "1") && $ne(_Wd, "9"))) { //#3035
            $j--; //#3034
            $k[$j++] = 'bwipp.GS1badWinding#3034'; //#3034
            $k[$j++] = "Invalid winding direction"; //#3034
            $k[$j++] = false; //#3034
            return true; //#3034
        } //#3034
    }; //#3034
    $_.lintpieceoftotal = function() {
        var _We = $k[--$j]; //#3039
        $k[$j++] = _We; //#3039
        if ((_We.length % 2) != 0) { //#3039
            $j -= 2; //#3039
            $k[$j++] = 'bwipp.GS1badPieceTotalLength#3039'; //#3039
            $k[$j++] = "Invalid piece/total length"; //#3039
            $k[$j++] = false; //#3039
            return true; //#3039
        } //#3039
        var _Wf = $k[--$j]; //#3040
        var _Wh = $cvi($geti(_Wf, 0, ~~(_Wf.length / 2))); //#3041
        $k[$j++] = _Wf; //#3041
        $k[$j++] = _Wh; //#3041
        if (_Wh == 0) { //#3041
            $j -= 3; //#3041
            $k[$j++] = 'bwipp.GS1badPieceNumber#3041'; //#3041
            $k[$j++] = "Invalid piece number"; //#3041
            $k[$j++] = false; //#3041
            return true; //#3041
        } //#3041
        var _Wi = $k[--$j]; //#3042
        var _Wj = $k[--$j]; //#3042
        var _Wk = ~~(_Wj.length / 2); //#3042
        var _Wm = $cvi($geti(_Wj, _Wk, _Wk)); //#3043
        $k[$j++] = _Wi; //#3043
        $k[$j++] = _Wm; //#3043
        if (_Wm == 0) { //#3043
            $j -= 3; //#3043
            $k[$j++] = 'bwipp.GS1badPieceTotal#3043'; //#3043
            $k[$j++] = "Invalid total number"; //#3043
            $k[$j++] = false; //#3043
            return true; //#3043
        } //#3043
        var _Wn = $k[--$j]; //#3044
        if ($gt($k[--$j], _Wn)) { //#3044
            $j--; //#3044
            $k[$j++] = 'bwipp.GS1pieceExceedsTotal#3044'; //#3044
            $k[$j++] = "Piece number exceeds total"; //#3044
            $k[$j++] = false; //#3044
            return true; //#3044
        } //#3044
    }; //#3044
    $_.lintposinseqslash = function() {
        $search($k[--$j], "/"); //#3048
        if ($nt($k[--$j])) { //#3050
            $j--; //#3049
            $k[$j++] = 'bwipp.invalidPosInSeqFormat#3049'; //#3049
            $k[$j++] = "Invalid <pos>/<end> format"; //#3049
            $k[$j++] = false; //#3049
            return true; //#3049
        } //#3049
        var _Wr = $k[--$j]; //#3051
        var _Ws = $k[--$j]; //#3051
        $k[$j++] = _Wr; //#3051
        $k[$j++] = _Ws; //#3051
        $j--; //#3051
        var _Wt = $k[--$j]; //#3052
        $k[$j++] = _Wt; //#3054
        if (_Wt.length == 0) { //#3054
            $j -= 2; //#3053
            $k[$j++] = 'bwipp.invalidPosInSeqFormat#3053'; //#3053
            $k[$j++] = "Invalid <pos>/<end> format"; //#3053
            $k[$j++] = false; //#3053
            return true; //#3053
        } //#3053
        var _Wu = $k[--$j]; //#3055
        var _Wv = $k[--$j]; //#3055
        $k[$j++] = _Wv; //#3057
        $k[$j++] = _Wu; //#3057
        if (_Wv.length == 0) { //#3057
            $j -= 2; //#3056
            $k[$j++] = 'bwipp.invalidPosInSeqFormat#3056'; //#3056
            $k[$j++] = "Invalid <pos>/<end> format"; //#3056
            $k[$j++] = false; //#3056
            return true; //#3056
        } //#3056
        var _Ww = $k[--$j]; //#3058
        $k[$j++] = _Ww; //#3060
        $k[$j++] = true; //#3060
        $forall(_Ww, function() { //#3060
            var _Wx = $k[--$j]; //#3059
            if ((_Wx < 48) || (_Wx > 57)) { //#3059
                $j--; //#3059
                $k[$j++] = false; //#3059
                return true; //#3059
            } //#3059
        }); //#3059
        if ($nt($k[--$j])) { //#3061
            $j -= 2; //#3061
            $k[$j++] = 'bwipp.positionNotNumeric#3061'; //#3061
            $k[$j++] = "Position is not numeric"; //#3061
            $k[$j++] = false; //#3061
            return true; //#3061
        } //#3061
        var _Wz = $k[--$j]; //#3062
        var _X0 = $k[--$j]; //#3062
        $k[$j++] = _X0; //#3064
        $k[$j++] = _Wz; //#3064
        $k[$j++] = true; //#3064
        $forall(_X0, function() { //#3064
            var _X1 = $k[--$j]; //#3063
            if ((_X1 < 48) || (_X1 > 57)) { //#3063
                $j--; //#3063
                $k[$j++] = false; //#3063
                return true; //#3063
            } //#3063
        }); //#3063
        if ($nt($k[--$j])) { //#3065
            $j -= 2; //#3065
            $k[$j++] = 'bwipp.endNotNumeric#3065'; //#3065
            $k[$j++] = "End is not numeric"; //#3065
            $k[$j++] = false; //#3065
            return true; //#3065
        } //#3065
        var _X3 = $k[--$j]; //#3066
        $k[$j++] = _X3; //#3066
        if ($get(_X3, 0) == 48) { //#3066
            $j -= 2; //#3066
            $k[$j++] = 'bwipp.positionZeroPrefix#3066'; //#3066
            $k[$j++] = "Position cannot have zero prefix"; //#3066
            $k[$j++] = false; //#3066
            return true; //#3066
        } //#3066
        var _X5 = $k[--$j]; //#3067
        var _X6 = $k[--$j]; //#3067
        $k[$j++] = _X6; //#3067
        $k[$j++] = _X5; //#3067
        if ($get(_X6, 0) == 48) { //#3067
            $j -= 2; //#3067
            $k[$j++] = 'bwipp.endZeroPrefix#3067'; //#3067
            $k[$j++] = "End cannot have zero prefix"; //#3067
            $k[$j++] = false; //#3067
            return true; //#3067
        } //#3067
        var _X8 = $k[--$j]; //#3068
        if ($cvi($k[--$j]) < $cvi(_X8)) { //#3069
            $k[$j++] = 'bwipp.positionExceedsEnd#3069'; //#3069
            $k[$j++] = "Position exceeds end"; //#3069
            $k[$j++] = false; //#3069
            return true; //#3069
        } //#3069
    }; //#3069
    $_.lintpcenc = function() {
        for (;;) { //#3083
            $search($k[--$j], "%"); //#3074
            if ($nt($k[--$j])) { //#3074
                $j--; //#3074
                break; //#3074
            } //#3074
            $j -= 2; //#3075
            var _XC = $k[--$j]; //#3075
            $k[$j++] = _XC; //#3075
            if (_XC.length < 2) { //#3075
                $j -= 2; //#3075
                $k[$j++] = 'bwipp.GS1badPercentEscape#3075'; //#3075
                $k[$j++] = "Invalid % escape"; //#3075
                $k[$j++] = false; //#3075
                break; //#3075
            } //#3075
            var _XD = $k[--$j]; //#3076
            var _XE = $geti(_XD, 0, 2); //#3076
            $k[$j++] = _XD; //#3081
            $k[$j++] = true; //#3081
            for (var _XF = 0, _XG = _XE.length; _XF < _XG; _XF++) { //#3081
                var _XI = $s(1); //#3077
                $put(_XI, 0, $get(_XE, _XF)); //#3077
                $search("0123456789ABCDEFabcdef", _XI); //#3079
                if ($nt($k[--$j])) { //#3079
                    $j -= 2; //#3079
                    $k[$j++] = false; //#3079
                    break; //#3079
                } //#3079
                $j -= 3; //#3080
            } //#3080
            if ($nt($k[--$j])) { //#3082
                $j -= 2; //#3082
                $k[$j++] = 'bwipp.GS1badPercentChars#3082'; //#3082
                $k[$j++] = "Invalid characters for percent encoding"; //#3082
                $k[$j++] = false; //#3082
                break; //#3082
            } //#3082
        } //#3082
    }; //#3082
    $_.lintcouponcode = function() {
        var _XL = $k[--$j]; //#3087
        $k[$j++] = _XL; //#3089
        $k[$j++] = true; //#3089
        $forall(_XL, function() { //#3089
            var _XM = $k[--$j]; //#3088
            if ((_XM < 48) || (_XM > 57)) { //#3088
                $j--; //#3088
                $k[$j++] = false; //#3088
                return true; //#3088
            } //#3088
        }); //#3088
        if ($nt($k[--$j])) { //#3090
            $j -= 2; //#3090
            $k[$j++] = 'bwipp.GS1couponNotNumeric#3090'; //#3090
            $k[$j++] = "Coupon not numeric"; //#3090
            $k[$j++] = false; //#3090
            return true; //#3090
        } //#3090
        var _XO = $k[--$j]; //#3093
        $k[$j++] = _XO; //#3095
        if (_XO.length < 1) { //#3095
            $j -= 2; //#3094
            $k[$j++] = 'bwipp.GS1couponTooShortGCPVLI#3094'; //#3094
            $k[$j++] = "Coupon too short: Missing GCP VLI"; //#3094
            $k[$j++] = false; //#3094
            return true; //#3094
        } //#3094
        var _XP = $k[--$j]; //#3096
        var _XR = $cvi($geti(_XP, 0, 1)); //#3096
        $k[$j++] = _XP; //#3098
        $k[$j++] = _XR; //#3098
        if (_XR > 6) { //#3098
            $j -= 2; //#3097
            $k[$j++] = 'bwipp.GS1couponBadGCPVLI#3097'; //#3097
            $k[$j++] = "Coupon GCP length indicator must be 0-6"; //#3097
            $k[$j++] = false; //#3097
            return true; //#3097
        } //#3097
        var _XS = $k[--$j]; //#3099
        var _XT = $k[--$j]; //#3100
        $k[$j++] = _XT; //#3102
        $k[$j++] = $f($f(_XS + 6) + 1); //#3102
        if (($f($f(_XS + 6) + 1)) > _XT.length) { //#3102
            $j -= 3; //#3101
            $k[$j++] = 'bwipp.GS1couponTooShortGCP#3101'; //#3101
            $k[$j++] = "Coupon too short: GCP truncated"; //#3101
            $k[$j++] = false; //#3101
            return true; //#3101
        } //#3101
        var _XU = $k[--$j]; //#3103
        var _XV = $k[--$j]; //#3103
        var _XW = $geti(_XV, _XU, $f(_XV.length - _XU)); //#3103
        $k[$j++] = _XW; //#3108
        if (_XW.length < 6) { //#3108
            $j -= 2; //#3107
            $k[$j++] = 'bwipp.GS1couponTooShortOfferCode#3107'; //#3107
            $k[$j++] = "Coupon too short: Offer Code truncated"; //#3107
            $k[$j++] = false; //#3107
            return true; //#3107
        } //#3107
        var _XX = $k[--$j]; //#3109
        var _XY = $geti(_XX, 6, _XX.length - 6); //#3109
        $k[$j++] = _XY; //#3114
        if (_XY.length < 1) { //#3114
            $j -= 2; //#3113
            $k[$j++] = 'bwipp.GS1couponTooShortSaveValueVLI#3113'; //#3113
            $k[$j++] = "Coupon too short: Missing Save Value VLI"; //#3113
            $k[$j++] = false; //#3113
            return true; //#3113
        } //#3113
        var _XZ = $k[--$j]; //#3115
        var _Xb = $cvi($geti(_XZ, 0, 1)); //#3115
        $k[$j++] = _XZ; //#3117
        $k[$j++] = _Xb; //#3117
        if ((_Xb < 1) || (_Xb > 5)) { //#3117
            $j -= 2; //#3116
            $k[$j++] = 'bwipp.GS1couponBadSaveValueVLI#3116'; //#3116
            $k[$j++] = "Coupon Save Value length indicator must be 1-5"; //#3116
            $k[$j++] = false; //#3116
            return true; //#3116
        } //#3116
        var _Xc = $k[--$j]; //#3118
        var _Xd = $k[--$j]; //#3119
        $k[$j++] = _Xd; //#3121
        $k[$j++] = $f(_Xc + 1); //#3121
        if ($f(_Xc + 1) > _Xd.length) { //#3121
            $j -= 3; //#3120
            $k[$j++] = 'bwipp.GS1couponTooShortSaveValue#3120'; //#3120
            $k[$j++] = "Coupon too short: Save Value truncated"; //#3120
            $k[$j++] = false; //#3120
            return true; //#3120
        } //#3120
        var _Xe = $k[--$j]; //#3122
        var _Xf = $k[--$j]; //#3122
        var _Xg = $geti(_Xf, _Xe, $f(_Xf.length - _Xe)); //#3122
        $k[$j++] = _Xg; //#3127
        if (_Xg.length < 1) { //#3127
            $j -= 2; //#3126
            $k[$j++] = 'bwipp.GS1couponTooShort1stPurchaseRequirementVLI#3126'; //#3126
            $k[$j++] = "Coupon too short: Missing 1st Purchase Requirement VLI"; //#3126
            $k[$j++] = false; //#3126
            return true; //#3126
        } //#3126
        var _Xh = $k[--$j]; //#3128
        var _Xj = $cvi($geti(_Xh, 0, 1)); //#3128
        $k[$j++] = _Xh; //#3130
        $k[$j++] = _Xj; //#3130
        if ((_Xj < 1) || (_Xj > 5)) { //#3130
            $j -= 2; //#3129
            $k[$j++] = 'bwipp.GS1couponBad1stPurchaseRequirementVLI#3129'; //#3129
            $k[$j++] = "Coupon 1st Purchase Requirement length indicator must be 1-5"; //#3129
            $k[$j++] = false; //#3129
            return true; //#3129
        } //#3129
        var _Xk = $k[--$j]; //#3131
        var _Xl = $k[--$j]; //#3132
        $k[$j++] = _Xl; //#3134
        $k[$j++] = $f(_Xk + 1); //#3134
        if ($f(_Xk + 1) > _Xl.length) { //#3134
            $j -= 3; //#3133
            $k[$j++] = 'bwipp.GS1couponTooShort1stPurchaseRequirement#3133'; //#3133
            $k[$j++] = "Coupon too short: 1st Purchase Requirement truncated"; //#3133
            $k[$j++] = false; //#3133
            return true; //#3133
        } //#3133
        var _Xm = $k[--$j]; //#3135
        var _Xn = $k[--$j]; //#3135
        var _Xo = $geti(_Xn, _Xm, $f(_Xn.length - _Xm)); //#3135
        $k[$j++] = _Xo; //#3140
        if (_Xo.length < 1) { //#3140
            $j -= 2; //#3139
            $k[$j++] = 'bwipp.GS1couponTooShort1stPurchaseRequirementCode#3139'; //#3139
            $k[$j++] = "Coupon too short: Missing 1st Purchase Requirement Code"; //#3139
            $k[$j++] = false; //#3139
            return true; //#3139
        } //#3139
        var _Xp = $k[--$j]; //#3141
        var _Xr = $cvi($geti(_Xp, 0, 1)); //#3141
        $k[$j++] = _Xp; //#3143
        if ((_Xr > 4) && (_Xr != 9)) { //#3143
            $j -= 2; //#3142
            $k[$j++] = 'bwipp.GS1couponBad1stPurchaseRequirementCode#3142'; //#3142
            $k[$j++] = "Coupon 1st Purchase Requirement Code must be 0-4 or 9"; //#3142
            $k[$j++] = false; //#3142
            return true; //#3142
        } //#3142
        var _Xs = $k[--$j]; //#3144
        var _Xt = $geti(_Xs, 1, _Xs.length - 1); //#3144
        $k[$j++] = _Xt; //#3149
        if (_Xt.length < 3) { //#3149
            $j -= 2; //#3148
            $k[$j++] = 'bwipp.GS1couponTooShort1stPurchaseFamilyCode#3148'; //#3148
            $k[$j++] = "Coupon too short: 1st Purchase Family Code truncated"; //#3148
            $k[$j++] = false; //#3148
            return true; //#3148
        } //#3148
        var _Xu = $k[--$j]; //#3150
        var _Xv = $geti(_Xu, 3, _Xu.length - 3); //#3150
        $k[$j++] = _Xv; //#3206
        if (_Xv.length >= 1) { //#3206
            var _Xw = $k[--$j]; //#3153
            $k[$j++] = _Xw; //#3206
            if ($cvi($geti(_Xw, 0, 1)) == 1) { //#3206
                var _Xy = $k[--$j]; //#3154
                var _Xz = $geti(_Xy, 1, _Xy.length - 1); //#3154
                $k[$j++] = _Xz; //#3159
                if (_Xz.length < 1) { //#3159
                    $j -= 2; //#3158
                    $k[$j++] = 'bwipp.GS1couponTooShortAdditionalPurchaseRulesCode#3158'; //#3158
                    $k[$j++] = "Coupon too short: Missing Additional Purchase Rules Code"; //#3158
                    $k[$j++] = false; //#3158
                    return true; //#3158
                } //#3158
                var _Y0 = $k[--$j]; //#3160
                $k[$j++] = _Y0; //#3162
                if ($cvi($geti(_Y0, 0, 1)) > 3) { //#3162
                    $j -= 2; //#3161
                    $k[$j++] = 'bwipp.GS1couponBadAdditionalPurchaseRulesCode#3161'; //#3161
                    $k[$j++] = "Coupon Additional Purchase Rules Code must be 0-3"; //#3161
                    $k[$j++] = false; //#3161
                    return true; //#3161
                } //#3161
                var _Y2 = $k[--$j]; //#3163
                var _Y3 = $geti(_Y2, 1, _Y2.length - 1); //#3163
                $k[$j++] = _Y3; //#3168
                if (_Y3.length < 1) { //#3168
                    $j -= 2; //#3167
                    $k[$j++] = 'bwipp.GS1couponTooShort2ndPurchaseRequirementVLI#3167'; //#3167
                    $k[$j++] = "Coupon too short: Missing 2nd Purchase Requirement VLI"; //#3167
                    $k[$j++] = false; //#3167
                    return true; //#3167
                } //#3167
                var _Y4 = $k[--$j]; //#3169
                var _Y6 = $cvi($geti(_Y4, 0, 1)); //#3169
                $k[$j++] = _Y4; //#3171
                $k[$j++] = _Y6; //#3171
                if ((_Y6 < 1) || (_Y6 > 5)) { //#3171
                    $j -= 2; //#3170
                    $k[$j++] = 'bwipp.GS1couponBad2ndPurchaseRequirementVLI#3170'; //#3170
                    $k[$j++] = "Coupon 2nd Purchase Requirement length indicator must be 1-5"; //#3170
                    $k[$j++] = false; //#3170
                    return true; //#3170
                } //#3170
                var _Y7 = $k[--$j]; //#3172
                var _Y8 = $k[--$j]; //#3173
                $k[$j++] = _Y8; //#3175
                $k[$j++] = $f(_Y7 + 1); //#3175
                if ($f(_Y7 + 1) > _Y8.length) { //#3175
                    $j -= 3; //#3174
                    $k[$j++] = 'bwipp.GS1couponTooShort2ndPurchaseRequirement#3174'; //#3174
                    $k[$j++] = "Coupon too short: 2nd Purchase Requirement truncated"; //#3174
                    $k[$j++] = false; //#3174
                    return true; //#3174
                } //#3174
                var _Y9 = $k[--$j]; //#3176
                var _YA = $k[--$j]; //#3176
                var _YB = $geti(_YA, _Y9, $f(_YA.length - _Y9)); //#3176
                $k[$j++] = _YB; //#3181
                if (_YB.length < 1) { //#3181
                    $j -= 2; //#3180
                    $k[$j++] = 'bwipp.GS1couponTooShort2ndPurchaseRequirementCode#3180'; //#3180
                    $k[$j++] = "Coupon too short: Missing 2nd Purchase Requirement Code"; //#3180
                    $k[$j++] = false; //#3180
                    return true; //#3180
                } //#3180
                var _YC = $k[--$j]; //#3182
                var _YE = $cvi($geti(_YC, 0, 1)); //#3182
                $k[$j++] = _YC; //#3184
                if ((_YE > 4) && (_YE != 9)) { //#3184
                    $j -= 2; //#3183
                    $k[$j++] = 'bwipp.GS1couponBad2ndPurchaseRequirementCode#3183'; //#3183
                    $k[$j++] = "Coupon 2nd Purchase Requirement Code must be 0-4 or 9"; //#3183
                    $k[$j++] = false; //#3183
                    return true; //#3183
                } //#3183
                var _YF = $k[--$j]; //#3185
                var _YG = $geti(_YF, 1, _YF.length - 1); //#3185
                $k[$j++] = _YG; //#3190
                if (_YG.length < 3) { //#3190
                    $j -= 2; //#3189
                    $k[$j++] = 'bwipp.GS1couponTooShort2ndPurchaseFamilyCode#3189'; //#3189
                    $k[$j++] = "Coupon too short: 2nd Purchase Family Code truncated"; //#3189
                    $k[$j++] = false; //#3189
                    return true; //#3189
                } //#3189
                var _YH = $k[--$j]; //#3191
                var _YI = $geti(_YH, 3, _YH.length - 3); //#3191
                $k[$j++] = _YI; //#3196
                if (_YI.length < 1) { //#3196
                    $j -= 2; //#3195
                    $k[$j++] = 'bwipp.GS1couponTooShort2ndPurchaseGCPVLI#3195'; //#3195
                    $k[$j++] = "Coupon too short: Missing 2nd Purchase GCP VLI"; //#3195
                    $k[$j++] = false; //#3195
                    return true; //#3195
                } //#3195
                var _YJ = $k[--$j]; //#3197
                var _YL = $cvi($geti(_YJ, 0, 1)); //#3197
                $k[$j++] = _YJ; //#3199
                $k[$j++] = _YL; //#3199
                if ((_YL > 6) && (_YL != 9)) { //#3199
                    $j -= 2; //#3198
                    $k[$j++] = 'bwipp.GS1couponBad2ndPurchaseGCPVLI#3198'; //#3198
                    $k[$j++] = "Coupon 2nd Purchase GCP length indicator must be 0-6 or 9"; //#3198
                    $k[$j++] = false; //#3198
                    return true; //#3198
                } //#3198
                var _YM = $k[--$j]; //#3200
                $k[$j++] = _YM; //#3200
                if (_YM != 9) { //#3200
                    var _YN = $k[--$j]; //#3200
                    $k[$j++] = $f(_YN + 6); //#3200
                } else { //#3200
                    $j--; //#3200
                    $k[$j++] = 0; //#3200
                } //#3200
                var _YO = $k[--$j]; //#3200
                var _YP = $k[--$j]; //#3201
                $k[$j++] = _YP; //#3203
                $k[$j++] = $f(_YO + 1); //#3203
                if ($f(_YO + 1) > _YP.length) { //#3203
                    $j -= 3; //#3202
                    $k[$j++] = 'bwipp.GS1couponTooShort2ndPurchaseGCP#3202'; //#3202
                    $k[$j++] = "Coupon too short: 2nd Purchase GCP truncated"; //#3202
                    $k[$j++] = false; //#3202
                    return true; //#3202
                } //#3202
                var _YQ = $k[--$j]; //#3204
                var _YR = $k[--$j]; //#3204
                $k[$j++] = $geti(_YR, _YQ, $f(_YR.length - _YQ)); //#3204
            } //#3204
        } //#3204
        var _YT = $k[--$j]; //#3209
        $k[$j++] = _YT; //#3253
        if (_YT.length >= 1) { //#3253
            var _YU = $k[--$j]; //#3209
            $k[$j++] = _YU; //#3253
            if ($cvi($geti(_YU, 0, 1)) == 2) { //#3253
                var _YW = $k[--$j]; //#3210
                var _YX = $geti(_YW, 1, _YW.length - 1); //#3210
                $k[$j++] = _YX; //#3215
                if (_YX.length < 1) { //#3215
                    $j -= 2; //#3214
                    $k[$j++] = 'bwipp.GS1couponTooShort3rdPurchaseRequirementVLI#3214'; //#3214
                    $k[$j++] = "Coupon too short: Missing 3rd Purchase Requirement VLI"; //#3214
                    $k[$j++] = false; //#3214
                    return true; //#3214
                } //#3214
                var _YY = $k[--$j]; //#3216
                var _Ya = $cvi($geti(_YY, 0, 1)); //#3216
                $k[$j++] = _YY; //#3218
                $k[$j++] = _Ya; //#3218
                if ((_Ya < 1) || (_Ya > 5)) { //#3218
                    $j -= 2; //#3217
                    $k[$j++] = 'bwipp.GS1couponBad3rdPurchaseRequirementVLI#3217'; //#3217
                    $k[$j++] = "Coupon 3rd Purchase Requirement length indicator must be 1-5"; //#3217
                    $k[$j++] = false; //#3217
                    return true; //#3217
                } //#3217
                var _Yb = $k[--$j]; //#3219
                var _Yc = $k[--$j]; //#3220
                $k[$j++] = _Yc; //#3222
                $k[$j++] = $f(_Yb + 1); //#3222
                if ($f(_Yb + 1) > _Yc.length) { //#3222
                    $j -= 3; //#3221
                    $k[$j++] = 'bwipp.GS1couponTooShort3rdPurchaseRequirement#3221'; //#3221
                    $k[$j++] = "Coupon too short: 3rd Purchase Requirement truncated"; //#3221
                    $k[$j++] = false; //#3221
                    return true; //#3221
                } //#3221
                var _Yd = $k[--$j]; //#3223
                var _Ye = $k[--$j]; //#3223
                var _Yf = $geti(_Ye, _Yd, $f(_Ye.length - _Yd)); //#3223
                $k[$j++] = _Yf; //#3228
                if (_Yf.length < 1) { //#3228
                    $j -= 2; //#3227
                    $k[$j++] = 'bwipp.GS1couponTooShort3rdPurchaseRequirementCode#3227'; //#3227
                    $k[$j++] = "Coupon too short: Missing 3rd Purchase Requirement Code"; //#3227
                    $k[$j++] = false; //#3227
                    return true; //#3227
                } //#3227
                var _Yg = $k[--$j]; //#3229
                var _Yi = $cvi($geti(_Yg, 0, 1)); //#3229
                $k[$j++] = _Yg; //#3231
                if ((_Yi > 4) && (_Yi != 9)) { //#3231
                    $j -= 2; //#3230
                    $k[$j++] = 'bwipp.GS1couponBad3rdPurchaseRequirementCode#3230'; //#3230
                    $k[$j++] = "Coupon 3rd Purchase Requirement Code must be 0-4 or 9"; //#3230
                    $k[$j++] = false; //#3230
                    return true; //#3230
                } //#3230
                var _Yj = $k[--$j]; //#3232
                var _Yk = $geti(_Yj, 1, _Yj.length - 1); //#3232
                $k[$j++] = _Yk; //#3237
                if (_Yk.length < 3) { //#3237
                    $j -= 2; //#3236
                    $k[$j++] = 'bwipp.GS1couponTooShort3rdPurchaseFamilyCode#3236'; //#3236
                    $k[$j++] = "Coupon too short: 3rd Purchase Family Code truncated"; //#3236
                    $k[$j++] = false; //#3236
                    return true; //#3236
                } //#3236
                var _Yl = $k[--$j]; //#3238
                var _Ym = $geti(_Yl, 3, _Yl.length - 3); //#3238
                $k[$j++] = _Ym; //#3243
                if (_Ym.length < 1) { //#3243
                    $j -= 2; //#3242
                    $k[$j++] = 'bwipp.GS1couponTooShort3rdPurchaseGCPVLI#3242'; //#3242
                    $k[$j++] = "Coupon too short: Missing 3rd Purchase GCP VLI"; //#3242
                    $k[$j++] = false; //#3242
                    return true; //#3242
                } //#3242
                var _Yn = $k[--$j]; //#3244
                var _Yp = $cvi($geti(_Yn, 0, 1)); //#3244
                $k[$j++] = _Yn; //#3246
                $k[$j++] = _Yp; //#3246
                if ((_Yp > 6) && (_Yp != 9)) { //#3246
                    $j -= 2; //#3245
                    $k[$j++] = 'bwipp.GS1couponBad3rdPurchaseGCPVLI#3245'; //#3245
                    $k[$j++] = "Coupon 3rd Purchase GCP length indicator must be 0-6 or 9"; //#3245
                    $k[$j++] = false; //#3245
                    return true; //#3245
                } //#3245
                var _Yq = $k[--$j]; //#3247
                $k[$j++] = _Yq; //#3247
                if (_Yq != 9) { //#3247
                    var _Yr = $k[--$j]; //#3247
                    $k[$j++] = $f(_Yr + 6); //#3247
                } else { //#3247
                    $j--; //#3247
                    $k[$j++] = 0; //#3247
                } //#3247
                var _Ys = $k[--$j]; //#3247
                var _Yt = $k[--$j]; //#3248
                $k[$j++] = _Yt; //#3250
                $k[$j++] = $f(_Ys + 1); //#3250
                if ($f(_Ys + 1) > _Yt.length) { //#3250
                    $j -= 3; //#3249
                    $k[$j++] = 'bwipp.GS1couponTooShort3rdPurchaseGCP#3249'; //#3249
                    $k[$j++] = "Coupon too short: 3rd Purchase GCP truncated"; //#3249
                    $k[$j++] = false; //#3249
                    return true; //#3249
                } //#3249
                var _Yu = $k[--$j]; //#3251
                var _Yv = $k[--$j]; //#3251
                $k[$j++] = $geti(_Yv, _Yu, $f(_Yv.length - _Yu)); //#3251
            } //#3251
        } //#3251
        $_.couponexpire = -1; //#3256
        var _Yx = $k[--$j]; //#3257
        $k[$j++] = _Yx; //#3275
        if (_Yx.length >= 1) { //#3275
            var _Yy = $k[--$j]; //#3257
            $k[$j++] = _Yy; //#3275
            if ($cvi($geti(_Yy, 0, 1)) == 3) { //#3275
                var _Z0 = $k[--$j]; //#3258
                var _Z1 = $geti(_Z0, 1, _Z0.length - 1); //#3258
                $k[$j++] = _Z1; //#3263
                if (_Z1.length < 6) { //#3263
                    $j -= 2; //#3262
                    $k[$j++] = 'bwipp.GS1couponTooShortExpirationDate#3262'; //#3262
                    $k[$j++] = "Coupon too short: Expiration date"; //#3262
                    $k[$j++] = false; //#3262
                    return true; //#3262
                } //#3262
                var _Z2 = $k[--$j]; //#3264
                var _Z4 = $cvi($geti(_Z2, 2, 2)); //#3264
                $k[$j++] = _Z2; //#3264
                if ((_Z4 < 1) || (_Z4 > 12)) { //#3264
                    $j -= 2; //#3264
                    $k[$j++] = 'bwipp.GS1couponExpirationDateBadMonth#3264'; //#3264
                    $k[$j++] = "Invalid month in expiration date"; //#3264
                    $k[$j++] = false; //#3264
                    return true; //#3264
                } //#3264
                var _Z5 = $k[--$j]; //#3265
                var _Z7 = $cvi($geti(_Z5, 0, 2)); //#3265
                var _Z8 = _Z7 - 21; //#3266
                $k[$j++] = _Z5; //#3266
                $k[$j++] = _Z7; //#3266
                $k[$j++] = _Z8; //#3266
                if (_Z8 >= 51) { //#3266
                    $j--; //#3266
                    var _Z9 = $k[--$j]; //#3266
                    $k[$j++] = $f(_Z9 + 1900); //#3266
                } else { //#3266
                    if ($k[--$j] <= -50) { //#3266
                        var _ZB = $k[--$j]; //#3266
                        $k[$j++] = $f(_ZB + 2100); //#3266
                    } else { //#3266
                        var _ZC = $k[--$j]; //#3266
                        $k[$j++] = $f(_ZC + 2000); //#3266
                    } //#3266
                } //#3266
                var _ZD = $k[--$j]; //#3267
                $k[$j++] = ((_ZD % 400) == 0) || (((_ZD % 4) == 0) && ((_ZD % 100) != 0)); //#3268
                $k[$j++] = Infinity; //#3268
                $k[$j++] = 31; //#3268
                $r(3, -1); //#3268
                var _ZF = $k[--$j] ? 29 : 28; //#3268
                $k[$j++] = _ZF; //#3268
                $k[$j++] = 31; //#3268
                $k[$j++] = 30; //#3268
                $k[$j++] = 31; //#3268
                $k[$j++] = 30; //#3268
                $k[$j++] = 31; //#3268
                $k[$j++] = 31; //#3268
                $k[$j++] = 30; //#3268
                $k[$j++] = 31; //#3268
                $k[$j++] = 30; //#3268
                $k[$j++] = 31; //#3268
                var _ZG = $a(); //#3268
                var _ZH = $k[--$j]; //#3269
                var _ZL = $cvi($geti(_ZH, 4, 2)); //#3270
                $k[$j++] = _ZH; //#3271
                if (($get(_ZG, $cvi($geti(_ZH, 2, 2)) - 1) < _ZL) || (_ZL < 1)) { //#3271
                    $j -= 2; //#3271
                    $k[$j++] = 'bwipp.GS1couponExpirationDateBadDay#3271'; //#3271
                    $k[$j++] = "Invalid day of month in expiration date"; //#3271
                    $k[$j++] = false; //#3271
                    return true; //#3271
                } //#3271
                var _ZM = $k[--$j]; //#3272
                $_.couponexpire = $cvi($geti(_ZM, 0, 6)); //#3272
                $k[$j++] = $geti(_ZM, 6, _ZM.length - 6); //#3273
            } //#3273
        } //#3273
        var _ZP = $k[--$j]; //#3278
        $k[$j++] = _ZP; //#3299
        if (_ZP.length >= 1) { //#3299
            var _ZQ = $k[--$j]; //#3278
            $k[$j++] = _ZQ; //#3299
            if ($cvi($geti(_ZQ, 0, 1)) == 4) { //#3299
                var _ZS = $k[--$j]; //#3279
                var _ZT = $geti(_ZS, 1, _ZS.length - 1); //#3279
                $k[$j++] = _ZT; //#3284
                if (_ZT.length < 6) { //#3284
                    $j -= 2; //#3283
                    $k[$j++] = 'bwipp.GS1couponTooShortStartDate#3283'; //#3283
                    $k[$j++] = "Coupon too short: Start date"; //#3283
                    $k[$j++] = false; //#3283
                    return true; //#3283
                } //#3283
                var _ZU = $k[--$j]; //#3285
                var _ZW = $cvi($geti(_ZU, 2, 2)); //#3285
                $k[$j++] = _ZU; //#3285
                if ((_ZW < 1) || (_ZW > 12)) { //#3285
                    $j -= 2; //#3285
                    $k[$j++] = 'bwipp.GS1couponStartDateBadMonth#3285'; //#3285
                    $k[$j++] = "Invalid month in start date"; //#3285
                    $k[$j++] = false; //#3285
                    return true; //#3285
                } //#3285
                var _ZX = $k[--$j]; //#3286
                var _ZZ = $cvi($geti(_ZX, 0, 2)); //#3286
                var _Za = _ZZ - 21; //#3287
                $k[$j++] = _ZX; //#3287
                $k[$j++] = _ZZ; //#3287
                $k[$j++] = _Za; //#3287
                if (_Za >= 51) { //#3287
                    $j--; //#3287
                    var _Zb = $k[--$j]; //#3287
                    $k[$j++] = $f(_Zb + 1900); //#3287
                } else { //#3287
                    if ($k[--$j] <= -50) { //#3287
                        var _Zd = $k[--$j]; //#3287
                        $k[$j++] = $f(_Zd + 2100); //#3287
                    } else { //#3287
                        var _Ze = $k[--$j]; //#3287
                        $k[$j++] = $f(_Ze + 2000); //#3287
                    } //#3287
                } //#3287
                var _Zf = $k[--$j]; //#3288
                $k[$j++] = ((_Zf % 400) == 0) || (((_Zf % 4) == 0) && ((_Zf % 100) != 0)); //#3289
                $k[$j++] = Infinity; //#3289
                $k[$j++] = 31; //#3289
                $r(3, -1); //#3289
                var _Zh = $k[--$j] ? 29 : 28; //#3289
                $k[$j++] = _Zh; //#3289
                $k[$j++] = 31; //#3289
                $k[$j++] = 30; //#3289
                $k[$j++] = 31; //#3289
                $k[$j++] = 30; //#3289
                $k[$j++] = 31; //#3289
                $k[$j++] = 31; //#3289
                $k[$j++] = 30; //#3289
                $k[$j++] = 31; //#3289
                $k[$j++] = 30; //#3289
                $k[$j++] = 31; //#3289
                var _Zi = $a(); //#3289
                var _Zj = $k[--$j]; //#3290
                var _Zn = $cvi($geti(_Zj, 4, 2)); //#3291
                $k[$j++] = _Zj; //#3292
                if (($get(_Zi, $cvi($geti(_Zj, 2, 2)) - 1) < _Zn) || (_Zn < 1)) { //#3292
                    $j -= 2; //#3292
                    $k[$j++] = 'bwipp.GS1couponStartDateBadDay#3292'; //#3292
                    $k[$j++] = "Invalid day of month in start date"; //#3292
                    $k[$j++] = false; //#3292
                    return true; //#3292
                } //#3292
                var _Zo = $k[--$j]; //#3293
                $_.couponstart = $cvi($geti(_Zo, 0, 6)); //#3293
                $k[$j++] = _Zo; //#3296
                if (($_.couponexpire != -1) && ($_.couponexpire < $_.couponstart)) { //#3296
                    $j -= 2; //#3295
                    $k[$j++] = 'bwipp.GS1couponExpireDateBeforeStartDate#3295'; //#3295
                    $k[$j++] = "Coupon expires before it starts"; //#3295
                    $k[$j++] = false; //#3295
                    return true; //#3295
                } //#3295
                var _Zt = $k[--$j]; //#3297
                $k[$j++] = $geti(_Zt, 6, _Zt.length - 6); //#3297
            } //#3297
        } //#3297
        var _Zv = $k[--$j]; //#3302
        $k[$j++] = _Zv; //#3315
        if (_Zv.length >= 1) { //#3315
            var _Zw = $k[--$j]; //#3302
            $k[$j++] = _Zw; //#3315
            if ($cvi($geti(_Zw, 0, 1)) == 5) { //#3315
                var _Zy = $k[--$j]; //#3303
                var _Zz = $geti(_Zy, 1, _Zy.length - 1); //#3303
                $k[$j++] = _Zz; //#3308
                if (_Zz.length < 1) { //#3308
                    $j -= 2; //#3307
                    $k[$j++] = 'bwipp.GS1couponTooShortSerialNumberVLI#3307'; //#3307
                    $k[$j++] = "Coupon too short: Missing Serial Number VLI"; //#3307
                    $k[$j++] = false; //#3307
                    return true; //#3307
                } //#3307
                var _a0 = $k[--$j]; //#3309
                var _a1 = $geti(_a0, 0, 1); //#3309
                $k[$j++] = _a0; //#3312
                $k[$j++] = ($cvi(_a1) + 6) + 1; //#3312
                if ((($cvi(_a1) + 6) + 1) > _a0.length) { //#3312
                    $j -= 3; //#3311
                    $k[$j++] = 'bwipp.GS1couponTooShortSerialNumber#3311'; //#3311
                    $k[$j++] = "Coupon too short: Serial Number truncated"; //#3311
                    $k[$j++] = false; //#3311
                    return true; //#3311
                } //#3311
                var _a2 = $k[--$j]; //#3313
                var _a3 = $k[--$j]; //#3313
                $k[$j++] = $geti(_a3, _a2, $f(_a3.length - _a2)); //#3313
            } //#3313
        } //#3313
        var _a5 = $k[--$j]; //#3318
        $k[$j++] = _a5; //#3334
        if (_a5.length >= 1) { //#3334
            var _a6 = $k[--$j]; //#3318
            $k[$j++] = _a6; //#3334
            if ($cvi($geti(_a6, 0, 1)) == 6) { //#3334
                var _a8 = $k[--$j]; //#3319
                var _a9 = $geti(_a8, 1, _a8.length - 1); //#3319
                $k[$j++] = _a9; //#3324
                if (_a9.length < 1) { //#3324
                    $j -= 2; //#3323
                    $k[$j++] = 'bwipp.GS1couponTooShortRetailerGCPGLNVLI#3323'; //#3323
                    $k[$j++] = "Coupon too short: Missing Retailer GCP/GLN VLI"; //#3323
                    $k[$j++] = false; //#3323
                    return true; //#3323
                } //#3323
                var _aA = $k[--$j]; //#3325
                var _aC = $cvi($geti(_aA, 0, 1)); //#3325
                $k[$j++] = _aA; //#3327
                $k[$j++] = _aC; //#3327
                if ((_aC < 1) || (_aC > 7)) { //#3327
                    $j -= 2; //#3326
                    $k[$j++] = 'bwipp.GS1couponBadRetailerGCPGLNVLI#3326'; //#3326
                    $k[$j++] = "Coupon Retailer GCP/GLN length indicator must be 1-7"; //#3326
                    $k[$j++] = false; //#3326
                    return true; //#3326
                } //#3326
                var _aD = $k[--$j]; //#3328
                var _aE = $k[--$j]; //#3329
                $k[$j++] = _aE; //#3331
                $k[$j++] = $f($f(_aD + 6) + 1); //#3331
                if (($f($f(_aD + 6) + 1)) > _aE.length) { //#3331
                    $j -= 3; //#3330
                    $k[$j++] = 'bwipp.GS1couponTooShortRetailerGCPGLN#3330'; //#3330
                    $k[$j++] = "Coupon too short: Retailer GCP/GLN truncated"; //#3330
                    $k[$j++] = false; //#3330
                    return true; //#3330
                } //#3330
                var _aF = $k[--$j]; //#3332
                var _aG = $k[--$j]; //#3332
                $k[$j++] = $geti(_aG, _aF, $f(_aG.length - _aF)); //#3332
            } //#3332
        } //#3332
        var _aI = $k[--$j]; //#3337
        $k[$j++] = _aI; //#3373
        if (_aI.length >= 1) { //#3373
            var _aJ = $k[--$j]; //#3337
            $k[$j++] = _aJ; //#3373
            if ($cvi($geti(_aJ, 0, 1)) == 9) { //#3373
                var _aL = $k[--$j]; //#3338
                var _aM = $geti(_aL, 1, _aL.length - 1); //#3338
                $k[$j++] = _aM; //#3343
                if (_aM.length < 1) { //#3343
                    $j -= 2; //#3342
                    $k[$j++] = 'bwipp.GS1couponTooShortSaveValueCode#3342'; //#3342
                    $k[$j++] = "Coupon too short: Missing Save Value Code"; //#3342
                    $k[$j++] = false; //#3342
                    return true; //#3342
                } //#3342
                var _aN = $k[--$j]; //#3344
                var _aP = $cvi($geti(_aN, 0, 1)); //#3344
                $k[$j++] = _aN; //#3346
                if ((_aP > 6) || ((_aP == 3) || (_aP == 4))) { //#3346
                    $j -= 2; //#3345
                    $k[$j++] = 'bwipp.GS1couponBadSaveValueCode#3345'; //#3345
                    $k[$j++] = "Coupon Save Value Code must be 0,1,2,5 or 6"; //#3345
                    $k[$j++] = false; //#3345
                    return true; //#3345
                } //#3345
                var _aQ = $k[--$j]; //#3347
                var _aR = $geti(_aQ, 1, _aQ.length - 1); //#3347
                $k[$j++] = _aR; //#3352
                if (_aR.length < 1) { //#3352
                    $j -= 2; //#3351
                    $k[$j++] = 'bwipp.GS1couponTooShortSaveValueAppliesToItem#3351'; //#3351
                    $k[$j++] = "Coupon too short: Missing Save Value Applies to Item"; //#3351
                    $k[$j++] = false; //#3351
                    return true; //#3351
                } //#3351
                var _aS = $k[--$j]; //#3353
                $k[$j++] = _aS; //#3355
                if ($cvi($geti(_aS, 0, 1)) > 2) { //#3355
                    $j -= 2; //#3354
                    $k[$j++] = 'bwipp.GS1couponBadSaveValueAppliesToItem#3354'; //#3354
                    $k[$j++] = "Coupon Save Value Applies to Item must be 0-2"; //#3354
                    $k[$j++] = false; //#3354
                    return true; //#3354
                } //#3354
                var _aU = $k[--$j]; //#3356
                var _aV = $geti(_aU, 1, _aU.length - 1); //#3356
                $k[$j++] = _aV; //#3361
                if (_aV.length < 1) { //#3361
                    $j -= 2; //#3360
                    $k[$j++] = 'bwipp.GS1couponTooShortStoreCouponFlag#3360'; //#3360
                    $k[$j++] = "Coupon too short: Missing Store Coupon Flag"; //#3360
                    $k[$j++] = false; //#3360
                    return true; //#3360
                } //#3360
                var _aW = $k[--$j]; //#3362
                var _aX = $geti(_aW, 1, _aW.length - 1); //#3362
                $k[$j++] = _aX; //#3367
                if (_aX.length < 1) { //#3367
                    $j -= 2; //#3366
                    $k[$j++] = 'bwipp.GS1couponTooShortDontMultiplyFlag#3366'; //#3366
                    $k[$j++] = "Coupon too short: Missing Don't Multiply Flag"; //#3366
                    $k[$j++] = false; //#3366
                    return true; //#3366
                } //#3366
                var _aY = $k[--$j]; //#3368
                $k[$j++] = _aY; //#3370
                if ($cvi($geti(_aY, 0, 1)) > 1) { //#3370
                    $j -= 2; //#3369
                    $k[$j++] = 'bwipp.GS1couponBadDontMultiplyFlag#3369'; //#3369
                    $k[$j++] = "Don't Multiply Flag must be 0 or 1"; //#3369
                    $k[$j++] = false; //#3369
                    return true; //#3369
                } //#3369
                var _aa = $k[--$j]; //#3371
                $k[$j++] = $geti(_aa, 1, _aa.length - 1); //#3371
            } //#3371
        } //#3371
        var _ac = $k[--$j]; //#3375
        $k[$j++] = _ac; //#3377
        if (_ac.length != 0) { //#3377
            $j -= 2; //#3376
            $k[$j++] = 'bwipp.GS1couponUnrecognisedOptionalField#3376'; //#3376
            $k[$j++] = "Coupon fields must be 1,2,3,4,5,6 or 9, increasing order"; //#3376
            $k[$j++] = false; //#3376
            return true; //#3376
        } //#3376
        $j--; //#3378
    }; //#3378
    $_.lintcouponposoffer = function() {
        var _ad = $k[--$j]; //#3382
        $k[$j++] = _ad; //#3384
        $k[$j++] = true; //#3384
        $forall(_ad, function() { //#3384
            var _ae = $k[--$j]; //#3383
            if ((_ae < 48) || (_ae > 57)) { //#3383
                $j--; //#3383
                $k[$j++] = false; //#3383
                return true; //#3383
            } //#3383
        }); //#3383
        if ($nt($k[--$j])) { //#3385
            $j -= 2; //#3385
            $k[$j++] = 'bwipp.GS1couponNotNumeric#3385'; //#3385
            $k[$j++] = "Coupon not numeric"; //#3385
            $k[$j++] = false; //#3385
            return true; //#3385
        } //#3385
        var _ag = $k[--$j]; //#3387
        $k[$j++] = _ag; //#3389
        if (_ag.length < 1) { //#3389
            $j -= 2; //#3388
            $k[$j++] = 'bwipp.GS1couponTooShortFormatCode#3388'; //#3388
            $k[$j++] = "Coupon too short: Missing Format Code"; //#3388
            $k[$j++] = false; //#3388
            return true; //#3388
        } //#3388
        var _ah = $k[--$j]; //#3390
        var _ai = $geti(_ah, 0, 1); //#3390
        $k[$j++] = _ah; //#3392
        if ($ne(_ai, "0") && $ne(_ai, "1")) { //#3392
            $j -= 2; //#3391
            $k[$j++] = 'bwipp.GS1couponBadFormatCode#3391'; //#3391
            $k[$j++] = "Coupon format must be 0 or 1"; //#3391
            $k[$j++] = false; //#3391
            return true; //#3391
        } //#3391
        var _aj = $k[--$j]; //#3393
        var _ak = $geti(_aj, 1, _aj.length - 1); //#3393
        $k[$j++] = _ak; //#3397
        if (_ak.length < 1) { //#3397
            $j -= 2; //#3396
            $k[$j++] = 'bwipp.GS1couponTooShortFunderVLI#3396'; //#3396
            $k[$j++] = "Coupon too short: Missing Funder VLI"; //#3396
            $k[$j++] = false; //#3396
            return true; //#3396
        } //#3396
        var _al = $k[--$j]; //#3398
        var _an = $cvi($geti(_al, 0, 1)); //#3398
        $k[$j++] = _al; //#3400
        $k[$j++] = _an; //#3400
        if (_an > 6) { //#3400
            $j -= 3; //#3399
            $k[$j++] = 'bwipp.GS1couponBadFunderVLI#3399'; //#3399
            $k[$j++] = "Coupon Funder length indicator must be 0-6"; //#3399
            $k[$j++] = false; //#3399
            return true; //#3399
        } //#3399
        var _ao = $k[--$j]; //#3401
        var _ap = $k[--$j]; //#3402
        $k[$j++] = _ap; //#3404
        $k[$j++] = $f($f(_ao + 6) + 1); //#3404
        if (($f($f(_ao + 6) + 1)) > _ap.length) { //#3404
            $j -= 3; //#3403
            $k[$j++] = 'bwipp.GS1couponTooShortFunder#3403'; //#3403
            $k[$j++] = "Coupon too short: Truncated Funder ID"; //#3403
            $k[$j++] = false; //#3403
            return true; //#3403
        } //#3403
        var _aq = $k[--$j]; //#3405
        var _ar = $k[--$j]; //#3405
        var _as = $geti(_ar, _aq, $f(_ar.length - _aq)); //#3405
        $k[$j++] = _as; //#3409
        if (_as.length < 6) { //#3409
            $j -= 2; //#3408
            $k[$j++] = 'bwipp.GS1couponTooShortOfferCode#3408'; //#3408
            $k[$j++] = "Coupon too short: Truncated Offer Code"; //#3408
            $k[$j++] = false; //#3408
            return true; //#3408
        } //#3408
        var _at = $k[--$j]; //#3410
        var _au = $geti(_at, 6, _at.length - 6); //#3410
        $k[$j++] = _au; //#3414
        if (_au.length < 1) { //#3414
            $j -= 2; //#3413
            $k[$j++] = 'bwipp.GS1couponTooShortSnVLI#3413'; //#3413
            $k[$j++] = "Coupon too short: Missing SN VLI"; //#3413
            $k[$j++] = false; //#3413
            return true; //#3413
        } //#3413
        var _av = $k[--$j]; //#3415
        var _aw = $geti(_av, 0, 1); //#3415
        $k[$j++] = _av; //#3419
        $k[$j++] = ($cvi(_aw) + 6) + 1; //#3419
        if ((($cvi(_aw) + 6) + 1) > _av.length) { //#3419
            $j -= 3; //#3418
            $k[$j++] = 'bwipp.GS1couponTooShortSn#3418'; //#3418
            $k[$j++] = "Coupon too short: Truncated SN"; //#3418
            $k[$j++] = false; //#3418
            return true; //#3418
        } //#3418
        var _ax = $k[--$j]; //#3420
        var _ay = $k[--$j]; //#3420
        var _az = $geti(_ay, _ax, $f(_ay.length - _ax)); //#3420
        $k[$j++] = _az; //#3423
        if (_az.length != 0) { //#3423
            $j -= 2; //#3422
            $k[$j++] = 'bwipp.GS1couponTooLong#3422'; //#3422
            $k[$j++] = "Coupon too long"; //#3422
            $k[$j++] = false; //#3422
            return true; //#3422
        } //#3422
        $j--; //#3424
    }; //#3424
    $_.lintlatitude = function() {
        var _b0 = $k[--$j]; //#3428
        $k[$j++] = _b0; //#3430
        if (_b0.length != 10) { //#3430
            $j--; //#3429
            $k[$j++] = 'bwipp.GS1badLatitudeLength#3429'; //#3429
            $k[$j++] = "Invalid length for a latitude"; //#3429
            $k[$j++] = false; //#3429
            return true; //#3429
        } //#3429
        if ($cvi($k[--$j]) > $cvi("1800000000")) { //#3433
            $j--; //#3433
            $k[$j++] = 'bwipp.GS1badLatitude#3433'; //#3433
            $k[$j++] = "Invalid value for latitude"; //#3433
            $k[$j++] = false; //#3433
            return true; //#3433
        } //#3433
    }; //#3433
    $_.lintlongitude = function() {
        var _b2 = $k[--$j]; //#3437
        $k[$j++] = _b2; //#3439
        if (_b2.length != 10) { //#3439
            $j--; //#3438
            $k[$j++] = 'bwipp.GS1badLongitudeLength#3438'; //#3438
            $k[$j++] = "Invalid length for a longitude"; //#3438
            $k[$j++] = false; //#3438
            return true; //#3438
        } //#3438
        if ($cvi($k[--$j]) > $cvi("3600000000")) { //#3443
            $j--; //#3443
            $k[$j++] = 'bwipp.GS1badLongitude#3443'; //#3443
            $k[$j++] = "Invalid value for longitude"; //#3443
            $k[$j++] = false; //#3443
            return true; //#3443
        } //#3443
    }; //#3443
    if (!bwipp_gs1process.__3452__) { //#3452
        $_ = Object.create($_); //#3452
        $k[$j++] = Infinity; //#3447
        var _b4 = $a(['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99']); //#3450
        for (var _b5 = 0, _b6 = _b4.length; _b5 < _b6; _b5++) { //#3451
            var _b7 = $get(_b4, _b5); //#3451
            $k[$j++] = _b7; //#3451
            $k[$j++] = _b7; //#3451
        } //#3451
        $_.aidcmediatype = $d(); //#3451
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_gs1process.$ctx[id] = $_[id]); //#3451
        bwipp_gs1process.__3452__ = 1; //#3451
        $_ = Object.getPrototypeOf($_); //#3451
    } //#3451
    $_.lintmediatype = function() {
        var _bC = $get($_.aidcmediatype, $k[--$j]) !== undefined; //#3455
        if (!_bC) { //#3455
            $j--; //#3455
            $k[$j++] = 'bwipp.GS1UnknownMediaType#3455'; //#3455
            $k[$j++] = "Unknown AIDC media type"; //#3455
            $k[$j++] = false; //#3455
            return true; //#3455
        } //#3455
    }; //#3455
    if (!$_.dontlint) { //#3596
        $k[$j++] = true; //#3499
        for (var _bG = 0, _bF = $_.vals.length - 1; _bG <= _bF; _bG += 1) { //#3499
            $_.ai = $get($_.ais, _bG); //#3463
            $_.val = $get($_.vals, _bG); //#3464
            var _bN = $get($_.gs1syntax, $_.ai) !== undefined; //#3465
            if (_bN) { //#3497
                var _bR = $get($get($_.gs1syntax, $_.ai), 'parts'); //#3466
                $k[$j++] = _bR; //#3468
                $k[$j++] = 0; //#3468
                $forall(_bR, function() { //#3468
                    var _bS = $k[--$j]; //#3468
                    $k[$j++] = _bS; //#3468
                    if ($get(_bS, 'opt')) { //#3468
                        $j--; //#3468
                        $k[$j++] = 0; //#3468
                    } else { //#3468
                        var _bV = $get($k[--$j], 'min'); //#3468
                        $k[$j++] = _bV; //#3468
                    } //#3468
                    var _bW = $k[--$j]; //#3468
                    var _bX = $k[--$j]; //#3468
                    $k[$j++] = $f(_bX + _bW); //#3468
                }); //#3468
                if ($k[--$j] > $_.val.length) { //#3470
                    $j--; //#3469
                    $k[$j++] = 'bwipp.GS1valueTooShort#3469'; //#3469
                    $k[$j++] = "Too short"; //#3469
                    $k[$j++] = false; //#3469
                    break; //#3469
                } //#3469
                var _ba = $k[--$j]; //#3471
                $k[$j++] = _ba; //#3471
                $k[$j++] = 0; //#3471
                $forall(_ba, function() { //#3471
                    var _bc = $get($k[--$j], 'max'); //#3471
                    var _bd = $k[--$j]; //#3471
                    $k[$j++] = $f(_bd + _bc); //#3471
                }); //#3471
                if ($k[--$j] < $_.val.length) { //#3473
                    $j--; //#3472
                    $k[$j++] = 'bwipp.GS1valueTooLong#3472'; //#3472
                    $k[$j++] = "Too long"; //#3472
                    $k[$j++] = false; //#3472
                    break; //#3472
                } //#3472
                $forall($k[--$j], function() { //#3491
                    $_.props = $k[--$j]; //#3475
                    var _bj = $get($_.props, 'max'); //#3476
                    var _bk = $_.val; //#3476
                    var _bl = _bk.length; //#3476
                    if (_bj > _bk.length) { //#3476
                        var _ = _bl; //#3476
                        _bl = _bj; //#3476
                        _bj = _; //#3476
                    } //#3476
                    $_.eval = $geti($_.val, 0, _bj); //#3477
                    var _bq = $_.eval.length; //#3478
                    $_.val = $geti($_.val, _bq, $_.val.length - _bq); //#3478
                    if ($_.eval.length == 0) { //#3489
                        if ($nt($get($_.props, 'opt'))) { //#3482
                            $j--; //#3481
                            $k[$j++] = 'bwipp.GS1valueTooShort#3481'; //#3481
                            $k[$j++] = "Too short"; //#3481
                            $k[$j++] = false; //#3481
                            return true; //#3481
                        } //#3481
                    } else { //#3489
                        if ($_.eval.length < $get($_.props, 'min')) { //#3486
                            $j--; //#3485
                            $k[$j++] = 'bwipp.GS1valueTooShort#3485'; //#3485
                            $k[$j++] = "Too short"; //#3485
                            $k[$j++] = false; //#3485
                            return true; //#3485
                        } //#3485
                        var _bz = new Map([
                            ["N", 'lintnumeric'],
                            ["X", 'lintcset82'],
                            ["Y", 'lintcset39'],
                            ["Z", 'lintcset64']
                        ]); //#3487
                        $k[$j++] = $_.eval; //#3488
                        if ($_[$get(_bz, $get($_.props, 'cset'))]() === true) {
                            return true;
                        } //#3488
                        $forall($get($_.props, 'linters'), function() { //#3489
                            var _c9 = $_[$k[--$j]]; //#3489
                            $k[$j++] = $_.eval; //#3489
                            if (_c9() === true) {
                                return true;
                            } //#3489
                        }); //#3489
                    } //#3489
                }); //#3489
                var _cA = $k[--$j]; //#3492
                $k[$j++] = _cA; //#3492
                if ($nt(_cA)) { //#3492
                    break; //#3492
                } //#3492
                if ($_.val.length != 0) { //#3495
                    $j--; //#3494
                    $k[$j++] = 'bwipp.GS1valueTooLong#3494'; //#3494
                    $k[$j++] = "Too long"; //#3494
                    $k[$j++] = false; //#3494
                    break; //#3494
                } //#3494
            } else { //#3497
                $j--; //#3497
                $k[$j++] = 'bwipp.GS1unknownAI#3497'; //#3497
                $k[$j++] = "Unrecognised AI"; //#3497
                $k[$j++] = false; //#3497
                break; //#3497
            } //#3497
        } //#3497
        if ($nt($k[--$j])) { //#3507
            var _cD = $k[--$j]; //#3501
            var _cF = $s((_cD.length + $_.ai.length) + 5); //#3501
            $puti(_cF, 0, "AI "); //#3502
            $puti(_cF, 3, $_.ai); //#3503
            $puti(_cF, 3 + $_.ai.length, ": "); //#3504
            $puti(_cF, 5 + $_.ai.length, _cD); //#3505
            $k[$j++] = _cF; //#3506
            bwipp_raiseerror(); //#3506
        } //#3506
        $_.aiexists = function() {
            $_.this = $k[--$j]; //#3511
            $_.patt = $k[--$j]; //#3512
            for (var _cL = 0, _cM = 1; _cL < _cM; _cL++) { //#3533
                var _cP = $get($_.aivals, $_.patt) !== undefined; //#3514
                if (_cP) { //#3514
                    $k[$j++] = true; //#3514
                    break; //#3514
                } //#3514
                if ($_.patt.length == 4) { //#3531
                    if ($eq($geti($_.patt, 3, 1), "n")) { //#3529
                        var _cV = $eq($geti($_.patt, 2, 1), "n") ? 2 : 3; //#3517
                        $_.pfxlen = _cV; //#3517
                        var _cW = $_.ais; //#3519
                        $k[$j++] = false; //#3527
                        for (var _cX = 0, _cY = _cW.length; _cX < _cY; _cX++) { //#3527
                            var _cZ = $get(_cW, _cX); //#3527
                            $k[$j++] = _cZ; //#3526
                            if ($ne(_cZ, $_.this) && (_cZ.length == 4)) { //#3525
                                if ($eq($geti($k[--$j], 0, $_.pfxlen), $geti($_.patt, 0, $_.pfxlen))) { //#3523
                                    $j--; //#3522
                                    $k[$j++] = true; //#3522
                                } //#3522
                            } else { //#3525
                                $j--; //#3525
                            } //#3525
                        } //#3525
                        break; //#3528
                    } //#3528
                    $k[$j++] = false; //#3530
                    break; //#3530
                } //#3530
                $k[$j++] = false; //#3532
                break; //#3532
            } //#3532
        }; //#3532
        var _ch = $_.vals; //#3537
        $_.aivals = new Map; //#3537
        for (var _ck = 0, _cj = $_.vals.length - 1; _ck <= _cj; _ck += 1) { //#3552
            $_.ai = $get($_.ais, _ck); //#3539
            $_.val = $get($_.vals, _ck); //#3540
            var _cr = $get($_.aivals, $_.ai) !== undefined; //#3541
            if (_cr) { //#3550
                if ($ne($get($_.aivals, $_.ai), $_.val)) { //#3548
                    var _cx = $s($_.ai.length + 40); //#3543
                    $puti(_cx, 0, "Repeated AIs \("); //#3544
                    $puti(_cx, 14, $_.ai); //#3545
                    $puti(_cx, 14 + $_.ai.length, "\) must have the same value"); //#3546
                    $k[$j++] = 'bwipp.GS1repeatedDifferingAIs#3547'; //#3547
                    $k[$j++] = _cx; //#3547
                    bwipp_raiseerror(); //#3547
                } //#3547
            } else { //#3550
                $put($_.aivals, $_.ai, $_.val); //#3550
            } //#3550
        } //#3550
        for (var _d5 = 0, _d4 = $_.vals.length - 1; _d5 <= _d4; _d5 += 1) { //#3594
            $_.ai = $get($_.ais, _d5); //#3556
            var _dA = $get($_.gs1syntax, $_.ai); //#3557
            var _dB = $get(_dA, 'ex') !== undefined; //#3557
            $k[$j++] = _dA; //#3572
            $k[$j++] = 'ex'; //#3572
            if (_dB) { //#3571
                var _dC = $k[--$j]; //#3558
                $forall($get($k[--$j], _dC), function() { //#3569
                    $_.patt = $k[--$j]; //#3559
                    $k[$j++] = $_.patt; //#3560
                    $k[$j++] = $_.ai; //#3560
                    $_.aiexists(); //#3560
                    if ($k[--$j]) { //#3568
                        var _dL = $s(($_.ai.length + $_.patt.length) + 36); //#3561
                        $puti(_dL, 0, "AIs \("); //#3562
                        $puti(_dL, 5, $_.ai); //#3563
                        $puti(_dL, 5 + $_.ai.length, "\) and \("); //#3564
                        $puti(_dL, 12 + $_.ai.length, $_.patt); //#3565
                        $puti(_dL, (12 + $_.ai.length) + $_.patt.length, "\) are mutually exclusive"); //#3566
                        $k[$j++] = 'bwipp.GS1exclusiveAIs#3567'; //#3567
                        $k[$j++] = _dL; //#3567
                        bwipp_raiseerror(); //#3567
                    } //#3567
                }); //#3567
            } else { //#3571
                $j -= 2; //#3571
            } //#3571
            if ($_.lintreqs) { //#3593
                var _dV = $get($_.gs1syntax, $_.ai); //#3574
                var _dW = $get(_dV, 'req') !== undefined; //#3574
                $k[$j++] = _dV; //#3592
                $k[$j++] = 'req'; //#3592
                if (_dW) { //#3591
                    var _dX = $k[--$j]; //#3575
                    $forall($get($k[--$j], _dX), function() { //#3589
                        var _da = $k[--$j]; //#3576
                        $k[$j++] = false; //#3581
                        $forall(_da, function() { //#3581
                            var _db = $k[--$j]; //#3577
                            $k[$j++] = true; //#3579
                            $forall(_db, function() { //#3579
                                $k[$j++] = $_.ai; //#3578
                                $_.aiexists(); //#3578
                                if ($nt($k[--$j])) { //#3578
                                    $j--; //#3578
                                    $k[$j++] = false; //#3578
                                } //#3578
                            }); //#3578
                            if ($k[--$j]) { //#3580
                                $j--; //#3580
                                $k[$j++] = true; //#3580
                                return true; //#3580
                            } //#3580
                        }); //#3580
                        if ($nt($k[--$j])) { //#3588
                            var _dh = $s($_.ai.length + 47); //#3583
                            $puti(_dh, 0, "One of more requisite AIs for AI \("); //#3584
                            $puti(_dh, 34, $_.ai); //#3585
                            $puti(_dh, 34 + $_.ai.length, "\) are missing"); //#3586
                            $k[$j++] = 'bwipp.GS1missingAIs#3587'; //#3587
                            $k[$j++] = _dh; //#3587
                            bwipp_raiseerror(); //#3587
                        } //#3587
                    }); //#3587
                } else { //#3591
                    $j -= 2; //#3591
                } //#3591
            } //#3591
        } //#3591
    } //#3591
    $k[$j++] = $_.ais; //#3600
    $k[$j++] = $_.vals; //#3600
    $k[$j++] = $_.fncs; //#3600
    $_ = Object.getPrototypeOf($_); //#3600
    $_ = Object.getPrototypeOf($_); //#3602
} //bwipp_gs1process
function bwipp_renmatrix() {
    if ($_.bwipjs_dontdraw) { //#3896
        return; //#3896
    } //#3896
    $_ = Object.create($_); //#3898
    $_.width = 1; //#3901
    $_.height = 1; //#3902
    $_.bordercolor = "unset"; //#3903
    $_.barcolor = "unset"; //#3904
    $_.backgroundcolor = "unset"; //#3905
    $_.colormap = "unset"; //#3906
    $_.dotty = false; //#3907
    $_.inkspread = null; //#3908
    $_.inkspreadh = null; //#3909
    $_.inkspreadv = null; //#3910
    $_.includetext = false; //#3911
    $_.txt = $a([]); //#3912
    $_.textcolor = "unset"; //#3913
    $_.textxalign = "unset"; //#3914
    $_.textyalign = "unset"; //#3915
    $_.textfont = "OCR-B"; //#3916
    $_.textsize = 10; //#3917
    $_.textxoffset = 0; //#3918
    $_.textyoffset = 0; //#3919
    $_.textgaps = 0; //#3920
    $_.alttext = ""; //#3921
    $_.showborder = false; //#3922
    $_.borderleft = 0; //#3923
    $_.borderright = 0; //#3924
    $_.bordertop = 0; //#3925
    $_.borderbottom = 0; //#3926
    $_.borderwidth = 0.25; //#3927
    $forall($k[--$j], function() { //#3929
        var _3 = $k[--$j]; //#3929
        $_[$k[--$j]] = _3; //#3929
    }); //#3929
    $k[$j++] = $_.opt; //#3930
    delete $_['opt']; //#3930
    $k[$j++] = $_; //#3930
    bwipp_processoptions(); //#3930
    $j--; //#3930
    if ($eq($_.inkspread, null)) { //#3932
        $_.inkspread = 0; //#3932
    } //#3932
    if ($eq($_.inkspreadh, null)) { //#3933
        $_.inkspreadh = $_.inkspread; //#3933
    } //#3933
    if ($eq($_.inkspreadv, null)) { //#3934
        $_.inkspreadv = $_.inkspread; //#3934
    } //#3934
    if ($_.textsize <= 0) { //#3938
        $k[$j++] = 'bwipp.renmatrixBadTextsize#3937'; //#3937
        $k[$j++] = "The font size must be greater than zero"; //#3937
        bwipp_raiseerror(); //#3937
    } //#3937
    $_.xyget = function() {
        var _D = $k[--$j]; //#3940
        var _G = $get($_.pixs, $f($k[--$j] + (_D * $_.pixx))); //#3940
        $k[$j++] = _G; //#3940
    }; //#3940
    $_.cget = function() {
        var _I = $k[--$j]; //#3941
        var _L = $get($_.cache, $f($k[--$j] + (_I * $_.pixx))); //#3941
        var _M = $k[--$j]; //#3941
        $k[$j++] = $an(_M, _L); //#3941
    }; //#3941
    $_.cput = function() {
        var _N = $k[--$j]; //#3943
        $k[$j++] = _N; //#3947
        if ((_N % 4) == 0) { //#3946
            $r(3, 1); //#3944
            var _O = $_.pixx; //#3944
            var _P = $k[--$j]; //#3944
            var _Q = $k[--$j]; //#3944
            var _R = $_.cache; //#3944
            $k[$j++] = _R; //#3944
            $k[$j++] = $f(_Q + (_P * _O)); //#3944
            $k[$j++] = $get(_R, $f(_Q + (_P * _O))); //#3944
            $r(4, -1); //#3944
            var _T = $k[--$j]; //#3944
            var _U = $k[--$j]; //#3944
            var _V = $k[--$j]; //#3944
            $put($k[--$j], _V, $or(_U, _T)); //#3944
        } else { //#3946
            $j -= 3; //#3946
        } //#3946
    }; //#3946
    $_.abcd = function() {
        $k[$j++] = $s(4); //#3955
        $k[$j++] = 0; //#3955
        $k[$j++] = Infinity; //#3951
        $r(5, -2); //#3952
        var _Z = $k[--$j]; //#3953
        var _b = $f($k[--$j] + (_Z * $_.pixx)); //#3953
        $k[$j++] = _b; //#3954
        $aload($geti($_.pixs, _b, 2)); //#3954
        $r(3, -1); //#3954
        $aload($geti($_.pixs, $f($k[--$j] + $_.pixx), 2)); //#3955
        var _i = $a(); //#3955
        for (var _j = 0, _k = _i.length; _j < _k; _j++) { //#3956
            var _m = $k[--$j]; //#3956
            var _n = $k[--$j]; //#3956
            $put(_n, _m, $f($get(_i, _j) + 48)); //#3956
            $k[$j++] = _n; //#3956
            $k[$j++] = $f(_m + 1); //#3956
        } //#3956
        $j--; //#3956
    }; //#3956
    $_.right = function() {
        if ($_.dir != 1) { //#3959
            $k[$j++] = $_.x; //#3959
            $k[$j++] = $_.y; //#3959
            $k[$j++] = $_.dir; //#3959
            $_.cput(); //#3959
            $k[$j++] = $a([$_.x, $_.y]); //#3959
        } //#3959
        $_.x = $_.x + 1; //#3959
        $_.dir = 1; //#3959
    }; //#3959
    $_.down = function() {
        if ($_.dir != 2) { //#3960
            $k[$j++] = $_.x; //#3960
            $k[$j++] = $_.y; //#3960
            $k[$j++] = $_.dir; //#3960
            $_.cput(); //#3960
            $k[$j++] = $a([$_.x, $_.y]); //#3960
        } //#3960
        $_.y = $_.y + 1; //#3960
        $_.dir = 2; //#3960
    }; //#3960
    $_.left = function() {
        if ($_.dir != 4) { //#3961
            $k[$j++] = $_.x; //#3961
            $k[$j++] = $_.y; //#3961
            $k[$j++] = $_.dir; //#3961
            $_.cput(); //#3961
            $k[$j++] = $a([$_.x, $_.y]); //#3961
        } //#3961
        $_.x = $_.x - 1; //#3961
        $_.dir = 4; //#3961
    }; //#3961
    $_.up = function() {
        if ($_.dir != 8) { //#3962
            $k[$j++] = $_.x; //#3962
            $k[$j++] = $_.y; //#3962
            $k[$j++] = $_.dir; //#3962
            $_.cput(); //#3962
            $k[$j++] = $a([$_.x, $_.y]); //#3962
        } //#3962
        $_.y = $_.y - 1; //#3962
        $_.dir = 8; //#3962
    }; //#3962
    $_.trace = function() {
        $_.y = $k[--$j]; //#3966
        $_.x = $k[--$j]; //#3966
        $k[$j++] = 'dir'; //#3968
        $k[$j++] = $f($_.x + 1); //#3968
        $k[$j++] = $f($_.y + 1); //#3968
        $_.xyget(); //#3968
        var _1P = ($k[--$j] == 1) ? 8 : 4; //#3968
        $_[$k[--$j]] = _1P; //#3968
        $_.sx = $_.x; //#3969
        $_.sy = $_.y; //#3969
        $_.sdir = $_.dir; //#3969
        $k[$j++] = Infinity; //#3973
        for (;;) { //#3987
            $k[$j++] = $_.x; //#3974
            $k[$j++] = $_.y; //#3974
            $_.abcd(); //#3974
            for (var _1W = 0, _1X = 1; _1W < _1X; _1W++) { //#3985
                var _1Y = $k[--$j]; //#3976
                $k[$j++] = _1Y; //#3976
                if ($eq(_1Y, "0001") || ($eq(_1Y, "0011") || $eq(_1Y, "1011"))) { //#3976
                    $j--; //#3976
                    $_.right(); //#3976
                    break; //#3976
                } //#3976
                var _1Z = $k[--$j]; //#3977
                $k[$j++] = _1Z; //#3977
                if ($eq(_1Z, "0010") || ($eq(_1Z, "1010") || $eq(_1Z, "1110"))) { //#3977
                    $j--; //#3977
                    $_.down(); //#3977
                    break; //#3977
                } //#3977
                var _1a = $k[--$j]; //#3978
                $k[$j++] = _1a; //#3978
                if ($eq(_1a, "1000") || ($eq(_1a, "1100") || $eq(_1a, "1101"))) { //#3978
                    $j--; //#3978
                    $_.left(); //#3978
                    break; //#3978
                } //#3978
                var _1b = $k[--$j]; //#3979
                $k[$j++] = _1b; //#3979
                if ($eq(_1b, "0100") || ($eq(_1b, "0101") || $eq(_1b, "0111"))) { //#3979
                    $j--; //#3979
                    $_.up(); //#3979
                    break; //#3979
                } //#3979
                var _1c = $k[--$j]; //#3980
                $k[$j++] = _1c; //#3984
                if ($eq(_1c, "1001")) { //#3983
                    if ($_.dir == 2) { //#3981
                        $j--; //#3981
                        $_.left(); //#3981
                        break; //#3981
                    } else { //#3981
                        $j--; //#3981
                        $_.right(); //#3981
                        break; //#3981
                    } //#3981
                } else { //#3983
                    if ($_.dir == 1) { //#3983
                        $j--; //#3983
                        $_.down(); //#3983
                        break; //#3983
                    } else { //#3983
                        $j--; //#3983
                        $_.up(); //#3983
                        break; //#3983
                    } //#3983
                } //#3983
            } //#3983
            if (($eq($_.x, $_.sx) && $eq($_.y, $_.sy)) && ($_.dir == $_.sdir)) { //#3986
                break; //#3986
            } //#3986
        } //#3986
        $astore($a($counttomark())); //#3988
        var _1n = $k[--$j]; //#3988
        var _1o = $k[--$j]; //#3988
        $k[$j++] = _1n; //#3988
        $k[$j++] = _1o; //#3988
        $j--; //#3988
    }; //#3988
    $_.drawlayer = function() {
        $_.pixsorig = $_.pixs; //#4033
        $_.pixs = $k[--$j]; //#4034
        $k[$j++] = Infinity; //#4037
        for (var _1s = 0, _1t = $_.pixx + 2; _1s < _1t; _1s++) { //#4038
            $k[$j++] = 0; //#4038
        } //#4038
        for (var _1x = 0, _1y = $_.pixx, _1w = $_.pixs.length - 1; _1y < 0 ? _1x >= _1w : _1x <= _1w; _1x += _1y) { //#4043
            $k[$j++] = 0; //#4041
            $aload($geti($_.pixs, _1x, $_.pixx)); //#4041
            $k[$j++] = 0; //#4042
        } //#4042
        for (var _23 = 0, _24 = $_.pixx + 2; _23 < _24; _23++) { //#4044
            $k[$j++] = 0; //#4044
        } //#4044
        $_.pixs = $a(); //#4044
        $_.pixx = $_.pixx + 2; //#4046
        $_.pixy = $_.pixy + 2; //#4047
        $k[$j++] = Infinity; //#4050
        for (var _29 = 0, _2A = $_.pixs.length; _29 < _2A; _29++) { //#4050
            $k[$j++] = 0; //#4050
        } //#4050
        $_.cache = $a(); //#4050
        $k[$j++] = Infinity; //#4053
        for (var _2E = 0, _2D = $_.pixy - 2; _2E <= _2D; _2E += 1) { //#4070
            $_.j = _2E; //#4055
            for (var _2H = 0, _2G = $_.pixx - 2; _2H <= _2G; _2H += 1) { //#4069
                $_.i = _2H; //#4057
                $k[$j++] = 'k'; //#4058
                $k[$j++] = $_.i; //#4058
                $k[$j++] = $_.j; //#4058
                $_.abcd(); //#4058
                var _2K = $k[--$j]; //#4058
                $_[$k[--$j]] = _2K; //#4058
                if ($eq($_.k, "0001") || $eq($_.k, "1001")) { //#4063
                    $k[$j++] = 8; //#4060
                    $k[$j++] = $_.i; //#4060
                    $k[$j++] = $_.j; //#4060
                    $_.cget(); //#4060
                    if ($k[--$j] == 0) { //#4062
                        $k[$j++] = $_.i; //#4061
                        $k[$j++] = $_.j; //#4061
                        $_.trace(); //#4061
                    } //#4061
                } //#4061
                if ($eq($_.k, "1110")) { //#4068
                    $k[$j++] = 4; //#4065
                    $k[$j++] = $_.i; //#4065
                    $k[$j++] = $_.j; //#4065
                    $_.cget(); //#4065
                    if ($k[--$j] == 0) { //#4067
                        $k[$j++] = $_.i; //#4066
                        $k[$j++] = $_.j; //#4066
                        $_.trace(); //#4066
                    } //#4066
                } //#4066
            } //#4066
        } //#4066
        $_.paths = $a(); //#4066
        $_.pixx = $_.pixx - 2; //#4074
        $_.pixy = $_.pixy - 2; //#4075
        $$.newpath(); //#4078
        var _2c = $_.paths; //#4079
        for (var _2d = 0, _2e = _2c.length; _2d < _2e; _2d++) { //#4097
            $_.p = $get(_2c, _2d); //#4080
            $_.len = $_.p.length; //#4081
            $aload($get($_.p, $_.len - 1)); //#4082
            $aload($get($_.p, 0)); //#4083
            for (var _2o = 0, _2n = $_.len - 1; _2o <= _2n; _2o += 1) { //#4094
                $_.i = _2o; //#4085
                $aload($get($_.p, ($_.i + 1) % $_.len)); //#4086
                $r(6, -2); //#4086
                var _2t = $k[--$j]; //#4087
                var _2u = $k[--$j]; //#4087
                var _2v = $k[--$j]; //#4087
                var _2w = $k[--$j]; //#4087
                var _2x = $k[--$j]; //#4087
                var _2y = $k[--$j]; //#4087
                $k[$j++] = _2y; //#4088
                $k[$j++] = _2x; //#4088
                $k[$j++] = _2w; //#4088
                $k[$j++] = _2v; //#4088
                $k[$j++] = _2u; //#4088
                $k[$j++] = _2y; //#4088
                $k[$j++] = $_.inkspreadh; //#4088
                if ($lt(_2v, _2t)) { //#4088
                    var _30 = $k[--$j]; //#4088
                    var _31 = $k[--$j]; //#4088
                    $k[$j++] = $f(_31 + _30); //#4088
                } else { //#4088
                    var _32 = $k[--$j]; //#4088
                    var _33 = $k[--$j]; //#4088
                    $k[$j++] = $f(_33 - _32); //#4088
                } //#4088
                $r(4, 1); //#4089
                var _34 = $k[--$j]; //#4090
                var _35 = $k[--$j]; //#4090
                var _36 = $k[--$j]; //#4090
                var _37 = $k[--$j]; //#4090
                var _38 = $k[--$j]; //#4090
                $k[$j++] = _38; //#4091
                $k[$j++] = _37; //#4091
                $k[$j++] = _36; //#4091
                $k[$j++] = _35; //#4091
                $k[$j++] = _38; //#4091
                $k[$j++] = $_.inkspreadv; //#4091
                if ($gt(_36, _34)) { //#4091
                    var _3A = $k[--$j]; //#4091
                    var _3B = $k[--$j]; //#4091
                    $k[$j++] = $f(_3B + _3A); //#4091
                } else { //#4091
                    var _3C = $k[--$j]; //#4091
                    var _3D = $k[--$j]; //#4091
                    $k[$j++] = $f(_3D - _3C); //#4091
                } //#4091
                $r(4, -1); //#4092
                var _3E = $k[--$j]; //#4092
                var _3F = $k[--$j]; //#4092
                $k[$j++] = _3E; //#4093
                $k[$j++] = $f($_.pixy - _3F); //#4093
                if ($_.i == 0) { //#4093
                    var _3I = $k[--$j]; //#4093
                    $$.moveto($k[--$j], _3I); //#4093
                } else { //#4093
                    var _3K = $k[--$j]; //#4093
                    $$.lineto($k[--$j], _3K); //#4093
                } //#4093
            } //#4093
            $$.closepath(); //#4095
            $j -= 4; //#4096
        } //#4096
        $$.fill(); //#4098
        $_.pixs = $_.pixsorig; //#4100
    }; //#4100
    $_.drawlayerdots = function() {
        $_.pixsorig = $_.pixs; //#4106
        $_.pixs = $k[--$j]; //#4107
        $$.newpath(); //#4109
        for (var _3R = 0, _3Q = $_.pixs.length - 1; _3R <= _3Q; _3R += 1) { //#4117
            $_.x = _3R % $_.pixx; //#4111
            $_.y = ~~(_3R / $_.pixx); //#4112
            $k[$j++] = $_.x; //#4113
            $k[$j++] = $_.y; //#4113
            $_.xyget(); //#4113
            if ($k[--$j] == 1) { //#4116
                $$.moveto($f($_.x + 0.5), $f(($_.pixy - $_.y) - 0.5)); //#4114
                $$.arc($f($_.x + 0.5), $f(($_.pixy - $_.y) - 0.5), $f(0.5 - $_.inkspread), 0, 360, 1); //#4115
            } //#4115
        } //#4115
        $$.fill(); //#4118
        $_.pixs = $_.pixsorig; //#4120
    }; //#4120
    $$.save(); //#4124
    var _3f = $$.currpos(); //#4126
    $$.translate(_3f.x, _3f.y); //#4126
    $_.inkspread = $_.inkspread / 2; //#4128
    $_.inkspreadh = $_.inkspreadh / 2; //#4129
    $_.inkspreadv = $_.inkspreadv / 2; //#4130
    $$.scale(($_.width / $_.pixx) * 72, ($_.height / $_.pixy) * 72); //#4133
    $_.tl = $a([-($f($_.borderleft + ($_.borderwidth / 2))), $f(($_.pixy + $_.bordertop) + ($_.borderwidth / 2))]); //#4136
    $_.tr = $a([$f(($_.pixx + $_.borderright) + ($_.borderwidth / 2)), $f(($_.pixy + $_.bordertop) + ($_.borderwidth / 2))]); //#4137
    $_.bl = $a([-($f($_.borderleft + ($_.borderwidth / 2))), -($f($_.borderbottom + ($_.borderwidth / 2)))]); //#4138
    $_.br = $a([$f(($_.pixx + $_.borderright) + ($_.borderwidth / 2)), -($f($_.borderbottom + ($_.borderwidth / 2)))]); //#4139
    if ($ne($_.backgroundcolor, "unset")) { //#4145
        $$.save(); //#4141
        $$.newpath(); //#4142
        $aload($_.bl); //#4142
        var _4D = $k[--$j]; //#4142
        $$.moveto($k[--$j], _4D); //#4142
        var _4I = $a([$_.br, $_.tr, $_.tl]); //#4142
        for (var _4J = 0, _4K = _4I.length; _4J < _4K; _4J++) { //#4142
            $aload($get(_4I, _4J)); //#4142
            var _4M = $k[--$j]; //#4142
            $$.lineto($k[--$j], _4M); //#4142
        } //#4142
        $$.closepath(); //#4142
        $$.setcolor($_.backgroundcolor); //#4143
        $$.fill(); //#4143
        $$.restore(); //#4144
    } //#4144
    if ($_.showborder) { //#4152
        $$.save(); //#4147
        $$.newpath(); //#4148
        $aload($_.bl); //#4148
        var _4R = $k[--$j]; //#4148
        $$.moveto($k[--$j], _4R); //#4148
        var _4W = $a([$_.br, $_.tr, $_.tl]); //#4148
        for (var _4X = 0, _4Y = _4W.length; _4X < _4Y; _4X++) { //#4148
            $aload($get(_4W, _4X)); //#4148
            var _4a = $k[--$j]; //#4148
            $$.lineto($k[--$j], _4a); //#4148
        } //#4148
        $$.closepath(); //#4148
        if ($ne($_.bordercolor, "unset")) { //#4149
            $$.setcolor($_.bordercolor); //#4149
        } //#4149
        $$.setlinewidth($f($_.borderwidth - ($_.inkspread * 2))); //#4150
        $$.stroke(); //#4150
        $$.restore(); //#4151
    } //#4151
    if ($eq($_.colormap, "unset")) { //#4157
        var _4i = new Map([
            [1, $_.barcolor]
        ]); //#4156
        $_.colormap = _4i; //#4156
    } //#4156
    var _4j = $_.colormap; //#4159
    for (var _4o = _4j.size, _4n = _4j.keys(), _4m = 0; _4m < _4o; _4m++) { //#4165
        var _4k = _4n.next().value; //#4165
        var _4l = _4j.get(_4k); //#4165
        $k[$j++] = _4k; //#4160
        $k[$j++] = _4l; //#4160
        if ($ne(_4l, "unset")) { //#4160
            $$.setcolor($k[--$j]); //#4160
        } else { //#4160
            $j--; //#4160
        } //#4160
        $_.key = $k[--$j]; //#4161
        $k[$j++] = Infinity; //#4162
        var _4r = $_.pixs; //#4163
        for (var _4s = 0, _4t = _4r.length; _4s < _4t; _4s++) { //#4163
            var _4w = $eq($get(_4r, _4s), $_.key) ? 1 : 0; //#4163
            $k[$j++] = _4w; //#4163
        } //#4163
        var _4x = $a(); //#4163
        $k[$j++] = _4x; //#4164
        if ($_.dotty) { //#4164
            $_.drawlayerdots(); //#4164
        } else { //#4164
            $_.drawlayer(); //#4164
        } //#4164
    } //#4164
    if ($ne($_.textcolor, "unset")) { //#4168
        $$.setcolor($_.textcolor); //#4168
    } //#4168
    if ($_.includetext) { //#4229
        if (($eq($_.textxalign, "unset") && $eq($_.textyalign, "unset")) && $eq($_.alttext, "")) { //#4227
            $_.s = 0; //#4171
            $_.fn = ""; //#4171
            var _55 = $_.txt; //#4172
            for (var _56 = 0, _57 = _55.length; _56 < _57; _56++) { //#4185
                $forall($get(_55, _56)); //#4173
                var _59 = $k[--$j]; //#4174
                var _5A = $k[--$j]; //#4174
                $k[$j++] = _5A; //#4183
                $k[$j++] = _59; //#4183
                if ((_59 != $_.s) || $ne(_5A, $_.fn)) { //#4182
                    var _5D = $k[--$j]; //#4175
                    $k[$j++] = _5D; //#4178
                    if (_5D <= 0) { //#4178
                        $j -= 5; //#4176
                        $k[$j++] = 'bwipp.renmatrixFontTooSmall#4177'; //#4177
                        $k[$j++] = "The font size is too small"; //#4177
                        bwipp_raiseerror(); //#4177
                    } //#4177
                    var _5E = $k[--$j]; //#4179
                    var _5F = $k[--$j]; //#4179
                    $_.s = _5E; //#4179
                    $_.fn = _5F; //#4179
                    $$.selectfont(_5F, _5E); //#4180
                } else { //#4182
                    $j -= 2; //#4182
                } //#4182
                var _5G = $k[--$j]; //#4184
                $$.moveto($k[--$j], _5G); //#4184
                $$.show($k[--$j], 0, 0); //#4184
            } //#4184
        } else { //#4227
            $$.selectfont($_.textfont, $_.textsize); //#4187
            if ($eq($_.alttext, "")) { //#4193
                $k[$j++] = Infinity; //#4189
                var _5M = $_.txt; //#4189
                for (var _5N = 0, _5O = _5M.length; _5N < _5O; _5N++) { //#4189
                    $forall($get($get(_5M, _5N), 0)); //#4189
                } //#4189
                $_.txt = $a(); //#4189
                $_.tstr = $s($_.txt.length); //#4190
                for (var _5W = 0, _5V = $_.txt.length - 1; _5W <= _5V; _5W += 1) { //#4191
                    $put($_.tstr, _5W, $get($_.txt, _5W)); //#4191
                } //#4191
            } else { //#4193
                $_.tstr = $_.alttext; //#4193
            } //#4193
            if ($_.tstr.length == 0) { //#4203
                $k[$j++] = 0; //#4198
            } else { //#4203
                $$.save(); //#4200
                $$.newpath(); //#4201
                $$.moveto(0, 0); //#4201
                $$.charpath("0", false); //#4201
                var _5c = $$.pathbbox(); //#4201
                $$.restore(); //#4203
                $k[$j++] = _5c.ury; //#4203
            } //#4203
            $_.textascent = $k[--$j]; //#4212
            var _5f = $$.stringwidth($_.tstr); //#4213
            $_.textwidth = $f(_5f.w + (($_.tstr.length - 1) * $_.textgaps)); //#4213
            $_.textxpos = $f($_.textxoffset + ($f($_.pixx - $_.textwidth) / 2)); //#4215
            if ($eq($_.textxalign, "left")) { //#4216
                $_.textxpos = $_.textxoffset; //#4216
            } //#4216
            if ($eq($_.textxalign, "right")) { //#4217
                $_.textxpos = $f(($_.pixx - $_.textxoffset) - $_.textwidth); //#4217
            } //#4217
            if ($eq($_.textxalign, "offleft")) { //#4218
                $_.textxpos = -$f($_.textwidth + $_.textxoffset); //#4218
            } //#4218
            if ($eq($_.textxalign, "offright")) { //#4219
                $_.textxpos = $_.pixx + $_.textxoffset; //#4219
            } //#4219
            if ($eq($_.textxalign, "justify") && ($_.textwidth < $_.pixx)) { //#4223
                $_.textxpos = 0; //#4221
                $_.textgaps = $f($_.pixx - $_.textwidth) / ($_.tstr.length - 1); //#4222
            } //#4222
            $_.textypos = -($f($f($_.textyoffset + $_.textascent) + 1)); //#4224
            if ($eq($_.textyalign, "above")) { //#4225
                $_.textypos = ($_.textyoffset + $_.pixy) + 1; //#4225
            } //#4225
            if ($eq($_.textyalign, "center")) { //#4226
                $_.textypos = $f($_.textyoffset + ($f($_.pixy - $_.textascent) / 2)); //#4226
            } //#4226
            $$.moveto($_.textxpos, $_.textypos); //#4227
            $$.show($_.tstr, $_.textgaps, 0); //#4227
        } //#4227
    } //#4227
    $$.restore(); //#4231
    $_ = Object.getPrototypeOf($_); //#4233
} //bwipp_renmatrix
function bwipp_ean5() {
    $_ = Object.create($_); //#4400
    $_.dontdraw = false; //#4403
    $_.includetext = false; //#4404
    $_.textfont = "OCR-B"; //#4405
    $_.textsize = 12; //#4406
    $_.textxoffset = 0; //#4407
    $_.textyoffset = null; //#4408
    $_.height = 0.7; //#4409
    $k[$j++] = $_; //#4411
    bwipp_processoptions(); //#4411
    $_.options = $k[--$j]; //#4411
    $_.barcode = $k[--$j]; //#4412
    if ($eq($_.textyoffset, null)) { //#4416
        $_.textyoffset = $f(($_.height * 72) + 1); //#4415
    } //#4415
    bwipp_loadctx(bwipp_ean5); //#4418
    if ($_.barcode.length != 5) { //#4423
        $k[$j++] = 'bwipp.ean5badLength#4422'; //#4422
        $k[$j++] = "EAN-5 add-on must be 5 digits"; //#4422
        bwipp_raiseerror(); //#4422
    } //#4422
    $forall($_.barcode, function() { //#4428
        var _6 = $k[--$j]; //#4425
        if ((_6 < 48) || (_6 > 57)) { //#4427
            $k[$j++] = 'bwipp.ean5badCharacter#4426'; //#4426
            $k[$j++] = "EAN-5 add-on must contain only digits"; //#4426
            bwipp_raiseerror(); //#4426
        } //#4426
    }); //#4426
    if (!bwipp_ean5.__4446__) { //#4446
        $_ = Object.create($_); //#4446
        $_.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "112", "11"]); //#4436
        $_.barchars = "0123456789"; //#4439
        $_.mirrormaps = $a(["11000", "10100", "10010", "10001", "01100", "00110", "00011", "01010", "01001", "00101"]); //#4445
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_ean5.$ctx[id] = $_[id]); //#4445
        bwipp_ean5.__4446__ = 1; //#4445
        $_ = Object.getPrototypeOf($_); //#4445
    } //#4445
    $_.checksum = 0; //#4448
    for (var _A = 0; _A <= 4; _A += 1) { //#4457
        $_.i = _A; //#4450
        $_.barchar = $f($get($_.barcode, $_.i) - 48); //#4451
        if (($_.i % 2) == 0) { //#4455
            $_.checksum = $f(($_.barchar * 3) + $_.checksum); //#4453
        } else { //#4455
            $_.checksum = $f(($_.barchar * 9) + $_.checksum); //#4455
        } //#4455
    } //#4455
    $_.checksum = $_.checksum % 10; //#4458
    $_.mirrormap = $get($_.mirrormaps, $_.checksum); //#4459
    $_.sbs = $s(31); //#4461
    $_.txt = $a(5); //#4462
    for (var _P = 0; _P <= 4; _P += 1) { //#4492
        $_.i = _P; //#4465
        if ($_.i == 0) { //#4471
            $puti($_.sbs, 0, $get($_.encs, 10)); //#4469
        } else { //#4471
            $puti($_.sbs, (($_.i - 1) * 6) + 7, $get($_.encs, 11)); //#4471
        } //#4471
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#4475
        $j--; //#4476
        $_.indx = $k[--$j].length; //#4477
        $j -= 2; //#4478
        $_.enc = $get($_.encs, $_.indx); //#4479
        if ($get($_.mirrormap, $_.i) == 49) { //#4489
            $_.enclen = $_.enc.length; //#4481
            $_.revenc = $s($_.enclen); //#4482
            for (var _o = 0, _n = $_.enclen - 1; _o <= _n; _o += 1) { //#4487
                $_.j = _o; //#4484
                $_.char = $get($_.enc, $_.j); //#4485
                $put($_.revenc, ($_.enclen - $_.j) - 1, $_.char); //#4486
            } //#4486
            $_.enc = $_.revenc; //#4488
        } //#4488
        $puti($_.sbs, ($_.i * 6) + 3, $_.enc); //#4490
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ((($_.i - 1) * 9) + 10) + $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])); //#4491
    } //#4491
    $k[$j++] = Infinity; //#4495
    $k[$j++] = Infinity; //#4497
    var _1B = $_.sbs; //#4497
    for (var _1C = 0, _1D = _1B.length; _1C < _1D; _1C++) { //#4497
        $k[$j++] = $get(_1B, _1C) - 48; //#4497
    } //#4497
    var _1F = $a(); //#4497
    $k[$j++] = Infinity; //#4498
    for (var _1G = 0, _1H = 16; _1G < _1H; _1G++) { //#4498
        $k[$j++] = $_.height; //#4498
    } //#4498
    var _1J = $a(); //#4498
    $k[$j++] = Infinity; //#4499
    for (var _1K = 0, _1L = 16; _1K < _1L; _1K++) { //#4499
        $k[$j++] = 0; //#4499
    } //#4499
    var _1M = $a(); //#4499
    $k[$j++] = 'ren'; //#4502
    $k[$j++] = 'renlinear'; //#4502
    $k[$j++] = 'sbs'; //#4502
    $k[$j++] = _1F; //#4502
    $k[$j++] = 'bhs'; //#4502
    $k[$j++] = _1J; //#4502
    $k[$j++] = 'bbs'; //#4502
    $k[$j++] = _1M; //#4502
    if ($_.includetext) { //#4502
        $k[$j++] = 'txt'; //#4501
        $k[$j++] = $_.txt; //#4501
    } //#4501
    $k[$j++] = 'opt'; //#4508
    $k[$j++] = $_.options; //#4508
    $k[$j++] = 'guardrightpos'; //#4508
    $k[$j++] = 5; //#4508
    $k[$j++] = 'guardrightypos'; //#4508
    $k[$j++] = $f($_.textyoffset + 4); //#4508
    $k[$j++] = 'borderleft'; //#4508
    $k[$j++] = 12; //#4508
    $k[$j++] = 'borderright'; //#4508
    $k[$j++] = 5; //#4508
    $k[$j++] = 'bordertop'; //#4508
    $k[$j++] = 10; //#4508
    var _1R = $d(); //#4508
    $k[$j++] = _1R; //#4511
    if (!$_.dontdraw) { //#4511
        bwipp_renlinear(); //#4511
    } //#4511
    $_ = Object.getPrototypeOf($_); //#4513
    $_ = Object.getPrototypeOf($_); //#4515
} //bwipp_ean5
function bwipp_ean2() {
    $_ = Object.create($_); //#4545
    $_.dontdraw = false; //#4548
    $_.includetext = false; //#4549
    $_.textfont = "OCR-B"; //#4550
    $_.textsize = 12; //#4551
    $_.textxoffset = 0; //#4552
    $_.textyoffset = null; //#4553
    $_.height = 0.7; //#4554
    $k[$j++] = $_; //#4556
    bwipp_processoptions(); //#4556
    $_.options = $k[--$j]; //#4556
    $_.barcode = $k[--$j]; //#4557
    if ($eq($_.textyoffset, null)) { //#4561
        $_.textyoffset = $f(($_.height * 72) + 1); //#4560
    } //#4560
    bwipp_loadctx(bwipp_ean2); //#4563
    if ($_.barcode.length != 2) { //#4568
        $k[$j++] = 'bwipp.ean2badLength#4567'; //#4567
        $k[$j++] = "EAN-2 add-on must be 2 digits"; //#4567
        bwipp_raiseerror(); //#4567
    } //#4567
    $forall($_.barcode, function() { //#4573
        var _6 = $k[--$j]; //#4570
        if ((_6 < 48) || (_6 > 57)) { //#4572
            $k[$j++] = 'bwipp.ean2badCharacter#4571'; //#4571
            $k[$j++] = "EAN-2 add-on must contain only digits"; //#4571
            bwipp_raiseerror(); //#4571
        } //#4571
    }); //#4571
    if (!bwipp_ean2.__4588__) { //#4588
        $_ = Object.create($_); //#4588
        $_.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "112", "11"]); //#4581
        $_.barchars = "0123456789"; //#4584
        $_.mirrormaps = $a(["00", "01", "10", "11"]); //#4587
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_ean2.$ctx[id] = $_[id]); //#4587
        bwipp_ean2.__4588__ = 1; //#4587
        $_ = Object.getPrototypeOf($_); //#4587
    } //#4587
    $_.mirrormap = $get($_.mirrormaps, $cvi($geti($_.barcode, 0, 2)) % 4); //#4590
    $_.sbs = $s(13); //#4592
    $_.txt = $a(2); //#4593
    for (var _G = 0; _G <= 1; _G += 1) { //#4623
        $_.i = _G; //#4596
        if ($_.i == 0) { //#4602
            $puti($_.sbs, 0, $get($_.encs, 10)); //#4600
        } else { //#4602
            $puti($_.sbs, (($_.i - 1) * 6) + 7, $get($_.encs, 11)); //#4602
        } //#4602
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#4606
        $j--; //#4607
        $_.indx = $k[--$j].length; //#4608
        $j -= 2; //#4609
        $_.enc = $get($_.encs, $_.indx); //#4610
        if ($get($_.mirrormap, $_.i) == 49) { //#4620
            $_.enclen = $_.enc.length; //#4612
            $_.revenc = $s($_.enclen); //#4613
            for (var _f = 0, _e = $_.enclen - 1; _f <= _e; _f += 1) { //#4618
                $_.j = _f; //#4615
                $_.char = $get($_.enc, $_.j); //#4616
                $put($_.revenc, ($_.enclen - $_.j) - 1, $_.char); //#4617
            } //#4617
            $_.enc = $_.revenc; //#4619
        } //#4619
        $puti($_.sbs, ($_.i * 6) + 3, $_.enc); //#4621
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ((($_.i - 1) * 9) + 10) + $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])); //#4622
    } //#4622
    $k[$j++] = Infinity; //#4626
    $k[$j++] = Infinity; //#4628
    var _12 = $_.sbs; //#4628
    for (var _13 = 0, _14 = _12.length; _13 < _14; _13++) { //#4628
        $k[$j++] = $get(_12, _13) - 48; //#4628
    } //#4628
    var _16 = $a(); //#4628
    $k[$j++] = Infinity; //#4629
    for (var _17 = 0, _18 = 12; _17 < _18; _17++) { //#4629
        $k[$j++] = $_.height; //#4629
    } //#4629
    var _1A = $a(); //#4629
    $k[$j++] = Infinity; //#4630
    for (var _1B = 0, _1C = 12; _1B < _1C; _1B++) { //#4630
        $k[$j++] = 0; //#4630
    } //#4630
    var _1D = $a(); //#4630
    $k[$j++] = 'ren'; //#4633
    $k[$j++] = 'renlinear'; //#4633
    $k[$j++] = 'sbs'; //#4633
    $k[$j++] = _16; //#4633
    $k[$j++] = 'bhs'; //#4633
    $k[$j++] = _1A; //#4633
    $k[$j++] = 'bbs'; //#4633
    $k[$j++] = _1D; //#4633
    if ($_.includetext) { //#4633
        $k[$j++] = 'txt'; //#4632
        $k[$j++] = $_.txt; //#4632
    } //#4632
    $k[$j++] = 'opt'; //#4639
    $k[$j++] = $_.options; //#4639
    $k[$j++] = 'guardrightpos'; //#4639
    $k[$j++] = 5; //#4639
    $k[$j++] = 'guardrightypos'; //#4639
    $k[$j++] = $f($_.textyoffset + 4); //#4639
    $k[$j++] = 'borderleft'; //#4639
    $k[$j++] = 12; //#4639
    $k[$j++] = 'borderright'; //#4639
    $k[$j++] = 5; //#4639
    $k[$j++] = 'bordertop'; //#4639
    $k[$j++] = 10; //#4639
    var _1I = $d(); //#4639
    $k[$j++] = _1I; //#4642
    if (!$_.dontdraw) { //#4642
        bwipp_renlinear(); //#4642
    } //#4642
    $_ = Object.getPrototypeOf($_); //#4644
    $_ = Object.getPrototypeOf($_); //#4646
} //bwipp_ean2
function bwipp_ean13() {
    $_ = Object.create($_); //#4678
    $_.dontdraw = false; //#4681
    $_.includetext = false; //#4682
    $_.textfont = "OCR-B"; //#4683
    $_.textsize = 12; //#4684
    $_.textxoffset = -11; //#4685
    $_.textyoffset = -4; //#4686
    $_.height = 1; //#4687
    $_.addongap = 12; //#4688
    $_.addontextfont = "unset"; //#4689
    $_.addontextsize = null; //#4690
    $_.addontextxoffset = null; //#4691
    $_.addontextyoffset = null; //#4692
    $k[$j++] = $_; //#4694
    bwipp_processoptions(); //#4694
    $_.options = $k[--$j]; //#4694
    $_.barcode = $k[--$j]; //#4695
    bwipp_loadctx(bwipp_ean13); //#4697
    $search($_.barcode, " "); //#4700
    if ($k[--$j]) { //#4706
        $_.barcode = $k[--$j]; //#4701
        $j--; //#4702
        $_.addon = $k[--$j]; //#4703
    } else { //#4706
        $j--; //#4705
        $_.addon = ""; //#4706
    } //#4706
    if (($_.barcode.length != 12) && ($_.barcode.length != 13)) { //#4712
        $k[$j++] = 'bwipp.ean13badLength#4711'; //#4711
        $k[$j++] = "EAN-13 must be 12 or 13 digits"; //#4711
        bwipp_raiseerror(); //#4711
    } //#4711
    $forall($_.barcode, function() { //#4717
        var _9 = $k[--$j]; //#4714
        if ((_9 < 48) || (_9 > 57)) { //#4716
            $k[$j++] = 'bwipp.ean13badCharacter#4715'; //#4715
            $k[$j++] = "EAN-13 must contain only digits"; //#4715
            bwipp_raiseerror(); //#4715
        } //#4715
    }); //#4715
    if ((($_.addon.length != 0) && ($_.addon.length != 2)) && ($_.addon.length != 5)) { //#4720
        $k[$j++] = 'bwipp.ean13badAddOnLength#4719'; //#4719
        $k[$j++] = "Add-on for EAN-13 must be 2 or 5 digits"; //#4719
        bwipp_raiseerror(); //#4719
    } //#4719
    $_.pad = $s(13); //#4723
    $_.checksum = 0; //#4724
    for (var _E = 0; _E <= 11; _E += 1) { //#4733
        $_.i = _E; //#4726
        $_.barchar = $f($get($_.barcode, $_.i) - 48); //#4727
        if (($_.i % 2) == 0) { //#4731
            $_.checksum = $f($_.barchar + $_.checksum); //#4729
        } else { //#4731
            $_.checksum = $f(($_.barchar * 3) + $_.checksum); //#4731
        } //#4731
    } //#4731
    $_.checksum = ($f(10 - ($_.checksum % 10))) % 10; //#4734
    if ($_.barcode.length == 13) { //#4739
        if ($get($_.barcode, 12) != $f($_.checksum + 48)) { //#4738
            $k[$j++] = 'bwipp.ean13badCheckDigit#4737'; //#4737
            $k[$j++] = "Incorrect EAN-13 check digit provided"; //#4737
            bwipp_raiseerror(); //#4737
        } //#4737
    } //#4737
    $puti($_.pad, 0, $_.barcode); //#4740
    $put($_.pad, 12, $f($_.checksum + 48)); //#4741
    $_.barcode = $_.pad; //#4742
    if (!bwipp_ean13.__4760__) { //#4760
        $_ = Object.create($_); //#4760
        $_.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "111", "11111", "111"]); //#4750
        $_.barchars = "0123456789"; //#4753
        $_.mirrormaps = $a(["000000", "001011", "001101", "001110", "010011", "011001", "011100", "010101", "010110", "011010"]); //#4759
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_ean13.$ctx[id] = $_[id]); //#4759
        bwipp_ean13.__4760__ = 1; //#4759
        $_ = Object.getPrototypeOf($_); //#4759
    } //#4759
    $_.sbs = $s(59); //#4762
    $_.txt = $a(13); //#4763
    $puti($_.sbs, 0, $get($_.encs, 10)); //#4766
    $_.mirrormap = $get($_.mirrormaps, $get($_.barcode, 0) - 48); //#4769
    $put($_.txt, 0, $a([$geti($_.barcode, 0, 1), $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])); //#4770
    for (var _r = 1; _r <= 6; _r += 1) { //#4793
        $_.i = _r; //#4775
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#4776
        $j--; //#4777
        $_.indx = $k[--$j].length; //#4778
        $j -= 2; //#4779
        $_.enc = $get($_.encs, $_.indx); //#4780
        if ($get($_.mirrormap, $_.i - 1) == 49) { //#4790
            $_.enclen = $_.enc.length; //#4782
            $_.revenc = $s($_.enclen); //#4783
            for (var _18 = 0, _17 = $_.enclen - 1; _18 <= _17; _18 += 1) { //#4788
                $_.j = _18; //#4785
                $_.char = $get($_.enc, $_.j); //#4786
                $put($_.revenc, ($_.enclen - $_.j) - 1, $_.char); //#4787
            } //#4787
            $_.enc = $_.revenc; //#4789
        } //#4789
        $puti($_.sbs, (($_.i - 1) * 4) + 3, $_.enc); //#4791
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ((($_.i - 1) * 7) + 15) + $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])); //#4792
    } //#4792
    $puti($_.sbs, ((7 - 1) * 4) + 3, $get($_.encs, 11)); //#4796
    for (var _1Y = 7; _1Y <= 12; _1Y += 1) { //#4809
        $_.i = _1Y; //#4801
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#4802
        $j--; //#4803
        $_.indx = $k[--$j].length; //#4804
        $j -= 2; //#4805
        $_.enc = $get($_.encs, $_.indx); //#4806
        $puti($_.sbs, (($_.i - 1) * 4) + 8, $_.enc); //#4807
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ((($_.i - 1) * 7) + 19) + $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])); //#4808
    } //#4808
    $puti($_.sbs, 56, $get($_.encs, 12)); //#4812
    $k[$j++] = Infinity; //#4814
    var _1y = $_.sbs; //#4814
    for (var _1z = 0, _20 = _1y.length; _1z < _20; _1z++) { //#4814
        $k[$j++] = $get(_1y, _1z) - 48; //#4814
    } //#4814
    $_.sbs = $a(); //#4814
    if ($_.includetext) { //#4821
        $k[$j++] = Infinity; //#4816
        $k[$j++] = $_.height; //#4816
        $k[$j++] = $_.height; //#4816
        for (var _26 = 0, _27 = 12; _26 < _27; _26++) { //#4816
            $k[$j++] = $f($_.height - 0.075); //#4816
        } //#4816
        $k[$j++] = $_.height; //#4816
        $k[$j++] = $_.height; //#4816
        for (var _2B = 0, _2C = 12; _2B < _2C; _2B++) { //#4816
            $k[$j++] = $f($_.height - 0.075); //#4816
        } //#4816
        $k[$j++] = $_.height; //#4816
        $k[$j++] = $_.height; //#4816
        $_.bhs = $a(); //#4816
        $k[$j++] = Infinity; //#4817
        $k[$j++] = 0; //#4817
        $k[$j++] = 0; //#4817
        for (var _2H = 0, _2I = 12; _2H < _2I; _2H++) { //#4817
            $k[$j++] = 0.075; //#4817
        } //#4817
        $k[$j++] = 0; //#4817
        $k[$j++] = 0; //#4817
        for (var _2J = 0, _2K = 12; _2J < _2K; _2J++) { //#4817
            $k[$j++] = 0.075; //#4817
        } //#4817
        $k[$j++] = 0; //#4817
        $k[$j++] = 0; //#4817
        $_.bbs = $a(); //#4817
    } else { //#4821
        $k[$j++] = Infinity; //#4819
        for (var _2M = 0, _2N = 30; _2M < _2N; _2M++) { //#4819
            $k[$j++] = $_.height; //#4819
        } //#4819
        $_.bhs = $a(); //#4819
        $k[$j++] = Infinity; //#4820
        for (var _2Q = 0, _2R = 30; _2Q < _2R; _2Q++) { //#4820
            $k[$j++] = 0; //#4820
        } //#4820
        $_.bbs = $a(); //#4820
        $_.txt = $a([]); //#4821
    } //#4821
    $_.guardrightypos = 0; //#4823
    if ($ne($_.addon, "")) { //#4844
        $k[$j++] = Infinity; //#4827
        $k[$j++] = 'dontdraw'; //#4831
        $k[$j++] = true; //#4831
        $k[$j++] = 'includetext'; //#4831
        $k[$j++] = true; //#4831
        $k[$j++] = 'height'; //#4831
        $k[$j++] = $f($_.height - 0.15); //#4831
        $k[$j++] = 'textxoffset'; //#4831
        if ($ne($_.addontextxoffset, null)) { //#4831
            $k[$j++] = $_.addontextxoffset; //#4831
        } else { //#4831
            $k[$j++] = 95 + $_.addongap; //#4831
        } //#4831
        if ($ne($_.addontextyoffset, null)) { //#4832
            $k[$j++] = 'textyoffset'; //#4832
            $k[$j++] = $_.addontextyoffset; //#4832
        } //#4832
        $k[$j++] = 'textsize'; //#4833
        if ($ne($_.addontextsize, null)) { //#4833
            $k[$j++] = $_.addontextsize; //#4833
        } else { //#4833
            $k[$j++] = $_.textsize; //#4833
        } //#4833
        var _2f = $ne($_.addontextfont, "unset") ? $_.addontextfont : $_.textfont; //#4834
        $k[$j++] = 'textfont'; //#4834
        $k[$j++] = _2f; //#4834
        $_.addopts = $d(); //#4835
        if ($_.addon.length == 2) { //#4836
            $k[$j++] = $_.addon; //#4836
            $k[$j++] = $_.addopts; //#4836
            bwipp_ean2(); //#4836
        } //#4836
        if ($_.addon.length == 5) { //#4837
            $k[$j++] = $_.addon; //#4837
            $k[$j++] = $_.addopts; //#4837
            bwipp_ean5(); //#4837
        } //#4837
        $_.addcode = $k[--$j]; //#4838
        $k[$j++] = Infinity; //#4839
        $aload($_.sbs); //#4839
        $k[$j++] = $_.addongap; //#4839
        $aload($get($_.addcode, "sbs")); //#4839
        $_.sbs = $a(); //#4839
        $k[$j++] = Infinity; //#4840
        $aload($_.bhs); //#4840
        $forall($get($_.addcode, "bhs"), function() { //#4840
            var _2w = $k[--$j]; //#4840
            $k[$j++] = $f(_2w - 0.075); //#4840
        }); //#4840
        $_.bhs = $a(); //#4840
        $k[$j++] = Infinity; //#4841
        $aload($_.bbs); //#4841
        $forall($get($_.addcode, "bbs"), function() { //#4841
            var _31 = $k[--$j]; //#4841
            $k[$j++] = $f(_31 + 0.075); //#4841
        }); //#4841
        $_.bbs = $a(); //#4841
        $k[$j++] = Infinity; //#4842
        $aload($_.txt); //#4842
        $aload($get($_.addcode, "txt")); //#4842
        $_.txt = $a(); //#4842
        $_.guardrightypos = ($_.height * 72) - 6; //#4843
    } //#4843
    $k[$j++] = Infinity; //#4847
    $k[$j++] = 'ren'; //#4854
    $k[$j++] = 'renlinear'; //#4854
    $k[$j++] = 'sbs'; //#4854
    $k[$j++] = $_.sbs; //#4854
    $k[$j++] = 'bhs'; //#4854
    $k[$j++] = $_.bhs; //#4854
    $k[$j++] = 'bbs'; //#4854
    $k[$j++] = $_.bbs; //#4854
    $k[$j++] = 'txt'; //#4854
    $k[$j++] = $_.txt; //#4854
    $k[$j++] = 'opt'; //#4854
    $k[$j++] = $_.options; //#4854
    $k[$j++] = 'guardrightpos'; //#4854
    if ($eq($_.addon, "")) { //#4854
        $k[$j++] = 7; //#4854
    } else { //#4854
        $k[$j++] = 5; //#4854
    } //#4854
    $k[$j++] = 'guardrightypos'; //#4857
    $k[$j++] = $_.guardrightypos; //#4857
    $k[$j++] = 'borderleft'; //#4857
    $k[$j++] = 11; //#4857
    $k[$j++] = 'borderright'; //#4857
    if ($eq($_.addon, "")) { //#4857
        $k[$j++] = 7; //#4857
    } else { //#4857
        $k[$j++] = 5; //#4857
    } //#4857
    $k[$j++] = 'bordertop'; //#4859
    $k[$j++] = 0; //#4859
    $k[$j++] = 'borderbottom'; //#4859
    $k[$j++] = 5; //#4859
    var _3G = $d(); //#4859
    $k[$j++] = _3G; //#4862
    if (!$_.dontdraw) { //#4862
        bwipp_renlinear(); //#4862
    } //#4862
    $_ = Object.getPrototypeOf($_); //#4864
    $_ = Object.getPrototypeOf($_); //#4866
} //bwipp_ean13
function bwipp_ean8() {
    $_ = Object.create($_); //#4898
    $_.dontdraw = false; //#4901
    $_.includetext = false; //#4902
    $_.textfont = "OCR-B"; //#4903
    $_.textsize = 12; //#4904
    $_.textxoffset = 4; //#4905
    $_.textyoffset = -4; //#4906
    $_.height = 1; //#4907
    $_.addongap = 12; //#4908
    $_.addontextfont = "unset"; //#4909
    $_.addontextsize = null; //#4910
    $_.addontextxoffset = null; //#4911
    $_.addontextyoffset = null; //#4912
    $k[$j++] = $_; //#4914
    bwipp_processoptions(); //#4914
    $_.options = $k[--$j]; //#4914
    $_.barcode = $k[--$j]; //#4915
    bwipp_loadctx(bwipp_ean8); //#4917
    $search($_.barcode, " "); //#4920
    if ($k[--$j]) { //#4926
        $_.barcode = $k[--$j]; //#4921
        $j--; //#4922
        $_.addon = $k[--$j]; //#4923
    } else { //#4926
        $j--; //#4925
        $_.addon = ""; //#4926
    } //#4926
    if (($_.barcode.length != 7) && ($_.barcode.length != 8)) { //#4932
        $k[$j++] = 'bwipp.ean8badLength#4931'; //#4931
        $k[$j++] = "EAN-8 must be 7 or 8 digits"; //#4931
        bwipp_raiseerror(); //#4931
    } //#4931
    $forall($_.barcode, function() { //#4937
        var _9 = $k[--$j]; //#4934
        if ((_9 < 48) || (_9 > 57)) { //#4936
            $k[$j++] = 'bwipp.ean8badCharacter#4935'; //#4935
            $k[$j++] = "EAN-8 must contain only digits"; //#4935
            bwipp_raiseerror(); //#4935
        } //#4935
    }); //#4935
    if ((($_.addon.length != 0) && ($_.addon.length != 2)) && ($_.addon.length != 5)) { //#4940
        $k[$j++] = 'bwipp.ean8badAddOnLength#4939'; //#4939
        $k[$j++] = "Add-on for EAN-8 must be 2 or 5 digits"; //#4939
        bwipp_raiseerror(); //#4939
    } //#4939
    $_.pad = $s(8); //#4943
    $_.checksum = 0; //#4944
    for (var _E = 0; _E <= 6; _E += 1) { //#4953
        $_.i = _E; //#4946
        $_.barchar = $f($get($_.barcode, $_.i) - 48); //#4947
        if (($_.i % 2) != 0) { //#4951
            $_.checksum = $f($_.barchar + $_.checksum); //#4949
        } else { //#4951
            $_.checksum = $f(($_.barchar * 3) + $_.checksum); //#4951
        } //#4951
    } //#4951
    $_.checksum = ($f(10 - ($_.checksum % 10))) % 10; //#4954
    if ($_.barcode.length == 8) { //#4959
        if ($get($_.barcode, 7) != $f($_.checksum + 48)) { //#4958
            $k[$j++] = 'bwipp.ean8badCheckDigit#4957'; //#4957
            $k[$j++] = "Incorrect EAN-8 check digit provided"; //#4957
            bwipp_raiseerror(); //#4957
        } //#4957
    } //#4957
    $puti($_.pad, 0, $_.barcode); //#4960
    $put($_.pad, 7, $f($_.checksum + 48)); //#4961
    $_.barcode = $_.pad; //#4962
    if (!bwipp_ean8.__4974__) { //#4974
        $_ = Object.create($_); //#4974
        $_.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "111", "11111", "111"]); //#4970
        $_.barchars = "0123456789"; //#4973
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_ean8.$ctx[id] = $_[id]); //#4973
        bwipp_ean8.__4974__ = 1; //#4973
        $_ = Object.getPrototypeOf($_); //#4973
    } //#4973
    $_.sbs = $s(43); //#4976
    $_.txt = $a(8); //#4977
    $puti($_.sbs, 0, $get($_.encs, 10)); //#4980
    for (var _e = 0; _e <= 3; _e += 1) { //#4993
        $_.i = _e; //#4985
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#4986
        $j--; //#4987
        $_.indx = $k[--$j].length; //#4988
        $j -= 2; //#4989
        $_.enc = $get($_.encs, $_.indx); //#4990
        $puti($_.sbs, ($_.i * 4) + 3, $_.enc); //#4991
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ($_.i * 7) + $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])); //#4992
    } //#4992
    $puti($_.sbs, (4 * 4) + 3, $get($_.encs, 11)); //#4996
    for (var _14 = 4; _14 <= 7; _14 += 1) { //#5009
        $_.i = _14; //#5001
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#5002
        $j--; //#5003
        $_.indx = $k[--$j].length; //#5004
        $j -= 2; //#5005
        $_.enc = $get($_.encs, $_.indx); //#5006
        $puti($_.sbs, ($_.i * 4) + 8, $_.enc); //#5007
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), (($_.i * 7) + $_.textxoffset) + 4, $_.textyoffset, $_.textfont, $_.textsize])); //#5008
    } //#5008
    $puti($_.sbs, 40, $get($_.encs, 12)); //#5012
    $k[$j++] = Infinity; //#5014
    var _1U = $_.sbs; //#5014
    for (var _1V = 0, _1W = _1U.length; _1V < _1W; _1V++) { //#5014
        $k[$j++] = $get(_1U, _1V) - 48; //#5014
    } //#5014
    $_.sbs = $a(); //#5014
    if ($_.includetext) { //#5021
        $k[$j++] = Infinity; //#5016
        $k[$j++] = $_.height; //#5016
        $k[$j++] = $_.height; //#5016
        for (var _1c = 0, _1d = 8; _1c < _1d; _1c++) { //#5016
            $k[$j++] = $f($_.height - 0.075); //#5016
        } //#5016
        $k[$j++] = $_.height; //#5016
        $k[$j++] = $_.height; //#5016
        for (var _1h = 0, _1i = 8; _1h < _1i; _1h++) { //#5016
            $k[$j++] = $f($_.height - 0.075); //#5016
        } //#5016
        $k[$j++] = $_.height; //#5016
        $k[$j++] = $_.height; //#5016
        $_.bhs = $a(); //#5016
        $k[$j++] = Infinity; //#5017
        $k[$j++] = 0; //#5017
        $k[$j++] = 0; //#5017
        for (var _1n = 0, _1o = 8; _1n < _1o; _1n++) { //#5017
            $k[$j++] = 0.075; //#5017
        } //#5017
        $k[$j++] = 0; //#5017
        $k[$j++] = 0; //#5017
        for (var _1p = 0, _1q = 8; _1p < _1q; _1p++) { //#5017
            $k[$j++] = 0.075; //#5017
        } //#5017
        $k[$j++] = 0; //#5017
        $k[$j++] = 0; //#5017
        $_.bbs = $a(); //#5017
    } else { //#5021
        $k[$j++] = Infinity; //#5019
        for (var _1s = 0, _1t = 22; _1s < _1t; _1s++) { //#5019
            $k[$j++] = $_.height; //#5019
        } //#5019
        $_.bhs = $a(); //#5019
        $k[$j++] = Infinity; //#5020
        for (var _1w = 0, _1x = 22; _1w < _1x; _1w++) { //#5020
            $k[$j++] = 0; //#5020
        } //#5020
        $_.bbs = $a(); //#5020
        $_.txt = $a([]); //#5021
    } //#5021
    $_.guardrightypos = 0; //#5023
    if ($ne($_.addon, "")) { //#5044
        $k[$j++] = Infinity; //#5027
        $k[$j++] = 'dontdraw'; //#5031
        $k[$j++] = true; //#5031
        $k[$j++] = 'includetext'; //#5031
        $k[$j++] = true; //#5031
        $k[$j++] = 'height'; //#5031
        $k[$j++] = $f($_.height - 0.15); //#5031
        $k[$j++] = 'textxoffset'; //#5031
        if ($ne($_.addontextxoffset, null)) { //#5031
            $k[$j++] = $_.addontextxoffset; //#5031
        } else { //#5031
            $k[$j++] = 67 + $_.addongap; //#5031
        } //#5031
        if ($ne($_.addontextyoffset, null)) { //#5032
            $k[$j++] = 'textyoffset'; //#5032
            $k[$j++] = $_.addontextyoffset; //#5032
        } //#5032
        $k[$j++] = 'textsize'; //#5033
        if ($ne($_.addontextsize, null)) { //#5033
            $k[$j++] = $_.addontextsize; //#5033
        } else { //#5033
            $k[$j++] = $_.textsize; //#5033
        } //#5033
        var _2B = $ne($_.addontextfont, "unset") ? $_.addontextfont : $_.textfont; //#5034
        $k[$j++] = 'textfont'; //#5034
        $k[$j++] = _2B; //#5034
        $_.addopts = $d(); //#5035
        if ($_.addon.length == 2) { //#5036
            $k[$j++] = $_.addon; //#5036
            $k[$j++] = $_.addopts; //#5036
            bwipp_ean2(); //#5036
        } //#5036
        if ($_.addon.length == 5) { //#5037
            $k[$j++] = $_.addon; //#5037
            $k[$j++] = $_.addopts; //#5037
            bwipp_ean5(); //#5037
        } //#5037
        $_.addcode = $k[--$j]; //#5038
        $k[$j++] = Infinity; //#5039
        $aload($_.sbs); //#5039
        $k[$j++] = $_.addongap; //#5039
        $aload($get($_.addcode, "sbs")); //#5039
        $_.sbs = $a(); //#5039
        $k[$j++] = Infinity; //#5040
        $aload($_.bhs); //#5040
        $forall($get($_.addcode, "bhs"), function() { //#5040
            var _2S = $k[--$j]; //#5040
            $k[$j++] = $f(_2S - 0.075); //#5040
        }); //#5040
        $_.bhs = $a(); //#5040
        $k[$j++] = Infinity; //#5041
        $aload($_.bbs); //#5041
        $forall($get($_.addcode, "bbs"), function() { //#5041
            var _2X = $k[--$j]; //#5041
            $k[$j++] = $f(_2X + 0.075); //#5041
        }); //#5041
        $_.bbs = $a(); //#5041
        $k[$j++] = Infinity; //#5042
        $aload($_.txt); //#5042
        $aload($get($_.addcode, "txt")); //#5042
        $_.txt = $a(); //#5042
        $_.guardrightypos = ($_.height * 72) - 6; //#5043
    } //#5043
    $k[$j++] = Infinity; //#5047
    $k[$j++] = 'ren'; //#5055
    $k[$j++] = 'renlinear'; //#5055
    $k[$j++] = 'sbs'; //#5055
    $k[$j++] = $_.sbs; //#5055
    $k[$j++] = 'bhs'; //#5055
    $k[$j++] = $_.bhs; //#5055
    $k[$j++] = 'bbs'; //#5055
    $k[$j++] = $_.bbs; //#5055
    $k[$j++] = 'txt'; //#5055
    $k[$j++] = $_.txt; //#5055
    $k[$j++] = 'opt'; //#5055
    $k[$j++] = $_.options; //#5055
    $k[$j++] = 'guardleftpos'; //#5055
    $k[$j++] = 7; //#5055
    $k[$j++] = 'guardrightpos'; //#5055
    if ($eq($_.addon, "")) { //#5055
        $k[$j++] = 7; //#5055
    } else { //#5055
        $k[$j++] = 5; //#5055
    } //#5055
    $k[$j++] = 'guardrightypos'; //#5058
    $k[$j++] = $_.guardrightypos; //#5058
    $k[$j++] = 'borderleft'; //#5058
    $k[$j++] = 7; //#5058
    $k[$j++] = 'borderright'; //#5058
    if ($eq($_.addon, "")) { //#5058
        $k[$j++] = 7; //#5058
    } else { //#5058
        $k[$j++] = 5; //#5058
    } //#5058
    $k[$j++] = 'bordertop'; //#5060
    $k[$j++] = 0; //#5060
    $k[$j++] = 'borderbottom'; //#5060
    $k[$j++] = 5; //#5060
    var _2m = $d(); //#5060
    $k[$j++] = _2m; //#5063
    if (!$_.dontdraw) { //#5063
        bwipp_renlinear(); //#5063
    } //#5063
    $_ = Object.getPrototypeOf($_); //#5065
    $_ = Object.getPrototypeOf($_); //#5067
} //bwipp_ean8
function bwipp_upca() {
    $_ = Object.create($_); //#5099
    $_.dontdraw = false; //#5102
    $_.includetext = false; //#5103
    $_.textfont = "OCR-B"; //#5104
    $_.textsize = 12; //#5105
    $_.textxoffset = -9; //#5106
    $_.textyoffset = -4; //#5107
    $_.height = 1; //#5108
    $_.addongap = 12; //#5109
    $_.addontextfont = "unset"; //#5110
    $_.addontextsize = null; //#5111
    $_.addontextxoffset = null; //#5112
    $_.addontextyoffset = null; //#5113
    $k[$j++] = $_; //#5115
    bwipp_processoptions(); //#5115
    $_.options = $k[--$j]; //#5115
    $_.barcode = $k[--$j]; //#5116
    bwipp_loadctx(bwipp_upca); //#5118
    $search($_.barcode, " "); //#5121
    if ($k[--$j]) { //#5127
        $_.barcode = $k[--$j]; //#5122
        $j--; //#5123
        $_.addon = $k[--$j]; //#5124
    } else { //#5127
        $j--; //#5126
        $_.addon = ""; //#5127
    } //#5127
    if (($_.barcode.length == 7) || ($_.barcode.length == 8)) { //#5173
        $forall($_.barcode, function() { //#5137
            var _9 = $k[--$j]; //#5134
            if ((_9 < 48) || (_9 > 57)) { //#5136
                $k[$j++] = 'bwipp.upcAupcEbadCharacter#5135'; //#5135
                $k[$j++] = "UPC-E must contain only digits"; //#5135
                bwipp_raiseerror(); //#5135
            } //#5135
        }); //#5135
        var _B = $get($_.barcode, 0); //#5138
        if ((_B != 48) && (_B != 49)) { //#5140
            $k[$j++] = 'bwipp.upcAupcEbadNumberSystem#5139'; //#5139
            $k[$j++] = "UPC-E must have number system 0 or 1"; //#5139
            bwipp_raiseerror(); //#5139
        } //#5139
        for (var _C = 0, _D = 1; _C < _D; _C++) { //#5168
            var _F = ($_.barcode.length == 8) ? 12 : 11; //#5142
            $_.upcacode = $s(_F); //#5142
            if ($f($get($_.barcode, 6) - 48) <= 2) { //#5149
                $puti($_.upcacode, 0, $geti($_.barcode, 0, 3)); //#5144
                $puti($_.upcacode, 3, $geti($_.barcode, 6, 1)); //#5145
                $puti($_.upcacode, 4, "0000"); //#5146
                $puti($_.upcacode, 8, $geti($_.barcode, 3, 3)); //#5147
                break; //#5148
            } //#5148
            if ($f($get($_.barcode, 6) - 48) == 3) { //#5155
                $puti($_.upcacode, 0, $geti($_.barcode, 0, 4)); //#5151
                $puti($_.upcacode, 4, "00000"); //#5152
                $puti($_.upcacode, 9, $geti($_.barcode, 4, 2)); //#5153
                break; //#5154
            } //#5154
            if ($f($get($_.barcode, 6) - 48) == 4) { //#5161
                $puti($_.upcacode, 0, $geti($_.barcode, 0, 5)); //#5157
                $puti($_.upcacode, 5, "00000"); //#5158
                $puti($_.upcacode, 10, $geti($_.barcode, 5, 1)); //#5159
                break; //#5160
            } //#5160
            if ($f($get($_.barcode, 6) - 48) >= 5) { //#5167
                $puti($_.upcacode, 0, $geti($_.barcode, 0, 6)); //#5163
                $puti($_.upcacode, 6, "0000"); //#5164
                $puti($_.upcacode, 10, $geti($_.barcode, 6, 1)); //#5165
                break; //#5166
            } //#5166
        } //#5166
        if ($_.barcode.length == 8) { //#5171
            $puti($_.upcacode, 11, $geti($_.barcode, 7, 1)); //#5170
        } //#5170
        $_.barcode = $_.upcacode; //#5172
    } //#5172
    if (($_.barcode.length != 11) && ($_.barcode.length != 12)) { //#5178
        $k[$j++] = 'bwipp.upcAbadLength#5177'; //#5177
        $k[$j++] = "UPC-A must be 11 or 12 digits"; //#5177
        bwipp_raiseerror(); //#5177
    } //#5177
    var _11 = $_.barcode; //#5179
    for (var _12 = 0, _13 = _11.length; _12 < _13; _12++) { //#5183
        var _14 = $get(_11, _12); //#5183
        if ((_14 < 48) || (_14 > 57)) { //#5182
            $k[$j++] = 'bwipp.upcAbadCharacter#5181'; //#5181
            $k[$j++] = "UPC-A must contain only digits"; //#5181
            bwipp_raiseerror(); //#5181
        } //#5181
    } //#5181
    if ((($_.addon.length != 0) && ($_.addon.length != 2)) && ($_.addon.length != 5)) { //#5186
        $k[$j++] = 'bwipp.upcAbadAddOnLength#5185'; //#5185
        $k[$j++] = "Add-on for UPC-A must be 2 or 5 digits"; //#5185
        bwipp_raiseerror(); //#5185
    } //#5185
    $_.pad = $s(12); //#5189
    $_.checksum = 0; //#5190
    for (var _19 = 0; _19 <= 10; _19 += 1) { //#5199
        $_.i = _19; //#5192
        $_.barchar = $get($_.barcode, $_.i) - 48; //#5193
        if (($_.i % 2) != 0) { //#5197
            $_.checksum = $_.checksum + $_.barchar; //#5195
        } else { //#5197
            $_.checksum = $_.checksum + ($_.barchar * 3); //#5197
        } //#5197
    } //#5197
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#5200
    if ($_.barcode.length == 12) { //#5205
        if ($get($_.barcode, 11) != ($_.checksum + 48)) { //#5204
            $k[$j++] = 'bwipp.upcAbadCheckDigit#5203'; //#5203
            $k[$j++] = "Incorrect UPC check digit provided"; //#5203
            bwipp_raiseerror(); //#5203
        } //#5203
    } //#5203
    $puti($_.pad, 0, $_.barcode); //#5206
    $put($_.pad, 11, $_.checksum + 48); //#5207
    $_.barcode = $_.pad; //#5208
    if (!bwipp_upca.__5220__) { //#5220
        $_ = Object.create($_); //#5220
        $_.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "111", "11111", "111"]); //#5216
        $_.barchars = "0123456789"; //#5219
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_upca.$ctx[id] = $_[id]); //#5219
        bwipp_upca.__5220__ = 1; //#5219
        $_ = Object.getPrototypeOf($_); //#5219
    } //#5219
    $_.sbs = $s(59); //#5222
    $_.txt = $a(12); //#5223
    $puti($_.sbs, 0, $get($_.encs, 10)); //#5226
    for (var _1Z = 0; _1Z <= 5; _1Z += 1) { //#5243
        $_.i = _1Z; //#5231
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#5232
        $j--; //#5233
        $_.indx = $k[--$j].length; //#5234
        $j -= 2; //#5235
        $_.enc = $get($_.encs, $_.indx); //#5236
        $puti($_.sbs, ($_.i * 4) + 3, $_.enc); //#5237
        if ($_.i == 0) { //#5241
            $put($_.txt, 0, $a([$geti($_.barcode, 0, 1), $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize - 2])); //#5239
        } else { //#5241
            $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), (($_.i * 7) + 13) + $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])); //#5241
        } //#5241
    } //#5241
    $puti($_.sbs, (6 * 4) + 3, $get($_.encs, 11)); //#5246
    for (var _28 = 6; _28 <= 11; _28 += 1) { //#5263
        $_.i = _28; //#5251
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#5252
        $j--; //#5253
        $_.indx = $k[--$j].length; //#5254
        $j -= 2; //#5255
        $_.enc = $get($_.encs, $_.indx); //#5256
        $puti($_.sbs, ($_.i * 4) + 8, $_.enc); //#5257
        if ($_.i == 11) { //#5261
            $put($_.txt, 11, $a([$geti($_.barcode, 11, 1), $_.textxoffset + 107, $_.textyoffset, $_.textfont, $_.textsize - 2])); //#5259
        } else { //#5261
            $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), (($_.i * 7) + $_.textxoffset) + 17, $_.textyoffset, $_.textfont, $_.textsize])); //#5261
        } //#5261
    } //#5261
    $puti($_.sbs, 56, $get($_.encs, 12)); //#5266
    $k[$j++] = Infinity; //#5268
    var _2h = $_.sbs; //#5268
    for (var _2i = 0, _2j = _2h.length; _2i < _2j; _2i++) { //#5268
        $k[$j++] = $get(_2h, _2i) - 48; //#5268
    } //#5268
    $_.sbs = $a(); //#5268
    if ($_.includetext) { //#5275
        $k[$j++] = Infinity; //#5270
        for (var _2n = 0, _2o = 4; _2n < _2o; _2n++) { //#5270
            $k[$j++] = $_.height; //#5270
        } //#5270
        for (var _2q = 0, _2r = 10; _2q < _2r; _2q++) { //#5270
            $k[$j++] = $f($_.height - 0.075); //#5270
        } //#5270
        $k[$j++] = $_.height; //#5270
        $k[$j++] = $_.height; //#5270
        for (var _2v = 0, _2w = 10; _2v < _2w; _2v++) { //#5270
            $k[$j++] = $f($_.height - 0.075); //#5270
        } //#5270
        for (var _2y = 0, _2z = 4; _2y < _2z; _2y++) { //#5270
            $k[$j++] = $_.height; //#5270
        } //#5270
        $_.bhs = $a(); //#5270
        $k[$j++] = Infinity; //#5271
        $k[$j++] = 0; //#5271
        $k[$j++] = 0; //#5271
        $k[$j++] = 0; //#5271
        $k[$j++] = 0; //#5271
        for (var _32 = 0, _33 = 10; _32 < _33; _32++) { //#5271
            $k[$j++] = 0.075; //#5271
        } //#5271
        $k[$j++] = 0; //#5271
        $k[$j++] = 0; //#5271
        for (var _34 = 0, _35 = 10; _34 < _35; _34++) { //#5271
            $k[$j++] = 0.075; //#5271
        } //#5271
        $k[$j++] = 0; //#5271
        $k[$j++] = 0; //#5271
        $k[$j++] = 0; //#5271
        $k[$j++] = 0; //#5271
        $_.bbs = $a(); //#5271
    } else { //#5275
        $k[$j++] = Infinity; //#5273
        for (var _37 = 0, _38 = 30; _37 < _38; _37++) { //#5273
            $k[$j++] = $_.height; //#5273
        } //#5273
        $_.bhs = $a(); //#5273
        $k[$j++] = Infinity; //#5274
        for (var _3B = 0, _3C = 30; _3B < _3C; _3B++) { //#5274
            $k[$j++] = 0; //#5274
        } //#5274
        $_.bbs = $a(); //#5274
        $_.txt = $a([]); //#5275
    } //#5275
    $_.guardrightypos = 0; //#5277
    if ($ne($_.addon, "")) { //#5298
        $k[$j++] = Infinity; //#5281
        $k[$j++] = 'dontdraw'; //#5285
        $k[$j++] = true; //#5285
        $k[$j++] = 'includetext'; //#5285
        $k[$j++] = true; //#5285
        $k[$j++] = 'height'; //#5285
        $k[$j++] = $f($_.height - 0.15); //#5285
        $k[$j++] = 'textxoffset'; //#5285
        if ($ne($_.addontextxoffset, null)) { //#5285
            $k[$j++] = $_.addontextxoffset; //#5285
        } else { //#5285
            $k[$j++] = 95 + $_.addongap; //#5285
        } //#5285
        if ($ne($_.addontextyoffset, null)) { //#5286
            $k[$j++] = 'textyoffset'; //#5286
            $k[$j++] = $_.addontextyoffset; //#5286
        } //#5286
        $k[$j++] = 'textsize'; //#5287
        if ($ne($_.addontextsize, null)) { //#5287
            $k[$j++] = $_.addontextsize; //#5287
        } else { //#5287
            $k[$j++] = $_.textsize; //#5287
        } //#5287
        var _3Q = $ne($_.addontextfont, "unset") ? $_.addontextfont : $_.textfont; //#5288
        $k[$j++] = 'textfont'; //#5288
        $k[$j++] = _3Q; //#5288
        $_.addopts = $d(); //#5289
        if ($_.addon.length == 2) { //#5290
            $k[$j++] = $_.addon; //#5290
            $k[$j++] = $_.addopts; //#5290
            bwipp_ean2(); //#5290
        } //#5290
        if ($_.addon.length == 5) { //#5291
            $k[$j++] = $_.addon; //#5291
            $k[$j++] = $_.addopts; //#5291
            bwipp_ean5(); //#5291
        } //#5291
        $_.addcode = $k[--$j]; //#5292
        $k[$j++] = Infinity; //#5293
        $aload($_.sbs); //#5293
        $k[$j++] = $_.addongap; //#5293
        $aload($get($_.addcode, "sbs")); //#5293
        $_.sbs = $a(); //#5293
        $k[$j++] = Infinity; //#5294
        $aload($_.bhs); //#5294
        $forall($get($_.addcode, "bhs"), function() { //#5294
            var _3h = $k[--$j]; //#5294
            $k[$j++] = $f(_3h - 0.075); //#5294
        }); //#5294
        $_.bhs = $a(); //#5294
        $k[$j++] = Infinity; //#5295
        $aload($_.bbs); //#5295
        $forall($get($_.addcode, "bbs"), function() { //#5295
            var _3m = $k[--$j]; //#5295
            $k[$j++] = $f(_3m + 0.075); //#5295
        }); //#5295
        $_.bbs = $a(); //#5295
        $k[$j++] = Infinity; //#5296
        $aload($_.txt); //#5296
        $aload($get($_.addcode, "txt")); //#5296
        $_.txt = $a(); //#5296
        $_.guardrightypos = ($_.height * 72) - 6; //#5297
    } //#5297
    $k[$j++] = Infinity; //#5301
    $k[$j++] = 'ren'; //#5308
    $k[$j++] = 'renlinear'; //#5308
    $k[$j++] = 'sbs'; //#5308
    $k[$j++] = $_.sbs; //#5308
    $k[$j++] = 'bhs'; //#5308
    $k[$j++] = $_.bhs; //#5308
    $k[$j++] = 'bbs'; //#5308
    $k[$j++] = $_.bbs; //#5308
    $k[$j++] = 'txt'; //#5308
    $k[$j++] = $_.txt; //#5308
    $k[$j++] = 'opt'; //#5308
    $k[$j++] = $_.options; //#5308
    $k[$j++] = 'guardrightpos'; //#5308
    if ($eq($_.addon, "")) { //#5308
        $k[$j++] = 9; //#5308
    } else { //#5308
        $k[$j++] = 5; //#5308
    } //#5308
    $k[$j++] = 'guardrightypos'; //#5311
    $k[$j++] = $_.guardrightypos; //#5311
    $k[$j++] = 'borderleft'; //#5311
    $k[$j++] = 9; //#5311
    $k[$j++] = 'borderright'; //#5311
    if ($eq($_.addon, "")) { //#5311
        $k[$j++] = 9; //#5311
    } else { //#5311
        $k[$j++] = 5; //#5311
    } //#5311
    $k[$j++] = 'bordertop'; //#5313
    $k[$j++] = 0; //#5313
    $k[$j++] = 'borderbottom'; //#5313
    $k[$j++] = 5; //#5313
    var _41 = $d(); //#5313
    $k[$j++] = _41; //#5316
    if (!$_.dontdraw) { //#5316
        bwipp_renlinear(); //#5316
    } //#5316
    $_ = Object.getPrototypeOf($_); //#5318
    $_ = Object.getPrototypeOf($_); //#5320
} //bwipp_upca
function bwipp_upce() {
    $_ = Object.create($_); //#5352
    $_.dontdraw = false; //#5355
    $_.includetext = false; //#5356
    $_.textfont = "OCR-B"; //#5357
    $_.textsize = 12; //#5358
    $_.textxoffset = -9; //#5359
    $_.textyoffset = -4; //#5360
    $_.height = 1; //#5361
    $_.addongap = 12; //#5362
    $_.addontextfont = "unset"; //#5363
    $_.addontextsize = null; //#5364
    $_.addontextxoffset = null; //#5365
    $_.addontextyoffset = null; //#5366
    $k[$j++] = $_; //#5368
    bwipp_processoptions(); //#5368
    $_.options = $k[--$j]; //#5368
    $_.barcode = $k[--$j]; //#5369
    bwipp_loadctx(bwipp_upce); //#5371
    $search($_.barcode, " "); //#5374
    if ($k[--$j]) { //#5380
        $_.barcode = $k[--$j]; //#5375
        $j--; //#5376
        $_.addon = $k[--$j]; //#5377
    } else { //#5380
        $j--; //#5379
        $_.addon = ""; //#5380
    } //#5380
    if (($_.barcode.length == 11) || ($_.barcode.length == 12)) { //#5422
        $forall($_.barcode, function() { //#5390
            var _9 = $k[--$j]; //#5387
            if ((_9 < 48) || (_9 > 57)) { //#5389
                $k[$j++] = 'bwipp.upcEupcAbadCharacter#5388'; //#5388
                $k[$j++] = "UPC-A must contain only digits"; //#5388
                bwipp_raiseerror(); //#5388
            } //#5388
        }); //#5388
        for (var _A = 0, _B = 1; _A < _B; _A++) { //#5417
            var _D = ($_.barcode.length == 12) ? 8 : 7; //#5392
            $_.upcecode = $s(_D); //#5392
            if (($f($get($_.barcode, 3) - 48) <= 2) && $eq($geti($_.barcode, 4, 4), "0000")) { //#5398
                $puti($_.upcecode, 0, $geti($_.barcode, 0, 3)); //#5394
                $puti($_.upcecode, 3, $geti($_.barcode, 8, 3)); //#5395
                $puti($_.upcecode, 6, $geti($_.barcode, 3, 1)); //#5396
                break; //#5397
            } //#5397
            if ($eq($geti($_.barcode, 4, 5), "00000")) { //#5404
                $puti($_.upcecode, 0, $geti($_.barcode, 0, 4)); //#5400
                $puti($_.upcecode, 4, $geti($_.barcode, 9, 2)); //#5401
                $puti($_.upcecode, 6, "3"); //#5402
                break; //#5403
            } //#5403
            if ($eq($geti($_.barcode, 5, 5), "00000")) { //#5410
                $puti($_.upcecode, 0, $geti($_.barcode, 0, 5)); //#5406
                $puti($_.upcecode, 5, $geti($_.barcode, 10, 1)); //#5407
                $puti($_.upcecode, 6, "4"); //#5408
                break; //#5409
            } //#5409
            if (($f($get($_.barcode, 10) - 48) >= 5) && $eq($geti($_.barcode, 6, 4), "0000")) { //#5415
                $puti($_.upcecode, 0, $geti($_.barcode, 0, 6)); //#5412
                $puti($_.upcecode, 6, $geti($_.barcode, 10, 1)); //#5413
                break; //#5414
            } //#5414
            $k[$j++] = 'bwipp.upcEupcAnotCompressible#5416'; //#5416
            $k[$j++] = "UPC-A cannot be converted to a UPC-E"; //#5416
            bwipp_raiseerror(); //#5416
        } //#5416
        if ($_.barcode.length == 12) { //#5420
            $puti($_.upcecode, 7, $geti($_.barcode, 11, 1)); //#5419
        } //#5419
        $_.barcode = $_.upcecode; //#5421
    } //#5421
    if (($_.barcode.length != 7) && ($_.barcode.length != 8)) { //#5427
        $k[$j++] = 'bwipp.upcEbadLength#5426'; //#5426
        $k[$j++] = "UPC-E must be 7 or 8 digits"; //#5426
        bwipp_raiseerror(); //#5426
    } //#5426
    var _11 = $_.barcode; //#5428
    for (var _12 = 0, _13 = _11.length; _12 < _13; _12++) { //#5432
        var _14 = $get(_11, _12); //#5432
        if ((_14 < 48) || (_14 > 57)) { //#5431
            $k[$j++] = 'bwipp.upcEbadCharacter#5430'; //#5430
            $k[$j++] = "UPC-E must contain only digits"; //#5430
            bwipp_raiseerror(); //#5430
        } //#5430
    } //#5430
    if ((($_.addon.length != 0) && ($_.addon.length != 2)) && ($_.addon.length != 5)) { //#5435
        $k[$j++] = 'bwipp.upcEbadAddOnLength#5434'; //#5434
        $k[$j++] = "Add-on for UPC-E must be 2 or 5 digits"; //#5434
        bwipp_raiseerror(); //#5434
    } //#5434
    var _19 = $get($_.barcode, 0); //#5438
    if ((_19 != 48) && (_19 != 49)) { //#5440
        $k[$j++] = 'bwipp.upcEbadNumberSystem#5439'; //#5439
        $k[$j++] = "UPC-E must have number system 0 or 1"; //#5439
        bwipp_raiseerror(); //#5439
    } //#5439
    if (!bwipp_upce.__5457__) { //#5457
        $_ = Object.create($_); //#5457
        $_.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "111", "111111"]); //#5448
        $_.barchars = "0123456789"; //#5451
        $_.mirrormaps = $a(["000111", "001011", "001101", "001110", "010011", "011001", "011100", "010101", "010110", "011010"]); //#5456
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_upce.$ctx[id] = $_[id]); //#5456
        bwipp_upce.__5457__ = 1; //#5456
        $_ = Object.getPrototypeOf($_); //#5456
    } //#5456
    for (var _1D = 0, _1E = 1; _1D < _1E; _1D++) { //#5487
        $_.upcacode = $s(11); //#5461
        if (($get($_.barcode, 6) - 48) <= 2) { //#5468
            $puti($_.upcacode, 0, $geti($_.barcode, 0, 3)); //#5463
            $puti($_.upcacode, 3, $geti($_.barcode, 6, 1)); //#5464
            $puti($_.upcacode, 4, "0000"); //#5465
            $puti($_.upcacode, 8, $geti($_.barcode, 3, 3)); //#5466
            break; //#5467
        } //#5467
        if (($get($_.barcode, 6) - 48) == 3) { //#5474
            $puti($_.upcacode, 0, $geti($_.barcode, 0, 4)); //#5470
            $puti($_.upcacode, 4, "00000"); //#5471
            $puti($_.upcacode, 9, $geti($_.barcode, 4, 2)); //#5472
            break; //#5473
        } //#5473
        if (($get($_.barcode, 6) - 48) == 4) { //#5480
            $puti($_.upcacode, 0, $geti($_.barcode, 0, 5)); //#5476
            $puti($_.upcacode, 5, "00000"); //#5477
            $puti($_.upcacode, 10, $geti($_.barcode, 5, 1)); //#5478
            break; //#5479
        } //#5479
        if (($get($_.barcode, 6) - 48) >= 5) { //#5486
            $puti($_.upcacode, 0, $geti($_.barcode, 0, 6)); //#5482
            $puti($_.upcacode, 6, "0000"); //#5483
            $puti($_.upcacode, 10, $geti($_.barcode, 6, 1)); //#5484
            break; //#5485
        } //#5485
    } //#5485
    $_.checksum = 0; //#5488
    for (var _1t = 0; _1t <= 10; _1t += 1) { //#5497
        $_.i = _1t; //#5490
        $_.barchar = $get($_.upcacode, $_.i) - 48; //#5491
        if (($_.i % 2) != 0) { //#5495
            $_.checksum = $_.checksum + $_.barchar; //#5493
        } else { //#5495
            $_.checksum = $_.checksum + ($_.barchar * 3); //#5495
        } //#5495
    } //#5495
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#5498
    if ($_.barcode.length == 8) { //#5503
        if ($get($_.barcode, 7) != ($_.checksum + 48)) { //#5502
            $k[$j++] = 'bwipp.upcEbadCheckDigit#5501'; //#5501
            $k[$j++] = "Incorrect UPC check digit provided"; //#5501
            bwipp_raiseerror(); //#5501
        } //#5501
    } //#5501
    $_.pad = $s(8); //#5504
    $puti($_.pad, 0, $_.barcode); //#5505
    $put($_.pad, 7, $_.checksum + 48); //#5506
    $_.barcode = $_.pad; //#5507
    $_.txt = $a(8); //#5508
    $put($_.txt, 0, $a([$geti($_.barcode, 0, 1), $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize - 2])); //#5509
    $_.mirrormap = $get($_.mirrormaps, $_.checksum); //#5512
    if ($get($_.barcode, 0) == 48) { //#5526
        $_.invt = $s($_.mirrormap.length); //#5516
        for (var _2V = 0, _2U = $_.mirrormap.length - 1; _2V <= _2U; _2V += 1) { //#5524
            $_.i = _2V; //#5518
            if ($get($_.mirrormap, $_.i) == 48) { //#5522
                $put($_.invt, $_.i, 49); //#5520
            } else { //#5522
                $put($_.invt, $_.i, 48); //#5522
            } //#5522
        } //#5522
        $_.mirrormap = $_.invt; //#5525
    } //#5525
    $_.sbs = $s(33); //#5528
    $puti($_.sbs, 0, $get($_.encs, 10)); //#5531
    for (var _2i = 1; _2i <= 6; _2i += 1) { //#5553
        $_.i = _2i; //#5534
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#5536
        $j--; //#5537
        $_.indx = $k[--$j].length; //#5538
        $j -= 2; //#5539
        $_.enc = $get($_.encs, $_.indx); //#5540
        if ($get($_.mirrormap, $_.i - 1) == 49) { //#5550
            $_.enclen = $_.enc.length; //#5542
            $_.revenc = $s($_.enclen); //#5543
            for (var _2z = 0, _2y = $_.enclen - 1; _2z <= _2y; _2z += 1) { //#5548
                $_.j = _2z; //#5545
                $_.char = $get($_.enc, $_.j); //#5546
                $put($_.revenc, ($_.enclen - $_.j) - 1, $_.char); //#5547
            } //#5547
            $_.enc = $_.revenc; //#5549
        } //#5549
        $puti($_.sbs, (($_.i - 1) * 4) + 3, $_.enc); //#5551
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ((($_.i - 1) * 7) + 13) + $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])); //#5552
    } //#5552
    $put($_.txt, 7, $a([$geti($_.barcode, 7, 1), ((6 * 7) + 21) + $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize - 2])); //#5555
    $puti($_.sbs, 27, $get($_.encs, 11)); //#5558
    $k[$j++] = Infinity; //#5560
    var _3X = $_.sbs; //#5560
    for (var _3Y = 0, _3Z = _3X.length; _3Y < _3Z; _3Y++) { //#5560
        $k[$j++] = $get(_3X, _3Y) - 48; //#5560
    } //#5560
    $_.sbs = $a(); //#5560
    if ($_.includetext) { //#5567
        $k[$j++] = Infinity; //#5562
        $k[$j++] = $_.height; //#5562
        $k[$j++] = $_.height; //#5562
        for (var _3f = 0, _3g = 12; _3f < _3g; _3f++) { //#5562
            $k[$j++] = $f($_.height - 0.075); //#5562
        } //#5562
        $k[$j++] = $_.height; //#5562
        $k[$j++] = $_.height; //#5562
        $k[$j++] = $_.height; //#5562
        $_.bhs = $a(); //#5562
        $k[$j++] = Infinity; //#5563
        $k[$j++] = 0; //#5563
        $k[$j++] = 0; //#5563
        for (var _3m = 0, _3n = 12; _3m < _3n; _3m++) { //#5563
            $k[$j++] = 0.075; //#5563
        } //#5563
        $k[$j++] = 0; //#5563
        $k[$j++] = 0; //#5563
        $k[$j++] = 0; //#5563
        $_.bbs = $a(); //#5563
    } else { //#5567
        $k[$j++] = Infinity; //#5565
        for (var _3p = 0, _3q = 17; _3p < _3q; _3p++) { //#5565
            $k[$j++] = $_.height; //#5565
        } //#5565
        $_.bhs = $a(); //#5565
        $k[$j++] = Infinity; //#5566
        for (var _3t = 0, _3u = 17; _3t < _3u; _3t++) { //#5566
            $k[$j++] = 0; //#5566
        } //#5566
        $_.bbs = $a(); //#5566
        $_.txt = $a([]); //#5567
    } //#5567
    $_.guardrightypos = 0; //#5569
    if ($ne($_.addon, "")) { //#5590
        $k[$j++] = Infinity; //#5573
        $k[$j++] = 'dontdraw'; //#5577
        $k[$j++] = true; //#5577
        $k[$j++] = 'includetext'; //#5577
        $k[$j++] = true; //#5577
        $k[$j++] = 'height'; //#5577
        $k[$j++] = $f($_.height - 0.15); //#5577
        $k[$j++] = 'textxoffset'; //#5577
        if ($ne($_.addontextxoffset, null)) { //#5577
            $k[$j++] = $_.addontextxoffset; //#5577
        } else { //#5577
            $k[$j++] = 51 + $_.addongap; //#5577
        } //#5577
        if ($ne($_.addontextyoffset, null)) { //#5578
            $k[$j++] = 'textyoffset'; //#5578
            $k[$j++] = $_.addontextyoffset; //#5578
        } //#5578
        $k[$j++] = 'textsize'; //#5579
        if ($ne($_.addontextsize, null)) { //#5579
            $k[$j++] = $_.addontextsize; //#5579
        } else { //#5579
            $k[$j++] = $_.textsize; //#5579
        } //#5579
        var _48 = $ne($_.addontextfont, "unset") ? $_.addontextfont : $_.textfont; //#5580
        $k[$j++] = 'textfont'; //#5580
        $k[$j++] = _48; //#5580
        $_.addopts = $d(); //#5581
        if ($_.addon.length == 2) { //#5582
            $k[$j++] = $_.addon; //#5582
            $k[$j++] = $_.addopts; //#5582
            bwipp_ean2(); //#5582
        } //#5582
        if ($_.addon.length == 5) { //#5583
            $k[$j++] = $_.addon; //#5583
            $k[$j++] = $_.addopts; //#5583
            bwipp_ean5(); //#5583
        } //#5583
        $_.addcode = $k[--$j]; //#5584
        $k[$j++] = Infinity; //#5585
        $aload($_.sbs); //#5585
        $k[$j++] = $_.addongap; //#5585
        $aload($get($_.addcode, "sbs")); //#5585
        $_.sbs = $a(); //#5585
        $k[$j++] = Infinity; //#5586
        $aload($_.bhs); //#5586
        $forall($get($_.addcode, "bhs"), function() { //#5586
            var _4P = $k[--$j]; //#5586
            $k[$j++] = $f(_4P - 0.075); //#5586
        }); //#5586
        $_.bhs = $a(); //#5586
        $k[$j++] = Infinity; //#5587
        $aload($_.bbs); //#5587
        $forall($get($_.addcode, "bbs"), function() { //#5587
            var _4U = $k[--$j]; //#5587
            $k[$j++] = $f(_4U + 0.075); //#5587
        }); //#5587
        $_.bbs = $a(); //#5587
        $k[$j++] = Infinity; //#5588
        $aload($_.txt); //#5588
        $aload($get($_.addcode, "txt")); //#5588
        $_.txt = $a(); //#5588
        $_.guardrightypos = ($_.height * 72) - 6; //#5589
    } //#5589
    $k[$j++] = Infinity; //#5593
    $k[$j++] = 'ren'; //#5600
    $k[$j++] = 'renlinear'; //#5600
    $k[$j++] = 'sbs'; //#5600
    $k[$j++] = $_.sbs; //#5600
    $k[$j++] = 'bhs'; //#5600
    $k[$j++] = $_.bhs; //#5600
    $k[$j++] = 'bbs'; //#5600
    $k[$j++] = $_.bbs; //#5600
    $k[$j++] = 'txt'; //#5600
    $k[$j++] = $_.txt; //#5600
    $k[$j++] = 'opt'; //#5600
    $k[$j++] = $_.options; //#5600
    $k[$j++] = 'guardrightpos'; //#5600
    if ($eq($_.addon, "")) { //#5600
        $k[$j++] = 9; //#5600
    } else { //#5600
        $k[$j++] = 5; //#5600
    } //#5600
    $k[$j++] = 'guardrightypos'; //#5603
    $k[$j++] = $_.guardrightypos; //#5603
    $k[$j++] = 'borderleft'; //#5603
    $k[$j++] = 9; //#5603
    $k[$j++] = 'borderright'; //#5603
    if ($eq($_.addon, "")) { //#5603
        $k[$j++] = 9; //#5603
    } else { //#5603
        $k[$j++] = 5; //#5603
    } //#5603
    $k[$j++] = 'bordertop'; //#5605
    $k[$j++] = 0; //#5605
    $k[$j++] = 'borderbottom'; //#5605
    $k[$j++] = 5; //#5605
    var _4j = $d(); //#5605
    $k[$j++] = _4j; //#5608
    if (!$_.dontdraw) { //#5608
        bwipp_renlinear(); //#5608
    } //#5608
    $_ = Object.getPrototypeOf($_); //#5610
    $_ = Object.getPrototypeOf($_); //#5612
} //bwipp_upce
function bwipp_isbn() {
    $_ = Object.create($_); //#5641
    $_.dontdraw = false; //#5644
    $_.includetext = false; //#5645
    $_.isbntextfont = 'OCR-A'; //#5646
    $_.isbntextsize = 8; //#5647
    $_.isbntextxoffset = null; //#5648
    $_.isbntextyoffset = null; //#5649
    $_.height = 1; //#5650
    $_.addongap = 12; //#5651
    $_.legacy = false; //#5652
    $k[$j++] = $_; //#5654
    bwipp_processoptions(); //#5654
    $_.options = $k[--$j]; //#5654
    $_.barcode = $k[--$j]; //#5655
    $search($_.barcode, " "); //#5658
    if ($k[--$j]) { //#5664
        $_.barcode = $k[--$j]; //#5659
        $j--; //#5660
        $_.addon = $k[--$j]; //#5661
    } else { //#5664
        $j--; //#5663
        $_.addon = ""; //#5664
    } //#5664
    if ((($_.barcode.length != 15) && ($_.barcode.length != 17)) && (($_.barcode.length != 11) && ($_.barcode.length != 13))) { //#5671
        $k[$j++] = 'bwipp.isbnBadLength#5670'; //#5670
        $k[$j++] = "ISBN-13 must be 15 or 17 characters including dashes. ISBN-10 must be 11 or 13 characters including dashes"; //#5670
        bwipp_raiseerror(); //#5670
    } //#5670
    if ((($_.addon.length != 0) && ($_.addon.length != 2)) && ($_.addon.length != 5)) { //#5674
        $k[$j++] = 'bwipp.isbnBadAddOnLength#5673'; //#5673
        $k[$j++] = "Add-on for ISBN must be 2 or 5 digits"; //#5673
        bwipp_raiseerror(); //#5673
    } //#5673
    if ($_.barcode.length >= 15) { //#5738
        var _F = $geti($_.barcode, 0, 4); //#5676
        if ($ne(_F, "978-") && $ne(_F, "979-")) { //#5678
            $k[$j++] = 'bwipp.isbn13badPrefix#5677'; //#5677
            $k[$j++] = "ISBN-13 prefix must be 978- or 979-"; //#5677
            bwipp_raiseerror(); //#5677
        } //#5677
        $_.wasdash = false; //#5679
        $_.numdash = 0; //#5679
        $_.numdigit = 0; //#5679
        var _H = $geti($_.barcode, 5, 9); //#5680
        for (var _I = 0, _J = _H.length; _I < _J; _I++) { //#5693
            var _K = $get(_H, _I); //#5693
            $k[$j++] = _K; //#5688
            if (_K == 45) { //#5688
                if ($_.wasdash) { //#5685
                    $k[$j++] = 'bwipp.isbn13adjacentDashes#5684'; //#5684
                    $k[$j++] = "ISBN-13 does not permit adjacent dashes"; //#5684
                    bwipp_raiseerror(); //#5684
                } //#5684
                $_.wasdash = true; //#5686
                $_.numdash = $_.numdash + 1; //#5687
            } //#5687
            var _N = $k[--$j]; //#5689
            if ((_N >= 48) && (_N <= 57)) { //#5692
                $_.wasdash = false; //#5690
                $_.numdigit = $_.numdigit + 1; //#5691
            } //#5691
        } //#5691
        if (($_.numdash != 2) || ($_.numdigit != 7)) { //#5696
            $k[$j++] = 'bwipp.isbn13numDashesDigits#5695'; //#5695
            $k[$j++] = "Incorrect number of dashes and digits for ISBN-13"; //#5695
            bwipp_raiseerror(); //#5695
        } //#5695
        var _S = $get($_.barcode, 14); //#5697
        if ((_S < 48) || (_S > 57)) { //#5699
            $k[$j++] = 'bwipp.isbn13character15#5698'; //#5698
            $k[$j++] = "ISBN-13 character 15 must be a digit"; //#5698
            bwipp_raiseerror(); //#5698
        } //#5698
        if ($_.barcode.length == 17) { //#5707
            if ($ne($geti($_.barcode, 15, 1), "-")) { //#5703
                $k[$j++] = 'bwipp.isbn13character16#5702'; //#5702
                $k[$j++] = "ISBN-13 penultimate character must be a dash"; //#5702
                bwipp_raiseerror(); //#5702
            } //#5702
            var _X = $get($_.barcode, 16); //#5704
            if ((_X < 48) || (_X > 57)) { //#5706
                $k[$j++] = 'bwipp.isbn13character17#5705'; //#5705
                $k[$j++] = "ISBN-13 final character must be a digit"; //#5705
                bwipp_raiseerror(); //#5705
            } //#5705
        } //#5705
    } else { //#5738
        var _Z = $get($_.barcode, 0); //#5709
        if ((_Z < 48) || (_Z > 57)) { //#5711
            $k[$j++] = 'bwipp.isbn10FirstDigit#5710'; //#5710
            $k[$j++] = "ISBN-10 first character must be a digit"; //#5710
            bwipp_raiseerror(); //#5710
        } //#5710
        $_.wasdash = false; //#5712
        $_.numdash = 0; //#5712
        $_.numdigit = 0; //#5712
        var _b = $geti($_.barcode, 1, 9); //#5713
        for (var _c = 0, _d = _b.length; _c < _d; _c++) { //#5726
            var _e = $get(_b, _c); //#5726
            $k[$j++] = _e; //#5721
            if (_e == 45) { //#5721
                if ($_.wasdash) { //#5718
                    $k[$j++] = 'bwipp.isbn10adjacentDashes#5717'; //#5717
                    $k[$j++] = "ISBN-10 does not permit adjacent dashes"; //#5717
                    bwipp_raiseerror(); //#5717
                } //#5717
                $_.wasdash = true; //#5719
                $_.numdash = $_.numdash + 1; //#5720
            } //#5720
            var _h = $k[--$j]; //#5722
            if ((_h >= 48) && (_h <= 57)) { //#5725
                $_.wasdash = false; //#5723
                $_.numdigit = $_.numdigit + 1; //#5724
            } //#5724
        } //#5724
        if (($_.numdash != 2) || ($_.numdigit != 7)) { //#5729
            $k[$j++] = 'bwipp.isbn10numDashesDigits#5728'; //#5728
            $k[$j++] = "Incorrect number of dashes and digits for ISBN-10"; //#5728
            bwipp_raiseerror(); //#5728
        } //#5728
        var _m = $get($_.barcode, 10); //#5730
        if ((_m < 48) || (_m > 57)) { //#5732
            $k[$j++] = 'bwipp.isbn10character11#5731'; //#5731
            $k[$j++] = "ISBN-10 character 11 must be a digit"; //#5731
            bwipp_raiseerror(); //#5731
        } //#5731
        if ($_.barcode.length == 13) { //#5740
            if ($ne($geti($_.barcode, 11, 1), "-")) { //#5736
                $k[$j++] = 'bwipp.isbn10character12#5735'; //#5735
                $k[$j++] = "ISBN-10 penultimate character must be a dash"; //#5735
                bwipp_raiseerror(); //#5735
            } //#5735
            var _r = $get($_.barcode, 12); //#5737
            if (((_r < 48) || (_r > 57)) && (_r != 88)) { //#5739
                $k[$j++] = 'bwipp.isbn10character13#5738'; //#5738
                $k[$j++] = "ISBN-10 final character must be a digit or X"; //#5738
                bwipp_raiseerror(); //#5738
            } //#5738
        } //#5738
    } //#5738
    $_.isbntxt = $_.barcode; //#5743
    if ($_.isbntxt.length <= 13) { //#5769
        $_.isbn = $s(10); //#5747
        $_.checksum = 0; //#5748
        $_.i = 0; //#5749
        $_.n = 0; //#5749
        for (;;) { //#5761
            $_.isbnchar = $f($get($_.isbntxt, $_.i) - 48); //#5751
            if ($_.isbnchar != -3) { //#5758
                $put($_.isbn, $_.n, $f($_.isbnchar + 48)); //#5753
                if ($_.n < 9) { //#5756
                    $_.checksum = $f($_.checksum + ((10 - $_.n) * $_.isbnchar)); //#5755
                } //#5755
                $_.n = $_.n + 1; //#5757
            } //#5757
            $_.i = $_.i + 1; //#5759
            if ($_.i == $_.isbntxt.length) { //#5760
                break; //#5760
            } //#5760
        } //#5760
        var _1B = ($f(11 - ($_.checksum % 11))) % 11; //#5762
        $k[$j++] = 'checksum'; //#5762
        $k[$j++] = _1B; //#5762
        if (_1B == 10) { //#5762
            $j--; //#5762
            $k[$j++] = 40; //#5762
        } //#5762
        var _1C = $k[--$j]; //#5762
        $_[$k[--$j]] = $f(_1C + 48); //#5762
        $_.isbn = $geti($_.isbn, 0, 9); //#5763
        if ($_.isbntxt.length == 13) { //#5768
            if ($get($_.isbntxt, 12) != $_.checksum) { //#5767
                $k[$j++] = 'bwipp.isbn10badCheckDigit#5766'; //#5766
                $k[$j++] = "Incorrect ISBN-10 check digit provided"; //#5766
                bwipp_raiseerror(); //#5766
            } //#5766
        } //#5766
    } //#5766
    if ((!$_.legacy) || ($_.isbntxt.length >= 15)) { //#5805
        if ($_.isbntxt.length <= 13) { //#5779
            $_.pad = $s(15); //#5775
            $puti($_.pad, 0, "978-"); //#5776
            $puti($_.pad, 4, $geti($_.isbntxt, 0, 11)); //#5777
            $_.isbntxt = $_.pad; //#5778
        } //#5778
        $_.isbn = $s(13); //#5782
        $_.checksum = 0; //#5783
        $_.i = 0; //#5784
        $_.n = 0; //#5784
        for (;;) { //#5796
            $_.isbnchar = $get($_.isbntxt, $_.i) - 48; //#5786
            if ($_.isbnchar != -3) { //#5793
                $put($_.isbn, $_.n, $_.isbnchar + 48); //#5788
                if ($_.n < 12) { //#5791
                    $k[$j++] = 'checksum'; //#5790
                    $k[$j++] = $_.isbnchar; //#5790
                    if (($_.n % 2) != 0) { //#5790
                        var _1e = $k[--$j]; //#5790
                        $k[$j++] = _1e * 3; //#5790
                    } //#5790
                    var _1g = $k[--$j]; //#5790
                    $_[$k[--$j]] = $f(_1g + $_.checksum); //#5790
                } //#5790
                $_.n = $_.n + 1; //#5792
            } //#5792
            $_.i = $_.i + 1; //#5794
            if ($_.i == $_.isbntxt.length) { //#5795
                break; //#5795
            } //#5795
        } //#5795
        $_.checksum = ((10 - ($_.checksum % 10)) % 10) + 48; //#5797
        $_.isbn = $geti($_.isbn, 0, 12); //#5798
        if ($_.isbntxt.length == 17) { //#5803
            if ($get($_.isbntxt, 16) != $_.checksum) { //#5802
                $k[$j++] = 'bwipp.isbn13badCheckDigit#5801'; //#5801
                $k[$j++] = "Incorrect ISBN-13 check digit provided"; //#5801
                bwipp_raiseerror(); //#5801
            } //#5801
        } //#5801
    } //#5801
    var _1u = ($_.isbn.length == 12) ? 22 : 18; //#5808
    $_.pad = $s(_1u); //#5808
    $puti($_.pad, 0, "ISBN "); //#5809
    $puti($_.pad, 5, $_.isbntxt); //#5810
    $put($_.pad, $_.pad.length - 2, 45); //#5811
    $put($_.pad, $_.pad.length - 1, $_.checksum); //#5812
    $_.isbntxt = $_.pad; //#5813
    $_.barcode = $s(12); //#5816
    if ($_.isbn.length == 9) { //#5821
        $puti($_.barcode, 0, "978"); //#5818
        $puti($_.barcode, 3, $_.isbn); //#5819
    } else { //#5821
        $puti($_.barcode, 0, $_.isbn); //#5821
    } //#5821
    if ($ne($_.addon, "")) { //#5831
        var _2E = $s((12 + $_.addon.length) + 1); //#5826
        $puti(_2E, 0, $_.barcode); //#5827
        $puti(_2E, 12, " "); //#5828
        $puti(_2E, 13, $_.addon); //#5829
        $_.barcode = _2E; //#5830
    } //#5830
    $put($_.options, "dontdraw", true); //#5834
    $put($_.options, "addongap", $_.addongap); //#5835
    $k[$j++] = 'args'; //#5836
    $k[$j++] = $_.barcode; //#5836
    $k[$j++] = $_.options; //#5836
    bwipp_ean13(); //#5836
    var _2M = $k[--$j]; //#5836
    $_[$k[--$j]] = _2M; //#5836
    if ($_.includetext) { //#5855
        if ($eq($_.isbntextxoffset, null)) { //#5842
            $k[$j++] = 'isbntextxoffset'; //#5841
            if ($_.isbn.length == 9) { //#5841
                $k[$j++] = -1; //#5841
            } else { //#5841
                $k[$j++] = -12; //#5841
            } //#5841
            var _2R = $k[--$j]; //#5841
            $_[$k[--$j]] = _2R; //#5841
        } //#5841
        if ($eq($_.isbntextyoffset, null)) { //#5845
            $_.isbntextyoffset = ($_.height * 72) + 3; //#5844
        } //#5844
        var _2W = $get($_.args, "txt") !== undefined; //#5846
        if (_2W) { //#5853
            $_.txt = $get($_.args, "txt"); //#5847
            $_.newtxt = $a($_.txt.length + 1); //#5848
            $puti($_.newtxt, 0, $_.txt); //#5849
            $put($_.newtxt, $_.newtxt.length - 1, $a([$_.isbntxt, $_.isbntextxoffset, $_.isbntextyoffset, $_.isbntextfont, $_.isbntextsize])); //#5850
            $put($_.args, "txt", $_.newtxt); //#5851
        } else { //#5853
            $put($_.args, "txt", $a([$a([$_.isbntxt, $_.isbntextxoffset, $_.isbntextyoffset, $_.isbntextfont, $_.isbntextsize])])); //#5853
        } //#5853
    } //#5853
    $put($_.args, "opt", $_.options); //#5857
    $k[$j++] = $_.args; //#5860
    if (!$_.dontdraw) { //#5860
        bwipp_renlinear(); //#5860
    } //#5860
    $_ = Object.getPrototypeOf($_); //#5862
} //bwipp_isbn
function bwipp_ismn() {
    $_ = Object.create($_); //#5891
    $_.dontdraw = false; //#5894
    $_.includetext = false; //#5895
    $_.ismntextfont = 'OCR-A'; //#5896
    $_.ismntextsize = 8; //#5897
    $_.ismntextxoffset = null; //#5898
    $_.ismntextyoffset = null; //#5899
    $_.height = 1; //#5900
    $_.addongap = 12; //#5901
    $_.legacy = false; //#5902
    $k[$j++] = $_; //#5904
    bwipp_processoptions(); //#5904
    $_.options = $k[--$j]; //#5904
    $_.barcode = $k[--$j]; //#5905
    $search($_.barcode, " "); //#5908
    if ($k[--$j]) { //#5914
        $_.barcode = $k[--$j]; //#5909
        $j--; //#5910
        $_.addon = $k[--$j]; //#5911
    } else { //#5914
        $j--; //#5913
        $_.addon = ""; //#5914
    } //#5914
    if ((($_.barcode.length != 15) && ($_.barcode.length != 17)) && (($_.barcode.length != 11) && ($_.barcode.length != 13))) { //#5921
        $k[$j++] = 'bwipp.ismnBadLength#5920'; //#5920
        $k[$j++] = "ISMN-13 must be 15 or 17 characters including dashes. ISMN-10 must be 11 or 13 characters including dashes"; //#5920
        bwipp_raiseerror(); //#5920
    } //#5920
    if ((($_.addon.length != 0) && ($_.addon.length != 2)) && ($_.addon.length != 5)) { //#5924
        $k[$j++] = 'bwipp.ismnBadAddOnLength#5923'; //#5923
        $k[$j++] = "Add-on for ISMN must be 2 or 5 digits"; //#5923
        bwipp_raiseerror(); //#5923
    } //#5923
    if ($_.barcode.length >= 15) { //#5991
        if ($ne($geti($_.barcode, 0, 4), "979-")) { //#5928
            $k[$j++] = 'bwipp.ismn13badPrefix#5927'; //#5927
            $k[$j++] = "ISMN-13 prefix must be 979-"; //#5927
            bwipp_raiseerror(); //#5927
        } //#5927
        $_.wasdash = false; //#5929
        $_.numdash = 0; //#5929
        $_.numdigit = 0; //#5929
        var _H = $geti($_.barcode, 5, 9); //#5930
        for (var _I = 0, _J = _H.length; _I < _J; _I++) { //#5943
            var _K = $get(_H, _I); //#5943
            $k[$j++] = _K; //#5938
            if (_K == 45) { //#5938
                if ($_.wasdash) { //#5935
                    $k[$j++] = 'bwipp.ismn13adjacentDashes#5934'; //#5934
                    $k[$j++] = "ISMN-13 does not permit adjacent dashes"; //#5934
                    bwipp_raiseerror(); //#5934
                } //#5934
                $_.wasdash = true; //#5936
                $_.numdash = $_.numdash + 1; //#5937
            } //#5937
            var _N = $k[--$j]; //#5939
            if ((_N >= 48) && (_N <= 57)) { //#5942
                $_.wasdash = false; //#5940
                $_.numdigit = $_.numdigit + 1; //#5941
            } //#5941
        } //#5941
        if (($_.numdash != 2) || ($_.numdigit != 7)) { //#5946
            $k[$j++] = 'bwipp.ismn13numDashesDigits#5945'; //#5945
            $k[$j++] = "Incorrect number of dashes and digits for ISMN-13"; //#5945
            bwipp_raiseerror(); //#5945
        } //#5945
        var _S = $get($_.barcode, 14); //#5947
        if ((_S < 48) || (_S > 57)) { //#5949
            $k[$j++] = 'bwipp.ismn13character15#5948'; //#5948
            $k[$j++] = "ISMN-13 character 15 must be a digit"; //#5948
            bwipp_raiseerror(); //#5948
        } //#5948
        if ($_.barcode.length == 17) { //#5957
            if ($ne($geti($_.barcode, 15, 1), "-")) { //#5953
                $k[$j++] = 'bwipp.ismn13character16#5952'; //#5952
                $k[$j++] = "ISMN-13 penultimate character must be a dash"; //#5952
                bwipp_raiseerror(); //#5952
            } //#5952
            var _X = $get($_.barcode, 16); //#5954
            if ((_X < 48) || (_X > 57)) { //#5956
                $k[$j++] = 'bwipp.ismn13character17#5955'; //#5955
                $k[$j++] = "ISMN-13 final character must be a digit"; //#5955
                bwipp_raiseerror(); //#5955
            } //#5955
        } //#5955
    } else { //#5991
        if ($ne($geti($_.barcode, 0, 2), "M-")) { //#5961
            $k[$j++] = 'bwipp.ismn10badPrefix#5960'; //#5960
            $k[$j++] = "ISMN-10 prefix must be M-"; //#5960
            bwipp_raiseerror(); //#5960
        } //#5960
        var _b = $get($_.barcode, 2); //#5962
        if ((_b < 48) || (_b > 57)) { //#5964
            $k[$j++] = 'bwipp.ismn10character3#5963'; //#5963
            $k[$j++] = "ISMN-10 character 3 must be a digit"; //#5963
            bwipp_raiseerror(); //#5963
        } //#5963
        $_.wasdash = false; //#5965
        $_.numdash = 0; //#5965
        $_.numdigit = 0; //#5965
        var _d = $geti($_.barcode, 3, 7); //#5966
        for (var _e = 0, _f = _d.length; _e < _f; _e++) { //#5979
            var _g = $get(_d, _e); //#5979
            $k[$j++] = _g; //#5974
            if (_g == 45) { //#5974
                if ($_.wasdash) { //#5971
                    $k[$j++] = 'bwipp.ismn10adjacentDashes#5970'; //#5970
                    $k[$j++] = "ISMN-10 does not permit adjacent dashes"; //#5970
                    bwipp_raiseerror(); //#5970
                } //#5970
                $_.wasdash = true; //#5972
                $_.numdash = $_.numdash + 1; //#5973
            } //#5973
            var _j = $k[--$j]; //#5975
            if ((_j >= 48) && (_j <= 57)) { //#5978
                $_.wasdash = false; //#5976
                $_.numdigit = $_.numdigit + 1; //#5977
            } //#5977
        } //#5977
        if (($_.numdash != 1) || ($_.numdigit != 6)) { //#5982
            $k[$j++] = 'bwipp.ismn10numDashesDigits#5981'; //#5981
            $k[$j++] = "Incorrect number of dashes and digits for ISMN-10"; //#5981
            bwipp_raiseerror(); //#5981
        } //#5981
        var _o = $get($_.barcode, 10); //#5983
        if ((_o < 48) || (_o > 57)) { //#5985
            $k[$j++] = 'bwipp.ismn10character11#5984'; //#5984
            $k[$j++] = "ISMN-10 character 11 must be a digit"; //#5984
            bwipp_raiseerror(); //#5984
        } //#5984
        if ($_.barcode.length == 13) { //#5993
            var _r = $geti($_.barcode, 11, 1); //#5987
            if ($ne(_r, "-")) { //#5989
                $k[$j++] = 'bwipp.ismn10character12#5988'; //#5988
                $k[$j++] = "ISMN-10 penultimate character must be a dash"; //#5988
                bwipp_raiseerror(); //#5988
            } //#5988
            var _t = $get($_.barcode, 12); //#5990
            if (((_t < 48) || (_t > 57)) && (_t != 88)) { //#5992
                $k[$j++] = 'bwipp.ismn10character13#5991'; //#5991
                $k[$j++] = "ISMN-10 final character must be a digit or X"; //#5991
                bwipp_raiseerror(); //#5991
            } //#5991
        } //#5991
    } //#5991
    $_.ismntxt = $_.barcode; //#5996
    $_.legacytxt = ""; //#5999
    if ($_.ismntxt.length <= 13) { //#6006
        $_.legacytxt = $_.ismntxt; //#6001
        $_.pad = $s($_.ismntxt.length + 4); //#6002
        $puti($_.pad, 0, "979-0-"); //#6003
        $puti($_.pad, 6, $geti($_.ismntxt, 2, $_.ismntxt.length - 2)); //#6004
        $_.ismntxt = $_.pad; //#6005
    } //#6005
    $_.ismn = $s(13); //#6009
    $_.checksum = 0; //#6010
    $_.i = 0; //#6011
    $_.n = 0; //#6011
    for (;;) { //#6027
        $_.ismnchar = $get($_.ismntxt, $_.i) - 48; //#6013
        if ($_.ismnchar != -3) { //#6024
            $put($_.ismn, $_.n, $_.ismnchar + 48); //#6015
            if ($_.n < 12) { //#6022
                if (($_.n % 2) == 0) { //#6020
                    $_.checksum = $_.ismnchar + $_.checksum; //#6018
                } else { //#6020
                    $_.checksum = ($_.ismnchar * 3) + $_.checksum; //#6020
                } //#6020
            } //#6020
            $_.n = $_.n + 1; //#6023
        } //#6023
        $_.i = $_.i + 1; //#6025
        if ($_.i == $_.ismntxt.length) { //#6026
            break; //#6026
        } //#6026
    } //#6026
    $_.checksum = ((10 - ($_.checksum % 10)) % 10) + 48; //#6028
    if (($_.barcode.length == 13) || ($_.barcode.length == 17)) { //#6035
        var _1Q = $_.barcode; //#6032
        if ($get(_1Q, _1Q.length - 1) != $_.checksum) { //#6034
            $k[$j++] = 'bwipp.ismnBadCheckDigit#6033'; //#6033
            $k[$j++] = "Incorrect ISMN check digit provided"; //#6033
            bwipp_raiseerror(); //#6033
        } //#6033
    } //#6033
    if ($_.legacy && $ne($_.legacytxt, "")) { //#6042
        $_.ismntxt = $_.legacytxt; //#6039
        $_.pad = $s(18); //#6040
    } else { //#6042
        $_.pad = $s(22); //#6042
    } //#6042
    $puti($_.pad, 0, "ISMN "); //#6044
    $puti($_.pad, 5, $_.ismntxt); //#6045
    $put($_.pad, $_.pad.length - 2, 45); //#6046
    $put($_.pad, $_.pad.length - 1, $_.checksum); //#6047
    $_.ismntxt = $_.pad; //#6048
    $_.barcode = $geti($_.ismn, 0, 12); //#6051
    if ($ne($_.addon, "")) { //#6060
        var _1l = $s((12 + $_.addon.length) + 1); //#6055
        $puti(_1l, 0, $_.barcode); //#6056
        $puti(_1l, 12, " "); //#6057
        $puti(_1l, 13, $_.addon); //#6058
        $_.barcode = _1l; //#6059
    } //#6059
    $put($_.options, "dontdraw", true); //#6063
    $put($_.options, "addongap", $_.addongap); //#6064
    $k[$j++] = 'args'; //#6065
    $k[$j++] = $_.barcode; //#6065
    $k[$j++] = $_.options; //#6065
    bwipp_ean13(); //#6065
    var _1t = $k[--$j]; //#6065
    $_[$k[--$j]] = _1t; //#6065
    if ($_.includetext) { //#6084
        if ($eq($_.ismntextxoffset, null)) { //#6071
            $k[$j++] = 'ismntextxoffset'; //#6070
            if ($_.ismntxt.length == 18) { //#6070
                $k[$j++] = -1; //#6070
            } else { //#6070
                $k[$j++] = -12; //#6070
            } //#6070
            var _1y = $k[--$j]; //#6070
            $_[$k[--$j]] = _1y; //#6070
        } //#6070
        if ($eq($_.ismntextyoffset, null)) { //#6074
            $_.ismntextyoffset = ($_.height * 72) + 3; //#6073
        } //#6073
        var _23 = $get($_.args, "txt") !== undefined; //#6075
        if (_23) { //#6082
            $_.txt = $get($_.args, "txt"); //#6076
            $_.newtxt = $a($_.txt.length + 1); //#6077
            $puti($_.newtxt, 0, $_.txt); //#6078
            $put($_.newtxt, $_.newtxt.length - 1, $a([$_.ismntxt, $_.ismntextxoffset, $_.ismntextyoffset, $_.ismntextfont, $_.ismntextsize])); //#6079
            $put($_.args, "txt", $_.newtxt); //#6080
        } else { //#6082
            $put($_.args, "txt", $a([$a([$_.ismntxt, $_.ismntextxoffset, $_.ismntextyoffset, $_.ismntextfont, $_.ismntextsize])])); //#6082
        } //#6082
    } //#6082
    $put($_.args, "opt", $_.options); //#6086
    $k[$j++] = $_.args; //#6089
    if (!$_.dontdraw) { //#6089
        bwipp_renlinear(); //#6089
    } //#6089
    $_ = Object.getPrototypeOf($_); //#6091
} //bwipp_ismn
function bwipp_issn() {
    $_ = Object.create($_); //#6120
    $_.dontdraw = false; //#6123
    $_.includetext = false; //#6124
    $_.issntextfont = 'OCR-A'; //#6125
    $_.issntextsize = 8; //#6126
    $_.issntextxoffset = null; //#6127
    $_.issntextyoffset = null; //#6128
    $_.height = 1; //#6129
    $_.addongap = 12; //#6130
    $k[$j++] = $_; //#6132
    bwipp_processoptions(); //#6132
    $_.options = $k[--$j]; //#6132
    $_.issntxt = $k[--$j]; //#6133
    $search($_.issntxt, " "); //#6136
    if ($k[--$j]) { //#6142
        $_.issntxt = $k[--$j]; //#6137
        $j--; //#6138
        $_.seqvar = $k[--$j]; //#6139
    } else { //#6142
        $j--; //#6141
        $_.seqvar = "00"; //#6142
    } //#6142
    $search($_.seqvar, " "); //#6146
    if ($k[--$j]) { //#6152
        $_.seqvar = $k[--$j]; //#6147
        $j--; //#6148
        $_.addon = $k[--$j]; //#6149
    } else { //#6152
        $j--; //#6151
        $_.addon = ""; //#6152
    } //#6152
    if (($_.issntxt.length != 8) && ($_.issntxt.length != 9)) { //#6158
        $k[$j++] = 'bwipp.issnBadLength#6157'; //#6157
        $k[$j++] = "ISSN must be 8 or 9 characters including dash, in the format XXXX-XXXX"; //#6157
        bwipp_raiseerror(); //#6157
    } //#6157
    var _D = $geti($_.issntxt, 0, 4); //#6159
    for (var _E = 0, _F = _D.length; _E < _F; _E++) { //#6163
        var _G = $get(_D, _E); //#6163
        if ((_G < 48) || (_G > 57)) { //#6162
            $k[$j++] = 'bwipp.issnFirstThroughFourthNotNumeric#6161'; //#6161
            $k[$j++] = "ISSN first four characters must be numeral characters"; //#6161
            bwipp_raiseerror(); //#6161
        } //#6161
    } //#6161
    if ($ne($geti($_.issntxt, 4, 1), "-")) { //#6166
        $k[$j++] = 'bwipp.issnNeedsDash#6165'; //#6165
        $k[$j++] = "ISSN fifth character must be a dash"; //#6165
        bwipp_raiseerror(); //#6165
    } //#6165
    var _K = $geti($_.issntxt, 5, 3); //#6167
    for (var _L = 0, _M = _K.length; _L < _M; _L++) { //#6171
        var _N = $get(_K, _L); //#6171
        if ((_N < 48) || (_N > 57)) { //#6170
            $k[$j++] = 'bwipp.issnSixthThroughEighthNotNumeric#6169'; //#6169
            $k[$j++] = "ISSN sixth through eighth characters must be numerals"; //#6169
            bwipp_raiseerror(); //#6169
        } //#6169
    } //#6169
    if ($_.issntxt.length == 9) { //#6176
        var _Q = $get($_.issntxt, 8); //#6173
        if (((_Q < 48) || (_Q > 57)) && (_Q != 88)) { //#6175
            $k[$j++] = 'bwipp.issnNinthCharacterBadFormat#6174'; //#6174
            $k[$j++] = "ISSN ninth character must be a number or the character X"; //#6174
            bwipp_raiseerror(); //#6174
        } //#6174
    } //#6174
    if ($_.seqvar.length != 2) { //#6179
        $k[$j++] = 'bwipp.issnBadSequenceVariantLength#6178'; //#6178
        $k[$j++] = "Sequence variant for ISSN must be 2 digits"; //#6178
        bwipp_raiseerror(); //#6178
    } //#6178
    $forall($_.seqvar, function() { //#6184
        var _T = $k[--$j]; //#6181
        if ((_T < 48) || (_T > 57)) { //#6183
            $k[$j++] = 'bwipp.issnSequenceVariantBadCharacter#6182'; //#6182
            $k[$j++] = "Sequence variant for ISSN must contain only digits"; //#6182
            bwipp_raiseerror(); //#6182
        } //#6182
    }); //#6182
    if ((($_.addon.length != 0) && ($_.addon.length != 2)) && ($_.addon.length != 5)) { //#6187
        $k[$j++] = 'bwipp.issnBadAddOnLength#6186'; //#6186
        $k[$j++] = "Add-on for ISSN must be 2 or 5 digits"; //#6186
        bwipp_raiseerror(); //#6186
    } //#6186
    $_.issn = $s(8); //#6190
    $_.checksum = 0; //#6191
    $_.i = 0; //#6192
    $_.n = 0; //#6192
    for (;;) { //#6204
        $_.issnchar = $f($get($_.issntxt, $_.i) - 48); //#6194
        if ($_.issnchar != -3) { //#6201
            $put($_.issn, $_.n, $f($_.issnchar + 48)); //#6196
            if ($_.n < 7) { //#6199
                $_.checksum = $f($_.checksum + ($_.issnchar * (8 - $_.n))); //#6198
            } //#6198
            $_.n = $_.n + 1; //#6200
        } //#6200
        $_.i = $_.i + 1; //#6202
        if ($_.i == $_.issntxt.length) { //#6203
            break; //#6203
        } //#6203
    } //#6203
    $_.checksum = ($f(11 - ($_.checksum % 11))) % 11; //#6205
    var _p = $f($_.checksum + 48); //#6206
    $k[$j++] = 'checksum'; //#6206
    $k[$j++] = _p; //#6206
    if (_p == 58) { //#6206
        $j--; //#6206
        $k[$j++] = 88; //#6206
    } //#6206
    var _q = $k[--$j]; //#6206
    var _r = $k[--$j]; //#6206
    $_[_r] = _q; //#6206
    if ($_.issntxt.length == 9) { //#6211
        if ($get($_.issntxt, 8) != $_.checksum) { //#6210
            $k[$j++] = 'bwipp.issnBadCheckDigit#6209'; //#6209
            $k[$j++] = "Incorrect ISSN check digit provided"; //#6209
            bwipp_raiseerror(); //#6209
        } //#6209
    } //#6209
    $_.pad = $s(14); //#6214
    $puti($_.pad, 0, "ISSN "); //#6215
    $puti($_.pad, 5, $_.issntxt); //#6216
    $put($_.pad, 13, $_.checksum); //#6217
    $_.issntxt = $_.pad; //#6218
    $_.barcode = $geti($_.issn, 0, 7); //#6221
    $_.barcode = $s(12); //#6224
    $puti($_.barcode, 0, "977"); //#6225
    $puti($_.barcode, 3, $_.issn); //#6226
    $puti($_.barcode, 10, $_.seqvar); //#6227
    if ($ne($_.addon, "")) { //#6236
        var _1D = $s((12 + $_.addon.length) + 1); //#6231
        $puti(_1D, 0, $_.barcode); //#6232
        $puti(_1D, 12, " "); //#6233
        $puti(_1D, 13, $_.addon); //#6234
        $_.barcode = _1D; //#6235
    } //#6235
    $put($_.options, "dontdraw", true); //#6239
    $put($_.options, "addongap", $_.addongap); //#6240
    $k[$j++] = 'args'; //#6241
    $k[$j++] = $_.barcode; //#6241
    $k[$j++] = $_.options; //#6241
    bwipp_ean13(); //#6241
    var _1L = $k[--$j]; //#6241
    $_[$k[--$j]] = _1L; //#6241
    if ($_.includetext) { //#6256
        if ($eq($_.issntextxoffset, null)) { //#6245
            $_.issntextxoffset = 10; //#6245
        } //#6245
        if ($eq($_.issntextyoffset, null)) { //#6246
            $_.issntextyoffset = ($_.height * 72) + 3; //#6246
        } //#6246
        var _1S = $get($_.args, "txt") !== undefined; //#6247
        if (_1S) { //#6254
            $_.txt = $get($_.args, "txt"); //#6248
            $_.newtxt = $a($_.txt.length + 1); //#6249
            $puti($_.newtxt, 0, $_.txt); //#6250
            $put($_.newtxt, $_.newtxt.length - 1, $a([$_.issntxt, $_.issntextxoffset, $_.issntextyoffset, $_.issntextfont, $_.issntextsize])); //#6251
            $put($_.args, "txt", $_.newtxt); //#6252
        } else { //#6254
            $put($_.args, "txt", $a([$a([$_.issntxt, $_.issntextxoffset, $_.issntextyoffset, $_.issntextfont, $_.issntextsize])])); //#6254
        } //#6254
    } //#6254
    $put($_.args, "opt", $_.options); //#6258
    $k[$j++] = $_.args; //#6261
    if (!$_.dontdraw) { //#6261
        bwipp_renlinear(); //#6261
    } //#6261
    $_ = Object.getPrototypeOf($_); //#6263
} //bwipp_issn
function bwipp_mands() {
    $_ = Object.create($_); //#6292
    $_.dontdraw = false; //#6295
    $_.includetext = false; //#6296
    $k[$j++] = $_; //#6298
    bwipp_processoptions(); //#6298
    $_.options = $k[--$j]; //#6298
    $_.barcode = $k[--$j]; //#6299
    $_.barlen = $_.barcode.length; //#6301
    if (($_.barlen != 7) && ($_.barlen != 8)) { //#6306
        $k[$j++] = 'bwipp.MandSbadLength#6305'; //#6305
        $k[$j++] = "M&S barcode must be 7 or 8 characters"; //#6305
        bwipp_raiseerror(); //#6305
    } //#6305
    if ($_.barlen == 7) { //#6310
        var _7 = $strcpy($s(8), "00000000"); //#6309
        $puti(_7, 1, $_.barcode); //#6309
        $_.barcode = _7; //#6309
    } //#6309
    $put($_.options, "dontdraw", true); //#6313
    $k[$j++] = 'args'; //#6314
    $k[$j++] = $_.barcode; //#6314
    $k[$j++] = $_.options; //#6314
    bwipp_ean8(); //#6314
    var _C = $k[--$j]; //#6314
    $_[$k[--$j]] = _C; //#6314
    var _F = $get($_.args, "bbs"); //#6317
    $put(_F, 10, $get(_F, 2)); //#6318
    $put(_F, 11, $get(_F, 2)); //#6319
    var _J = $get($_.args, "bhs"); //#6320
    $put(_J, 10, $get(_J, 2)); //#6321
    $put(_J, 11, $get(_J, 2)); //#6322
    $_.txt = $get($_.args, "txt"); //#6325
    if ($_.barlen == 7) { //#6333
        for (var _P = 0; _P <= 6; _P += 1) { //#6331
            var _Q = $_.txt; //#6328
            $puti($get($get(_Q, _P), 0), 0, $get($get(_Q, _P + 1), 0)); //#6330
        } //#6330
        $puti($get($get($_.txt, 7), 0), 0, " "); //#6332
    } //#6332
    var _Y = $a(10); //#6336
    $puti(_Y, 0, $_.txt); //#6336
    $_.txt = _Y; //#6336
    var _b = $get($_.txt, 0); //#6337
    $put($_.txt, 8, $arrcpy($a(_b.length), _b)); //#6337
    var _g = $get($_.txt, 0); //#6338
    $put($_.txt, 9, $arrcpy($a(_g.length), _g)); //#6338
    $put($get($_.txt, 8), 0, "M"); //#6339
    $put($get($_.txt, 8), 1, -12); //#6339
    $put($get($_.txt, 9), 0, "S"); //#6340
    var _r = $get($_.txt, 9); //#6340
    $put(_r, 1, 69); //#6340
    $put($_.args, "txt", $_.txt); //#6342
    $put($_.args, "opt", $_.options); //#6343
    $k[$j++] = $_.args; //#6346
    if (!$_.dontdraw) { //#6346
        bwipp_renlinear(); //#6346
    } //#6346
    $_ = Object.getPrototypeOf($_); //#6348
} //bwipp_mands
function bwipp_code128() {
    $_ = Object.create($_); //#6379
    $_.dontdraw = false; //#6382
    $_.includetext = false; //#6383
    $_.textfont = "OCR-B"; //#6384
    $_.textsize = 10; //#6385
    $_.textxoffset = 0; //#6386
    $_.textyoffset = -8; //#6387
    $_.height = 1; //#6388
    $_.encoding = "auto"; //#6389
    $_.raw = false; //#6390
    $_.parse = false; //#6391
    $_.parsefnc = false; //#6392
    $k[$j++] = $_; //#6394
    bwipp_processoptions(); //#6394
    $_.options = $k[--$j]; //#6394
    $_.barcode = $k[--$j]; //#6395
    bwipp_loadctx(bwipp_code128); //#6397
    if (!bwipp_code128.__6406__) { //#6406
        $_ = Object.create($_); //#6406
        $_.sta = -1; //#6401
        $_.stb = -2; //#6401
        $_.stc = -3; //#6401
        $_.swa = -4; //#6402
        $_.swb = -5; //#6402
        $_.swc = -6; //#6402
        $_.fn1 = -7; //#6403
        $_.fn2 = -8; //#6403
        $_.fn3 = -9; //#6403
        $_.fn4 = -10; //#6404
        $_.sft = -11; //#6404
        $_.stp = -12; //#6404
        $_.lka = -13; //#6405
        $_.lkc = -14; //#6405
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code128.$ctx[id] = $_[id]); //#6405
        bwipp_code128.__6406__ = 1; //#6405
        $_ = Object.getPrototypeOf($_); //#6405
    } //#6405
    var _6 = $_.fn1; //#6413
    var _B = new Map([
        ["parse", $_.parse],
        ["parsefnc", $_.parsefnc],
        ["FNC1", $_.fn1],
        ["FNC1", _6],
        ["FNC2", $_.fn2],
        ["FNC3", $_.fn3],
        ["LNKA", $_.lka],
        ["LNKC", $_.lkc]
    ]); //#6418
    $_.fncvals = _B; //#6419
    $k[$j++] = 'msg'; //#6420
    $k[$j++] = $_.barcode; //#6420
    $k[$j++] = $_.fncvals; //#6420
    bwipp_parseinput(); //#6420
    var _E = $k[--$j]; //#6420
    $_[$k[--$j]] = _E; //#6420
    $_.msglen = $_.msg.length; //#6421
    if (!bwipp_code128.__6479__) { //#6479
        $_ = Object.create($_); //#6479
        $_.charmaps = $a([$a([32, 32, "00"]), $a(["!", "!", "01"]), $a(["\"", "\"", "02"]), $a(["#", "#", "03"]), $a(["$", "$", "04"]), $a(["%", "%", "05"]), $a(["&", "&", "06"]), $a(["'", "'", "07"]), $a([40, 40, "08"]), $a([41, 41, "09"]), $a(["*", "*", "10"]), $a(["+", "+", "11"]), $a([",", ",", "12"]), $a(["-", "-", "13"]), $a([".", ".", "14"]), $a(["/", "/", "15"]), $a(["0", "0", "16"]), $a(["1", "1", "17"]), $a(["2", "2", "18"]), $a(["3", "3", "19"]), $a(["4", "4", "20"]), $a(["5", "5", "21"]), $a(["6", "6", "22"]), $a(["7", "7", "23"]), $a(["8", "8", "24"]), $a(["9", "9", "25"]), $a([":", ":", "26"]), $a([";", ";", "27"]), $a(["<", "<", "28"]), $a(["=", "=", "29"]), $a([">", ">", "30"]), $a(["?", "?", "31"]), $a(["@", "@", "32"]), $a(["A", "A", "33"]), $a(["B", "B", "34"]), $a(["C", "C", "35"]), $a(["D", "D", "36"]), $a(["E", "E", "37"]), $a(["F", "F", "38"]), $a(["G", "G", "39"]), $a(["H", "H", "40"]), $a(["I", "I", "41"]), $a(["J", "J", "42"]), $a(["K", "K", "43"]), $a(["L", "L", "44"]), $a(["M", "M", "45"]), $a(["N", "N", "46"]), $a(["O", "O", "47"]), $a(["P", "P", "48"]), $a(["Q", "Q", "49"]), $a(["R", "R", "50"]), $a(["S", "S", "51"]), $a(["T", "T", "52"]), $a(["U", "U", "53"]), $a(["V", "V", "54"]), $a(["W", "W", "55"]), $a(["X", "X", "56"]), $a(["Y", "Y", "57"]), $a(["Z", "Z", "58"]), $a(["[", "[", "59"]), $a([92, 92, "60"]), $a(["]", "]", "61"]), $a(["^", "^", "62"]), $a(["_", "_", "63"]), $a([0, "`", "64"]), $a([1, "a", "65"]), $a([2, "b", "66"]), $a([3, "c", "67"]), $a([4, "d", "68"]), $a([5, "e", "69"]), $a([6, "f", "70"]), $a([7, "g", "71"]), $a([8, "h", "72"]), $a([9, "i", "73"]), $a([10, "j", "74"]), $a([11, "k", "75"]), $a([12, "l", "76"]), $a([13, "m", "77"]), $a([14, "n", "78"]), $a([15, "o", "79"]), $a([16, "p", "80"]), $a([17, "q", "81"]), $a([18, "r", "82"]), $a([19, "s", "83"]), $a([20, "t", "84"]), $a([21, "u", "85"]), $a([22, "v", "86"]), $a([23, "w", "87"]), $a([24, "x", "88"]), $a([25, "y", "89"]), $a([26, "z", "90"]), $a([27, "{", "91"]), $a([28, "|", "92"]), $a([29, "}", "93"]), $a([30, "~", "94"]), $a([31, 127, "95"]), $a([$_.fn3, $_.fn3, "96"]), $a([$_.fn2, $_.fn2, "97"]), $a([$_.sft, $_.sft, "98"]), $a([$_.swc, $_.swc, "99"]), $a([$_.swb, $_.fn4, $_.swb]), $a([$_.fn4, $_.swa, $_.swa]), $a([$_.fn1, $_.fn1, $_.fn1]), $a([$_.sta, $_.sta, $_.sta]), $a([$_.stb, $_.stb, $_.stb]), $a([$_.stc, $_.stc, $_.stc]), $a([$_.stp, $_.stp, $_.stp])]); //#6463
        $_.charvals = $a([new Map, new Map, new Map]); //#6466
        for (var _2X = 0, _2W = $_.charmaps.length - 1; _2X <= _2W; _2X += 1) { //#6475
            $_.i = _2X; //#6468
            $_.encs = $get($_.charmaps, $_.i); //#6469
            for (var _2b = 0; _2b <= 2; _2b += 1) { //#6474
                $_.j = _2b; //#6471
                var _2e = $get($_.encs, $_.j); //#6472
                $k[$j++] = _2e; //#6472
                if ($eq($type(_2e), 'stringtype')) { //#6472
                    var _2h = $get($k[--$j], 0); //#6472
                    $k[$j++] = _2h; //#6472
                } //#6472
                $put($get($_.charvals, $_.j), $k[--$j], $_.i); //#6473
            } //#6473
        } //#6473
        $_.seta = $get($_.charvals, 0); //#6476
        $_.setb = $get($_.charvals, 1); //#6477
        $_.setc = $get($_.charvals, 2); //#6478
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code128.$ctx[id] = $_[id]); //#6478
        bwipp_code128.__6479__ = 1; //#6478
        $_ = Object.getPrototypeOf($_); //#6478
    } //#6478
    $put($_.seta, $_.lka, $get($_.seta, $_.swb)); //#6482
    $put($_.seta, $_.lkc, $get($_.seta, $_.swc)); //#6482
    $put($_.setb, $_.lka, $get($_.setb, $_.swc)); //#6483
    $put($_.setb, $_.lkc, $get($_.setb, $_.swa)); //#6483
    $put($_.setc, $_.lka, $get($_.setc, $_.swa)); //#6484
    $put($_.setc, $_.lkc, $get($_.setc, $_.swb)); //#6484
    if ($_.raw) { //#6486
        $_.encoding = "raw"; //#6486
    } //#6486
    if ($eq($_.encoding, "raw")) { //#6500
        $_.cws = $a($_.barcode.length); //#6489
        $_.i = 0; //#6490
        $_.j = 0; //#6490
        for (;;) { //#6497
            if ($_.i == $_.barcode.length) { //#6492
                break; //#6492
            } //#6492
            $_.cw = $cvi($geti($_.barcode, $_.i + 1, 3)); //#6493
            $put($_.cws, $_.j, $_.cw); //#6494
            $_.i = $_.i + 4; //#6495
            $_.j = $_.j + 1; //#6496
        } //#6496
        $_.cws = $geti($_.cws, 0, $_.j); //#6498
        $_.text = ""; //#6499
    } //#6499
    if ($eq($_.encoding, "auto")) { //#6725
        $_.text = $s($_.msglen); //#6504
        for (var _3k = 0, _3j = $_.msglen - 1; _3k <= _3j; _3k += 1) { //#6508
            $_.i = _3k; //#6506
            var _3p = $get($_.msg, $_.i); //#6507
            $k[$j++] = $_.text; //#6507
            $k[$j++] = $_.i; //#6507
            $k[$j++] = _3p; //#6507
            if (_3p < 0) { //#6507
                $j--; //#6507
                $k[$j++] = 32; //#6507
            } //#6507
            var _3q = $k[--$j]; //#6507
            var _3r = $k[--$j]; //#6507
            $put($k[--$j], _3r, _3q); //#6507
        } //#6507
        $k[$j++] = Infinity; //#6511
        for (var _3u = 0, _3v = $_.msglen; _3u < _3v; _3u++) { //#6511
            $k[$j++] = 0; //#6511
        } //#6511
        $k[$j++] = 0; //#6511
        $_.numSA = $a(); //#6511
        $k[$j++] = Infinity; //#6512
        for (var _3y = 0, _3z = $_.msglen; _3y < _3z; _3y++) { //#6512
            $k[$j++] = 0; //#6512
        } //#6512
        $k[$j++] = 0; //#6512
        $_.numEA = $a(); //#6512
        for (var _42 = $_.msglen - 1; _42 >= 0; _42 -= 1) { //#6522
            $_.i = _42; //#6514
            if ($get($_.msg, $_.i) >= 0) { //#6521
                if ($get($_.msg, $_.i) >= 128) { //#6519
                    $put($_.numEA, $_.i, $f($get($_.numEA, $_.i + 1) + 1)); //#6517
                } else { //#6519
                    $put($_.numSA, $_.i, $f($get($_.numSA, $_.i + 1) + 1)); //#6519
                } //#6519
            } //#6519
        } //#6519
        $_.ea = false; //#6525
        $_.msgtmp = $a([]); //#6525
        for (var _4M = 0, _4L = $_.msglen - 1; _4M <= _4L; _4M += 1) { //#6540
            $_.i = _4M; //#6527
            $_.c = $get($_.msg, $_.i); //#6528
            if ((!$xo($_.ea, $_.c < 128)) && ($_.c >= 0)) { //#6538
                if ($_.ea) { //#6530
                    $k[$j++] = $_.numSA; //#6530
                } else { //#6530
                    $k[$j++] = $_.numEA; //#6530
                } //#6530
                var _4Y = $get($k[--$j], $_.i); //#6530
                var _4b = ($f(_4Y + $_.i) == $_.msglen) ? 3 : 5; //#6531
                if (_4Y < _4b) { //#6536
                    $k[$j++] = Infinity; //#6533
                    $aload($_.msgtmp); //#6533
                    $k[$j++] = $_.fn4; //#6533
                    $_.msgtmp = $a(); //#6533
                } else { //#6536
                    $k[$j++] = Infinity; //#6535
                    $aload($_.msgtmp); //#6535
                    $k[$j++] = $_.fn4; //#6535
                    $k[$j++] = $_.fn4; //#6535
                    $_.msgtmp = $a(); //#6535
                    $_.ea = !$_.ea; //#6536
                } //#6536
            } //#6536
            $k[$j++] = Infinity; //#6539
            $aload($_.msgtmp); //#6539
            if ($_.c >= 0) { //#6539
                $k[$j++] = $_.c & 127; //#6539
            } else { //#6539
                $k[$j++] = $_.c; //#6539
            } //#6539
            $_.msgtmp = $a(); //#6539
        } //#6539
        $_.msg = $_.msgtmp; //#6541
        $_.msglen = $_.msg.length; //#6542
        $_.numsscr = function() {
            $_.n = 0; //#6546
            $_.s = 0; //#6546
            $_.p = $k[--$j]; //#6547
            for (;;) { //#6560
                if ($_.p >= $_.msglen) { //#6548
                    break; //#6548
                } //#6548
                var _4w = $get($_.msg, $_.p); //#6549
                var _4y = $get($_.setc, _4w) !== undefined; //#6550
                $k[$j++] = _4w; //#6550
                if (!_4y) { //#6550
                    $j--; //#6550
                    break; //#6550
                } //#6550
                var _4z = $k[--$j]; //#6551
                $k[$j++] = _4z; //#6556
                if (_4z <= -1) { //#6555
                    var _51 = $k[--$j]; //#6553
                    if ((_51 == $_.fn1) && (($_.s % 2) == 0)) { //#6553
                        $_.s = $_.s + 1; //#6553
                    } else { //#6553
                        break; //#6553
                    } //#6553
                } else { //#6555
                    $j--; //#6555
                } //#6555
                $_.n = $_.n + 1; //#6557
                $_.s = $_.s + 1; //#6558
                $_.p = $f($_.p + 1); //#6559
            } //#6559
            $k[$j++] = $_.n; //#6561
            $k[$j++] = $_.s; //#6561
        }; //#6561
        $_.enca = function() {
            $put($_.cws, $_.j, $get($_.seta, $k[--$j])); //#6566
            $_.j = $_.j + 1; //#6567
        }; //#6567
        $_.encb = function() {
            $put($_.cws, $_.j, $get($_.setb, $k[--$j])); //#6570
            $_.j = $_.j + 1; //#6571
        }; //#6571
        $_.encc = function() {
            var _5L = $k[--$j]; //#6574
            $k[$j++] = _5L; //#6578
            if ($ne($type(_5L), 'arraytype')) { //#6577
                var _5P = $get($_.setc, $k[--$j]); //#6575
                $k[$j++] = _5P; //#6575
            } else { //#6577
                $aload($k[--$j]); //#6577
                var _5R = $k[--$j]; //#6577
                var _5S = $k[--$j]; //#6577
                $k[$j++] = $f($f(_5R - 48) + ($f(_5S - 48) * 10)); //#6577
            } //#6577
            $put($_.cws, $_.j, $k[--$j]); //#6579
            $_.j = $_.j + 1; //#6580
        }; //#6580
        $_.anotb = function() {
            var _5X = $k[--$j]; //#6584
            var _5Z = $get($_.seta, _5X) !== undefined; //#6584
            var _5b = $get($_.setb, _5X) !== undefined; //#6584
            $k[$j++] = _5Z && (!_5b); //#6584
        }; //#6584
        $_.bnota = function() {
            var _5c = $k[--$j]; //#6585
            var _5e = $get($_.setb, _5c) !== undefined; //#6585
            var _5g = $get($_.seta, _5c) !== undefined; //#6585
            $k[$j++] = _5e && (!_5g); //#6585
        }; //#6585
        $k[$j++] = Infinity; //#6588
        for (var _5i = 0, _5j = $_.msg.length; _5i < _5j; _5i++) { //#6588
            $k[$j++] = 0; //#6588
        } //#6588
        $k[$j++] = 9999; //#6588
        $_.nextanotb = $a(); //#6588
        $k[$j++] = Infinity; //#6589
        for (var _5m = 0, _5n = $_.msg.length; _5m < _5n; _5m++) { //#6589
            $k[$j++] = 0; //#6589
        } //#6589
        $k[$j++] = 9999; //#6589
        $_.nextbnota = $a(); //#6589
        for (var _5q = $_.msg.length - 1; _5q >= 0; _5q -= 1) { //#6602
            $_.i = _5q; //#6591
            $k[$j++] = $get($_.msg, $_.i); //#6592
            $_.anotb(); //#6592
            if ($k[--$j]) { //#6595
                $put($_.nextanotb, $_.i, 0); //#6593
            } else { //#6595
                $put($_.nextanotb, $_.i, $f($get($_.nextanotb, $_.i + 1) + 1)); //#6595
            } //#6595
            $k[$j++] = $get($_.msg, $_.i); //#6597
            $_.bnota(); //#6597
            if ($k[--$j]) { //#6600
                $put($_.nextbnota, $_.i, 0); //#6598
            } else { //#6600
                $put($_.nextbnota, $_.i, $f($get($_.nextbnota, $_.i + 1) + 1)); //#6600
            } //#6600
        } //#6600
        $_.abeforeb = function() {
            var _6D = $k[--$j]; //#6605
            $k[$j++] = $lt($get($_.nextanotb, _6D), $get($_.nextbnota, _6D)); //#6605
        }; //#6605
        $_.bbeforea = function() {
            var _6I = $k[--$j]; //#6606
            $k[$j++] = $lt($get($_.nextbnota, _6I), $get($_.nextanotb, _6I)); //#6606
        }; //#6606
        $_.cws = $a(($_.barcode.length * 2) + 3); //#6608
        $_.j = 0; //#6611
        if ($_.msglen > 0) { //#6612
            $k[$j++] = 0; //#6612
            $_.numsscr(); //#6612
        } else { //#6612
            $k[$j++] = -1; //#6612
            $k[$j++] = -1; //#6612
        } //#6612
        $_.nums = $k[--$j]; //#6612
        $_.nchars = $k[--$j]; //#6612
        for (;;) { //#6637
            if ($_.msglen == 0) { //#6618
                $k[$j++] = $_.stb; //#6615
                $_.enca(); //#6615
                $_.cset = "setb"; //#6616
                break; //#6617
            } //#6617
            if (($_.msglen == 2) && ($_.nums == 2)) { //#6623
                $k[$j++] = $_.stc; //#6620
                $_.enca(); //#6620
                $_.cset = "setc"; //#6621
                break; //#6622
            } //#6622
            if ($_.nums >= 4) { //#6628
                $k[$j++] = $_.stc; //#6625
                $_.enca(); //#6625
                $_.cset = "setc"; //#6626
                break; //#6627
            } //#6627
            $k[$j++] = 0; //#6629
            $_.abeforeb(); //#6629
            if ($k[--$j]) { //#6633
                $k[$j++] = $_.sta; //#6630
                $_.enca(); //#6630
                $_.cset = "seta"; //#6631
                break; //#6632
            } //#6632
            $k[$j++] = $_.stb; //#6634
            $_.enca(); //#6634
            $_.cset = "setb"; //#6635
            break; //#6636
        } //#6636
        $_.i = 0; //#6640
        for (;;) { //#6723
            if ($_.i == $_.msglen) { //#6641
                break; //#6641
            } //#6641
            $k[$j++] = $_.i; //#6643
            $_.numsscr(); //#6643
            $_.nums = $k[--$j]; //#6643
            $_.nchars = $k[--$j]; //#6643
            for (;;) { //#6721
                if ((($eq($_.cset, "seta") || $eq($_.cset, "setb")) && ($_.nums >= 4)) && ($get($_.msg, $_.i) != $_.fn1)) { //#6660
                    if (($_.nums % 2) == 0) { //#6658
                        $k[$j++] = $_.swc; //#6650
                        if ($eq($_.cset, "seta")) { //#6650
                            $_.enca(); //#6650
                        } else { //#6650
                            $_.encb(); //#6650
                        } //#6650
                        $_.cset = "setc"; //#6651
                        break; //#6652
                    } else { //#6658
                        $k[$j++] = $get($_.msg, $_.i); //#6654
                        if ($eq($_.cset, "seta")) { //#6654
                            $_.enca(); //#6654
                        } else { //#6654
                            $_.encb(); //#6654
                        } //#6654
                        $_.i = $_.i + 1; //#6655
                        $k[$j++] = $_.swc; //#6656
                        if ($eq($_.cset, "seta")) { //#6656
                            $_.enca(); //#6656
                        } else { //#6656
                            $_.encb(); //#6656
                        } //#6656
                        $_.cset = "setc"; //#6657
                        break; //#6658
                    } //#6658
                } //#6658
                $k[$j++] = $eq($_.cset, "setb"); //#6661
                $k[$j++] = $get($_.msg, $_.i); //#6661
                $_.anotb(); //#6661
                var _72 = $k[--$j]; //#6661
                var _73 = $k[--$j]; //#6661
                if ((_73 && _72)) { //#6673
                    if ($_.i < ($_.msglen - 1)) { //#6669
                        $k[$j++] = $_.i + 1; //#6663
                        $_.bbeforea(); //#6663
                        if ($k[--$j]) { //#6668
                            $k[$j++] = $_.sft; //#6664
                            $_.encb(); //#6664
                            $k[$j++] = $get($_.msg, $_.i); //#6665
                            $_.enca(); //#6665
                            $_.i = $_.i + 1; //#6666
                            break; //#6667
                        } //#6667
                    } //#6667
                    $k[$j++] = $_.swa; //#6670
                    $_.encb(); //#6670
                    $_.cset = "seta"; //#6671
                    break; //#6672
                } //#6672
                $k[$j++] = $eq($_.cset, "seta"); //#6674
                $k[$j++] = $get($_.msg, $_.i); //#6674
                $_.bnota(); //#6674
                var _7I = $k[--$j]; //#6674
                var _7J = $k[--$j]; //#6674
                if ((_7J && _7I)) { //#6686
                    if ($_.i < ($_.msglen - 1)) { //#6682
                        $k[$j++] = $_.i + 1; //#6676
                        $_.abeforeb(); //#6676
                        if ($k[--$j]) { //#6681
                            $k[$j++] = $_.sft; //#6677
                            $_.enca(); //#6677
                            $k[$j++] = $get($_.msg, $_.i); //#6678
                            $_.encb(); //#6678
                            $_.i = $_.i + 1; //#6679
                            break; //#6680
                        } //#6680
                    } //#6680
                    $k[$j++] = $_.swb; //#6683
                    $_.enca(); //#6683
                    $_.cset = "setb"; //#6684
                    break; //#6685
                } //#6685
                if (($eq($_.cset, "setc") && ($_.nums < 2)) && (($get($_.msg, $_.i) > -1) || ($get($_.msg, $_.i) == $_.fn4))) { //#6696
                    $k[$j++] = $_.i; //#6688
                    $_.abeforeb(); //#6688
                    if ($k[--$j]) { //#6692
                        $k[$j++] = $_.swa; //#6689
                        $_.encc(); //#6689
                        $_.cset = "seta"; //#6690
                        break; //#6691
                    } //#6691
                    $k[$j++] = $_.swb; //#6693
                    $_.encc(); //#6693
                    $_.cset = "setb"; //#6694
                    break; //#6695
                } //#6695
                if ($eq($_.cset, "seta")) { //#6703
                    $k[$j++] = $get($_.msg, $_.i); //#6700
                    $_.enca(); //#6700
                    $_.i = $_.i + 1; //#6701
                    break; //#6702
                } //#6702
                if ($eq($_.cset, "setb")) { //#6708
                    $k[$j++] = $get($_.msg, $_.i); //#6705
                    $_.encb(); //#6705
                    $_.i = $_.i + 1; //#6706
                    break; //#6707
                } //#6707
                if ($eq($_.cset, "setc")) { //#6718
                    if ($get($_.msg, $_.i) <= -1) { //#6715
                        $k[$j++] = $get($_.msg, $_.i); //#6711
                        $_.encc(); //#6711
                        $_.i = $_.i + 1; //#6712
                    } else { //#6715
                        $k[$j++] = $geti($_.msg, $_.i, 2); //#6714
                        $_.encc(); //#6714
                        $_.i = $_.i + 2; //#6715
                    } //#6715
                    break; //#6717
                } //#6717
                break; //#6720
            } //#6720
        } //#6720
        $_.cws = $geti($_.cws, 0, $_.j); //#6724
    } //#6724
    var _87 = $a($_.j + 2); //#6728
    $puti(_87, 0, $_.cws); //#6728
    $_.cws = _87; //#6728
    $_.csum = $get($_.cws, 0); //#6729
    for (var _8D = 1, _8C = $_.j - 1; _8D <= _8C; _8D += 1) { //#6733
        $_.i = _8D; //#6731
        $_.csum = $f($_.csum + ($get($_.cws, $_.i) * $_.i)); //#6732
    } //#6732
    $_.csum = $_.csum % 103; //#6734
    $put($_.cws, $_.j, $_.csum); //#6735
    $put($_.cws, $_.j + 1, $get($_.seta, $_.stp)); //#6736
    var _8T = $get($_.options, 'debugcws') !== undefined; //#6738
    if (_8T) { //#6738
        $k[$j++] = 'bwipp.debugcws#6738'; //#6738
        $k[$j++] = $_.cws; //#6738
        bwipp_raiseerror(); //#6738
    } //#6738
    if (!bwipp_code128.__6760__) { //#6760
        $_ = Object.create($_); //#6760
        $_.encs = $a(["212222", "222122", "222221", "121223", "121322", "131222", "122213", "122312", "132212", "221213", "221312", "231212", "112232", "122132", "122231", "113222", "123122", "123221", "223211", "221132", "221231", "213212", "223112", "312131", "311222", "321122", "321221", "312212", "322112", "322211", "212123", "212321", "232121", "111323", "131123", "131321", "112313", "132113", "132311", "211313", "231113", "231311", "112133", "112331", "132131", "113123", "113321", "133121", "313121", "211331", "231131", "213113", "213311", "213131", "311123", "311321", "331121", "312113", "312311", "332111", "314111", "221411", "431111", "111224", "111422", "121124", "121421", "141122", "141221", "112214", "112412", "122114", "122411", "142112", "142211", "241211", "221114", "413111", "241112", "134111", "111242", "121142", "121241", "114212", "124112", "124211", "411212", "421112", "421211", "212141", "214121", "412121", "111143", "111341", "131141", "114113", "114311", "411113", "411311", "113141", "114131", "311141", "411131", "211412", "211214", "211232", "2331112"]); //#6759
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code128.$ctx[id] = $_[id]); //#6759
        bwipp_code128.__6760__ = 1; //#6759
        $_ = Object.getPrototypeOf($_); //#6759
    } //#6759
    $_.sbs = $s(($_.cws.length * 6) + 1); //#6763
    for (var _8b = 0, _8a = $_.cws.length - 1; _8b <= _8a; _8b += 1) { //#6767
        $_.i = _8b; //#6765
        $puti($_.sbs, $_.i * 6, $get($_.encs, $get($_.cws, $_.i))); //#6766
    } //#6766
    $k[$j++] = Infinity; //#6770
    $k[$j++] = Infinity; //#6772
    var _8j = $_.sbs; //#6772
    for (var _8k = 0, _8l = _8j.length; _8k < _8l; _8k++) { //#6772
        $k[$j++] = $get(_8j, _8k) - 48; //#6772
    } //#6772
    var _8n = $a(); //#6772
    $k[$j++] = Infinity; //#6773
    for (var _8p = 0, _8q = ~~(($_.sbs.length + 1) / 2); _8p < _8q; _8p++) { //#6773
        $k[$j++] = $_.height; //#6773
    } //#6773
    var _8s = $a(); //#6773
    $k[$j++] = Infinity; //#6774
    for (var _8u = 0, _8v = ~~(($_.sbs.length + 1) / 2); _8u < _8v; _8u++) { //#6774
        $k[$j++] = 0; //#6774
    } //#6774
    var _8w = $a(); //#6774
    $k[$j++] = 'ren'; //#6777
    $k[$j++] = 'renlinear'; //#6777
    $k[$j++] = 'sbs'; //#6777
    $k[$j++] = _8n; //#6777
    $k[$j++] = 'bhs'; //#6777
    $k[$j++] = _8s; //#6777
    $k[$j++] = 'bbs'; //#6777
    $k[$j++] = _8w; //#6777
    $k[$j++] = 'txt'; //#6777
    $k[$j++] = $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])]); //#6777
    $k[$j++] = 'textxalign'; //#6777
    $k[$j++] = "center"; //#6777
    $k[$j++] = 'opt'; //#6777
    $k[$j++] = $_.options; //#6777
    var _95 = $d(); //#6777
    $k[$j++] = _95; //#6780
    if (!$_.dontdraw) { //#6780
        bwipp_renlinear(); //#6780
    } //#6780
    $_ = Object.getPrototypeOf($_); //#6782
    $_ = Object.getPrototypeOf($_); //#6784
} //bwipp_code128
function bwipp_gs1_128() {
    $_ = Object.create($_); //#6815
    $_.dontdraw = false; //#6818
    $_.includetext = false; //#6819
    $_.textfont = "OCR-B"; //#6820
    $_.textsize = 10; //#6821
    $_.textxoffset = 0; //#6822
    $_.textyoffset = -8; //#6823
    $_.height = 0.5; //#6824
    $_.linkagea = false; //#6825
    $_.linkagec = false; //#6826
    $_.parse = false; //#6827
    $_.dontlint = false; //#6828
    $_.lintreqs = false; //#6829
    $k[$j++] = $_; //#6831
    bwipp_processoptions(); //#6831
    $_.options = $k[--$j]; //#6831
    $_.barcode = $k[--$j]; //#6832
    if ($_.linkagea && $_.linkagec) { //#6836
        $k[$j++] = 'bwipp.gs1128badLinkage#6835'; //#6835
        $k[$j++] = "linkagea and linkagec cannot be used together"; //#6835
        bwipp_raiseerror(); //#6835
    } //#6835
    $_.text = $_.barcode; //#6838
    $k[$j++] = $_.barcode; //#6840
    $k[$j++] = 'ai'; //#6840
    bwipp_gs1process(); //#6840
    $_.fncs = $k[--$j]; //#6841
    $_.vals = $k[--$j]; //#6842
    $_.ais = $k[--$j]; //#6843
    $_.fnc1 = -1; //#6846
    $_.c128 = $a([$_.fnc1]); //#6847
    for (var _D = 0, _C = $_.ais.length - 1; _D <= _C; _D += 1) { //#6863
        $_.i = _D; //#6849
        $_.ai = $get($_.ais, $_.i); //#6850
        $_.val = $get($_.vals, $_.i); //#6851
        var _N = $a(($_.c128.length + $_.ai.length) + $_.val.length); //#6852
        $puti(_N, 0, $_.c128); //#6853
        $k[$j++] = _N; //#6854
        $k[$j++] = _N; //#6854
        $k[$j++] = $_.c128.length; //#6854
        $k[$j++] = $_.ai; //#6854
        $k[$j++] = Infinity; //#6854
        var _R = $k[--$j]; //#6854
        var _S = $k[--$j]; //#6854
        $k[$j++] = _R; //#6854
        $forall(_S); //#6854
        var _T = $a(); //#6854
        var _U = $k[--$j]; //#6854
        $puti($k[--$j], _U, _T); //#6854
        var _W = $k[--$j]; //#6855
        $k[$j++] = _W; //#6855
        $k[$j++] = _W; //#6855
        $k[$j++] = $_.c128.length + $_.ai.length; //#6855
        $k[$j++] = $_.val; //#6855
        $k[$j++] = Infinity; //#6855
        var _a = $k[--$j]; //#6855
        var _b = $k[--$j]; //#6855
        $k[$j++] = _a; //#6855
        $forall(_b); //#6855
        var _c = $a(); //#6855
        var _d = $k[--$j]; //#6855
        $puti($k[--$j], _d, _c); //#6855
        $_.c128 = $k[--$j]; //#6856
        if (($_.i != ($_.ais.length - 1)) && $get($_.fncs, $_.i)) { //#6862
            var _m = $a($_.c128.length + 1); //#6858
            $puti(_m, 0, $_.c128); //#6859
            $put(_m, $_.c128.length, $_.fnc1); //#6860
            $_.c128 = _m; //#6861
        } //#6861
    } //#6861
    $_.barcode = $s(($_.c128.length + 1) * 5); //#6866
    $_.i = 0; //#6867
    $_.j = 0; //#6867
    for (;;) { //#6877
        if ($_.i == $_.c128.length) { //#6868
            break; //#6868
        } //#6868
        var _w = $get($_.c128, $_.i); //#6869
        $k[$j++] = _w; //#6874
        if (_w == $_.fnc1) { //#6873
            $j--; //#6870
            $puti($_.barcode, $_.j, "^FNC1"); //#6870
            $_.j = $_.j + 4; //#6871
        } else { //#6873
            $put($_.barcode, $_.j, $k[--$j]); //#6873
        } //#6873
        $_.i = $_.i + 1; //#6875
        $_.j = $_.j + 1; //#6876
    } //#6876
    if ($_.linkagea || $_.linkagec) { //#6881
        $k[$j++] = $_.barcode; //#6879
        $k[$j++] = $_.j; //#6879
        if ($_.linkagea) { //#6879
            $k[$j++] = "^LNKA"; //#6879
        } else { //#6879
            $k[$j++] = "^LNKC"; //#6879
        } //#6879
        var _1B = $k[--$j]; //#6879
        var _1C = $k[--$j]; //#6879
        $puti($k[--$j], _1C, _1B); //#6879
        $_.j = $_.j + 5; //#6880
    } //#6880
    $_.barcode = $geti($_.barcode, 0, $_.j); //#6882
    delete $_.options["parse"]; //#6885
    $put($_.options, "height", $_.height); //#6886
    $put($_.options, "dontdraw", true); //#6887
    $put($_.options, "parsefnc", true); //#6888
    $k[$j++] = 'args'; //#6889
    $k[$j++] = $_.barcode; //#6889
    $k[$j++] = $_.options; //#6889
    bwipp_code128(); //#6889
    var _1P = $k[--$j]; //#6889
    $_[$k[--$j]] = _1P; //#6889
    $put($_.args, "txt", $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])])); //#6891
    $put($_.args, "textxalign", "center"); //#6892
    $put($_.args, "opt", $_.options); //#6893
    $k[$j++] = $_.args; //#6896
    if (!$_.dontdraw) { //#6896
        bwipp_renlinear(); //#6896
    } //#6896
    $_ = Object.getPrototypeOf($_); //#6898
} //bwipp_gs1_128
function bwipp_ean14() {
    $_ = Object.create($_); //#6927
    $_.dontdraw = false; //#6930
    $_.includetext = false; //#6931
    $_.textfont = "OCR-B"; //#6932
    $_.textsize = 10; //#6933
    $_.textxoffset = 0; //#6934
    $_.textyoffset = -8; //#6935
    $_.height = 1; //#6936
    $k[$j++] = $_; //#6938
    bwipp_processoptions(); //#6938
    $_.options = $k[--$j]; //#6938
    $_.barcode = $k[--$j]; //#6939
    $_.text = $_.barcode; //#6942
    var _3 = $_.barcode; //#6943
    $k[$j++] = $s(_3.length); //#6944
    $k[$j++] = 0; //#6944
    $forall(_3, function() { //#6944
        var _5 = $k[--$j]; //#6944
        $k[$j++] = _5; //#6944
        if (_5 != 32) { //#6944
            var _6 = $k[--$j]; //#6944
            var _7 = $k[--$j]; //#6944
            var _8 = $k[--$j]; //#6944
            $put(_8, _7, _6); //#6944
            $k[$j++] = _8; //#6944
            $k[$j++] = $f(_7 + 1); //#6944
        } else { //#6944
            $j--; //#6944
        } //#6944
    }); //#6944
    var _9 = $k[--$j]; //#6945
    $_.barcode = $geti($k[--$j], 0, _9); //#6945
    $_.hasspace = $_.text.length != $_.barcode.length; //#6946
    if (($_.barcode.length != 17) && ($_.barcode.length != 18)) { //#6951
        $k[$j++] = 'bwipp.ean14badLength#6950'; //#6950
        $k[$j++] = "GS1-14 must be 13 or 14 digits"; //#6950
        bwipp_raiseerror(); //#6950
    } //#6950
    if ($ne($geti($_.barcode, 0, 4), "\(01\)")) { //#6954
        $k[$j++] = 'bwipp.ean14badAI#6953'; //#6953
        $k[$j++] = "GS1-14 must begin with (01) application identifier"; //#6953
        bwipp_raiseerror(); //#6953
    } //#6953
    var _K = $geti($_.barcode, 4, $_.barcode.length - 4); //#6955
    for (var _L = 0, _M = _K.length; _L < _M; _L++) { //#6959
        var _N = $get(_K, _L); //#6959
        if ((_N < 48) || (_N > 57)) { //#6958
            $k[$j++] = 'bwipp.ean14badCharacter#6957'; //#6957
            $k[$j++] = "GS1-14 must contain only digits"; //#6957
            bwipp_raiseerror(); //#6957
        } //#6957
    } //#6957
    $_.checksum = 0; //#6962
    for (var _O = 0; _O <= 12; _O += 1) { //#6966
        $_.i = _O; //#6964
        $k[$j++] = 'checksum'; //#6965
        $k[$j++] = $_.checksum; //#6965
        $k[$j++] = $f($get($_.barcode, $_.i + 4) - 48); //#6965
        if (($_.i % 2) == 0) { //#6965
            var _U = $k[--$j]; //#6965
            $k[$j++] = _U * 3; //#6965
        } //#6965
        var _V = $k[--$j]; //#6965
        var _W = $k[--$j]; //#6965
        $_[$k[--$j]] = $f(_W + _V); //#6965
    } //#6965
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#6967
    if ($_.barcode.length == 18) { //#6981
        if ($get($_.barcode, 17) != ($_.checksum + 48)) { //#6971
            $k[$j++] = 'bwipp.ean14badCheckDigit#6970'; //#6970
            $k[$j++] = "Incorrect GS1-14 check digit provided"; //#6970
            bwipp_raiseerror(); //#6970
        } //#6970
    } else { //#6981
        var _d = $s(18); //#6973
        $puti(_d, 0, $_.barcode); //#6974
        $put(_d, 17, $_.checksum + 48); //#6975
        $_.barcode = _d; //#6976
        var _i = $_.hasspace ? 2 : 1; //#6977
        var _j = $s($_.text.length + _i); //#6977
        $puti(_j, _j.length - 2, " "); //#6978
        $put(_j, _j.length - 1, $_.checksum + 48); //#6979
        $puti(_j, 0, $_.text); //#6980
        $_.text = _j; //#6981
    } //#6981
    $_.gtin = $geti($_.barcode, 4, 14); //#6983
    $_.barcode = $s(21); //#6986
    $puti($_.barcode, 0, "^FNC101"); //#6987
    var _r = $_.gtin; //#6988
    $puti($_.barcode, 7, _r); //#6988
    $put($_.options, "dontdraw", true); //#6991
    $put($_.options, "parsefnc", true); //#6992
    $k[$j++] = 'args'; //#6993
    $k[$j++] = $_.barcode; //#6993
    $k[$j++] = $_.options; //#6993
    bwipp_code128(); //#6993
    var _w = $k[--$j]; //#6993
    $_[$k[--$j]] = _w; //#6993
    $put($_.args, "txt", $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])])); //#6995
    $put($_.args, "textxalign", "center"); //#6996
    $put($_.args, "opt", $_.options); //#6997
    $k[$j++] = $_.args; //#7000
    if (!$_.dontdraw) { //#7000
        bwipp_renlinear(); //#7000
    } //#7000
    $_ = Object.getPrototypeOf($_); //#7002
} //bwipp_ean14
function bwipp_sscc18() {
    $_ = Object.create($_); //#7031
    $_.dontdraw = false; //#7034
    $_.includetext = false; //#7035
    $_.textfont = "OCR-B"; //#7036
    $_.textsize = 10; //#7037
    $_.textxoffset = 0; //#7038
    $_.textyoffset = -8; //#7039
    $_.height = 1; //#7040
    $k[$j++] = $_; //#7042
    bwipp_processoptions(); //#7042
    $_.options = $k[--$j]; //#7042
    $_.barcode = $k[--$j]; //#7043
    $_.text = $_.barcode; //#7046
    var _3 = $_.barcode; //#7047
    $k[$j++] = $s(_3.length); //#7048
    $k[$j++] = 0; //#7048
    $forall(_3, function() { //#7048
        var _5 = $k[--$j]; //#7048
        $k[$j++] = _5; //#7048
        if (_5 != 32) { //#7048
            var _6 = $k[--$j]; //#7048
            var _7 = $k[--$j]; //#7048
            var _8 = $k[--$j]; //#7048
            $put(_8, _7, _6); //#7048
            $k[$j++] = _8; //#7048
            $k[$j++] = $f(_7 + 1); //#7048
        } else { //#7048
            $j--; //#7048
        } //#7048
    }); //#7048
    var _9 = $k[--$j]; //#7049
    $_.barcode = $geti($k[--$j], 0, _9); //#7049
    $_.hasspace = $_.text.length != $_.barcode.length; //#7050
    if (($_.barcode.length != 21) && ($_.barcode.length != 22)) { //#7055
        $k[$j++] = 'bwipp.sscc18badLength#7054'; //#7054
        $k[$j++] = "SSCC-18 must be 17 or 18 digits"; //#7054
        bwipp_raiseerror(); //#7054
    } //#7054
    if ($ne($geti($_.barcode, 0, 4), "\(00\)")) { //#7058
        $k[$j++] = 'bwipp.sscc18badAI#7057'; //#7057
        $k[$j++] = "SSCC-18 must begin with (00) application identifier"; //#7057
        bwipp_raiseerror(); //#7057
    } //#7057
    var _K = $geti($_.barcode, 4, $_.barcode.length - 4); //#7059
    for (var _L = 0, _M = _K.length; _L < _M; _L++) { //#7063
        var _N = $get(_K, _L); //#7063
        if ((_N < 48) || (_N > 57)) { //#7062
            $k[$j++] = 'bwipp.sscc18badCharacter#7061'; //#7061
            $k[$j++] = "SSCC-18 must contain only digits"; //#7061
            bwipp_raiseerror(); //#7061
        } //#7061
    } //#7061
    $_.checksum = 0; //#7066
    for (var _O = 0; _O <= 16; _O += 1) { //#7070
        $_.i = _O; //#7068
        $k[$j++] = 'checksum'; //#7069
        $k[$j++] = $_.checksum; //#7069
        $k[$j++] = $f($get($_.barcode, $_.i + 4) - 48); //#7069
        if (($_.i % 2) == 0) { //#7069
            var _U = $k[--$j]; //#7069
            $k[$j++] = _U * 3; //#7069
        } //#7069
        var _V = $k[--$j]; //#7069
        var _W = $k[--$j]; //#7069
        $_[$k[--$j]] = $f(_W + _V); //#7069
    } //#7069
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#7071
    if ($_.barcode.length == 22) { //#7085
        if ($get($_.barcode, 21) != ($_.checksum + 48)) { //#7075
            $k[$j++] = 'bwipp.sscc18badCheckDigit#7074'; //#7074
            $k[$j++] = "Incorrect SSCC-18 check digit provided"; //#7074
            bwipp_raiseerror(); //#7074
        } //#7074
    } else { //#7085
        var _d = $s(22); //#7077
        $puti(_d, 0, $_.barcode); //#7078
        $put(_d, 21, $_.checksum + 48); //#7079
        $_.barcode = _d; //#7080
        var _i = $_.hasspace ? 2 : 1; //#7081
        var _j = $s($_.text.length + _i); //#7081
        $puti(_j, _j.length - 2, " "); //#7082
        $put(_j, _j.length - 1, $_.checksum + 48); //#7083
        $puti(_j, 0, $_.text); //#7084
        $_.text = _j; //#7085
    } //#7085
    $_.sscc = $geti($_.barcode, 4, 18); //#7087
    $_.barcode = $s(25); //#7090
    $puti($_.barcode, 0, "^FNC100"); //#7091
    var _r = $_.sscc; //#7092
    $puti($_.barcode, 7, _r); //#7092
    $put($_.options, "dontdraw", true); //#7095
    $put($_.options, "parsefnc", true); //#7096
    $k[$j++] = 'args'; //#7097
    $k[$j++] = $_.barcode; //#7097
    $k[$j++] = $_.options; //#7097
    bwipp_code128(); //#7097
    var _w = $k[--$j]; //#7097
    $_[$k[--$j]] = _w; //#7097
    $put($_.args, "txt", $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])])); //#7099
    $put($_.args, "textxalign", "center"); //#7100
    $put($_.args, "opt", $_.options); //#7101
    $k[$j++] = $_.args; //#7104
    if (!$_.dontdraw) { //#7104
        bwipp_renlinear(); //#7104
    } //#7104
    $_ = Object.getPrototypeOf($_); //#7106
} //bwipp_sscc18
function bwipp_code39() {
    $_ = Object.create($_); //#7136
    $_.dontdraw = false; //#7139
    $_.includecheck = false; //#7140
    $_.validatecheck = false; //#7141
    $_.includetext = false; //#7142
    $_.includecheckintext = false; //#7143
    $_.hidestars = false; //#7144
    $_.textfont = "OCR-B"; //#7145
    $_.textsize = 10; //#7146
    $_.textyoffset = -8; //#7147
    $_.height = 1; //#7148
    $k[$j++] = $_; //#7150
    bwipp_processoptions(); //#7150
    $_.options = $k[--$j]; //#7150
    $_.barcode = $k[--$j]; //#7151
    if ($eq($_.barcode, "")) { //#7155
        $k[$j++] = 'bwipp.code39emptyData#7154'; //#7154
        $k[$j++] = "The data must not be empty"; //#7154
        bwipp_raiseerror(); //#7154
    } //#7154
    bwipp_loadctx(bwipp_code39); //#7157
    if (!bwipp_code39.__7177__) { //#7177
        $_ = Object.create($_); //#7177
        $_.encs = $a(["1113313111", "3113111131", "1133111131", "3133111111", "1113311131", "3113311111", "1133311111", "1113113131", "3113113111", "1133113111", "3111131131", "1131131131", "3131131111", "1111331131", "3111331111", "1131331111", "1111133131", "3111133111", "1131133111", "1111333111", "3111111331", "1131111331", "3131111311", "1111311331", "3111311311", "1131311311", "1111113331", "3111113311", "1131113311", "1111313311", "3311111131", "1331111131", "3331111111", "1311311131", "3311311111", "1331311111", "1311113131", "3311113111", "1331113111", "1313131111", "1313111311", "1311131311", "1113131311", "1311313111"]); //#7171
        $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#7174
        $_.charvals = new Map; //#7175
        for (var _4 = 0; _4 <= 42; _4 += 1) { //#7176
            $put($_.charvals, $geti($_.barchars, _4, 1), _4); //#7176
        } //#7176
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code39.$ctx[id] = $_[id]); //#7176
        bwipp_code39.__7177__ = 1; //#7176
        $_ = Object.getPrototypeOf($_); //#7176
    } //#7176
    for (var _B = 0, _A = $_.barcode.length - 1; _B <= _A; _B += 1) { //#7184
        var _F = $get($_.charvals, $geti($_.barcode, _B, 1)) !== undefined; //#7181
        if (!_F) { //#7183
            $k[$j++] = 'bwipp.code39badCharacter#7182'; //#7182
            $k[$j++] = "Code 39 must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#7182
            bwipp_raiseerror(); //#7182
        } //#7182
    } //#7182
    $k[$j++] = 'barlen'; //#7186
    $k[$j++] = $_.barcode.length; //#7186
    if ($_.validatecheck) { //#7186
        var _I = $k[--$j]; //#7186
        $k[$j++] = $f(_I - 1); //#7186
    } //#7186
    var _J = $k[--$j]; //#7186
    $_[$k[--$j]] = _J; //#7186
    $_.checksum = 0; //#7188
    for (var _N = 0, _M = $f($_.barlen - 1); _N <= _M; _N += 1) { //#7192
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _N, 1)) + $_.checksum); //#7191
    } //#7191
    $_.checksum = $_.checksum % 43; //#7193
    if ($_.validatecheck) { //#7200
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#7197
            $k[$j++] = 'bwipp.code39badCheckDigit#7196'; //#7196
            $k[$j++] = "Incorrect Code 39 check digit provided"; //#7196
            bwipp_raiseerror(); //#7196
        } //#7196
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#7198
        $_.includecheck = true; //#7199
    } //#7199
    var _g = $_.includecheck ? 3 : 2; //#7202
    $_.sbs = $s($f($_.barlen + _g) * 10); //#7202
    var _k = $_.includecheck ? 3 : 2; //#7203
    $_.txt = $a($f($_.barlen + _k)); //#7203
    $puti($_.sbs, 0, $get($_.encs, 43)); //#7206
    if (!$_.hidestars) { //#7210
        $put($_.txt, 0, $a(["*", 0, $_.textyoffset, $_.textfont, $_.textsize])); //#7208
    } else { //#7210
        $put($_.txt, 0, $a(["", 0, $_.textyoffset, $_.textfont, $_.textsize])); //#7210
    } //#7210
    for (var _12 = 0, _11 = $f($_.barlen - 1); _12 <= _11; _12 += 1) { //#7218
        $_.i = _12; //#7214
        $_.indx = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#7215
        $puti($_.sbs, ($_.i * 10) + 10, $get($_.encs, $_.indx)); //#7216
        $put($_.txt, $_.i + 1, $a([$geti($_.barcode, $_.i, 1), ($_.i + 1) * 16, $_.textyoffset, $_.textfont, $_.textsize])); //#7217
    } //#7217
    if ($_.includecheck) { //#7239
        $puti($_.sbs, $f(($_.barlen * 10) + 10), $get($_.encs, $_.checksum)); //#7222
        if ($_.includecheckintext) { //#7226
            $put($_.txt, $f($_.barlen + 1), $a([$geti($_.barchars, $_.checksum, 1), $f($_.barlen + 1) * 16, $_.textyoffset, $_.textfont, $_.textsize])); //#7224
        } else { //#7226
            $put($_.txt, $f($_.barlen + 1), $a(["", $f($_.barlen + 1) * 16, $_.textyoffset, $_.textfont, $_.textsize])); //#7226
        } //#7226
        $puti($_.sbs, $f(($_.barlen * 10) + 20), $get($_.encs, 43)); //#7228
        if (!$_.hidestars) { //#7232
            $put($_.txt, $f($_.barlen + 2), $a(["*", $f($_.barlen + 2) * 16, $_.textyoffset, $_.textfont, $_.textsize])); //#7230
        } else { //#7232
            $put($_.txt, $f($_.barlen + 2), $a(["", $f($_.barlen + 2) * 16, $_.textyoffset, $_.textfont, $_.textsize])); //#7232
        } //#7232
    } else { //#7239
        $puti($_.sbs, $f(($_.barlen * 10) + 10), $get($_.encs, 43)); //#7235
        if (!$_.hidestars) { //#7239
            $put($_.txt, $f($_.barlen + 1), $a(["*", $f($_.barlen + 1) * 16, $_.textyoffset, $_.textfont, $_.textsize])); //#7237
        } else { //#7239
            $put($_.txt, $f($_.barlen + 1), $a(["", $f($_.barlen + 1) * 16, $_.textyoffset, $_.textfont, $_.textsize])); //#7239
        } //#7239
    } //#7239
    $k[$j++] = Infinity; //#7244
    $k[$j++] = Infinity; //#7246
    var _2N = $_.sbs; //#7246
    for (var _2O = 0, _2P = _2N.length; _2O < _2P; _2O++) { //#7246
        $k[$j++] = $get(_2N, _2O) - 48; //#7246
    } //#7246
    var _2R = $a(); //#7246
    $k[$j++] = Infinity; //#7247
    for (var _2T = 0, _2U = ~~(($_.sbs.length + 1) / 2); _2T < _2U; _2T++) { //#7247
        $k[$j++] = $_.height; //#7247
    } //#7247
    var _2W = $a(); //#7247
    $k[$j++] = Infinity; //#7248
    for (var _2Y = 0, _2Z = ~~(($_.sbs.length + 1) / 2); _2Y < _2Z; _2Y++) { //#7248
        $k[$j++] = 0; //#7248
    } //#7248
    var _2a = $a(); //#7248
    $k[$j++] = 'ren'; //#7251
    $k[$j++] = 'renlinear'; //#7251
    $k[$j++] = 'sbs'; //#7251
    $k[$j++] = _2R; //#7251
    $k[$j++] = 'bhs'; //#7251
    $k[$j++] = _2W; //#7251
    $k[$j++] = 'bbs'; //#7251
    $k[$j++] = _2a; //#7251
    if ($_.includetext) { //#7251
        $k[$j++] = 'txt'; //#7250
        $k[$j++] = $_.txt; //#7250
    } //#7250
    $k[$j++] = 'opt'; //#7252
    $k[$j++] = $_.options; //#7252
    var _2e = $d(); //#7252
    $k[$j++] = _2e; //#7255
    if (!$_.dontdraw) { //#7255
        bwipp_renlinear(); //#7255
    } //#7255
    $_ = Object.getPrototypeOf($_); //#7257
    $_ = Object.getPrototypeOf($_); //#7259
} //bwipp_code39
function bwipp_code39ext() {
    $_ = Object.create($_); //#7291
    $_.dontdraw = false; //#7294
    $_.includetext = false; //#7295
    $_.parse = false; //#7296
    $k[$j++] = $_; //#7298
    bwipp_processoptions(); //#7298
    $_.options = $k[--$j]; //#7298
    $_.barcode = $k[--$j]; //#7299
    bwipp_loadctx(bwipp_code39ext); //#7301
    var _3 = new Map([
        ["parse", $_.parse],
        ["parseonly", true],
        ["parsefnc", false]
    ]); //#7307
    $_.fncvals = _3; //#7308
    $k[$j++] = 'barcode'; //#7309
    $k[$j++] = $_.barcode; //#7309
    $k[$j++] = $_.fncvals; //#7309
    bwipp_parseinput(); //#7309
    var _6 = $k[--$j]; //#7309
    $_[$k[--$j]] = _6; //#7309
    $_.barlen = $_.barcode.length; //#7310
    delete $_.options["parse"]; //#7311
    $forall($_.barcode, function() { //#7318
        if ($k[--$j] >= 128) { //#7317
            $k[$j++] = 'bwipp.code39extBadCharacter#7316'; //#7316
            $k[$j++] = "Code 39 Extended must contain only ASCII characters"; //#7316
            bwipp_raiseerror(); //#7316
        } //#7316
    }); //#7316
    if (!bwipp_code39ext.__7332__) { //#7332
        $_ = Object.create($_); //#7332
        $_.extencs = $a
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code39ext.$ctx[id] = $_[id]); //#7331
        bwipp_code39ext.__7332__ = 1; //#7331
        $_ = Object.getPrototypeOf($_); //#7331
    } //#7331
    $_.newcode = $s($_.barlen * 2); //#7334
    $_.newtext = $s($_.barlen * 2); //#7335
    $_.j = 0; //#7336
    for (var _K = 0, _J = $_.barlen - 1; _K <= _J; _K += 1) { //#7344
        $_.i = _K; //#7338
        $_.extchar = $get($_.extencs, $get($_.barcode, $_.i)); //#7339
        $puti($_.newcode, $_.j, $_.extchar); //#7340
        var _X = $get($_.barcode, $_.i); //#7341
        $k[$j++] = $_.newtext; //#7341
        $k[$j++] = $_.j; //#7341
        $k[$j++] = _X; //#7341
        if ((_X < 32) || (_X == 127)) { //#7341
            $j--; //#7341
            $k[$j++] = 32; //#7341
        } //#7341
        var _Y = $k[--$j]; //#7341
        var _Z = $k[--$j]; //#7341
        $put($k[--$j], _Z, _Y); //#7341
        if ($_.extchar.length != 1) { //#7342
            $put($_.newtext, $_.j + 1, 32); //#7342
        } //#7342
        $_.j = $_.j + $_.extchar.length; //#7343
    } //#7343
    $_.newcode = $geti($_.newcode, 0, $_.j); //#7345
    $_.newtext = $geti($_.newtext, 0, $_.j); //#7346
    $put($_.options, "dontdraw", true); //#7349
    $k[$j++] = 'args'; //#7350
    $k[$j++] = $_.newcode; //#7350
    $k[$j++] = $_.options; //#7350
    bwipp_code39(); //#7350
    var _p = $k[--$j]; //#7350
    $_[$k[--$j]] = _p; //#7350
    if ($_.includetext) { //#7362
        $_.txt = $get($_.args, "txt"); //#7354
        for (var _w = 0, _v = $_.newtext.length - 1; _w <= _v; _w += 1) { //#7360
            $_.i = _w; //#7356
            $_.txtentry = $get($_.txt, $_.i + 1); //#7357
            $put($_.txtentry, 0, $geti($_.newtext, $_.i, 1)); //#7358
            $put($_.txt, $_.i + 1, $_.txtentry); //#7359
        } //#7359
        $put($_.args, "txt", $_.txt); //#7361
    } //#7361
    $put($_.args, "opt", $_.options); //#7363
    $k[$j++] = $_.args; //#7366
    if (!$_.dontdraw) { //#7366
        bwipp_renlinear(); //#7366
    } //#7366
    $_ = Object.getPrototypeOf($_); //#7368
    $_ = Object.getPrototypeOf($_); //#7370
} //bwipp_code39ext
function bwipp_code32() {
    $_ = Object.create($_); //#7399
    $_.dontdraw = false; //#7402
    $_.includetext = false; //#7403
    $_.textfont = "OCR-B"; //#7404
    $_.textsize = 10; //#7405
    $_.textyoffset = -8; //#7406
    $_.textxoffset = 0; //#7407
    $_.height = 1; //#7408
    $k[$j++] = $_; //#7410
    bwipp_processoptions(); //#7410
    $_.options = $k[--$j]; //#7410
    $_.barcode = $k[--$j]; //#7411
    if (($_.barcode.length != 8) && ($_.barcode.length != 9)) { //#7416
        $k[$j++] = 'bwipp.code32badLength#7415'; //#7415
        $k[$j++] = "Italian Pharmacode must be 8 or 9 digits"; //#7415
        bwipp_raiseerror(); //#7415
    } //#7415
    $forall($_.barcode, function() { //#7421
        var _5 = $k[--$j]; //#7418
        if ((_5 < 48) || (_5 > 57)) { //#7420
            $k[$j++] = 'bwipp.code32badCharacter#7419'; //#7419
            $k[$j++] = "Italian Pharmacode must contain only digits"; //#7419
            bwipp_raiseerror(); //#7419
        } //#7419
    }); //#7419
    $_.checksum = 0; //#7424
    for (var _6 = 0; _6 <= 7; _6 += 1) { //#7429
        $_.i = _6; //#7426
        $k[$j++] = $f($get($_.barcode, $_.i) - 48); //#7427
        if (($_.i % 2) != 0) { //#7427
            var _B = $k[--$j]; //#7427
            $k[$j++] = _B * 2; //#7427
        } //#7427
        var _C = $k[--$j]; //#7427
        $k[$j++] = _C; //#7427
        if (_C > 9) { //#7427
            var _D = $k[--$j]; //#7427
            $k[$j++] = $f(_D - 9); //#7427
        } //#7427
        $_.checksum = $f($k[--$j] + $_.checksum); //#7428
    } //#7428
    $_.checksum = $_.checksum % 10; //#7430
    if ($_.barcode.length == 9) { //#7435
        if ($get($_.barcode, 8) != $f($_.checksum + 48)) { //#7434
            $k[$j++] = 'bwipp.code32badCheckDigit#7433'; //#7433
            $k[$j++] = "Incorrect Italian Pharmacode check digit provided"; //#7433
            bwipp_raiseerror(); //#7433
        } //#7433
    } //#7433
    var _L = $s(10); //#7436
    $puti(_L, 0, $_.barcode); //#7437
    $put(_L, 8, $f($_.checksum + 48)); //#7438
    $_.text = _L; //#7439
    $_.val = $cvrs($s(6), $cvi($_.text), 32); //#7442
    $_.barcode = $s(6); //#7443
    for (var _S = 0; _S <= 5; _S += 1) { //#7444
        $put($_.barcode, _S, 48); //#7444
    } //#7444
    $puti($_.barcode, 6 - $_.val.length, $_.val); //#7445
    for (var _X = 0; _X <= 5; _X += 1) { //#7452
        var _Z = $get($_.barcode, _X); //#7449
        $k[$j++] = _X; //#7450
        $k[$j++] = _Z; //#7450
        $k[$j++] = _Z; //#7450
        for (var _a = 0, _b = "AEIO".length; _a < _b; _a++) { //#7450
            if ($k[--$j] >= $get("AEIO", _a)) { //#7450
                var _e = $k[--$j]; //#7450
                $k[$j++] = $f(_e + 1); //#7450
            } //#7450
            var _f = $k[--$j]; //#7450
            $k[$j++] = _f; //#7450
            $k[$j++] = _f; //#7450
        } //#7450
        $j--; //#7450
        $k[$j++] = $_.barcode; //#7451
        $r(3, 1); //#7451
        var _h = $k[--$j]; //#7451
        var _i = $k[--$j]; //#7451
        $put($k[--$j], _i, _h); //#7451
    } //#7451
    $puti($_.text, 1, $geti($_.text, 0, 9)); //#7455
    $put($_.text, 0, 65); //#7456
    $put($_.options, "dontdraw", true); //#7459
    $k[$j++] = 'args'; //#7460
    $k[$j++] = $_.barcode; //#7460
    $k[$j++] = $_.options; //#7460
    bwipp_code39(); //#7460
    var _r = $k[--$j]; //#7460
    $_[$k[--$j]] = _r; //#7460
    $put($_.args, "txt", $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])])); //#7462
    $put($_.args, "textxalign", "center"); //#7463
    $put($_.args, "opt", $_.options); //#7464
    $k[$j++] = $_.args; //#7467
    if (!$_.dontdraw) { //#7467
        bwipp_renlinear(); //#7467
    } //#7467
    $_ = Object.getPrototypeOf($_); //#7469
} //bwipp_code32
function bwipp_pzn() {
    $_ = Object.create($_); //#7498
    $_.dontdraw = false; //#7501
    $_.includetext = false; //#7502
    $_.textfont = "OCR-B"; //#7503
    $_.textsize = 10; //#7504
    $_.textyoffset = -8; //#7505
    $_.textxoffset = 0; //#7506
    $_.height = 1; //#7507
    $_.pzn8 = false; //#7508
    $k[$j++] = $_; //#7510
    bwipp_processoptions(); //#7510
    $_.options = $k[--$j]; //#7510
    $_.barcode = $k[--$j]; //#7511
    if ($_.pzn8) { //#7520
        if (($_.barcode.length != 7) && ($_.barcode.length != 8)) { //#7517
            $k[$j++] = 'bwipp.pzn8badLength#7516'; //#7516
            $k[$j++] = "PZN8 must be 7 or 8 digits"; //#7516
            bwipp_raiseerror(); //#7516
        } //#7516
    } else { //#7520
        if (($_.barcode.length != 6) && ($_.barcode.length != 7)) { //#7521
            $k[$j++] = 'bwipp.pzn7badLength#7520'; //#7520
            $k[$j++] = "PZN7 must be 6 or 7 digits"; //#7520
            bwipp_raiseerror(); //#7520
        } //#7520
    } //#7520
    $forall($_.barcode, function() { //#7527
        var _8 = $k[--$j]; //#7524
        if ((_8 < 48) || (_8 > 57)) { //#7526
            $k[$j++] = 'bwipp.pznBadCharacter#7525'; //#7525
            $k[$j++] = "PZN must contain only digits"; //#7525
            bwipp_raiseerror(); //#7525
        } //#7525
    }); //#7525
    var _A = $_.pzn8 ? 9 : 8; //#7530
    $_.msglen = _A; //#7530
    $_.checksum = 0; //#7531
    for (var _D = 0, _C = $_.msglen - 3; _D <= _C; _D += 1) { //#7536
        $_.i = _D; //#7533
        var _J = $_.pzn8 ? 1 : 2; //#7534
        $_.checksum = $f(($f($get($_.barcode, $_.i) - 48) * ($_.i + _J)) + $_.checksum); //#7535
    } //#7535
    $_.checksum = $_.checksum % 11; //#7537
    if ($_.checksum == 10) { //#7540
        $k[$j++] = 'bwipp.pznBadInputSequence#7539'; //#7539
        $k[$j++] = "Incorrect PZN input sequence provided"; //#7539
        bwipp_raiseerror(); //#7539
    } //#7539
    if ($_.barcode.length == ($_.msglen - 1)) { //#7545
        if ($get($_.barcode, $_.msglen - 2) != $f($_.checksum + 48)) { //#7544
            $k[$j++] = 'bwipp.pznBadCheckDigit#7543'; //#7543
            $k[$j++] = "Incorrect PZN check digit provided"; //#7543
            bwipp_raiseerror(); //#7543
        } //#7543
    } //#7543
    var _U = $s($_.msglen); //#7546
    $put(_U, 0, 45); //#7547
    $puti(_U, 1, $_.barcode); //#7548
    $put(_U, $_.msglen - 1, $f($_.checksum + 48)); //#7549
    $_.msg = _U; //#7550
    $put($_.options, "dontdraw", true); //#7553
    $k[$j++] = 'args'; //#7554
    $k[$j++] = $_.msg; //#7554
    $k[$j++] = $_.options; //#7554
    bwipp_code39(); //#7554
    var _b = $k[--$j]; //#7554
    $_[$k[--$j]] = _b; //#7554
    $_.text = $s($_.msglen + 5); //#7557
    $puti($_.text, 0, "PZN - "); //#7558
    $puti($_.text, 6, $geti($_.msg, 1, $_.msglen - 1)); //#7559
    var _r = $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])]); //#7561
    $put($_.args, "txt", _r); //#7561
    $put($_.args, "textxalign", "center"); //#7562
    $put($_.args, "opt", $_.options); //#7563
    $k[$j++] = $_.args; //#7566
    if (!$_.dontdraw) { //#7566
        bwipp_renlinear(); //#7566
    } //#7566
    $_ = Object.getPrototypeOf($_); //#7568
} //bwipp_pzn
function bwipp_code93() {
    $_ = Object.create($_); //#7599
    $_.dontdraw = false; //#7602
    $_.includecheck = false; //#7603
    $_.includetext = false; //#7604
    $_.textfont = "OCR-B"; //#7605
    $_.textsize = 10; //#7606
    $_.textyoffset = -8; //#7607
    $_.height = 1; //#7608
    $_.parse = false; //#7609
    $_.parsefnc = false; //#7610
    $k[$j++] = $_; //#7612
    bwipp_processoptions(); //#7612
    $_.options = $k[--$j]; //#7612
    $_.barcode = $k[--$j]; //#7613
    bwipp_loadctx(bwipp_code93); //#7615
    if (!bwipp_code93.__7643__) { //#7643
        $_ = Object.create($_); //#7643
        $_.encs = $a(["131112", "111213", "111312", "111411", "121113", "121212", "121311", "111114", "131211", "141111", "211113", "211212", "211311", "221112", "221211", "231111", "112113", "112212", "112311", "122112", "132111", "111123", "111222", "111321", "121122", "131121", "212112", "212211", "211122", "211221", "221121", "222111", "112122", "112221", "122121", "123111", "121131", "311112", "311211", "321111", "112131", "113121", "211131", "121221", "312111", "311121", "122211", "111141", "1111411"]); //#7629
        $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#7632
        $_.charvals = new Map; //#7633
        for (var _3 = 0; _3 <= 42; _3 += 1) { //#7634
            $put($_.charvals, $get($_.barchars, _3), _3); //#7634
        } //#7634
        $_.sft1 = -1; //#7636
        $_.sft2 = -2; //#7636
        $_.sft3 = -3; //#7636
        $_.sft4 = -4; //#7636
        var _7 = $_.charvals; //#7638
        $put(_7, $_.sft1, 43); //#7638
        $put($_.charvals, $_.sft2, 44); //#7639
        $put($_.charvals, $_.sft3, 45); //#7640
        $put($_.charvals, $_.sft4, 46); //#7641
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code93.$ctx[id] = $_[id]); //#7641
        bwipp_code93.__7643__ = 1; //#7641
        $_ = Object.getPrototypeOf($_); //#7641
    } //#7641
    var _M = new Map([
        ["parse", $_.parse],
        ["parsefnc", $_.parsefnc],
        ["SFT$", $_.sft1],
        ["SFT%", $_.sft2],
        ["SFT/", $_.sft3],
        ["SFT+", $_.sft4]
    ]); //#7652
    $_.fncvals = _M; //#7653
    $k[$j++] = 'msg'; //#7654
    $k[$j++] = $_.barcode; //#7654
    $k[$j++] = $_.fncvals; //#7654
    bwipp_parseinput(); //#7654
    var _P = $k[--$j]; //#7654
    $_[$k[--$j]] = _P; //#7654
    $_.msglen = $_.msg.length; //#7655
    $forall($_.msg, function() { //#7662
        var _V = $get($_.charvals, $k[--$j]) !== undefined; //#7659
        if (!_V) { //#7661
            $k[$j++] = 'bwipp.code93BadCharacter#7660'; //#7660
            $k[$j++] = "Code 93 must only contain digits, capital letters, spaces, the symbols -.$/+ and shift non-data characters"; //#7660
            bwipp_raiseerror(); //#7660
        } //#7660
    }); //#7660
    if ($_.includecheck) { //#7667
        $_.sbs = $s(($_.msglen * 6) + 25); //#7665
    } else { //#7667
        $_.sbs = $s(($_.msglen * 6) + 13); //#7667
    } //#7667
    $_.txt = $a($_.msglen); //#7669
    $puti($_.sbs, 0, $get($_.encs, 47)); //#7672
    $_.checksum1 = 0; //#7674
    $_.checksum2 = 0; //#7674
    for (var _i = 0, _h = $_.msglen - 1; _i <= _h; _i += 1) { //#7683
        $_.i = _i; //#7676
        $_.indx = $get($_.charvals, $get($_.msg, $_.i)); //#7677
        $puti($_.sbs, ($_.i * 6) + 6, $get($_.encs, $_.indx)); //#7678
        var _v = $get($_.msg, $_.i); //#7679
        $k[$j++] = 'char'; //#7679
        $k[$j++] = _v; //#7679
        if (_v < 0) { //#7679
            $j--; //#7679
            $k[$j++] = " "; //#7679
        } else { //#7679
            var _w = $s(1); //#7679
            $k[$j++] = _w; //#7679
            $k[$j++] = _w; //#7679
            $k[$j++] = 0; //#7679
            $r(4, -1); //#7679
            var _x = $k[--$j]; //#7679
            var _y = $k[--$j]; //#7679
            $put($k[--$j], _y, _x); //#7679
        } //#7679
        var _10 = $k[--$j]; //#7679
        $_[$k[--$j]] = _10; //#7679
        $put($_.txt, $_.i, $a([$_.char, ($_.i * 9) + 9, $_.textyoffset, $_.textfont, $_.textsize])); //#7680
        $_.checksum1 = $f($_.checksum1 + ((((($_.msglen - $_.i) - 1) % 20) + 1) * $_.indx)); //#7681
        $_.checksum2 = $f($_.checksum2 + (((($_.msglen - $_.i) % 15) + 1) * $_.indx)); //#7682
    } //#7682
    if ($_.includecheck) { //#7695
        $_.checksum1 = $_.checksum1 % 47; //#7687
        $_.checksum2 = $f($_.checksum2 + $_.checksum1) % 47; //#7688
        $puti($_.sbs, ($_.msglen * 6) + 6, $get($_.encs, $_.checksum1)); //#7689
        $puti($_.sbs, ($_.msglen * 6) + 12, $get($_.encs, $_.checksum2)); //#7690
        $puti($_.sbs, ($_.msglen * 6) + 18, $get($_.encs, 48)); //#7692
    } else { //#7695
        $puti($_.sbs, ($_.msglen * 6) + 6, $get($_.encs, 48)); //#7695
    } //#7695
    $k[$j++] = Infinity; //#7699
    $k[$j++] = Infinity; //#7701
    var _1e = $_.sbs; //#7701
    for (var _1f = 0, _1g = _1e.length; _1f < _1g; _1f++) { //#7701
        $k[$j++] = $get(_1e, _1f) - 48; //#7701
    } //#7701
    var _1i = $a(); //#7701
    $k[$j++] = Infinity; //#7702
    for (var _1k = 0, _1l = ~~(($_.sbs.length + 1) / 2); _1k < _1l; _1k++) { //#7702
        $k[$j++] = $_.height; //#7702
    } //#7702
    var _1n = $a(); //#7702
    $k[$j++] = Infinity; //#7703
    for (var _1p = 0, _1q = ~~(($_.sbs.length + 1) / 2); _1p < _1q; _1p++) { //#7703
        $k[$j++] = 0; //#7703
    } //#7703
    var _1r = $a(); //#7703
    $k[$j++] = 'ren'; //#7706
    $k[$j++] = 'renlinear'; //#7706
    $k[$j++] = 'sbs'; //#7706
    $k[$j++] = _1i; //#7706
    $k[$j++] = 'bhs'; //#7706
    $k[$j++] = _1n; //#7706
    $k[$j++] = 'bbs'; //#7706
    $k[$j++] = _1r; //#7706
    if ($_.includetext) { //#7706
        $k[$j++] = 'txt'; //#7705
        $k[$j++] = $_.txt; //#7705
    } //#7705
    $k[$j++] = 'opt'; //#7707
    $k[$j++] = $_.options; //#7707
    var _1v = $d(); //#7707
    $k[$j++] = _1v; //#7710
    if (!$_.dontdraw) { //#7710
        bwipp_renlinear(); //#7710
    } //#7710
    $_ = Object.getPrototypeOf($_); //#7712
    $_ = Object.getPrototypeOf($_); //#7714
} //bwipp_code93
function bwipp_code93ext() {
    $_ = Object.create($_); //#7746
    $_.dontdraw = false; //#7749
    $_.includetext = false; //#7750
    $_.parse = false; //#7751
    $k[$j++] = $_; //#7753
    bwipp_processoptions(); //#7753
    $_.options = $k[--$j]; //#7753
    $_.barcode = $k[--$j]; //#7754
    bwipp_loadctx(bwipp_code93ext); //#7756
    var _3 = new Map([
        ["parse", $_.parse],
        ["parseonly", true],
        ["parsefnc", false]
    ]); //#7762
    $_.fncvals = _3; //#7763
    $k[$j++] = 'barcode'; //#7764
    $k[$j++] = $_.barcode; //#7764
    $k[$j++] = $_.fncvals; //#7764
    bwipp_parseinput(); //#7764
    var _6 = $k[--$j]; //#7764
    var _7 = $k[--$j]; //#7764
    $_[_7] = _6; //#7764
    $_.barlen = $_.barcode.length; //#7765
    delete $_.options["parse"]; //#7766
    if (!bwipp_code93ext.__7788__) { //#7788
        $_ = Object.create($_); //#7788
        $_.extencs = $a
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code93ext.$ctx[id] = $_[id]); //#7787
        bwipp_code93ext.__7788__ = 1; //#7787
        $_ = Object.getPrototypeOf($_); //#7787
    } //#7787
    $_.newcode = $s($_.barlen * 6); //#7790
    $_.newtext = $s($_.barlen * 6); //#7791
    $_.j = 0; //#7792
    $_.k = 0; //#7792
    for (var _I = 0, _H = $_.barlen - 1; _I <= _H; _I += 1) { //#7806
        $_.i = _I; //#7794
        var _L = $get($_.barcode, $_.i); //#7795
        $k[$j++] = _L; //#7798
        if (_L > 127) { //#7798
            $j--; //#7797
            $k[$j++] = 'bwipp.code93extbadCharacter#7797'; //#7797
            $k[$j++] = "Code 93 Extended only support ASCII characters with values 0 to 127"; //#7797
            bwipp_raiseerror(); //#7797
        } //#7797
        $_.extchar = $get($_.extencs, $k[--$j]); //#7799
        $_.extlen = $_.extchar.length; //#7800
        $puti($_.newcode, $_.j, $_.extchar); //#7801
        var _X = $get($_.barcode, $_.i); //#7802
        $k[$j++] = $_.newtext; //#7802
        $k[$j++] = $_.k; //#7802
        $k[$j++] = _X; //#7802
        if ((_X < 32) || (_X == 127)) { //#7802
            $j--; //#7802
            $k[$j++] = 32; //#7802
        } //#7802
        var _Y = $k[--$j]; //#7802
        var _Z = $k[--$j]; //#7802
        $put($k[--$j], _Z, _Y); //#7802
        if ($_.extlen != 1) { //#7803
            $put($_.newtext, $_.k + 1, 32); //#7803
        } //#7803
        $_.j = $_.j + $_.extlen; //#7804
        var _i = ($_.extlen == 1) ? 1 : 2; //#7805
        $_.k = $_.k + _i; //#7805
    } //#7805
    $_.newcode = $geti($_.newcode, 0, $_.j); //#7807
    $_.newtext = $geti($_.newtext, 0, $_.k); //#7808
    $put($_.options, "dontdraw", true); //#7811
    $put($_.options, "parsefnc", true); //#7812
    $k[$j++] = 'args'; //#7813
    $k[$j++] = $_.newcode; //#7813
    $k[$j++] = $_.options; //#7813
    bwipp_code93(); //#7813
    var _t = $k[--$j]; //#7813
    $_[$k[--$j]] = _t; //#7813
    if ($_.includetext) { //#7825
        $_.txt = $get($_.args, "txt"); //#7817
        for (var _10 = 0, _z = $_.newtext.length - 1; _10 <= _z; _10 += 1) { //#7823
            $_.i = _10; //#7819
            $_.txtentry = $get($_.txt, $_.i); //#7820
            $put($_.txtentry, 0, $geti($_.newtext, $_.i, 1)); //#7821
            $put($_.txt, $_.i, $_.txtentry); //#7822
        } //#7822
        $put($_.args, "txt", $_.txt); //#7824
    } //#7824
    $put($_.args, "opt", $_.options); //#7826
    $k[$j++] = $_.args; //#7829
    if (!$_.dontdraw) { //#7829
        bwipp_renlinear(); //#7829
    } //#7829
    $_ = Object.getPrototypeOf($_); //#7831
    $_ = Object.getPrototypeOf($_); //#7833
} //bwipp_code93ext
function bwipp_interleaved2of5() {
    $_ = Object.create($_); //#7863
    $_.dontdraw = false; //#7866
    $_.includecheck = false; //#7867
    $_.includetext = false; //#7868
    $_.includecheckintext = false; //#7869
    $_.textfont = "OCR-B"; //#7870
    $_.textsize = 10; //#7871
    $_.textyoffset = -8; //#7872
    $_.height = 1; //#7873
    $k[$j++] = $_; //#7875
    bwipp_processoptions(); //#7875
    $_.options = $k[--$j]; //#7875
    $_.barcode = $k[--$j]; //#7876
    bwipp_loadctx(bwipp_interleaved2of5); //#7878
    $forall($_.barcode, function() { //#7885
        var _3 = $k[--$j]; //#7882
        if ((_3 < 48) || (_3 > 57)) { //#7884
            $k[$j++] = 'bwipp.interleaved2of5badCharacter#7883'; //#7883
            $k[$j++] = "Interleaved 2 of 5 must contain only digits"; //#7883
            bwipp_raiseerror(); //#7883
        } //#7883
    }); //#7883
    $_.barlen = $_.barcode.length; //#7887
    if (((($_.barlen % 2) == 0) && $_.includecheck) || ((($_.barlen % 2) != 0) && (!$_.includecheck))) { //#7898
        $_.pad = $s($_.barlen + 1); //#7893
        $put($_.pad, 0, 48); //#7894
        $puti($_.pad, 1, $_.barcode); //#7895
        $_.barcode = $_.pad; //#7896
        $_.barlen = $_.barlen + 1; //#7897
    } //#7897
    if ($_.includecheck) { //#7917
        $_.checksum = 0; //#7902
        for (var _J = 0, _I = $_.barlen - 1; _J <= _I; _J += 1) { //#7910
            $_.i = _J; //#7904
            if (($_.i % 2) == 0) { //#7908
                $_.checksum = $_.checksum + (($get($_.barcode, $_.i) - 48) * 3); //#7906
            } else { //#7908
                $_.checksum = $_.checksum + ($get($_.barcode, $_.i) - 48); //#7908
            } //#7908
        } //#7908
        $_.checksum = (10 - ($_.checksum % 10)) % 10; //#7911
        $_.pad = $s($_.barlen + 1); //#7912
        $puti($_.pad, 0, $_.barcode); //#7913
        $put($_.pad, $_.barlen, $_.checksum + 48); //#7914
        $_.barcode = $_.pad; //#7915
        $_.barlen = $_.barlen + 1; //#7916
    } //#7916
    if (!bwipp_interleaved2of5.__7929__) { //#7929
        $_ = Object.create($_); //#7929
        $_.encs = $a(["11221", "21112", "12112", "22111", "11212", "21211", "12211", "11122", "21121", "12121", "1111", "2111"]); //#7925
        $_.barchars = "0123456789"; //#7928
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_interleaved2of5.$ctx[id] = $_[id]); //#7928
        bwipp_interleaved2of5.__7929__ = 1; //#7928
        $_ = Object.getPrototypeOf($_); //#7928
    } //#7928
    $_.sbs = $s(($_.barlen * 5) + 8); //#7931
    $_.txt = $a($_.barlen); //#7932
    $puti($_.sbs, 0, $get($_.encs, 10)); //#7935
    for (var _o = 0, _n = $_.barlen - 1; _o <= _n; _o += 2) { //#7969
        $_.i = _o; //#7938
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#7940
        $j--; //#7941
        $_.indx = $k[--$j].length; //#7942
        $j -= 2; //#7943
        $_.enca = $get($_.encs, $_.indx); //#7944
        $search($_.barchars, $geti($_.barcode, $_.i + 1, 1)); //#7946
        $j--; //#7947
        $_.indx = $k[--$j].length; //#7948
        $j -= 2; //#7949
        $_.encb = $get($_.encs, $_.indx); //#7950
        $_.intl = $s($_.enca.length * 2); //#7953
        for (var _19 = 0, _18 = $_.enca.length - 1; _19 <= _18; _19 += 1) { //#7960
            $_.j = _19; //#7955
            $_.achar = $get($_.enca, $_.j); //#7956
            $_.bchar = $get($_.encb, $_.j); //#7957
            $put($_.intl, $_.j * 2, $_.achar); //#7958
            $put($_.intl, ($_.j * 2) + 1, $_.bchar); //#7959
        } //#7959
        $puti($_.sbs, ($_.i * 5) + 4, $_.intl); //#7962
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ($_.i * 9) + 4, $_.textyoffset, $_.textfont, $_.textsize])); //#7963
        if (($_.includecheck && (!$_.includecheckintext)) && (($_.barlen - 2) == $_.i)) { //#7967
            $put($_.txt, $_.i + 1, $a([" ", (($_.i + 1) * 9) + 4, $_.textyoffset, $_.textfont, $_.textsize])); //#7965
        } else { //#7967
            $put($_.txt, $_.i + 1, $a([$geti($_.barcode, $_.i + 1, 1), (($_.i + 1) * 9) + 4, $_.textyoffset, $_.textfont, $_.textsize])); //#7967
        } //#7967
    } //#7967
    $puti($_.sbs, ($_.barlen * 5) + 4, $get($_.encs, 11)); //#7972
    $k[$j++] = Infinity; //#7975
    $k[$j++] = Infinity; //#7977
    var _1y = $_.sbs; //#7977
    for (var _1z = 0, _20 = _1y.length; _1z < _20; _1z++) { //#7977
        $k[$j++] = $get(_1y, _1z) - 48; //#7977
    } //#7977
    var _22 = $a(); //#7977
    $k[$j++] = Infinity; //#7978
    for (var _24 = 0, _25 = ~~(($_.sbs.length + 1) / 2); _24 < _25; _24++) { //#7978
        $k[$j++] = $_.height; //#7978
    } //#7978
    var _27 = $a(); //#7978
    $k[$j++] = Infinity; //#7979
    for (var _29 = 0, _2A = ~~(($_.sbs.length + 1) / 2); _29 < _2A; _29++) { //#7979
        $k[$j++] = 0; //#7979
    } //#7979
    var _2B = $a(); //#7979
    $k[$j++] = 'ren'; //#7982
    $k[$j++] = 'renlinear'; //#7982
    $k[$j++] = 'sbs'; //#7982
    $k[$j++] = _22; //#7982
    $k[$j++] = 'bhs'; //#7982
    $k[$j++] = _27; //#7982
    $k[$j++] = 'bbs'; //#7982
    $k[$j++] = _2B; //#7982
    if ($_.includetext) { //#7982
        $k[$j++] = 'txt'; //#7981
        $k[$j++] = $_.txt; //#7981
    } //#7981
    $k[$j++] = 'barratio'; //#7985
    $k[$j++] = 2; //#7985
    $k[$j++] = 'spaceratio'; //#7985
    $k[$j++] = 2; //#7985
    $k[$j++] = 'opt'; //#7985
    $k[$j++] = $_.options; //#7985
    var _2F = $d(); //#7985
    $k[$j++] = _2F; //#7988
    if (!$_.dontdraw) { //#7988
        bwipp_renlinear(); //#7988
    } //#7988
    $_ = Object.getPrototypeOf($_); //#7990
    $_ = Object.getPrototypeOf($_); //#7992
} //bwipp_interleaved2of5
function bwipp_itf14() {
    $_ = Object.create($_); //#8021
    $_.dontdraw = false; //#8024
    $_.includetext = false; //#8025
    $_.includecheckintext = true; //#8026
    $_.textfont = "OCR-B"; //#8027
    $_.textsize = 10; //#8028
    $_.textxoffset = 0; //#8029
    $_.textyoffset = 3.5; //#8030
    $_.height = 0.5; //#8031
    $_.showborder = true; //#8032
    $_.borderwidth = 4; //#8033
    $_.borderleft = 10; //#8034
    $_.borderright = 10; //#8035
    $_.bordertop = -0.55; //#8036
    $_.borderbottom = -0.55; //#8037
    $k[$j++] = $_; //#8039
    bwipp_processoptions(); //#8039
    $_.options = $k[--$j]; //#8039
    $_.barcode = $k[--$j]; //#8040
    $_.text = $_.barcode; //#8043
    var _3 = $_.barcode; //#8044
    $k[$j++] = $s(_3.length); //#8045
    $k[$j++] = 0; //#8045
    $forall(_3, function() { //#8045
        var _5 = $k[--$j]; //#8045
        $k[$j++] = _5; //#8045
        if (_5 != 32) { //#8045
            var _6 = $k[--$j]; //#8045
            var _7 = $k[--$j]; //#8045
            var _8 = $k[--$j]; //#8045
            $put(_8, _7, _6); //#8045
            $k[$j++] = _8; //#8045
            $k[$j++] = $f(_7 + 1); //#8045
        } else { //#8045
            $j--; //#8045
        } //#8045
    }); //#8045
    var _9 = $k[--$j]; //#8046
    $_.barcode = $geti($k[--$j], 0, _9); //#8046
    $_.hasspace = $_.text.length != $_.barcode.length; //#8047
    if (($_.barcode.length != 13) && ($_.barcode.length != 14)) { //#8052
        $k[$j++] = 'bwipp.itf14badLength#8051'; //#8051
        $k[$j++] = "ITF-14 must be 13 or 14 digits"; //#8051
        bwipp_raiseerror(); //#8051
    } //#8051
    var _G = $_.barcode; //#8053
    for (var _H = 0, _I = _G.length; _H < _I; _H++) { //#8057
        var _J = $get(_G, _H); //#8057
        if ((_J < 48) || (_J > 57)) { //#8056
            $k[$j++] = 'bwipp.itf14badCharacter#8055'; //#8055
            $k[$j++] = "ITF-14 must contain only digits"; //#8055
            bwipp_raiseerror(); //#8055
        } //#8055
    } //#8055
    $_.checksum = 0; //#8060
    for (var _K = 0; _K <= 12; _K += 1) { //#8064
        $_.i = _K; //#8062
        $k[$j++] = 'checksum'; //#8063
        $k[$j++] = $_.checksum; //#8063
        $k[$j++] = $f($get($_.barcode, $_.i) - 48); //#8063
        if (($_.i % 2) == 0) { //#8063
            var _Q = $k[--$j]; //#8063
            $k[$j++] = _Q * 3; //#8063
        } //#8063
        var _R = $k[--$j]; //#8063
        var _S = $k[--$j]; //#8063
        $_[$k[--$j]] = $f(_S + _R); //#8063
    } //#8063
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#8065
    if ($_.barcode.length == 14) { //#8079
        if ($get($_.barcode, 13) != ($_.checksum + 48)) { //#8069
            $k[$j++] = 'bwipp.itf14badCheckDigit#8068'; //#8068
            $k[$j++] = "Incorrect ITF-14 check digit provided"; //#8068
            bwipp_raiseerror(); //#8068
        } //#8068
    } else { //#8079
        var _Z = $s(14); //#8071
        $puti(_Z, 0, $_.barcode); //#8072
        $put(_Z, 13, $_.checksum + 48); //#8073
        $_.barcode = _Z; //#8074
        var _e = $_.hasspace ? 2 : 1; //#8075
        var _f = $s($_.text.length + _e); //#8075
        $puti(_f, _f.length - 2, " "); //#8076
        $put(_f, _f.length - 1, $_.checksum + 48); //#8077
        $puti(_f, 0, $_.text); //#8078
        $_.text = _f; //#8079
    } //#8079
    var _i = $_.options; //#8083
    $put(_i, "dontdraw", true); //#8083
    $put($_.options, "showborder", $_.showborder); //#8084
    $put($_.options, "borderwidth", $_.borderwidth); //#8085
    $put($_.options, "borderleft", $_.borderleft); //#8086
    $put($_.options, "borderright", $_.borderright); //#8087
    var _r = $_.options; //#8088
    $put(_r, "bordertop", $_.bordertop); //#8088
    $put($_.options, "borderbottom", $_.borderbottom); //#8089
    $put($_.options, "height", $_.height); //#8090
    $put($_.options, "textyoffset", $_.textyoffset); //#8091
    $k[$j++] = 'args'; //#8092
    $k[$j++] = $_.barcode; //#8092
    $k[$j++] = $_.options; //#8092
    bwipp_interleaved2of5(); //#8092
    var _11 = $k[--$j]; //#8092
    $_[$k[--$j]] = _11; //#8092
    $put($_.args, "txt", $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])])); //#8094
    $put($_.args, "textxalign", "center"); //#8095
    $put($_.args, "opt", $_.options); //#8096
    $k[$j++] = $_.args; //#8099
    if (!$_.dontdraw) { //#8099
        bwipp_renlinear(); //#8099
    } //#8099
    $_ = Object.getPrototypeOf($_); //#8101
} //bwipp_itf14
function bwipp_identcode() {
    $_ = Object.create($_); //#8130
    $_.dontdraw = false; //#8133
    $_.includetext = false; //#8134
    $_.textfont = "OCR-B"; //#8135
    $_.textsize = 10; //#8136
    $_.textxoffset = 0; //#8137
    $_.textyoffset = -8; //#8138
    $_.height = 1; //#8139
    $k[$j++] = $_; //#8141
    bwipp_processoptions(); //#8141
    $_.options = $k[--$j]; //#8141
    $_.barcode = $k[--$j]; //#8142
    if (($_.barcode.length != 11) && ($_.barcode.length != 12)) { //#8147
        $k[$j++] = 'bwipp.identcodeBadLength#8146'; //#8146
        $k[$j++] = "Deutsche Post Identcode must be 11 or 12 digits"; //#8146
        bwipp_raiseerror(); //#8146
    } //#8146
    $forall($_.barcode, function() { //#8152
        var _5 = $k[--$j]; //#8149
        if ((_5 < 48) || (_5 > 57)) { //#8151
            $k[$j++] = 'bwipp.identcodeBadCharacter#8150'; //#8150
            $k[$j++] = "Deutsche Post Identcode must contain only digits"; //#8150
            bwipp_raiseerror(); //#8150
        } //#8150
    }); //#8150
    $_.checksum = 0; //#8155
    for (var _6 = 0; _6 <= 10; _6 += 1) { //#8159
        $_.i = _6; //#8157
        $k[$j++] = 'checksum'; //#8158
        $k[$j++] = $_.checksum; //#8158
        $k[$j++] = $f($get($_.barcode, $_.i) - 48); //#8158
        if (($_.i % 2) == 0) { //#8158
            var _C = $k[--$j]; //#8158
            $k[$j++] = _C * 4; //#8158
        } else { //#8158
            var _D = $k[--$j]; //#8158
            $k[$j++] = _D * 9; //#8158
        } //#8158
        var _E = $k[--$j]; //#8158
        var _F = $k[--$j]; //#8158
        $_[$k[--$j]] = $f(_F + _E); //#8158
    } //#8158
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#8160
    if ($_.barcode.length == 12) { //#8165
        if ($get($_.barcode, 11) != ($_.checksum + 48)) { //#8164
            $k[$j++] = 'bwipp.identcodeBadCheckDigit#8163'; //#8163
            $k[$j++] = "Incorrect Deutsche Post Identcode check digit provided"; //#8163
            bwipp_raiseerror(); //#8163
        } //#8163
    } //#8163
    var _M = $s(12); //#8166
    $puti(_M, 0, $_.barcode); //#8167
    $put(_M, 11, $_.checksum + 48); //#8168
    $_.barcode = _M; //#8169
    $_.text = $strcpy($s(16), "  .       .     "); //#8172
    $puti($_.text, 0, $geti($_.barcode, 0, 2)); //#8173
    $puti($_.text, 3, $geti($_.barcode, 2, 3)); //#8174
    $puti($_.text, 7, $geti($_.barcode, 5, 3)); //#8175
    $puti($_.text, 11, $geti($_.barcode, 8, 3)); //#8176
    $puti($_.text, 15, $geti($_.barcode, 11, 1)); //#8177
    $put($_.options, "dontdraw", true); //#8180
    $put($_.options, "includecheck", false); //#8181
    var _i = $_.barcode; //#8182
    $k[$j++] = 'args'; //#8182
    $k[$j++] = _i; //#8182
    $k[$j++] = $_.options; //#8182
    bwipp_interleaved2of5(); //#8182
    var _k = $k[--$j]; //#8182
    $_[$k[--$j]] = _k; //#8182
    var _r = $_.textsize; //#8184
    $put($_.args, "txt", $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, _r])])); //#8184
    $put($_.args, "textxalign", "center"); //#8185
    $put($_.args, "opt", $_.options); //#8186
    $k[$j++] = $_.args; //#8189
    if (!$_.dontdraw) { //#8189
        bwipp_renlinear(); //#8189
    } //#8189
    $_ = Object.getPrototypeOf($_); //#8191
} //bwipp_identcode
function bwipp_leitcode() {
    $_ = Object.create($_); //#8220
    $_.dontdraw = false; //#8223
    $_.includetext = false; //#8224
    $_.textfont = "OCR-B"; //#8225
    $_.textsize = 10; //#8226
    $_.textxoffset = 0; //#8227
    $_.textyoffset = -8; //#8228
    $_.height = 1; //#8229
    $k[$j++] = $_; //#8231
    bwipp_processoptions(); //#8231
    $_.options = $k[--$j]; //#8231
    $_.barcode = $k[--$j]; //#8232
    if (($_.barcode.length != 13) && ($_.barcode.length != 14)) { //#8237
        $k[$j++] = 'bwipp.leitcodeBadLength#8236'; //#8236
        $k[$j++] = "Deutsche Post Leitcode must be 13 or 14 digits"; //#8236
        bwipp_raiseerror(); //#8236
    } //#8236
    $forall($_.barcode, function() { //#8242
        var _5 = $k[--$j]; //#8239
        if ((_5 < 48) || (_5 > 57)) { //#8241
            $k[$j++] = 'bwipp.leitcodeBadCharacter#8240'; //#8240
            $k[$j++] = "Deutsche Post Leitcode must contain only digits"; //#8240
            bwipp_raiseerror(); //#8240
        } //#8240
    }); //#8240
    $_.checksum = 0; //#8245
    for (var _6 = 0; _6 <= 12; _6 += 1) { //#8249
        $_.i = _6; //#8247
        $k[$j++] = 'checksum'; //#8248
        $k[$j++] = $_.checksum; //#8248
        $k[$j++] = $f($get($_.barcode, $_.i) - 48); //#8248
        if (($_.i % 2) == 0) { //#8248
            var _C = $k[--$j]; //#8248
            $k[$j++] = _C * 4; //#8248
        } else { //#8248
            var _D = $k[--$j]; //#8248
            $k[$j++] = _D * 9; //#8248
        } //#8248
        var _E = $k[--$j]; //#8248
        var _F = $k[--$j]; //#8248
        $_[$k[--$j]] = $f(_F + _E); //#8248
    } //#8248
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#8250
    if ($_.barcode.length == 14) { //#8255
        if ($get($_.barcode, 13) != ($_.checksum + 48)) { //#8254
            $k[$j++] = 'bwipp.leitcodeBadCheckDigit#8253'; //#8253
            $k[$j++] = "Incorrect Deutsche Post Leitcode check digit provided"; //#8253
            bwipp_raiseerror(); //#8253
        } //#8253
    } //#8253
    var _M = $s(14); //#8256
    $puti(_M, 0, $_.barcode); //#8257
    $put(_M, 13, $_.checksum + 48); //#8258
    $_.barcode = _M; //#8259
    $_.text = $strcpy($s(18), "     .   .   .    "); //#8262
    $puti($_.text, 0, $geti($_.barcode, 0, 5)); //#8263
    $puti($_.text, 6, $geti($_.barcode, 5, 3)); //#8264
    $puti($_.text, 10, $geti($_.barcode, 8, 3)); //#8265
    $puti($_.text, 14, $geti($_.barcode, 11, 2)); //#8266
    $puti($_.text, 17, $geti($_.barcode, 13, 1)); //#8267
    $put($_.options, "dontdraw", true); //#8270
    $put($_.options, "includecheck", false); //#8271
    var _i = $_.barcode; //#8272
    $k[$j++] = 'args'; //#8272
    $k[$j++] = _i; //#8272
    $k[$j++] = $_.options; //#8272
    bwipp_interleaved2of5(); //#8272
    var _k = $k[--$j]; //#8272
    $_[$k[--$j]] = _k; //#8272
    var _r = $_.textsize; //#8274
    $put($_.args, "txt", $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, _r])])); //#8274
    $put($_.args, "textxalign", "center"); //#8275
    $put($_.args, "opt", $_.options); //#8276
    $k[$j++] = $_.args; //#8279
    if (!$_.dontdraw) { //#8279
        bwipp_renlinear(); //#8279
    } //#8279
    $_ = Object.getPrototypeOf($_); //#8281
} //bwipp_leitcode
function bwipp_databaromni() {
    $_ = Object.create($_); //#8312
    $_.dontdraw = false; //#8315
    $_.height = 33 / 72; //#8316
    $_.linkage = false; //#8317
    $_.format = "omni"; //#8318
    $_.barxmult = 33; //#8319
    $k[$j++] = $_; //#8321
    bwipp_processoptions(); //#8321
    $_.options = $k[--$j]; //#8321
    $_.barcode = $k[--$j]; //#8322
    if (($_.barcode.length != 17) && ($_.barcode.length != 18)) { //#8326
        $k[$j++] = 'bwipp.databaromniBadLength#8325'; //#8325
        $k[$j++] = "GS1 DataBar Omnidirectional must be 13 or 14 digits"; //#8325
        bwipp_raiseerror(); //#8325
    } //#8325
    if ($ne($geti($_.barcode, 0, 4), "\(01\)")) { //#8329
        $k[$j++] = 'bwipp.databaromniBadAI#8328'; //#8328
        $k[$j++] = "GS1 DataBar Omnidirectional must begin with (01) application identifier"; //#8328
        bwipp_raiseerror(); //#8328
    } //#8328
    var _8 = $geti($_.barcode, 4, $_.barcode.length - 4); //#8330
    for (var _9 = 0, _A = _8.length; _9 < _A; _9++) { //#8334
        var _B = $get(_8, _9); //#8334
        if ((_B < 48) || (_B > 57)) { //#8333
            $k[$j++] = 'bwipp.databaromniBadCharacter#8332'; //#8332
            $k[$j++] = "GS1 DataBar Omnidirectional must contain only digits"; //#8332
            bwipp_raiseerror(); //#8332
        } //#8332
    } //#8332
    if ($_.barxmult < 33) { //#8338
        $k[$j++] = 'bwipp.databarStackedOmniBarXmult#8337'; //#8337
        $k[$j++] = "GS1 DataBar Stacked Omnidirectional must have a barxmult of at least 33"; //#8337
        bwipp_raiseerror(); //#8337
    } //#8337
    if ((($ne($_.format, "omni") && $ne($_.format, "stacked")) && $ne($_.format, "stackedomni")) && $ne($_.format, "truncated")) { //#8342
        $k[$j++] = 'bwipp.databaromniBadFormat#8341'; //#8341
        $k[$j++] = "Valid formats are omni, stacked, stackedomni and truncated"; //#8341
        bwipp_raiseerror(); //#8341
    } //#8341
    if ($eq($_.format, "truncated")) { //#8344
        $_.height = 13 / 72; //#8344
    } //#8344
    bwipp_loadctx(bwipp_databaromni); //#8346
    $_.checksum = 0; //#8349
    for (var _I = 0; _I <= 12; _I += 1) { //#8353
        $_.i = _I; //#8351
        $k[$j++] = 'checksum'; //#8352
        $k[$j++] = $_.checksum; //#8352
        $k[$j++] = $f($get($_.barcode, $_.i + 4) - 48); //#8352
        if (($_.i % 2) == 0) { //#8352
            var _O = $k[--$j]; //#8352
            $k[$j++] = _O * 3; //#8352
        } //#8352
        var _P = $k[--$j]; //#8352
        var _Q = $k[--$j]; //#8352
        $_[$k[--$j]] = $f(_Q + _P); //#8352
    } //#8352
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#8354
    if ($_.barcode.length == 18) { //#8359
        if ($get($_.barcode, 17) != ($_.checksum + 48)) { //#8358
            $k[$j++] = 'bwipp.databaromniBadCheckDigit#8357'; //#8357
            $k[$j++] = "Incorrect GS1 DataBar Omnidirectional check digit provided"; //#8357
            bwipp_raiseerror(); //#8357
        } //#8357
    } //#8357
    var _X = $s(18); //#8360
    $puti(_X, 0, $_.barcode); //#8361
    $put(_X, 17, $_.checksum + 48); //#8362
    $_.barcode = _X; //#8363
    $_.txt = $a($_.barcode.length); //#8366
    for (var _e = 0, _d = $_.barcode.length - 1; _e <= _d; _e += 1) { //#8370
        $_.i = _e; //#8368
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), 0, 0, "", 0])); //#8369
    } //#8369
    $_.ncr = function() {
        var _l = $k[--$j]; //#8373
        var _m = $k[--$j]; //#8373
        var _n = $f(_m - _l); //#8373
        if (_l < $f(_m - _l)) { //#8373
            var _ = _n; //#8373
            _n = _l; //#8373
            _l = _; //#8373
        } //#8373
        $k[$j++] = _n; //#8380
        $k[$j++] = 1; //#8380
        $k[$j++] = 1; //#8380
        for (var _p = _m, _o = $f(_l + 1); _p >= _o; _p -= 1) { //#8380
            var _q = $k[--$j]; //#8376
            var _r = $k[--$j]; //#8377
            var _s = $k[--$j]; //#8377
            $k[$j++] = _s; //#8379
            $k[$j++] = _r; //#8379
            $k[$j++] = _q * _p; //#8379
            if ($le(_r, _s)) { //#8379
                var _t = $k[--$j]; //#8378
                var _u = $k[--$j]; //#8378
                $k[$j++] = $f(_u + 1); //#8378
                $k[$j++] = ~~(_t / _u); //#8378
            } //#8378
        } //#8378
        for (;;) { //#8384
            var _v = $k[--$j]; //#8382
            var _w = $k[--$j]; //#8382
            var _x = $k[--$j]; //#8382
            $k[$j++] = _x; //#8382
            $k[$j++] = _w; //#8382
            $k[$j++] = _v; //#8382
            if ($gt(_w, _x)) { //#8382
                break; //#8382
            } //#8382
            var _y = $k[--$j]; //#8383
            var _z = $k[--$j]; //#8383
            $k[$j++] = $f(_z + 1); //#8383
            $k[$j++] = ~~(_y / _z); //#8383
        } //#8383
        var _10 = $k[--$j]; //#8385
        var _11 = $k[--$j]; //#8385
        $k[$j++] = _10; //#8385
        $k[$j++] = _11; //#8385
        $j--; //#8385
        var _12 = $k[--$j]; //#8385
        var _13 = $k[--$j]; //#8385
        $k[$j++] = _12; //#8385
        $k[$j++] = _13; //#8385
        $j--; //#8385
    }; //#8385
    $_.getRSSwidths = function() {
        $_.oe = $k[--$j]; //#8389
        $_.el = $k[--$j]; //#8390
        $_.mw = $k[--$j]; //#8391
        $_.nm = $k[--$j]; //#8392
        $_.val = $k[--$j]; //#8393
        $_.out = $a($_.el); //#8394
        $_.mask = 0; //#8395
        for (var _1D = 0, _1C = $f($_.el - 2); _1D <= _1C; _1D += 1) { //#8422
            $_.bar = _1D; //#8397
            $_.ew = 1; //#8398
            var _1F = $_.bar; //#8399
            $_.mask = $_.mask | ((_1F < 0 ? 1 >>> -_1F : 1 << _1F)); //#8399
            for (;;) { //#8418
                $k[$j++] = 'sval'; //#8400
                $k[$j++] = $f($f($_.nm - $_.ew) - 1); //#8400
                $k[$j++] = $f($f($_.el - $_.bar) - 2); //#8400
                $_.ncr(); //#8400
                var _1K = $k[--$j]; //#8400
                $_[$k[--$j]] = _1K; //#8400
                if (($_.oe && ($_.mask == 0)) && (($f(($f($f($_.nm - $_.ew) - ($_.el * 2))) + ($_.bar * 2))) >= -2)) { //#8403
                    $k[$j++] = 'sval'; //#8402
                    $k[$j++] = $_.sval; //#8402
                    $k[$j++] = $f(($f($f($_.nm - $_.ew) - $_.el)) + $_.bar); //#8402
                    $k[$j++] = $f($f($_.el - $_.bar) - 2); //#8402
                    $_.ncr(); //#8402
                    var _1Z = $k[--$j]; //#8402
                    var _1a = $k[--$j]; //#8402
                    $_[$k[--$j]] = $f(_1a - _1Z); //#8402
                } //#8402
                if ($f($_.el - $_.bar) > 2) { //#8412
                    $_.lval = 0; //#8405
                    for (var _1k = $f(($f(($f($f($_.nm - $_.ew) - $_.el)) + $_.bar)) + 2), _1j = $f($_.mw + 1); _1k >= _1j; _1k -= 1) { //#8409
                        $k[$j++] = $f(($f($f($_.nm - _1k) - $_.ew)) - 1); //#8407
                        $k[$j++] = $f($f($_.el - $_.bar) - 3); //#8407
                        $_.ncr(); //#8407
                        $_.lval = $f($k[--$j] + $_.lval); //#8408
                    } //#8408
                    $_.sval = $f($_.sval - ($_.lval * ($f($f($_.el - $_.bar) - 1)))); //#8410
                } else { //#8412
                    if ($f($_.nm - $_.ew) > $_.mw) { //#8412
                        $_.sval = $f($_.sval - 1); //#8412
                    } //#8412
                } //#8412
                $_.val = $f($_.val - $_.sval); //#8414
                if ($_.val < 0) { //#8415
                    break; //#8415
                } //#8415
                $_.ew = $_.ew + 1; //#8416
                var _24 = $_.bar; //#8417
                $_.mask = $_.mask & (~((_24 < 0 ? 1 >>> -_24 : 1 << _24))); //#8417
            } //#8417
            $_.val = $f($_.val + $_.sval); //#8419
            $_.nm = $f($_.nm - $_.ew); //#8420
            $put($_.out, $_.bar, $_.ew); //#8421
        } //#8421
        $put($_.out, $f($_.el - 1), $_.nm); //#8423
        $k[$j++] = $_.out; //#8424
    }; //#8424
    $k[$j++] = Infinity; //#8427
    var _2H = $_.linkage ? 1 : 0; //#8428
    var _2J = $geti($_.barcode, 4, 13); //#8429
    $k[$j++] = _2H; //#8429
    for (var _2K = 0, _2L = _2J.length; _2K < _2L; _2K++) { //#8429
        $k[$j++] = $f($get(_2J, _2K) - 48); //#8429
    } //#8429
    $_.binval = $a(); //#8429
    for (var _2O = 0; _2O <= 12; _2O += 1) { //#8436
        $_.i = _2O; //#8433
        var _2P = $_.binval; //#8434
        var _2Q = $_.i; //#8434
        $put(_2P, _2Q + 1, $f($get(_2P, _2Q + 1) + (($get($_.binval, $_.i) % 4537077) * 10))); //#8434
        $put($_.binval, $_.i, ~~($get($_.binval, $_.i) / 4537077)); //#8435
    } //#8435
    $_.right = $get($_.binval, 13) % 4537077; //#8437
    var _2c = $_.binval; //#8438
    $put(_2c, 13, ~~($get(_2c, 13) / 4537077)); //#8438
    $_.left = 0; //#8440
    $_.i = true; //#8441
    for (var _2e = 0; _2e <= 13; _2e += 1) { //#8451
        $_.j = _2e; //#8443
        var _2h = $get($_.binval, $_.j); //#8444
        $k[$j++] = _2h; //#8450
        if ((_2h == 0) && $_.i) { //#8449
            $j--; //#8446
        } else { //#8449
            $_.i = false; //#8448
            $k[$j++] = 'left'; //#8449
            $k[$j++] = $_.left; //#8449
            $r(3, -1); //#8449
            var _2l = $k[--$j]; //#8449
            var _2m = $k[--$j]; //#8449
            $_[$k[--$j]] = $f(_2m + (_2l * (~~Math.pow(10, 13 - $_.j)))); //#8449
        } //#8449
    } //#8449
    $_.d1 = ~~($_.left / 1597); //#8453
    $_.d2 = $_.left % 1597; //#8454
    $_.d3 = ~~($_.right / 1597); //#8455
    $_.d4 = $_.right % 1597; //#8456
    if (!bwipp_databaromni.__8473__) { //#8473
        $_ = Object.create($_); //#8473
        $_.tab164 = $a([160, 0, 12, 4, 8, 1, 161, 1, 960, 161, 10, 6, 6, 3, 80, 10, 2014, 961, 8, 8, 4, 5, 31, 34, 2714, 2015, 6, 10, 3, 6, 10, 70, 2840, 2715, 4, 12, 1, 8, 1, 126]); //#8465
        $_.tab154 = $a([335, 0, 5, 10, 2, 7, 4, 84, 1035, 336, 7, 8, 4, 5, 20, 35, 1515, 1036, 9, 6, 6, 3, 48, 10, 1596, 1516, 11, 4, 8, 1, 81, 1]); //#8472
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_databaromni.$ctx[id] = $_[id]); //#8472
        bwipp_databaromni.__8473__ = 1; //#8472
        $_ = Object.getPrototypeOf($_); //#8472
    } //#8472
    $_.i = 0; //#8475
    for (;;) { //#8485
        if ($_.d1 <= $get($_.tab164, $_.i)) { //#8483
            var _31 = $geti($_.tab164, $_.i + 1, 7); //#8477
            for (var _32 = 0, _33 = _31.length; _32 < _33; _32++) { //#8477
                $k[$j++] = $get(_31, _32); //#8477
            } //#8477
            $_.d1te = $k[--$j]; //#8478
            $_.d1to = $k[--$j]; //#8478
            $_.d1mwe = $k[--$j]; //#8479
            $_.d1mwo = $k[--$j]; //#8479
            $_.d1ele = $k[--$j]; //#8480
            $_.d1elo = $k[--$j]; //#8480
            $_.d1gs = $k[--$j]; //#8481
            break; //#8482
        } //#8482
        $_.i = $_.i + 8; //#8484
    } //#8484
    $_.i = 0; //#8487
    for (;;) { //#8497
        if ($_.d2 <= $get($_.tab154, $_.i)) { //#8495
            var _3J = $geti($_.tab154, $_.i + 1, 7); //#8489
            for (var _3K = 0, _3L = _3J.length; _3K < _3L; _3K++) { //#8489
                $k[$j++] = $get(_3J, _3K); //#8489
            } //#8489
            $_.d2te = $k[--$j]; //#8490
            $_.d2to = $k[--$j]; //#8490
            $_.d2mwe = $k[--$j]; //#8491
            $_.d2mwo = $k[--$j]; //#8491
            $_.d2ele = $k[--$j]; //#8492
            $_.d2elo = $k[--$j]; //#8492
            $_.d2gs = $k[--$j]; //#8493
            break; //#8494
        } //#8494
        $_.i = $_.i + 8; //#8496
    } //#8496
    $_.i = 0; //#8499
    for (;;) { //#8509
        if ($_.d3 <= $get($_.tab164, $_.i)) { //#8507
            var _3b = $geti($_.tab164, $_.i + 1, 7); //#8501
            for (var _3c = 0, _3d = _3b.length; _3c < _3d; _3c++) { //#8501
                $k[$j++] = $get(_3b, _3c); //#8501
            } //#8501
            $_.d3te = $k[--$j]; //#8502
            $_.d3to = $k[--$j]; //#8502
            $_.d3mwe = $k[--$j]; //#8503
            $_.d3mwo = $k[--$j]; //#8503
            $_.d3ele = $k[--$j]; //#8504
            $_.d3elo = $k[--$j]; //#8504
            $_.d3gs = $k[--$j]; //#8505
            break; //#8506
        } //#8506
        $_.i = $_.i + 8; //#8508
    } //#8508
    $_.i = 0; //#8511
    for (;;) { //#8521
        if ($_.d4 <= $get($_.tab154, $_.i)) { //#8519
            var _3t = $geti($_.tab154, $_.i + 1, 7); //#8513
            for (var _3u = 0, _3v = _3t.length; _3u < _3v; _3u++) { //#8513
                $k[$j++] = $get(_3t, _3u); //#8513
            } //#8513
            $_.d4te = $k[--$j]; //#8514
            $_.d4to = $k[--$j]; //#8514
            $_.d4mwe = $k[--$j]; //#8515
            $_.d4mwo = $k[--$j]; //#8515
            $_.d4ele = $k[--$j]; //#8516
            $_.d4elo = $k[--$j]; //#8516
            $_.d4gs = $k[--$j]; //#8517
            break; //#8518
        } //#8518
        $_.i = $_.i + 8; //#8520
    } //#8520
    $k[$j++] = 'd1wo'; //#8523
    $k[$j++] = ~~($f($_.d1 - $_.d1gs) / $_.d1te); //#8523
    $k[$j++] = $_.d1elo; //#8523
    $k[$j++] = $_.d1mwo; //#8523
    $k[$j++] = 4; //#8523
    $k[$j++] = false; //#8523
    $_.getRSSwidths(); //#8523
    var _4A = $k[--$j]; //#8523
    $_[$k[--$j]] = _4A; //#8523
    $k[$j++] = 'd1we'; //#8524
    $k[$j++] = $f($_.d1 - $_.d1gs) % $_.d1te; //#8524
    $k[$j++] = $_.d1ele; //#8524
    $k[$j++] = $_.d1mwe; //#8524
    $k[$j++] = 4; //#8524
    $k[$j++] = true; //#8524
    $_.getRSSwidths(); //#8524
    var _4H = $k[--$j]; //#8524
    $_[$k[--$j]] = _4H; //#8524
    $k[$j++] = 'd2wo'; //#8525
    $k[$j++] = $f($_.d2 - $_.d2gs) % $_.d2to; //#8525
    $k[$j++] = $_.d2elo; //#8525
    $k[$j++] = $_.d2mwo; //#8525
    $k[$j++] = 4; //#8525
    $k[$j++] = true; //#8525
    $_.getRSSwidths(); //#8525
    var _4O = $k[--$j]; //#8525
    $_[$k[--$j]] = _4O; //#8525
    $k[$j++] = 'd2we'; //#8526
    $k[$j++] = ~~($f($_.d2 - $_.d2gs) / $_.d2to); //#8526
    $k[$j++] = $_.d2ele; //#8526
    $k[$j++] = $_.d2mwe; //#8526
    $k[$j++] = 4; //#8526
    $k[$j++] = false; //#8526
    $_.getRSSwidths(); //#8526
    var _4V = $k[--$j]; //#8526
    $_[$k[--$j]] = _4V; //#8526
    $k[$j++] = 'd3wo'; //#8527
    $k[$j++] = ~~($f($_.d3 - $_.d3gs) / $_.d3te); //#8527
    $k[$j++] = $_.d3elo; //#8527
    $k[$j++] = $_.d3mwo; //#8527
    $k[$j++] = 4; //#8527
    $k[$j++] = false; //#8527
    $_.getRSSwidths(); //#8527
    var _4c = $k[--$j]; //#8527
    $_[$k[--$j]] = _4c; //#8527
    $k[$j++] = 'd3we'; //#8528
    $k[$j++] = $f($_.d3 - $_.d3gs) % $_.d3te; //#8528
    $k[$j++] = $_.d3ele; //#8528
    $k[$j++] = $_.d3mwe; //#8528
    $k[$j++] = 4; //#8528
    $k[$j++] = true; //#8528
    $_.getRSSwidths(); //#8528
    var _4j = $k[--$j]; //#8528
    $_[$k[--$j]] = _4j; //#8528
    $k[$j++] = 'd4wo'; //#8529
    $k[$j++] = $f($_.d4 - $_.d4gs) % $_.d4to; //#8529
    $k[$j++] = $_.d4elo; //#8529
    $k[$j++] = $_.d4mwo; //#8529
    $k[$j++] = 4; //#8529
    $k[$j++] = true; //#8529
    $_.getRSSwidths(); //#8529
    var _4q = $k[--$j]; //#8529
    $_[$k[--$j]] = _4q; //#8529
    $k[$j++] = 'd4we'; //#8530
    $k[$j++] = ~~($f($_.d4 - $_.d4gs) / $_.d4to); //#8530
    $k[$j++] = $_.d4ele; //#8530
    $k[$j++] = $_.d4mwe; //#8530
    $k[$j++] = 4; //#8530
    $k[$j++] = false; //#8530
    $_.getRSSwidths(); //#8530
    var _4x = $k[--$j]; //#8530
    $_[$k[--$j]] = _4x; //#8530
    $_.d1w = $a(8); //#8532
    for (var _50 = 0; _50 <= 3; _50 += 1) { //#8537
        $_.i = _50; //#8534
        $put($_.d1w, $_.i * 2, $get($_.d1wo, $_.i)); //#8535
        $put($_.d1w, ($_.i * 2) + 1, $get($_.d1we, $_.i)); //#8536
    } //#8536
    $_.d2w = $a(8); //#8539
    for (var _5C = 0; _5C <= 3; _5C += 1) { //#8544
        $_.i = _5C; //#8541
        $put($_.d2w, 7 - ($_.i * 2), $get($_.d2wo, $_.i)); //#8542
        $put($_.d2w, 6 - ($_.i * 2), $get($_.d2we, $_.i)); //#8543
    } //#8543
    $_.d3w = $a(8); //#8546
    for (var _5O = 0; _5O <= 3; _5O += 1) { //#8551
        $_.i = _5O; //#8548
        $put($_.d3w, 7 - ($_.i * 2), $get($_.d3wo, $_.i)); //#8549
        $put($_.d3w, 6 - ($_.i * 2), $get($_.d3we, $_.i)); //#8550
    } //#8550
    $_.d4w = $a(8); //#8553
    for (var _5a = 0; _5a <= 3; _5a += 1) { //#8558
        $_.i = _5a; //#8555
        $put($_.d4w, $_.i * 2, $get($_.d4wo, $_.i)); //#8556
        $put($_.d4w, ($_.i * 2) + 1, $get($_.d4we, $_.i)); //#8557
    } //#8557
    $k[$j++] = Infinity; //#8560
    var _5l = $_.d1w; //#8561
    for (var _5m = 0, _5n = _5l.length; _5m < _5n; _5m++) { //#8561
        $k[$j++] = $get(_5l, _5m); //#8561
    } //#8561
    var _5p = $_.d2w; //#8562
    for (var _5q = 0, _5r = _5p.length; _5q < _5r; _5q++) { //#8562
        $k[$j++] = $get(_5p, _5q); //#8562
    } //#8562
    var _5t = $_.d3w; //#8563
    for (var _5u = 0, _5v = _5t.length; _5u < _5v; _5u++) { //#8563
        $k[$j++] = $get(_5t, _5u); //#8563
    } //#8563
    var _5x = $_.d4w; //#8564
    for (var _5y = 0, _5z = _5x.length; _5y < _5z; _5y++) { //#8564
        $k[$j++] = $get(_5x, _5y); //#8564
    } //#8564
    $_.widths = $a(); //#8564
    if (!bwipp_databaromni.__8580__) { //#8580
        $_ = Object.create($_); //#8580
        $_.checkweights = $a([1, 3, 9, 27, 2, 6, 18, 54, 58, 72, 24, 8, 29, 36, 12, 4, 74, 51, 17, 32, 37, 65, 48, 16, 64, 34, 23, 69, 49, 68, 46, 59]); //#8573
        $_.checkwidths = $a([3, 8, 2, 1, 1, 3, 5, 5, 1, 1, 3, 3, 7, 1, 1, 3, 1, 9, 1, 1, 2, 7, 4, 1, 1, 2, 5, 6, 1, 1, 2, 3, 8, 1, 1, 1, 5, 7, 1, 1, 1, 3, 9, 1, 1]); //#8579
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_databaromni.$ctx[id] = $_[id]); //#8579
        bwipp_databaromni.__8580__ = 1; //#8579
        $_ = Object.getPrototypeOf($_); //#8579
    } //#8579
    $_.checksum = 0; //#8582
    for (var _65 = 0; _65 <= 31; _65 += 1) { //#8586
        $_.i = _65; //#8584
        $_.checksum = $f($_.checksum + ($get($_.widths, $_.i) * $get($_.checkweights, $_.i))); //#8585
    } //#8585
    $_.checksum = $_.checksum % 79; //#8587
    if ($_.checksum >= 8) { //#8588
        $_.checksum = $f($_.checksum + 1); //#8588
    } //#8588
    if ($_.checksum >= 72) { //#8589
        $_.checksum = $f($_.checksum + 1); //#8589
    } //#8589
    $_.checklt = $geti($_.checkwidths, (~~($_.checksum / 9)) * 5, 5); //#8590
    $_.checkrtrev = $geti($_.checkwidths, ($_.checksum % 9) * 5, 5); //#8591
    $_.checkrt = $a(5); //#8592
    for (var _6P = 0; _6P <= 4; _6P += 1) { //#8596
        $_.i = _6P; //#8594
        $put($_.checkrt, $_.i, $get($_.checkrtrev, 4 - $_.i)); //#8595
    } //#8595
    if ($eq($_.format, "omni") || $eq($_.format, "truncated")) { //#8724
        $k[$j++] = Infinity; //#8601
        var _6X = $_.d1w; //#8602
        $k[$j++] = 1; //#8602
        for (var _6Y = 0, _6Z = _6X.length; _6Y < _6Z; _6Y++) { //#8602
            $k[$j++] = $get(_6X, _6Y); //#8602
        } //#8602
        var _6b = $_.checklt; //#8602
        for (var _6c = 0, _6d = _6b.length; _6c < _6d; _6c++) { //#8602
            $k[$j++] = $get(_6b, _6c); //#8602
        } //#8602
        var _6f = $_.d2w; //#8602
        for (var _6g = 0, _6h = _6f.length; _6g < _6h; _6g++) { //#8602
            $k[$j++] = $get(_6f, _6g); //#8602
        } //#8602
        var _6j = $_.d4w; //#8603
        for (var _6k = 0, _6l = _6j.length; _6k < _6l; _6k++) { //#8603
            $k[$j++] = $get(_6j, _6k); //#8603
        } //#8603
        var _6n = $_.checkrt; //#8603
        for (var _6o = 0, _6p = _6n.length; _6o < _6p; _6o++) { //#8603
            $k[$j++] = $get(_6n, _6o); //#8603
        } //#8603
        var _6r = $_.d3w; //#8603
        for (var _6s = 0, _6t = _6r.length; _6s < _6t; _6s++) { //#8603
            $k[$j++] = $get(_6r, _6s); //#8603
        } //#8603
        $k[$j++] = 1; //#8603
        $k[$j++] = 1; //#8603
        $_.sbs = $a(); //#8603
        $k[$j++] = Infinity; //#8606
        var _6w = $_.sbs; //#8608
        $k[$j++] = Infinity; //#8609
        for (var _6y = 0, _6z = ~~(($_.sbs.length + 1) / 2); _6y < _6z; _6y++) { //#8609
            $k[$j++] = $_.height; //#8609
        } //#8609
        var _71 = $a(); //#8609
        $k[$j++] = Infinity; //#8610
        for (var _73 = 0, _74 = ~~(($_.sbs.length + 1) / 2); _73 < _74; _73++) { //#8610
            $k[$j++] = 0; //#8610
        } //#8610
        var _75 = $a(); //#8610
        $k[$j++] = 'ren'; //#8615
        $k[$j++] = 'renlinear'; //#8615
        $k[$j++] = 'sbs'; //#8615
        $k[$j++] = _6w; //#8615
        $k[$j++] = 'bhs'; //#8615
        $k[$j++] = _71; //#8615
        $k[$j++] = 'bbs'; //#8615
        $k[$j++] = _75; //#8615
        $k[$j++] = 'txt'; //#8615
        $k[$j++] = $_.txt; //#8615
        $k[$j++] = 'textxalign'; //#8615
        $k[$j++] = "center"; //#8615
        $k[$j++] = 'borderleft'; //#8615
        $k[$j++] = 0; //#8615
        $k[$j++] = 'borderright'; //#8615
        $k[$j++] = 0; //#8615
        $k[$j++] = 'opt'; //#8615
        $k[$j++] = $_.options; //#8615
        var _78 = $d(); //#8615
        $k[$j++] = _78; //#8618
        if (!$_.dontdraw) { //#8618
            bwipp_renlinear(); //#8618
        } //#8618
    } else { //#8724
        $k[$j++] = Infinity; //#8622
        var _7A = $_.d1w; //#8622
        $k[$j++] = 1; //#8622
        $k[$j++] = 1; //#8622
        for (var _7B = 0, _7C = _7A.length; _7B < _7C; _7B++) { //#8622
            $k[$j++] = $get(_7A, _7B); //#8622
        } //#8622
        var _7E = $_.checklt; //#8622
        for (var _7F = 0, _7G = _7E.length; _7F < _7G; _7F++) { //#8622
            $k[$j++] = $get(_7E, _7F); //#8622
        } //#8622
        var _7I = $_.d2w; //#8622
        for (var _7J = 0, _7K = _7I.length; _7J < _7K; _7J++) { //#8622
            $k[$j++] = $get(_7I, _7J); //#8622
        } //#8622
        $k[$j++] = 1; //#8622
        $k[$j++] = 1; //#8622
        $k[$j++] = 0; //#8622
        $_.top = $a(); //#8622
        $k[$j++] = Infinity; //#8623
        var _7N = $_.d4w; //#8623
        $k[$j++] = 1; //#8623
        $k[$j++] = 1; //#8623
        for (var _7O = 0, _7P = _7N.length; _7O < _7P; _7O++) { //#8623
            $k[$j++] = $get(_7N, _7O); //#8623
        } //#8623
        var _7R = $_.checkrt; //#8623
        for (var _7S = 0, _7T = _7R.length; _7S < _7T; _7S++) { //#8623
            $k[$j++] = $get(_7R, _7S); //#8623
        } //#8623
        var _7V = $_.d3w; //#8623
        for (var _7W = 0, _7X = _7V.length; _7W < _7X; _7W++) { //#8623
            $k[$j++] = $get(_7V, _7W); //#8623
        } //#8623
        $k[$j++] = 1; //#8623
        $k[$j++] = 1; //#8623
        $k[$j++] = 0; //#8623
        $_.bot = $a(); //#8623
        for (var _7a = 0; _7a <= 24; _7a += 2) { //#8628
            $_.i = _7a; //#8625
            for (var _7e = 0, _7f = $get($_.top, $_.i); _7e < _7f; _7e++) { //#8626
                $k[$j++] = 0; //#8626
            } //#8626
            for (var _7j = 0, _7k = $get($_.top, $_.i + 1); _7j < _7k; _7j++) { //#8627
                $k[$j++] = 1; //#8627
            } //#8627
        } //#8627
        $astore($a(50)); //#8629
        $_.top = $k[--$j]; //#8629
        for (var _7n = 0; _7n <= 24; _7n += 2) { //#8634
            $_.i = _7n; //#8631
            for (var _7r = 0, _7s = $get($_.bot, $_.i); _7r < _7s; _7r++) { //#8632
                $k[$j++] = 1; //#8632
            } //#8632
            for (var _7w = 0, _7x = $get($_.bot, $_.i + 1); _7w < _7x; _7w++) { //#8633
                $k[$j++] = 0; //#8633
            } //#8633
        } //#8633
        $astore($a(50)); //#8635
        $_.bot = $k[--$j]; //#8635
        if ($eq($_.format, "stacked")) { //#8657
            $_.sep = $a(50); //#8639
            $put($_.sep, 0, 0); //#8640
            for (var _83 = 1; _83 <= 49; _83 += 1) { //#8648
                $_.i = _83; //#8642
                if ($eq($get($_.top, $_.i), $get($_.bot, $_.i))) { //#8646
                    $put($_.sep, $_.i, $f(1 - $get($_.top, $_.i))); //#8644
                } else { //#8646
                    $put($_.sep, $_.i, $f(1 - $get($_.sep, $_.i - 1))); //#8646
                } //#8646
            } //#8646
            $puti($_.sep, 0, $a([0, 0, 0, 0])); //#8649
            $puti($_.sep, 46, $a([0, 0, 0, 0])); //#8650
            $k[$j++] = Infinity; //#8651
            for (var _8O = 0, _8P = 5; _8O < _8P; _8O++) { //#8652
                $aload($_.top); //#8652
            } //#8652
            $aload($_.sep); //#8653
            for (var _8S = 0, _8T = 7; _8S < _8T; _8S++) { //#8654
                $aload($_.bot); //#8654
            } //#8654
            $_.pixs = $a(); //#8654
            $_.pixy = ~~($_.pixs.length / 50); //#8656
        } //#8656
        if ($eq($_.format, "stackedomni")) { //#8707
            $k[$j++] = Infinity; //#8661
            $forall($_.top, function() { //#8661
                var _8Z = $k[--$j]; //#8661
                $k[$j++] = $f(1 - _8Z); //#8661
            }); //#8661
            $_.sep1 = $a(); //#8661
            $puti($_.sep1, 0, $a([0, 0, 0, 0])); //#8662
            $puti($_.sep1, 46, $a([0, 0, 0, 0])); //#8663
            for (var _8f = 18; _8f <= 30; _8f += 1) { //#8676
                $_.i = _8f; //#8665
                if ($get($_.top, $_.i) == 0) { //#8673
                    if ($get($_.top, $_.i - 1) == 1) { //#8670
                        $k[$j++] = 1; //#8668
                    } else { //#8670
                        var _8p = ($get($_.sep1, $_.i - 1) == 0) ? 1 : 0; //#8670
                        $k[$j++] = _8p; //#8670
                    } //#8670
                } else { //#8673
                    $k[$j++] = 0; //#8673
                } //#8673
                $put($_.sep1, $_.i, $k[--$j]); //#8675
            } //#8675
            $k[$j++] = Infinity; //#8677
            $k[$j++] = 0; //#8677
            $k[$j++] = 0; //#8677
            $k[$j++] = 0; //#8677
            $k[$j++] = 0; //#8677
            for (var _8t = 0, _8u = 21; _8t < _8u; _8t++) { //#8677
                $k[$j++] = 0; //#8677
                $k[$j++] = 1; //#8677
            } //#8677
            $k[$j++] = 0; //#8677
            $k[$j++] = 0; //#8677
            $k[$j++] = 0; //#8677
            $k[$j++] = 0; //#8677
            $_.sep2 = $a(); //#8677
            $k[$j++] = Infinity; //#8678
            $forall($_.bot, function() { //#8678
                var _8x = $k[--$j]; //#8678
                $k[$j++] = $f(1 - _8x); //#8678
            }); //#8678
            $_.sep3 = $a(); //#8678
            $puti($_.sep3, 0, $a([0, 0, 0, 0])); //#8679
            $puti($_.sep3, 46, $a([0, 0, 0, 0])); //#8680
            for (var _93 = 19; _93 <= 31; _93 += 1) { //#8693
                $_.i = _93; //#8682
                if ($get($_.bot, $_.i) == 0) { //#8690
                    if ($get($_.bot, $_.i - 1) == 1) { //#8687
                        $k[$j++] = 1; //#8685
                    } else { //#8687
                        var _9D = ($get($_.sep3, $_.i - 1) == 0) ? 1 : 0; //#8687
                        $k[$j++] = _9D; //#8687
                    } //#8687
                } else { //#8690
                    $k[$j++] = 0; //#8690
                } //#8690
                $put($_.sep3, $_.i, $k[--$j]); //#8692
            } //#8692
            $_.f3 = $a([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1]); //#8694
            $k[$j++] = true; //#8695
            for (var _9I = 0; _9I <= 12; _9I += 1) { //#8695
                var _9N = $k[--$j]; //#8695
                $k[$j++] = _9N && $eq($get($_.bot, _9I + 19), $get($_.f3, _9I)); //#8695
            } //#8695
            if ($k[--$j]) { //#8698
                $puti($_.sep3, 19, $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0])); //#8697
            } //#8697
            $k[$j++] = Infinity; //#8699
            for (var _9S = 0, _9T = $_.barxmult; _9S < _9T; _9S++) { //#8700
                $aload($_.top); //#8700
            } //#8700
            $aload($_.sep1); //#8701
            $aload($_.sep2); //#8702
            $aload($_.sep3); //#8703
            for (var _9Z = 0, _9a = $_.barxmult; _9Z < _9a; _9Z++) { //#8704
                $aload($_.bot); //#8704
            } //#8704
            $_.pixs = $a(); //#8704
            $_.pixy = ~~($_.pixs.length / 50); //#8706
        } //#8706
        var _9i = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.pixs],
            ["pixx", 50],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", 50 / 72],
            ["borderleft", 0],
            ["borderright", 0],
            ["bordertop", 0],
            ["borderbottom", 0],
            ["opt", $_.options]
        ]); //#8721
        $k[$j++] = _9i; //#8724
        if (!$_.dontdraw) { //#8724
            bwipp_renmatrix(); //#8724
        } //#8724
    } //#8724
    $_ = Object.getPrototypeOf($_); //#8728
    $_ = Object.getPrototypeOf($_); //#8730
} //bwipp_databaromni
function bwipp_databarstacked() {
    $_ = Object.create($_); //#8759
    $_.dontdraw = false; //#8762
    $k[$j++] = $_; //#8764
    bwipp_processoptions(); //#8764
    $_.options = $k[--$j]; //#8764
    $_.barcode = $k[--$j]; //#8765
    if (($_.barcode.length != 17) && ($_.barcode.length != 18)) { //#8770
        $k[$j++] = 'bwipp.databarstackedBadLength#8769'; //#8769
        $k[$j++] = "GS1 DataBar Stacked must be 13 or 14 digits"; //#8769
        bwipp_raiseerror(); //#8769
    } //#8769
    if ($ne($geti($_.barcode, 0, 4), "\(01\)")) { //#8773
        $k[$j++] = 'bwipp.databarstackedBadAI#8772'; //#8772
        $k[$j++] = "GS1 DataBar Stacked must begin with (01) application identifier"; //#8772
        bwipp_raiseerror(); //#8772
    } //#8772
    var _8 = $geti($_.barcode, 4, $_.barcode.length - 4); //#8774
    for (var _9 = 0, _A = _8.length; _9 < _A; _9++) { //#8778
        var _B = $get(_8, _9); //#8778
        if ((_B < 48) || (_B > 57)) { //#8777
            $k[$j++] = 'bwipp.databarstackedBadCharacter#8776'; //#8776
            $k[$j++] = "GS1 DataBar Stacked must contain only digits"; //#8776
            bwipp_raiseerror(); //#8776
        } //#8776
    } //#8776
    $_.checksum = 0; //#8781
    for (var _C = 0; _C <= 12; _C += 1) { //#8785
        $_.i = _C; //#8783
        $k[$j++] = 'checksum'; //#8784
        $k[$j++] = $_.checksum; //#8784
        $k[$j++] = $f($get($_.barcode, $_.i + 4) - 48); //#8784
        if (($_.i % 2) == 0) { //#8784
            var _I = $k[--$j]; //#8784
            $k[$j++] = _I * 3; //#8784
        } //#8784
        var _J = $k[--$j]; //#8784
        var _K = $k[--$j]; //#8784
        $_[$k[--$j]] = $f(_K + _J); //#8784
    } //#8784
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#8786
    if ($_.barcode.length == 18) { //#8791
        if ($get($_.barcode, 17) != ($_.checksum + 48)) { //#8790
            $k[$j++] = 'bwipp.databarstackedBadCheckDigit#8789'; //#8789
            $k[$j++] = "Incorrect GS1 DataBar Stacked check digit provided"; //#8789
            bwipp_raiseerror(); //#8789
        } //#8789
    } //#8789
    var _R = $s(18); //#8792
    $puti(_R, 0, $_.barcode); //#8793
    $put(_R, 17, $_.checksum + 48); //#8794
    $_.barcode = _R; //#8795
    $put($_.options, "dontdraw", true); //#8798
    $put($_.options, "format", "stacked"); //#8799
    $k[$j++] = 'args'; //#8801
    $k[$j++] = $_.barcode; //#8801
    $k[$j++] = $_.options; //#8801
    bwipp_databaromni(); //#8801
    var _Y = $k[--$j]; //#8801
    $_[$k[--$j]] = _Y; //#8801
    $put($_.args, "opt", $_.options); //#8803
    $k[$j++] = $_.args; //#8806
    if (!$_.dontdraw) { //#8806
        bwipp_renmatrix(); //#8806
    } //#8806
    $_ = Object.getPrototypeOf($_); //#8808
} //bwipp_databarstacked
function bwipp_databarstackedomni() {
    $_ = Object.create($_); //#8837
    $_.dontdraw = false; //#8840
    $k[$j++] = $_; //#8842
    bwipp_processoptions(); //#8842
    $_.options = $k[--$j]; //#8842
    $_.barcode = $k[--$j]; //#8843
    if ($ne($geti($_.barcode, 0, 4), "\(01\)")) { //#8848
        $k[$j++] = 'bwipp.databarstackedomniBadAI#8847'; //#8847
        $k[$j++] = "GS1 DataBar Stacked Omnidirectional must begin with (01) application identifier"; //#8847
        bwipp_raiseerror(); //#8847
    } //#8847
    if (($_.barcode.length != 17) && ($_.barcode.length != 18)) { //#8851
        $k[$j++] = 'bwipp.databarstackedomniBadLength#8850'; //#8850
        $k[$j++] = "GS1 DataBar Stacked Omnidirectional must be 13 or 14 digits"; //#8850
        bwipp_raiseerror(); //#8850
    } //#8850
    var _8 = $geti($_.barcode, 4, $_.barcode.length - 4); //#8852
    for (var _9 = 0, _A = _8.length; _9 < _A; _9++) { //#8856
        var _B = $get(_8, _9); //#8856
        if ((_B < 48) || (_B > 57)) { //#8855
            $k[$j++] = 'bwipp.databarstackedomniBadCharacter#8854'; //#8854
            $k[$j++] = "GS1 DataBar Stacked Omnidirectional must contain only digits"; //#8854
            bwipp_raiseerror(); //#8854
        } //#8854
    } //#8854
    $_.checksum = 0; //#8859
    for (var _C = 0; _C <= 12; _C += 1) { //#8863
        $_.i = _C; //#8861
        $k[$j++] = 'checksum'; //#8862
        $k[$j++] = $_.checksum; //#8862
        $k[$j++] = $f($get($_.barcode, $_.i + 4) - 48); //#8862
        if (($_.i % 2) == 0) { //#8862
            var _I = $k[--$j]; //#8862
            $k[$j++] = _I * 3; //#8862
        } //#8862
        var _J = $k[--$j]; //#8862
        var _K = $k[--$j]; //#8862
        $_[$k[--$j]] = $f(_K + _J); //#8862
    } //#8862
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#8864
    if ($_.barcode.length == 18) { //#8869
        if ($get($_.barcode, 17) != ($_.checksum + 48)) { //#8868
            $k[$j++] = 'bwipp.databarstackedomniBadCheckDigit#8867'; //#8867
            $k[$j++] = "Incorrect GS1 DataBar Stacked Omnidirectional check digit provided"; //#8867
            bwipp_raiseerror(); //#8867
        } //#8867
    } //#8867
    var _R = $s(18); //#8870
    $puti(_R, 0, $_.barcode); //#8871
    $put(_R, 17, $_.checksum + 48); //#8872
    $_.barcode = _R; //#8873
    $put($_.options, "dontdraw", true); //#8876
    $put($_.options, "format", "stackedomni"); //#8877
    $k[$j++] = 'args'; //#8879
    $k[$j++] = $_.barcode; //#8879
    $k[$j++] = $_.options; //#8879
    bwipp_databaromni(); //#8879
    var _Y = $k[--$j]; //#8879
    $_[$k[--$j]] = _Y; //#8879
    $put($_.args, "opt", $_.options); //#8881
    $k[$j++] = $_.args; //#8884
    if (!$_.dontdraw) { //#8884
        bwipp_renmatrix(); //#8884
    } //#8884
    $_ = Object.getPrototypeOf($_); //#8886
} //bwipp_databarstackedomni
function bwipp_databartruncated() {
    $_ = Object.create($_); //#8915
    $_.dontdraw = false; //#8918
    $k[$j++] = $_; //#8920
    bwipp_processoptions(); //#8920
    $_.options = $k[--$j]; //#8920
    $_.barcode = $k[--$j]; //#8921
    if (($_.barcode.length != 17) && ($_.barcode.length != 18)) { //#8926
        $k[$j++] = 'bwipp.databartruncatedBadLength#8925'; //#8925
        $k[$j++] = "GS1 DataBar Truncated must be 13 or 14 digits"; //#8925
        bwipp_raiseerror(); //#8925
    } //#8925
    if ($ne($geti($_.barcode, 0, 4), "\(01\)")) { //#8929
        $k[$j++] = 'bwipp.databartruncatedBadAI#8928'; //#8928
        $k[$j++] = "GS1 DataBar Truncated must begin with (01) application identifier"; //#8928
        bwipp_raiseerror(); //#8928
    } //#8928
    var _8 = $geti($_.barcode, 4, $_.barcode.length - 4); //#8930
    for (var _9 = 0, _A = _8.length; _9 < _A; _9++) { //#8934
        var _B = $get(_8, _9); //#8934
        if ((_B < 48) || (_B > 57)) { //#8933
            $k[$j++] = 'bwipp.databartruncatedBadCharacter#8932'; //#8932
            $k[$j++] = "GS1 DataBar Truncated must contain only digits"; //#8932
            bwipp_raiseerror(); //#8932
        } //#8932
    } //#8932
    $_.checksum = 0; //#8937
    for (var _C = 0; _C <= 12; _C += 1) { //#8941
        $_.i = _C; //#8939
        $k[$j++] = 'checksum'; //#8940
        $k[$j++] = $_.checksum; //#8940
        $k[$j++] = $f($get($_.barcode, $_.i + 4) - 48); //#8940
        if (($_.i % 2) == 0) { //#8940
            var _I = $k[--$j]; //#8940
            $k[$j++] = _I * 3; //#8940
        } //#8940
        var _J = $k[--$j]; //#8940
        var _K = $k[--$j]; //#8940
        $_[$k[--$j]] = $f(_K + _J); //#8940
    } //#8940
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#8942
    if ($_.barcode.length == 18) { //#8947
        if ($get($_.barcode, 17) != ($_.checksum + 48)) { //#8946
            $k[$j++] = 'bwipp.databartruncatedBadCheckDigit#8945'; //#8945
            $k[$j++] = "Incorrect GS1 DataBar Truncated check digit provided"; //#8945
            bwipp_raiseerror(); //#8945
        } //#8945
    } //#8945
    var _R = $s(18); //#8948
    $puti(_R, 0, $_.barcode); //#8949
    $put(_R, 17, $_.checksum + 48); //#8950
    $_.barcode = _R; //#8951
    $put($_.options, "dontdraw", true); //#8954
    $put($_.options, "format", "truncated"); //#8955
    $k[$j++] = 'args'; //#8957
    $k[$j++] = $_.barcode; //#8957
    $k[$j++] = $_.options; //#8957
    bwipp_databaromni(); //#8957
    var _Y = $k[--$j]; //#8957
    $_[$k[--$j]] = _Y; //#8957
    $put($_.args, "opt", $_.options); //#8959
    $k[$j++] = $_.args; //#8962
    if (!$_.dontdraw) { //#8962
        bwipp_renlinear(); //#8962
    } //#8962
    $_ = Object.getPrototypeOf($_); //#8964
} //bwipp_databartruncated
function bwipp_databarlimited() {
    $_ = Object.create($_); //#8994
    $_.dontdraw = false; //#8997
    $_.height = 10 / 72; //#8998
    $_.linkage = false; //#8999
    $k[$j++] = $_; //#9001
    bwipp_processoptions(); //#9001
    $_.options = $k[--$j]; //#9001
    $_.barcode = $k[--$j]; //#9002
    bwipp_loadctx(bwipp_databarlimited); //#9004
    if (($_.barcode.length != 17) && ($_.barcode.length != 18)) { //#9009
        $k[$j++] = 'bwipp.databarlimitedBadLength#9008'; //#9008
        $k[$j++] = "GS1 DataBar Limited must be 13 or 14 digits"; //#9008
        bwipp_raiseerror(); //#9008
    } //#9008
    if ($ne($geti($_.barcode, 0, 4), "\(01\)")) { //#9012
        $k[$j++] = 'bwipp.databarlimitedBadAI#9011'; //#9011
        $k[$j++] = "GS1 DataBar Limited must begin with (01) application identifier"; //#9011
        bwipp_raiseerror(); //#9011
    } //#9011
    var _7 = $get($_.barcode, 4); //#9013
    if ((_7 < 48) || (_7 > 49)) { //#9015
        $k[$j++] = 'bwipp.databarlimitedBadStartDigit#9014'; //#9014
        $k[$j++] = "GS1 DataBar Limited must begin with 0 or 1"; //#9014
        bwipp_raiseerror(); //#9014
    } //#9014
    var _A = $geti($_.barcode, 5, $_.barcode.length - 5); //#9016
    for (var _B = 0, _C = _A.length; _B < _C; _B++) { //#9020
        var _D = $get(_A, _B); //#9020
        if ((_D < 48) || (_D > 57)) { //#9019
            $k[$j++] = 'bwipp.databarlimitedBadCharacter#9018'; //#9018
            $k[$j++] = "GS1 DataBar Limited must contain only digits"; //#9018
            bwipp_raiseerror(); //#9018
        } //#9018
    } //#9018
    $_.checksum = 0; //#9023
    for (var _E = 0; _E <= 12; _E += 1) { //#9027
        $_.i = _E; //#9025
        $k[$j++] = 'checksum'; //#9026
        $k[$j++] = $_.checksum; //#9026
        $k[$j++] = $f($get($_.barcode, $_.i + 4) - 48); //#9026
        if (($_.i % 2) == 0) { //#9026
            var _K = $k[--$j]; //#9026
            $k[$j++] = _K * 3; //#9026
        } //#9026
        var _L = $k[--$j]; //#9026
        var _M = $k[--$j]; //#9026
        $_[$k[--$j]] = $f(_M + _L); //#9026
    } //#9026
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#9028
    if ($_.barcode.length == 18) { //#9033
        if ($get($_.barcode, 17) != ($_.checksum + 48)) { //#9032
            $k[$j++] = 'bwipp.databarlimitedBadCheckDigit#9031'; //#9031
            $k[$j++] = "Incorrect GS1 DataBar Limited check digit provided"; //#9031
            bwipp_raiseerror(); //#9031
        } //#9031
    } //#9031
    var _T = $s(18); //#9034
    $puti(_T, 0, $_.barcode); //#9035
    $put(_T, 17, $_.checksum + 48); //#9036
    $_.barcode = _T; //#9037
    if (!bwipp_databarlimited.__9042__) { //#9042
        $_ = Object.create($_); //#9042
        $_.linkval = $a([2, 0, 1, 5, 1, 3, 3, 5, 3, 1, 0, 9, 6]); //#9041
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_databarlimited.$ctx[id] = $_[id]); //#9041
        bwipp_databarlimited.__9042__ = 1; //#9041
        $_ = Object.getPrototypeOf($_); //#9041
    } //#9041
    $k[$j++] = Infinity; //#9043
    var _Z = $geti($_.barcode, 4, 13); //#9044
    for (var _a = 0, _b = _Z.length; _a < _b; _a++) { //#9044
        $k[$j++] = $f($get(_Z, _a) - 48); //#9044
    } //#9044
    $_.binval = $a(); //#9044
    if ($_.linkage) { //#9051
        for (var _h = 0, _g = $_.binval.length - 1; _h <= _g; _h += 1) { //#9050
            $_.i = _h; //#9048
            $put($_.binval, $_.i, $f($get($_.binval, $_.i) + $get($_.linkval, $_.i))); //#9049
        } //#9049
    } //#9049
    $_.txt = $a($_.barcode.length); //#9054
    for (var _u = 0, _t = $_.barcode.length - 1; _u <= _t; _u += 1) { //#9058
        $_.i = _u; //#9056
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), 0, 0, "", 0])); //#9057
    } //#9057
    $_.ncr = function() {
        var _11 = $k[--$j]; //#9061
        var _12 = $k[--$j]; //#9061
        var _13 = $f(_12 - _11); //#9061
        if (_11 < $f(_12 - _11)) { //#9061
            var _ = _13; //#9061
            _13 = _11; //#9061
            _11 = _; //#9061
        } //#9061
        $k[$j++] = _13; //#9068
        $k[$j++] = 1; //#9068
        $k[$j++] = 1; //#9068
        for (var _15 = _12, _14 = $f(_11 + 1); _15 >= _14; _15 -= 1) { //#9068
            var _16 = $k[--$j]; //#9064
            var _17 = $k[--$j]; //#9065
            var _18 = $k[--$j]; //#9065
            $k[$j++] = _18; //#9067
            $k[$j++] = _17; //#9067
            $k[$j++] = _16 * _15; //#9067
            if ($le(_17, _18)) { //#9067
                var _19 = $k[--$j]; //#9066
                var _1A = $k[--$j]; //#9066
                $k[$j++] = $f(_1A + 1); //#9066
                $k[$j++] = ~~(_19 / _1A); //#9066
            } //#9066
        } //#9066
        for (;;) { //#9072
            var _1B = $k[--$j]; //#9070
            var _1C = $k[--$j]; //#9070
            var _1D = $k[--$j]; //#9070
            $k[$j++] = _1D; //#9070
            $k[$j++] = _1C; //#9070
            $k[$j++] = _1B; //#9070
            if ($gt(_1C, _1D)) { //#9070
                break; //#9070
            } //#9070
            var _1E = $k[--$j]; //#9071
            var _1F = $k[--$j]; //#9071
            $k[$j++] = $f(_1F + 1); //#9071
            $k[$j++] = ~~(_1E / _1F); //#9071
        } //#9071
        var _1G = $k[--$j]; //#9073
        var _1H = $k[--$j]; //#9073
        $k[$j++] = _1G; //#9073
        $k[$j++] = _1H; //#9073
        $j--; //#9073
        var _1I = $k[--$j]; //#9073
        var _1J = $k[--$j]; //#9073
        $k[$j++] = _1I; //#9073
        $k[$j++] = _1J; //#9073
        $j--; //#9073
    }; //#9073
    $_.getRSSwidths = function() {
        $_.oe = $k[--$j]; //#9077
        $_.el = $k[--$j]; //#9078
        $_.mw = $k[--$j]; //#9079
        $_.nm = $k[--$j]; //#9080
        $_.val = $k[--$j]; //#9081
        $_.out = $a($_.el); //#9082
        $_.mask = 0; //#9083
        for (var _1T = 0, _1S = $f($_.el - 2); _1T <= _1S; _1T += 1) { //#9110
            $_.bar = _1T; //#9085
            $_.ew = 1; //#9086
            var _1V = $_.bar; //#9087
            $_.mask = $_.mask | ((_1V < 0 ? 1 >>> -_1V : 1 << _1V)); //#9087
            for (;;) { //#9106
                $k[$j++] = 'sval'; //#9088
                $k[$j++] = $f($f($_.nm - $_.ew) - 1); //#9088
                $k[$j++] = $f($f($_.el - $_.bar) - 2); //#9088
                $_.ncr(); //#9088
                var _1a = $k[--$j]; //#9088
                $_[$k[--$j]] = _1a; //#9088
                if (($_.oe && ($_.mask == 0)) && (($f(($f($f($_.nm - $_.ew) - ($_.el * 2))) + ($_.bar * 2))) >= -2)) { //#9091
                    $k[$j++] = 'sval'; //#9090
                    $k[$j++] = $_.sval; //#9090
                    $k[$j++] = $f(($f($f($_.nm - $_.ew) - $_.el)) + $_.bar); //#9090
                    $k[$j++] = $f($f($_.el - $_.bar) - 2); //#9090
                    $_.ncr(); //#9090
                    var _1p = $k[--$j]; //#9090
                    var _1q = $k[--$j]; //#9090
                    $_[$k[--$j]] = $f(_1q - _1p); //#9090
                } //#9090
                if ($f($_.el - $_.bar) > 2) { //#9100
                    $_.lval = 0; //#9093
                    for (var _20 = $f(($f(($f($f($_.nm - $_.ew) - $_.el)) + $_.bar)) + 2), _1z = $f($_.mw + 1); _20 >= _1z; _20 -= 1) { //#9097
                        $k[$j++] = $f(($f($f($_.nm - _20) - $_.ew)) - 1); //#9095
                        $k[$j++] = $f($f($_.el - $_.bar) - 3); //#9095
                        $_.ncr(); //#9095
                        $_.lval = $f($k[--$j] + $_.lval); //#9096
                    } //#9096
                    $_.sval = $f($_.sval - ($_.lval * ($f($f($_.el - $_.bar) - 1)))); //#9098
                } else { //#9100
                    if ($f($_.nm - $_.ew) > $_.mw) { //#9100
                        $_.sval = $f($_.sval - 1); //#9100
                    } //#9100
                } //#9100
                $_.val = $f($_.val - $_.sval); //#9102
                if ($_.val < 0) { //#9103
                    break; //#9103
                } //#9103
                $_.ew = $_.ew + 1; //#9104
                var _2K = $_.bar; //#9105
                $_.mask = $_.mask & (~((_2K < 0 ? 1 >>> -_2K : 1 << _2K))); //#9105
            } //#9105
            $_.val = $f($_.val + $_.sval); //#9107
            $_.nm = $f($_.nm - $_.ew); //#9108
            $put($_.out, $_.bar, $_.ew); //#9109
        } //#9109
        $put($_.out, $f($_.el - 1), $_.nm); //#9111
        $k[$j++] = $_.out; //#9112
    }; //#9112
    for (var _2W = 0; _2W <= 11; _2W += 1) { //#9119
        $_.i = _2W; //#9116
        var _2X = $_.binval; //#9117
        var _2Y = $_.i; //#9117
        $put(_2X, _2Y + 1, $f($get(_2X, _2Y + 1) + (($get($_.binval, $_.i) % 2013571) * 10))); //#9117
        $put($_.binval, $_.i, ~~($get($_.binval, $_.i) / 2013571)); //#9118
    } //#9118
    $_.d2 = $get($_.binval, 12) % 2013571; //#9120
    var _2k = $_.binval; //#9121
    $put(_2k, 12, ~~($get(_2k, 12) / 2013571)); //#9121
    $_.d1 = 0; //#9123
    $_.i = true; //#9124
    for (var _2m = 0; _2m <= 12; _2m += 1) { //#9134
        $_.j = _2m; //#9126
        var _2p = $get($_.binval, $_.j); //#9127
        $k[$j++] = _2p; //#9133
        if ((_2p == 0) && $_.i) { //#9132
            $j--; //#9129
        } else { //#9132
            $_.i = false; //#9131
            $k[$j++] = 'd1'; //#9132
            $k[$j++] = $_.d1; //#9132
            $r(3, -1); //#9132
            var _2t = $k[--$j]; //#9132
            var _2u = $k[--$j]; //#9132
            $_[$k[--$j]] = $f(_2u + (_2t * (~~Math.pow(10, 12 - $_.j)))); //#9132
        } //#9132
    } //#9132
    if (!bwipp_databarlimited.__9146__) { //#9146
        $_ = Object.create($_); //#9146
        $_.tab267 = $a([183063, 0, 17, 9, 6, 3, 6538, 28, 820063, 183064, 13, 13, 5, 4, 875, 728, 1000775, 820064, 9, 17, 3, 6, 28, 6454, 1491020, 1000776, 15, 11, 5, 4, 2415, 203, 1979844, 1491021, 11, 15, 4, 5, 203, 2408, 1996938, 1979845, 19, 7, 8, 1, 17094, 1, 2013570, 1996939, 7, 19, 1, 8, 1, 16632]); //#9145
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_databarlimited.$ctx[id] = $_[id]); //#9145
        bwipp_databarlimited.__9146__ = 1; //#9145
        $_ = Object.getPrototypeOf($_); //#9145
    } //#9145
    $_.i = 0; //#9148
    for (;;) { //#9158
        if ($_.d1 <= $get($_.tab267, $_.i)) { //#9156
            var _34 = $geti($_.tab267, $_.i + 1, 7); //#9150
            for (var _35 = 0, _36 = _34.length; _35 < _36; _35++) { //#9150
                $k[$j++] = $get(_34, _35); //#9150
            } //#9150
            $_.d1te = $k[--$j]; //#9151
            $_.d1to = $k[--$j]; //#9151
            $_.d1mwe = $k[--$j]; //#9152
            $_.d1mwo = $k[--$j]; //#9152
            $_.d1ele = $k[--$j]; //#9153
            $_.d1elo = $k[--$j]; //#9153
            $_.d1gs = $k[--$j]; //#9154
            break; //#9155
        } //#9155
        $_.i = $_.i + 8; //#9157
    } //#9157
    $_.i = 0; //#9160
    for (;;) { //#9170
        if ($_.d2 <= $get($_.tab267, $_.i)) { //#9168
            var _3M = $geti($_.tab267, $_.i + 1, 7); //#9162
            for (var _3N = 0, _3O = _3M.length; _3N < _3O; _3N++) { //#9162
                $k[$j++] = $get(_3M, _3N); //#9162
            } //#9162
            $_.d2te = $k[--$j]; //#9163
            $_.d2to = $k[--$j]; //#9163
            $_.d2mwe = $k[--$j]; //#9164
            $_.d2mwo = $k[--$j]; //#9164
            $_.d2ele = $k[--$j]; //#9165
            $_.d2elo = $k[--$j]; //#9165
            $_.d2gs = $k[--$j]; //#9166
            break; //#9167
        } //#9167
        $_.i = $_.i + 8; //#9169
    } //#9169
    $k[$j++] = 'd1wo'; //#9172
    $k[$j++] = ~~($f($_.d1 - $_.d1gs) / $_.d1te); //#9172
    $k[$j++] = $_.d1elo; //#9172
    $k[$j++] = $_.d1mwo; //#9172
    $k[$j++] = 7; //#9172
    $k[$j++] = false; //#9172
    $_.getRSSwidths(); //#9172
    var _3d = $k[--$j]; //#9172
    $_[$k[--$j]] = _3d; //#9172
    $k[$j++] = 'd1we'; //#9173
    $k[$j++] = $f($_.d1 - $_.d1gs) % $_.d1te; //#9173
    $k[$j++] = $_.d1ele; //#9173
    $k[$j++] = $_.d1mwe; //#9173
    $k[$j++] = 7; //#9173
    $k[$j++] = true; //#9173
    $_.getRSSwidths(); //#9173
    var _3k = $k[--$j]; //#9173
    $_[$k[--$j]] = _3k; //#9173
    $k[$j++] = 'd2wo'; //#9174
    $k[$j++] = ~~($f($_.d2 - $_.d2gs) / $_.d2te); //#9174
    $k[$j++] = $_.d2elo; //#9174
    $k[$j++] = $_.d2mwo; //#9174
    $k[$j++] = 7; //#9174
    $k[$j++] = false; //#9174
    $_.getRSSwidths(); //#9174
    var _3r = $k[--$j]; //#9174
    $_[$k[--$j]] = _3r; //#9174
    $k[$j++] = 'd2we'; //#9175
    $k[$j++] = $f($_.d2 - $_.d2gs) % $_.d2te; //#9175
    $k[$j++] = $_.d2ele; //#9175
    $k[$j++] = $_.d2mwe; //#9175
    $k[$j++] = 7; //#9175
    $k[$j++] = true; //#9175
    $_.getRSSwidths(); //#9175
    var _3y = $k[--$j]; //#9175
    $_[$k[--$j]] = _3y; //#9175
    $_.d1w = $a(14); //#9177
    for (var _41 = 0; _41 <= 6; _41 += 1) { //#9182
        $_.i = _41; //#9179
        $put($_.d1w, $_.i * 2, $get($_.d1wo, $_.i)); //#9180
        $put($_.d1w, ($_.i * 2) + 1, $get($_.d1we, $_.i)); //#9181
    } //#9181
    $_.d2w = $a(14); //#9184
    for (var _4D = 0; _4D <= 6; _4D += 1) { //#9189
        $_.i = _4D; //#9186
        $put($_.d2w, $_.i * 2, $get($_.d2wo, $_.i)); //#9187
        $put($_.d2w, ($_.i * 2) + 1, $get($_.d2we, $_.i)); //#9188
    } //#9188
    $k[$j++] = Infinity; //#9191
    var _4O = $_.d1w; //#9192
    for (var _4P = 0, _4Q = _4O.length; _4P < _4Q; _4P++) { //#9192
        $k[$j++] = $get(_4O, _4P); //#9192
    } //#9192
    var _4S = $_.d2w; //#9193
    for (var _4T = 0, _4U = _4S.length; _4T < _4U; _4T++) { //#9193
        $k[$j++] = $get(_4S, _4T); //#9193
    } //#9193
    $_.widths = $a(); //#9193
    if (!bwipp_databarlimited.__9217__) { //#9217
        $_ = Object.create($_); //#9217
        $_.checkweights = $a([1, 3, 9, 27, 81, 65, 17, 51, 64, 14, 42, 37, 22, 66, 20, 60, 2, 6, 18, 54, 73, 41, 34, 13, 39, 28, 84, 74]); //#9200
        $k[$j++] = Infinity; //#9202
        for (var _4Y = 0; _4Y <= 43; _4Y += 1) { //#9203
            $k[$j++] = _4Y; //#9203
        } //#9203
        $k[$j++] = 45; //#9205
        $k[$j++] = 52; //#9205
        $k[$j++] = 57; //#9205
        for (var _4Z = 63; _4Z <= 66; _4Z += 1) { //#9205
            $k[$j++] = _4Z; //#9205
        } //#9205
        for (var _4a = 73; _4a <= 79; _4a += 1) { //#9206
            $k[$j++] = _4a; //#9206
        } //#9206
        $k[$j++] = 82; //#9208
        for (var _4b = 126; _4b <= 130; _4b += 1) { //#9208
            $k[$j++] = _4b; //#9208
        } //#9208
        $k[$j++] = 132; //#9210
        for (var _4c = 141; _4c <= 146; _4c += 1) { //#9210
            $k[$j++] = _4c; //#9210
        } //#9210
        for (var _4d = 210; _4d <= 217; _4d += 1) { //#9211
            $k[$j++] = _4d; //#9211
        } //#9211
        $k[$j++] = 220; //#9213
        for (var _4e = 316; _4e <= 320; _4e += 1) { //#9213
            $k[$j++] = _4e; //#9213
        } //#9213
        $k[$j++] = 322; //#9215
        $k[$j++] = 323; //#9215
        $k[$j++] = 326; //#9215
        $k[$j++] = 337; //#9215
        $_.checkseq = $a(); //#9215
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_databarlimited.$ctx[id] = $_[id]); //#9216
        bwipp_databarlimited.__9217__ = 1; //#9216
        $_ = Object.getPrototypeOf($_); //#9216
    } //#9216
    $_.checksum = 0; //#9219
    for (var _4h = 0; _4h <= 27; _4h += 1) { //#9223
        $_.i = _4h; //#9221
        $_.checksum = $f($_.checksum + ($get($_.widths, $_.i) * $get($_.checkweights, $_.i))); //#9222
    } //#9222
    $_.checksum = $_.checksum % 89; //#9224
    $_.seq = $get($_.checkseq, $_.checksum); //#9225
    $k[$j++] = 'swidths'; //#9226
    $k[$j++] = ~~($_.seq / 21); //#9226
    $k[$j++] = 8; //#9226
    $k[$j++] = 3; //#9226
    $k[$j++] = 6; //#9226
    $k[$j++] = false; //#9226
    $_.getRSSwidths(); //#9226
    var _4u = $k[--$j]; //#9226
    $_[$k[--$j]] = _4u; //#9226
    $k[$j++] = 'bwidths'; //#9227
    $k[$j++] = $_.seq % 21; //#9227
    $k[$j++] = 8; //#9227
    $k[$j++] = 3; //#9227
    $k[$j++] = 6; //#9227
    $k[$j++] = false; //#9227
    $_.getRSSwidths(); //#9227
    var _4x = $k[--$j]; //#9227
    $_[$k[--$j]] = _4x; //#9227
    $_.checkwidths = $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1]); //#9229
    for (var _50 = 0; _50 <= 5; _50 += 1) { //#9234
        $_.i = _50; //#9231
        $put($_.checkwidths, $_.i * 2, $get($_.swidths, $_.i)); //#9232
        $put($_.checkwidths, ($_.i * 2) + 1, $get($_.bwidths, $_.i)); //#9233
    } //#9233
    $k[$j++] = Infinity; //#9236
    var _5B = $_.d1w; //#9237
    $k[$j++] = 1; //#9237
    for (var _5C = 0, _5D = _5B.length; _5C < _5D; _5C++) { //#9237
        $k[$j++] = $get(_5B, _5C); //#9237
    } //#9237
    var _5F = $_.checkwidths; //#9237
    for (var _5G = 0, _5H = _5F.length; _5G < _5H; _5G++) { //#9237
        $k[$j++] = $get(_5F, _5G); //#9237
    } //#9237
    var _5J = $_.d2w; //#9237
    for (var _5K = 0, _5L = _5J.length; _5K < _5L; _5K++) { //#9237
        $k[$j++] = $get(_5J, _5K); //#9237
    } //#9237
    $k[$j++] = 1; //#9237
    $k[$j++] = 1; //#9237
    $k[$j++] = 5; //#9237
    $_.sbs = $a(); //#9237
    $k[$j++] = Infinity; //#9241
    var _5O = $_.sbs; //#9243
    $k[$j++] = Infinity; //#9244
    for (var _5Q = 0, _5R = ~~(($_.sbs.length + 1) / 2); _5Q < _5R; _5Q++) { //#9244
        $k[$j++] = $_.height; //#9244
    } //#9244
    var _5T = $a(); //#9244
    $k[$j++] = Infinity; //#9245
    for (var _5V = 0, _5W = ~~(($_.sbs.length + 1) / 2); _5V < _5W; _5V++) { //#9245
        $k[$j++] = 0; //#9245
    } //#9245
    var _5X = $a(); //#9245
    $k[$j++] = 'ren'; //#9250
    $k[$j++] = 'renlinear'; //#9250
    $k[$j++] = 'sbs'; //#9250
    $k[$j++] = _5O; //#9250
    $k[$j++] = 'bhs'; //#9250
    $k[$j++] = _5T; //#9250
    $k[$j++] = 'bbs'; //#9250
    $k[$j++] = _5X; //#9250
    $k[$j++] = 'txt'; //#9250
    $k[$j++] = $_.txt; //#9250
    $k[$j++] = 'textxalign'; //#9250
    $k[$j++] = "center"; //#9250
    $k[$j++] = 'borderleft'; //#9250
    $k[$j++] = 0; //#9250
    $k[$j++] = 'borderright'; //#9250
    $k[$j++] = 0; //#9250
    $k[$j++] = 'opt'; //#9250
    $k[$j++] = $_.options; //#9250
    var _5a = $d(); //#9250
    $k[$j++] = _5a; //#9253
    if (!$_.dontdraw) { //#9253
        bwipp_renlinear(); //#9253
    } //#9253
    $_ = Object.getPrototypeOf($_); //#9255
    $_ = Object.getPrototypeOf($_); //#9257
} //bwipp_databarlimited
function bwipp_databarexpanded() {
    $_ = Object.create($_); //#9289
    $_.parse = false; //#9292
    $_.dontlint = false; //#9293
    $_.lintreqs = true; //#9294
    $_.dontdraw = false; //#9295
    $_.height = 34 / 72; //#9296
    $_.format = "expanded"; //#9297
    $_.segments = -1; //#9298
    $_.linkage = false; //#9299
    $_.barxmult = 34; //#9300
    $k[$j++] = $_; //#9302
    bwipp_processoptions(); //#9302
    $_.options = $k[--$j]; //#9302
    $_.barcode = $k[--$j]; //#9303
    bwipp_loadctx(bwipp_databarexpanded); //#9305
    if ($_.barxmult < 34) { //#9309
        $k[$j++] = 'bwipp.databarStackedOmniBarXmult#9308'; //#9308
        $k[$j++] = "GS1 DataBar Expanded Stacked must have a barxmult of at least 34"; //#9308
        bwipp_raiseerror(); //#9308
    } //#9308
    if ($ne($_.format, "expanded") && $ne($_.format, "expandedstacked")) { //#9313
        $k[$j++] = 'bwipp.databarexpandedBadFormat#9312'; //#9312
        $k[$j++] = "Valid formats are expanded and expandedstacked"; //#9312
        bwipp_raiseerror(); //#9312
    } //#9312
    if ($_.segments == -1) { //#9319
        var _7 = $eq($_.format, "expandedstacked") ? 4 : 22; //#9316
        $_.segments = _7; //#9316
    } else { //#9319
        if ((($_.segments < 2) || ($_.segments > 22)) || (($_.segments % 2) != 0)) { //#9320
            $k[$j++] = 'bwipp.gs1databarexpandedBadSegments#9319'; //#9319
            $k[$j++] = "The number of segments must be even from 2 to 22"; //#9319
            bwipp_raiseerror(); //#9319
        } //#9319
    } //#9319
    $k[$j++] = $_.barcode; //#9323
    $k[$j++] = 'ai'; //#9323
    bwipp_gs1process(); //#9323
    $_.fncs = $k[--$j]; //#9324
    $_.vals = $k[--$j]; //#9325
    $_.ais = $k[--$j]; //#9326
    for (;;) { //#9414
        if ($_.ais.length == 2) { //#9338
            if ($eq($get($_.ais, 0), "01") && $eq($get($_.ais, 1), "3103")) { //#9337
                if ($eq($geti($get($_.vals, 0), 0, 1), "9") && ($cvi($get($_.vals, 1)) <= 32767)) { //#9336
                    $k[$j++] = "0100"; //#9335
                    $k[$j++] = false; //#9335
                    break; //#9335
                } //#9335
            } //#9335
        } //#9335
        if ($_.ais.length == 2) { //#9347
            if ($eq($get($_.ais, 0), "01") && $eq($get($_.ais, 1), "3202")) { //#9346
                if ($eq($geti($get($_.vals, 0), 0, 1), "9") && ($cvi($get($_.vals, 1)) <= 9999)) { //#9345
                    $k[$j++] = "0101"; //#9344
                    $k[$j++] = false; //#9344
                    break; //#9344
                } //#9344
            } //#9344
        } //#9344
        if ($_.ais.length == 2) { //#9356
            if ($eq($get($_.ais, 0), "01") && $eq($get($_.ais, 1), "3203")) { //#9355
                if ($eq($geti($get($_.vals, 0), 0, 1), "9") && ($cvi($get($_.vals, 1)) <= 22767)) { //#9354
                    $k[$j++] = "0101"; //#9353
                    $k[$j++] = false; //#9353
                    break; //#9353
                } //#9353
            } //#9353
        } //#9353
        var _k = $_.ais.length; //#9359
        if ((_k == 2) || (_k == 3)) { //#9390
            $k[$j++] = 'ai310x'; //#9360
            $k[$j++] = false; //#9360
            for (var _l = 3100; _l <= 3109; _l += 1) { //#9360
                var _q = $k[--$j]; //#9360
                $k[$j++] = _q || $eq($cvrs($s(4), _l, 10), $get($_.ais, 1)); //#9360
            } //#9360
            var _r = $k[--$j]; //#9360
            $_[$k[--$j]] = _r; //#9360
            $k[$j++] = 'ai320x'; //#9361
            $k[$j++] = false; //#9361
            for (var _t = 3200; _t <= 3209; _t += 1) { //#9361
                var _y = $k[--$j]; //#9361
                $k[$j++] = _y || $eq($cvrs($s(4), _t, 10), $get($_.ais, 1)); //#9361
            } //#9361
            var _z = $k[--$j]; //#9361
            $_[$k[--$j]] = _z; //#9361
            if ($_.ais.length == 3) { //#9365
                var _12 = $a(["11", "13", "15", "17"]); //#9363
                $k[$j++] = 'aibad'; //#9363
                $k[$j++] = true; //#9363
                for (var _13 = 0, _14 = _12.length; _13 < _14; _13++) { //#9363
                    var _18 = $k[--$j]; //#9363
                    $k[$j++] = _18 && $ne($get(_12, _13), $get($_.ais, 2)); //#9363
                } //#9363
                var _19 = $k[--$j]; //#9363
                $_[$k[--$j]] = _19; //#9363
            } else { //#9365
                $_.aibad = false; //#9365
            } //#9365
            if (($eq($get($_.ais, 0), "01") && ($_.ai310x || $_.ai320x)) && (!$_.aibad)) { //#9389
                if ($_.ais.length == 3) { //#9386
                    var _1P = $cvi($geti($get($_.vals, 2), 2, 2)); //#9371
                    var _1T = $cvi($geti($get($_.vals, 2), 4, 2)); //#9372
                    if ((($eq($geti($get($_.vals, 0), 0, 1), "9") && ($cvi($get($_.vals, 1)) <= 99999)) && ((_1P >= 1) && (_1P <= 12))) && ((_1T >= 0) && (_1T <= 31))) { //#9381
                        if ($_.ai310x && $eq($get($_.ais, 2), "11")) { //#9373
                            $k[$j++] = "0111000"; //#9373
                            $k[$j++] = false; //#9373
                            break; //#9373
                        } //#9373
                        if ($_.ai320x && $eq($get($_.ais, 2), "11")) { //#9374
                            $k[$j++] = "0111001"; //#9374
                            $k[$j++] = false; //#9374
                            break; //#9374
                        } //#9374
                        if ($_.ai310x && $eq($get($_.ais, 2), "13")) { //#9375
                            $k[$j++] = "0111010"; //#9375
                            $k[$j++] = false; //#9375
                            break; //#9375
                        } //#9375
                        if ($_.ai320x && $eq($get($_.ais, 2), "13")) { //#9376
                            $k[$j++] = "0111011"; //#9376
                            $k[$j++] = false; //#9376
                            break; //#9376
                        } //#9376
                        if ($_.ai310x && $eq($get($_.ais, 2), "15")) { //#9377
                            $k[$j++] = "0111100"; //#9377
                            $k[$j++] = false; //#9377
                            break; //#9377
                        } //#9377
                        if ($_.ai320x && $eq($get($_.ais, 2), "15")) { //#9378
                            $k[$j++] = "0111101"; //#9378
                            $k[$j++] = false; //#9378
                            break; //#9378
                        } //#9378
                        if ($_.ai310x && $eq($get($_.ais, 2), "17")) { //#9379
                            $k[$j++] = "0111110"; //#9379
                            $k[$j++] = false; //#9379
                            break; //#9379
                        } //#9379
                        if ($_.ai320x && $eq($get($_.ais, 2), "17")) { //#9380
                            $k[$j++] = "0111111"; //#9380
                            $k[$j++] = false; //#9380
                            break; //#9380
                        } //#9380
                    } //#9380
                } else { //#9386
                    if ($eq($geti($get($_.vals, 0), 0, 1), "9") && ($cvi($get($_.vals, 1)) <= 99999)) { //#9387
                        if ($_.ai310x) { //#9385
                            $k[$j++] = "0111000"; //#9385
                            $k[$j++] = false; //#9385
                            break; //#9385
                        } //#9385
                        if ($_.ai320x) { //#9386
                            $k[$j++] = "0111001"; //#9386
                            $k[$j++] = false; //#9386
                            break; //#9386
                        } //#9386
                    } //#9386
                } //#9386
            } //#9386
        } //#9386
        if ($_.ais.length >= 2) { //#9398
            $k[$j++] = 'ai392x'; //#9394
            $k[$j++] = false; //#9394
            for (var _20 = 3920; _20 <= 3923; _20 += 1) { //#9394
                var _25 = $k[--$j]; //#9394
                $k[$j++] = _25 || $eq($cvrs($s(4), _20, 10), $get($_.ais, 1)); //#9394
            } //#9394
            var _26 = $k[--$j]; //#9394
            $_[$k[--$j]] = _26; //#9394
            if ($eq($get($_.ais, 0), "01") && $_.ai392x) { //#9397
                if ($eq($geti($get($_.vals, 0), 0, 1), "9")) { //#9396
                    $k[$j++] = "01100"; //#9396
                    $k[$j++] = true; //#9396
                    break; //#9396
                } //#9396
            } //#9396
        } //#9396
        if ($_.ais.length >= 2) { //#9406
            $k[$j++] = 'ai393x'; //#9402
            $k[$j++] = false; //#9402
            for (var _2F = 3930; _2F <= 3933; _2F += 1) { //#9402
                var _2K = $k[--$j]; //#9402
                $k[$j++] = _2K || $eq($cvrs($s(4), _2F, 10), $get($_.ais, 1)); //#9402
            } //#9402
            var _2L = $k[--$j]; //#9402
            $_[$k[--$j]] = _2L; //#9402
            if ($eq($get($_.ais, 0), "01") && $_.ai393x) { //#9405
                if ($eq($geti($get($_.vals, 0), 0, 1), "9")) { //#9404
                    $k[$j++] = "01101"; //#9404
                    $k[$j++] = true; //#9404
                    break; //#9404
                } //#9404
            } //#9404
        } //#9404
        if ($eq($get($_.ais, 0), "01")) { //#9409
            $k[$j++] = "1"; //#9409
            $k[$j++] = true; //#9409
            break; //#9409
        } //#9409
        $k[$j++] = "00"; //#9412
        $k[$j++] = true; //#9412
        break; //#9412
    } //#9412
    $_.gpfallow = $k[--$j]; //#9415
    $_.method = $k[--$j]; //#9416
    $_.conv12to40 = function() {
        var _2Y = $strcpy($s(40), "0000000000000000000000000000000000000000"); //#9419
        var _2Z = $k[--$j]; //#9420
        var _2d = $cvrs($s(10), $cvi($geti(_2Z, 0, 3)), 2); //#9420
        $puti($geti(_2Y, 0, 10), 10 - _2d.length, _2d); //#9420
        var _2h = $cvrs($s(10), $cvi($geti(_2Z, 3, 3)), 2); //#9421
        $puti($geti(_2Y, 10, 10), 10 - _2h.length, _2h); //#9421
        var _2l = $cvrs($s(10), $cvi($geti(_2Z, 6, 3)), 2); //#9422
        $puti($geti(_2Y, 20, 10), 10 - _2l.length, _2l); //#9422
        var _2p = $cvrs($s(10), $cvi($geti(_2Z, 9, 3)), 2); //#9423
        $puti($geti(_2Y, 30, 10), 10 - _2p.length, _2p); //#9423
        $k[$j++] = _2Y; //#9424
        $k[$j++] = _2Z; //#9424
        $j--; //#9424
    }; //#9424
    $_.conv13to44 = function() {
        var _2r = $strcpy($s(44), "00000000000000000000000000000000000000000000"); //#9428
        var _2s = $k[--$j]; //#9429
        var _2w = $cvrs($s(4), $cvi($geti(_2s, 0, 1)), 2); //#9429
        $puti($geti(_2r, 0, 4), 4 - _2w.length, _2w); //#9429
        $k[$j++] = _2r; //#9430
        $k[$j++] = _2r; //#9430
        $k[$j++] = $geti(_2s, 1, 12); //#9430
        $_.conv12to40(); //#9430
        var _2y = $k[--$j]; //#9430
        $puti($k[--$j], 4, _2y); //#9430
    }; //#9430
    $_.tobin = function() {
        var _31 = $s($k[--$j]); //#9434
        $k[$j++] = _31; //#9434
        for (var _33 = 0, _32 = _31.length - 1; _33 <= _32; _33 += 1) { //#9434
            var _34 = $k[--$j]; //#9434
            $put(_34, _33, 48); //#9434
            $k[$j++] = _34; //#9434
        } //#9434
        var _35 = $k[--$j]; //#9435
        $k[$j++] = _35; //#9435
        $k[$j++] = _35; //#9435
        $r(3, -1); //#9435
        var _36 = $k[--$j]; //#9435
        var _37 = $k[--$j]; //#9435
        var _39 = $cvrs($s(_37.length), _36, 2); //#9435
        $puti(_37, _37.length - _39.length, _39); //#9435
    }; //#9435
    $_.fnc1 = -1; //#9438
    $_.lnumeric = -2; //#9438
    $_.lalphanumeric = -3; //#9438
    $_.liso646 = -4; //#9438
    if ($eq($_.method, "00")) { //#9443
        $_.cdf = $a([]); //#9441
        $_.gpf = $a([]); //#9442
    } //#9442
    if ($eq($_.method, "1")) { //#9452
        $k[$j++] = 'cdf'; //#9446
        $k[$j++] = $geti($get($_.vals, 0), 0, 13); //#9446
        $_.conv13to44(); //#9446
        var _3H = $k[--$j]; //#9446
        $_[$k[--$j]] = _3H; //#9446
        $k[$j++] = Infinity; //#9447
        var _3J = $_.cdf; //#9447
        for (var _3K = 0, _3L = _3J.length; _3K < _3L; _3K++) { //#9447
            $k[$j++] = $f($get(_3J, _3K) - 48); //#9447
        } //#9447
        $_.cdf = $a(); //#9447
        $_.gpf = $a([]); //#9448
        $_.ais = $geti($_.ais, 1, $_.ais.length - 1); //#9449
        $_.vals = $geti($_.vals, 1, $_.vals.length - 1); //#9450
        $_.fncs = $geti($_.fncs, 1, $_.fncs.length - 1); //#9451
    } //#9451
    if ($eq($_.method, "0100")) { //#9463
        $_.cdf = $s(55); //#9455
        $k[$j++] = $_.cdf; //#9456
        $k[$j++] = 0; //#9456
        $k[$j++] = $geti($get($_.vals, 0), 1, 12); //#9456
        $_.conv12to40(); //#9456
        var _3e = $k[--$j]; //#9456
        var _3f = $k[--$j]; //#9456
        $puti($k[--$j], _3f, _3e); //#9456
        $k[$j++] = $_.cdf; //#9457
        $k[$j++] = 40; //#9457
        $k[$j++] = $cvi($get($_.vals, 1)); //#9457
        $k[$j++] = 15; //#9457
        $_.tobin(); //#9457
        var _3k = $k[--$j]; //#9457
        var _3l = $k[--$j]; //#9457
        $puti($k[--$j], _3l, _3k); //#9457
        $k[$j++] = Infinity; //#9458
        var _3n = $_.cdf; //#9458
        for (var _3o = 0, _3p = _3n.length; _3o < _3p; _3o++) { //#9458
            $k[$j++] = $get(_3n, _3o) - 48; //#9458
        } //#9458
        $_.cdf = $a(); //#9458
        $_.gpf = $a([]); //#9459
        $_.ais = $a([]); //#9460
        $_.vals = $a([]); //#9461
        $_.fncs = $a([]); //#9462
    } //#9462
    if ($eq($_.method, "0101")) { //#9479
        $_.cdf = $s(55); //#9466
        $k[$j++] = $_.cdf; //#9467
        $k[$j++] = 0; //#9467
        $k[$j++] = $geti($get($_.vals, 0), 1, 12); //#9467
        $_.conv12to40(); //#9467
        var _42 = $k[--$j]; //#9467
        var _43 = $k[--$j]; //#9467
        $puti($k[--$j], _43, _42); //#9467
        if ($eq($get($_.ais, 1), "3202")) { //#9471
            $k[$j++] = $cvi($get($_.vals, 1)); //#9469
            $k[$j++] = 15; //#9469
            $_.tobin(); //#9469
        } else { //#9471
            $k[$j++] = $cvi($get($_.vals, 1)) + 10000; //#9471
            $k[$j++] = 15; //#9471
            $_.tobin(); //#9471
        } //#9471
        $puti($_.cdf, 40, $k[--$j]); //#9473
        $k[$j++] = Infinity; //#9474
        var _4D = $_.cdf; //#9474
        for (var _4E = 0, _4F = _4D.length; _4E < _4F; _4E++) { //#9474
            $k[$j++] = $get(_4D, _4E) - 48; //#9474
        } //#9474
        $_.cdf = $a(); //#9474
        $_.gpf = $a([]); //#9475
        $_.ais = $a([]); //#9476
        $_.vals = $a([]); //#9477
        $_.fncs = $a([]); //#9478
    } //#9478
    if ($_.method.length == 7) { //#9501
        $_.cdf = $s(76); //#9482
        $k[$j++] = $_.cdf; //#9483
        $k[$j++] = 0; //#9483
        $k[$j++] = $geti($get($_.vals, 0), 1, 12); //#9483
        $_.conv12to40(); //#9483
        var _4S = $k[--$j]; //#9483
        var _4T = $k[--$j]; //#9483
        $puti($k[--$j], _4T, _4S); //#9483
        var _4V = $s(6); //#9484
        $puti(_4V, 0, $geti($get($_.ais, 1), 3, 1)); //#9484
        $puti(_4V, 1, $geti($get($_.vals, 1), 1, 5)); //#9485
        $k[$j++] = $cvi(_4V); //#9485
        $k[$j++] = 20; //#9485
        $_.tobin(); //#9485
        $puti($_.cdf, 40, $k[--$j]); //#9486
        if ($_.ais.length == 3) { //#9493
            var _4g = $get($_.vals, 2); //#9488
            $k[$j++] = ($cvi($geti(_4g, 0, 2)) * 384) + ((($cvi($geti(_4g, 2, 2)) - 1) * 32) + $cvi($geti(_4g, 4, 2))); //#9491
        } else { //#9493
            $k[$j++] = 38400; //#9493
        } //#9493
        $k[$j++] = 16; //#9495
        $_.tobin(); //#9495
        $puti($_.cdf, 60, $k[--$j]); //#9495
        $k[$j++] = Infinity; //#9496
        var _4m = $_.cdf; //#9496
        for (var _4n = 0, _4o = _4m.length; _4n < _4o; _4n++) { //#9496
            $k[$j++] = $get(_4m, _4n) - 48; //#9496
        } //#9496
        $_.cdf = $a(); //#9496
        $_.gpf = $a([]); //#9497
        $_.ais = $a([]); //#9498
        $_.vals = $a([]); //#9499
        $_.fncs = $a([]); //#9500
    } //#9500
    if ($eq($_.method, "01100")) { //#9512
        $_.cdf = $s(42); //#9504
        $k[$j++] = $_.cdf; //#9505
        $k[$j++] = 0; //#9505
        $k[$j++] = $geti($get($_.vals, 0), 1, 12); //#9505
        $_.conv12to40(); //#9505
        var _51 = $k[--$j]; //#9505
        var _52 = $k[--$j]; //#9505
        $puti($k[--$j], _52, _51); //#9505
        $k[$j++] = $_.cdf; //#9506
        $k[$j++] = 40; //#9506
        $k[$j++] = $cvi($geti($get($_.ais, 1), 3, 1)); //#9506
        $k[$j++] = 2; //#9506
        $_.tobin(); //#9506
        var _58 = $k[--$j]; //#9506
        var _59 = $k[--$j]; //#9506
        $puti($k[--$j], _59, _58); //#9506
        $k[$j++] = Infinity; //#9507
        var _5B = $_.cdf; //#9507
        for (var _5C = 0, _5D = _5B.length; _5C < _5D; _5C++) { //#9507
            $k[$j++] = $get(_5B, _5C) - 48; //#9507
        } //#9507
        $_.cdf = $a(); //#9507
        $k[$j++] = Infinity; //#9508
        $forall($get($_.vals, 1)); //#9508
        if ($_.ais.length > 2) { //#9508
            $k[$j++] = $_.fnc1; //#9508
        } //#9508
        $_.gpf = $a(); //#9508
        $_.ais = $geti($_.ais, 2, $_.ais.length - 2); //#9509
        $_.vals = $geti($_.vals, 2, $_.vals.length - 2); //#9510
        $_.fncs = $geti($_.fncs, 2, $_.fncs.length - 2); //#9511
    } //#9511
    if ($eq($_.method, "01101")) { //#9524
        $_.cdf = $s(52); //#9515
        $k[$j++] = $_.cdf; //#9516
        $k[$j++] = 0; //#9516
        $k[$j++] = $geti($get($_.vals, 0), 1, 12); //#9516
        $_.conv12to40(); //#9516
        var _5a = $k[--$j]; //#9516
        var _5b = $k[--$j]; //#9516
        $puti($k[--$j], _5b, _5a); //#9516
        $k[$j++] = $_.cdf; //#9517
        $k[$j++] = 40; //#9517
        $k[$j++] = $cvi($geti($get($_.ais, 1), 3, 1)); //#9517
        $k[$j++] = 2; //#9517
        $_.tobin(); //#9517
        var _5h = $k[--$j]; //#9517
        var _5i = $k[--$j]; //#9517
        $puti($k[--$j], _5i, _5h); //#9517
        $k[$j++] = $_.cdf; //#9518
        $k[$j++] = 42; //#9518
        $k[$j++] = $cvi($geti($get($_.vals, 1), 0, 3)); //#9518
        $k[$j++] = 10; //#9518
        $_.tobin(); //#9518
        var _5o = $k[--$j]; //#9518
        var _5p = $k[--$j]; //#9518
        $puti($k[--$j], _5p, _5o); //#9518
        $k[$j++] = Infinity; //#9519
        var _5r = $_.cdf; //#9519
        for (var _5s = 0, _5t = _5r.length; _5s < _5t; _5s++) { //#9519
            $k[$j++] = $get(_5r, _5s) - 48; //#9519
        } //#9519
        $_.cdf = $a(); //#9519
        $k[$j++] = Infinity; //#9520
        var _5x = $get($_.vals, 1); //#9520
        var _5y = $geti(_5x, 3, _5x.length - 3); //#9520
        for (var _5z = 0, _60 = _5y.length; _5z < _60; _5z++) { //#9520
            $k[$j++] = $get(_5y, _5z); //#9520
        } //#9520
        if ($_.ais.length > 2) { //#9520
            $k[$j++] = $_.fnc1; //#9520
        } //#9520
        $_.gpf = $a(); //#9520
        $_.ais = $geti($_.ais, 2, $_.ais.length - 2); //#9521
        $_.vals = $geti($_.vals, 2, $_.vals.length - 2); //#9522
        $_.fncs = $geti($_.fncs, 2, $_.fncs.length - 2); //#9523
    } //#9523
    if ($_.gpfallow) { //#9530
        $_.vlf = $a(2); //#9528
    } else { //#9530
        $_.vlf = $a([]); //#9530
    } //#9530
    if (!bwipp_databarexpanded.__9571__) { //#9571
        $_ = Object.create($_); //#9571
        $k[$j++] = Infinity; //#9534
        for (var _6H = 0; _6H <= 119; _6H += 1) { //#9543
            var _6J = $strcpy($s(2), "00"); //#9536
            var _6L = $cvrs($s(2), _6H, 11); //#9536
            $puti(_6J, 2 - _6L.length, _6L); //#9537
            $k[$j++] = _6H; //#9538
            $k[$j++] = _6J; //#9538
            if ($get(_6J, 0) == 65) { //#9538
                var _6N = $k[--$j]; //#9538
                $put(_6N, 0, 94); //#9538
                $k[$j++] = _6N; //#9538
            } //#9538
            var _6O = $k[--$j]; //#9539
            $k[$j++] = _6O; //#9539
            if ($get(_6O, 1) == 65) { //#9539
                var _6Q = $k[--$j]; //#9539
                $put(_6Q, 1, 94); //#9539
                $k[$j++] = _6Q; //#9539
            } //#9539
            var _6R = $k[--$j]; //#9540
            var _6U = $strcpy($s(7), "0000000"); //#9541
            var _6W = $cvrs($s(7), $f($k[--$j] + 8), 2); //#9541
            $puti(_6U, 7 - _6W.length, _6W); //#9542
            $k[$j++] = _6R; //#9542
            $k[$j++] = _6U; //#9542
        } //#9542
        $k[$j++] = $_.lalphanumeric; //#9544
        $k[$j++] = "0000"; //#9544
        $_.numeric = $d(); //#9545
        $k[$j++] = Infinity; //#9547
        for (var _6Z = 48; _6Z <= 57; _6Z += 1) { //#9548
            $k[$j++] = _6Z; //#9548
            $k[$j++] = _6Z - 43; //#9548
            $k[$j++] = 5; //#9548
            $_.tobin(); //#9548
        } //#9548
        $k[$j++] = $_.fnc1; //#9550
        $k[$j++] = "01111"; //#9550
        for (var _6b = 65; _6b <= 90; _6b += 1) { //#9550
            $k[$j++] = _6b; //#9550
            $k[$j++] = _6b - 33; //#9550
            $k[$j++] = 6; //#9550
            $_.tobin(); //#9550
        } //#9550
        $k[$j++] = 42; //#9552
        $k[$j++] = "111010"; //#9552
        for (var _6c = 44; _6c <= 47; _6c += 1) { //#9552
            $k[$j++] = _6c; //#9552
            $k[$j++] = _6c + 15; //#9552
            $k[$j++] = 6; //#9552
            $_.tobin(); //#9552
        } //#9552
        $k[$j++] = $_.lnumeric; //#9554
        $k[$j++] = "000"; //#9554
        $k[$j++] = $_.liso646; //#9554
        $k[$j++] = "00100"; //#9554
        $_.alphanumeric = $d(); //#9555
        $k[$j++] = Infinity; //#9557
        for (var _6g = 48; _6g <= 57; _6g += 1) { //#9558
            $k[$j++] = _6g; //#9558
            $k[$j++] = _6g - 43; //#9558
            $k[$j++] = 5; //#9558
            $_.tobin(); //#9558
        } //#9558
        $k[$j++] = $_.fnc1; //#9560
        $k[$j++] = "01111"; //#9560
        for (var _6i = 65; _6i <= 90; _6i += 1) { //#9560
            $k[$j++] = _6i; //#9560
            $k[$j++] = _6i - 1; //#9560
            $k[$j++] = 7; //#9560
            $_.tobin(); //#9560
        } //#9560
        for (var _6j = 97; _6j <= 122; _6j += 1) { //#9561
            $k[$j++] = _6j; //#9561
            $k[$j++] = _6j - 7; //#9561
            $k[$j++] = 7; //#9561
            $_.tobin(); //#9561
        } //#9561
        $k[$j++] = 33; //#9564
        $k[$j++] = "11101000"; //#9564
        $k[$j++] = 34; //#9564
        $k[$j++] = "11101001"; //#9564
        for (var _6k = 37; _6k <= 47; _6k += 1) { //#9564
            $k[$j++] = _6k; //#9564
            $k[$j++] = _6k + 197; //#9564
            $k[$j++] = 8; //#9564
            $_.tobin(); //#9564
        } //#9564
        for (var _6l = 58; _6l <= 63; _6l += 1) { //#9565
            $k[$j++] = _6l; //#9565
            $k[$j++] = _6l + 187; //#9565
            $k[$j++] = 8; //#9565
            $_.tobin(); //#9565
        } //#9565
        $k[$j++] = 95; //#9569
        $k[$j++] = "11111011"; //#9569
        $k[$j++] = 32; //#9569
        $k[$j++] = "11111100"; //#9569
        $k[$j++] = $_.lnumeric; //#9569
        $k[$j++] = "000"; //#9569
        $k[$j++] = $_.lalphanumeric; //#9569
        $k[$j++] = "00100"; //#9569
        $_.iso646 = $d(); //#9570
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_databarexpanded.$ctx[id] = $_[id]); //#9570
        bwipp_databarexpanded.__9571__ = 1; //#9570
        $_ = Object.getPrototypeOf($_); //#9570
    } //#9570
    for (var _6s = 0, _6r = $_.ais.length - 1; _6s <= _6r; _6s += 1) { //#9589
        $_.i = _6s; //#9575
        $_.ai = $get($_.ais, $_.i); //#9576
        $_.val = $get($_.vals, $_.i); //#9577
        var _72 = $a(($_.gpf.length + $_.ai.length) + $_.val.length); //#9578
        $puti(_72, 0, $_.gpf); //#9579
        $k[$j++] = _72; //#9580
        $k[$j++] = _72; //#9580
        $k[$j++] = $_.gpf.length; //#9580
        $k[$j++] = $_.ai; //#9580
        $k[$j++] = Infinity; //#9580
        var _76 = $k[--$j]; //#9580
        var _77 = $k[--$j]; //#9580
        $k[$j++] = _76; //#9580
        $forall(_77); //#9580
        var _78 = $a(); //#9580
        var _79 = $k[--$j]; //#9580
        $puti($k[--$j], _79, _78); //#9580
        var _7B = $k[--$j]; //#9581
        $k[$j++] = _7B; //#9581
        $k[$j++] = _7B; //#9581
        $k[$j++] = $_.gpf.length + $_.ai.length; //#9581
        $k[$j++] = $_.val; //#9581
        $k[$j++] = Infinity; //#9581
        var _7F = $k[--$j]; //#9581
        var _7G = $k[--$j]; //#9581
        $k[$j++] = _7F; //#9581
        $forall(_7G); //#9581
        var _7H = $a(); //#9581
        var _7I = $k[--$j]; //#9581
        $puti($k[--$j], _7I, _7H); //#9581
        $_.gpf = $k[--$j]; //#9582
        if (($_.i != ($_.ais.length - 1)) && $get($_.fncs, $_.i)) { //#9588
            var _7R = $a($_.gpf.length + 1); //#9584
            $puti(_7R, 0, $_.gpf); //#9585
            $put(_7R, $_.gpf.length, $_.fnc1); //#9586
            $_.gpf = _7R; //#9587
        } //#9587
    } //#9587
    $_.rembits = function() {
        var _7V = $k[--$j]; //#9593
        var _7W = 48; //#9595
        var _7X = (~~Math.ceil(_7V / 12)) * 12; //#9595
        if (((~~Math.ceil(_7V / 12)) * 12) < 48) { //#9595
            var _ = _7W; //#9595
            _7W = _7X; //#9595
            _7X = _; //#9595
        } //#9595
        var _7Y = ~~(_7X / 12); //#9596
        $k[$j++] = _7V; //#9600
        $k[$j++] = _7X; //#9600
        $k[$j++] = _7Y; //#9600
        if ((_7Y % $_.segments) == 1) { //#9599
            var _7a = $k[--$j]; //#9597
            var _7b = $k[--$j]; //#9597
            $k[$j++] = $f(_7a + 1) * 12; //#9597
            $k[$j++] = _7b; //#9597
            $j--; //#9597
        } else { //#9599
            $j--; //#9599
        } //#9599
        var _7c = $k[--$j]; //#9601
        var _7d = $k[--$j]; //#9601
        $k[$j++] = $f(_7c - _7d); //#9601
    }; //#9601
    $_.encode = function() {
        var _7e = $k[--$j]; //#9605
        $k[$j++] = _7e; //#9605
        if ($ne(_7e, 'raw')) { //#9605
            var _7f = $k[--$j]; //#9605
            var _7h = $get(_7f, $k[--$j]); //#9605
            $k[$j++] = _7h; //#9605
        } else { //#9605
            $j--; //#9605
        } //#9605
        var _7i = $k[--$j]; //#9606
        $k[$j++] = _7i; //#9608
        if ((_7i.length + $_.j) >= 252) { //#9608
            $j--; //#9607
            $k[$j++] = 'bwipp.gs1databarexpandedTooLong#9607'; //#9607
            $k[$j++] = "Maximum length exceeded"; //#9607
            bwipp_raiseerror(); //#9607
        } //#9607
        $k[$j++] = Infinity; //#9609
        var _7k = $k[--$j]; //#9609
        var _7l = $k[--$j]; //#9609
        $k[$j++] = _7k; //#9609
        $forall(_7l, function() { //#9609
            var _7m = $k[--$j]; //#9609
            $k[$j++] = $f(_7m - 48); //#9609
        }); //#9609
        var _7n = $a(); //#9609
        $puti($_.gpfenc, $_.j, _7n); //#9611
        $_.j = _7n.length + $_.j; //#9612
    }; //#9612
    $k[$j++] = Infinity; //#9616
    for (var _7s = 0, _7t = $_.gpf.length; _7s < _7t; _7s++) { //#9616
        $k[$j++] = 0; //#9616
    } //#9616
    $k[$j++] = 0; //#9616
    $k[$j++] = -1; //#9616
    $_.numericruns = $a(); //#9616
    $k[$j++] = Infinity; //#9617
    for (var _7w = 0, _7x = $_.gpf.length; _7w < _7x; _7w++) { //#9617
        $k[$j++] = 0; //#9617
    } //#9617
    $k[$j++] = 0; //#9617
    $_.alphanumericruns = $a(); //#9617
    $k[$j++] = Infinity; //#9618
    for (var _80 = 0, _81 = $_.gpf.length; _80 < _81; _80++) { //#9618
        $k[$j++] = 0; //#9618
    } //#9618
    $k[$j++] = 9999; //#9618
    $_.nextiso646only = $a(); //#9618
    for (var _84 = $_.gpf.length - 1; _84 >= 0; _84 -= 1) { //#9640
        $_.i = _84; //#9620
        var _89 = $strcpy($s(2), "00"); //#9622
        var _8C = $get($_.gpf, $_.i); //#9623
        $k[$j++] = $get($_.gpf, $_.i); //#9623
        $k[$j++] = _89; //#9623
        $k[$j++] = _89; //#9623
        $k[$j++] = 0; //#9623
        $k[$j++] = _8C; //#9623
        if (_8C == $_.fnc1) { //#9623
            $j--; //#9623
            $k[$j++] = 94; //#9623
        } //#9623
        var _8E = $k[--$j]; //#9623
        var _8F = $k[--$j]; //#9623
        $put($k[--$j], _8F, _8E); //#9623
        if ($_.i < ($_.gpf.length - 1)) { //#9624
            var _8J = $k[--$j]; //#9624
            var _8M = $get($_.gpf, $_.i + 1); //#9624
            $k[$j++] = _8J; //#9624
            $k[$j++] = _8J; //#9624
            $k[$j++] = 1; //#9624
            $k[$j++] = _8M; //#9624
            if (_8M == $_.fnc1) { //#9624
                $j--; //#9624
                $k[$j++] = 94; //#9624
            } //#9624
            var _8O = $k[--$j]; //#9624
            var _8P = $k[--$j]; //#9624
            $put($k[--$j], _8P, _8O); //#9624
        } //#9624
        var _8T = $get($_.numeric, $k[--$j]) !== undefined; //#9625
        if (_8T) { //#9628
            $put($_.numericruns, $_.i, $f($get($_.numericruns, $_.i + 2) + 2)); //#9626
        } else { //#9628
            $put($_.numericruns, $_.i, 0); //#9628
        } //#9628
        var _8b = $k[--$j]; //#9630
        var _8d = $get($_.alphanumeric, _8b) !== undefined; //#9630
        $k[$j++] = _8b; //#9634
        if (_8d) { //#9633
            $put($_.alphanumericruns, $_.i, $f($get($_.alphanumericruns, $_.i + 1) + 1)); //#9631
        } else { //#9633
            $put($_.alphanumericruns, $_.i, 0); //#9633
        } //#9633
        var _8l = $k[--$j]; //#9635
        var _8n = $get($_.iso646, _8l) !== undefined; //#9635
        var _8p = $get($_.alphanumeric, _8l) !== undefined; //#9635
        if (_8n && (!_8p)) { //#9638
            $put($_.nextiso646only, $_.i, 0); //#9636
        } else { //#9638
            $put($_.nextiso646only, $_.i, $f($get($_.nextiso646only, $_.i + 1) + 1)); //#9638
        } //#9638
    } //#9638
    $_.gpfenc = $a(252); //#9643
    $_.i = 0; //#9644
    $_.j = 0; //#9644
    $_.mode = "numeric"; //#9644
    for (;;) { //#9734
        if ($_.i == $_.gpf.length) { //#9646
            break; //#9646
        } //#9646
        for (;;) { //#9733
            if ($eq($_.mode, "numeric")) { //#9682
                if ($_.i <= ($_.gpf.length - 2)) { //#9679
                    var _93 = $s(2); //#9651
                    var _96 = $get($_.gpf, $_.i); //#9652
                    $k[$j++] = _93; //#9652
                    $k[$j++] = _93; //#9652
                    $k[$j++] = 0; //#9652
                    $k[$j++] = _96; //#9652
                    if (_96 == $_.fnc1) { //#9652
                        $j--; //#9652
                        $k[$j++] = 94; //#9652
                    } //#9652
                    var _98 = $k[--$j]; //#9652
                    var _99 = $k[--$j]; //#9652
                    $put($k[--$j], _99, _98); //#9652
                    var _9B = $k[--$j]; //#9653
                    var _9E = $get($_.gpf, $_.i + 1); //#9653
                    $k[$j++] = _9B; //#9653
                    $k[$j++] = _9B; //#9653
                    $k[$j++] = 1; //#9653
                    $k[$j++] = _9E; //#9653
                    if (_9E == $_.fnc1) { //#9653
                        $j--; //#9653
                        $k[$j++] = 94; //#9653
                    } //#9653
                    var _9G = $k[--$j]; //#9653
                    var _9H = $k[--$j]; //#9653
                    $put($k[--$j], _9H, _9G); //#9653
                    var _9J = $k[--$j]; //#9654
                    var _9L = $get($_.numeric, _9J) !== undefined; //#9654
                    $k[$j++] = _9J; //#9658
                    if (_9L) { //#9658
                        $k[$j++] = $_.numeric; //#9655
                        $_.encode(); //#9655
                        $_.i = $_.i + 2; //#9656
                        break; //#9657
                    } //#9657
                    $j--; //#9659
                    $k[$j++] = $_.lalphanumeric; //#9660
                    $k[$j++] = $_.numeric; //#9660
                    $_.encode(); //#9660
                    $_.mode = "alphanumeric"; //#9661
                    break; //#9662
                } else { //#9679
                    var _9S = $get($_.gpf, $_.i); //#9664
                    if ((_9S < 48) || (_9S > 57)) { //#9668
                        $k[$j++] = $_.lalphanumeric; //#9665
                        $k[$j++] = $_.numeric; //#9665
                        $_.encode(); //#9665
                        $_.mode = "alphanumeric"; //#9666
                        break; //#9667
                    } //#9667
                    $k[$j++] = 'rem'; //#9669
                    $k[$j++] = ((((12 + 1) + $_.method.length) + $_.vlf.length) + $_.cdf.length) + $_.j; //#9669
                    $_.rembits(); //#9669
                    var _9Z = $k[--$j]; //#9669
                    $_[$k[--$j]] = _9Z; //#9669
                    if (($_.rem >= 4) && ($_.rem <= 6)) { //#9679
                        var _9g = $geti($strcpy($s(6), "000000"), 0, $_.rem); //#9671
                        var _9l = $cvrs($s(4), $f($get($_.gpf, $_.i) - 47), 2); //#9672
                        $puti(_9g, 4 - _9l.length, _9l); //#9673
                        $k[$j++] = _9g; //#9673
                        $k[$j++] = 'raw'; //#9673
                        $_.encode(); //#9673
                        $_.i = $_.i + 1; //#9674
                        break; //#9675
                    } else { //#9679
                        var _9n = $s(2); //#9677
                        $put(_9n, 0, $get($_.gpf, $_.i)); //#9677
                        $put(_9n, 1, 94); //#9677
                        $k[$j++] = _9n; //#9677
                        $k[$j++] = $_.numeric; //#9677
                        $_.encode(); //#9677
                        $_.i = $_.i + 1; //#9678
                        break; //#9679
                    } //#9679
                } //#9679
            } //#9679
            if ($eq($_.mode, "alphanumeric")) { //#9709
                if ($get($_.gpf, $_.i) == $_.fnc1) { //#9690
                    $k[$j++] = $_.fnc1; //#9686
                    $k[$j++] = $_.alphanumeric; //#9686
                    $_.encode(); //#9686
                    $_.mode = "numeric"; //#9687
                    $_.i = $_.i + 1; //#9688
                    break; //#9689
                } //#9689
                var _A3 = $get($_.gpf, $_.i); //#9691
                var _A5 = $get($_.iso646, _A3) !== undefined; //#9691
                var _A7 = $get($_.alphanumeric, _A3) !== undefined; //#9691
                if (_A5 && (!_A7)) { //#9695
                    $k[$j++] = $_.liso646; //#9692
                    $k[$j++] = $_.alphanumeric; //#9692
                    $_.encode(); //#9692
                    $_.mode = "iso646"; //#9693
                    break; //#9694
                } //#9694
                if ($get($_.numericruns, $_.i) >= 6) { //#9700
                    $k[$j++] = $_.lnumeric; //#9697
                    $k[$j++] = $_.alphanumeric; //#9697
                    $_.encode(); //#9697
                    $_.mode = "numeric"; //#9698
                    break; //#9699
                } //#9699
                var _AH = $get($_.numericruns, $_.i); //#9701
                if ((_AH >= 4) && ($f(_AH + $_.i) == $_.gpf.length)) { //#9705
                    $k[$j++] = $_.lnumeric; //#9702
                    $k[$j++] = $_.alphanumeric; //#9702
                    $_.encode(); //#9702
                    $_.mode = "numeric"; //#9703
                    break; //#9704
                } //#9704
                $k[$j++] = $get($_.gpf, $_.i); //#9706
                $k[$j++] = $_.alphanumeric; //#9706
                $_.encode(); //#9706
                $_.i = $_.i + 1; //#9707
                break; //#9708
            } //#9708
            if ($eq($_.mode, "iso646")) { //#9731
                if ($get($_.gpf, $_.i) == $_.fnc1) { //#9717
                    $k[$j++] = $_.fnc1; //#9713
                    $k[$j++] = $_.iso646; //#9713
                    $_.encode(); //#9713
                    $_.mode = "numeric"; //#9714
                    $_.i = $_.i + 1; //#9715
                    break; //#9716
                } //#9716
                if (($get($_.numericruns, $_.i) >= 4) && ($get($_.nextiso646only, $_.i) >= 10)) { //#9722
                    $k[$j++] = $_.lnumeric; //#9719
                    $k[$j++] = $_.iso646; //#9719
                    $_.encode(); //#9719
                    $_.mode = "numeric"; //#9720
                    break; //#9721
                } //#9721
                if (($get($_.alphanumericruns, $_.i) >= 5) && ($get($_.nextiso646only, $_.i) >= 10)) { //#9727
                    $k[$j++] = $_.lalphanumeric; //#9724
                    $k[$j++] = $_.iso646; //#9724
                    $_.encode(); //#9724
                    $_.mode = "alphanumeric"; //#9725
                    break; //#9726
                } //#9726
                $k[$j++] = $get($_.gpf, $_.i); //#9728
                $k[$j++] = $_.iso646; //#9728
                $_.encode(); //#9728
                $_.i = $_.i + 1; //#9729
                break; //#9730
            } //#9730
        } //#9730
    } //#9730
    $_.gpf = $geti($_.gpfenc, 0, $_.j); //#9735
    var _B1 = ((((1 + 12) + $_.method.length) + $_.vlf.length) + $_.cdf.length) + $_.gpf.length; //#9739
    $k[$j++] = _B1; //#9739
    $k[$j++] = _B1; //#9739
    $_.rembits(); //#9739
    var _B2 = $k[--$j]; //#9739
    $_.pad = $a(_B2); //#9739
    $k[$j++] = _B2; //#9746
    if ($_.vlf.length != 0) { //#9745
        var _B5 = $k[--$j]; //#9741
        var _B7 = ~~($f($k[--$j] + _B5) / 12); //#9742
        $put($_.vlf, 0, _B7 % 2); //#9742
        var _B9 = (_B7 <= 14) ? 0 : 1; //#9743
        $put($_.vlf, 1, _B9); //#9743
    } else { //#9745
        $j -= 2; //#9745
    } //#9745
    if ($_.pad.length > 0) { //#9755
        for (var _BE = 0, _BD = $_.pad.length - 1; _BE <= _BD; _BE += 5) { //#9751
            $_.i = _BE; //#9749
            var _BF = $_.pad; //#9750
            var _BG = $_.i; //#9750
            var _BH = $a([0, 0, 1, 0, 0]); //#9750
            var _BI = $_.pad; //#9750
            var _BJ = $_.i; //#9750
            var _BK = 5; //#9750
            var _BL = _BI.length - _BJ; //#9750
            if ((_BI.length - _BJ) > 5) { //#9750
                var _ = _BK; //#9750
                _BK = _BL; //#9750
                _BL = _; //#9750
            } //#9750
            $puti(_BF, _BG, $geti(_BH, 0, _BL)); //#9750
        } //#9750
        if ($eq($_.mode, "numeric")) { //#9754
            $k[$j++] = Infinity; //#9753
            $k[$j++] = 0; //#9753
            $k[$j++] = 0; //#9753
            $k[$j++] = 0; //#9753
            $k[$j++] = 0; //#9753
            $aload($_.pad); //#9753
            $_.pad = $geti($a(), 0, $_.pad.length); //#9753
        } //#9753
    } //#9753
    $k[$j++] = Infinity; //#9758
    var _BT = $_.linkage ? 1 : 0; //#9759
    $k[$j++] = _BT; //#9760
    $forall($_.method, function() { //#9760
        var _BV = $k[--$j]; //#9760
        $k[$j++] = $f(_BV - 48); //#9760
    }); //#9760
    $aload($_.vlf); //#9761
    $aload($_.cdf); //#9762
    $aload($_.gpf); //#9763
    $aload($_.pad); //#9764
    $_.binval = $a(); //#9764
    $_.datalen = ~~($_.binval.length / 12); //#9766
    $_.ncr = function() {
        var _Bc = $k[--$j]; //#9769
        var _Bd = $k[--$j]; //#9769
        var _Be = $f(_Bd - _Bc); //#9769
        if (_Bc < $f(_Bd - _Bc)) { //#9769
            var _ = _Be; //#9769
            _Be = _Bc; //#9769
            _Bc = _; //#9769
        } //#9769
        $k[$j++] = _Be; //#9776
        $k[$j++] = 1; //#9776
        $k[$j++] = 1; //#9776
        for (var _Bg = _Bd, _Bf = $f(_Bc + 1); _Bg >= _Bf; _Bg -= 1) { //#9776
            var _Bh = $k[--$j]; //#9772
            var _Bi = $k[--$j]; //#9773
            var _Bj = $k[--$j]; //#9773
            $k[$j++] = _Bj; //#9775
            $k[$j++] = _Bi; //#9775
            $k[$j++] = _Bh * _Bg; //#9775
            if ($le(_Bi, _Bj)) { //#9775
                var _Bk = $k[--$j]; //#9774
                var _Bl = $k[--$j]; //#9774
                $k[$j++] = $f(_Bl + 1); //#9774
                $k[$j++] = ~~(_Bk / _Bl); //#9774
            } //#9774
        } //#9774
        for (;;) { //#9780
            var _Bm = $k[--$j]; //#9778
            var _Bn = $k[--$j]; //#9778
            var _Bo = $k[--$j]; //#9778
            $k[$j++] = _Bo; //#9778
            $k[$j++] = _Bn; //#9778
            $k[$j++] = _Bm; //#9778
            if ($gt(_Bn, _Bo)) { //#9778
                break; //#9778
            } //#9778
            var _Bp = $k[--$j]; //#9779
            var _Bq = $k[--$j]; //#9779
            $k[$j++] = $f(_Bq + 1); //#9779
            $k[$j++] = ~~(_Bp / _Bq); //#9779
        } //#9779
        var _Br = $k[--$j]; //#9781
        var _Bs = $k[--$j]; //#9781
        $k[$j++] = _Br; //#9781
        $k[$j++] = _Bs; //#9781
        $j--; //#9781
        var _Bt = $k[--$j]; //#9781
        var _Bu = $k[--$j]; //#9781
        $k[$j++] = _Bt; //#9781
        $k[$j++] = _Bu; //#9781
        $j--; //#9781
    }; //#9781
    $_.getRSSwidths = function() {
        $_.oe = $k[--$j]; //#9785
        $_.el = $k[--$j]; //#9786
        $_.mw = $k[--$j]; //#9787
        $_.nm = $k[--$j]; //#9788
        $_.val = $k[--$j]; //#9789
        $_.out = $a($_.el); //#9790
        $_.mask = 0; //#9791
        for (var _C4 = 0, _C3 = $f($_.el - 2); _C4 <= _C3; _C4 += 1) { //#9818
            $_.bar = _C4; //#9793
            $_.ew = 1; //#9794
            var _C6 = $_.bar; //#9795
            $_.mask = $_.mask | ((_C6 < 0 ? 1 >>> -_C6 : 1 << _C6)); //#9795
            for (;;) { //#9814
                $k[$j++] = 'sval'; //#9796
                $k[$j++] = $f($f($_.nm - $_.ew) - 1); //#9796
                $k[$j++] = $f($f($_.el - $_.bar) - 2); //#9796
                $_.ncr(); //#9796
                var _CB = $k[--$j]; //#9796
                $_[$k[--$j]] = _CB; //#9796
                if (($_.oe && ($_.mask == 0)) && (($f(($f($f($_.nm - $_.ew) - ($_.el * 2))) + ($_.bar * 2))) >= -2)) { //#9799
                    $k[$j++] = 'sval'; //#9798
                    $k[$j++] = $_.sval; //#9798
                    $k[$j++] = $f(($f($f($_.nm - $_.ew) - $_.el)) + $_.bar); //#9798
                    $k[$j++] = $f($f($_.el - $_.bar) - 2); //#9798
                    $_.ncr(); //#9798
                    var _CQ = $k[--$j]; //#9798
                    var _CR = $k[--$j]; //#9798
                    $_[$k[--$j]] = $f(_CR - _CQ); //#9798
                } //#9798
                if ($f($_.el - $_.bar) > 2) { //#9808
                    $_.lval = 0; //#9801
                    for (var _Cb = $f(($f(($f($f($_.nm - $_.ew) - $_.el)) + $_.bar)) + 2), _Ca = $f($_.mw + 1); _Cb >= _Ca; _Cb -= 1) { //#9805
                        $k[$j++] = $f(($f($f($_.nm - _Cb) - $_.ew)) - 1); //#9803
                        $k[$j++] = $f($f($_.el - $_.bar) - 3); //#9803
                        $_.ncr(); //#9803
                        $_.lval = $f($k[--$j] + $_.lval); //#9804
                    } //#9804
                    $_.sval = $f($_.sval - ($_.lval * ($f($f($_.el - $_.bar) - 1)))); //#9806
                } else { //#9808
                    if ($f($_.nm - $_.ew) > $_.mw) { //#9808
                        $_.sval = $f($_.sval - 1); //#9808
                    } //#9808
                } //#9808
                $_.val = $f($_.val - $_.sval); //#9810
                if ($_.val < 0) { //#9811
                    break; //#9811
                } //#9811
                $_.ew = $_.ew + 1; //#9812
                var _Cv = $_.bar; //#9813
                $_.mask = $_.mask & (~((_Cv < 0 ? 1 >>> -_Cv : 1 << _Cv))); //#9813
            } //#9813
            $_.val = $f($_.val + $_.sval); //#9815
            $_.nm = $f($_.nm - $_.ew); //#9816
            $put($_.out, $_.bar, $_.ew); //#9817
        } //#9817
        $put($_.out, $f($_.el - 1), $_.nm); //#9819
        $k[$j++] = $_.out; //#9820
    }; //#9820
    if (!bwipp_databarexpanded.__9831__) { //#9831
        $_ = Object.create($_); //#9831
        $_.tab174 = $a([347, 0, 12, 5, 7, 2, 87, 4, 1387, 348, 10, 7, 5, 4, 52, 20, 2947, 1388, 8, 9, 4, 5, 30, 52, 3987, 2948, 6, 11, 3, 6, 10, 104, 4191, 3988, 4, 13, 1, 8, 1, 204]); //#9830
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_databarexpanded.$ctx[id] = $_[id]); //#9830
        bwipp_databarexpanded.__9831__ = 1; //#9830
        $_ = Object.getPrototypeOf($_); //#9830
    } //#9830
    $_.dxw = $a($_.datalen); //#9833
    for (var _DD = 0, _DC = $_.datalen - 1; _DD <= _DC; _DD += 1) { //#9874
        $_.x = _DD; //#9837
        $_.d = $geti($_.binval, $_.x * 12, 12); //#9839
        $k[$j++] = 'd'; //#9840
        $k[$j++] = 0; //#9840
        for (var _DH = 0; _DH <= 11; _DH += 1) { //#9840
            $_.j = _DH; //#9840
            var _DM = $k[--$j]; //#9840
            $k[$j++] = $f(_DM + ((~~Math.pow(2, 11 - $_.j)) * $get($_.d, $_.j))); //#9840
        } //#9840
        var _DN = $k[--$j]; //#9840
        $_[$k[--$j]] = _DN; //#9840
        $_.j = 0; //#9842
        for (;;) { //#9852
            if ($le($_.d, $get($_.tab174, $_.j))) { //#9850
                var _DV = $geti($_.tab174, $_.j + 1, 7); //#9844
                for (var _DW = 0, _DX = _DV.length; _DW < _DX; _DW++) { //#9844
                    $k[$j++] = $get(_DV, _DW); //#9844
                } //#9844
                $_.dte = $k[--$j]; //#9845
                $_.dto = $k[--$j]; //#9845
                $_.dmwe = $k[--$j]; //#9846
                $_.dmwo = $k[--$j]; //#9846
                $_.dele = $k[--$j]; //#9847
                $_.delo = $k[--$j]; //#9847
                $_.dgs = $k[--$j]; //#9848
                break; //#9849
            } //#9849
            $_.j = $_.j + 8; //#9851
        } //#9851
        $k[$j++] = 'dwo'; //#9854
        $k[$j++] = ~~($f($_.d - $_.dgs) / $_.dte); //#9854
        $k[$j++] = $_.delo; //#9854
        $k[$j++] = $_.dmwo; //#9854
        $k[$j++] = 4; //#9854
        $k[$j++] = true; //#9854
        $_.getRSSwidths(); //#9854
        var _Dm = $k[--$j]; //#9854
        $_[$k[--$j]] = _Dm; //#9854
        $k[$j++] = 'dwe'; //#9855
        $k[$j++] = $f($_.d - $_.dgs) % $_.dte; //#9855
        $k[$j++] = $_.dele; //#9855
        $k[$j++] = $_.dmwe; //#9855
        $k[$j++] = 4; //#9855
        $k[$j++] = false; //#9855
        $_.getRSSwidths(); //#9855
        var _Dt = $k[--$j]; //#9855
        $_[$k[--$j]] = _Dt; //#9855
        $_.dw = $a(8); //#9857
        if (($_.x % 2) == 0) { //#9868
            for (var _Dx = 0; _Dx <= 3; _Dx += 1) { //#9863
                $_.j = _Dx; //#9860
                $put($_.dw, 7 - ($_.j * 2), $get($_.dwo, $_.j)); //#9861
                $put($_.dw, 6 - ($_.j * 2), $get($_.dwe, $_.j)); //#9862
            } //#9862
        } else { //#9868
            for (var _E8 = 0; _E8 <= 3; _E8 += 1) { //#9869
                $_.j = _E8; //#9866
                $put($_.dw, $_.j * 2, $get($_.dwo, $_.j)); //#9867
                $put($_.dw, ($_.j * 2) + 1, $get($_.dwe, $_.j)); //#9868
            } //#9868
        } //#9868
        $put($_.dxw, $_.x, $_.dw); //#9872
    } //#9872
    if (!bwipp_databarexpanded.__9898__) { //#9898
        $_ = Object.create($_); //#9898
        $_.finderwidths = $a([1, 8, 4, 1, 1, 1, 1, 4, 8, 1, 3, 6, 4, 1, 1, 1, 1, 4, 6, 3, 3, 4, 6, 1, 1, 1, 1, 6, 4, 3, 3, 2, 8, 1, 1, 1, 1, 8, 2, 3, 2, 6, 5, 1, 1, 1, 1, 5, 6, 2, 2, 2, 9, 1, 1, 1, 1, 9, 2, 2]); //#9884
        $_.finderseq = $a([$a([0, 1]), $a([0, 3, 2]), $a([0, 5, 2, 7]), $a([0, 9, 2, 7, 4]), $a([0, 9, 2, 7, 6, 11]), $a([0, 9, 2, 7, 8, 11, 10]), $a([0, 1, 2, 3, 4, 5, 6, 7]), $a([0, 1, 2, 3, 4, 5, 6, 9, 8]), $a([0, 1, 2, 3, 4, 5, 6, 9, 10, 11]), $a([0, 1, 2, 3, 4, 7, 6, 9, 8, 11, 10])]); //#9897
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_databarexpanded.$ctx[id] = $_[id]); //#9897
        bwipp_databarexpanded.__9898__ = 1; //#9897
        $_ = Object.getPrototypeOf($_); //#9897
    } //#9897
    $_.seq = $get($_.finderseq, ~~(($_.datalen - 2) / 2)); //#9900
    $_.fxw = $a($_.seq.length); //#9901
    for (var _Eg = 0, _Ef = $_.seq.length - 1; _Eg <= _Ef; _Eg += 1) { //#9905
        $_.x = _Eg; //#9903
        $put($_.fxw, $_.x, $geti($_.finderwidths, $get($_.seq, $_.x) * 5, 5)); //#9904
    } //#9904
    if (!bwipp_databarexpanded.__9934__) { //#9934
        $_ = Object.create($_); //#9934
        $_.checkweights = $a([-1, -1, -1, -1, -1, -1, -1, -1, 77, 96, 32, 81, 27, 9, 3, 1, 20, 60, 180, 118, 143, 7, 21, 63, 205, 209, 140, 117, 39, 13, 145, 189, 193, 157, 49, 147, 19, 57, 171, 91, 132, 44, 85, 169, 197, 136, 186, 62, 185, 133, 188, 142, 4, 12, 36, 108, 50, 87, 29, 80, 97, 173, 128, 113, 150, 28, 84, 41, 123, 158, 52, 156, 166, 196, 206, 139, 187, 203, 138, 46, 76, 17, 51, 153, 37, 111, 122, 155, 146, 119, 110, 107, 106, 176, 129, 43, 16, 48, 144, 10, 30, 90, 59, 177, 164, 125, 112, 178, 200, 137, 116, 109, 70, 210, 208, 202, 184, 130, 179, 115, 190, 204, 68, 93, 31, 151, 191, 134, 148, 22, 66, 198, 172, 94, 71, 2, 40, 154, 192, 64, 162, 54, 18, 6, 120, 149, 25, 75, 14, 42, 126, 167, 175, 199, 207, 69, 23, 78, 26, 79, 103, 98, 83, 38, 114, 131, 182, 124, 159, 53, 88, 170, 127, 183, 61, 161, 55, 165, 73, 8, 24, 72, 5, 15, 89, 100, 174, 58, 160, 194, 135, 45]); //#9933
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_databarexpanded.$ctx[id] = $_[id]); //#9933
        bwipp_databarexpanded.__9934__ = 1; //#9933
        $_ = Object.getPrototypeOf($_); //#9933
    } //#9933
    $k[$j++] = Infinity; //#9936
    $forall($_.seq, function() { //#9937
        $aload($geti($_.checkweights, $k[--$j] * 16, 16)); //#9937
    }); //#9937
    var _Eu = $a(); //#9937
    $_.checkweightseq = $geti(_Eu, 8, _Eu.length - 8); //#9938
    $k[$j++] = Infinity; //#9940
    var _Ew = $_.dxw; //#9941
    for (var _Ex = 0, _Ey = _Ew.length; _Ex < _Ey; _Ex++) { //#9941
        $forall($get(_Ew, _Ex)); //#9941
    } //#9941
    $_.widths = $a(); //#9941
    $_.checksum = 0; //#9944
    for (var _F3 = 0, _F2 = $_.widths.length - 1; _F3 <= _F2; _F3 += 1) { //#9948
        $_.i = _F3; //#9946
        $_.checksum = $f($_.checksum + ($get($_.widths, $_.i) * $get($_.checkweightseq, $_.i))); //#9947
    } //#9947
    $_.checksum = $f(($_.checksum % 211) + (($_.datalen - 3) * 211)); //#9949
    $_.i = 0; //#9951
    for (;;) { //#9961
        if ($_.checksum <= $get($_.tab174, $_.i)) { //#9959
            var _FJ = $geti($_.tab174, $_.i + 1, 7); //#9953
            for (var _FK = 0, _FL = _FJ.length; _FK < _FL; _FK++) { //#9953
                $k[$j++] = $get(_FJ, _FK); //#9953
            } //#9953
            $_.cte = $k[--$j]; //#9954
            $_.cto = $k[--$j]; //#9954
            $_.cmwe = $k[--$j]; //#9955
            $_.cmwo = $k[--$j]; //#9955
            $_.cele = $k[--$j]; //#9956
            $_.celo = $k[--$j]; //#9956
            $_.cgs = $k[--$j]; //#9957
            break; //#9958
        } //#9958
        $_.i = $_.i + 8; //#9960
    } //#9960
    $k[$j++] = 'cwo'; //#9963
    $k[$j++] = ~~($f($_.checksum - $_.cgs) / $_.cte); //#9963
    $k[$j++] = $_.celo; //#9963
    $k[$j++] = $_.cmwo; //#9963
    $k[$j++] = 4; //#9963
    $k[$j++] = true; //#9963
    $_.getRSSwidths(); //#9963
    var _Fa = $k[--$j]; //#9963
    $_[$k[--$j]] = _Fa; //#9963
    $k[$j++] = 'cwe'; //#9964
    $k[$j++] = $f($_.checksum - $_.cgs) % $_.cte; //#9964
    $k[$j++] = $_.cele; //#9964
    $k[$j++] = $_.cmwe; //#9964
    $k[$j++] = 4; //#9964
    $k[$j++] = false; //#9964
    $_.getRSSwidths(); //#9964
    var _Fh = $k[--$j]; //#9964
    $_[$k[--$j]] = _Fh; //#9964
    $_.cw = $a(8); //#9966
    for (var _Fk = 0; _Fk <= 3; _Fk += 1) { //#9971
        $_.i = _Fk; //#9968
        $put($_.cw, $_.i * 2, $get($_.cwo, $_.i)); //#9969
        $put($_.cw, ($_.i * 2) + 1, $get($_.cwe, $_.i)); //#9970
    } //#9970
    var _Fv = $a(22); //#9973
    $put(_Fv, 0, $_.cw); //#9974
    $puti(_Fv, 1, $_.dxw); //#9974
    $_.dxw = $geti(_Fv, 0, $_.datalen + 1); //#9975
    $_.datalen = $_.dxw.length; //#9976
    $_.rows = $a(~~Math.ceil($_.datalen / $_.segments)); //#9979
    $_.numrows = $_.rows.length; //#9980
    for (var _G7 = 0, _G6 = $_.numrows - 1; _G7 <= _G6; _G7 += 1) { //#9995
        $_.r = _G7; //#9982
        $k[$j++] = Infinity; //#9983
        if ((($_.segments % 4) != 0) && (($_.r % 2) == 1)) { //#9984
            $k[$j++] = 0; //#9984
        } //#9984
        $k[$j++] = 1; //#9992
        $k[$j++] = 1; //#9992
        for (var _GC = 0, _GB = $_.segments - 1; _GC <= _GB; _GC += 1) { //#9992
            $_.pos = _GC + ($_.r * $_.segments); //#9987
            if ($_.pos < $_.datalen) { //#9991
                $forall($get($_.dxw, $_.pos)); //#9989
                if (($_.pos % 2) == 0) { //#9990
                    $forall($get($_.fxw, ~~($_.pos / 2))); //#9990
                } //#9990
            } //#9990
        } //#9990
        var _GO = $counttomark() + 2; //#9994
        $k[$j++] = 1; //#9994
        $k[$j++] = 1; //#9994
        $astore($a(_GO)); //#9994
        $put($_.rows, $_.r, $k[--$j]); //#9994
        $j--; //#9994
    } //#9994
    if ($ne($_.format, "expandedstacked")) { //#10127
        var _GV = $get($_.rows, 0); //#10000
        $_.sbs = $geti(_GV, 1, _GV.length - 1); //#10000
        $k[$j++] = Infinity; //#10002
        $k[$j++] = 1; //#10008
        for (var _GZ = 0, _GY = $_.datalen - 1; _GZ <= _GY; _GZ += 1) { //#10008
            $_.i = _GZ; //#10005
            $forall($get($_.dxw, $_.i)); //#10006
            if (($_.i % 2) == 0) { //#10007
                $forall($get($_.fxw, ~~($_.i / 2))); //#10007
            } //#10007
        } //#10007
        $k[$j++] = 1; //#10009
        $k[$j++] = 1; //#10009
        $_.sbs = $a(); //#10009
        $k[$j++] = Infinity; //#10012
        var _Gi = $_.sbs; //#10014
        $k[$j++] = Infinity; //#10015
        for (var _Gk = 0, _Gl = ~~(($_.sbs.length + 1) / 2); _Gk < _Gl; _Gk++) { //#10015
            $k[$j++] = $_.height; //#10015
        } //#10015
        var _Gn = $a(); //#10015
        $k[$j++] = Infinity; //#10016
        for (var _Gp = 0, _Gq = ~~(($_.sbs.length + 1) / 2); _Gp < _Gq; _Gp++) { //#10016
            $k[$j++] = 0; //#10016
        } //#10016
        var _Gr = $a(); //#10016
        $k[$j++] = 'ren'; //#10021
        $k[$j++] = 'renlinear'; //#10021
        $k[$j++] = 'sbs'; //#10021
        $k[$j++] = _Gi; //#10021
        $k[$j++] = 'bhs'; //#10021
        $k[$j++] = _Gn; //#10021
        $k[$j++] = 'bbs'; //#10021
        $k[$j++] = _Gr; //#10021
        $k[$j++] = 'borderleft'; //#10021
        $k[$j++] = 0; //#10021
        $k[$j++] = 'borderright'; //#10021
        $k[$j++] = 0; //#10021
        $k[$j++] = 'bordertop'; //#10021
        $k[$j++] = 0; //#10021
        $k[$j++] = 'borderbottom'; //#10021
        $k[$j++] = 0; //#10021
        $k[$j++] = 'opt'; //#10021
        $k[$j++] = $_.options; //#10021
        var _Gt = $d(); //#10021
        $k[$j++] = _Gt; //#10024
        if (!$_.dontdraw) { //#10024
            bwipp_renlinear(); //#10024
        } //#10024
    } else { //#10127
        $_.seps = $a($_.numrows); //#10028
        for (var _Gz = 0, _Gy = $_.numrows - 1; _Gz <= _Gy; _Gz += 1) { //#10084
            $_.r = _Gz; //#10031
            $_.row = $get($_.rows, $_.r); //#10032
            $k[$j++] = Infinity; //#10035
            for (var _H5 = 0, _H4 = $_.row.length - 1; _H5 <= _H4; _H5 += 2) { //#10040
                $_.i = _H5; //#10037
                for (var _H9 = 0, _HA = $get($_.row, $_.i); _H9 < _HA; _H9++) { //#10038
                    $k[$j++] = 0; //#10038
                } //#10038
                if ($_.i < ($_.row.length - 1)) { //#10039
                    for (var _HG = 0, _HH = $get($_.row, $_.i + 1); _HG < _HH; _HG++) { //#10039
                        $k[$j++] = 1; //#10039
                    } //#10039
                } //#10039
            } //#10039
            $astore($a($counttomark())); //#10041
            $_.row = $k[--$j]; //#10041
            $j--; //#10041
            $k[$j++] = Infinity; //#10044
            $forall($_.row, function() { //#10044
                var _HM = $k[--$j]; //#10044
                $k[$j++] = $f(1 - _HM); //#10044
            }); //#10044
            $_.sep = $a(); //#10044
            $k[$j++] = Infinity; //#10045
            for (var _HQ = 19, _HP = $_.row.length - 13; _HQ <= _HP; _HQ += 98) { //#10046
                $k[$j++] = _HQ; //#10046
            } //#10046
            for (var _HT = 68, _HS = $_.row.length - 13; _HT <= _HS; _HT += 98) { //#10047
                $k[$j++] = _HT; //#10047
            } //#10047
            $_.finderpos = $a(); //#10047
            var _HV = $_.finderpos; //#10049
            for (var _HW = 0, _HX = _HV.length; _HW < _HX; _HW++) { //#10063
                var _HY = $get(_HV, _HW); //#10063
                for (var _Ha = _HY, _HZ = $f(_HY + 14); _Ha <= _HZ; _Ha += 1) { //#10062
                    $_.i = _Ha; //#10051
                    if ($get($_.row, $_.i) == 0) { //#10059
                        if ($get($_.row, $_.i - 1) == 1) { //#10056
                            $k[$j++] = 1; //#10054
                        } else { //#10056
                            var _Hk = ($get($_.sep, $_.i - 1) == 0) ? 1 : 0; //#10056
                            $k[$j++] = _Hk; //#10056
                        } //#10056
                    } else { //#10059
                        $k[$j++] = 0; //#10059
                    } //#10059
                    $put($_.sep, $_.i, $k[--$j]); //#10061
                } //#10061
            } //#10061
            $puti($_.sep, 0, $a([0, 0, 0, 0])); //#10064
            $puti($_.sep, $_.row.length - 4, $a([0, 0, 0, 0])); //#10065
            if ((($_.segments % 4) == 0) && (($_.r % 2) == 1)) { //#10079
                if (($get($_.rows, $_.r).length != $get($_.rows, 0).length) && (($_.finderpos.length % 2) == 1)) { //#10077
                    $k[$j++] = Infinity; //#10071
                    $k[$j++] = 0; //#10071
                    $aload($_.row); //#10071
                    $_.row = $a(); //#10071
                    $k[$j++] = Infinity; //#10072
                    $k[$j++] = 0; //#10072
                    $aload($_.sep); //#10072
                    $_.sep = $a(); //#10072
                } else { //#10077
                    for (var _I6 = $_.row.length - 1; _I6 >= 0; _I6 -= 1) { //#10074
                        $k[$j++] = $get($_.row, _I6); //#10074
                    } //#10074
                    $astore($_.row); //#10075
                    $j--; //#10075
                    for (var _IB = $_.sep.length - 1; _IB >= 0; _IB -= 1) { //#10076
                        $k[$j++] = $get($_.sep, _IB); //#10076
                    } //#10076
                    $astore($_.sep); //#10077
                    $j--; //#10077
                } //#10077
            } //#10077
            $put($_.rows, $_.r, $_.row); //#10081
            $put($_.seps, $_.r, $_.sep); //#10082
        } //#10082
        $_.pixx = $get($_.rows, 0).length; //#10087
        $k[$j++] = Infinity; //#10088
        for (var _IO = 0, _IP = $_.pixx; _IO < _IP; _IO++) { //#10088
            $k[$j++] = 0; //#10088
        } //#10088
        var _IQ = $a(); //#10088
        $puti(_IQ, 0, $get($_.rows, $_.numrows - 1)); //#10088
        $put($_.rows, $_.numrows - 1, _IQ); //#10089
        $k[$j++] = Infinity; //#10090
        for (var _IX = 0, _IY = $_.pixx; _IX < _IY; _IX++) { //#10090
            $k[$j++] = 0; //#10090
        } //#10090
        var _IZ = $a(); //#10090
        $puti(_IZ, 0, $get($_.seps, $_.numrows - 1)); //#10090
        $put($_.seps, $_.numrows - 1, _IZ); //#10091
        $k[$j++] = Infinity; //#10094
        for (var _Ig = 0, _Ih = (~~($_.pixx / 2)) + 1; _Ig < _Ih; _Ig++) { //#10094
            $k[$j++] = 0; //#10094
            $k[$j++] = 1; //#10094
        } //#10094
        $_.sep = $geti($a(), 0, $_.pixx); //#10094
        $puti($_.sep, 0, $a([0, 0, 0, 0])); //#10095
        $puti($_.sep, $_.pixx - 4, $a([0, 0, 0, 0])); //#10096
        $k[$j++] = Infinity; //#10099
        for (var _Is = 0, _Ir = $_.numrows - 1; _Is <= _Ir; _Is += 1) { //#10110
            $_.r = _Is; //#10101
            if ($_.r != 0) { //#10104
                $aload($get($_.seps, $_.r)); //#10103
            } //#10103
            for (var _Iy = 0, _Iz = $_.barxmult; _Iy < _Iz; _Iy++) { //#10105
                $aload($get($_.rows, $_.r)); //#10105
            } //#10105
            if ($_.r != ($_.numrows - 1)) { //#10109
                $aload($get($_.seps, $_.r)); //#10107
                $aload($_.sep); //#10108
            } //#10108
        } //#10108
        $_.pixs = $a(); //#10108
        var _JI = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", ~~($_.pixs.length / $_.pixx)],
            ["height", (~~($_.pixs.length / $_.pixx)) / 72],
            ["width", $_.pixx / 72],
            ["borderleft", 0],
            ["borderright", 0],
            ["bordertop", 0],
            ["borderbottom", 0],
            ["opt", $_.options]
        ]); //#10124
        $k[$j++] = _JI; //#10127
        if (!$_.dontdraw) { //#10127
            bwipp_renmatrix(); //#10127
        } //#10127
    } //#10127
    $_ = Object.getPrototypeOf($_); //#10131
    $_ = Object.getPrototypeOf($_); //#10133
} //bwipp_databarexpanded
function bwipp_databarexpandedstacked() {
    $_ = Object.create($_); //#10162
    $_.dontdraw = false; //#10165
    $k[$j++] = $_; //#10167
    bwipp_processoptions(); //#10167
    $_.options = $k[--$j]; //#10167
    $_.barcode = $k[--$j]; //#10168
    $put($_.options, "dontdraw", true); //#10171
    $put($_.options, "format", "expandedstacked"); //#10172
    $k[$j++] = 'args'; //#10174
    $k[$j++] = $_.barcode; //#10174
    $k[$j++] = $_.options; //#10174
    bwipp_databarexpanded(); //#10174
    var _6 = $k[--$j]; //#10174
    $_[$k[--$j]] = _6; //#10174
    $put($_.args, "opt", $_.options); //#10176
    $k[$j++] = $_.args; //#10179
    if (!$_.dontdraw) { //#10179
        bwipp_renmatrix(); //#10179
    } //#10179
    $_ = Object.getPrototypeOf($_); //#10181
} //bwipp_databarexpandedstacked
function bwipp_gs1northamericancoupon() {
    $_ = Object.create($_); //#10211
    $_.dontdraw = false; //#10214
    $_.includetext = false; //#10215
    $_.coupontextfont = "OCR-B"; //#10216
    $_.coupontextsize = 9; //#10217
    $_.coupontextxoffset = null; //#10218
    $_.coupontextyoffset = null; //#10219
    $_.parse = false; //#10220
    $_.dontlint = false; //#10221
    $_.lintreqs = true; //#10222
    $k[$j++] = $_; //#10224
    bwipp_processoptions(); //#10224
    $_.options = $k[--$j]; //#10224
    $_.barcode = $k[--$j]; //#10225
    $k[$j++] = $_.barcode; //#10227
    $k[$j++] = 'ai'; //#10227
    bwipp_gs1process(); //#10227
    $j--; //#10228
    $_.vals = $k[--$j]; //#10229
    $_.ais = $k[--$j]; //#10230
    if ($_.ais.length != 1) { //#10235
        $k[$j++] = 'bwipp.gs1northamericancouponBadAIStructure#10234'; //#10234
        $k[$j++] = "A GS1 North American Coupon should consist of a single AI (8110)"; //#10234
        bwipp_raiseerror(); //#10234
    } //#10234
    if ($ne($get($_.ais, 0), "8110")) { //#10238
        $k[$j++] = 'bwipp.gs1northamericancouponBadAIStructure#10237'; //#10237
        $k[$j++] = "A GS1 North American Coupon should consist of a single AI (8110)"; //#10237
        bwipp_raiseerror(); //#10237
    } //#10237
    $_.val = $get($_.vals, 0); //#10241
    $_.vli = $f($get($_.val, 0) - 48); //#10242
    if (($_.vli < 0) || ($_.vli > 6)) { //#10245
        $k[$j++] = 'bwipp.gs1northamericancouponBadVLI#10244'; //#10244
        $k[$j++] = "The AI (8110) data should start with a Company Prefix length indicator in the range 0 to 6"; //#10244
        bwipp_raiseerror(); //#10244
    } //#10244
    $_.gcp = $geti($_.val, 1, $f($_.vli + 6)); //#10246
    $_.cod = $geti($_.val, $f($_.vli + 7), 6); //#10247
    $_.coupontext = $s($_.gcp.length + 7); //#10248
    $puti($_.coupontext, 0, $_.gcp); //#10249
    $puti($_.coupontext, $_.gcp.length, "-"); //#10250
    $puti($_.coupontext, $_.gcp.length + 1, $_.cod); //#10251
    $put($_.options, "dontdraw", true); //#10254
    $k[$j++] = 'args'; //#10256
    $k[$j++] = $_.barcode; //#10256
    $k[$j++] = $_.options; //#10256
    bwipp_databarexpandedstacked(); //#10256
    var _W = $k[--$j]; //#10256
    $_[$k[--$j]] = _W; //#10256
    if ($_.includetext) { //#10275
        if ($eq($_.coupontextxoffset, null)) { //#10262
            $_.coupontextxoffset = 0; //#10261
        } //#10261
        if ($eq($_.coupontextyoffset, null)) { //#10265
            $_.coupontextyoffset = $f(($get($_.args, "height") * 72) + 3); //#10264
        } //#10264
        var _e = $get($_.args, "txt") !== undefined; //#10266
        if (_e) { //#10273
            $_.txt = $get($_.args, "txt"); //#10267
            $_.newtxt = $a($_.txt.length + 1); //#10268
            $puti($_.newtxt, 0, $_.txt); //#10269
            $put($_.newtxt, $_.newtxt.length - 1, $a([$_.coupontext, $_.coupontextxoffset, $_.coupontextyoffset, $_.coupontextfont, $_.coupontextsize])); //#10270
            $put($_.args, "txt", $_.newtxt); //#10271
        } else { //#10273
            $put($_.args, "txt", $a([$a([$_.coupontext, $_.coupontextxoffset, $_.coupontextyoffset, $_.coupontextfont, $_.coupontextsize])])); //#10273
        } //#10273
    } //#10273
    $put($_.args, "opt", $_.options); //#10277
    $k[$j++] = $_.args; //#10280
    if (!$_.dontdraw) { //#10280
        bwipp_renmatrix(); //#10280
    } //#10280
    $_ = Object.getPrototypeOf($_); //#10282
} //bwipp_gs1northamericancoupon
function bwipp_pharmacode() {
    $_ = Object.create($_); //#10310
    $_.dontdraw = false; //#10313
    $_.height = (8 * 2.835) / 72; //#10314
    $_.nwidth = 0.5 * 2.835; //#10315
    $_.wwidth = 1.5 * 2.835; //#10316
    $_.swidth = 1 * 2.835; //#10317
    $k[$j++] = $_; //#10319
    bwipp_processoptions(); //#10319
    $_.options = $k[--$j]; //#10319
    $_.barcode = $k[--$j]; //#10320
    if (($_.barcode.length < 1) || ($_.barcode.length > 6)) { //#10325
        $k[$j++] = 'bwipp.pharmacodeBadLength#10324'; //#10324
        $k[$j++] = "Pharmacode must be 1 to 6 digits"; //#10324
        bwipp_raiseerror(); //#10324
    } //#10324
    $forall($_.barcode, function() { //#10330
        var _5 = $k[--$j]; //#10327
        if ((_5 < 48) || (_5 > 57)) { //#10329
            $k[$j++] = 'bwipp.pharmacodeBadCharacter#10328'; //#10328
            $k[$j++] = "Pharmacode must contain only digits"; //#10328
            bwipp_raiseerror(); //#10328
        } //#10328
    }); //#10328
    var _7 = $cvi($_.barcode); //#10331
    if ((_7 < 3) || (_7 > 131070)) { //#10333
        $k[$j++] = 'bwipp.pharmacodeBadValue#10332'; //#10332
        $k[$j++] = "Pharmacode value must be between 3 and 131070"; //#10332
        bwipp_raiseerror(); //#10332
    } //#10332
    $_.txt = $a($_.barcode.length); //#10336
    for (var _C = 0, _B = $_.barcode.length - 1; _C <= _B; _C += 1) { //#10340
        $_.i = _C; //#10338
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), 0, 0, "", 0])); //#10339
    } //#10339
    $_.barcode = $cvrs($s(17), $cvi($_.barcode) + 1, 2); //#10343
    $_.barcode = $geti($_.barcode, 1, $_.barcode.length - 1); //#10344
    $_.barlen = $_.barcode.length; //#10346
    $_.sbs = $a($_.barlen * 2); //#10347
    for (var _U = 0, _T = $_.barlen - 1; _U <= _T; _U += 1) { //#10358
        $_.i = _U; //#10350
        $_.enc = $geti($_.barcode, $_.i, 1); //#10351
        if ($eq($_.enc, "0")) { //#10355
            $put($_.sbs, $_.i * 2, $_.nwidth); //#10353
        } else { //#10355
            $put($_.sbs, $_.i * 2, $_.wwidth); //#10355
        } //#10355
        $put($_.sbs, ($_.i * 2) + 1, $_.swidth); //#10357
    } //#10357
    $k[$j++] = Infinity; //#10361
    var _i = $_.sbs; //#10363
    $k[$j++] = Infinity; //#10364
    for (var _k = 0, _l = ~~(($_.sbs.length + 1) / 2); _k < _l; _k++) { //#10364
        $k[$j++] = $_.height; //#10364
    } //#10364
    var _n = $a(); //#10364
    $k[$j++] = Infinity; //#10365
    for (var _p = 0, _q = ~~(($_.sbs.length + 1) / 2); _p < _q; _p++) { //#10365
        $k[$j++] = 0; //#10365
    } //#10365
    var _r = $a(); //#10365
    $k[$j++] = 'ren'; //#10368
    $k[$j++] = 'renlinear'; //#10368
    $k[$j++] = 'sbs'; //#10368
    $k[$j++] = _i; //#10368
    $k[$j++] = 'bhs'; //#10368
    $k[$j++] = _n; //#10368
    $k[$j++] = 'bbs'; //#10368
    $k[$j++] = _r; //#10368
    $k[$j++] = 'txt'; //#10368
    $k[$j++] = $_.txt; //#10368
    $k[$j++] = 'textxalign'; //#10368
    $k[$j++] = "center"; //#10368
    $k[$j++] = 'opt'; //#10368
    $k[$j++] = $_.options; //#10368
    var _u = $d(); //#10368
    $k[$j++] = _u; //#10371
    if (!$_.dontdraw) { //#10371
        bwipp_renlinear(); //#10371
    } //#10371
    $_ = Object.getPrototypeOf($_); //#10373
} //bwipp_pharmacode
function bwipp_pharmacode2() {
    $_ = Object.create($_); //#10401
    $_.dontdraw = false; //#10404
    $_.includetext = false; //#10405
    $_.height = 4; //#10406
    $k[$j++] = $_; //#10408
    bwipp_processoptions(); //#10408
    $_.options = $k[--$j]; //#10408
    $_.barcode = $k[--$j]; //#10409
    if (($_.barcode.length < 1) || ($_.barcode.length > 8)) { //#10414
        $k[$j++] = 'bwipp.pharmacode2BadLength#10413'; //#10413
        $k[$j++] = "Two-track Pharmacode must be 1 to 6 digits"; //#10413
        bwipp_raiseerror(); //#10413
    } //#10413
    $forall($_.barcode, function() { //#10419
        var _5 = $k[--$j]; //#10416
        if ((_5 < 48) || (_5 > 57)) { //#10418
            $k[$j++] = 'bwipp.pharmacode2badCharacter#10417'; //#10417
            $k[$j++] = "Two-track Pharmacode must contain only digits"; //#10417
            bwipp_raiseerror(); //#10417
        } //#10417
    }); //#10417
    var _7 = $cvi($_.barcode); //#10420
    if ((_7 < 4) || (_7 > 64570080)) { //#10422
        $k[$j++] = 'bwipp.pharmacode2badValue#10421'; //#10421
        $k[$j++] = "Two-track Pharmacode value must be between 4 and 64570080"; //#10421
        bwipp_raiseerror(); //#10421
    } //#10421
    $_.txt = $a($_.barcode.length); //#10425
    for (var _C = 0, _B = $_.barcode.length - 1; _C <= _B; _C += 1) { //#10429
        $_.i = _C; //#10427
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), 0, 0, "", 0])); //#10428
    } //#10428
    $_.encstr = $s(16); //#10431
    $_.sbs = $a(32); //#10432
    $_.bar = (1 / 25.4) * $_.height; //#10433
    $_.spc = (1 / 25.4) * 72; //#10434
    $_.i = 15; //#10437
    $_.val = $cvi($_.barcode); //#10438
    for (;;) { //#10445
        if ($_.val == 0) { //#10440
            break; //#10440
        } //#10440
        var _P = $_.val % 3; //#10441
        $_.val = ~~($f($_.val - $get($a([3, 1, 2]), _P)) / 3); //#10442
        $put($_.encstr, $_.i, $get($a([2, 0, 1]), _P)); //#10443
        $_.i = $_.i - 1; //#10444
    } //#10444
    $_.encstr = $geti($_.encstr, $_.i + 1, 15 - $_.i); //#10446
    $_.bhs = $a($_.encstr.length); //#10449
    $_.bbs = $a($_.encstr.length); //#10450
    for (var _i = 0, _h = $_.encstr.length - 1; _i <= _h; _i += 1) { //#10456
        $_.i = _i; //#10452
        var _l = $get($_.encstr, $_.i); //#10453
        $put($_.bhs, $_.i, $_.bar * $get($a([1, 1, 2]), _l)); //#10454
        $put($_.bbs, $_.i, $get($a([0, $_.bar, 0]), _l)); //#10455
    } //#10455
    $k[$j++] = Infinity; //#10459
    var _w = $_.bhs; //#10461
    var _x = $_.bbs; //#10462
    $k[$j++] = Infinity; //#10463
    for (var _z = 0, _10 = $_.encstr.length * 2; _z < _10; _z++) { //#10463
        $k[$j++] = $_.spc; //#10463
    } //#10463
    var _12 = $a(); //#10463
    $k[$j++] = 'ren'; //#10467
    $k[$j++] = 'renlinear'; //#10467
    $k[$j++] = 'bhs'; //#10467
    $k[$j++] = _w; //#10467
    $k[$j++] = 'bbs'; //#10467
    $k[$j++] = _x; //#10467
    $k[$j++] = 'sbs'; //#10467
    $k[$j++] = _12; //#10467
    $k[$j++] = 'txt'; //#10467
    $k[$j++] = $_.txt; //#10467
    $k[$j++] = 'textxalign'; //#10467
    $k[$j++] = "center"; //#10467
    $k[$j++] = 'textyoffset'; //#10467
    $k[$j++] = 4; //#10467
    $k[$j++] = 'opt'; //#10467
    $k[$j++] = $_.options; //#10467
    var _15 = $d(); //#10467
    $k[$j++] = _15; //#10470
    if (!$_.dontdraw) { //#10470
        bwipp_renlinear(); //#10470
    } //#10470
    $_ = Object.getPrototypeOf($_); //#10472
} //bwipp_pharmacode2
function bwipp_code2of5() {
    $_ = Object.create($_); //#10502
    $_.dontdraw = false; //#10505
    $_.includecheck = false; //#10506
    $_.validatecheck = false; //#10507
    $_.includetext = false; //#10508
    $_.includecheckintext = false; //#10509
    $_.textfont = "OCR-B"; //#10510
    $_.textsize = 10; //#10511
    $_.textyoffset = -8; //#10512
    $_.height = 1; //#10513
    $_.version = "industrial"; //#10514
    $k[$j++] = $_; //#10516
    bwipp_processoptions(); //#10516
    $_.options = $k[--$j]; //#10516
    $_.barcode = $k[--$j]; //#10517
    if ($eq($_.barcode, "")) { //#10521
        $k[$j++] = 'bwipp.code2of5emptyData#10520'; //#10520
        $k[$j++] = "The data must not be empty"; //#10520
        bwipp_raiseerror(); //#10520
    } //#10520
    bwipp_loadctx(bwipp_code2of5); //#10523
    $forall($_.barcode, function() { //#10530
        var _4 = $k[--$j]; //#10527
        if ((_4 < 48) || (_4 > 57)) { //#10529
            $k[$j++] = 'bwipp.code2of5badCharacter#10528'; //#10528
            $k[$j++] = "Code 25 must contain only digits"; //#10528
            bwipp_raiseerror(); //#10528
        } //#10528
    }); //#10528
    $k[$j++] = 'barlen'; //#10532
    $k[$j++] = $_.barcode.length; //#10532
    if ($_.validatecheck) { //#10532
        var _7 = $k[--$j]; //#10532
        $k[$j++] = $f(_7 - 1); //#10532
    } //#10532
    var _8 = $k[--$j]; //#10532
    $_[$k[--$j]] = _8; //#10532
    $_.checksum = 0; //#10534
    for (var _C = 0, _B = $f($_.barlen - 1); _C <= _B; _C += 1) { //#10538
        $_.i = _C; //#10536
        $k[$j++] = 'checksum'; //#10537
        $k[$j++] = $_.checksum; //#10537
        $k[$j++] = $f($get($_.barcode, $_.i) - 48); //#10537
        if (($f($_.barlen - $_.i) % 2) != 0) { //#10537
            var _J = $k[--$j]; //#10537
            $k[$j++] = _J * 3; //#10537
        } //#10537
        var _K = $k[--$j]; //#10537
        var _L = $k[--$j]; //#10537
        $_[$k[--$j]] = $f(_L + _K); //#10537
    } //#10537
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#10539
    if ($_.validatecheck) { //#10546
        if ($get($_.barcode, $_.barlen) != ($_.checksum + 48)) { //#10543
            $k[$j++] = 'bwipp.code2of5badCheckDigit#10542'; //#10542
            $k[$j++] = "Incorrect Code 25 check digit provided"; //#10542
            bwipp_raiseerror(); //#10542
        } //#10542
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#10544
        $_.includecheck = true; //#10545
    } //#10545
    if (!bwipp_code2of5.__10574__) { //#10574
        $_ = Object.create($_); //#10574
        var _b = new Map([
            ["industrial", $a(["1111313111", "3111111131", "1131111131", "3131111111", "1111311131", "3111311111", "1131311111", "1111113131", "3111113111", "1131113111", "313111", "31113"])],
            ["iata", $a(["1111313111", "3111111131", "1131111131", "3131111111", "1111311131", "3111311111", "1131311111", "1111113131", "3111113111", "1131113111", "1111", "311"])],
            ["matrix", $a(["113311", "311131", "131131", "331111", "113131", "313111", "133111", "111331", "311311", "131311", "311111", "31111"])],
            ["coop", $a(["331111", "111331", "113131", "113311", "131131", "131311", "133111", "311131", "311311", "313111", "3131", "133"])],
            ["datalogic", $a(["113311", "311131", "131131", "331111", "113131", "313111", "133111", "111331", "311311", "131311", "1111", "311"])]
        ]); //#10571
        $_.versions = _b; //#10573
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code2of5.$ctx[id] = $_[id]); //#10573
        bwipp_code2of5.__10574__ = 1; //#10573
        $_ = Object.getPrototypeOf($_); //#10573
    } //#10573
    var _f = $get($_.versions, $_.version) !== undefined; //#10576
    if (!_f) { //#10578
        $k[$j++] = 'bwipp.code2of5badVersion#10577'; //#10577
        $k[$j++] = "Unrecognised Code 25 version"; //#10577
        bwipp_raiseerror(); //#10577
    } //#10577
    $_.encs = $get($_.versions, $_.version); //#10579
    $_.cs = $get($_.encs, 0).length; //#10581
    $k[$j++] = 'cw'; //#10582
    $k[$j++] = 0; //#10582
    $forall($get($_.encs, 0), function() { //#10582
        var _n = $k[--$j]; //#10582
        var _o = $k[--$j]; //#10582
        $k[$j++] = $f(_o + $f(_n - 48)); //#10582
    }); //#10582
    var _p = $k[--$j]; //#10582
    $_[$k[--$j]] = _p; //#10582
    $_.ss = $get($_.encs, 10).length; //#10583
    $k[$j++] = 'sw'; //#10584
    $k[$j++] = 0; //#10584
    $forall($get($_.encs, 10), function() { //#10584
        var _v = $k[--$j]; //#10584
        var _w = $k[--$j]; //#10584
        $k[$j++] = $f(_w + $f(_v - 48)); //#10584
    }); //#10584
    var _x = $k[--$j]; //#10584
    $_[$k[--$j]] = _x; //#10584
    var _10 = $get($_.encs, 11); //#10585
    $_.es = _10.length; //#10585
    if (!bwipp_code2of5.__10590__) { //#10590
        $_ = Object.create($_); //#10590
        $_.barchars = "0123456789"; //#10589
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code2of5.$ctx[id] = $_[id]); //#10589
        bwipp_code2of5.__10590__ = 1; //#10589
        $_ = Object.getPrototypeOf($_); //#10589
    } //#10589
    $k[$j++] = 'sbs'; //#10592
    $k[$j++] = $_.barlen; //#10592
    if ($_.includecheck) { //#10592
        var _14 = $k[--$j]; //#10592
        $k[$j++] = $f(_14 + 1); //#10592
    } //#10592
    var _19 = $s($f(($f(($k[--$j] * $_.cs) + $_.ss)) + $_.es)); //#10592
    $_[$k[--$j]] = _19; //#10592
    $k[$j++] = 'txt'; //#10593
    $k[$j++] = $_.barlen; //#10593
    if ($_.includecheck) { //#10593
        var _1D = $k[--$j]; //#10593
        $k[$j++] = $f(_1D + 1); //#10593
    } //#10593
    var _1F = $a($k[--$j]); //#10593
    $_[$k[--$j]] = _1F; //#10593
    $puti($_.sbs, 0, $get($_.encs, 10)); //#10596
    for (var _1M = 0, _1L = $f($_.barlen - 1); _1M <= _1L; _1M += 1) { //#10607
        $_.i = _1M; //#10598
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#10600
        $j--; //#10601
        $_.indx = $k[--$j].length; //#10602
        $j -= 2; //#10603
        $_.enc = $get($_.encs, $_.indx); //#10604
        $puti($_.sbs, ($_.i * $_.cs) + $_.ss, $_.enc); //#10605
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), $f(($_.i * $_.cw) + $_.sw), $_.textyoffset, $_.textfont, $_.textsize])); //#10606
    } //#10606
    if ($_.includecheck) { //#10619
        $puti($_.sbs, $f(($_.barlen * $_.cs) + $_.ss), $get($_.encs, $_.checksum)); //#10611
        $puti($_.sbs, $f(($f(($_.barlen * $_.cs) + $_.cs)) + $_.ss), $get($_.encs, 11)); //#10612
        if ($_.includecheckintext) { //#10616
            $put($_.txt, $_.barlen, $a([$geti($_.barchars, $_.checksum, 1), $f(($_.barlen * $_.cw) + $_.sw), $_.textyoffset, $_.textfont, $_.textsize])); //#10614
        } else { //#10616
            $put($_.txt, $_.barlen, $a([" ", $f(($_.barlen * $_.cw) + $_.sw), $_.textyoffset, $_.textfont, $_.textsize])); //#10616
        } //#10616
    } else { //#10619
        $puti($_.sbs, $f(($_.barlen * $_.cs) + $_.ss), $get($_.encs, 11)); //#10619
    } //#10619
    $k[$j++] = Infinity; //#10623
    $k[$j++] = Infinity; //#10625
    $forall($_.sbs, function() { //#10625
        var _2U = $k[--$j]; //#10625
        $k[$j++] = $f(_2U - 48); //#10625
    }); //#10625
    var _2V = $a(); //#10625
    $k[$j++] = Infinity; //#10626
    for (var _2X = 0, _2Y = ~~(($_.sbs.length + 1) / 2); _2X < _2Y; _2X++) { //#10626
        $k[$j++] = $_.height; //#10626
    } //#10626
    var _2a = $a(); //#10626
    $k[$j++] = Infinity; //#10627
    for (var _2c = 0, _2d = ~~(($_.sbs.length + 1) / 2); _2c < _2d; _2c++) { //#10627
        $k[$j++] = 0; //#10627
    } //#10627
    var _2e = $a(); //#10627
    $k[$j++] = 'ren'; //#10630
    $k[$j++] = 'renlinear'; //#10630
    $k[$j++] = 'sbs'; //#10630
    $k[$j++] = _2V; //#10630
    $k[$j++] = 'bhs'; //#10630
    $k[$j++] = _2a; //#10630
    $k[$j++] = 'bbs'; //#10630
    $k[$j++] = _2e; //#10630
    if ($_.includetext) { //#10630
        $k[$j++] = 'txt'; //#10629
        $k[$j++] = $_.txt; //#10629
    } //#10629
    $k[$j++] = 'opt'; //#10631
    $k[$j++] = $_.options; //#10631
    var _2i = $d(); //#10631
    $k[$j++] = _2i; //#10634
    if (!$_.dontdraw) { //#10634
        bwipp_renlinear(); //#10634
    } //#10634
    $_ = Object.getPrototypeOf($_); //#10636
    $_ = Object.getPrototypeOf($_); //#10638
} //bwipp_code2of5
function bwipp_industrial2of5() {
    $_ = Object.create($_); //#10667
    $_.dontdraw = false; //#10670
    $k[$j++] = $_; //#10672
    bwipp_processoptions(); //#10672
    $_.options = $k[--$j]; //#10672
    $_.barcode = $k[--$j]; //#10673
    $put($_.options, "dontdraw", true); //#10676
    $put($_.options, "version", "industrial"); //#10677
    $k[$j++] = 'args'; //#10679
    $k[$j++] = $_.barcode; //#10679
    $k[$j++] = $_.options; //#10679
    bwipp_code2of5(); //#10679
    var _6 = $k[--$j]; //#10679
    $_[$k[--$j]] = _6; //#10679
    $put($_.args, "opt", $_.options); //#10681
    $k[$j++] = $_.args; //#10684
    if (!$_.dontdraw) { //#10684
        bwipp_renlinear(); //#10684
    } //#10684
    $_ = Object.getPrototypeOf($_); //#10686
} //bwipp_industrial2of5
function bwipp_iata2of5() {
    $_ = Object.create($_); //#10715
    $_.dontdraw = false; //#10718
    $k[$j++] = $_; //#10720
    bwipp_processoptions(); //#10720
    $_.options = $k[--$j]; //#10720
    $_.barcode = $k[--$j]; //#10721
    $put($_.options, "dontdraw", true); //#10724
    $put($_.options, "version", "iata"); //#10725
    $k[$j++] = 'args'; //#10727
    $k[$j++] = $_.barcode; //#10727
    $k[$j++] = $_.options; //#10727
    bwipp_code2of5(); //#10727
    var _6 = $k[--$j]; //#10727
    $_[$k[--$j]] = _6; //#10727
    $put($_.args, "opt", $_.options); //#10729
    $k[$j++] = $_.args; //#10732
    if (!$_.dontdraw) { //#10732
        bwipp_renlinear(); //#10732
    } //#10732
    $_ = Object.getPrototypeOf($_); //#10734
} //bwipp_iata2of5
function bwipp_matrix2of5() {
    $_ = Object.create($_); //#10763
    $_.dontdraw = false; //#10766
    $k[$j++] = $_; //#10768
    bwipp_processoptions(); //#10768
    $_.options = $k[--$j]; //#10768
    $_.barcode = $k[--$j]; //#10769
    $put($_.options, "dontdraw", true); //#10772
    $put($_.options, "version", "matrix"); //#10773
    $k[$j++] = 'args'; //#10775
    $k[$j++] = $_.barcode; //#10775
    $k[$j++] = $_.options; //#10775
    bwipp_code2of5(); //#10775
    var _6 = $k[--$j]; //#10775
    $_[$k[--$j]] = _6; //#10775
    $put($_.args, "opt", $_.options); //#10777
    $k[$j++] = $_.args; //#10780
    if (!$_.dontdraw) { //#10780
        bwipp_renlinear(); //#10780
    } //#10780
    $_ = Object.getPrototypeOf($_); //#10782
} //bwipp_matrix2of5
function bwipp_coop2of5() {
    $_ = Object.create($_); //#10811
    $_.dontdraw = false; //#10814
    $k[$j++] = $_; //#10816
    bwipp_processoptions(); //#10816
    $_.options = $k[--$j]; //#10816
    $_.barcode = $k[--$j]; //#10817
    $put($_.options, "dontdraw", true); //#10820
    $put($_.options, "version", "coop"); //#10821
    $k[$j++] = 'args'; //#10823
    $k[$j++] = $_.barcode; //#10823
    $k[$j++] = $_.options; //#10823
    bwipp_code2of5(); //#10823
    var _6 = $k[--$j]; //#10823
    $_[$k[--$j]] = _6; //#10823
    $put($_.args, "opt", $_.options); //#10825
    $k[$j++] = $_.args; //#10828
    if (!$_.dontdraw) { //#10828
        bwipp_renlinear(); //#10828
    } //#10828
    $_ = Object.getPrototypeOf($_); //#10830
} //bwipp_coop2of5
function bwipp_datalogic2of5() {
    $_ = Object.create($_); //#10859
    $_.dontdraw = false; //#10862
    $k[$j++] = $_; //#10864
    bwipp_processoptions(); //#10864
    $_.options = $k[--$j]; //#10864
    $_.barcode = $k[--$j]; //#10865
    $put($_.options, "dontdraw", true); //#10868
    $put($_.options, "version", "datalogic"); //#10869
    $k[$j++] = 'args'; //#10871
    $k[$j++] = $_.barcode; //#10871
    $k[$j++] = $_.options; //#10871
    bwipp_code2of5(); //#10871
    var _6 = $k[--$j]; //#10871
    $_[$k[--$j]] = _6; //#10871
    $put($_.args, "opt", $_.options); //#10873
    $k[$j++] = $_.args; //#10876
    if (!$_.dontdraw) { //#10876
        bwipp_renlinear(); //#10876
    } //#10876
    $_ = Object.getPrototypeOf($_); //#10878
} //bwipp_datalogic2of5
function bwipp_code11() {
    $_ = Object.create($_); //#10908
    $_.dontdraw = false; //#10911
    $_.includecheck = false; //#10912
    $_.validatecheck = false; //#10913
    $_.includetext = false; //#10914
    $_.includecheckintext = false; //#10915
    $_.textfont = "OCR-B"; //#10916
    $_.textsize = 10; //#10917
    $_.textyoffset = -8; //#10918
    $_.height = 1; //#10919
    $k[$j++] = $_; //#10921
    bwipp_processoptions(); //#10921
    $_.options = $k[--$j]; //#10921
    $_.barcode = $k[--$j]; //#10922
    if ($eq($_.barcode, "")) { //#10926
        $k[$j++] = 'bwipp.code11emptyData#10925'; //#10925
        $k[$j++] = "The data must not be empty"; //#10925
        bwipp_raiseerror(); //#10925
    } //#10925
    bwipp_loadctx(bwipp_code11); //#10928
    if (!bwipp_code11.__10942__) { //#10942
        $_ = Object.create($_); //#10942
        $_.encs = $a(["111131", "311131", "131131", "331111", "113131", "313111", "133111", "111331", "311311", "311111", "113111", "113311"]); //#10936
        $_.barchars = "0123456789-"; //#10939
        $_.charvals = new Map; //#10940
        for (var _4 = 0; _4 <= 10; _4 += 1) { //#10941
            $put($_.charvals, $geti($_.barchars, _4, 1), _4); //#10941
        } //#10941
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code11.$ctx[id] = $_[id]); //#10941
        bwipp_code11.__10942__ = 1; //#10941
        $_ = Object.getPrototypeOf($_); //#10941
    } //#10941
    for (var _B = 0, _A = $_.barcode.length - 1; _B <= _A; _B += 1) { //#10949
        var _F = $get($_.charvals, $geti($_.barcode, _B, 1)) !== undefined; //#10946
        if (!_F) { //#10948
            $k[$j++] = 'bwipp.code11badCharacter#10947'; //#10947
            $k[$j++] = "Code 11 must contain only digits and dashes"; //#10947
            bwipp_raiseerror(); //#10947
        } //#10947
    } //#10947
    $_.barlen = $_.barcode.length; //#10951
    if ($_.validatecheck) { //#10957
        if ($_.barlen == 11) { //#10955
            $k[$j++] = 'bwipp.code11badLength#10954'; //#10954
            $k[$j++] = "Code 11 cannot be 11 characters using check digits"; //#10954
            bwipp_raiseerror(); //#10954
        } //#10954
        var _L = ($_.barlen <= 10) ? 1 : 2; //#10956
        $_.barlen = $_.barlen - _L; //#10956
    } //#10956
    $k[$j++] = 'numchecks'; //#10959
    if ($_.includecheck || $_.validatecheck) { //#10959
        var _P = ($_.barlen >= 10) ? 2 : 1; //#10959
        $k[$j++] = _P; //#10959
    } else { //#10959
        $k[$j++] = 0; //#10959
    } //#10959
    var _Q = $k[--$j]; //#10959
    $_[$k[--$j]] = _Q; //#10959
    $_.checksum1 = 0; //#10960
    $_.checksum2 = 0; //#10960
    for (var _U = 0, _T = $_.barlen - 1; _U <= _T; _U += 1) { //#10966
        $_.i = _U; //#10962
        $_.indx = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#10963
        $_.checksum1 = $f($_.checksum1 + ((((($_.barlen - $_.i) - 1) % 10) + 1) * $_.indx)); //#10964
        $_.checksum2 = $f($_.checksum2 + (((($_.barlen - $_.i) % 9) + 1) * $_.indx)); //#10965
    } //#10965
    $_.checksum1 = $_.checksum1 % 11; //#10967
    $_.checksum2 = $f($_.checksum2 + $_.checksum1) % 11; //#10968
    if ($_.validatecheck) { //#10982
        if ($_.numchecks == 1) { //#10977
            var _r = $_.checksum1; //#10971
            if ($get($_.barcode, $_.barlen) != $get($_.barchars, _r)) { //#10973
                $k[$j++] = 'bwipp.code11badCheckDigit#10972'; //#10972
                $k[$j++] = "Incorrect Code 11 check digit provided"; //#10972
                bwipp_raiseerror(); //#10972
            } //#10972
        } else { //#10977
            if (($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum1)) || ($get($_.barcode, $_.barlen + 1) != $get($_.barchars, $_.checksum2))) { //#10978
                $k[$j++] = 'bwipp.code11badCheckDigits#10977'; //#10977
                $k[$j++] = "Incorrect Code 11 check digits provided"; //#10977
                bwipp_raiseerror(); //#10977
            } //#10977
        } //#10977
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#10980
        $_.includecheck = true; //#10981
    } //#10981
    $_.sbs = $s($f(($f($_.barlen + $_.numchecks) * 6) + 12)); //#10984
    $_.txt = $a($f($_.barlen + $_.numchecks)); //#10985
    $puti($_.sbs, 0, $get($_.encs, 11)); //#10988
    $_.xpos = 8; //#10990
    for (var _1J = 0, _1I = $_.barlen - 1; _1J <= _1I; _1J += 1) { //#11000
        $_.i = _1J; //#10992
        $_.indx = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#10993
        $_.enc = $get($_.encs, $_.indx); //#10994
        $puti($_.sbs, ($_.i * 6) + 6, $_.enc); //#10995
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#10996
        for (var _1f = 0; _1f <= 5; _1f += 1) { //#10999
            $_.xpos = $f($f($get($_.enc, _1f) - 48) + $_.xpos); //#10998
        } //#10998
    } //#10998
    if ($_.includecheck) { //#11029
        if ($_.barlen >= 10) { //#11026
            $puti($_.sbs, ($_.barlen * 6) + 6, $get($_.encs, $_.checksum1)); //#11005
            $puti($_.sbs, ($_.barlen * 6) + 12, $get($_.encs, $_.checksum2)); //#11006
            if ($_.includecheckintext) { //#11016
                $put($_.txt, $_.barlen, $a([$geti($_.barchars, $_.checksum1, 1), $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#11008
                $_.enc = $get($_.encs, $_.checksum1); //#11009
                for (var _29 = 0; _29 <= 5; _29 += 1) { //#11012
                    $_.xpos = $f($f($get($_.enc, _29) - 48) + $_.xpos); //#11011
                } //#11011
                $put($_.txt, $_.barlen + 1, $a([$geti($_.barchars, $_.checksum2, 1), $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#11013
            } else { //#11016
                $put($_.txt, $_.barlen, $a(["", $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#11015
                $put($_.txt, $_.barlen + 1, $a(["", $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#11016
            } //#11016
            $puti($_.sbs, ($_.barlen * 6) + 18, $get($_.encs, 11)); //#11018
        } else { //#11026
            $puti($_.sbs, ($_.barlen * 6) + 6, $get($_.encs, $_.checksum1)); //#11020
            if ($_.includecheckintext) { //#11024
                $put($_.txt, $_.barlen, $a([$geti($_.barchars, $_.checksum1, 1), $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#11022
            } else { //#11024
                $put($_.txt, $_.barlen, $a(["", $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#11024
            } //#11024
            $puti($_.sbs, ($_.barlen * 6) + 12, $get($_.encs, 11)); //#11026
        } //#11026
    } else { //#11029
        $puti($_.sbs, ($_.barlen * 6) + 6, $get($_.encs, 11)); //#11029
    } //#11029
    $k[$j++] = Infinity; //#11033
    $k[$j++] = Infinity; //#11035
    var _3A = $_.sbs; //#11035
    for (var _3B = 0, _3C = _3A.length; _3B < _3C; _3B++) { //#11035
        $k[$j++] = $get(_3A, _3B) - 48; //#11035
    } //#11035
    var _3E = $a(); //#11035
    $k[$j++] = Infinity; //#11036
    for (var _3G = 0, _3H = ~~(($_.sbs.length + 1) / 2); _3G < _3H; _3G++) { //#11036
        $k[$j++] = $_.height; //#11036
    } //#11036
    var _3J = $a(); //#11036
    $k[$j++] = Infinity; //#11037
    for (var _3L = 0, _3M = ~~(($_.sbs.length + 1) / 2); _3L < _3M; _3L++) { //#11037
        $k[$j++] = 0; //#11037
    } //#11037
    var _3N = $a(); //#11037
    $k[$j++] = 'ren'; //#11040
    $k[$j++] = 'renlinear'; //#11040
    $k[$j++] = 'sbs'; //#11040
    $k[$j++] = _3E; //#11040
    $k[$j++] = 'bhs'; //#11040
    $k[$j++] = _3J; //#11040
    $k[$j++] = 'bbs'; //#11040
    $k[$j++] = _3N; //#11040
    if ($_.includetext) { //#11040
        $k[$j++] = 'txt'; //#11039
        $k[$j++] = $_.txt; //#11039
    } //#11039
    $k[$j++] = 'opt'; //#11041
    $k[$j++] = $_.options; //#11041
    var _3R = $d(); //#11041
    $k[$j++] = _3R; //#11044
    if (!$_.dontdraw) { //#11044
        bwipp_renlinear(); //#11044
    } //#11044
    $_ = Object.getPrototypeOf($_); //#11046
    $_ = Object.getPrototypeOf($_); //#11048
} //bwipp_code11
function bwipp_bc412() {
    $_ = Object.create($_); //#11078
    $_.dontdraw = false; //#11081
    $_.includecheck = false; //#11082
    $_.validatecheck = false; //#11083
    $_.includetext = false; //#11084
    $_.includecheckintext = false; //#11085
    $_.includestartstop = false; //#11086
    $_.semi = false; //#11087
    $_.textfont = "OCR-B"; //#11088
    $_.textsize = 10; //#11089
    $_.textyoffset = -8; //#11090
    $_.height = 1; //#11091
    $k[$j++] = $_; //#11093
    bwipp_processoptions(); //#11093
    $_.options = $k[--$j]; //#11093
    $_.barcode = $k[--$j]; //#11094
    if ($eq($_.barcode, "")) { //#11098
        $k[$j++] = 'bwipp.bc412emptyData#11097'; //#11097
        $k[$j++] = "The data must not be empty"; //#11097
        bwipp_raiseerror(); //#11097
    } //#11097
    if ($_.semi) { //#11103
        $_.includestartstop = true; //#11102
    } //#11102
    bwipp_loadctx(bwipp_bc412); //#11105
    if (!bwipp_bc412.__11112__) { //#11112
        $_ = Object.create($_); //#11112
        $_.barchars = "0R9GLVHA8EZ4NTS1J2Q6C7DYKBUIX3FWP5M"; //#11109
        $_.charvals = new Map; //#11110
        for (var _4 = 0; _4 <= 34; _4 += 1) { //#11111
            $put($_.charvals, $geti($_.barchars, _4, 1), _4); //#11111
        } //#11111
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_bc412.$ctx[id] = $_[id]); //#11111
        bwipp_bc412.__11112__ = 1; //#11111
        $_ = Object.getPrototypeOf($_); //#11111
    } //#11111
    for (var _B = 0, _A = $_.barcode.length - 1; _B <= _A; _B += 1) { //#11119
        var _F = $get($_.charvals, $geti($_.barcode, _B, 1)) !== undefined; //#11116
        if (!_F) { //#11118
            $k[$j++] = 'bwipp.bc412badCharacter#11117'; //#11117
            $k[$j++] = "BC412 must contain only digits and capital letters except O"; //#11117
            bwipp_raiseerror(); //#11117
        } //#11117
    } //#11117
    if ($_.semi) { //#11175
        if ($_.validatecheck) { //#11129
            if (($_.barcode.length < 8) || ($_.barcode.length > 19)) { //#11126
                $k[$j++] = 'bwipp.bc412semivalidateBadLength#11125'; //#11125
                $k[$j++] = "BC412 semi with check digit must be 8 to 19 characters long"; //#11125
                bwipp_raiseerror(); //#11125
            } //#11125
        } else { //#11129
            if (($_.barcode.length < 7) || ($_.barcode.length > 18)) { //#11130
                $k[$j++] = 'bwipp.bc412semiBadLength#11129'; //#11129
                $k[$j++] = "BC412 semi must be 7 to 18 characters long"; //#11129
                bwipp_raiseerror(); //#11129
            } //#11129
        } //#11129
        $_.barlen = $_.barcode.length; //#11133
        if (!$_.validatecheck) { //#11141
            $_.barlen = $_.barlen + 1; //#11135
            $_.sbarcode = $s($_.barlen); //#11136
            $put($_.sbarcode, 0, $get($_.barcode, 0)); //#11137
            $put($_.sbarcode, 1, 48); //#11138
            $puti($_.sbarcode, 2, $geti($_.barcode, 1, $_.barlen - 2)); //#11139
            $_.barcode = $_.sbarcode; //#11140
        } //#11140
        $_.sumodd = 0; //#11142
        $_.sumeven = 0; //#11142
        for (var _c = 0, _b = $_.barlen - 1; _c <= _b; _c += 1) { //#11151
            $_.i = _c; //#11144
            $k[$j++] = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#11150
            if (($_.i % 2) == 0) { //#11149
                $_.sumodd = $f($k[--$j] + $_.sumodd); //#11147
            } else { //#11149
                $_.sumeven = $f($k[--$j] + $_.sumeven); //#11149
            } //#11149
        } //#11149
        $_.checksum = ($f(($_.sumodd % 35) + (($_.sumeven % 35) * 2))) % 35; //#11152
        if ($_.validatecheck) { //#11159
            if ($_.checksum != 0) { //#11156
                $k[$j++] = 'bwipp.bc412semiBadCheckDigit#11155'; //#11155
                $k[$j++] = "Incorrect BC412 semi check digit provided"; //#11155
                bwipp_raiseerror(); //#11155
            } //#11155
        } else { //#11159
            $_.checksum = ($_.checksum * 17) % 35; //#11158
            $put($_.barcode, 1, $get($_.barchars, $_.checksum)); //#11159
        } //#11159
    } else { //#11175
        $k[$j++] = 'barlen'; //#11162
        $k[$j++] = $_.barcode.length; //#11162
        if ($_.validatecheck) { //#11162
            var _y = $k[--$j]; //#11162
            $k[$j++] = $f(_y - 1); //#11162
        } //#11162
        var _z = $k[--$j]; //#11162
        $_[$k[--$j]] = _z; //#11162
        $_.checksum = 0; //#11164
        for (var _13 = 0, _12 = $_.barlen - 1; _13 <= _12; _13 += 1) { //#11168
            $_.checksum = $f($get($_.charvals, $geti($_.barcode, _13, 1)) + $_.checksum); //#11167
        } //#11167
        $_.checksum = $_.checksum % 35; //#11169
        if ($_.validatecheck) { //#11176
            if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#11173
                $k[$j++] = 'bwipp.bc412badCheckDigit#11172'; //#11172
                $k[$j++] = "Incorrect BC412 check digit provided"; //#11172
                bwipp_raiseerror(); //#11172
            } //#11172
            $_.barcode = $geti($_.barcode, 0, $_.barlen); //#11174
            $_.includecheck = true; //#11175
        } //#11175
    } //#11175
    if (!bwipp_bc412.__11191__) { //#11191
        $_ = Object.create($_); //#11191
        $_.encs = $a(["11111115", "13111212", "11131113", "12111213", "12121311", "13131111", "12111312", "11131212", "11121411", "11151111", "15111111", "11111511", "12131211", "13121112", "13111311", "11111214", "12121113", "11111313", "13111113", "11121213", "11141112", "11121312", "11141211", "14121111", "12121212", "11131311", "13121211", "12111411", "14111211", "11111412", "12111114", "14111112", "12141111", "11121114", "12131112", "12", "111"]); //#11190
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_bc412.$ctx[id] = $_[id]); //#11190
        bwipp_bc412.__11191__ = 1; //#11190
        $_ = Object.getPrototypeOf($_); //#11190
    } //#11190
    $_.sbs = $s((($_.barlen + 1) * 8) + 5); //#11193
    if ($_.includecheck) { //#11197
        $_.txt = $a($_.barlen + 1); //#11195
    } else { //#11197
        $_.txt = $a($_.barlen); //#11197
    } //#11197
    if ($_.includestartstop) { //#11207
        $puti($_.sbs, 0, $get($_.encs, 35)); //#11202
        $_.pos = 2; //#11203
        $_.txtpos = 3; //#11204
    } else { //#11207
        $_.pos = 0; //#11206
        $_.txtpos = 0; //#11207
    } //#11207
    for (var _1Z = 0, _1Y = $_.barlen - 1; _1Z <= _1Y; _1Z += 1) { //#11216
        $_.i = _1Z; //#11211
        $_.indx = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#11212
        $puti($_.sbs, $_.pos, $get($_.encs, $_.indx)); //#11213
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ($_.i * 12) + $_.txtpos, $_.textyoffset, $_.textfont, $_.textsize])); //#11214
        $_.pos = $_.pos + 8; //#11215
    } //#11215
    if ($_.includecheck) { //#11227
        $puti($_.sbs, $_.pos, $get($_.encs, $_.checksum)); //#11220
        if ($_.includecheckintext) { //#11224
            $put($_.txt, $_.barlen, $a([$geti($_.barchars, $_.checksum, 1), ($_.barlen * 12) + $_.txtpos, $_.textyoffset, $_.textfont, $_.textsize])); //#11222
        } else { //#11224
            $put($_.txt, $_.barlen, $a(["", ($_.barlen * 12) + $_.txtpos, $_.textyoffset, $_.textfont, $_.textsize])); //#11224
        } //#11224
        $_.pos = $_.pos + 8; //#11226
    } //#11226
    if ($_.includestartstop) { //#11233
        $puti($_.sbs, $_.pos, $get($_.encs, 36)); //#11231
        $_.pos = $_.pos + 3; //#11232
    } //#11232
    $_.sbs = $geti($_.sbs, 0, $_.pos); //#11236
    $k[$j++] = Infinity; //#11237
    $k[$j++] = Infinity; //#11239
    var _2W = $_.sbs; //#11239
    for (var _2X = 0, _2Y = _2W.length; _2X < _2Y; _2X++) { //#11239
        $k[$j++] = $f($get(_2W, _2X) - 48); //#11239
    } //#11239
    var _2a = $a(); //#11239
    $k[$j++] = Infinity; //#11240
    for (var _2c = 0, _2d = ~~(($_.sbs.length + 1) / 2); _2c < _2d; _2c++) { //#11240
        $k[$j++] = $_.height; //#11240
    } //#11240
    var _2f = $a(); //#11240
    $k[$j++] = Infinity; //#11241
    for (var _2h = 0, _2i = ~~(($_.sbs.length + 1) / 2); _2h < _2i; _2h++) { //#11241
        $k[$j++] = 0; //#11241
    } //#11241
    var _2j = $a(); //#11241
    $k[$j++] = 'ren'; //#11244
    $k[$j++] = 'renlinear'; //#11244
    $k[$j++] = 'sbs'; //#11244
    $k[$j++] = _2a; //#11244
    $k[$j++] = 'bhs'; //#11244
    $k[$j++] = _2f; //#11244
    $k[$j++] = 'bbs'; //#11244
    $k[$j++] = _2j; //#11244
    if ($_.includetext) { //#11244
        $k[$j++] = 'txt'; //#11243
        $k[$j++] = $_.txt; //#11243
    } //#11243
    $k[$j++] = 'opt'; //#11245
    $k[$j++] = $_.options; //#11245
    var _2n = $d(); //#11245
    $k[$j++] = _2n; //#11248
    if (!$_.dontdraw) { //#11248
        bwipp_renlinear(); //#11248
    } //#11248
    $_ = Object.getPrototypeOf($_); //#11250
    $_ = Object.getPrototypeOf($_); //#11252
} //bwipp_bc412
function bwipp_rationalizedCodabar() {
    $_ = Object.create($_); //#11282
    $_.dontdraw = false; //#11285
    $_.altstartstop = false; //#11286
    $_.includecheck = false; //#11287
    $_.validatecheck = false; //#11288
    $_.includetext = false; //#11289
    $_.includecheckintext = false; //#11290
    $_.textfont = "OCR-B"; //#11291
    $_.textsize = 10; //#11292
    $_.textyoffset = -8; //#11293
    $_.height = 1; //#11294
    $k[$j++] = $_; //#11296
    bwipp_processoptions(); //#11296
    $_.options = $k[--$j]; //#11296
    $_.barcode = $k[--$j]; //#11297
    if (($_.barcode.length < 2) || (($_.barcode.length < 3) && $_.validatecheck)) { //#11301
        $k[$j++] = 'bwipp.rationalizedCodabarBadLength#11300'; //#11300
        $k[$j++] = "Codabar must be at least 2 characters in length excluding any check digit"; //#11300
        bwipp_raiseerror(); //#11300
    } //#11300
    bwipp_loadctx(bwipp_rationalizedCodabar); //#11303
    if (!bwipp_rationalizedCodabar.__11317__) { //#11317
        $_ = Object.create($_); //#11317
        $_.encs = $a(["11111331", "11113311", "11131131", "33111111", "11311311", "31111311", "13111131", "13113111", "13311111", "31131111", "11133111", "11331111", "31113131", "31311131", "31313111", "11313131", "11331311", "13131131", "11131331", "11133311"]); //#11312
        $_.barcharsnormal = "0123456789-$:/.+ABCD"; //#11315
        $_.barcharsalt = "0123456789-$:/.+TN*E"; //#11316
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_rationalizedCodabar.$ctx[id] = $_[id]); //#11316
        bwipp_rationalizedCodabar.__11317__ = 1; //#11316
        $_ = Object.getPrototypeOf($_); //#11316
    } //#11316
    var _8 = $_.altstartstop ? $_.barcharsalt : $_.barcharsnormal; //#11319
    $_.barchars = _8; //#11319
    $_.charvals = new Map; //#11321
    for (var _9 = 0; _9 <= 19; _9 += 1) { //#11322
        $put($_.charvals, $geti($_.barchars, _9, 1), _9); //#11322
    } //#11322
    $_.bodyvals = new Map; //#11323
    for (var _D = 0; _D <= 15; _D += 1) { //#11324
        $put($_.bodyvals, $geti($_.barchars, _D, 1), _D); //#11324
    } //#11324
    $_.ssvals = new Map; //#11325
    for (var _H = 16; _H <= 19; _H += 1) { //#11326
        $put($_.ssvals, $geti($_.barchars, _H, 1), _H); //#11326
    } //#11326
    var _O = $get($_.ssvals, $geti($_.barcode, 0, 1)) !== undefined; //#11329
    var _T = $get($_.ssvals, $geti($_.barcode, $_.barcode.length - 1, 1)) !== undefined; //#11330
    if ((!_O) || (!_T)) { //#11336
        if ($_.altstartstop) { //#11334
            $k[$j++] = 'bwipp.rationalizedCodabarBadAltStartStop#11332'; //#11332
            $k[$j++] = "Codabar start and stop characters must be one of E N T or *"; //#11332
            bwipp_raiseerror(); //#11332
        } else { //#11334
            $k[$j++] = 'bwipp.rationalizedCodabarBadStartStop#11334'; //#11334
            $k[$j++] = "Codabar start and stop characters must be one of A B C or D"; //#11334
            bwipp_raiseerror(); //#11334
        } //#11334
    } //#11334
    for (var _X = 1, _W = $_.barcode.length - 2; _X <= _W; _X += 1) { //#11341
        var _b = $get($_.bodyvals, $geti($_.barcode, _X, 1)) !== undefined; //#11338
        if (!_b) { //#11340
            $k[$j++] = 'bwipp.rationalizedCodabarBadCharacter#11339'; //#11339
            $k[$j++] = "Codabar body must contain only digits and symbols - $ : / . +"; //#11339
            bwipp_raiseerror(); //#11339
        } //#11339
    } //#11339
    $k[$j++] = 'barlen'; //#11343
    $k[$j++] = $_.barcode.length; //#11343
    if ($_.validatecheck) { //#11343
        var _e = $k[--$j]; //#11343
        $k[$j++] = $f(_e - 1); //#11343
    } //#11343
    var _f = $k[--$j]; //#11343
    $_[$k[--$j]] = _f; //#11343
    $_.checksum = 0; //#11345
    for (var _j = 0, _i = $f($_.barlen - 2); _j <= _i; _j += 1) { //#11349
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _j, 1)) + $_.checksum); //#11348
    } //#11348
    var _r = $geti($_.barcode, $_.barcode.length - 1, 1); //#11350
    $_.checksum = $f($get($_.charvals, _r) + $_.checksum); //#11351
    $_.checksum = ($f(16 - ($_.checksum % 16))) % 16; //#11352
    if ($_.validatecheck) { //#11362
        if ($get($_.barcode, $f($_.barlen - 1)) != $get($_.barchars, $_.checksum)) { //#11356
            $k[$j++] = 'bwipp.rationalizedCodabarBadCheckDigit#11355'; //#11355
            $k[$j++] = "Incorrect Codabar check digit provided"; //#11355
            bwipp_raiseerror(); //#11355
        } //#11355
        var _14 = $s($_.barlen); //#11357
        $puti(_14, 0, $geti($_.barcode, 0, $f($_.barlen - 1))); //#11358
        $puti(_14, $f($_.barlen - 1), $geti($_.barcode, $_.barlen, 1)); //#11359
        $_.barcode = _14; //#11360
        $_.includecheck = true; //#11361
    } //#11361
    $k[$j++] = 'sbs'; //#11364
    $k[$j++] = $_.barlen; //#11364
    if ($_.includecheck) { //#11364
        var _1E = $k[--$j]; //#11364
        $k[$j++] = $f(_1E + 1); //#11364
    } //#11364
    var _1G = $s($k[--$j] * 8); //#11364
    $_[$k[--$j]] = _1G; //#11364
    $k[$j++] = 'txt'; //#11365
    $k[$j++] = $_.barlen; //#11365
    if ($_.includecheck) { //#11365
        var _1K = $k[--$j]; //#11365
        $k[$j++] = $f(_1K + 1); //#11365
    } //#11365
    var _1M = $a($k[--$j]); //#11365
    $_[$k[--$j]] = _1M; //#11365
    $_.xpos = 0; //#11367
    for (var _1Q = 0, _1P = $f($_.barlen - 2); _1Q <= _1P; _1Q += 1) { //#11377
        $_.i = _1Q; //#11369
        $_.indx = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#11370
        $_.enc = $get($_.encs, $_.indx); //#11371
        $puti($_.sbs, $_.i * 8, $_.enc); //#11372
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#11373
        for (var _1m = 0; _1m <= 7; _1m += 1) { //#11376
            $_.xpos = $f($f($get($_.enc, _1m) - 48) + $_.xpos); //#11375
        } //#11375
    } //#11375
    if ($_.includecheck) { //#11401
        $puti($_.sbs, $f(($_.barlen * 8) - 8), $get($_.encs, $_.checksum)); //#11382
        if ($_.includecheckintext) { //#11386
            $put($_.txt, $f($_.barlen - 1), $a([$geti($_.barchars, $_.checksum, 1), $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#11384
        } else { //#11386
            $put($_.txt, $f($_.barlen - 1), $a([" ", $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#11386
        } //#11386
        for (var _2E = 0; _2E <= 7; _2E += 1) { //#11390
            $_.xpos = $f($f($get($get($_.encs, $_.checksum), _2E) - 48) + $_.xpos); //#11389
        } //#11389
        $_.indx = $get($_.charvals, $geti($_.barcode, $f($_.barlen - 1), 1)); //#11392
        $_.enc = $get($_.encs, $_.indx); //#11393
        $puti($_.sbs, $_.barlen * 8, $_.enc); //#11394
        $put($_.txt, $_.barlen, $a([$geti($_.barcode, $f($_.barlen - 1), 1), $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#11395
    } else { //#11401
        $_.indx = $get($_.charvals, $geti($_.barcode, $f($_.barlen - 1), 1)); //#11398
        $_.enc = $get($_.encs, $_.indx); //#11399
        $puti($_.sbs, $f(($_.barlen * 8) - 8), $_.enc); //#11400
        $put($_.txt, $f($_.barlen - 1), $a([$geti($_.barcode, $f($_.barlen - 1), 1), $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#11401
    } //#11401
    $k[$j++] = Infinity; //#11405
    $k[$j++] = Infinity; //#11407
    $forall($_.sbs, function() { //#11407
        var _31 = $k[--$j]; //#11407
        $k[$j++] = $f(_31 - 48); //#11407
    }); //#11407
    var _32 = $a(); //#11407
    $k[$j++] = Infinity; //#11408
    for (var _34 = 0, _35 = ~~(($_.sbs.length + 1) / 2); _34 < _35; _34++) { //#11408
        $k[$j++] = $_.height; //#11408
    } //#11408
    var _37 = $a(); //#11408
    $k[$j++] = Infinity; //#11409
    for (var _39 = 0, _3A = ~~(($_.sbs.length + 1) / 2); _39 < _3A; _39++) { //#11409
        $k[$j++] = 0; //#11409
    } //#11409
    var _3B = $a(); //#11409
    $k[$j++] = 'ren'; //#11412
    $k[$j++] = 'renlinear'; //#11412
    $k[$j++] = 'sbs'; //#11412
    $k[$j++] = _32; //#11412
    $k[$j++] = 'bhs'; //#11412
    $k[$j++] = _37; //#11412
    $k[$j++] = 'bbs'; //#11412
    $k[$j++] = _3B; //#11412
    if ($_.includetext) { //#11412
        $k[$j++] = 'txt'; //#11411
        $k[$j++] = $_.txt; //#11411
    } //#11411
    $k[$j++] = 'opt'; //#11413
    $k[$j++] = $_.options; //#11413
    var _3F = $d(); //#11413
    $k[$j++] = _3F; //#11416
    if (!$_.dontdraw) { //#11416
        bwipp_renlinear(); //#11416
    } //#11416
    $_ = Object.getPrototypeOf($_); //#11418
    $_ = Object.getPrototypeOf($_); //#11420
} //bwipp_rationalizedCodabar
function bwipp_onecode() {
    $_ = Object.create($_); //#11450
    $_.dontdraw = false; //#11453
    $_.height = 0.15; //#11454
    $k[$j++] = $_; //#11456
    bwipp_processoptions(); //#11456
    $_.options = $k[--$j]; //#11456
    $_.barcode = $k[--$j]; //#11457
    bwipp_loadctx(bwipp_onecode); //#11459
    $_.barlen = $_.barcode.length; //#11461
    $forall($_.barcode, function() { //#11467
        var _4 = $k[--$j]; //#11464
        if ((_4 < 48) || (_4 > 57)) { //#11466
            $k[$j++] = 'bwipp.onecodeBadCharacter#11465'; //#11465
            $k[$j++] = "The data must contain only digits"; //#11465
            bwipp_raiseerror(); //#11465
        } //#11465
    }); //#11465
    if (((($_.barlen != 20) && ($_.barlen != 25)) && ($_.barlen != 29)) && ($_.barlen != 31)) { //#11471
        $k[$j++] = 'bwipp.onecodeInvalidLength#11470'; //#11470
        $k[$j++] = "The data must be 20, 25, 29 or 31 digits"; //#11470
        bwipp_raiseerror(); //#11470
    } //#11470
    $k[$j++] = Infinity; //#11474
    var _B = $eq($geti($_.barcode, 5, 1), "9") ? 14 : 11; //#11477
    $k[$j++] = 2; //#11480
    $k[$j++] = 2; //#11480
    $k[$j++] = 5; //#11480
    $k[$j++] = 5; //#11480
    $k[$j++] = _B; //#11480
    $k[$j++] = _B; //#11480
    $k[$j++] = 20; //#11480
    $k[$j++] = 20; //#11480
    $k[$j++] = 25; //#11480
    $k[$j++] = 25; //#11480
    $k[$j++] = 29; //#11480
    $k[$j++] = 29; //#11480
    $_.txtdict = $d(); //#11481
    $_.txt = $a($_.barlen + 6); //#11482
    $_.spacecnt = 0; //#11483
    for (var _H = 0, _G = $_.barlen - 1; _H <= _G; _H += 1) { //#11491
        $_.i = _H; //#11485
        var _K = $get($_.txtdict, $_.i) !== undefined; //#11486
        if (_K) { //#11489
            $put($_.txt, $_.i + $_.spacecnt, $a([" ", 0, 0, "", 0])); //#11487
            $_.spacecnt = $_.spacecnt + 1; //#11488
        } //#11488
        $put($_.txt, $_.i + $_.spacecnt, $a([$geti($_.barcode, $_.i, 1), 0, 0, "", 0])); //#11490
    } //#11490
    $_.txt = $geti($_.txt, 0, $_.barcode.length + $_.spacecnt); //#11492
    $_.normalize = function() {
        $_.base = $k[--$j]; //#11495
        $_.num = $k[--$j]; //#11496
        for (var _e = $_.num.length - 1; _e >= 1; _e -= 1) { //#11501
            $_.i = _e; //#11498
            var _f = $_.num; //#11499
            var _g = $_.i; //#11499
            $put(_f, _g - 1, $f($get(_f, _g - 1) + (~~($get($_.num, $_.i) / $_.base)))); //#11499
            $put($_.num, $_.i, $get($_.num, $_.i) % $_.base); //#11500
        } //#11500
        for (;;) { //#11507
            if ($lt($get($_.num, 0), $_.base)) { //#11503
                break; //#11503
            } //#11503
            $k[$j++] = Infinity; //#11504
            $k[$j++] = 0; //#11504
            $aload($_.num); //#11504
            $_.num = $a(); //#11504
            $put($_.num, 0, $f($get($_.num, 0) + (~~($get($_.num, 1) / $_.base)))); //#11505
            $put($_.num, 1, $get($_.num, 1) % $_.base); //#11506
        } //#11506
        $k[$j++] = Infinity; //#11509
        $_.i = true; //#11509
        var _17 = $_.num; //#11509
        for (var _18 = 0, _19 = _17.length; _18 < _19; _18++) { //#11509
            var _1A = $get(_17, _18); //#11509
            $k[$j++] = _1A; //#11509
            if ((_1A == 0) && $_.i) { //#11509
                $j--; //#11509
            } else { //#11509
                $_.i = false; //#11509
            } //#11509
        } //#11509
        $_.num = $a(); //#11509
        if ($_.num.length == 0) { //#11510
            $_.num = $a([0]); //#11510
        } //#11510
        $k[$j++] = $_.num; //#11511
    }; //#11511
    $_.bigadd = function() {
        var _1G = $k[--$j]; //#11515
        var _1H = $k[--$j]; //#11515
        $_.offset = Math.abs(_1G.length - _1H.length); //#11516
        if (_1G.length < _1H.length) { //#11517
            var _ = _1G; //#11517
            _1G = _1H; //#11517
            _1H = _; //#11517
        } //#11517
        $_.a = _1G; //#11518
        $_.b = _1H; //#11518
        for (var _1K = 0, _1J = $_.b.length - 1; _1K <= _1J; _1K += 1) { //#11521
            var _1L = $_.a; //#11520
            var _1M = $_.offset; //#11520
            $put(_1L, _1K + _1M, $f($get(_1L, _1K + _1M) + $get($_.b, _1K))); //#11520
        } //#11520
        $k[$j++] = $_.a; //#11522
    }; //#11522
    if (!bwipp_onecode.__11533__) { //#11533
        $_ = Object.create($_); //#11533
        var _1V = new Map([
            [20, $a([0])],
            [25, $a([1])],
            [29, $a([1, 0, 0, 0, 0, 1])],
            [31, $a([1, 0, 0, 0, 1, 0, 0, 0, 0, 1])]
        ]); //#11531
        $_.startvals = _1V; //#11532
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_onecode.$ctx[id] = $_[id]); //#11532
        bwipp_onecode.__11533__ = 1; //#11532
        $_ = Object.getPrototypeOf($_); //#11532
    } //#11532
    $k[$j++] = 'binval'; //#11535
    $k[$j++] = $get($_.startvals, $_.barlen); //#11535
    $k[$j++] = Infinity; //#11535
    var _1c = $geti($_.barcode, 20, $_.barlen - 20); //#11535
    for (var _1d = 0, _1e = _1c.length; _1d < _1e; _1d++) { //#11535
        $k[$j++] = $f($get(_1c, _1d) - 48); //#11535
    } //#11535
    var _1g = $a(); //#11535
    $k[$j++] = _1g; //#11535
    $_.bigadd(); //#11535
    var _1h = $k[--$j]; //#11535
    $_[$k[--$j]] = _1h; //#11535
    $k[$j++] = Infinity; //#11536
    $aload($_.binval); //#11536
    $k[$j++] = $f($get($_.barcode, 0) - 48); //#11536
    $_.binval = $a(); //#11536
    $k[$j++] = Infinity; //#11537
    var _1n = $_.binval; //#11537
    for (var _1o = 0, _1p = _1n.length; _1o < _1p; _1o++) { //#11537
        $k[$j++] = $get(_1n, _1o) * 5; //#11537
    } //#11537
    var _1r = $a(); //#11537
    $k[$j++] = 'binval'; //#11537
    $k[$j++] = _1r; //#11537
    $k[$j++] = $a([$f($get($_.barcode, 1) - 48)]); //#11537
    $_.bigadd(); //#11537
    $k[$j++] = 10; //#11537
    $_.normalize(); //#11537
    var _1v = $k[--$j]; //#11537
    $_[$k[--$j]] = _1v; //#11537
    $k[$j++] = Infinity; //#11538
    $aload($_.binval); //#11538
    var _1z = $geti($_.barcode, 2, 18); //#11538
    for (var _20 = 0, _21 = _1z.length; _20 < _21; _20++) { //#11538
        $k[$j++] = $f($get(_1z, _20) - 48); //#11538
    } //#11538
    $_.binval = $a(); //#11538
    $_.bytes = $a(13); //#11541
    var _25 = $_.binval; //#11542
    $_.bintmp = $arrcpy($a(_25.length), _25); //#11542
    for (var _28 = 12; _28 >= 0; _28 -= 1) { //#11552
        $_.i = _28; //#11544
        for (var _2B = 0, _2A = $_.bintmp.length - 2; _2B <= _2A; _2B += 1) { //#11549
            $_.j = _2B; //#11546
            var _2C = $_.bintmp; //#11547
            var _2D = $_.j; //#11547
            $put(_2C, _2D + 1, $f($get(_2C, _2D + 1) + (($get($_.bintmp, $_.j) % 256) * 10))); //#11547
            $put($_.bintmp, $_.j, ~~($get($_.bintmp, $_.j) / 256)); //#11548
        } //#11548
        $put($_.bytes, $_.i, $get($_.bintmp, $_.bintmp.length - 1) % 256); //#11550
        var _2S = $_.bintmp; //#11551
        var _2T = $_.bintmp; //#11551
        $put(_2S, _2T.length - 1, ~~($get(_2S, _2T.length - 1) / 256)); //#11551
    } //#11551
    $_.fcs = 2047; //#11555
    $_.dat = $get($_.bytes, 0) << 5; //#11556
    for (var _2X = 0, _2Y = 6; _2X < _2Y; _2X++) { //#11565
        if ((($_.fcs ^ $_.dat) & 1024) != 0) { //#11561
            $_.fcs = ($_.fcs << 1) ^ 3893; //#11559
        } else { //#11561
            $_.fcs = $_.fcs << 1; //#11561
        } //#11561
        $_.fcs = $_.fcs & 2047; //#11563
        $_.dat = $_.dat << 1; //#11564
    } //#11564
    for (var _2f = 1; _2f <= 12; _2f += 1) { //#11577
        $_.dat = $get($_.bytes, _2f) << 3; //#11567
        for (var _2i = 0, _2j = 8; _2i < _2j; _2i++) { //#11576
            if ((($_.fcs ^ $_.dat) & 1024) != 0) { //#11572
                $_.fcs = ($_.fcs << 1) ^ 3893; //#11570
            } else { //#11572
                $_.fcs = $_.fcs << 1; //#11572
            } //#11572
            $_.fcs = $_.fcs & 2047; //#11574
            $_.dat = $_.dat << 1; //#11575
        } //#11575
    } //#11575
    $_.codewords = $a(10); //#11580
    for (var _2r = 9; _2r >= 0; _2r -= 1) { //#11591
        $_.i = _2r; //#11582
        var _2t = ($_.i == 9) ? 636 : 1365; //#11583
        $_.b = _2t; //#11583
        for (var _2w = 0, _2v = $_.binval.length - 2; _2w <= _2v; _2w += 1) { //#11588
            $_.j = _2w; //#11585
            var _2x = $_.binval; //#11586
            var _2y = $_.j; //#11586
            $put(_2x, _2y + 1, $f($get(_2x, _2y + 1) + (($get($_.binval, $_.j) % $_.b) * 10))); //#11586
            $put($_.binval, $_.j, ~~($get($_.binval, $_.j) / $_.b)); //#11587
        } //#11587
        $put($_.codewords, $_.i, $get($_.binval, $_.binval.length - 1) % $_.b); //#11589
        var _3G = $_.binval; //#11590
        var _3H = $_.binval; //#11590
        $put(_3G, _3H.length - 1, ~~($get(_3G, _3H.length - 1) / $_.b)); //#11590
    } //#11590
    $put($_.codewords, 9, $get($_.codewords, 9) * 2); //#11594
    if (($_.fcs & 1024) != 0) { //#11597
        $put($_.codewords, 0, $f($get($_.codewords, 0) + 659)); //#11596
    } //#11596
    if (!bwipp_onecode.__11698__) { //#11698
        $_ = Object.create($_); //#11698
        $_.tab513 = $a([31, 7936, 47, 7808, 55, 7552, 59, 7040, 61, 6016, 62, 3968, 79, 7744, 87, 7488, 91, 6976, 93, 5952, 94, 3904, 103, 7360, 107, 6848, 109, 5824, 110, 3776, 115, 6592, 117, 5568, 118, 3520, 121, 5056, 122, 3008, 124, 1984, 143, 7712, 151, 7456, 155, 6944, 157, 5920, 158, 3872, 167, 7328, 171, 6816, 173, 5792, 174, 3744, 179, 6560, 181, 5536, 182, 3488, 185, 5024, 186, 2976, 188, 1952, 199, 7264, 203, 6752, 205, 5728, 206, 3680, 211, 6496, 213, 5472, 214, 3424, 217, 4960, 218, 2912, 220, 1888, 227, 6368, 229, 5344, 230, 3296, 233, 4832, 234, 2784, 236, 1760, 241, 4576, 242, 2528, 244, 1504, 248, 992, 271, 7696, 279, 7440, 283, 6928, 285, 5904, 286, 3856, 295, 7312, 299, 6800, 301, 5776, 302, 3728, 307, 6544, 309, 5520, 310, 3472, 313, 5008, 314, 2960, 316, 1936, 327, 7248, 331, 6736, 333, 5712, 334, 3664, 339, 6480, 341, 5456, 342, 3408, 345, 4944, 346, 2896, 348, 1872, 355, 6352, 357, 5328, 358, 3280, 361, 4816, 362, 2768, 364, 1744, 369, 4560, 370, 2512, 372, 1488, 376, 976, 391, 7216, 395, 6704, 397, 5680, 398, 3632, 403, 6448, 405, 5424, 406, 3376, 409, 4912, 410, 2864, 412, 1840, 419, 6320, 421, 5296, 422, 3248, 425, 4784, 426, 2736, 428, 1712, 433, 4528, 434, 2480, 436, 1456, 440, 944, 451, 6256, 453, 5232, 454, 3184, 457, 4720, 458, 2672, 460, 1648, 465, 4464, 466, 2416, 468, 1392, 472, 880, 481, 4336, 482, 2288, 484, 1264, 488, 752, 527, 7688, 535, 7432, 539, 6920, 541, 5896, 542, 3848, 551, 7304, 555, 6792, 557, 5768, 558, 3720, 563, 6536, 565, 5512, 566, 3464, 569, 5000, 570, 2952, 572, 1928, 583, 7240, 587, 6728, 589, 5704, 590, 3656, 595, 6472, 597, 5448, 598, 3400, 601, 4936, 602, 2888, 604, 1864, 611, 6344, 613, 5320, 614, 3272, 617, 4808, 618, 2760, 620, 1736, 625, 4552, 626, 2504, 628, 1480, 632, 968, 647, 7208, 651, 6696, 653, 5672, 654, 3624, 659, 6440, 661, 5416, 662, 3368, 665, 4904, 666, 2856, 668, 1832, 675, 6312, 677, 5288, 678, 3240, 681, 4776, 682, 2728, 684, 1704, 689, 4520, 690, 2472, 692, 1448, 696, 936, 707, 6248, 709, 5224, 710, 3176, 713, 4712, 714, 2664, 716, 1640, 721, 4456, 722, 2408, 724, 1384, 728, 872, 737, 4328, 738, 2280, 740, 1256, 775, 7192, 779, 6680, 781, 5656, 782, 3608, 787, 6424, 789, 5400, 790, 3352, 793, 4888, 794, 2840, 796, 1816, 803, 6296, 805, 5272, 806, 3224, 809, 4760, 810, 2712, 812, 1688, 817, 4504, 818, 2456, 820, 1432, 824, 920, 835, 6232, 837, 5208, 838, 3160, 841, 4696, 842, 2648, 844, 1624, 849, 4440, 850, 2392, 852, 1368, 865, 4312, 866, 2264, 868, 1240, 899, 6200, 901, 5176, 902, 3128, 905, 4664, 906, 2616, 908, 1592, 913, 4408, 914, 2360, 916, 1336, 929, 4280, 930, 2232, 932, 1208, 961, 4216, 962, 2168, 964, 1144, 1039, 7684, 1047, 7428, 1051, 6916, 1053, 5892, 1054, 3844, 1063, 7300, 1067, 6788, 1069, 5764, 1070, 3716, 1075, 6532, 1077, 5508, 1078, 3460, 1081, 4996, 1082, 2948, 1084, 1924, 1095, 7236, 1099, 6724, 1101, 5700, 1102, 3652, 1107, 6468, 1109, 5444, 1110, 3396, 1113, 4932, 1114, 2884, 1116, 1860, 1123, 6340, 1125, 5316, 1126, 3268, 1129, 4804, 1130, 2756, 1132, 1732, 1137, 4548, 1138, 2500, 1140, 1476, 1159, 7204, 1163, 6692, 1165, 5668, 1166, 3620, 1171, 6436, 1173, 5412, 1174, 3364, 1177, 4900, 1178, 2852, 1180, 1828, 1187, 6308, 1189, 5284, 1190, 3236, 1193, 4772, 1194, 2724, 1196, 1700, 1201, 4516, 1202, 2468, 1204, 1444, 1219, 6244, 1221, 5220, 1222, 3172, 1225, 4708, 1226, 2660, 1228, 1636, 1233, 4452, 1234, 2404, 1236, 1380, 1249, 4324, 1250, 2276, 1287, 7188, 1291, 6676, 1293, 5652, 1294, 3604, 1299, 6420, 1301, 5396, 1302, 3348, 1305, 4884, 1306, 2836, 1308, 1812, 1315, 6292, 1317, 5268, 1318, 3220, 1321, 4756, 1322, 2708, 1324, 1684, 1329, 4500, 1330, 2452, 1332, 1428, 1347, 6228, 1349, 5204, 1350, 3156, 1353, 4692, 1354, 2644, 1356, 1620, 1361, 4436, 1362, 2388, 1377, 4308, 1378, 2260, 1411, 6196, 1413, 5172, 1414, 3124, 1417, 4660, 1418, 2612, 1420, 1588, 1425, 4404, 1426, 2356, 1441, 4276, 1442, 2228, 1473, 4212, 1474, 2164, 1543, 7180, 1547, 6668, 1549, 5644, 1550, 3596, 1555, 6412, 1557, 5388, 1558, 3340, 1561, 4876, 1562, 2828, 1564, 1804, 1571, 6284, 1573, 5260, 1574, 3212, 1577, 4748, 1578, 2700, 1580, 1676, 1585, 4492, 1586, 2444, 1603, 6220, 1605, 5196, 1606, 3148, 1609, 4684, 1610, 2636, 1617, 4428, 1618, 2380, 1633, 4300, 1634, 2252, 1667, 6188, 1669, 5164, 1670, 3116, 1673, 4652, 1674, 2604, 1681, 4396, 1682, 2348, 1697, 4268, 1698, 2220, 1729, 4204, 1730, 2156, 1795, 6172, 1797, 5148, 1798, 3100, 1801, 4636, 1802, 2588, 1809, 4380, 1810, 2332, 1825, 4252, 1826, 2204, 1857, 4188, 1858, 2140, 1921, 4156, 1922, 2108, 2063, 7682, 2071, 7426, 2075, 6914, 2077, 5890, 2078, 3842, 2087, 7298, 2091, 6786, 2093, 5762, 2094, 3714, 2099, 6530, 2101, 5506, 2102, 3458, 2105, 4994, 2106, 2946, 2119, 7234, 2123, 6722, 2125, 5698, 2126, 3650, 2131, 6466, 2133, 5442, 2134, 3394, 2137, 4930, 2138, 2882, 2147, 6338, 2149, 5314, 2150, 3266, 2153, 4802, 2154, 2754, 2161, 4546, 2162, 2498, 2183, 7202, 2187, 6690, 2189, 5666, 2190, 3618, 2195, 6434, 2197, 5410, 2198, 3362, 2201, 4898, 2202, 2850, 2211, 6306, 2213, 5282, 2214, 3234, 2217, 4770, 2218, 2722, 2225, 4514, 2226, 2466, 2243, 6242, 2245, 5218, 2246, 3170, 2249, 4706, 2250, 2658, 2257, 4450, 2258, 2402, 2273, 4322, 2311, 7186, 2315, 6674, 2317, 5650, 2318, 3602, 2323, 6418, 2325, 5394, 2326, 3346, 2329, 4882, 2330, 2834, 2339, 6290, 2341, 5266, 2342, 3218, 2345, 4754, 2346, 2706, 2353, 4498, 2354, 2450, 2371, 6226, 2373, 5202, 2374, 3154, 2377, 4690, 2378, 2642, 2385, 4434, 2401, 4306, 2435, 6194, 2437, 5170, 2438, 3122, 2441, 4658, 2442, 2610, 2449, 4402, 2465, 4274, 2497, 4210, 2567, 7178, 2571, 6666, 2573, 5642, 2574, 3594, 2579, 6410, 2581, 5386, 2582, 3338, 2585, 4874, 2586, 2826, 2595, 6282, 2597, 5258, 2598, 3210, 2601, 4746, 2602, 2698, 2609, 4490, 2627, 6218, 2629, 5194, 2630, 3146, 2633, 4682, 2641, 4426, 2657, 4298, 2691, 6186, 2693, 5162, 2694, 3114, 2697, 4650, 2705, 4394, 2721, 4266, 2753, 4202, 2819, 6170, 2821, 5146, 2822, 3098, 2825, 4634, 2833, 4378, 2849, 4250, 2881, 4186, 2945, 4154, 3079, 7174, 3083, 6662, 3085, 5638, 3086, 3590, 3091, 6406, 3093, 5382, 3094, 3334, 3097, 4870, 3107, 6278, 3109, 5254, 3110, 3206, 3113, 4742, 3121, 4486, 3139, 6214, 3141, 5190, 3145, 4678, 3153, 4422, 3169, 4294, 3203, 6182, 3205, 5158, 3209, 4646, 3217, 4390, 3233, 4262, 3265, 4198, 3331, 6166, 3333, 5142, 3337, 4630, 3345, 4374, 3361, 4246, 3393, 4182, 3457, 4150, 3587, 6158, 3589, 5134, 3593, 4622, 3601, 4366, 3617, 4238, 3649, 4174, 3713, 4142, 3841, 4126, 4111, 7681, 4119, 7425, 4123, 6913, 4125, 5889, 4135, 7297, 4139, 6785, 4141, 5761, 4147, 6529, 4149, 5505, 4153, 4993, 4167, 7233, 4171, 6721, 4173, 5697, 4179, 6465, 4181, 5441, 4185, 4929, 4195, 6337, 4197, 5313, 4201, 4801, 4209, 4545, 4231, 7201, 4235, 6689, 4237, 5665, 4243, 6433, 4245, 5409, 4249, 4897, 4259, 6305, 4261, 5281, 4265, 4769, 4273, 4513, 4291, 6241, 4293, 5217, 4297, 4705, 4305, 4449, 4359, 7185, 4363, 6673, 4365, 5649, 4371, 6417, 4373, 5393, 4377, 4881, 4387, 6289, 4389, 5265, 4393, 4753, 4401, 4497, 4419, 6225, 4421, 5201, 4425, 4689, 4483, 6193, 4485, 5169, 4489, 4657, 4615, 7177, 4619, 6665, 4621, 5641, 4627, 6409, 4629, 5385, 4633, 4873, 4643, 6281, 4645, 5257, 4649, 4745, 4675, 6217, 4677, 5193, 4739, 6185, 4741, 5161, 4867, 6169, 4869, 5145, 5127, 7173, 5131, 6661, 5133, 5637, 5139, 6405, 5141, 5381, 5155, 6277, 5157, 5253, 5187, 6213, 5251, 6181, 5379, 6165, 5635, 6157, 6151, 7171, 6155, 6659, 6163, 6403, 6179, 6275, 6211, 5189, 4681, 4433, 4321, 3142, 2634, 2386, 2274, 1612, 1364, 1252, 856, 744, 496]); //#11688
        $_.tab213 = $a([3, 6144, 5, 5120, 6, 3072, 9, 4608, 10, 2560, 12, 1536, 17, 4352, 18, 2304, 20, 1280, 24, 768, 33, 4224, 34, 2176, 36, 1152, 40, 640, 48, 384, 65, 4160, 66, 2112, 68, 1088, 72, 576, 80, 320, 96, 192, 129, 4128, 130, 2080, 132, 1056, 136, 544, 144, 288, 257, 4112, 258, 2064, 260, 1040, 264, 528, 513, 4104, 514, 2056, 516, 1032, 1025, 4100, 1026, 2052, 2049, 4098, 4097, 2050, 1028, 520, 272, 160]); //#11697
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_onecode.$ctx[id] = $_[id]); //#11697
        bwipp_onecode.__11698__ = 1; //#11697
        $_ = Object.getPrototypeOf($_); //#11697
    } //#11697
    $_.chars = $a(10); //#11700
    for (var _3V = 0; _3V <= 9; _3V += 1) { //#11709
        $_.i = _3V; //#11702
        var _3Y = $get($_.codewords, $_.i); //#11703
        $k[$j++] = _3Y; //#11707
        if (_3Y <= 1286) { //#11706
            var _3b = $get($_.tab513, $k[--$j]); //#11704
            $k[$j++] = _3b; //#11704
        } else { //#11706
            var _3e = $get($_.tab213, $f($k[--$j] - 1287)); //#11706
            $k[$j++] = _3e; //#11706
        } //#11706
        $k[$j++] = $_.chars; //#11708
        $k[$j++] = $_.i; //#11708
        $r(3, -1); //#11708
        var _3h = $k[--$j]; //#11708
        var _3i = $k[--$j]; //#11708
        $put($k[--$j], _3i, _3h); //#11708
    } //#11708
    for (var _3k = 9; _3k >= 0; _3k -= 1) { //#11716
        $_.i = _3k; //#11712
        if (((~~Math.pow(2, $_.i)) & $_.fcs) != 0) { //#11715
            $put($_.chars, $_.i, $get($_.chars, $_.i) ^ 8191); //#11714
        } //#11714
    } //#11714
    if (!bwipp_onecode.__11735__) { //#11735
        $_ = Object.create($_); //#11735
        $_.barmap = $a([7, 2, 4, 3, 1, 10, 0, 0, 9, 12, 2, 8, 5, 5, 6, 11, 8, 9, 3, 1, 0, 1, 5, 12, 2, 5, 1, 8, 4, 4, 9, 11, 6, 3, 8, 10, 3, 9, 7, 6, 5, 11, 1, 4, 8, 5, 2, 12, 9, 10, 0, 2, 7, 1, 6, 7, 3, 6, 4, 9, 0, 3, 8, 6, 6, 4, 2, 7, 1, 1, 9, 9, 7, 10, 5, 2, 4, 0, 3, 8, 6, 2, 0, 4, 8, 11, 1, 0, 9, 8, 3, 12, 2, 6, 7, 7, 5, 1, 4, 10, 1, 12, 6, 9, 7, 3, 8, 0, 5, 8, 9, 7, 4, 6, 2, 10, 3, 4, 0, 5, 8, 4, 5, 7, 7, 11, 1, 9, 6, 0, 9, 6, 0, 6, 4, 8, 2, 1, 3, 2, 5, 9, 8, 12, 4, 11, 6, 1, 9, 5, 7, 4, 3, 3, 1, 2, 0, 7, 2, 0, 1, 3, 4, 1, 6, 10, 3, 5, 8, 7, 9, 4, 2, 11, 5, 6, 0, 8, 7, 12, 4, 2, 8, 1, 5, 10, 3, 0, 9, 3, 0, 9, 6, 5, 2, 4, 7, 8, 1, 7, 5, 0, 4, 5, 2, 3, 0, 10, 6, 12, 9, 2, 3, 11, 1, 6, 8, 8, 7, 9, 5, 4, 0, 11, 1, 5, 2, 2, 9, 1, 4, 12, 8, 3, 6, 6, 7, 0, 3, 7, 4, 7, 7, 5, 0, 12, 1, 11, 2, 9, 9, 0, 6, 8, 5, 3, 3, 10, 8, 2]); //#11734
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_onecode.$ctx[id] = $_[id]); //#11734
        bwipp_onecode.__11735__ = 1; //#11734
        $_ = Object.getPrototypeOf($_); //#11734
    } //#11734
    $_.bbs = $a(65); //#11737
    $_.bhs = $a(65); //#11738
    for (var _3w = 0; _3w <= 64; _3w += 1) { //#11759
        $_.i = _3w; //#11740
        $_.dec = ($get($_.chars, $get($_.barmap, $_.i * 4)) & (~~Math.pow(2, $get($_.barmap, ($_.i * 4) + 1)))) != 0; //#11741
        $_.asc = ($get($_.chars, $get($_.barmap, ($_.i * 4) + 2)) & (~~Math.pow(2, $get($_.barmap, ($_.i * 4) + 3)))) != 0; //#11742
        if ((!$_.dec) && (!$_.asc)) { //#11746
            $put($_.bbs, $_.i, (3 * $_.height) / 8); //#11744
            $put($_.bhs, $_.i, (2 * $_.height) / 8); //#11745
        } //#11745
        if ((!$_.dec) && $_.asc) { //#11750
            $put($_.bbs, $_.i, (3 * $_.height) / 8); //#11748
            $put($_.bhs, $_.i, (5 * $_.height) / 8); //#11749
        } //#11749
        if ($_.dec && (!$_.asc)) { //#11754
            $put($_.bbs, $_.i, (0 * $_.height) / 8); //#11752
            $put($_.bhs, $_.i, (5 * $_.height) / 8); //#11753
        } //#11753
        if ($_.dec && $_.asc) { //#11758
            $put($_.bbs, $_.i, (0 * $_.height) / 8); //#11756
            $put($_.bhs, $_.i, (8 * $_.height) / 8); //#11757
        } //#11757
    } //#11757
    $k[$j++] = Infinity; //#11762
    var _4j = $_.bbs; //#11764
    var _4k = $_.bhs; //#11765
    $k[$j++] = Infinity; //#11766
    for (var _4m = 0, _4n = $_.bhs.length - 1; _4m < _4n; _4m++) { //#11766
        $k[$j++] = 1.44; //#11766
        $k[$j++] = 1.872; //#11766
    } //#11766
    $k[$j++] = 1.44; //#11766
    var _4o = $a(); //#11766
    $k[$j++] = 'ren'; //#11772
    $k[$j++] = 'renlinear'; //#11772
    $k[$j++] = 'bbs'; //#11772
    $k[$j++] = _4j; //#11772
    $k[$j++] = 'bhs'; //#11772
    $k[$j++] = _4k; //#11772
    $k[$j++] = 'sbs'; //#11772
    $k[$j++] = _4o; //#11772
    $k[$j++] = 'txt'; //#11772
    $k[$j++] = $_.txt; //#11772
    $k[$j++] = 'textxalign'; //#11772
    $k[$j++] = "left"; //#11772
    $k[$j++] = 'textfont'; //#11772
    $k[$j++] = "OCR-B"; //#11772
    $k[$j++] = 'textyoffset'; //#11772
    $k[$j++] = 1; //#11772
    $k[$j++] = 'textxoffset'; //#11772
    $k[$j++] = -0.3; //#11772
    $k[$j++] = 'opt'; //#11772
    $k[$j++] = $_.options; //#11772
    var _4r = $d(); //#11772
    $k[$j++] = _4r; //#11775
    if (!$_.dontdraw) { //#11775
        bwipp_renlinear(); //#11775
    } //#11775
    $_ = Object.getPrototypeOf($_); //#11777
    $_ = Object.getPrototypeOf($_); //#11779
} //bwipp_onecode
function bwipp_postnet() {
    $_ = Object.create($_); //#11809
    $_.dontdraw = false; //#11812
    $_.includetext = false; //#11813
    $_.validatecheck = false; //#11814
    $_.includecheckintext = false; //#11815
    $_.textfont = "OCR-B"; //#11816
    $_.textsize = 10; //#11817
    $_.textyoffset = -8; //#11818
    $_.height = 0.125; //#11819
    $k[$j++] = $_; //#11821
    bwipp_processoptions(); //#11821
    $_.options = $k[--$j]; //#11821
    $_.barcode = $k[--$j]; //#11822
    bwipp_loadctx(bwipp_postnet); //#11824
    $k[$j++] = 'barlen'; //#11826
    $k[$j++] = $_.barcode.length; //#11826
    if ($_.validatecheck) { //#11826
        var _4 = $k[--$j]; //#11826
        $k[$j++] = $f(_4 - 1); //#11826
    } //#11826
    var _5 = $k[--$j]; //#11826
    $_[$k[--$j]] = _5; //#11826
    if ((($_.barlen != 5) && ($_.barlen != 9)) && ($_.barlen != 11)) { //#11831
        $k[$j++] = 'bwipp.postnetBadLength#11830'; //#11830
        $k[$j++] = "USPS POSTNET must be 5, 9 or 11 digits excluding check digit"; //#11830
        bwipp_raiseerror(); //#11830
    } //#11830
    $forall($_.barcode, function() { //#11836
        var _B = $k[--$j]; //#11833
        if ((_B < 48) || (_B > 57)) { //#11835
            $k[$j++] = 'bwipp.postnetBadCharacter#11834'; //#11834
            $k[$j++] = "USPS POSTNET must contain only digits"; //#11834
            bwipp_raiseerror(); //#11834
        } //#11834
    }); //#11834
    if (!bwipp_postnet.__11848__) { //#11848
        $_ = Object.create($_); //#11848
        $_.barchars = "0123456789"; //#11840
        $_.encs = $a(["55222", "22255", "22525", "22552", "25225", "25252", "25522", "52225", "52252", "52522", "5", "5"]); //#11847
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_postnet.$ctx[id] = $_[id]); //#11847
        bwipp_postnet.__11848__ = 1; //#11847
        $_ = Object.getPrototypeOf($_); //#11847
    } //#11847
    $_.checksum = 0; //#11850
    for (var _G = 0, _F = $f($_.barlen - 1); _G <= _F; _G += 1) { //#11854
        $_.i = _G; //#11852
        $_.checksum = $f($_.checksum + $f($get($_.barcode, $_.i) - 48)); //#11853
    } //#11853
    $_.checksum = ($f(10 - ($_.checksum % 10))) % 10; //#11855
    if ($_.validatecheck) { //#11861
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#11859
            $k[$j++] = 'bwipp.postnetBadCheckDigit#11858'; //#11858
            $k[$j++] = "Incorrect USPS POSTNET check digit provided"; //#11858
            bwipp_raiseerror(); //#11858
        } //#11858
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#11860
    } //#11860
    $_.bhs = $a($f(($_.barlen * 5) + 7)); //#11863
    $_.txt = $a($f($_.barlen + 1)); //#11864
    $_.enc = $get($_.encs, 10); //#11867
    $_.heights = $a($_.enc.length); //#11868
    for (var _g = 0, _f = $_.enc.length - 1; _g <= _f; _g += 1) { //#11872
        $_.j = _g; //#11870
        $put($_.heights, $_.j, ($cvi($geti($_.enc, $_.j, 1)) * $_.height) / 5); //#11871
    } //#11871
    $puti($_.bhs, 0, $_.heights); //#11873
    for (var _r = 0, _q = $f($_.barlen - 1); _r <= _q; _r += 1) { //#11885
        $_.i = _r; //#11876
        $_.enc = $get($_.encs, $f($get($_.barcode, $_.i) - 48)); //#11877
        $_.heights = $a($_.enc.length); //#11878
        for (var _11 = 0, _10 = $_.enc.length - 1; _11 <= _10; _11 += 1) { //#11882
            $_.j = _11; //#11880
            $put($_.heights, $_.j, ($cvi($geti($_.enc, $_.j, 1)) * $_.height) / 5); //#11881
        } //#11881
        $puti($_.bhs, ($_.i * 5) + 1, $_.heights); //#11883
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), (($_.i * 5) + 1) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#11884
    } //#11884
    $_.enc = $get($_.encs, $_.checksum); //#11888
    $_.heights = $a($_.enc.length); //#11889
    for (var _1S = 0, _1R = $_.enc.length - 1; _1S <= _1R; _1S += 1) { //#11893
        $_.j = _1S; //#11891
        $put($_.heights, $_.j, ($cvi($geti($_.enc, $_.j, 1)) * $_.height) / 5); //#11892
    } //#11892
    $puti($_.bhs, $f(($_.barlen * 5) + 1), $_.heights); //#11894
    if ($_.includecheckintext) { //#11899
        $put($_.txt, $_.barlen, $a([$geti($_.barchars, $_.checksum, 1), ($f(($_.barlen * 5) + 1)) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#11897
    } else { //#11899
        $put($_.txt, $_.barlen, $a([" ", (($f(($_.barlen * 5) + 1)) * 72) / 25, $_.textyoffset, $_.textfont, $_.textsize])); //#11899
    } //#11899
    $_.enc = $get($_.encs, 11); //#11903
    $_.heights = $a($_.enc.length); //#11904
    for (var _20 = 0, _1z = $_.enc.length - 1; _20 <= _1z; _20 += 1) { //#11908
        $_.j = _20; //#11906
        $put($_.heights, $_.j, ($cvi($geti($_.enc, $_.j, 1)) * $_.height) / 5); //#11907
    } //#11907
    $puti($_.bhs, $f(($_.barlen * 5) + 6), $_.heights); //#11909
    $k[$j++] = Infinity; //#11912
    var _2A = $_.bhs; //#11914
    $k[$j++] = Infinity; //#11915
    for (var _2C = 0, _2D = $_.bhs.length; _2C < _2D; _2C++) { //#11915
        $k[$j++] = 0; //#11915
    } //#11915
    var _2E = $a(); //#11915
    $k[$j++] = Infinity; //#11916
    for (var _2G = 0, _2H = $_.bhs.length - 1; _2G < _2H; _2G++) { //#11916
        $k[$j++] = 1.44; //#11916
        $k[$j++] = 1.872; //#11916
    } //#11916
    $k[$j++] = 1.44; //#11916
    var _2I = $a(); //#11916
    $k[$j++] = 'ren'; //#11919
    $k[$j++] = 'renlinear'; //#11919
    $k[$j++] = 'bhs'; //#11919
    $k[$j++] = _2A; //#11919
    $k[$j++] = 'bbs'; //#11919
    $k[$j++] = _2E; //#11919
    $k[$j++] = 'sbs'; //#11919
    $k[$j++] = _2I; //#11919
    if ($_.includetext) { //#11919
        $k[$j++] = 'txt'; //#11918
        $k[$j++] = $_.txt; //#11918
    } //#11918
    $k[$j++] = 'opt'; //#11920
    $k[$j++] = $_.options; //#11920
    var _2M = $d(); //#11920
    $k[$j++] = _2M; //#11923
    if (!$_.dontdraw) { //#11923
        bwipp_renlinear(); //#11923
    } //#11923
    $_ = Object.getPrototypeOf($_); //#11925
    $_ = Object.getPrototypeOf($_); //#11927
} //bwipp_postnet
function bwipp_planet() {
    $_ = Object.create($_); //#11957
    $_.dontdraw = false; //#11960
    $_.includetext = false; //#11961
    $_.validatecheck = false; //#11962
    $_.includecheckintext = false; //#11963
    $_.textfont = "OCR-B"; //#11964
    $_.textsize = 10; //#11965
    $_.textyoffset = -8; //#11966
    $_.height = 0.125; //#11967
    $k[$j++] = $_; //#11969
    bwipp_processoptions(); //#11969
    $_.options = $k[--$j]; //#11969
    $_.barcode = $k[--$j]; //#11970
    bwipp_loadctx(bwipp_planet); //#11972
    $k[$j++] = 'barlen'; //#11974
    $k[$j++] = $_.barcode.length; //#11974
    if ($_.validatecheck) { //#11974
        var _4 = $k[--$j]; //#11974
        $k[$j++] = $f(_4 - 1); //#11974
    } //#11974
    var _5 = $k[--$j]; //#11974
    $_[$k[--$j]] = _5; //#11974
    if (($_.barlen != 11) && ($_.barlen != 13)) { //#11979
        $k[$j++] = 'bwipp.planetBadLength#11978'; //#11978
        $k[$j++] = "USPS PLANET must be 11 or 13 digits excluding check digit"; //#11978
        bwipp_raiseerror(); //#11978
    } //#11978
    $forall($_.barcode, function() { //#11984
        var _A = $k[--$j]; //#11981
        if ((_A < 48) || (_A > 57)) { //#11983
            $k[$j++] = 'bwipp.planetBadCharacter#11982'; //#11982
            $k[$j++] = "USPS PLANET must contain only digits"; //#11982
            bwipp_raiseerror(); //#11982
        } //#11982
    }); //#11982
    if (!bwipp_planet.__11996__) { //#11996
        $_ = Object.create($_); //#11996
        $_.barchars = "0123456789"; //#11988
        $_.encs = $a(["22555", "55522", "55252", "55225", "52552", "52525", "52255", "25552", "25525", "25255", "5", "5"]); //#11995
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_planet.$ctx[id] = $_[id]); //#11995
        bwipp_planet.__11996__ = 1; //#11995
        $_ = Object.getPrototypeOf($_); //#11995
    } //#11995
    $_.checksum = 0; //#11999
    for (var _F = 0, _E = $f($_.barlen - 1); _F <= _E; _F += 1) { //#12003
        $_.i = _F; //#12001
        $_.checksum = $f($_.checksum + $f($get($_.barcode, $_.i) - 48)); //#12002
    } //#12002
    $_.checksum = ($f(10 - ($_.checksum % 10))) % 10; //#12004
    if ($_.validatecheck) { //#12010
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#12008
            $k[$j++] = 'bwipp.planetBadCheckDigit#12007'; //#12007
            $k[$j++] = "Incorrect USPS PLANET check digit provided"; //#12007
            bwipp_raiseerror(); //#12007
        } //#12007
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#12009
    } //#12009
    $_.bhs = $a($f(($_.barlen * 5) + 7)); //#12012
    $_.txt = $a($f($_.barlen + 1)); //#12013
    $_.enc = $get($_.encs, 10); //#12016
    $_.heights = $a($_.enc.length); //#12017
    for (var _f = 0, _e = $_.enc.length - 1; _f <= _e; _f += 1) { //#12021
        $_.j = _f; //#12019
        $put($_.heights, $_.j, ($cvi($geti($_.enc, $_.j, 1)) * $_.height) / 5); //#12020
    } //#12020
    $puti($_.bhs, 0, $_.heights); //#12022
    for (var _q = 0, _p = $f($_.barlen - 1); _q <= _p; _q += 1) { //#12034
        $_.i = _q; //#12025
        $_.enc = $get($_.encs, $f($get($_.barcode, $_.i) - 48)); //#12026
        $_.heights = $a($_.enc.length); //#12027
        for (var _10 = 0, _z = $_.enc.length - 1; _10 <= _z; _10 += 1) { //#12031
            $_.j = _10; //#12029
            $put($_.heights, $_.j, ($cvi($geti($_.enc, $_.j, 1)) * $_.height) / 5); //#12030
        } //#12030
        $puti($_.bhs, ($_.i * 5) + 1, $_.heights); //#12032
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), (($_.i * 5) + 1) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#12033
    } //#12033
    $_.enc = $get($_.encs, $_.checksum); //#12037
    $_.heights = $a($_.enc.length); //#12038
    for (var _1R = 0, _1Q = $_.enc.length - 1; _1R <= _1Q; _1R += 1) { //#12042
        $_.j = _1R; //#12040
        $put($_.heights, $_.j, ($cvi($geti($_.enc, $_.j, 1)) * $_.height) / 5); //#12041
    } //#12041
    $puti($_.bhs, $f(($_.barlen * 5) + 1), $_.heights); //#12043
    if ($_.includecheckintext) { //#12048
        $put($_.txt, $_.barlen, $a([$geti($_.barchars, $_.checksum, 1), ($f(($_.barlen * 5) + 1)) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#12046
    } else { //#12048
        $put($_.txt, $_.barlen, $a([" ", (($f(($_.barlen * 5) + 1)) * 72) / 25, $_.textyoffset, $_.textfont, $_.textsize])); //#12048
    } //#12048
    $_.enc = $get($_.encs, 11); //#12052
    $_.heights = $a($_.enc.length); //#12053
    for (var _1z = 0, _1y = $_.enc.length - 1; _1z <= _1y; _1z += 1) { //#12057
        $_.j = _1z; //#12055
        $put($_.heights, $_.j, ($cvi($geti($_.enc, $_.j, 1)) * $_.height) / 5); //#12056
    } //#12056
    $puti($_.bhs, $f(($_.barlen * 5) + 6), $_.heights); //#12058
    $k[$j++] = Infinity; //#12061
    var _29 = $_.bhs; //#12063
    $k[$j++] = Infinity; //#12064
    for (var _2B = 0, _2C = $_.bhs.length; _2B < _2C; _2B++) { //#12064
        $k[$j++] = 0; //#12064
    } //#12064
    var _2D = $a(); //#12064
    $k[$j++] = Infinity; //#12065
    for (var _2F = 0, _2G = $_.bhs.length - 1; _2F < _2G; _2F++) { //#12065
        $k[$j++] = 1.44; //#12065
        $k[$j++] = 1.872; //#12065
    } //#12065
    $k[$j++] = 1.44; //#12065
    var _2H = $a(); //#12065
    $k[$j++] = 'ren'; //#12068
    $k[$j++] = 'renlinear'; //#12068
    $k[$j++] = 'bhs'; //#12068
    $k[$j++] = _29; //#12068
    $k[$j++] = 'bbs'; //#12068
    $k[$j++] = _2D; //#12068
    $k[$j++] = 'sbs'; //#12068
    $k[$j++] = _2H; //#12068
    if ($_.includetext) { //#12068
        $k[$j++] = 'txt'; //#12067
        $k[$j++] = $_.txt; //#12067
    } //#12067
    $k[$j++] = 'opt'; //#12069
    $k[$j++] = $_.options; //#12069
    var _2L = $d(); //#12069
    $k[$j++] = _2L; //#12072
    if (!$_.dontdraw) { //#12072
        bwipp_renlinear(); //#12072
    } //#12072
    $_ = Object.getPrototypeOf($_); //#12074
    $_ = Object.getPrototypeOf($_); //#12076
} //bwipp_planet
function bwipp_royalmail() {
    $_ = Object.create($_); //#12106
    $_.dontdraw = false; //#12109
    $_.includetext = false; //#12110
    $_.validatecheck = false; //#12111
    $_.includecheckintext = false; //#12112
    $_.textfont = "OCR-B"; //#12113
    $_.textsize = 10; //#12114
    $_.textyoffset = -8; //#12115
    $_.height = 0.175; //#12116
    $k[$j++] = $_; //#12118
    bwipp_processoptions(); //#12118
    $_.options = $k[--$j]; //#12118
    $_.barcode = $k[--$j]; //#12119
    if ($eq($_.barcode, "")) { //#12123
        $k[$j++] = 'bwipp.royalmailEmptyData#12122'; //#12122
        $k[$j++] = "The data must not be empty"; //#12122
        bwipp_raiseerror(); //#12122
    } //#12122
    bwipp_loadctx(bwipp_royalmail); //#12125
    if (!bwipp_royalmail.__12143__) { //#12143
        $_ = Object.create($_); //#12143
        $_.barchars = "ZUVWXY501234B6789AHCDEFGNIJKLMTOPQRS"; //#12129
        $_.charvals = new Map; //#12130
        for (var _3 = 0; _3 <= 35; _3 += 1) { //#12131
            $put($_.charvals, $geti($_.barchars, _3, 1), _3); //#12131
        } //#12131
        $_.encs = $a(["3300", "2211", "2301", "2310", "3201", "3210", "1122", "0033", "0123", "0132", "1023", "1032", "1302", "0213", "0303", "0312", "1203", "1212", "1320", "0231", "0321", "0330", "1221", "1230", "3102", "2013", "2103", "2112", "3003", "3012", "3120", "2031", "2121", "2130", "3021", "3030", "2", "3"]); //#12142
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_royalmail.$ctx[id] = $_[id]); //#12142
        bwipp_royalmail.__12143__ = 1; //#12142
        $_ = Object.getPrototypeOf($_); //#12142
    } //#12142
    for (var _B = 0, _A = $_.barcode.length - 1; _B <= _A; _B += 1) { //#12150
        var _F = $get($_.charvals, $geti($_.barcode, _B, 1)) !== undefined; //#12147
        if (!_F) { //#12149
            $k[$j++] = 'bwipp.royalmailBadCharacter#12148'; //#12148
            $k[$j++] = "RM4SCC must contain only capital letters and digits"; //#12148
            bwipp_raiseerror(); //#12148
        } //#12148
    } //#12148
    $k[$j++] = 'barlen'; //#12152
    $k[$j++] = $_.barcode.length; //#12152
    if ($_.validatecheck) { //#12152
        var _I = $k[--$j]; //#12152
        $k[$j++] = $f(_I - 1); //#12152
    } //#12152
    var _J = $k[--$j]; //#12152
    $_[$k[--$j]] = _J; //#12152
    $_.checksumrow = 0; //#12154
    $_.checksumcol = 0; //#12155
    for (var _N = 0, _M = $f($_.barlen - 1); _N <= _M; _N += 1) { //#12161
        $_.i = _N; //#12157
        $_.indx = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#12158
        $_.checksumrow = $_.checksumrow + (~~($_.indx / 6)); //#12159
        $_.checksumcol = $f($_.checksumcol + ($_.indx % 6)); //#12160
    } //#12160
    $_.checksum = $f((($_.checksumrow % 6) * 6) + ($_.checksumcol % 6)); //#12162
    if ($_.validatecheck) { //#12168
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#12166
            $k[$j++] = 'bwipp.royalmailBadCheckDigit#12165'; //#12165
            $k[$j++] = "Incorrect RM4SCC check digit provided"; //#12165
            bwipp_raiseerror(); //#12165
        } //#12165
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#12167
    } //#12167
    $_.encstr = $s($f(($_.barlen * 4) + 6)); //#12170
    $_.txt = $a($f($_.barlen + 1)); //#12171
    $puti($_.encstr, 0, $get($_.encs, 36)); //#12174
    for (var _s = 0, _r = $f($_.barlen - 1); _s <= _r; _s += 1) { //#12181
        $_.i = _s; //#12177
        $_.indx = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#12178
        $puti($_.encstr, ($_.i * 4) + 1, $get($_.encs, $_.indx)); //#12179
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), (($_.i * 4) + 1) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#12180
    } //#12180
    $puti($_.encstr, $f(($_.barlen * 4) + 1), $get($_.encs, $_.checksum)); //#12184
    if ($_.includecheckintext) { //#12188
        $put($_.txt, $_.barlen, $a([$geti($_.barchars, $_.checksum, 1), ($f(($_.barlen * 4) + 1)) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#12186
    } else { //#12188
        $put($_.txt, $_.barlen, $a([" ", ($f(($_.barlen * 4) + 1)) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#12188
    } //#12188
    $puti($_.encstr, $f(($_.barlen * 4) + 5), $get($_.encs, 37)); //#12192
    $_.bbs = $a($_.encstr.length); //#12194
    $_.bhs = $a($_.encstr.length); //#12195
    for (var _1k = 0, _1j = $_.encstr.length - 1; _1k <= _1j; _1k += 1) { //#12215
        $_.i = _1k; //#12197
        $_.enc = $geti($_.encstr, $_.i, 1); //#12198
        if ($eq($_.enc, "0")) { //#12202
            $put($_.bbs, $_.i, (3 * $_.height) / 8); //#12200
            $put($_.bhs, $_.i, (2 * $_.height) / 8); //#12201
        } //#12201
        if ($eq($_.enc, "1")) { //#12206
            $put($_.bbs, $_.i, (0 * $_.height) / 8); //#12204
            $put($_.bhs, $_.i, (5 * $_.height) / 8); //#12205
        } //#12205
        if ($eq($_.enc, "2")) { //#12210
            $put($_.bbs, $_.i, (3 * $_.height) / 8); //#12208
            $put($_.bhs, $_.i, (5 * $_.height) / 8); //#12209
        } //#12209
        if ($eq($_.enc, "3")) { //#12214
            $put($_.bbs, $_.i, (0 * $_.height) / 8); //#12212
            $put($_.bhs, $_.i, (8 * $_.height) / 8); //#12213
        } //#12213
    } //#12213
    $k[$j++] = Infinity; //#12218
    var _2G = $_.bbs; //#12220
    var _2H = $_.bhs; //#12221
    $k[$j++] = Infinity; //#12222
    for (var _2J = 0, _2K = $_.bhs.length - 1; _2J < _2K; _2J++) { //#12222
        $k[$j++] = 1.44; //#12222
        $k[$j++] = 1.872; //#12222
    } //#12222
    $k[$j++] = 1.44; //#12222
    var _2L = $a(); //#12222
    $k[$j++] = 'ren'; //#12225
    $k[$j++] = 'renlinear'; //#12225
    $k[$j++] = 'bbs'; //#12225
    $k[$j++] = _2G; //#12225
    $k[$j++] = 'bhs'; //#12225
    $k[$j++] = _2H; //#12225
    $k[$j++] = 'sbs'; //#12225
    $k[$j++] = _2L; //#12225
    if ($_.includetext) { //#12225
        $k[$j++] = 'txt'; //#12224
        $k[$j++] = $_.txt; //#12224
    } //#12224
    $k[$j++] = 'opt'; //#12226
    $k[$j++] = $_.options; //#12226
    var _2P = $d(); //#12226
    $k[$j++] = _2P; //#12229
    if (!$_.dontdraw) { //#12229
        bwipp_renlinear(); //#12229
    } //#12229
    $_ = Object.getPrototypeOf($_); //#12231
    $_ = Object.getPrototypeOf($_); //#12233
} //bwipp_royalmail
function bwipp_auspost() {
    $_ = Object.create($_); //#12263
    $_.dontdraw = false; //#12266
    $_.includetext = false; //#12267
    $_.textfont = "OCR-B"; //#12268
    $_.textsize = 10; //#12269
    $_.textyoffset = -8; //#12270
    $_.height = 0.175; //#12271
    $_.custinfoenc = "character"; //#12272
    $k[$j++] = $_; //#12274
    bwipp_processoptions(); //#12274
    $_.options = $k[--$j]; //#12274
    $_.barcode = $k[--$j]; //#12275
    if ($ne($_.custinfoenc, "character") && $ne($_.custinfoenc, "numeric")) { //#12279
        $k[$j++] = 'bwipp.auspostBadCustinfoEncoding#12278'; //#12278
        $k[$j++] = "Customer information encoding must be either character or numeric"; //#12278
        bwipp_raiseerror(); //#12278
    } //#12278
    bwipp_loadctx(bwipp_auspost); //#12281
    if (!bwipp_auspost.__12304__) { //#12304
        $_ = Object.create($_); //#12304
        $_.encs = $a(["000", "001", "002", "010", "011", "012", "020", "021", "022", "100", "101", "102", "110", "111", "112", "120", "121", "122", "200", "201", "202", "210", "211", "212", "220", "221", "222", "300", "301", "302", "310", "311", "312", "320", "321", "322", "023", "030", "031", "032", "033", "103", "113", "123", "130", "131", "132", "133", "203", "213", "223", "230", "231", "232", "233", "303", "313", "323", "330", "331", "332", "333", "003", "013", "00", "01", "02", "10", "11", "12", "20", "21", "22", "30", "13", "3"]); //#12296
        $_.barchars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz #"; //#12299
        var _5 = new Map([
            ["11", 37],
            ["45", 37],
            ["59", 52],
            ["62", 67]
        ]); //#12302
        $_.fcclen = _5; //#12302
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_auspost.$ctx[id] = $_[id]); //#12302
        bwipp_auspost.__12304__ = 1; //#12302
        $_ = Object.getPrototypeOf($_); //#12302
    } //#12302
    $_.barlen = $_.barcode.length; //#12306
    if ($_.barlen < 10) { //#12309
        $k[$j++] = 'bwipp.auspostTooShort#12308'; //#12308
        $k[$j++] = "The data length must be at least 10"; //#12308
        bwipp_raiseerror(); //#12308
    } //#12308
    $_.txt = $a($_.barlen - 2); //#12311
    $k[$j++] = $_.fcclen; //#12313
    if ($_.barlen >= 2) { //#12313
        $k[$j++] = $geti($_.barcode, 0, 2); //#12313
    } else { //#12313
        $k[$j++] = ""; //#12313
    } //#12313
    var _F = $k[--$j]; //#12314
    var _G = $k[--$j]; //#12314
    var _H = $get(_G, _F) !== undefined; //#12314
    $k[$j++] = _G; //#12316
    $k[$j++] = _F; //#12316
    if (!_H) { //#12316
        $j -= 2; //#12315
        $k[$j++] = 'bwipp.auspostBadFCC#12315'; //#12315
        $k[$j++] = "Must begin with an FCC, either 11, 45, 59 or 62"; //#12315
        bwipp_raiseerror(); //#12315
    } //#12315
    var _I = $k[--$j]; //#12317
    $_.encstr = $s($get($k[--$j], _I)); //#12317
    $k[$j++] = true; //#12324
    for (var _M = 0, _N = 1; _M < _N; _M++) { //#12324
        if ($_.barlen < 10) { //#12322
            $j--; //#12322
            $k[$j++] = false; //#12322
            break; //#12322
        } //#12322
        var _Q = $geti($_.barcode, 2, 8); //#12323
        for (var _R = 0, _S = _Q.length; _R < _S; _R++) { //#12323
            var _T = $get(_Q, _R); //#12323
            if ((_T < 48) || (_T > 57)) { //#12323
                $j--; //#12323
                $k[$j++] = false; //#12323
                break; //#12323
            } //#12323
        } //#12323
    } //#12323
    if ($nt($k[--$j])) { //#12327
        $k[$j++] = 'bwipp.auspostIncompleteDPID#12326'; //#12326
        $k[$j++] = "The DPID must be 8 digits"; //#12326
        bwipp_raiseerror(); //#12326
    } //#12326
    var _X = $eq($_.custinfoenc, "numeric") ? 2 : 3; //#12330
    if ((($_.barlen - 10) * _X) > (($_.encstr.length - 22) - 14)) { //#12333
        $k[$j++] = 'bwipp.auspostTooLong#12332'; //#12332
        $k[$j++] = "The message is too long"; //#12332
        bwipp_raiseerror(); //#12332
    } //#12332
    $puti($_.encstr, 0, $get($_.encs, 74)); //#12336
    for (var _c = 0; _c <= 1; _c += 1) { //#12343
        $_.i = _c; //#12340
        $puti($_.encstr, ($_.i * 2) + 2, $get($_.encs, $cvi($geti($_.barcode, $_.i, 1)) + 64)); //#12342
    } //#12342
    for (var _k = 2; _k <= 9; _k += 1) { //#12351
        $_.i = _k; //#12347
        $puti($_.encstr, ($_.i * 2) + 2, $get($_.encs, $cvi($geti($_.barcode, $_.i, 1)) + 64)); //#12349
        $put($_.txt, $_.i - 2, $a([$geti($_.barcode, $_.i, 1), ((($_.i - 2) * 2) + 6) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#12350
    } //#12350
    if ($eq($_.custinfoenc, "numeric")) { //#12379
        for (var _15 = 0, _14 = $_.barlen - 11; _15 <= _14; _15 += 1) { //#12364
            $_.i = _15; //#12356
            var _19 = $get($_.barcode, $_.i + 10); //#12357
            $k[$j++] = $_.encs; //#12360
            $k[$j++] = _19; //#12360
            if ((_19 < 48) || (_19 > 57)) { //#12360
                $k[$j++] = 'bwipp.auspostInvalidCustinfoDigit#12359'; //#12359
                $k[$j++] = "The customer information data contains a non-digit character"; //#12359
                bwipp_raiseerror(); //#12359
            } //#12359
            var _1A = $k[--$j]; //#12361
            $puti($_.encstr, ($_.i * 2) + 22, $get($k[--$j], $f($f(_1A - 48) + 64))); //#12362
            $put($_.txt, $_.i + 8, $a([$geti($_.barcode, $_.i + 10, 1), (($_.i * 2) + 22) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#12363
        } //#12363
        $_.ciflen = ($_.barlen - 10) * 2; //#12365
    } else { //#12379
        for (var _1S = 0, _1R = $_.barlen - 11; _1S <= _1R; _1S += 1) { //#12378
            $_.i = _1S; //#12368
            $search($_.barchars, $geti($_.barcode, $_.i + 10, 1)); //#12369
            if ($nt($k[--$j])) { //#12372
                $j--; //#12371
                $k[$j++] = 'bwipp.auspostInvalidCustinfoCharacter#12371'; //#12371
                $k[$j++] = "The customer information contains an invalid character"; //#12371
                bwipp_raiseerror(); //#12371
            } //#12371
            $_.indx = $k[--$j].length; //#12373
            $j -= 2; //#12374
            $_.enc = $get($_.encs, $_.indx); //#12375
            $puti($_.encstr, ($_.i * 3) + 22, $_.enc); //#12376
            $put($_.txt, $_.i + 8, $a([$geti($_.barcode, $_.i + 10, 1), (($_.i * 3) + 22) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#12377
        } //#12377
        $_.ciflen = ($_.barlen - 10) * 3; //#12379
    } //#12379
    for (var _1t = 22 + $_.ciflen, _1s = $_.encstr.length - 14; _1t <= _1s; _1t += 1) { //#12385
        $puti($_.encstr, _1t, $get($_.encs, 75)); //#12384
    } //#12384
    if (!bwipp_auspost.__12408__) { //#12408
        $_ = Object.create($_); //#12408
        $_.rstable = $a(64 * 64); //#12389
        $k[$j++] = $_.rstable; //#12390
        $k[$j++] = 0; //#12390
        $k[$j++] = Infinity; //#12390
        for (var _1z = 0, _20 = 64; _1z < _20; _1z++) { //#12390
            $k[$j++] = 0; //#12390
        } //#12390
        var _21 = $a(); //#12390
        var _22 = $k[--$j]; //#12390
        $puti($k[--$j], _22, _21); //#12390
        $k[$j++] = $_.rstable; //#12391
        $k[$j++] = 64; //#12391
        $k[$j++] = Infinity; //#12391
        for (var _25 = 0; _25 <= 63; _25 += 1) { //#12391
            $k[$j++] = _25; //#12391
        } //#12391
        var _26 = $a(); //#12391
        var _27 = $k[--$j]; //#12391
        $puti($k[--$j], _27, _26); //#12391
        $_.prev = 1; //#12392
        for (var _29 = 0, _2A = 64; _29 < _2A; _29++) { //#12407
            $_.next = $_.prev << 1; //#12394
            if (($_.next & 64) != 0) { //#12397
                $_.next = $_.next ^ 67; //#12396
            } //#12396
            for (var _2E = 0; _2E <= 63; _2E += 1) { //#12405
                $_.j = _2E; //#12399
                $_.nextcell = function() {
                    $k[$j++] = $_.rstable; //#12400
                    $k[$j++] = (64 * $_.next) + $_.j; //#12400
                }; //#12400
                $_.nextcell(); //#12401
                var _2M = $k[--$j]; //#12401
                $put($k[--$j], _2M, $get($_.rstable, (64 * $_.prev) + $_.j) << 1); //#12401
                $_.nextcell(); //#12402
                var _2O = $k[--$j]; //#12402
                if (($get($k[--$j], _2O) & 64) != 0) { //#12404
                    $_.nextcell(); //#12403
                    $_.nextcell(); //#12403
                    var _2R = $k[--$j]; //#12403
                    var _2T = $get($k[--$j], _2R); //#12403
                    var _2U = $k[--$j]; //#12403
                    $put($k[--$j], _2U, _2T ^ 67); //#12403
                } //#12403
            } //#12403
            $_.prev = $_.next; //#12406
        } //#12406
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_auspost.$ctx[id] = $_[id]); //#12406
        bwipp_auspost.__12408__ = 1; //#12406
        $_ = Object.getPrototypeOf($_); //#12406
    } //#12406
    $_.rscodes = $a((~~(($_.encstr.length - 16) / 3)) + 4); //#12411
    $k[$j++] = $_.rscodes; //#12412
    $k[$j++] = 0; //#12412
    $k[$j++] = Infinity; //#12412
    for (var _2b = 0, _2c = 4; _2b < _2c; _2b++) { //#12412
        $k[$j++] = 0; //#12412
    } //#12412
    var _2d = $a(); //#12412
    var _2e = $k[--$j]; //#12412
    $puti($k[--$j], _2e, _2d); //#12412
    for (var _2i = 2, _2h = $_.encstr.length - 16; _2i <= _2h; _2i += 3) { //#12420
        $_.i = _2i; //#12414
        $put($_.rscodes, ($_.rscodes.length - (~~(($_.i - 2) / 3))) - 1, (($cvi($geti($_.encstr, $_.i, 1)) * 16) + ($cvi($geti($_.encstr, $_.i + 1, 1)) * 4)) + $cvi($geti($_.encstr, $_.i + 2, 1))); //#12419
    } //#12419
    for (var _2w = $_.rscodes.length - 5; _2w >= 0; _2w -= 1) { //#12429
        $_.i = _2w; //#12422
        for (var _2x = 0; _2x <= 4; _2x += 1) { //#12428
            $_.j = _2x; //#12424
            $put($_.rscodes, $_.i + $_.j, $xo($get($_.rscodes, $_.i + $_.j), $get($_.rstable, $f((64 * $get($a([48, 17, 29, 30, 1]), $_.j)) + $get($_.rscodes, $_.i + 4))))); //#12427
        } //#12427
    } //#12427
    $_.checkcode = $strcpy($s(12), "000000000000"); //#12430
    for (var _3F = 0; _3F <= 3; _3F += 1) { //#12435
        $_.i = _3F; //#12432
        $_.enc = $cvrs($s(3), $get($_.rscodes, 3 - $_.i), 4); //#12433
        $puti($_.checkcode, ($_.i * 3) + (3 - $_.enc.length), $_.enc); //#12434
    } //#12434
    $puti($_.encstr, $_.encstr.length - 14, $_.checkcode); //#12438
    $puti($_.encstr, $_.encstr.length - 2, $get($_.encs, 74)); //#12439
    $_.bbs = $a($_.encstr.length); //#12441
    $_.bhs = $a($_.encstr.length); //#12442
    for (var _3c = 0, _3b = $_.encstr.length - 1; _3c <= _3b; _3c += 1) { //#12462
        $_.i = _3c; //#12444
        $_.enc = $geti($_.encstr, $_.i, 1); //#12445
        if ($eq($_.enc, "0")) { //#12449
            $put($_.bbs, $_.i, (0 * $_.height) / 8); //#12447
            $put($_.bhs, $_.i, (8 * $_.height) / 8); //#12448
        } //#12448
        if ($eq($_.enc, "1")) { //#12453
            $put($_.bbs, $_.i, (3 * $_.height) / 8); //#12451
            $put($_.bhs, $_.i, (5 * $_.height) / 8); //#12452
        } //#12452
        if ($eq($_.enc, "2")) { //#12457
            $put($_.bbs, $_.i, (0 * $_.height) / 8); //#12455
            $put($_.bhs, $_.i, (5 * $_.height) / 8); //#12456
        } //#12456
        if ($eq($_.enc, "3")) { //#12461
            $put($_.bbs, $_.i, (3 * $_.height) / 8); //#12459
            $put($_.bhs, $_.i, (2 * $_.height) / 8); //#12460
        } //#12460
    } //#12460
    $k[$j++] = Infinity; //#12465
    var _48 = $_.bbs; //#12467
    var _49 = $_.bhs; //#12468
    $k[$j++] = Infinity; //#12469
    for (var _4B = 0, _4C = $_.bhs.length - 1; _4B < _4C; _4B++) { //#12469
        $k[$j++] = 1.44; //#12469
        $k[$j++] = 1.872; //#12469
    } //#12469
    $k[$j++] = 1.44; //#12469
    var _4D = $a(); //#12469
    $k[$j++] = 'ren'; //#12472
    $k[$j++] = 'renlinear'; //#12472
    $k[$j++] = 'bbs'; //#12472
    $k[$j++] = _48; //#12472
    $k[$j++] = 'bhs'; //#12472
    $k[$j++] = _49; //#12472
    $k[$j++] = 'sbs'; //#12472
    $k[$j++] = _4D; //#12472
    if ($_.includetext) { //#12472
        $k[$j++] = 'txt'; //#12471
        $k[$j++] = $_.txt; //#12471
    } //#12471
    $k[$j++] = 'opt'; //#12473
    $k[$j++] = $_.options; //#12473
    var _4H = $d(); //#12473
    $k[$j++] = _4H; //#12476
    if (!$_.dontdraw) { //#12476
        bwipp_renlinear(); //#12476
    } //#12476
    $_ = Object.getPrototypeOf($_); //#12478
    $_ = Object.getPrototypeOf($_); //#12480
} //bwipp_auspost
function bwipp_kix() {
    $_ = Object.create($_); //#12510
    $_.dontdraw = false; //#12513
    $_.includetext = false; //#12514
    $_.textfont = "OCR-B"; //#12515
    $_.textsize = 10; //#12516
    $_.textyoffset = -8; //#12517
    $_.height = 0.175; //#12518
    $k[$j++] = $_; //#12520
    bwipp_processoptions(); //#12520
    $_.options = $k[--$j]; //#12520
    $_.barcode = $k[--$j]; //#12521
    if ($eq($_.barcode, "")) { //#12525
        $k[$j++] = 'bwipp.kixEmptyData#12524'; //#12524
        $k[$j++] = "The data must not be empty"; //#12524
        bwipp_raiseerror(); //#12524
    } //#12524
    bwipp_loadctx(bwipp_kix); //#12527
    if (!bwipp_kix.__12544__) { //#12544
        $_ = Object.create($_); //#12544
        $_.encs = $a(["0033", "0123", "0132", "1023", "1032", "1122", "0213", "0303", "0312", "1203", "1212", "1302", "0231", "0321", "0330", "1221", "1230", "1320", "2013", "2103", "2112", "3003", "3012", "3102", "2031", "2121", "2130", "3021", "3030", "3120", "2211", "2301", "2310", "3201", "3210", "3300"]); //#12538
        $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"; //#12541
        $_.charvals = new Map; //#12542
        for (var _4 = 0; _4 <= 35; _4 += 1) { //#12543
            $put($_.charvals, $geti($_.barchars, _4, 1), _4); //#12543
        } //#12543
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_kix.$ctx[id] = $_[id]); //#12543
        bwipp_kix.__12544__ = 1; //#12543
        $_ = Object.getPrototypeOf($_); //#12543
    } //#12543
    for (var _B = 0, _A = $_.barcode.length - 1; _B <= _A; _B += 1) { //#12551
        var _F = $get($_.charvals, $geti($_.barcode, _B, 1)) !== undefined; //#12548
        if (!_F) { //#12550
            $k[$j++] = 'bwipp.kixBadCharacter#12549'; //#12549
            $k[$j++] = "KIX must contain only capital letters and digits"; //#12549
            bwipp_raiseerror(); //#12549
        } //#12549
    } //#12549
    $_.barlen = $_.barcode.length; //#12553
    $_.encstr = $s($_.barlen * 4); //#12554
    $_.txt = $a($_.barlen); //#12555
    for (var _N = 0, _M = $_.barlen - 1; _N <= _M; _N += 1) { //#12562
        $_.i = _N; //#12558
        $_.indx = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#12559
        $puti($_.encstr, $_.i * 4, $get($_.encs, $_.indx)); //#12560
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ($_.i * 4) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#12561
    } //#12561
    $_.bbs = $a($_.encstr.length); //#12564
    $_.bhs = $a($_.encstr.length); //#12565
    for (var _o = 0, _n = $_.encstr.length - 1; _o <= _n; _o += 1) { //#12585
        $_.i = _o; //#12567
        $_.enc = $geti($_.encstr, $_.i, 1); //#12568
        if ($eq($_.enc, "0")) { //#12572
            $put($_.bbs, $_.i, (3 * $_.height) / 8); //#12570
            $put($_.bhs, $_.i, (2 * $_.height) / 8); //#12571
        } //#12571
        if ($eq($_.enc, "1")) { //#12576
            $put($_.bbs, $_.i, (0 * $_.height) / 8); //#12574
            $put($_.bhs, $_.i, (5 * $_.height) / 8); //#12575
        } //#12575
        if ($eq($_.enc, "2")) { //#12580
            $put($_.bbs, $_.i, (3 * $_.height) / 8); //#12578
            $put($_.bhs, $_.i, (5 * $_.height) / 8); //#12579
        } //#12579
        if ($eq($_.enc, "3")) { //#12584
            $put($_.bbs, $_.i, (0 * $_.height) / 8); //#12582
            $put($_.bhs, $_.i, (8 * $_.height) / 8); //#12583
        } //#12583
    } //#12583
    $k[$j++] = Infinity; //#12588
    var _1K = $_.bbs; //#12590
    var _1L = $_.bhs; //#12591
    $k[$j++] = Infinity; //#12592
    for (var _1N = 0, _1O = $_.bhs.length - 1; _1N < _1O; _1N++) { //#12592
        $k[$j++] = 1.44; //#12592
        $k[$j++] = 1.872; //#12592
    } //#12592
    $k[$j++] = 1.44; //#12592
    var _1P = $a(); //#12592
    $k[$j++] = 'ren'; //#12595
    $k[$j++] = 'renlinear'; //#12595
    $k[$j++] = 'bbs'; //#12595
    $k[$j++] = _1K; //#12595
    $k[$j++] = 'bhs'; //#12595
    $k[$j++] = _1L; //#12595
    $k[$j++] = 'sbs'; //#12595
    $k[$j++] = _1P; //#12595
    if ($_.includetext) { //#12595
        $k[$j++] = 'txt'; //#12594
        $k[$j++] = $_.txt; //#12594
    } //#12594
    $k[$j++] = 'opt'; //#12596
    $k[$j++] = $_.options; //#12596
    var _1T = $d(); //#12596
    $k[$j++] = _1T; //#12599
    if (!$_.dontdraw) { //#12599
        bwipp_renlinear(); //#12599
    } //#12599
    $_ = Object.getPrototypeOf($_); //#12601
    $_ = Object.getPrototypeOf($_); //#12603
} //bwipp_kix
function bwipp_japanpost() {
    $_ = Object.create($_); //#12633
    $_.dontdraw = false; //#12636
    $_.includetext = false; //#12637
    $_.includecheckintext = false; //#12638
    $_.textfont = "OCR-B"; //#12639
    $_.textsize = 10; //#12640
    $_.textyoffset = -8; //#12641
    $_.height = 0.175; //#12642
    $k[$j++] = $_; //#12644
    bwipp_processoptions(); //#12644
    $_.options = $k[--$j]; //#12644
    $_.barcode = $k[--$j]; //#12645
    if ($eq($_.barcode, "")) { //#12649
        $k[$j++] = 'bwipp.japanpostEmptyData#12648'; //#12648
        $k[$j++] = "The data must not be empty"; //#12648
        bwipp_raiseerror(); //#12648
    } //#12648
    bwipp_loadctx(bwipp_japanpost); //#12651
    $forall($_.barcode, function() { //#12660
        var _4 = $k[--$j]; //#12655
        if (!(((_4 >= 48) && (_4 <= 57)) || (((_4 >= 65) && (_4 <= 90)) || (_4 == 45)))) { //#12659
            $k[$j++] = 'bwipp.japanpostBadCharacter#12658'; //#12658
            $k[$j++] = "Japan Post must contain only digits, capital letters and the dash symbol"; //#12658
            bwipp_raiseerror(); //#12658
        } //#12658
    }); //#12658
    if (!bwipp_japanpost.__12672__) { //#12672
        $_ = Object.create($_); //#12672
        $_.encs = $a(["300", "330", "312", "132", "321", "303", "123", "231", "213", "033", "030", "120", "102", "210", "012", "201", "021", "003", "333", "31", "13"]); //#12668
        $_.barchars = "0123456789-ABCDEFGHIJKLMNOPQRSTUVWXYZ"; //#12671
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_japanpost.$ctx[id] = $_[id]); //#12671
        bwipp_japanpost.__12672__ = 1; //#12671
        $_ = Object.getPrototypeOf($_); //#12671
    } //#12671
    $_.barlen = $_.barcode.length; //#12674
    $_.encstr = $s(((20 + 1) * 3) + 4); //#12676
    $_.digits = $a(20); //#12677
    $_.txt = $a($_.barlen + 1); //#12678
    $puti($_.encstr, 0, $get($_.encs, 19)); //#12681
    $_.checksum = 0; //#12683
    $_.j = 0; //#12684
    $_.i = 0; //#12684
    $k[$j++] = true; //#12719
    for (var _H = 0, _G = $_.barlen - 1; _H <= _G; _H += 1) { //#12719
        $_.i = _H; //#12687
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#12688
        $j--; //#12689
        $_.indx = $k[--$j].length; //#12690
        $j -= 2; //#12691
        if (($_.indx >= 11) && ($_.indx < 37)) { //#12702
            if ($_.j > 18) { //#12693
                $j--; //#12693
                $k[$j++] = false; //#12693
                break; //#12693
            } //#12693
            $_.digit = (~~(($_.indx - 1) / 10)) + 10; //#12697
            $puti($_.encstr, ($_.j * 3) + 2, $get($_.encs, $_.digit)); //#12698
            $_.checksum = $_.checksum + $_.digit; //#12699
            $put($_.digits, $_.j, $_.digit); //#12700
            $_.j = $_.j + 1; //#12701
        } //#12701
        if ($_.j > 19) { //#12703
            $j--; //#12703
            $k[$j++] = false; //#12703
            break; //#12703
        } //#12703
        $_.digit = 0; //#12704
        if ($_.indx == 37) { //#12707
            $_.digit = 14; //#12706
        } //#12706
        if (($_.indx >= 11) && ($_.indx < 37)) { //#12710
            $_.digit = ($_.indx - 1) % 10; //#12709
        } //#12709
        if ($_.indx < 11) { //#12713
            $_.digit = $_.indx; //#12712
        } //#12712
        $puti($_.encstr, ($_.j * 3) + 2, $get($_.encs, $_.digit)); //#12714
        $_.checksum = $_.checksum + $_.digit; //#12715
        $put($_.digits, $_.j, $_.digit); //#12716
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), (($_.j * 3) + 2) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#12717
        $_.j = $_.j + 1; //#12718
    } //#12718
    if ($nt($k[--$j])) { //#12723
        $k[$j++] = 'bwipp.japanpostTooLong#12722'; //#12722
        $k[$j++] = "The input is too long"; //#12722
        bwipp_raiseerror(); //#12722
    } //#12722
    for (var _17 = $_.j, _16 = 20 - 1; _17 <= _16; _17 += 1) { //#12731
        $_.k = _17; //#12727
        $puti($_.encstr, ($_.k * 3) + 2, $get($_.encs, 14)); //#12728
        $_.checksum = $_.checksum + 14; //#12729
        $put($_.digits, $_.k, 14); //#12730
    } //#12730
    $_.checksum = 19 - ($_.checksum % 19); //#12734
    $puti($_.encstr, 2 + (20 * 3), $get($_.encs, $_.checksum)); //#12735
    $puti($_.encstr, 2 + (21 * 3), $get($_.encs, 20)); //#12738
    $_.checkdigit = " "; //#12739
    if ($_.includecheckintext) { //#12742
        $_.checkdigit = $geti($_.barchars, $_.checksum, 1); //#12741
    } //#12741
    $put($_.txt, $_.i + 1, $a([$_.checkdigit, ((20 * 3) + 2) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#12743
    $puti($_.encstr, ((20 + 1) * 3) + 2, $get($_.encs, 20)); //#12746
    $_.bbs = $a((21 * 3) + 4); //#12748
    $_.bhs = $a($_.bbs.length); //#12749
    for (var _1g = 0, _1f = $_.bbs.length - 1; _1g <= _1f; _1g += 1) { //#12773
        $_.i = _1g; //#12751
        $_.enc = $geti($_.encstr, $_.i, 1); //#12752
        $_.bunit = 0; //#12753
        $_.hunit = 0; //#12754
        if ($eq($_.enc, "0")) { //#12758
            $_.bunit = 3; //#12756
            $_.hunit = 2; //#12757
        } //#12757
        if ($eq($_.enc, "1")) { //#12762
            $_.bunit = 0; //#12760
            $_.hunit = 5; //#12761
        } //#12761
        if ($eq($_.enc, "2")) { //#12766
            $_.bunit = 3; //#12764
            $_.hunit = 5; //#12765
        } //#12765
        if ($eq($_.enc, "3")) { //#12770
            $_.bunit = 0; //#12768
            $_.hunit = 8; //#12769
        } //#12769
        $put($_.bbs, $_.i, ($_.bunit * $_.height) / 8); //#12771
        $put($_.bhs, $_.i, ($_.hunit * $_.height) / 8); //#12772
    } //#12772
    $k[$j++] = Infinity; //#12776
    var _1w = $_.bbs; //#12778
    var _1x = $_.bhs; //#12779
    $k[$j++] = Infinity; //#12780
    for (var _1z = 0, _20 = $_.bhs.length - 1; _1z < _20; _1z++) { //#12780
        $k[$j++] = 1.44; //#12780
        $k[$j++] = 1.872; //#12780
    } //#12780
    $k[$j++] = 1.44; //#12780
    var _21 = $a(); //#12780
    $k[$j++] = 'ren'; //#12783
    $k[$j++] = 'renlinear'; //#12783
    $k[$j++] = 'bbs'; //#12783
    $k[$j++] = _1w; //#12783
    $k[$j++] = 'bhs'; //#12783
    $k[$j++] = _1x; //#12783
    $k[$j++] = 'sbs'; //#12783
    $k[$j++] = _21; //#12783
    if ($_.includetext) { //#12783
        $k[$j++] = 'txt'; //#12782
        $k[$j++] = $_.txt; //#12782
    } //#12782
    $k[$j++] = 'opt'; //#12784
    $k[$j++] = $_.options; //#12784
    var _25 = $d(); //#12784
    $k[$j++] = _25; //#12787
    if (!$_.dontdraw) { //#12787
        bwipp_renlinear(); //#12787
    } //#12787
    $_ = Object.getPrototypeOf($_); //#12789
    $_ = Object.getPrototypeOf($_); //#12791
} //bwipp_japanpost
function bwipp_msi() {
    $_ = Object.create($_); //#12821
    $_.dontdraw = false; //#12824
    $_.includecheck = false; //#12825
    $_.includetext = false; //#12826
    $_.includecheckintext = false; //#12827
    $_.checktype = "unset"; //#12828
    $_.badmod11 = false; //#12829
    $_.textfont = "OCR-B"; //#12830
    $_.textsize = 10; //#12831
    $_.textyoffset = -8; //#12832
    $_.height = 1; //#12833
    $k[$j++] = $_; //#12835
    bwipp_processoptions(); //#12835
    $_.options = $k[--$j]; //#12835
    $_.barcode = $k[--$j]; //#12836
    if ($ne($_.checktype, "unset") && (!$_.includecheck)) { //#12840
        $k[$j++] = 'bwipp.msiCheckTypeWithoutCheck#12839'; //#12839
        $k[$j++] = "checktype requires includecheck"; //#12839
        bwipp_raiseerror(); //#12839
    } //#12839
    if ($_.badmod11 && ((($ne($_.checktype, "mod11") && $ne($_.checktype, "ncrmod11")) && $ne($_.checktype, "mod1110")) && $ne($_.checktype, "ncrmod1110"))) { //#12844
        $k[$j++] = 'bwipp.msiBadMod11Mismatch#12843'; //#12843
        $k[$j++] = "badmod11 requires checktype with mod11"; //#12843
        bwipp_raiseerror(); //#12843
    } //#12843
    if ($eq($_.checktype, "unset")) { //#12846
        $_.checktype = "mod10"; //#12846
    } //#12846
    bwipp_loadctx(bwipp_msi); //#12848
    $forall($_.barcode, function() { //#12855
        var _B = $k[--$j]; //#12852
        if ((_B < 48) || (_B > 57)) { //#12854
            $k[$j++] = 'bwipp.msiBadCharacter#12853'; //#12853
            $k[$j++] = "MSI must contain only digits"; //#12853
            bwipp_raiseerror(); //#12853
        } //#12853
    }); //#12853
    if (!bwipp_msi.__12867__) { //#12867
        $_ = Object.create($_); //#12867
        $_.encs = $a(["12121212", "12121221", "12122112", "12122121", "12211212", "12211221", "12212112", "12212121", "21121212", "21121221", "21", "121"]); //#12863
        $_.barchars = "0123456789"; //#12866
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_msi.$ctx[id] = $_[id]); //#12866
        bwipp_msi.__12867__ = 1; //#12866
        $_ = Object.getPrototypeOf($_); //#12866
    } //#12866
    $_.barlen = $_.barcode.length; //#12869
    $_.txtlen = $_.barlen; //#12870
    $_.mod10 = function() {
        $_.code = $k[--$j]; //#12873
        $k[$j++] = 0; //#12874
        $k[$j++] = 0; //#12874
        $forall($_.code, function() { //#12874
            var _I = $k[--$j]; //#12874
            var _J = $k[--$j]; //#12874
            var _K = $k[--$j]; //#12874
            $k[$j++] = $f($f(_I - 48) + (_J * 10)); //#12874
            $k[$j++] = _K; //#12874
        }); //#12874
        $j--; //#12874
        var _L = $k[--$j]; //#12874
        $k[$j++] = _L * 2; //#12875
        $k[$j++] = 0; //#12875
        for (;;) { //#12875
            var _M = $k[--$j]; //#12875
            var _N = $k[--$j]; //#12875
            var _O = ~~(_N / 10); //#12875
            $k[$j++] = $f(_M + (_N % 10)); //#12875
            $k[$j++] = _O; //#12875
            if (_O == 0) { //#12875
                $j--; //#12875
                break; //#12875
            } //#12875
            var _P = $k[--$j]; //#12875
            var _Q = $k[--$j]; //#12875
            $k[$j++] = _P; //#12875
            $k[$j++] = _Q; //#12875
        } //#12875
        $k[$j++] = 0; //#12876
        $k[$j++] = 0; //#12876
        $forall($_.code, function() { //#12876
            var _S = $k[--$j]; //#12876
            var _T = $k[--$j]; //#12876
            var _U = $k[--$j]; //#12876
            $k[$j++] = $f(_T + $f(_S - 48)); //#12876
            $k[$j++] = _U; //#12876
        }); //#12876
        var _V = $k[--$j]; //#12876
        var _W = $k[--$j]; //#12876
        $k[$j++] = _V; //#12876
        $k[$j++] = _W; //#12876
        $j--; //#12876
        var _X = $k[--$j]; //#12876
        var _a = $s($_.code.length + 1); //#12878
        $puti(_a, 0, $_.code); //#12878
        $put(_a, $_.code.length, $f((($f(10 - ($f($k[--$j] + _X) % 10))) % 10) + 48)); //#12878
        $k[$j++] = _a; //#12878
    }; //#12878
    $_.mod11 = function() {
        $_.code = $k[--$j]; //#12882
        $k[$j++] = $_.code.length - 1; //#12883
        $forall($_.code, function() { //#12883
            var _g = $k[--$j]; //#12883
            var _h = $k[--$j]; //#12883
            $k[$j++] = $f(_g - 48); //#12883
            $k[$j++] = $f((_h % 6) + 2); //#12883
            $k[$j++] = $f(_h - 1); //#12883
        }); //#12883
        $j--; //#12883
        $k[$j++] = 0; //#12884
        for (var _j = 0, _k = $_.code.length; _j < _k; _j++) { //#12884
            $r(3, 1); //#12884
            var _l = $k[--$j]; //#12884
            var _m = $k[--$j]; //#12884
            var _n = $k[--$j]; //#12884
            $k[$j++] = $f(_n + (_m * _l)); //#12884
        } //#12884
        var _p = ($f(11 - ($k[--$j] % 11))) % 11; //#12886
        $k[$j++] = _p; //#12894
        if (_p == 10) { //#12893
            if ($_.badmod11) { //#12890
                $j--; //#12888
                var _s = $s($_.code.length + 2); //#12888
                $puti(_s, 0, $_.code); //#12888
                $puti(_s, $_.code.length, "10"); //#12888
                $k[$j++] = _s; //#12888
            } else { //#12890
                $j--; //#12890
                $k[$j++] = 'bwipp.msiBadMod11NotSpecified#12890'; //#12890
                $k[$j++] = "mod11 check digit is 10 but badmod11 not specified"; //#12890
                bwipp_raiseerror(); //#12890
            } //#12890
        } else { //#12893
            var _w = $s($_.code.length + 1); //#12893
            $puti(_w, 0, $_.code); //#12893
            $k[$j++] = _w; //#12893
            $k[$j++] = _w; //#12893
            $k[$j++] = $_.code.length; //#12893
            $r(4, -1); //#12893
            var _z = $k[--$j]; //#12893
            var _10 = $k[--$j]; //#12893
            $put($k[--$j], _10, $f(_z + 48)); //#12893
        } //#12893
    }; //#12893
    $_.ncrmod11 = function() {
        $_.code = $k[--$j]; //#12898
        $k[$j++] = $_.code.length - 1; //#12899
        $forall($_.code, function() { //#12899
            var _15 = $k[--$j]; //#12899
            var _16 = $k[--$j]; //#12899
            $k[$j++] = $f(_15 - 48); //#12899
            $k[$j++] = $f((_16 % 8) + 2); //#12899
            $k[$j++] = $f(_16 - 1); //#12899
        }); //#12899
        $j--; //#12899
        $k[$j++] = 0; //#12900
        for (var _18 = 0, _19 = $_.code.length; _18 < _19; _18++) { //#12900
            $r(3, 1); //#12900
            var _1A = $k[--$j]; //#12900
            var _1B = $k[--$j]; //#12900
            var _1C = $k[--$j]; //#12900
            $k[$j++] = $f(_1C + (_1B * _1A)); //#12900
        } //#12900
        var _1E = ($f(11 - ($k[--$j] % 11))) % 11; //#12902
        $k[$j++] = _1E; //#12910
        if (_1E == 10) { //#12909
            if ($_.badmod11) { //#12906
                $j--; //#12904
                var _1H = $s($_.code.length + 2); //#12904
                $puti(_1H, 0, $_.code); //#12904
                $puti(_1H, $_.code.length, "10"); //#12904
                $k[$j++] = _1H; //#12904
            } else { //#12906
                $j--; //#12906
                $k[$j++] = 'bwipp.msiBadMod11NotSpecified#12906'; //#12906
                $k[$j++] = "mod11 check digit is 10 but badmod11 not specified"; //#12906
                bwipp_raiseerror(); //#12906
            } //#12906
        } else { //#12909
            var _1L = $s($_.code.length + 1); //#12909
            $puti(_1L, 0, $_.code); //#12909
            $k[$j++] = _1L; //#12909
            $k[$j++] = _1L; //#12909
            $k[$j++] = $_.code.length; //#12909
            $r(4, -1); //#12909
            var _1O = $k[--$j]; //#12909
            var _1P = $k[--$j]; //#12909
            $put($k[--$j], _1P, $f(_1O + 48)); //#12909
        } //#12909
    }; //#12909
    if (!bwipp_msi.__12922__) { //#12922
        $_ = Object.create($_); //#12922
        var _1R = new Map([
            ["mod10", function() {
                $_.mod10(); //#12915
            }],
            ["mod1010", function() {
                $_.mod10(); //#12916
                $_.mod10(); //#12916
            }],
            ["mod11", function() {
                $_.mod11(); //#12917
            }],
            ["ncrmod11", function() {
                $_.ncrmod11(); //#12918
            }],
            ["mod1110", function() {
                $_.mod11(); //#12919
                $_.mod10(); //#12919
            }],
            ["ncrmod1110", function() {
                $_.ncrmod11(); //#12920
                $_.mod10(); //#12920
            }]
        ]); //#12920
        $_.checkfunc = _1R; //#12921
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_msi.$ctx[id] = $_[id]); //#12921
        bwipp_msi.__12922__ = 1; //#12921
        $_ = Object.getPrototypeOf($_); //#12921
    } //#12921
    if ($_.includecheck) { //#12932
        var _1U = $_.checkfunc; //#12926
        var _1V = $_.checktype; //#12926
        var _1W = $get(_1U, _1V) !== undefined; //#12926
        $k[$j++] = _1U; //#12928
        $k[$j++] = _1V; //#12928
        if (!_1W) { //#12928
            $j -= 2; //#12927
            $k[$j++] = 'bwipp.msiBadCharacter#12927'; //#12927
            $k[$j++] = "MSI checktype must be mod10, mod1010, mod11, ncrmod11, mod1110 or ncrmod1110"; //#12927
            bwipp_raiseerror(); //#12927
        } //#12927
        var _1X = $k[--$j]; //#12929
        var _1Z = $get($k[--$j], _1X); //#12929
        $k[$j++] = $_.barcode; //#12929
        if (_1Z() === true) {
            return true;
        } //#12929
        $_.barcode = $k[--$j]; //#12929
        $_.barlen = $_.barcode.length; //#12930
        if ($_.includecheckintext) { //#12931
            $_.txtlen = $_.barlen; //#12931
        } //#12931
    } //#12931
    $_.sbs = $s(($_.barlen * 8) + 5); //#12934
    $_.txt = $a($_.barlen); //#12935
    $puti($_.sbs, 0, $get($_.encs, 10)); //#12938
    for (var _1o = 0, _1n = $_.barlen - 1; _1o <= _1n; _1o += 1) { //#12950
        $_.i = _1o; //#12941
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#12943
        $j--; //#12944
        $_.indx = $k[--$j].length; //#12945
        $j -= 2; //#12946
        $_.enc = $get($_.encs, $_.indx); //#12947
        $puti($_.sbs, ($_.i * 8) + 2, $_.enc); //#12948
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ($_.i * 12) + 3, $_.textyoffset, $_.textfont, $_.textsize])); //#12949
    } //#12949
    $puti($_.sbs, ($_.barlen * 8) + 2, $get($_.encs, 11)); //#12953
    $k[$j++] = Infinity; //#12956
    $k[$j++] = Infinity; //#12958
    var _2E = $_.sbs; //#12958
    for (var _2F = 0, _2G = _2E.length; _2F < _2G; _2F++) { //#12958
        $k[$j++] = $get(_2E, _2F) - 48; //#12958
    } //#12958
    var _2I = $a(); //#12958
    $k[$j++] = Infinity; //#12959
    for (var _2K = 0, _2L = ~~(($_.sbs.length + 1) / 2); _2K < _2L; _2K++) { //#12959
        $k[$j++] = $_.height; //#12959
    } //#12959
    var _2N = $a(); //#12959
    $k[$j++] = Infinity; //#12960
    for (var _2P = 0, _2Q = ~~(($_.sbs.length + 1) / 2); _2P < _2Q; _2P++) { //#12960
        $k[$j++] = 0; //#12960
    } //#12960
    var _2R = $a(); //#12960
    $k[$j++] = 'ren'; //#12963
    $k[$j++] = 'renlinear'; //#12963
    $k[$j++] = 'sbs'; //#12963
    $k[$j++] = _2I; //#12963
    $k[$j++] = 'bhs'; //#12963
    $k[$j++] = _2N; //#12963
    $k[$j++] = 'bbs'; //#12963
    $k[$j++] = _2R; //#12963
    if ($_.includetext) { //#12963
        $k[$j++] = 'txt'; //#12962
        $k[$j++] = $geti($_.txt, 0, $_.txtlen); //#12962
    } //#12962
    $k[$j++] = 'opt'; //#12964
    $k[$j++] = $_.options; //#12964
    var _2X = $d(); //#12964
    $k[$j++] = _2X; //#12967
    if (!$_.dontdraw) { //#12967
        bwipp_renlinear(); //#12967
    } //#12967
    $_ = Object.getPrototypeOf($_); //#12969
    $_ = Object.getPrototypeOf($_); //#12971
} //bwipp_msi
function bwipp_plessey() {
    $_ = Object.create($_); //#13001
    $_.dontdraw = false; //#13004
    $_.includetext = false; //#13005
    $_.validatecheck = false; //#13006
    $_.includecheckintext = false; //#13007
    $_.unidirectional = false; //#13008
    $_.textfont = "OCR-B"; //#13009
    $_.textsize = 10; //#13010
    $_.textyoffset = -8; //#13011
    $_.height = 1; //#13012
    $k[$j++] = $_; //#13014
    bwipp_processoptions(); //#13014
    $_.options = $k[--$j]; //#13014
    $_.barcode = $k[--$j]; //#13015
    if ($eq($_.barcode, "")) { //#13019
        $k[$j++] = 'bwipp.plesseyEmptyData#13018'; //#13018
        $k[$j++] = "The data must not be empty"; //#13018
        bwipp_raiseerror(); //#13018
    } //#13018
    bwipp_loadctx(bwipp_plessey); //#13021
    if (!bwipp_plessey.__13037__) { //#13037
        $_ = Object.create($_); //#13037
        $_.barchars = "0123456789ABCDEF"; //#13025
        $_.charvals = new Map; //#13026
        for (var _3 = 0; _3 <= 15; _3 += 1) { //#13027
            $put($_.charvals, $geti($_.barchars, _3, 1), _3); //#13027
        } //#13027
        $_.encs = $a(["14141414", "32141414", "14321414", "32321414", "14143214", "32143214", "14323214", "32323214", "14141432", "32141432", "14321432", "32321432", "14143232", "32143232", "14323232", "32323232", "32321432", "541412323", "323"]); //#13036
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_plessey.$ctx[id] = $_[id]); //#13036
        bwipp_plessey.__13037__ = 1; //#13036
        $_ = Object.getPrototypeOf($_); //#13036
    } //#13036
    for (var _B = 0, _A = $_.barcode.length - 1; _B <= _A; _B += 1) { //#13044
        var _F = $get($_.charvals, $geti($_.barcode, _B, 1)) !== undefined; //#13041
        if (!_F) { //#13043
            $k[$j++] = 'bwipp.plesseyBadCharacter#13042'; //#13042
            $k[$j++] = "Plessey must contain only digits and letters A B C D E F"; //#13042
            bwipp_raiseerror(); //#13042
        } //#13042
    } //#13042
    $k[$j++] = 'barlen'; //#13046
    $k[$j++] = $_.barcode.length; //#13046
    if ($_.validatecheck) { //#13046
        var _I = $k[--$j]; //#13046
        $k[$j++] = $f(_I - 2); //#13046
    } //#13046
    var _J = $k[--$j]; //#13046
    $_[$k[--$j]] = _J; //#13046
    $_.checkbits = $a($f(($_.barlen * 4) + 8)); //#13049
    $puti($_.checkbits, $_.barlen * 4, $a([0, 0, 0, 0, 0, 0, 0, 0])); //#13050
    for (var _S = 0, _R = $f($_.barlen - 1); _S <= _R; _S += 1) { //#13060
        $_.i = _S; //#13052
        $_.indx = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#13053
        $puti($_.checkbits, $_.i * 4, $a([$_.indx & 1, ($_.indx >>> 1) & 1, ($_.indx >>> 2) & 1, $_.indx >>> 3])); //#13059
    } //#13059
    $_.checksalt = $a([1, 1, 1, 1, 0, 1, 0, 0, 1]); //#13061
    for (var _i = 0, _h = $f(($_.barlen * 4) - 1); _i <= _h; _i += 1) { //#13070
        $_.i = _i; //#13063
        if ($get($_.checkbits, $_.i) == 1) { //#13069
            for (var _m = 0; _m <= 8; _m += 1) { //#13068
                $_.j = _m; //#13066
                $put($_.checkbits, $_.i + $_.j, $xo($get($_.checkbits, $_.i + $_.j), $get($_.checksalt, $_.j))); //#13067
            } //#13067
        } //#13067
    } //#13067
    $_.checkval = 0; //#13071
    for (var _x = 0; _x <= 7; _x += 1) { //#13075
        $_.i = _x; //#13073
        $_.checkval = $f($_.checkval + ((~~Math.pow(2, $_.i)) * $get($_.checkbits, $f(($_.barlen * 4) + $_.i)))); //#13074
    } //#13074
    $_.checksum1 = $_.checkval & 15; //#13076
    $_.checksum2 = $_.checkval >>> 4; //#13077
    if ($_.validatecheck) { //#13084
        if (($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum1)) || ($get($_.barcode, $f($_.barlen + 1)) != $get($_.barchars, $_.checksum2))) { //#13082
            $k[$j++] = 'bwipp.plesseyBadCheckDigits#13081'; //#13081
            $k[$j++] = "Incorrect Plessey check digits provided"; //#13081
            bwipp_raiseerror(); //#13081
        } //#13081
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#13083
    } //#13083
    var _1O = $_.unidirectional ? 27 : 33; //#13086
    $_.sbs = $s($f(($_.barlen * 8) + _1O)); //#13086
    $_.txt = $a($f($_.barlen + 2)); //#13087
    $puti($_.sbs, 0, $get($_.encs, 16)); //#13090
    for (var _1X = 0, _1W = $f($_.barlen - 1); _1X <= _1W; _1X += 1) { //#13097
        $_.i = _1X; //#13093
        $_.indx = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#13094
        $puti($_.sbs, ($_.i * 8) + 8, $get($_.encs, $_.indx)); //#13095
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ($_.i * 20) + 20, $_.textyoffset, $_.textfont, $_.textsize])); //#13096
    } //#13096
    $puti($_.sbs, $f(($_.barlen * 8) + 8), $get($_.encs, $_.checksum1)); //#13100
    $puti($_.sbs, $f(($_.barlen * 8) + 16), $get($_.encs, $_.checksum2)); //#13101
    if ($_.includecheckintext) { //#13107
        $put($_.txt, $_.barlen, $a([$geti($_.barchars, $_.checksum1, 1), $f(($_.barlen * 20) + 20), $_.textyoffset, $_.textfont, $_.textsize])); //#13103
        $put($_.txt, $f($_.barlen + 1), $a([$geti($_.barchars, $_.checksum2, 1), $f(($f($_.barlen + 1) * 20) + 20), $_.textyoffset, $_.textfont, $_.textsize])); //#13104
    } else { //#13107
        $put($_.txt, $_.barlen, $a([" ", $f(($_.barlen * 20) + 20), $_.textyoffset, $_.textfont, $_.textsize])); //#13106
        $put($_.txt, $f($_.barlen + 1), $a([" ", $f(($f($_.barlen + 1) * 20) + 20), $_.textyoffset, $_.textfont, $_.textsize])); //#13107
    } //#13107
    var _2f = $_.unidirectional ? 18 : 17; //#13111
    $puti($_.sbs, $f(($_.barlen * 8) + 24), $get($_.encs, _2f)); //#13111
    $k[$j++] = Infinity; //#13114
    $k[$j++] = Infinity; //#13116
    var _2h = $_.sbs; //#13116
    for (var _2i = 0, _2j = _2h.length; _2i < _2j; _2i++) { //#13116
        $k[$j++] = $get(_2h, _2i) - 48; //#13116
    } //#13116
    var _2l = $a(); //#13116
    $k[$j++] = Infinity; //#13117
    for (var _2n = 0, _2o = ~~(($_.sbs.length + 1) / 2); _2n < _2o; _2n++) { //#13117
        $k[$j++] = $_.height; //#13117
    } //#13117
    var _2q = $a(); //#13117
    $k[$j++] = Infinity; //#13118
    for (var _2s = 0, _2t = ~~(($_.sbs.length + 1) / 2); _2s < _2t; _2s++) { //#13118
        $k[$j++] = 0; //#13118
    } //#13118
    var _2u = $a(); //#13118
    $k[$j++] = 'ren'; //#13121
    $k[$j++] = 'renlinear'; //#13121
    $k[$j++] = 'sbs'; //#13121
    $k[$j++] = _2l; //#13121
    $k[$j++] = 'bhs'; //#13121
    $k[$j++] = _2q; //#13121
    $k[$j++] = 'bbs'; //#13121
    $k[$j++] = _2u; //#13121
    if ($_.includetext) { //#13121
        $k[$j++] = 'txt'; //#13120
        $k[$j++] = $_.txt; //#13120
    } //#13120
    $k[$j++] = 'opt'; //#13122
    $k[$j++] = $_.options; //#13122
    var _2y = $d(); //#13122
    $k[$j++] = _2y; //#13125
    if (!$_.dontdraw) { //#13125
        bwipp_renlinear(); //#13125
    } //#13125
    $_ = Object.getPrototypeOf($_); //#13127
    $_ = Object.getPrototypeOf($_); //#13129
} //bwipp_plessey
function bwipp_telepen() {
    $_ = Object.create($_); //#13160
    $_.numeric = false; //#13163
    $_.dontdraw = false; //#13164
    $_.includetext = false; //#13165
    $_.textfont = "OCR-B"; //#13166
    $_.textsize = 10; //#13167
    $_.textyoffset = -8; //#13168
    $_.height = 1; //#13169
    $_.parse = false; //#13170
    $k[$j++] = $_; //#13172
    bwipp_processoptions(); //#13172
    $_.options = $k[--$j]; //#13172
    $_.barcode = $k[--$j]; //#13173
    bwipp_loadctx(bwipp_telepen); //#13175
    var _3 = new Map([
        ["parse", $_.parse],
        ["parseonly", true],
        ["parsefnc", false]
    ]); //#13181
    $_.fncvals = _3; //#13182
    $k[$j++] = 'barcode'; //#13183
    $k[$j++] = $_.barcode; //#13183
    $k[$j++] = $_.fncvals; //#13183
    bwipp_parseinput(); //#13183
    var _6 = $k[--$j]; //#13183
    $_[$k[--$j]] = _6; //#13183
    $_.barlen = $_.barcode.length; //#13184
    delete $_.options["parse"]; //#13185
    if ($_.numeric && (($_.barlen % 2) != 0)) { //#13189
        $k[$j++] = 'bwipp.telepenNumericOddLength#13188'; //#13188
        $k[$j++] = "Telepen Numeric must have an even length"; //#13188
        bwipp_raiseerror(); //#13188
    } //#13188
    if (!bwipp_telepen.__13227__) { //#13227
        $_ = Object.create($_); //#13227
        $_.encs = $a(["31313131", "1131313111", "33313111", "1111313131", "3111313111", "11333131", "13133131", "111111313111", "31333111", "1131113131", "33113131", "1111333111", "3111113131", "1113133111", "1311133111", "111111113131", "3131113111", "11313331", "333331", "111131113111", "31113331", "1133113111", "1313113111", "1111113331", "31131331", "113111113111", "3311113111", "1111131331", "311111113111", "1113111331", "1311111331", "11111111113111", "31313311", "1131311131", "33311131", "1111313311", "3111311131", "11333311", "13133311", "111111311131", "31331131", "1131113311", "33113311", "1111331131", "3111113311", "1113131131", "1311131131", "111111113311", "3131111131", "1131131311", "33131311", "111131111131", "3111131311", "1133111131", "1313111131", "111111131311", "3113111311", "113111111131", "3311111131", "111113111311", "311111111131", "111311111311", "131111111311", "11111111111131", "3131311111", "11313133", "333133", "111131311111", "31113133", "1133311111", "1313311111", "1111113133", "313333", "113111311111", "3311311111", "11113333", "311111311111", "11131333", "13111333", "11111111311111", "31311133", "1131331111", "33331111", "1111311133", "3111331111", "11331133", "13131133", "111111331111", "3113131111", "1131111133", "33111133", "111113131111", "3111111133", "111311131111", "131111131111", "111111111133", "31311313", "113131111111", "3331111111", "1111311313", "311131111111", "11331313", "13131313", "11111131111111", "3133111111", "1131111313", "33111313", "111133111111", "3111111313", "111313111111", "131113111111", "111111111313", "313111111111", "1131131113", "33131113", "11113111111111", "3111131113", "113311111111", "131311111111", "111111131113", "3113111113", "11311111111111", "331111111111", "111113111113", "31111111111111", "111311111113", "131111111113", "1111111111111111"]); //#13226
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_telepen.$ctx[id] = $_[id]); //#13226
        bwipp_telepen.__13227__ = 1; //#13226
        $_ = Object.getPrototypeOf($_); //#13226
    } //#13226
    $_.sbs = $s(($_.barlen * 16) + 48); //#13229
    $_.txt = $a($_.barlen); //#13230
    $_.enc = $get($_.encs, 95); //#13233
    $puti($_.sbs, 0, $_.enc); //#13234
    $_.l = $_.enc.length; //#13235
    $_.checksum = 0; //#13237
    $_.i = 0; //#13238
    $_.j = 0; //#13238
    for (;;) { //#13281
        if ($_.i == $_.barlen) { //#13240
            break; //#13240
        } //#13240
        if ($_.numeric) { //#13274
            if ($get($_.barcode, $_.i) > 16) { //#13262
                $_.np = $geti($_.barcode, $_.i, 2); //#13243
                var _X = $get($_.np, 0); //#13244
                var _Z = $get($_.np, 1); //#13245
                if (((_X < 48) || (_X > 57)) || (((_Z < 48) || (_Z > 57)) && (!(_Z == 88)))) { //#13251
                    $k[$j++] = -1; //#13247
                } else { //#13251
                    var _e = $f($get($_.np, 1) - 48); //#13250
                    $k[$j++] = $f($get($_.np, 0) - 48); //#13250
                    $k[$j++] = _e; //#13250
                    if (_e != 40) { //#13250
                        var _f = $k[--$j]; //#13250
                        var _g = $k[--$j]; //#13250
                        $k[$j++] = $f(($f(_f + (_g * 10))) + 10); //#13250
                    } else { //#13250
                        $j--; //#13250
                    } //#13250
                    var _h = $k[--$j]; //#13251
                    $k[$j++] = $f(_h + 17); //#13251
                } //#13251
                var _i = $k[--$j]; //#13253
                $k[$j++] = _i; //#13255
                if (_i == -1) { //#13255
                    $k[$j++] = 'bwipp.telepenInvalidNumericCharacter#13254'; //#13254
                    $k[$j++] = "Telepen Numeric may contain only digits, or X in even positions"; //#13254
                    bwipp_raiseerror(); //#13254
                } //#13254
                $_.indx = $k[--$j]; //#13256
                $put($_.txt, $_.j, $a([$_.np, ($_.j * 16) + 16, $_.textyoffset, $_.textfont, $_.textsize])); //#13257
                $_.i = $_.i + 2; //#13258
            } else { //#13262
                $_.indx = $get($_.barcode, $_.i); //#13260
                $put($_.txt, $_.j, $a([" ", ($_.j * 16) + 16, $_.textyoffset, $_.textfont, $_.textsize])); //#13261
                $_.i = $_.i + 1; //#13262
            } //#13262
        } else { //#13274
            $_.indx = $get($_.barcode, $_.i); //#13265
            if ($_.indx > 127) { //#13268
                $k[$j++] = 'bwipp.telepenInvalidAlphaCharacter#13267'; //#13267
                $k[$j++] = "Telepen Alpha characters must have ordinal values 0 to 127"; //#13267
                bwipp_raiseerror(); //#13267
            } //#13267
            if (($_.indx >= 32) && ($_.indx <= 126)) { //#13272
                $put($_.txt, $_.j, $a([$geti($_.barcode, $_.i, 1), ($_.j * 16) + 16, $_.textyoffset, $_.textfont, $_.textsize])); //#13270
            } else { //#13272
                $put($_.txt, $_.j, $a([" ", ($_.j * 16) + 16, $_.textyoffset, $_.textfont, $_.textsize])); //#13272
            } //#13272
            $_.i = $_.i + 1; //#13274
        } //#13274
        $_.checksum = $f($_.checksum + $_.indx); //#13276
        $_.enc = $get($_.encs, $_.indx); //#13277
        $puti($_.sbs, $_.l, $_.enc); //#13278
        $_.l = $_.l + $_.enc.length; //#13279
        $_.j = $_.j + 1; //#13280
    } //#13280
    $_.checksum = ($f(127 - ($_.checksum % 127))) % 127; //#13284
    $_.enc = $get($_.encs, $_.checksum); //#13285
    $puti($_.sbs, $_.l, $_.enc); //#13286
    $_.l = $_.l + $_.enc.length; //#13287
    $_.enc = $get($_.encs, 122); //#13290
    $puti($_.sbs, $_.l, $_.enc); //#13291
    $_.l = $_.l + $_.enc.length; //#13292
    $_.sbs = $geti($_.sbs, 0, $_.l); //#13295
    $_.txt = $geti($_.txt, 0, $_.j); //#13296
    $k[$j++] = Infinity; //#13299
    $k[$j++] = Infinity; //#13301
    var _1z = $_.sbs; //#13301
    for (var _20 = 0, _21 = _1z.length; _20 < _21; _20++) { //#13301
        $k[$j++] = $f($get(_1z, _20) - 48); //#13301
    } //#13301
    var _23 = $a(); //#13301
    $k[$j++] = Infinity; //#13302
    for (var _25 = 0, _26 = ~~(($_.sbs.length + 1) / 2); _25 < _26; _25++) { //#13302
        $k[$j++] = $_.height; //#13302
    } //#13302
    var _28 = $a(); //#13302
    $k[$j++] = Infinity; //#13303
    for (var _2A = 0, _2B = ~~(($_.sbs.length + 1) / 2); _2A < _2B; _2A++) { //#13303
        $k[$j++] = 0; //#13303
    } //#13303
    var _2C = $a(); //#13303
    $k[$j++] = 'ren'; //#13306
    $k[$j++] = 'renlinear'; //#13306
    $k[$j++] = 'sbs'; //#13306
    $k[$j++] = _23; //#13306
    $k[$j++] = 'bhs'; //#13306
    $k[$j++] = _28; //#13306
    $k[$j++] = 'bbs'; //#13306
    $k[$j++] = _2C; //#13306
    if ($_.includetext) { //#13306
        $k[$j++] = 'txt'; //#13305
        $k[$j++] = $_.txt; //#13305
    } //#13305
    $k[$j++] = 'opt'; //#13307
    $k[$j++] = $_.options; //#13307
    var _2G = $d(); //#13307
    $k[$j++] = _2G; //#13310
    if (!$_.dontdraw) { //#13310
        bwipp_renlinear(); //#13310
    } //#13310
    $_ = Object.getPrototypeOf($_); //#13312
    $_ = Object.getPrototypeOf($_); //#13314
} //bwipp_telepen
function bwipp_telepennumeric() {
    $_ = Object.create($_); //#13343
    $_.dontdraw = false; //#13346
    $k[$j++] = $_; //#13348
    bwipp_processoptions(); //#13348
    $_.options = $k[--$j]; //#13348
    $_.barcode = $k[--$j]; //#13349
    $put($_.options, "dontdraw", true); //#13352
    $put($_.options, "numeric", true); //#13353
    $k[$j++] = 'args'; //#13355
    $k[$j++] = $_.barcode; //#13355
    $k[$j++] = $_.options; //#13355
    bwipp_telepen(); //#13355
    var _6 = $k[--$j]; //#13355
    $_[$k[--$j]] = _6; //#13355
    $put($_.args, "opt", $_.options); //#13357
    $k[$j++] = $_.args; //#13360
    if (!$_.dontdraw) { //#13360
        bwipp_renlinear(); //#13360
    } //#13360
    $_ = Object.getPrototypeOf($_); //#13362
} //bwipp_telepennumeric
function bwipp_posicode() {
    $_ = Object.create($_); //#13393
    $_.dontdraw = false; //#13396
    $_.includetext = false; //#13397
    $_.textfont = "OCR-B"; //#13398
    $_.textsize = 10; //#13399
    $_.textxoffset = 0; //#13400
    $_.textyoffset = -8; //#13401
    $_.height = 1; //#13402
    $_.encoding = "auto"; //#13403
    $_.version = "a"; //#13404
    $_.checkoffset = 0; //#13405
    $_.raw = false; //#13406
    $_.parse = false; //#13407
    $_.parsefnc = false; //#13408
    $k[$j++] = $_; //#13410
    bwipp_processoptions(); //#13410
    $_.options = $k[--$j]; //#13410
    var _1 = $k[--$j]; //#13411
    $_.barcode = _1; //#13411
    bwipp_loadctx(bwipp_posicode); //#13413
    if (!bwipp_posicode.__13456__) { //#13456
        $_ = Object.create($_); //#13456
        $_.la0 = -1; //#13417
        $_.la1 = -2; //#13417
        $_.la2 = -3; //#13417
        $_.sf0 = -4; //#13418
        $_.sf1 = -5; //#13418
        $_.sf2 = -6; //#13418
        $_.fn1 = -7; //#13419
        $_.fn2 = -8; //#13419
        $_.fn3 = -9; //#13419
        $_.fn4 = -10; //#13419
        $_.charmapsnormal = $a([$a(["0", "^", "'"]), $a(["1", ";", 27]), $a(["2", "<", 28]), $a(["3", "=", 29]), $a(["4", ">", 30]), $a(["5", "?", 31]), $a(["6", "@", "!"]), $a(["7", "[", "\""]), $a(["8", 92, "#"]), $a(["9", "]", "&"]), $a(["A", "a", 1]), $a(["B", "b", 2]), $a(["C", "c", 3]), $a(["D", "d", 4]), $a(["E", "e", 5]), $a(["F", "f", 6]), $a(["G", "g", 7]), $a(["H", "h", 8]), $a(["I", "i", 9]), $a(["J", "j", 10]), $a(["K", "k", 11]), $a(["L", "l", 12]), $a(["M", "m", 13]), $a(["N", "n", 14]), $a(["O", "o", 15]), $a(["P", "p", 16]), $a(["Q", "q", 17]), $a(["R", "r", 18]), $a(["S", "s", 19]), $a(["T", "t", 20]), $a(["U", "u", 21]), $a(["V", "v", 22]), $a(["W", "w", 23]), $a(["X", "x", 24]), $a(["Y", "y", 25]), $a(["Z", "z", 26]), $a(["-", "_", 40]), $a([".", "`", 41]), $a([" ", 127, 0]), $a(["$", "{", "*"]), $a(["/", "|", ","]), $a(["+", "}", ":"]), $a(["%", "~", $_.fn1]), $a([$_.la1, $_.la0, $_.fn2]), $a([$_.sf1, $_.sf0, $_.fn3]), $a([$_.sf2, $_.sf2, $_.fn4])]); //#13440
        var _13 = $a(["6", -98, -98]); //#13444
        $_.chapmapslimited = $a([$a(["0", -98, -98]), $a(["1", -98, -98]), $a(["2", -98, -98]), $a(["3", -98, -98]), $a(["4", -98, -98]), $a(["5", -98, -98]), _13, $a(["7", -98, -98]), $a(["8", -98, -98]), $a(["9", -98, -98]), $a(["A", -98, -98]), $a(["B", -98, -98]), $a(["C", -98, -98]), $a(["D", -98, -98]), $a(["E", -98, -98]), $a(["F", -98, -98]), $a(["G", -98, -98]), $a(["H", -98, -98]), $a(["I", -98, -98]), $a(["J", -98, -98]), $a(["K", -98, -98]), $a(["L", -98, -98]), $a(["M", -98, -98]), $a(["N", -98, -98]), $a(["O", -98, -98]), $a(["P", -98, -98]), $a(["Q", -98, -98]), $a(["R", -98, -98]), $a(["S", -98, -98]), $a(["T", -98, -98]), $a(["U", -98, -98]), $a(["V", -98, -98]), $a(["W", -98, -98]), $a(["X", -98, -98]), $a(["Y", -98, -98]), $a(["Z", -98, -98]), $a(["-", -98, -98]), $a([".", -98, -98])]); //#13455
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_posicode.$ctx[id] = $_[id]); //#13455
        bwipp_posicode.__13456__ = 1; //#13455
        $_ = Object.getPrototypeOf($_); //#13455
    } //#13455
    if ((($ne($_.version, "a") && $ne($_.version, "b")) && $ne($_.version, "limiteda")) && $ne($_.version, "limitedb")) { //#13460
        $k[$j++] = 'bwipp.posicodeInvalidVersion#13459'; //#13459
        $k[$j++] = "The version must be either a, b, limiteda or limitedb"; //#13459
        bwipp_raiseerror(); //#13459
    } //#13459
    $k[$j++] = 'charmaps'; //#13462
    if ($eq($_.version, "a") || $eq($_.version, "b")) { //#13462
        $k[$j++] = $_.charmapsnormal; //#13462
    } else { //#13462
        $k[$j++] = $_.chapmapslimited; //#13462
    } //#13462
    var _1j = $k[--$j]; //#13462
    $_[$k[--$j]] = _1j; //#13462
    var _1l = $_.charmaps; //#13466
    var _1m = $_.charmaps; //#13466
    var _1n = $_.charmaps; //#13466
    $_.charvals = $a([new Map, new Map, new Map]); //#13467
    for (var _1r = 0, _1q = $_.charmaps.length - 1; _1r <= _1q; _1r += 1) { //#13476
        $_.i = _1r; //#13469
        $_.encs = $get($_.charmaps, $_.i); //#13470
        for (var _1v = 0; _1v <= 2; _1v += 1) { //#13475
            $_.j = _1v; //#13472
            var _1y = $get($_.encs, $_.j); //#13473
            $k[$j++] = _1y; //#13473
            if ($eq($type(_1y), 'stringtype')) { //#13473
                var _21 = $get($k[--$j], 0); //#13473
                $k[$j++] = _21; //#13473
            } //#13473
            $put($get($_.charvals, $_.j), $k[--$j], $_.i); //#13474
        } //#13474
    } //#13474
    $_.set0 = $get($_.charvals, 0); //#13477
    $_.set1 = $get($_.charvals, 1); //#13478
    $_.set2 = $get($_.charvals, 2); //#13479
    if ($eq($_.version, "limiteda") || $eq($_.version, "limitedb")) { //#13488
        for (var _2H = 0, _2G = $_.barcode.length - 1; _2H <= _2G; _2H += 1) { //#13487
            var _2M = $get($_.set0, $get($geti($_.barcode, _2H, 1), 0)) !== undefined; //#13484
            if (!_2M) { //#13486
                $k[$j++] = 'bwipp.posicodeBadCharacter#13485'; //#13485
                $k[$j++] = "Posicode limited must contain only digits, capital letters, and the symbols - and ."; //#13485
                bwipp_raiseerror(); //#13485
            } //#13485
        } //#13485
    } //#13485
    if ($_.raw) { //#13490
        $_.encoding = "raw"; //#13490
    } //#13490
    if ($eq($_.encoding, "raw")) { //#13504
        $_.cws = $a($_.barcode.length); //#13493
        $_.i = 0; //#13494
        $_.j = 0; //#13494
        for (;;) { //#13501
            if ($_.i == $_.barcode.length) { //#13496
                break; //#13496
            } //#13496
            $_.cw = $cvi($geti($_.barcode, $_.i + 1, 3)); //#13497
            $put($_.cws, $_.j, $_.cw); //#13498
            $_.i = $_.i + 4; //#13499
            $_.j = $_.j + 1; //#13500
        } //#13500
        $_.cws = $geti($_.cws, 0, $_.j); //#13502
        $_.text = ""; //#13503
    } //#13503
    if ($eq($_.encoding, "auto")) { //#13619
        var _2k = new Map([
            ["parse", $_.parse],
            ["parsefnc", $_.parsefnc],
            ["FNC1", $_.fn1],
            ["FNC2", $_.fn2],
            ["FNC3", $_.fn3]
        ]); //#13514
        $_.fncvals = _2k; //#13516
        $k[$j++] = 'msg'; //#13517
        $k[$j++] = $_.barcode; //#13517
        $k[$j++] = $_.fncvals; //#13517
        bwipp_parseinput(); //#13517
        var _2n = $k[--$j]; //#13517
        $_[$k[--$j]] = _2n; //#13517
        $_.msglen = $_.msg.length; //#13518
        $_.text = $s($_.msglen); //#13520
        for (var _2u = 0, _2t = $_.msglen - 1; _2u <= _2t; _2u += 1) { //#13524
            $_.i = _2u; //#13522
            var _2z = $get($_.msg, $_.i); //#13523
            $k[$j++] = $_.text; //#13523
            $k[$j++] = $_.i; //#13523
            $k[$j++] = _2z; //#13523
            if (_2z < 0) { //#13523
                $j--; //#13523
                $k[$j++] = 32; //#13523
            } //#13523
            var _30 = $k[--$j]; //#13523
            var _31 = $k[--$j]; //#13523
            $put($k[--$j], _31, _30); //#13523
        } //#13523
        $k[$j++] = Infinity; //#13527
        for (var _34 = 0, _35 = $_.msglen; _34 < _35; _34++) { //#13527
            $k[$j++] = 0; //#13527
        } //#13527
        $k[$j++] = 0; //#13527
        $_.numSA = $a(); //#13527
        $k[$j++] = Infinity; //#13528
        for (var _38 = 0, _39 = $_.msglen; _38 < _39; _38++) { //#13528
            $k[$j++] = 0; //#13528
        } //#13528
        $k[$j++] = 0; //#13528
        $_.numEA = $a(); //#13528
        for (var _3C = $_.msglen - 1; _3C >= 0; _3C -= 1) { //#13538
            $_.i = _3C; //#13530
            if ($get($_.msg, $_.i) >= 0) { //#13537
                if ($get($_.msg, $_.i) >= 128) { //#13535
                    $put($_.numEA, $_.i, $f($get($_.numEA, $_.i + 1) + 1)); //#13533
                } else { //#13535
                    $put($_.numSA, $_.i, $f($get($_.numSA, $_.i + 1) + 1)); //#13535
                } //#13535
            } //#13535
        } //#13535
        $_.ea = false; //#13541
        $_.msgtmp = $a([]); //#13541
        for (var _3W = 0, _3V = $_.msglen - 1; _3W <= _3V; _3W += 1) { //#13556
            $_.i = _3W; //#13543
            $_.c = $get($_.msg, $_.i); //#13544
            if ((!$xo($_.ea, $_.c < 128)) && ($_.c >= 0)) { //#13554
                if ($_.ea) { //#13546
                    $k[$j++] = $_.numSA; //#13546
                } else { //#13546
                    $k[$j++] = $_.numEA; //#13546
                } //#13546
                var _3i = $get($k[--$j], $_.i); //#13546
                var _3l = ($f(_3i + $_.i) == $_.msglen) ? 3 : 5; //#13547
                if (_3i < _3l) { //#13552
                    $k[$j++] = Infinity; //#13549
                    $aload($_.msgtmp); //#13549
                    $k[$j++] = $_.fn4; //#13549
                    $_.msgtmp = $a(); //#13549
                } else { //#13552
                    $k[$j++] = Infinity; //#13551
                    $aload($_.msgtmp); //#13551
                    $k[$j++] = $_.fn4; //#13551
                    $k[$j++] = $_.fn4; //#13551
                    $_.msgtmp = $a(); //#13551
                    $_.ea = !$_.ea; //#13552
                } //#13552
            } //#13552
            $k[$j++] = Infinity; //#13555
            $aload($_.msgtmp); //#13555
            if ($_.c >= 0) { //#13555
                $k[$j++] = $_.c & 127; //#13555
            } else { //#13555
                $k[$j++] = $_.c; //#13555
            } //#13555
            $_.msgtmp = $a(); //#13555
        } //#13555
        $_.msg = $_.msgtmp; //#13557
        $_.msglen = $_.msg.length; //#13558
        $_.enc = function() {
            var _41 = $k[--$j]; //#13562
            $put($_.cws, $_.j, $get(_41, $k[--$j])); //#13562
            $_.j = $_.j + 1; //#13563
        }; //#13563
        $_.cws = $a($_.msglen * 2); //#13566
        $_.i = 0; //#13567
        $_.j = 0; //#13567
        $_.cset = "set0"; //#13567
        for (;;) { //#13617
            if ($_.i == $_.msglen) { //#13569
                break; //#13569
            } //#13569
            for (;;) { //#13615
                $_.char1 = $get($_.msg, $_.i); //#13574
                $k[$j++] = 'char2'; //#13575
                if (($_.i + 1) < $_.msglen) { //#13575
                    $k[$j++] = $get($_.msg, $_.i + 1); //#13575
                } else { //#13575
                    $k[$j++] = -99; //#13575
                } //#13575
                var _4J = $k[--$j]; //#13575
                $_[$k[--$j]] = _4J; //#13575
                var _4O = $get($_[$_.cset], $_.char1) !== undefined; //#13578
                if (_4O) { //#13582
                    $k[$j++] = $_.char1; //#13579
                    $k[$j++] = $_[$_.cset]; //#13579
                    $_.enc(); //#13579
                    $_.i = $_.i + 1; //#13580
                    break; //#13581
                } //#13581
                var _4V = $get($_.set2, $_.char1) !== undefined; //#13585
                if (_4V) { //#13590
                    $k[$j++] = $_.sf2; //#13586
                    $k[$j++] = $_[$_.cset]; //#13586
                    $_.enc(); //#13586
                    $k[$j++] = $_.char1; //#13587
                    $k[$j++] = $_.set2; //#13587
                    $_.enc(); //#13587
                    $_.i = $_.i + 1; //#13588
                    break; //#13589
                } //#13589
                var _4f = $get($_[$_.cset], $_.char2) !== undefined; //#13593
                if (!_4f) { //#13611
                    if ($eq($_.cset, "set0")) { //#13599
                        $k[$j++] = $_.la1; //#13595
                        $k[$j++] = $_[$_.cset]; //#13595
                        $_.enc(); //#13595
                        $_.cset = "set1"; //#13596
                    } else { //#13599
                        $k[$j++] = $_.la0; //#13598
                        $k[$j++] = $_[$_.cset]; //#13598
                        $_.enc(); //#13598
                        $_.cset = "set0"; //#13599
                    } //#13599
                    break; //#13601
                } else { //#13611
                    if ($eq($_.cset, "set0")) { //#13608
                        $k[$j++] = $_.sf1; //#13604
                        $k[$j++] = $_[$_.cset]; //#13604
                        $_.enc(); //#13604
                        $k[$j++] = $_.char1; //#13605
                        $k[$j++] = $_.set1; //#13605
                        $_.enc(); //#13605
                    } else { //#13608
                        $k[$j++] = $_.sf0; //#13607
                        $k[$j++] = $_[$_.cset]; //#13607
                        $_.enc(); //#13607
                        $k[$j++] = $_.char1; //#13608
                        $k[$j++] = $_.set0; //#13608
                        $_.enc(); //#13608
                    } //#13608
                    $_.i = $_.i + 1; //#13610
                    break; //#13611
                } //#13611
                break; //#13614
            } //#13614
        } //#13614
        $_.cws = $geti($_.cws, 0, $_.j); //#13618
    } //#13618
    if (!bwipp_posicode.__13669__) { //#13669
        $_ = Object.create($_); //#13669
        var _56 = new Map([
            ["a", $a(["141112", "131212", "121312", "111412", "131113", "121213", "111313", "121114", "111214", "111115", "181111", "171211", "161311", "151411", "141511", "131611", "121711", "111811", "171112", "161212", "151312", "141412", "131512", "121612", "111712", "161113", "151213", "141313", "131413", "121513", "111613", "151114", "141214", "131314", "121414", "111514", "141115", "131215", "121315", "111415", "131116", "121216", "111316", "121117", "111217", "111118", "1<111112", "111111111;1"])],
            ["b", $a(["151213", "141313", "131413", "121513", "141214", "131314", "121414", "131215", "121315", "121216", "191212", "181312", "171412", "161512", "151612", "141712", "131812", "121912", "181213", "171313", "161413", "151513", "141613", "131713", "121813", "171214", "161314", "151414", "141514", "131614", "121714", "161215", "151315", "141415", "131515", "121615", "151216", "141316", "131416", "121516", "141217", "131317", "121417", "131218", "121318", "121219", "1<121312", "121212121<1"])],
            ["limiteda", $a(["111411", "111312", "111213", "111114", "121311", "121212", "121113", "141111", "131211", "131112", "171111", "161211", "151311", "141411", "131511", "121611", "111711", "161112", "151212", "141312", "131412", "121512", "111612", "151113", "141213", "131313", "121413", "111513", "141114", "131214", "121314", "111414", "131115", "121215", "111315", "121116", "111216", "111117", "151111", "1"])],
            ["limitedb", $a(["121512", "121413", "121314", "121215", "131412", "131313", "131214", "151212", "141312", "141213", "181212", "171312", "161412", "151512", "141612", "131712", "121812", "171213", "161313", "151413", "141513", "131613", "121713", "161214", "151314", "141414", "131514", "121614", "151215", "141315", "131415", "121515", "141216", "131316", "121416", "131217", "121317", "121218", "141212", "1"])]
        ]); //#13666
        $_.encmaps = _56; //#13668
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_posicode.$ctx[id] = $_[id]); //#13668
        bwipp_posicode.__13669__ = 1; //#13668
        $_ = Object.getPrototypeOf($_); //#13668
    } //#13668
    $_.encs = $get($_.encmaps, $_.version); //#13670
    if (!bwipp_posicode.__13680__) { //#13680
        $_ = Object.create($_); //#13680
        $_.c2w = $a([$a([495, 330, 210, 126, 70, 35, 15, 5]), $a([165, 120, 84, 56, 35, 20, 10, 4]), $a([45, 36, 28, 21, 15, 10, 6, 3]), $a([9, 8, 7, 6, 5, 4, 3, 2]), $a([1, 1, 1, 1, 1, 1, 1, 1])]); //#13679
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_posicode.$ctx[id] = $_[id]); //#13679
        bwipp_posicode.__13680__ = 1; //#13679
        $_ = Object.getPrototypeOf($_); //#13679
    } //#13679
    $_.v = 0; //#13681
    var _5I = $_.cws; //#13682
    for (var _5J = 0, _5K = _5I.length; _5J < _5K; _5J++) { //#13691
        $_.cw = $get(_5I, _5J); //#13683
        for (var _5M = 0, _5N = 6; _5M < _5N; _5M++) { //#13690
            if ((($_.cw ^ $_.v) & 1) != 0) { //#13687
                $_.v = $_.v ^ 7682; //#13686
            } //#13686
            $_.v = $_.v >>> 1; //#13688
            $_.cw = $_.cw >>> 1; //#13689
        } //#13689
    } //#13689
    $_.v = $_.v + $_.checkoffset; //#13692
    if ($eq($_.version, "limiteda") || $eq($_.version, "limitedb")) { //#13700
        $_.v = $_.v & 1023; //#13695
        if (($_.v > 824) && ($_.v < 853)) { //#13698
            $_.v = $_.v + 292; //#13697
        } //#13697
    } else { //#13700
        $_.v = ($_.v & 1023) + 45; //#13700
    } //#13700
    $_.d = $a([2, 2, 2, 2, 2, 2]); //#13703
    $_.r = 0; //#13704
    $_.c = 0; //#13704
    $_.w = 0; //#13704
    $_.sum = 0; //#13704
    for (;;) { //#13723
        if ($_.sum == $_.v) { //#13706
            break; //#13706
        } //#13706
        $_.t = $f($_.sum + $get($get($_.c2w, $_.r), $_.c)); //#13707
        if ($_.t == $_.v) { //#13712
            $_.w = $_.w + 1; //#13709
            $put($_.d, $_.r, $_.w + 2); //#13710
            $_.sum = $_.t; //#13711
        } //#13711
        if ($_.t > $_.v) { //#13717
            $put($_.d, $_.r, $_.w + 2); //#13714
            $_.r = $_.r + 1; //#13715
            $_.w = 0; //#13716
        } //#13716
        if ($_.t < $_.v) { //#13722
            $_.c = $_.c + 1; //#13719
            $_.w = $_.w + 1; //#13720
            $_.sum = $_.t; //#13721
        } //#13721
    } //#13721
    $k[$j++] = 20; //#13724
    for (var _63 = 0; _63 <= 4; _63 += 1) { //#13724
        var _66 = $k[--$j]; //#13724
        $k[$j++] = $f(_66 - $get($_.d, _63)); //#13724
    } //#13724
    $put($_.d, 5, $k[--$j]); //#13725
    if ($eq($_.version, "b") || $eq($_.version, "limitedb")) { //#13728
        $k[$j++] = Infinity; //#13727
        var _6B = $_.d; //#13727
        for (var _6C = 0, _6D = _6B.length; _6C < _6D; _6C++) { //#13727
            $k[$j++] = $f($get(_6B, _6C) + 1); //#13727
        } //#13727
        $_.d = $a(); //#13727
    } //#13727
    $_.cbs = $strcpy($s(12), "111111111111"); //#13729
    for (var _6I = 5; _6I >= 0; _6I -= 1) { //#13733
        $_.i = _6I; //#13731
        $put($_.cbs, ((5 - $_.i) * 2) + 1, $f($get($_.d, $_.i) + 47)); //#13732
    } //#13732
    $_.sbs = $s(($_.cws.length * 6) + 31); //#13736
    var _6S = $get($_.encs, $_.encs.length - 2); //#13737
    $puti($_.sbs, 0, _6S); //#13738
    $_.j = _6S.length; //#13739
    for (var _6W = 0, _6V = $_.cws.length - 1; _6W <= _6V; _6W += 1) { //#13744
        $_.i = _6W; //#13741
        $puti($_.sbs, $_.j, $get($_.encs, $get($_.cws, $_.i))); //#13742
        $_.j = $_.j + 6; //#13743
    } //#13743
    $puti($_.sbs, $_.j, $_.cbs); //#13745
    $_.j = $_.j + 12; //#13746
    var _6l = $get($_.encs, $_.encs.length - 1); //#13747
    $puti($_.sbs, $_.j, _6l); //#13748
    $_.j = _6l.length + $_.j; //#13749
    $_.sbs = $geti($_.sbs, 0, $_.j); //#13750
    $k[$j++] = Infinity; //#13753
    $k[$j++] = Infinity; //#13755
    var _6s = $_.sbs; //#13755
    for (var _6t = 0, _6u = _6s.length; _6t < _6u; _6t++) { //#13755
        $k[$j++] = $f($get(_6s, _6t) - 48); //#13755
    } //#13755
    var _6w = $a(); //#13755
    $k[$j++] = Infinity; //#13756
    for (var _6y = 0, _6z = ~~(($_.sbs.length + 1) / 2); _6y < _6z; _6y++) { //#13756
        $k[$j++] = $_.height; //#13756
    } //#13756
    var _71 = $a(); //#13756
    $k[$j++] = Infinity; //#13757
    for (var _73 = 0, _74 = ~~(($_.sbs.length + 1) / 2); _73 < _74; _73++) { //#13757
        $k[$j++] = 0; //#13757
    } //#13757
    var _75 = $a(); //#13757
    var _7D = new Map([
        ["a", 0],
        ["b", 0],
        ["limiteda", 12],
        ["limitedb", 13]
    ]); //#13760
    var _7G = new Map([
        ["a", 0],
        ["b", 0],
        ["limiteda", 12],
        ["limitedb", 13]
    ]); //#13761
    $k[$j++] = 'ren'; //#13762
    $k[$j++] = 'renlinear'; //#13762
    $k[$j++] = 'sbs'; //#13762
    $k[$j++] = _6w; //#13762
    $k[$j++] = 'bhs'; //#13762
    $k[$j++] = _71; //#13762
    $k[$j++] = 'bbs'; //#13762
    $k[$j++] = _75; //#13762
    $k[$j++] = 'txt'; //#13762
    $k[$j++] = $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])]); //#13762
    $k[$j++] = 'textxalign'; //#13762
    $k[$j++] = "center"; //#13762
    $k[$j++] = 'borderleft'; //#13762
    $k[$j++] = $get(_7D, $_.version); //#13762
    $k[$j++] = 'borderright'; //#13762
    $k[$j++] = $get(_7G, $_.version); //#13762
    $k[$j++] = 'opt'; //#13762
    $k[$j++] = $_.options; //#13762
    var _7K = $d(); //#13762
    $k[$j++] = _7K; //#13765
    if (!$_.dontdraw) { //#13765
        bwipp_renlinear(); //#13765
    } //#13765
    $_ = Object.getPrototypeOf($_); //#13767
    $_ = Object.getPrototypeOf($_); //#13769
} //bwipp_posicode
function bwipp_codablockf() {
    $_ = Object.create($_); //#13800
    $_.dontdraw = false; //#13803
    $_.rows = -1; //#13804
    $_.columns = 8; //#13805
    $_.rowheight = 10; //#13806
    $_.sepheight = 1; //#13807
    $_.parse = false; //#13808
    $_.parsefnc = false; //#13809
    $k[$j++] = $_; //#13811
    bwipp_processoptions(); //#13811
    $_.options = $k[--$j]; //#13811
    $_.barcode = $k[--$j]; //#13812
    if (($_.columns < 4) || ($_.columns > 62)) { //#13816
        $k[$j++] = 'bwipp.codablockfBadColumns#13815'; //#13815
        $k[$j++] = "Codablock F must have 4 to 62 columns"; //#13815
        bwipp_raiseerror(); //#13815
    } //#13815
    if (($_.rows != -1) && (($_.rows < 2) || ($_.rows > 44))) { //#13820
        $k[$j++] = 'bwipp.codablockfBadRows#13819'; //#13819
        $k[$j++] = "Codablock F must have 2 to 44 rows"; //#13819
        bwipp_raiseerror(); //#13819
    } //#13819
    if ($_.rowheight < 8) { //#13824
        $k[$j++] = 'bwipp.codablockfBadRowHeight#13823'; //#13823
        $k[$j++] = "Codablock F must have rowheight of at least 8"; //#13823
        bwipp_raiseerror(); //#13823
    } //#13823
    if ($_.sepheight < 1) { //#13828
        $k[$j++] = 'bwipp.codablockfBadSepHeight#13827'; //#13827
        $k[$j++] = "Codablock F must have sepheight of at least 1"; //#13827
        bwipp_raiseerror(); //#13827
    } //#13827
    bwipp_loadctx(bwipp_codablockf); //#13830
    $k[$j++] = 'c'; //#13832
    if (($_.columns >= 4) && ($_.columns <= 62)) { //#13832
        $k[$j++] = $_.columns; //#13832
    } else { //#13832
        $k[$j++] = 8; //#13832
    } //#13832
    var _C = $k[--$j]; //#13832
    $_[$k[--$j]] = _C; //#13832
    $k[$j++] = 'rows'; //#13833
    if (($_.rows >= 2) && ($_.rows <= 44)) { //#13833
        $k[$j++] = $_.rows; //#13833
    } else { //#13833
        $k[$j++] = -1; //#13833
    } //#13833
    var _H = $k[--$j]; //#13833
    $_[$k[--$j]] = _H; //#13833
    $_.swa = -1; //#13836
    $_.swb = -2; //#13836
    $_.swc = -3; //#13836
    $_.sft = -4; //#13836
    $_.fn1 = -5; //#13837
    $_.fn2 = -6; //#13837
    $_.fn3 = -7; //#13837
    $_.fn4 = -8; //#13837
    $_.sta = -9; //#13838
    $_.stp = -10; //#13838
    var _N = new Map([
        ["parse", $_.parse],
        ["parsefnc", $_.parsefnc],
        ["FNC1", $_.fn1],
        ["FNC3", $_.fn3]
    ]); //#13846
    $_.fncvals = _N; //#13848
    $k[$j++] = 'msg'; //#13849
    $k[$j++] = $_.barcode; //#13849
    $k[$j++] = $_.fncvals; //#13849
    bwipp_parseinput(); //#13849
    var _Q = $k[--$j]; //#13849
    $_[$k[--$j]] = _Q; //#13849
    $_.msglen = $_.msg.length; //#13850
    $_.msgtmp = $a([]); //#13853
    var _U = $_.msg; //#13854
    for (var _V = 0, _W = _U.length; _V < _W; _V++) { //#13857
        $_.char = $get(_U, _V); //#13855
        $k[$j++] = Infinity; //#13856
        $aload($_.msgtmp); //#13856
        if ($_.char < 128) { //#13856
            $k[$j++] = $_.char; //#13856
        } else { //#13856
            $k[$j++] = $_.fn4; //#13856
            $k[$j++] = $_.char & 127; //#13856
        } //#13856
        $_.msgtmp = $a(); //#13856
    } //#13856
    $_.kmsg = $_.msg; //#13858
    $_.msg = $_.msgtmp; //#13859
    $_.msglen = $_.msg.length; //#13860
    if (!bwipp_codablockf.__13917__) { //#13917
        $_ = Object.create($_); //#13917
        $_.charmaps = $a([$a([32, 32, "00"]), $a(["!", "!", "01"]), $a(["\"", "\"", "02"]), $a(["#", "#", "03"]), $a(["$", "$", "04"]), $a(["%", "%", "05"]), $a(["&", "&", "06"]), $a(["'", "'", "07"]), $a([40, 40, "08"]), $a([41, 41, "09"]), $a(["*", "*", "10"]), $a(["+", "+", "11"]), $a([",", ",", "12"]), $a(["-", "-", "13"]), $a([".", ".", "14"]), $a(["/", "/", "15"]), $a(["0", "0", "16"]), $a(["1", "1", "17"]), $a(["2", "2", "18"]), $a(["3", "3", "19"]), $a(["4", "4", "20"]), $a(["5", "5", "21"]), $a(["6", "6", "22"]), $a(["7", "7", "23"]), $a(["8", "8", "24"]), $a(["9", "9", "25"]), $a([":", ":", "26"]), $a([";", ";", "27"]), $a(["<", "<", "28"]), $a(["=", "=", "29"]), $a([">", ">", "30"]), $a(["?", "?", "31"]), $a(["@", "@", "32"]), $a(["A", "A", "33"]), $a(["B", "B", "34"]), $a(["C", "C", "35"]), $a(["D", "D", "36"]), $a(["E", "E", "37"]), $a(["F", "F", "38"]), $a(["G", "G", "39"]), $a(["H", "H", "40"]), $a(["I", "I", "41"]), $a(["J", "J", "42"]), $a(["K", "K", "43"]), $a(["L", "L", "44"]), $a(["M", "M", "45"]), $a(["N", "N", "46"]), $a(["O", "O", "47"]), $a(["P", "P", "48"]), $a(["Q", "Q", "49"]), $a(["R", "R", "50"]), $a(["S", "S", "51"]), $a(["T", "T", "52"]), $a(["U", "U", "53"]), $a(["V", "V", "54"]), $a(["W", "W", "55"]), $a(["X", "X", "56"]), $a(["Y", "Y", "57"]), $a(["Z", "Z", "58"]), $a(["[", "[", "59"]), $a([92, 92, "60"]), $a(["]", "]", "61"]), $a(["^", "^", "62"]), $a(["_", "_", "63"]), $a([0, "`", "64"]), $a([1, "a", "65"]), $a([2, "b", "66"]), $a([3, "c", "67"]), $a([4, "d", "68"]), $a([5, "e", "69"]), $a([6, "f", "70"]), $a([7, "g", "71"]), $a([8, "h", "72"]), $a([9, "i", "73"]), $a([10, "j", "74"]), $a([11, "k", "75"]), $a([12, "l", "76"]), $a([13, "m", "77"]), $a([14, "n", "78"]), $a([15, "o", "79"]), $a([16, "p", "80"]), $a([17, "q", "81"]), $a([18, "r", "82"]), $a([19, "s", "83"]), $a([20, "t", "84"]), $a([21, "u", "85"]), $a([22, "v", "86"]), $a([23, "w", "87"]), $a([24, "x", "88"]), $a([25, "y", "89"]), $a([26, "z", "90"]), $a([27, "{", "91"]), $a([28, "|", "92"]), $a([29, "}", "93"]), $a([30, "~", "94"]), $a([31, 127, "95"]), $a([$_.fn3, $_.fn3, "96"]), $a([$_.fn2, $_.fn2, "97"]), $a([$_.sft, $_.sft, "98"]), $a([$_.swc, $_.swc, "99"]), $a([$_.swb, $_.fn4, $_.swb]), $a([$_.fn4, $_.swa, $_.swa]), $a([$_.fn1, $_.fn1, $_.fn1]), $a([$_.sta, $_.sta, $_.sta]), $a([$_.stp, $_.stp, $_.stp])]); //#13901
        $_.charvals = $a([new Map, new Map, new Map]); //#13904
        for (var _2p = 0, _2o = $_.charmaps.length - 1; _2p <= _2o; _2p += 1) { //#13913
            $_.i = _2p; //#13906
            $_.encs = $get($_.charmaps, $_.i); //#13907
            for (var _2t = 0; _2t <= 2; _2t += 1) { //#13912
                $_.j = _2t; //#13909
                var _2w = $get($_.encs, $_.j); //#13910
                $k[$j++] = _2w; //#13910
                if ($eq($type(_2w), 'stringtype')) { //#13910
                    var _2z = $get($k[--$j], 0); //#13910
                    $k[$j++] = _2z; //#13910
                } //#13910
                $put($get($_.charvals, $_.j), $k[--$j], $_.i); //#13911
            } //#13911
        } //#13911
        $_.seta = $get($_.charvals, 0); //#13914
        $_.setb = $get($_.charvals, 1); //#13915
        $_.setc = $get($_.charvals, 2); //#13916
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_codablockf.$ctx[id] = $_[id]); //#13916
        bwipp_codablockf.__13917__ = 1; //#13916
        $_ = Object.getPrototypeOf($_); //#13916
    } //#13916
    $_.numsscr = function() {
        $_.n = 0; //#13921
        $_.s = 0; //#13921
        $_.p = $k[--$j]; //#13922
        for (;;) { //#13933
            if ($_.p >= $_.msglen) { //#13923
                break; //#13923
            } //#13923
            var _3H = $get($_.msg, $_.p); //#13924
            var _3J = $get($_.setc, _3H) !== undefined; //#13925
            $k[$j++] = _3H; //#13925
            if (!_3J) { //#13925
                $j--; //#13925
                break; //#13925
            } //#13925
            if ($k[--$j] == $_.fn1) { //#13929
                if (($_.s % 2) == 0) { //#13928
                    $_.s = $_.s + 1; //#13928
                } else { //#13928
                    break; //#13928
                } //#13928
            } //#13928
            $_.n = $_.n + 1; //#13930
            $_.s = $_.s + 1; //#13931
            $_.p = $f($_.p + 1); //#13932
        } //#13932
        $k[$j++] = $_.n; //#13934
        $k[$j++] = $_.s; //#13934
    }; //#13934
    $_.enca = function() {
        $put($_.cws, $_.j, $get($_.seta, $k[--$j])); //#13939
        $_.j = $_.j + 1; //#13940
    }; //#13940
    $_.encb = function() {
        $put($_.cws, $_.j, $get($_.setb, $k[--$j])); //#13943
        $_.j = $_.j + 1; //#13944
    }; //#13944
    $_.encc = function() {
        var _3f = $k[--$j]; //#13947
        $k[$j++] = _3f; //#13951
        if ($ne($type(_3f), 'arraytype')) { //#13950
            var _3j = $get($_.setc, $k[--$j]); //#13948
            $k[$j++] = _3j; //#13948
        } else { //#13950
            $aload($k[--$j]); //#13950
            var _3l = $k[--$j]; //#13950
            var _3m = $k[--$j]; //#13950
            $k[$j++] = $f($f(_3l - 48) + ($f(_3m - 48) * 10)); //#13950
        } //#13950
        $put($_.cws, $_.j, $k[--$j]); //#13952
        $_.j = $_.j + 1; //#13953
    }; //#13953
    $_.anotb = function() {
        var _3r = $k[--$j]; //#13957
        var _3t = $get($_.seta, _3r) !== undefined; //#13957
        var _3v = $get($_.setb, _3r) !== undefined; //#13957
        $k[$j++] = _3t && (!_3v); //#13957
    }; //#13957
    $_.bnota = function() {
        var _3w = $k[--$j]; //#13958
        var _3y = $get($_.setb, _3w) !== undefined; //#13958
        var _40 = $get($_.seta, _3w) !== undefined; //#13958
        $k[$j++] = _3y && (!_40); //#13958
    }; //#13958
    $k[$j++] = Infinity; //#13961
    for (var _42 = 0, _43 = $_.msg.length; _42 < _43; _42++) { //#13961
        $k[$j++] = 0; //#13961
    } //#13961
    $k[$j++] = 9999; //#13961
    $_.nextanotb = $a(); //#13961
    $k[$j++] = Infinity; //#13962
    for (var _46 = 0, _47 = $_.msg.length; _46 < _47; _46++) { //#13962
        $k[$j++] = 0; //#13962
    } //#13962
    $k[$j++] = 9999; //#13962
    $_.nextbnota = $a(); //#13962
    for (var _4A = $_.msg.length - 1; _4A >= 0; _4A -= 1) { //#13975
        $_.i = _4A; //#13964
        $k[$j++] = $get($_.msg, $_.i); //#13965
        $_.anotb(); //#13965
        if ($k[--$j]) { //#13968
            $put($_.nextanotb, $_.i, 0); //#13966
        } else { //#13968
            $put($_.nextanotb, $_.i, $f($get($_.nextanotb, $_.i + 1) + 1)); //#13968
        } //#13968
        $k[$j++] = $get($_.msg, $_.i); //#13970
        $_.bnota(); //#13970
        if ($k[--$j]) { //#13973
            $put($_.nextbnota, $_.i, 0); //#13971
        } else { //#13973
            $put($_.nextbnota, $_.i, $f($get($_.nextbnota, $_.i + 1) + 1)); //#13973
        } //#13973
    } //#13973
    $_.abeforeb = function() {
        var _4X = $k[--$j]; //#13978
        $k[$j++] = $lt($get($_.nextanotb, _4X), $get($_.nextbnota, _4X)); //#13978
    }; //#13978
    $_.bbeforea = function() {
        var _4c = $k[--$j]; //#13979
        $k[$j++] = $lt($get($_.nextbnota, _4c), $get($_.nextanotb, _4c)); //#13979
    }; //#13979
    $_.padrow = function() {
        for (var _4i = 0, _4j = $k[--$j]; _4i < _4j; _4i++) { //#13989
            for (;;) { //#13988
                if ($eq($_.cset, "seta")) { //#13985
                    $k[$j++] = $_.swc; //#13985
                    $_.enca(); //#13985
                    $_.cset = "setc"; //#13985
                    break; //#13985
                } //#13985
                if ($eq($_.cset, "setb")) { //#13986
                    $k[$j++] = $_.swc; //#13986
                    $_.encb(); //#13986
                    $_.cset = "setc"; //#13986
                    break; //#13986
                } //#13986
                if ($eq($_.cset, "setc")) { //#13987
                    $k[$j++] = $_.swb; //#13987
                    $_.encc(); //#13987
                    $_.cset = "setb"; //#13987
                    break; //#13987
                } //#13987
            } //#13987
        } //#13987
    }; //#13987
    $_.encafitsrow = function() {
        if (($_.rem <= 2) && ($get($_.msg, $_.i) == $_.fn4)) { //#14004
            var _4z = ($_.rem == 2) && ($get($_.msg, $_.i + 1) <= 95); //#13996
            $k[$j++] = _4z; //#14000
            if (_4z) { //#14000
                $k[$j++] = $_.fn4; //#13997
                $_.enca(); //#13997
                $k[$j++] = $get($_.msg, $_.i + 1); //#13998
                $_.enca(); //#13998
                $_.i = $_.i + 2; //#13999
            } //#13999
        } else { //#14004
            $k[$j++] = $get($_.msg, $_.i); //#14002
            $_.enca(); //#14002
            $_.i = $_.i + 1; //#14003
            $k[$j++] = true; //#14004
        } //#14004
    }; //#14004
    $_.encbfitsrow = function() {
        if (($_.rem <= 2) && ($get($_.msg, $_.i) == $_.fn4)) { //#14020
            var _5I = ($_.rem == 2) && ($get($_.msg, $_.i + 1) >= 32); //#14012
            $k[$j++] = _5I; //#14016
            if (_5I) { //#14016
                $k[$j++] = $_.fn4; //#14013
                $_.encb(); //#14013
                $k[$j++] = $get($_.msg, $_.i + 1); //#14014
                $_.encb(); //#14014
                $_.i = $_.i + 2; //#14015
            } //#14015
        } else { //#14020
            $k[$j++] = $get($_.msg, $_.i); //#14018
            $_.encb(); //#14018
            $_.i = $_.i + 1; //#14019
            $k[$j++] = true; //#14020
        } //#14020
    }; //#14020
    $_.cws = $a($f($_.c + 5) * 44); //#14025
    $_.i = 0; //#14027
    $_.j = 0; //#14027
    $_.r = 1; //#14027
    $_.lastrow = false; //#14028
    for (;;) { //#14195
        if ($_.lastrow) { //#14030
            break; //#14030
        } //#14030
        if ($_.r > 44) { //#14034
            $k[$j++] = 'bwipp.codablockfTooBig#14033'; //#14033
            $k[$j++] = "Maximum length exceeded"; //#14033
            bwipp_raiseerror(); //#14033
        } //#14033
        $k[$j++] = $_.sta; //#14037
        $_.enca(); //#14037
        if ($_.i < $_.msglen) { //#14038
            $k[$j++] = $_.i; //#14038
            $_.numsscr(); //#14038
        } else { //#14038
            $k[$j++] = -1; //#14038
            $k[$j++] = -1; //#14038
        } //#14038
        $_.nums = $k[--$j]; //#14038
        $_.nchars = $k[--$j]; //#14038
        for (;;) { //#14058
            if ($_.msglen == 0) { //#14044
                $k[$j++] = $_.swb; //#14041
                $_.enca(); //#14041
                $_.cset = "setb"; //#14042
                break; //#14043
            } //#14043
            if ($_.nums >= 2) { //#14049
                $k[$j++] = $_.swc; //#14046
                $_.enca(); //#14046
                $_.cset = "setc"; //#14047
                break; //#14048
            } //#14048
            $k[$j++] = $_.i; //#14050
            $_.abeforeb(); //#14050
            if ($k[--$j]) { //#14054
                $k[$j++] = $_.sft; //#14051
                $_.enca(); //#14051
                $_.cset = "seta"; //#14052
                break; //#14053
            } //#14053
            $k[$j++] = $_.swb; //#14055
            $_.enca(); //#14055
            $_.cset = "setb"; //#14056
            break; //#14057
        } //#14057
        $_.j = $_.j + 1; //#14059
        $_.endofrow = false; //#14062
        for (;;) { //#14180
            $_.rem = $f($f($_.c + 3) - ($_.j % $f($_.c + 5))); //#14063
            if (($_.i == $_.msglen) || $_.endofrow) { //#14065
                break; //#14065
            } //#14065
            $k[$j++] = $_.i; //#14067
            $_.numsscr(); //#14067
            $_.nums = $k[--$j]; //#14067
            $_.nchars = $k[--$j]; //#14067
            $k[$j++] = 'remnums'; //#14068
            if ($_.nums > ($_.rem * 2)) { //#14068
                $k[$j++] = $_.rem * 2; //#14068
            } else { //#14068
                $k[$j++] = $_.nums; //#14068
            } //#14068
            var _5y = $k[--$j]; //#14068
            $_[$k[--$j]] = _5y; //#14068
            for (;;) { //#14178
                if ((($eq($_.cset, "seta") || $eq($_.cset, "setb")) && ($_.remnums >= 4)) && ($get($_.msg, $_.i) != $_.fn1)) { //#14106
                    if ((($_.remnums % 2) == 0) && ($_.rem >= 3)) { //#14088
                        $k[$j++] = $_.swc; //#14076
                        if ($eq($_.cset, "seta")) { //#14076
                            $_.enca(); //#14076
                        } else { //#14076
                            $_.encb(); //#14076
                        } //#14076
                        $_.cset = "setc"; //#14077
                        for (var _6B = 0, _6C = 2; _6B < _6C; _6B++) { //#14086
                            if ($get($_.msg, $_.i) == $_.fn1) { //#14084
                                $k[$j++] = $_.fn1; //#14080
                                $_.encc(); //#14080
                                $_.i = $_.i + 1; //#14081
                            } else { //#14084
                                $k[$j++] = $geti($_.msg, $_.i, 2); //#14083
                                $_.encc(); //#14083
                                $_.i = $_.i + 2; //#14084
                            } //#14084
                        } //#14084
                        break; //#14087
                    } //#14087
                    if ((($_.remnums % 2) != 0) && ($_.rem >= 4)) { //#14105
                        $k[$j++] = $get($_.msg, $_.i); //#14091
                        if ($eq($_.cset, "seta")) { //#14091
                            $_.enca(); //#14091
                        } else { //#14091
                            $_.encb(); //#14091
                        } //#14091
                        $_.i = $_.i + 1; //#14092
                        $k[$j++] = $_.swc; //#14093
                        if ($eq($_.cset, "seta")) { //#14093
                            $_.enca(); //#14093
                        } else { //#14093
                            $_.encb(); //#14093
                        } //#14093
                        $_.cset = "setc"; //#14094
                        for (var _6W = 0, _6X = 2; _6W < _6X; _6W++) { //#14103
                            if ($get($_.msg, $_.i) == $_.fn1) { //#14101
                                $k[$j++] = $_.fn1; //#14097
                                $_.encc(); //#14097
                                $_.i = $_.i + 1; //#14098
                            } else { //#14101
                                $k[$j++] = $geti($_.msg, $_.i, 2); //#14100
                                $_.encc(); //#14100
                                $_.i = $_.i + 2; //#14101
                            } //#14101
                        } //#14101
                        break; //#14104
                    } //#14104
                } //#14104
                $k[$j++] = $eq($_.cset, "setb"); //#14107
                $k[$j++] = $get($_.msg, $_.i); //#14107
                $_.anotb(); //#14107
                var _6m = $k[--$j]; //#14107
                var _6n = $k[--$j]; //#14107
                if ((_6n && _6m) && ($_.rem >= 2)) { //#14122
                    if ($_.i < ($_.msglen - 1)) { //#14116
                        $k[$j++] = $_.i + 1; //#14110
                        $_.bbeforea(); //#14110
                        if ($k[--$j]) { //#14115
                            $k[$j++] = $_.sft; //#14111
                            $_.encb(); //#14111
                            $k[$j++] = $get($_.msg, $_.i); //#14112
                            $_.enca(); //#14112
                            $_.i = $_.i + 1; //#14113
                            break; //#14114
                        } //#14114
                    } //#14114
                    $k[$j++] = $_.swa; //#14117
                    $_.encb(); //#14117
                    $_.cset = "seta"; //#14118
                    $k[$j++] = $get($_.msg, $_.i); //#14119
                    $_.enca(); //#14119
                    $_.i = $_.i + 1; //#14120
                    break; //#14121
                } //#14121
                $k[$j++] = $eq($_.cset, "seta"); //#14123
                $k[$j++] = $get($_.msg, $_.i); //#14123
                $_.bnota(); //#14123
                var _77 = $k[--$j]; //#14123
                var _78 = $k[--$j]; //#14123
                if ((_78 && _77) && ($_.rem >= 2)) { //#14138
                    if ($_.i < ($_.msglen - 1)) { //#14132
                        $k[$j++] = $_.i + 1; //#14126
                        $_.abeforeb(); //#14126
                        if ($k[--$j]) { //#14131
                            $k[$j++] = $_.sft; //#14127
                            $_.enca(); //#14127
                            $k[$j++] = $get($_.msg, $_.i); //#14128
                            $_.encb(); //#14128
                            $_.i = $_.i + 1; //#14129
                            break; //#14130
                        } //#14130
                    } //#14130
                    $k[$j++] = $_.swb; //#14133
                    $_.enca(); //#14133
                    $_.cset = "setb"; //#14134
                    $k[$j++] = $get($_.msg, $_.i); //#14135
                    $_.encb(); //#14135
                    $_.i = $_.i + 1; //#14136
                    break; //#14137
                } //#14137
                if (($eq($_.cset, "setc") && ($_.remnums < 2)) && ($_.rem >= 2)) { //#14151
                    $_.rem = $f($_.rem - 1); //#14141
                    $k[$j++] = $_.i; //#14142
                    $_.abeforeb(); //#14142
                    if ($k[--$j]) { //#14149
                        $k[$j++] = $_.swa; //#14143
                        $_.encc(); //#14143
                        $_.cset = "seta"; //#14144
                        $_.encafitsrow(); //#14145
                        if ($k[--$j]) { //#14145
                            break; //#14145
                        } //#14145
                    } else { //#14149
                        $k[$j++] = $_.swb; //#14147
                        $_.encc(); //#14147
                        $_.cset = "setb"; //#14148
                        $_.encbfitsrow(); //#14149
                        if ($k[--$j]) { //#14149
                            break; //#14149
                        } //#14149
                    } //#14149
                } //#14149
                var _7d = $get($_.seta, $get($_.msg, $_.i)) !== undefined; //#14154
                if (($eq($_.cset, "seta") && _7d) && ($_.rem >= 1)) { //#14157
                    $_.encafitsrow(); //#14156
                    if ($k[--$j]) { //#14156
                        break; //#14156
                    } //#14156
                } //#14156
                var _7l = $get($_.setb, $get($_.msg, $_.i)) !== undefined; //#14158
                if (($eq($_.cset, "setb") && _7l) && ($_.rem >= 1)) { //#14161
                    $_.encbfitsrow(); //#14160
                    if ($k[--$j]) { //#14160
                        break; //#14160
                    } //#14160
                } //#14160
                if (($eq($_.cset, "setc") && ($_.remnums >= 2)) && ($_.rem >= 1)) { //#14172
                    if ($get($_.msg, $_.i) == $_.fn1) { //#14169
                        $k[$j++] = $_.fn1; //#14165
                        $_.encc(); //#14165
                        $_.i = $_.i + 1; //#14166
                    } else { //#14169
                        $k[$j++] = $geti($_.msg, $_.i, 2); //#14168
                        $_.encc(); //#14168
                        $_.i = $_.i + 2; //#14169
                    } //#14169
                    break; //#14171
                } //#14171
                $_.endofrow = true; //#14175
                break; //#14176
            } //#14176
        } //#14176
        if ((((($_.r >= $_.rows) || ($_.rows == -1)) && ($_.r > 1)) && ($_.i == $_.msglen)) && ($_.rem >= 2)) { //#14192
            $k[$j++] = $f($_.rem - 2); //#14184
            $_.padrow(); //#14184
            $_.j = $_.j + 3; //#14185
            $k[$j++] = $_.stp; //#14186
            $_.enca(); //#14186
            $_.lastrow = true; //#14187
        } else { //#14192
            $k[$j++] = $_.rem; //#14189
            $_.padrow(); //#14189
            $_.j = $_.j + 1; //#14190
            $k[$j++] = $_.stp; //#14191
            $_.enca(); //#14191
            $_.r = $_.r + 1; //#14192
        } //#14192
    } //#14192
    $_.cws = $geti($_.cws, 0, $_.j); //#14196
    if (!bwipp_codablockf.__14206__) { //#14206
        $_ = Object.create($_); //#14206
        $k[$j++] = Infinity; //#14200
        for (var _8I = 64; _8I <= 95; _8I += 1) { //#14201
            $k[$j++] = _8I; //#14201
        } //#14201
        for (var _8J = 0; _8J <= 15; _8J += 1) { //#14202
            $k[$j++] = _8J; //#14202
        } //#14202
        for (var _8K = 26; _8K <= 63; _8K += 1) { //#14203
            $k[$j++] = _8K; //#14203
        } //#14203
        $_.abmap = $a(); //#14203
        $k[$j++] = Infinity; //#14205
        for (var _8M = 0; _8M <= 85; _8M += 1) { //#14205
            $k[$j++] = _8M; //#14205
        } //#14205
        $_.cmap = $a(); //#14205
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_codablockf.$ctx[id] = $_[id]); //#14205
        bwipp_codablockf.__14206__ = 1; //#14205
        $_ = Object.getPrototypeOf($_); //#14205
    } //#14205
    $_.chkmsg = $a($_.kmsg.length); //#14209
    $_.j = 0; //#14210
    for (var _8T = 0, _8S = $_.kmsg.length - 1; _8T <= _8S; _8T += 1) { //#14216
        $_.i = _8T; //#14212
        $_.char = $get($_.kmsg, $_.i); //#14213
        if ($_.char >= 0) { //#14214
            $put($_.chkmsg, $_.j, $_.char); //#14214
            $_.j = $_.j + 1; //#14214
        } //#14214
        if (($_.char == $_.fn1) && ($_.i != 0)) { //#14215
            $put($_.chkmsg, $_.j, 29); //#14215
            $_.j = $_.j + 1; //#14215
        } //#14215
    } //#14215
    $_.t1 = 0; //#14217
    $_.t2 = 0; //#14217
    $_.k1 = 0; //#14217
    $_.k2 = 0; //#14217
    for (var _8k = 0, _8j = $_.j - 1; _8k <= _8j; _8k += 1) { //#14224
        $_.i = _8k; //#14219
        $_.t1 = ($get($_.chkmsg, $_.i) * $_.i) % 86; //#14220
        $_.t2 = $f($_.t1 + $get($_.chkmsg, $_.i)) % 86; //#14221
        $_.k1 = $f($_.k1 + $_.t2) % 86; //#14222
        $_.k2 = $f($_.k2 + $_.t1) % 86; //#14223
    } //#14223
    $k[$j++] = $_.cws; //#14225
    $k[$j++] = $_.cws.length - 4; //#14225
    if ($ne($_.cset, "setc")) { //#14225
        $k[$j++] = $_.abmap; //#14225
    } else { //#14225
        $k[$j++] = $_.cmap; //#14225
    } //#14225
    var _94 = $get($k[--$j], $_.k1); //#14225
    var _95 = $k[--$j]; //#14225
    $put($k[--$j], _95, _94); //#14225
    $k[$j++] = $_.cws; //#14226
    $k[$j++] = $_.cws.length - 3; //#14226
    if ($ne($_.cset, "setc")) { //#14226
        $k[$j++] = $_.abmap; //#14226
    } else { //#14226
        $k[$j++] = $_.cmap; //#14226
    } //#14226
    var _9E = $get($k[--$j], $_.k2); //#14226
    var _9F = $k[--$j]; //#14226
    $put($k[--$j], _9F, _9E); //#14226
    var _9H = $_.cws; //#14229
    $k[$j++] = _9H; //#14229
    $k[$j++] = 2; //#14229
    if ($get(_9H, 2 - 1) != 99) { //#14229
        $k[$j++] = $_.abmap; //#14229
    } else { //#14229
        $k[$j++] = $_.cmap; //#14229
    } //#14229
    var _9N = $get($k[--$j], $_.r - 2); //#14229
    var _9O = $k[--$j]; //#14229
    $put($k[--$j], _9O, _9N); //#14229
    for (var _9S = 1, _9R = $_.r - 1; _9S <= _9R; _9S += 1) { //#14233
        $_.i = _9S; //#14231
        var _9T = $_.cws; //#14232
        var _9U = $_.i; //#14232
        var _9V = $_.c; //#14232
        $k[$j++] = _9T; //#14232
        $k[$j++] = $f((_9U * $f(_9V + 5)) + 2); //#14232
        if ($get(_9T, $f(($f((_9U * $f(_9V + 5)) + 2)) - 1)) != 99) { //#14232
            $k[$j++] = $_.abmap; //#14232
        } else { //#14232
            $k[$j++] = $_.cmap; //#14232
        } //#14232
        var _9b = $get($k[--$j], $_.i + 42); //#14232
        var _9c = $k[--$j]; //#14232
        $put($k[--$j], _9c, _9b); //#14232
    } //#14232
    for (var _9g = 0, _9f = $_.r - 1; _9g <= _9f; _9g += 1) { //#14244
        $_.rcws = $geti($_.cws, _9g * $f($_.c + 5), $f($_.c + 4)); //#14237
        $_.csum = $get($_.rcws, 0); //#14238
        for (var _9p = 1, _9o = $_.rcws.length - 2; _9p <= _9o; _9p += 1) { //#14242
            $_.i = _9p; //#14240
            $_.csum = $f($_.csum + ($get($_.rcws, $_.i) * $_.i)); //#14241
        } //#14241
        $put($_.rcws, $_.rcws.length - 1, $_.csum % 103); //#14243
    } //#14243
    var _9z = $get($_.options, 'debugcws') !== undefined; //#14246
    if (_9z) { //#14246
        $k[$j++] = 'bwipp.debugcws#14246'; //#14246
        $k[$j++] = $_.cws; //#14246
        bwipp_raiseerror(); //#14246
    } //#14246
    if (!bwipp_codablockf.__14267__) { //#14267
        $_ = Object.create($_); //#14267
        $_.encs = $a(["212222", "222122", "222221", "121223", "121322", "131222", "122213", "122312", "132212", "221213", "221312", "231212", "112232", "122132", "122231", "113222", "123122", "123221", "223211", "221132", "221231", "213212", "223112", "312131", "311222", "321122", "321221", "312212", "322112", "322211", "212123", "212321", "232121", "111323", "131123", "131321", "112313", "132113", "132311", "211313", "231113", "231311", "112133", "112331", "132131", "113123", "113321", "133121", "313121", "211331", "231131", "213113", "213311", "213131", "311123", "311321", "331121", "312113", "312311", "332111", "314111", "221411", "431111", "111224", "111422", "121124", "121421", "141122", "141221", "112214", "112412", "122114", "122411", "142112", "142211", "241211", "221114", "413111", "241112", "134111", "111242", "121142", "121241", "114212", "124112", "124211", "411212", "421112", "421211", "212141", "214121", "412121", "111143", "111341", "131141", "114113", "114311", "411113", "411311", "113141", "114131", "311141", "411131", "211412", "2331112"]); //#14266
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_codablockf.$ctx[id] = $_[id]); //#14266
        bwipp_codablockf.__14267__ = 1; //#14266
        $_ = Object.getPrototypeOf($_); //#14266
    } //#14266
    $_.rowbits = $a($_.r); //#14270
    for (var _A7 = 0, _A6 = $_.r - 1; _A7 <= _A6; _A7 += 1) { //#14282
        $_.i = _A7; //#14272
        $k[$j++] = Infinity; //#14273
        var _AC = $geti($_.cws, $_.i * $f($_.c + 5), $f($_.c + 5)); //#14274
        for (var _AD = 0, _AE = _AC.length; _AD < _AE; _AD++) { //#14276
            $forall($get($_.encs, $get(_AC, _AD)), function() { //#14275
                var _AI = $k[--$j]; //#14275
                $k[$j++] = $f(_AI - 48); //#14275
            }); //#14275
        } //#14275
        $_.sbs = $a(); //#14275
        $k[$j++] = Infinity; //#14278
        var _AK = $_.sbs; //#14279
        $k[$j++] = 0; //#14279
        for (var _AL = 0, _AM = _AK.length; _AL < _AM; _AL++) { //#14279
            var _AO = $k[--$j]; //#14279
            var _AP = (_AO == 1) ? 0 : 1; //#14279
            $k[$j++] = _AO; //#14279
            for (var _AQ = 0, _AR = $get(_AK, _AL); _AQ < _AR; _AQ++) { //#14279
                $k[$j++] = _AP //#14279
            } //#14279
        } //#14279
        $astore($a($counttomark() - 1)); //#14280
        var _AU = $k[--$j]; //#14280
        var _AV = $k[--$j]; //#14280
        $k[$j++] = _AU; //#14280
        $k[$j++] = _AV; //#14280
        $j--; //#14280
        var _AW = $k[--$j]; //#14280
        var _AX = $k[--$j]; //#14280
        $k[$j++] = _AW; //#14280
        $k[$j++] = _AX; //#14280
        $j--; //#14280
        $k[$j++] = $_.rowbits; //#14281
        $k[$j++] = $_.i; //#14281
        $r(3, -1); //#14281
        var _Aa = $k[--$j]; //#14281
        var _Ab = $k[--$j]; //#14281
        $put($k[--$j], _Ab, _Aa); //#14281
    } //#14281
    $_.symwid = $f(($_.c * 11) + 57); //#14285
    $k[$j++] = Infinity; //#14286
    for (var _Ag = 0, _Ah = $_.symwid * $_.sepheight; _Ag < _Ah; _Ag++) { //#14287
        $k[$j++] = 1; //#14287
    } //#14287
    for (var _Ak = 0, _Aj = $_.r - 2; _Ak <= _Aj; _Ak += 1) { //#14296
        $_.i = _Ak; //#14289
        for (var _Am = 0, _An = $_.rowheight; _Am < _An; _Am++) { //#14290
            $aload($get($_.rowbits, $_.i)); //#14290
        } //#14290
        for (var _As = 0, _At = $_.sepheight; _As < _At; _As++) { //#14295
            $k[$j++] = 1; //#14293
            $k[$j++] = 1; //#14293
            $k[$j++] = 0; //#14293
            $k[$j++] = 1; //#14293
            $k[$j++] = 0; //#14293
            $k[$j++] = 0; //#14293
            $k[$j++] = 0; //#14293
            $k[$j++] = 0; //#14293
            $k[$j++] = 1; //#14293
            $k[$j++] = 0; //#14293
            $k[$j++] = 0; //#14293
            for (var _Av = 0, _Aw = $f($_.symwid - 24); _Av < _Aw; _Av++) { //#14293
                $k[$j++] = 1; //#14293
            } //#14293
            $k[$j++] = 1; //#14294
            $k[$j++] = 1; //#14294
            $k[$j++] = 0; //#14294
            $k[$j++] = 0; //#14294
            $k[$j++] = 0; //#14294
            $k[$j++] = 1; //#14294
            $k[$j++] = 1; //#14294
            $k[$j++] = 1; //#14294
            $k[$j++] = 0; //#14294
            $k[$j++] = 1; //#14294
            $k[$j++] = 0; //#14294
            $k[$j++] = 1; //#14294
            $k[$j++] = 1; //#14294
        } //#14294
    } //#14294
    for (var _Ay = 0, _Az = $_.rowheight; _Ay < _Az; _Ay++) { //#14297
        $aload($get($_.rowbits, $_.r - 1)); //#14297
    } //#14297
    for (var _B5 = 0, _B6 = $_.symwid * $_.sepheight; _B5 < _B6; _B5++) { //#14298
        $k[$j++] = 1; //#14298
    } //#14298
    $_.pixs = $a(); //#14298
    var _BG = new Map([
        ["ren", 'renmatrix'],
        ["pixs", $_.pixs],
        ["pixx", $_.symwid],
        ["pixy", ~~($_.pixs.length / $_.symwid)],
        ["height", (~~($_.pixs.length / $_.symwid)) / 72],
        ["width", $_.symwid / 72],
        ["opt", $_.options]
    ]); //#14309
    $k[$j++] = _BG; //#14312
    if (!$_.dontdraw) { //#14312
        bwipp_renmatrix(); //#14312
    } //#14312
    $_ = Object.getPrototypeOf($_); //#14314
    $_ = Object.getPrototypeOf($_); //#14316
} //bwipp_codablockf
function bwipp_code16k() {
    $_ = Object.create($_); //#14347
    $_.dontdraw = false; //#14350
    $_.sam = -1; //#14351
    $_.rows = 0; //#14352
    $_.rowheight = 8; //#14353
    $_.sepheight = 1; //#14354
    $_.raw = false; //#14355
    $_.parse = false; //#14356
    $_.parsefnc = false; //#14357
    $k[$j++] = $_; //#14359
    bwipp_processoptions(); //#14359
    $_.options = $k[--$j]; //#14359
    $_.barcode = $k[--$j]; //#14360
    if (($_.rows != 0) && (($_.rows < 2) || ($_.rows > 16))) { //#14364
        $k[$j++] = 'bwipp.code16kBadRows#14363'; //#14363
        $k[$j++] = "Code 16K must have 2 to 16 rows"; //#14363
        bwipp_raiseerror(); //#14363
    } //#14363
    if ($_.rowheight < 8) { //#14368
        $k[$j++] = 'bwipp.code16kBadRowHeight#14367'; //#14367
        $k[$j++] = "Code 16K must have rowheight of at least 8"; //#14367
        bwipp_raiseerror(); //#14367
    } //#14367
    if ($_.sepheight < 1) { //#14372
        $k[$j++] = 'bwipp.code16kBadSepHeight#14371'; //#14371
        $k[$j++] = "Code 16K must have sepheight of at least 1"; //#14371
        bwipp_raiseerror(); //#14371
    } //#14371
    if ($_.sam != -1) { //#14384
        $k[$j++] = true; //#14380
        for (var _8 = 0, _9 = 1; _8 < _9; _8++) { //#14380
            var _A = $_.sam; //#14377
            if ((_A < 12) || (_A > 99)) { //#14377
                $j--; //#14377
                $k[$j++] = false; //#14377
                break; //#14377
            } //#14377
            if (($_.sam % 10) < 2) { //#14378
                $j--; //#14378
                $k[$j++] = false; //#14378
                break; //#14378
            } //#14378
            if ((~~($_.sam / 10)) > ($_.sam % 10)) { //#14379
                $j--; //#14379
                $k[$j++] = false; //#14379
                break; //#14379
            } //#14379
        } //#14379
        if ($nt($k[--$j])) { //#14383
            $k[$j++] = 'bwipp.code16kBadSAM#14382'; //#14382
            $k[$j++] = "SAM must be formatted as \"NM\" for Nth of M symbols, from 2 to 9 symbols"; //#14382
            bwipp_raiseerror(); //#14382
        } //#14382
    } //#14382
    bwipp_loadctx(bwipp_code16k); //#14386
    if ($_.sam != -1) { //#14388
        $_.rows = 16; //#14388
    } //#14388
    if (!bwipp_code16k.__14453__) { //#14453
        $_ = Object.create($_); //#14453
        $_.swa = -1; //#14392
        $_.swb = -2; //#14392
        $_.swc = -3; //#14392
        $_.sa1 = -4; //#14393
        $_.sb1 = -5; //#14393
        $_.sc1 = -6; //#14393
        $_.sa2 = -7; //#14394
        $_.sb2 = -8; //#14394
        $_.sc2 = -9; //#14394
        $_.pad = -10; //#14395
        $_.sb3 = -11; //#14395
        $_.sc3 = -12; //#14395
        $_.fn1 = -13; //#14396
        $_.fn2 = -14; //#14396
        $_.fn3 = -15; //#14396
        $_.fn4 = -16; //#14396
        $_.charmaps = $a([$a([32, 32, "00"]), $a(["!", "!", "01"]), $a(["\"", "\"", "02"]), $a(["#", "#", "03"]), $a(["$", "$", "04"]), $a(["%", "%", "05"]), $a(["&", "&", "06"]), $a(["'", "'", "07"]), $a([40, 40, "08"]), $a([41, 41, "09"]), $a(["*", "*", "10"]), $a(["+", "+", "11"]), $a([",", ",", "12"]), $a(["-", "-", "13"]), $a([".", ".", "14"]), $a(["/", "/", "15"]), $a(["0", "0", "16"]), $a(["1", "1", "17"]), $a(["2", "2", "18"]), $a(["3", "3", "19"]), $a(["4", "4", "20"]), $a(["5", "5", "21"]), $a(["6", "6", "22"]), $a(["7", "7", "23"]), $a(["8", "8", "24"]), $a(["9", "9", "25"]), $a([":", ":", "26"]), $a([";", ";", "27"]), $a(["<", "<", "28"]), $a(["=", "=", "29"]), $a([">", ">", "30"]), $a(["?", "?", "31"]), $a(["@", "@", "32"]), $a(["A", "A", "33"]), $a(["B", "B", "34"]), $a(["C", "C", "35"]), $a(["D", "D", "36"]), $a(["E", "E", "37"]), $a(["F", "F", "38"]), $a(["G", "G", "39"]), $a(["H", "H", "40"]), $a(["I", "I", "41"]), $a(["J", "J", "42"]), $a(["K", "K", "43"]), $a(["L", "L", "44"]), $a(["M", "M", "45"]), $a(["N", "N", "46"]), $a(["O", "O", "47"]), $a(["P", "P", "48"]), $a(["Q", "Q", "49"]), $a(["R", "R", "50"]), $a(["S", "S", "51"]), $a(["T", "T", "52"]), $a(["U", "U", "53"]), $a(["V", "V", "54"]), $a(["W", "W", "55"]), $a(["X", "X", "56"]), $a(["Y", "Y", "57"]), $a(["Z", "Z", "58"]), $a(["[", "[", "59"]), $a([92, 92, "60"]), $a(["]", "]", "61"]), $a(["^", "^", "62"]), $a(["_", "_", "63"]), $a([0, "`", "64"]), $a([1, "a", "65"]), $a([2, "b", "66"]), $a([3, "c", "67"]), $a([4, "d", "68"]), $a([5, "e", "69"]), $a([6, "f", "70"]), $a([7, "g", "71"]), $a([8, "h", "72"]), $a([9, "i", "73"]), $a([10, "j", "74"]), $a([11, "k", "75"]), $a([12, "l", "76"]), $a([13, "m", "77"]), $a([14, "n", "78"]), $a([15, "o", "79"]), $a([16, "p", "80"]), $a([17, "q", "81"]), $a([18, "r", "82"]), $a([19, "s", "83"]), $a([20, "t", "84"]), $a([21, "u", "85"]), $a([22, "v", "86"]), $a([23, "w", "87"]), $a([24, "x", "88"]), $a([25, "y", "89"]), $a([26, "z", "90"]), $a([27, "{", "91"]), $a([28, "|", "92"]), $a([29, "}", "93"]), $a([30, "~", "94"]), $a([31, 127, "95"]), $a([$_.fn3, $_.fn3, "96"]), $a([$_.fn2, $_.fn2, "97"]), $a([$_.sb1, $_.sa1, "98"]), $a([$_.swc, $_.swc, "99"]), $a([$_.swb, $_.fn4, $_.swb]), $a([$_.fn4, $_.swa, $_.swa]), $a([$_.fn1, $_.fn1, $_.fn1]), $a([$_.pad, $_.pad, $_.pad]), $a([$_.sb2, $_.sa2, $_.sb1]), $a([$_.sc2, $_.sc2, $_.sb2]), $a([$_.sc3, $_.sc3, $_.sb3])]); //#14437
        $_.charvals = $a([new Map, new Map, new Map]); //#14440
        for (var _2W = 0, _2V = $_.charmaps.length - 1; _2W <= _2V; _2W += 1) { //#14449
            $_.i = _2W; //#14442
            $_.encs = $get($_.charmaps, $_.i); //#14443
            for (var _2a = 0; _2a <= 2; _2a += 1) { //#14448
                $_.j = _2a; //#14445
                var _2d = $get($_.encs, $_.j); //#14446
                $k[$j++] = _2d; //#14446
                if ($eq($type(_2d), 'stringtype')) { //#14446
                    var _2g = $get($k[--$j], 0); //#14446
                    $k[$j++] = _2g; //#14446
                } //#14446
                $put($get($_.charvals, $_.j), $k[--$j], $_.i); //#14447
            } //#14447
        } //#14447
        $_.seta = $get($_.charvals, 0); //#14450
        $_.setb = $get($_.charvals, 1); //#14451
        $_.setc = $get($_.charvals, 2); //#14452
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code16k.$ctx[id] = $_[id]); //#14452
        bwipp_code16k.__14453__ = 1; //#14452
        $_ = Object.getPrototypeOf($_); //#14452
    } //#14452
    if ($_.raw) { //#14923
        $_.cws = $a($_.barcode.length); //#14457
        $_.i = 0; //#14458
        $_.j = 0; //#14458
        for (;;) { //#14469
            if ($_.i >= ($_.barcode.length - 3)) { //#14460
                break; //#14460
            } //#14460
            if ($get($_.barcode, $_.i) != 94) { //#14461
                break; //#14461
            } //#14461
            var _33 = $geti($_.barcode, $_.i + 1, 3); //#14462
            $k[$j++] = _33; //#14464
            $k[$j++] = false; //#14464
            for (var _34 = 0, _35 = _33.length; _34 < _35; _34++) { //#14464
                var _36 = $get(_33, _34); //#14464
                if ((_36 < 48) || (_36 > 57)) { //#14463
                    $j--; //#14463
                    $k[$j++] = true; //#14463
                } //#14463
            } //#14463
            if ($k[--$j]) { //#14464
                $j--; //#14464
                break; //#14464
            } //#14464
            $_.cw = $cvi($k[--$j]); //#14465
            $put($_.cws, $_.j, $_.cw); //#14466
            $_.i = $_.i + 4; //#14467
            $_.j = $_.j + 1; //#14468
        } //#14468
        if ($_.i != $_.barcode.length) { //#14472
            $k[$j++] = 'bwipp.code16kBadRawFormat#14471'; //#14471
            $k[$j++] = "raw data must be formatted as ^NNN"; //#14471
            bwipp_raiseerror(); //#14471
        } //#14471
        $_.cws = $geti($_.cws, 0, $_.j); //#14473
    } else { //#14923
        var _3O = new Map([
            ["parse", $_.parse],
            ["parsefnc", $_.parsefnc],
            ["eci", true],
            ["FNC1", $_.fn1],
            ["FNC2", $_.fn2],
            ["FNC3", $_.fn3]
        ]); //#14484
        $_.fncvals = _3O; //#14486
        $k[$j++] = 'msg'; //#14487
        $k[$j++] = $_.barcode; //#14487
        $k[$j++] = $_.fncvals; //#14487
        bwipp_parseinput(); //#14487
        var _3R = $k[--$j]; //#14487
        $_[$k[--$j]] = _3R; //#14487
        $_.msglen = $_.msg.length; //#14488
        $k[$j++] = Infinity; //#14491
        for (var _3V = 0, _3W = $_.msglen; _3V < _3W; _3V++) { //#14491
            $k[$j++] = 0; //#14491
        } //#14491
        $k[$j++] = 0; //#14491
        $_.numSA = $a(); //#14491
        $k[$j++] = Infinity; //#14492
        for (var _3Z = 0, _3a = $_.msglen; _3Z < _3a; _3Z++) { //#14492
            $k[$j++] = 0; //#14492
        } //#14492
        $k[$j++] = 0; //#14492
        $_.numEA = $a(); //#14492
        for (var _3d = $_.msglen - 1; _3d >= 0; _3d -= 1) { //#14502
            $_.i = _3d; //#14494
            if ($get($_.msg, $_.i) >= 0) { //#14501
                if ($get($_.msg, $_.i) >= 128) { //#14499
                    $put($_.numEA, $_.i, $f($get($_.numEA, $_.i + 1) + 1)); //#14497
                } else { //#14499
                    $put($_.numSA, $_.i, $f($get($_.numSA, $_.i + 1) + 1)); //#14499
                } //#14499
            } //#14499
        } //#14499
        $_.ea = false; //#14505
        $_.msgtmp = $a([]); //#14505
        for (var _3x = 0, _3w = $_.msglen - 1; _3x <= _3w; _3x += 1) { //#14520
            $_.i = _3x; //#14507
            $_.c = $get($_.msg, $_.i); //#14508
            if ((!$xo($_.ea, $_.c < 128)) && ($_.c >= 0)) { //#14518
                if ($_.ea) { //#14510
                    $k[$j++] = $_.numSA; //#14510
                } else { //#14510
                    $k[$j++] = $_.numEA; //#14510
                } //#14510
                var _49 = $get($k[--$j], $_.i); //#14510
                var _4C = ($f(_49 + $_.i) == $_.msglen) ? 3 : 5; //#14511
                if (_49 < _4C) { //#14516
                    $k[$j++] = Infinity; //#14513
                    $aload($_.msgtmp); //#14513
                    $k[$j++] = $_.fn4; //#14513
                    $_.msgtmp = $a(); //#14513
                } else { //#14516
                    $k[$j++] = Infinity; //#14515
                    $aload($_.msgtmp); //#14515
                    $k[$j++] = $_.fn4; //#14515
                    $k[$j++] = $_.fn4; //#14515
                    $_.msgtmp = $a(); //#14515
                    $_.ea = !$_.ea; //#14516
                } //#14516
            } //#14516
            $k[$j++] = Infinity; //#14519
            $aload($_.msgtmp); //#14519
            if ($_.c >= 0) { //#14519
                $k[$j++] = $_.c & 127; //#14519
            } else { //#14519
                $k[$j++] = $_.c; //#14519
            } //#14519
            $_.msgtmp = $a(); //#14519
        } //#14519
        $_.msg = $_.msgtmp; //#14521
        $_.msglen = $_.msg.length; //#14522
        $_.numsscr = function() {
            $_.n = 0; //#14526
            $_.s = 0; //#14526
            $_.p = $k[--$j]; //#14527
            for (;;) { //#14538
                if ($_.p >= $_.msglen) { //#14528
                    break; //#14528
                } //#14528
                var _4X = $get($_.msg, $_.p); //#14529
                var _4Z = $get($_.setc, _4X) !== undefined; //#14530
                $k[$j++] = _4X; //#14530
                if (!_4Z) { //#14530
                    $j--; //#14530
                    break; //#14530
                } //#14530
                if ($k[--$j] == $_.fn1) { //#14534
                    if (($_.s % 2) == 0) { //#14533
                        $_.s = $_.s + 1; //#14533
                    } else { //#14533
                        break; //#14533
                    } //#14533
                } //#14533
                $_.n = $_.n + 1; //#14535
                $_.s = $_.s + 1; //#14536
                $_.p = $f($_.p + 1); //#14537
            } //#14537
            $k[$j++] = $_.n; //#14539
            $k[$j++] = $_.s; //#14539
        }; //#14539
        $_.enca = function() {
            $put($_.cws, $_.j, $get($_.seta, $k[--$j])); //#14544
            $_.j = $_.j + 1; //#14545
        }; //#14545
        $_.encb = function() {
            $put($_.cws, $_.j, $get($_.setb, $k[--$j])); //#14548
            $_.j = $_.j + 1; //#14549
        }; //#14549
        $_.encc = function() {
            var _4v = $k[--$j]; //#14552
            $k[$j++] = _4v; //#14556
            if ($ne($type(_4v), 'arraytype')) { //#14555
                var _4z = $get($_.setc, $k[--$j]); //#14553
                $k[$j++] = _4z; //#14553
            } else { //#14555
                $aload($k[--$j]); //#14555
                var _51 = $k[--$j]; //#14555
                var _52 = $k[--$j]; //#14555
                $k[$j++] = $f($f(_51 - 48) + ($f(_52 - 48) * 10)); //#14555
            } //#14555
            $put($_.cws, $_.j, $k[--$j]); //#14557
            $_.j = $_.j + 1; //#14558
        }; //#14558
        $_.anotb = function() {
            var _57 = $k[--$j]; //#14562
            var _59 = $get($_.seta, _57) !== undefined; //#14562
            var _5B = $get($_.setb, _57) !== undefined; //#14562
            $k[$j++] = _59 && (!_5B); //#14562
        }; //#14562
        $_.bnota = function() {
            var _5C = $k[--$j]; //#14563
            var _5E = $get($_.setb, _5C) !== undefined; //#14563
            var _5G = $get($_.seta, _5C) !== undefined; //#14563
            $k[$j++] = _5E && (!_5G); //#14563
        }; //#14563
        $k[$j++] = Infinity; //#14566
        for (var _5I = 0, _5J = $_.msg.length; _5I < _5J; _5I++) { //#14566
            $k[$j++] = 0; //#14566
        } //#14566
        $k[$j++] = 9999; //#14566
        $_.nextanotb = $a(); //#14566
        $k[$j++] = Infinity; //#14567
        for (var _5M = 0, _5N = $_.msg.length; _5M < _5N; _5M++) { //#14567
            $k[$j++] = 0; //#14567
        } //#14567
        $k[$j++] = 9999; //#14567
        $_.nextbnota = $a(); //#14567
        for (var _5Q = $_.msg.length - 1; _5Q >= 0; _5Q -= 1) { //#14580
            $_.i = _5Q; //#14569
            $k[$j++] = $get($_.msg, $_.i); //#14570
            $_.anotb(); //#14570
            if ($k[--$j]) { //#14573
                $put($_.nextanotb, $_.i, 0); //#14571
            } else { //#14573
                $put($_.nextanotb, $_.i, $f($get($_.nextanotb, $_.i + 1) + 1)); //#14573
            } //#14573
            $k[$j++] = $get($_.msg, $_.i); //#14575
            $_.bnota(); //#14575
            if ($k[--$j]) { //#14578
                $put($_.nextbnota, $_.i, 0); //#14576
            } else { //#14578
                $put($_.nextbnota, $_.i, $f($get($_.nextbnota, $_.i + 1) + 1)); //#14578
            } //#14578
        } //#14578
        $_.abeforeb = function() {
            var _5n = $k[--$j]; //#14583
            $k[$j++] = $lt($get($_.nextanotb, _5n), $get($_.nextbnota, _5n)); //#14583
        }; //#14583
        $_.bbeforea = function() {
            var _5s = $k[--$j]; //#14584
            $k[$j++] = $lt($get($_.nextbnota, _5s), $get($_.nextanotb, _5s)); //#14584
        }; //#14584
        $_.cws = $a(($_.barcode.length * 2) + 3); //#14586
        $_.i = 0; //#14589
        $_.j = 0; //#14589
        for (;;) { //#14679
            if ($_.sam != -1) { //#14600
                $put($_.cws, 0, (~~($_.sam / 10)) - 1); //#14594
                $put($_.cws, 1, ($_.sam % 10) - 1); //#14595
                $_.j = 2; //#14596
                $_.cset = "setb"; //#14597
                $_.mode = 7; //#14598
                break; //#14599
            } //#14599
            if ($_.msglen == 0) { //#14606
                $_.cset = "setb"; //#14603
                $_.mode = 1; //#14604
                break; //#14605
            } //#14605
            if ($_.msglen >= 2) { //#14615
                $k[$j++] = $get($_.msg, 0) == $_.fn1; //#14609
                $k[$j++] = 1; //#14609
                $_.numsscr(); //#14609
                var _69 = $k[--$j]; //#14609
                var _6A = $k[--$j]; //#14609
                $k[$j++] = _69; //#14609
                $k[$j++] = _6A; //#14609
                $j--; //#14609
                var _6B = $k[--$j]; //#14609
                var _6C = $k[--$j]; //#14609
                if (_6C && (_6B >= 2)) { //#14614
                    $_.cset = "setc"; //#14610
                    $_.mode = 4; //#14611
                    $_.i = 1; //#14612
                    break; //#14613
                } //#14613
            } //#14613
            if ($get($_.msg, 0) == $_.fn1) { //#14622
                $_.cset = "setb"; //#14618
                $_.mode = 3; //#14619
                $_.i = 1; //#14620
                break; //#14621
            } //#14621
            if ($_.msglen >= 2) { //#14668
                $k[$j++] = 0; //#14625
                $_.numsscr(); //#14625
                var _6H = $k[--$j]; //#14625
                var _6I = $k[--$j]; //#14625
                $k[$j++] = _6H; //#14625
                $k[$j++] = _6I; //#14625
                $j--; //#14625
                var _6J = $k[--$j]; //#14625
                if ((_6J >= 2) && ((_6J % 2) == 0)) { //#14629
                    $_.cset = "setc"; //#14626
                    $_.mode = 2; //#14627
                    break; //#14628
                } //#14628
                $k[$j++] = 0; //#14631
                $_.numsscr(); //#14631
                var _6K = $k[--$j]; //#14631
                var _6L = $k[--$j]; //#14631
                $k[$j++] = _6K; //#14631
                $k[$j++] = _6L; //#14631
                $j--; //#14631
                var _6M = $k[--$j]; //#14631
                if ((_6M >= 3) && ((_6M % 2) == 1)) { //#14637
                    $k[$j++] = $get($_.msg, 0); //#14632
                    $_.encb(); //#14632
                    $_.cset = "setc"; //#14633
                    $_.mode = 5; //#14634
                    $_.i = 1; //#14635
                    break; //#14636
                } //#14636
                var _6S = $get($_.setb, $get($_.msg, 0)) !== undefined; //#14639
                $k[$j++] = _6S; //#14640
                $k[$j++] = 1; //#14640
                $_.numsscr(); //#14640
                var _6T = $k[--$j]; //#14640
                var _6U = $k[--$j]; //#14640
                $k[$j++] = _6T; //#14640
                $k[$j++] = _6U; //#14640
                $j--; //#14640
                var _6V = $k[--$j]; //#14640
                var _6W = $k[--$j]; //#14640
                if (_6W && ((_6V >= 2) && ((_6V % 2) == 0))) { //#14646
                    $k[$j++] = $get($_.msg, 0); //#14641
                    $_.encb(); //#14641
                    $_.cset = "setc"; //#14642
                    $_.mode = 5; //#14643
                    $_.i = 1; //#14644
                    break; //#14645
                } //#14645
                var _6c = $get($_.setb, $get($_.msg, 0)) !== undefined; //#14648
                $k[$j++] = _6c; //#14649
                $k[$j++] = 1; //#14649
                $_.numsscr(); //#14649
                var _6d = $k[--$j]; //#14649
                var _6e = $k[--$j]; //#14649
                $k[$j++] = _6d; //#14649
                $k[$j++] = _6e; //#14649
                $j--; //#14649
                var _6f = $k[--$j]; //#14649
                var _6g = $k[--$j]; //#14649
                if (_6g && ((_6f >= 3) && ((_6f % 2) == 1))) { //#14656
                    $k[$j++] = $get($_.msg, 0); //#14650
                    $_.encb(); //#14650
                    $k[$j++] = $get($_.msg, 1); //#14651
                    $_.encb(); //#14651
                    $_.cset = "setc"; //#14652
                    $_.mode = 6; //#14653
                    $_.i = 2; //#14654
                    break; //#14655
                } //#14655
                var _6o = $get($_.setb, $get($_.msg, 0)) !== undefined; //#14658
                var _6s = $get($_.setb, $get($_.msg, 1)) !== undefined; //#14659
                $k[$j++] = _6o && _6s; //#14660
                $k[$j++] = 2; //#14660
                $_.numsscr(); //#14660
                var _6t = $k[--$j]; //#14660
                var _6u = $k[--$j]; //#14660
                $k[$j++] = _6t; //#14660
                $k[$j++] = _6u; //#14660
                $j--; //#14660
                var _6v = $k[--$j]; //#14660
                var _6w = $k[--$j]; //#14660
                if (_6w && ((_6v >= 2) && ((_6v % 2) == 0))) { //#14667
                    $k[$j++] = $get($_.msg, 0); //#14661
                    $_.encb(); //#14661
                    $k[$j++] = $get($_.msg, 1); //#14662
                    $_.encb(); //#14662
                    $_.cset = "setc"; //#14663
                    $_.mode = 6; //#14664
                    $_.i = 2; //#14665
                    break; //#14666
                } //#14666
            } //#14666
            $k[$j++] = 0; //#14670
            $_.abeforeb(); //#14670
            if ($k[--$j]) { //#14674
                $_.cset = "seta"; //#14671
                $_.mode = 0; //#14672
                break; //#14673
            } //#14673
            $_.cset = "setb"; //#14676
            $_.mode = 1; //#14677
            break; //#14678
        } //#14678
        for (;;) { //#14922
            if ($_.i == $_.msglen) { //#14682
                break; //#14682
            } //#14682
            $k[$j++] = $_.i; //#14684
            $_.numsscr(); //#14684
            $_.nums = $k[--$j]; //#14684
            $_.nchars = $k[--$j]; //#14684
            for (;;) { //#14920
                if ($eq($_.cset, "seta")) { //#14761
                    if ($_.i < ($_.msglen - 1)) { //#14698
                        $k[$j++] = $get($_.msg, $_.i); //#14691
                        $_.bnota(); //#14691
                        $k[$j++] = $_.i + 1; //#14692
                        $_.abeforeb(); //#14692
                        var _7E = $k[--$j]; //#14692
                        var _7F = $k[--$j]; //#14692
                        if ((_7F && _7E)) { //#14697
                            $k[$j++] = $_.sb1; //#14693
                            $_.enca(); //#14693
                            $k[$j++] = $get($_.msg, $_.i); //#14694
                            $_.encb(); //#14694
                            $_.i = $_.i + 1; //#14695
                            break; //#14696
                        } //#14696
                    } //#14696
                    if ($_.i < ($_.msglen - 2)) { //#14710
                        $k[$j++] = $get($_.msg, $_.i); //#14701
                        $_.bnota(); //#14701
                        $k[$j++] = $get($_.msg, $_.i + 1); //#14702
                        $_.bnota(); //#14702
                        var _7T = $k[--$j]; //#14702
                        var _7U = $k[--$j]; //#14702
                        $k[$j++] = $an(_7U, _7T); //#14703
                        $k[$j++] = $_.i + 2; //#14703
                        $_.abeforeb(); //#14703
                        var _7W = $k[--$j]; //#14703
                        var _7X = $k[--$j]; //#14703
                        if ((_7X && _7W)) { //#14709
                            $k[$j++] = $_.sb2; //#14704
                            $_.enca(); //#14704
                            $k[$j++] = $get($_.msg, $_.i); //#14705
                            $_.encb(); //#14705
                            $k[$j++] = $get($_.msg, $_.i + 1); //#14706
                            $_.encb(); //#14706
                            $_.i = $_.i + 2; //#14707
                            break; //#14708
                        } //#14708
                    } //#14708
                    $k[$j++] = $get($_.msg, $_.i); //#14712
                    $_.bnota(); //#14712
                    if ($k[--$j]) { //#14716
                        $k[$j++] = $_.swb; //#14713
                        $_.enca(); //#14713
                        $_.cset = "setb"; //#14714
                        break; //#14715
                    } //#14715
                    if ($_.i < ($_.msglen - 4)) { //#14733
                        var _7s = $get($_.seta, $get($_.msg, $_.i + 4)) !== undefined; //#14720
                        if (($_.nums == 4) && _7s) { //#14732
                            $k[$j++] = $_.sc2; //#14721
                            $_.enca(); //#14721
                            for (var _7u = 0, _7v = 2; _7u < _7v; _7u++) { //#14730
                                if ($get($_.msg, $_.i) == $_.fn1) { //#14728
                                    $k[$j++] = $_.fn1; //#14724
                                    $_.encc(); //#14724
                                    $_.i = $_.i + 1; //#14725
                                } else { //#14728
                                    $k[$j++] = $geti($_.msg, $_.i, 2); //#14727
                                    $_.encc(); //#14727
                                    $_.i = $_.i + 2; //#14728
                                } //#14728
                            } //#14728
                            break; //#14731
                        } //#14731
                    } //#14731
                    if ($_.i < ($_.msglen - 6)) { //#14750
                        var _8D = $get($_.seta, $get($_.msg, $_.i + 6)) !== undefined; //#14737
                        if (($_.nums == 6) && _8D) { //#14749
                            $k[$j++] = $_.sc3; //#14738
                            $_.enca(); //#14738
                            for (var _8F = 0, _8G = 3; _8F < _8G; _8F++) { //#14747
                                if ($get($_.msg, $_.i) == $_.fn1) { //#14745
                                    $k[$j++] = $_.fn1; //#14741
                                    $_.encc(); //#14741
                                    $_.i = $_.i + 1; //#14742
                                } else { //#14745
                                    $k[$j++] = $geti($_.msg, $_.i, 2); //#14744
                                    $_.encc(); //#14744
                                    $_.i = $_.i + 2; //#14745
                                } //#14745
                            } //#14745
                            break; //#14748
                        } //#14748
                    } //#14748
                    if (($_.nums >= 4) && (($_.nums % 2) == 0)) { //#14756
                        $k[$j++] = $_.swc; //#14753
                        $_.enca(); //#14753
                        $_.cset = "setc"; //#14754
                        break; //#14755
                    } //#14755
                    $k[$j++] = $get($_.msg, $_.i); //#14758
                    $_.enca(); //#14758
                    $_.i = $_.i + 1; //#14759
                    break; //#14760
                } //#14760
                if ($eq($_.cset, "setb")) { //#14835
                    if ($_.i < ($_.msglen - 1)) { //#14772
                        $k[$j++] = $get($_.msg, $_.i); //#14765
                        $_.anotb(); //#14765
                        $k[$j++] = $_.i + 1; //#14766
                        $_.bbeforea(); //#14766
                        var _8f = $k[--$j]; //#14766
                        var _8g = $k[--$j]; //#14766
                        if ((_8g && _8f)) { //#14771
                            $k[$j++] = $_.sa1; //#14767
                            $_.encb(); //#14767
                            $k[$j++] = $get($_.msg, $_.i); //#14768
                            $_.enca(); //#14768
                            $_.i = $_.i + 1; //#14769
                            break; //#14770
                        } //#14770
                    } //#14770
                    if ($_.i < ($_.msglen - 2)) { //#14784
                        $k[$j++] = $get($_.msg, $_.i); //#14775
                        $_.anotb(); //#14775
                        $k[$j++] = $get($_.msg, $_.i + 1); //#14776
                        $_.anotb(); //#14776
                        var _8u = $k[--$j]; //#14776
                        var _8v = $k[--$j]; //#14776
                        $k[$j++] = $an(_8v, _8u); //#14777
                        $k[$j++] = $_.i + 2; //#14777
                        $_.bbeforea(); //#14777
                        var _8x = $k[--$j]; //#14777
                        var _8y = $k[--$j]; //#14777
                        if ((_8y && _8x)) { //#14783
                            $k[$j++] = $_.sa2; //#14778
                            $_.encb(); //#14778
                            $k[$j++] = $get($_.msg, $_.i); //#14779
                            $_.enca(); //#14779
                            $k[$j++] = $get($_.msg, $_.i + 1); //#14780
                            $_.enca(); //#14780
                            $_.i = $_.i + 2; //#14781
                            break; //#14782
                        } //#14782
                    } //#14782
                    $k[$j++] = $get($_.msg, $_.i); //#14786
                    $_.anotb(); //#14786
                    if ($k[--$j]) { //#14790
                        $k[$j++] = $_.swa; //#14787
                        $_.encb(); //#14787
                        $_.cset = "seta"; //#14788
                        break; //#14789
                    } //#14789
                    if ($_.i < ($_.msglen - 4)) { //#14807
                        var _9J = $get($_.setb, $get($_.msg, $_.i + 4)) !== undefined; //#14794
                        if (($_.nums == 4) && _9J) { //#14806
                            $k[$j++] = $_.sc2; //#14795
                            $_.encb(); //#14795
                            for (var _9L = 0, _9M = 2; _9L < _9M; _9L++) { //#14804
                                if ($get($_.msg, $_.i) == $_.fn1) { //#14802
                                    $k[$j++] = $_.fn1; //#14798
                                    $_.encc(); //#14798
                                    $_.i = $_.i + 1; //#14799
                                } else { //#14802
                                    $k[$j++] = $geti($_.msg, $_.i, 2); //#14801
                                    $_.encc(); //#14801
                                    $_.i = $_.i + 2; //#14802
                                } //#14802
                            } //#14802
                            break; //#14805
                        } //#14805
                    } //#14805
                    if ($_.i < ($_.msglen - 6)) { //#14824
                        var _9e = $get($_.setb, $get($_.msg, $_.i + 6)) !== undefined; //#14811
                        if (($_.nums == 6) && _9e) { //#14823
                            $k[$j++] = $_.sc3; //#14812
                            $_.encb(); //#14812
                            for (var _9g = 0, _9h = 3; _9g < _9h; _9g++) { //#14821
                                if ($get($_.msg, $_.i) == $_.fn1) { //#14819
                                    $k[$j++] = $_.fn1; //#14815
                                    $_.encc(); //#14815
                                    $_.i = $_.i + 1; //#14816
                                } else { //#14819
                                    $k[$j++] = $geti($_.msg, $_.i, 2); //#14818
                                    $_.encc(); //#14818
                                    $_.i = $_.i + 2; //#14819
                                } //#14819
                            } //#14819
                            break; //#14822
                        } //#14822
                    } //#14822
                    if (($_.nums >= 4) && (($_.nums % 2) == 0)) { //#14830
                        $k[$j++] = $_.swc; //#14827
                        $_.encb(); //#14827
                        $_.cset = "setc"; //#14828
                        break; //#14829
                    } //#14829
                    $k[$j++] = $get($_.msg, $_.i); //#14832
                    $_.encb(); //#14832
                    $_.i = $_.i + 1; //#14833
                    break; //#14834
                } //#14834
                if ($eq($_.cset, "setc")) { //#14918
                    if ($_.nums >= 2) { //#14847
                        if ($get($_.msg, $_.i) == $_.fn1) { //#14844
                            $k[$j++] = $_.fn1; //#14840
                            $_.encc(); //#14840
                            $_.i = $_.i + 1; //#14841
                        } else { //#14844
                            $k[$j++] = $geti($_.msg, $_.i, 2); //#14843
                            $_.encc(); //#14843
                            $_.i = $_.i + 2; //#14844
                        } //#14844
                        break; //#14846
                    } //#14846
                    if ($_.i < ($_.msglen - 1)) { //#14857
                        var _AH = $get($_.setb, $get($_.msg, $_.i)) !== undefined; //#14850
                        $k[$j++] = _AH; //#14851
                        $k[$j++] = $_.i + 1; //#14851
                        $_.numsscr(); //#14851
                        var _AJ = $k[--$j]; //#14851
                        var _AK = $k[--$j]; //#14851
                        $k[$j++] = _AJ; //#14851
                        $k[$j++] = _AK; //#14851
                        $j--; //#14851
                        var _AL = $k[--$j]; //#14851
                        var _AM = $k[--$j]; //#14851
                        if (_AM && ((_AL >= 2) && ((_AL % 2) == 0))) { //#14856
                            $k[$j++] = $_.sb1; //#14852
                            $_.encc(); //#14852
                            $k[$j++] = $get($_.msg, $_.i); //#14853
                            $_.encb(); //#14853
                            $_.i = $_.i + 1; //#14854
                            break; //#14855
                        } //#14855
                    } //#14855
                    if ($_.i < ($_.msglen - 1)) { //#14868
                        var _AY = $get($_.setb, $get($_.msg, $_.i)) !== undefined; //#14860
                        $k[$j++] = _AY; //#14861
                        $k[$j++] = $_.i + 1; //#14861
                        $_.numsscr(); //#14861
                        var _Aa = $k[--$j]; //#14861
                        var _Ab = $k[--$j]; //#14861
                        $k[$j++] = _Aa; //#14861
                        $k[$j++] = _Ab; //#14861
                        $j--; //#14861
                        var _Ac = $k[--$j]; //#14861
                        var _Ad = $k[--$j]; //#14861
                        if (_Ad && ((_Ac >= 3) && ((_Ac % 2) == 1))) { //#14867
                            $k[$j++] = $_.sb2; //#14862
                            $_.encc(); //#14862
                            $k[$j++] = $get($_.msg, $_.i); //#14863
                            $_.encb(); //#14863
                            $k[$j++] = $get($_.msg, $_.i + 1); //#14864
                            $_.encb(); //#14864
                            $_.i = $_.i + 2; //#14865
                            break; //#14866
                        } //#14866
                    } //#14866
                    if ($_.i < ($_.msglen - 2)) { //#14880
                        var _As = $get($_.setb, $get($_.msg, $_.i)) !== undefined; //#14871
                        var _Ax = $get($_.setb, $get($_.msg, $_.i + 1)) !== undefined; //#14872
                        $k[$j++] = _As && _Ax; //#14873
                        $k[$j++] = $_.i + 2; //#14873
                        $_.numsscr(); //#14873
                        var _Az = $k[--$j]; //#14873
                        var _B0 = $k[--$j]; //#14873
                        $k[$j++] = _Az; //#14873
                        $k[$j++] = _B0; //#14873
                        $j--; //#14873
                        var _B1 = $k[--$j]; //#14873
                        var _B2 = $k[--$j]; //#14873
                        if (_B2 && ((_B1 >= 2) && ((_B1 % 2) == 0))) { //#14879
                            $k[$j++] = $_.sb2; //#14874
                            $_.encc(); //#14874
                            $k[$j++] = $get($_.msg, $_.i); //#14875
                            $_.encb(); //#14875
                            $k[$j++] = $get($_.msg, $_.i + 1); //#14876
                            $_.encb(); //#14876
                            $_.i = $_.i + 2; //#14877
                            break; //#14878
                        } //#14878
                    } //#14878
                    if ($_.i < ($_.msglen - 3)) { //#14893
                        var _BH = $get($_.setb, $get($_.msg, $_.i)) !== undefined; //#14883
                        var _BM = $get($_.setb, $get($_.msg, $_.i + 1)) !== undefined; //#14884
                        $k[$j++] = _BH && _BM; //#14885
                        $k[$j++] = $_.i + 2; //#14885
                        $_.numsscr(); //#14885
                        var _BO = $k[--$j]; //#14885
                        var _BP = $k[--$j]; //#14885
                        $k[$j++] = _BO; //#14885
                        $k[$j++] = _BP; //#14885
                        $j--; //#14885
                        var _BQ = $k[--$j]; //#14885
                        var _BR = $k[--$j]; //#14885
                        if (_BR && ((_BQ >= 3) && ((_BQ % 2) == 1))) { //#14892
                            $k[$j++] = $_.sb3; //#14886
                            $_.encc(); //#14886
                            $k[$j++] = $get($_.msg, $_.i); //#14887
                            $_.encb(); //#14887
                            $k[$j++] = $get($_.msg, $_.i + 1); //#14888
                            $_.encb(); //#14888
                            $k[$j++] = $get($_.msg, $_.i + 2); //#14889
                            $_.encb(); //#14889
                            $_.i = $_.i + 3; //#14890
                            break; //#14891
                        } //#14891
                    } //#14891
                    if ($_.i < ($_.msglen - 3)) { //#14907
                        var _Bj = $get($_.setb, $get($_.msg, $_.i)) !== undefined; //#14896
                        var _Bo = $get($_.setb, $get($_.msg, $_.i + 1)) !== undefined; //#14897
                        var _Bt = $get($_.setb, $get($_.msg, $_.i + 2)) !== undefined; //#14898
                        $k[$j++] = (_Bj && _Bo) && _Bt; //#14899
                        $k[$j++] = $_.i + 3; //#14899
                        $_.numsscr(); //#14899
                        var _Bv = $k[--$j]; //#14899
                        var _Bw = $k[--$j]; //#14899
                        $k[$j++] = _Bv; //#14899
                        $k[$j++] = _Bw; //#14899
                        $j--; //#14899
                        var _Bx = $k[--$j]; //#14899
                        var _By = $k[--$j]; //#14899
                        if (_By && ((_Bx >= 2) && ((_Bx % 2) == 0))) { //#14906
                            $k[$j++] = $_.sb3; //#14900
                            $_.encc(); //#14900
                            $k[$j++] = $get($_.msg, $_.i); //#14901
                            $_.encb(); //#14901
                            $k[$j++] = $get($_.msg, $_.i + 1); //#14902
                            $_.encb(); //#14902
                            $k[$j++] = $get($_.msg, $_.i + 2); //#14903
                            $_.encb(); //#14903
                            $_.i = $_.i + 3; //#14904
                            break; //#14905
                        } //#14905
                    } //#14905
                    $k[$j++] = $_.i; //#14909
                    $_.abeforeb(); //#14909
                    if ($k[--$j]) { //#14913
                        $k[$j++] = $_.swa; //#14910
                        $_.encc(); //#14910
                        $_.cset = "seta"; //#14911
                        break; //#14912
                    } //#14912
                    $k[$j++] = $_.swb; //#14915
                    $_.encc(); //#14915
                    $_.cset = "setb"; //#14916
                    break; //#14917
                } //#14917
                break; //#14919
            } //#14919
        } //#14919
        $_.cws = $geti($_.cws, 0, $_.j); //#14923
    } //#14923
    if (!bwipp_code16k.__14946__) { //#14946
        $_ = Object.create($_); //#14946
        $_.metrics = $a([$a([2, 7]), $a([3, 12]), $a([4, 17]), $a([5, 22]), $a([6, 27]), $a([7, 32]), $a([8, 37]), $a([9, 42]), $a([10, 47]), $a([11, 52]), $a([12, 57]), $a([13, 62]), $a([14, 67]), $a([15, 72]), $a([16, 77])]); //#14945
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code16k.$ctx[id] = $_[id]); //#14945
        bwipp_code16k.__14946__ = 1; //#14945
        $_ = Object.getPrototypeOf($_); //#14945
    } //#14945
    $_.urows = $_.rows; //#14949
    var _CZ = $_.metrics; //#14950
    for (var _Ca = 0, _Cb = _CZ.length; _Ca < _Cb; _Ca++) { //#14958
        $_.m = $get(_CZ, _Ca); //#14951
        $_.r = $get($_.m, 0); //#14952
        $_.dcws = $get($_.m, 1); //#14953
        $_.okay = true; //#14954
        if (($_.urows != 0) && ($_.urows != $_.r)) { //#14955
            $_.okay = false; //#14955
        } //#14955
        if ($_.cws.length > $_.dcws) { //#14956
            $_.okay = false; //#14956
        } //#14956
        if ($_.okay) { //#14957
            break; //#14957
        } //#14957
    } //#14957
    if (!$_.okay) { //#14962
        $k[$j++] = 'bwipp.code16kNoValidSymbol#14961'; //#14961
        $k[$j++] = "Maximum length exceeded or data too large for given options"; //#14961
        bwipp_raiseerror(); //#14961
    } //#14961
    $k[$j++] = Infinity; //#14965
    $aload($_.cws); //#14965
    for (var _Cr = 0, _Cs = $f($_.dcws - $_.cws.length); _Cr < _Cs; _Cr++) { //#14965
        $k[$j++] = 103; //#14965
    } //#14965
    $_.cws = $a(); //#14965
    $k[$j++] = Infinity; //#14968
    $k[$j++] = $f(($f($_.r - 2) * 7) + $_.mode); //#14968
    $aload($_.cws); //#14968
    $_.cws = $a(); //#14968
    $k[$j++] = 0; //#14971
    for (var _D0 = 0, _Cz = $_.dcws; _D0 <= _Cz; _D0 += 1) { //#14971
        var _D3 = $k[--$j]; //#14971
        $k[$j++] = $f(_D3 + ((_D0 + 2) * $get($_.cws, _D0))); //#14971
    } //#14971
    $_.c1 = $k[--$j] % 107; //#14972
    $k[$j++] = 0; //#14973
    for (var _D7 = 0, _D6 = $_.dcws; _D7 <= _D6; _D7 += 1) { //#14973
        var _DA = $k[--$j]; //#14973
        $k[$j++] = $f(_DA + ((_D7 + 1) * $get($_.cws, _D7))); //#14973
    } //#14973
    $_.c2 = ($f($k[--$j] + ($_.c1 * $f($_.dcws + 2)))) % 107; //#14974
    $k[$j++] = Infinity; //#14975
    $aload($_.cws); //#14975
    $k[$j++] = $_.c1; //#14975
    $k[$j++] = $_.c2; //#14975
    $_.cws = $a(); //#14975
    var _DJ = $get($_.options, 'debugcws') !== undefined; //#14977
    if (_DJ) { //#14977
        $k[$j++] = 'bwipp.debugcws#14977'; //#14977
        $k[$j++] = $_.cws; //#14977
        bwipp_raiseerror(); //#14977
    } //#14977
    if (!bwipp_code16k.__15013__) { //#15013
        $_ = Object.create($_); //#15013
        $_.encs = $a(["212222", "222122", "222221", "121223", "121322", "131222", "122213", "122312", "132212", "221213", "221312", "231212", "112232", "122132", "122231", "113222", "123122", "123221", "223211", "221132", "221231", "213212", "223112", "312131", "311222", "321122", "321221", "312212", "322112", "322211", "212123", "212321", "232121", "111323", "131123", "131321", "112313", "132113", "132311", "211313", "231113", "231311", "112133", "112331", "132131", "113123", "113321", "133121", "313121", "211331", "231131", "213113", "213311", "213131", "311123", "311321", "331121", "312113", "312311", "332111", "314111", "221411", "431111", "111224", "111422", "121124", "121421", "141122", "141221", "112214", "112412", "122114", "122411", "142112", "142211", "241211", "221114", "413111", "241112", "134111", "111242", "121142", "121241", "114212", "124112", "124211", "411212", "421112", "421211", "212141", "214121", "412121", "111143", "111341", "131141", "114113", "114311", "411113", "411311", "113141", "114131", "311141", "411131", "211412", "211214", "211232", "211133"]); //#14998
        $_.startencs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "3112", "3211", "2221", "2122", "1411", "1132", "1231", "1114", "3112"]); //#15004
        $_.stopencsodd = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "3112", "1132", "1231", "1114", "3112", "3211", "2221", "2122", "1411"]); //#15008
        $_.stopencseven = $a(["2122", "1411", "1132", "1231", "1114", "3112", "1132", "1231", "1114", "3112", "3211", "2221", "2122", "1411", "3211", "2221"]); //#15012
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code16k.$ctx[id] = $_[id]); //#15012
        bwipp_code16k.__15013__ = 1; //#15012
        $_ = Object.getPrototypeOf($_); //#15012
    } //#15012
    if (($_.sam == -1) || (((~~($_.sam / 10)) % 2) == 1)) { //#15018
        $_.stopencs = $_.stopencsodd; //#15016
    } else { //#15018
        $_.stopencs = $_.stopencseven; //#15018
    } //#15018
    $_.rowbits = $a($_.r); //#15022
    for (var _DY = 0, _DX = $f($_.r - 1); _DY <= _DX; _DY += 1) { //#15039
        $_.i = _DY; //#15024
        $k[$j++] = Infinity; //#15025
        $k[$j++] = 10; //#15027
        $forall($get($_.startencs, $_.i), function() { //#15027
            var _Dc = $k[--$j]; //#15027
            $k[$j++] = $f(_Dc - 48); //#15027
        }); //#15027
        var _Df = $geti($_.cws, $_.i * 5, 5); //#15029
        $k[$j++] = 1; //#15031
        for (var _Dg = 0, _Dh = _Df.length; _Dg < _Dh; _Dg++) { //#15031
            $forall($get($_.encs, $get(_Df, _Dg)), function() { //#15030
                var _Dl = $k[--$j]; //#15030
                $k[$j++] = $f(_Dl - 48); //#15030
            }); //#15030
        } //#15030
        $forall($get($_.stopencs, $_.i), function() { //#15032
            var _Dp = $k[--$j]; //#15032
            $k[$j++] = $f(_Dp - 48); //#15032
        }); //#15032
        $k[$j++] = 1; //#15033
        $_.sbs = $a(); //#15033
        $k[$j++] = Infinity; //#15035
        var _Dr = $_.sbs; //#15036
        $k[$j++] = 1; //#15036
        for (var _Ds = 0, _Dt = _Dr.length; _Ds < _Dt; _Ds++) { //#15036
            var _Dv = $k[--$j]; //#15036
            var _Dw = (_Dv == 0) ? 1 : 0; //#15036
            $k[$j++] = _Dv; //#15036
            for (var _Dx = 0, _Dy = $get(_Dr, _Ds); _Dx < _Dy; _Dx++) { //#15036
                $k[$j++] = _Dw //#15036
            } //#15036
        } //#15036
        $astore($a($counttomark() - 1)); //#15037
        var _E1 = $k[--$j]; //#15037
        var _E2 = $k[--$j]; //#15037
        $k[$j++] = _E1; //#15037
        $k[$j++] = _E2; //#15037
        $j--; //#15037
        var _E3 = $k[--$j]; //#15037
        var _E4 = $k[--$j]; //#15037
        $k[$j++] = _E3; //#15037
        $k[$j++] = _E4; //#15037
        $j--; //#15037
        $k[$j++] = $_.rowbits; //#15038
        $k[$j++] = $_.i; //#15038
        $r(3, -1); //#15038
        var _E7 = $k[--$j]; //#15038
        var _E8 = $k[--$j]; //#15038
        $put($k[--$j], _E8, _E7); //#15038
    } //#15038
    $k[$j++] = Infinity; //#15042
    for (var _EB = 0, _EC = 81 * $_.sepheight; _EB < _EC; _EB++) { //#15043
        $k[$j++] = 1; //#15043
    } //#15043
    for (var _EF = 0, _EE = $f($_.r - 2); _EF <= _EE; _EF += 1) { //#15048
        $_.i = _EF; //#15045
        for (var _EH = 0, _EI = $_.rowheight; _EH < _EI; _EH++) { //#15046
            $aload($get($_.rowbits, $_.i)); //#15046
        } //#15046
        for (var _EN = 0, _EO = $_.sepheight; _EN < _EO; _EN++) { //#15047
            for (var _EP = 0, _EQ = 10; _EP < _EQ; _EP++) { //#15047
                $k[$j++] = 0; //#15047
            } //#15047
            for (var _ER = 0, _ES = 70; _ER < _ES; _ER++) { //#15047
                $k[$j++] = 1; //#15047
            } //#15047
            $k[$j++] = 0; //#15047
        } //#15047
    } //#15047
    for (var _EU = 0, _EV = $_.rowheight; _EU < _EV; _EU++) { //#15049
        $aload($get($_.rowbits, $f($_.r - 1))); //#15049
    } //#15049
    for (var _Ea = 0, _Eb = 81 * $_.sepheight; _Ea < _Eb; _Ea++) { //#15050
        $k[$j++] = 1; //#15050
    } //#15050
    $_.pixs = $a(); //#15050
    var _Eh = new Map([
        ["ren", 'renmatrix'],
        ["pixs", $_.pixs],
        ["pixx", 81],
        ["pixy", ~~($_.pixs.length / 81)],
        ["height", (~~($_.pixs.length / 81)) / 72],
        ["width", 81 / 72],
        ["opt", $_.options]
    ]); //#15061
    $k[$j++] = _Eh; //#15064
    if (!$_.dontdraw) { //#15064
        bwipp_renmatrix(); //#15064
    } //#15064
    $_ = Object.getPrototypeOf($_); //#15066
    $_ = Object.getPrototypeOf($_); //#15068
} //bwipp_code16k
function bwipp_code49() {
    $_ = Object.create($_); //#15099
    $_.dontdraw = false; //#15102
    $_.sam = -1; //#15103
    $_.append = false; //#15104
    $_.rows = 0; //#15105
    $_.rowheight = 8; //#15106
    $_.sepheight = 1; //#15107
    $_.parse = false; //#15108
    $_.parsefnc = false; //#15109
    $k[$j++] = $_; //#15111
    bwipp_processoptions(); //#15111
    $_.options = $k[--$j]; //#15111
    $_.barcode = $k[--$j]; //#15112
    if (($_.rows != 0) && (($_.rows < 2) || ($_.rows > 8))) { //#15116
        $k[$j++] = 'bwipp.code49badRows#15115'; //#15115
        $k[$j++] = "Code 49 must have 2 to 8 rows"; //#15115
        bwipp_raiseerror(); //#15115
    } //#15115
    if ($_.rowheight < 8) { //#15120
        $k[$j++] = 'bwipp.code49badRowHeight#15119'; //#15119
        $k[$j++] = "Code 49 must have rowheight of at least 8"; //#15119
        bwipp_raiseerror(); //#15119
    } //#15119
    if ($_.sepheight < 1) { //#15124
        $k[$j++] = 'bwipp.code49badSepHeight#15123'; //#15123
        $k[$j++] = "Code 49 must have sepheight of at least 1"; //#15123
        bwipp_raiseerror(); //#15123
    } //#15123
    if ($_.append && ($_.sam != -1)) { //#15128
        $k[$j++] = 'bwipp.code49samAndAppend#15127'; //#15127
        $k[$j++] = "sam and append cannot be specified together"; //#15127
        bwipp_raiseerror(); //#15127
    } //#15127
    if ($_.sam != -1) { //#15140
        $k[$j++] = true; //#15136
        for (var _A = 0, _B = 1; _A < _B; _A++) { //#15136
            var _C = $_.sam; //#15133
            if ((_C < 12) || (_C > 99)) { //#15133
                $j--; //#15133
                $k[$j++] = false; //#15133
                break; //#15133
            } //#15133
            if (($_.sam % 10) < 2) { //#15134
                $j--; //#15134
                $k[$j++] = false; //#15134
                break; //#15134
            } //#15134
            if ((~~($_.sam / 10)) > ($_.sam % 10)) { //#15135
                $j--; //#15135
                $k[$j++] = false; //#15135
                break; //#15135
            } //#15135
        } //#15135
        if ($nt($k[--$j])) { //#15139
            $k[$j++] = 'bwipp.code49badSAM#15138'; //#15138
            $k[$j++] = "SAM must be formatted as \"NM\" for Nth of M symbols, from 2 to 9 symbols"; //#15138
            bwipp_raiseerror(); //#15138
        } //#15138
    } //#15138
    bwipp_loadctx(bwipp_code49); //#15142
    if (!bwipp_code49.__15146__) { //#15146
        $_ = Object.create($_); //#15146
        $_.s1 = -1; //#15145
        $_.s2 = -2; //#15145
        $_.fn1 = -3; //#15145
        $_.fn2 = -4; //#15145
        $_.fn3 = -5; //#15145
        $_.ns = -6; //#15145
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code49.$ctx[id] = $_[id]); //#15145
        bwipp_code49.__15146__ = 1; //#15145
        $_ = Object.getPrototypeOf($_); //#15145
    } //#15145
    var _N = new Map([
        ["parse", $_.parse],
        ["parsefnc", $_.parsefnc],
        ["FNC1", $_.fn1],
        ["FNC2", $_.fn2],
        ["FNC3", $_.fn3]
    ]); //#15154
    $_.fncvals = _N; //#15155
    $k[$j++] = 'msg'; //#15156
    $k[$j++] = $_.barcode; //#15156
    $k[$j++] = $_.fncvals; //#15156
    bwipp_parseinput(); //#15156
    var _Q = $k[--$j]; //#15156
    $_[$k[--$j]] = _Q; //#15156
    $_.msglen = $_.msg.length; //#15157
    $forall($_.msg, function() { //#15163
        if ($k[--$j] > 127) { //#15162
            $k[$j++] = 'bwipp.code49badCharacter#15161'; //#15161
            $k[$j++] = "Code 49 can only support ASCII characters with values 0 to 127"; //#15161
            bwipp_raiseerror(); //#15161
        } //#15161
    }); //#15161
    if (!bwipp_code49.__15205__) { //#15205
        $_ = Object.create($_); //#15205
        $_.charmap = $a(["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "-", ".", " ", "$", "/", "+", "%", $_.s1, $_.s2, $_.fn1, $_.fn2, $_.fn3, $_.ns]); //#15173
        $_.charvals = new Map; //#15176
        for (var _c = 0; _c <= 48; _c += 1) { //#15182
            $_.i = _c; //#15178
            var _f = $get($_.charmap, $_.i); //#15179
            $k[$j++] = _f; //#15180
            if ($eq($type(_f), 'stringtype')) { //#15180
                var _i = $get($k[--$j], 0); //#15180
                $k[$j++] = _i; //#15180
            } //#15180
            $put($_.charvals, $k[--$j], $_.i); //#15181
        } //#15181
        $_.combos = $a(["1 ", "1A", "1B", "1C", "1D", "1E", "1F", "1G", "1H", "1I", "1J", "1K", "1L", "1M", "1N", "1O", "1P", "1Q", "1R", "1S", "1T", "1U", "1V", "1W", "1X", "1Y", "1Z", "11", "12", "13", "14", "15", "  ", "16", "17", "18", " $", " %", "19", "10", "1-", "1.", "1$", " +", "1/", " -", " .", " /", " 0", " 1", " 2", " 3", " 4", " 5", " 6", " 7", " 8", " 9", "1+", "21", "22", "23", "24", "25", "26", " A", " B", " C", " D", " E", " F", " G", " H", " I", " J", " K", " L", " M", " N", " O", " P", " Q", " R", " S", " T", " U", " V", " W", " X", " Y", " Z", "27", "28", "29", "20", "2-", "2.", "2A", "2B", "2C", "2D", "2E", "2F", "2G", "2H", "2I", "2J", "2K", "2L", "2M", "2N", "2O", "2P", "2Q", "2R", "2S", "2T", "2U", "2V", "2W", "2X", "2Y", "2Z", "2$", "2/", "2+", "2%", "2 "]); //#15194
        for (var _n = 0; _n <= 127; _n += 1) { //#15204
            $_.i = _n; //#15196
            var _q = $get($_.combos, $_.i); //#15197
            $_.c1 = $get(_q, 0); //#15197
            $_.c2 = $get(_q, 1); //#15197
            if ($_.c1 == 49) { //#15200
                $put($_.charvals, $_.i, $a([$get($_.charvals, $_.s1), $get($_.charvals, $_.c2)])); //#15199
            } //#15199
            if ($_.c1 == 50) { //#15203
                $put($_.charvals, $_.i, $a([$get($_.charvals, $_.s2), $get($_.charvals, $_.c2)])); //#15202
            } //#15202
        } //#15202
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code49.$ctx[id] = $_[id]); //#15202
        bwipp_code49.__15205__ = 1; //#15202
        $_ = Object.getPrototypeOf($_); //#15202
    } //#15202
    $_.encodealpha = function() {
        var _1G = $get($_.charvals, $k[--$j]); //#15208
        $k[$j++] = _1G; //#15209
        if ($ne($type(_1G), 'arraytype')) { //#15209
            $astore($a(1)); //#15209
        } //#15209
        var _1J = $k[--$j]; //#15210
        $puti($_.cws, $_.j, _1J); //#15210
        $_.j = _1J.length + $_.j; //#15211
    }; //#15211
    $_.base48 = function() {
        var _1N = $k[--$j]; //#15215
        $k[$j++] = 0; //#15215
        $forall(_1N, function() { //#15215
            var _1O = $k[--$j]; //#15215
            var _1P = $k[--$j]; //#15215
            $k[$j++] = $f($f(_1O - 48) + (_1P * 10)); //#15215
        }); //#15215
        $k[$j++] = Infinity; //#15216
        $r(3, 1); //#15216
        var _1Q = $k[--$j]; //#15216
        var _1R = $k[--$j]; //#15216
        $k[$j++] = _1Q; //#15216
        for (var _1S = 0, _1T = $f(_1R - 1); _1S < _1T; _1S++) { //#15216
            var _1U = $k[--$j]; //#15216
            $k[$j++] = _1U % 48; //#15216
            $k[$j++] = ~~(_1U / 48); //#15216
        } //#15216
        var _1V = $a(); //#15216
        $k[$j++] = _1V; //#15217
        $k[$j++] = Infinity; //#15217
        var _1W = $k[--$j]; //#15217
        var _1X = $k[--$j]; //#15217
        $k[$j++] = _1W; //#15217
        $k[$j++] = _1X; //#15217
        for (var _1Y = _1X.length - 1; _1Y >= 0; _1Y -= 1) { //#15217
            var _1Z = $k[--$j]; //#15217
            $k[$j++] = $get(_1Z, _1Y); //#15217
            $k[$j++] = _1Z; //#15217
        } //#15217
        $j--; //#15217
        var _1b = $a(); //#15217
        $puti($_.cws, $_.j, _1b); //#15218
        $_.j = _1b.length + $_.j; //#15219
    }; //#15219
    $_.encodenumeric = function() {
        $_.nums = $k[--$j]; //#15223
        var _1h = $_.nums.length; //#15224
        var _1i = _1h % 5; //#15224
        $k[$j++] = 'pre'; //#15224
        $k[$j++] = _1h; //#15224
        $k[$j++] = _1i; //#15224
        if (_1i != 2) { //#15224
            var _1j = $k[--$j]; //#15224
            var _1k = $k[--$j]; //#15224
            $k[$j++] = $f(_1k - _1j); //#15224
        } else { //#15224
            var _1l = $k[--$j]; //#15224
            var _1m = $k[--$j]; //#15224
            $k[$j++] = $f($f(_1m - _1l) - 5); //#15224
        } //#15224
        var _1n = $k[--$j]; //#15224
        $_[$k[--$j]] = _1n; //#15224
        for (var _1r = 0, _1q = $f($_.pre - 1); _1r <= _1q; _1r += 5) { //#15225
            $k[$j++] = 3; //#15225
            $k[$j++] = $geti($_.nums, _1r, 5); //#15225
            $_.base48(); //#15225
        } //#15225
        $_.nums = $geti($_.nums, $_.pre, $f($_.nums.length - $_.pre)); //#15226
        var _20 = $_.nums.length; //#15228
        $k[$j++] = _20; //#15228
        if (_20 == 1) { //#15228
            $k[$j++] = $get($_.nums, $_.i); //#15228
            $_.encodealpha(); //#15228
        } //#15228
        var _24 = $k[--$j]; //#15229
        $k[$j++] = _24; //#15229
        if (_24 == 3) { //#15229
            $k[$j++] = 2; //#15229
            $k[$j++] = $_.nums; //#15229
            $_.base48(); //#15229
        } //#15229
        var _26 = $k[--$j]; //#15230
        $k[$j++] = _26; //#15230
        if (_26 == 4) { //#15230
            $k[$j++] = 3; //#15230
            $k[$j++] = Infinity; //#15230
            $k[$j++] = 49; //#15230
            $k[$j++] = 48; //#15230
            $aload($_.nums); //#15230
            var _28 = $a(); //#15230
            $k[$j++] = _28; //#15230
            $_.base48(); //#15230
        } //#15230
        if ($k[--$j] == 7) { //#15234
            $k[$j++] = 3; //#15232
            $k[$j++] = Infinity; //#15232
            $k[$j++] = 49; //#15232
            $k[$j++] = 48; //#15232
            $aload($geti($_.nums, 0, 4)); //#15232
            var _2C = $a(); //#15232
            $k[$j++] = _2C; //#15232
            $_.base48(); //#15232
            $k[$j++] = 2; //#15233
            $k[$j++] = $geti($_.nums, 4, 3); //#15233
            $_.base48(); //#15233
        } //#15233
    }; //#15233
    $k[$j++] = Infinity; //#15238
    for (var _2G = 0, _2H = $_.msglen; _2G < _2H; _2G++) { //#15238
        $k[$j++] = 0; //#15238
    } //#15238
    $k[$j++] = 0; //#15238
    $_.numericruns = $a(); //#15238
    for (var _2K = $_.msglen - 1; _2K >= 0; _2K -= 1) { //#15247
        $_.i = _2K; //#15240
        var _2N = $get($_.msg, $_.i); //#15241
        if ((_2N >= 48) && (_2N <= 57)) { //#15245
            $put($_.numericruns, $_.i, $f($get($_.numericruns, $_.i + 1) + 1)); //#15243
        } else { //#15245
            $put($_.numericruns, $_.i, 0); //#15245
        } //#15245
    } //#15245
    $_.cws = $a(($_.msglen * 2) + 1); //#15249
    if (!bwipp_code49.__15262__) { //#15262
        $_ = Object.create($_); //#15262
        $_.samval = $a([12, 22, 13, 23, 33, 14, 24, 34, 44, 15, 25, 35, 45, 55, 16, 26, 36, 46, 56, 66, 17, 27, 37, 47, 57, 67, 77, 18, 28, 38, 48, 58, 68, 78, 88, 19, 29, 39, 49, 59, 69, 79, 89, 99]); //#15261
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code49.$ctx[id] = $_[id]); //#15261
        bwipp_code49.__15262__ = 1; //#15261
        $_ = Object.getPrototypeOf($_); //#15261
    } //#15261
    for (;;) { //#15298
        if ($_.append) { //#15271
            $_.mode = 1; //#15267
            $_.method = "alpha"; //#15268
            $_.i = 0; //#15269
            $_.j = 0; //#15269
            break; //#15270
        } //#15270
        if ($_.sam != -1) { //#15278
            $_.mode = 3; //#15273
            $k[$j++] = $_.cws; //#15274
            $k[$j++] = 0; //#15274
            for (var _2c = 0; _2c <= 43; _2c += 1) { //#15274
                $k[$j++] = _2c; //#15274
                if ($get($_.samval, _2c) != $_.sam) { //#15274
                    $j--; //#15274
                } //#15274
            } //#15274
            var _2g = $k[--$j]; //#15274
            var _2h = $k[--$j]; //#15274
            $put($k[--$j], _2h, $f(_2g + 1)); //#15274
            $_.method = "alpha"; //#15275
            $_.i = 0; //#15276
            $_.j = 1; //#15276
            break; //#15277
        } //#15277
        if ($get($_.numericruns, 0) >= 5) { //#15283
            $_.mode = 2; //#15280
            $_.method = "numeric"; //#15281
            $_.i = 0; //#15281
            $_.j = 0; //#15281
            break; //#15282
        } //#15282
        var _2o = $get($_.charvals, $get($_.msg, 0)); //#15284
        $k[$j++] = _2o; //#15291
        if ($ne($type(_2o), 'arraytype')) { //#15291
            $j--; //#15286
            $_.mode = 0; //#15287
            $_.method = "alpha"; //#15288
            $_.i = 0; //#15289
            $_.j = 0; //#15289
            break; //#15290
        } //#15290
        var _2s = ($get($k[--$j], 0) == 43) ? 4 : 5; //#15293
        $_.mode = _2s; //#15293
        $put($_.cws, 0, $get($get($_.charvals, $get($_.msg, 0)), 1)); //#15294
        $_.method = "alpha"; //#15295
        $_.i = 1; //#15296
        $_.j = 1; //#15296
        break; //#15297
    } //#15297
    for (;;) { //#15325
        if ($_.i == $_.msglen) { //#15302
            break; //#15302
        } //#15302
        for (;;) { //#15324
            if ($eq($_.method, "alpha")) { //#15313
                if ($get($_.numericruns, $_.i) >= 5) { //#15309
                    $k[$j++] = $_.ns; //#15306
                    $_.encodealpha(); //#15306
                    $_.method = "numeric"; //#15307
                    break; //#15308
                } //#15308
                $k[$j++] = $get($_.msg, $_.i); //#15310
                $_.encodealpha(); //#15310
                $_.i = $_.i + 1; //#15311
                break; //#15312
            } //#15312
            if ($eq($_.method, "numeric")) { //#15323
                if ($get($_.numericruns, $_.i) < 5) { //#15319
                    $k[$j++] = $_.ns; //#15316
                    $_.encodealpha(); //#15316
                    $_.method = "alpha"; //#15317
                    break; //#15318
                } //#15318
                $k[$j++] = $geti($_.msg, $_.i, $get($_.numericruns, $_.i)); //#15320
                $_.encodenumeric(); //#15320
                $_.i = $f($_.i + $get($_.numericruns, $_.i)); //#15321
                break; //#15322
            } //#15322
        } //#15322
    } //#15322
    $_.cws = $geti($_.cws, 0, $_.j); //#15326
    if (!bwipp_code49.__15340__) { //#15340
        $_ = Object.create($_); //#15340
        $_.metrics = $a([$a([2, 9]), $a([3, 16]), $a([4, 23]), $a([5, 30]), $a([6, 37]), $a([7, 42]), $a([8, 49])]); //#15339
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code49.$ctx[id] = $_[id]); //#15339
        bwipp_code49.__15340__ = 1; //#15339
        $_ = Object.getPrototypeOf($_); //#15339
    } //#15339
    $_.urows = $_.rows; //#15343
    var _3c = $_.metrics; //#15344
    for (var _3d = 0, _3e = _3c.length; _3d < _3e; _3d++) { //#15352
        $_.m = $get(_3c, _3d); //#15345
        $_.r = $get($_.m, 0); //#15346
        $_.dcws = $get($_.m, 1); //#15347
        $_.okay = true; //#15348
        if (($_.urows != 0) && ($_.urows != $_.r)) { //#15349
            $_.okay = false; //#15349
        } //#15349
        if ($_.cws.length > $_.dcws) { //#15350
            $_.okay = false; //#15350
        } //#15350
        if ($_.okay) { //#15351
            break; //#15351
        } //#15351
    } //#15351
    if (!$_.okay) { //#15356
        $k[$j++] = 'bwipp.code49noValidSymbol#15355'; //#15355
        $k[$j++] = "Maximum length exceeded"; //#15355
        bwipp_raiseerror(); //#15355
    } //#15355
    $k[$j++] = Infinity; //#15359
    $aload($_.cws); //#15359
    for (var _3u = 0, _3v = $f($_.dcws - $_.cws.length); _3u < _3v; _3u++) { //#15359
        $k[$j++] = 48; //#15359
    } //#15359
    $_.cws = $a(); //#15359
    $_.ccs = $a($_.r * 8); //#15362
    $_.j = 0; //#15363
    for (var _41 = 0, _40 = $f($_.r - 2); _41 <= _40; _41 += 1) { //#15370
        $_.i = _41; //#15365
        $_.cc = $geti($_.cws, $_.j, 7); //#15366
        $puti($_.ccs, $_.i * 8, $_.cc); //#15367
        var _4A = $_.cc; //#15368
        $k[$j++] = $_.ccs; //#15368
        $k[$j++] = ($_.i * 8) + 7; //#15368
        $k[$j++] = 0; //#15368
        for (var _4B = 0, _4C = _4A.length; _4B < _4C; _4B++) { //#15368
            var _4E = $k[--$j]; //#15368
            $k[$j++] = $f(_4E + $get(_4A, _4B)); //#15368
        } //#15368
        var _4F = $k[--$j]; //#15368
        var _4G = $k[--$j]; //#15368
        $put($k[--$j], _4G, _4F % 49); //#15368
        $_.j = $_.j + 7; //#15369
    } //#15369
    if ($_.j < $_.dcws) { //#15373
        $puti($_.ccs, $_.ccs.length - 8, $geti($_.cws, $_.j, $f($_.dcws - $_.j))); //#15372
    } //#15372
    $_.cr7 = $f(($f($_.r - 2) * 7) + $_.mode); //#15376
    $put($_.ccs, $_.ccs.length - 2, $_.cr7); //#15377
    if (!bwipp_code49.__15386__) { //#15386
        $_ = Object.create($_); //#15386
        var _4X = $a([1, 9, 31, 26, 2, 12, 17, 23, 37, 18, 22, 6, 27, 44, 15, 43, 39, 11, 13, 5, 41, 33, 36, 8, 4, 32, 3, 19, 40, 25, 29, 10, 24, 30]); //#15382
        $k[$j++] = _4X; //#15383
        $k[$j++] = _4X; //#15383
        $k[$j++] = Infinity; //#15383
        var _4Y = $k[--$j]; //#15383
        var _4a = $geti($k[--$j], 0, 32); //#15383
        $k[$j++] = _4Y; //#15383
        $k[$j++] = 20; //#15383
        $aload(_4a); //#15383
        $_.weightx = $a(); //#15383
        var _4c = $k[--$j]; //#15384
        $k[$j++] = _4c; //#15384
        $k[$j++] = _4c; //#15384
        $k[$j++] = Infinity; //#15384
        var _4d = $k[--$j]; //#15384
        var _4f = $geti($k[--$j], 1, 32); //#15384
        $k[$j++] = _4d; //#15384
        $k[$j++] = 16; //#15384
        $aload(_4f); //#15384
        $_.weighty = $a(); //#15384
        $k[$j++] = Infinity; //#15385
        var _4h = $k[--$j]; //#15385
        var _4j = $geti($k[--$j], 2, 32); //#15385
        $k[$j++] = _4h; //#15385
        $k[$j++] = 38; //#15385
        $aload(_4j); //#15385
        $_.weightz = $a(); //#15385
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code49.$ctx[id] = $_[id]); //#15385
        bwipp_code49.__15386__ = 1; //#15385
        $_ = Object.getPrototypeOf($_); //#15385
    } //#15385
    $_.calccheck = function() {
        $_.weights = $k[--$j]; //#15388
        $_.score = 0; //#15389
        for (var _4p = 0, _4o = (~~(($f($_.r - 1) * 8) / 2)) - 1; _4p <= _4o; _4p += 1) { //#15394
            $_.i = _4p; //#15391
            $_.score = $f((($f(($get($_.ccs, $_.i * 2) * 49) + $get($_.ccs, ($_.i * 2) + 1))) * $get($_.weights, $_.i + 1)) + $_.score); //#15393
        } //#15393
        $k[$j++] = $_.score; //#15395
    }; //#15395
    $_.lastrow = $geti($_.ccs, $_.ccs.length - 8, 8); //#15397
    if ($_.r >= 7) { //#15404
        $k[$j++] = $_.cr7 * $get($_.weightz, 0); //#15401
        $k[$j++] = $_.weightz; //#15401
        $_.calccheck(); //#15401
        var _59 = $k[--$j]; //#15401
        var _5B = $f($k[--$j] + _59) % 2401; //#15402
        $k[$j++] = ~~(_5B / 49); //#15402
        $k[$j++] = _5B % 49; //#15402
        $astore($a(2)); //#15402
        $k[$j++] = $_.lastrow; //#15403
        $k[$j++] = 0; //#15403
        $r(3, -1); //#15403
        var _5E = $k[--$j]; //#15403
        var _5F = $k[--$j]; //#15403
        $puti($k[--$j], _5F, _5E); //#15403
    } //#15403
    $_.wr1 = $f(($get($_.lastrow, 0) * 49) + $get($_.lastrow, 1)); //#15405
    $k[$j++] = $_.cr7 * $get($_.weighty, 0); //#15408
    $k[$j++] = $_.weighty; //#15408
    $_.calccheck(); //#15408
    var _5P = $k[--$j]; //#15408
    var _5V = ($f($f($k[--$j] + _5P) + ($_.wr1 * $get($_.weighty, $f(($_.r * 4) - 3))))) % 2401; //#15410
    $_.wr2 = _5V; //#15410
    $k[$j++] = ~~(_5V / 49); //#15411
    $k[$j++] = _5V % 49; //#15411
    $astore($a(2)); //#15411
    $k[$j++] = $_.lastrow; //#15412
    $k[$j++] = 2; //#15412
    $r(3, -1); //#15412
    var _5Y = $k[--$j]; //#15412
    var _5Z = $k[--$j]; //#15412
    $puti($k[--$j], _5Z, _5Y); //#15412
    $k[$j++] = $_.cr7 * $get($_.weightx, 0); //#15415
    $k[$j++] = $_.weightx; //#15415
    $_.calccheck(); //#15415
    var _5f = $k[--$j]; //#15415
    var _5p = ($f(($f($f($k[--$j] + _5f) + ($_.wr1 * $get($_.weightx, $f(($_.r * 4) - 3))))) + ($_.wr2 * $get($_.weightx, $f(($_.r * 4) - 2))))) % 2401; //#15419
    $k[$j++] = ~~(_5p / 49); //#15419
    $k[$j++] = _5p % 49; //#15419
    $astore($a(2)); //#15419
    $k[$j++] = $_.lastrow; //#15420
    $k[$j++] = 4; //#15420
    $r(3, -1); //#15420
    var _5s = $k[--$j]; //#15420
    var _5t = $k[--$j]; //#15420
    $puti($k[--$j], _5t, _5s); //#15420
    var _5x = $geti($_.ccs, $_.ccs.length - 8, 7); //#15423
    $k[$j++] = 0; //#15423
    for (var _5y = 0, _5z = _5x.length; _5y < _5z; _5y++) { //#15423
        var _61 = $k[--$j]; //#15423
        $k[$j++] = $f(_61 + $get(_5x, _5y)); //#15423
    } //#15423
    $put($_.ccs, $_.ccs.length - 1, $k[--$j] % 49); //#15424
    var _66 = $get($_.options, 'debugcws') !== undefined; //#15426
    if (_66) { //#15426
        $k[$j++] = 'bwipp.debugcws#15426'; //#15426
        $k[$j++] = $_.ccs; //#15426
        bwipp_raiseerror(); //#15426
    } //#15426
    if (!bwipp_code49.__16124__) { //#16124
        $_ = Object.create($_); //#16124
        $_.patterns = $a([$a(["11521132", "25112131", "14212132", "25121221", "14221222", "12412132", "23321221", "12421222", "21521221", "15112222", "15121312", "13312222", "24221311", "13321312", "11512222", "22421311", "11521312", "25112311", "14212312", "23312311", "12412312", "21512311", "16121131", "14321131", "12521131", "15212131", "15221221", "13412131", "13421221", "11612131", "16112221", "16121311", "14312221", "14321311", "12512221", "12521311", "15212311", "13412311", "11612311", "11131135", "31131133", "51131131", "21122134", "41122132", "21131224", "41131222", "11113135", "31113133", "51113131", "11122225", "31122223", "51122221", "11131315", "31131313", "51131311", "21113224", "41113222", "21122314", "41122312", "11113315", "31113313", "51113311", "12131134", "32131132", "21231133", "41231131", "22122133", "42122131", "11222134", "22131223", "42131221", "11231224", "31231222", "12113134", "32113132", "12122224", "32122222", "12131314", "32131312", "21231313", "41231311", "22113223", "42113221", "11213224", "22122313", "42122311", "11222314", "31222312", "12113314", "32113312", "21213313", "41213311", "13131133", "33131131", "22231132", "11331133", "31331131", "23122132", "12222133", "23131222", "12231223", "32231221", "21331222", "13113133", "33113131", "13122223", "33122221", "11313133", "13131313", "33131311", "11322223", "22231312", "11331313", "31331311", "23113222", "12213223", "23122312", "12222313", "32222311", "21322312", "13113313", "33113311", "22213312", "11313313", "31313311", "14131132", "23231131", "12331132", "21431131", "24122131", "13222132", "24131221", "13231222", "11422132", "22331221", "11431222", "14113132", "14122222", "12313132", "14131312", "12322222", "23231311", "12331312", "21431311", "24113221", "13213222", "24122311", "13222312", "11413222", "22322311", "11422312", "14113312", "23213311", "12313312", "21413311", "15131131", "13331131", "14222131", "14231221", "12422131", "12431221", "15113131", "15122221", "13313131", "15131311", "13322221", "11513131", "13331311", "11522221", "14213221", "14222311", "12413221", "12422311", "15113311", "13313311", "11513311", "11141134", "31141132", "21132133", "41132131", "21141223", "41141221", "11123134", "31123132", "11132224", "31132222", "11141314", "31141312", "21114133", "41114131", "21123223", "41123221", "21132313", "41132311", "11114224", "31114222", "11123314", "31123312", "21114313", "41114311", "12141133", "32141131", "21241132", "22132132", "11232133", "22141222", "11241223", "31241221", "12123133", "32123131", "12132223", "32132221", "12141313", "32141311", "21241312", "22114132", "11214133", "22123222", "11223223", "22132312", "11232313", "31232311", "12114223", "32114221", "12123313", "32123311", "21223312", "22114312", "11214313", "31214311", "13141132", "22241131", "11341132", "23132131", "12232132", "23141221", "12241222", "21341221", "13123132", "13132222", "11323132", "13141312", "11332222", "22241311", "11341312", "23114131", "12214132", "23123221", "12223222", "23132311", "12232312", "21332311", "13114222", "13123312", "11314222", "22223311", "11323312", "23114311", "12214312", "21314311", "14141131", "12341131", "13232131", "13241221", "11432131", "14123131", "14132221", "12323131", "14141311", "12332221", "12341311", "13214131", "13223221", "11414131", "13232311", "11423221", "11432311", "14114221", "14123311", "12314221", "12323311", "13214311", "11414311", "11151133", "31151131", "21142132", "21151222", "11133133", "31133131", "11142223", "31142221", "11151313", "31151311", "21124132", "21133222", "21142312", "11115133", "31115131", "11124223", "31124221", "11133313", "31133311", "21115222", "21124312", "12151132", "21251131", "22142131", "11242132", "22151221", "11251222", "12133132", "12142222", "12151312", "21251311", "22124131", "11224132", "22133221", "11233222", "22142311", "11242312", "12115132", "12124222", "12133312", "21233311", "22115221", "11215222", "22124311", "11224312", "13151131", "12242131", "12251221", "13133131", "13142221", "11333131", "13151311", "11342221", "12224131", "12233221", "12242311", "13115131", "13124221", "11315131", "13133311", "11324221", "11333311", "12215221", "12224311", "11161132", "21152131", "21161221", "11143132", "11152222", "11161312", "21134131", "21143221", "21152311", "11125132", "11134222", "11143312", "21116131", "21125221", "21134311", "12161131", "11252131", "12143131", "12152221", "12161311", "11234131", "11243221", "11252311", "12125131", "12134221", "12143311", "11216131", "11225221", "11234311", "11111236", "31111234", "51111232", "21111325", "41111323", "61111321", "11111416", "31111414", "51111412", "31211143", "51211141", "12111235", "32111233", "52111231", "21211234", "41211232", "22111324", "42111322", "11211325", "31211323", "51211321", "12111415", "32111413", "52111411", "21211414", "41211412", "12211144", "32211142", "21311143", "41311141", "13111234", "33111232", "22211233", "42211231", "11311234", "31311232", "23111323", "43111321", "12211324", "32211322", "21311323", "41311321", "13111414", "33111412", "22211413", "42211411", "11311414", "31311412", "13211143", "33211141", "22311142", "11411143", "31411141", "14111233", "34111231", "23211232", "12311233", "32311231", "21411232", "24111322", "13211323", "33211321", "22311322", "11411323", "31411321", "14111413", "34111411", "23211412", "12311413", "32311411", "21411412", "14211142", "23311141", "12411142", "21511141", "15111232", "24211231", "13311232", "22411231", "11511232", "25111321", "14211322", "23311321", "12411322", "21511321", "15111412", "24211411", "13311412", "22411411", "11511412", "15211141", "13411141", "11611141", "16111231", "14311231", "12511231", "15211321", "13411321", "11611321", "16111411", "14311411", "12511411", "21121144", "41121142", "11112145", "31112143", "51112141", "11121235", "31121233", "51121231", "21112234", "41112232", "21121324", "41121322", "11112325", "31112323", "51112321", "11121415", "31121413", "51121411", "21112414", "41112412", "22121143", "42121141", "11221144", "31221142", "12112144", "32112142", "12121234", "32121232", "21221233", "41221231", "22112233", "42112231", "11212234", "22121323", "42121321", "11221324", "31221322", "12112324", "32112322", "12121414", "32121412", "21221413", "41221411", "22112413", "42112411", "11212414", "31212412", "23121142", "12221143", "32221141", "21321142", "13112143", "33112141", "13121233", "33121231", "11312143", "22221232", "11321233", "31321231", "23112232", "12212233", "23121322", "12221323", "32221321", "21321322", "13112323", "33112321", "13121413", "33121411", "11312323", "22221412", "11321413", "31321411", "23112412", "12212413", "32212411", "21312412", "24121141", "13221142", "22321141", "11421142", "14112142", "14121232", "12312142", "23221231", "12321232", "21421231", "24112231", "13212232", "24121321", "13221322", "11412232", "22321321", "11421322", "14112322", "14121412", "12312322", "23221411", "12321412", "21421411", "24112411", "13212412", "22312411", "11412412", "14221141", "12421141", "15112141", "15121231", "13312141", "13321231", "11512141", "11521231", "14212231", "14221321", "12412231", "12421321", "15112321", "15121411", "13312321", "13321411", "11512321", "11521411", "14212411", "12412411", "21131143", "41131141", "11122144", "31122142", "11131234", "31131232", "21113143", "41113141", "21122233", "41122231", "21131323", "41131321", "11113234", "31113232", "11122324", "31122322", "11131414", "31131412", "21113323", "41113321", "21122413", "41122411", "11113414", "31113412", "22131142", "11231143", "31231141", "12122143", "32122141", "12131233", "32131231", "21231232", "22113142", "11213143", "22122232", "11222233", "22131322", "11231323", "31231321", "12113233", "32113231", "12122323", "32122321", "12131413", "32131411", "21231412", "22113322", "11213323", "22122412", "11222413", "31222411", "12113413", "32113411", "21213412", "23131141", "12231142", "21331141", "13122142", "13131232", "11322142", "22231231", "11331232", "23113141", "12213142", "23122231", "12222232", "23131321", "12231322", "21331321", "13113232", "13122322", "11313232", "13131412", "11322322", "22231411", "11331412", "23113321", "12213322", "23122411", "12222412", "21322411", "13113412", "22213411", "11313412", "13231141", "11431141", "14122141", "14131231", "12322141", "12331231", "13213141", "13222231", "11413141", "13231321", "11422231", "11431321", "14113231", "14122321", "12313231", "14131411", "12322321", "12331411", "13213321", "13222411", "11413321", "11422411", "14113411", "12313411", "21141142", "11132143", "31132141", "11141233", "31141231", "21123142", "21132232", "21141322", "11114143", "31114141", "11123233", "31123231", "11132323", "31132321", "11141413", "31141411", "21114232", "21123322", "21132412", "11114323", "31114321", "11123413", "31123411", "22141141", "11241142", "12132142", "12141232", "21241231", "22123141", "11223142", "22132231", "11232232", "22141321", "11241322", "12114142", "12123232", "12132322", "12141412", "21241411", "22114231", "11214232", "22123321", "11223322", "22132411", "11232412", "12114322", "12123412", "21223411", "12241141", "13132141", "13141231", "11332141", "11341231", "12223141", "12232231", "12241321", "13114141", "13123231", "11314141", "13132321", "11323231", "13141411", "11332321", "11341411", "12214231", "12223321", "12232411", "13114321", "13123411", "11314321", "11323411", "21151141", "11142142", "11151232", "21133141", "21142231", "21151321", "11124142", "11133232", "11142322", "11151412", "21115141", "21124231", "21133321", "21142411", "11115232", "11124322", "11133412", "11251141", "12142141", "12151231", "11233141", "11242231", "11251321", "12124141", "12133231", "12142321", "12151411", "11215141", "11224231", "11233321", "11242411", "12115231", "12124321", "12133411", "11152141", "11161231", "11134141", "11143231", "11152321", "11161411", "11116141", "11125231", "11134321", "11143411", "21111244", "41111242", "11111335", "31111333", "51111331", "21111424", "41111422", "11111515", "31111513", "51111511", "21211153", "41211151", "22111243", "42111241", "11211244", "31211242", "12111334", "32111332", "21211333", "41211331", "22111423", "42111421", "11211424", "31211422", "12111514", "32111512", "21211513", "41211511", "22211152", "11311153", "31311151", "23111242", "12211243", "32211241", "21311242", "13111333", "33111331", "22211332", "11311333", "31311331", "23111422", "12211423", "32211421", "21311422", "13111513", "33111511", "22211512", "11311513", "31311511", "23211151", "12311152", "21411151", "24111241", "13211242", "22311241", "11411242", "14111332", "23211331", "12311332", "21411331", "24111421", "13211422", "22311421", "11411422", "14111512", "23211511", "12311512", "21411511", "13311151", "11511151", "14211241", "12411241", "15111331", "13311331", "11511331", "14211421", "12411421", "15111511", "13311511", "11511511", "31121152", "21112153", "41112151", "21121243", "41121241", "11112244", "31112242", "11121334", "31121332", "21112333", "41112331", "21121423", "41121421", "11112424", "31112422", "11121514", "31121512", "21112513", "41112511", "12121153", "32121151", "21221152", "22112152", "11212153", "22121242", "11221243", "31221241", "12112243", "32112241", "12121333", "32121331", "21221332", "22112332", "11212333", "22121422", "11221423", "31221421", "12112423", "32112421", "12121513", "32121511", "21221512", "22112512", "11212513", "31212511", "13121152", "22221151", "11321152", "23112151", "12212152", "23121241", "12221242", "21321241", "13112242", "13121332", "11312242", "22221331", "11321332", "23112331", "12212332", "23121421", "12221422", "21321421", "13112422", "13121512", "11312422", "22221511", "11321512", "23112511", "12212512", "21312511", "14121151", "12321151", "13212151", "13221241", "11412151", "11421241", "14112241", "14121331", "12312241", "12321331", "13212331", "13221421", "11412331", "11421421", "14112421", "14121511", "12312421", "12321511", "13212511", "11412511", "11131153", "31131151", "21122152", "21131242", "11113153", "31113151", "11122243", "31122241", "11131333", "31131331", "21113242", "21122332", "21131422", "11113333", "31113331", "11122423", "31122421", "11131513", "31131511", "21113422", "21122512", "12131152", "21231151", "22122151", "11222152", "22131241", "11231242", "12113152", "12122242", "12131332", "21231331", "22113241", "11213242", "22122331", "11222332", "22131421", "11231422", "12113332", "12122422", "12131512", "21231511", "22113421", "11213422", "22122511", "11222512", "13131151", "11331151", "12222151", "12231241", "13113151", "13122241", "11313151", "13131331", "11322241", "11331331", "12213241", "12222331", "12231421", "13113331", "13122421", "11313331", "13131511", "11322421", "11331511", "12213421", "12222511", "11141152", "21132151", "21141241", "11123152", "11132242", "11141332", "21114151", "21123241", "21132331", "21141421", "11114242", "11123332", "11132422", "11141512", "21114331", "21123421", "21132511", "12141151", "11232151", "11241241", "12123151", "12132241", "12141331", "11214151", "11223241", "11232331", "11241421", "12114241", "12123331", "12132421", "12141511", "11214331", "11223421", "11232511", "11151151", "11133151", "11142241", "11151331", "11115151", "11124241", "11133331", "11142421", "11151511", "11111254", "31111252", "21111343", "41111341", "11111434", "31111432", "21111523", "41111521", "11111614", "31111612", "31211161", "12111253", "32111251", "21211252", "22111342", "11211343", "31211341", "12111433", "32111431", "21211432", "22111522", "11211523", "31211521", "12111613", "32111611", "21211612", "12211162", "21311161", "13111252", "22211251", "11311252", "23111341", "12211342", "21311341", "13111432", "22211431", "11311432", "23111521", "12211522", "21311521", "13111612", "22211611", "11311612", "13211161", "11411161", "14111251", "12311251", "13211341", "11411341", "14111431", "12311431", "13211521", "11411521", "14111611", "12311611", "21121162", "11112163", "31112161", "11121253", "31121251", "21112252", "21121342", "11112343", "31112341", "11121433", "31121431", "21112432", "21121522", "11112523", "31112521", "11121613", "31121611", "22121161", "11221162", "12112162", "12121252", "21221251", "22112251", "11212252", "22121341", "11221342", "12112342", "12121432", "21221431", "22112431", "11212432", "22121521", "11221522", "12112522", "12121612", "21221611", "12221161", "13112161", "13121251", "11312161", "11321251", "32121115", "52121113", "21221116", "41221114", "61221112", "22112116", "42112114", "31212115", "51212113", "13121116", "33121114", "22221115", "42221113", "11321116", "31321114", "51321112", "23112115", "43112113", "12212116", "32212114", "52212112", "21312115", "41312113", "61312111", "14121115", "34121113", "23221114", "43221112", "12321115", "32321113", "52321111", "21421114", "41421112", "24112114", "13212115", "33212113", "22312114", "42312112", "11412115", "31412113", "51412111", "15121114", "24221113", "13321114", "33321112", "22421113", "42421111", "11521114", "31521112", "25112113", "14212114", "34212112", "23312113", "43312111", "12412114", "32412112", "21512113", "41512111", "16121113", "25221112", "14321113", "34321111", "23421112", "12521113", "32521111", "15212113", "24312112", "13412113", "33412111", "22512112", "11612113", "31612111", "31131115", "51131113", "21122116", "41122114", "61122112", "31113115", "51113113", "12131116", "32131114", "52131112", "21231115", "41231113", "61231111", "22122115", "42122113", "11222116", "31222114", "51222112", "12113116", "32113114", "52113112", "21213115", "41213113", "61213111", "13131115", "33131113", "22231114", "42231112", "11331115", "31331113", "51331111", "23122114", "43122112", "12222115", "32222113", "52222111", "21322114", "41322112", "13113115", "33113113", "22213114", "42213112", "11313115", "31313113", "51313111", "14131114", "34131112", "23231113", "43231111", "12331114", "32331112", "21431113", "41431111", "24122113", "13222114", "33222112", "22322113", "42322111", "11422114", "31422112", "14113114", "34113112", "23213113", "43213111", "12313114", "32313112", "21413113", "41413111", "15131113", "24231112", "13331113", "33331111", "22431112", "25122112", "14222113", "34222111", "23322112", "12422113", "32422111", "21522112", "15113113", "24213112", "13313113", "33313111", "22413112", "11513113", "31513111", "16131112", "25231111", "14331112", "23431111", "15222112", "24322111", "13422112", "22522111", "16113112", "25213111", "14313112", "23413111", "12513112", "21613111", "11141116", "31141114", "51141112", "21132115", "41132113", "61132111", "11123116", "31123114", "51123112", "21114115", "41114113", "61114111", "12141115", "32141113", "52141111", "21241114", "41241112", "22132114", "42132112", "11232115", "31232113", "51232111", "12123115", "32123113", "52123111", "21223114", "41223112", "22114114", "42114112", "11214115", "31214113", "51214111", "13141114", "33141112", "22241113", "42241111", "11341114", "31341112", "23132113", "43132111", "12232114", "32232112", "21332113", "41332111", "13123114", "33123112", "22223113", "42223111", "11323114", "31323112", "23114113", "43114111", "12214114", "32214112", "21314113", "41314111", "14141113", "34141111", "23241112", "12341113", "32341111", "24132112", "13232113", "33232111", "22332112", "11432113", "31432111", "14123113", "34123111", "23223112", "12323113", "32323111", "21423112", "24114112", "13214113", "33214111", "22314112", "11414113", "31414111", "15141112", "24241111", "13341112", "25132111", "14232112", "23332111", "12432112", "15123112", "24223111", "13323112", "22423111", "11523112", "25114111", "14214112", "23314111", "12414112", "21514111", "16141111", "14341111", "15232111", "13432111", "16123111", "14323111", "12523111", "15214111", "13414111", "11614111", "11151115", "31151113", "51151111", "21142114", "41142112", "11133115", "31133113", "51133111", "21124114", "41124112", "11115115", "31115113", "51115111", "12151114", "32151112", "21251113", "41251111", "22142113", "42142111", "11242114", "31242112", "12133114", "32133112", "21233113", "41233111", "22124113", "42124111", "11224114", "31224112", "12115114", "32115112", "21215113", "41215111", "13151113", "33151111", "22251112", "23142112", "12242113", "32242111", "21342112", "13133113", "33133111", "22233112", "11333113", "31333111", "23124112", "12224113", "32224111", "21324112", "13115113", "33115111", "22215112", "11315113", "31315111", "14151112", "23251111", "24142111", "13242112", "22342111", "14133112", "23233111", "12333112", "21433111", "24124111", "13224112", "22324111", "11424112", "14115112", "23215111", "12315112", "21415111", "15151111", "14242111", "15133111", "13333111", "14224111", "12424111", "15115111", "13315111", "11515111", "11161114", "31161112", "21152113", "41152111", "11143114", "31143112", "21134113", "41134111", "11125114", "31125112", "21116113", "41116111", "12161113", "32161111", "22152112", "11252113", "31252111", "12143113", "32143111", "21243112", "22134112", "11234113", "31234111", "12125113", "32125111", "21225112", "22116112", "11216113", "31216111", "13161112", "23152111", "12252112", "13143112", "22243111", "11343112", "23134111", "12234112", "21334111", "13125112", "22225111", "11325112", "23116111", "12216112", "21316111", "14161111", "13252111", "14143111", "12343111", "13234111", "11434111", "14125111", "12325111", "13216111", "11416111", "31111216", "51111214", "31211125", "51211123", "32111215", "52111213", "21211216", "41211214", "61211212", "12211126", "32211124", "52211122", "21311125", "41311123", "61311121", "13111216", "33111214", "22211215", "42211213", "11311216", "31311214", "51311212", "13211125", "33211123", "22311124", "42311122", "11411125", "31411123", "51411121", "14111215", "34111213", "23211214", "43211212", "12311215", "32311213", "52311211", "21411214", "41411212", "14211124", "34211122", "23311123", "43311121", "12411124", "32411122", "21511123", "41511121", "15111214", "24211213", "13311214", "33311212", "22411213", "42411211", "11511214", "31511212", "15211123", "24311122", "13411123", "33411121", "22511122", "11611123", "31611121", "16111213", "25211212", "14311213", "34311211", "23411212", "12511213", "32511211", "21611212", "21121126", "41121124", "61121122", "31112125", "51112123", "31121215", "51121213", "21112216", "41112214", "61112212", "22121125", "42121123", "11221126", "31221124", "51221122", "12112126", "32112124", "52112122", "12121216", "32121214", "52121212", "21221215", "41221213", "61221211", "22112215", "42112213", "11212216", "31212214", "51212212", "23121124", "43121122", "12221125", "32221123", "52221121", "21321124", "41321122", "13112125", "33112123", "13121215", "33121213", "11312125", "22221214", "42221212", "11321215", "31321213", "51321211", "23112214", "43112212", "12212215", "32212213", "52212211", "21312214", "41312212", "24121123", "13221124", "33221122", "22321123", "42321121", "11421124", "31421122", "14112124", "34112122", "14121214", "34121212", "12312124", "23221213", "43221211", "12321214", "32321212", "21421213", "41421211", "24112213", "13212214", "33212212", "22312213", "42312211", "11412214", "31412212", "25121122", "14221123", "34221121", "23321122", "12421123", "32421121", "21521122", "15112123", "15121213", "13312123", "24221212", "13321213", "33321211", "11512123", "22421212", "11521213", "31521211", "25112212", "14212213", "34212211", "23312212", "12412213", "32412211", "21512212", "15221122", "24321121", "13421122", "22521121", "16112122", "16121212", "14312122", "25221211", "14321212", "12512122", "23421211", "12521212", "15212212", "24312211", "13412212", "22512211", "11612212", "21131125", "41131123", "61131121", "11122126", "31122124", "51122122", "11131216", "31131214", "51131212", "21113125", "41113123", "61113121", "21122215", "41122213", "61122211", "11113216", "31113214", "51113212", "22131124", "42131122", "11231125", "31231123", "51231121", "12122125", "32122123", "52122121", "12131215", "32131213", "52131211", "21231214", "41231212", "22113124", "42113122", "11213125", "22122214", "42122212", "11222215", "31222213", "51222211", "12113215", "32113213", "52113211", "21213214", "41213212", "23131123", "43131121", "12231124", "32231122", "21331123", "41331121", "13122124", "33122122", "13131214", "33131212", "11322124", "22231213", "42231211", "11331214", "31331212", "23113123", "43113121", "12213124", "23122213", "43122211", "12222214", "32222212", "21322213", "41322211", "13113214", "33113212", "22213213", "42213211", "11313214", "31313212", "24131122", "13231123", "33231121", "22331122", "11431123", "31431121", "14122123", "34122121", "14131213", "34131211", "12322123", "23231212", "12331213", "32331211", "21431212", "24113122", "13213123", "24122212", "13222213", "33222211", "11413123", "22322212", "11422213", "31422211", "14113213", "34113211", "23213212", "12313213", "32313211", "21413212", "25131121", "14231122", "23331121", "12431122", "15122122", "15131212", "13322122", "24231211", "13331212", "11522122", "22431211", "25113121", "14213122", "25122211", "14222212", "12413122", "23322211", "12422212", "21522211", "15113212", "24213211", "13313212", "22413211", "11513212", "15231121", "13431121", "16122121", "16131211", "14322121", "14331211", "12522121", "15213121", "15222211", "13413121", "13422211", "11613121", "16113211", "14313211", "12513211", "21141124", "41141122", "11132125", "31132123", "51132121", "11141215", "31141213", "51141211", "21123124", "41123122", "21132214", "41132212", "11114125", "31114123", "51114121", "11123215", "31123213", "51123211", "21114214", "41114212", "22141123", "42141121", "11241124", "31241122", "12132124", "32132122", "12141214", "32141212", "21241213", "41241211", "22123123", "42123121", "11223124", "22132213", "42132211", "11232214", "31232212", "12114124", "32114122", "12123214", "32123212", "21223213", "41223211", "22114213", "42114211", "11214214", "31214212", "23141122", "12241123", "32241121", "21341122", "13132123", "33132121", "13141213", "33141211", "11332123", "22241212", "11341213", "31341211", "23123122", "12223123", "23132212", "12232213", "32232211", "21332212", "13114123", "33114121", "13123213", "33123211", "11314123", "22223212", "11323213", "31323211", "23114212", "12214213", "32214211", "21314212", "24141121", "13241122", "22341121", "14132122", "14141212", "12332122", "23241211", "12341212", "24123121", "13223122", "24132211", "13232212", "11423122", "22332211", "11432212", "14114122", "14123212", "12314122", "23223211", "12323212", "21423211", "24114211", "13214212", "22314211", "11414212", "14241121", "15132121", "15141211", "13332121", "13341211", "14223121", "14232211", "12423121", "12432211", "15114121", "15123211", "13314121", "13323211", "11514121", "11523211", "14214211", "12414211", "21151123", "41151121", "11142124", "31142122", "11151214", "31151212", "21133123", "41133121", "21142213", "41142211", "11124124", "31124122", "11133214", "31133212", "21115123", "41115121", "21124213", "41124211", "11115214", "31115212", "22151122", "11251123", "31251121", "12142123", "32142121", "12151213", "32151211", "21251212", "22133122", "11233123", "22142212", "11242213", "31242211", "12124123", "32124121", "12133213", "32133211", "21233212", "22115122", "11215123", "22124212", "11224213", "31224211", "12115213", "32115211", "21215212", "23151121", "12251122", "13142122", "13151212", "11342122", "22251211", "23133121", "12233122", "23142211", "12242212", "21342211", "13124122", "13133212", "11324122", "22233211", "11333212", "23115121", "12215122", "23124211", "12224212", "21324211", "13115212", "22215211", "11315212", "13251121", "14142121", "14151211", "12342121", "13233121", "13242211", "11433121", "14124121", "14133211", "12324121", "12333211", "13215121", "13224211", "11415121", "11424211", "14115211", "12315211", "21161122", "11152123", "31152121", "11161213", "31161211", "21143122", "21152212", "11134123", "31134121", "11143213", "31143211", "21125122", "21134212", "11116123", "31116121", "11125213", "31125211", "22161121", "12152122", "12161212", "22143121", "11243122", "22152211", "11252212", "12134122", "12143212", "21243211", "22125121", "11225122", "22134211", "11234212", "12116122", "12125212", "21225211", "13152121", "13161211", "12243121", "12252211", "13134121", "13143211", "11334121", "11343211", "12225121", "12234211", "13116121", "13125211", "11316121", "11325211", "21111226", "41111224", "61111222", "31111315", "51111313", "21211135", "41211133", "61211131", "22111225", "42111223", "11211226", "31211224", "51211222", "12111316", "32111314", "52111312", "21211315", "41211313", "61211311", "22211134", "42211132", "11311135", "31311133", "51311131", "23111224", "43111222", "12211225", "32211223", "52211221", "21311224", "41311222", "13111315", "33111313", "22211314", "42211312", "11311315", "31311313", "51311311", "23211133", "43211131", "12311134", "32311132", "21411133", "41411131", "24111223", "13211224", "33211222", "22311223", "42311221", "11411224", "31411222", "14111314", "34111312", "23211313", "43211311", "12311314", "32311312", "21411313", "41411311", "24211132", "13311133", "33311131", "22411132", "11511133", "31511131", "25111222", "14211223", "34211221", "23311222", "12411223", "32411221", "21511222", "15111313", "24211312", "13311313", "33311311", "22411312", "11511313", "31511311", "25211131", "14311132", "23411131", "12511132", "21611131", "15211222", "24311221", "13411222", "22511221", "11611222", "16111312", "25211311", "14311312", "23411311", "12511312", "21611311", "31121134", "51121132", "21112135", "41112133", "61112131", "21121225", "41121223", "61121221", "11112226", "31112224", "51112222", "11121316", "31121314", "51121312", "21112315", "41112313", "61112311", "12121135", "32121133", "52121131", "21221134", "41221132", "22112134", "42112132", "11212135", "22121224", "42121222", "11221225", "31221223", "51221221", "12112225", "32112223", "52112221", "12121315", "32121313", "52121311", "21221314", "41221312", "22112314", "42112312", "11212315", "31212313", "51212311", "13121134", "33121132", "22221133", "42221131", "11321134", "31321132", "23112133", "43112131", "12212134", "23121223", "43121221", "12221224", "32221222", "21321223", "41321221", "13112224", "33112222", "13121314", "33121312", "11312224", "22221313", "42221311", "11321314", "31321312", "23112313", "43112311", "12212314", "32212312", "21312313", "41312311", "14121133", "34121131", "23221132", "12321133", "32321131", "21421132", "24112132", "13212133", "24121222", "13221223", "33221221", "11412133", "22321222", "11421223", "31421221", "14112223", "34112221", "14121313", "34121311", "12312223", "23221312", "12321313", "32321311", "21421312", "24112312", "13212313", "33212311", "22312312", "11412313", "31412311", "15121132", "24221131", "13321132", "22421131"]), $a(["22121116", "42121114", "31221115", "51221113", "32112115", "52112113", "21212116", "41212114", "61212112", "23121115", "43121113", "12221116", "32221114", "52221112", "21321115", "41321113", "61321111", "13112116", "33112114", "22212115", "42212113", "11312116", "31312114", "51312112", "24121114", "13221115", "33221113", "22321114", "42321112", "11421115", "31421113", "51421111", "14112115", "34112113", "23212114", "43212112", "12312115", "32312113", "52312111", "21412114", "41412112", "25121113", "14221114", "34221112", "23321113", "43321111", "12421114", "32421112", "21521113", "41521111", "15112114", "24212113", "13312114", "33312112", "22412113", "42412111", "11512114", "31512112", "15221113", "24321112", "13421113", "33421111", "22521112", "16112113", "25212112", "14312113", "34312111", "23412112", "12512113", "32512111", "21612112", "21131116", "41131114", "61131112", "31122115", "51122113", "21113116", "41113114", "61113112", "22131115", "42131113", "11231116", "31231114", "51231112", "12122116", "32122114", "52122112", "21222115", "41222113", "61222111", "22113115", "42113113", "11213116", "31213114", "51213112", "23131114", "43131112", "12231115", "32231113", "52231111", "21331114", "41331112", "13122115", "33122113", "22222114", "42222112", "11322115", "31322113", "51322111", "23113114", "43113112", "12213115", "32213113", "52213111", "21313114", "41313112", "24131113", "13231114", "33231112", "22331113", "42331111", "11431114", "31431112", "14122114", "34122112", "23222113", "43222111", "12322114", "32322112", "21422113", "41422111", "24113113", "13213114", "33213112", "22313113", "42313111", "11413114", "31413112", "25131112", "14231113", "34231111", "23331112", "12431113", "32431111", "15122113", "24222112", "13322113", "33322111", "22422112", "11522113", "31522111", "25113112", "14213113", "34213111", "23313112", "12413113", "32413111", "21513112", "15231112", "24331111", "13431112", "16122112", "25222111", "14322112", "23422111", "12522112", "15213112", "24313111", "13413112", "22513111", "11613112", "21141115", "41141113", "61141111", "11132116", "31132114", "51132112", "21123115", "41123113", "61123111", "11114116", "31114114", "51114112", "22141114", "42141112", "11241115", "31241113", "51241111", "12132115", "32132113", "52132111", "21232114", "41232112", "22123114", "42123112", "11223115", "31223113", "51223111", "12114115", "32114113", "52114111", "21214114", "41214112", "23141113", "43141111", "12241114", "32241112", "21341113", "41341111", "13132114", "33132112", "22232113", "42232111", "11332114", "31332112", "23123113", "43123111", "12223114", "32223112", "21323113", "41323111", "13114114", "33114112", "22214113", "42214111", "11314114", "31314112", "24141112", "13241113", "33241111", "22341112", "14132113", "34132111", "23232112", "12332113", "32332111", "21432112", "24123112", "13223113", "33223111", "22323112", "11423113", "31423111", "14114113", "34114111", "23214112", "12314113", "32314111", "21414112", "25141111", "14241112", "23341111", "15132112", "24232111", "13332112", "22432111", "25123111", "14223112", "23323111", "12423112", "21523111", "15114112", "24214111", "13314112", "22414111", "11514112", "15241111", "16132111", "14332111", "15223111", "13423111", "16114111", "14314111", "12514111", "21151114", "41151112", "11142115", "31142113", "51142111", "21133114", "41133112", "11124115", "31124113", "51124111", "21115114", "41115112", "22151113", "42151111", "11251114", "31251112", "12142114", "32142112", "21242113", "41242111", "22133113", "42133111", "11233114", "31233112", "12124114", "32124112", "21224113", "41224111", "22115113", "42115111", "11215114", "31215112", "23151112", "12251113", "32251111", "13142113", "33142111", "22242112", "11342113", "31342111", "23133112", "12233113", "32233111", "21333112", "13124113", "33124111", "22224112", "11324113", "31324111", "23115112", "12215113", "32215111", "21315112", "24151111", "13251112", "14142112", "23242111", "12342112", "24133111", "13233112", "22333111", "11433112", "14124112", "23224111", "12324112", "21424111", "24115111", "13215112", "22315111", "11415112", "14251111", "15142111", "13342111", "14233111", "12433111", "15124111", "13324111", "11524111", "14215111", "12415111", "21161113", "41161111", "11152114", "31152112", "21143113", "41143111", "11134114", "31134112", "21125113", "41125111", "11116114", "31116112", "22161112", "12152113", "32152111", "21252112", "22143112", "11243113", "31243111", "12134113", "32134111", "21234112", "22125112", "11225113", "31225111", "12116113", "32116111", "21216112", "23161111", "13152112", "22252111", "23143111", "12243112", "21343111", "13134112", "22234111", "11334112", "23125111", "12225112", "21325111", "13116112", "22216111", "11316112", "14152111", "13243111", "14134111", "12334111", "13225111", "11425111", "14116111", "12316111", "41111215", "61111213", "21211126", "41211124", "61211122", "22111216", "42111214", "31211215", "51211213", "22211125", "42211123", "11311126", "31311124", "51311122", "23111215", "43111213", "12211216", "32211214", "52211212", "21311215", "41311213", "61311211", "23211124", "43211122", "12311125", "32311123", "52311121", "21411124", "41411122", "24111214", "13211215", "33211213", "22311214", "42311212", "11411215", "31411213", "51411211", "24211123", "13311124", "33311122", "22411123", "42411121", "11511124", "31511122", "25111213", "14211214", "34211212", "23311213", "43311211", "12411214", "32411212", "21511213", "41511211", "25211122", "14311123", "34311121", "23411122", "12511123", "32511121", "21611122", "15211213", "24311212", "13411213", "33411211", "22511212", "11611213", "31611211", "31121125", "51121123", "21112126", "41112124", "61112122", "21121216", "41121214", "61121212", "31112215", "51112213", "12121126", "32121124", "52121122", "21221125", "41221123", "61221121", "22112125", "42112123", "11212126", "22121215", "42121213", "11221216", "31221214", "51221212", "12112216", "32112214", "52112212", "21212215", "41212213", "61212211", "13121125", "33121123", "22221124", "42221122", "11321125", "31321123", "51321121", "23112124", "43112122", "12212125", "23121214", "43121212", "12221215", "32221213", "52221211", "21321214", "41321212", "13112215", "33112213", "22212214", "42212212", "11312215", "31312213", "51312211", "14121124", "34121122", "23221123", "43221121", "12321124", "32321122", "21421123", "41421121", "24112123", "13212124", "24121213", "13221214", "33221212", "11412124", "22321213", "42321211", "11421214", "31421212", "14112214", "34112212", "23212213", "43212211", "12312214", "32312212", "21412213", "41412211", "15121123", "24221122", "13321123", "33321121", "22421122", "11521123", "31521121", "25112122", "14212123", "25121212", "14221213", "34221211", "12412123", "23321212", "12421213", "32421211", "21521212", "15112213", "24212212", "13312213", "33312211", "22412212", "11512213", "31512211", "16121122", "25221121", "14321122", "23421121", "12521122", "15212122", "15221212", "13412122", "24321211", "13421212", "11612122", "22521211", "16112212", "25212211", "14312212", "23412211", "12512212", "21612211", "11131126", "31131124", "51131122", "21122125", "41122123", "61122121", "21131215", "41131213", "61131211", "11113126", "31113124", "51113122", "11122216", "31122214", "51122212", "21113215", "41113213", "61113211", "12131125", "32131123", "52131121", "21231124", "41231122", "22122124", "42122122", "11222125", "22131214", "42131212", "11231215", "31231213", "51231211", "12113125", "32113123", "52113121", "12122215", "32122213", "52122211", "21222214", "41222212", "22113214", "42113212", "11213215", "31213213", "51213211", "13131124", "33131122", "22231123", "42231121", "11331124", "31331122", "23122123", "43122121", "12222124", "23131213", "43131211", "12231214", "32231212", "21331213", "41331211", "13113124", "33113122", "13122214", "33122212", "11313124", "22222213", "42222211", "11322214", "31322212", "23113213", "43113211", "12213214", "32213212", "21313213", "41313211", "14131123", "34131121", "23231122", "12331123", "32331121", "21431122", "24122122", "13222123", "24131212", "13231213", "33231211", "11422123", "22331212", "11431213", "31431211", "14113123", "34113121", "14122213", "34122211", "12313123", "23222212", "12322213", "32322211", "21422212", "24113212", "13213213", "33213211", "22313212", "11413213", "31413211", "15131122", "24231121", "13331122", "22431121", "25122121", "14222122", "25131211", "14231212", "12422122", "23331211", "12431212", "15113122", "15122212", "13313122", "24222211", "13322212", "11513122", "22422211", "11522212", "25113211", "14213212", "23313211", "12413212", "21513211", "16131121", "14331121", "15222121", "15231211", "13422121", "13431211", "16113121", "16122211", "14313121", "14322211", "12513121", "12522211", "15213211", "13413211", "11613211", "11141125", "31141123", "51141121", "21132124", "41132122", "21141214", "41141212", "11123125", "31123123", "51123121", "11132215", "31132213", "51132211", "21114124", "41114122", "21123214", "41123212", "11114215", "31114213", "51114211", "12141124", "32141122", "21241123", "41241121", "22132123", "42132121", "11232124", "22141213", "42141211", "11241214", "31241212", "12123124", "32123122", "12132214", "32132212", "21232213", "41232211", "22114123", "42114121", "11214124", "22123213", "42123211", "11223214", "31223212", "12114214", "32114212", "21214213", "41214211", "13141123", "33141121", "22241122", "11341123", "31341121", "23132122", "12232123", "23141212", "12241213", "32241211", "21341212", "13123123", "33123121", "13132213", "33132211", "11323123", "22232212", "11332213", "31332211", "23114122", "12214123", "23123212", "12223213", "32223211", "21323212", "13114213", "33114211", "22214212", "11314213", "31314211", "14141122", "23241121", "12341122", "24132121", "13232122", "24141211", "13241212", "11432122", "22341211", "14123122", "14132212", "12323122", "23232211", "12332212", "21432211", "24114121", "13214122", "24123211", "13223212", "11414122", "22323211", "11423212", "14114212", "23214211", "12314212", "21414211", "15141121", "13341121", "14232121", "14241211", "12432121", "15123121", "15132211", "13323121", "13332211", "11523121", "14214121", "14223211", "12414121", "12423211", "15114211", "13314211", "11514211", "11151124", "31151122", "21142123", "41142121", "21151213", "41151211", "11133124", "31133122", "11142214", "31142212", "21124123", "41124121", "21133213", "41133211", "11115124", "31115122", "11124214", "31124212", "21115213", "41115211", "12151123", "32151121", "21251122", "22142122", "11242123", "22151212", "11251213", "31251211", "12133123", "32133121", "12142213", "32142211", "21242212", "22124122", "11224123", "22133212", "11233213", "31233211", "12115123", "32115121", "12124213", "32124211", "21224212", "22115212", "11215213", "31215211", "13151122", "22251121", "23142121", "12242122", "23151211", "12251212", "13133122", "13142212", "11333122", "22242211", "11342212", "23124121", "12224122", "23133211", "12233212", "21333211", "13115122", "13124212", "11315122", "22224211", "11324212", "23115211", "12215212", "21315211", "14151121", "13242121", "13251211", "14133121", "14142211", "12333121", "12342211", "13224121", "13233211", "11424121", "11433211", "14115121", "14124211", "12315121", "12324211", "13215211", "11415211", "11161123", "31161121", "21152122", "21161212", "11143123", "31143121", "11152213", "31152211", "21134122", "21143212", "11125123", "31125121", "11134213", "31134211", "21116122", "21125212", "12161122", "22152121", "11252122", "22161211", "12143122", "12152212", "21252211", "22134121", "11234122", "22143211", "11243212", "12125122", "12134212", "21234211", "22116121", "11216122", "22125211", "11225212", "13161121", "12252121", "13143121", "13152211", "11343121", "12234121", "12243211", "13125121", "13134211", "11325121", "11334211", "12216121", "12225211", "31111225", "51111223", "21111316", "41111314", "61111312", "31211134", "51211132", "12111226", "32111224", "52111222", "21211225", "41211223", "61211221", "22111315", "42111313", "11211316", "31211314", "51211312", "12211135", "32211133", "52211131", "21311134", "41311132", "13111225", "33111223", "22211224", "42211222", "11311225", "31311223", "51311221", "23111314", "43111312", "12211315", "32211313", "52211311", "21311314", "41311312", "13211134", "33211132", "22311133", "42311131", "11411134", "31411132", "14111224", "34111222", "23211223", "43211221", "12311224", "32311222", "21411223", "41411221", "24111313", "13211314", "33211312", "22311313", "42311311", "11411314", "31411312", "14211133", "34211131", "23311132", "12411133", "32411131", "21511132", "15111223", "24211222", "13311223", "33311221", "22411222", "11511223", "31511221", "25111312", "14211313", "34211311", "23311312", "12411313", "32411311", "21511312", "15211132", "24311131", "13411132", "22511131", "11611132", "16111222", "25211221", "14311222", "23411221", "12511222", "21611221", "15211312", "24311311", "13411312", "22511311", "11611312", "21121135", "41121133", "61121131", "11112136", "31112134", "51112132", "11121226", "31121224", "51121222", "21112225", "41112223", "61112221", "21121315", "41121313", "61121311", "11112316", "31112314", "51112312", "22121134", "42121132", "11221135", "31221133", "51221131", "12112135", "32112133", "52112131", "12121225", "32121223", "52121221", "21221224", "41221222", "22112224", "42112222", "11212225", "22121314", "42121312", "11221315", "31221313", "51221311", "12112315", "32112313", "52112311", "21212314", "41212312", "23121133", "43121131", "12221134", "32221132", "21321133", "41321131", "13112134", "33112132", "13121224", "33121222", "11312134", "22221223", "42221221", "11321224", "31321222", "23112223", "43112221", "12212224", "23121313", "43121311", "12221314", "32221312", "21321313", "41321311", "13112314", "33112312", "22212313", "42212311", "11312314", "31312312", "24121132", "13221133", "33221131", "22321132", "11421133", "31421131", "14112133", "34112131", "14121223", "34121221", "12312133", "23221222", "12321223", "32321221", "21421222", "24112222", "13212223", "24121312", "13221313", "33221311", "11412223", "22321312", "11421313", "31421311", "14112313", "34112311", "23212312", "12312313", "32312311", "21412312", "25121131", "14221132", "23321131", "12421132", "21521131", "15112132", "15121222", "13312132", "24221221", "13321222", "11512132", "22421221", "11521222", "25112221", "14212222", "25121311", "14221312", "12412222", "23321311", "12421312", "21521311", "15112312", "24212311", "13312312", "22412311", "11512312", "15221131", "13421131", "16112131", "16121221", "14312131", "14321221", "12512131", "12521221", "15212221", "15221311", "13412221", "13421311", "11612221", "16112311", "14312311", "12512311", "21131134", "41131132", "11122135", "31122133", "51122131", "11131225", "31131223", "51131221", "21113134", "41113132", "21122224", "41122222", "21131314", "41131312", "11113225", "31113223", "51113221", "11122315", "31122313", "51122311", "21113314", "41113312", "22131133", "42131131", "11231134", "31231132", "12122134", "32122132", "12131224", "32131222", "21231223", "41231221", "22113133", "42113131", "11213134", "22122223", "42122221", "11222224", "22131313", "42131311", "11231314", "31231312", "12113224", "32113222", "12122314", "32122312", "21222313", "41222311", "22113313", "42113311", "11213314", "31213312", "23131132", "12231133", "32231131", "21331132", "13122133", "33122131", "13131223", "33131221", "11322133", "22231222", "11331223", "31331221", "23113132", "12213133", "23122222", "12222223", "23131312", "12231313", "32231311", "21331312", "13113223", "33113221", "13122313", "33122311", "11313223", "22222312", "11322313", "31322311", "23113312", "12213313", "32213311", "21313312", "24131131", "13231132", "22331131", "11431132", "14122132", "14131222", "12322132", "23231221", "12331222", "21431221", "24113131", "13213132", "24122221", "13222222", "24131311", "11413132", "13231312", "11422222", "22331311", "11431312", "14113222", "14122312", "12313222", "23222311", "12322312", "21422311", "24113311", "13213312", "22313311", "11413312", "14231131", "12431131", "15122131", "15131221", "13322131", "13331221", "11522131", "14213131", "14222221", "12413131", "14231311", "12422221", "12431311", "15113221", "15122311", "13313221", "13322311", "11513221", "11522311", "14213311", "12413311", "21141133", "41141131", "11132134", "31132132", "11141224", "31141222", "21123133", "41123131", "21132223", "41132221", "21141313", "41141311", "11114134", "31114132", "11123224", "31123222", "11132314", "31132312", "21114223", "41114221", "21123313", "41123311", "11114314", "31114312", "22141132", "11241133", "31241131", "12132133", "32132131", "12141223", "32141221", "21241222", "22123132", "11223133", "22132222", "11232223", "22141312", "11241313", "31241311", "12114133", "32114131", "12123223", "32123221", "12132313", "32132311", "21232312", "22114222", "11214223", "22123312", "11223313", "31223311", "12114313", "32114311", "21214312", "23141131", "12241132", "21341131", "13132132", "13141222", "11332132", "22241221", "11341222", "23123131", "12223132", "23132221", "12232222", "23141311", "12241312", "21341311", "13114132", "13123222", "11314132", "13132312", "11323222", "22232311", "11332312", "23114221", "12214222", "23123311", "12223312", "21323311", "13114312", "22214311", "11314312", "13241131", "14132131", "14141221", "12332131", "12341221", "13223131", "13232221", "11423131", "13241311", "11432221", "14114131", "14123221", "12314131", "14132311", "12323221", "12332311", "13214221", "13223311", "11414221", "11423311", "14114311", "12314311", "21151132", "11142133", "31142131", "11151223", "31151221", "21133132", "21142222", "21151312", "11124133", "31124131", "11133223", "31133221", "11142313", "31142311", "21115132", "21124222", "21133312", "11115223", "31115221", "11124313", "31124311", "22151131", "11251132", "12142132", "12151222", "21251221", "22133131", "11233132", "22142221", "11242222", "22151311", "11251312", "12124132", "12133222", "12142312", "21242311", "22115131", "11215132", "22124221", "11224222", "22133311", "11233312", "12115222", "12124312", "21224311", "12251131", "13142131", "13151221", "11342131", "12233131", "12242221", "12251311", "13124131", "13133221", "11324131", "13142311", "11333221", "11342311", "12215131", "12224221", "12233311", "13115221", "13124311", "11315221", "11324311", "21161131", "11152132", "11161222", "21143131", "21152221", "21161311", "11134132", "11143222", "11152312", "21125131", "21134221", "21143311", "11116132", "11125222", "11134312", "12152131", "12161221", "11243131", "11252221", "12134131", "12143221", "12152311", "11225131", "11234221", "11243311", "12116131", "12125221", "12134311", "21111235", "41111233", "61111231", "11111326", "31111324", "51111322", "21111415", "41111413", "61111411", "21211144", "41211142", "22111234", "42111232", "11211235", "31211233", "51211231", "12111325", "32111323", "52111321", "21211324", "41211322", "22111414", "42111412", "11211415", "31211413", "51211411", "22211143", "42211141", "11311144", "31311142", "23111233", "43111231", "12211234", "32211232", "21311233", "41311231", "13111324", "33111322", "22211323", "42211321", "11311324", "31311322", "23111413", "43111411", "12211414", "32211412", "21311413", "41311411", "23211142", "12311143", "32311141", "21411142", "24111232", "13211233", "33211231", "22311232", "11411233", "31411231", "14111323", "34111321", "23211322", "12311323", "32311321", "21411322", "24111412", "13211413", "33211411", "22311412", "11411413", "31411411", "24211141", "13311142", "22411141", "11511142", "25111231", "14211232", "23311231", "12411232", "21511231", "15111322", "24211321", "13311322", "22411321", "11511322", "25111411", "14211412", "23311411", "12411412", "21511411", "14311141", "12511141", "15211231", "13411231", "11611231", "16111321", "14311321", "12511321", "15211411", "13411411", "11611411", "31121143", "51121141", "21112144", "41112142", "21121234", "41121232", "11112235", "31112233", "51112231", "11121325", "31121323", "51121321", "21112324", "41112322", "21121414", "41121412", "11112415", "31112413", "51112411", "12121144", "32121142", "21221143", "41221141", "22112143", "42112141", "11212144", "22121233", "42121231", "11221234", "31221232", "12112234", "32112232", "12121324", "32121322", "21221323", "41221321", "22112323", "42112321", "11212324", "22121413", "42121411", "11221414", "31221412", "12112414", "32112412", "21212413", "41212411", "13121143", "33121141", "22221142", "11321143", "31321141", "23112142", "12212143", "23121232", "12221233", "32221231", "21321232", "13112233", "33112231", "13121323", "33121321", "11312233", "22221322", "11321323", "31321321", "23112322", "12212323", "23121412", "12221413", "32221411", "21321412", "13112413", "33112411", "22212412", "11312413", "31312411", "14121142", "23221141", "12321142", "21421141", "24112141", "13212142", "24121231", "13221232", "11412142", "22321231", "11421232", "14112232", "14121322", "12312232", "23221321", "12321322", "21421321", "24112321", "13212322", "24121411", "13221412", "11412322", "22321411", "11421412", "14112412", "23212411", "12312412", "21412411", "15121141", "13321141", "11521141", "14212141", "14221231", "12412141", "12421231", "15112231", "15121321", "13312231", "13321321", "11512231", "11521321", "14212321", "14221411", "12412321", "12421411", "15112411", "13312411", "11512411", "11131144", "31131142", "21122143", "41122141", "21131233", "41131231", "11113144", "31113142", "11122234", "31122232", "11131324", "31131322", "21113233", "41113231", "21122323", "41122321", "21131413", "41131411", "11113324", "31113322", "11122414", "31122412", "21113413", "41113411", "12131143", "32131141", "21231142", "22122142", "11222143", "22131232", "11231233", "31231231", "12113143", "32113141", "12122233", "32122231", "12131323", "32131321", "21231322", "22113232", "11213233", "22122322", "11222323", "22131412", "11231413", "31231411", "12113323", "32113321", "12122413", "32122411", "21222412", "22113412", "11213413", "31213411", "13131142", "22231141", "11331142", "23122141", "12222142", "23131231", "12231232", "21331231", "13113142", "13122232", "11313142", "13131322", "11322232", "22231321", "11331322", "23113231", "12213232", "23122321", "12222322", "23131411", "12231412", "21331411", "13113322", "13122412", "11313322", "22222411", "11322412", "23113411", "12213412", "21313411", "14131141", "12331141", "13222141", "13231231", "11422141", "11431231", "14113141", "14122231", "12313141", "14131321", "12322231", "12331321", "13213231", "13222321", "11413231", "13231411", "11422321", "11431411", "14113321", "14122411", "12313321", "12322411", "13213411", "11413411", "11141143", "31141141", "21132142", "21141232", "11123143", "31123141", "11132233", "31132231", "11141323", "31141321", "21114142", "21123232", "21132322", "21141412", "11114233", "31114231", "11123323", "31123321", "11132413", "31132411", "21114322", "21123412", "12141142", "21241141", "22132141", "11232142", "22141231", "11241232", "12123142", "12132232", "12141322", "21241321", "22114141", "11214142", "22123231", "11223232", "22132321", "11232322", "22141411", "11241412", "12114232", "12123322", "12132412", "21232411", "22114321", "11214322", "22123411", "11223412", "13141141", "11341141", "12232141", "12241231", "13123141", "13132231", "11323141", "13141321", "11332231", "11341321", "12214141", "12223231", "12232321", "12241411", "13114231", "13123321", "11314231", "13132411", "11323321", "11332411", "12214321", "12223411", "11151142", "21142141", "21151231", "11133142", "11142232", "11151322", "21124141", "21133231", "21142321", "21151411", "11115142", "11124232", "11133322", "11142412", "21115231", "21124321", "21133411", "12151141", "11242141", "11251231", "12133141", "12142231", "12151321", "11224141", "11233231", "11242321", "11251411", "12115141", "12124231", "12133321", "12142411", "11215231", "11224321", "11233411", "11161141", "11143141", "11152231", "11161321", "11125141", "11134231", "11143321", "11152411", "11111245", "31111243", "51111241", "21111334", "41111332", "11111425", "31111423", "51111421", "21111514", "41111512", "31211152", "12111244", "32111242", "21211243", "41211241", "22111333", "42111331", "11211334", "31211332", "12111424", "32111422", "21211423", "41211421", "22111513", "42111511", "11211514", "31211512", "12211153", "32211151", "21311152", "13111243", "33111241", "22211242", "11311243", "31311241", "23111332", "12211333", "32211331", "21311332", "13111423", "33111421", "22211422", "11311423", "31311421", "23111512", "12211513", "32211511", "21311512", "13211152", "22311151", "11411152", "14111242", "23211241", "12311242", "21411241", "24111331", "13211332", "22311331", "11411332", "14111422", "23211421", "12311422", "21411421", "24111511", "13211512", "22311511", "11411512", "14211151", "12411151", "15111241", "13311241", "11511241", "14211331", "12411331", "15111421", "13311421", "11511421", "14211511", "12411511", "21121153", "41121151", "11112154", "31112152", "11121244", "31121242", "21112243", "41112241", "21121333", "41121331", "11112334", "31112332", "11121424", "31121422", "21112423", "41112421", "21121513", "41121511", "11112514", "31112512", "22121152", "11221153", "31221151", "12112153", "32112151", "12121243", "32121241", "21221242", "22112242", "11212243", "22121332", "11221333", "31221331", "12112333", "32112331", "12121423", "32121421", "21221422", "22112422", "11212423", "22121512", "11221513", "31221511", "12112513", "32112511", "21212512", "23121151", "12221152", "21321151", "13112152", "13121242", "11312152", "22221241", "11321242", "23112241", "12212242", "23121331", "12221332", "21321331", "13112332", "13121422", "11312332", "22221421", "11321422", "23112421", "12212422", "23121511", "12221512", "21321511", "13112512", "22212511", "11312512", "13221151", "11421151", "14112151", "14121241", "12312151", "12321241", "13212241", "13221331", "11412241", "11421331", "14112331", "14121421", "12312331", "12321421", "13212421", "13221511", "11412421", "11421511", "14112511", "12312511", "21131152", "11122153", "31122151", "11131243", "31131241", "21113152", "21122242", "21131332", "11113243", "31113241", "11122333", "31122331", "11131423", "31131421", "21113332", "21122422", "21131512", "11113423", "31113421", "11122513", "31122511", "22131151", "11231152", "12122152", "12131242", "21231241", "22113151", "11213152", "22122241", "11222242", "22131331", "11231332", "12113242", "12122332", "12131422", "21231421", "22113331", "11213332", "22122421", "11222422", "22131511", "11231512", "12113422", "12122512", "21222511", "12231151", "13122151", "13131241", "11322151", "11331241", "12213151", "12222241", "12231331", "13113241", "13122331", "11313241", "13131421", "11322331", "11331421", "12213331", "12222421", "12231511", "13113421", "13122511", "11313421", "11322511", "21141151", "11132152", "11141242", "21123151", "21132241", "21141331", "11114152", "11123242", "11132332", "11141422", "21114241", "21123331", "21132421", "21141511", "11114332", "11123422", "11132512", "11241151", "12132151", "12141241", "11223151", "11232241", "11241331", "12114151", "12123241", "12132331", "12141421", "11214241", "11223331", "11232421", "11241511", "12114331", "12123421", "12132511", "11142151", "11151241", "11124151", "11133241", "11142331", "11151421", "11115241", "11124331", "11133421", "11142511", "21111253", "41111251", "11111344", "31111342", "21111433", "41111431", "11111524", "31111522", "21111613", "41111611", "21211162", "22111252", "11211253", "31211251", "12111343", "32111341", "21211342", "22111432", "11211433", "31211431", "12111523", "32111521", "21211522", "22111612", "11211613", "31211611", "22211161", "11311162", "23111251", "12211252", "21311251", "13111342", "22211341", "11311342", "23111431", "12211432", "21311431", "13111522", "22211521", "11311522", "23111611", "12211612", "21311611", "12311161", "13211251", "11411251", "14111341", "12311341", "13211431", "11411431", "14111521", "12311521", "13211611", "11411611", "31121161", "21112162", "21121252", "11112253", "31112251", "11121343", "31121341", "21112342", "21121432", "11112433", "31112431", "11121523", "31121521", "21112522", "21121612", "12121162", "21221161", "22112161", "11212162", "22121251", "11221252", "12112252", "12121342", "21221341", "22112341", "11212342", "22121431", "11221432", "12112432", "12121522", "21221521", "22112521", "11212522", "22121611", "11221612", "13121161", "11321161", "12212161", "12221251", "13112251", "13121341", "11312251", "11321341", "12212341", "12221431", "13112431", "13121521", "11312431", "11321521", "12212521", "12221611", "11131162", "21122161", "21131251", "11113162"])]); //#16119
        $_.parity = $a(["1001", "0101", "1100", "0011", "1010", "0110", "1111", "0000"]); //#16123
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code49.$ctx[id] = $_[id]); //#16123
        bwipp_code49.__16124__ = 1; //#16123
        $_ = Object.getPrototypeOf($_); //#16123
    } //#16123
    $_.rowbits = $a($_.r); //#16127
    for (var _6H = 0, _6G = $f($_.r - 1); _6H <= _6G; _6H += 1) { //#16147
        $_.i = _6H; //#16129
        $k[$j++] = 'p'; //#16130
        if ($_.i != $f($_.r - 1)) { //#16130
            $k[$j++] = $get($_.parity, $_.i); //#16130
        } else { //#16130
            $k[$j++] = "0000"; //#16130
        } //#16130
        var _6N = $k[--$j]; //#16130
        $_[$k[--$j]] = _6N; //#16130
        $_.ccrow = $geti($_.ccs, $_.i * 8, 8); //#16131
        $k[$j++] = Infinity; //#16132
        for (var _6S = 0; _6S <= 7; _6S += 2) { //#16133
            $aload($geti($_.ccrow, _6S, 2)); //#16133
            var _6V = $k[--$j]; //#16133
            var _6W = $k[--$j]; //#16133
            $k[$j++] = $f(_6V + (_6W * 49)); //#16133
        } //#16133
        $_.scrow = $a(); //#16133
        $k[$j++] = Infinity; //#16135
        $k[$j++] = 10; //#16140
        $k[$j++] = 1; //#16140
        $k[$j++] = 1; //#16140
        for (var _6Y = 0; _6Y <= 3; _6Y += 1) { //#16140
            $_.j = _6Y; //#16138
            $forall($get($get($_.patterns, $f($get($_.p, $_.j) - 48)), $get($_.scrow, $_.j)), function() { //#16139
                var _6i = $k[--$j]; //#16139
                $k[$j++] = $f(_6i - 48); //#16139
            }); //#16139
        } //#16139
        $k[$j++] = 4; //#16141
        $k[$j++] = 1; //#16141
        $_.sbs = $a(); //#16141
        $k[$j++] = Infinity; //#16143
        var _6k = $_.sbs; //#16144
        $k[$j++] = 1; //#16144
        for (var _6l = 0, _6m = _6k.length; _6l < _6m; _6l++) { //#16144
            var _6o = $k[--$j]; //#16144
            var _6p = (_6o == 0) ? 1 : 0; //#16144
            $k[$j++] = _6o; //#16144
            for (var _6q = 0, _6r = $get(_6k, _6l); _6q < _6r; _6q++) { //#16144
                $k[$j++] = _6p //#16144
            } //#16144
        } //#16144
        $astore($a($counttomark() - 1)); //#16145
        var _6u = $k[--$j]; //#16145
        var _6v = $k[--$j]; //#16145
        $k[$j++] = _6u; //#16145
        $k[$j++] = _6v; //#16145
        $j--; //#16145
        var _6w = $k[--$j]; //#16145
        var _6x = $k[--$j]; //#16145
        $k[$j++] = _6w; //#16145
        $k[$j++] = _6x; //#16145
        $j--; //#16145
        $k[$j++] = $_.rowbits; //#16146
        $k[$j++] = $_.i; //#16146
        $r(3, -1); //#16146
        var _70 = $k[--$j]; //#16146
        var _71 = $k[--$j]; //#16146
        $put($k[--$j], _71, _70); //#16146
    } //#16146
    $k[$j++] = Infinity; //#16150
    for (var _74 = 0, _75 = 81 * $_.sepheight; _74 < _75; _74++) { //#16151
        $k[$j++] = 1; //#16151
    } //#16151
    for (var _78 = 0, _77 = $f($_.r - 2); _78 <= _77; _78 += 1) { //#16156
        $_.i = _78; //#16153
        for (var _7A = 0, _7B = $_.rowheight; _7A < _7B; _7A++) { //#16154
            $aload($get($_.rowbits, $_.i)); //#16154
        } //#16154
        for (var _7G = 0, _7H = $_.sepheight; _7G < _7H; _7G++) { //#16155
            for (var _7I = 0, _7J = 10; _7I < _7J; _7I++) { //#16155
                $k[$j++] = 0; //#16155
            } //#16155
            for (var _7K = 0, _7L = 70; _7K < _7L; _7K++) { //#16155
                $k[$j++] = 1; //#16155
            } //#16155
            $k[$j++] = 0; //#16155
        } //#16155
    } //#16155
    for (var _7N = 0, _7O = $_.rowheight; _7N < _7O; _7N++) { //#16157
        $aload($get($_.rowbits, $f($_.r - 1))); //#16157
    } //#16157
    for (var _7T = 0, _7U = 81 * $_.sepheight; _7T < _7U; _7T++) { //#16158
        $k[$j++] = 1; //#16158
    } //#16158
    $_.pixs = $a(); //#16158
    var _7a = new Map([
        ["ren", 'renmatrix'],
        ["pixs", $_.pixs],
        ["pixx", 81],
        ["pixy", ~~($_.pixs.length / 81)],
        ["height", (~~($_.pixs.length / 81)) / 72],
        ["width", 81 / 72],
        ["opt", $_.options]
    ]); //#16169
    $k[$j++] = _7a; //#16172
    if (!$_.dontdraw) { //#16172
        bwipp_renmatrix(); //#16172
    } //#16172
    $_ = Object.getPrototypeOf($_); //#16174
    $_ = Object.getPrototypeOf($_); //#16176
} //bwipp_code49
function bwipp_flattermarken() {
    $_ = Object.create($_); //#16470
    $_.dontdraw = false; //#16473
    $_.includetext = false; //#16474
    $_.textfont = "OCR-B"; //#16475
    $_.textsize = 10; //#16476
    $_.textyoffset = -8; //#16477
    $_.height = 0.3; //#16478
    $k[$j++] = $_; //#16480
    bwipp_processoptions(); //#16480
    $_.options = $k[--$j]; //#16480
    $_.barcode = $k[--$j]; //#16481
    bwipp_loadctx(bwipp_flattermarken); //#16483
    $forall($_.barcode, function() { //#16490
        var _3 = $k[--$j]; //#16487
        if ((_3 < 48) || (_3 > 57)) { //#16489
            $k[$j++] = 'bwipp.flattermarkenBadCharacter#16488'; //#16488
            $k[$j++] = "Flattermarken must contain only digits"; //#16488
            bwipp_raiseerror(); //#16488
        } //#16488
    }); //#16488
    if (!bwipp_flattermarken.__16501__) { //#16501
        $_ = Object.create($_); //#16501
        $_.encs = $a(["0018", "0117", "0216", "0315", "0414", "0513", "0612", "0711", "0810", "0900"]); //#16497
        $_.barchars = "1234567890"; //#16500
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_flattermarken.$ctx[id] = $_[id]); //#16500
        bwipp_flattermarken.__16501__ = 1; //#16500
        $_ = Object.getPrototypeOf($_); //#16500
    } //#16500
    $_.barlen = $_.barcode.length; //#16503
    $_.sbs = $s($_.barlen * 4); //#16505
    $_.txt = $a($_.barlen); //#16506
    for (var _D = 0, _C = $_.barlen - 1; _D <= _C; _D += 1) { //#16518
        $_.i = _D; //#16509
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#16511
        $j--; //#16512
        $_.indx = $k[--$j].length; //#16513
        $j -= 2; //#16514
        $_.enc = $get($_.encs, $_.indx); //#16515
        $puti($_.sbs, $_.i * 4, $_.enc); //#16516
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), $_.i * 9, $_.textyoffset, $_.textfont, $_.textsize])); //#16517
    } //#16517
    $k[$j++] = Infinity; //#16521
    $k[$j++] = Infinity; //#16523
    var _Z = $_.sbs; //#16523
    for (var _a = 0, _b = _Z.length; _a < _b; _a++) { //#16523
        $k[$j++] = $get(_Z, _a) - 48; //#16523
    } //#16523
    var _d = $a(); //#16523
    $k[$j++] = Infinity; //#16524
    for (var _f = 0, _g = ~~(($_.sbs.length + 1) / 2); _f < _g; _f++) { //#16524
        $k[$j++] = $_.height; //#16524
    } //#16524
    var _i = $a(); //#16524
    $k[$j++] = Infinity; //#16525
    for (var _k = 0, _l = ~~(($_.sbs.length + 1) / 2); _k < _l; _k++) { //#16525
        $k[$j++] = 0; //#16525
    } //#16525
    var _m = $a(); //#16525
    $k[$j++] = 'ren'; //#16527
    $k[$j++] = 'renlinear'; //#16527
    $k[$j++] = 'sbs'; //#16527
    $k[$j++] = _d; //#16527
    $k[$j++] = 'bhs'; //#16527
    $k[$j++] = _i; //#16527
    $k[$j++] = 'bbs'; //#16527
    $k[$j++] = _m; //#16527
    $k[$j++] = 'txt'; //#16527
    $k[$j++] = $_.txt; //#16527
    $k[$j++] = 'opt'; //#16527
    $k[$j++] = $_.options; //#16527
    var _p = $d(); //#16527
    $k[$j++] = _p; //#16530
    if (!$_.dontdraw) { //#16530
        bwipp_renlinear(); //#16530
    } //#16530
    $_ = Object.getPrototypeOf($_); //#16532
    $_ = Object.getPrototypeOf($_); //#16534
} //bwipp_flattermarken
function bwipp_raw() {
    $_ = Object.create($_); //#16562
    $_.dontdraw = false; //#16565
    $_.height = 1; //#16566
    $k[$j++] = $_; //#16568
    bwipp_processoptions(); //#16568
    $_.options = $k[--$j]; //#16568
    $_.barcode = $k[--$j]; //#16569
    $forall($_.barcode, function() { //#16576
        var _3 = $k[--$j]; //#16573
        if ((_3 < 49) || (_3 > 57)) { //#16575
            $k[$j++] = 'bwipp.rawBadCharacter#16574'; //#16574
            $k[$j++] = "Raw must contain only digits 1 to 9"; //#16574
            bwipp_raiseerror(); //#16574
        } //#16574
    }); //#16574
    $k[$j++] = Infinity; //#16579
    $k[$j++] = Infinity; //#16581
    $forall($_.barcode, function() { //#16581
        var _5 = $k[--$j]; //#16581
        $k[$j++] = $f(_5 - 48); //#16581
    }); //#16581
    var _6 = $a(); //#16581
    $k[$j++] = Infinity; //#16582
    for (var _8 = 0, _9 = ~~(($_.barcode.length + 1) / 2); _8 < _9; _8++) { //#16582
        $k[$j++] = $_.height; //#16582
    } //#16582
    var _B = $a(); //#16582
    $k[$j++] = Infinity; //#16583
    for (var _D = 0, _E = ~~(($_.barcode.length + 1) / 2); _D < _E; _D++) { //#16583
        $k[$j++] = 0; //#16583
    } //#16583
    var _F = $a(); //#16583
    $k[$j++] = 'ren'; //#16584
    $k[$j++] = 'renlinear'; //#16584
    $k[$j++] = 'sbs'; //#16584
    $k[$j++] = _6; //#16584
    $k[$j++] = 'bhs'; //#16584
    $k[$j++] = _B; //#16584
    $k[$j++] = 'bbs'; //#16584
    $k[$j++] = _F; //#16584
    $k[$j++] = 'opt'; //#16584
    $k[$j++] = $_.options; //#16584
    var _H = $d(); //#16584
    $k[$j++] = _H; //#16587
    if (!$_.dontdraw) { //#16587
        bwipp_renlinear(); //#16587
    } //#16587
    $_ = Object.getPrototypeOf($_); //#16589
} //bwipp_raw
function bwipp_daft() {
    $_ = Object.create($_); //#16617
    $_.dontdraw = false; //#16620
    $_.height = 0.175; //#16621
    $k[$j++] = $_; //#16623
    bwipp_processoptions(); //#16623
    $_.options = $k[--$j]; //#16623
    $_.barcode = $k[--$j]; //#16624
    if ($eq($_.barcode, "")) { //#16628
        $k[$j++] = 'bwipp.daftEmptyData#16627'; //#16627
        $k[$j++] = "The data must not be empty"; //#16627
        bwipp_raiseerror(); //#16627
    } //#16627
    $forall($_.barcode, function() { //#16634
        var _4 = $k[--$j]; //#16631
        if ((_4 != 68) && ((_4 != 65) && ((_4 != 70) && (_4 != 84)))) { //#16633
            $k[$j++] = 'bwipp.daftBadCharacter#16632'; //#16632
            $k[$j++] = "DAFT must contain only characters D, A, F and T"; //#16632
            bwipp_raiseerror(); //#16632
        } //#16632
    }); //#16632
    $_.barlen = $_.barcode.length; //#16636
    $_.bbs = $a($_.barlen); //#16638
    $_.bhs = $a($_.barlen); //#16639
    for (var _C = 0, _B = $_.barlen - 1; _C <= _B; _C += 1) { //#16659
        $_.i = _C; //#16641
        $_.enc = $geti($_.barcode, $_.i, 1); //#16642
        if ($eq($_.enc, "D")) { //#16646
            $put($_.bbs, $_.i, (0 * $_.height) / 8); //#16644
            $put($_.bhs, $_.i, (5 * $_.height) / 8); //#16645
        } //#16645
        if ($eq($_.enc, "A")) { //#16650
            $put($_.bbs, $_.i, (3 * $_.height) / 8); //#16648
            $put($_.bhs, $_.i, (5 * $_.height) / 8); //#16649
        } //#16649
        if ($eq($_.enc, "F")) { //#16654
            $put($_.bbs, $_.i, (0 * $_.height) / 8); //#16652
            $put($_.bhs, $_.i, (8 * $_.height) / 8); //#16653
        } //#16653
        if ($eq($_.enc, "T")) { //#16658
            $put($_.bbs, $_.i, (3 * $_.height) / 8); //#16656
            $put($_.bhs, $_.i, (2 * $_.height) / 8); //#16657
        } //#16657
    } //#16657
    $k[$j++] = Infinity; //#16662
    var _i = $_.bbs; //#16664
    var _j = $_.bhs; //#16665
    $k[$j++] = Infinity; //#16666
    for (var _l = 0, _m = $_.bhs.length - 1; _l < _m; _l++) { //#16666
        $k[$j++] = 1.44; //#16666
        $k[$j++] = 1.872; //#16666
    } //#16666
    $k[$j++] = 1.44; //#16666
    var _n = $a(); //#16666
    $k[$j++] = 'ren'; //#16667
    $k[$j++] = 'renlinear'; //#16667
    $k[$j++] = 'bbs'; //#16667
    $k[$j++] = _i; //#16667
    $k[$j++] = 'bhs'; //#16667
    $k[$j++] = _j; //#16667
    $k[$j++] = 'sbs'; //#16667
    $k[$j++] = _n; //#16667
    $k[$j++] = 'opt'; //#16667
    $k[$j++] = $_.options; //#16667
    var _p = $d(); //#16667
    $k[$j++] = _p; //#16670
    if (!$_.dontdraw) { //#16670
        bwipp_renlinear(); //#16670
    } //#16670
    $_ = Object.getPrototypeOf($_); //#16672
} //bwipp_daft
function bwipp_symbol() {
    $_ = Object.create($_); //#16703
    $_.dontdraw = false; //#16706
    $k[$j++] = $_; //#16708
    bwipp_processoptions(); //#16708
    $_.options = $k[--$j]; //#16708
    var _1 = $k[--$j]; //#16709
    $_.barcode = _1; //#16709
    bwipp_loadctx(bwipp_symbol); //#16711
    if (!bwipp_symbol.__16747__) { //#16747
        $_ = Object.create($_); //#16747
        $_.fimasbs = $a([2.25, 2.25, 2.25, 11.25, 2.25, 11.25, 2.25, 2.25, 2.25]); //#16715
        $k[$j++] = Infinity; //#16716
        for (var _4 = 0, _5 = (~~($_.fimasbs.length / 2)) + 1; _4 < _5; _4++) { //#16716
            $k[$j++] = 0.625; //#16716
        } //#16716
        $_.fimabhs = $a(); //#16716
        $k[$j++] = Infinity; //#16717
        for (var _8 = 0, _9 = (~~($_.fimasbs.length / 2)) + 1; _8 < _9; _8++) { //#16717
            $k[$j++] = 0; //#16717
        } //#16717
        $_.fimabbs = $a(); //#16717
        $_.fimbsbs = $a([2.25, 6.75, 2.25, 2.25, 2.25, 6.25, 2.25, 2.25, 2.25, 6.75, 2.25]); //#16719
        $k[$j++] = Infinity; //#16720
        for (var _D = 0, _E = (~~($_.fimbsbs.length / 2)) + 1; _D < _E; _D++) { //#16720
            $k[$j++] = 0.625; //#16720
        } //#16720
        $_.fimbbhs = $a(); //#16720
        $k[$j++] = Infinity; //#16721
        for (var _H = 0, _I = (~~($_.fimbsbs.length / 2)) + 1; _H < _I; _H++) { //#16721
            $k[$j++] = 0; //#16721
        } //#16721
        $_.fimbbbs = $a(); //#16721
        $_.fimcsbs = $a([2.25, 2.25, 2.25, 6.75, 2.25, 6.75, 2.25, 6.75, 2.25, 2.25, 2.25]); //#16723
        $k[$j++] = Infinity; //#16724
        for (var _M = 0, _N = (~~($_.fimcsbs.length / 2)) + 1; _M < _N; _M++) { //#16724
            $k[$j++] = 0.625; //#16724
        } //#16724
        $_.fimcbhs = $a(); //#16724
        $k[$j++] = Infinity; //#16725
        for (var _Q = 0, _R = (~~($_.fimcsbs.length / 2)) + 1; _Q < _R; _Q++) { //#16725
            $k[$j++] = 0; //#16725
        } //#16725
        $_.fimcbbs = $a(); //#16725
        $_.fimdsbs = $a([2.25, 2.25, 2.25, 2.25, 2.25, 6.75, 2.25, 6.75, 2.25, 2.25, 2.25, 2.25, 2.25]); //#16727
        $k[$j++] = Infinity; //#16728
        for (var _V = 0, _W = (~~($_.fimdsbs.length / 2)) + 1; _V < _W; _V++) { //#16728
            $k[$j++] = 0.625; //#16728
        } //#16728
        $_.fimdbhs = $a(); //#16728
        $k[$j++] = Infinity; //#16729
        for (var _Z = 0, _a = (~~($_.fimdsbs.length / 2)) + 1; _Z < _a; _Z++) { //#16729
            $k[$j++] = 0; //#16729
        } //#16729
        $_.fimdbbs = $a(); //#16729
        $_.fimesbs = $a([2.25, 6.75, 2.25, 15.75, 2.25, 6.75, 2.25]); //#16731
        $k[$j++] = Infinity; //#16732
        for (var _e = 0, _f = (~~($_.fimesbs.length / 2)) + 1; _e < _f; _e++) { //#16732
            $k[$j++] = 0.625; //#16732
        } //#16732
        $_.fimebhs = $a(); //#16732
        $k[$j++] = Infinity; //#16733
        for (var _i = 0, _j = (~~($_.fimesbs.length / 2)) + 1; _i < _j; _i++) { //#16733
            $k[$j++] = 0; //#16733
        } //#16733
        $_.fimebbs = $a(); //#16733
        $k[$j++] = Infinity; //#16735
        for (var _l = 0, _m = 100; _l < _m; _l++) { //#16735
            $k[$j++] = 1; //#16735
            $k[$j++] = 1; //#16735
        } //#16735
        $k[$j++] = 1; //#16735
        $_.zebrasbs = $a(); //#16735
        $k[$j++] = Infinity; //#16736
        for (var _p = 0, _q = (~~($_.zebrasbs.length / 2)) + 1; _p < _q; _p++) { //#16736
            $k[$j++] = 1; //#16736
        } //#16736
        $_.zebrabhs = $a(); //#16736
        $k[$j++] = Infinity; //#16737
        for (var _t = 0, _u = (~~($_.zebrasbs.length / 2)) + 1; _t < _u; _t++) { //#16737
            $k[$j++] = 0; //#16737
        } //#16737
        $_.zebrabbs = $a(); //#16737
        $_.checksize = 199; //#16739
        $k[$j++] = Infinity; //#16740
        var _w = $_.checksize; //#16740
        for (var _x = 0, _y = ~~((_w * _w) / 2); _x < _y; _x++) { //#16740
            $k[$j++] = 1; //#16740
            $k[$j++] = 0; //#16740
        } //#16740
        $k[$j++] = 1; //#16740
        $_.checkpixs = $a(); //#16740
        var _10 = new Map([
            ["renlinear", bwipp_renlinear],
            ["renmatrix", bwipp_renmatrix]
        ]); //#16744
        $_.renmap = _10; //#16745
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_symbol.$ctx[id] = $_[id]); //#16745
        bwipp_symbol.__16747__ = 1; //#16745
        $_ = Object.getPrototypeOf($_); //#16745
    } //#16745
    var _1W = new Map([
        ["fima", function() {
            var _15 = new Map([
                ["ren", 'renlinear'],
                ["sbs", $_.fimasbs],
                ["bhs", $_.fimabhs],
                ["bbs", $_.fimabbs]
            ]); //#16750
            $k[$j++] = _15; //#16750
        }],
        ["fimb", function() {
            var _19 = new Map([
                ["ren", 'renlinear'],
                ["sbs", $_.fimbsbs],
                ["bhs", $_.fimbbhs],
                ["bbs", $_.fimbbbs]
            ]); //#16751
            $k[$j++] = _19; //#16751
        }],
        ["fimc", function() {
            var _1D = new Map([
                ["ren", 'renlinear'],
                ["sbs", $_.fimcsbs],
                ["bhs", $_.fimcbhs],
                ["bbs", $_.fimcbbs]
            ]); //#16752
            $k[$j++] = _1D; //#16752
        }],
        ["fimd", function() {
            var _1H = new Map([
                ["ren", 'renlinear'],
                ["sbs", $_.fimdsbs],
                ["bhs", $_.fimdbhs],
                ["bbs", $_.fimdbbs]
            ]); //#16753
            $k[$j++] = _1H; //#16753
        }],
        ["fime", function() {
            var _1L = new Map([
                ["ren", 'renlinear'],
                ["sbs", $_.fimesbs],
                ["bhs", $_.fimebhs],
                ["bbs", $_.fimebbs]
            ]); //#16754
            $k[$j++] = _1L; //#16754
        }],
        ["zebra", function() {
            var _1P = new Map([
                ["ren", 'renlinear'],
                ["sbs", $_.zebrasbs],
                ["bhs", $_.zebrabhs],
                ["bbs", $_.zebrabbs]
            ]); //#16755
            $k[$j++] = _1P; //#16755
        }],
        ["check", function() {
            var _1V = new Map([
                ["ren", 'renmatrix'],
                ["pixs", $_.checkpixs],
                ["pixx", $_.checksize],
                ["pixy", $_.checksize],
                ["height", $_.checksize / 72],
                ["width", $_.checksize / 72]
            ]); //#16756
            $k[$j++] = _1V; //#16756
        }]
    ]); //#16756
    $_.symbols = _1W; //#16757
    var _1Z = $get($_.symbols, $_.barcode) !== undefined; //#16760
    if (!_1Z) { //#16762
        $k[$j++] = 'bwipp.symbolUnknownSymbol#16761'; //#16761
        $k[$j++] = "Unknown symbol name provided"; //#16761
        bwipp_raiseerror(); //#16761
    } //#16761
    if ($get($_.symbols, $_.barcode)() === true) {
        return true;
    } //#16764
    var _1d = $k[--$j]; //#16765
    $put(_1d, 'opt', $_.options); //#16765
    $k[$j++] = _1d; //#16767
    if (!$_.dontdraw) { //#16767
        var _1g = $k[--$j]; //#16767
        $k[$j++] = _1g; //#16767
        if ($get($_.renmap, $get(_1g, 'ren'))() === true) {
            return true;
        } //#16767
    } //#16767
    $_ = Object.getPrototypeOf($_); //#16769
    $_ = Object.getPrototypeOf($_); //#16771
} //bwipp_symbol
function bwipp_pdf417() {
    $_ = Object.create($_); //#16802
    $_.dontdraw = false; //#16805
    $_.compact = false; //#16806
    $_.eclevel = -1; //#16807
    $_.columns = 0; //#16808
    $_.rows = 0; //#16809
    $_.rowmult = 3; //#16810
    $_.ccc = false; //#16811
    $_.raw = false; //#16812
    $_.parse = false; //#16813
    $_.parsefnc = false; //#16814
    $k[$j++] = $_; //#16816
    bwipp_processoptions(); //#16816
    $_.options = $k[--$j]; //#16816
    $_.barcode = $k[--$j]; //#16817
    if ($eq($_.barcode, "")) { //#16821
        $k[$j++] = 'bwipp.pdf417emptyData#16820'; //#16820
        $k[$j++] = "The data must not be empty"; //#16820
        bwipp_raiseerror(); //#16820
    } //#16820
    if (($_.eclevel != -1) && (($_.eclevel < 0) || ($_.eclevel > 8))) { //#16825
        $k[$j++] = 'bwipp.pdf417InvalidErrorCorrectionLevel#16824'; //#16824
        $k[$j++] = "Valid error correction levels are 0 to 8"; //#16824
        bwipp_raiseerror(); //#16824
    } //#16824
    if ($_.ccc && $_.raw) { //#16829
        $k[$j++] = 'bwipp.pdf417cccAndRaw#16828'; //#16828
        $k[$j++] = "Cannot combine ccc and raw"; //#16828
        bwipp_raiseerror(); //#16828
    } //#16828
    if ($_.ccc && $_.compact) { //#16833
        $k[$j++] = 'bwipp.pdf417cccAndCompact#16832'; //#16832
        $k[$j++] = "Cannot combine ccc and compact"; //#16832
        bwipp_raiseerror(); //#16832
    } //#16832
    if (($_.rows != 0) && (($_.rows < 3) || ($_.rows > 90))) { //#16837
        $k[$j++] = 'bwipp.pdf417invalidRows#16836'; //#16836
        $k[$j++] = "There must be between 3 and 90 rows"; //#16836
        bwipp_raiseerror(); //#16836
    } //#16836
    if (($_.columns != 0) && (($_.columns < 1) || ($_.columns > 30))) { //#16841
        $k[$j++] = 'bwipp.pdf417invalidColumns#16840'; //#16840
        $k[$j++] = "There must be between 1 and 30 columns"; //#16840
        bwipp_raiseerror(); //#16840
    } //#16840
    if ($_.rowmult <= 0) { //#16845
        $k[$j++] = 'bwipp.pdf417badRowMult#16844'; //#16844
        $k[$j++] = "The row multiplier must be greater than zero"; //#16844
        bwipp_raiseerror(); //#16844
    } //#16844
    bwipp_loadctx(bwipp_pdf417); //#16847
    if (!bwipp_pdf417.__16938__) { //#16938
        $_ = Object.create($_); //#16938
        $_.T = 0; //#16851
        $_.N = 1; //#16851
        $_.B = 2; //#16851
        $_.A = 0; //#16852
        $_.L = 1; //#16852
        $_.M = 2; //#16852
        $_.P = 3; //#16852
        $_.tl = -1; //#16855
        $_.nl = -2; //#16855
        $_.bl = -3; //#16855
        $_.bl6 = -4; //#16855
        $_.bs = -5; //#16855
        $_.al = -6; //#16858
        $_.ll = -7; //#16858
        $_.ml = -8; //#16858
        $_.pl = -9; //#16858
        $_.as = -10; //#16858
        $_.ps = -11; //#16858
        $_.charmaps = $a([$a(["A", "a", "0", ";"]), $a(["B", "b", "1", "<"]), $a(["C", "c", "2", ">"]), $a(["D", "d", "3", "@"]), $a(["E", "e", "4", "["]), $a(["F", "f", "5", 92]), $a(["G", "g", "6", "]"]), $a(["H", "h", "7", "_"]), $a(["I", "i", "8", "`"]), $a(["J", "j", "9", "~"]), $a(["K", "k", "&", "!"]), $a(["L", "l", 13, 13]), $a(["M", "m", 9, 9]), $a(["N", "n", ",", ","]), $a(["O", "o", ":", ":"]), $a(["P", "p", "#", 10]), $a(["Q", "q", "-", "-"]), $a(["R", "r", ".", "."]), $a(["S", "s", "$", "$"]), $a(["T", "t", "/", "/"]), $a(["U", "u", "+", "\""]), $a(["V", "v", "%", "|"]), $a(["W", "w", "*", "*"]), $a(["X", "x", "=", 40]), $a(["Y", "y", "^", 41]), $a(["Z", "z", $_.pl, "?"]), $a([" ", " ", " ", "{"]), $a([$_.ll, $_.as, $_.ll, "}"]), $a([$_.ml, $_.ml, $_.al, "'"]), $a([$_.ps, $_.ps, $_.ps, $_.al])]); //#16893
        $_.charvals = $a([new Map, new Map, new Map, new Map]); //#16896
        $_.alltext = new Map; //#16897
        for (var _10 = 0, _z = $_.charmaps.length - 1; _10 <= _z; _10 += 1) { //#16907
            $_.i = _10; //#16899
            $_.encs = $get($_.charmaps, $_.i); //#16900
            for (var _14 = 0; _14 <= 3; _14 += 1) { //#16906
                $_.j = _14; //#16902
                var _17 = $get($_.encs, $_.j); //#16903
                $k[$j++] = _17; //#16903
                if ($eq($type(_17), 'stringtype')) { //#16903
                    var _1A = $get($k[--$j], 0); //#16903
                    $k[$j++] = _1A; //#16903
                } //#16903
                var _1B = $k[--$j]; //#16904
                $put($get($_.charvals, $_.j), _1B, $_.i); //#16904
                $put($_.alltext, _1B, -1); //#16905
            } //#16905
        } //#16905
        $_.e = 10000; //#16909
        $_.latlen = $a([$a([0, 1, 1, 2]), $a([2, 0, 1, 2]), $a([1, 1, 0, 1]), $a([1, 2, 2, 0])]); //#16917
        $_.latseq = $a([$a([$a([]), $a([$_.ll]), $a([$_.ml]), $a([$_.ml, $_.pl])]), $a([$a([$_.ml, $_.al]), $a([]), $a([$_.ml]), $a([$_.ml, $_.pl])]), $a([$a([$_.al]), $a([$_.ll]), $a([]), $a([$_.pl])]), $a([$a([$_.al]), $a([$_.al, $_.ll]), $a([$_.al, $_.ml]), $a([])])]); //#16925
        $_.shftlen = $a([$a([$_.e, $_.e, $_.e, 1]), $a([1, $_.e, $_.e, 1]), $a([$_.e, $_.e, $_.e, 1]), $a([$_.e, $_.e, $_.e, $_.e])]); //#16933
        $k[$j++] = Infinity; //#16935
        $k[$j++] = $_.tl; //#16936
        $k[$j++] = 900; //#16936
        $k[$j++] = $_.bl; //#16936
        $k[$j++] = 901; //#16936
        $k[$j++] = $_.bl6; //#16936
        $k[$j++] = 924; //#16936
        $k[$j++] = $_.nl; //#16936
        $k[$j++] = 902; //#16936
        $k[$j++] = $_.bs; //#16936
        $k[$j++] = 913; //#16936
        $_.latchcws = $d(); //#16937
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_pdf417.$ctx[id] = $_[id]); //#16937
        bwipp_pdf417.__16938__ = 1; //#16937
        $_ = Object.getPrototypeOf($_); //#16937
    } //#16937
    if ($_.raw) { //#16959
        $_.datcws = $a($_.barcode.length); //#16942
        $_.i = 0; //#16943
        $_.j = 0; //#16943
        for (;;) { //#16954
            if ($_.i >= ($_.barcode.length - 3)) { //#16945
                break; //#16945
            } //#16945
            if ($get($_.barcode, $_.i) != 94) { //#16946
                break; //#16946
            } //#16946
            var _2W = $geti($_.barcode, $_.i + 1, 3); //#16947
            $k[$j++] = _2W; //#16949
            $k[$j++] = false; //#16949
            for (var _2X = 0, _2Y = _2W.length; _2X < _2Y; _2X++) { //#16949
                var _2Z = $get(_2W, _2X); //#16949
                if ((_2Z < 48) || (_2Z > 57)) { //#16948
                    $j--; //#16948
                    $k[$j++] = true; //#16948
                } //#16948
            } //#16948
            if ($k[--$j]) { //#16949
                $j--; //#16949
                break; //#16949
            } //#16949
            $_.cw = $cvi($k[--$j]); //#16950
            $put($_.datcws, $_.j, $_.cw); //#16951
            $_.i = $_.i + 4; //#16952
            $_.j = $_.j + 1; //#16953
        } //#16953
        if ($_.i != $_.barcode.length) { //#16957
            $k[$j++] = 'bwipp.pdf417badRawFormat#16956'; //#16956
            $k[$j++] = "raw data must be formatted as ^NNN"; //#16956
            bwipp_raiseerror(); //#16956
        } //#16956
        $_.datcws = $geti($_.datcws, 0, $_.j); //#16958
    } //#16958
    $_.encb = function() {
        $_.in = $k[--$j]; //#16962
        $_.inlen = $_.in.length; //#16963
        $_.out = $a(((~~($_.inlen / 6)) * 5) + ($_.inlen % 6)); //#16964
        for (var _2t = 0, _2s = (~~($_.inlen / 6)) - 1; _2t <= _2s; _2t += 1) { //#16987
            $_.k = _2t; //#16966
            $k[$j++] = Infinity; //#16967
            $aload($geti($_.in, $_.k * 6, 3)); //#16967
            $_.msbs = $a(); //#16967
            $k[$j++] = Infinity; //#16968
            $aload($_.msbs); //#16969
            var _2z = $k[--$j]; //#16969
            var _30 = $k[--$j]; //#16969
            var _31 = $k[--$j]; //#16969
            $k[$j++] = $f(($f(_2z + (_30 * 256))) + (_31 * 65536)); //#16970
            for (var _32 = 0, _33 = 3; _32 < _33; _32++) { //#16970
                var _34 = $k[--$j]; //#16970
                $k[$j++] = _34 % 900; //#16970
                $k[$j++] = ~~(_34 / 900); //#16970
            } //#16970
            $_.mscs = $a(); //#16970
            $k[$j++] = Infinity; //#16972
            $aload($geti($_.in, ($_.k * 6) + 3, 3)); //#16972
            $_.lsbs = $a(); //#16972
            $k[$j++] = Infinity; //#16973
            $aload($_.lsbs); //#16974
            var _3B = $k[--$j]; //#16974
            var _3C = $k[--$j]; //#16974
            var _3D = $k[--$j]; //#16974
            $k[$j++] = $f(($f(_3B + (_3C * 256))) + (_3D * 65536)); //#16975
            for (var _3E = 0, _3F = 3; _3E < _3F; _3E++) { //#16975
                var _3G = $k[--$j]; //#16975
                $k[$j++] = _3G % 900; //#16975
                $k[$j++] = ~~(_3G / 900); //#16975
            } //#16975
            $_.lscs = $a(); //#16975
            var _3J = $get($_.lscs, 0); //#16977
            var _3L = $get($_.mscs, 0); //#16977
            $put($_.out, ($_.k * 5) + 4, ($f(_3J + (_3L * 316))) % 900); //#16978
            var _3P = $get($_.lscs, 1); //#16979
            var _3R = $get($_.mscs, 0); //#16979
            var _3T = $get($_.mscs, 1); //#16979
            $put($_.out, ($_.k * 5) + 3, ($f(($f(($f((~~(($f(_3J + (_3L * 316))) / 900)) + _3P)) + (_3R * 641))) + (_3T * 316))) % 900); //#16980
            var _3X = $get($_.lscs, 2); //#16981
            var _3Z = $get($_.mscs, 0); //#16981
            var _3b = $get($_.mscs, 1); //#16981
            var _3d = $get($_.mscs, 2); //#16981
            $put($_.out, ($_.k * 5) + 2, ($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_3J + (_3L * 316))) / 900)) + _3P)) + (_3R * 641))) + (_3T * 316))) / 900)) + _3X)) + (_3Z * 20))) + (_3b * 641))) + (_3d * 316))) % 900); //#16982
            var _3h = $get($_.lscs, 3); //#16983
            var _3j = $get($_.mscs, 1); //#16983
            var _3l = $get($_.mscs, 2); //#16983
            $put($_.out, ($_.k * 5) + 1, ($f(($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_3J + (_3L * 316))) / 900)) + _3P)) + (_3R * 641))) + (_3T * 316))) / 900)) + _3X)) + (_3Z * 20))) + (_3b * 641))) + (_3d * 316))) / 900)) + _3h)) + (_3j * 20))) + (_3l * 641))) % 900); //#16984
            $put($_.out, $_.k * 5, ($f((~~(($f(($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_3J + (_3L * 316))) / 900)) + _3P)) + (_3R * 641))) + (_3T * 316))) / 900)) + _3X)) + (_3Z * 20))) + (_3b * 641))) + (_3d * 316))) / 900)) + _3h)) + (_3j * 20))) + (_3l * 641))) / 900)) + ($get($_.mscs, 2) * 20))) % 900); //#16986
        } //#16986
        $_.rem = $_.inlen % 6; //#16988
        if ($_.rem != 0) { //#16993
            $k[$j++] = $_.out; //#16991
            $k[$j++] = $_.out.length - $_.rem; //#16991
            $k[$j++] = Infinity; //#16991
            $aload($geti($_.in, $_.inlen - $_.rem, $_.rem)); //#16991
            var _42 = $a(); //#16991
            var _43 = $k[--$j]; //#16992
            $puti($k[--$j], _43, _42); //#16992
        } //#16992
        $k[$j++] = $_.out; //#16994
    }; //#16994
    if ($_.ccc) { //#17003
        $_.barlen = $_.barcode.length; //#16998
        $_.datcws = $a((((~~($_.barlen / 6)) * 5) + ($_.barlen % 6)) + 2); //#16999
        $put($_.datcws, 0, 920); //#17000
        var _4E = (($_.barlen % 6) == 0) ? 924 : 901; //#17001
        $put($_.datcws, 1, _4E); //#17001
        $k[$j++] = $_.datcws; //#17002
        $k[$j++] = 2; //#17002
        $k[$j++] = Infinity; //#17002
        $forall($_.barcode); //#17002
        var _4H = $a(); //#17002
        $k[$j++] = _4H; //#17002
        $_.encb(); //#17002
        var _4I = $k[--$j]; //#17002
        var _4J = $k[--$j]; //#17002
        $puti($k[--$j], _4J, _4I); //#17002
    } //#17002
    if ((!$_.raw) && (!$_.ccc)) { //#17354
        var _4P = new Map([
            ["parse", $_.parse],
            ["parsefnc", $_.parsefnc],
            ["eci", true]
        ]); //#17011
        $_.fncvals = _4P; //#17013
        $k[$j++] = 'msg'; //#17014
        $k[$j++] = $_.barcode; //#17014
        $k[$j++] = $_.fncvals; //#17014
        bwipp_parseinput(); //#17014
        var _4S = $k[--$j]; //#17014
        $_[$k[--$j]] = _4S; //#17014
        $_.msglen = $_.msg.length; //#17015
        $k[$j++] = Infinity; //#17018
        for (var _4W = 0, _4X = $_.msglen; _4W < _4X; _4W++) { //#17018
            $k[$j++] = 0; //#17018
        } //#17018
        $k[$j++] = 0; //#17018
        $_.numdigits = $a(); //#17018
        $k[$j++] = Infinity; //#17019
        for (var _4a = 0, _4b = $_.msglen; _4a < _4b; _4a++) { //#17019
            $k[$j++] = 0; //#17019
        } //#17019
        $k[$j++] = 0; //#17019
        $_.numtext = $a(); //#17019
        $k[$j++] = Infinity; //#17020
        for (var _4e = 0, _4f = $_.msglen; _4e < _4f; _4e++) { //#17020
            $k[$j++] = 0; //#17020
        } //#17020
        $k[$j++] = 0; //#17020
        $_.numbytes = $a(); //#17020
        $k[$j++] = Infinity; //#17021
        for (var _4i = 0, _4j = $_.msglen; _4i < _4j; _4i++) { //#17021
            $k[$j++] = 0; //#17021
        } //#17021
        $k[$j++] = 0; //#17021
        $_.iseci = $a(); //#17021
        for (var _4m = $_.msglen - 1; _4m >= 0; _4m -= 1) { //#17034
            $_.i = _4m; //#17023
            var _4p = $get($_.msg, $_.i); //#17024
            if ((_4p >= 48) && (_4p <= 57)) { //#17026
                $put($_.numdigits, $_.i, $f($get($_.numdigits, $_.i + 1) + 1)); //#17025
            } //#17025
            var _4z = $get($_.alltext, $get($_.msg, $_.i)) !== undefined; //#17027
            if (_4z && ($get($_.numdigits, $_.i) < 13)) { //#17029
                $put($_.numtext, $_.i, $f($get($_.numtext, $_.i + 1) + 1)); //#17028
            } //#17028
            if ((($get($_.msg, $_.i) >= 0) && ($get($_.numtext, $_.i) < 5)) && ($get($_.numdigits, $_.i) < 13)) { //#17032
                $put($_.numbytes, $_.i, $f($get($_.numbytes, $_.i + 1) + 1)); //#17031
            } //#17031
            $put($_.iseci, $_.i, $get($_.msg, $_.i) <= -1000000); //#17033
        } //#17033
        $_.numdigits = $geti($_.numdigits, 0, $_.msglen); //#17035
        $_.numtext = $geti($_.numtext, 0, $_.msglen); //#17036
        $_.numbytes = $geti($_.numbytes, 0, $_.msglen); //#17037
        $_.seq = $a([]); //#17039
        $_.seqlen = 0; //#17039
        $_.state = $_.T; //#17039
        $_.p = 0; //#17039
        for (;;) { //#17093
            if ($_.p == $_.msglen) { //#17040
                break; //#17040
            } //#17040
            if ($get($_.iseci, $_.p)) { //#17091
                $_.eci = $get($_.msg, $_.p); //#17042
                $k[$j++] = Infinity; //#17043
                $aload($_.seq); //#17044
                $k[$j++] = $a([$_.eci]); //#17045
                $_.seq = $a(); //#17045
                $_.p = $_.p + 1; //#17047
                $k[$j++] = 'seqlen'; //#17048
                $k[$j++] = $_.seqlen; //#17048
                if ($_.eci <= -1810900) { //#17048
                    $k[$j++] = 2; //#17048
                } else { //#17048
                    var _5s = ($_.eci <= -1000900) ? 3 : 2; //#17048
                    $k[$j++] = _5s; //#17048
                } //#17048
                var _5t = $k[--$j]; //#17048
                var _5u = $k[--$j]; //#17048
                $_[$k[--$j]] = $f(_5u + _5t); //#17048
            } else { //#17091
                $_.n = $get($_.numdigits, $_.p); //#17050
                if (($_.n >= 13) || (($_.n == $_.msglen) && ($_.n >= 8))) { //#17091
                    $k[$j++] = Infinity; //#17052
                    $aload($_.seq); //#17053
                    $k[$j++] = $_.nl; //#17055
                    $k[$j++] = Infinity; //#17055
                    $aload($geti($_.msg, $_.p, $_.n)); //#17055
                    var _69 = $a(); //#17055
                    $k[$j++] = _69; //#17055
                    $_.seq = $a(); //#17055
                    $_.state = $_.N; //#17057
                    $_.p = $f($_.p + $_.n); //#17058
                    $_.seqlen = $f(($_.seqlen + 1) + $_.n); //#17059
                } else { //#17091
                    $_.t = $get($_.numtext, $_.p); //#17061
                    if ($_.t >= 5) { //#17091
                        $k[$j++] = Infinity; //#17063
                        $aload($_.seq); //#17064
                        if ($_.state != $_.T) { //#17067
                            $k[$j++] = $_.tl; //#17066
                        } //#17066
                        $k[$j++] = Infinity; //#17068
                        $aload($geti($_.msg, $_.p, $_.t)); //#17068
                        var _6S = $a(); //#17068
                        $k[$j++] = _6S; //#17068
                        $_.seq = $a(); //#17068
                        $_.state = $_.T; //#17070
                        $_.p = $f($_.p + $_.t); //#17071
                        $_.seqlen = $f($f($_.seqlen + 1) + $_.t); //#17072
                    } else { //#17091
                        $_.b = $get($_.numbytes, $_.p); //#17074
                        if (($_.b == 1) && ($_.state == $_.T)) { //#17091
                            $k[$j++] = Infinity; //#17076
                            $aload($_.seq); //#17077
                            $k[$j++] = $_.bs; //#17079
                            $k[$j++] = $a([$get($_.msg, $_.p)]); //#17079
                            $_.seq = $a(); //#17079
                            $_.p = $f($_.p + $_.b); //#17081
                            $_.seqlen = $f($_.seqlen + 2); //#17082
                        } else { //#17091
                            $k[$j++] = Infinity; //#17084
                            $aload($_.seq); //#17085
                            var _6r = (($_.b % 6) != 0) ? $_.bl : $_.bl6; //#17086
                            $k[$j++] = _6r; //#17087
                            $k[$j++] = Infinity; //#17087
                            $aload($geti($_.msg, $_.p, $_.b)); //#17087
                            var _6w = $a(); //#17087
                            $k[$j++] = _6w; //#17087
                            $_.seq = $a(); //#17087
                            $_.state = $_.B; //#17089
                            $_.p = $f($_.p + $_.b); //#17090
                            $_.seqlen = $f($f($_.seqlen + 1) + $_.b); //#17091
                        } //#17091
                    } //#17091
                } //#17091
            } //#17091
        } //#17091
        $_.enca = function() {
            var _77 = $get($get($_.charvals, $_.A), $k[--$j]); //#17096
            $k[$j++] = _77; //#17096
        }; //#17096
        $_.encl = function() {
            var _7C = $get($get($_.charvals, $_.L), $k[--$j]); //#17097
            $k[$j++] = _7C; //#17097
        }; //#17097
        $_.encm = function() {
            var _7H = $get($get($_.charvals, $_.M), $k[--$j]); //#17098
            $k[$j++] = _7H; //#17098
        }; //#17098
        $_.encp = function() {
            var _7M = $get($get($_.charvals, $_.P), $k[--$j]); //#17099
            $k[$j++] = _7M; //#17099
        }; //#17099
        $_.textencfuncs = $a(['enca', 'encl', 'encm', 'encp']); //#17100
        $_.addtotext = function() {
            $put($_.text, $_.l, $k[--$j]); //#17103
            $_.l = $_.l + 1; //#17104
        }; //#17104
        $_.enct = function() {
            $_.in = $k[--$j]; //#17108
            $_.curlen = $a([$_.e, $_.e, $_.e, $_.e]); //#17110
            $put($_.curlen, $_.submode, 0); //#17111
            $_.curseq = $a([$a([]), $a([]), $a([]), $a([])]); //#17112
            $forall($_.in, function() { //#17182
                $_.char = $k[--$j]; //#17117
                for (;;) { //#17138
                    $_.imp = false; //#17121
                    var _7l = $a([$_.A, $_.L, $_.M, $_.P]); //#17122
                    for (var _7m = 0, _7n = _7l.length; _7m < _7n; _7m++) { //#17136
                        $_.x = $get(_7l, _7m); //#17123
                        var _7t = $a([$_.A, $_.L, $_.M, $_.P]); //#17124
                        for (var _7u = 0, _7v = _7t.length; _7u < _7v; _7u++) { //#17135
                            $_.y = $get(_7t, _7u); //#17125
                            $_.cost = $f($get($_.curlen, $_.x) + $get($get($_.latlen, $_.x), $_.y)); //#17126
                            if ($_.cost < $get($_.curlen, $_.y)) { //#17134
                                $put($_.curlen, $_.y, $_.cost); //#17128
                                $k[$j++] = $_.curseq; //#17131
                                $k[$j++] = $_.y; //#17131
                                $k[$j++] = Infinity; //#17129
                                $aload($get($_.curseq, $_.x)); //#17130
                                $aload($get($get($_.latseq, $_.x), $_.y)); //#17131
                                var _8M = $a(); //#17131
                                var _8N = $k[--$j]; //#17132
                                $put($k[--$j], _8N, _8M); //#17132
                                $_.imp = true; //#17133
                            } //#17133
                        } //#17133
                    } //#17133
                    if (!$_.imp) { //#17137
                        break; //#17137
                    } //#17137
                } //#17137
                $_.nxtlen = $a([$_.e, $_.e, $_.e, $_.e]); //#17141
                $_.nxtseq = $a(4); //#17142
                var _8a = $a([$_.A, $_.L, $_.M, $_.P]); //#17144
                for (var _8b = 0, _8c = _8a.length; _8b < _8c; _8b++) { //#17177
                    $_.x = $get(_8a, _8b); //#17145
                    for (;;) { //#17175
                        var _8i = $get($get($_.charvals, $_.x), $_.char) !== undefined; //#17149
                        if (!_8i) { //#17149
                            break; //#17149
                        } //#17149
                        $_.cost = $f($get($_.curlen, $_.x) + 1); //#17152
                        if ($_.cost < $get($_.nxtlen, $_.x)) { //#17156
                            $put($_.nxtlen, $_.x, $_.cost); //#17154
                            $k[$j++] = $_.nxtseq; //#17155
                            $k[$j++] = $_.x; //#17155
                            $k[$j++] = Infinity; //#17155
                            $aload($get($_.curseq, $_.x)); //#17155
                            $k[$j++] = $_.char; //#17155
                            var _8z = $a(); //#17155
                            var _90 = $k[--$j]; //#17155
                            $put($k[--$j], _90, _8z); //#17155
                        } //#17155
                        var _96 = $a([$_.A, $_.L, $_.M, $_.P]); //#17159
                        for (var _97 = 0, _98 = _96.length; _97 < _98; _97++) { //#17172
                            $_.y = $get(_96, _97); //#17160
                            if ($ne($_.x, $_.y)) { //#17171
                                $_.cost = $f($f($get($_.curlen, $_.y) + $get($get($_.shftlen, $_.y), $_.x)) + 1); //#17162
                                if ($_.cost < $get($_.nxtlen, $_.y)) { //#17170
                                    $put($_.nxtlen, $_.y, $_.cost); //#17164
                                    $k[$j++] = $_.nxtseq; //#17168
                                    $k[$j++] = $_.y; //#17168
                                    $k[$j++] = Infinity; //#17165
                                    $aload($get($_.curseq, $_.y)); //#17166
                                    var _9Y = ($_.x == $_.A) ? $_.as : $_.ps; //#17167
                                    $k[$j++] = _9Y; //#17168
                                    $k[$j++] = $_.char; //#17168
                                    var _9a = $a(); //#17168
                                    var _9b = $k[--$j]; //#17169
                                    $put($k[--$j], _9b, _9a); //#17169
                                } //#17169
                            } //#17169
                        } //#17169
                        break; //#17174
                    } //#17174
                } //#17174
                $_.curlen = $_.nxtlen; //#17179
                $_.curseq = $_.nxtseq; //#17180
            }); //#17180
            $_.minseq = $_.e; //#17185
            var _9k = $a([$_.A, $_.L, $_.M, $_.P]); //#17186
            for (var _9l = 0, _9m = _9k.length; _9l < _9m; _9l++) { //#17192
                $_.k = $get(_9k, _9l); //#17187
                if ($get($_.curlen, $_.k) < $_.minseq) { //#17191
                    $_.minseq = $get($_.curlen, $_.k); //#17189
                    $_.txtseq = $get($_.curseq, $_.k); //#17190
                } //#17190
            } //#17190
            $_.text = $a($_.minseq); //#17195
            $_.k = 0; //#17196
            $_.l = 0; //#17196
            for (;;) { //#17216
                if ($_.k >= $_.txtseq.length) { //#17197
                    break; //#17197
                } //#17197
                $_.char = $get($_.txtseq, $_.k); //#17199
                $k[$j++] = $_.char; //#17202
                if ($_[$get($_.textencfuncs, $_.submode)]() === true) {
                    break;
                } //#17202
                $_.addtotext(); //#17202
                $_.k = $_.k + 1; //#17203
                if (($_.char == $_.as) || ($_.char == $_.ps)) { //#17209
                    $k[$j++] = $get($_.txtseq, $_.k); //#17207
                    if ($_.char == $_.as) { //#17207
                        $_.enca(); //#17207
                    } else { //#17207
                        $_.encp(); //#17207
                    } //#17207
                    $_.addtotext(); //#17207
                    $_.k = $_.k + 1; //#17208
                } //#17208
                if ($_.char == $_.al) { //#17212
                    $_.submode = $_.A; //#17212
                } //#17212
                if ($_.char == $_.ll) { //#17213
                    $_.submode = $_.L; //#17213
                } //#17213
                if ($_.char == $_.ml) { //#17214
                    $_.submode = $_.M; //#17214
                } //#17214
                if ($_.char == $_.pl) { //#17215
                    $_.submode = $_.P; //#17215
                } //#17215
            } //#17215
            if (($_.text.length % 2) == 1) { //#17263
                if ($_.submode == $_.P) { //#17259
                    $k[$j++] = 'pad'; //#17220
                    $k[$j++] = $_.al; //#17220
                    $_.encp(); //#17220
                    var _Ab = $k[--$j]; //#17220
                    $_[$k[--$j]] = _Ab; //#17220
                    $_.submode = $_.A; //#17221
                } else { //#17259
                    $_.nextecitext = false; //#17224
                    for (var _Ah = $_.i + 1, _Ag = $_.seq.length - 1; _Ah <= _Ag; _Ah += 1) { //#17231
                        $_.ti = _Ah; //#17227
                        if ($ne($type($get($_.seq, $_.ti)), 'arraytype')) { //#17228
                            $_.nextecitext = false; //#17228
                            break; //#17228
                        } //#17228
                        if ($get($get($_.seq, $_.ti), 0) > -1000000) { //#17229
                            break; //#17229
                        } //#17229
                        $_.nextecitext = true; //#17230
                    } //#17230
                    if ($_.nextecitext) { //#17259
                        if ($_.submode == $_.A) { //#17256
                            var _B0 = $get($get($_.charvals, $_.L), $get($get($_.seq, $_.ti), 0)) !== undefined; //#17234
                            if (_B0) { //#17239
                                $k[$j++] = 'pad'; //#17235
                                $k[$j++] = $_.ll; //#17235
                                $_.enca(); //#17235
                                var _B2 = $k[--$j]; //#17235
                                $_[$k[--$j]] = _B2; //#17235
                                $_.submode = $_.L; //#17236
                            } else { //#17239
                                $k[$j++] = 'pad'; //#17238
                                $k[$j++] = $_.ml; //#17238
                                $_.enca(); //#17238
                                var _B6 = $k[--$j]; //#17238
                                $_[$k[--$j]] = _B6; //#17238
                                $_.submode = $_.M; //#17239
                            } //#17239
                        } else { //#17256
                            if ($_.submode == $_.M) { //#17256
                                var _BI = $get($get($_.charvals, $_.L), $get($get($_.seq, $_.ti), 0)) !== undefined; //#17243
                                if (_BI) { //#17252
                                    $k[$j++] = 'pad'; //#17244
                                    $k[$j++] = $_.ll; //#17244
                                    $_.encm(); //#17244
                                    var _BK = $k[--$j]; //#17244
                                    $_[$k[--$j]] = _BK; //#17244
                                    $_.submode = $_.L; //#17245
                                } else { //#17252
                                    var _BU = $get($get($_.charvals, $_.P), $get($get($_.seq, $_.ti), 0)) !== undefined; //#17247
                                    if (_BU) { //#17252
                                        $k[$j++] = 'pad'; //#17248
                                        $k[$j++] = $_.pl; //#17248
                                        $_.encm(); //#17248
                                        var _BW = $k[--$j]; //#17248
                                        $_[$k[--$j]] = _BW; //#17248
                                        $_.submode = $_.P; //#17249
                                    } else { //#17252
                                        $k[$j++] = 'pad'; //#17251
                                        $k[$j++] = $_.al; //#17251
                                        $_.encm(); //#17251
                                        var _Ba = $k[--$j]; //#17251
                                        $_[$k[--$j]] = _Ba; //#17251
                                        $_.submode = $_.A; //#17252
                                    } //#17252
                                } //#17252
                            } else { //#17256
                                $k[$j++] = 'pad'; //#17255
                                $k[$j++] = $_.ml; //#17255
                                $_.encl(); //#17255
                                var _Be = $k[--$j]; //#17255
                                $_[$k[--$j]] = _Be; //#17255
                                $_.submode = $_.M; //#17256
                            } //#17256
                        } //#17256
                    } else { //#17259
                        $k[$j++] = 'pad'; //#17259
                        $k[$j++] = $_.ps; //#17259
                        if ($_[$get($_.textencfuncs, $_.submode)]() === true) {
                            return true;
                        } //#17259
                        var _Bm = $k[--$j]; //#17259
                        $_[$k[--$j]] = _Bm; //#17259
                    } //#17259
                } //#17259
                $k[$j++] = Infinity; //#17262
                $aload($_.text); //#17262
                $k[$j++] = $_.pad; //#17262
                $_.text = $a(); //#17262
            } //#17262
            $_.out = $a(~~($_.text.length / 2)); //#17265
            for (var _Bv = 0, _Bu = $_.out.length - 1; _Bv <= _Bu; _Bv += 1) { //#17269
                $_.k = _Bv; //#17267
                $put($_.out, $_.k, $f(($get($_.text, $_.k * 2) * 30) + $get($_.text, ($_.k * 2) + 1))); //#17268
            } //#17268
            $k[$j++] = $_.out; //#17271
        }; //#17271
        $_.encn = function() {
            $_.in = $k[--$j]; //#17276
            $_.out = $a([]); //#17277
            for (var _C9 = 0, _C8 = $_.in.length - 1; _C9 <= _C8; _C9 += 44) { //#17305
                $_.k = _C9; //#17279
                $k[$j++] = Infinity; //#17280
                var _CE = $_.in.length - $_.k; //#17281
                $k[$j++] = 1; //#17281
                $k[$j++] = $_.in; //#17281
                $k[$j++] = $_.k; //#17281
                $k[$j++] = _CE; //#17281
                if (_CE > 44) { //#17281
                    $j--; //#17281
                    $k[$j++] = 44; //#17281
                } //#17281
                var _CF = $k[--$j]; //#17281
                var _CG = $k[--$j]; //#17281
                var _CI = $geti($k[--$j], _CG, _CF); //#17281
                for (var _CJ = 0, _CK = _CI.length; _CJ < _CK; _CJ++) { //#17282
                    $k[$j++] = $f($get(_CI, _CJ) - 48); //#17282
                } //#17282
                $_.gmod = $a(); //#17282
                $_.cwn = $a([]); //#17284
                for (;;) { //#17303
                    $_.dv = 900; //#17285
                    $_.gmul = $a([]); //#17286
                    $_.val = 0; //#17286
                    for (;;) { //#17298
                        if ($_.gmod.length == 0) { //#17287
                            break; //#17287
                        } //#17287
                        $_.val = $f(($_.val * 10) + $get($_.gmod, 0)); //#17288
                        $_.gmod = $geti($_.gmod, 1, $_.gmod.length - 1); //#17289
                        if ($_.val < $_.dv) { //#17295
                            if ($_.gmul.length != 0) { //#17293
                                $k[$j++] = Infinity; //#17292
                                $aload($_.gmul); //#17292
                                $k[$j++] = 0; //#17292
                                $_.gmul = $a(); //#17292
                            } //#17292
                        } else { //#17295
                            $k[$j++] = Infinity; //#17295
                            $aload($_.gmul); //#17295
                            $k[$j++] = ~~($_.val / $_.dv); //#17295
                            $_.gmul = $a(); //#17295
                        } //#17295
                        $_.val = $_.val % $_.dv; //#17297
                    } //#17297
                    $_.dv = $_.val; //#17299
                    $k[$j++] = Infinity; //#17300
                    $k[$j++] = $_.dv; //#17300
                    $aload($_.cwn); //#17300
                    $_.cwn = $a(); //#17300
                    $_.gmod = $_.gmul; //#17301
                    if ($_.gmul.length == 0) { //#17302
                        break; //#17302
                    } //#17302
                } //#17302
                $k[$j++] = Infinity; //#17304
                $aload($_.out); //#17304
                $aload($_.cwn); //#17304
                $_.out = $a(); //#17304
            } //#17304
            $k[$j++] = $_.out; //#17306
        }; //#17306
        $_.ence = function() {
            var _Ct = $f((-$get($k[--$j], 0)) - 1000000); //#17311
            $k[$j++] = _Ct; //#17319
            if (_Ct <= 899) { //#17318
                var _Cu = $k[--$j]; //#17312
                $k[$j++] = 927; //#17312
                $k[$j++] = _Cu; //#17312
                $astore($a(2)); //#17312
            } else { //#17318
                var _Cw = $k[--$j]; //#17313
                $k[$j++] = _Cw; //#17319
                if (_Cw <= 810899) { //#17318
                    var _Cx = $k[--$j]; //#17314
                    $k[$j++] = 926; //#17314
                    $k[$j++] = (~~(_Cx / 900)) - 1; //#17314
                    $k[$j++] = _Cx % 900; //#17314
                    $astore($a(3)); //#17314
                } else { //#17318
                    var _Cz = $k[--$j]; //#17315
                    $k[$j++] = _Cz; //#17319
                    if (_Cz <= 811799) { //#17318
                        var _D0 = $k[--$j]; //#17316
                        $k[$j++] = 925; //#17316
                        $k[$j++] = $f(_D0 - 810900); //#17316
                        $astore($a(2)); //#17316
                    } else { //#17318
                        $k[$j++] = 'bwipp.pdf417badECI#17318'; //#17318
                        $k[$j++] = "PDF417 supports ECIs 000000 to 811799"; //#17318
                        bwipp_raiseerror(); //#17318
                    } //#17318
                } //#17318
            } //#17318
        }; //#17318
        $_.encfuncs = $a(['enct', 'encn', 'encb']); //#17322
        $_.addtocws = function() {
            var _D3 = $k[--$j]; //#17325
            $puti($_.datcws, $_.j, _D3); //#17325
            $_.j = _D3.length + $_.j; //#17326
        }; //#17326
        $_.state = $_.T; //#17330
        $_.submode = $_.A; //#17330
        $_.datcws = $a($_.seqlen); //#17331
        $_.i = 0; //#17332
        $_.j = 0; //#17332
        for (;;) { //#17352
            if ($_.i >= $_.seq.length) { //#17333
                break; //#17333
            } //#17333
            $_.chars = $get($_.seq, $_.i); //#17334
            if ($eq($type($_.chars), 'arraytype')) { //#17348
                if ($get($_.chars, 0) <= -1000000) { //#17339
                    $k[$j++] = $_.chars; //#17337
                    $_.ence(); //#17337
                    $_.addtocws(); //#17337
                } else { //#17339
                    $k[$j++] = $_.chars; //#17339
                    if ($_[$get($_.encfuncs, $_.state)]() === true) {
                        break;
                    } //#17339
                    $_.addtocws(); //#17339
                } //#17339
            } else { //#17348
                $k[$j++] = $a([$get($_.latchcws, $_.chars)]); //#17342
                $_.addtocws(); //#17342
                if ($_.chars == $_.tl) { //#17343
                    $_.state = $_.T; //#17343
                    $_.submode = $_.A; //#17343
                } //#17343
                if ($_.chars == $_.nl) { //#17344
                    $_.state = $_.N; //#17344
                } //#17344
                if (($_.chars == $_.bl) || ($_.chars == $_.bl6)) { //#17345
                    $_.state = $_.B; //#17345
                } //#17345
                if ($_.chars == $_.bs) { //#17349
                    $_.i = $_.i + 1; //#17347
                    $k[$j++] = $get($_.seq, $_.i); //#17348
                    $_.encb(); //#17348
                    $_.addtocws(); //#17348
                } //#17348
            } //#17348
            $_.i = $_.i + 1; //#17351
        } //#17351
        $_.datcws = $geti($_.datcws, 0, $_.j); //#17353
    } //#17353
    $_.m = $_.datcws.length; //#17357
    if ($_.eclevel == -1) { //#17363
        if ($_.m <= 40) { //#17359
            $_.eclevel = 2; //#17359
        } //#17359
        if (($_.m >= 41) && ($_.m <= 160)) { //#17360
            $_.eclevel = 3; //#17360
        } //#17360
        if (($_.m >= 161) && ($_.m <= 320)) { //#17361
            $_.eclevel = 4; //#17361
        } //#17361
        if ($_.m >= 321) { //#17362
            $_.eclevel = 5; //#17362
        } //#17362
    } //#17362
    $_.maxeclevel = (~~((Math.log((928 - 1) - $_.m)) / Math.log(2))) - 1; //#17366
    if ($_.eclevel > $_.maxeclevel) { //#17367
        $_.eclevel = $_.maxeclevel; //#17367
    } //#17367
    $_.k = ~~Math.pow(2, $_.eclevel + 1); //#17368
    if ($_.columns == 0) { //#17371
        $_.columns = ~~(Math.round(Math.sqrt(($_.m + $_.k) / 3))); //#17371
    } //#17371
    $k[$j++] = 'c'; //#17372
    if ($_.columns >= 1) { //#17372
        $k[$j++] = $_.columns; //#17372
    } else { //#17372
        $k[$j++] = 1; //#17372
    } //#17372
    var _E8 = $k[--$j]; //#17372
    $_[$k[--$j]] = _E8; //#17372
    $_.r = ~~(Math.ceil((($_.m + $_.k) + 1) / $_.columns)); //#17375
    if (($_.r < $_.rows) && ($_.rows <= 90)) { //#17376
        $_.r = $_.rows; //#17376
    } //#17376
    if ($_.r < 3) { //#17377
        $_.r = 3; //#17377
    } //#17377
    if ($_.r > 90) { //#17382
        $k[$j++] = 'bwipp.pdf417insufficientCapacity#17381'; //#17381
        $k[$j++] = "Insufficient capacity in the symbol"; //#17381
        bwipp_raiseerror(); //#17381
    } //#17381
    var _EJ = $_.c; //#17385
    var _EK = $_.r; //#17385
    var _EL = $_.m; //#17385
    var _EM = 8; //#17385
    var _EN = (~~((Math.log($f(($f((_EJ * _EK) - 1)) - _EL))) / Math.log(2))) - 1; //#17385
    if (((~~((Math.log($f(($f((_EJ * _EK) - 1)) - _EL))) / Math.log(2))) - 1) > 8) { //#17385
        var _ = _EM; //#17385
        _EM = _EN; //#17385
        _EN = _; //#17385
    } //#17385
    $_.maxeclevel = _EN; //#17385
    if ($_.maxeclevel > $_.eclevel) { //#17389
        $_.eclevel = $_.maxeclevel; //#17387
        $_.k = ~~Math.pow(2, $_.eclevel + 1); //#17388
    } //#17388
    $_.n = $f(($_.c * $_.r) - $_.k); //#17392
    $_.cws = $a($f(($_.c * $_.r) + 1)); //#17393
    $put($_.cws, 0, $_.n); //#17394
    $puti($_.cws, 1, $_.datcws); //#17395
    $k[$j++] = $_.cws; //#17396
    $k[$j++] = $_.m + 1; //#17396
    $k[$j++] = Infinity; //#17396
    for (var _Eg = 0, _Eh = $f($f($_.n - $_.m) - 1); _Eg < _Eh; _Eg++) { //#17396
        $k[$j++] = 900; //#17396
    } //#17396
    var _Ei = $a(); //#17396
    var _Ej = $k[--$j]; //#17396
    $puti($k[--$j], _Ej, _Ei); //#17396
    $k[$j++] = $_.cws; //#17397
    $k[$j++] = $_.n; //#17397
    $k[$j++] = Infinity; //#17397
    for (var _Eo = 0, _Ep = $_.k; _Eo < _Ep; _Eo++) { //#17397
        $k[$j++] = 0; //#17397
    } //#17397
    $k[$j++] = 0; //#17397
    var _Eq = $a(); //#17397
    var _Er = $k[--$j]; //#17397
    $puti($k[--$j], _Er, _Eq); //#17397
    if (!bwipp_pdf417.__17404__) { //#17404
        $_ = Object.create($_); //#17404
        $k[$j++] = Infinity; //#17401
        $k[$j++] = 1; //#17401
        for (var _Et = 0, _Eu = 928; _Et < _Eu; _Et++) { //#17401
            var _Ev = $k[--$j]; //#17401
            $k[$j++] = _Ev; //#17401
            $k[$j++] = (_Ev * 3) % 929; //#17401
        } //#17401
        $_.rsalog = $a(); //#17401
        $_.rslog = $a(929); //#17402
        for (var _Ey = 1; _Ey <= 928; _Ey += 1) { //#17403
            $put($_.rslog, $get($_.rsalog, _Ey), _Ey); //#17403
        } //#17403
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_pdf417.$ctx[id] = $_[id]); //#17403
        bwipp_pdf417.__17404__ = 1; //#17403
        $_ = Object.getPrototypeOf($_); //#17403
    } //#17403
    $_.rsprod = function() {
        var _F3 = $k[--$j]; //#17408
        var _F4 = $k[--$j]; //#17408
        $k[$j++] = _F4; //#17412
        $k[$j++] = _F3; //#17412
        if ((_F3 != 0) && (_F4 != 0)) { //#17411
            var _F7 = $get($_.rslog, $k[--$j]); //#17409
            var _FC = $get($_.rsalog, $f(_F7 + $get($_.rslog, $k[--$j])) % 928); //#17409
            $k[$j++] = _FC; //#17409
        } else { //#17411
            $j -= 2; //#17411
            $k[$j++] = 0; //#17411
        } //#17411
    }; //#17411
    $k[$j++] = Infinity; //#17416
    $k[$j++] = 1; //#17416
    for (var _FE = 0, _FF = $_.k; _FE < _FF; _FE++) { //#17416
        $k[$j++] = 0; //#17416
    } //#17416
    $_.coeffs = $a(); //#17416
    for (var _FJ = 1, _FI = $_.k; _FJ <= _FI; _FJ += 1) { //#17425
        $_.i = _FJ; //#17418
        $put($_.coeffs, $_.i, $get($_.coeffs, $_.i - 1)); //#17419
        for (var _FQ = $_.i - 1; _FQ >= 1; _FQ -= 1) { //#17423
            $_.j = _FQ; //#17421
            $k[$j++] = $_.coeffs; //#17422
            $k[$j++] = $_.j; //#17422
            $k[$j++] = $get($_.coeffs, $_.j - 1); //#17422
            $k[$j++] = $get($_.coeffs, $_.j); //#17422
            $k[$j++] = $get($_.rsalog, $_.i); //#17422
            $_.rsprod(); //#17422
            var _Fc = $k[--$j]; //#17422
            var _Fd = $k[--$j]; //#17422
            var _Fe = $k[--$j]; //#17422
            $put($k[--$j], _Fe, $f(_Fd + _Fc) % 929); //#17422
        } //#17422
        $k[$j++] = $_.coeffs; //#17424
        $k[$j++] = 0; //#17424
        $k[$j++] = $get($_.coeffs, 0); //#17424
        $k[$j++] = $get($_.rsalog, $_.i); //#17424
        $_.rsprod(); //#17424
        var _Fm = $k[--$j]; //#17424
        var _Fn = $k[--$j]; //#17424
        $put($k[--$j], _Fn, _Fm); //#17424
    } //#17424
    $_.coeffs = $geti($_.coeffs, 0, $_.coeffs.length - 1); //#17426
    for (var _Ft = $_.coeffs.length - 1; _Ft >= 0; _Ft -= 2) { //#17427
        var _Fu = $_.coeffs; //#17427
        $put(_Fu, _Ft, $f(929 - $get(_Fu, _Ft))); //#17427
    } //#17427
    for (var _Fy = 0, _Fx = $f($_.n - 1); _Fy <= _Fx; _Fy += 1) { //#17436
        $_.t = $f($get($_.cws, _Fy) + $get($_.cws, $_.n)) % 929; //#17431
        for (var _G6 = 0, _G5 = $_.k - 1; _G6 <= _G5; _G6 += 1) { //#17435
            $_.j = _G6; //#17433
            $put($_.cws, $f($_.n + $_.j), ($f($get($_.cws, $f($f($_.n + $_.j) + 1)) + ($f(929 - (($_.t * $get($_.coeffs, ($_.k - $_.j) - 1)) % 929))))) % 929); //#17434
        } //#17434
    } //#17434
    for (var _GN = $_.n, _GM = $f($_.n + $_.k); _GN <= _GM; _GN += 1) { //#17437
        $put($_.cws, _GN, $f(929 - $get($_.cws, _GN)) % 929); //#17437
    } //#17437
    $_.cws = $geti($_.cws, 0, $_.cws.length - 1); //#17440
    var _GV = $get($_.options, 'debugcws') !== undefined; //#17442
    if (_GV) { //#17442
        $k[$j++] = 'bwipp.debugcws#17442'; //#17442
        $k[$j++] = $_.cws; //#17442
        bwipp_raiseerror(); //#17442
    } //#17442
    if (!bwipp_pdf417.__17686__) { //#17686
        $_ = Object.create($_); //#17686
        $_.clusters = $a([$a([120256, 125680, 128380, 120032, 125560, 128318, 108736, 119920, 108640, 86080, 108592, 86048, 110016, 120560, 125820, 109792, 120440, 125758, 88256, 109680, 88160, 89536, 110320, 120700, 89312, 110200, 120638, 89200, 110140, 89840, 110460, 89720, 110398, 89980, 128506, 119520, 125304, 128190, 107712, 119408, 125244, 107616, 119352, 84032, 107568, 119324, 84000, 107544, 83984, 108256, 119672, 125374, 85184, 108144, 119612, 85088, 108088, 119582, 85040, 108060, 85728, 108408, 119742, 85616, 108348, 85560, 108318, 85880, 108478, 85820, 85790, 107200, 119152, 125116, 107104, 119096, 125086, 83008, 107056, 119068, 82976, 107032, 82960, 82952, 83648, 107376, 119228, 83552, 107320, 119198, 83504, 107292, 83480, 83468, 83824, 107452, 83768, 107422, 83740, 83900, 106848, 118968, 125022, 82496, 106800, 118940, 82464, 106776, 118926, 82448, 106764, 82440, 106758, 82784, 106936, 119006, 82736, 106908, 82712, 106894, 82700, 82694, 106974, 82830, 82240, 106672, 118876, 82208, 106648, 118862, 82192, 106636, 82184, 106630, 82180, 82352, 82328, 82316, 82080, 118830, 106572, 106566, 82050, 117472, 124280, 127678, 103616, 117360, 124220, 103520, 117304, 124190, 75840, 103472, 75808, 104160, 117624, 124350, 76992, 104048, 117564, 76896, 103992, 76848, 76824, 77536, 104312, 117694, 77424, 104252, 77368, 77340, 77688, 104382, 77628, 77758, 121536, 126320, 128700, 121440, 126264, 128670, 111680, 121392, 126236, 111648, 121368, 126222, 111632, 121356, 103104, 117104, 124092, 112320, 103008, 117048, 124062, 112224, 121656, 126366, 93248, 74784, 102936, 117006, 93216, 112152, 93200, 75456, 103280, 117180, 93888, 75360, 103224, 117150, 93792, 112440, 121758, 93744, 75288, 93720, 75632, 103356, 94064, 75576, 103326, 94008, 112542, 93980, 75708, 94140, 75678, 94110, 121184, 126136, 128606, 111168, 121136, 126108, 111136, 121112, 126094, 111120, 121100, 111112, 111108, 102752, 116920, 123998, 111456, 102704, 116892, 91712, 74272, 121244, 116878, 91680, 74256, 102668, 91664, 111372, 102662, 74244, 74592, 102840, 116958, 92000, 74544, 102812, 91952, 111516, 102798, 91928, 74508, 74502, 74680, 102878, 92088, 74652, 92060, 74638, 92046, 92126, 110912, 121008, 126044, 110880, 120984, 126030, 110864, 120972, 110856, 120966, 110852, 110850, 74048, 102576, 116828, 90944, 74016, 102552, 116814, 90912, 111000, 121038, 90896, 73992, 102534, 90888, 110982, 90884, 74160, 102620, 91056, 74136, 102606, 91032, 111054, 91020, 74118, 91014, 91100, 91086, 110752, 120920, 125998, 110736, 120908, 110728, 120902, 110724, 110722, 73888, 102488, 116782, 90528, 73872, 102476, 90512, 110796, 102470, 90504, 73860, 90500, 73858, 73944, 90584, 90572, 90566, 120876, 120870, 110658, 102444, 73800, 90312, 90308, 90306, 101056, 116080, 123580, 100960, 116024, 70720, 100912, 115996, 70688, 100888, 70672, 70664, 71360, 101232, 116156, 71264, 101176, 116126, 71216, 101148, 71192, 71180, 71536, 101308, 71480, 101278, 71452, 71612, 71582, 118112, 124600, 127838, 105024, 118064, 124572, 104992, 118040, 124558, 104976, 118028, 104968, 118022, 100704, 115896, 123486, 105312, 100656, 115868, 79424, 70176, 118172, 115854, 79392, 105240, 100620, 79376, 70152, 79368, 70496, 100792, 115934, 79712, 70448, 118238, 79664, 105372, 100750, 79640, 70412, 79628, 70584, 100830, 79800, 70556, 79772, 70542, 70622, 79838, 122176, 126640, 128860, 122144, 126616, 128846, 122128, 126604, 122120, 126598, 122116, 104768, 117936, 124508, 113472, 104736, 126684, 124494, 113440, 122264, 126670, 113424, 104712, 117894, 113416, 122246, 104706, 69952, 100528, 115804, 78656, 69920, 100504, 115790, 96064, 78624, 104856, 117966, 96032, 113560, 122318, 100486, 96016, 78600, 104838, 96008, 69890, 70064, 100572, 78768, 70040, 100558, 96176, 78744, 104910, 96152, 113614, 70022, 78726, 70108, 78812, 70094, 96220, 78798, 122016, 126552, 128814, 122000, 126540, 121992, 126534, 121988, 121986, 104608, 117848, 124462, 113056, 104592, 126574, 113040, 122060, 117830, 113032, 104580, 113028, 104578, 113026, 69792, 100440, 115758, 78240, 69776, 100428, 95136, 78224, 104652, 100422, 95120, 113100, 69764, 95112, 78212, 69762, 78210, 69848, 100462, 78296, 69836, 95192, 78284, 69830, 95180, 78278, 69870, 95214, 121936, 126508, 121928, 126502, 121924, 121922, 104528, 117804, 112848, 104520, 117798, 112840, 121958, 112836, 104514, 112834, 69712, 100396, 78032, 69704, 100390, 94672, 78024, 104550, 94664, 112870, 69698, 94660, 78018, 94658, 78060, 94700, 94694, 126486, 121890, 117782, 104484, 104482, 69672, 77928, 94440, 69666, 77922, 99680, 68160, 99632, 68128, 99608, 115342, 68112, 99596, 68104, 99590, 68448, 99768, 115422, 68400, 99740, 68376, 99726, 68364, 68358, 68536, 99806, 68508, 68494, 68574, 101696, 116400, 123740, 101664, 116376, 101648, 116364, 101640, 116358, 101636, 67904, 99504, 115292, 72512, 67872, 116444, 115278, 72480, 101784, 116430, 72464, 67848, 99462, 72456, 101766, 67842, 68016, 99548, 72624, 67992, 99534, 72600, 101838, 72588, 67974, 68060, 72668, 68046, 72654, 118432, 124760, 127918, 118416, 124748, 118408, 124742, 118404, 118402, 101536, 116312, 105888, 101520, 116300, 105872, 118476, 116294, 105864, 101508, 105860, 101506, 105858, 67744, 99416, 72096, 67728, 116334, 80800, 72080, 101580, 99398, 80784, 105932, 67716, 80776, 72068, 67714, 72066, 67800, 99438, 72152, 67788, 80856, 72140, 67782, 80844, 72134, 67822, 72174, 80878, 126800, 128940, 126792, 128934, 126788, 126786, 118352, 124716, 122576, 126828, 124710, 122568, 126822, 122564, 118338, 122562, 101456, 116268, 105680, 101448, 116262, 114128, 105672, 118374, 114120, 122598, 101442, 114116, 105666, 114114, 67664, 99372, 71888, 67656, 99366, 80336, 71880, 101478, 97232, 80328, 105702, 67650, 97224, 114150, 71874, 97220, 67692, 71916, 67686, 80364, 71910, 97260, 80358, 97254, 126760, 128918, 126756, 126754, 118312, 124694, 122472, 126774, 122468, 118306, 122466, 101416, 116246, 105576, 101412, 113896, 105572, 101410, 113892, 105570, 113890, 67624, 99350, 71784, 101430, 80104, 71780, 67618, 96744, 80100, 71778, 96740, 80098, 96738, 71798, 96758, 126738, 122420, 122418, 105524, 113780, 113778, 71732, 79988, 96500, 96498, 66880, 66848, 98968, 66832, 66824, 66820, 66992, 66968, 66956, 66950, 67036, 67022, 100000, 99984, 115532, 99976, 115526, 99972, 99970, 66720, 98904, 69024, 100056, 98892, 69008, 100044, 69000, 100038, 68996, 66690, 68994, 66776, 98926, 69080, 100078, 69068, 66758, 69062, 66798, 69102, 116560, 116552, 116548, 116546, 99920, 102096, 116588, 115494, 102088, 116582, 102084, 99906, 102082, 66640, 68816, 66632, 98854, 73168, 68808, 66628, 73160, 68804, 66626, 73156, 68802, 66668, 68844, 66662, 73196, 68838, 73190, 124840, 124836, 124834, 116520, 118632, 124854, 118628, 116514, 118626, 99880, 115478, 101992, 116534, 106216, 101988, 99874, 106212, 101986, 106210, 66600, 98838, 68712, 99894, 72936, 68708, 66594, 81384, 72932, 68706, 81380, 72930, 66614, 68726, 72950, 81398, 128980, 128978, 124820, 126900, 124818, 126898, 116500, 118580, 116498, 122740, 118578, 122738, 99860, 101940, 99858, 106100, 101938, 114420]), $a([128352, 129720, 125504, 128304, 129692, 125472, 128280, 129678, 125456, 128268, 125448, 128262, 125444, 125792, 128440, 129758, 120384, 125744, 128412, 120352, 125720, 128398, 120336, 125708, 120328, 125702, 120324, 120672, 125880, 128478, 110144, 120624, 125852, 110112, 120600, 125838, 110096, 120588, 110088, 120582, 110084, 110432, 120760, 125918, 89664, 110384, 120732, 89632, 110360, 120718, 89616, 110348, 89608, 110342, 89952, 110520, 120798, 89904, 110492, 89880, 110478, 89868, 90040, 110558, 90012, 89998, 125248, 128176, 129628, 125216, 128152, 129614, 125200, 128140, 125192, 128134, 125188, 125186, 119616, 125360, 128220, 119584, 125336, 128206, 119568, 125324, 119560, 125318, 119556, 119554, 108352, 119728, 125404, 108320, 119704, 125390, 108304, 119692, 108296, 119686, 108292, 108290, 85824, 108464, 119772, 85792, 108440, 119758, 85776, 108428, 85768, 108422, 85764, 85936, 108508, 85912, 108494, 85900, 85894, 85980, 85966, 125088, 128088, 129582, 125072, 128076, 125064, 128070, 125060, 125058, 119200, 125144, 128110, 119184, 125132, 119176, 125126, 119172, 119170, 107424, 119256, 125166, 107408, 119244, 107400, 119238, 107396, 107394, 83872, 107480, 119278, 83856, 107468, 83848, 107462, 83844, 83842, 83928, 107502, 83916, 83910, 83950, 125008, 128044, 125000, 128038, 124996, 124994, 118992, 125036, 118984, 125030, 118980, 118978, 106960, 119020, 106952, 119014, 106948, 106946, 82896, 106988, 82888, 106982, 82884, 82882, 82924, 82918, 124968, 128022, 124964, 124962, 118888, 124982, 118884, 118882, 106728, 118902, 106724, 106722, 82408, 106742, 82404, 82402, 124948, 124946, 118836, 118834, 106612, 106610, 124224, 127664, 129372, 124192, 127640, 129358, 124176, 127628, 124168, 127622, 124164, 124162, 117568, 124336, 127708, 117536, 124312, 127694, 117520, 124300, 117512, 124294, 117508, 117506, 104256, 117680, 124380, 104224, 117656, 124366, 104208, 117644, 104200, 117638, 104196, 104194, 77632, 104368, 117724, 77600, 104344, 117710, 77584, 104332, 77576, 104326, 77572, 77744, 104412, 77720, 104398, 77708, 77702, 77788, 77774, 128672, 129880, 93168, 128656, 129868, 92664, 128648, 129862, 92412, 128644, 128642, 124064, 127576, 129326, 126368, 124048, 129902, 126352, 128716, 127558, 126344, 124036, 126340, 124034, 126338, 117152, 124120, 127598, 121760, 117136, 124108, 121744, 126412, 124102, 121736, 117124, 121732, 117122, 121730, 103328, 117208, 124142, 112544, 103312, 117196, 112528, 121804, 117190, 112520, 103300, 112516, 103298, 112514, 75680, 103384, 117230, 94112, 75664, 103372, 94096, 112588, 103366, 94088, 75652, 94084, 75650, 75736, 103406, 94168, 75724, 94156, 75718, 94150, 75758, 128592, 129836, 91640, 128584, 129830, 91388, 128580, 91262, 128578, 123984, 127532, 126160, 123976, 127526, 126152, 128614, 126148, 123970, 126146, 116944, 124012, 121296, 116936, 124006, 121288, 126182, 121284, 116930, 121282, 102864, 116972, 111568, 102856, 116966, 111560, 121318, 111556, 102850, 111554, 74704, 102892, 92112, 74696, 102886, 92104, 111590, 92100, 74690, 92098, 74732, 92140, 74726, 92134, 128552, 129814, 90876, 128548, 90750, 128546, 123944, 127510, 126056, 128566, 126052, 123938, 126050, 116840, 123958, 121064, 116836, 121060, 116834, 121058, 102632, 116854, 111080, 121078, 111076, 102626, 111074, 74216, 102646, 91112, 74212, 91108, 74210, 91106, 74230, 91126, 128532, 90494, 128530, 123924, 126004, 123922, 126002, 116788, 120948, 116786, 120946, 102516, 110836, 102514, 110834, 73972, 90612, 73970, 90610, 128522, 123914, 125978, 116762, 120890, 102458, 110714, 123552, 127320, 129198, 123536, 127308, 123528, 127302, 123524, 123522, 116128, 123608, 127342, 116112, 123596, 116104, 123590, 116100, 116098, 101280, 116184, 123630, 101264, 116172, 101256, 116166, 101252, 101250, 71584, 101336, 116206, 71568, 101324, 71560, 101318, 71556, 71554, 71640, 101358, 71628, 71622, 71662, 127824, 129452, 79352, 127816, 129446, 79100, 127812, 78974, 127810, 123472, 127276, 124624, 123464, 127270, 124616, 127846, 124612, 123458, 124610, 115920, 123500, 118224, 115912, 123494, 118216, 124646, 118212, 115906, 118210, 100816, 115948, 105424, 100808, 115942, 105416, 118246, 105412, 100802, 105410, 70608, 100844, 79824, 70600, 100838, 79816, 105446, 79812, 70594, 79810, 70636, 79852, 70630, 79846, 129960, 95728, 113404, 129956, 95480, 113278, 129954, 95356, 95294, 127784, 129430, 78588, 128872, 129974, 95996, 78462, 128868, 127778, 95870, 128866, 123432, 127254, 124520, 123428, 126696, 128886, 123426, 126692, 124514, 126690, 115816, 123446, 117992, 115812, 122344, 117988, 115810, 122340, 117986, 122338, 100584, 115830, 104936, 100580, 113640, 104932, 100578, 113636, 104930, 113634, 70120, 100598, 78824, 70116, 96232, 78820, 70114, 96228, 78818, 96226, 70134, 78838, 129940, 94968, 113022, 129938, 94844, 94782, 127764, 78206, 128820, 127762, 95102, 128818, 123412, 124468, 123410, 126580, 124466, 126578, 115764, 117876, 115762, 122100, 117874, 122098, 100468, 104692, 100466, 113140, 104690, 113138, 69876, 78324, 69874, 95220, 78322, 95218, 129930, 94588, 94526, 127754, 128794, 123402, 124442, 126522, 115738, 117818, 121978, 100410, 104570, 112890, 69754, 78074, 94714, 94398, 123216, 127148, 123208, 127142, 123204, 123202, 115408, 123244, 115400, 123238, 115396, 115394, 99792, 115436, 99784, 115430, 99780, 99778, 68560, 99820, 68552, 99814, 68548, 68546, 68588, 68582, 127400, 129238, 72444, 127396, 72318, 127394, 123176, 127126, 123752, 123172, 123748, 123170, 123746, 115304, 123190, 116456, 115300, 116452, 115298, 116450, 99560, 115318, 101864, 99556, 101860, 99554, 101858, 68072, 99574, 72680, 68068, 72676, 68066, 72674, 68086, 72694, 129492, 80632, 105854, 129490, 80508, 80446, 127380, 72062, 127924, 127378, 80766, 127922, 123156, 123700, 123154, 124788, 123698, 124786, 115252, 116340, 115250, 118516, 116338, 118514, 99444, 101620, 99442, 105972, 101618, 105970, 67828, 72180, 67826, 80884, 72178, 80882, 97008, 114044, 96888, 113982, 96828, 96798, 129482, 80252, 130010, 97148, 80190, 97086, 127370, 127898, 128954, 123146, 123674, 124730, 126842, 115226, 116282, 118394, 122618, 99386, 101498, 105722, 114170, 67706, 71930, 80378, 96632, 113854, 96572, 96542, 80062, 96702, 96444, 96414, 96350, 123048, 123044, 123042, 115048, 123062, 115044, 115042, 99048, 115062, 99044, 99042, 67048, 99062, 67044, 67042, 67062, 127188, 68990, 127186, 123028, 123316, 123026, 123314, 114996, 115572, 114994, 115570, 98932, 100084, 98930, 100082, 66804, 69108, 66802, 69106, 129258, 73084, 73022, 127178, 127450, 123018, 123290, 123834, 114970, 115514, 116602, 98874, 99962, 102138, 66682, 68858, 73210, 81272, 106174, 81212, 81182, 72894, 81342, 97648, 114364, 97592, 114334, 97564, 97550, 81084, 97724, 81054, 97694, 97464, 114270, 97436, 97422, 80990, 97502, 97372, 97358, 97326, 114868, 114866, 98676, 98674, 66292, 66290, 123098, 114842, 115130, 98618, 99194, 66170, 67322, 69310, 73404, 73374, 81592, 106334, 81564, 81550, 73310, 81630, 97968, 114524, 97944, 114510, 97932, 97926, 81500, 98012, 81486, 97998, 97880, 114478, 97868, 97862, 81454, 97902, 97836, 97830, 69470, 73564, 73550, 81752, 106414, 81740, 81734, 73518, 81774, 81708, 81702]), $a([109536, 120312, 86976, 109040, 120060, 86496, 108792, 119934, 86256, 108668, 86136, 129744, 89056, 110072, 129736, 88560, 109820, 129732, 88312, 109694, 129730, 88188, 128464, 129772, 89592, 128456, 129766, 89340, 128452, 89214, 128450, 125904, 128492, 125896, 128486, 125892, 125890, 120784, 125932, 120776, 125926, 120772, 120770, 110544, 120812, 110536, 120806, 110532, 84928, 108016, 119548, 84448, 107768, 119422, 84208, 107644, 84088, 107582, 84028, 129640, 85488, 108284, 129636, 85240, 108158, 129634, 85116, 85054, 128232, 129654, 85756, 128228, 85630, 128226, 125416, 128246, 125412, 125410, 119784, 125430, 119780, 119778, 108520, 119798, 108516, 108514, 83424, 107256, 119166, 83184, 107132, 83064, 107070, 83004, 82974, 129588, 83704, 107390, 129586, 83580, 83518, 128116, 83838, 128114, 125172, 125170, 119284, 119282, 107508, 107506, 82672, 106876, 82552, 106814, 82492, 82462, 129562, 82812, 82750, 128058, 125050, 119034, 82296, 106686, 82236, 82206, 82366, 82108, 82078, 76736, 103920, 117500, 76256, 103672, 117374, 76016, 103548, 75896, 103486, 75836, 129384, 77296, 104188, 129380, 77048, 104062, 129378, 76924, 76862, 127720, 129398, 77564, 127716, 77438, 127714, 124392, 127734, 124388, 124386, 117736, 124406, 117732, 117730, 104424, 117750, 104420, 104418, 112096, 121592, 126334, 92608, 111856, 121468, 92384, 111736, 121406, 92272, 111676, 92216, 111646, 92188, 75232, 103160, 117118, 93664, 74992, 103036, 93424, 112252, 102974, 93304, 74812, 93244, 74782, 93214, 129332, 75512, 103294, 129908, 129330, 93944, 75388, 129906, 93820, 75326, 93758, 127604, 75646, 128756, 127602, 94078, 128754, 124148, 126452, 124146, 126450, 117236, 121844, 117234, 121842, 103412, 103410, 91584, 111344, 121212, 91360, 111224, 121150, 91248, 111164, 91192, 111134, 91164, 91150, 74480, 102780, 91888, 74360, 102718, 91768, 111422, 91708, 74270, 91678, 129306, 74620, 129850, 92028, 74558, 91966, 127546, 128634, 124026, 126202, 116986, 121338, 102906, 90848, 110968, 121022, 90736, 110908, 90680, 110878, 90652, 90638, 74104, 102590, 91000, 74044, 90940, 74014, 90910, 74174, 91070, 90480, 110780, 90424, 110750, 90396, 90382, 73916, 90556, 73886, 90526, 90296, 110686, 90268, 90254, 73822, 90334, 90204, 90190, 71136, 101112, 116094, 70896, 100988, 70776, 100926, 70716, 70686, 129204, 71416, 101246, 129202, 71292, 71230, 127348, 71550, 127346, 123636, 123634, 116212, 116210, 101364, 101362, 79296, 105200, 118140, 79072, 105080, 118078, 78960, 105020, 78904, 104990, 78876, 78862, 70384, 100732, 79600, 70264, 100670, 79480, 105278, 79420, 70174, 79390, 129178, 70524, 129466, 79740, 70462, 79678, 127290, 127866, 123514, 124666, 115962, 118266, 100858, 113376, 122232, 126654, 95424, 113264, 122172, 95328, 113208, 122142, 95280, 113180, 95256, 113166, 95244, 78560, 104824, 117950, 95968, 78448, 104764, 95856, 113468, 104734, 95800, 78364, 95772, 78350, 95758, 70008, 100542, 78712, 69948, 96120, 78652, 69918, 96060, 78622, 96030, 70078, 78782, 96190, 94912, 113008, 122044, 94816, 112952, 122014, 94768, 112924, 94744, 112910, 94732, 94726, 78192, 104636, 95088, 78136, 104606, 95032, 113054, 95004, 78094, 94990, 69820, 78268, 69790, 95164, 78238, 95134, 94560, 112824, 121950, 94512, 112796, 94488, 112782, 94476, 94470, 78008, 104542, 94648, 77980, 94620, 77966, 94606, 69726, 78046, 94686, 94384, 112732, 94360, 112718, 94348, 94342, 77916, 94428, 77902, 94414, 94296, 112686, 94284, 94278, 77870, 94318, 94252, 94246, 68336, 99708, 68216, 99646, 68156, 68126, 68476, 68414, 127162, 123258, 115450, 99834, 72416, 101752, 116414, 72304, 101692, 72248, 101662, 72220, 72206, 67960, 99518, 72568, 67900, 72508, 67870, 72478, 68030, 72638, 80576, 105840, 118460, 80480, 105784, 118430, 80432, 105756, 80408, 105742, 80396, 80390, 72048, 101564, 80752, 71992, 101534, 80696, 71964, 80668, 71950, 80654, 67772, 72124, 67742, 80828, 72094, 80798, 114016, 122552, 126814, 96832, 113968, 122524, 96800, 113944, 122510, 96784, 113932, 96776, 113926, 96772, 80224, 105656, 118366, 97120, 80176, 105628, 97072, 114076, 105614, 97048, 80140, 97036, 80134, 97030, 71864, 101470, 80312, 71836, 97208, 80284, 71822, 97180, 80270, 97166, 67678, 71902, 80350, 97246, 96576, 113840, 122460, 96544, 113816, 122446, 96528, 113804, 96520, 113798, 96516, 96514, 80048, 105564, 96688, 80024, 105550, 96664, 113870, 96652, 80006, 96646, 71772, 80092, 71758, 96732, 80078, 96718, 96416, 113752, 122414, 96400, 113740, 96392, 113734, 96388, 96386, 79960, 105518, 96472, 79948, 96460, 79942, 96454, 71726, 79982, 96494, 96336, 113708, 96328, 113702, 96324, 96322, 79916, 96364, 79910, 96358, 96296, 113686, 96292, 96290, 79894, 96310, 66936, 99006, 66876, 66846, 67006, 68976, 100028, 68920, 99998, 68892, 68878, 66748, 69052, 66718, 69022, 73056, 102072, 116574, 73008, 102044, 72984, 102030, 72972, 72966, 68792, 99934, 73144, 68764, 73116, 68750, 73102, 66654, 68830, 73182, 81216, 106160, 118620, 81184, 106136, 118606, 81168, 106124, 81160, 106118, 81156, 81154, 72880, 101980, 81328, 72856, 101966, 81304, 106190, 81292, 72838, 81286, 68700, 72924, 68686, 81372, 72910, 81358, 114336, 122712, 126894, 114320, 122700, 114312, 122694, 114308, 114306, 81056, 106072, 118574, 97696, 81040, 106060, 97680, 114380, 106054, 97672, 81028, 97668, 81026, 97666, 72792, 101934, 81112, 72780, 97752, 81100, 72774, 97740, 81094, 97734, 68654, 72814, 81134, 97774, 114256, 122668, 114248, 122662, 114244, 114242, 80976, 106028, 97488, 80968, 106022, 97480, 114278, 97476, 80962, 97474, 72748, 81004, 72742, 97516, 80998, 97510, 114216, 122646, 114212, 114210, 80936, 106006, 97384, 80932, 97380, 80930, 97378, 72726, 80950, 97398, 114196, 114194, 80916, 97332, 80914, 97330, 66236, 66206, 67256, 99166, 67228, 67214, 66142, 67294, 69296, 100188, 69272, 100174, 69260, 69254, 67164, 69340, 67150, 69326, 73376, 102232, 116654, 73360, 102220, 73352, 102214, 73348, 73346, 69208, 100142, 73432, 102254, 73420, 69190, 73414, 67118, 69230, 73454, 106320, 118700, 106312, 118694, 106308, 106306, 73296, 102188, 81616, 106348, 102182, 81608, 73284, 81604, 73282, 81602, 69164, 73324, 69158, 81644, 73318, 81638, 122792, 126934, 122788, 122786, 106280, 118678, 114536, 106276, 114532, 106274, 114530, 73256, 102166, 81512, 73252, 98024, 81508, 73250, 98020, 81506, 98018, 69142, 73270, 81526, 98038, 122772, 122770, 106260, 114484, 106258, 114482, 73236, 81460, 73234, 97908, 81458, 97906, 122762, 106250, 114458, 73226, 81434, 97850, 66396, 66382, 67416, 99246, 67404, 67398, 66350, 67438, 69456, 100268, 69448, 100262, 69444, 69442, 67372, 69484, 67366, 69478, 102312, 116694, 102308, 102306, 69416, 100246, 73576, 102326, 73572, 69410, 73570, 67350, 69430, 73590, 118740, 118738, 102292, 106420, 102290, 106418, 69396, 73524, 69394, 81780, 73522, 81778, 118730, 102282, 106394, 69386, 73498, 81722, 66476, 66470, 67496, 99286, 67492, 67490, 66454, 67510, 100308, 100306, 67476, 69556, 67474, 69554, 116714])]); //#17685
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_pdf417.$ctx[id] = $_[id]); //#17685
        bwipp_pdf417.__17686__ = 1; //#17685
        $_ = Object.getPrototypeOf($_); //#17685
    } //#17685
    $_.cwtobits = function() {
        var _Ge = $get($_.clusters, $k[--$j]); //#17690
        $_.v = $get(_Ge, $k[--$j]); //#17690
        $k[$j++] = Infinity; //#17691
        for (var _Gh = 0, _Gi = 17; _Gh < _Gi; _Gh++) { //#17691
            $k[$j++] = 0; //#17691
        } //#17691
        var _Gl = $cvrs($s(17), $_.v, 2); //#17691
        for (var _Gm = 0, _Gn = _Gl.length; _Gm < _Gn; _Gm++) { //#17691
            $k[$j++] = $get(_Gl, _Gm) - 48; //#17691
        } //#17691
        var _Gp = $a(); //#17691
        $k[$j++] = $geti(_Gp, _Gp.length - 17, 17); //#17692
    }; //#17692
    if ($_.compact) { //#17699
        $_.rwid = $f(($f(($f((17 * $_.c) + 17)) + 17)) + 1); //#17697
    } else { //#17699
        $_.rwid = $f(($f(($f(($f((17 * $_.c) + 17)) + 17)) + 17)) + 18); //#17699
    } //#17699
    $_.pixs = $a(($_.rwid * $_.r) * $_.rowmult); //#17701
    for (var _H0 = 0, _Gz = $_.r - 1; _H0 <= _Gz; _H0 += 1) { //#17734
        $_.i = _H0; //#17704
        if (($_.i % 3) == 0) { //#17709
            $_.lcw = ((~~($_.i / 3)) * 30) + (~~(($_.r - 1) / 3)); //#17707
            $_.rcw = $f(($f(((~~($_.i / 3)) * 30) + $_.c)) - 1); //#17708
        } //#17708
        if (($_.i % 3) == 1) { //#17713
            $_.lcw = (((~~($_.i / 3)) * 30) + ($_.eclevel * 3)) + (($_.r - 1) % 3); //#17711
            $_.rcw = ((~~($_.i / 3)) * 30) + (~~(($_.r - 1) / 3)); //#17712
        } //#17712
        if (($_.i % 3) == 2) { //#17717
            $_.lcw = $f(($f(((~~($_.i / 3)) * 30) + $_.c)) - 1); //#17715
            $_.rcw = (((~~($_.i / 3)) * 30) + ($_.eclevel * 3)) + (($_.r - 1) % 3); //#17716
        } //#17716
        $k[$j++] = Infinity; //#17719
        $k[$j++] = 1; //#17721
        $k[$j++] = 1; //#17721
        $k[$j++] = 1; //#17721
        $k[$j++] = 1; //#17721
        $k[$j++] = 1; //#17721
        $k[$j++] = 1; //#17721
        $k[$j++] = 1; //#17721
        $k[$j++] = 1; //#17721
        $k[$j++] = 0; //#17721
        $k[$j++] = 1; //#17721
        $k[$j++] = 0; //#17721
        $k[$j++] = 1; //#17721
        $k[$j++] = 0; //#17721
        $k[$j++] = 1; //#17721
        $k[$j++] = 0; //#17721
        $k[$j++] = 0; //#17721
        $k[$j++] = 0; //#17721
        $k[$j++] = $_.lcw; //#17721
        $k[$j++] = $_.i % 3; //#17721
        $_.cwtobits(); //#17721
        $aload($k[--$j]); //#17721
        var _HP = $geti($_.cws, $_.c * $_.i, $_.c); //#17722
        for (var _HQ = 0, _HR = _HP.length; _HQ < _HR; _HQ++) { //#17722
            $k[$j++] = $get(_HP, _HQ); //#17722
            $k[$j++] = $_.i % 3; //#17722
            $_.cwtobits(); //#17722
            $aload($k[--$j]); //#17722
        } //#17722
        if ($_.compact) { //#17727
            $k[$j++] = 1; //#17724
        } else { //#17727
            $k[$j++] = $_.rcw; //#17726
            $k[$j++] = $_.i % 3; //#17726
            $_.cwtobits(); //#17726
            $aload($k[--$j]); //#17726
            $k[$j++] = 1; //#17727
            $k[$j++] = 1; //#17727
            $k[$j++] = 1; //#17727
            $k[$j++] = 1; //#17727
            $k[$j++] = 1; //#17727
            $k[$j++] = 1; //#17727
            $k[$j++] = 1; //#17727
            $k[$j++] = 0; //#17727
            $k[$j++] = 1; //#17727
            $k[$j++] = 0; //#17727
            $k[$j++] = 0; //#17727
            $k[$j++] = 0; //#17727
            $k[$j++] = 1; //#17727
            $k[$j++] = 0; //#17727
            $k[$j++] = 1; //#17727
            $k[$j++] = 0; //#17727
            $k[$j++] = 0; //#17727
            $k[$j++] = 1; //#17727
        } //#17727
        var _HZ = $a(); //#17727
        $k[$j++] = _HZ; //#17732
        for (var _Hc = 0, _Hb = $_.rowmult - 1; _Hc <= _Hb; _Hc += 1) { //#17732
            var _Hh = $k[--$j]; //#17731
            $puti($_.pixs, (_Hc + ($_.i * $_.rowmult)) * $_.rwid, _Hh); //#17731
            $k[$j++] = _Hh; //#17731
        } //#17731
        $j--; //#17733
    } //#17733
    var _Hq = new Map([
        ["ren", 'renmatrix'],
        ["pixs", $_.pixs],
        ["pixx", $_.rwid],
        ["pixy", $_.r * $_.rowmult],
        ["height", ($_.r * $_.rowmult) / 72],
        ["width", $_.rwid / 72],
        ["borderleft", 2],
        ["borderright", 2],
        ["bordertop", 2],
        ["borderbottom", 2],
        ["opt", $_.options]
    ]); //#17748
    $k[$j++] = _Hq; //#17751
    if (!$_.dontdraw) { //#17751
        bwipp_renmatrix(); //#17751
    } //#17751
    $_ = Object.getPrototypeOf($_); //#17753
    $_ = Object.getPrototypeOf($_); //#17755
} //bwipp_pdf417
function bwipp_pdf417compact() {
    $_ = Object.create($_); //#17784
    $_.dontdraw = false; //#17787
    $k[$j++] = $_; //#17789
    bwipp_processoptions(); //#17789
    $_.options = $k[--$j]; //#17789
    $_.barcode = $k[--$j]; //#17790
    $put($_.options, "dontdraw", true); //#17793
    $put($_.options, "compact", true); //#17794
    $k[$j++] = 'args'; //#17796
    $k[$j++] = $_.barcode; //#17796
    $k[$j++] = $_.options; //#17796
    bwipp_pdf417(); //#17796
    var _6 = $k[--$j]; //#17796
    $_[$k[--$j]] = _6; //#17796
    $put($_.args, "opt", $_.options); //#17798
    $k[$j++] = $_.args; //#17801
    if (!$_.dontdraw) { //#17801
        bwipp_renmatrix(); //#17801
    } //#17801
    $_ = Object.getPrototypeOf($_); //#17803
} //bwipp_pdf417compact
function bwipp_micropdf417() {
    $_ = Object.create($_); //#17834
    $_.dontdraw = false; //#17837
    $_.version = "unset"; //#17838
    $_.columns = 0; //#17839
    $_.rows = 0; //#17840
    $_.rowmult = 2; //#17841
    $_.cca = false; //#17842
    $_.ccb = false; //#17843
    $_.raw = false; //#17844
    $_.parse = false; //#17845
    $_.parsefnc = false; //#17846
    $k[$j++] = $_; //#17848
    bwipp_processoptions(); //#17848
    $_.options = $k[--$j]; //#17848
    $_.barcode = $k[--$j]; //#17849
    if ($eq($_.barcode, "")) { //#17853
        $k[$j++] = 'bwipp.micropdf417emptyData#17852'; //#17852
        $k[$j++] = "The data must not be empty"; //#17852
        bwipp_raiseerror(); //#17852
    } //#17852
    if ($_.rowmult <= 0) { //#17857
        $k[$j++] = 'bwipp.micropdf417badRowMult#17856'; //#17856
        $k[$j++] = "The row multiplier must be greater than zero"; //#17856
        bwipp_raiseerror(); //#17856
    } //#17856
    if (($_.cca && $_.ccb) || (($_.cca && $_.raw) || ($_.ccb && $_.raw))) { //#17861
        $k[$j++] = 'bwipp.micropdf417ccaAndCcb#17860'; //#17860
        $k[$j++] = "Cannot combine cca, ccb and raw"; //#17860
        bwipp_raiseerror(); //#17860
    } //#17860
    if ($ne($_.version, "unset")) { //#17882
        $search($_.version, "x"); //#17865
        if ($k[--$j]) { //#17880
            var _D = $k[--$j]; //#17866
            var _E = $k[--$j]; //#17866
            $k[$j++] = _D; //#17866
            $k[$j++] = _E; //#17866
            $j--; //#17866
            var _F = $k[--$j]; //#17867
            var _G = $k[--$j]; //#17867
            $k[$j++] = _G; //#17867
            $k[$j++] = _F; //#17867
            $k[$j++] = _G; //#17867
            $k[$j++] = _F; //#17867
            $astore($a(2)); //#17867
            $forall($k[--$j], function() { //#17876
                var _J = $k[--$j]; //#17869
                $k[$j++] = _J; //#17869
                $k[$j++] = true; //#17869
                if (_J.length == 0) { //#17869
                    $j--; //#17869
                    $k[$j++] = false; //#17869
                } //#17869
                var _K = $k[--$j]; //#17870
                var _L = $k[--$j]; //#17870
                $k[$j++] = _K; //#17872
                $forall(_L, function() { //#17872
                    var _M = $k[--$j]; //#17871
                    if ((_M < 48) || (_M > 57)) { //#17871
                        $j--; //#17871
                        $k[$j++] = false; //#17871
                    } //#17871
                }); //#17871
                if ($nt($k[--$j])) { //#17875
                    $k[$j++] = 'bwipp.micropdf417BadVersionBadRowOrColumn#17874'; //#17874
                    $k[$j++] = "version must be formatted as RxC"; //#17874
                    bwipp_raiseerror(); //#17874
                } //#17874
            }); //#17874
            $_.rows = $cvi($k[--$j]); //#17877
            $_.columns = $cvi($k[--$j]); //#17878
        } else { //#17880
            $j--; //#17880
            $k[$j++] = 'bwipp.micropdf417badVersionFormat#17880'; //#17880
            $k[$j++] = "version must be formatted as RxC"; //#17880
            bwipp_raiseerror(); //#17880
        } //#17880
    } //#17880
    bwipp_loadctx(bwipp_micropdf417); //#17884
    if (!bwipp_micropdf417.__17974__) { //#17974
        $_ = Object.create($_); //#17974
        $_.T = 0; //#17888
        $_.N = 1; //#17888
        $_.B = 2; //#17888
        $_.A = 0; //#17889
        $_.L = 1; //#17889
        $_.M = 2; //#17889
        $_.P = 3; //#17889
        $_.tl = -1; //#17892
        $_.nl = -2; //#17892
        $_.bl = -3; //#17892
        $_.bl6 = -4; //#17892
        $_.bs = -5; //#17892
        $_.al = -6; //#17895
        $_.ll = -7; //#17895
        $_.ml = -8; //#17895
        $_.pl = -9; //#17895
        $_.as = -10; //#17895
        $_.ps = -11; //#17895
        $_.m05 = -12; //#17898
        $_.m06 = -13; //#17898
        $_.charmaps = $a([$a(["A", "a", "0", ";"]), $a(["B", "b", "1", "<"]), $a(["C", "c", "2", ">"]), $a(["D", "d", "3", "@"]), $a(["E", "e", "4", "["]), $a(["F", "f", "5", 92]), $a(["G", "g", "6", "]"]), $a(["H", "h", "7", "_"]), $a(["I", "i", "8", "`"]), $a(["J", "j", "9", "~"]), $a(["K", "k", "&", "!"]), $a(["L", "l", 13, 13]), $a(["M", "m", 9, 9]), $a(["N", "n", ",", ","]), $a(["O", "o", ":", ":"]), $a(["P", "p", "#", 10]), $a(["Q", "q", "-", "-"]), $a(["R", "r", ".", "."]), $a(["S", "s", "$", "$"]), $a(["T", "t", "/", "/"]), $a(["U", "u", "+", "\""]), $a(["V", "v", "%", "|"]), $a(["W", "w", "*", "*"]), $a(["X", "x", "=", 40]), $a(["Y", "y", "^", 41]), $a(["Z", "z", $_.pl, "?"]), $a([" ", " ", " ", "{"]), $a([$_.ll, $_.as, $_.ll, "}"]), $a([$_.ml, $_.ml, $_.al, "'"]), $a([$_.ps, $_.ps, $_.ps, $_.al])]); //#17933
        $_.charvals = $a([new Map, new Map, new Map, new Map]); //#17936
        $_.alltext = new Map; //#17937
        for (var _19 = 0, _18 = $_.charmaps.length - 1; _19 <= _18; _19 += 1) { //#17947
            $_.i = _19; //#17939
            $_.encs = $get($_.charmaps, $_.i); //#17940
            for (var _1D = 0; _1D <= 3; _1D += 1) { //#17946
                $_.j = _1D; //#17942
                var _1G = $get($_.encs, $_.j); //#17943
                $k[$j++] = _1G; //#17943
                if ($eq($type(_1G), 'stringtype')) { //#17943
                    var _1J = $get($k[--$j], 0); //#17943
                    $k[$j++] = _1J; //#17943
                } //#17943
                var _1K = $k[--$j]; //#17944
                $put($get($_.charvals, $_.j), _1K, $_.i); //#17944
                $put($_.alltext, _1K, -1); //#17945
            } //#17945
        } //#17945
        $_.e = 10000; //#17949
        $_.latlen = $a([$a([0, 1, 1, 2]), $a([2, 0, 1, 2]), $a([1, 1, 0, 1]), $a([1, 2, 2, 0])]); //#17957
        $_.latseq = $a([$a([$a([]), $a([$_.ll]), $a([$_.ml]), $a([$_.ml, $_.pl])]), $a([$a([$_.ml, $_.al]), $a([]), $a([$_.ml]), $a([$_.ml, $_.pl])]), $a([$a([$_.al]), $a([$_.ll]), $a([]), $a([$_.pl])]), $a([$a([$_.al]), $a([$_.al, $_.ll]), $a([$_.al, $_.ml]), $a([])])]); //#17965
        $_.shftlen = $a([$a([$_.e, $_.e, $_.e, 1]), $a([1, $_.e, $_.e, 1]), $a([$_.e, $_.e, $_.e, 1]), $a([$_.e, $_.e, $_.e, $_.e])]); //#17973
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_micropdf417.$ctx[id] = $_[id]); //#17973
        bwipp_micropdf417.__17974__ = 1; //#17973
        $_ = Object.getPrototypeOf($_); //#17973
    } //#17973
    if ($_.raw || $_.cca) { //#17995
        $_.datcws = $a($_.barcode.length); //#17978
        $_.i = 0; //#17979
        $_.j = 0; //#17979
        for (;;) { //#17990
            if ($_.i >= ($_.barcode.length - 3)) { //#17981
                break; //#17981
            } //#17981
            if ($get($_.barcode, $_.i) != 94) { //#17982
                break; //#17982
            } //#17982
            var _2a = $geti($_.barcode, $_.i + 1, 3); //#17983
            $k[$j++] = _2a; //#17985
            $k[$j++] = false; //#17985
            for (var _2b = 0, _2c = _2a.length; _2b < _2c; _2b++) { //#17985
                var _2d = $get(_2a, _2b); //#17985
                if ((_2d < 48) || (_2d > 57)) { //#17984
                    $j--; //#17984
                    $k[$j++] = true; //#17984
                } //#17984
            } //#17984
            if ($k[--$j]) { //#17985
                $j--; //#17985
                break; //#17985
            } //#17985
            $_.cw = $cvi($k[--$j]); //#17986
            $put($_.datcws, $_.j, $_.cw); //#17987
            $_.i = $_.i + 4; //#17988
            $_.j = $_.j + 1; //#17989
        } //#17989
        if ($_.i != $_.barcode.length) { //#17993
            $k[$j++] = 'bwipp.micropdf417badCcaRawFormat#17992'; //#17992
            $k[$j++] = "cca and raw data must be formatted as ^NNN"; //#17992
            bwipp_raiseerror(); //#17992
        } //#17992
        $_.datcws = $geti($_.datcws, 0, $_.j); //#17994
    } //#17994
    $_.encb = function() {
        $_.in = $k[--$j]; //#17998
        $_.inlen = $_.in.length; //#17999
        $_.out = $a(((~~($_.inlen / 6)) * 5) + ($_.inlen % 6)); //#18000
        for (var _2x = 0, _2w = (~~($_.inlen / 6)) - 1; _2x <= _2w; _2x += 1) { //#18023
            $_.k = _2x; //#18002
            $k[$j++] = Infinity; //#18003
            $aload($geti($_.in, $_.k * 6, 3)); //#18003
            $_.msbs = $a(); //#18003
            $k[$j++] = Infinity; //#18004
            $aload($_.msbs); //#18005
            var _33 = $k[--$j]; //#18005
            var _34 = $k[--$j]; //#18005
            var _35 = $k[--$j]; //#18005
            $k[$j++] = $f(($f(_33 + (_34 * 256))) + (_35 * 65536)); //#18006
            for (var _36 = 0, _37 = 3; _36 < _37; _36++) { //#18006
                var _38 = $k[--$j]; //#18006
                $k[$j++] = _38 % 900; //#18006
                $k[$j++] = ~~(_38 / 900); //#18006
            } //#18006
            $_.mscs = $a(); //#18006
            $k[$j++] = Infinity; //#18008
            $aload($geti($_.in, ($_.k * 6) + 3, 3)); //#18008
            $_.lsbs = $a(); //#18008
            $k[$j++] = Infinity; //#18009
            $aload($_.lsbs); //#18010
            var _3F = $k[--$j]; //#18010
            var _3G = $k[--$j]; //#18010
            var _3H = $k[--$j]; //#18010
            $k[$j++] = $f(($f(_3F + (_3G * 256))) + (_3H * 65536)); //#18011
            for (var _3I = 0, _3J = 3; _3I < _3J; _3I++) { //#18011
                var _3K = $k[--$j]; //#18011
                $k[$j++] = _3K % 900; //#18011
                $k[$j++] = ~~(_3K / 900); //#18011
            } //#18011
            $_.lscs = $a(); //#18011
            var _3N = $get($_.lscs, 0); //#18013
            var _3P = $get($_.mscs, 0); //#18013
            $put($_.out, ($_.k * 5) + 4, ($f(_3N + (_3P * 316))) % 900); //#18014
            var _3T = $get($_.lscs, 1); //#18015
            var _3V = $get($_.mscs, 0); //#18015
            var _3X = $get($_.mscs, 1); //#18015
            $put($_.out, ($_.k * 5) + 3, ($f(($f(($f((~~(($f(_3N + (_3P * 316))) / 900)) + _3T)) + (_3V * 641))) + (_3X * 316))) % 900); //#18016
            var _3b = $get($_.lscs, 2); //#18017
            var _3d = $get($_.mscs, 0); //#18017
            var _3f = $get($_.mscs, 1); //#18017
            var _3h = $get($_.mscs, 2); //#18017
            $put($_.out, ($_.k * 5) + 2, ($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_3N + (_3P * 316))) / 900)) + _3T)) + (_3V * 641))) + (_3X * 316))) / 900)) + _3b)) + (_3d * 20))) + (_3f * 641))) + (_3h * 316))) % 900); //#18018
            var _3l = $get($_.lscs, 3); //#18019
            var _3n = $get($_.mscs, 1); //#18019
            var _3p = $get($_.mscs, 2); //#18019
            $put($_.out, ($_.k * 5) + 1, ($f(($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_3N + (_3P * 316))) / 900)) + _3T)) + (_3V * 641))) + (_3X * 316))) / 900)) + _3b)) + (_3d * 20))) + (_3f * 641))) + (_3h * 316))) / 900)) + _3l)) + (_3n * 20))) + (_3p * 641))) % 900); //#18020
            $put($_.out, $_.k * 5, ($f((~~(($f(($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_3N + (_3P * 316))) / 900)) + _3T)) + (_3V * 641))) + (_3X * 316))) / 900)) + _3b)) + (_3d * 20))) + (_3f * 641))) + (_3h * 316))) / 900)) + _3l)) + (_3n * 20))) + (_3p * 641))) / 900)) + ($get($_.mscs, 2) * 20))) % 900); //#18022
        } //#18022
        $_.rem = $_.inlen % 6; //#18024
        if ($_.rem != 0) { //#18029
            $k[$j++] = $_.out; //#18027
            $k[$j++] = $_.out.length - $_.rem; //#18027
            $k[$j++] = Infinity; //#18027
            $aload($geti($_.in, $_.inlen - $_.rem, $_.rem)); //#18027
            var _46 = $a(); //#18027
            var _47 = $k[--$j]; //#18028
            $puti($k[--$j], _47, _46); //#18028
        } //#18028
        $k[$j++] = $_.out; //#18030
    }; //#18030
    if ($_.ccb) { //#18039
        $_.barlen = $_.barcode.length; //#18034
        $_.datcws = $a((((~~($_.barlen / 6)) * 5) + ($_.barlen % 6)) + 2); //#18035
        $put($_.datcws, 0, 920); //#18036
        var _4I = (($_.barlen % 6) == 0) ? 924 : 901; //#18037
        $put($_.datcws, 1, _4I); //#18037
        $k[$j++] = $_.datcws; //#18038
        $k[$j++] = 2; //#18038
        $k[$j++] = Infinity; //#18038
        $forall($_.barcode); //#18038
        var _4L = $a(); //#18038
        $k[$j++] = _4L; //#18038
        $_.encb(); //#18038
        var _4M = $k[--$j]; //#18038
        var _4N = $k[--$j]; //#18038
        $puti($k[--$j], _4N, _4M); //#18038
    } //#18038
    if (((!$_.raw) && (!$_.cca)) && (!$_.ccb)) { //#18440
        var _4U = new Map([
            ["parse", $_.parse],
            ["parsefnc", $_.parsefnc],
            ["eci", true]
        ]); //#18050
        $_.fncvals = _4U; //#18051
        $k[$j++] = 'msg'; //#18052
        $k[$j++] = $_.barcode; //#18052
        $k[$j++] = $_.fncvals; //#18052
        bwipp_parseinput(); //#18052
        var _4X = $k[--$j]; //#18052
        $_[$k[--$j]] = _4X; //#18052
        $_.msglen = $_.msg.length; //#18053
        if ($_.msglen >= 9) { //#18071
            $aload($geti($_.msg, 0, 7)); //#18057
            var _4d = $k[--$j]; //#18058
            var _4e = $k[--$j]; //#18058
            $k[$j++] = _4d == 29; //#18058
            $k[$j++] = _4e; //#18058
            $j--; //#18058
            var _4f = $k[--$j]; //#18058
            var _4g = $k[--$j]; //#18058
            var _4h = $k[--$j]; //#18058
            var _4i = $k[--$j]; //#18059
            var _4j = $k[--$j]; //#18059
            var _4k = $k[--$j]; //#18059
            if (((((_4f && (_4g == 48)) && (_4h == 30)) && (_4i == 62)) && (_4j == 41)) && (_4k == 91)) { //#18070
                $aload($geti($_.msg, $_.msglen - 2, 2)); //#18060
                var _4o = $k[--$j]; //#18061
                var _4p = $k[--$j]; //#18061
                if ((_4o == 4) && (_4p == 30)) { //#18069
                    if ($get($_.msg, 5) == 53) { //#18066
                        $k[$j++] = Infinity; //#18063
                        $k[$j++] = $_.m05; //#18063
                        $aload($geti($_.msg, 7, $_.msg.length - 9)); //#18063
                        $_.msg = $a(); //#18063
                    } else { //#18066
                        if ($get($_.msg, 5) == 54) { //#18067
                            $k[$j++] = Infinity; //#18066
                            $k[$j++] = $_.m06; //#18066
                            $aload($geti($_.msg, 7, $_.msg.length - 9)); //#18066
                            $_.msg = $a(); //#18066
                        } //#18066
                    } //#18066
                } //#18066
            } //#18066
        } //#18066
        $_.msglen = $_.msg.length; //#18072
        $k[$j++] = Infinity; //#18075
        for (var _56 = 0, _57 = $_.msglen; _56 < _57; _56++) { //#18075
            $k[$j++] = 0; //#18075
        } //#18075
        $k[$j++] = 0; //#18075
        $_.numdigits = $a(); //#18075
        $k[$j++] = Infinity; //#18076
        for (var _5A = 0, _5B = $_.msglen; _5A < _5B; _5A++) { //#18076
            $k[$j++] = 0; //#18076
        } //#18076
        $k[$j++] = 0; //#18076
        $_.numtext = $a(); //#18076
        $k[$j++] = Infinity; //#18077
        for (var _5E = 0, _5F = $_.msglen; _5E < _5F; _5E++) { //#18077
            $k[$j++] = 0; //#18077
        } //#18077
        $k[$j++] = 0; //#18077
        $_.numbytes = $a(); //#18077
        $k[$j++] = Infinity; //#18078
        for (var _5I = 0, _5J = $_.msglen; _5I < _5J; _5I++) { //#18078
            $k[$j++] = 0; //#18078
        } //#18078
        $_.iseci = $a(); //#18078
        for (var _5M = $_.msglen - 1; _5M >= 0; _5M -= 1) { //#18091
            $_.i = _5M; //#18080
            var _5P = $get($_.msg, $_.i); //#18081
            if ((_5P >= 48) && (_5P <= 57)) { //#18083
                $put($_.numdigits, $_.i, $f($get($_.numdigits, $_.i + 1) + 1)); //#18082
            } //#18082
            var _5Z = $get($_.alltext, $get($_.msg, $_.i)) !== undefined; //#18084
            if (_5Z && ($get($_.numdigits, $_.i) < 13)) { //#18086
                $put($_.numtext, $_.i, $f($get($_.numtext, $_.i + 1) + 1)); //#18085
            } //#18085
            if ((($get($_.msg, $_.i) >= 0) && ($get($_.numtext, $_.i) < 5)) && ($get($_.numdigits, $_.i) < 13)) { //#18089
                $put($_.numbytes, $_.i, $f($get($_.numbytes, $_.i + 1) + 1)); //#18088
            } //#18088
            $put($_.iseci, $_.i, $get($_.msg, $_.i) <= -1000000); //#18090
        } //#18090
        $_.numdigits = $geti($_.numdigits, 0, $_.msglen); //#18092
        $_.numtext = $geti($_.numtext, 0, $_.msglen); //#18093
        $_.numbytes = $geti($_.numbytes, 0, $_.msglen); //#18094
        $_.seq = $a([]); //#18096
        $_.seqlen = 0; //#18096
        $_.state = $_.B; //#18096
        $_.p = 0; //#18096
        for (;;) { //#18158
            if ($_.p == $_.msglen) { //#18097
                break; //#18097
            } //#18097
            var _6H = $get($_.msg, $_.p); //#18098
            if (($_.p == 0) && ((_6H == $_.m05) || (_6H == $_.m06))) { //#18156
                $k[$j++] = Infinity; //#18099
                $aload($_.seq); //#18100
                var _6P = ($get($_.msg, $_.p) == $_.m05) ? $_.m05 : $_.m06; //#18101
                $k[$j++] = _6P; //#18101
                $_.seq = $a(); //#18101
                $_.p = $_.p + 1; //#18103
                $_.seqlen = $_.seqlen + 1; //#18104
            } else { //#18156
                if ($get($_.iseci, $_.p)) { //#18156
                    $_.eci = $get($_.msg, $_.p); //#18107
                    $k[$j++] = Infinity; //#18108
                    $aload($_.seq); //#18109
                    $k[$j++] = $a([$_.eci]); //#18110
                    $_.seq = $a(); //#18110
                    $_.p = $_.p + 1; //#18112
                    $k[$j++] = 'seqlen'; //#18113
                    $k[$j++] = $_.seqlen; //#18113
                    if ($_.eci <= -1810900) { //#18113
                        $k[$j++] = 2; //#18113
                    } else { //#18113
                        var _6h = ($_.eci <= -1000900) ? 3 : 2; //#18113
                        $k[$j++] = _6h; //#18113
                    } //#18113
                    var _6i = $k[--$j]; //#18113
                    var _6j = $k[--$j]; //#18113
                    $_[$k[--$j]] = $f(_6j + _6i); //#18113
                } else { //#18156
                    $_.n = $get($_.numdigits, $_.p); //#18115
                    if (($_.n >= 13) || (($_.n == $_.msglen) && ($_.n >= 8))) { //#18156
                        $k[$j++] = Infinity; //#18117
                        $aload($_.seq); //#18118
                        $k[$j++] = $_.nl; //#18120
                        $k[$j++] = Infinity; //#18120
                        $aload($geti($_.msg, $_.p, $_.n)); //#18120
                        var _6y = $a(); //#18120
                        $k[$j++] = _6y; //#18120
                        $_.seq = $a(); //#18120
                        $_.state = $_.N; //#18122
                        $_.p = $f($_.p + $_.n); //#18123
                        $_.seqlen = $f(($_.seqlen + 1) + $_.n); //#18124
                    } else { //#18156
                        $_.t = $get($_.numtext, $_.p); //#18126
                        if ($_.t >= 5) { //#18156
                            $k[$j++] = Infinity; //#18128
                            $aload($_.seq); //#18129
                            if ($_.state != $_.T) { //#18132
                                $k[$j++] = $_.tl; //#18131
                            } //#18131
                            $k[$j++] = Infinity; //#18133
                            $aload($geti($_.msg, $_.p, $_.t)); //#18133
                            var _7H = $a(); //#18133
                            $k[$j++] = _7H; //#18133
                            $_.seq = $a(); //#18133
                            $_.state = $_.T; //#18135
                            $_.p = $f($_.p + $_.t); //#18136
                            $_.seqlen = $f($f($_.seqlen + 1) + $_.t); //#18137
                        } else { //#18156
                            $_.b = $get($_.numbytes, $_.p); //#18139
                            if (($_.b == 1) && ($_.state == $_.T)) { //#18156
                                $k[$j++] = Infinity; //#18141
                                $aload($_.seq); //#18142
                                $k[$j++] = $_.bs; //#18144
                                $k[$j++] = $a([$get($_.msg, $_.p)]); //#18144
                                $_.seq = $a(); //#18144
                                $_.p = $f($_.p + $_.b); //#18146
                                $_.seqlen = $f($_.seqlen + 2); //#18147
                            } else { //#18156
                                $k[$j++] = Infinity; //#18149
                                $aload($_.seq); //#18150
                                var _7g = (($_.b % 6) != 0) ? $_.bl : $_.bl6; //#18151
                                $k[$j++] = _7g; //#18152
                                $k[$j++] = Infinity; //#18152
                                $aload($geti($_.msg, $_.p, $_.b)); //#18152
                                var _7l = $a(); //#18152
                                $k[$j++] = _7l; //#18152
                                $_.seq = $a(); //#18152
                                $_.state = $_.B; //#18154
                                $_.p = $f($_.p + $_.b); //#18155
                                $_.seqlen = $f($f($_.seqlen + 1) + $_.b); //#18156
                            } //#18156
                        } //#18156
                    } //#18156
                } //#18156
            } //#18156
        } //#18156
        $k[$j++] = Infinity; //#18160
        $k[$j++] = $_.tl; //#18161
        $k[$j++] = 900; //#18161
        $k[$j++] = $_.bl; //#18161
        $k[$j++] = 901; //#18161
        $k[$j++] = $_.bl6; //#18161
        $k[$j++] = 924; //#18161
        $k[$j++] = $_.nl; //#18161
        $k[$j++] = 902; //#18161
        $k[$j++] = $_.bs; //#18161
        $k[$j++] = 913; //#18161
        $k[$j++] = $_.m05; //#18161
        $k[$j++] = 916; //#18161
        $k[$j++] = $_.m06; //#18161
        $k[$j++] = 917; //#18161
        $_.latchcws = $d(); //#18162
        $_.enca = function() {
            var _84 = $get($get($_.charvals, $_.A), $k[--$j]); //#18165
            $k[$j++] = _84; //#18165
        }; //#18165
        $_.encl = function() {
            var _89 = $get($get($_.charvals, $_.L), $k[--$j]); //#18166
            $k[$j++] = _89; //#18166
        }; //#18166
        $_.encm = function() {
            var _8E = $get($get($_.charvals, $_.M), $k[--$j]); //#18167
            $k[$j++] = _8E; //#18167
        }; //#18167
        $_.encp = function() {
            var _8J = $get($get($_.charvals, $_.P), $k[--$j]); //#18168
            $k[$j++] = _8J; //#18168
        }; //#18168
        $_.textencfuncs = $a(['enca', 'encl', 'encm', 'encp']); //#18169
        $_.addtotext = function() {
            $put($_.text, $_.l, $k[--$j]); //#18172
            $_.l = $_.l + 1; //#18173
        }; //#18173
        $_.enct = function() {
            $_.in = $k[--$j]; //#18178
            $_.curlen = $a([$_.e, $_.e, $_.e, $_.e]); //#18180
            $put($_.curlen, $_.submode, 0); //#18181
            $_.curseq = $a([$a([]), $a([]), $a([]), $a([])]); //#18182
            $forall($_.in, function() { //#18252
                $_.char = $k[--$j]; //#18187
                for (;;) { //#18208
                    $_.imp = false; //#18191
                    var _8i = $a([$_.A, $_.L, $_.M, $_.P]); //#18192
                    for (var _8j = 0, _8k = _8i.length; _8j < _8k; _8j++) { //#18206
                        $_.x = $get(_8i, _8j); //#18193
                        var _8q = $a([$_.A, $_.L, $_.M, $_.P]); //#18194
                        for (var _8r = 0, _8s = _8q.length; _8r < _8s; _8r++) { //#18205
                            $_.y = $get(_8q, _8r); //#18195
                            $_.cost = $f($get($_.curlen, $_.x) + $get($get($_.latlen, $_.x), $_.y)); //#18196
                            if ($_.cost < $get($_.curlen, $_.y)) { //#18204
                                $put($_.curlen, $_.y, $_.cost); //#18198
                                $k[$j++] = $_.curseq; //#18201
                                $k[$j++] = $_.y; //#18201
                                $k[$j++] = Infinity; //#18199
                                $aload($get($_.curseq, $_.x)); //#18200
                                $aload($get($get($_.latseq, $_.x), $_.y)); //#18201
                                var _9J = $a(); //#18201
                                var _9K = $k[--$j]; //#18202
                                $put($k[--$j], _9K, _9J); //#18202
                                $_.imp = true; //#18203
                            } //#18203
                        } //#18203
                    } //#18203
                    if (!$_.imp) { //#18207
                        break; //#18207
                    } //#18207
                } //#18207
                $_.nxtlen = $a([$_.e, $_.e, $_.e, $_.e]); //#18211
                $_.nxtseq = $a(4); //#18212
                var _9X = $a([$_.A, $_.L, $_.M, $_.P]); //#18214
                for (var _9Y = 0, _9Z = _9X.length; _9Y < _9Z; _9Y++) { //#18247
                    $_.x = $get(_9X, _9Y); //#18215
                    for (;;) { //#18245
                        var _9f = $get($get($_.charvals, $_.x), $_.char) !== undefined; //#18219
                        if (!_9f) { //#18219
                            break; //#18219
                        } //#18219
                        $_.cost = $f($get($_.curlen, $_.x) + 1); //#18222
                        if ($_.cost < $get($_.nxtlen, $_.x)) { //#18226
                            $put($_.nxtlen, $_.x, $_.cost); //#18224
                            $k[$j++] = $_.nxtseq; //#18225
                            $k[$j++] = $_.x; //#18225
                            $k[$j++] = Infinity; //#18225
                            $aload($get($_.curseq, $_.x)); //#18225
                            $k[$j++] = $_.char; //#18225
                            var _9w = $a(); //#18225
                            var _9x = $k[--$j]; //#18225
                            $put($k[--$j], _9x, _9w); //#18225
                        } //#18225
                        var _A3 = $a([$_.A, $_.L, $_.M, $_.P]); //#18229
                        for (var _A4 = 0, _A5 = _A3.length; _A4 < _A5; _A4++) { //#18242
                            $_.y = $get(_A3, _A4); //#18230
                            if ($ne($_.x, $_.y)) { //#18241
                                $_.cost = $f($f($get($_.curlen, $_.y) + $get($get($_.shftlen, $_.y), $_.x)) + 1); //#18232
                                if ($_.cost < $get($_.nxtlen, $_.y)) { //#18240
                                    $put($_.nxtlen, $_.y, $_.cost); //#18234
                                    $k[$j++] = $_.nxtseq; //#18238
                                    $k[$j++] = $_.y; //#18238
                                    $k[$j++] = Infinity; //#18235
                                    $aload($get($_.curseq, $_.y)); //#18236
                                    var _AV = ($_.x == $_.A) ? $_.as : $_.ps; //#18237
                                    $k[$j++] = _AV; //#18238
                                    $k[$j++] = $_.char; //#18238
                                    var _AX = $a(); //#18238
                                    var _AY = $k[--$j]; //#18239
                                    $put($k[--$j], _AY, _AX); //#18239
                                } //#18239
                            } //#18239
                        } //#18239
                        break; //#18244
                    } //#18244
                } //#18244
                $_.curlen = $_.nxtlen; //#18249
                $_.curseq = $_.nxtseq; //#18250
            }); //#18250
            $_.minseq = $_.e; //#18255
            var _Ah = $a([$_.A, $_.L, $_.M, $_.P]); //#18256
            for (var _Ai = 0, _Aj = _Ah.length; _Ai < _Aj; _Ai++) { //#18262
                $_.k = $get(_Ah, _Ai); //#18257
                if ($get($_.curlen, $_.k) < $_.minseq) { //#18261
                    $_.minseq = $get($_.curlen, $_.k); //#18259
                    $_.txtseq = $get($_.curseq, $_.k); //#18260
                } //#18260
            } //#18260
            $_.text = $a($_.minseq); //#18265
            $_.k = 0; //#18266
            $_.l = 0; //#18266
            for (;;) { //#18286
                if ($_.k >= $_.txtseq.length) { //#18267
                    break; //#18267
                } //#18267
                $_.char = $get($_.txtseq, $_.k); //#18269
                $k[$j++] = $_.char; //#18272
                if ($_[$get($_.textencfuncs, $_.submode)]() === true) {
                    break;
                } //#18272
                $_.addtotext(); //#18272
                $_.k = $_.k + 1; //#18273
                if (($_.char == $_.as) || ($_.char == $_.ps)) { //#18279
                    $k[$j++] = $get($_.txtseq, $_.k); //#18277
                    if ($_.char == $_.as) { //#18277
                        $_.enca(); //#18277
                    } else { //#18277
                        $_.encp(); //#18277
                    } //#18277
                    $_.addtotext(); //#18277
                    $_.k = $_.k + 1; //#18278
                } //#18278
                if ($_.char == $_.al) { //#18282
                    $_.submode = $_.A; //#18282
                } //#18282
                if ($_.char == $_.ll) { //#18283
                    $_.submode = $_.L; //#18283
                } //#18283
                if ($_.char == $_.ml) { //#18284
                    $_.submode = $_.M; //#18284
                } //#18284
                if ($_.char == $_.pl) { //#18285
                    $_.submode = $_.P; //#18285
                } //#18285
            } //#18285
            if (($_.text.length % 2) == 1) { //#18333
                if ($_.submode == $_.P) { //#18329
                    $k[$j++] = 'pad'; //#18290
                    $k[$j++] = $_.al; //#18290
                    $_.encp(); //#18290
                    var _BY = $k[--$j]; //#18290
                    $_[$k[--$j]] = _BY; //#18290
                    $_.submode = $_.A; //#18291
                } else { //#18329
                    $_.nextecitext = false; //#18294
                    for (var _Be = $_.i + 1, _Bd = $_.seq.length - 1; _Be <= _Bd; _Be += 1) { //#18301
                        $_.ti = _Be; //#18297
                        if ($ne($type($get($_.seq, $_.ti)), 'arraytype')) { //#18298
                            $_.nextecitext = false; //#18298
                            break; //#18298
                        } //#18298
                        if ($get($get($_.seq, $_.ti), 0) > -1000000) { //#18299
                            break; //#18299
                        } //#18299
                        $_.nextecitext = true; //#18300
                    } //#18300
                    if ($_.nextecitext) { //#18329
                        if ($_.submode == $_.A) { //#18326
                            var _Bx = $get($get($_.charvals, $_.L), $get($get($_.seq, $_.ti), 0)) !== undefined; //#18304
                            if (_Bx) { //#18309
                                $k[$j++] = 'pad'; //#18305
                                $k[$j++] = $_.ll; //#18305
                                $_.enca(); //#18305
                                var _Bz = $k[--$j]; //#18305
                                $_[$k[--$j]] = _Bz; //#18305
                                $_.submode = $_.L; //#18306
                            } else { //#18309
                                $k[$j++] = 'pad'; //#18308
                                $k[$j++] = $_.ml; //#18308
                                $_.enca(); //#18308
                                var _C3 = $k[--$j]; //#18308
                                $_[$k[--$j]] = _C3; //#18308
                                $_.submode = $_.M; //#18309
                            } //#18309
                        } else { //#18326
                            if ($_.submode == $_.M) { //#18326
                                var _CF = $get($get($_.charvals, $_.L), $get($get($_.seq, $_.ti), 0)) !== undefined; //#18313
                                if (_CF) { //#18322
                                    $k[$j++] = 'pad'; //#18314
                                    $k[$j++] = $_.ll; //#18314
                                    $_.encm(); //#18314
                                    var _CH = $k[--$j]; //#18314
                                    $_[$k[--$j]] = _CH; //#18314
                                    $_.submode = $_.L; //#18315
                                } else { //#18322
                                    var _CR = $get($get($_.charvals, $_.P), $get($get($_.seq, $_.ti), 0)) !== undefined; //#18317
                                    if (_CR) { //#18322
                                        $k[$j++] = 'pad'; //#18318
                                        $k[$j++] = $_.pl; //#18318
                                        $_.encm(); //#18318
                                        var _CT = $k[--$j]; //#18318
                                        $_[$k[--$j]] = _CT; //#18318
                                        $_.submode = $_.P; //#18319
                                    } else { //#18322
                                        $k[$j++] = 'pad'; //#18321
                                        $k[$j++] = $_.al; //#18321
                                        $_.encm(); //#18321
                                        var _CX = $k[--$j]; //#18321
                                        $_[$k[--$j]] = _CX; //#18321
                                        $_.submode = $_.A; //#18322
                                    } //#18322
                                } //#18322
                            } else { //#18326
                                $k[$j++] = 'pad'; //#18325
                                $k[$j++] = $_.ml; //#18325
                                $_.encl(); //#18325
                                var _Cb = $k[--$j]; //#18325
                                $_[$k[--$j]] = _Cb; //#18325
                                $_.submode = $_.M; //#18326
                            } //#18326
                        } //#18326
                    } else { //#18329
                        $k[$j++] = 'pad'; //#18329
                        $k[$j++] = $_.ps; //#18329
                        if ($_[$get($_.textencfuncs, $_.submode)]() === true) {
                            return true;
                        } //#18329
                        var _Cj = $k[--$j]; //#18329
                        $_[$k[--$j]] = _Cj; //#18329
                    } //#18329
                } //#18329
                $k[$j++] = Infinity; //#18332
                $aload($_.text); //#18332
                $k[$j++] = $_.pad; //#18332
                $_.text = $a(); //#18332
            } //#18332
            $_.out = $a(~~($_.text.length / 2)); //#18335
            for (var _Cs = 0, _Cr = $_.out.length - 1; _Cs <= _Cr; _Cs += 1) { //#18339
                $_.k = _Cs; //#18337
                $put($_.out, $_.k, $f(($get($_.text, $_.k * 2) * 30) + $get($_.text, ($_.k * 2) + 1))); //#18338
            } //#18338
            $k[$j++] = $_.out; //#18341
        }; //#18341
        $_.encn = function() {
            $_.in = $k[--$j]; //#18346
            $_.out = $a([]); //#18347
            for (var _D6 = 0, _D5 = $_.in.length - 1; _D6 <= _D5; _D6 += 44) { //#18375
                $_.k = _D6; //#18349
                $k[$j++] = Infinity; //#18350
                var _DB = $_.in.length - $_.k; //#18351
                $k[$j++] = 1; //#18351
                $k[$j++] = $_.in; //#18351
                $k[$j++] = $_.k; //#18351
                $k[$j++] = _DB; //#18351
                if (_DB > 44) { //#18351
                    $j--; //#18351
                    $k[$j++] = 44; //#18351
                } //#18351
                var _DC = $k[--$j]; //#18351
                var _DD = $k[--$j]; //#18351
                var _DF = $geti($k[--$j], _DD, _DC); //#18351
                for (var _DG = 0, _DH = _DF.length; _DG < _DH; _DG++) { //#18352
                    $k[$j++] = $f($get(_DF, _DG) - 48); //#18352
                } //#18352
                $_.gmod = $a(); //#18352
                $_.cwn = $a([]); //#18354
                for (;;) { //#18373
                    $_.dv = 900; //#18355
                    $_.gmul = $a([]); //#18356
                    $_.val = 0; //#18356
                    for (;;) { //#18368
                        if ($_.gmod.length == 0) { //#18357
                            break; //#18357
                        } //#18357
                        $_.val = $f(($_.val * 10) + $get($_.gmod, 0)); //#18358
                        $_.gmod = $geti($_.gmod, 1, $_.gmod.length - 1); //#18359
                        if ($_.val < $_.dv) { //#18365
                            if ($_.gmul.length != 0) { //#18363
                                $k[$j++] = Infinity; //#18362
                                $aload($_.gmul); //#18362
                                $k[$j++] = 0; //#18362
                                $_.gmul = $a(); //#18362
                            } //#18362
                        } else { //#18365
                            $k[$j++] = Infinity; //#18365
                            $aload($_.gmul); //#18365
                            $k[$j++] = ~~($_.val / $_.dv); //#18365
                            $_.gmul = $a(); //#18365
                        } //#18365
                        $_.val = $_.val % $_.dv; //#18367
                    } //#18367
                    $_.dv = $_.val; //#18369
                    $k[$j++] = Infinity; //#18370
                    $k[$j++] = $_.dv; //#18370
                    $aload($_.cwn); //#18370
                    $_.cwn = $a(); //#18370
                    $_.gmod = $_.gmul; //#18371
                    if ($_.gmul.length == 0) { //#18372
                        break; //#18372
                    } //#18372
                } //#18372
                $k[$j++] = Infinity; //#18374
                $aload($_.out); //#18374
                $aload($_.cwn); //#18374
                $_.out = $a(); //#18374
            } //#18374
            $k[$j++] = $_.out; //#18376
        }; //#18376
        $_.ence = function() {
            var _Dq = $f((-$get($k[--$j], 0)) - 1000000); //#18381
            $k[$j++] = _Dq; //#18389
            if (_Dq <= 899) { //#18388
                var _Dr = $k[--$j]; //#18382
                $k[$j++] = 927; //#18382
                $k[$j++] = _Dr; //#18382
                $astore($a(2)); //#18382
            } else { //#18388
                var _Dt = $k[--$j]; //#18383
                $k[$j++] = _Dt; //#18389
                if (_Dt <= 810899) { //#18388
                    var _Du = $k[--$j]; //#18384
                    $k[$j++] = 926; //#18384
                    $k[$j++] = (~~(_Du / 900)) - 1; //#18384
                    $k[$j++] = _Du % 900; //#18384
                    $astore($a(3)); //#18384
                } else { //#18388
                    var _Dw = $k[--$j]; //#18385
                    $k[$j++] = _Dw; //#18389
                    if (_Dw <= 811799) { //#18388
                        var _Dx = $k[--$j]; //#18386
                        $k[$j++] = 925; //#18386
                        $k[$j++] = $f(_Dx - 810900); //#18386
                        $astore($a(2)); //#18386
                    } else { //#18388
                        $k[$j++] = 'bwipp.pdf417badECI#18388'; //#18388
                        $k[$j++] = "PDF417 supports ECIs 000000 to 811799"; //#18388
                        bwipp_raiseerror(); //#18388
                    } //#18388
                } //#18388
            } //#18388
        }; //#18388
        $_.encfuncs = $a(['enct', 'encn', 'encb']); //#18392
        $_.addtocws = function() {
            var _E0 = $k[--$j]; //#18395
            $puti($_.datcws, $_.j, _E0); //#18395
            $_.j = _E0.length + $_.j; //#18396
        }; //#18396
        $_.datcws = $a($_.seqlen); //#18401
        $_.i = 0; //#18402
        $_.j = 0; //#18402
        for (;;) { //#18438
            if ($_.i >= $_.seq.length) { //#18403
                break; //#18403
            } //#18403
            $_.chars = $get($_.seq, $_.i); //#18404
            if ($eq($type($_.chars), 'arraytype')) { //#18434
                if ($get($_.chars, 0) <= -1000000) { //#18409
                    $k[$j++] = $_.chars; //#18407
                    $_.ence(); //#18407
                    $_.addtocws(); //#18407
                } else { //#18409
                    $k[$j++] = $_.chars; //#18409
                    if ($_[$get($_.encfuncs, $_.state)]() === true) {
                        break;
                    } //#18409
                    $_.addtocws(); //#18409
                } //#18409
            } else { //#18434
                $k[$j++] = $a([$get($_.latchcws, $_.chars)]); //#18412
                $_.addtocws(); //#18412
                if ($_.chars == $_.tl) { //#18413
                    $_.state = $_.T; //#18413
                    $_.submode = $_.A; //#18413
                } //#18413
                if ($_.chars == $_.nl) { //#18414
                    $_.state = $_.N; //#18414
                } //#18414
                if (($_.chars == $_.bl) || ($_.chars == $_.bl6)) { //#18415
                    $_.state = $_.B; //#18415
                } //#18415
                if ($_.chars == $_.bs) { //#18419
                    $_.i = $_.i + 1; //#18417
                    $k[$j++] = $get($_.seq, $_.i); //#18418
                    $_.encb(); //#18418
                    $_.addtocws(); //#18418
                } //#18418
                if ($_.chars == $_.m05) { //#18427
                    if (($_.i + 1) < $_.seq.length) { //#18425
                        if ($get($_.seq, $_.i + 1) == $_.nl) { //#18424
                            $_.i = $_.i + 1; //#18423
                        } //#18423
                    } //#18423
                    $_.state = $_.N; //#18426
                } //#18426
                if ($_.chars == $_.m06) { //#18435
                    if (($_.i + 1) < $_.seq.length) { //#18433
                        if ($get($_.seq, $_.i + 1) == $_.tl) { //#18432
                            $_.i = $_.i + 1; //#18431
                        } //#18431
                    } //#18431
                    $_.state = $_.T; //#18434
                    $_.submode = $_.M; //#18434
                } //#18434
            } //#18434
            $_.i = $_.i + 1; //#18437
        } //#18437
        $_.datcws = $geti($_.datcws, 0, $_.j); //#18439
    } //#18439
    if (!bwipp_micropdf417.__18503__) { //#18503
        $_ = Object.create($_); //#18503
        $_.ccametrics = $a([$a([2, 5, 4, 39, 0, 19]), $a([2, 6, 4, 1, 0, 33]), $a([2, 7, 5, 32, 0, 12]), $a([2, 8, 5, 8, 0, 40]), $a([2, 9, 6, 14, 0, 46]), $a([2, 10, 6, 43, 0, 23]), $a([2, 12, 7, 20, 0, 52]), $a([3, 4, 4, 11, 43, 23]), $a([3, 5, 5, 1, 33, 13]), $a([3, 6, 6, 5, 37, 17]), $a([3, 7, 7, 15, 47, 27]), $a([3, 8, 7, 21, 1, 33]), $a([4, 3, 4, 40, 20, 52]), $a([4, 4, 5, 43, 23, 3]), $a([4, 5, 6, 46, 26, 6]), $a([4, 6, 7, 34, 14, 46]), $a([4, 7, 8, 29, 9, 41])]); //#18463
        $_.nonccametrics = $a([$a([1, 11, 7, 1, 0, 9]), $a([1, 14, 7, 8, 0, 8]), $a([1, 17, 7, 36, 0, 36]), $a([1, 20, 8, 19, 0, 19]), $a([1, 24, 8, 9, 0, 17]), $a([1, 28, 8, 25, 0, 33]), $a([2, 8, 8, 1, 0, 1]), $a([2, 11, 9, 1, 0, 9]), $a([2, 14, 9, 8, 0, 8]), $a([2, 17, 10, 36, 0, 36]), $a([2, 20, 11, 19, 0, 19]), $a([2, 23, 13, 9, 0, 17]), $a([2, 26, 15, 27, 0, 35]), $a([3, 6, 12, 1, 1, 1]), $a([3, 8, 14, 7, 7, 7]), $a([3, 10, 16, 15, 15, 15]), $a([3, 12, 18, 25, 25, 25]), $a([3, 15, 21, 37, 37, 37]), $a([3, 20, 26, 1, 17, 33]), $a([3, 26, 32, 1, 9, 17]), $a([3, 32, 38, 21, 29, 37]), $a([3, 38, 44, 15, 31, 47]), $a([3, 44, 50, 1, 25, 49]), $a([4, 4, 8, 47, 19, 43]), $a([4, 6, 12, 1, 1, 1]), $a([4, 8, 14, 7, 7, 7]), $a([4, 10, 16, 15, 15, 15]), $a([4, 12, 18, 25, 25, 25]), $a([4, 15, 21, 37, 37, 37]), $a([4, 20, 26, 1, 17, 33]), $a([4, 26, 32, 1, 9, 17]), $a([4, 32, 38, 21, 29, 37]), $a([4, 38, 44, 15, 31, 47]), $a([4, 44, 50, 1, 25, 49])]); //#18502
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_micropdf417.$ctx[id] = $_[id]); //#18502
        bwipp_micropdf417.__18503__ = 1; //#18502
        $_ = Object.getPrototypeOf($_); //#18502
    } //#18502
    $k[$j++] = 'metrics'; //#18505
    if ($_.cca) { //#18505
        $k[$j++] = $_.ccametrics; //#18505
    } else { //#18505
        $k[$j++] = $_.nonccametrics; //#18505
    } //#18505
    var _G1 = $k[--$j]; //#18505
    $_[$k[--$j]] = _G1; //#18505
    $_.urows = $_.rows; //#18508
    $_.ucols = $_.columns; //#18509
    $forall($_.metrics, function() { //#18524
        $_.m = $k[--$j]; //#18511
        $_.c = $get($_.m, 0); //#18512
        $_.r = $get($_.m, 1); //#18513
        $_.k = $get($_.m, 2); //#18514
        $_.rapl = $get($_.m, 3); //#18515
        $_.rapc = $get($_.m, 4); //#18516
        $_.rapr = $get($_.m, 5); //#18517
        $_.ncws = $f(($_.r * $_.c) - $_.k); //#18518
        $_.okay = true; //#18519
        if ($_.datcws.length > $_.ncws) { //#18520
            $_.okay = false; //#18520
        } //#18520
        if (($_.urows != 0) && ($_.urows != $_.r)) { //#18521
            $_.okay = false; //#18521
        } //#18521
        if (($_.ucols != 0) && ($_.ucols != $_.c)) { //#18522
            $_.okay = false; //#18522
        } //#18522
        if ($_.okay) { //#18523
            return true; //#18523
        } //#18523
    }); //#18523
    if (!$_.okay) { //#18528
        $k[$j++] = 'bwipp.micropdf417noValidSymbol#18527'; //#18527
        $k[$j++] = "Maximum length exceeded or invalid size"; //#18527
        bwipp_raiseerror(); //#18527
    } //#18527
    $_.m = $_.datcws.length; //#18531
    $_.n = $f(($_.c * $_.r) - $_.k); //#18532
    $_.cws = $a($f(($_.c * $_.r) + 1)); //#18533
    $puti($_.cws, 0, $_.datcws); //#18534
    $k[$j++] = $_.cws; //#18535
    $k[$j++] = $_.m; //#18535
    $k[$j++] = Infinity; //#18535
    for (var _Gj = 0, _Gk = $f($_.n - $_.m); _Gj < _Gk; _Gj++) { //#18535
        $k[$j++] = 900; //#18535
    } //#18535
    var _Gl = $a(); //#18535
    var _Gm = $k[--$j]; //#18535
    $puti($k[--$j], _Gm, _Gl); //#18535
    $k[$j++] = $_.cws; //#18536
    $k[$j++] = $_.n; //#18536
    $k[$j++] = Infinity; //#18536
    for (var _Gr = 0, _Gs = $_.k; _Gr < _Gs; _Gr++) { //#18536
        $k[$j++] = 0; //#18536
    } //#18536
    $k[$j++] = 0; //#18536
    var _Gt = $a(); //#18536
    var _Gu = $k[--$j]; //#18536
    $puti($k[--$j], _Gu, _Gt); //#18536
    if (!bwipp_micropdf417.__18543__) { //#18543
        $_ = Object.create($_); //#18543
        $k[$j++] = Infinity; //#18540
        $k[$j++] = 1; //#18540
        for (var _Gw = 0, _Gx = 928; _Gw < _Gx; _Gw++) { //#18540
            var _Gy = $k[--$j]; //#18540
            $k[$j++] = _Gy; //#18540
            $k[$j++] = (_Gy * 3) % 929; //#18540
        } //#18540
        $_.rsalog = $a(); //#18540
        $_.rslog = $a(929); //#18541
        for (var _H1 = 1; _H1 <= 928; _H1 += 1) { //#18542
            $put($_.rslog, $get($_.rsalog, _H1), _H1); //#18542
        } //#18542
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_micropdf417.$ctx[id] = $_[id]); //#18542
        bwipp_micropdf417.__18543__ = 1; //#18542
        $_ = Object.getPrototypeOf($_); //#18542
    } //#18542
    $_.rsprod = function() {
        var _H6 = $k[--$j]; //#18547
        var _H7 = $k[--$j]; //#18547
        $k[$j++] = _H7; //#18551
        $k[$j++] = _H6; //#18551
        if ((_H6 != 0) && (_H7 != 0)) { //#18550
            var _HA = $get($_.rslog, $k[--$j]); //#18548
            var _HF = $get($_.rsalog, $f(_HA + $get($_.rslog, $k[--$j])) % 928); //#18548
            $k[$j++] = _HF; //#18548
        } else { //#18550
            $j -= 2; //#18550
            $k[$j++] = 0; //#18550
        } //#18550
    }; //#18550
    $k[$j++] = Infinity; //#18555
    $k[$j++] = 1; //#18555
    for (var _HH = 0, _HI = $_.k; _HH < _HI; _HH++) { //#18555
        $k[$j++] = 0; //#18555
    } //#18555
    $_.coeffs = $a(); //#18555
    for (var _HM = 1, _HL = $_.k; _HM <= _HL; _HM += 1) { //#18564
        $_.i = _HM; //#18557
        $put($_.coeffs, $_.i, $get($_.coeffs, $_.i - 1)); //#18558
        for (var _HT = $_.i - 1; _HT >= 1; _HT -= 1) { //#18562
            $_.j = _HT; //#18560
            $k[$j++] = $_.coeffs; //#18561
            $k[$j++] = $_.j; //#18561
            $k[$j++] = $get($_.coeffs, $_.j - 1); //#18561
            $k[$j++] = $get($_.coeffs, $_.j); //#18561
            $k[$j++] = $get($_.rsalog, $_.i); //#18561
            $_.rsprod(); //#18561
            var _Hf = $k[--$j]; //#18561
            var _Hg = $k[--$j]; //#18561
            var _Hh = $k[--$j]; //#18561
            $put($k[--$j], _Hh, $f(_Hg + _Hf) % 929); //#18561
        } //#18561
        $k[$j++] = $_.coeffs; //#18563
        $k[$j++] = 0; //#18563
        $k[$j++] = $get($_.coeffs, 0); //#18563
        $k[$j++] = $get($_.rsalog, $_.i); //#18563
        $_.rsprod(); //#18563
        var _Hp = $k[--$j]; //#18563
        var _Hq = $k[--$j]; //#18563
        $put($k[--$j], _Hq, _Hp); //#18563
    } //#18563
    $_.coeffs = $geti($_.coeffs, 0, $_.coeffs.length - 1); //#18565
    for (var _Hw = $_.coeffs.length - 1; _Hw >= 0; _Hw -= 2) { //#18566
        var _Hx = $_.coeffs; //#18566
        $put(_Hx, _Hw, $f(929 - $get(_Hx, _Hw))); //#18566
    } //#18566
    for (var _I1 = 0, _I0 = $f($_.n - 1); _I1 <= _I0; _I1 += 1) { //#18575
        $_.t = $f($get($_.cws, _I1) + $get($_.cws, $_.n)) % 929; //#18570
        for (var _I9 = 0, _I8 = $f($_.k - 1); _I9 <= _I8; _I9 += 1) { //#18574
            $_.j = _I9; //#18572
            $put($_.cws, $f($_.n + $_.j), ($f($get($_.cws, $f($f($_.n + $_.j) + 1)) + ($f(929 - (($_.t * $get($_.coeffs, $f($f($_.k - $_.j) - 1))) % 929))))) % 929); //#18573
        } //#18573
    } //#18573
    for (var _IQ = $_.n, _IP = $f($_.n + $_.k); _IQ <= _IP; _IQ += 1) { //#18576
        $put($_.cws, _IQ, $f(929 - $get($_.cws, _IQ)) % 929); //#18576
    } //#18576
    $_.cws = $geti($_.cws, 0, $_.cws.length - 1); //#18579
    var _IY = $get($_.options, 'debugcws') !== undefined; //#18581
    if (_IY) { //#18581
        $k[$j++] = 'bwipp.debugcws#18581'; //#18581
        $k[$j++] = $_.cws; //#18581
        bwipp_raiseerror(); //#18581
    } //#18581
    if (!bwipp_micropdf417.__18840__) { //#18840
        $_ = Object.create($_); //#18840
        $_.clusters = $a([$a([120256, 125680, 128380, 120032, 125560, 128318, 108736, 119920, 108640, 86080, 108592, 86048, 110016, 120560, 125820, 109792, 120440, 125758, 88256, 109680, 88160, 89536, 110320, 120700, 89312, 110200, 120638, 89200, 110140, 89840, 110460, 89720, 110398, 89980, 128506, 119520, 125304, 128190, 107712, 119408, 125244, 107616, 119352, 84032, 107568, 119324, 84000, 107544, 83984, 108256, 119672, 125374, 85184, 108144, 119612, 85088, 108088, 119582, 85040, 108060, 85728, 108408, 119742, 85616, 108348, 85560, 108318, 85880, 108478, 85820, 85790, 107200, 119152, 125116, 107104, 119096, 125086, 83008, 107056, 119068, 82976, 107032, 82960, 82952, 83648, 107376, 119228, 83552, 107320, 119198, 83504, 107292, 83480, 83468, 83824, 107452, 83768, 107422, 83740, 83900, 106848, 118968, 125022, 82496, 106800, 118940, 82464, 106776, 118926, 82448, 106764, 82440, 106758, 82784, 106936, 119006, 82736, 106908, 82712, 106894, 82700, 82694, 106974, 82830, 82240, 106672, 118876, 82208, 106648, 118862, 82192, 106636, 82184, 106630, 82180, 82352, 82328, 82316, 82080, 118830, 106572, 106566, 82050, 117472, 124280, 127678, 103616, 117360, 124220, 103520, 117304, 124190, 75840, 103472, 75808, 104160, 117624, 124350, 76992, 104048, 117564, 76896, 103992, 76848, 76824, 77536, 104312, 117694, 77424, 104252, 77368, 77340, 77688, 104382, 77628, 77758, 121536, 126320, 128700, 121440, 126264, 128670, 111680, 121392, 126236, 111648, 121368, 126222, 111632, 121356, 103104, 117104, 124092, 112320, 103008, 117048, 124062, 112224, 121656, 126366, 93248, 74784, 102936, 117006, 93216, 112152, 93200, 75456, 103280, 117180, 93888, 75360, 103224, 117150, 93792, 112440, 121758, 93744, 75288, 93720, 75632, 103356, 94064, 75576, 103326, 94008, 112542, 93980, 75708, 94140, 75678, 94110, 121184, 126136, 128606, 111168, 121136, 126108, 111136, 121112, 126094, 111120, 121100, 111112, 111108, 102752, 116920, 123998, 111456, 102704, 116892, 91712, 74272, 121244, 116878, 91680, 74256, 102668, 91664, 111372, 102662, 74244, 74592, 102840, 116958, 92000, 74544, 102812, 91952, 111516, 102798, 91928, 74508, 74502, 74680, 102878, 92088, 74652, 92060, 74638, 92046, 92126, 110912, 121008, 126044, 110880, 120984, 126030, 110864, 120972, 110856, 120966, 110852, 110850, 74048, 102576, 116828, 90944, 74016, 102552, 116814, 90912, 111000, 121038, 90896, 73992, 102534, 90888, 110982, 90884, 74160, 102620, 91056, 74136, 102606, 91032, 111054, 91020, 74118, 91014, 91100, 91086, 110752, 120920, 125998, 110736, 120908, 110728, 120902, 110724, 110722, 73888, 102488, 116782, 90528, 73872, 102476, 90512, 110796, 102470, 90504, 73860, 90500, 73858, 73944, 90584, 90572, 90566, 120876, 120870, 110658, 102444, 73800, 90312, 90308, 90306, 101056, 116080, 123580, 100960, 116024, 70720, 100912, 115996, 70688, 100888, 70672, 70664, 71360, 101232, 116156, 71264, 101176, 116126, 71216, 101148, 71192, 71180, 71536, 101308, 71480, 101278, 71452, 71612, 71582, 118112, 124600, 127838, 105024, 118064, 124572, 104992, 118040, 124558, 104976, 118028, 104968, 118022, 100704, 115896, 123486, 105312, 100656, 115868, 79424, 70176, 118172, 115854, 79392, 105240, 100620, 79376, 70152, 79368, 70496, 100792, 115934, 79712, 70448, 118238, 79664, 105372, 100750, 79640, 70412, 79628, 70584, 100830, 79800, 70556, 79772, 70542, 70622, 79838, 122176, 126640, 128860, 122144, 126616, 128846, 122128, 126604, 122120, 126598, 122116, 104768, 117936, 124508, 113472, 104736, 126684, 124494, 113440, 122264, 126670, 113424, 104712, 117894, 113416, 122246, 104706, 69952, 100528, 115804, 78656, 69920, 100504, 115790, 96064, 78624, 104856, 117966, 96032, 113560, 122318, 100486, 96016, 78600, 104838, 96008, 69890, 70064, 100572, 78768, 70040, 100558, 96176, 78744, 104910, 96152, 113614, 70022, 78726, 70108, 78812, 70094, 96220, 78798, 122016, 126552, 128814, 122000, 126540, 121992, 126534, 121988, 121986, 104608, 117848, 124462, 113056, 104592, 126574, 113040, 122060, 117830, 113032, 104580, 113028, 104578, 113026, 69792, 100440, 115758, 78240, 69776, 100428, 95136, 78224, 104652, 100422, 95120, 113100, 69764, 95112, 78212, 69762, 78210, 69848, 100462, 78296, 69836, 95192, 78284, 69830, 95180, 78278, 69870, 95214, 121936, 126508, 121928, 126502, 121924, 121922, 104528, 117804, 112848, 104520, 117798, 112840, 121958, 112836, 104514, 112834, 69712, 100396, 78032, 69704, 100390, 94672, 78024, 104550, 94664, 112870, 69698, 94660, 78018, 94658, 78060, 94700, 94694, 126486, 121890, 117782, 104484, 104482, 69672, 77928, 94440, 69666, 77922, 99680, 68160, 99632, 68128, 99608, 115342, 68112, 99596, 68104, 99590, 68448, 99768, 115422, 68400, 99740, 68376, 99726, 68364, 68358, 68536, 99806, 68508, 68494, 68574, 101696, 116400, 123740, 101664, 116376, 101648, 116364, 101640, 116358, 101636, 67904, 99504, 115292, 72512, 67872, 116444, 115278, 72480, 101784, 116430, 72464, 67848, 99462, 72456, 101766, 67842, 68016, 99548, 72624, 67992, 99534, 72600, 101838, 72588, 67974, 68060, 72668, 68046, 72654, 118432, 124760, 127918, 118416, 124748, 118408, 124742, 118404, 118402, 101536, 116312, 105888, 101520, 116300, 105872, 118476, 116294, 105864, 101508, 105860, 101506, 105858, 67744, 99416, 72096, 67728, 116334, 80800, 72080, 101580, 99398, 80784, 105932, 67716, 80776, 72068, 67714, 72066, 67800, 99438, 72152, 67788, 80856, 72140, 67782, 80844, 72134, 67822, 72174, 80878, 126800, 128940, 126792, 128934, 126788, 126786, 118352, 124716, 122576, 126828, 124710, 122568, 126822, 122564, 118338, 122562, 101456, 116268, 105680, 101448, 116262, 114128, 105672, 118374, 114120, 122598, 101442, 114116, 105666, 114114, 67664, 99372, 71888, 67656, 99366, 80336, 71880, 101478, 97232, 80328, 105702, 67650, 97224, 114150, 71874, 97220, 67692, 71916, 67686, 80364, 71910, 97260, 80358, 97254, 126760, 128918, 126756, 126754, 118312, 124694, 122472, 126774, 122468, 118306, 122466, 101416, 116246, 105576, 101412, 113896, 105572, 101410, 113892, 105570, 113890, 67624, 99350, 71784, 101430, 80104, 71780, 67618, 96744, 80100, 71778, 96740, 80098, 96738, 71798, 96758, 126738, 122420, 122418, 105524, 113780, 113778, 71732, 79988, 96500, 96498, 66880, 66848, 98968, 66832, 66824, 66820, 66992, 66968, 66956, 66950, 67036, 67022, 100000, 99984, 115532, 99976, 115526, 99972, 99970, 66720, 98904, 69024, 100056, 98892, 69008, 100044, 69000, 100038, 68996, 66690, 68994, 66776, 98926, 69080, 100078, 69068, 66758, 69062, 66798, 69102, 116560, 116552, 116548, 116546, 99920, 102096, 116588, 115494, 102088, 116582, 102084, 99906, 102082, 66640, 68816, 66632, 98854, 73168, 68808, 66628, 73160, 68804, 66626, 73156, 68802, 66668, 68844, 66662, 73196, 68838, 73190, 124840, 124836, 124834, 116520, 118632, 124854, 118628, 116514, 118626, 99880, 115478, 101992, 116534, 106216, 101988, 99874, 106212, 101986, 106210, 66600, 98838, 68712, 99894, 72936, 68708, 66594, 81384, 72932, 68706, 81380, 72930, 66614, 68726, 72950, 81398, 128980, 128978, 124820, 126900, 124818, 126898, 116500, 118580, 116498, 122740, 118578, 122738, 99860, 101940, 99858, 106100, 101938, 114420]), $a([128352, 129720, 125504, 128304, 129692, 125472, 128280, 129678, 125456, 128268, 125448, 128262, 125444, 125792, 128440, 129758, 120384, 125744, 128412, 120352, 125720, 128398, 120336, 125708, 120328, 125702, 120324, 120672, 125880, 128478, 110144, 120624, 125852, 110112, 120600, 125838, 110096, 120588, 110088, 120582, 110084, 110432, 120760, 125918, 89664, 110384, 120732, 89632, 110360, 120718, 89616, 110348, 89608, 110342, 89952, 110520, 120798, 89904, 110492, 89880, 110478, 89868, 90040, 110558, 90012, 89998, 125248, 128176, 129628, 125216, 128152, 129614, 125200, 128140, 125192, 128134, 125188, 125186, 119616, 125360, 128220, 119584, 125336, 128206, 119568, 125324, 119560, 125318, 119556, 119554, 108352, 119728, 125404, 108320, 119704, 125390, 108304, 119692, 108296, 119686, 108292, 108290, 85824, 108464, 119772, 85792, 108440, 119758, 85776, 108428, 85768, 108422, 85764, 85936, 108508, 85912, 108494, 85900, 85894, 85980, 85966, 125088, 128088, 129582, 125072, 128076, 125064, 128070, 125060, 125058, 119200, 125144, 128110, 119184, 125132, 119176, 125126, 119172, 119170, 107424, 119256, 125166, 107408, 119244, 107400, 119238, 107396, 107394, 83872, 107480, 119278, 83856, 107468, 83848, 107462, 83844, 83842, 83928, 107502, 83916, 83910, 83950, 125008, 128044, 125000, 128038, 124996, 124994, 118992, 125036, 118984, 125030, 118980, 118978, 106960, 119020, 106952, 119014, 106948, 106946, 82896, 106988, 82888, 106982, 82884, 82882, 82924, 82918, 124968, 128022, 124964, 124962, 118888, 124982, 118884, 118882, 106728, 118902, 106724, 106722, 82408, 106742, 82404, 82402, 124948, 124946, 118836, 118834, 106612, 106610, 124224, 127664, 129372, 124192, 127640, 129358, 124176, 127628, 124168, 127622, 124164, 124162, 117568, 124336, 127708, 117536, 124312, 127694, 117520, 124300, 117512, 124294, 117508, 117506, 104256, 117680, 124380, 104224, 117656, 124366, 104208, 117644, 104200, 117638, 104196, 104194, 77632, 104368, 117724, 77600, 104344, 117710, 77584, 104332, 77576, 104326, 77572, 77744, 104412, 77720, 104398, 77708, 77702, 77788, 77774, 128672, 129880, 93168, 128656, 129868, 92664, 128648, 129862, 92412, 128644, 128642, 124064, 127576, 129326, 126368, 124048, 129902, 126352, 128716, 127558, 126344, 124036, 126340, 124034, 126338, 117152, 124120, 127598, 121760, 117136, 124108, 121744, 126412, 124102, 121736, 117124, 121732, 117122, 121730, 103328, 117208, 124142, 112544, 103312, 117196, 112528, 121804, 117190, 112520, 103300, 112516, 103298, 112514, 75680, 103384, 117230, 94112, 75664, 103372, 94096, 112588, 103366, 94088, 75652, 94084, 75650, 75736, 103406, 94168, 75724, 94156, 75718, 94150, 75758, 128592, 129836, 91640, 128584, 129830, 91388, 128580, 91262, 128578, 123984, 127532, 126160, 123976, 127526, 126152, 128614, 126148, 123970, 126146, 116944, 124012, 121296, 116936, 124006, 121288, 126182, 121284, 116930, 121282, 102864, 116972, 111568, 102856, 116966, 111560, 121318, 111556, 102850, 111554, 74704, 102892, 92112, 74696, 102886, 92104, 111590, 92100, 74690, 92098, 74732, 92140, 74726, 92134, 128552, 129814, 90876, 128548, 90750, 128546, 123944, 127510, 126056, 128566, 126052, 123938, 126050, 116840, 123958, 121064, 116836, 121060, 116834, 121058, 102632, 116854, 111080, 121078, 111076, 102626, 111074, 74216, 102646, 91112, 74212, 91108, 74210, 91106, 74230, 91126, 128532, 90494, 128530, 123924, 126004, 123922, 126002, 116788, 120948, 116786, 120946, 102516, 110836, 102514, 110834, 73972, 90612, 73970, 90610, 128522, 123914, 125978, 116762, 120890, 102458, 110714, 123552, 127320, 129198, 123536, 127308, 123528, 127302, 123524, 123522, 116128, 123608, 127342, 116112, 123596, 116104, 123590, 116100, 116098, 101280, 116184, 123630, 101264, 116172, 101256, 116166, 101252, 101250, 71584, 101336, 116206, 71568, 101324, 71560, 101318, 71556, 71554, 71640, 101358, 71628, 71622, 71662, 127824, 129452, 79352, 127816, 129446, 79100, 127812, 78974, 127810, 123472, 127276, 124624, 123464, 127270, 124616, 127846, 124612, 123458, 124610, 115920, 123500, 118224, 115912, 123494, 118216, 124646, 118212, 115906, 118210, 100816, 115948, 105424, 100808, 115942, 105416, 118246, 105412, 100802, 105410, 70608, 100844, 79824, 70600, 100838, 79816, 105446, 79812, 70594, 79810, 70636, 79852, 70630, 79846, 129960, 95728, 113404, 129956, 95480, 113278, 129954, 95356, 95294, 127784, 129430, 78588, 128872, 129974, 95996, 78462, 128868, 127778, 95870, 128866, 123432, 127254, 124520, 123428, 126696, 128886, 123426, 126692, 124514, 126690, 115816, 123446, 117992, 115812, 122344, 117988, 115810, 122340, 117986, 122338, 100584, 115830, 104936, 100580, 113640, 104932, 100578, 113636, 104930, 113634, 70120, 100598, 78824, 70116, 96232, 78820, 70114, 96228, 78818, 96226, 70134, 78838, 129940, 94968, 113022, 129938, 94844, 94782, 127764, 78206, 128820, 127762, 95102, 128818, 123412, 124468, 123410, 126580, 124466, 126578, 115764, 117876, 115762, 122100, 117874, 122098, 100468, 104692, 100466, 113140, 104690, 113138, 69876, 78324, 69874, 95220, 78322, 95218, 129930, 94588, 94526, 127754, 128794, 123402, 124442, 126522, 115738, 117818, 121978, 100410, 104570, 112890, 69754, 78074, 94714, 94398, 123216, 127148, 123208, 127142, 123204, 123202, 115408, 123244, 115400, 123238, 115396, 115394, 99792, 115436, 99784, 115430, 99780, 99778, 68560, 99820, 68552, 99814, 68548, 68546, 68588, 68582, 127400, 129238, 72444, 127396, 72318, 127394, 123176, 127126, 123752, 123172, 123748, 123170, 123746, 115304, 123190, 116456, 115300, 116452, 115298, 116450, 99560, 115318, 101864, 99556, 101860, 99554, 101858, 68072, 99574, 72680, 68068, 72676, 68066, 72674, 68086, 72694, 129492, 80632, 105854, 129490, 80508, 80446, 127380, 72062, 127924, 127378, 80766, 127922, 123156, 123700, 123154, 124788, 123698, 124786, 115252, 116340, 115250, 118516, 116338, 118514, 99444, 101620, 99442, 105972, 101618, 105970, 67828, 72180, 67826, 80884, 72178, 80882, 97008, 114044, 96888, 113982, 96828, 96798, 129482, 80252, 130010, 97148, 80190, 97086, 127370, 127898, 128954, 123146, 123674, 124730, 126842, 115226, 116282, 118394, 122618, 99386, 101498, 105722, 114170, 67706, 71930, 80378, 96632, 113854, 96572, 96542, 80062, 96702, 96444, 96414, 96350, 123048, 123044, 123042, 115048, 123062, 115044, 115042, 99048, 115062, 99044, 99042, 67048, 99062, 67044, 67042, 67062, 127188, 68990, 127186, 123028, 123316, 123026, 123314, 114996, 115572, 114994, 115570, 98932, 100084, 98930, 100082, 66804, 69108, 66802, 69106, 129258, 73084, 73022, 127178, 127450, 123018, 123290, 123834, 114970, 115514, 116602, 98874, 99962, 102138, 66682, 68858, 73210, 81272, 106174, 81212, 81182, 72894, 81342, 97648, 114364, 97592, 114334, 97564, 97550, 81084, 97724, 81054, 97694, 97464, 114270, 97436, 97422, 80990, 97502, 97372, 97358, 97326, 114868, 114866, 98676, 98674, 66292, 66290, 123098, 114842, 115130, 98618, 99194, 66170, 67322, 69310, 73404, 73374, 81592, 106334, 81564, 81550, 73310, 81630, 97968, 114524, 97944, 114510, 97932, 97926, 81500, 98012, 81486, 97998, 97880, 114478, 97868, 97862, 81454, 97902, 97836, 97830, 69470, 73564, 73550, 81752, 106414, 81740, 81734, 73518, 81774, 81708, 81702]), $a([109536, 120312, 86976, 109040, 120060, 86496, 108792, 119934, 86256, 108668, 86136, 129744, 89056, 110072, 129736, 88560, 109820, 129732, 88312, 109694, 129730, 88188, 128464, 129772, 89592, 128456, 129766, 89340, 128452, 89214, 128450, 125904, 128492, 125896, 128486, 125892, 125890, 120784, 125932, 120776, 125926, 120772, 120770, 110544, 120812, 110536, 120806, 110532, 84928, 108016, 119548, 84448, 107768, 119422, 84208, 107644, 84088, 107582, 84028, 129640, 85488, 108284, 129636, 85240, 108158, 129634, 85116, 85054, 128232, 129654, 85756, 128228, 85630, 128226, 125416, 128246, 125412, 125410, 119784, 125430, 119780, 119778, 108520, 119798, 108516, 108514, 83424, 107256, 119166, 83184, 107132, 83064, 107070, 83004, 82974, 129588, 83704, 107390, 129586, 83580, 83518, 128116, 83838, 128114, 125172, 125170, 119284, 119282, 107508, 107506, 82672, 106876, 82552, 106814, 82492, 82462, 129562, 82812, 82750, 128058, 125050, 119034, 82296, 106686, 82236, 82206, 82366, 82108, 82078, 76736, 103920, 117500, 76256, 103672, 117374, 76016, 103548, 75896, 103486, 75836, 129384, 77296, 104188, 129380, 77048, 104062, 129378, 76924, 76862, 127720, 129398, 77564, 127716, 77438, 127714, 124392, 127734, 124388, 124386, 117736, 124406, 117732, 117730, 104424, 117750, 104420, 104418, 112096, 121592, 126334, 92608, 111856, 121468, 92384, 111736, 121406, 92272, 111676, 92216, 111646, 92188, 75232, 103160, 117118, 93664, 74992, 103036, 93424, 112252, 102974, 93304, 74812, 93244, 74782, 93214, 129332, 75512, 103294, 129908, 129330, 93944, 75388, 129906, 93820, 75326, 93758, 127604, 75646, 128756, 127602, 94078, 128754, 124148, 126452, 124146, 126450, 117236, 121844, 117234, 121842, 103412, 103410, 91584, 111344, 121212, 91360, 111224, 121150, 91248, 111164, 91192, 111134, 91164, 91150, 74480, 102780, 91888, 74360, 102718, 91768, 111422, 91708, 74270, 91678, 129306, 74620, 129850, 92028, 74558, 91966, 127546, 128634, 124026, 126202, 116986, 121338, 102906, 90848, 110968, 121022, 90736, 110908, 90680, 110878, 90652, 90638, 74104, 102590, 91000, 74044, 90940, 74014, 90910, 74174, 91070, 90480, 110780, 90424, 110750, 90396, 90382, 73916, 90556, 73886, 90526, 90296, 110686, 90268, 90254, 73822, 90334, 90204, 90190, 71136, 101112, 116094, 70896, 100988, 70776, 100926, 70716, 70686, 129204, 71416, 101246, 129202, 71292, 71230, 127348, 71550, 127346, 123636, 123634, 116212, 116210, 101364, 101362, 79296, 105200, 118140, 79072, 105080, 118078, 78960, 105020, 78904, 104990, 78876, 78862, 70384, 100732, 79600, 70264, 100670, 79480, 105278, 79420, 70174, 79390, 129178, 70524, 129466, 79740, 70462, 79678, 127290, 127866, 123514, 124666, 115962, 118266, 100858, 113376, 122232, 126654, 95424, 113264, 122172, 95328, 113208, 122142, 95280, 113180, 95256, 113166, 95244, 78560, 104824, 117950, 95968, 78448, 104764, 95856, 113468, 104734, 95800, 78364, 95772, 78350, 95758, 70008, 100542, 78712, 69948, 96120, 78652, 69918, 96060, 78622, 96030, 70078, 78782, 96190, 94912, 113008, 122044, 94816, 112952, 122014, 94768, 112924, 94744, 112910, 94732, 94726, 78192, 104636, 95088, 78136, 104606, 95032, 113054, 95004, 78094, 94990, 69820, 78268, 69790, 95164, 78238, 95134, 94560, 112824, 121950, 94512, 112796, 94488, 112782, 94476, 94470, 78008, 104542, 94648, 77980, 94620, 77966, 94606, 69726, 78046, 94686, 94384, 112732, 94360, 112718, 94348, 94342, 77916, 94428, 77902, 94414, 94296, 112686, 94284, 94278, 77870, 94318, 94252, 94246, 68336, 99708, 68216, 99646, 68156, 68126, 68476, 68414, 127162, 123258, 115450, 99834, 72416, 101752, 116414, 72304, 101692, 72248, 101662, 72220, 72206, 67960, 99518, 72568, 67900, 72508, 67870, 72478, 68030, 72638, 80576, 105840, 118460, 80480, 105784, 118430, 80432, 105756, 80408, 105742, 80396, 80390, 72048, 101564, 80752, 71992, 101534, 80696, 71964, 80668, 71950, 80654, 67772, 72124, 67742, 80828, 72094, 80798, 114016, 122552, 126814, 96832, 113968, 122524, 96800, 113944, 122510, 96784, 113932, 96776, 113926, 96772, 80224, 105656, 118366, 97120, 80176, 105628, 97072, 114076, 105614, 97048, 80140, 97036, 80134, 97030, 71864, 101470, 80312, 71836, 97208, 80284, 71822, 97180, 80270, 97166, 67678, 71902, 80350, 97246, 96576, 113840, 122460, 96544, 113816, 122446, 96528, 113804, 96520, 113798, 96516, 96514, 80048, 105564, 96688, 80024, 105550, 96664, 113870, 96652, 80006, 96646, 71772, 80092, 71758, 96732, 80078, 96718, 96416, 113752, 122414, 96400, 113740, 96392, 113734, 96388, 96386, 79960, 105518, 96472, 79948, 96460, 79942, 96454, 71726, 79982, 96494, 96336, 113708, 96328, 113702, 96324, 96322, 79916, 96364, 79910, 96358, 96296, 113686, 96292, 96290, 79894, 96310, 66936, 99006, 66876, 66846, 67006, 68976, 100028, 68920, 99998, 68892, 68878, 66748, 69052, 66718, 69022, 73056, 102072, 116574, 73008, 102044, 72984, 102030, 72972, 72966, 68792, 99934, 73144, 68764, 73116, 68750, 73102, 66654, 68830, 73182, 81216, 106160, 118620, 81184, 106136, 118606, 81168, 106124, 81160, 106118, 81156, 81154, 72880, 101980, 81328, 72856, 101966, 81304, 106190, 81292, 72838, 81286, 68700, 72924, 68686, 81372, 72910, 81358, 114336, 122712, 126894, 114320, 122700, 114312, 122694, 114308, 114306, 81056, 106072, 118574, 97696, 81040, 106060, 97680, 114380, 106054, 97672, 81028, 97668, 81026, 97666, 72792, 101934, 81112, 72780, 97752, 81100, 72774, 97740, 81094, 97734, 68654, 72814, 81134, 97774, 114256, 122668, 114248, 122662, 114244, 114242, 80976, 106028, 97488, 80968, 106022, 97480, 114278, 97476, 80962, 97474, 72748, 81004, 72742, 97516, 80998, 97510, 114216, 122646, 114212, 114210, 80936, 106006, 97384, 80932, 97380, 80930, 97378, 72726, 80950, 97398, 114196, 114194, 80916, 97332, 80914, 97330, 66236, 66206, 67256, 99166, 67228, 67214, 66142, 67294, 69296, 100188, 69272, 100174, 69260, 69254, 67164, 69340, 67150, 69326, 73376, 102232, 116654, 73360, 102220, 73352, 102214, 73348, 73346, 69208, 100142, 73432, 102254, 73420, 69190, 73414, 67118, 69230, 73454, 106320, 118700, 106312, 118694, 106308, 106306, 73296, 102188, 81616, 106348, 102182, 81608, 73284, 81604, 73282, 81602, 69164, 73324, 69158, 81644, 73318, 81638, 122792, 126934, 122788, 122786, 106280, 118678, 114536, 106276, 114532, 106274, 114530, 73256, 102166, 81512, 73252, 98024, 81508, 73250, 98020, 81506, 98018, 69142, 73270, 81526, 98038, 122772, 122770, 106260, 114484, 106258, 114482, 73236, 81460, 73234, 97908, 81458, 97906, 122762, 106250, 114458, 73226, 81434, 97850, 66396, 66382, 67416, 99246, 67404, 67398, 66350, 67438, 69456, 100268, 69448, 100262, 69444, 69442, 67372, 69484, 67366, 69478, 102312, 116694, 102308, 102306, 69416, 100246, 73576, 102326, 73572, 69410, 73570, 67350, 69430, 73590, 118740, 118738, 102292, 106420, 102290, 106418, 69396, 73524, 69394, 81780, 73522, 81778, 118730, 102282, 106394, 69386, 73498, 81722, 66476, 66470, 67496, 99286, 67492, 67490, 66454, 67510, 100308, 100306, 67476, 69556, 67474, 69554, 116714])]); //#18824
        $_.raps = $a([$a([802, 930, 946, 818, 882, 890, 826, 954, 922, 986, 970, 906, 778, 794, 786, 914, 978, 982, 980, 916, 948, 932, 934, 942, 940, 936, 808, 812, 814, 806, 822, 950, 918, 790, 788, 820, 884, 868, 870, 878, 876, 872, 840, 856, 860, 862, 846, 844, 836, 838, 834, 866]), $a([718, 590, 622, 558, 550, 566, 534, 530, 538, 570, 562, 546, 610, 626, 634, 762, 754, 758, 630, 628, 612, 614, 582, 578, 706, 738, 742, 740, 748, 620, 556, 552, 616, 744, 712, 716, 708, 710, 646, 654, 652, 668, 664, 696, 688, 656, 720, 592, 600, 604, 732, 734])]); //#18839
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_micropdf417.$ctx[id] = $_[id]); //#18839
        bwipp_micropdf417.__18840__ = 1; //#18839
        $_ = Object.getPrototypeOf($_); //#18839
    } //#18839
    $_.cwtobits = function() {
        var _Ik = $get($_.clusters, $k[--$j]); //#18844
        $_.v = $get(_Ik, $k[--$j]); //#18844
        $k[$j++] = Infinity; //#18845
        for (var _In = 0, _Io = 17; _In < _Io; _In++) { //#18845
            $k[$j++] = 0; //#18845
        } //#18845
        var _Ir = $cvrs($s(17), $_.v, 2); //#18845
        for (var _Is = 0, _It = _Ir.length; _Is < _It; _Is++) { //#18845
            $k[$j++] = $get(_Ir, _Is) - 48; //#18845
        } //#18845
        var _Iv = $a(); //#18845
        $k[$j++] = $geti(_Iv, _Iv.length - 17, 17); //#18846
    }; //#18846
    $_.raptobits = function() {
        var _Iz = $get($_.raps, $k[--$j]); //#18851
        $_.v = $get(_Iz, $k[--$j]); //#18851
        $k[$j++] = Infinity; //#18852
        for (var _J2 = 0, _J3 = 10; _J2 < _J3; _J2++) { //#18852
            $k[$j++] = 0; //#18852
        } //#18852
        var _J6 = $cvrs($s(10), $_.v, 2); //#18852
        for (var _J7 = 0, _J8 = _J6.length; _J7 < _J8; _J7++) { //#18852
            $k[$j++] = $get(_J6, _J7) - 48; //#18852
        } //#18852
        var _JA = $a(); //#18852
        $k[$j++] = $geti(_JA, _JA.length - 10, 10); //#18853
    }; //#18853
    $_.rwid = $get($a([38, 55, 82, 99]), $f($_.c - 1)); //#18857
    if (($_.c == 3) && $_.cca) { //#18858
        $_.rwid = 72; //#18858
    } //#18858
    $_.pixs = $a(($_.rwid * $_.r) * $_.rowmult); //#18859
    for (var _JN = 0, _JM = $f($_.r - 1); _JN <= _JM; _JN += 1) { //#18901
        $_.i = _JN; //#18862
        $_.clst = ($f($f($_.i + $_.rapl) - 1)) % 3; //#18863
        $k[$j++] = Infinity; //#18864
        if ($_.c == 1) { //#18869
            $k[$j++] = ($f($f($_.i + $_.rapl) - 1)) % 52; //#18866
            $k[$j++] = 0; //#18866
            $_.raptobits(); //#18866
            $aload($k[--$j]); //#18866
            $k[$j++] = $get($_.cws, $_.i); //#18867
            $k[$j++] = $_.clst; //#18867
            $_.cwtobits(); //#18867
            $aload($k[--$j]); //#18867
            $k[$j++] = ($f($f($_.i + $_.rapr) - 1)) % 52; //#18868
            $k[$j++] = 0; //#18868
            $_.raptobits(); //#18868
            $aload($k[--$j]); //#18868
        } //#18868
        if ($_.c == 2) { //#18875
            $k[$j++] = ($f($f($_.i + $_.rapl) - 1)) % 52; //#18871
            $k[$j++] = 0; //#18871
            $_.raptobits(); //#18871
            $aload($k[--$j]); //#18871
            $k[$j++] = $get($_.cws, $_.i * 2); //#18872
            $k[$j++] = $_.clst; //#18872
            $_.cwtobits(); //#18872
            $aload($k[--$j]); //#18872
            $k[$j++] = $get($_.cws, ($_.i * 2) + 1); //#18873
            $k[$j++] = $_.clst; //#18873
            $_.cwtobits(); //#18873
            $aload($k[--$j]); //#18873
            $k[$j++] = ($f($f($_.i + $_.rapr) - 1)) % 52; //#18874
            $k[$j++] = 0; //#18874
            $_.raptobits(); //#18874
            $aload($k[--$j]); //#18874
        } //#18874
        if ($_.c == 3) { //#18885
            if (!$_.cca) { //#18879
                $k[$j++] = ($f($f($_.i + $_.rapl) - 1)) % 52; //#18878
                $k[$j++] = 0; //#18878
                $_.raptobits(); //#18878
                $aload($k[--$j]); //#18878
            } //#18878
            $k[$j++] = $get($_.cws, $_.i * 3); //#18880
            $k[$j++] = $_.clst; //#18880
            $_.cwtobits(); //#18880
            $aload($k[--$j]); //#18880
            $k[$j++] = ($f($f($_.i + $_.rapc) - 1)) % 52; //#18881
            $k[$j++] = 1; //#18881
            $_.raptobits(); //#18881
            $aload($k[--$j]); //#18881
            $k[$j++] = $get($_.cws, ($_.i * 3) + 1); //#18882
            $k[$j++] = $_.clst; //#18882
            $_.cwtobits(); //#18882
            $aload($k[--$j]); //#18882
            $k[$j++] = $get($_.cws, ($_.i * 3) + 2); //#18883
            $k[$j++] = $_.clst; //#18883
            $_.cwtobits(); //#18883
            $aload($k[--$j]); //#18883
            $k[$j++] = ($f($f($_.i + $_.rapr) - 1)) % 52; //#18884
            $k[$j++] = 0; //#18884
            $_.raptobits(); //#18884
            $aload($k[--$j]); //#18884
        } //#18884
        if ($_.c == 4) { //#18894
            $k[$j++] = ($f($f($_.i + $_.rapl) - 1)) % 52; //#18887
            $k[$j++] = 0; //#18887
            $_.raptobits(); //#18887
            $aload($k[--$j]); //#18887
            $k[$j++] = $get($_.cws, $_.i * 4); //#18888
            $k[$j++] = $_.clst; //#18888
            $_.cwtobits(); //#18888
            $aload($k[--$j]); //#18888
            $k[$j++] = $get($_.cws, ($_.i * 4) + 1); //#18889
            $k[$j++] = $_.clst; //#18889
            $_.cwtobits(); //#18889
            $aload($k[--$j]); //#18889
            $k[$j++] = ($f($f($_.i + $_.rapc) - 1)) % 52; //#18890
            $k[$j++] = 1; //#18890
            $_.raptobits(); //#18890
            $aload($k[--$j]); //#18890
            $k[$j++] = $get($_.cws, ($_.i * 4) + 2); //#18891
            $k[$j++] = $_.clst; //#18891
            $_.cwtobits(); //#18891
            $aload($k[--$j]); //#18891
            $k[$j++] = $get($_.cws, ($_.i * 4) + 3); //#18892
            $k[$j++] = $_.clst; //#18892
            $_.cwtobits(); //#18892
            $aload($k[--$j]); //#18892
            $k[$j++] = ($f($f($_.i + $_.rapr) - 1)) % 52; //#18893
            $k[$j++] = 0; //#18893
            $_.raptobits(); //#18893
            $aload($k[--$j]); //#18893
        } //#18893
        $k[$j++] = 1; //#18895
        var _Kn = $a(); //#18895
        $k[$j++] = _Kn; //#18899
        for (var _Kq = 0, _Kp = $_.rowmult - 1; _Kq <= _Kp; _Kq += 1) { //#18899
            var _Kv = $k[--$j]; //#18898
            $puti($_.pixs, (_Kq + ($_.i * $_.rowmult)) * $_.rwid, _Kv); //#18898
            $k[$j++] = _Kv; //#18898
        } //#18898
        $j--; //#18900
    } //#18900
    var _L4 = new Map([
        ["ren", 'renmatrix'],
        ["pixs", $_.pixs],
        ["pixx", $_.rwid],
        ["pixy", $_.r * $_.rowmult],
        ["height", ($_.r * $_.rowmult) / 72],
        ["width", $_.rwid / 72],
        ["borderleft", 1],
        ["borderright", 1],
        ["bordertop", 1],
        ["borderbottom", 1],
        ["opt", $_.options]
    ]); //#18915
    $k[$j++] = _L4; //#18918
    if (!$_.dontdraw) { //#18918
        bwipp_renmatrix(); //#18918
    } //#18918
    $_ = Object.getPrototypeOf($_); //#18920
    $_ = Object.getPrototypeOf($_); //#18922
} //bwipp_micropdf417
function bwipp_datamatrix() {
    $_ = Object.create($_); //#18953
    $_.dontdraw = false; //#18956
    $_.columns = 0; //#18957
    $_.rows = 0; //#18958
    $_.format = "unset"; //#18959
    $_.version = "unset"; //#18960
    $_.parse = false; //#18961
    $_.parsefnc = false; //#18962
    $_.c40headerlength = -1; //#18963
    $_.raw = false; //#18964
    $_.dmre = false; //#18965
    $k[$j++] = $_; //#18967
    bwipp_processoptions(); //#18967
    $_.options = $k[--$j]; //#18967
    $_.barcode = $k[--$j]; //#18968
    if ($eq($_.barcode, "")) { //#18972
        $k[$j++] = 'bwipp.datamatrixEmptyData#18971'; //#18971
        $k[$j++] = "The data must not be empty"; //#18971
        bwipp_raiseerror(); //#18971
    } //#18971
    if ($ne($_.version, "unset") && (($_.rows != 0) || ($_.columns != 0))) { //#18976
        $k[$j++] = 'bwipp.datamatrixVersionRowsCols#18975'; //#18975
        $k[$j++] = "rows and columns must not be given if version is specified"; //#18975
        bwipp_raiseerror(); //#18975
    } //#18975
    if ($ne($_.version, "unset")) { //#19000
        $search($_.version, "x"); //#18980
        if ($k[--$j]) { //#18996
            var _9 = $k[--$j]; //#18981
            var _A = $k[--$j]; //#18981
            $k[$j++] = _9; //#18981
            $k[$j++] = _A; //#18981
            $j--; //#18981
            var _B = $k[--$j]; //#18982
            var _C = $k[--$j]; //#18982
            $k[$j++] = _C; //#18982
            $k[$j++] = _B; //#18982
            $k[$j++] = _C; //#18982
            $k[$j++] = _B; //#18982
            $astore($a(2)); //#18982
            $forall($k[--$j], function() { //#18991
                var _F = $k[--$j]; //#18984
                $k[$j++] = _F; //#18984
                $k[$j++] = true; //#18984
                if (_F.length == 0) { //#18984
                    $j--; //#18984
                    $k[$j++] = false; //#18984
                } //#18984
                var _G = $k[--$j]; //#18985
                var _H = $k[--$j]; //#18985
                $k[$j++] = _G; //#18987
                $forall(_H, function() { //#18987
                    var _I = $k[--$j]; //#18986
                    if ((_I < 48) || (_I > 57)) { //#18986
                        $j--; //#18986
                        $k[$j++] = false; //#18986
                    } //#18986
                }); //#18986
                if ($nt($k[--$j])) { //#18990
                    $k[$j++] = 'bwipp.datamatrixVersionBadRowOrColumn#18989'; //#18989
                    $k[$j++] = "version must be formatted as RxC"; //#18989
                    bwipp_raiseerror(); //#18989
                } //#18989
            }); //#18989
            $_.rows = $cvi($k[--$j]); //#18992
            $_.columns = $cvi($k[--$j]); //#18993
            $k[$j++] = 'format'; //#18994
            if ($_.rows == $_.columns) { //#18994
                $k[$j++] = "square"; //#18994
            } else { //#18994
                $k[$j++] = "rectangle"; //#18994
            } //#18994
            var _O = $k[--$j]; //#18994
            $_[$k[--$j]] = _O; //#18994
        } else { //#18996
            $j--; //#18996
            $k[$j++] = 'bwipp.datamatrixVersionFormat#18996'; //#18996
            $k[$j++] = "version must be formatted as RxC"; //#18996
            bwipp_raiseerror(); //#18996
        } //#18996
    } else { //#19000
        if ($eq($_.format, "unset")) { //#19001
            $k[$j++] = 'format'; //#19000
            if ($_.dmre) { //#19000
                $k[$j++] = "rectangle"; //#19000
            } else { //#19000
                $k[$j++] = "square"; //#19000
            } //#19000
            var _S = $k[--$j]; //#19000
            $_[$k[--$j]] = _S; //#19000
        } //#19000
    } //#19000
    if ($ne($_.format, "square") && $ne($_.format, "rectangle")) { //#19006
        $k[$j++] = 'bwipp.datamatrixInvalidFormat#19005'; //#19005
        $k[$j++] = "The format must be either square or rectangle"; //#19005
        bwipp_raiseerror(); //#19005
    } //#19005
    bwipp_loadctx(bwipp_datamatrix); //#19008
    if (!bwipp_datamatrix.__19065__) { //#19065
        $_ = Object.create($_); //#19065
        var _19 = $a([20, 36, 1, 2, 28, 1, 1]); //#19055
        $_.metrics = $a([$a([10, 10, 1, 1, 5, 1, 0]), $a([12, 12, 1, 1, 7, 1, 0]), $a([14, 14, 1, 1, 10, 1, 0]), $a([16, 16, 1, 1, 12, 1, 0]), $a([18, 18, 1, 1, 14, 1, 0]), $a([20, 20, 1, 1, 18, 1, 0]), $a([22, 22, 1, 1, 20, 1, 0]), $a([24, 24, 1, 1, 24, 1, 0]), $a([26, 26, 1, 1, 28, 1, 0]), $a([32, 32, 2, 2, 36, 1, 0]), $a([36, 36, 2, 2, 42, 1, 0]), $a([40, 40, 2, 2, 48, 1, 0]), $a([44, 44, 2, 2, 56, 1, 0]), $a([48, 48, 2, 2, 68, 1, 0]), $a([52, 52, 2, 2, 84, 2, 0]), $a([64, 64, 4, 4, 112, 2, 0]), $a([72, 72, 4, 4, 144, 4, 0]), $a([80, 80, 4, 4, 192, 4, 0]), $a([88, 88, 4, 4, 224, 4, 0]), $a([96, 96, 4, 4, 272, 4, 0]), $a([104, 104, 4, 4, 336, 6, 0]), $a([120, 120, 6, 6, 408, 6, 0]), $a([132, 132, 6, 6, 496, 8, 0]), $a([144, 144, 6, 6, 620, 10, 0]), $a([8, 18, 1, 1, 7, 1, 0]), $a([8, 32, 1, 2, 11, 1, 0]), $a([8, 48, 1, 2, 15, 1, 1]), $a([8, 64, 1, 4, 18, 1, 1]), $a([8, 80, 1, 4, 22, 1, 1]), $a([8, 96, 1, 4, 28, 1, 1]), $a([8, 120, 1, 6, 32, 1, 1]), $a([8, 144, 1, 6, 36, 1, 1]), $a([12, 26, 1, 1, 14, 1, 0]), $a([12, 36, 1, 2, 18, 1, 0]), $a([12, 64, 1, 4, 27, 1, 1]), $a([12, 88, 1, 4, 36, 1, 1]), $a([16, 36, 1, 2, 24, 1, 0]), $a([16, 48, 1, 2, 28, 1, 0]), $a([16, 64, 1, 4, 36, 1, 1]), _19, $a([20, 44, 1, 2, 34, 1, 1]), $a([20, 64, 1, 4, 42, 1, 1]), $a([22, 48, 1, 2, 38, 1, 1]), $a([24, 48, 1, 2, 41, 1, 1]), $a([24, 64, 1, 4, 46, 1, 1]), $a([26, 40, 1, 2, 38, 1, 1]), $a([26, 48, 1, 2, 42, 1, 1]), $a([26, 64, 1, 4, 50, 1, 1])]); //#19064
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_datamatrix.$ctx[id] = $_[id]); //#19064
        bwipp_datamatrix.__19065__ = 1; //#19064
        $_ = Object.getPrototypeOf($_); //#19064
    } //#19064
    $_.urows = $_.rows; //#19068
    $_.ucols = $_.columns; //#19069
    $_.fullcws = $a([]); //#19070
    var _1N = $_.metrics; //#19071
    for (var _1O = 0, _1P = _1N.length; _1O < _1P; _1O++) { //#19090
        $_.m = $get(_1N, _1O); //#19072
        $_.rows = $get($_.m, 0); //#19073
        $_.cols = $get($_.m, 1); //#19074
        $_.regh = $get($_.m, 2); //#19075
        $_.regv = $get($_.m, 3); //#19076
        $_.rscw = $get($_.m, 4); //#19077
        $_.rsbl = $get($_.m, 5); //#19078
        $_.doly = $get($_.m, 6); //#19079
        $_.mrows = $f($_.rows - (2 * $_.regh)); //#19080
        $_.mcols = $f($_.cols - (2 * $_.regv)); //#19081
        $_.ncws = $f((~~(($_.mrows * $_.mcols) / 8)) - $_.rscw); //#19082
        $_.okay = true; //#19083
        if (($_.urows != 0) && ($_.urows != $_.rows)) { //#19084
            $_.okay = false; //#19084
        } //#19084
        if (($_.ucols != 0) && ($_.ucols != $_.cols)) { //#19085
            $_.okay = false; //#19085
        } //#19085
        if ($eq($_.format, "square") && $ne($_.rows, $_.cols)) { //#19086
            $_.okay = false; //#19086
        } //#19086
        if ($eq($_.format, "rectangle") && $eq($_.rows, $_.cols)) { //#19087
            $_.okay = false; //#19087
        } //#19087
        if ((!$_.dmre) && ($_.doly == 1)) { //#19088
            $_.okay = false; //#19088
        } //#19088
        if ($_.okay) { //#19089
            $k[$j++] = Infinity; //#19089
            $aload($_.fullcws); //#19089
            $k[$j++] = $_.ncws; //#19089
            $_.fullcws = $a(); //#19089
        } //#19089
    } //#19089
    $k[$j++] = Infinity; //#19091
    for (var _24 = 0, _25 = 1558; _24 < _25; _24++) { //#19091
        $k[$j++] = 10000; //#19091
    } //#19091
    $_.numremcws = $a(); //#19091
    var _27 = $_.fullcws; //#19092
    for (var _28 = 0, _29 = _27.length; _28 < _29; _28++) { //#19092
        $put($_.numremcws, $f($get(_27, _28) - 1), 1); //#19092
    } //#19092
    for (var _2C = 1556; _2C >= 0; _2C -= 1) { //#19098
        $_.i = _2C; //#19094
        if ($get($_.numremcws, $_.i) != 1) { //#19097
            $put($_.numremcws, $_.i, $f($get($_.numremcws, $_.i + 1) + 1)); //#19096
        } //#19096
    } //#19096
    if (!bwipp_datamatrix.__19211__) { //#19211
        $_ = Object.create($_); //#19211
        $_.fnc1 = -1; //#19102
        $_.prog = -2; //#19102
        $_.m05 = -3; //#19102
        $_.m06 = -4; //#19102
        $_.lC = -5; //#19103
        $_.lB = -6; //#19103
        $_.lX = -7; //#19103
        $_.lT = -8; //#19103
        $_.lE = -9; //#19103
        $_.unl = -10; //#19103
        $_.sapp = -11; //#19104
        $_.usft = -12; //#19104
        $_.sft1 = -13; //#19104
        $_.sft2 = -14; //#19104
        $_.sft3 = -15; //#19104
        $_.eci = -16; //#19104
        $_.pad = -17; //#19104
        $_.unlcw = 254; //#19105
        $k[$j++] = Infinity; //#19107
        for (var _2L = 0; _2L <= 128; _2L += 1) { //#19108
            $k[$j++] = _2L; //#19108
            $k[$j++] = _2L + 1; //#19108
        } //#19108
        $k[$j++] = $_.pad; //#19113
        $k[$j++] = 129; //#19113
        for (var _2N = 0; _2N <= 99; _2N += 1) { //#19113
            var _2P = $cvrs($s(2), _2N, 10); //#19111
            var _2R = $strcpy($s(2), "00"); //#19111
            $puti(_2R, 2 - _2P.length, _2P); //#19111
            $k[$j++] = _2R; //#19112
            $k[$j++] = _2N + 130; //#19112
        } //#19112
        var _2e = $a([$_.lC, $_.lB, $_.fnc1, $_.sapp, $_.prog, $_.usft, $_.m05, $_.m06, $_.lX, $_.lT, $_.lE, $_.eci]); //#19114
        $k[$j++] = 229; //#19114
        for (var _2f = 0, _2g = _2e.length; _2f < _2g; _2f++) { //#19114
            var _2j = $f($k[--$j] + 1); //#19114
            $k[$j++] = $get(_2e, _2f); //#19114
            $k[$j++] = _2j; //#19114
            $k[$j++] = _2j; //#19114
        } //#19114
        $j--; //#19114
        $_.Avals = $d(); //#19115
        $k[$j++] = Infinity; //#19116
        var _2l = $_.Avals; //#19117
        for (var _2q = _2l.size, _2p = _2l.keys(), _2o = 0; _2o < _2q; _2o++) { //#19117
            var _2m = _2p.next().value; //#19117
            $k[$j++] = _2m; //#19117
            $k[$j++] = _2l.get(_2m); //#19117
            $k[$j++] = Infinity; //#19117
            var _2r = $k[--$j]; //#19117
            var _2s = $k[--$j]; //#19117
            $k[$j++] = _2r; //#19117
            $k[$j++] = _2s; //#19117
            var _2t = $a(); //#19117
            $k[$j++] = _2t; //#19117
        } //#19117
        $_.Avals = $d(); //#19118
        $k[$j++] = Infinity; //#19120
        $k[$j++] = $_.sft1; //#19125
        $k[$j++] = 0; //#19125
        $k[$j++] = $_.sft2; //#19125
        $k[$j++] = 1; //#19125
        $k[$j++] = $_.sft3; //#19125
        $k[$j++] = 2; //#19125
        $k[$j++] = 32; //#19125
        $k[$j++] = 3; //#19125
        for (var _2y = 48; _2y <= 57; _2y += 1) { //#19125
            $k[$j++] = _2y; //#19125
            $k[$j++] = _2y - 44; //#19125
        } //#19125
        for (var _2z = 65; _2z <= 90; _2z += 1) { //#19126
            $k[$j++] = _2z; //#19126
            $k[$j++] = _2z - 51; //#19126
        } //#19126
        $_.CNvals = $d(); //#19127
        $k[$j++] = Infinity; //#19128
        for (var _31 = 0; _31 <= 31; _31 += 1) { //#19128
            $k[$j++] = _31; //#19128
            $k[$j++] = _31; //#19128
        } //#19128
        $_.C1vals = $d(); //#19128
        $k[$j++] = Infinity; //#19129
        for (var _33 = 33; _33 <= 47; _33 += 1) { //#19130
            $k[$j++] = _33; //#19130
            $k[$j++] = _33 - 33; //#19130
        } //#19130
        for (var _34 = 58; _34 <= 64; _34 += 1) { //#19131
            $k[$j++] = _34; //#19131
            $k[$j++] = _34 - 43; //#19131
        } //#19131
        for (var _35 = 91; _35 <= 95; _35 += 1) { //#19132
            $k[$j++] = _35; //#19132
            $k[$j++] = _35 - 69; //#19132
        } //#19132
        $k[$j++] = $_.fnc1; //#19134
        $k[$j++] = 27; //#19134
        $k[$j++] = $_.usft; //#19134
        $k[$j++] = 30; //#19134
        $_.C2vals = $d(); //#19135
        $k[$j++] = Infinity; //#19136
        for (var _39 = 96; _39 <= 127; _39 += 1) { //#19136
            $k[$j++] = _39; //#19136
            $k[$j++] = _39 - 96; //#19136
        } //#19136
        $_.C3vals = $d(); //#19136
        $k[$j++] = Infinity; //#19137
        var _3B = $_.CNvals; //#19138
        for (var _3G = _3B.size, _3F = _3B.keys(), _3E = 0; _3E < _3G; _3E++) { //#19138
            var _3C = _3F.next().value; //#19138
            $k[$j++] = _3C; //#19138
            $k[$j++] = _3B.get(_3C); //#19138
            $k[$j++] = Infinity; //#19138
            var _3H = $k[--$j]; //#19138
            var _3I = $k[--$j]; //#19138
            $k[$j++] = _3H; //#19138
            $k[$j++] = _3I; //#19138
            var _3J = $a(); //#19138
            $k[$j++] = _3J; //#19138
        } //#19138
        var _3K = $_.C1vals; //#19139
        for (var _3P = _3K.size, _3O = _3K.keys(), _3N = 0; _3N < _3P; _3N++) { //#19139
            var _3L = _3O.next().value; //#19139
            $k[$j++] = _3L; //#19139
            $k[$j++] = _3K.get(_3L); //#19139
            $k[$j++] = Infinity; //#19139
            var _3Q = $k[--$j]; //#19139
            var _3R = $k[--$j]; //#19139
            $k[$j++] = _3Q; //#19139
            $k[$j++] = $get($_.CNvals, $_.sft1); //#19139
            $k[$j++] = _3R; //#19139
            var _3V = $a(); //#19139
            $k[$j++] = _3V; //#19139
        } //#19139
        var _3W = $_.C2vals; //#19140
        for (var _3b = _3W.size, _3a = _3W.keys(), _3Z = 0; _3Z < _3b; _3Z++) { //#19140
            var _3X = _3a.next().value; //#19140
            $k[$j++] = _3X; //#19140
            $k[$j++] = _3W.get(_3X); //#19140
            $k[$j++] = Infinity; //#19140
            var _3c = $k[--$j]; //#19140
            var _3d = $k[--$j]; //#19140
            $k[$j++] = _3c; //#19140
            $k[$j++] = $get($_.CNvals, $_.sft2); //#19140
            $k[$j++] = _3d; //#19140
            var _3h = $a(); //#19140
            $k[$j++] = _3h; //#19140
        } //#19140
        var _3i = $_.C3vals; //#19141
        for (var _3n = _3i.size, _3m = _3i.keys(), _3l = 0; _3l < _3n; _3l++) { //#19141
            var _3j = _3m.next().value; //#19141
            $k[$j++] = _3j; //#19141
            $k[$j++] = _3i.get(_3j); //#19141
            $k[$j++] = Infinity; //#19141
            var _3o = $k[--$j]; //#19141
            var _3p = $k[--$j]; //#19141
            $k[$j++] = _3o; //#19141
            $k[$j++] = $get($_.CNvals, $_.sft3); //#19141
            $k[$j++] = _3p; //#19141
            var _3t = $a(); //#19141
            $k[$j++] = _3t; //#19141
        } //#19141
        $_.Cvals = $d(); //#19142
        $k[$j++] = Infinity; //#19144
        $k[$j++] = $_.sft1; //#19149
        $k[$j++] = 0; //#19149
        $k[$j++] = $_.sft2; //#19149
        $k[$j++] = 1; //#19149
        $k[$j++] = $_.sft3; //#19149
        $k[$j++] = 2; //#19149
        $k[$j++] = 32; //#19149
        $k[$j++] = 3; //#19149
        for (var _3y = 48; _3y <= 57; _3y += 1) { //#19149
            $k[$j++] = _3y; //#19149
            $k[$j++] = _3y - 44; //#19149
        } //#19149
        for (var _3z = 97; _3z <= 122; _3z += 1) { //#19150
            $k[$j++] = _3z; //#19150
            $k[$j++] = _3z - 83; //#19150
        } //#19150
        $_.TNvals = $d(); //#19151
        $k[$j++] = Infinity; //#19152
        for (var _41 = 0; _41 <= 31; _41 += 1) { //#19152
            $k[$j++] = _41; //#19152
            $k[$j++] = _41; //#19152
        } //#19152
        $_.T1vals = $d(); //#19152
        $k[$j++] = Infinity; //#19153
        for (var _43 = 33; _43 <= 47; _43 += 1) { //#19154
            $k[$j++] = _43; //#19154
            $k[$j++] = _43 - 33; //#19154
        } //#19154
        for (var _44 = 58; _44 <= 64; _44 += 1) { //#19155
            $k[$j++] = _44; //#19155
            $k[$j++] = _44 - 43; //#19155
        } //#19155
        for (var _45 = 91; _45 <= 95; _45 += 1) { //#19156
            $k[$j++] = _45; //#19156
            $k[$j++] = _45 - 69; //#19156
        } //#19156
        $k[$j++] = $_.fnc1; //#19158
        $k[$j++] = 27; //#19158
        $k[$j++] = $_.usft; //#19158
        $k[$j++] = 30; //#19158
        $_.T2vals = $d(); //#19159
        $k[$j++] = Infinity; //#19160
        $k[$j++] = 96; //#19162
        $k[$j++] = 0; //#19162
        for (var _49 = 65; _49 <= 90; _49 += 1) { //#19162
            $k[$j++] = _49; //#19162
            $k[$j++] = _49 - 64; //#19162
        } //#19162
        for (var _4A = 123; _4A <= 127; _4A += 1) { //#19163
            $k[$j++] = _4A; //#19163
            $k[$j++] = _4A - 96; //#19163
        } //#19163
        $_.T3vals = $d(); //#19164
        $k[$j++] = Infinity; //#19165
        var _4C = $_.TNvals; //#19166
        for (var _4H = _4C.size, _4G = _4C.keys(), _4F = 0; _4F < _4H; _4F++) { //#19166
            var _4D = _4G.next().value; //#19166
            $k[$j++] = _4D; //#19166
            $k[$j++] = _4C.get(_4D); //#19166
            $k[$j++] = Infinity; //#19166
            var _4I = $k[--$j]; //#19166
            var _4J = $k[--$j]; //#19166
            $k[$j++] = _4I; //#19166
            $k[$j++] = _4J; //#19166
            var _4K = $a(); //#19166
            $k[$j++] = _4K; //#19166
        } //#19166
        var _4L = $_.T1vals; //#19167
        for (var _4Q = _4L.size, _4P = _4L.keys(), _4O = 0; _4O < _4Q; _4O++) { //#19167
            var _4M = _4P.next().value; //#19167
            $k[$j++] = _4M; //#19167
            $k[$j++] = _4L.get(_4M); //#19167
            $k[$j++] = Infinity; //#19167
            var _4R = $k[--$j]; //#19167
            var _4S = $k[--$j]; //#19167
            $k[$j++] = _4R; //#19167
            $k[$j++] = $get($_.TNvals, $_.sft1); //#19167
            $k[$j++] = _4S; //#19167
            var _4W = $a(); //#19167
            $k[$j++] = _4W; //#19167
        } //#19167
        var _4X = $_.T2vals; //#19168
        for (var _4c = _4X.size, _4b = _4X.keys(), _4a = 0; _4a < _4c; _4a++) { //#19168
            var _4Y = _4b.next().value; //#19168
            $k[$j++] = _4Y; //#19168
            $k[$j++] = _4X.get(_4Y); //#19168
            $k[$j++] = Infinity; //#19168
            var _4d = $k[--$j]; //#19168
            var _4e = $k[--$j]; //#19168
            $k[$j++] = _4d; //#19168
            $k[$j++] = $get($_.TNvals, $_.sft2); //#19168
            $k[$j++] = _4e; //#19168
            var _4i = $a(); //#19168
            $k[$j++] = _4i; //#19168
        } //#19168
        var _4j = $_.T3vals; //#19169
        for (var _4o = _4j.size, _4n = _4j.keys(), _4m = 0; _4m < _4o; _4m++) { //#19169
            var _4k = _4n.next().value; //#19169
            $k[$j++] = _4k; //#19169
            $k[$j++] = _4j.get(_4k); //#19169
            $k[$j++] = Infinity; //#19169
            var _4p = $k[--$j]; //#19169
            var _4q = $k[--$j]; //#19169
            $k[$j++] = _4p; //#19169
            $k[$j++] = $get($_.TNvals, $_.sft3); //#19169
            $k[$j++] = _4q; //#19169
            var _4u = $a(); //#19169
            $k[$j++] = _4u; //#19169
        } //#19169
        $_.Tvals = $d(); //#19170
        for (var _4w = 128; _4w <= 255; _4w += 1) { //#19178
            $_.i = _4w; //#19174
            $k[$j++] = $_.Avals; //#19175
            $k[$j++] = $_.i; //#19175
            $k[$j++] = Infinity; //#19175
            $aload($get($_.Avals, $_.usft)); //#19175
            $aload($get($_.Avals, $_.i - 128)); //#19175
            var _55 = $a(); //#19175
            var _56 = $k[--$j]; //#19175
            $put($k[--$j], _56, _55); //#19175
            $k[$j++] = $_.Cvals; //#19176
            $k[$j++] = $_.i; //#19176
            $k[$j++] = Infinity; //#19176
            $aload($get($_.Cvals, $_.usft)); //#19176
            $aload($get($_.Cvals, $_.i - 128)); //#19176
            var _5G = $a(); //#19176
            var _5H = $k[--$j]; //#19176
            $put($k[--$j], _5H, _5G); //#19176
            $k[$j++] = $_.Tvals; //#19177
            $k[$j++] = $_.i; //#19177
            $k[$j++] = Infinity; //#19177
            $aload($get($_.Tvals, $_.usft)); //#19177
            $aload($get($_.Tvals, $_.i - 128)); //#19177
            var _5R = $a(); //#19177
            var _5S = $k[--$j]; //#19177
            $put($k[--$j], _5S, _5R); //#19177
        } //#19177
        $k[$j++] = Infinity; //#19180
        $k[$j++] = 13; //#19185
        $k[$j++] = 0; //#19185
        $k[$j++] = 42; //#19185
        $k[$j++] = 1; //#19185
        $k[$j++] = 62; //#19185
        $k[$j++] = 2; //#19185
        $k[$j++] = 32; //#19185
        $k[$j++] = 3; //#19185
        for (var _5U = 48; _5U <= 57; _5U += 1) { //#19185
            $k[$j++] = _5U; //#19185
            $k[$j++] = _5U - 44; //#19185
        } //#19185
        for (var _5V = 65; _5V <= 90; _5V += 1) { //#19186
            $k[$j++] = _5V; //#19186
            $k[$j++] = _5V - 51; //#19186
        } //#19186
        $_.Xvals = $d(); //#19187
        $k[$j++] = Infinity; //#19188
        var _5X = $_.Xvals; //#19189
        for (var _5c = _5X.size, _5b = _5X.keys(), _5a = 0; _5a < _5c; _5a++) { //#19189
            var _5Y = _5b.next().value; //#19189
            $k[$j++] = _5Y; //#19189
            $k[$j++] = _5X.get(_5Y); //#19189
            $k[$j++] = Infinity; //#19189
            var _5d = $k[--$j]; //#19189
            var _5e = $k[--$j]; //#19189
            $k[$j++] = _5d; //#19189
            $k[$j++] = _5e; //#19189
            var _5f = $a(); //#19189
            $k[$j++] = _5f; //#19189
        } //#19189
        $_.Xvals = $d(); //#19190
        $k[$j++] = Infinity; //#19192
        for (var _5h = 64; _5h <= 94; _5h += 1) { //#19193
            $k[$j++] = _5h; //#19193
            $k[$j++] = _5h - 64; //#19193
        } //#19193
        $k[$j++] = $_.unl; //#19195
        $k[$j++] = 31; //#19195
        for (var _5j = 32; _5j <= 63; _5j += 1) { //#19195
            $k[$j++] = _5j; //#19195
            $k[$j++] = _5j; //#19195
        } //#19195
        $_.Evals = $d(); //#19196
        $k[$j++] = Infinity; //#19197
        var _5l = $_.Evals; //#19198
        for (var _5q = _5l.size, _5p = _5l.keys(), _5o = 0; _5o < _5q; _5o++) { //#19198
            var _5m = _5p.next().value; //#19198
            $k[$j++] = _5m; //#19198
            $k[$j++] = _5l.get(_5m); //#19198
            $k[$j++] = Infinity; //#19198
            var _5r = $k[--$j]; //#19198
            var _5s = $k[--$j]; //#19198
            $k[$j++] = _5r; //#19198
            $k[$j++] = _5s; //#19198
            var _5t = $a(); //#19198
            $k[$j++] = _5t; //#19198
        } //#19198
        $_.Evals = $d(); //#19199
        $k[$j++] = Infinity; //#19201
        for (var _5v = 0; _5v <= 255; _5v += 1) { //#19202
            $k[$j++] = _5v; //#19202
            $k[$j++] = _5v; //#19202
        } //#19202
        $_.Bvals = $d(); //#19203
        $k[$j++] = Infinity; //#19204
        var _5x = $_.Bvals; //#19205
        for (var _62 = _5x.size, _61 = _5x.keys(), _60 = 0; _60 < _62; _60++) { //#19205
            var _5y = _61.next().value; //#19205
            $k[$j++] = _5y; //#19205
            $k[$j++] = _5x.get(_5y); //#19205
            $k[$j++] = Infinity; //#19205
            var _63 = $k[--$j]; //#19205
            var _64 = $k[--$j]; //#19205
            $k[$j++] = _63; //#19205
            $k[$j++] = _64; //#19205
            var _65 = $a(); //#19205
            $k[$j++] = _65; //#19205
        } //#19205
        $_.Bvals = $d(); //#19206
        $_.encvals = $a([$_.Avals, $_.Cvals, $_.Tvals, $_.Xvals, $_.Evals, $_.Bvals]); //#19208
        $_.A = 0; //#19210
        $_.C = 1; //#19210
        $_.T = 2; //#19210
        $_.X = 3; //#19210
        $_.E = 4; //#19210
        $_.B = 5; //#19210
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_datamatrix.$ctx[id] = $_[id]); //#19210
        bwipp_datamatrix.__19211__ = 1; //#19210
        $_ = Object.getPrototypeOf($_); //#19210
    } //#19210
    if ($_.raw) { //#19615
        $_.cws = $a($_.barcode.length); //#19215
        $_.i = 0; //#19216
        $_.j = 0; //#19216
        for (;;) { //#19223
            if ($_.i == $_.barcode.length) { //#19218
                break; //#19218
            } //#19218
            $_.cw = $cvi($geti($_.barcode, $_.i + 1, 3)); //#19219
            $put($_.cws, $_.j, $_.cw); //#19220
            $_.i = $_.i + 4; //#19221
            $_.j = $_.j + 1; //#19222
        } //#19222
        $_.cws = $geti($_.cws, 0, $_.j); //#19224
    } else { //#19615
        var _6Z = new Map([
            ["parse", $_.parse],
            ["parsefnc", $_.parsefnc],
            ["eci", true],
            ["FNC1", $_.fnc1],
            ["PROG", $_.prog]
        ]); //#19234
        $_.fncvals = _6Z; //#19237
        $k[$j++] = 'msg'; //#19238
        $k[$j++] = $_.barcode; //#19238
        $k[$j++] = $_.fncvals; //#19238
        bwipp_parseinput(); //#19238
        var _6c = $k[--$j]; //#19238
        $_[$k[--$j]] = _6c; //#19238
        $_.msglen = $_.msg.length; //#19239
        if ($_.msglen >= 9) { //#19257
            $aload($geti($_.msg, 0, 7)); //#19243
            var _6i = $k[--$j]; //#19244
            var _6j = $k[--$j]; //#19244
            $k[$j++] = _6i == 29; //#19244
            $k[$j++] = _6j; //#19244
            $j--; //#19244
            var _6k = $k[--$j]; //#19244
            var _6l = $k[--$j]; //#19244
            var _6m = $k[--$j]; //#19244
            var _6n = $k[--$j]; //#19245
            var _6o = $k[--$j]; //#19245
            var _6p = $k[--$j]; //#19245
            if (((((_6k && (_6l == 48)) && (_6m == 30)) && (_6n == 62)) && (_6o == 41)) && (_6p == 91)) { //#19256
                $aload($geti($_.msg, $_.msglen - 2, 2)); //#19246
                var _6t = $k[--$j]; //#19247
                var _6u = $k[--$j]; //#19247
                if ((_6t == 4) && (_6u == 30)) { //#19255
                    if ($get($_.msg, 5) == 53) { //#19252
                        $k[$j++] = Infinity; //#19249
                        $k[$j++] = $_.m05; //#19249
                        $aload($geti($_.msg, 7, $_.msg.length - 9)); //#19249
                        $_.msg = $a(); //#19249
                    } else { //#19252
                        if ($get($_.msg, 5) == 54) { //#19253
                            $k[$j++] = Infinity; //#19252
                            $k[$j++] = $_.m06; //#19252
                            $aload($geti($_.msg, 7, $_.msg.length - 9)); //#19252
                            $_.msg = $a(); //#19252
                        } //#19252
                    } //#19252
                } //#19252
            } //#19252
        } //#19252
        $_.msglen = $_.msg.length; //#19258
        $k[$j++] = Infinity; //#19260
        for (var _7B = 0, _7C = $_.msglen; _7B < _7C; _7B++) { //#19260
            $k[$j++] = 0; //#19260
        } //#19260
        $k[$j++] = 0; //#19260
        $_.numD = $a(); //#19260
        $k[$j++] = Infinity; //#19261
        for (var _7F = 0, _7G = $_.msglen; _7F < _7G; _7F++) { //#19261
            $k[$j++] = 0; //#19261
        } //#19261
        $k[$j++] = 9999; //#19261
        $_.nextXterm = $a(); //#19261
        $k[$j++] = Infinity; //#19262
        for (var _7J = 0, _7K = $_.msglen; _7J < _7K; _7J++) { //#19262
            $k[$j++] = 0; //#19262
        } //#19262
        $k[$j++] = 9999; //#19262
        $_.nextNonX = $a(); //#19262
        $k[$j++] = Infinity; //#19263
        for (var _7N = 0, _7O = $_.msglen; _7N < _7O; _7N++) { //#19263
            $k[$j++] = false; //#19263
        } //#19263
        $k[$j++] = false; //#19263
        $_.isECI = $a(); //#19263
        for (var _7R = $_.msglen - 1; _7R >= 0; _7R -= 1) { //#19281
            $_.i = _7R; //#19265
            $_.barchar = $get($_.msg, $_.i); //#19266
            if (($_.barchar >= 48) && ($_.barchar <= 57)) { //#19269
                $put($_.numD, $_.i, $f($get($_.numD, $_.i + 1) + 1)); //#19268
            } //#19268
            if ((($_.barchar == 13) || ($_.barchar == 42)) || ($_.barchar == 62)) { //#19273
                $put($_.nextXterm, $_.i, 0); //#19271
            } else { //#19273
                $put($_.nextXterm, $_.i, $f($get($_.nextXterm, $_.i + 1) + 1)); //#19273
            } //#19273
            var _7o = $get($_.Xvals, $_.barchar) !== undefined; //#19275
            if (!_7o) { //#19278
                $put($_.nextNonX, $_.i, 0); //#19276
            } else { //#19278
                $put($_.nextNonX, $_.i, $f($get($_.nextNonX, $_.i + 1) + 1)); //#19278
            } //#19278
            $put($_.isECI, $_.i, $_.barchar <= -1000000); //#19280
        } //#19280
        $k[$j++] = Infinity; //#19282
        var _7z = $_.nextXterm; //#19282
        for (var _80 = 0, _81 = _7z.length; _80 < _81; _80++) { //#19282
            var _82 = $get(_7z, _80); //#19282
            $k[$j++] = _82; //#19282
            if (_82 > 10000) { //#19282
                $j--; //#19282
                $k[$j++] = 10000; //#19282
            } //#19282
        } //#19282
        $_.nextXterm = $a(); //#19282
        $k[$j++] = Infinity; //#19283
        var _84 = $_.nextNonX; //#19283
        for (var _85 = 0, _86 = _84.length; _85 < _86; _85++) { //#19283
            var _87 = $get(_84, _85); //#19283
            $k[$j++] = _87; //#19283
            if (_87 > 10000) { //#19283
                $j--; //#19283
                $k[$j++] = 10000; //#19283
            } //#19283
        } //#19283
        $_.nextNonX = $a(); //#19283
        $_.isD = function() {
            $k[$j++] = ($_.char >= 48) && ($_.char <= 57); //#19285
        }; //#19285
        $_.isC = function() {
            var _8D = $get($_.CNvals, $_.char) !== undefined; //#19286
            $k[$j++] = _8D; //#19286
        }; //#19286
        $_.isT = function() {
            var _8G = $get($_.TNvals, $_.char) !== undefined; //#19287
            $k[$j++] = _8G; //#19287
        }; //#19287
        $_.isX = function() {
            var _8J = $get($_.Xvals, $_.char) !== undefined; //#19288
            $k[$j++] = _8J; //#19288
        }; //#19288
        $_.isE = function() {
            var _8M = $get($_.Evals, $_.char) !== undefined; //#19289
            $k[$j++] = _8M; //#19289
        }; //#19289
        $_.isEA = function() {
            $k[$j++] = $_.char > 127; //#19290
        }; //#19290
        $_.isFN = function() {
            $k[$j++] = $_.char < 0; //#19291
        }; //#19291
        $_.XtermFirst = function() {
            var _8P = $k[--$j]; //#19292
            $k[$j++] = $lt($get($_.nextXterm, _8P), $get($_.nextNonX, _8P)); //#19292
        }; //#19292
        $_.lookup = function() {
            $_.ac = 1; //#19296
            $_.cc = 2; //#19296
            $_.tc = 2; //#19296
            $_.xc = 2; //#19296
            $_.ec = 2; //#19296
            $_.bc = 2.25; //#19296
            if ($_.mode == $_.A) { //#19297
                $_.ac = 0; //#19297
                $_.cc = 1; //#19297
                $_.tc = 1; //#19297
                $_.xc = 1; //#19297
                $_.ec = 1; //#19297
                $_.bc = 1.25; //#19297
            } //#19297
            if ($_.mode == $_.C) { //#19298
                $_.cc = 0; //#19298
            } //#19298
            if ($_.mode == $_.T) { //#19299
                $_.tc = 0; //#19299
            } //#19299
            if ($_.mode == $_.X) { //#19300
                $_.xc = 0; //#19300
            } //#19300
            if ($_.mode == $_.E) { //#19301
                $_.ec = 0; //#19301
            } //#19301
            if ($_.mode == $_.B) { //#19302
                $_.bc = 0; //#19302
            } //#19302
            for (var _8g = 0, _8h = 1; _8g < _8h; _8g++) { //#19337
                if ($get($_.isECI, $_.i)) { //#19304
                    $k[$j++] = $_.A; //#19304
                    break; //#19304
                } //#19304
                if (($_.c40headerlength != -1) && ($_.i < $_.c40headerlength)) { //#19305
                    $k[$j++] = $_.C; //#19305
                    break; //#19305
                } //#19305
                $_.k = 0; //#19306
                for (;;) { //#19336
                    if (($_.i + $_.k) == $_.msglen) { //#19315
                        var _8t = $a(['ac', 'cc', 'tc', 'xc', 'ec', 'bc']); //#19308
                        for (var _8u = 0, _8v = _8t.length; _8u < _8v; _8u++) { //#19308
                            var _8w = $get(_8t, _8u); //#19308
                            $_[_8w] = Math.ceil($_[_8w]); //#19308
                        } //#19308
                        var _93 = $a([$_.cc, $_.tc, $_.xc, $_.ec, $_.bc]); //#19309
                        $k[$j++] = true; //#19309
                        for (var _94 = 0, _95 = _93.length; _94 < _95; _94++) { //#19309
                            var _98 = $k[--$j]; //#19309
                            $k[$j++] = _98 && ($_.ac <= $get(_93, _94)); //#19309
                        } //#19309
                        if ($k[--$j]) { //#19309
                            $k[$j++] = $_.A; //#19309
                            break; //#19309
                        } //#19309
                        var _9G = $a([$_.ac, $_.cc, $_.tc, $_.xc, $_.ec]); //#19310
                        $k[$j++] = true; //#19310
                        for (var _9H = 0, _9I = _9G.length; _9H < _9I; _9H++) { //#19310
                            var _9L = $k[--$j]; //#19310
                            $k[$j++] = _9L && ($_.bc < $get(_9G, _9H)); //#19310
                        } //#19310
                        if ($k[--$j]) { //#19310
                            $k[$j++] = $_.B; //#19310
                            break; //#19310
                        } //#19310
                        var _9T = $a([$_.ac, $_.cc, $_.tc, $_.xc, $_.bc]); //#19311
                        $k[$j++] = true; //#19311
                        for (var _9U = 0, _9V = _9T.length; _9U < _9V; _9U++) { //#19311
                            var _9Y = $k[--$j]; //#19311
                            $k[$j++] = _9Y && ($_.ec < $get(_9T, _9U)); //#19311
                        } //#19311
                        if ($k[--$j]) { //#19311
                            $k[$j++] = $_.E; //#19311
                            break; //#19311
                        } //#19311
                        var _9g = $a([$_.ac, $_.cc, $_.xc, $_.ec, $_.bc]); //#19312
                        $k[$j++] = true; //#19312
                        for (var _9h = 0, _9i = _9g.length; _9h < _9i; _9h++) { //#19312
                            var _9l = $k[--$j]; //#19312
                            $k[$j++] = _9l && ($_.tc < $get(_9g, _9h)); //#19312
                        } //#19312
                        if ($k[--$j]) { //#19312
                            $k[$j++] = $_.T; //#19312
                            break; //#19312
                        } //#19312
                        var _9t = $a([$_.ac, $_.cc, $_.tc, $_.ec, $_.bc]); //#19313
                        $k[$j++] = true; //#19313
                        for (var _9u = 0, _9v = _9t.length; _9u < _9v; _9u++) { //#19313
                            var _9y = $k[--$j]; //#19313
                            $k[$j++] = _9y && ($_.xc < $get(_9t, _9u)); //#19313
                        } //#19313
                        if ($k[--$j]) { //#19313
                            $k[$j++] = $_.X; //#19313
                            break; //#19313
                        } //#19313
                        $k[$j++] = $_.C; //#19314
                        break; //#19314
                    } //#19314
                    $_.char = $get($_.msg, $_.i + $_.k); //#19316
                    $k[$j++] = 'ac'; //#19317
                    $k[$j++] = $_.ac; //#19317
                    $_.isD(); //#19317
                    if ($k[--$j]) { //#19317
                        var _A8 = $k[--$j]; //#19317
                        $k[$j++] = $f(_A8 + (1 / 2)); //#19317
                    } else { //#19317
                        $_.isEA(); //#19317
                        if ($k[--$j]) { //#19317
                            var _AA = $k[--$j]; //#19317
                            $k[$j++] = Math.ceil(_AA) + 2; //#19317
                        } else { //#19317
                            var _AB = $k[--$j]; //#19317
                            $k[$j++] = Math.ceil(_AB) + 1; //#19317
                        } //#19317
                    } //#19317
                    var _AC = $k[--$j]; //#19317
                    $_[$k[--$j]] = _AC; //#19317
                    $k[$j++] = 'cc'; //#19318
                    $k[$j++] = $_.cc; //#19318
                    $_.isC(); //#19318
                    if ($k[--$j]) { //#19318
                        var _AG = $k[--$j]; //#19318
                        $k[$j++] = $f(_AG + 0.6666667); //#19318
                    } else { //#19318
                        $_.isEA(); //#19318
                        if ($k[--$j]) { //#19318
                            var _AI = $k[--$j]; //#19318
                            $k[$j++] = $f(_AI + 2.6666667); //#19318
                        } else { //#19318
                            var _AJ = $k[--$j]; //#19318
                            $k[$j++] = $f(_AJ + 1.3333334); //#19318
                        } //#19318
                    } //#19318
                    var _AK = $k[--$j]; //#19318
                    $_[$k[--$j]] = _AK; //#19318
                    $k[$j++] = 'tc'; //#19319
                    $k[$j++] = $_.tc; //#19319
                    $_.isT(); //#19319
                    if ($k[--$j]) { //#19319
                        var _AO = $k[--$j]; //#19319
                        $k[$j++] = $f(_AO + 0.6666667); //#19319
                    } else { //#19319
                        $_.isEA(); //#19319
                        if ($k[--$j]) { //#19319
                            var _AQ = $k[--$j]; //#19319
                            $k[$j++] = $f(_AQ + 2.6666667); //#19319
                        } else { //#19319
                            var _AR = $k[--$j]; //#19319
                            $k[$j++] = $f(_AR + 1.3333334); //#19319
                        } //#19319
                    } //#19319
                    var _AS = $k[--$j]; //#19319
                    $_[$k[--$j]] = _AS; //#19319
                    $k[$j++] = 'xc'; //#19320
                    $k[$j++] = $_.xc; //#19320
                    $_.isX(); //#19320
                    if ($k[--$j]) { //#19320
                        var _AW = $k[--$j]; //#19320
                        $k[$j++] = $f(_AW + 0.6666667); //#19320
                    } else { //#19320
                        $_.isEA(); //#19320
                        if ($k[--$j]) { //#19320
                            var _AY = $k[--$j]; //#19320
                            $k[$j++] = $f(_AY + 4.3333334); //#19320
                        } else { //#19320
                            var _AZ = $k[--$j]; //#19320
                            $k[$j++] = $f(_AZ + 3.3333334); //#19320
                        } //#19320
                    } //#19320
                    var _Aa = $k[--$j]; //#19320
                    $_[$k[--$j]] = _Aa; //#19320
                    $k[$j++] = 'ec'; //#19321
                    $k[$j++] = $_.ec; //#19321
                    $_.isE(); //#19321
                    if ($k[--$j]) { //#19321
                        var _Ae = $k[--$j]; //#19321
                        $k[$j++] = $f(_Ae + (3 / 4)); //#19321
                    } else { //#19321
                        $_.isEA(); //#19321
                        if ($k[--$j]) { //#19321
                            var _Ag = $k[--$j]; //#19321
                            $k[$j++] = $f(_Ag + (17 / 4)); //#19321
                        } else { //#19321
                            var _Ah = $k[--$j]; //#19321
                            $k[$j++] = $f(_Ah + (13 / 4)); //#19321
                        } //#19321
                    } //#19321
                    var _Ai = $k[--$j]; //#19321
                    $_[$k[--$j]] = _Ai; //#19321
                    $k[$j++] = 'bc'; //#19322
                    $k[$j++] = $_.bc; //#19322
                    $_.isFN(); //#19322
                    if ($k[--$j]) { //#19322
                        var _Am = $k[--$j]; //#19322
                        $k[$j++] = $f(_Am + 4); //#19322
                    } else { //#19322
                        var _An = $k[--$j]; //#19322
                        $k[$j++] = $f(_An + 1); //#19322
                    } //#19322
                    var _Ao = $k[--$j]; //#19322
                    $_[$k[--$j]] = _Ao; //#19322
                    if ($_.k >= 4) { //#19334
                        var _Aw = $a([$_.cc, $_.tc, $_.xc, $_.ec, $_.bc]); //#19324
                        $k[$j++] = true; //#19324
                        for (var _Ax = 0, _Ay = _Aw.length; _Ax < _Ay; _Ax++) { //#19324
                            var _B1 = $k[--$j]; //#19324
                            $k[$j++] = _B1 && (($_.ac + 1) <= $get(_Aw, _Ax)); //#19324
                        } //#19324
                        if ($k[--$j]) { //#19324
                            $k[$j++] = $_.A; //#19324
                            break; //#19324
                        } //#19324
                        if (($_.bc + 1) <= $_.ac) { //#19325
                            $k[$j++] = $_.B; //#19325
                            break; //#19325
                        } //#19325
                        var _BB = $a([$_.cc, $_.tc, $_.xc, $_.ec]); //#19326
                        $k[$j++] = true; //#19326
                        for (var _BC = 0, _BD = _BB.length; _BC < _BD; _BC++) { //#19326
                            var _BG = $k[--$j]; //#19326
                            $k[$j++] = _BG && (($_.bc + 1) < $get(_BB, _BC)); //#19326
                        } //#19326
                        if ($k[--$j]) { //#19326
                            $k[$j++] = $_.B; //#19326
                            break; //#19326
                        } //#19326
                        var _BO = $a([$_.ac, $_.cc, $_.tc, $_.xc, $_.bc]); //#19327
                        $k[$j++] = true; //#19327
                        for (var _BP = 0, _BQ = _BO.length; _BP < _BQ; _BP++) { //#19327
                            var _BT = $k[--$j]; //#19327
                            $k[$j++] = _BT && (($_.ec + 1) < $get(_BO, _BP)); //#19327
                        } //#19327
                        if ($k[--$j]) { //#19327
                            $k[$j++] = $_.E; //#19327
                            break; //#19327
                        } //#19327
                        var _Bb = $a([$_.ac, $_.cc, $_.xc, $_.ec, $_.bc]); //#19328
                        $k[$j++] = true; //#19328
                        for (var _Bc = 0, _Bd = _Bb.length; _Bc < _Bd; _Bc++) { //#19328
                            var _Bg = $k[--$j]; //#19328
                            $k[$j++] = _Bg && (($_.tc + 1) < $get(_Bb, _Bc)); //#19328
                        } //#19328
                        if ($k[--$j]) { //#19328
                            $k[$j++] = $_.T; //#19328
                            break; //#19328
                        } //#19328
                        var _Bo = $a([$_.ac, $_.cc, $_.tc, $_.ec, $_.bc]); //#19329
                        $k[$j++] = true; //#19329
                        for (var _Bp = 0, _Bq = _Bo.length; _Bp < _Bq; _Bp++) { //#19329
                            var _Bt = $k[--$j]; //#19329
                            $k[$j++] = _Bt && (($_.xc + 1) < $get(_Bo, _Bp)); //#19329
                        } //#19329
                        if ($k[--$j]) { //#19329
                            $k[$j++] = $_.X; //#19329
                            break; //#19329
                        } //#19329
                        var _C0 = $a([$_.ac, $_.tc, $_.ec, $_.bc]); //#19330
                        $k[$j++] = true; //#19330
                        for (var _C1 = 0, _C2 = _C0.length; _C1 < _C2; _C1++) { //#19330
                            var _C5 = $k[--$j]; //#19330
                            $k[$j++] = _C5 && (($_.cc + 1) < $get(_C0, _C1)); //#19330
                        } //#19330
                        if ($k[--$j]) { //#19333
                            if ($_.cc < $_.xc) { //#19331
                                $k[$j++] = $_.C; //#19331
                                break; //#19331
                            } //#19331
                            if ($_.cc == $_.xc) { //#19332
                                $k[$j++] = ($_.i + $_.k) + 1; //#19332
                                $_.XtermFirst(); //#19332
                                if ($k[--$j]) { //#19332
                                    $k[$j++] = $_.X; //#19332
                                    break; //#19332
                                } else { //#19332
                                    $k[$j++] = $_.C; //#19332
                                    break; //#19332
                                } //#19332
                            } //#19332
                        } //#19332
                    } //#19332
                    $_.k = $_.k + 1; //#19335
                } //#19335
            } //#19335
        }; //#19335
        $_.addtocws = function() {
            var _CI = $k[--$j]; //#19341
            $puti($_.cws, $_.j, _CI); //#19341
            $_.j = _CI.length + $_.j; //#19342
        }; //#19342
        $_.ECItocws = function() {
            var _CN = $f((-$k[--$j]) - 1000000); //#19347
            $k[$j++] = _CN; //#19361
            if (_CN <= 126) { //#19360
                var _CO = $k[--$j]; //#19348
                $k[$j++] = $f(_CO + 1); //#19349
                $astore($a(1)); //#19349
            } else { //#19360
                var _CQ = $k[--$j]; //#19350
                $k[$j++] = _CQ; //#19361
                if (_CQ <= 16382) { //#19360
                    var _CS = $f($k[--$j] - 127); //#19352
                    $k[$j++] = (~~(_CS / 254)) + 128; //#19354
                    $k[$j++] = $f((_CS % 254) + 1); //#19354
                    $astore($a(2)); //#19354
                } else { //#19360
                    var _CV = $f($k[--$j] - 16383); //#19357
                    $k[$j++] = (~~(_CV / 64516)) + 192; //#19360
                    $k[$j++] = ((~~(_CV / 254)) % 254) + 1; //#19360
                    $k[$j++] = $f((_CV % 254) + 1); //#19360
                    $astore($a(3)); //#19360
                } //#19360
            } //#19360
        }; //#19360
        $_.encA = function() {
            for (var _CX = 0, _CY = 1; _CX < _CY; _CX++) { //#19386
                if ($get($_.isECI, $_.i)) { //#19371
                    $k[$j++] = $get($_.Avals, $_.eci); //#19367
                    $_.addtocws(); //#19367
                    $k[$j++] = $get($_.msg, $_.i); //#19368
                    $_.ECItocws(); //#19368
                    $_.addtocws(); //#19368
                    $_.i = $_.i + 1; //#19369
                    break; //#19370
                } //#19370
                if ($get($_.numD, $_.i) >= 2) { //#19376
                    var _Cm = $s(2); //#19373
                    $put(_Cm, 0, $get($_.msg, $_.i)); //#19373
                    $put(_Cm, 1, $get($_.msg, $_.i + 1)); //#19373
                    $k[$j++] = $get($_.Avals, _Cm); //#19373
                    $_.addtocws(); //#19373
                    $_.i = $_.i + 2; //#19374
                    break; //#19375
                } //#19375
                $k[$j++] = 'newmode'; //#19377
                $_.lookup(); //#19377
                var _Cw = $k[--$j]; //#19377
                $_[$k[--$j]] = _Cw; //#19377
                if ($_.newmode != $_.mode) { //#19382
                    $k[$j++] = $get($_.Avals, $get($a([-1, $_.lC, $_.lT, $_.lX, $_.lE, $_.lB]), $_.newmode)); //#19379
                    $_.addtocws(); //#19379
                    $_.mode = $_.newmode; //#19380
                    break; //#19381
                } //#19381
                $k[$j++] = $get($_.Avals, $get($_.msg, $_.i)); //#19383
                $_.addtocws(); //#19383
                $_.i = $_.i + 1; //#19384
                break; //#19385
            } //#19385
        }; //#19385
        $_.CTXvalstocws = function() {
            $_.in = $k[--$j]; //#19390
            $k[$j++] = Infinity; //#19391
            for (var _DK = 0, _DJ = $_.in.length - 1; _DK <= _DJ; _DK += 3) { //#19395
                var _DM = $geti($_.in, _DK, 3); //#19393
                $k[$j++] = 0; //#19393
                for (var _DN = 0, _DO = _DM.length; _DN < _DO; _DN++) { //#19393
                    var _DQ = $k[--$j]; //#19393
                    $k[$j++] = $f(_DQ + $get(_DM, _DN)) * 40; //#19393
                } //#19393
                var _DS = (~~($k[--$j] / 40)) + 1; //#19394
                $k[$j++] = ~~(_DS / 256); //#19394
                $k[$j++] = _DS % 256; //#19394
            } //#19394
            $astore($a($counttomark())); //#19396
            var _DV = $k[--$j]; //#19396
            var _DW = $k[--$j]; //#19396
            $k[$j++] = _DV; //#19396
            $k[$j++] = _DW; //#19396
            $j--; //#19396
        }; //#19396
        $_.encCTX = function() {
            $_.p = 0; //#19400
            $_.ctxvals = $a(2500); //#19401
            $_.done = false; //#19402
            for (;;) { //#19481
                if ($_.i == $_.msglen) { //#19406
                    break; //#19406
                } //#19406
                var _Dg = $get($get($_.encvals, $_.mode), $get($_.msg, $_.i)) !== undefined; //#19407
                if (!_Dg) { //#19407
                    break; //#19407
                } //#19407
                if (($_.p % 3) == 0) { //#19476
                    if ($_.p > 0) { //#19421
                        $k[$j++] = 'newmode'; //#19410
                        $_.lookup(); //#19410
                        var _Dj = $k[--$j]; //#19410
                        $_[$k[--$j]] = _Dj; //#19410
                        if ($ne($_.newmode, $_.mode)) { //#19420
                            $k[$j++] = $geti($_.ctxvals, 0, $_.p); //#19412
                            $_.CTXvalstocws(); //#19412
                            $_.addtocws(); //#19412
                            $k[$j++] = $a([$_.unlcw]); //#19413
                            $_.addtocws(); //#19413
                            if ($_.newmode != $_.A) { //#19416
                                $k[$j++] = $get($_.Avals, $get($a([-1, $_.lC, $_.lT, $_.lX, $_.lE, $_.lB]), $_.newmode)); //#19415
                                $_.addtocws(); //#19415
                            } //#19415
                            $_.mode = $_.newmode; //#19417
                            $_.done = true; //#19418
                            break; //#19419
                        } //#19419
                    } //#19419
                    if (($_.msglen - $_.i) <= 3) { //#19475
                        $_.remcws = $get($_.numremcws, $_.j + ((~~($_.p / 3)) * 2)); //#19423
                        $k[$j++] = Infinity; //#19424
                        var _EF = $geti($_.msg, $_.i, $_.msglen - $_.i); //#19425
                        for (var _EG = 0, _EH = _EF.length; _EG < _EH; _EG++) { //#19431
                            var _EI = $get(_EF, _EG); //#19431
                            var _EM = $get($get($_.encvals, $_.mode), _EI) !== undefined; //#19426
                            $k[$j++] = _EI; //#19430
                            if (_EM) { //#19429
                                $aload($get($get($_.encvals, $_.mode), $k[--$j])); //#19427
                            } else { //#19429
                                $j--; //#19429
                                $k[$j++] = -1; //#19429
                                $k[$j++] = -1; //#19429
                                $k[$j++] = -1; //#19429
                                $k[$j++] = -1; //#19429
                            } //#19429
                        } //#19429
                        $_.remvals = $a(); //#19429
                        if (($_.remcws == 2) && ($_.remvals.length == 3)) { //#19443
                            $k[$j++] = Infinity; //#19435
                            $aload($geti($_.ctxvals, 0, $_.p)); //#19436
                            $aload($_.remvals); //#19437
                            var _EZ = $a(); //#19437
                            $k[$j++] = _EZ; //#19438
                            $_.CTXvalstocws(); //#19438
                            $_.addtocws(); //#19438
                            $_.mode = $_.A; //#19439
                            $_.i = $_.msglen; //#19440
                            $_.done = true; //#19441
                            break; //#19442
                        } //#19442
                        if ((($_.remcws == 2) && ($_.remvals.length == 2)) && ($_.mode != $_.X)) { //#19455
                            $k[$j++] = Infinity; //#19446
                            $aload($geti($_.ctxvals, 0, $_.p)); //#19447
                            $aload($_.remvals); //#19448
                            $aload($get($get($_.encvals, $_.mode), $_.sft1)); //#19449
                            var _Ep = $a(); //#19449
                            $k[$j++] = _Ep; //#19450
                            $_.CTXvalstocws(); //#19450
                            $_.addtocws(); //#19450
                            $_.mode = $_.A; //#19451
                            $_.i = $_.msglen; //#19452
                            $_.done = true; //#19453
                            break; //#19454
                        } //#19454
                        if (($_.remcws == 2) && ($_.remvals.length == 1)) { //#19465
                            $k[$j++] = $geti($_.ctxvals, 0, $_.p); //#19458
                            $_.CTXvalstocws(); //#19458
                            $_.addtocws(); //#19458
                            $k[$j++] = $a([$_.unlcw]); //#19459
                            $_.addtocws(); //#19459
                            $k[$j++] = $get($_.Avals, $get($_.msg, $_.i)); //#19460
                            $_.addtocws(); //#19460
                            $_.mode = $_.A; //#19461
                            $_.i = $_.msglen; //#19462
                            $_.done = true; //#19463
                            break; //#19464
                        } //#19464
                        if (($_.remcws == 1) && ($_.remvals.length == 1)) { //#19474
                            $k[$j++] = $geti($_.ctxvals, 0, $_.p); //#19468
                            $_.CTXvalstocws(); //#19468
                            $_.addtocws(); //#19468
                            $k[$j++] = $get($_.Avals, $get($_.msg, $_.i)); //#19469
                            $_.addtocws(); //#19469
                            $_.mode = $_.A; //#19470
                            $_.i = $_.msglen; //#19471
                            $_.done = true; //#19472
                            break; //#19473
                        } //#19473
                    } //#19473
                } //#19473
                var _FO = $get($get($_.encvals, $_.mode), $get($_.msg, $_.i)); //#19477
                $puti($_.ctxvals, $_.p, _FO); //#19478
                $_.p = _FO.length + $_.p; //#19479
                $_.i = $_.i + 1; //#19480
            } //#19480
            if (!$_.done) { //#19505
                for (;;) { //#19489
                    if (($_.p % 3) == 0) { //#19486
                        break; //#19486
                    } //#19486
                    $_.i = $_.i - 1; //#19487
                    $_.p = $_.p - $get($get($_.encvals, $_.mode), $get($_.msg, $_.i)).length; //#19488
                } //#19488
                $k[$j++] = Infinity; //#19490
                $aload($geti($_.ctxvals, 0, $_.p)); //#19491
                var _Fh = $a(); //#19491
                $k[$j++] = _Fh; //#19492
                $_.CTXvalstocws(); //#19492
                $_.addtocws(); //#19492
                $k[$j++] = $a([$_.unlcw]); //#19493
                $_.addtocws(); //#19493
                $_.mode = $_.A; //#19494
                if (($_.i != $_.msglen) && $nt($get($_.isECI, $_.i))) { //#19504
                    if ($get($_.numD, $_.i) >= 2) { //#19502
                        var _Ft = $s(2); //#19498
                        $put(_Ft, 0, $get($_.msg, $_.i)); //#19498
                        $put(_Ft, 1, $get($_.msg, $_.i + 1)); //#19498
                        $k[$j++] = $get($_.Avals, _Ft); //#19498
                        $_.addtocws(); //#19498
                        $_.i = $_.i + 2; //#19499
                    } else { //#19502
                        $k[$j++] = $get($_.Avals, $get($_.msg, $_.i)); //#19501
                        $_.addtocws(); //#19501
                        $_.i = $_.i + 1; //#19502
                    } //#19502
                } //#19502
            } //#19502
        }; //#19502
        $_.Evalstocws = function() {
            $_.in = $k[--$j]; //#19510
            $_.inlen = $_.in.length; //#19511
            $_.outlen = ~~(Math.ceil(($_.in.length / 4) * 3)); //#19512
            $k[$j++] = Infinity; //#19513
            $aload($_.in); //#19513
            $k[$j++] = 0; //#19513
            $k[$j++] = 0; //#19513
            $k[$j++] = 0; //#19513
            $_.in = $a(); //#19513
            $k[$j++] = Infinity; //#19514
            for (var _GG = 0, _GF = $_.inlen - 1; _GG <= _GF; _GG += 4) { //#19520
                var _GI = $geti($_.in, _GG, 4); //#19516
                $k[$j++] = 0; //#19516
                for (var _GJ = 0, _GK = _GI.length; _GJ < _GK; _GJ++) { //#19516
                    var _GM = $k[--$j]; //#19516
                    $k[$j++] = $or(_GM, $get(_GI, _GJ)) << 6; //#19516
                } //#19516
                var _GO = $k[--$j] >>> 6; //#19517
                $k[$j++] = (_GO >>> 16) & 255; //#19519
                $k[$j++] = (_GO >>> 8) & 255; //#19519
                $k[$j++] = _GO & 255; //#19519
            } //#19519
            $astore($a($counttomark())); //#19521
            var _GR = $k[--$j]; //#19521
            var _GS = $k[--$j]; //#19521
            $k[$j++] = _GR; //#19521
            $k[$j++] = _GS; //#19521
            $j--; //#19521
            var _GV = $geti($k[--$j], 0, $_.outlen); //#19522
            $k[$j++] = _GV; //#19522
        }; //#19522
        $_.encE = function() {
            $_.p = 0; //#19526
            $_.edifactvals = $a(2100); //#19527
            for (;;) { //#19556
                if ($_.i == $_.msglen) { //#19531
                    break; //#19531
                } //#19531
                var _Gd = $get($_.Evals, $get($_.msg, $_.i)) !== undefined; //#19532
                if (!_Gd) { //#19532
                    break; //#19532
                } //#19532
                if (($_.p % 4) == 0) { //#19551
                    if (($_.msglen - $_.i) <= 2) { //#19549
                        $_.remcws = $get($_.numremcws, $_.j + ((~~($_.p / 4)) * 3)); //#19535
                        $k[$j++] = Infinity; //#19536
                        var _Gp = $geti($_.msg, $_.i, $_.msglen - $_.i); //#19537
                        for (var _Gq = 0, _Gr = _Gp.length; _Gq < _Gr; _Gq++) { //#19539
                            $aload($get($_.Avals, $get(_Gp, _Gq))); //#19538
                        } //#19538
                        $_.remvals = $a(); //#19538
                        if ((($_.remcws == 1) || ($_.remcws == 2)) && ($_.remvals.length <= $_.remcws)) { //#19548
                            $k[$j++] = $geti($_.edifactvals, 0, $_.p); //#19543
                            $_.Evalstocws(); //#19543
                            $_.addtocws(); //#19543
                            $k[$j++] = $_.remvals; //#19544
                            $_.addtocws(); //#19544
                            $_.mode = $_.A; //#19545
                            $_.i = $_.msglen; //#19546
                            break; //#19547
                        } //#19547
                    } //#19547
                    $_.lookup(); //#19550
                    if ($k[--$j] != $_.mode) { //#19550
                        break; //#19550
                    } //#19550
                } //#19550
                var _HC = $get($_.Evals, $get($_.msg, $_.i)); //#19552
                $puti($_.edifactvals, $_.p, _HC); //#19553
                $_.p = _HC.length + $_.p; //#19554
                $_.i = $_.i + 1; //#19555
            } //#19555
            if ($_.mode != $_.A) { //#19578
                $_.remcws = $f($get($_.numremcws, ($_.j + ((~~($_.p / 4)) * 3)) - 1) - 1); //#19560
                if (((($_.p % 4) != 0) || ($_.i != $_.msglen)) || ($_.remcws >= 3)) { //#19565
                    var _HT = $get($_.Evals, $_.unl); //#19562
                    $puti($_.edifactvals, $_.p, _HT); //#19563
                    $_.p = _HT.length + $_.p; //#19564
                } //#19564
                $k[$j++] = $geti($_.edifactvals, 0, $_.p); //#19566
                $_.Evalstocws(); //#19566
                $_.addtocws(); //#19566
                $_.mode = $_.A; //#19567
                if (($_.i != $_.msglen) && $nt($get($_.isECI, $_.i))) { //#19577
                    if ($get($_.numD, $_.i) >= 2) { //#19575
                        var _Hj = $s(2); //#19571
                        $put(_Hj, 0, $get($_.msg, $_.i)); //#19571
                        $put(_Hj, 1, $get($_.msg, $_.i + 1)); //#19571
                        $k[$j++] = $get($_.Avals, _Hj); //#19571
                        $_.addtocws(); //#19571
                        $_.i = $_.i + 2; //#19572
                    } else { //#19575
                        $k[$j++] = $get($_.Avals, $get($_.msg, $_.i)); //#19574
                        $_.addtocws(); //#19574
                        $_.i = $_.i + 1; //#19575
                    } //#19575
                } //#19575
            } //#19575
        }; //#19575
        $_.encB = function() {
            $_.p = 0; //#19583
            $_.bvals = $a(1558); //#19583
            for (;;) { //#19589
                if ($_.i == $_.msglen) { //#19584
                    break; //#19584
                } //#19584
                $_.lookup(); //#19585
                if ($k[--$j] != $_.mode) { //#19585
                    break; //#19585
                } //#19585
                $put($_.bvals, $_.p, $get($_.msg, $_.i)); //#19586
                $_.p = $_.p + 1; //#19587
                $_.i = $_.i + 1; //#19588
            } //#19588
            $_.remcws = $f($get($_.numremcws, $_.j + $_.p) - 1); //#19590
            $k[$j++] = Infinity; //#19591
            if (($_.remcws == 0) && ($_.i == $_.msglen)) { //#19595
                $k[$j++] = 0; //#19593
            } else { //#19595
                if ($_.p < 250) { //#19595
                    $k[$j++] = $_.p; //#19595
                } else { //#19595
                    $k[$j++] = (~~($_.p / 250)) + 249; //#19595
                    $k[$j++] = $_.p % 250; //#19595
                } //#19595
            } //#19595
            $aload($geti($_.bvals, 0, $_.p)); //#19597
            $_.bvals = $a(); //#19597
            for (var _IS = 0, _IR = $_.bvals.length - 1; _IS <= _IR; _IS += 1) { //#19604
                $_.p = _IS; //#19600
                var _IY = $f(((((($_.j + $_.p) + 1) * 149) % 255) + 1) + $get($_.bvals, $_.p)); //#19602
                $k[$j++] = _IY; //#19602
                if (_IY >= 256) { //#19602
                    var _IZ = $k[--$j]; //#19602
                    $k[$j++] = $f(_IZ - 256); //#19602
                } //#19602
                $put($_.bvals, $_.p, $k[--$j]); //#19603
            } //#19603
            $k[$j++] = $_.bvals; //#19605
            $_.addtocws(); //#19605
            $_.mode = $_.A; //#19606
        }; //#19606
        $_.cws = $a(1558); //#19610
        $_.mode = $_.A; //#19611
        $_.i = 0; //#19611
        $_.j = 0; //#19611
        for (;;) { //#19614
            if ($_.i >= $_.msglen) { //#19612
                break; //#19612
            } //#19612
            if ($_[$get($a(['encA', 'encCTX', 'encCTX', 'encCTX', 'encE', 'encB']), $_.mode)]() === true) {
                break;
            } //#19613
        } //#19613
        $_.cws = $geti($_.cws, 0, $_.j); //#19615
    } //#19615
    $_.datlen = $_.cws.length; //#19620
    $_.remcws = $f($get($_.numremcws, $_.j - 1) - 1); //#19621
    if ($_.remcws > 0) { //#19630
        $k[$j++] = Infinity; //#19623
        $aload($_.cws); //#19623
        for (var _Ix = 0, _Iy = $_.remcws; _Ix < _Iy; _Ix++) { //#19623
            $k[$j++] = 129; //#19623
        } //#19623
        $_.cws = $a(); //#19623
        for (var _J4 = $_.datlen + 1, _J3 = $f($f($_.datlen + $_.remcws) - 1); _J4 <= _J3; _J4 += 1) { //#19629
            $_.i = _J4; //#19625
            var _J6 = (((($_.i + 1) * 149) % 253) + 1) + 129; //#19627
            $k[$j++] = _J6; //#19627
            if (_J6 > 254) { //#19627
                var _J7 = $k[--$j]; //#19627
                $k[$j++] = $f(_J7 - 254); //#19627
            } //#19627
            $put($_.cws, $_.i, $k[--$j]); //#19628
        } //#19628
    } //#19628
    var _JC = $get($_.options, 'debugcws') !== undefined; //#19632
    if (_JC) { //#19632
        $k[$j++] = 'bwipp.debugcws#19632'; //#19632
        $k[$j++] = $_.cws; //#19632
        bwipp_raiseerror(); //#19632
    } //#19632
    var _JE = $_.metrics; //#19635
    for (var _JF = 0, _JG = _JE.length; _JF < _JG; _JF++) { //#19657
        $_.m = $get(_JE, _JF); //#19636
        $_.rows = $get($_.m, 0); //#19637
        $_.cols = $get($_.m, 1); //#19638
        $_.regh = $get($_.m, 2); //#19639
        $_.regv = $get($_.m, 3); //#19640
        $_.rscw = $get($_.m, 4); //#19641
        $_.rsbl = $get($_.m, 5); //#19642
        $_.doly = $get($_.m, 6); //#19643
        $_.mrows = $f($_.rows - (2 * $_.regh)); //#19644
        $_.mcols = $f($_.cols - (2 * $_.regv)); //#19645
        $_.rrows = ~~($_.mrows / $_.regh); //#19646
        $_.rcols = ~~($_.mcols / $_.regv); //#19647
        $_.ncws = $f((~~(($_.mrows * $_.mcols) / 8)) - $_.rscw); //#19648
        $_.okay = true; //#19649
        if ($_.cws.length != $_.ncws) { //#19650
            $_.okay = false; //#19650
        } //#19650
        if (($_.urows != 0) && ($_.urows != $_.rows)) { //#19651
            $_.okay = false; //#19651
        } //#19651
        if (($_.ucols != 0) && ($_.ucols != $_.cols)) { //#19652
            $_.okay = false; //#19652
        } //#19652
        if ($eq($_.format, "square") && $ne($_.rows, $_.cols)) { //#19653
            $_.okay = false; //#19653
        } //#19653
        if ($eq($_.format, "rectangle") && $eq($_.rows, $_.cols)) { //#19654
            $_.okay = false; //#19654
        } //#19654
        if ((!$_.dmre) && ($_.doly == 1)) { //#19655
            $_.okay = false; //#19655
        } //#19655
        if ($_.okay) { //#19656
            break; //#19656
        } //#19656
    } //#19656
    if (!$_.okay) { //#19661
        $k[$j++] = 'bwipp.datamatrixNoValidSymbol#19660'; //#19660
        $k[$j++] = "Maximum length exceeded or invalid size"; //#19660
        bwipp_raiseerror(); //#19660
    } //#19660
    $_.cwbs = $a($_.rsbl); //#19664
    $_.ecbs = $a($_.rsbl); //#19665
    for (var _K5 = 0, _K4 = $f($_.rsbl - 1); _K5 <= _K4; _K5 += 1) { //#19680
        $_.i = _K5; //#19667
        if ($_.cws.length != 1558) { //#19671
            $_.cwbsize = ~~($_.cws.length / $_.rsbl); //#19669
        } else { //#19671
            if ($_.i <= 7) { //#19671
                $_.cwbsize = 156; //#19671
            } else { //#19671
                $_.cwbsize = 155; //#19671
            } //#19671
        } //#19671
        $_.cwb = $a($_.cwbsize); //#19673
        for (var _KE = 0, _KD = $_.cwbsize - 1; _KE <= _KD; _KE += 1) { //#19677
            $_.j = _KE; //#19675
            $put($_.cwb, $_.j, $get($_.cws, $f(($_.j * $_.rsbl) + $_.i))); //#19676
        } //#19676
        $put($_.cwbs, $_.i, $_.cwb); //#19678
        $k[$j++] = $_.ecbs; //#19679
        $k[$j++] = $_.i; //#19679
        $k[$j++] = Infinity; //#19679
        for (var _KT = 0, _KU = ~~($_.rscw / $_.rsbl); _KT < _KU; _KT++) { //#19679
            $k[$j++] = 0; //#19679
        } //#19679
        var _KV = $a(); //#19679
        var _KW = $k[--$j]; //#19679
        $put($k[--$j], _KW, _KV); //#19679
    } //#19679
    if (!bwipp_datamatrix.__19687__) { //#19687
        $_ = Object.create($_); //#19687
        $k[$j++] = Infinity; //#19684
        $k[$j++] = 1; //#19684
        for (var _KY = 0, _KZ = 255; _KY < _KZ; _KY++) { //#19684
            var _Ka = $k[--$j]; //#19684
            var _Kb = _Ka * 2; //#19684
            $k[$j++] = _Ka; //#19684
            $k[$j++] = _Kb; //#19684
            if (_Kb >= 256) { //#19684
                var _Kc = $k[--$j]; //#19684
                $k[$j++] = _Kc ^ 301; //#19684
            } //#19684
        } //#19684
        $_.rsalog = $a(); //#19684
        $_.rslog = $a(256); //#19685
        for (var _Kf = 1; _Kf <= 255; _Kf += 1) { //#19686
            $put($_.rslog, $get($_.rsalog, _Kf), _Kf); //#19686
        } //#19686
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_datamatrix.$ctx[id] = $_[id]); //#19686
        bwipp_datamatrix.__19687__ = 1; //#19686
        $_ = Object.getPrototypeOf($_); //#19686
    } //#19686
    $_.rsprod = function() {
        var _Kk = $k[--$j]; //#19691
        var _Kl = $k[--$j]; //#19691
        $k[$j++] = _Kl; //#19695
        $k[$j++] = _Kk; //#19695
        if ((_Kk != 0) && (_Kl != 0)) { //#19694
            var _Ko = $get($_.rslog, $k[--$j]); //#19692
            var _Kt = $get($_.rsalog, $f(_Ko + $get($_.rslog, $k[--$j])) % 255); //#19692
            $k[$j++] = _Kt; //#19692
        } else { //#19694
            $j -= 2; //#19694
            $k[$j++] = 0; //#19694
        } //#19694
    }; //#19694
    $k[$j++] = Infinity; //#19699
    $k[$j++] = 1; //#19699
    for (var _Kw = 0, _Kx = ~~($_.rscw / $_.rsbl); _Kw < _Kx; _Kw++) { //#19699
        $k[$j++] = 0; //#19699
    } //#19699
    $_.coeffs = $a(); //#19699
    for (var _L2 = 1, _L1 = ~~($_.rscw / $_.rsbl); _L2 <= _L1; _L2 += 1) { //#19708
        $_.i = _L2; //#19701
        $put($_.coeffs, $_.i, $get($_.coeffs, $_.i - 1)); //#19702
        for (var _L9 = $_.i - 1; _L9 >= 1; _L9 -= 1) { //#19706
            $_.j = _L9; //#19704
            $k[$j++] = $_.coeffs; //#19705
            $k[$j++] = $_.j; //#19705
            $k[$j++] = $get($_.coeffs, $_.j - 1); //#19705
            $k[$j++] = $get($_.coeffs, $_.j); //#19705
            $k[$j++] = $get($_.rsalog, $_.i); //#19705
            $_.rsprod(); //#19705
            var _LL = $k[--$j]; //#19705
            var _LM = $k[--$j]; //#19705
            var _LN = $k[--$j]; //#19705
            $put($k[--$j], _LN, $xo(_LM, _LL)); //#19705
        } //#19705
        $k[$j++] = $_.coeffs; //#19707
        $k[$j++] = 0; //#19707
        $k[$j++] = $get($_.coeffs, 0); //#19707
        $k[$j++] = $get($_.rsalog, $_.i); //#19707
        $_.rsprod(); //#19707
        var _LV = $k[--$j]; //#19707
        var _LW = $k[--$j]; //#19707
        $put($k[--$j], _LW, _LV); //#19707
    } //#19707
    $_.coeffs = $geti($_.coeffs, 0, $_.coeffs.length - 1); //#19709
    for (var _Ld = 0, _Lc = $_.cwbs.length - 1; _Ld <= _Lc; _Ld += 1) { //#19725
        $_.i = _Ld; //#19713
        $_.cwb = $get($_.cwbs, $_.i); //#19714
        $_.ecb = $get($_.ecbs, $_.i); //#19715
        for (var _Lm = 0, _Ll = $_.cwb.length - 1; _Lm <= _Ll; _Lm += 1) { //#19724
            $_.t = $xo($get($_.cwb, _Lm), $get($_.ecb, 0)); //#19717
            for (var _Ls = $_.ecb.length - 1; _Ls >= 0; _Ls -= 1) { //#19723
                $_.j = _Ls; //#19719
                $_.p = ($_.ecb.length - $_.j) - 1; //#19720
                $k[$j++] = $_.ecb; //#19721
                $k[$j++] = $_.p; //#19721
                $k[$j++] = $_.t; //#19721
                $k[$j++] = $get($_.coeffs, $_.j); //#19721
                $_.rsprod(); //#19721
                var _M1 = $k[--$j]; //#19721
                var _M2 = $k[--$j]; //#19721
                $put($k[--$j], _M2, _M1); //#19721
                if ($_.j > 0) { //#19722
                    $put($_.ecb, $_.p, $xo($get($_.ecb, $_.p + 1), $get($_.ecb, $_.p))); //#19722
                } //#19722
            } //#19722
        } //#19722
    } //#19722
    if ($_.ncws == 1558) { //#19730
        $k[$j++] = Infinity; //#19729
        var _MF = $geti($_.ecbs, 8, 2); //#19729
        for (var _MG = 0, _MH = _MF.length; _MG < _MH; _MG++) { //#19729
            $k[$j++] = $get(_MF, _MG); //#19729
        } //#19729
        var _MK = $geti($_.ecbs, 0, 8); //#19729
        for (var _ML = 0, _MM = _MK.length; _ML < _MM; _ML++) { //#19729
            $k[$j++] = $get(_MK, _ML); //#19729
        } //#19729
        $_.ecbs = $a(); //#19729
    } //#19729
    $k[$j++] = Infinity; //#19733
    var _MP = $_.cws; //#19733
    for (var _MQ = 0, _MR = _MP.length; _MQ < _MR; _MQ++) { //#19733
        $k[$j++] = $get(_MP, _MQ); //#19733
    } //#19733
    for (var _MU = 0, _MV = $_.rscw; _MU < _MV; _MU++) { //#19733
        $k[$j++] = 0; //#19733
    } //#19733
    $_.cws = $a(); //#19733
    for (var _MZ = 0, _MY = $f($_.rscw - 1); _MZ <= _MY; _MZ += 1) { //#19737
        $_.i = _MZ; //#19735
        $put($_.cws, $f($_.ncws + $_.i), $get($get($_.ecbs, $_.i % $_.rsbl), ~~($_.i / $_.rsbl))); //#19736
    } //#19736
    $_.module = function() {
        $r(4, -1); //#19742
        var _Ml = $strcpy($s(8), "00000000"); //#19743
        $k[$j++] = _Ml; //#19743
        $k[$j++] = _Ml; //#19743
        $r(3, -1); //#19743
        var _Mo = $cvrs($s(8), $k[--$j], 2); //#19743
        $puti($k[--$j], 8 - _Mo.length, _Mo); //#19744
        for (var _Mq = 7; _Mq >= 0; _Mq -= 1) { //#19745
            var _Mr = $k[--$j]; //#19745
            $k[$j++] = $f($get(_Mr, _Mq) - 48); //#19745
            $k[$j++] = _Mr; //#19745
        } //#19745
        $j--; //#19745
        $r(11, -3); //#19746
        $forall($k[--$j], function() { //#19763
            if ($k[--$j]() === true) {
                return true;
            } //#19749
            var _Mv = $k[--$j]; //#19750
            var _Mw = $k[--$j]; //#19750
            $k[$j++] = _Mw; //#19753
            $k[$j++] = _Mv; //#19753
            if (_Mw < 0) { //#19753
                var _Mx = $k[--$j]; //#19751
                var _My = $k[--$j]; //#19751
                $k[$j++] = $f(_My + $_.mrows); //#19752
                $k[$j++] = $f(_Mx + ($f(4 - ($f($_.mrows + 4) % 8)))); //#19752
            } //#19752
            var _N1 = $k[--$j]; //#19754
            $k[$j++] = _N1; //#19757
            if (_N1 < 0) { //#19757
                var _N3 = $k[--$j]; //#19755
                var _N4 = $k[--$j]; //#19755
                $k[$j++] = $f(_N4 + ($f(4 - ($f($_.mcols + 4) % 8)))); //#19756
                $k[$j++] = $f(_N3 + $_.mcols); //#19756
            } //#19756
            var _N6 = $k[--$j]; //#19758
            var _N7 = $k[--$j]; //#19758
            $k[$j++] = _N7; //#19760
            $k[$j++] = _N6; //#19760
            if (_N7 >= $_.mrows) { //#19760
                var _N9 = $k[--$j]; //#19759
                var _NA = $k[--$j]; //#19759
                $k[$j++] = $f(_NA - $_.mrows); //#19759
                $k[$j++] = _N9; //#19759
            } //#19759
            var _NC = $k[--$j]; //#19761
            var _ND = $k[--$j]; //#19761
            $k[$j++] = $_.mmat; //#19762
            $k[$j++] = $f(_NC + (_ND * $_.mcols)); //#19762
            $r(5, -1); //#19762
            var _NG = $k[--$j]; //#19762
            var _NH = $k[--$j]; //#19762
            $put($k[--$j], _NH, _NG); //#19762
        }); //#19762
    }; //#19762
    var _NZ = $a([function() {
        var _NJ = $k[--$j]; //#19768
        var _NK = $k[--$j]; //#19768
        $k[$j++] = _NK; //#19768
        $k[$j++] = _NJ; //#19768
        $k[$j++] = $f(_NK - 2); //#19768
        $k[$j++] = $f(_NJ - 2); //#19768
    }, function() {
        var _NL = $k[--$j]; //#19768
        var _NM = $k[--$j]; //#19768
        $k[$j++] = _NM; //#19768
        $k[$j++] = _NL; //#19768
        $k[$j++] = $f(_NM - 2); //#19768
        $k[$j++] = $f(_NL - 1); //#19768
    }, function() {
        var _NN = $k[--$j]; //#19769
        var _NO = $k[--$j]; //#19769
        $k[$j++] = _NO; //#19769
        $k[$j++] = _NN; //#19769
        $k[$j++] = $f(_NO - 1); //#19769
        $k[$j++] = $f(_NN - 2); //#19769
    }, function() {
        var _NP = $k[--$j]; //#19769
        var _NQ = $k[--$j]; //#19769
        $k[$j++] = _NQ; //#19769
        $k[$j++] = _NP; //#19769
        $k[$j++] = $f(_NQ - 1); //#19769
        $k[$j++] = $f(_NP - 1); //#19769
    }, function() {
        var _NR = $k[--$j]; //#19770
        var _NS = $k[--$j]; //#19770
        $k[$j++] = _NS; //#19770
        $k[$j++] = _NR; //#19770
        $k[$j++] = $f(_NS - 1); //#19770
        $k[$j++] = _NR; //#19770
    }, function() {
        var _NT = $k[--$j]; //#19770
        var _NU = $k[--$j]; //#19770
        $k[$j++] = _NU; //#19770
        $k[$j++] = _NT; //#19770
        $k[$j++] = _NU; //#19770
        $k[$j++] = $f(_NT - 2); //#19770
    }, function() {
        var _NV = $k[--$j]; //#19771
        var _NW = $k[--$j]; //#19771
        $k[$j++] = _NW; //#19771
        $k[$j++] = _NV; //#19771
        $k[$j++] = _NW; //#19771
        $k[$j++] = $f(_NV - 1); //#19771
    }, function() {
        var _NX = $k[--$j]; //#19771
        var _NY = $k[--$j]; //#19771
        $k[$j++] = _NY; //#19771
        $k[$j++] = _NX; //#19771
        $k[$j++] = _NY; //#19771
        $k[$j++] = _NX; //#19771
    }]); //#19771
    $_.dmn = _NZ; //#19772
    var _Ni = $a([function() {
        $k[$j++] = $f($_.mrows - 1); //#19775
        $k[$j++] = 0; //#19775
    }, function() {
        $k[$j++] = $f($_.mrows - 1); //#19775
        $k[$j++] = 1; //#19775
    }, function() {
        $k[$j++] = $f($_.mrows - 1); //#19776
        $k[$j++] = 2; //#19776
    }, function() {
        $k[$j++] = 0; //#19776
        $k[$j++] = $f($_.mcols - 2); //#19776
    }, function() {
        $k[$j++] = 0; //#19777
        $k[$j++] = $f($_.mcols - 1); //#19777
    }, function() {
        $k[$j++] = 1; //#19777
        $k[$j++] = $f($_.mcols - 1); //#19777
    }, function() {
        $k[$j++] = 2; //#19778
        $k[$j++] = $f($_.mcols - 1); //#19778
    }, function() {
        $k[$j++] = 3; //#19778
        $k[$j++] = $f($_.mcols - 1); //#19778
    }]); //#19778
    $_.dmc1 = _Ni; //#19779
    var _Nr = $a([function() {
        $k[$j++] = $f($_.mrows - 3); //#19782
        $k[$j++] = 0; //#19782
    }, function() {
        $k[$j++] = $f($_.mrows - 2); //#19782
        $k[$j++] = 0; //#19782
    }, function() {
        $k[$j++] = $f($_.mrows - 1); //#19783
        $k[$j++] = 0; //#19783
    }, function() {
        $k[$j++] = 0; //#19783
        $k[$j++] = $f($_.mcols - 4); //#19783
    }, function() {
        $k[$j++] = 0; //#19784
        $k[$j++] = $f($_.mcols - 3); //#19784
    }, function() {
        $k[$j++] = 0; //#19784
        $k[$j++] = $f($_.mcols - 2); //#19784
    }, function() {
        $k[$j++] = 0; //#19785
        $k[$j++] = $f($_.mcols - 1); //#19785
    }, function() {
        $k[$j++] = 1; //#19785
        $k[$j++] = $f($_.mcols - 1); //#19785
    }]); //#19785
    $_.dmc2 = _Nr; //#19786
    var _O0 = $a([function() {
        $k[$j++] = $f($_.mrows - 3); //#19789
        $k[$j++] = 0; //#19789
    }, function() {
        $k[$j++] = $f($_.mrows - 2); //#19789
        $k[$j++] = 0; //#19789
    }, function() {
        $k[$j++] = $f($_.mrows - 1); //#19790
        $k[$j++] = 0; //#19790
    }, function() {
        $k[$j++] = 0; //#19790
        $k[$j++] = $f($_.mcols - 2); //#19790
    }, function() {
        $k[$j++] = 0; //#19791
        $k[$j++] = $f($_.mcols - 1); //#19791
    }, function() {
        $k[$j++] = 1; //#19791
        $k[$j++] = $f($_.mcols - 1); //#19791
    }, function() {
        $k[$j++] = 2; //#19792
        $k[$j++] = $f($_.mcols - 1); //#19792
    }, function() {
        $k[$j++] = 3; //#19792
        $k[$j++] = $f($_.mcols - 1); //#19792
    }]); //#19792
    $_.dmc3 = _O0; //#19793
    var _OA = $a([function() {
        $k[$j++] = $f($_.mrows - 1); //#19796
        $k[$j++] = 0; //#19796
    }, function() {
        $k[$j++] = $f($_.mrows - 1); //#19796
        $k[$j++] = $f($_.mcols - 1); //#19796
    }, function() {
        $k[$j++] = 0; //#19797
        $k[$j++] = $f($_.mcols - 3); //#19797
    }, function() {
        $k[$j++] = 0; //#19797
        $k[$j++] = $f($_.mcols - 2); //#19797
    }, function() {
        $k[$j++] = 0; //#19798
        $k[$j++] = $f($_.mcols - 1); //#19798
    }, function() {
        $k[$j++] = 1; //#19798
        $k[$j++] = $f($_.mcols - 3); //#19798
    }, function() {
        $k[$j++] = 1; //#19799
        $k[$j++] = $f($_.mcols - 2); //#19799
    }, function() {
        $k[$j++] = 1; //#19799
        $k[$j++] = $f($_.mcols - 1); //#19799
    }]); //#19799
    $_.dmc4 = _OA; //#19800
    $k[$j++] = Infinity; //#19802
    for (var _OD = 0, _OE = $_.mrows * $_.mcols; _OD < _OE; _OD++) { //#19802
        $k[$j++] = -1; //#19802
    } //#19802
    $_.mmat = $a(); //#19802
    for (var _OH = $_.cws.length - 1; _OH >= 0; _OH -= 1) { //#19803
        $k[$j++] = $get($_.cws, _OH); //#19803
    } //#19803
    $k[$j++] = 4; //#19843
    $k[$j++] = 0; //#19843
    for (;;) { //#19843
        var _OK = $k[--$j]; //#19806
        var _OL = $k[--$j]; //#19806
        $k[$j++] = _OL; //#19808
        $k[$j++] = _OK; //#19808
        if ((_OK == 0) && (_OL == $_.mrows)) { //#19808
            $k[$j++] = $_.dmc1; //#19807
            $_.module(); //#19807
        } //#19807
        var _OO = $k[--$j]; //#19809
        var _OP = $k[--$j]; //#19809
        $k[$j++] = _OP; //#19811
        $k[$j++] = _OO; //#19811
        if (((_OO == 0) && (_OP == $f($_.mrows - 2))) && (($_.mcols % 4) != 0)) { //#19811
            $k[$j++] = $_.dmc2; //#19810
            $_.module(); //#19810
        } //#19810
        var _OT = $k[--$j]; //#19812
        var _OU = $k[--$j]; //#19812
        $k[$j++] = _OU; //#19814
        $k[$j++] = _OT; //#19814
        if (((_OT == 0) && (_OU == $f($_.mrows - 2))) && (($_.mcols % 8) == 4)) { //#19814
            $k[$j++] = $_.dmc3; //#19813
            $_.module(); //#19813
        } //#19813
        var _OY = $k[--$j]; //#19815
        var _OZ = $k[--$j]; //#19815
        $k[$j++] = _OZ; //#19817
        $k[$j++] = _OY; //#19817
        if (((_OY == 2) && (_OZ == $f($_.mrows + 4))) && (($_.mcols % 8) == 0)) { //#19817
            $k[$j++] = $_.dmc4; //#19816
            $_.module(); //#19816
        } //#19816
        for (;;) { //#19827
            var _Od = $k[--$j]; //#19820
            var _Oe = $k[--$j]; //#19820
            $k[$j++] = _Oe; //#19824
            $k[$j++] = _Od; //#19824
            if ((_Od >= 0) && (_Oe < $_.mrows)) { //#19824
                var _Og = $k[--$j]; //#19821
                var _Oh = $k[--$j]; //#19821
                $k[$j++] = _Oh; //#19823
                $k[$j++] = _Og; //#19823
                if ($get($_.mmat, $f(_Og + (_Oh * $_.mcols))) == -1) { //#19823
                    $k[$j++] = $_.dmn; //#19822
                    $_.module(); //#19822
                } //#19822
            } //#19822
            var _Om = $k[--$j]; //#19825
            var _On = $k[--$j]; //#19825
            $k[$j++] = $f(_On - 2); //#19826
            $k[$j++] = $f(_Om + 2); //#19826
            if (!(($f(_Om + 2) < $_.mcols) && ($f(_On - 2) >= 0))) { //#19826
                break; //#19826
            } //#19826
        } //#19826
        var _Op = $k[--$j]; //#19828
        var _Oq = $k[--$j]; //#19828
        $k[$j++] = $f(_Oq + 1); //#19838
        $k[$j++] = $f(_Op + 3); //#19838
        for (;;) { //#19838
            var _Or = $k[--$j]; //#19831
            var _Os = $k[--$j]; //#19831
            $k[$j++] = _Os; //#19835
            $k[$j++] = _Or; //#19835
            if ((_Or < $_.mcols) && (_Os >= 0)) { //#19835
                var _Ou = $k[--$j]; //#19832
                var _Ov = $k[--$j]; //#19832
                $k[$j++] = _Ov; //#19834
                $k[$j++] = _Ou; //#19834
                if ($get($_.mmat, $f(_Ou + (_Ov * $_.mcols))) == -1) { //#19834
                    $k[$j++] = $_.dmn; //#19833
                    $_.module(); //#19833
                } //#19833
            } //#19833
            var _P0 = $k[--$j]; //#19836
            var _P1 = $k[--$j]; //#19836
            $k[$j++] = $f(_P1 + 2); //#19837
            $k[$j++] = $f(_P0 - 2); //#19837
            if (!(($f(_P0 - 2) >= 0) && ($f(_P1 + 2) < $_.mrows))) { //#19837
                break; //#19837
            } //#19837
        } //#19837
        var _P3 = $k[--$j]; //#19839
        var _P4 = $k[--$j]; //#19839
        $k[$j++] = $f(_P4 + 3); //#19841
        $k[$j++] = $f(_P3 + 1); //#19841
        if (!(($f(_P3 + 1) < $_.mcols) || ($f(_P4 + 3) < $_.mrows))) { //#19841
            $j -= 2; //#19841
            break; //#19841
        } //#19841
    } //#19841
    if ($get($_.mmat, $f(($_.mrows * $_.mcols) - 1)) == -1) { //#19849
        $puti($_.mmat, $f(($_.mrows * $f($_.mcols - 1)) - 2), $a([1, 0])); //#19847
        $puti($_.mmat, $f(($_.mrows * $_.mcols) - 2), $a([0, 1])); //#19848
    } //#19848
    $_.pixs = $a($_.rows * $_.cols); //#19852
    $_.cwpos = 0; //#19853
    for (var _PO = 0, _PN = $f($_.rows - 1); _PO <= _PN; _PO += 1) { //#19869
        $_.i = _PO; //#19855
        if (($_.i % ($_.rrows + 2)) == 0) { //#19856
            $k[$j++] = $_.pixs; //#19856
            $k[$j++] = $_.i * $_.cols; //#19856
            $k[$j++] = Infinity; //#19856
            for (var _PV = 0, _PW = ~~($_.cols / 2); _PV < _PW; _PV++) { //#19856
                $k[$j++] = 1; //#19856
                $k[$j++] = 0; //#19856
            } //#19856
            var _PX = $a(); //#19856
            var _PY = $k[--$j]; //#19856
            $puti($k[--$j], _PY, _PX); //#19856
        } //#19856
        if (($_.i % ($_.rrows + 2)) == ($_.rrows + 1)) { //#19857
            $k[$j++] = $_.pixs; //#19857
            $k[$j++] = $_.i * $_.cols; //#19857
            $k[$j++] = Infinity; //#19857
            for (var _Ph = 0, _Pi = $_.cols; _Ph < _Pi; _Ph++) { //#19857
                $k[$j++] = 1; //#19857
            } //#19857
            var _Pj = $a(); //#19857
            var _Pk = $k[--$j]; //#19857
            $puti($k[--$j], _Pk, _Pj); //#19857
        } //#19857
        if ((($_.i % ($_.rrows + 2)) != 0) && (($_.i % ($_.rrows + 2)) != ($_.rrows + 1))) { //#19868
            for (var _Pt = 0, _Ps = $f($_.cols - 1); _Pt <= _Ps; _Pt += 1) { //#19867
                $_.j = _Pt; //#19860
                if (($_.j % ($_.rcols + 2)) == 0) { //#19861
                    $put($_.pixs, $f(($_.i * $_.cols) + $_.j), 1); //#19861
                } //#19861
                if (($_.j % ($_.rcols + 2)) == ($_.rcols + 1)) { //#19862
                    $put($_.pixs, $f(($_.i * $_.cols) + $_.j), $_.i % 2); //#19862
                } //#19862
                if ((($_.j % ($_.rcols + 2)) != 0) && (($_.j % ($_.rcols + 2)) != ($_.rcols + 1))) { //#19866
                    $put($_.pixs, $f(($_.i * $_.cols) + $_.j), $get($_.mmat, $_.cwpos)); //#19864
                    $_.cwpos = $_.cwpos + 1; //#19865
                } //#19865
            } //#19865
        } //#19865
    } //#19865
    var _QR = new Map([
        ["ren", 'renmatrix'],
        ["pixs", $_.pixs],
        ["pixx", $_.cols],
        ["pixy", $_.rows],
        ["height", ($_.rows * 2) / 72],
        ["width", ($_.cols * 2) / 72],
        ["borderleft", 1],
        ["borderright", 1],
        ["bordertop", 1],
        ["borderbottom", 1],
        ["opt", $_.options]
    ]); //#19883
    $k[$j++] = _QR; //#19886
    if (!$_.dontdraw) { //#19886
        bwipp_renmatrix(); //#19886
    } //#19886
    $_ = Object.getPrototypeOf($_); //#19888
    $_ = Object.getPrototypeOf($_); //#19890
} //bwipp_datamatrix
function bwipp_datamatrixrectangular() {
    $_ = Object.create($_); //#19919
    $_.dontdraw = false; //#19922
    $k[$j++] = $_; //#19924
    bwipp_processoptions(); //#19924
    $_.options = $k[--$j]; //#19924
    $_.barcode = $k[--$j]; //#19925
    $put($_.options, "dontdraw", true); //#19928
    $put($_.options, "format", "rectangle"); //#19929
    $k[$j++] = 'args'; //#19931
    $k[$j++] = $_.barcode; //#19931
    $k[$j++] = $_.options; //#19931
    bwipp_datamatrix(); //#19931
    var _6 = $k[--$j]; //#19931
    $_[$k[--$j]] = _6; //#19931
    $put($_.args, "opt", $_.options); //#19933
    $k[$j++] = $_.args; //#19936
    if (!$_.dontdraw) { //#19936
        bwipp_renmatrix(); //#19936
    } //#19936
    $_ = Object.getPrototypeOf($_); //#19938
} //bwipp_datamatrixrectangular
function bwipp_datamatrixrectangularextension() {
    $_ = Object.create($_); //#19967
    $_.dontdraw = false; //#19970
    $k[$j++] = $_; //#19972
    bwipp_processoptions(); //#19972
    $_.options = $k[--$j]; //#19972
    $_.barcode = $k[--$j]; //#19973
    $put($_.options, "dontdraw", true); //#19976
    $put($_.options, "dmre", true); //#19977
    $k[$j++] = 'args'; //#19979
    $k[$j++] = $_.barcode; //#19979
    $k[$j++] = $_.options; //#19979
    bwipp_datamatrix(); //#19979
    var _6 = $k[--$j]; //#19979
    $_[$k[--$j]] = _6; //#19979
    $put($_.args, "opt", $_.options); //#19981
    $k[$j++] = $_.args; //#19984
    if (!$_.dontdraw) { //#19984
        bwipp_renmatrix(); //#19984
    } //#19984
    $_ = Object.getPrototypeOf($_); //#19986
} //bwipp_datamatrixrectangularextension
function bwipp_mailmark() {
    $_ = Object.create($_); //#20016
    $_.type = "unset"; //#20019
    $_.parse = false; //#20020
    $_.dontdraw = false; //#20021
    $k[$j++] = $_; //#20023
    bwipp_processoptions(); //#20023
    $_.options = $k[--$j]; //#20023
    $_.barcode = $k[--$j]; //#20024
    var _3 = new Map([
        ["parse", $_.parse],
        ["parseonly", true],
        ["parsefnc", false]
    ]); //#20030
    $_.fncvals = _3; //#20031
    $k[$j++] = 'barcode'; //#20032
    $k[$j++] = $_.barcode; //#20032
    $k[$j++] = $_.fncvals; //#20032
    bwipp_parseinput(); //#20032
    var _6 = $k[--$j]; //#20032
    $_[$k[--$j]] = _6; //#20032
    $_.barlen = $_.barcode.length; //#20033
    delete $_.options["parse"]; //#20034
    var _A = $_['type']; //#20037
    if ($ne(_A, "7") && ($ne(_A, "9") && $ne(_A, "29"))) { //#20039
        $k[$j++] = 'bwipp.mailmarkBadType#20038'; //#20038
        $k[$j++] = "Royal Mail Mailmark type must be 7, 9 or 29"; //#20038
        bwipp_raiseerror(); //#20038
    } //#20038
    var _B = new Map([
        ["7", "24x24"],
        ["9", "32x32"],
        ["29", "16x48"]
    ]); //#20043
    $_.version = $get(_B, $_['type']); //#20044
    var _E = new Map([
        ["7", "square"],
        ["9", "square"],
        ["29", "rectangle"]
    ]); //#20049
    $_.format = $get(_E, $_['type']); //#20050
    if ($_.barcode.length < 45) { //#20055
        $k[$j++] = 'bwipp.mailmarkBadLength#20054'; //#20054
        $k[$j++] = "Royal Mail Mailmark must contain at least 45 characters of Mailmark formatted data, including any required space padding"; //#20054
        bwipp_raiseerror(); //#20054
    } //#20054
    if ($ne($geti($_.barcode, 0, 4), "JGB ")) { //#20058
        $k[$j++] = 'bwipp.mailmarkBadIndicator#20057'; //#20057
        $k[$j++] = "Royal Mail Mailmark must begin with JGB<space> identifier"; //#20057
        bwipp_raiseerror(); //#20057
    } //#20057
    $put($_.options, "dontdraw", true); //#20061
    $put($_.options, "version", $_.version); //#20062
    $put($_.options, "format", $_.format); //#20063
    $put($_.options, "c40headerlength", 45); //#20064
    $k[$j++] = 'args'; //#20065
    $k[$j++] = $_.barcode; //#20065
    $k[$j++] = $_.options; //#20065
    bwipp_datamatrix(); //#20065
    var _S = $k[--$j]; //#20065
    $_[$k[--$j]] = _S; //#20065
    $put($_.args, "opt", $_.options); //#20067
    $k[$j++] = $_.args; //#20070
    if (!$_.dontdraw) { //#20070
        bwipp_renmatrix(); //#20070
    } //#20070
    $_ = Object.getPrototypeOf($_); //#20072
} //bwipp_mailmark
function bwipp_qrcode() {
    $_ = Object.create($_); //#20103
    $_.dontdraw = false; //#20106
    $_.format = "unset"; //#20107
    $_.version = "unset"; //#20108
    $_.eclevel = "unset"; //#20109
    $_.parse = false; //#20110
    $_.parsefnc = false; //#20111
    $_.mask = -1; //#20112
    $_.suppresskanjimode = true; //#20113
    $k[$j++] = $_; //#20115
    bwipp_processoptions(); //#20115
    $_.options = $k[--$j]; //#20115
    $_.barcode = $k[--$j]; //#20116
    bwipp_loadctx(bwipp_qrcode); //#20118
    if ($eq($_.barcode, "")) { //#20122
        $k[$j++] = 'bwipp.qrcodeEmptyData#20121'; //#20121
        $k[$j++] = "The data must not be empty"; //#20121
        bwipp_raiseerror(); //#20121
    } //#20121
    if ($ne($_.version, "unset")) { //#20133
        if ($eq($_.format, "unset")) { //#20131
            $k[$j++] = "full"; //#20128
            if ($eq($geti($_.version, 0, 1), "M")) { //#20128
                $j--; //#20128
                $k[$j++] = "micro"; //#20128
            } //#20128
            if ($eq($geti($_.version, 0, 1), "R")) { //#20129
                $j--; //#20129
                $k[$j++] = "rmqr"; //#20129
            } //#20129
            $_.format = $k[--$j]; //#20130
        } //#20130
    } else { //#20133
        if ($eq($_.format, "unset")) { //#20133
            $_.format = "full"; //#20133
        } //#20133
    } //#20133
    if ($ne($_.format, "full") && ($ne($_.format, "micro") && $ne($_.format, "rmqr"))) { //#20138
        $k[$j++] = 'bwipp.qrcodeInvalidFormat#20137'; //#20137
        $k[$j++] = "The format must be either full, micro or rmqr"; //#20137
        bwipp_raiseerror(); //#20137
    } //#20137
    if ($eq($_.format, "rmqr") && $eq($_.version, "unset")) { //#20142
        $k[$j++] = 'bwipp.qrcodeRMQRwithoutVersion#20141'; //#20141
        $k[$j++] = "A version must be provided for RMQR"; //#20141
        bwipp_raiseerror(); //#20141
    } //#20141
    if ($eq($_.eclevel, "unset")) { //#20145
        $k[$j++] = 'eclevel'; //#20145
        if ($ne($_.format, "micro")) { //#20145
            $k[$j++] = "M"; //#20145
        } else { //#20145
            $k[$j++] = "L"; //#20145
        } //#20145
        var _I = $k[--$j]; //#20145
        $_[$k[--$j]] = _I; //#20145
    } //#20145
    if ($ne($_.eclevel, "L") && ($ne($_.eclevel, "M") && ($ne($_.eclevel, "Q") && $ne($_.eclevel, "H")))) { //#20149
        $k[$j++] = 'bwipp.qrcodeInvalidEClevel#20148'; //#20148
        $k[$j++] = "Error correction level must be either L, M, Q, or H"; //#20148
        bwipp_raiseerror(); //#20148
    } //#20148
    if (($_.mask != -1) && $eq($_.format, "rmqr")) { //#20153
        $k[$j++] = 'bwipp.qrcodeRMQRmask#20152'; //#20152
        $k[$j++] = "A mask cannot be supplied for RMQR"; //#20152
        bwipp_raiseerror(); //#20152
    } //#20152
    if ($_.mask != -1) { //#20159
        var _U = $eq($_.format, "full") ? 8 : 4; //#20156
        if (($_.mask < 1) || ($_.mask > _U)) { //#20158
            $k[$j++] = 'bwipp.qrcodeBadMask#20157'; //#20157
            $k[$j++] = "An invalid mask was supplied"; //#20157
            bwipp_raiseerror(); //#20157
        } //#20157
    } //#20157
    $_.fn1 = -1; //#20162
    var _Y = new Map([
        ["parse", $_.parse],
        ["parsefnc", $_.parsefnc],
        ["eci", true],
        ["FNC1", $_.fn1]
    ]); //#20167
    $_.fncvals = _Y; //#20168
    $k[$j++] = 'msg'; //#20169
    $k[$j++] = $_.barcode; //#20169
    $k[$j++] = $_.fncvals; //#20169
    bwipp_parseinput(); //#20169
    var _b = $k[--$j]; //#20169
    $_[$k[--$j]] = _b; //#20169
    $_.msglen = $_.msg.length; //#20170
    $_.fnc1first = false; //#20173
    if ($_.msglen > 0) { //#20180
        if ($get($_.msg, 0) == $_.fn1) { //#20179
            $_.fnc1first = true; //#20176
            $k[$j++] = Infinity; //#20177
            var _k = $geti($_.msg, 1, $_.msglen - 1); //#20177
            for (var _l = 0, _m = _k.length; _l < _m; _l++) { //#20177
                var _n = $get(_k, _l); //#20177
                $k[$j++] = _n; //#20177
                if (_n == 37) { //#20177
                    var _o = $k[--$j]; //#20177
                    $k[$j++] = _o; //#20177
                    $k[$j++] = _o; //#20177
                } //#20177
            } //#20177
            $_.msg = $a(); //#20177
            $_.msglen = $_.msg.length; //#20178
        } //#20178
    } //#20178
    if (!bwipp_qrcode.__20301__) { //#20301
        $_ = Object.create($_); //#20301
        var _r = $a(['v1to9', 'v10to26', 'v27to40', 'vM1', 'vM2', 'vM3', 'vM4', 'vR7x43', 'vR7x59', 'vR7x77', 'vR7x99', 'vR7x139', 'vR9x43', 'vR9x59', 'vR9x77', 'vR9x99', 'vR9x139', 'vR11x27', 'vR11x43', 'vR11x59', 'vR11x77', 'vR11x99', 'vR11x139', 'vR13x27', 'vR13x43', 'vR13x59', 'vR13x77', 'vR13x99', 'vR13x139', 'vR15x43', 'vR15x59', 'vR15x77', 'vR15x99', 'vR15x139', 'vR17x43', 'vR17x59', 'vR17x77', 'vR17x99', 'vR17x139']); //#20193
        $k[$j++] = 0; //#20194
        for (var _s = 0, _t = _r.length; _s < _t; _s++) { //#20194
            var _v = $k[--$j]; //#20194
            $_[$get(_r, _s)] = _v; //#20194
            $k[$j++] = $f(_v + 1); //#20194
        } //#20194
        $j--; //#20194
        $_.N = 0; //#20200
        $_.A = 1; //#20200
        $_.B = 2; //#20200
        $_.K = 3; //#20200
        $_.E = 4; //#20200
        $k[$j++] = Infinity; //#20202
        $k[$j++] = Infinity; //#20203
        for (var _w = 48; _w <= 57; _w += 1) { //#20204
            $k[$j++] = _w; //#20204
        } //#20204
        var _x = $a(); //#20204
        for (var _y = 0, _z = _x.length; _y < _z; _y++) { //#20205
            $k[$j++] = $get(_x, _y); //#20205
            $k[$j++] = -1; //#20205
        } //#20205
        $_.Nexcl = $d(); //#20206
        $k[$j++] = Infinity; //#20208
        $k[$j++] = Infinity; //#20209
        $k[$j++] = 32; //#20211
        $k[$j++] = 36; //#20211
        $k[$j++] = 37; //#20211
        $k[$j++] = 42; //#20211
        $k[$j++] = 43; //#20211
        $k[$j++] = 45; //#20211
        $k[$j++] = 46; //#20211
        $k[$j++] = 47; //#20211
        $k[$j++] = 58; //#20211
        for (var _12 = 65; _12 <= 90; _12 += 1) { //#20211
            $k[$j++] = _12; //#20211
        } //#20211
        $k[$j++] = $_.fn1; //#20212
        var _14 = $a(); //#20212
        for (var _15 = 0, _16 = _14.length; _15 < _16; _15++) { //#20213
            $k[$j++] = $get(_14, _15); //#20213
            $k[$j++] = -1; //#20213
        } //#20213
        $_.Aexcl = $d(); //#20214
        $k[$j++] = Infinity; //#20218
        $k[$j++] = Infinity; //#20219
        for (var _19 = 129; _19 <= 159; _19 += 1) { //#20220
            $k[$j++] = _19; //#20220
        } //#20220
        for (var _1A = 224; _1A <= 235; _1A += 1) { //#20221
            $k[$j++] = _1A; //#20221
        } //#20221
        var _1B = $a(); //#20221
        for (var _1C = 0, _1D = _1B.length; _1C < _1D; _1C++) { //#20222
            $k[$j++] = $get(_1B, _1C); //#20222
            $k[$j++] = -1; //#20222
        } //#20222
        $_.Kexcl = $d(); //#20223
        $k[$j++] = Infinity; //#20225
        $k[$j++] = $a(["0001", "0010", "0100", "1000", "0111"]); //#20236
        $k[$j++] = $a(["0001", "0010", "0100", "1000", "0111"]); //#20236
        $k[$j++] = $a(["0001", "0010", "0100", "1000", "0111"]); //#20236
        $k[$j++] = $a(["", -1, -1, -1, -1]); //#20236
        $k[$j++] = $a(["0", "1", -1, -1, -1]); //#20236
        $k[$j++] = $a(["00", "01", "10", "11", -1]); //#20236
        $k[$j++] = $a(["000", "001", "010", "011", -1]); //#20236
        for (var _1N = 0, _1O = 32; _1N < _1O; _1N++) { //#20236
            $k[$j++] = $a(["001", "010", "011", "100", "111"]); //#20235
        } //#20235
        $_.mids = $a(); //#20235
        $_.cclens = $a([$a([10, 9, 8, 8]), $a([12, 11, 16, 10]), $a([14, 13, 16, 12]), $a([3, -1, -1, -1]), $a([4, 3, -1, -1]), $a([5, 4, 4, 3]), $a([6, 5, 5, 4]), $a([4, 3, 3, 2]), $a([5, 5, 4, 3]), $a([6, 5, 5, 4]), $a([7, 6, 5, 5]), $a([7, 6, 6, 5]), $a([5, 5, 4, 3]), $a([6, 5, 5, 4]), $a([7, 6, 5, 5]), $a([7, 6, 6, 5]), $a([8, 7, 6, 6]), $a([4, 4, 3, 2]), $a([6, 5, 5, 4]), $a([7, 6, 5, 5]), $a([7, 6, 6, 5]), $a([8, 7, 6, 6]), $a([8, 7, 7, 6]), $a([5, 5, 4, 3]), $a([6, 6, 5, 5]), $a([7, 6, 6, 5]), $a([7, 7, 6, 6]), $a([8, 7, 7, 6]), $a([8, 8, 7, 7]), $a([7, 6, 6, 5]), $a([7, 7, 6, 5]), $a([8, 7, 7, 6]), $a([8, 7, 7, 6]), $a([9, 8, 7, 7]), $a([7, 6, 6, 5]), $a([8, 7, 6, 6]), $a([8, 7, 7, 6]), $a([8, 8, 7, 6]), $a([9, 8, 8, 7])]); //#20279
        $k[$j++] = Infinity; //#20281
        for (var _25 = 0, _26 = 3; _25 < _26; _25++) { //#20284
            $k[$j++] = 4; //#20283
        } //#20283
        $k[$j++] = 3; //#20291
        $k[$j++] = 5; //#20291
        $k[$j++] = 7; //#20291
        $k[$j++] = 9; //#20291
        for (var _27 = 0, _28 = 32; _27 < _28; _27++) { //#20291
            $k[$j++] = 3; //#20290
        } //#20290
        $_.termlens = $a(); //#20290
        $_.padstrs = $a(["11101100", "00010001"]); //#20294
        $_.charmap = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:"; //#20297
        $_.charvals = new Map; //#20298
        for (var _2B = 0; _2B <= 44; _2B += 1) { //#20299
            $put($_.charvals, $get($_.charmap, _2B), _2B); //#20299
        } //#20299
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_qrcode.$ctx[id] = $_[id]); //#20299
        bwipp_qrcode.__20301__ = 1; //#20299
        $_ = Object.getPrototypeOf($_); //#20299
    } //#20299
    $_.tobin = function() {
        var _2H = $s($k[--$j]); //#20305
        $k[$j++] = _2H; //#20305
        for (var _2J = 0, _2I = _2H.length - 1; _2J <= _2I; _2J += 1) { //#20305
            var _2K = $k[--$j]; //#20305
            $put(_2K, _2J, 48); //#20305
            $k[$j++] = _2K; //#20305
        } //#20305
        var _2L = $k[--$j]; //#20306
        $k[$j++] = _2L; //#20306
        $k[$j++] = _2L; //#20306
        $r(3, -1); //#20306
        var _2M = $k[--$j]; //#20306
        var _2N = $k[--$j]; //#20306
        var _2P = $cvrs($s(_2N.length), _2M, 2); //#20306
        $puti(_2N, _2N.length - _2P.length, _2P); //#20306
    }; //#20306
    $_.encA = function() {
        $_.in = $k[--$j]; //#20310
        if ($_.fnc1first) { //#20313
            $k[$j++] = Infinity; //#20312
            $forall($_.in, function() { //#20312
                var _2T = $k[--$j]; //#20312
                $k[$j++] = _2T; //#20312
                if (_2T == $_.fn1) { //#20312
                    $j--; //#20312
                    $k[$j++] = 37; //#20312
                } //#20312
            }); //#20312
            $_.in = $a(); //#20312
        } //#20312
        $_.out = $s((~~(($_.in.length * 11) / 2)) + 1); //#20314
        $_.k = 0; //#20315
        $_.m = 0; //#20315
        for (;;) { //#20326
            if ($_.k == $_.in.length) { //#20316
                break; //#20316
            } //#20316
            if ($_.k < ($_.in.length - 1)) { //#20322
                $k[$j++] = $f(($get($_.charvals, $get($_.in, $_.k)) * 45) + $get($_.charvals, $get($_.in, $_.k + 1))); //#20318
                $k[$j++] = 11; //#20318
                $_.tobin(); //#20318
                $_.k = $_.k + 2; //#20319
            } else { //#20322
                $k[$j++] = $get($_.charvals, $get($_.in, $_.k)); //#20321
                $k[$j++] = 6; //#20321
                $_.tobin(); //#20321
                $_.k = $_.k + 1; //#20322
            } //#20322
            var _2t = $k[--$j]; //#20324
            $puti($_.out, $_.m, _2t); //#20324
            $_.m = _2t.length + $_.m; //#20325
        } //#20325
        $k[$j++] = $geti($_.out, 0, $_.m); //#20327
    }; //#20327
    $_.encN = function() {
        $_.in = $k[--$j]; //#20331
        $_.out = $s((~~(($_.in.length * 10) / 3)) + 1); //#20332
        $_.k = 0; //#20333
        $_.m = 0; //#20333
        for (;;) { //#20349
            if ($_.k == $_.in.length) { //#20334
                break; //#20334
            } //#20334
            if ($_.k < ($_.in.length - 2)) { //#20344
                var _39 = $geti($_.in, $_.k, 3); //#20336
                $k[$j++] = 0; //#20336
                for (var _3A = 0, _3B = _39.length; _3A < _3B; _3A++) { //#20336
                    var _3D = $k[--$j]; //#20336
                    $k[$j++] = $f($get(_39, _3A) + ($f((_3D * 10) - 48))); //#20336
                } //#20336
                $k[$j++] = 10; //#20336
                $_.tobin(); //#20336
                $_.k = $_.k + 3; //#20337
            } else { //#20344
                if ($_.k == ($_.in.length - 2)) { //#20344
                    var _3J = $geti($_.in, $_.k, 2); //#20340
                    $k[$j++] = 0; //#20340
                    for (var _3K = 0, _3L = _3J.length; _3K < _3L; _3K++) { //#20340
                        var _3N = $k[--$j]; //#20340
                        $k[$j++] = $f($get(_3J, _3K) + ($f((_3N * 10) - 48))); //#20340
                    } //#20340
                    $k[$j++] = 7; //#20340
                    $_.tobin(); //#20340
                    $_.k = $_.k + 2; //#20341
                } else { //#20344
                    var _3R = $geti($_.in, $_.k, 1); //#20343
                    $k[$j++] = 0; //#20343
                    for (var _3S = 0, _3T = _3R.length; _3S < _3T; _3S++) { //#20343
                        var _3V = $k[--$j]; //#20343
                        $k[$j++] = $f($get(_3R, _3S) + ($f((_3V * 10) - 48))); //#20343
                    } //#20343
                    $k[$j++] = 4; //#20343
                    $_.tobin(); //#20343
                    $_.k = $_.k + 1; //#20344
                } //#20344
            } //#20344
            var _3X = $k[--$j]; //#20347
            $puti($_.out, $_.m, _3X); //#20347
            $_.m = _3X.length + $_.m; //#20348
        } //#20348
        $k[$j++] = $geti($_.out, 0, $_.m); //#20350
    }; //#20350
    $_.encB = function() {
        $_.in = $k[--$j]; //#20354
        if ($_.fnc1first) { //#20357
            $k[$j++] = Infinity; //#20356
            $forall($_.in, function() { //#20356
                var _3h = $k[--$j]; //#20356
                $k[$j++] = _3h; //#20356
                if (_3h == $_.fn1) { //#20356
                    $j--; //#20356
                    $k[$j++] = 29; //#20356
                } //#20356
            }); //#20356
            $_.in = $a(); //#20356
        } //#20356
        $_.out = $s($_.in.length * 8); //#20358
        for (var _3o = 0, _3n = $_.in.length - 1; _3o <= _3n; _3o += 1) { //#20363
            $_.k = _3o; //#20360
            $k[$j++] = $cvi($get($_.in, $_.k)); //#20361
            $k[$j++] = 8; //#20361
            $_.tobin(); //#20361
            $k[$j++] = $_.out; //#20362
            $k[$j++] = $_.k * 8; //#20362
            $r(3, -1); //#20362
            var _3u = $k[--$j]; //#20362
            var _3v = $k[--$j]; //#20362
            $puti($k[--$j], _3v, _3u); //#20362
        } //#20362
        $k[$j++] = $_.out; //#20364
    }; //#20364
    $_.encK = function() {
        $_.in = $k[--$j]; //#20368
        $_.out = $s((~~($_.in.length / 2)) * 13); //#20369
        $_.k = 0; //#20370
        $_.m = 0; //#20370
        for (;;) { //#20378
            if ($_.k == $_.in.length) { //#20371
                break; //#20371
            } //#20371
            var _49 = $f(($get($_.in, $_.k) * 256) + $get($_.in, $_.k + 1)); //#20373
            $k[$j++] = _49; //#20373
            if (_49 < 57408) { //#20373
                $k[$j++] = 33088; //#20373
            } else { //#20373
                $k[$j++] = 49472; //#20373
            } //#20373
            var _4A = $k[--$j]; //#20373
            var _4C = $f($k[--$j] - _4A); //#20374
            $k[$j++] = $f(((_4C >>> 8) * 192) + (_4C & 255)); //#20375
            $k[$j++] = 13; //#20375
            $_.tobin(); //#20375
            var _4D = $k[--$j]; //#20375
            $puti($_.out, $_.m, _4D); //#20375
            $_.m = _4D.length + $_.m; //#20376
            $_.k = $_.k + 2; //#20377
        } //#20377
        $k[$j++] = $_.out; //#20379
    }; //#20379
    $_.encE = function() {
        var _4L = $f((-$get($k[--$j], 0)) - 1000000); //#20384
        $k[$j++] = _4L; //#20390
        if (_4L <= 127) { //#20389
            $k[$j++] = 8; //#20385
            $_.tobin(); //#20385
        } else { //#20389
            var _4M = $k[--$j]; //#20386
            $k[$j++] = _4M; //#20390
            if (_4M <= 16383) { //#20389
                var _4N = $k[--$j]; //#20387
                $k[$j++] = $f(_4N + 32768); //#20387
                $k[$j++] = 16; //#20387
                $_.tobin(); //#20387
            } else { //#20389
                var _4O = $k[--$j]; //#20389
                $k[$j++] = $f(_4O + 12582912); //#20389
                $k[$j++] = 24; //#20389
                $_.tobin(); //#20389
            } //#20389
        } //#20389
    }; //#20389
    $_.encfuncs = $a(['encN', 'encA', 'encB', 'encK', 'encE']); //#20393
    $_.addtobits = function() {
        var _4Q = $k[--$j]; //#20396
        $puti($_.bits, $_.j, _4Q); //#20396
        $_.j = _4Q.length + $_.j; //#20397
    }; //#20397
    $k[$j++] = Infinity; //#20400
    for (var _4V = 0, _4W = $_.msglen; _4V < _4W; _4V++) { //#20400
        $k[$j++] = 0; //#20400
    } //#20400
    $k[$j++] = 0; //#20400
    $_.numNs = $a(); //#20400
    $k[$j++] = Infinity; //#20401
    for (var _4Z = 0, _4a = $_.msglen; _4Z < _4a; _4Z++) { //#20401
        $k[$j++] = 0; //#20401
    } //#20401
    $k[$j++] = 0; //#20401
    $_.numAs = $a(); //#20401
    $k[$j++] = Infinity; //#20402
    for (var _4d = 0, _4e = $_.msglen; _4d < _4e; _4d++) { //#20402
        $k[$j++] = 0; //#20402
    } //#20402
    $k[$j++] = 0; //#20402
    $_.numAorNs = $a(); //#20402
    $k[$j++] = Infinity; //#20403
    for (var _4h = 0, _4i = $_.msglen; _4h < _4i; _4h++) { //#20403
        $k[$j++] = 0; //#20403
    } //#20403
    $k[$j++] = 0; //#20403
    $_.numBs = $a(); //#20403
    $k[$j++] = Infinity; //#20404
    for (var _4l = 0, _4m = $_.msglen; _4l < _4m; _4l++) { //#20404
        $k[$j++] = 0; //#20404
    } //#20404
    $k[$j++] = 0; //#20404
    $_.numKs = $a(); //#20404
    $k[$j++] = Infinity; //#20405
    for (var _4p = 0, _4q = $_.msglen; _4p < _4q; _4p++) { //#20405
        $k[$j++] = 0; //#20405
    } //#20405
    $k[$j++] = 9999; //#20405
    $_.nextNs = $a(); //#20405
    $k[$j++] = Infinity; //#20406
    for (var _4t = 0, _4u = $_.msglen; _4t < _4u; _4t++) { //#20406
        $k[$j++] = 0; //#20406
    } //#20406
    $k[$j++] = 9999; //#20406
    $_.nextBs = $a(); //#20406
    $k[$j++] = Infinity; //#20407
    for (var _4x = 0, _4y = $_.msglen; _4x < _4y; _4x++) { //#20407
        $k[$j++] = 0; //#20407
    } //#20407
    $k[$j++] = 9999; //#20407
    $_.nextAs = $a(); //#20407
    $k[$j++] = Infinity; //#20408
    for (var _51 = 0, _52 = $_.msglen; _51 < _52; _51++) { //#20408
        $k[$j++] = 0; //#20408
    } //#20408
    $k[$j++] = 9999; //#20408
    $_.nextKs = $a(); //#20408
    $_.isECI = $a($_.msglen); //#20409
    for (var _57 = $_.msglen - 1; _57 >= 0; _57 -= 1) { //#20444
        $_.i = _57; //#20411
        $_.barchar = $get($_.msg, $_.i); //#20412
        var _5D = $get($_.Kexcl, $_.barchar) !== undefined; //#20413
        if (_5D && (!$_.suppresskanjimode)) { //#20427
            if (($_.i + 1) < $_.msglen) { //#20414
                $k[$j++] = $f(($_.barchar * 256) + $get($_.msg, $_.i + 1)); //#20414
            } else { //#20414
                $k[$j++] = 0; //#20414
            } //#20414
            var _5L = $k[--$j]; //#20415
            var _5M = _5L & 255; //#20419
            if ((((_5L >= 33088) && (_5L <= 40956)) || ((_5L >= 57408) && (_5L <= 60351))) && (((_5M >= 64) && (_5M <= 252)) && (_5M != 127))) { //#20424
                $put($_.nextKs, $_.i, 0); //#20421
                $put($_.numKs, $_.i, $f($get($_.numKs, $_.i + 2) + 1)); //#20422
            } else { //#20424
                $put($_.nextKs, $_.i, $f($get($_.nextKs, $_.i + 1) + 1)); //#20424
            } //#20424
        } else { //#20427
            $put($_.nextKs, $_.i, $f($get($_.nextKs, $_.i + 1) + 1)); //#20427
        } //#20427
        var _5g = $get($_.Nexcl, $_.barchar) !== undefined; //#20429
        if (_5g) { //#20434
            $put($_.nextNs, $_.i, 0); //#20430
            $put($_.numNs, $_.i, $f($get($_.numNs, $_.i + 1) + 1)); //#20431
            $put($_.numAorNs, $_.i, $f($get($_.numAorNs, $_.i + 1) + 1)); //#20432
        } else { //#20434
            $put($_.nextNs, $_.i, $f($get($_.nextNs, $_.i + 1) + 1)); //#20434
        } //#20434
        var _60 = $get($_.Aexcl, $_.barchar) !== undefined; //#20436
        if (_60) { //#20441
            $put($_.nextAs, $_.i, 0); //#20437
            $put($_.numAs, $_.i, $f($get($_.numAs, $_.i + 1) + 1)); //#20438
            $put($_.numAorNs, $_.i, $f($get($_.numAorNs, $_.i + 1) + 1)); //#20439
        } else { //#20441
            $put($_.nextAs, $_.i, $f($get($_.nextAs, $_.i + 1) + 1)); //#20441
        } //#20441
        $put($_.isECI, $_.i, $_.barchar <= -1000000); //#20443
    } //#20443
    for (var _6N = 0, _6M = $_.msglen - 1; _6N <= _6M; _6N += 1) { //#20451
        $_.i = _6N; //#20446
        if ($get($_.numKs, $_.i) > 0) { //#20450
            $put($_.numKs, $_.i + 1, 0); //#20448
            $put($_.nextKs, $_.i + 1, $f($get($_.nextKs, $_.i + 1) + 1)); //#20449
        } //#20449
    } //#20449
    for (var _6Z = $_.msglen - 1; _6Z >= 0; _6Z -= 1) { //#20460
        $_.i = _6Z; //#20453
        if ((($f($get($_.numNs, $_.i) + $f($get($_.numAs, $_.i) + $get($_.numKs, $_.i)))) == 0) && $nt($get($_.isECI, $_.i))) { //#20458
            $put($_.nextBs, $_.i, 0); //#20455
            $put($_.numBs, $_.i, $f($get($_.numBs, $_.i + 1) + 1)); //#20456
        } else { //#20458
            $put($_.nextBs, $_.i, $f($get($_.nextBs, $_.i + 1) + 1)); //#20458
        } //#20458
    } //#20458
    $_.KbeforeB = function() {
        var _71 = $get($k[--$j], $_.ver); //#20462
        $k[$j++] = $ge($_.numK, _71) && ($get($_.nextBs, $f(($_.numK * 2) + $_.i)) == 0); //#20462
    }; //#20462
    $_.KbeforeA = function() {
        var _79 = $get($k[--$j], $_.ver); //#20463
        $k[$j++] = $ge($_.numK, _79) && ($get($_.nextAs, $f(($_.numK * 2) + $_.i)) == 0); //#20463
    }; //#20463
    $_.KbeforeN = function() {
        var _7H = $get($k[--$j], $_.ver); //#20464
        $k[$j++] = $ge($_.numK, _7H) && ($get($_.nextNs, $f(($_.numK * 2) + $_.i)) == 0); //#20464
    }; //#20464
    $_.KbeforeE = function() {
        var _7P = $get($k[--$j], $_.ver); //#20465
        $k[$j++] = $ge($_.numK, _7P) && (($f(($_.numK * 2) + $_.i)) == $_.msglen); //#20465
    }; //#20465
    $_.AbeforeK = function() {
        var _7W = $get($k[--$j], $_.ver); //#20466
        $k[$j++] = $ge($_.numA, _7W) && ($get($_.nextKs, $f($_.numA + $_.i)) == 0); //#20466
    }; //#20466
    $_.AbeforeB = function() {
        var _7e = $get($k[--$j], $_.ver); //#20467
        $k[$j++] = $ge($_.numA, _7e) && ($get($_.nextBs, $f($_.numA + $_.i)) == 0); //#20467
    }; //#20467
    $_.AbeforeN = function() {
        var _7m = $get($k[--$j], $_.ver); //#20468
        $k[$j++] = $ge($_.numA, _7m) && ($get($_.nextNs, $f($_.numA + $_.i)) == 0); //#20468
    }; //#20468
    $_.AbeforeE = function() {
        var _7u = $get($k[--$j], $_.ver); //#20469
        $k[$j++] = $ge($_.numA, _7u) && ($f($_.numA + $_.i) == $_.msglen); //#20469
    }; //#20469
    $_.NbeforeK = function() {
        var _81 = $get($k[--$j], $_.ver); //#20470
        $k[$j++] = $ge($_.numN, _81) && ($get($_.nextKs, $f($_.numN + $_.i)) == 0); //#20470
    }; //#20470
    $_.NbeforeB = function() {
        var _89 = $get($k[--$j], $_.ver); //#20471
        $k[$j++] = $ge($_.numN, _89) && ($get($_.nextBs, $f($_.numN + $_.i)) == 0); //#20471
    }; //#20471
    $_.NbeforeA = function() {
        var _8H = $get($k[--$j], $_.ver); //#20472
        $k[$j++] = $ge($_.numN, _8H) && ($get($_.nextAs, $f($_.numN + $_.i)) == 0); //#20472
    }; //#20472
    $_.NbeforeE = function() {
        var _8P = $get($k[--$j], $_.ver); //#20473
        $k[$j++] = $ge($_.numN, _8P) && ($f($_.numN + $_.i) == $_.msglen); //#20473
    }; //#20473
    $_.AorNbeforeB = function() {
        var _8W = $get($k[--$j], $_.ver); //#20474
        $k[$j++] = $ge($_.numAorN, _8W) && ($get($_.nextBs, $f($_.numAorN + $_.i)) == 0); //#20474
    }; //#20474
    $_.AorNbeforeE = function() {
        var _8e = $get($k[--$j], $_.ver); //#20475
        $k[$j++] = $ge($_.numAorN, _8e) && ($f($_.numAorN + $_.i) == $_.msglen); //#20475
    }; //#20475
    $_.nextNslt = function() {
        if ($get($_.nextNs, $_.i) >= $_.msglen) { //#20477
            $j--; //#20477
            $k[$j++] = true; //#20477
        } else { //#20477
            var _8u = $get($k[--$j], $_.ver); //#20477
            $k[$j++] = $lt($get($_.numNs, $f($get($_.nextNs, $_.i) + $_.i)), _8u); //#20477
        } //#20477
    }; //#20477
    if (!bwipp_qrcode.__20507__) { //#20507
        $_ = Object.create($_); //#20507
        $k[$j++] = Infinity; //#20487
        $k[$j++] = "full"; //#20491
        $k[$j++] = Infinity; //#20488
        for (var _8v = 0; _8v <= 9; _8v += 1) { //#20489
            $k[$j++] = $cvrs($s(2), _8v, 10); //#20489
            $k[$j++] = $_.v1to9; //#20489
        } //#20489
        for (var _8z = 10; _8z <= 26; _8z += 1) { //#20490
            $k[$j++] = $cvrs($s(2), _8z, 10); //#20490
            $k[$j++] = $_.v10to26; //#20490
        } //#20490
        for (var _93 = 27; _93 <= 40; _93 += 1) { //#20491
            $k[$j++] = $cvrs($s(2), _93, 10); //#20491
            $k[$j++] = $_.v27to40; //#20491
        } //#20491
        var _97 = $d(); //#20491
        var _9C = new Map([
            ["M1", $_.vM1],
            ["M2", $_.vM2],
            ["M3", $_.vM3],
            ["M4", $_.vM4]
        ]); //#20494
        var _9j = new Map([
            ["R7x43", $_.vR7x43],
            ["R7x59", $_.vR7x59],
            ["R7x77", $_.vR7x77],
            ["R7x99", $_.vR7x99],
            ["R7x139", $_.vR7x139],
            ["R9x43", $_.vR9x43],
            ["R9x59", $_.vR9x59],
            ["R9x77", $_.vR9x77],
            ["R9x99", $_.vR9x99],
            ["R9x139", $_.vR9x139],
            ["R11x27", $_.vR11x27],
            ["R11x43", $_.vR11x43],
            ["R11x59", $_.vR11x59],
            ["R11x77", $_.vR11x77],
            ["R11x99", $_.vR11x99],
            ["R11x139", $_.vR11x139],
            ["R13x27", $_.vR13x27],
            ["R13x43", $_.vR13x43],
            ["R13x59", $_.vR13x59],
            ["R13x77", $_.vR13x77],
            ["R13x99", $_.vR13x99],
            ["R13x139", $_.vR13x139],
            ["R15x43", $_.vR15x43],
            ["R15x59", $_.vR15x59],
            ["R15x77", $_.vR15x77],
            ["R15x99", $_.vR15x99],
            ["R15x139", $_.vR15x139],
            ["R17x43", $_.vR17x43],
            ["R17x59", $_.vR17x59],
            ["R17x77", $_.vR17x77],
            ["R17x99", $_.vR17x99],
            ["R17x139", $_.vR17x139]
        ]); //#20502
        $k[$j++] = _97; //#20502
        $k[$j++] = "micro"; //#20502
        $k[$j++] = _9C; //#20502
        $k[$j++] = "rmqr"; //#20502
        $k[$j++] = _9j; //#20502
        $_.versetmap = $d(); //#20504
        $_.versetfull = $a([$_.v1to9, $_.v10to26, $_.v27to40]); //#20505
        $_.versetmicro = $a([$_.vM1, $_.vM2, $_.vM3, $_.vM4]); //#20506
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_qrcode.$ctx[id] = $_[id]); //#20506
        bwipp_qrcode.__20507__ = 1; //#20506
        $_ = Object.getPrototypeOf($_); //#20506
    } //#20506
    if ($ne($_.version, "unset")) { //#20525
        var _9y = $get($_.versetmap, $_.format); //#20510
        var _9z = $_.version; //#20510
        var _A0 = $get(_9y, _9z) !== undefined; //#20510
        $k[$j++] = _9y; //#20520
        $k[$j++] = _9z; //#20520
        if (!_A0) { //#20520
            $j -= 2; //#20511
            if ($eq($_.format, "full")) { //#20518
                $k[$j++] = 'bwipp.qrcodeInvalidFullVersion#20513'; //#20513
                $k[$j++] = "Valid versions for QR Code symbols are 1 to 40"; //#20513
                bwipp_raiseerror(); //#20513
            } else { //#20518
                if ($eq($_.format, "micro")) { //#20518
                    $k[$j++] = 'bwipp.qrcodeInvalidMicroVersion#20516'; //#20516
                    $k[$j++] = "Valid versions for Micro QR Code symbols are M1 to M4"; //#20516
                    bwipp_raiseerror(); //#20516
                } else { //#20518
                    $k[$j++] = 'bwipp.qrcodeInvalidRMQRversion#20518'; //#20518
                    $k[$j++] = "Invalid version for an RMQR symbol"; //#20518
                    bwipp_raiseerror(); //#20518
                } //#20518
            } //#20518
        } //#20518
        var _A3 = $k[--$j]; //#20521
        var _A5 = $get($k[--$j], _A3); //#20521
        $k[$j++] = _A5; //#20521
        $k[$j++] = Infinity; //#20521
        var _A6 = $k[--$j]; //#20521
        var _A7 = $k[--$j]; //#20521
        $k[$j++] = _A6; //#20521
        $k[$j++] = _A7; //#20521
        $_.verset = $a(); //#20521
    } else { //#20525
        if ($eq($_.format, "full")) { //#20524
            $_.verset = $_.versetfull; //#20524
        } //#20524
        if ($eq($_.format, "micro")) { //#20525
            $_.verset = $_.versetmicro; //#20525
        } //#20525
    } //#20525
    $k[$j++] = Infinity; //#20530
    for (var _AD = 0, _AE = 39; _AD < _AE; _AD++) { //#20530
        $k[$j++] = -1; //#20530
    } //#20530
    $_.msgbits = $a(); //#20530
    $_.e = 10000; //#20531
    if (!bwipp_qrcode.__20561__) { //#20561
        $_ = Object.create($_); //#20561
        $_.mode0forceKB = $a([1, 1, 1, $_.e, $_.e, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]); //#20537
        $_.mode0forceA = $a([1, 1, 1, $_.e, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]); //#20538
        $_.mode0forceN = $a([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]); //#20539
        $_.mode0NbeforeB = $a([4, 4, 5, $_.e, $_.e, 2, 3, 2, 2, 3, 3, 3, 2, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]); //#20541
        $_.modeBKbeforeB = $a([9, 12, 13, $_.e, $_.e, 4, 6, 4, 5, 6, 6, 6, 5, 6, 6, 6, 7, 4, 6, 6, 6, 7, 7, 5, 6, 6, 7, 7, 7, 6, 6, 7, 7, 7, 6, 7, 7, 7, 8]); //#20543
        $_.modeBKbeforeA = $a([8, 10, 11, $_.e, $_.e, 4, 5, 4, 5, 5, 6, 6, 5, 5, 6, 6, 6, 4, 5, 6, 6, 6, 6, 5, 6, 6, 6, 6, 7, 6, 6, 6, 6, 7, 6, 6, 6, 7, 7]); //#20544
        $_.modeBKbeforeN = $a([8, 9, 11, $_.e, $_.e, 3, 5, 3, 4, 5, 5, 5, 4, 5, 5, 5, 6, 3, 5, 5, 5, 6, 6, 4, 5, 5, 6, 6, 6, 5, 5, 6, 6, 7, 5, 6, 6, 6, 7]); //#20545
        $_.modeBKbeforeE = $a([5, 5, 6, $_.e, $_.e, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 2, 3, 3, 3, 4, 4, 3, 3, 3, 4, 4, 4, 3, 3, 4, 4, 4, 3, 4, 4, 4, 4]); //#20546
        $_.modeBAbeforeK = $a([11, 12, 14, $_.e, $_.e, 5, 7, 5, 6, 7, 8, 8, 6, 7, 8, 8, 8, 6, 7, 8, 8, 8, 8, 6, 8, 8, 8, 8, 9, 8, 8, 8, 8, 9, 8, 8, 8, 9, 9]); //#20548
        $_.modeBAbeforeB = $a([11, 15, 16, $_.e, $_.e, 6, 7, 6, 7, 7, 8, 8, 7, 7, 8, 8, 8, 6, 7, 8, 8, 8, 9, 7, 8, 8, 8, 9, 9, 8, 8, 9, 9, 9, 8, 8, 9, 9, 10]); //#20549
        $_.modeBAbeforeN = $a([12, 13, 15, $_.e, $_.e, 6, 8, 6, 7, 8, 8, 8, 7, 8, 8, 8, 9, 6, 8, 8, 8, 9, 9, 7, 8, 8, 9, 9, 10, 8, 9, 9, 9, 10, 8, 9, 9, 10, 10]); //#20550
        $_.modeBAbeforeE = $a([6, 7, 8, $_.e, $_.e, 3, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 5, 5, 4, 4, 4, 5, 5, 5, 4, 5, 5, 5, 5, 4, 5, 5, 5, 5]); //#20551
        $_.modeBNbeforeK = $a([6, 7, 8, $_.e, $_.e, 3, 4, 3, 4, 4, 5, 5, 4, 4, 5, 5, 5, 3, 4, 5, 5, 5, 5, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]); //#20553
        $_.modeBNbeforeB = $a([6, 8, 9, $_.e, $_.e, 3, 4, 3, 4, 4, 5, 5, 4, 4, 5, 5, 5, 3, 4, 5, 5, 5, 5, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6]); //#20554
        $_.modeBNbeforeA = $a([6, 7, 8, $_.e, $_.e, 3, 4, 3, 4, 4, 5, 5, 4, 4, 5, 5, 5, 4, 4, 5, 5, 5, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 6]); //#20555
        $_.modeBNbeforeE = $a([3, 4, 4, $_.e, $_.e, 2, 3, 2, 2, 3, 3, 3, 2, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]); //#20556
        $_.modeANbeforeA = $a([13, 15, 17, $_.e, 5, 7, 9, 7, 8, 9, 9, 9, 8, 9, 9, 9, 11, 7, 9, 9, 9, 11, 11, 8, 9, 9, 10, 11, 11, 9, 10, 11, 11, 11, 9, 11, 11, 11, 11]); //#20558
        $_.modeANbeforeB = $a([13, 17, 18, $_.e, $_.e, 7, 9, 7, 8, 9, 9, 9, 8, 9, 9, 9, 10, 7, 9, 9, 9, 10, 11, 8, 9, 9, 9, 11, 11, 9, 9, 11, 11, 11, 9, 10, 11, 11, 11]); //#20559
        $_.modeANbeforeE = $a([7, 8, 9, $_.e, 3, 4, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6, 4, 5, 5, 5, 6, 6, 5, 5, 5, 5, 6, 6, 5, 5, 6, 6, 6, 5, 6, 6, 6, 6]); //#20560
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_qrcode.$ctx[id] = $_[id]); //#20560
        bwipp_qrcode.__20561__ = 1; //#20560
        $_ = Object.getPrototypeOf($_); //#20560
    } //#20560
    var _B7 = $_.verset; //#20563
    for (var _B8 = 0, _B9 = _B7.length; _B8 < _B9; _B8++) { //#20695
        $_.ver = $get(_B7, _B8); //#20564
        $_.mode = -1; //#20567
        $_.seq = $a([]); //#20567
        $_.i = 0; //#20567
        for (;;) { //#20664
            if ($_.i >= $_.msglen) { //#20568
                break; //#20568
            } //#20568
            $_.numK = $get($_.numKs, $_.i); //#20569
            $_.numB = $get($_.numBs, $_.i); //#20570
            $_.numA = $get($_.numAs, $_.i); //#20571
            $_.numN = $get($_.numNs, $_.i); //#20572
            $_.numAorN = $get($_.numAorNs, $_.i); //#20573
            $_.eci = $get($_.isECI, $_.i); //#20574
            if ($eq($_.ver, $_.vM1) && ($_.numA >= 1)) { //#20575
                $_.seq = -1; //#20575
                break; //#20575
            } //#20575
            if ($eq($_.ver, $_.vM1) && ($_.numB >= 1)) { //#20576
                $_.seq = -1; //#20576
                break; //#20576
            } //#20576
            if ($eq($_.ver, $_.vM1) && ($_.numK >= 1)) { //#20577
                $_.seq = -1; //#20577
                break; //#20577
            } //#20577
            if ($eq($_.ver, $_.vM1) && $_.eci) { //#20578
                $_.seq = -1; //#20578
                break; //#20578
            } //#20578
            if ($eq($_.ver, $_.vM2) && ($_.numB >= 1)) { //#20579
                $_.seq = -1; //#20579
                break; //#20579
            } //#20579
            if ($eq($_.ver, $_.vM2) && ($_.numK >= 1)) { //#20580
                $_.seq = -1; //#20580
                break; //#20580
            } //#20580
            if ($eq($_.ver, $_.vM2) && $_.eci) { //#20581
                $_.seq = -1; //#20581
                break; //#20581
            } //#20581
            if ($eq($_.ver, $_.vM3) && $_.eci) { //#20582
                $_.seq = -1; //#20582
                break; //#20582
            } //#20582
            if ($eq($_.ver, $_.vM4) && $_.eci) { //#20583
                $_.seq = -1; //#20583
                break; //#20583
            } //#20583
            for (;;) { //#20644
                if ($_.eci) { //#20587
                    $k[$j++] = $_.E; //#20586
                    break; //#20586
                } //#20586
                if ($_.mode == -1) { //#20602
                    $k[$j++] = $_.mode0forceKB; //#20589
                    $_.KbeforeA(); //#20589
                    if ($k[--$j]) { //#20589
                        $k[$j++] = $_.K; //#20589
                        break; //#20589
                    } //#20589
                    $k[$j++] = $_.mode0forceKB; //#20590
                    $_.KbeforeN(); //#20590
                    if ($k[--$j]) { //#20590
                        $k[$j++] = $_.K; //#20590
                        break; //#20590
                    } //#20590
                    $k[$j++] = $_.modeBKbeforeE; //#20591
                    $_.KbeforeB(); //#20591
                    if ($k[--$j]) { //#20591
                        $k[$j++] = $_.K; //#20591
                        break; //#20591
                    } //#20591
                    $k[$j++] = $_.mode0forceKB; //#20592
                    $_.KbeforeE(); //#20592
                    if ($k[--$j]) { //#20592
                        $k[$j++] = $_.K; //#20592
                        break; //#20592
                    } //#20592
                    if ($_.numK >= 1) { //#20593
                        $k[$j++] = $_.B; //#20593
                        break; //#20593
                    } //#20593
                    $k[$j++] = $_.mode0NbeforeB; //#20594
                    $_.NbeforeB(); //#20594
                    if ($k[--$j]) { //#20594
                        $k[$j++] = $_.N; //#20594
                        break; //#20594
                    } //#20594
                    $k[$j++] = $_.mode0forceKB; //#20595
                    $_.NbeforeB(); //#20595
                    if ($k[--$j]) { //#20595
                        $k[$j++] = $_.B; //#20595
                        break; //#20595
                    } //#20595
                    $k[$j++] = $_.modeANbeforeE; //#20596
                    $_.NbeforeA(); //#20596
                    if ($k[--$j]) { //#20596
                        $k[$j++] = $_.N; //#20596
                        break; //#20596
                    } //#20596
                    $k[$j++] = $_.mode0forceN; //#20597
                    $_.NbeforeE(); //#20597
                    if ($k[--$j]) { //#20597
                        $k[$j++] = $_.N; //#20597
                        break; //#20597
                    } //#20597
                    $k[$j++] = $_.modeBAbeforeE; //#20598
                    $_.AbeforeK(); //#20598
                    if ($k[--$j]) { //#20598
                        $k[$j++] = $_.A; //#20598
                        break; //#20598
                    } //#20598
                    $k[$j++] = $_.modeBAbeforeE; //#20599
                    $_.AorNbeforeB(); //#20599
                    if ($k[--$j]) { //#20599
                        $k[$j++] = $_.A; //#20599
                        break; //#20599
                    } //#20599
                    $k[$j++] = $_.mode0forceA; //#20600
                    $_.AorNbeforeE(); //#20600
                    if ($k[--$j]) { //#20600
                        $k[$j++] = $_.A; //#20600
                        break; //#20600
                    } //#20600
                    $k[$j++] = $_.B; //#20601
                    break; //#20601
                } //#20601
                if ($_.mode == $_.B) { //#20620
                    $k[$j++] = $_.modeBKbeforeB; //#20604
                    $_.KbeforeB(); //#20604
                    if ($k[--$j]) { //#20604
                        $k[$j++] = $_.K; //#20604
                        break; //#20604
                    } //#20604
                    $k[$j++] = $_.modeBKbeforeA; //#20605
                    $_.KbeforeA(); //#20605
                    if ($k[--$j]) { //#20605
                        $k[$j++] = $_.K; //#20605
                        break; //#20605
                    } //#20605
                    $k[$j++] = $_.modeBKbeforeN; //#20606
                    $_.KbeforeN(); //#20606
                    if ($k[--$j]) { //#20606
                        $k[$j++] = $_.K; //#20606
                        break; //#20606
                    } //#20606
                    $k[$j++] = $_.modeBKbeforeE; //#20607
                    $_.KbeforeE(); //#20607
                    if ($k[--$j]) { //#20607
                        $k[$j++] = $_.K; //#20607
                        break; //#20607
                    } //#20607
                    $k[$j++] = $_.modeBAbeforeK; //#20608
                    $_.AbeforeK(); //#20608
                    if ($k[--$j]) { //#20608
                        $k[$j++] = $_.A; //#20608
                        break; //#20608
                    } //#20608
                    $k[$j++] = $_.modeBAbeforeB; //#20609
                    $_.AbeforeB(); //#20609
                    if ($k[--$j]) { //#20609
                        $k[$j++] = $_.A; //#20609
                        break; //#20609
                    } //#20609
                    $k[$j++] = $_.modeBAbeforeN; //#20610
                    $_.AbeforeN(); //#20610
                    if ($k[--$j]) { //#20610
                        $k[$j++] = $_.A; //#20610
                        break; //#20610
                    } //#20610
                    $k[$j++] = $_.modeBAbeforeE; //#20611
                    $_.AbeforeE(); //#20611
                    if ($k[--$j]) { //#20611
                        $k[$j++] = $_.A; //#20611
                        break; //#20611
                    } //#20611
                    $k[$j++] = $_.modeBNbeforeK; //#20612
                    $_.NbeforeK(); //#20612
                    if ($k[--$j]) { //#20612
                        $k[$j++] = $_.N; //#20612
                        break; //#20612
                    } //#20612
                    $k[$j++] = $_.modeBNbeforeB; //#20613
                    $_.NbeforeB(); //#20613
                    if ($k[--$j]) { //#20613
                        $k[$j++] = $_.N; //#20613
                        break; //#20613
                    } //#20613
                    $k[$j++] = $_.modeBNbeforeA; //#20614
                    $_.NbeforeA(); //#20614
                    if ($k[--$j]) { //#20614
                        $k[$j++] = $_.N; //#20614
                        break; //#20614
                    } //#20614
                    $k[$j++] = $_.modeBNbeforeE; //#20615
                    $_.NbeforeE(); //#20615
                    if ($k[--$j]) { //#20615
                        $k[$j++] = $_.N; //#20615
                        break; //#20615
                    } //#20615
                    $k[$j++] = $_.modeBAbeforeE; //#20616
                    $_.AorNbeforeE(); //#20616
                    var _DH = $k[--$j]; //#20616
                    if (_DH && $le($_.numAorN, $get($_.modeBAbeforeN, $_.ver))) { //#20618
                        $k[$j++] = $_.modeBNbeforeA; //#20617
                        $_.nextNslt(); //#20617
                        if ($k[--$j]) { //#20617
                            $k[$j++] = $_.A; //#20617
                            break; //#20617
                        } //#20617
                    } //#20617
                    $k[$j++] = $_.B; //#20619
                    break; //#20619
                } //#20619
                if ($_.mode == $_.A) { //#20629
                    if ($_.numK >= 1) { //#20622
                        $k[$j++] = $_.K; //#20622
                        break; //#20622
                    } //#20622
                    if ($_.numB >= 1) { //#20623
                        $k[$j++] = $_.B; //#20623
                        break; //#20623
                    } //#20623
                    $k[$j++] = $_.modeANbeforeA; //#20624
                    $_.NbeforeA(); //#20624
                    if ($k[--$j]) { //#20624
                        $k[$j++] = $_.N; //#20624
                        break; //#20624
                    } //#20624
                    $k[$j++] = $_.modeANbeforeB; //#20625
                    $_.NbeforeB(); //#20625
                    if ($k[--$j]) { //#20625
                        $k[$j++] = $_.N; //#20625
                        break; //#20625
                    } //#20625
                    $k[$j++] = $_.modeANbeforeE; //#20626
                    $_.NbeforeE(); //#20626
                    if ($k[--$j]) { //#20626
                        $k[$j++] = $_.N; //#20626
                        break; //#20626
                    } //#20626
                    if (($_.numA >= 1) || ($_.numN >= 1)) { //#20627
                        $k[$j++] = $_.A; //#20627
                        break; //#20627
                    } //#20627
                    $k[$j++] = $_.B; //#20628
                    break; //#20628
                } //#20628
                if ($_.mode == $_.N) { //#20636
                    if ($_.numK >= 1) { //#20631
                        $k[$j++] = $_.K; //#20631
                        break; //#20631
                    } //#20631
                    if ($_.numB >= 1) { //#20632
                        $k[$j++] = $_.B; //#20632
                        break; //#20632
                    } //#20632
                    if ($_.numA >= 1) { //#20633
                        $k[$j++] = $_.A; //#20633
                        break; //#20633
                    } //#20633
                    if ($_.numN >= 1) { //#20634
                        $k[$j++] = $_.N; //#20634
                        break; //#20634
                    } //#20634
                    $k[$j++] = $_.B; //#20635
                    break; //#20635
                } //#20635
                if ($_.mode == $_.K) { //#20643
                    if ($_.numB >= 1) { //#20638
                        $k[$j++] = $_.B; //#20638
                        break; //#20638
                    } //#20638
                    if ($_.numA >= 1) { //#20639
                        $k[$j++] = $_.A; //#20639
                        break; //#20639
                    } //#20639
                    if ($_.numN >= 1) { //#20640
                        $k[$j++] = $_.N; //#20640
                        break; //#20640
                    } //#20640
                    if ($_.numK >= 1) { //#20641
                        $k[$j++] = $_.K; //#20641
                        break; //#20641
                    } //#20641
                    $k[$j++] = $_.B; //#20642
                    break; //#20642
                } //#20642
            } //#20642
            var _E1 = $k[--$j]; //#20645
            $k[$j++] = _E1; //#20645
            if ((_E1 == $_.K) && $_.fnc1first) { //#20645
                $j--; //#20645
                $k[$j++] = $_.B; //#20645
            } //#20645
            var _E5 = $k[--$j]; //#20646
            $k[$j++] = _E5; //#20662
            if (_E5 == $_.mode) { //#20661
                $j--; //#20647
                var _EB = ($_.mode == $_.K) ? 2 : 1; //#20648
                $_.dat = $geti($_.msg, $_.i, _EB); //#20648
                $k[$j++] = Infinity; //#20649
                $aload($_.seq); //#20650
                $k[$j++] = Infinity; //#20651
                var _EE = $k[--$j]; //#20651
                var _EF = $k[--$j]; //#20651
                $k[$j++] = _EE; //#20651
                $aload(_EF); //#20651
                $aload($_.dat); //#20651
                var _EH = $a(); //#20651
                $k[$j++] = _EH; //#20651
                $_.seq = $a(); //#20651
            } else { //#20661
                $_.mode = $k[--$j]; //#20654
                if ($_.mode == $_.K) { //#20655
                    $k[$j++] = $_.K; //#20655
                    $k[$j++] = $geti($_.msg, $_.i, $_.numK * 2); //#20655
                } //#20655
                if ($_.mode == $_.B) { //#20656
                    $k[$j++] = $_.B; //#20656
                    $k[$j++] = $geti($_.msg, $_.i, $_.numB); //#20656
                } //#20656
                if ($_.mode == $_.A) { //#20657
                    $k[$j++] = $_.A; //#20657
                    $k[$j++] = $geti($_.msg, $_.i, $_.numA); //#20657
                } //#20657
                if ($_.mode == $_.N) { //#20658
                    $k[$j++] = $_.N; //#20658
                    $k[$j++] = $geti($_.msg, $_.i, $_.numN); //#20658
                } //#20658
                if ($_.mode == $_.E) { //#20659
                    $_.mode = -1; //#20659
                    $k[$j++] = $_.E; //#20659
                    $k[$j++] = $geti($_.msg, $_.i, 1); //#20659
                } //#20659
                $_.dat = $k[--$j]; //#20660
                $_.sw = $k[--$j]; //#20660
                $k[$j++] = Infinity; //#20661
                $aload($_.seq); //#20661
                $k[$j++] = $_.sw; //#20661
                $k[$j++] = $_.dat; //#20661
                $_.seq = $a(); //#20661
            } //#20661
            $_.i = $_.i + $_.dat.length; //#20663
        } //#20663
        for (;;) { //#20694
            if ($_.seq == -1) { //#20668
                break; //#20668
            } //#20668
            $_.bits = $s(23648); //#20669
            $_.j = 0; //#20670
            if ($_.fnc1first) { //#20673
                if ($lt($_.ver, $_.vR7x43)) { //#20672
                    $k[$j++] = "0101"; //#20672
                } else { //#20672
                    $k[$j++] = "101"; //#20672
                } //#20672
                $_.addtobits(); //#20672
            } //#20672
            $_.abort = false; //#20674
            for (var _F7 = 0, _F6 = $_.seq.length - 1; _F7 <= _F6; _F7 += 2) { //#20689
                $_.i = _F7; //#20676
                $_.mode = $get($_.seq, $_.i); //#20677
                $k[$j++] = $get($get($_.mids, $_.ver), $_.mode); //#20678
                $_.addtobits(); //#20678
                $_.chars = $get($_.seq, $_.i + 1); //#20679
                $k[$j++] = 'charslen'; //#20680
                $k[$j++] = $_.chars.length; //#20680
                if ($_.mode == $_.K) { //#20680
                    var _FM = $k[--$j]; //#20680
                    $k[$j++] = ~~(_FM / 2); //#20680
                } //#20680
                var _FN = $k[--$j]; //#20680
                $_[$k[--$j]] = _FN; //#20680
                if ($_.mode != $_.E) { //#20687
                    $_.cclen = $get($get($_.cclens, $_.ver), $_.mode); //#20682
                    if ($_.charslen >= (~~Math.pow(2, $_.cclen))) { //#20685
                        $_.abort = true; //#20684
                        break; //#20684
                    } //#20684
                    $k[$j++] = $_.charslen; //#20686
                    $k[$j++] = $_.cclen; //#20686
                    $_.tobin(); //#20686
                    $_.addtobits(); //#20686
                } //#20686
                $k[$j++] = $_.chars; //#20688
                if ($_[$get($_.encfuncs, $_.mode)]() === true) {
                    break;
                } //#20688
                $_.addtobits(); //#20688
            } //#20688
            if ($_.abort) { //#20690
                break; //#20690
            } //#20690
            $_.bits = $geti($_.bits, 0, $_.j); //#20691
            $put($_.msgbits, $_.ver, $_.bits); //#20692
            break; //#20693
        } //#20693
    } //#20693
    if (!bwipp_qrcode.__20779__) { //#20779
        $_ = Object.create($_); //#20779
        $_.metrics = $a([$a(["micro", "M1", $_.vM1, 11, 11, 98, 99, 36, $a([2, 99, 99, 99]), $a([1, 0, -1, -1, -1, -1, -1, -1])]), $a(["micro", "M2", $_.vM2, 13, 13, 98, 99, 80, $a([5, 6, 99, 99]), $a([1, 0, 1, 0, -1, -1, -1, -1])]), $a(["micro", "M3", $_.vM3, 15, 15, 98, 99, 132, $a([6, 8, 99, 99]), $a([1, 0, 1, 0, -1, -1, -1, -1])]), $a(["micro", "M4", $_.vM4, 17, 17, 98, 99, 192, $a([8, 10, 14, 99]), $a([1, 0, 1, 0, 1, 0, -1, -1])]), $a(["full", "1", $_.v1to9, 21, 21, 98, 99, 208, $a([7, 10, 13, 17]), $a([1, 0, 1, 0, 1, 0, 1, 0])]), $a(["full", "2", $_.v1to9, 25, 25, 18, 99, 359, $a([10, 16, 22, 28]), $a([1, 0, 1, 0, 1, 0, 1, 0])]), $a(["full", "3", $_.v1to9, 29, 29, 22, 99, 567, $a([15, 26, 36, 44]), $a([1, 0, 1, 0, 2, 0, 2, 0])]), $a(["full", "4", $_.v1to9, 33, 33, 26, 99, 807, $a([20, 36, 52, 64]), $a([1, 0, 2, 0, 2, 0, 4, 0])]), $a(["full", "5", $_.v1to9, 37, 37, 30, 99, 1079, $a([26, 48, 72, 88]), $a([1, 0, 2, 0, 2, 2, 2, 2])]), $a(["full", "6", $_.v1to9, 41, 41, 34, 99, 1383, $a([36, 64, 96, 112]), $a([2, 0, 4, 0, 4, 0, 4, 0])]), $a(["full", "7", $_.v1to9, 45, 45, 22, 38, 1568, $a([40, 72, 108, 130]), $a([2, 0, 4, 0, 2, 4, 4, 1])]), $a(["full", "8", $_.v1to9, 49, 49, 24, 42, 1936, $a([48, 88, 132, 156]), $a([2, 0, 2, 2, 4, 2, 4, 2])]), $a(["full", "9", $_.v1to9, 53, 53, 26, 46, 2336, $a([60, 110, 160, 192]), $a([2, 0, 3, 2, 4, 4, 4, 4])]), $a(["full", "10", $_.v10to26, 57, 57, 28, 50, 2768, $a([72, 130, 192, 224]), $a([2, 2, 4, 1, 6, 2, 6, 2])]), $a(["full", "11", $_.v10to26, 61, 61, 30, 54, 3232, $a([80, 150, 224, 264]), $a([4, 0, 1, 4, 4, 4, 3, 8])]), $a(["full", "12", $_.v10to26, 65, 65, 32, 58, 3728, $a([96, 176, 260, 308]), $a([2, 2, 6, 2, 4, 6, 7, 4])]), $a(["full", "13", $_.v10to26, 69, 69, 34, 62, 4256, $a([104, 198, 288, 352]), $a([4, 0, 8, 1, 8, 4, 12, 4])]), $a(["full", "14", $_.v10to26, 73, 73, 26, 46, 4651, $a([120, 216, 320, 384]), $a([3, 1, 4, 5, 11, 5, 11, 5])]), $a(["full", "15", $_.v10to26, 77, 77, 26, 48, 5243, $a([132, 240, 360, 432]), $a([5, 1, 5, 5, 5, 7, 11, 7])]), $a(["full", "16", $_.v10to26, 81, 81, 26, 50, 5867, $a([144, 280, 408, 480]), $a([5, 1, 7, 3, 15, 2, 3, 13])]), $a(["full", "17", $_.v10to26, 85, 85, 30, 54, 6523, $a([168, 308, 448, 532]), $a([1, 5, 10, 1, 1, 15, 2, 17])]), $a(["full", "18", $_.v10to26, 89, 89, 30, 56, 7211, $a([180, 338, 504, 588]), $a([5, 1, 9, 4, 17, 1, 2, 19])]), $a(["full", "19", $_.v10to26, 93, 93, 30, 58, 7931, $a([196, 364, 546, 650]), $a([3, 4, 3, 11, 17, 4, 9, 16])]), $a(["full", "20", $_.v10to26, 97, 97, 34, 62, 8683, $a([224, 416, 600, 700]), $a([3, 5, 3, 13, 15, 5, 15, 10])]), $a(["full", "21", $_.v10to26, 101, 101, 28, 50, 9252, $a([224, 442, 644, 750]), $a([4, 4, 17, 0, 17, 6, 19, 6])]), $a(["full", "22", $_.v10to26, 105, 105, 26, 50, 10068, $a([252, 476, 690, 816]), $a([2, 7, 17, 0, 7, 16, 34, 0])]), $a(["full", "23", $_.v10to26, 109, 109, 30, 54, 10916, $a([270, 504, 750, 900]), $a([4, 5, 4, 14, 11, 14, 16, 14])]), $a(["full", "24", $_.v10to26, 113, 113, 28, 54, 11796, $a([300, 560, 810, 960]), $a([6, 4, 6, 14, 11, 16, 30, 2])]), $a(["full", "25", $_.v10to26, 117, 117, 32, 58, 12708, $a([312, 588, 870, 1050]), $a([8, 4, 8, 13, 7, 22, 22, 13])]), $a(["full", "26", $_.v10to26, 121, 121, 30, 58, 13652, $a([336, 644, 952, 1110]), $a([10, 2, 19, 4, 28, 6, 33, 4])]), $a(["full", "27", $_.v27to40, 125, 125, 34, 62, 14628, $a([360, 700, 1020, 1200]), $a([8, 4, 22, 3, 8, 26, 12, 28])]), $a(["full", "28", $_.v27to40, 129, 129, 26, 50, 15371, $a([390, 728, 1050, 1260]), $a([3, 10, 3, 23, 4, 31, 11, 31])]), $a(["full", "29", $_.v27to40, 133, 133, 30, 54, 16411, $a([420, 784, 1140, 1350]), $a([7, 7, 21, 7, 1, 37, 19, 26])]), $a(["full", "30", $_.v27to40, 137, 137, 26, 52, 17483, $a([450, 812, 1200, 1440]), $a([5, 10, 19, 10, 15, 25, 23, 25])]), $a(["full", "31", $_.v27to40, 141, 141, 30, 56, 18587, $a([480, 868, 1290, 1530]), $a([13, 3, 2, 29, 42, 1, 23, 28])]), $a(["full", "32", $_.v27to40, 145, 145, 34, 60, 19723, $a([510, 924, 1350, 1620]), $a([17, 0, 10, 23, 10, 35, 19, 35])]), $a(["full", "33", $_.v27to40, 149, 149, 30, 58, 20891, $a([540, 980, 1440, 1710]), $a([17, 1, 14, 21, 29, 19, 11, 46])]), $a(["full", "34", $_.v27to40, 153, 153, 34, 62, 22091, $a([570, 1036, 1530, 1800]), $a([13, 6, 14, 23, 44, 7, 59, 1])]), $a(["full", "35", $_.v27to40, 157, 157, 30, 54, 23008, $a([570, 1064, 1590, 1890]), $a([12, 7, 12, 26, 39, 14, 22, 41])]), $a(["full", "36", $_.v27to40, 161, 161, 24, 50, 24272, $a([600, 1120, 1680, 1980]), $a([6, 14, 6, 34, 46, 10, 2, 64])]), $a(["full", "37", $_.v27to40, 165, 165, 28, 54, 25568, $a([630, 1204, 1770, 2100]), $a([17, 4, 29, 14, 49, 10, 24, 46])]), $a(["full", "38", $_.v27to40, 169, 169, 32, 58, 26896, $a([660, 1260, 1860, 2220]), $a([4, 18, 13, 32, 48, 14, 42, 32])]), $a(["full", "39", $_.v27to40, 173, 173, 26, 54, 28256, $a([720, 1316, 1950, 2310]), $a([20, 4, 40, 7, 43, 22, 10, 67])]), $a(["full", "40", $_.v27to40, 177, 177, 30, 58, 29648, $a([750, 1372, 2040, 2430]), $a([19, 6, 18, 31, 34, 34, 20, 61])]), $a(["rmqr", "R7x43", $_.vR7x43, 7, 43, 22, 99, 104, $a([99, 7, 99, 10]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R7x59", $_.vR7x59, 7, 59, 20, 40, 171, $a([99, 9, 99, 14]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R7x77", $_.vR7x77, 7, 77, 26, 52, 261, $a([99, 12, 99, 22]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R7x99", $_.vR7x99, 7, 99, 24, 50, 358, $a([99, 16, 99, 30]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R7x139", $_.vR7x139, 7, 139, 28, 56, 545, $a([99, 24, 99, 44]), $a([-1, -1, 1, 0, -1, -1, 2, 0])]), $a(["rmqr", "R9x43", $_.vR9x43, 9, 43, 22, 99, 170, $a([99, 9, 99, 14]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R9x59", $_.vR9x59, 9, 59, 20, 40, 267, $a([99, 12, 99, 22]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R9x77", $_.vR9x77, 9, 77, 26, 52, 393, $a([99, 18, 99, 32]), $a([-1, -1, 1, 0, -1, -1, 1, 1])]), $a(["rmqr", "R9x99", $_.vR9x99, 9, 99, 24, 50, 532, $a([99, 24, 99, 44]), $a([-1, -1, 1, 0, -1, -1, 2, 0])]), $a(["rmqr", "R9x139", $_.vR9x139, 9, 139, 28, 56, 797, $a([99, 36, 99, 66]), $a([-1, -1, 1, 1, -1, -1, 3, 0])]), $a(["rmqr", "R11x27", $_.vR11x27, 11, 27, 98, 99, 122, $a([99, 8, 99, 10]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R11x43", $_.vR11x43, 11, 43, 22, 99, 249, $a([99, 12, 99, 20]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R11x59", $_.vR11x59, 11, 59, 20, 40, 376, $a([99, 16, 99, 32]), $a([-1, -1, 1, 0, -1, -1, 1, 1])]), $a(["rmqr", "R11x77", $_.vR11x77, 11, 77, 26, 52, 538, $a([99, 24, 99, 44]), $a([-1, -1, 1, 0, -1, -1, 1, 1])]), $a(["rmqr", "R11x99", $_.vR11x99, 11, 99, 24, 50, 719, $a([99, 32, 99, 60]), $a([-1, -1, 1, 1, -1, -1, 1, 1])]), $a(["rmqr", "R11x139", $_.vR11x139, 11, 139, 28, 56, 1062, $a([99, 48, 99, 90]), $a([-1, -1, 2, 0, -1, -1, 3, 0])]), $a(["rmqr", "R13x27", $_.vR13x27, 13, 27, 98, 99, 172, $a([99, 9, 99, 14]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R13x43", $_.vR13x43, 13, 43, 22, 99, 329, $a([99, 14, 99, 28]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R13x59", $_.vR13x59, 13, 59, 20, 40, 486, $a([99, 22, 99, 40]), $a([-1, -1, 1, 0, -1, -1, 2, 0])]), $a(["rmqr", "R13x77", $_.vR13x77, 13, 77, 26, 52, 684, $a([99, 32, 99, 56]), $a([-1, -1, 1, 1, -1, -1, 1, 1])]), $a(["rmqr", "R13x99", $_.vR13x99, 13, 99, 24, 50, 907, $a([99, 40, 99, 78]), $a([-1, -1, 1, 1, -1, -1, 1, 2])]), $a(["rmqr", "R13x139", $_.vR13x139, 13, 139, 28, 56, 1328, $a([99, 60, 99, 112]), $a([-1, -1, 2, 1, -1, -1, 2, 2])]), $a(["rmqr", "R15x43", $_.vR15x43, 15, 43, 22, 99, 409, $a([99, 18, 99, 36]), $a([-1, -1, 1, 0, -1, -1, 1, 1])]), $a(["rmqr", "R15x59", $_.vR15x59, 15, 59, 20, 40, 596, $a([99, 26, 99, 48]), $a([-1, -1, 1, 0, -1, -1, 2, 0])]), $a(["rmqr", "R15x77", $_.vR15x77, 15, 77, 26, 52, 830, $a([99, 36, 99, 72]), $a([-1, -1, 1, 1, -1, -1, 2, 1])]), $a(["rmqr", "R15x99", $_.vR15x99, 15, 99, 24, 50, 1095, $a([99, 48, 99, 88]), $a([-1, -1, 2, 0, -1, -1, 4, 0])]), $a(["rmqr", "R15x139", $_.vR15x139, 15, 139, 28, 56, 1594, $a([99, 72, 99, 130]), $a([-1, -1, 2, 1, -1, -1, 1, 4])]), $a(["rmqr", "R17x43", $_.vR17x43, 17, 43, 22, 99, 489, $a([99, 22, 99, 40]), $a([-1, -1, 1, 0, -1, -1, 1, 1])]), $a(["rmqr", "R17x59", $_.vR17x59, 17, 59, 20, 40, 706, $a([99, 32, 99, 60]), $a([-1, -1, 2, 0, -1, -1, 2, 0])]), $a(["rmqr", "R17x77", $_.vR17x77, 17, 77, 26, 52, 976, $a([99, 44, 99, 84]), $a([-1, -1, 2, 0, -1, -1, 1, 2])]), $a(["rmqr", "R17x99", $_.vR17x99, 17, 99, 24, 50, 1283, $a([99, 60, 99, 104]), $a([-1, -1, 2, 1, -1, -1, 4, 0])]), $a(["rmqr", "R17x139", $_.vR17x139, 17, 139, 28, 56, 1860, $a([99, 80, 99, 156]), $a([-1, -1, 4, 0, -1, -1, 2, 4])])]); //#20778
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_qrcode.$ctx[id] = $_[id]); //#20778
        bwipp_qrcode.__20779__ = 1; //#20778
        $_ = Object.getPrototypeOf($_); //#20778
    } //#20778
    $k[$j++] = 'eclval'; //#20781
    $search("LMQH", $_.eclevel); //#20781
    $j--; //#20781
    var _Kj = $k[--$j]; //#20781
    var _Kk = $k[--$j]; //#20781
    $k[$j++] = _Kj.length; //#20781
    $k[$j++] = _Kk; //#20781
    $j--; //#20781
    var _Kl = $k[--$j]; //#20781
    var _Km = $k[--$j]; //#20781
    $k[$j++] = _Kl; //#20781
    $k[$j++] = _Km; //#20781
    $j--; //#20781
    var _Kn = $k[--$j]; //#20781
    $_[$k[--$j]] = _Kn; //#20781
    for (var _Kr = 0, _Kq = $_.metrics.length - 1; _Kr <= _Kq; _Kr += 1) { //#20820
        $_.i = _Kr; //#20783
        $_.m = $get($_.metrics, $_.i); //#20784
        $_.frmt = $get($_.m, 0); //#20785
        $_.vers = $get($_.m, 1); //#20786
        $_.vergrp = $get($_.m, 2); //#20787
        $_.verind = $_.i - 44; //#20788
        $_.rows = $get($_.m, 3); //#20789
        $_.cols = $get($_.m, 4); //#20790
        $_.asp2 = $get($_.m, 5); //#20791
        $_.asp3 = $get($_.m, 6); //#20792
        $_.nmod = $get($_.m, 7); //#20793
        $_.ncws = ~~($_.nmod / 8); //#20794
        $_.rbit = $_.nmod % 8; //#20795
        $_.lc4b = false; //#20796
        if ($eq($_.vers, "M1") || $eq($_.vers, "M3")) { //#20801
            $_.ncws = $_.ncws + 1; //#20798
            $_.rbit = 0; //#20799
            $_.lc4b = true; //#20800
        } //#20800
        $_.ecws = $get($get($_.m, 8), $_.eclval); //#20802
        $_.dcws = $f($_.ncws - $_.ecws); //#20803
        var _LP = $_.lc4b ? 4 : 0; //#20804
        $_.dmod = $f(($_.dcws * 8) - _LP); //#20804
        $_.ecb1 = $get($get($_.m, 9), $_.eclval * 2); //#20805
        $_.ecb2 = $get($get($_.m, 9), $f(($_.eclval * 2) + 1)); //#20806
        $_.okay = true; //#20807
        if ($ne($_.format, $_.frmt)) { //#20808
            $_.okay = false; //#20808
        } //#20808
        if ($eq($_.frmt, "micro") && $_.fnc1first) { //#20809
            $_.okay = false; //#20809
        } //#20809
        if ($ne($_.version, "unset") && $ne($_.version, $_.vers)) { //#20810
            $_.okay = false; //#20810
        } //#20810
        if (($_.ecb1 == -1) || ($_.ecb2 == -1)) { //#20811
            $_.okay = false; //#20811
        } //#20811
        $_.verbits = $get($_.msgbits, $_.vergrp); //#20812
        if ($_.verbits == -1) { //#20816
            $_.okay = false; //#20814
        } else { //#20816
            if ($_.verbits.length > $_.dmod) { //#20816
                $_.okay = false; //#20816
            } //#20816
        } //#20816
        $_.term = $geti("000000000", 0, $get($_.termlens, $_.vergrp)); //#20818
        if ($_.okay) { //#20819
            break; //#20819
        } //#20819
    } //#20819
    if (!$_.okay) { //#20824
        $k[$j++] = 'bwipp.qrcodeNoValidSymbol#20823'; //#20823
        $k[$j++] = "Maximum length exceeded or invalid content"; //#20823
        bwipp_raiseerror(); //#20823
    } //#20823
    $_.format = $_.frmt; //#20826
    $_.version = $_.vers; //#20827
    $_.msgbits = $_.verbits; //#20828
    $_.dcpb = ~~($_.dcws / $f($_.ecb1 + $_.ecb2)); //#20829
    $_.ecpb = (~~($_.ncws / $f($_.ecb1 + $_.ecb2))) - $_.dcpb; //#20830
    var _M3 = $_.term; //#20833
    var _M4 = $_.dmod; //#20833
    var _M5 = $_.msgbits; //#20833
    var _M6 = $_.term; //#20833
    var _M7 = _M6.length; //#20833
    var _M8 = $f(_M4 - _M5.length); //#20833
    if ($f(_M4 - _M5.length) > _M6.length) { //#20833
        var _ = _M7; //#20833
        _M7 = _M8; //#20833
        _M8 = _; //#20833
    } //#20833
    $_.term = $geti(_M3, 0, _M8); //#20833
    var _MC = $s($_.msgbits.length + $_.term.length); //#20834
    $puti(_MC, 0, $_.msgbits); //#20835
    $puti(_MC, $_.msgbits.length, $_.term); //#20836
    $_.msgbits = _MC; //#20837
    $_.pad = $s($_.dmod); //#20840
    for (var _MK = 0, _MJ = $_.pad.length - 1; _MK <= _MJ; _MK += 1) { //#20841
        $put($_.pad, _MK, 48); //#20841
    } //#20841
    $puti($_.pad, 0, $_.msgbits); //#20842
    $_.padnum = 0; //#20843
    var _MR = $_.lc4b ? 5 : 1; //#20844
    for (var _MT = ~~(Math.ceil($_.msgbits.length / 8) * 8), _MS = $f($_.dmod - _MR); _MT <= _MS; _MT += 8) { //#20847
        $puti($_.pad, _MT, $get($_.padstrs, $_.padnum)); //#20845
        $_.padnum = ($_.padnum + 1) % 2; //#20846
    } //#20846
    $_.cws = $a($_.dcws); //#20850
    for (var _Md = 0, _Mc = $_.cws.length - 1; _Md <= _Mc; _Md += 1) { //#20862
        $_.c = _Md; //#20852
        $_.bpcw = 8; //#20853
        if ($_.lc4b && ($_.c == ($_.cws.length - 1))) { //#20854
            $_.bpcw = 4; //#20854
        } //#20854
        $_.cwb = $geti($_.pad, $_.c * 8, $_.bpcw); //#20855
        $_.cw = 0; //#20856
        for (var _Mn = 0, _Mm = $_.bpcw - 1; _Mn <= _Mm; _Mn += 1) { //#20860
            $_.i = _Mn; //#20858
            $_.cw = $f($_.cw + ((~~(Math.pow(2, ($_.bpcw - $_.i) - 1))) * $f($get($_.cwb, $_.i) - 48))); //#20859
        } //#20859
        $put($_.cws, $_.c, $_.cw); //#20861
    } //#20861
    if ($_.lc4b) { //#20865
        var _My = $_.cws; //#20865
        var _Mz = $_.cws; //#20865
        $put(_My, _Mz.length - 1, $get(_My, _Mz.length - 1) << 4); //#20865
    } //#20865
    var _N2 = $get($_.options, 'debugcws') !== undefined; //#20867
    if (_N2) { //#20867
        $k[$j++] = 'bwipp.debugcws#20867'; //#20867
        $k[$j++] = $_.cws; //#20867
        bwipp_raiseerror(); //#20867
    } //#20867
    if (!bwipp_qrcode.__20874__) { //#20874
        $_ = Object.create($_); //#20874
        $k[$j++] = Infinity; //#20871
        $k[$j++] = 1; //#20871
        for (var _N4 = 0, _N5 = 255; _N4 < _N5; _N4++) { //#20871
            var _N6 = $k[--$j]; //#20871
            var _N7 = _N6 * 2; //#20871
            $k[$j++] = _N6; //#20871
            $k[$j++] = _N7; //#20871
            if (_N7 >= 256) { //#20871
                var _N8 = $k[--$j]; //#20871
                $k[$j++] = _N8 ^ 285; //#20871
            } //#20871
        } //#20871
        $_.rsalog = $a(); //#20871
        $_.rslog = $a(256); //#20872
        for (var _NB = 1; _NB <= 255; _NB += 1) { //#20873
            $put($_.rslog, $get($_.rsalog, _NB), _NB); //#20873
        } //#20873
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_qrcode.$ctx[id] = $_[id]); //#20873
        bwipp_qrcode.__20874__ = 1; //#20873
        $_ = Object.getPrototypeOf($_); //#20873
    } //#20873
    $_.rsprod = function() {
        var _NG = $k[--$j]; //#20878
        var _NH = $k[--$j]; //#20878
        $k[$j++] = _NH; //#20882
        $k[$j++] = _NG; //#20882
        if ((_NG != 0) && (_NH != 0)) { //#20881
            var _NK = $get($_.rslog, $k[--$j]); //#20879
            var _NP = $get($_.rsalog, $f(_NK + $get($_.rslog, $k[--$j])) % 255); //#20879
            $k[$j++] = _NP; //#20879
        } else { //#20881
            $j -= 2; //#20881
            $k[$j++] = 0; //#20881
        } //#20881
    }; //#20881
    $k[$j++] = Infinity; //#20886
    $k[$j++] = 1; //#20886
    for (var _NR = 0, _NS = $_.ecpb; _NR < _NS; _NR++) { //#20886
        $k[$j++] = 0; //#20886
    } //#20886
    $_.coeffs = $a(); //#20886
    for (var _NW = 0, _NV = $_.ecpb - 1; _NW <= _NV; _NW += 1) { //#20895
        $_.i = _NW; //#20888
        $put($_.coeffs, $_.i + 1, $get($_.coeffs, $_.i)); //#20889
        for (var _Nd = $_.i; _Nd >= 1; _Nd -= 1) { //#20893
            $_.j = _Nd; //#20891
            $k[$j++] = $_.coeffs; //#20892
            $k[$j++] = $_.j; //#20892
            $k[$j++] = $get($_.coeffs, $_.j - 1); //#20892
            $k[$j++] = $get($_.coeffs, $_.j); //#20892
            $k[$j++] = $get($_.rsalog, $_.i); //#20892
            $_.rsprod(); //#20892
            var _Np = $k[--$j]; //#20892
            var _Nq = $k[--$j]; //#20892
            var _Nr = $k[--$j]; //#20892
            $put($k[--$j], _Nr, $xo(_Nq, _Np)); //#20892
        } //#20892
        $k[$j++] = $_.coeffs; //#20894
        $k[$j++] = 0; //#20894
        $k[$j++] = $get($_.coeffs, 0); //#20894
        $k[$j++] = $get($_.rsalog, $_.i); //#20894
        $_.rsprod(); //#20894
        var _Nz = $k[--$j]; //#20894
        var _O0 = $k[--$j]; //#20894
        $put($k[--$j], _O0, _Nz); //#20894
    } //#20894
    $_.coeffs = $geti($_.coeffs, 0, $_.coeffs.length - 1); //#20896
    $_.rscodes = function() {
        $_.rscws = $k[--$j]; //#20900
        $_.rsnd = $_.rscws.length; //#20901
        $k[$j++] = Infinity; //#20902
        $forall($_.rscws); //#20902
        for (var _O9 = 0, _OA = $_.ecpb; _O9 < _OA; _O9++) { //#20902
            $k[$j++] = 0; //#20902
        } //#20902
        $_.rscws = $a(); //#20902
        for (var _OE = 0, _OD = $_.rsnd - 1; _OE <= _OD; _OE += 1) { //#20910
            $_.m = _OE; //#20904
            $_.k = $get($_.rscws, $_.m); //#20905
            for (var _OK = 0, _OJ = $_.ecpb - 1; _OK <= _OJ; _OK += 1) { //#20909
                $_.j = _OK; //#20907
                $k[$j++] = $_.rscws; //#20908
                $k[$j++] = ($_.m + $_.j) + 1; //#20908
                $k[$j++] = $get($_.coeffs, ($_.ecpb - $_.j) - 1); //#20908
                $k[$j++] = $_.k; //#20908
                $_.rsprod(); //#20908
                var _OX = $k[--$j]; //#20908
                var _OY = $k[--$j]; //#20908
                $put($k[--$j], _OY, $xo(_OX, $get($_.rscws, ($_.m + $_.j) + 1))); //#20908
            } //#20908
        } //#20908
        $k[$j++] = $geti($_.rscws, $_.rsnd, $_.ecpb); //#20911
    }; //#20911
    $_.dcwsb = $a($f($_.ecb1 + $_.ecb2)); //#20915
    $_.ecwsb = $a($f($_.ecb1 + $_.ecb2)); //#20916
    for (var _Om = 0, _Ol = $f($_.ecb1 - 1); _Om <= _Ol; _Om += 1) { //#20921
        $_.i = _Om; //#20918
        $put($_.dcwsb, $_.i, $geti($_.cws, $_.i * $_.dcpb, $_.dcpb)); //#20919
        $k[$j++] = $_.ecwsb; //#20920
        $k[$j++] = $_.i; //#20920
        $k[$j++] = $get($_.dcwsb, $_.i); //#20920
        $_.rscodes(); //#20920
        var _Oz = $k[--$j]; //#20920
        var _P0 = $k[--$j]; //#20920
        $put($k[--$j], _P0, _Oz); //#20920
    } //#20920
    for (var _P4 = 0, _P3 = $f($_.ecb2 - 1); _P4 <= _P3; _P4 += 1) { //#20926
        $_.i = _P4; //#20923
        $put($_.dcwsb, $f($_.ecb1 + $_.i), $geti($_.cws, $f(($_.ecb1 * $_.dcpb) + ($_.i * ($_.dcpb + 1))), $_.dcpb + 1)); //#20924
        $k[$j++] = $_.ecwsb; //#20925
        $k[$j++] = $f($_.ecb1 + $_.i); //#20925
        $k[$j++] = $get($_.dcwsb, $f($_.ecb1 + $_.i)); //#20925
        $_.rscodes(); //#20925
        var _PM = $k[--$j]; //#20925
        var _PN = $k[--$j]; //#20925
        $put($k[--$j], _PN, _PM); //#20925
    } //#20925
    $_.cws = $a($_.ncws); //#20929
    $_.cw = 0; //#20930
    for (var _PT = 0, _PS = $_.dcpb; _PT <= _PS; _PT += 1) { //#20940
        $_.i = _PT; //#20932
        for (var _PX = 0, _PW = $f($f($_.ecb1 + $_.ecb2) - 1); _PX <= _PW; _PX += 1) { //#20939
            $_.j = _PX; //#20934
            if ($_.i < $get($_.dcwsb, $_.j).length) { //#20938
                $put($_.cws, $_.cw, $get($get($_.dcwsb, $_.j), $_.i)); //#20936
                $_.cw = $_.cw + 1; //#20937
            } //#20937
        } //#20937
    } //#20937
    for (var _Pm = 0, _Pl = $_.ecpb - 1; _Pm <= _Pl; _Pm += 1) { //#20948
        $_.i = _Pm; //#20942
        for (var _Pq = 0, _Pp = $f($f($_.ecb1 + $_.ecb2) - 1); _Pq <= _Pp; _Pq += 1) { //#20947
            $_.j = _Pq; //#20944
            $put($_.cws, $_.cw, $get($get($_.ecwsb, $_.j), $_.i)); //#20945
            $_.cw = $_.cw + 1; //#20946
        } //#20946
    } //#20946
    if ($_.rbit > 0) { //#20956
        $_.pad = $a($_.cws.length + 1); //#20952
        $puti($_.pad, 0, $_.cws); //#20953
        $put($_.pad, $_.pad.length - 1, 0); //#20954
        $_.cws = $_.pad; //#20955
    } //#20955
    if ($_.lc4b) { //#20967
        var _Q8 = $_.cws; //#20960
        var _Q9 = $_.dcws; //#20960
        $put(_Q8, $f(_Q9 - 1), $get(_Q8, $f(_Q9 - 1)) >>> 4); //#20960
        for (var _QE = $f($_.dcws - 1), _QD = $_.ncws - 2; _QE <= _QD; _QE += 1) { //#20965
            $_.i = _QE; //#20962
            $put($_.cws, $_.i, ($get($_.cws, $_.i) & 15) << 4); //#20963
            $put($_.cws, $_.i, (($get($_.cws, $_.i + 1) >>> 4) & 15) | $get($_.cws, $_.i)); //#20964
        } //#20964
        $put($_.cws, $_.ncws - 1, ($get($_.cws, $_.ncws - 1) & 15) << 4); //#20966
    } //#20966
    var _QY = $get($_.options, 'debugecc') !== undefined; //#20969
    if (_QY) { //#20969
        $k[$j++] = 'bwipp.debugecc#20969'; //#20969
        $k[$j++] = $_.cws; //#20969
        bwipp_raiseerror(); //#20969
    } //#20969
    $k[$j++] = Infinity; //#20972
    for (var _Qc = 0, _Qd = $_.rows * $_.cols; _Qc < _Qd; _Qc++) { //#20972
        $k[$j++] = -1; //#20972
    } //#20972
    $_.pixs = $a(); //#20972
    $_.qmv = function() {
        var _Qg = $k[--$j]; //#20973
        var _Qh = $k[--$j]; //#20973
        $k[$j++] = $f(_Qh + (_Qg * $_.cols)); //#20973
    }; //#20973
    if ($eq($_.format, "full")) { //#20982
        for (var _Ql = 8, _Qk = $f($_.cols - 9); _Ql <= _Qk; _Ql += 1) { //#20981
            $_.i = _Ql; //#20978
            $k[$j++] = $_.pixs; //#20979
            $k[$j++] = $_.i; //#20979
            $k[$j++] = 6; //#20979
            $_.qmv(); //#20979
            var _Qp = $k[--$j]; //#20979
            $put($k[--$j], _Qp, ($_.i + 1) % 2); //#20979
            $k[$j++] = $_.pixs; //#20980
            $k[$j++] = 6; //#20980
            $k[$j++] = $_.i; //#20980
            $_.qmv(); //#20980
            var _Qu = $k[--$j]; //#20980
            $put($k[--$j], _Qu, ($_.i + 1) % 2); //#20980
        } //#20980
    } //#20980
    if ($eq($_.format, "micro")) { //#20989
        for (var _Qz = 8, _Qy = $f($_.cols - 1); _Qz <= _Qy; _Qz += 1) { //#20988
            $_.i = _Qz; //#20985
            $k[$j++] = $_.pixs; //#20986
            $k[$j++] = $_.i; //#20986
            $k[$j++] = 0; //#20986
            $_.qmv(); //#20986
            var _R3 = $k[--$j]; //#20986
            $put($k[--$j], _R3, ($_.i + 1) % 2); //#20986
            $k[$j++] = $_.pixs; //#20987
            $k[$j++] = 0; //#20987
            $k[$j++] = $_.i; //#20987
            $_.qmv(); //#20987
            var _R8 = $k[--$j]; //#20987
            $put($k[--$j], _R8, ($_.i + 1) % 2); //#20987
        } //#20987
    } //#20987
    if ($eq($_.format, "rmqr")) { //#21008
        for (var _RD = 3, _RC = $f($_.cols - 4); _RD <= _RC; _RD += 1) { //#20995
            $_.i = _RD; //#20992
            $k[$j++] = $_.pixs; //#20993
            $k[$j++] = $_.i; //#20993
            $k[$j++] = 0; //#20993
            $_.qmv(); //#20993
            var _RH = $k[--$j]; //#20993
            $put($k[--$j], _RH, ($_.i + 1) % 2); //#20993
            $k[$j++] = $_.pixs; //#20994
            $k[$j++] = $_.i; //#20994
            $k[$j++] = $f($_.rows - 1); //#20994
            $_.qmv(); //#20994
            var _RN = $k[--$j]; //#20994
            $put($k[--$j], _RN, ($_.i + 1) % 2); //#20994
        } //#20994
        for (var _RR = 3, _RQ = $f($_.rows - 4); _RR <= _RQ; _RR += 1) { //#21000
            $_.i = _RR; //#20997
            $k[$j++] = $_.pixs; //#20998
            $k[$j++] = 0; //#20998
            $k[$j++] = $_.i; //#20998
            $_.qmv(); //#20998
            var _RV = $k[--$j]; //#20998
            $put($k[--$j], _RV, ($_.i + 1) % 2); //#20998
            $k[$j++] = $_.pixs; //#20999
            $k[$j++] = $f($_.cols - 1); //#20999
            $k[$j++] = $_.i; //#20999
            $_.qmv(); //#20999
            var _Rb = $k[--$j]; //#20999
            $put($k[--$j], _Rb, ($_.i + 1) % 2); //#20999
        } //#20999
        for (var _Ri = $f($_.asp2 - 1), _Rj = $f($_.asp3 - $_.asp2), _Rh = $f($_.cols - 13); _Rj < 0 ? _Ri >= _Rh : _Ri <= _Rh; _Ri += _Rj) { //#21007
            $_.i = _Ri; //#21002
            for (var _Rm = 3, _Rl = $f($_.rows - 4); _Rm <= _Rl; _Rm += 1) { //#21006
                $_.j = _Rm; //#21004
                $k[$j++] = $_.pixs; //#21005
                $k[$j++] = $_.i; //#21005
                $k[$j++] = $_.j; //#21005
                $_.qmv(); //#21005
                var _Rr = $k[--$j]; //#21005
                $put($k[--$j], _Rr, ($_.j + 1) % 2); //#21005
            } //#21005
        } //#21005
    } //#21005
    if (!bwipp_qrcode.__21058__) { //#21058
        $_ = Object.create($_); //#21058
        $_.fpat = $a([$a([1, 1, 1, 1, 1, 1, 1, 0]), $a([1, 0, 0, 0, 0, 0, 1, 0]), $a([1, 0, 1, 1, 1, 0, 1, 0]), $a([1, 0, 1, 1, 1, 0, 1, 0]), $a([1, 0, 1, 1, 1, 0, 1, 0]), $a([1, 0, 0, 0, 0, 0, 1, 0]), $a([1, 1, 1, 1, 1, 1, 1, 0]), $a([0, 0, 0, 0, 0, 0, 0, 0])]); //#21021
        $_.fsubpat = $a([$a([1, 1, 1, 1, 1, 9, 9, 9]), $a([1, 0, 0, 0, 1, 9, 9, 9]), $a([1, 0, 1, 0, 1, 9, 9, 9]), $a([1, 0, 0, 0, 1, 9, 9, 9]), $a([1, 1, 1, 1, 1, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9])]); //#21031
        $_.fcorpat = $a([$a([1, 1, 1, 9, 9, 9, 9, 9]), $a([1, 0, 9, 9, 9, 9, 9, 9]), $a([1, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9])]); //#21041
        $_.fnullpat = $a([$a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9])]); //#21051
        var _Si = new Map([
            ["full", $a([$_.fpat, $_.fpat, $_.fpat, $_.fnullpat])],
            ["micro", $a([$_.fpat, $_.fnullpat, $_.fnullpat, $_.fnullpat])],
            ["rmqr", $a([$_.fpat, $_.fcorpat, $_.fcorpat, $_.fsubpat])]
        ]); //#21056
        $_.fpatmap = _Si; //#21057
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_qrcode.$ctx[id] = $_[id]); //#21057
        bwipp_qrcode.__21058__ = 1; //#21057
        $_ = Object.getPrototypeOf($_); //#21057
    } //#21057
    $_.fpats = $get($_.fpatmap, $_.format); //#21059
    for (var _Sn = 0; _Sn <= 7; _Sn += 1) { //#21073
        $_.y = _Sn; //#21061
        for (var _So = 0; _So <= 7; _So += 1) { //#21072
            $_.x = _So; //#21063
            $_.fpb0 = $get($get($get($_.fpats, 0), $_.y), $_.x); //#21064
            $_.fpb1 = $get($get($get($_.fpats, 1), $_.y), $_.x); //#21065
            $_.fpb2 = $get($get($get($_.fpats, 2), $_.y), $_.x); //#21066
            $_.fpb3 = $get($get($get($_.fpats, 3), $_.y), $_.x); //#21067
            if (($_.fpb0 != 9) && ($_.y < $_.rows)) { //#21068
                $k[$j++] = $_.pixs; //#21068
                $k[$j++] = $_.x; //#21068
                $k[$j++] = $_.y; //#21068
                $_.qmv(); //#21068
                var _TK = $k[--$j]; //#21068
                $put($k[--$j], _TK, $_.fpb0); //#21068
            } //#21068
            if ($_.fpb1 != 9) { //#21069
                $k[$j++] = $_.pixs; //#21069
                $k[$j++] = $f($f($_.cols - $_.x) - 1); //#21069
                $k[$j++] = $_.y; //#21069
                $_.qmv(); //#21069
                var _TS = $k[--$j]; //#21069
                $put($k[--$j], _TS, $_.fpb1); //#21069
            } //#21069
            if ($_.fpb2 != 9) { //#21070
                $k[$j++] = $_.pixs; //#21070
                $k[$j++] = $_.x; //#21070
                $k[$j++] = $f($f($_.rows - $_.y) - 1); //#21070
                $_.qmv(); //#21070
                var _Ta = $k[--$j]; //#21070
                $put($k[--$j], _Ta, $_.fpb2); //#21070
            } //#21070
            if ($_.fpb3 != 9) { //#21071
                $k[$j++] = $_.pixs; //#21071
                $k[$j++] = $f($f($_.cols - $_.x) - 1); //#21071
                $k[$j++] = $f($f($_.rows - $_.y) - 1); //#21071
                $_.qmv(); //#21071
                var _Tj = $k[--$j]; //#21071
                $put($k[--$j], _Tj, $_.fpb3); //#21071
            } //#21071
        } //#21071
    } //#21071
    if (!bwipp_qrcode.__21091__) { //#21091
        $_ = Object.create($_); //#21091
        $_.algnpatfull = $a([$a([1, 1, 1, 1, 1]), $a([1, 0, 0, 0, 1]), $a([1, 0, 1, 0, 1]), $a([1, 0, 0, 0, 1]), $a([1, 1, 1, 1, 1])]); //#21083
        $_.algnpatrmqr = $a([$a([1, 1, 1, 9, 9]), $a([1, 0, 1, 9, 9]), $a([1, 1, 1, 9, 9]), $a([9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9])]); //#21090
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_qrcode.$ctx[id] = $_[id]); //#21090
        bwipp_qrcode.__21091__ = 1; //#21090
        $_ = Object.getPrototypeOf($_); //#21090
    } //#21090
    $_.putalgnpat = function() {
        $_.py = $k[--$j]; //#21094
        $_.px = $k[--$j]; //#21095
        for (var _U0 = 0; _U0 <= 4; _U0 += 1) { //#21105
            $_.pb = _U0; //#21097
            for (var _U1 = 0; _U1 <= 4; _U1 += 1) { //#21104
                $_.pa = _U1; //#21099
                $_.algnb = $get($get($_.algnpat, $_.pb), $_.pa); //#21100
                if ($_.algnb != 9) { //#21103
                    $k[$j++] = $_.pixs; //#21102
                    $k[$j++] = $f($_.px + $_.pa); //#21102
                    $k[$j++] = $f($_.py + $_.pb); //#21102
                    $_.qmv(); //#21102
                    var _UE = $k[--$j]; //#21102
                    $put($k[--$j], _UE, $_.algnb); //#21102
                } //#21102
            } //#21102
        } //#21102
    }; //#21102
    if ($eq($_.format, "full")) { //#21121
        $_.algnpat = $_.algnpatfull; //#21108
        for (var _UN = $f($_.asp2 - 2), _UO = $f($_.asp3 - $_.asp2), _UM = $f($_.cols - 13); _UO < 0 ? _UN >= _UM : _UN <= _UM; _UN += _UO) { //#21113
            $_.i = _UN; //#21110
            $k[$j++] = $_.i; //#21111
            $k[$j++] = 4; //#21111
            $_.putalgnpat(); //#21111
            $k[$j++] = 4; //#21112
            $k[$j++] = $_.i; //#21112
            $_.putalgnpat(); //#21112
        } //#21112
        for (var _UW = $f($_.asp2 - 2), _UX = $f($_.asp3 - $_.asp2), _UV = $f($_.cols - 9); _UX < 0 ? _UW >= _UV : _UW <= _UV; _UW += _UX) { //#21120
            $_.x = _UW; //#21115
            for (var _Ud = $f($_.asp2 - 2), _Ue = $f($_.asp3 - $_.asp2), _Uc = $f($_.rows - 9); _Ue < 0 ? _Ud >= _Uc : _Ud <= _Uc; _Ud += _Ue) { //#21119
                $_.y = _Ud; //#21117
                $k[$j++] = $_.x; //#21118
                $k[$j++] = $_.y; //#21118
                $_.putalgnpat(); //#21118
            } //#21118
        } //#21118
    } //#21118
    if ($eq($_.format, "rmqr")) { //#21129
        $_.algnpat = $_.algnpatrmqr; //#21123
        for (var _Uo = $f($_.asp2 - 2), _Up = $f($_.asp3 - $_.asp2), _Un = $f($_.cols - 13); _Up < 0 ? _Uo >= _Un : _Uo <= _Un; _Uo += _Up) { //#21128
            $_.i = _Uo; //#21125
            $k[$j++] = $_.i; //#21126
            $k[$j++] = 0; //#21126
            $_.putalgnpat(); //#21126
            $k[$j++] = $_.i; //#21127
            $k[$j++] = $f($_.rows - 3); //#21127
            $_.putalgnpat(); //#21127
        } //#21127
    } //#21127
    if (!bwipp_qrcode.__21138__) { //#21138
        $_ = Object.create($_); //#21138
        $_.formatmapmicro = $a([$a([$a([1, 8])]), $a([$a([2, 8])]), $a([$a([3, 8])]), $a([$a([4, 8])]), $a([$a([5, 8])]), $a([$a([6, 8])]), $a([$a([7, 8])]), $a([$a([8, 8])]), $a([$a([8, 7])]), $a([$a([8, 6])]), $a([$a([8, 5])]), $a([$a([8, 4])]), $a([$a([8, 3])]), $a([$a([8, 2])]), $a([$a([8, 1])])]); //#21137
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_qrcode.$ctx[id] = $_[id]); //#21137
        bwipp_qrcode.__21138__ = 1; //#21137
        $_ = Object.getPrototypeOf($_); //#21137
    } //#21137
    var _Xs = new Map([
        ["full", $a([$a([$a([0, 8]), $a([8, $f($_.cols - 1)])]), $a([$a([1, 8]), $a([8, $f($_.cols - 2)])]), $a([$a([2, 8]), $a([8, $f($_.cols - 3)])]), $a([$a([3, 8]), $a([8, $f($_.cols - 4)])]), $a([$a([4, 8]), $a([8, $f($_.cols - 5)])]), $a([$a([5, 8]), $a([8, $f($_.cols - 6)])]), $a([$a([7, 8]), $a([8, $f($_.cols - 7)])]), $a([$a([8, 8]), $a([$f($_.cols - 8), 8])]), $a([$a([8, 7]), $a([$f($_.cols - 7), 8])]), $a([$a([8, 5]), $a([$f($_.cols - 6), 8])]), $a([$a([8, 4]), $a([$f($_.cols - 5), 8])]), $a([$a([8, 3]), $a([$f($_.cols - 4), 8])]), $a([$a([8, 2]), $a([$f($_.cols - 3), 8])]), $a([$a([8, 1]), $a([$f($_.cols - 2), 8])]), $a([$a([8, 0]), $a([$f($_.cols - 1), 8])])])],
        ["micro", $_.formatmapmicro],
        ["rmqr", $a([$a([$a([11, 3]), $a([$f($_.cols - 3), $f($_.rows - 6)])]), $a([$a([11, 2]), $a([$f($_.cols - 4), $f($_.rows - 6)])]), $a([$a([11, 1]), $a([$f($_.cols - 5), $f($_.rows - 6)])]), $a([$a([10, 5]), $a([$f($_.cols - 6), $f($_.rows - 2)])]), $a([$a([10, 4]), $a([$f($_.cols - 6), $f($_.rows - 3)])]), $a([$a([10, 3]), $a([$f($_.cols - 6), $f($_.rows - 4)])]), $a([$a([10, 2]), $a([$f($_.cols - 6), $f($_.rows - 5)])]), $a([$a([10, 1]), $a([$f($_.cols - 6), $f($_.rows - 6)])]), $a([$a([9, 5]), $a([$f($_.cols - 7), $f($_.rows - 2)])]), $a([$a([9, 4]), $a([$f($_.cols - 7), $f($_.rows - 3)])]), $a([$a([9, 3]), $a([$f($_.cols - 7), $f($_.rows - 4)])]), $a([$a([9, 2]), $a([$f($_.cols - 7), $f($_.rows - 5)])]), $a([$a([9, 1]), $a([$f($_.cols - 7), $f($_.rows - 6)])]), $a([$a([8, 5]), $a([$f($_.cols - 8), $f($_.rows - 2)])]), $a([$a([8, 4]), $a([$f($_.cols - 8), $f($_.rows - 3)])]), $a([$a([8, 3]), $a([$f($_.cols - 8), $f($_.rows - 4)])]), $a([$a([8, 2]), $a([$f($_.cols - 8), $f($_.rows - 5)])]), $a([$a([8, 1]), $a([$f($_.cols - 8), $f($_.rows - 6)])])])]
    ]); //#21154
    $_.formatmap = $get(_Xs, $_.format); //#21156
    $forall($_.formatmap, function() { //#21159
        $forall($k[--$j], function() { //#21158
            $forall($k[--$j]); //#21158
            $_.qmv(); //#21158
            $put($_.pixs, $k[--$j], 1); //#21158
        }); //#21158
    }); //#21158
    if ($eq($_.format, "full") && ($_.cols >= 45)) { //#21175
        $_.versionmap = $a([$a([$a([$f($_.cols - 9), 5]), $a([5, $f($_.cols - 9)])]), $a([$a([$f($_.cols - 10), 5]), $a([5, $f($_.cols - 10)])]), $a([$a([$f($_.cols - 11), 5]), $a([5, $f($_.cols - 11)])]), $a([$a([$f($_.cols - 9), 4]), $a([4, $f($_.cols - 9)])]), $a([$a([$f($_.cols - 10), 4]), $a([4, $f($_.cols - 10)])]), $a([$a([$f($_.cols - 11), 4]), $a([4, $f($_.cols - 11)])]), $a([$a([$f($_.cols - 9), 3]), $a([3, $f($_.cols - 9)])]), $a([$a([$f($_.cols - 10), 3]), $a([3, $f($_.cols - 10)])]), $a([$a([$f($_.cols - 11), 3]), $a([3, $f($_.cols - 11)])]), $a([$a([$f($_.cols - 9), 2]), $a([2, $f($_.cols - 9)])]), $a([$a([$f($_.cols - 10), 2]), $a([2, $f($_.cols - 10)])]), $a([$a([$f($_.cols - 11), 2]), $a([2, $f($_.cols - 11)])]), $a([$a([$f($_.cols - 9), 1]), $a([1, $f($_.cols - 9)])]), $a([$a([$f($_.cols - 10), 1]), $a([1, $f($_.cols - 10)])]), $a([$a([$f($_.cols - 11), 1]), $a([1, $f($_.cols - 11)])]), $a([$a([$f($_.cols - 9), 0]), $a([0, $f($_.cols - 9)])]), $a([$a([$f($_.cols - 10), 0]), $a([0, $f($_.cols - 10)])]), $a([$a([$f($_.cols - 11), 0]), $a([0, $f($_.cols - 11)])])]); //#21173
    } else { //#21175
        $_.versionmap = $a([]); //#21175
    } //#21175
    var _ZW = $_.versionmap; //#21177
    for (var _ZX = 0, _ZY = _ZW.length; _ZX < _ZY; _ZX++) { //#21179
        $forall($get(_ZW, _ZX), function() { //#21178
            $forall($k[--$j]); //#21178
            $_.qmv(); //#21178
            $put($_.pixs, $k[--$j], 0); //#21178
        }); //#21178
    } //#21178
    if ($eq($_.format, "full")) { //#21184
        $k[$j++] = $_.pixs; //#21183
        $k[$j++] = 8; //#21183
        $k[$j++] = $f($_.rows - 8); //#21183
        $_.qmv(); //#21183
        var _Zg = $k[--$j]; //#21183
        $put($k[--$j], _Zg, 0); //#21183
    } //#21183
    var _a0 = $a([function() {
        var _Zi = $k[--$j]; //#21189
        var _Zj = $k[--$j]; //#21189
        $k[$j++] = $f(_Zj + _Zi) % 2; //#21189
    }, function() {
        var _Zk = $k[--$j]; //#21190
        var _Zl = $k[--$j]; //#21190
        $k[$j++] = _Zk; //#21190
        $k[$j++] = _Zl; //#21190
        $j--; //#21190
        var _Zm = $k[--$j]; //#21190
        $k[$j++] = _Zm % 2; //#21190
    }, function() {
        $j--; //#21191
        var _Zn = $k[--$j]; //#21191
        $k[$j++] = _Zn % 3; //#21191
    }, function() {
        var _Zo = $k[--$j]; //#21192
        var _Zp = $k[--$j]; //#21192
        $k[$j++] = $f(_Zp + _Zo) % 3; //#21192
    }, function() {
        var _Zq = $k[--$j]; //#21193
        var _Zr = $k[--$j]; //#21193
        $k[$j++] = ((~~(_Zq / 2)) + (~~(_Zr / 3))) % 2; //#21193
    }, function() {
        var _Zs = $k[--$j]; //#21194
        var _Zu = $k[--$j] * _Zs; //#21194
        $k[$j++] = $f((_Zu % 2) + (_Zu % 3)); //#21194
    }, function() {
        var _Zv = $k[--$j]; //#21195
        var _Zx = $k[--$j] * _Zv; //#21195
        $k[$j++] = ($f((_Zx % 2) + (_Zx % 3))) % 2; //#21195
    }, function() {
        var _Zy = $k[--$j]; //#21196
        var _Zz = $k[--$j]; //#21196
        $k[$j++] = ($f(((_Zz * _Zy) % 3) + ($f(_Zz + _Zy) % 2))) % 2; //#21196
    }]); //#21196
    var _aB = $a([function() {
        var _a1 = $k[--$j]; //#21199
        var _a2 = $k[--$j]; //#21199
        $k[$j++] = _a1; //#21199
        $k[$j++] = _a2; //#21199
        $j--; //#21199
        var _a3 = $k[--$j]; //#21199
        $k[$j++] = _a3 % 2; //#21199
    }, function() {
        var _a4 = $k[--$j]; //#21200
        var _a5 = $k[--$j]; //#21200
        $k[$j++] = ((~~(_a4 / 2)) + (~~(_a5 / 3))) % 2; //#21200
    }, function() {
        var _a6 = $k[--$j]; //#21201
        var _a8 = $k[--$j] * _a6; //#21201
        $k[$j++] = ($f((_a8 % 2) + (_a8 % 3))) % 2; //#21201
    }, function() {
        var _a9 = $k[--$j]; //#21202
        var _aA = $k[--$j]; //#21202
        $k[$j++] = ($f(((_aA * _a9) % 3) + ($f(_aA + _a9) % 2))) % 2; //#21202
    }]); //#21202
    var _aE = $a([function() {
        var _aC = $k[--$j]; //#21205
        var _aD = $k[--$j]; //#21205
        $k[$j++] = ((~~(_aC / 2)) + (~~(_aD / 3))) % 2; //#21205
    }]); //#21205
    var _aF = new Map([
        ["full", _a0],
        ["micro", _aB],
        ["rmqr", _aE]
    ]); //#21205
    $_.maskfuncs = $get(_aF, $_.format); //#21207
    if ($_.mask != -1) { //#21211
        $_.maskfuncs = $a([$get($_.maskfuncs, $_.mask - 1)]); //#21209
        $_.bestmaskval = $_.mask - 1; //#21210
    } //#21210
    $_.masks = $a($_.maskfuncs.length); //#21212
    for (var _aS = 0, _aR = $_.masks.length - 1; _aS <= _aR; _aS += 1) { //#21226
        $_.m = _aS; //#21214
        $_.mask = $a($_.rows * $_.cols); //#21215
        for (var _aY = 0, _aX = $f($_.rows - 1); _aY <= _aX; _aY += 1) { //#21224
            $_.j = _aY; //#21217
            for (var _ab = 0, _aa = $f($_.cols - 1); _ab <= _aa; _ab += 1) { //#21223
                $_.i = _ab; //#21219
                $k[$j++] = $_.i; //#21220
                $k[$j++] = $_.j; //#21220
                if ($get($_.maskfuncs, $_.m)() === true) {
                    break;
                } //#21220
                var _ah = $k[--$j]; //#21220
                $k[$j++] = _ah == 0; //#21221
                $k[$j++] = $_.pixs; //#21221
                $k[$j++] = $_.i; //#21221
                $k[$j++] = $_.j; //#21221
                $_.qmv(); //#21221
                var _al = $k[--$j]; //#21221
                var _an = $get($k[--$j], _al); //#21221
                var _ao = $k[--$j]; //#21221
                var _ap = (_ao && (_an == -1)) ? 1 : 0; //#21221
                $k[$j++] = _ap; //#21222
                $k[$j++] = $_.mask; //#21222
                $k[$j++] = $_.i; //#21222
                $k[$j++] = $_.j; //#21222
                $_.qmv(); //#21222
                $r(3, -1); //#21222
                var _at = $k[--$j]; //#21222
                var _au = $k[--$j]; //#21222
                $put($k[--$j], _au, _at); //#21222
            } //#21222
        } //#21222
        $put($_.masks, $_.m, $_.mask); //#21225
    } //#21225
    var _b1 = $ne($_.format, "rmqr") ? 1 : 2; //#21229
    $_.posx = $f($_.cols - _b1); //#21229
    $_.posy = $f($_.rows - 1); //#21230
    $_.dir = -1; //#21231
    $_.col = 1; //#21232
    $_.num = 0; //#21233
    for (;;) { //#21256
        if ($_.posx < 0) { //#21235
            break; //#21235
        } //#21235
        $k[$j++] = $_.pixs; //#21236
        $k[$j++] = $_.posx; //#21236
        $k[$j++] = $_.posy; //#21236
        $_.qmv(); //#21236
        var _b7 = $k[--$j]; //#21236
        if ($get($k[--$j], _b7) == -1) { //#21240
            var _bC = $get($_.cws, ~~($_.num / 8)); //#21237
            var _bE = -(7 - ($_.num % 8)); //#21237
            $k[$j++] = ((_bE < 0 ? _bC >>> -_bE : _bC << _bE)) & 1; //#21238
            $k[$j++] = $_.pixs; //#21238
            $k[$j++] = $_.posx; //#21238
            $k[$j++] = $_.posy; //#21238
            $_.qmv(); //#21238
            $r(3, -1); //#21238
            var _bI = $k[--$j]; //#21238
            var _bJ = $k[--$j]; //#21238
            $put($k[--$j], _bJ, _bI); //#21238
            $_.num = $_.num + 1; //#21239
        } //#21239
        if ($_.col == 1) { //#21253
            $_.col = 0; //#21242
            $_.posx = $f($_.posx - 1); //#21243
        } else { //#21253
            $_.col = 1; //#21245
            $_.posx = $f($_.posx + 1); //#21246
            $_.posy = $f($_.posy + $_.dir); //#21247
            if (($_.posy < 0) || ($_.posy >= $_.rows)) { //#21254
                $_.dir = $_.dir * -1; //#21249
                $_.posy = $f($_.posy + $_.dir); //#21250
                $_.posx = $f($_.posx - 2); //#21251
                if ($eq($_.format, "full") && ($_.posx == 6)) { //#21253
                    $_.posx = $f($_.posx - 1); //#21253
                } //#21253
            } //#21253
        } //#21253
    } //#21253
    $_.evalfulln1n3 = function() {
        $_.scrle = $k[--$j]; //#21260
        $k[$j++] = 'scr1'; //#21262
        $k[$j++] = 0; //#21262
        $forall($_.scrle, function() { //#21262
            var _bd = $k[--$j]; //#21262
            $k[$j++] = _bd; //#21262
            if (_bd >= 5) { //#21262
                var _be = $k[--$j]; //#21262
                var _bg = $f($f($k[--$j] + _be) - 2); //#21262
                $k[$j++] = _bg; //#21262
                $k[$j++] = _bg; //#21262
            } //#21262
            $j--; //#21262
        }); //#21262
        var _bh = $k[--$j]; //#21262
        $_[$k[--$j]] = _bh; //#21262
        $_.scr3 = 0; //#21264
        for (var _bl = 3, _bk = $_.scrle.length - 3; _bl <= _bk; _bl += 2) { //#21279
            $_.j = _bl; //#21266
            if (($get($_.scrle, $_.j) % 3) == 0) { //#21278
                $_.fact = ~~($get($_.scrle, $_.j) / 3); //#21268
                var _bu = $geti($_.scrle, $_.j - 2, 5); //#21269
                for (var _bv = 0, _bw = _bu.length; _bv < _bw; _bv++) { //#21269
                    $k[$j++] = $get(_bu, _bv) == $_.fact; //#21269
                } //#21269
                var _bz = $k[--$j]; //#21269
                var _c0 = $k[--$j]; //#21269
                var _c1 = $k[--$j]; //#21269
                $k[$j++] = $an(_c0, _bz); //#21269
                $k[$j++] = _c1; //#21269
                $j--; //#21269
                var _c2 = $k[--$j]; //#21269
                var _c3 = $k[--$j]; //#21269
                var _c4 = $k[--$j]; //#21269
                if (_c4 && (_c3 && _c2)) { //#21277
                    if (($_.j == 3) || (($_.j + 4) >= $_.scrle.length)) { //#21274
                        $_.scr3 = $_.scr3 + 40; //#21271
                    } else { //#21274
                        if (($get($_.scrle, $_.j - 3) >= 4) || ($get($_.scrle, $_.j + 3) >= 4)) { //#21275
                            $_.scr3 = $_.scr3 + 40; //#21274
                        } //#21274
                    } //#21274
                } //#21274
            } //#21274
        } //#21274
        $k[$j++] = $_.scr1; //#21280
        $k[$j++] = $_.scr3; //#21280
    }; //#21280
    $_.evalfull = function() {
        $_.sym = $k[--$j]; //#21285
        $_.n1 = 0; //#21287
        $_.n2 = 0; //#21287
        $_.n3 = 0; //#21287
        $_.rle = $a($f($_.cols + 1)); //#21288
        $_.lastpairs = $a($_.cols); //#21289
        $_.thispairs = $a($_.cols); //#21290
        $_.colsadd1 = $f($_.cols + 1); //#21291
        for (var _cS = 0, _cR = $f($_.cols - 1); _cS <= _cR; _cS += 1) { //#21330
            $_.i = _cS; //#21293
            $k[$j++] = Infinity; //#21296
            var _cU = $_.cols; //#21297
            $k[$j++] = 0; //#21299
            $k[$j++] = 0; //#21299
            for (var _cW = $_.i, _cX = _cU, _cV = $f((_cU * _cU) - 1); _cX < 0 ? _cW >= _cV : _cW <= _cV; _cW += _cX) { //#21299
                var _cZ = $get($_.sym, _cW); //#21298
                var _ca = $k[--$j]; //#21298
                $k[$j++] = _cZ; //#21298
                if ($eq(_ca, _cZ)) { //#21298
                    var _cb = $k[--$j]; //#21298
                    var _cc = $k[--$j]; //#21298
                    $k[$j++] = $f(_cc + 1); //#21298
                    $k[$j++] = _cb; //#21298
                } else { //#21298
                    var _cd = $k[--$j]; //#21298
                    $k[$j++] = 1; //#21298
                    $k[$j++] = _cd; //#21298
                } //#21298
            } //#21298
            $j--; //#21300
            var _cf = $counttomark() + 2; //#21301
            $astore($geti($_.rle, 0, _cf - 2)); //#21301
            $_.evalfulln1n3(); //#21302
            $_.n3 = $f($k[--$j] + $_.n3); //#21302
            $_.n1 = $f($k[--$j] + $_.n1); //#21302
            $j--; //#21303
            $_.symrow = $geti($_.sym, $_.i * $_.cols, $_.cols); //#21306
            $k[$j++] = Infinity; //#21307
            var _cq = $_.symrow; //#21308
            $k[$j++] = 0; //#21310
            $k[$j++] = 0; //#21310
            for (var _cr = 0, _cs = _cq.length; _cr < _cs; _cr++) { //#21310
                var _ct = $get(_cq, _cr); //#21310
                var _cu = $k[--$j]; //#21309
                $k[$j++] = _ct; //#21309
                if ($eq(_cu, _ct)) { //#21309
                    var _cv = $k[--$j]; //#21309
                    var _cw = $k[--$j]; //#21309
                    $k[$j++] = $f(_cw + 1); //#21309
                    $k[$j++] = _cv; //#21309
                } else { //#21309
                    var _cx = $k[--$j]; //#21309
                    $k[$j++] = 1; //#21309
                    $k[$j++] = _cx; //#21309
                } //#21309
            } //#21309
            $j--; //#21311
            var _cz = $counttomark() + 2; //#21312
            $astore($geti($_.rle, 0, _cz - 2)); //#21312
            $_.evalfulln1n3(); //#21313
            $_.n3 = $f($k[--$j] + $_.n3); //#21313
            $_.n1 = $f($k[--$j] + $_.n1); //#21313
            $j--; //#21314
            var _d5 = $_.thispairs; //#21317
            $_.thispairs = $_.lastpairs; //#21317
            $_.lastpairs = _d5; //#21317
            var _d9 = ($get($_.symrow, 0) == 1) ? 0 : 1; //#21318
            var _dA = $_.symrow; //#21319
            $k[$j++] = _d9; //#21319
            for (var _dB = 0, _dC = _dA.length; _dB < _dC; _dB++) { //#21319
                var _dD = $get(_dA, _dB); //#21319
                var _dE = $k[--$j]; //#21319
                $k[$j++] = $f(_dE + _dD); //#21319
                $k[$j++] = _dD; //#21319
            } //#21319
            $j--; //#21320
            $astore($_.thispairs); //#21321
            $j--; //#21321
            if ($_.i > 0) { //#21328
                $k[$j++] = Infinity; //#21323
                $aload($_.lastpairs); //#21324
                $aload($_.thispairs); //#21324
                $k[$j++] = $_.n2; //#21325
                for (var _dL = 0, _dM = $_.cols; _dL < _dM; _dL++) { //#21325
                    var _dN = $k[--$j]; //#21325
                    var _dO = $k[--$j]; //#21325
                    $k[$j++] = _dN; //#21325
                    $k[$j++] = _dO; //#21325
                    var _dQ = $k[$j - 1 - $_.colsadd1]; //#21325
                    if (($f($k[--$j] + _dQ) & 3) == 0) { //#21325
                        var _dS = $k[--$j]; //#21325
                        $k[$j++] = $f(_dS + 3); //#21325
                    } //#21325
                } //#21325
                $_.n2 = $k[--$j]; //#21326
                $cleartomark(); //#21327
            } //#21327
        } //#21327
        $k[$j++] = 'dark'; //#21333
        $k[$j++] = 0; //#21333
        $forall($_.sym, function() { //#21333
            var _dV = $k[--$j]; //#21333
            var _dW = $k[--$j]; //#21333
            $k[$j++] = $f(_dW + _dV); //#21333
        }); //#21333
        var _dX = $k[--$j]; //#21333
        $_[$k[--$j]] = _dX; //#21333
        var _da = $_.cols; //#21334
        $_.n4 = (~~((Math.abs($f((($_.dark * 100) / (_da * _da)) - 50))) / 5)) * 10; //#21334
        $k[$j++] = $f(($f($f($_.n1 + $_.n2) + $_.n3)) + $_.n4); //#21336
    }; //#21336
    $_.evalmicro = function() {
        $_.sym = $k[--$j]; //#21341
        $_.dkrhs = 0; //#21342
        $_.dkbot = 0; //#21342
        for (var _di = 1, _dh = $f($_.cols - 1); _di <= _dh; _di += 1) { //#21347
            $_.i = _di; //#21344
            $k[$j++] = 'dkrhs'; //#21345
            $k[$j++] = $_.dkrhs; //#21345
            $k[$j++] = $_.sym; //#21345
            $k[$j++] = $f($_.cols - 1); //#21345
            $k[$j++] = $_.i; //#21345
            $_.qmv(); //#21345
            var _dn = $k[--$j]; //#21345
            var _dp = $get($k[--$j], _dn); //#21345
            var _dq = $k[--$j]; //#21345
            $_[$k[--$j]] = $f(_dq + _dp); //#21345
            $k[$j++] = 'dkbot'; //#21346
            $k[$j++] = $_.dkbot; //#21346
            $k[$j++] = $_.sym; //#21346
            $k[$j++] = $_.i; //#21346
            $k[$j++] = $f($_.cols - 1); //#21346
            $_.qmv(); //#21346
            var _dw = $k[--$j]; //#21346
            var _dy = $get($k[--$j], _dw); //#21346
            var _dz = $k[--$j]; //#21346
            $_[$k[--$j]] = $f(_dz + _dy); //#21346
        } //#21346
        if ($_.dkrhs <= $_.dkbot) { //#21351
            $k[$j++] = -(($_.dkrhs * 16) + $_.dkbot); //#21349
        } else { //#21351
            $k[$j++] = -(($_.dkbot * 16) + $_.dkrhs); //#21351
        } //#21351
    }; //#21351
    $_.bestscore = 999999999; //#21356
    for (var _e9 = 0, _e8 = $_.masks.length - 1; _e9 <= _e8; _e9 += 1) { //#21378
        $_.m = _e9; //#21358
        $_.masksym = $a($_.rows * $_.cols); //#21359
        for (var _eG = 0, _eF = $f(($_.rows * $_.cols) - 1); _eG <= _eF; _eG += 1) { //#21363
            $_.i = _eG; //#21361
            $put($_.masksym, $_.i, $xo($get($_.pixs, $_.i), $get($get($_.masks, $_.m), $_.i))); //#21362
        } //#21362
        if ($_.masks.length != 1) { //#21376
            if ($eq($_.format, "full")) { //#21368
                $k[$j++] = $_.masksym; //#21366
                $_.evalfull(); //#21366
                $_.score = $k[--$j]; //#21366
            } else { //#21368
                $k[$j++] = $_.masksym; //#21368
                $_.evalmicro(); //#21368
                $_.score = $k[--$j]; //#21368
            } //#21368
            if ($_.score < $_.bestscore) { //#21374
                $_.bestsym = $_.masksym; //#21371
                $_.bestmaskval = $_.m; //#21372
                $_.bestscore = $_.score; //#21373
            } //#21373
        } else { //#21376
            $_.bestsym = $_.masksym; //#21376
        } //#21376
    } //#21376
    $_.pixs = $_.bestsym; //#21379
    if ($eq($_.format, "full")) { //#21384
        $k[$j++] = $_.pixs; //#21383
        $k[$j++] = 8; //#21383
        $k[$j++] = $f($_.cols - 8); //#21383
        $_.qmv(); //#21383
        var _eh = $k[--$j]; //#21383
        $put($k[--$j], _eh, 1); //#21383
    } //#21383
    if (!bwipp_qrcode.__21420__) { //#21420
        $_ = Object.create($_); //#21420
        $_.fmtvalsfull = $a([21522, 20773, 24188, 23371, 17913, 16590, 20375, 19104, 30660, 29427, 32170, 30877, 26159, 25368, 27713, 26998, 5769, 5054, 7399, 6608, 1890, 597, 3340, 2107, 13663, 12392, 16177, 14854, 9396, 8579, 11994, 11245]); //#21393
        $_.fmtvalsmicro = $a([17477, 16754, 20011, 19228, 21934, 20633, 24512, 23287, 26515, 25252, 28157, 26826, 30328, 29519, 31766, 31009, 1758, 1001, 3248, 2439, 5941, 4610, 7515, 6252, 9480, 8255, 12134, 10833, 13539, 12756, 16013, 15290]); //#21399
        $_.fmtvalsrmqr1 = $a([129714, 124311, 121821, 115960, 112748, 108361, 104707, 99878, 98062, 90155, 89697, 82244, 81360, 74485, 72895, 66458, 61898, 61167, 53413, 53120, 45844, 44081, 37499, 36190, 29814, 27475, 21785, 19004, 13992, 10637, 6087, 2274, 258919, 257090, 250376, 249133, 242105, 241308, 233686, 233459, 227035, 223742, 219060, 215185, 209925, 207648, 202090, 199247, 194591, 190266, 186736, 181845, 178881, 173540, 170926, 165003, 163235, 156294, 154828, 148457, 147325, 139352, 138770, 131383]); //#21409
        $_.fmtvalsrmqr2 = $a([133755, 136542, 142100, 144433, 149669, 153472, 158154, 161519, 167879, 168162, 175784, 176525, 183577, 184892, 191606, 193363, 196867, 204326, 204908, 212809, 213981, 220408, 221874, 228759, 230591, 236442, 239056, 244469, 247393, 252228, 255758, 260139, 942, 7307, 8897, 15844, 16752, 24149, 24607, 32570, 34322, 39223, 42877, 47192, 50380, 56297, 58787, 64134, 67798, 71667, 76217, 79516, 84488, 87341, 93031, 95298, 101738, 102991, 109573, 111392, 118708, 118929, 126683, 127486]); //#21419
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_qrcode.$ctx[id] = $_[id]); //#21419
        bwipp_qrcode.__21420__ = 1; //#21419
        $_ = Object.getPrototypeOf($_); //#21419
    } //#21419
    if ($eq($_.format, "full")) { //#21430
        $k[$j++] = 'ecid'; //#21422
        $search("MLHQ", $_.eclevel); //#21422
        $j--; //#21422
        var _eq = $k[--$j]; //#21422
        var _er = $k[--$j]; //#21422
        $k[$j++] = _eq.length; //#21422
        $k[$j++] = _er; //#21422
        $j--; //#21422
        var _es = $k[--$j]; //#21422
        var _et = $k[--$j]; //#21422
        $k[$j++] = _es; //#21422
        $k[$j++] = _et; //#21422
        $j--; //#21422
        var _eu = $k[--$j]; //#21422
        $_[$k[--$j]] = _eu; //#21422
        $_.fmtval = $get($_.fmtvalsfull, ($_.ecid << 3) + $_.bestmaskval); //#21423
        for (var _f2 = 0, _f1 = $_.formatmap.length - 1; _f2 <= _f1; _f2 += 1) { //#21429
            $_.i = _f2; //#21425
            $forall($get($_.formatmap, $_.i), function() { //#21428
                var _f7 = $k[--$j]; //#21427
                $k[$j++] = $_.pixs; //#21427
                $aload(_f7); //#21427
                $_.qmv(); //#21427
                var _f8 = $_.fmtval; //#21427
                var _fA = -(14 - $_.i); //#21427
                var _fB = $k[--$j]; //#21427
                $put($k[--$j], _fB, ((_fA < 0 ? _f8 >>> -_fA : _f8 << _fA)) & 1); //#21427
            }); //#21427
        } //#21427
    } //#21427
    if ($eq($_.format, "micro")) { //#21438
        $_.symid = $get($get($a([$a([0]), $a([1, 2]), $a([3, 4]), $a([5, 6, 7])]), ~~($f($_.cols - 11) / 2)), $_.eclval); //#21432
        $_.fmtval = $get($_.fmtvalsmicro, ($_.symid << 2) + $_.bestmaskval); //#21433
        for (var _fT = 0, _fS = $_.formatmap.length - 1; _fT <= _fS; _fT += 1) { //#21437
            $_.i = _fT; //#21435
            $k[$j++] = $_.pixs; //#21436
            $aload($get($get($_.formatmap, $_.i), 0)); //#21436
            $_.qmv(); //#21436
            var _fZ = $_.fmtval; //#21436
            var _fb = -(14 - $_.i); //#21436
            var _fc = $k[--$j]; //#21436
            $put($k[--$j], _fc, ((_fb < 0 ? _fZ >>> -_fb : _fZ << _fb)) & 1); //#21436
        } //#21436
    } //#21436
    if ($eq($_.format, "rmqr")) { //#21448
        $k[$j++] = 'fmtvalu'; //#21440
        $search("MH", $_.eclevel); //#21440
        $j--; //#21440
        var _fg = $k[--$j]; //#21440
        var _fh = $k[--$j]; //#21440
        $k[$j++] = _fg.length; //#21440
        $k[$j++] = _fh; //#21440
        $j--; //#21440
        var _fi = $k[--$j]; //#21440
        var _fj = $k[--$j]; //#21440
        $k[$j++] = _fi; //#21440
        $k[$j++] = _fj; //#21440
        $j--; //#21440
        var _fk = $k[--$j]; //#21440
        $_[$k[--$j]] = (_fk << 5) + $_.verind; //#21440
        $_.fmtval1 = $get($_.fmtvalsrmqr1, $_.fmtvalu); //#21441
        $_.fmtval2 = $get($_.fmtvalsrmqr2, $_.fmtvalu); //#21442
        for (var _fv = 0, _fu = $_.formatmap.length - 1; _fv <= _fu; _fv += 1) { //#21447
            $_.i = _fv; //#21444
            $k[$j++] = $_.pixs; //#21445
            $aload($get($get($_.formatmap, $_.i), 0)); //#21445
            $_.qmv(); //#21445
            var _g1 = $_.fmtval1; //#21445
            var _g3 = -(17 - $_.i); //#21445
            var _g4 = $k[--$j]; //#21445
            $put($k[--$j], _g4, ((_g3 < 0 ? _g1 >>> -_g3 : _g1 << _g3)) & 1); //#21445
            $k[$j++] = $_.pixs; //#21446
            $aload($get($get($_.formatmap, $_.i), 1)); //#21446
            $_.qmv(); //#21446
            var _gB = $_.fmtval2; //#21446
            var _gD = -(17 - $_.i); //#21446
            var _gE = $k[--$j]; //#21446
            $put($k[--$j], _gE, ((_gD < 0 ? _gB >>> -_gD : _gB << _gD)) & 1); //#21446
        } //#21446
    } //#21446
    if (!bwipp_qrcode.__21459__) { //#21459
        $_ = Object.create($_); //#21459
        $_.vervals = $a([31892, 34236, 39577, 42195, 48118, 51042, 55367, 58893, 63784, 68472, 70749, 76311, 79154, 84390, 87683, 92361, 96236, 102084, 102881, 110507, 110734, 117786, 119615, 126325, 127568, 133589, 136944, 141498, 145311, 150283, 152622, 158308, 161089, 167017]); //#21458
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_qrcode.$ctx[id] = $_[id]); //#21458
        bwipp_qrcode.__21459__ = 1; //#21458
        $_ = Object.getPrototypeOf($_); //#21458
    } //#21458
    if ($eq($_.format, "full") && ($_.cols >= 45)) { //#21468
        $_.verval = $get($_.vervals, (~~($f($_.cols - 17) / 4)) - 7); //#21461
        for (var _gP = 0, _gO = $_.versionmap.length - 1; _gP <= _gO; _gP += 1) { //#21467
            $_.i = _gP; //#21463
            $forall($get($_.versionmap, $_.i), function() { //#21466
                var _gU = $k[--$j]; //#21465
                $k[$j++] = $_.pixs; //#21465
                $forall(_gU); //#21465
                $_.qmv(); //#21465
                var _gV = $_.verval; //#21465
                var _gX = -(17 - $_.i); //#21465
                var _gY = $k[--$j]; //#21465
                $put($k[--$j], _gY, ((_gX < 0 ? _gV >>> -_gX : _gV << _gX)) & 1); //#21465
            }); //#21465
        } //#21465
    } //#21465
    $k[$j++] = Infinity; //#21471
    $k[$j++] = 'ren'; //#21478
    $k[$j++] = 'renmatrix'; //#21478
    $k[$j++] = 'pixs'; //#21478
    $k[$j++] = $_.pixs; //#21478
    $k[$j++] = 'pixx'; //#21478
    $k[$j++] = $_.cols; //#21478
    $k[$j++] = 'pixy'; //#21478
    $k[$j++] = $_.rows; //#21478
    $k[$j++] = 'height'; //#21478
    $k[$j++] = ($_.rows * 2) / 72; //#21478
    $k[$j++] = 'width'; //#21478
    $k[$j++] = ($_.cols * 2) / 72; //#21478
    $k[$j++] = 'borderleft'; //#21478
    if ($eq($_.format, "full")) { //#21478
        $k[$j++] = 4; //#21478
    } else { //#21478
        $k[$j++] = 2; //#21478
    } //#21478
    $k[$j++] = 'borderright'; //#21479
    if ($eq($_.format, "full")) { //#21479
        $k[$j++] = 4; //#21479
    } else { //#21479
        $k[$j++] = 2; //#21479
    } //#21479
    $k[$j++] = 'bordertop'; //#21480
    if ($eq($_.format, "full")) { //#21480
        $k[$j++] = 4; //#21480
    } else { //#21480
        $k[$j++] = 2; //#21480
    } //#21480
    $k[$j++] = 'borderbottom'; //#21481
    if ($eq($_.format, "full")) { //#21481
        $k[$j++] = 4; //#21481
    } else { //#21481
        $k[$j++] = 2; //#21481
    } //#21481
    $k[$j++] = 'opt'; //#21482
    $k[$j++] = $_.options; //#21482
    var _gk = $d(); //#21482
    $k[$j++] = _gk; //#21485
    if (!$_.dontdraw) { //#21485
        bwipp_renmatrix(); //#21485
    } //#21485
    $_ = Object.getPrototypeOf($_); //#21487
    $_ = Object.getPrototypeOf($_); //#21489
} //bwipp_qrcode
function bwipp_swissqrcode() {
    $_ = Object.create($_); //#21519
    $_.dontdraw = false; //#21522
    $_.parse = false; //#21523
    $k[$j++] = $_; //#21525
    bwipp_processoptions(); //#21525
    $_.options = $k[--$j]; //#21525
    $_.barcode = $k[--$j]; //#21526
    var _3 = new Map([
        ["parse", $_.parse],
        ["parseonly", true],
        ["parsefnc", false]
    ]); //#21532
    $_.fncvals = _3; //#21533
    $k[$j++] = 'barcode'; //#21534
    $k[$j++] = $_.barcode; //#21534
    $k[$j++] = $_.fncvals; //#21534
    bwipp_parseinput(); //#21534
    var _6 = $k[--$j]; //#21534
    $_[$k[--$j]] = _6; //#21534
    $_.barlen = $_.barcode.length; //#21535
    delete $_.options["parse"]; //#21536
    if ($_.barcode.length > 997) { //#21541
        $k[$j++] = 'bwipp.swissqrcodeBadLength#21540'; //#21540
        $k[$j++] = "Swiss QR Code input must not exceed 997 digits"; //#21540
        bwipp_raiseerror(); //#21540
    } //#21540
    $put($_.options, "dontdraw", true); //#21544
    $k[$j++] = 'args'; //#21545
    $k[$j++] = $_.barcode; //#21545
    $k[$j++] = $_.options; //#21545
    bwipp_qrcode(); //#21545
    var _E = $k[--$j]; //#21545
    $_[$k[--$j]] = _E; //#21545
    $put($_.args, "opt", $_.options); //#21547
    $k[$j++] = $_.args; //#21616
    if (!$_.dontdraw) { //#21616
        $$.save(); //#21561
        var _K = $$.currpos(); //#21562
        $$.translate(_K.x, _K.y); //#21562
        var _L = 72 / 25.4; //#21563
        $$.scale(_L, _L); //#21563
        $$.save(); //#21566
        $$.newpath(); //#21567
        $$.moveto(0, 0); //#21568
        $$.lineto(46, 0); //#21569
        $$.lineto(46, 46); //#21570
        $$.lineto(0, 46); //#21571
        $$.closepath(); //#21572
        $$.moveto(19.5, 19.5); //#21573
        $$.lineto(19.5, 26.5); //#21574
        $$.lineto(26.5, 26.5); //#21575
        $$.lineto(26.5, 19.5); //#21576
        $$.closepath(); //#21577
        $$.clip(); //#21578
        $$.save(); //#21581
        $$.moveto(0, 0); //#21582
        var _O = (46 / $get($_.args, "pixx")) / 2; //#21583
        $$.scale(_O, _O); //#21583
        bwipp_renmatrix(); //#21584
        $$.restore(); //#21585
        $$.restore(); //#21587
        $$.translate(19.5, 19.5); //#21590
        var _P = 7 / 83; //#21591
        $$.scale(_P, _P); //#21591
        $$.newpath(); //#21593
        $$.moveto(6, 6); //#21594
        $$.lineto(6, 77); //#21595
        $$.lineto(77, 77); //#21596
        $$.lineto(77, 6); //#21597
        $$.closepath(); //#21598
        $$.moveto(49, 18); //#21599
        $$.lineto(49, 34); //#21600
        $$.lineto(65, 34); //#21601
        $$.lineto(65, 49); //#21602
        $$.lineto(49, 49); //#21603
        $$.lineto(49, 65); //#21604
        $$.lineto(34, 65); //#21605
        $$.lineto(34, 49); //#21606
        $$.lineto(18, 49); //#21607
        $$.lineto(18, 34); //#21608
        $$.lineto(34, 34); //#21609
        $$.lineto(34, 18); //#21610
        $$.closepath(); //#21611
        $$.setrgbcolor(0, 0, 0); //#21612
        $$.fill(); //#21612
        $$.restore(); //#21614
    } //#21614
    $_ = Object.getPrototypeOf($_); //#21618
} //bwipp_swissqrcode
function bwipp_microqrcode() {
    $_ = Object.create($_); //#21647
    $_.dontdraw = false; //#21650
    $k[$j++] = $_; //#21652
    bwipp_processoptions(); //#21652
    $_.options = $k[--$j]; //#21652
    $_.barcode = $k[--$j]; //#21653
    $put($_.options, "dontdraw", true); //#21656
    $put($_.options, "format", "micro"); //#21657
    $k[$j++] = 'args'; //#21659
    $k[$j++] = $_.barcode; //#21659
    $k[$j++] = $_.options; //#21659
    bwipp_qrcode(); //#21659
    var _6 = $k[--$j]; //#21659
    $_[$k[--$j]] = _6; //#21659
    $put($_.args, "opt", $_.options); //#21661
    $k[$j++] = $_.args; //#21664
    if (!$_.dontdraw) { //#21664
        bwipp_renmatrix(); //#21664
    } //#21664
    $_ = Object.getPrototypeOf($_); //#21666
} //bwipp_microqrcode
function bwipp_rectangularmicroqrcode() {
    $_ = Object.create($_); //#21695
    $_.dontdraw = false; //#21698
    $k[$j++] = $_; //#21700
    bwipp_processoptions(); //#21700
    $_.options = $k[--$j]; //#21700
    $_.barcode = $k[--$j]; //#21701
    $put($_.options, "dontdraw", true); //#21704
    $put($_.options, "format", "rmqr"); //#21705
    $k[$j++] = 'args'; //#21707
    $k[$j++] = $_.barcode; //#21707
    $k[$j++] = $_.options; //#21707
    bwipp_qrcode(); //#21707
    var _6 = $k[--$j]; //#21707
    $_[$k[--$j]] = _6; //#21707
    $put($_.args, "opt", $_.options); //#21709
    $k[$j++] = $_.args; //#21712
    if (!$_.dontdraw) { //#21712
        bwipp_renmatrix(); //#21712
    } //#21712
    $_ = Object.getPrototypeOf($_); //#21714
} //bwipp_rectangularmicroqrcode
function bwipp_maxicode() {
    $_ = Object.create($_); //#21745
    $_.dontdraw = false; //#21748
    $_.mode = -1; //#21749
    $_.sam = -1; //#21750
    $_.parse = false; //#21751
    $_.parsefnc = false; //#21752
    $k[$j++] = $_; //#21754
    bwipp_processoptions(); //#21754
    $_.options = $k[--$j]; //#21754
    $_.barcode = $k[--$j]; //#21755
    if ($eq($_.barcode, "")) { //#21759
        $k[$j++] = 'bwipp.maxicodeEmptyData#21758'; //#21758
        $k[$j++] = "The data must not be empty"; //#21758
        bwipp_raiseerror(); //#21758
    } //#21758
    if (($_.mode != -1) && (($_.mode < 2) || ($_.mode > 6))) { //#21763
        $k[$j++] = 'bwipp.maxicodeBadMode#21762'; //#21762
        $k[$j++] = "Mode must be 2 to 6"; //#21762
        bwipp_raiseerror(); //#21762
    } //#21762
    if ($_.sam != -1) { //#21775
        $k[$j++] = true; //#21771
        for (var _7 = 0, _8 = 1; _7 < _8; _7++) { //#21771
            var _9 = $_.sam; //#21768
            if ((_9 < 12) || (_9 > 88)) { //#21768
                $j--; //#21768
                $k[$j++] = false; //#21768
                break; //#21768
            } //#21768
            var _B = $_.sam % 10; //#21769
            if ((_B < 2) || (_B > 8)) { //#21769
                $j--; //#21769
                $k[$j++] = false; //#21769
                break; //#21769
            } //#21769
            if ((~~($_.sam / 10)) > ($_.sam % 10)) { //#21770
                $j--; //#21770
                $k[$j++] = false; //#21770
                break; //#21770
            } //#21770
        } //#21770
        if ($nt($k[--$j])) { //#21774
            $k[$j++] = 'bwipp.maxicodeBadSAM#21773'; //#21773
            $k[$j++] = "SAM must be formatted as \"NM\" for Nth of M symbols, from 2 to 8 symbols"; //#21773
            bwipp_raiseerror(); //#21773
        } //#21773
    } //#21773
    bwipp_loadctx(bwipp_maxicode); //#21777
    var _H = new Map([
        ["parse", $_.parse],
        ["parsefnc", $_.parsefnc],
        ["eci", true]
    ]); //#21783
    $_.fncvals = _H; //#21785
    $k[$j++] = 'msg'; //#21786
    $k[$j++] = $_.barcode; //#21786
    $k[$j++] = $_.fncvals; //#21786
    bwipp_parseinput(); //#21786
    var _K = $k[--$j]; //#21786
    $_[$k[--$j]] = _K; //#21786
    $_.msglen = $_.msg.length; //#21787
    if (($_.mode == 2) || ($_.mode == 3)) { //#21875
        $_.barcode = $s($_.msglen); //#21793
        for (var _T = 0, _S = $_.msglen - 1; _T <= _S; _T += 1) { //#21799
            $_.i = _T; //#21795
            if ($get($_.msg, $_.i) > 0) { //#21798
                $put($_.barcode, $_.i, $get($_.msg, $_.i)); //#21797
            } //#21797
        } //#21797
        $_.barlen = $_.barcode.length; //#21800
        $_.fid = ""; //#21803
        if ($_.barlen >= 7) { //#21809
            if ($eq($geti($_.barcode, 0, 7), "\x5b\x29\x3e\x1e\x30\x31\x1d")) { //#21808
                $_.fid = $geti($_.barcode, 0, 9); //#21806
                $_.barcode = $geti($_.barcode, 9, $_.barlen - 9); //#21807
            } //#21807
        } //#21807
        $search($_.barcode, "\x1d"); //#21813
        if ($k[--$j]) { //#21835
            $_.pcode = $k[--$j]; //#21814
            $j--; //#21814
            if ($_.mode == 2) { //#21830
                $k[$j++] = true; //#21820
                for (var _p = 0, _q = 1; _p < _q; _p++) { //#21820
                    if ($_.pcode.length > 9) { //#21818
                        $j--; //#21818
                        $k[$j++] = false; //#21818
                        break; //#21818
                    } //#21818
                    $forall($_.pcode, function() { //#21819
                        var _t = $k[--$j]; //#21819
                        if ((_t < 48) || (_t > 57)) { //#21819
                            $j--; //#21819
                            $k[$j++] = false; //#21819
                            return true; //#21819
                        } //#21819
                    }); //#21819
                } //#21819
                if ($nt($k[--$j])) { //#21823
                    $j--; //#21822
                    $k[$j++] = 'bwipp.maxicodeBadMode2PostCode#21822'; //#21822
                    $k[$j++] = "A mode 2 postcode must not exceed 9 digits"; //#21822
                    bwipp_raiseerror(); //#21822
                } //#21822
            } else { //#21830
                $forall($_.pcode, function() { //#21832
                    var _w = $k[--$j]; //#21826
                    if (!((_w == 32) || (((_w >= 34) && (_w <= 58)) || ((_w >= 65) && (_w <= 90))))) { //#21831
                        $j--; //#21830
                        $k[$j++] = 'bwipp.maxicodeBadMode3PostCode#21830'; //#21830
                        $k[$j++] = "A mode 3 postcode must not exceed 6 characters"; //#21830
                        bwipp_raiseerror(); //#21830
                    } //#21830
                }); //#21830
            } //#21830
        } else { //#21835
            $j--; //#21835
            $k[$j++] = 'bwipp.maxicodeExpectedPostCode#21835'; //#21835
            $k[$j++] = "Expected postcode followed by group separator character"; //#21835
            bwipp_raiseerror(); //#21835
        } //#21835
        $search($k[--$j], "\x1d"); //#21837
        if ($k[--$j]) { //#21848
            $_.ccode = $k[--$j]; //#21838
            $j--; //#21838
            $k[$j++] = true; //#21843
            for (var _10 = 0, _11 = 1; _10 < _11; _10++) { //#21843
                if ($_.ccode.length != 3) { //#21841
                    $j--; //#21841
                    $k[$j++] = false; //#21841
                    break; //#21841
                } //#21841
                $forall($_.ccode, function() { //#21842
                    var _14 = $k[--$j]; //#21842
                    if ((_14 < 48) || (_14 > 57)) { //#21842
                        $j--; //#21842
                        $k[$j++] = false; //#21842
                        return true; //#21842
                    } //#21842
                }); //#21842
            } //#21842
            if ($nt($k[--$j])) { //#21846
                $j--; //#21845
                $k[$j++] = 'bwipp.maxicodeBadCountryCode#21845'; //#21845
                $k[$j++] = "Country code must be three digits"; //#21845
                bwipp_raiseerror(); //#21845
            } //#21845
        } else { //#21848
            $j--; //#21848
            $k[$j++] = 'bwipp.maxicodeExpectedCountryCode#21848'; //#21848
            $k[$j++] = "Expected country code followed by group separator character"; //#21848
            bwipp_raiseerror(); //#21848
        } //#21848
        $search($k[--$j], "\x1d"); //#21850
        if ($k[--$j]) { //#21861
            $_.scode = $k[--$j]; //#21851
            $j--; //#21851
            $k[$j++] = true; //#21856
            for (var _19 = 0, _1A = 1; _19 < _1A; _19++) { //#21856
                if ($_.scode.length != 3) { //#21854
                    $j--; //#21854
                    $k[$j++] = false; //#21854
                    break; //#21854
                } //#21854
                $forall($_.scode, function() { //#21855
                    var _1D = $k[--$j]; //#21855
                    if ((_1D < 48) || (_1D > 57)) { //#21855
                        $j--; //#21855
                        $k[$j++] = false; //#21855
                        return true; //#21855
                    } //#21855
                }); //#21855
            } //#21855
            if ($nt($k[--$j])) { //#21859
                $j--; //#21858
                $k[$j++] = 'bwipp.maxicodeBadServiceClass#21858'; //#21858
                $k[$j++] = "Service class must be three digits"; //#21858
                bwipp_raiseerror(); //#21858
            } //#21858
        } else { //#21861
            $j--; //#21861
            $k[$j++] = 'bwipp.maxicodeExpectedServiceClass#21861'; //#21861
            $k[$j++] = "Expected service class followed by group separator character"; //#21861
            bwipp_raiseerror(); //#21861
        } //#21861
        $_.barcode = $k[--$j]; //#21863
        var _1I = $s($_.barcode.length + $_.fid.length); //#21866
        $puti(_1I, 0, $_.fid); //#21867
        $puti(_1I, $_.fid.length, $_.barcode); //#21868
        $_.barcode = _1I; //#21869
        $_.barlen = $_.barcode.length; //#21870
        $k[$j++] = Infinity; //#21872
        var _1N = $_.barcode; //#21872
        for (var _1O = 0, _1P = _1N.length; _1O < _1P; _1O++) { //#21872
            $k[$j++] = $get(_1N, _1O); //#21872
        } //#21872
        $_.msg = $a(); //#21872
        $_.msglen = $_.msg.length; //#21873
    } //#21873
    if (!bwipp_maxicode.__21971__) { //#21971
        $_ = Object.create($_); //#21971
        $_.eci = -1; //#21879
        $_.pad = -2; //#21879
        $_.ns = -3; //#21879
        $_.la = -4; //#21880
        $_.lb = -5; //#21880
        $_.sa = -6; //#21881
        $_.sb = -7; //#21881
        $_.sc = -8; //#21881
        $_.sd = -9; //#21881
        $_.se = -10; //#21881
        $_.sa2 = -11; //#21882
        $_.sa3 = -12; //#21882
        $_.lkc = -13; //#21883
        $_.lkd = -14; //#21883
        $_.lke = -15; //#21883
        $_.pd2 = -16; //#21884
        $_.pd3 = -17; //#21884
        $_.charmaps = $a([$a([13, "`", 192, 224, 0]), $a(["A", "a", 193, 225, 1]), $a(["B", "b", 194, 226, 2]), $a(["C", "c", 195, 227, 3]), $a(["D", "d", 196, 228, 4]), $a(["E", "e", 197, 229, 5]), $a(["F", "f", 198, 230, 6]), $a(["G", "g", 199, 231, 7]), $a(["H", "h", 200, 232, 8]), $a(["I", "i", 201, 233, 9]), $a(["J", "j", 202, 234, 10]), $a(["K", "k", 203, 235, 11]), $a(["L", "l", 204, 236, 12]), $a(["M", "m", 205, 237, 13]), $a(["N", "n", 206, 238, 14]), $a(["O", "o", 207, 239, 15]), $a(["P", "p", 208, 240, 16]), $a(["Q", "q", 209, 241, 17]), $a(["R", "r", 210, 242, 18]), $a(["S", "s", 211, 243, 19]), $a(["T", "t", 212, 244, 20]), $a(["U", "u", 213, 245, 21]), $a(["V", "v", 214, 246, 22]), $a(["W", "w", 215, 247, 23]), $a(["X", "x", 216, 248, 24]), $a(["Y", "y", 217, 249, 25]), $a(["Z", "z", 218, 250, 26]), $a([$_.eci, $_.eci, $_.eci, $_.eci, $_.eci]), $a([28, 28, 28, 28, $_.pad]), $a([29, 29, 29, 29, $_.pad]), $a([30, 30, 30, 30, 27]), $a([$_.ns, $_.ns, $_.ns, $_.ns, $_.ns]), $a([" ", "{", 219, 251, 28]), $a([$_.pad, $_.pad, 220, 252, 29]), $a(["\"", "}", 221, 253, 30]), $a(["#", "~", 222, 254, 31]), $a(["$", 127, 223, 255, 159]), $a(["%", ";", 170, 161, 160]), $a(["&", "<", 172, 168, 162]), $a(["'", "=", 177, 171, 163]), $a([40, ">", 178, 175, 164]), $a([41, "?", 179, 176, 165]), $a(["*", "[", 181, 180, 166]), $a(["+", 92, 185, 183, 167]), $a([",", "]", 186, 184, 169]), $a(["-", "^", 188, 187, 173]), $a([".", "_", 189, 191, 174]), $a(["/", " ", 190, 138, 182]), $a(["0", ",", 128, 139, 149]), $a(["1", ".", 129, 140, 150]), $a(["2", "/", 130, 141, 151]), $a(["3", ":", 131, 142, 152]), $a(["4", "@", 132, 143, 153]), $a(["5", "!", 133, 144, 154]), $a(["6", "|", 134, 145, 155]), $a(["7", $_.pd2, 135, 146, 156]), $a(["8", $_.sa2, 136, 147, 157]), $a(["9", $_.sa3, 137, 148, 158]), $a([":", $_.pd3, $_.la, $_.la, $_.la]), $a([$_.sb, $_.sa, " ", " ", " "]), $a([$_.sc, $_.sc, $_.lkc, $_.sc, $_.sc]), $a([$_.sd, $_.sd, $_.sd, $_.lkd, $_.sd]), $a([$_.se, $_.se, $_.se, $_.se, $_.lke]), $a([$_.lb, $_.la, $_.lb, $_.lb, $_.lb])]); //#21953
        $_.charvals = $a([new Map, new Map, new Map, new Map, new Map]); //#21956
        for (var _3G = 0, _3F = $_.charmaps.length - 1; _3G <= _3F; _3G += 1) { //#21965
            $_.i = _3G; //#21958
            $_.encs = $get($_.charmaps, $_.i); //#21959
            for (var _3K = 0; _3K <= 4; _3K += 1) { //#21964
                $_.j = _3K; //#21961
                var _3N = $get($_.encs, $_.j); //#21962
                $k[$j++] = _3N; //#21962
                if ($eq($type(_3N), 'stringtype')) { //#21962
                    var _3Q = $get($k[--$j], 0); //#21962
                    $k[$j++] = _3Q; //#21962
                } //#21962
                $put($get($_.charvals, $_.j), $k[--$j], $_.i); //#21963
            } //#21963
        } //#21963
        $_.seta = $get($_.charvals, 0); //#21966
        $_.setb = $get($_.charvals, 1); //#21967
        $_.setc = $get($_.charvals, 2); //#21968
        $_.setd = $get($_.charvals, 3); //#21969
        $_.sete = $get($_.charvals, 4); //#21970
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_maxicode.$ctx[id] = $_[id]); //#21970
        bwipp_maxicode.__21971__ = 1; //#21970
        $_ = Object.getPrototypeOf($_); //#21970
    } //#21970
    $k[$j++] = Infinity; //#21974
    for (var _3i = 0, _3j = $_.msglen + 1; _3i < _3j; _3i++) { //#21974
        $k[$j++] = 0; //#21974
    } //#21974
    $_.nseq = $a(); //#21974
    for (var _3m = $_.msglen - 1; _3m >= 0; _3m -= 1) { //#21982
        $_.i = _3m; //#21976
        var _3p = $get($_.msg, $_.i); //#21977
        if ((_3p >= 48) && (_3p <= 57)) { //#21980
            $put($_.nseq, $_.i, $f($get($_.nseq, $_.i + 1) + 1)); //#21978
        } else { //#21980
            $put($_.nseq, $_.i, 0); //#21980
        } //#21980
    } //#21980
    $_.nseq = $geti($_.nseq, 0, $_.msglen); //#21983
    $_.prefixinset = function() {
        $k[$j++] = 0; //#21990
        for (;;) { //#21990
            var _40 = $k[--$j]; //#21988
            var _41 = $k[--$j]; //#21988
            $k[$j++] = _41; //#21988
            $k[$j++] = _40; //#21988
            if (_40 >= _41.length) { //#21988
                break; //#21988
            } //#21988
            var _42 = $k[--$j]; //#21989
            var _43 = $k[--$j]; //#21989
            var _45 = $k[--$j]; //#21989
            var _46 = $get(_45, $get(_43, _42)) !== undefined; //#21989
            $k[$j++] = _45; //#21989
            $k[$j++] = _43; //#21989
            $k[$j++] = _42; //#21989
            if (_46) { //#21989
                var _47 = $k[--$j]; //#21989
                $k[$j++] = $f(_47 + 1); //#21989
            } else { //#21989
                break; //#21989
            } //#21989
        } //#21989
        var _48 = $k[--$j]; //#21991
        var _49 = $k[--$j]; //#21991
        $k[$j++] = _48; //#21991
        $k[$j++] = _49; //#21991
        $j--; //#21991
        var _4A = $k[--$j]; //#21991
        var _4B = $k[--$j]; //#21991
        $k[$j++] = _4A; //#21991
        $k[$j++] = _4B; //#21991
        $j--; //#21991
    }; //#21991
    $_.enc = function() {
        var _4C = $k[--$j]; //#21995
        $put($_.out, $_.j, $get(_4C, $k[--$j])); //#21995
        $_.j = $_.j + 1; //#21996
    }; //#21996
    $_.out = $a(144); //#21999
    $_.i = 0; //#22000
    $_.j = 0; //#22000
    $_.cset = "seta"; //#22000
    for (;;) { //#22152
        if ($_.i == $_.msglen) { //#22009
            if ($ne($_.cset, "seta") && $ne($_.cset, "setb")) { //#22007
                $k[$j++] = $_.la; //#22005
                $k[$j++] = $_[$_.cset]; //#22005
                $_.enc(); //#22005
                $_.cset = "seta"; //#22006
            } //#22006
            break; //#22008
        } //#22008
        for (;;) { //#22151
            if ($get($_.msg, $_.i) <= -1000000) { //#22038
                $k[$j++] = $_.eci; //#22013
                $k[$j++] = $_[$_.cset]; //#22013
                $_.enc(); //#22013
                var _4Z = $f((-$get($_.msg, $_.i)) - 1000000); //#22015
                $k[$j++] = _4Z; //#22033
                if (_4Z <= 31) { //#22032
                    var _4a = $k[--$j]; //#22016
                    $k[$j++] = _4a & 63; //#22017
                    $astore($a(1)); //#22017
                } else { //#22032
                    var _4c = $k[--$j]; //#22018
                    $k[$j++] = _4c; //#22033
                    if (_4c <= 1023) { //#22032
                        var _4d = $k[--$j]; //#22019
                        $k[$j++] = ((_4d >>> 6) & 31) | 32; //#22021
                        $k[$j++] = _4d & 63; //#22021
                        $astore($a(2)); //#22021
                    } else { //#22032
                        var _4f = $k[--$j]; //#22022
                        $k[$j++] = _4f; //#22033
                        if (_4f <= 32767) { //#22032
                            var _4g = $k[--$j]; //#22023
                            $k[$j++] = ((_4g >>> 12) & 47) | 48; //#22026
                            $k[$j++] = (_4g >>> 6) & 63; //#22026
                            $k[$j++] = _4g & 63; //#22026
                            $astore($a(3)); //#22026
                        } else { //#22032
                            var _4i = $k[--$j]; //#22028
                            $k[$j++] = ((_4i >>> 18) & 55) | 56; //#22032
                            $k[$j++] = (_4i >>> 12) & 63; //#22032
                            $k[$j++] = (_4i >>> 6) & 63; //#22032
                            $k[$j++] = _4i & 63; //#22032
                            $astore($a(4)); //#22032
                        } //#22032
                    } //#22032
                } //#22032
                var _4k = $k[--$j]; //#22034
                $puti($_.out, $_.j, _4k); //#22034
                $_.j = _4k.length + $_.j; //#22035
                $_.i = $_.i + 1; //#22036
                break; //#22037
            } //#22037
            if ($get($_.nseq, $_.i) >= 9) { //#22049
                var _4u = $geti($_.msg, $_.i, 9); //#22042
                $k[$j++] = 0; //#22042
                for (var _4v = 0, _4w = _4u.length; _4v < _4w; _4v++) { //#22042
                    var _4y = $k[--$j]; //#22042
                    $k[$j++] = ($f(_4y + $f($get(_4u, _4v) - 48))) * 10; //#22042
                } //#22042
                var _4z = $k[--$j]; //#22042
                $k[$j++] = ~~(_4z / 10); //#22043
                for (var _50 = 0, _51 = 4; _50 < _51; _50++) { //#22043
                    var _52 = $k[--$j]; //#22043
                    $k[$j++] = _52 & 63; //#22043
                    $k[$j++] = _52 >>> 6; //#22043
                } //#22043
                $k[$j++] = $get($_[$_.cset], $_.ns); //#22044
                for (var _57 = 0; _57 <= 10; _57 += 2) { //#22044
                    var _58 = $k[$j - 1 - _57]; //#22044
                    $k[$j++] = _58; //#22044
                } //#22044
                $astore($a(6)); //#22044
                $r(7, 1); //#22044
                for (var _5A = 0, _5B = 6; _5A < _5B; _5A++) { //#22044
                    $j--; //#22044
                } //#22044
                $puti($_.out, $_.j, $k[--$j]); //#22045
                $_.i = $_.i + 9; //#22046
                $_.j = $_.j + 6; //#22047
                break; //#22048
            } //#22048
            $_.char1 = $get($_.msg, $_.i); //#22052
            $k[$j++] = 'char2'; //#22053
            if (($_.i + 1) < $_.msglen) { //#22053
                $k[$j++] = $get($_.msg, $_.i + 1); //#22053
            } else { //#22053
                $k[$j++] = -99; //#22053
            } //#22053
            var _5P = $k[--$j]; //#22053
            $_[$k[--$j]] = _5P; //#22053
            $k[$j++] = 'char3'; //#22054
            if (($_.i + 2) < $_.msglen) { //#22054
                $k[$j++] = $get($_.msg, $_.i + 2); //#22054
            } else { //#22054
                $k[$j++] = -99; //#22054
            } //#22054
            var _5W = $k[--$j]; //#22054
            $_[$k[--$j]] = _5W; //#22054
            var _5b = $get($_[$_.cset], $_.char1) !== undefined; //#22057
            if (_5b) { //#22061
                $k[$j++] = $_.char1; //#22058
                $k[$j++] = $_[$_.cset]; //#22058
                $_.enc(); //#22058
                $_.i = $_.i + 1; //#22059
                break; //#22060
            } //#22060
            var _5j = $get($_.setb, $_.char1) !== undefined; //#22064
            if ($eq($_.cset, "seta") && _5j) { //#22074
                var _5m = $get($_.setb, $_.char2) !== undefined; //#22065
                if (_5m) { //#22071
                    $k[$j++] = $_.lb; //#22066
                    $k[$j++] = $_.seta; //#22066
                    $_.enc(); //#22066
                    $_.cset = "setb"; //#22067
                } else { //#22071
                    $k[$j++] = $_.sb; //#22069
                    $k[$j++] = $_.seta; //#22069
                    $_.enc(); //#22069
                    $k[$j++] = $_.char1; //#22070
                    $k[$j++] = $_.setb; //#22070
                    $_.enc(); //#22070
                    $_.i = $_.i + 1; //#22071
                } //#22071
                break; //#22073
            } //#22073
            var _5x = $get($_.seta, $_.char1) !== undefined; //#22077
            if ($eq($_.cset, "setb") && _5x) { //#22102
                var _5y = $_.seta; //#22078
                var _5z = $_.msg; //#22078
                var _60 = $_.i; //#22078
                var _61 = $_.msglen; //#22078
                var _62 = $_.i; //#22078
                var _63 = _61 - _62; //#22078
                var _64 = 4; //#22078
                if (4 > (_61 - _62)) { //#22078
                    var _ = _63; //#22078
                    _63 = _64; //#22078
                    _64 = _; //#22078
                } //#22078
                $k[$j++] = 'p'; //#22078
                $k[$j++] = _5y; //#22078
                $k[$j++] = $geti(_5z, _60, _64); //#22078
                $_.prefixinset(); //#22078
                var _66 = $k[--$j]; //#22078
                $_[$k[--$j]] = _66; //#22078
                if ($_.p == 1) { //#22083
                    $k[$j++] = $_.sa; //#22080
                    $k[$j++] = $_.setb; //#22080
                    $_.enc(); //#22080
                    $k[$j++] = $_.char1; //#22081
                    $k[$j++] = $_.seta; //#22081
                    $_.enc(); //#22081
                    $_.i = $_.i + 1; //#22082
                } //#22082
                if ($_.p == 2) { //#22089
                    $k[$j++] = $_.sa2; //#22085
                    $k[$j++] = $_.setb; //#22085
                    $_.enc(); //#22085
                    $k[$j++] = $_.char1; //#22086
                    $k[$j++] = $_.seta; //#22086
                    $_.enc(); //#22086
                    $k[$j++] = $_.char2; //#22087
                    $k[$j++] = $_.seta; //#22087
                    $_.enc(); //#22087
                    $_.i = $_.i + 2; //#22088
                } //#22088
                if ($_.p == 3) { //#22096
                    $k[$j++] = $_.sa3; //#22091
                    $k[$j++] = $_.setb; //#22091
                    $_.enc(); //#22091
                    $k[$j++] = $_.char1; //#22092
                    $k[$j++] = $_.seta; //#22092
                    $_.enc(); //#22092
                    $k[$j++] = $_.char2; //#22093
                    $k[$j++] = $_.seta; //#22093
                    $_.enc(); //#22093
                    $k[$j++] = $_.char3; //#22094
                    $k[$j++] = $_.seta; //#22094
                    $_.enc(); //#22094
                    $_.i = $_.i + 3; //#22095
                } //#22095
                if ($_.p >= 4) { //#22100
                    $k[$j++] = $_.la; //#22098
                    $k[$j++] = $_.setb; //#22098
                    $_.enc(); //#22098
                    $_.cset = "seta"; //#22099
                } //#22099
                break; //#22101
            } //#22101
            var _6b = $get($_.seta, $_.char1) !== undefined; //#22105
            if (_6b) { //#22109
                $k[$j++] = $_.la; //#22106
                $k[$j++] = $_[$_.cset]; //#22106
                $_.enc(); //#22106
                $_.cset = "seta"; //#22107
                break; //#22108
            } //#22108
            var _6h = $get($_.setb, $_.char1) !== undefined; //#22110
            if (_6h) { //#22114
                $k[$j++] = $_.lb; //#22111
                $k[$j++] = $_[$_.cset]; //#22111
                $_.enc(); //#22111
                $_.cset = "setb"; //#22112
                break; //#22113
            } //#22113
            var _6n = $get($_.setc, $_.char1) !== undefined; //#22117
            if (_6n) { //#22117
                $_.setx = "setc"; //#22117
                $_.sx = $_.sc; //#22117
                $_.lkx = $_.lkc; //#22117
            } //#22117
            var _6s = $get($_.setd, $_.char1) !== undefined; //#22118
            if (_6s) { //#22118
                $_.setx = "setd"; //#22118
                $_.sx = $_.sd; //#22118
                $_.lkx = $_.lkd; //#22118
            } //#22118
            var _6x = $get($_.sete, $_.char1) !== undefined; //#22119
            if (_6x) { //#22119
                $_.setx = "sete"; //#22119
                $_.sx = $_.se; //#22119
                $_.lkx = $_.lke; //#22119
            } //#22119
            var _71 = $_[$_.setx]; //#22122
            var _72 = $_.msg; //#22122
            var _73 = $_.i; //#22122
            var _74 = $_.msglen; //#22122
            var _75 = $_.i; //#22122
            var _76 = _74 - _75; //#22122
            var _77 = 4; //#22122
            if (4 > (_74 - _75)) { //#22122
                var _ = _76; //#22122
                _76 = _77; //#22122
                _77 = _; //#22122
            } //#22122
            $k[$j++] = 'p'; //#22122
            $k[$j++] = _71; //#22122
            $k[$j++] = $geti(_72, _73, _77); //#22122
            $_.prefixinset(); //#22122
            var _79 = $k[--$j]; //#22122
            $_[$k[--$j]] = _79; //#22122
            if ($_.p == 1) { //#22127
                $k[$j++] = $_.sx; //#22124
                $k[$j++] = $_[$_.cset]; //#22124
                $_.enc(); //#22124
                $k[$j++] = $_.char1; //#22125
                $k[$j++] = $_[$_.setx]; //#22125
                $_.enc(); //#22125
                $_.i = $_.i + 1; //#22126
            } //#22126
            if ($_.p == 2) { //#22134
                $k[$j++] = $_.sx; //#22129
                $k[$j++] = $_[$_.cset]; //#22129
                $_.enc(); //#22129
                $k[$j++] = $_.char1; //#22130
                $k[$j++] = $_[$_.setx]; //#22130
                $_.enc(); //#22130
                $k[$j++] = $_.sx; //#22131
                $k[$j++] = $_[$_.cset]; //#22131
                $_.enc(); //#22131
                $k[$j++] = $_.char2; //#22132
                $k[$j++] = $_[$_.setx]; //#22132
                $_.enc(); //#22132
                $_.i = $_.i + 2; //#22133
            } //#22133
            if ($_.p == 3) { //#22143
                $k[$j++] = $_.sx; //#22136
                $k[$j++] = $_[$_.cset]; //#22136
                $_.enc(); //#22136
                $k[$j++] = $_.char1; //#22137
                $k[$j++] = $_[$_.setx]; //#22137
                $_.enc(); //#22137
                $k[$j++] = $_.sx; //#22138
                $k[$j++] = $_[$_.cset]; //#22138
                $_.enc(); //#22138
                $k[$j++] = $_.char2; //#22139
                $k[$j++] = $_[$_.setx]; //#22139
                $_.enc(); //#22139
                $k[$j++] = $_.sx; //#22140
                $k[$j++] = $_[$_.cset]; //#22140
                $_.enc(); //#22140
                $k[$j++] = $_.char3; //#22141
                $k[$j++] = $_[$_.setx]; //#22141
                $_.enc(); //#22141
                $_.i = $_.i + 3; //#22142
            } //#22142
            if ($_.p >= 4) { //#22148
                $k[$j++] = $_.sx; //#22145
                $k[$j++] = $_[$_.cset]; //#22145
                $_.enc(); //#22145
                $k[$j++] = $_.lkx; //#22146
                $k[$j++] = $_[$_.setx]; //#22146
                $_.enc(); //#22146
                $_.cset = $_.setx; //#22147
            } //#22147
            break; //#22150
        } //#22150
    } //#22150
    $_.encmsg = $geti($_.out, 0, $_.j); //#22153
    $_.padval = $get($_[$_.cset], $_.pad); //#22154
    $k[$j++] = 'sami'; //#22157
    if ($_.sam != -1) { //#22157
        $k[$j++] = $a([$get($_.seta, $_.pad), (((~~($_.sam / 10)) - 1) * 8) + (($_.sam % 10) - 1)]); //#22157
    } else { //#22157
        $k[$j++] = $a([]); //#22157
    } //#22157
    var _8E = $k[--$j]; //#22157
    $_[$k[--$j]] = _8E; //#22157
    $k[$j++] = Infinity; //#22158
    $aload($_.sami); //#22158
    $aload($_.encmsg); //#22158
    $_.encmsg = $a(); //#22158
    if (($_.mode == 2) || ($_.mode == 3)) { //#22217
        if ($_.encmsg.length > 84) { //#22165
            $k[$j++] = 'bwipp.maxicodeMode23TooLong#22164'; //#22164
            $k[$j++] = "The secondary message is too long"; //#22164
            bwipp_raiseerror(); //#22164
        } //#22164
        var _8N = $strcpy($s(4), "0000"); //#22168
        var _8Q = $cvrs($s(4), ~~$_.mode, 2); //#22168
        $puti(_8N, 4 - _8Q.length, _8Q); //#22168
        $_.mdb = _8N; //#22168
        var _8S = $strcpy($s(10), "0000000000"); //#22169
        var _8V = $cvrs($s(10), $cvi($_.ccode), 2); //#22169
        $puti(_8S, 10 - _8V.length, _8V); //#22169
        $_.ccb = _8S; //#22169
        var _8X = $strcpy($s(10), "0000000000"); //#22170
        var _8a = $cvrs($s(10), $cvi($_.scode), 2); //#22170
        $puti(_8X, 10 - _8a.length, _8a); //#22170
        $_.scb = _8X; //#22170
        $_.pcb = $strcpy($s(36), "000000000000000000000000000000000000"); //#22171
        if ($_.mode == 2) { //#22184
            var _8h = $cvrs($s(6), $_.pcode.length, 2); //#22174
            $puti($_.pcb, 6 - _8h.length, _8h); //#22174
            var _8l = $cvrs($s(30), $cvi($_.pcode), 2); //#22175
            $puti($_.pcb, 36 - _8l.length, _8l); //#22175
        } else { //#22184
            $k[$j++] = Infinity; //#22178
            var _8n = $strcpy($s(6), "      "); //#22179
            $k[$j++] = _8n; //#22179
            $k[$j++] = _8n; //#22179
            $k[$j++] = 0; //#22179
            if ($_.pcode.length > 6) { //#22179
                $k[$j++] = $geti($_.pcode, 0, 6); //#22179
            } else { //#22179
                $k[$j++] = $_.pcode; //#22179
            } //#22179
            var _8s = $k[--$j]; //#22179
            var _8t = $k[--$j]; //#22179
            $puti($k[--$j], _8t, _8s); //#22179
            $forall($k[--$j], function() { //#22180
                var _8y = $get($_.seta, $k[--$j]); //#22180
                $k[$j++] = _8y; //#22180
            }); //#22180
            $_.pccw = $a(); //#22180
            for (var _90 = 0; _90 <= 5; _90 += 1) { //#22185
                $_.i = _90; //#22183
                var _96 = $cvrs($s(6), $get($_.pccw, $_.i), 2); //#22184
                $puti($_.pcb, ((6 * $_.i) + 6) - _96.length, _96); //#22184
            } //#22184
        } //#22184
        $_.scm = $s(60); //#22189
        $puti($_.scm, 2, $_.mdb); //#22190
        $puti($_.scm, 38, $geti($_.pcb, 0, 4)); //#22191
        $puti($_.scm, 30, $geti($_.pcb, 4, 6)); //#22192
        $puti($_.scm, 24, $geti($_.pcb, 10, 6)); //#22193
        $puti($_.scm, 18, $geti($_.pcb, 16, 6)); //#22194
        $puti($_.scm, 12, $geti($_.pcb, 22, 6)); //#22195
        $puti($_.scm, 6, $geti($_.pcb, 28, 6)); //#22196
        $puti($_.scm, 0, $geti($_.pcb, 34, 2)); //#22197
        $puti($_.scm, 52, $geti($_.ccb, 0, 2)); //#22198
        $puti($_.scm, 42, $geti($_.ccb, 2, 6)); //#22199
        $puti($_.scm, 36, $geti($_.ccb, 8, 2)); //#22200
        $puti($_.scm, 54, $geti($_.scb, 0, 6)); //#22201
        $puti($_.scm, 48, $geti($_.scb, 6, 4)); //#22202
        $_.pri = $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]); //#22205
        for (var _9m = 0; _9m <= 59; _9m += 1) { //#22211
            $_.i = _9m; //#22207
            $_.ps = ~~($_.i / 6); //#22208
            $_.ep = (~~(Math.pow(2, 5 - ($_.i % 6)))) * ($get($_.scm, $_.i) - 48); //#22209
            $put($_.pri, $_.ps, $f($get($_.pri, $_.ps) + $_.ep)); //#22210
        } //#22210
        $k[$j++] = Infinity; //#22214
        for (var _9y = 0, _9z = 84; _9y < _9z; _9y++) { //#22214
            $k[$j++] = $_.padval; //#22214
        } //#22214
        $_.sec = $a(); //#22214
        $puti($_.sec, 0, $_.encmsg); //#22215
    } //#22215
    if (((($_.mode == 4) || ($_.mode == 5)) || ($_.mode == 6)) || ($_.mode == -1)) { //#22238
        if ($_.mode == -1) { //#22225
            var _AA = ($_.encmsg.length <= 77) ? 5 : 4; //#22224
            $_.mode = _AA; //#22224
        } //#22224
        $k[$j++] = Infinity; //#22227
        var _AC = ($_.mode == 5) ? 78 : 94; //#22227
        for (var _AD = 0, _AE = _AC; _AD < _AE; _AD++) { //#22227
            $k[$j++] = $_.padval; //#22227
        } //#22227
        $_.cws = $a(); //#22227
        if ($_.encmsg.length > ($_.cws.length - 1)) { //#22230
            $k[$j++] = 'bwipp.maxicodeMode56TooLong#22229'; //#22229
            $k[$j++] = "The message is too long"; //#22229
            bwipp_raiseerror(); //#22229
        } //#22229
        $put($_.cws, 0, $_.mode); //#22231
        $puti($_.cws, 1, $_.encmsg); //#22232
        $_.pri = $geti($_.cws, 0, 10); //#22235
        $_.sec = $geti($_.cws, 10, $_.cws.length - 10); //#22236
    } //#22236
    if (!bwipp_maxicode.__22245__) { //#22245
        $_ = Object.create($_); //#22245
        $k[$j++] = Infinity; //#22242
        $k[$j++] = 1; //#22242
        for (var _AS = 0, _AT = 63; _AS < _AT; _AS++) { //#22242
            var _AU = $k[--$j]; //#22242
            var _AV = _AU * 2; //#22242
            $k[$j++] = _AU; //#22242
            $k[$j++] = _AV; //#22242
            if (_AV >= 64) { //#22242
                var _AW = $k[--$j]; //#22242
                $k[$j++] = _AW ^ 67; //#22242
            } //#22242
        } //#22242
        $_.rsalog = $a(); //#22242
        $_.rslog = $a(64); //#22243
        for (var _AZ = 1; _AZ <= 63; _AZ += 1) { //#22244
            $put($_.rslog, $get($_.rsalog, _AZ), _AZ); //#22244
        } //#22244
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_maxicode.$ctx[id] = $_[id]); //#22244
        bwipp_maxicode.__22245__ = 1; //#22244
        $_ = Object.getPrototypeOf($_); //#22244
    } //#22244
    $_.rsprod = function() {
        var _Ae = $k[--$j]; //#22249
        var _Af = $k[--$j]; //#22249
        $k[$j++] = _Af; //#22253
        $k[$j++] = _Ae; //#22253
        if ((_Ae != 0) && (_Af != 0)) { //#22252
            var _Ai = $get($_.rslog, $k[--$j]); //#22250
            var _An = $get($_.rsalog, $f(_Ai + $get($_.rslog, $k[--$j])) % 63); //#22250
            $k[$j++] = _An; //#22250
        } else { //#22252
            $j -= 2; //#22252
            $k[$j++] = 0; //#22252
        } //#22252
    }; //#22252
    $_.rscodes = function() {
        $_.rsnum = $k[--$j]; //#22259
        $_.cwb = $k[--$j]; //#22260
        $k[$j++] = Infinity; //#22263
        $k[$j++] = 1; //#22263
        for (var _Ar = 0, _As = $_.rsnum; _Ar < _As; _Ar++) { //#22263
            $k[$j++] = 0; //#22263
        } //#22263
        $_.coeffs = $a(); //#22263
        for (var _Aw = 1, _Av = $_.rsnum; _Aw <= _Av; _Aw += 1) { //#22272
            $_.i = _Aw; //#22265
            $put($_.coeffs, $_.i, $get($_.coeffs, $_.i - 1)); //#22266
            for (var _B3 = $_.i - 1; _B3 >= 1; _B3 -= 1) { //#22270
                $_.j = _B3; //#22268
                $k[$j++] = $_.coeffs; //#22269
                $k[$j++] = $_.j; //#22269
                $k[$j++] = $get($_.coeffs, $_.j - 1); //#22269
                $k[$j++] = $get($_.coeffs, $_.j); //#22269
                $k[$j++] = $get($_.rsalog, $_.i); //#22269
                $_.rsprod(); //#22269
                var _BF = $k[--$j]; //#22269
                var _BG = $k[--$j]; //#22269
                var _BH = $k[--$j]; //#22269
                $put($k[--$j], _BH, $xo(_BG, _BF)); //#22269
            } //#22269
            $k[$j++] = $_.coeffs; //#22271
            $k[$j++] = 0; //#22271
            $k[$j++] = $get($_.coeffs, 0); //#22271
            $k[$j++] = $get($_.rsalog, $_.i); //#22271
            $_.rsprod(); //#22271
            var _BP = $k[--$j]; //#22271
            var _BQ = $k[--$j]; //#22271
            $put($k[--$j], _BQ, _BP); //#22271
        } //#22271
        $_.coeffs = $geti($_.coeffs, 0, $_.coeffs.length - 1); //#22273
        $k[$j++] = Infinity; //#22276
        for (var _BW = 0, _BX = $_.rsnum; _BW < _BX; _BW++) { //#22276
            $k[$j++] = 0; //#22276
        } //#22276
        $_.ecb = $a(); //#22276
        for (var _Bb = 0, _Ba = $_.cwb.length - 1; _Bb <= _Ba; _Bb += 1) { //#22285
            $_.t = $xo($get($_.cwb, _Bb), $get($_.ecb, 0)); //#22278
            for (var _Bh = $_.ecb.length - 1; _Bh >= 0; _Bh -= 1) { //#22284
                $_.i = _Bh; //#22280
                $_.p = ($_.ecb.length - $_.i) - 1; //#22281
                $k[$j++] = $_.ecb; //#22282
                $k[$j++] = $_.p; //#22282
                $k[$j++] = $_.t; //#22282
                $k[$j++] = $get($_.coeffs, $_.i); //#22282
                $_.rsprod(); //#22282
                var _Bq = $k[--$j]; //#22282
                var _Br = $k[--$j]; //#22282
                $put($k[--$j], _Br, _Bq); //#22282
                if ($_.i > 0) { //#22283
                    $put($_.ecb, $_.p, $xo($get($_.ecb, $_.p + 1), $get($_.ecb, $_.p))); //#22283
                } //#22283
            } //#22283
        } //#22283
        $k[$j++] = $_.ecb; //#22287
    }; //#22287
    $k[$j++] = Infinity; //#22292
    for (var _C5 = 0, _C4 = $_.sec.length - 1; _C5 <= _C4; _C5 += 2) { //#22292
        $k[$j++] = $get($_.sec, _C5); //#22292
    } //#22292
    $_.seco = $a(); //#22292
    $k[$j++] = Infinity; //#22293
    for (var _CB = 1, _CA = $_.sec.length - 1; _CB <= _CA; _CB += 2) { //#22293
        $k[$j++] = $get($_.sec, _CB); //#22293
    } //#22293
    $_.sece = $a(); //#22293
    var _CG = ($_.sec.length == 84) ? 20 : 28; //#22296
    $_.scodes = _CG; //#22296
    $k[$j++] = 'secochk'; //#22297
    $k[$j++] = $_.seco; //#22297
    $k[$j++] = $_.scodes; //#22297
    $_.rscodes(); //#22297
    var _CJ = $k[--$j]; //#22297
    $_[$k[--$j]] = _CJ; //#22297
    $k[$j++] = 'secechk'; //#22298
    $k[$j++] = $_.sece; //#22298
    $k[$j++] = $_.scodes; //#22298
    $_.rscodes(); //#22298
    var _CN = $k[--$j]; //#22298
    $_[$k[--$j]] = _CN; //#22298
    $k[$j++] = Infinity; //#22301
    for (var _CR = 0, _CQ = $_.scodes - 1; _CR <= _CQ; _CR += 1) { //#22301
        $k[$j++] = $get($_.secochk, _CR); //#22301
        $k[$j++] = $get($_.secechk, _CR); //#22301
    } //#22301
    $_.secchk = $a(); //#22301
    $k[$j++] = Infinity; //#22304
    $aload($_.pri); //#22305
    $k[$j++] = $_.pri; //#22306
    $k[$j++] = 10; //#22306
    $_.rscodes(); //#22306
    $aload($k[--$j]); //#22306
    $aload($_.sec); //#22307
    $aload($_.secchk); //#22308
    $_.codewords = $a(); //#22308
    $k[$j++] = Infinity; //#22312
    for (var _Cd = 0, _Ce = 864; _Cd < _Ce; _Cd++) { //#22312
        $k[$j++] = 0; //#22312
    } //#22312
    $_.mods = $a(); //#22312
    for (var _Cg = 0; _Cg <= 143; _Cg += 1) { //#22317
        $_.i = _Cg; //#22314
        $k[$j++] = Infinity; //#22315
        var _Cl = $cvrs($s(6), $get($_.codewords, $_.i), 2); //#22315
        for (var _Cm = 0, _Cn = _Cl.length; _Cm < _Cn; _Cm++) { //#22315
            $k[$j++] = $get(_Cl, _Cm) - 48; //#22315
        } //#22315
        $_.cw = $a(); //#22315
        $puti($_.mods, (6 * $_.i) + (6 - $_.cw.length), $_.cw); //#22316
    } //#22316
    if (!bwipp_maxicode.__22367__) { //#22367
        $_ = Object.create($_); //#22367
        $_.modmap = $a([469, 529, 286, 316, 347, 346, 673, 672, 703, 702, 647, 676, 283, 282, 313, 312, 370, 610, 618, 379, 378, 409, 408, 439, 705, 704, 559, 589, 588, 619, 458, 518, 640, 701, 675, 674, 285, 284, 315, 314, 310, 340, 531, 289, 288, 319, 349, 348, 456, 486, 517, 516, 471, 470, 369, 368, 399, 398, 429, 428, 549, 548, 579, 578, 609, 608, 649, 648, 679, 678, 709, 708, 639, 638, 669, 668, 699, 698, 279, 278, 309, 308, 339, 338, 381, 380, 411, 410, 441, 440, 561, 560, 591, 590, 621, 620, 547, 546, 577, 576, 607, 606, 367, 366, 397, 396, 427, 426, 291, 290, 321, 320, 351, 350, 651, 650, 681, 680, 711, 710, 1, 0, 31, 30, 61, 60, 3, 2, 33, 32, 63, 62, 5, 4, 35, 34, 65, 64, 7, 6, 37, 36, 67, 66, 9, 8, 39, 38, 69, 68, 11, 10, 41, 40, 71, 70, 13, 12, 43, 42, 73, 72, 15, 14, 45, 44, 75, 74, 17, 16, 47, 46, 77, 76, 19, 18, 49, 48, 79, 78, 21, 20, 51, 50, 81, 80, 23, 22, 53, 52, 83, 82, 25, 24, 55, 54, 85, 84, 27, 26, 57, 56, 87, 86, 117, 116, 147, 146, 177, 176, 115, 114, 145, 144, 175, 174, 113, 112, 143, 142, 173, 172, 111, 110, 141, 140, 171, 170, 109, 108, 139, 138, 169, 168, 107, 106, 137, 136, 167, 166, 105, 104, 135, 134, 165, 164, 103, 102, 133, 132, 163, 162, 101, 100, 131, 130, 161, 160, 99, 98, 129, 128, 159, 158, 97, 96, 127, 126, 157, 156, 95, 94, 125, 124, 155, 154, 93, 92, 123, 122, 153, 152, 91, 90, 121, 120, 151, 150, 181, 180, 211, 210, 241, 240, 183, 182, 213, 212, 243, 242, 185, 184, 215, 214, 245, 244, 187, 186, 217, 216, 247, 246, 189, 188, 219, 218, 249, 248, 191, 190, 221, 220, 251, 250, 193, 192, 223, 222, 253, 252, 195, 194, 225, 224, 255, 254, 197, 196, 227, 226, 257, 256, 199, 198, 229, 228, 259, 258, 201, 200, 231, 230, 261, 260, 203, 202, 233, 232, 263, 262, 205, 204, 235, 234, 265, 264, 207, 206, 237, 236, 267, 266, 297, 296, 327, 326, 357, 356, 295, 294, 325, 324, 355, 354, 293, 292, 323, 322, 353, 352, 277, 276, 307, 306, 337, 336, 275, 274, 305, 304, 335, 334, 273, 272, 303, 302, 333, 332, 271, 270, 301, 300, 331, 330, 361, 360, 391, 390, 421, 420, 363, 362, 393, 392, 423, 422, 365, 364, 395, 394, 425, 424, 383, 382, 413, 412, 443, 442, 385, 384, 415, 414, 445, 444, 387, 386, 417, 416, 447, 446, 477, 476, 507, 506, 537, 536, 475, 474, 505, 504, 535, 534, 473, 472, 503, 502, 533, 532, 455, 454, 485, 484, 515, 514, 453, 452, 483, 482, 513, 512, 451, 450, 481, 480, 511, 510, 541, 540, 571, 570, 601, 600, 543, 542, 573, 572, 603, 602, 545, 544, 575, 574, 605, 604, 563, 562, 593, 592, 623, 622, 565, 564, 595, 594, 625, 624, 567, 566, 597, 596, 627, 626, 657, 656, 687, 686, 717, 716, 655, 654, 685, 684, 715, 714, 653, 652, 683, 682, 713, 712, 637, 636, 667, 666, 697, 696, 635, 634, 665, 664, 695, 694, 633, 632, 663, 662, 693, 692, 631, 630, 661, 660, 691, 690, 721, 720, 751, 750, 781, 780, 723, 722, 753, 752, 783, 782, 725, 724, 755, 754, 785, 784, 727, 726, 757, 756, 787, 786, 729, 728, 759, 758, 789, 788, 731, 730, 761, 760, 791, 790, 733, 732, 763, 762, 793, 792, 735, 734, 765, 764, 795, 794, 737, 736, 767, 766, 797, 796, 739, 738, 769, 768, 799, 798, 741, 740, 771, 770, 801, 800, 743, 742, 773, 772, 803, 802, 745, 744, 775, 774, 805, 804, 747, 746, 777, 776, 807, 806, 837, 836, 867, 866, 897, 896, 835, 834, 865, 864, 895, 894, 833, 832, 863, 862, 893, 892, 831, 830, 861, 860, 891, 890, 829, 828, 859, 858, 889, 888, 827, 826, 857, 856, 887, 886, 825, 824, 855, 854, 885, 884, 823, 822, 853, 852, 883, 882, 821, 820, 851, 850, 881, 880, 819, 818, 849, 848, 879, 878, 817, 816, 847, 846, 877, 876, 815, 814, 845, 844, 875, 874, 813, 812, 843, 842, 873, 872, 811, 810, 841, 840, 871, 870, 901, 900, 931, 930, 961, 960, 903, 902, 933, 932, 963, 962, 905, 904, 935, 934, 965, 964, 907, 906, 937, 936, 967, 966, 909, 908, 939, 938, 969, 968, 911, 910, 941, 940, 971, 970, 913, 912, 943, 942, 973, 972, 915, 914, 945, 944, 975, 974, 917, 916, 947, 946, 977, 976, 919, 918, 949, 948, 979, 978, 921, 920, 951, 950, 981, 980, 923, 922, 953, 952, 983, 982, 925, 924, 955, 954, 985, 984, 927, 926, 957, 956, 987, 986, 58, 89, 88, 118, 149, 148, 178, 209, 208, 238, 269, 268, 298, 329, 328, 358, 389, 388, 418, 449, 448, 478, 509, 508, 538, 569, 568, 598, 629, 628, 658, 689, 688, 718, 749, 748, 778, 809, 808, 838, 869, 868, 898, 929, 928, 958, 989, 988]); //#22366
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_maxicode.$ctx[id] = $_[id]); //#22366
        bwipp_maxicode.__22367__ = 1; //#22366
        $_ = Object.getPrototypeOf($_); //#22366
    } //#22366
    $_.pixs = $a(864); //#22370
    $_.j = 0; //#22371
    for (var _Cz = 0, _Cy = $_.mods.length - 1; _Cz <= _Cy; _Cz += 1) { //#22378
        $_.i = _Cz; //#22373
        if ($get($_.mods, $_.i) == 1) { //#22377
            $put($_.pixs, $_.j, $get($_.modmap, $_.i)); //#22375
            $_.j = $_.j + 1; //#22376
        } //#22376
    } //#22376
    $k[$j++] = Infinity; //#22379
    $aload($geti($_.pixs, 0, $_.j)); //#22379
    $k[$j++] = 28; //#22379
    $k[$j++] = 29; //#22379
    $k[$j++] = 280; //#22379
    $k[$j++] = 281; //#22379
    $k[$j++] = 311; //#22379
    $k[$j++] = 457; //#22379
    $k[$j++] = 488; //#22379
    $k[$j++] = 500; //#22379
    $k[$j++] = 530; //#22379
    $k[$j++] = 670; //#22379
    $k[$j++] = 700; //#22379
    $k[$j++] = 677; //#22379
    $k[$j++] = 707; //#22379
    $_.pixs = $a(); //#22379
    var _DF = new Map([
        ["ren", 'renmaximatrix'],
        ["pixs", $_.pixs],
        ["borderleft", 1],
        ["borderright", 1],
        ["bordertop", 1],
        ["borderbottom", 1],
        ["opt", $_.options]
    ]); //#22389
    $k[$j++] = _DF; //#22392
    if (!$_.dontdraw) { //#22392
        bwipp_renmaximatrix(); //#22392
    } //#22392
    $_ = Object.getPrototypeOf($_); //#22394
    $_ = Object.getPrototypeOf($_); //#22396
} //bwipp_maxicode
function bwipp_azteccode() {
    $_ = Object.create($_); //#22427
    $_.dontdraw = false; //#22430
    $_.format = "full"; //#22431
    $_.readerinit = false; //#22432
    $_.layers = -1; //#22433
    $_.eclevel = 23; //#22434
    $_.ecaddchars = 3; //#22435
    $_.raw = false; //#22436
    $_.parse = false; //#22437
    $_.parsefnc = false; //#22438
    $k[$j++] = $_; //#22440
    bwipp_processoptions(); //#22440
    $_.options = $k[--$j]; //#22440
    $_.barcode = $k[--$j]; //#22441
    bwipp_loadctx(bwipp_azteccode); //#22443
    if ($eq($_.barcode, "")) { //#22447
        $k[$j++] = 'bwipp.aztecEmptyData#22446'; //#22446
        $k[$j++] = "The data must not be empty"; //#22446
        bwipp_raiseerror(); //#22446
    } //#22446
    if (($_.eclevel < 5) || ($_.eclevel > 95)) { //#22451
        $k[$j++] = 'bwipp.aztecInvalidEClevel#22450'; //#22450
        $k[$j++] = "The EC percentage must be from 5 to 95"; //#22450
        bwipp_raiseerror(); //#22450
    } //#22450
    if ($_.ecaddchars < 3) { //#22455
        $k[$j++] = 'bwipp.aztecInvalidECaddChars#22454'; //#22454
        $k[$j++] = "The number of additional EC codewords must be 3 or more"; //#22454
        bwipp_raiseerror(); //#22454
    } //#22454
    if ($ne($_.format, "full") && ($ne($_.format, "compact") && $ne($_.format, "rune"))) { //#22459
        $k[$j++] = 'bwipp.aztecInvalidFormat#22458'; //#22458
        $k[$j++] = "The format must be either full, compact or rune"; //#22458
        bwipp_raiseerror(); //#22458
    } //#22458
    if ($eq($_.format, "full")) { //#22468
        if ($_.readerinit && (($_.layers < 1) || ($_.layers > 22))) { //#22464
            $k[$j++] = 'bwipp.aztecFullInitInvalidLayers#22463'; //#22463
            $k[$j++] = "Full-range symbols for reader programming must specify from 1 to 22 layers"; //#22463
            bwipp_raiseerror(); //#22463
        } //#22463
        if (($_.layers != -1) && (($_.layers < 1) || ($_.layers > 32))) { //#22467
            $k[$j++] = 'bwipp.aztecFullInvalidLayers#22466'; //#22466
            $k[$j++] = "Layers for full-range symbols must be from 1 to 32"; //#22466
            bwipp_raiseerror(); //#22466
        } //#22466
    } //#22466
    if ($eq($_.format, "compact")) { //#22480
        if ($_.readerinit) { //#22476
            if (($_.layers != -1) && ($_.layers != 1)) { //#22474
                $k[$j++] = 'bwipp.aztecCompactInitInvalidLayers#22473'; //#22473
                $k[$j++] = "Compact symbols for reader programming must have 1 layer"; //#22473
                bwipp_raiseerror(); //#22473
            } //#22473
            $_.layers = 1; //#22475
        } //#22475
        if (($_.layers != -1) && (($_.layers < 1) || ($_.layers > 4))) { //#22479
            $k[$j++] = 'bwipp.aztecCompactInvalidLayers#22478'; //#22478
            $k[$j++] = "Layers for compact symbols must be from 1 to 4"; //#22478
            bwipp_raiseerror(); //#22478
        } //#22478
    } //#22478
    if ($eq($_.format, "rune")) { //#22500
        if ($_.layers != -1) { //#22485
            $k[$j++] = 'bwipp.aztecRuneInvalidLayers#22484'; //#22484
            $k[$j++] = "It is not valid to specify layers for runes"; //#22484
            bwipp_raiseerror(); //#22484
        } //#22484
        if ($_.readerinit) { //#22488
            $k[$j++] = 'bwipp.aztecRuneReaderInit#22487'; //#22487
            $k[$j++] = "Reader initialisation is not compactible with Aztec Runes"; //#22487
            bwipp_raiseerror(); //#22487
        } //#22487
        if ($_.barcode.length == 0) { //#22491
            $k[$j++] = 'bwipp.aztecRuneNotNumeric#22490'; //#22490
            $k[$j++] = "Aztec runes must be numeric"; //#22490
            bwipp_raiseerror(); //#22490
        } //#22490
        $forall($_.barcode, function() { //#22496
            var _S = $k[--$j]; //#22493
            if ((_S < 48) || (_S > 57)) { //#22495
                $k[$j++] = 'bwipp.aztecRuneNotNumeric#22494'; //#22494
                $k[$j++] = "Aztec runes must be numeric"; //#22494
                bwipp_raiseerror(); //#22494
            } //#22494
        }); //#22494
        var _U = $cvi($_.barcode); //#22497
        if ((_U < 0) || (_U > 255)) { //#22499
            $k[$j++] = 'bwipp.aztecRuneInvalid#22498'; //#22498
            $k[$j++] = "Aztec runes must be 0 to 255"; //#22498
            bwipp_raiseerror(); //#22498
        } //#22498
    } //#22498
    $_.fn1 = -1; //#22503
    var _Y = new Map([
        ["parse", $_.parse],
        ["parsefnc", $_.parsefnc],
        ["eci", true],
        ["FNC1", $_.fn1]
    ]); //#22508
    $_.fncvals = _Y; //#22509
    $k[$j++] = 'msg'; //#22510
    $k[$j++] = $_.barcode; //#22510
    $k[$j++] = $_.fncvals; //#22510
    bwipp_parseinput(); //#22510
    var _b = $k[--$j]; //#22510
    $_[$k[--$j]] = _b; //#22510
    $_.msglen = $_.msg.length; //#22511
    if (!bwipp_azteccode.__22611__) { //#22611
        $_ = Object.create($_); //#22611
        $_.U = 0; //#22515
        $_.L = 1; //#22515
        $_.M = 2; //#22515
        $_.P = 3; //#22515
        $_.D = 4; //#22515
        $_.B = 5; //#22515
        $_.lu = -2; //#22518
        $_.ll = -3; //#22518
        $_.lm = -4; //#22518
        $_.lp = -5; //#22519
        $_.ld = -6; //#22519
        $_.su = -7; //#22519
        $_.sp = -8; //#22520
        $_.sb = -9; //#22520
        $_.fl = -10; //#22520
        $_.p2 = -11; //#22521
        $_.p3 = -12; //#22521
        $_.p4 = -13; //#22521
        $_.p5 = -14; //#22521
        $_.charmaps = $a([$a([$_.sp, $_.sp, $_.sp, $_.fl, $_.sp]), $a([32, 32, 32, 13, 32]), $a(["A", "a", 1, $_.p2, "0"]), $a(["B", "b", 2, $_.p3, "1"]), $a(["C", "c", 3, $_.p4, "2"]), $a(["D", "d", 4, $_.p5, "3"]), $a(["E", "e", 5, "!", "4"]), $a(["F", "f", 6, "\"", "5"]), $a(["G", "g", 7, "#", "6"]), $a(["H", "h", 8, "$", "7"]), $a(["I", "i", 9, "%", "8"]), $a(["J", "j", 10, "&", "9"]), $a(["K", "k", 11, "'", ","]), $a(["L", "l", 12, 40, "."]), $a(["M", "m", 13, 41, $_.lu]), $a(["N", "n", 27, "*", $_.su]), $a(["O", "o", 28, "+", -99]), $a(["P", "p", 29, ",", -99]), $a(["Q", "q", 30, "-", -99]), $a(["R", "r", 31, ".", -99]), $a(["S", "s", "@", "/", -99]), $a(["T", "t", 92, ":", -99]), $a(["U", "u", "^", ";", -99]), $a(["V", "v", "_", "<", -99]), $a(["W", "w", "`", "=", -99]), $a(["X", "x", "|", ">", -99]), $a(["Y", "y", "~", "?", -99]), $a(["Z", "z", 127, "[", -99]), $a([$_.ll, $_.su, $_.ll, "]", -99]), $a([$_.lm, $_.lm, $_.lu, "{", -99]), $a([$_.ld, $_.ld, $_.lp, "}", -99]), $a([$_.sb, $_.sb, $_.sb, $_.lu, -99])]); //#22558
        $_.charvals = $a([new Map, new Map, new Map, new Map, new Map]); //#22561
        for (var _1c = 0, _1b = $_.charmaps.length - 1; _1c <= _1b; _1c += 1) { //#22570
            $_.i = _1c; //#22563
            $_.encs = $get($_.charmaps, $_.i); //#22564
            for (var _1g = 0; _1g <= 4; _1g += 1) { //#22569
                $_.j = _1g; //#22566
                var _1j = $get($_.encs, $_.j); //#22567
                $k[$j++] = _1j; //#22567
                if ($eq($type(_1j), 'stringtype')) { //#22567
                    var _1m = $get($k[--$j], 0); //#22567
                    $k[$j++] = _1m; //#22567
                } //#22567
                $put($get($_.charvals, $_.j), $k[--$j], $_.i); //#22568
            } //#22568
        } //#22568
        var _1w = new Map([
            ["\x0d\x0a", $_.p2],
            [". ", $_.p3],
            [", ", $_.p4],
            [": ", $_.p5]
        ]); //#22577
        $_.pcomp = _1w; //#22578
        $_.e = 1000000; //#22580
        var _22 = $a([0, 0, 0, 0, 0, 0]); //#22589
        $_.latlen = $a([$a([0, 5, 5, 10, 5, 10]), $a([9, 0, 5, 10, 5, 10]), $a([5, 5, 0, 5, 10, 10]), $a([5, 10, 10, 0, 10, 15]), $a([4, 9, 9, 14, 0, 14]), _22]); //#22590
        $_.latseq = $a([$a([$a([]), $a([$_.ll]), $a([$_.lm]), $a([$_.lm, $_.lp]), $a([$_.ld]), $a([$_.sb])]), $a([$a([$_.ld, $_.lu]), $a([]), $a([$_.lm]), $a([$_.lm, $_.lp]), $a([$_.ld]), $a([$_.sb])]), $a([$a([$_.lu]), $a([$_.ll]), $a([]), $a([$_.lp]), $a([$_.lu, $_.ld]), $a([$_.sb])]), $a([$a([$_.lu]), $a([$_.lu, $_.ll]), $a([$_.lu, $_.lm]), $a([]), $a([$_.lu, $_.ld]), $a([$_.lu, $_.sb])]), $a([$a([$_.lu]), $a([$_.lu, $_.ll]), $a([$_.lu, $_.lm]), $a([$_.lu, $_.lm, $_.lp]), $a([]), $a([$_.lu, $_.sb])]), $a([$a([$_.lu]), $a([$_.ll]), $a([$_.lm]), $a([]), $a([]), $a([])])]); //#22600
        $_.shftlen = $a([$a([$_.e, $_.e, $_.e, 5, $_.e]), $a([5, $_.e, $_.e, 5, $_.e]), $a([$_.e, $_.e, $_.e, 5, $_.e]), $a([$_.e, $_.e, $_.e, $_.e, $_.e]), $a([4, $_.e, $_.e, 4, $_.e])]); //#22609
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_azteccode.$ctx[id] = $_[id]); //#22609
        bwipp_azteccode.__22611__ = 1; //#22609
        $_ = Object.getPrototypeOf($_); //#22609
    } //#22609
    $_.msgbits = ""; //#22614
    if ($ne($_.format, "rune") && $_.raw) { //#22615
        $_.msgbits = $_.barcode; //#22615
    } //#22615
    if ($ne($_.format, "rune") && (!$_.raw)) { //#22911
        $_.charsize = function() {
            var _3v = $k[--$j]; //#22619
            $k[$j++] = _3v; //#22630
            if (_3v >= 0) { //#22628
                $j--; //#22621
                var _3y = $get($a([5, 5, 5, 5, 4, 8]), $k[--$j]); //#22621
                $k[$j++] = _3y; //#22621
            } else { //#22628
                var _3z = $k[--$j]; //#22623
                var _40 = $k[--$j]; //#22623
                $k[$j++] = _3z; //#22623
                $k[$j++] = _40; //#22623
                $j--; //#22623
                var _41 = $k[--$j]; //#22624
                $k[$j++] = _41; //#22629
                if (_41 == $_.fn1) { //#22628
                    $j--; //#22625
                    $k[$j++] = 8; //#22625
                } else { //#22628
                    var _44 = $f((-$k[--$j]) - 1000000); //#22627
                    $k[$j++] = _44; //#22627
                    if (_44 == 0) { //#22627
                        $j--; //#22627
                        $k[$j++] = 1; //#22627
                    } //#22627
                    var _45 = $k[--$j]; //#22628
                    $k[$j++] = (((~~(Math.log(_45) / Math.log(10))) + 1) * 4) + 8; //#22628
                } //#22628
            } //#22628
        }; //#22628
        $_.curlen = $a([0, $_.e, $_.e, $_.e, $_.e, $_.e]); //#22634
        $_.curseq = $a([$a([]), $a([]), $a([]), $a([]), $a([]), $a([])]); //#22635
        $_.backto = $_.U; //#22637
        $_.lastchar = ""; //#22638
        $forall($_.msg, function() { //#22794
            $_.char = $k[--$j]; //#22643
            for (;;) { //#22669
                $_.imp = false; //#22647
                var _4S = $a([$_.U, $_.L, $_.M, $_.P, $_.D, $_.B]); //#22648
                for (var _4T = 0, _4U = _4S.length; _4T < _4U; _4T++) { //#22667
                    $_.x = $get(_4S, _4T); //#22649
                    var _4c = $a([$_.U, $_.L, $_.M, $_.P, $_.D, $_.B]); //#22650
                    for (var _4d = 0, _4e = _4c.length; _4d < _4e; _4d++) { //#22666
                        $_.y = $get(_4c, _4d); //#22651
                        if (($_.x != $_.B) || ($_.y == $_.backto)) { //#22665
                            $_.cost = $f($get($_.curlen, $_.x) + $get($get($_.latlen, $_.x), $_.y)); //#22653
                            if ($_.cost < $get($_.curlen, $_.y)) { //#22664
                                $put($_.curlen, $_.y, $_.cost); //#22655
                                $k[$j++] = $_.curseq; //#22658
                                $k[$j++] = $_.y; //#22658
                                $k[$j++] = Infinity; //#22656
                                $aload($get($_.curseq, $_.x)); //#22657
                                $aload($get($get($_.latseq, $_.x), $_.y)); //#22658
                                var _59 = $a(); //#22658
                                var _5A = $k[--$j]; //#22659
                                $put($k[--$j], _5A, _59); //#22659
                                if ($_.y == $_.B) { //#22662
                                    $k[$j++] = 'backto'; //#22661
                                    if (($_.x == $_.P) || ($_.x == $_.D)) { //#22661
                                        $k[$j++] = $_.U; //#22661
                                    } else { //#22661
                                        $k[$j++] = $_.x; //#22661
                                    } //#22661
                                    var _5K = $k[--$j]; //#22661
                                    $_[$k[--$j]] = _5K; //#22661
                                } //#22661
                                $_.imp = true; //#22663
                            } //#22663
                        } //#22663
                    } //#22663
                } //#22663
                if (!$_.imp) { //#22668
                    break; //#22668
                } //#22668
            } //#22668
            $_.nxtlen = $a([$_.e, $_.e, $_.e, $_.e, $_.e, $_.e]); //#22672
            $_.nxtseq = $a(6); //#22673
            var _5b = $a([$_.U, $_.L, $_.M, $_.P, $_.D, $_.B]); //#22675
            for (var _5c = 0, _5d = _5b.length; _5c < _5d; _5c++) { //#22714
                $_.x = $get(_5b, _5c); //#22676
                for (;;) { //#22712
                    if ($_.char >= 0) { //#22684
                        if ($_.x != $_.B) { //#22682
                            var _5m = $get($get($_.charvals, $_.x), $_.char) !== undefined; //#22682
                            if (!_5m) { //#22682
                                break; //#22682
                            } //#22682
                        } //#22682
                    } else { //#22684
                        if ($_.x != $_.P) { //#22684
                            break; //#22684
                        } //#22684
                    } //#22684
                    $k[$j++] = 'cost'; //#22688
                    $k[$j++] = $get($_.curlen, $_.x); //#22688
                    $k[$j++] = $_.x; //#22688
                    $k[$j++] = $_.char; //#22688
                    $_.charsize(); //#22688
                    var _5u = $k[--$j]; //#22688
                    var _5v = $k[--$j]; //#22688
                    $_[$k[--$j]] = $f(_5v + _5u); //#22688
                    if ($_.cost < $get($_.nxtlen, $_.x)) { //#22692
                        $put($_.nxtlen, $_.x, $_.cost); //#22690
                        $k[$j++] = $_.nxtseq; //#22691
                        $k[$j++] = $_.x; //#22691
                        $k[$j++] = Infinity; //#22691
                        $aload($get($_.curseq, $_.x)); //#22691
                        $k[$j++] = $_.char; //#22691
                        var _6A = $a(); //#22691
                        var _6B = $k[--$j]; //#22691
                        $put($k[--$j], _6B, _6A); //#22691
                    } //#22691
                    if ($_.x == $_.B) { //#22695
                        break; //#22695
                    } //#22695
                    var _6K = $a([$_.U, $_.L, $_.M, $_.P, $_.D]); //#22696
                    for (var _6L = 0, _6M = _6K.length; _6L < _6M; _6L++) { //#22709
                        $_.y = $get(_6K, _6L); //#22697
                        if ($ne($_.x, $_.y)) { //#22708
                            $k[$j++] = 'cost'; //#22699
                            $k[$j++] = $f($get($_.curlen, $_.y) + $get($get($_.shftlen, $_.y), $_.x)); //#22699
                            $k[$j++] = $_.x; //#22699
                            $k[$j++] = $_.char; //#22699
                            $_.charsize(); //#22699
                            var _6a = $k[--$j]; //#22699
                            var _6b = $k[--$j]; //#22699
                            $_[$k[--$j]] = $f(_6b + _6a); //#22699
                            if ($_.cost < $get($_.nxtlen, $_.y)) { //#22707
                                $put($_.nxtlen, $_.y, $_.cost); //#22701
                                $k[$j++] = $_.nxtseq; //#22705
                                $k[$j++] = $_.y; //#22705
                                $k[$j++] = Infinity; //#22702
                                $aload($get($_.curseq, $_.y)); //#22703
                                var _6r = ($_.x == $_.U) ? $_.su : $_.sp; //#22704
                                $k[$j++] = _6r; //#22705
                                $k[$j++] = $_.char; //#22705
                                var _6t = $a(); //#22705
                                var _6u = $k[--$j]; //#22706
                                $put($k[--$j], _6u, _6t); //#22706
                            } //#22706
                        } //#22706
                    } //#22706
                    break; //#22711
                } //#22711
            } //#22711
            if ($ne($_.lastchar, "") && ($_.char >= 0)) { //#22779
                var _6y = $s(2); //#22718
                $put(_6y, 0, $_.lastchar); //#22718
                $put(_6y, 1, $_.char); //#22718
                $_.pchars = _6y; //#22718
                var _73 = $get($_.pcomp, $_.pchars) !== undefined; //#22719
                if (_73) { //#22778
                    var _79 = $a([$_.U, $_.L, $_.M, $_.P, $_.D]); //#22720
                    for (var _7A = 0, _7B = _79.length; _7A < _7B; _7A++) { //#22777
                        $_.i = $get(_79, _7A); //#22721
                        $_.inP = true; //#22722
                        if ($_.i == $_.M) { //#22727
                            if ($_.lastchar == 13) { //#22724
                                $_.inP = false; //#22724
                            } //#22724
                        } else { //#22727
                            if ($_.i == $_.D) { //#22728
                                if (($_.lastchar == 44) || ($_.lastchar == 46)) { //#22727
                                    $_.inP = false; //#22727
                                } //#22727
                            } //#22727
                        } //#22727
                        if ($_.inP && $lt($get($_.curlen, $_.i), $get($_.nxtlen, $_.i))) { //#22776
                            $_.curseqi = $get($_.curseq, $_.i); //#22731
                            $_.lastld = false; //#22732
                            $_.lastsp = false; //#22733
                            $_.lastidx = -1; //#22734
                            for (var _7V = $_.curseqi.length - 1; _7V >= 0; _7V -= 1) { //#22759
                                $_.idx = _7V; //#22736
                                $_.ch = $get($_.curseqi, $_.idx); //#22737
                                if ($_.lastidx == -1) { //#22756
                                    if ($eq($_.ch, $_.lastchar)) { //#22744
                                        $_.lastidx = $_.idx; //#22740
                                        if ($_.idx > 0) { //#22743
                                            if ($get($_.curseqi, $_.idx - 1) == $_.sp) { //#22742
                                                $_.lastsp = true; //#22742
                                            } //#22742
                                        } //#22742
                                    } //#22742
                                } else { //#22756
                                    if ($_.ch == $_.sb) { //#22749
                                        $_.lastidx = -1; //#22747
                                        break; //#22748
                                    } //#22748
                                    if (($_.ch < 0) && ($_.ch >= $_.ld)) { //#22757
                                        if ($_.i == $_.P) { //#22754
                                            if ($_.ch == $_.ld) { //#22752
                                                $_.lastld = true; //#22752
                                            } //#22752
                                        } else { //#22754
                                            if ($_.ch != $_.lp) { //#22754
                                                $_.inP = $_.lastsp; //#22754
                                            } //#22754
                                        } //#22754
                                        break; //#22756
                                    } //#22756
                                } //#22756
                            } //#22756
                            if ($_.inP && ($_.lastidx >= 0)) { //#22775
                                $put($_.nxtlen, $_.i, $get($_.curlen, $_.i)); //#22761
                                if ($_.lastidx < ($_.curseqi.length - 1)) { //#22773
                                    if ($_.i == $_.P) { //#22770
                                        if ($_.lastld) { //#22764
                                            $put($_.nxtlen, $_.i, $f($get($_.nxtlen, $_.i) + 1)); //#22764
                                        } //#22764
                                        $k[$j++] = $_.nxtseq; //#22766
                                        $k[$j++] = $_.i; //#22766
                                        $k[$j++] = Infinity; //#22766
                                        $aload($_.curseqi); //#22766
                                        $r($_.curseqi.length - $_.lastidx, -1); //#22766
                                        $j--; //#22766
                                        $k[$j++] = $get($_.pcomp, $_.pchars); //#22766
                                        var _8J = $a(); //#22766
                                        var _8K = $k[--$j]; //#22766
                                        $put($k[--$j], _8K, _8J); //#22766
                                    } else { //#22770
                                        $k[$j++] = $_.nxtseq; //#22769
                                        $k[$j++] = $_.i; //#22769
                                        $k[$j++] = Infinity; //#22769
                                        $aload($_.curseqi); //#22769
                                        var _8P = $a(); //#22769
                                        var _8Q = $k[--$j]; //#22769
                                        $put($k[--$j], _8Q, _8P); //#22769
                                        $put($get($_.nxtseq, $_.i), $_.lastidx, $get($_.pcomp, $_.pchars)); //#22770
                                    } //#22770
                                } else { //#22773
                                    $k[$j++] = $_.nxtseq; //#22773
                                    $k[$j++] = $_.i; //#22773
                                    $k[$j++] = Infinity; //#22773
                                    $aload($_.curseqi); //#22773
                                    $j--; //#22773
                                    $k[$j++] = $get($_.pcomp, $_.pchars); //#22773
                                    var _8f = $a(); //#22773
                                    var _8g = $k[--$j]; //#22773
                                    $put($k[--$j], _8g, _8f); //#22773
                                } //#22773
                            } //#22773
                        } //#22773
                    } //#22773
                } //#22773
            } //#22773
            if ($ne($get($_.nxtseq, $_.B), null)) { //#22788
                $_.numbytes = 0; //#22783
                $forall($get($_.nxtseq, $_.B), function() { //#22786
                    if ($k[--$j] == $_.sb) { //#22785
                        $k[$j++] = 0; //#22785
                    } else { //#22785
                        $k[$j++] = $_.numbytes + 1; //#22785
                    } //#22785
                    $_.numbytes = $k[--$j]; //#22785
                }); //#22785
                if ($_.numbytes == 32) { //#22787
                    $put($_.nxtlen, $_.B, $f($get($_.nxtlen, $_.B) + 11)); //#22787
                } //#22787
            } //#22787
            $_.curlen = $_.nxtlen; //#22790
            $_.curseq = $_.nxtseq; //#22791
            $k[$j++] = 'lastchar'; //#22792
            if ($_.char >= 0) { //#22792
                $k[$j++] = $_.char; //#22792
            } else { //#22792
                $k[$j++] = ""; //#22792
            } //#22792
            var _92 = $k[--$j]; //#22792
            $_[$k[--$j]] = _92; //#22792
        }); //#22792
        $_.minseq = $_.e; //#22797
        var _9B = $a([$_.U, $_.L, $_.M, $_.P, $_.D, $_.B]); //#22798
        for (var _9C = 0, _9D = _9B.length; _9C < _9D; _9C++) { //#22804
            $_.i = $get(_9B, _9C); //#22799
            if ($get($_.curlen, $_.i) < $_.minseq) { //#22803
                $_.minseq = $get($_.curlen, $_.i); //#22801
                $_.seq = $get($_.curseq, $_.i); //#22802
            } //#22802
        } //#22802
        $_.tobin = function() {
            var _9Q = $s($k[--$j]); //#22808
            $k[$j++] = _9Q; //#22808
            for (var _9S = 0, _9R = _9Q.length - 1; _9S <= _9R; _9S += 1) { //#22808
                var _9T = $k[--$j]; //#22808
                $put(_9T, _9S, 48); //#22808
                $k[$j++] = _9T; //#22808
            } //#22808
            var _9U = $k[--$j]; //#22809
            $k[$j++] = _9U; //#22809
            $k[$j++] = _9U; //#22809
            $r(3, -1); //#22809
            var _9V = $k[--$j]; //#22809
            var _9W = $k[--$j]; //#22809
            var _9Y = $cvrs($s(_9W.length), _9V, 2); //#22809
            $puti(_9W, _9W.length - _9Y.length, _9Y); //#22809
        }; //#22809
        $_.encu = function() {
            var _9d = $get($get($_.charvals, $_.U), $k[--$j]); //#22812
            $k[$j++] = _9d; //#22812
            $k[$j++] = 5; //#22812
            $_.tobin(); //#22812
        }; //#22812
        $_.encl = function() {
            var _9i = $get($get($_.charvals, $_.L), $k[--$j]); //#22813
            $k[$j++] = _9i; //#22813
            $k[$j++] = 5; //#22813
            $_.tobin(); //#22813
        }; //#22813
        $_.encm = function() {
            var _9n = $get($get($_.charvals, $_.M), $k[--$j]); //#22814
            $k[$j++] = _9n; //#22814
            $k[$j++] = 5; //#22814
            $_.tobin(); //#22814
        }; //#22814
        $_.encd = function() {
            var _9s = $get($get($_.charvals, $_.D), $k[--$j]); //#22815
            $k[$j++] = _9s; //#22815
            $k[$j++] = 4; //#22815
            $_.tobin(); //#22815
        }; //#22815
        $_.encp = function() {
            var _9t = $k[--$j]; //#22818
            $k[$j++] = _9t; //#22835
            if (_9t == $_.fn1) { //#22834
                $j--; //#22819
                $k[$j++] = "00000000"; //#22819
            } else { //#22834
                var _9v = $k[--$j]; //#22821
                $k[$j++] = _9v; //#22835
                if (_9v <= -1000000) { //#22834
                    var _9x = $f((-$k[--$j]) - 1000000); //#22822
                    $k[$j++] = _9x; //#22822
                    $k[$j++] = _9x; //#22822
                    if (_9x == 0) { //#22822
                        $j--; //#22822
                        $k[$j++] = 1; //#22822
                    } //#22822
                    var _9z = ~~(Math.log($k[--$j]) / Math.log(10)); //#22824
                    var _A0 = $s(((_9z + 1) * 4) + 8); //#22824
                    $puti(_A0, 0, "00000"); //#22825
                    $k[$j++] = _9z; //#22826
                    $k[$j++] = _A0; //#22826
                    $k[$j++] = _A0; //#22826
                    $k[$j++] = _9z + 1; //#22826
                    $k[$j++] = 3; //#22826
                    $_.tobin(); //#22826
                    var _A1 = $k[--$j]; //#22826
                    $puti($k[--$j], 5, _A1); //#22826
                    $r(3, 1); //#22827
                    $k[$j++] = -1; //#22831
                    $k[$j++] = 0; //#22831
                    if ($j < 3) throw "--stack-underflow--"; //#22831
                    $j -= 3; //#22831
                    for (var _A6 = $k[$j], _A7 = $k[$j + 1], _A5 = $k[$j + 2]; _A7 < 0 ? _A6 >= _A5 : _A6 <= _A5; _A6 += _A7) { //#22831
                        var _A8 = $k[--$j]; //#22828
                        var _A9 = $k[--$j]; //#22829
                        $k[$j++] = _A9; //#22830
                        $k[$j++] = ~~(_A8 / 10); //#22830
                        $k[$j++] = _A9; //#22830
                        $k[$j++] = (_A6 * 4) + 8; //#22830
                        $k[$j++] = $f((_A8 % 10) + 2); //#22830
                        $k[$j++] = 4; //#22830
                        $_.tobin(); //#22830
                        var _AA = $k[--$j]; //#22830
                        var _AB = $k[--$j]; //#22830
                        $puti($k[--$j], _AB, _AA); //#22830
                    } //#22830
                    $j--; //#22832
                } else { //#22834
                    var _AH = $get($get($_.charvals, $_.P), $k[--$j]); //#22834
                    $k[$j++] = _AH; //#22834
                    $k[$j++] = 5; //#22834
                    $_.tobin(); //#22834
                } //#22834
            } //#22834
        }; //#22834
        $_.encfuncs = $a(['encu', 'encl', 'encm', 'encp', 'encd']); //#22838
        $_.addtomsgbits = function() {
            $_.v = $k[--$j]; //#22841
            $puti($_.msgbits, $_.j, $_.v); //#22842
            $_.j = $_.j + $_.v.length; //#22843
        }; //#22843
        $_.state = $_.U; //#22847
        $_.msgbits = $s($_.minseq); //#22848
        $_.i = 0; //#22849
        $_.j = 0; //#22849
        for (;;) { //#22908
            if ($_.i >= $_.seq.length) { //#22850
                break; //#22850
            } //#22850
            if ($_.state != $_.B) { //#22903
                $_.char = $get($_.seq, $_.i); //#22854
                $k[$j++] = $_.char; //#22857
                if ($_[$get($_.encfuncs, $_.state)]() === true) {
                    break;
                } //#22857
                $_.addtomsgbits(); //#22857
                $_.i = $_.i + 1; //#22858
                if (($_.char == $_.su) || ($_.char == $_.sp)) { //#22864
                    $k[$j++] = $get($_.seq, $_.i); //#22862
                    if ($_.char == $_.su) { //#22862
                        $_.encu(); //#22862
                    } else { //#22862
                        $_.encp(); //#22862
                    } //#22862
                    $_.addtomsgbits(); //#22862
                    $_.i = $_.i + 1; //#22863
                } //#22863
                if ($_.char == $_.lu) { //#22867
                    $_.state = $_.U; //#22867
                } //#22867
                if ($_.char == $_.ll) { //#22868
                    $_.state = $_.L; //#22868
                } //#22868
                if ($_.char == $_.lm) { //#22869
                    $_.state = $_.M; //#22869
                } //#22869
                if ($_.char == $_.lp) { //#22870
                    $_.state = $_.P; //#22870
                } //#22870
                if ($_.char == $_.ld) { //#22871
                    $_.state = $_.D; //#22871
                } //#22871
                if ($_.char == $_.sb) { //#22872
                    $_.state = $_.B; //#22872
                } //#22872
            } else { //#22903
                $_.numbytes = 0; //#22877
                for (;;) { //#22881
                    if (($_.i + $_.numbytes) >= $_.seq.length) { //#22878
                        break; //#22878
                    } //#22878
                    if ($get($_.seq, $_.i + $_.numbytes) < 0) { //#22879
                        break; //#22879
                    } //#22879
                    $_.numbytes = $_.numbytes + 1; //#22880
                } //#22880
                if ($_.numbytes <= 31) { //#22888
                    $k[$j++] = $_.numbytes; //#22885
                    $k[$j++] = 5; //#22885
                    $_.tobin(); //#22885
                    $_.addtomsgbits(); //#22885
                } else { //#22888
                    $k[$j++] = 0; //#22887
                    $k[$j++] = 5; //#22887
                    $_.tobin(); //#22887
                    $_.addtomsgbits(); //#22887
                    $k[$j++] = $_.numbytes - 31; //#22888
                    $k[$j++] = 11; //#22888
                    $_.tobin(); //#22888
                    $_.addtomsgbits(); //#22888
                } //#22888
                for (var _BJ = 0, _BK = $_.numbytes; _BJ < _BK; _BJ++) { //#22895
                    $k[$j++] = $get($_.seq, $_.i); //#22893
                    $k[$j++] = 8; //#22893
                    $_.tobin(); //#22893
                    $_.addtomsgbits(); //#22893
                    $_.i = $_.i + 1; //#22894
                } //#22894
                if ($_.i < $_.seq.length) { //#22904
                    $_.char = $get($_.seq, $_.i); //#22899
                    $_.i = $_.i + 1; //#22900
                    if ($_.char == $_.lu) { //#22901
                        $_.state = $_.U; //#22901
                    } //#22901
                    if ($_.char == $_.ll) { //#22902
                        $_.state = $_.L; //#22902
                    } //#22902
                    if ($_.char == $_.lm) { //#22903
                        $_.state = $_.M; //#22903
                    } //#22903
                } //#22903
            } //#22903
        } //#22903
        $_.msgbits = $geti($_.msgbits, 0, $_.j); //#22909
    } //#22909
    if (!bwipp_azteccode.__22930__) { //#22930
        $_ = Object.create($_); //#22930
        $_.metrics = $a([$a(["rune", 0, 0, 0, 6]), $a(["compact", 1, 1, 17, 6]), $a(["full", 1, 1, 21, 6]), $a(["compact", 2, 0, 40, 6]), $a(["full", 2, 1, 48, 6]), $a(["compact", 3, 0, 51, 8]), $a(["full", 3, 1, 60, 8]), $a(["compact", 4, 0, 76, 8]), $a(["full", 4, 1, 88, 8]), $a(["full", 5, 1, 120, 8]), $a(["full", 6, 1, 156, 8]), $a(["full", 7, 1, 196, 8]), $a(["full", 8, 1, 240, 8]), $a(["full", 9, 1, 230, 10]), $a(["full", 10, 1, 272, 10]), $a(["full", 11, 1, 316, 10]), $a(["full", 12, 1, 364, 10]), $a(["full", 13, 1, 416, 10]), $a(["full", 14, 1, 470, 10]), $a(["full", 15, 1, 528, 10]), $a(["full", 16, 1, 588, 10]), $a(["full", 17, 1, 652, 10]), $a(["full", 18, 1, 720, 10]), $a(["full", 19, 1, 790, 10]), $a(["full", 20, 1, 864, 10]), $a(["full", 21, 1, 940, 10]), $a(["full", 22, 1, 1020, 10]), $a(["full", 23, 0, 920, 12]), $a(["full", 24, 0, 992, 12]), $a(["full", 25, 0, 1066, 12]), $a(["full", 26, 0, 1144, 12]), $a(["full", 27, 0, 1224, 12]), $a(["full", 28, 0, 1306, 12]), $a(["full", 29, 0, 1392, 12]), $a(["full", 30, 0, 1480, 12]), $a(["full", 31, 0, 1570, 12]), $a(["full", 32, 0, 1664, 12])]); //#22929
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_azteccode.$ctx[id] = $_[id]); //#22929
        bwipp_azteccode.__22930__ = 1; //#22929
        $_ = Object.getPrototypeOf($_); //#22929
    } //#22929
    var _CK = $_.metrics; //#22932
    for (var _CL = 0, _CM = _CK.length; _CL < _CM; _CL++) { //#22948
        $_.m = $get(_CK, _CL); //#22933
        $_.frmt = $get($_.m, 0); //#22934
        $_.mlyr = $get($_.m, 1); //#22935
        $_.icap = $get($_.m, 2); //#22936
        $_.ncws = $get($_.m, 3); //#22937
        $_.bpcw = $get($_.m, 4); //#22938
        $_.numecw = ~~(Math.ceil($f((($_.ncws * $_.eclevel) / 100) + $_.ecaddchars))); //#22939
        if ($_.msgbits.length == 0) { //#22940
            $_.numecw = 0; //#22940
        } //#22940
        $_.numdcw = $f($_.ncws - $_.numecw); //#22941
        $_.okay = true; //#22942
        if ($ne($_.format, $_.frmt)) { //#22943
            $_.okay = false; //#22943
        } //#22943
        if ($_.readerinit && ($_.icap != 1)) { //#22944
            $_.okay = false; //#22944
        } //#22944
        if (($_.layers != -1) && ($_.layers != $_.mlyr)) { //#22945
            $_.okay = false; //#22945
        } //#22945
        if ((~~Math.ceil($_.msgbits.length / $_.bpcw)) > $_.numdcw) { //#22946
            $_.okay = false; //#22946
        } //#22946
        if ($_.okay) { //#22947
            break; //#22947
        } //#22947
    } //#22947
    if (!$_.okay) { //#22952
        $k[$j++] = 'bwipp.aztecNoValidSymbol#22951'; //#22951
        $k[$j++] = "Maximum length exceeded"; //#22951
        bwipp_raiseerror(); //#22951
    } //#22951
    $_.layers = $_.mlyr; //#22954
    $_.allzero = function() {
        var _Cr = $k[--$j]; //#22957
        $k[$j++] = $eq(_Cr, $geti("000000000000", 0, _Cr.length)); //#22957
    }; //#22957
    $_.allones = function() {
        var _Ct = $k[--$j]; //#22958
        $k[$j++] = $eq(_Ct, $geti("111111111111", 0, _Ct.length)); //#22958
    }; //#22958
    $_.cws = $a($_.ncws); //#22959
    $_.m = 0; //#22960
    $_.c = 0; //#22960
    for (;;) { //#22987
        if ($_.msgbits.length <= $_.m) { //#22962
            break; //#22962
        } //#22962
        if (($_.msgbits.length - $_.m) >= $_.bpcw) { //#22976
            $_.cwb = $geti($_.msgbits, $_.m, $f($_.bpcw - 1)); //#22964
            $_.cwf = $geti($_.msgbits, $f($f($_.m + $_.bpcw) - 1), 1); //#22965
            $k[$j++] = $_.cwb; //#22966
            $_.allzero(); //#22966
            if ($k[--$j]) { //#22966
                $_.cwf = "1"; //#22966
                $_.m = $_.m - 1; //#22966
            } //#22966
            $k[$j++] = $_.cwb; //#22967
            $_.allones(); //#22967
            if ($k[--$j]) { //#22967
                $_.cwf = "0"; //#22967
                $_.m = $_.m - 1; //#22967
            } //#22967
            var _DG = $s(12); //#22969
            $puti(_DG, 0, $_.cwb); //#22969
            $puti(_DG, $f($_.bpcw - 1), $_.cwf); //#22970
            $_.cwb = $geti(_DG, 0, $_.bpcw); //#22972
        } else { //#22976
            $_.cwb = $geti($_.msgbits, $_.m, $_.msgbits.length - $_.m); //#22974
            var _DS = $strcpy($s(12), "111111111111"); //#22975
            $puti(_DS, 0, $_.cwb); //#22975
            $_.cwb = $geti(_DS, 0, $_.bpcw); //#22975
            $k[$j++] = $_.cwb; //#22976
            $_.allones(); //#22976
            if ($k[--$j]) { //#22976
                $puti($_.cwb, $_.cwb.length - 1, "0"); //#22976
            } //#22976
        } //#22976
        $_.cw = 0; //#22979
        for (var _Dc = 0, _Db = $f($_.bpcw - 1); _Dc <= _Db; _Dc += 1) { //#22983
            $_.i = _Dc; //#22981
            $_.cw = $f($_.cw + ((~~(Math.pow(2, $f($f($_.bpcw - $_.i) - 1)))) * $f($get($_.cwb, $_.i) - 48))); //#22982
        } //#22982
        $put($_.cws, $_.c, $_.cw); //#22984
        $_.m = $f($_.m + $_.bpcw); //#22985
        $_.c = $_.c + 1; //#22986
    } //#22986
    $_.cws = $geti($_.cws, 0, $_.c); //#22988
    var _Dt = $get($_.options, 'debugcws') !== undefined; //#22990
    if (_Dt) { //#22990
        $k[$j++] = 'bwipp.debugcws#22990'; //#22990
        $k[$j++] = $_.cws; //#22990
        bwipp_raiseerror(); //#22990
    } //#22990
    $_.rscodes = function() {
        $_.rspm = $k[--$j]; //#22995
        $_.rsgf = $k[--$j]; //#22996
        $_.rsnc = $k[--$j]; //#22997
        $_.rscws = $k[--$j]; //#22998
        $k[$j++] = Infinity; //#23001
        $k[$j++] = 1; //#23001
        for (var _E0 = 0, _E1 = $f($_.rsgf - 1); _E0 < _E1; _E0++) { //#23001
            var _E2 = $k[--$j]; //#23001
            var _E3 = _E2 * 2; //#23001
            $k[$j++] = _E2; //#23001
            $k[$j++] = _E3; //#23001
            if (_E3 >= $_.rsgf) { //#23001
                var _E6 = $k[--$j]; //#23001
                $k[$j++] = $xo(_E6, $_.rspm); //#23001
            } //#23001
        } //#23001
        $_.rsalog = $a(); //#23001
        $_.rslog = $a($_.rsgf); //#23002
        for (var _EC = 1, _EB = $f($_.rsgf - 1); _EC <= _EB; _EC += 1) { //#23003
            $put($_.rslog, $get($_.rsalog, _EC), _EC); //#23003
        } //#23003
        $_.rsprod = function() {
            var _EG = $k[--$j]; //#23007
            var _EH = $k[--$j]; //#23007
            $k[$j++] = _EH; //#23011
            $k[$j++] = _EG; //#23011
            if ((_EG != 0) && (_EH != 0)) { //#23010
                var _EK = $get($_.rslog, $k[--$j]); //#23008
                var _EQ = $get($_.rsalog, $f(_EK + $get($_.rslog, $k[--$j])) % $f($_.rsgf - 1)); //#23008
                $k[$j++] = _EQ; //#23008
            } else { //#23010
                $j -= 2; //#23010
                $k[$j++] = 0; //#23010
            } //#23010
        }; //#23010
        $k[$j++] = Infinity; //#23015
        $k[$j++] = 1; //#23015
        for (var _ES = 0, _ET = $_.rsnc; _ES < _ET; _ES++) { //#23015
            $k[$j++] = 0; //#23015
        } //#23015
        $_.coeffs = $a(); //#23015
        for (var _EX = 1, _EW = $_.rsnc; _EX <= _EW; _EX += 1) { //#23024
            $_.i = _EX; //#23017
            $put($_.coeffs, $_.i, $get($_.coeffs, $_.i - 1)); //#23018
            for (var _Ee = $_.i - 1; _Ee >= 1; _Ee -= 1) { //#23022
                $_.j = _Ee; //#23020
                $k[$j++] = $_.coeffs; //#23021
                $k[$j++] = $_.j; //#23021
                $k[$j++] = $get($_.coeffs, $_.j - 1); //#23021
                $k[$j++] = $get($_.coeffs, $_.j); //#23021
                $k[$j++] = $get($_.rsalog, $_.i); //#23021
                $_.rsprod(); //#23021
                var _Eq = $k[--$j]; //#23021
                var _Er = $k[--$j]; //#23021
                var _Es = $k[--$j]; //#23021
                $put($k[--$j], _Es, $xo(_Er, _Eq)); //#23021
            } //#23021
            $k[$j++] = $_.coeffs; //#23023
            $k[$j++] = 0; //#23023
            $k[$j++] = $get($_.coeffs, 0); //#23023
            $k[$j++] = $get($_.rsalog, $_.i); //#23023
            $_.rsprod(); //#23023
            var _F0 = $k[--$j]; //#23023
            var _F1 = $k[--$j]; //#23023
            $put($k[--$j], _F1, _F0); //#23023
        } //#23023
        $_.nd = $_.rscws.length; //#23027
        $k[$j++] = Infinity; //#23028
        $aload($_.rscws); //#23028
        for (var _F6 = 0, _F7 = $_.rsnc; _F6 < _F7; _F6++) { //#23028
            $k[$j++] = 0; //#23028
        } //#23028
        $k[$j++] = 0; //#23028
        $_.rscws = $a(); //#23028
        for (var _FB = 0, _FA = $_.nd - 1; _FB <= _FA; _FB += 1) { //#23035
            $_.k = $xo($get($_.rscws, _FB), $get($_.rscws, $_.nd)); //#23030
            for (var _FJ = 0, _FI = $f($_.rsnc - 1); _FJ <= _FI; _FJ += 1) { //#23034
                $_.j = _FJ; //#23032
                $k[$j++] = $_.rscws; //#23033
                $k[$j++] = $_.nd + $_.j; //#23033
                $k[$j++] = $get($_.rscws, ($_.nd + $_.j) + 1); //#23033
                $k[$j++] = $_.k; //#23033
                $k[$j++] = $get($_.coeffs, $f($f($_.rsnc - $_.j) - 1)); //#23033
                $_.rsprod(); //#23033
                var _FW = $k[--$j]; //#23033
                var _FX = $k[--$j]; //#23033
                var _FY = $k[--$j]; //#23033
                $put($k[--$j], _FY, $xo(_FX, _FW)); //#23033
            } //#23033
        } //#23033
        $k[$j++] = $geti($_.rscws, 0, $_.rscws.length - 1); //#23038
    }; //#23038
    if ($eq($_.format, "full")) { //#23053
        $_.mode = ($f($_.layers - 1) << 11) + ($_.cws.length - 1); //#23044
        if ($_.readerinit) { //#23045
            $_.mode = $_.mode | 1024; //#23045
        } //#23045
        $_.mode = $a([($_.mode & 61440) >>> 12, ($_.mode & 3840) >>> 8, ($_.mode & 240) >>> 4, $_.mode & 15]); //#23051
        $k[$j++] = 'mode'; //#23052
        $k[$j++] = $_.mode; //#23052
        $k[$j++] = 6; //#23052
        $k[$j++] = 16; //#23052
        $k[$j++] = 19; //#23052
        $_.rscodes(); //#23052
        var _Fo = $k[--$j]; //#23052
        $_[$k[--$j]] = _Fo; //#23052
    } //#23052
    if ($eq($_.format, "compact")) { //#23062
        $_.mode = ($f($_.layers - 1) << 6) + ($_.cws.length - 1); //#23055
        if ($_.readerinit) { //#23056
            $_.mode = $_.mode | 32; //#23056
        } //#23056
        $_.mode = $a([($_.mode & 240) >>> 4, $_.mode & 15]); //#23060
        $k[$j++] = 'mode'; //#23061
        $k[$j++] = $_.mode; //#23061
        $k[$j++] = 5; //#23061
        $k[$j++] = 16; //#23061
        $k[$j++] = 19; //#23061
        $_.rscodes(); //#23061
        var _Fz = $k[--$j]; //#23061
        $_[$k[--$j]] = _Fz; //#23061
    } //#23061
    if ($eq($_.format, "rune")) { //#23071
        $_.mode = $cvi($_.barcode); //#23064
        $_.mode = $a([($_.mode & 240) >>> 4, $_.mode & 15]); //#23068
        $k[$j++] = 'mode'; //#23069
        $k[$j++] = $_.mode; //#23069
        $k[$j++] = 5; //#23069
        $k[$j++] = 16; //#23069
        $k[$j++] = 19; //#23069
        $_.rscodes(); //#23069
        var _G7 = $k[--$j]; //#23069
        $_[$k[--$j]] = _G7; //#23069
        $k[$j++] = Infinity; //#23070
        var _G9 = $_.mode; //#23070
        for (var _GA = 0, _GB = _G9.length; _GA < _GB; _GA++) { //#23070
            $k[$j++] = $get(_G9, _GA) ^ 10; //#23070
        } //#23070
        $_.mode = $a(); //#23070
    } //#23070
    $_.modebits = $s($_.mode.length * 4); //#23072
    for (var _GI = 0, _GH = $_.modebits.length - 1; _GI <= _GH; _GI += 1) { //#23073
        $puti($_.modebits, _GI, "0"); //#23073
    } //#23073
    for (var _GM = 0, _GL = $_.mode.length - 1; _GM <= _GL; _GM += 1) { //#23077
        $_.i = _GM; //#23075
        var _GS = $cvrs($s(4), $get($_.mode, $_.i), 2); //#23076
        $puti($_.modebits, (4 - _GS.length) + (4 * $_.i), _GS); //#23076
    } //#23076
    if (!bwipp_azteccode.__23091__) { //#23091
        $_ = Object.create($_); //#23091
        $_.rsparams = $a([$a([]), $a([]), $a([]), $a([]), $a([]), $a([]), $a([64, 67]), $a([]), $a([256, 301]), $a([]), $a([1024, 1033]), $a([]), $a([4096, 4201])]); //#23090
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_azteccode.$ctx[id] = $_[id]); //#23090
        bwipp_azteccode.__23091__ = 1; //#23090
        $_ = Object.getPrototypeOf($_); //#23090
    } //#23090
    $k[$j++] = 'cws'; //#23092
    $k[$j++] = $_.cws; //#23092
    $k[$j++] = $f($_.ncws - $_.cws.length); //#23092
    $aload($get($_.rsparams, $_.bpcw)); //#23092
    $_.rscodes(); //#23092
    var _Gp = $k[--$j]; //#23092
    $_[$k[--$j]] = _Gp; //#23092
    if ($eq($_.format, "full")) { //#23096
        $_.databits = $s($f((($_.layers * $_.layers) * 16) + ($_.layers * 112))); //#23094
    } else { //#23096
        $_.databits = $s($f((($_.layers * $_.layers) * 16) + ($_.layers * 88))); //#23096
    } //#23096
    for (var _H2 = 0, _H1 = $_.databits.length - 1; _H2 <= _H1; _H2 += 1) { //#23098
        $puti($_.databits, _H2, "0"); //#23098
    } //#23098
    for (var _H6 = 0, _H5 = $f($_.ncws - 1); _H6 <= _H5; _H6 += 1) { //#23104
        $_.i = _H6; //#23100
        var _HD = $cvrs($s($_.bpcw), $get($_.cws, $_.i), 2); //#23101
        $puti($_.databits, $f(($f($f($_.bpcw - _HD.length) + ($_.bpcw * $_.i))) + ($f($_.databits.length - ($_.ncws * $_.bpcw)))), _HD); //#23103
    } //#23103
    $_.cmv = function() {
        var _HL = $k[--$j]; //#23107
        var _HM = $k[--$j]; //#23107
        $k[$j++] = $f(($f(_HM - (_HL * $_.size))) + $_.mid); //#23107
    }; //#23107
    $_.lmv = function() {
        $_.lbit = $k[--$j]; //#23111
        $_.llyr = $k[--$j]; //#23112
        $_.lwid = $f($_.fw + ($_.llyr * 4)); //#23113
        $_.ldir = ~~((~~($_.lbit / 2)) / $_.lwid); //#23114
        if ($_.ldir == 0) { //#23119
            $k[$j++] = $f(((-(~~($f($_.lwid - 1) / 2))) + 1) + ((~~($_.lbit / 2)) % $_.lwid)); //#23118
            $k[$j++] = $f(($f((~~(($_.fw - 1) / 2)) + ($_.llyr * 2))) + ($_.lbit % 2)); //#23118
            $_.cmv(); //#23118
        } //#23118
        if ($_.ldir == 1) { //#23124
            $k[$j++] = $f(($f((~~($_.fw / 2)) + ($_.llyr * 2))) + ($_.lbit % 2)); //#23123
            $k[$j++] = $f(((~~($f($_.lwid - 1) / 2)) - 1) - ((~~($_.lbit / 2)) % $_.lwid)); //#23123
            $_.cmv(); //#23123
        } //#23123
        if ($_.ldir == 2) { //#23129
            $k[$j++] = -($f(((-(~~($_.lwid / 2))) + 1) + ((~~($_.lbit / 2)) % $_.lwid))); //#23128
            $k[$j++] = -($f(($f((~~($_.fw / 2)) + ($_.llyr * 2))) + ($_.lbit % 2))); //#23128
            $_.cmv(); //#23128
        } //#23128
        if ($_.ldir == 3) { //#23134
            $k[$j++] = -($f(($f((~~(($_.fw - 1) / 2)) + ($_.llyr * 2))) + ($_.lbit % 2))); //#23133
            $k[$j++] = -($f(((~~($_.lwid / 2)) - 1) - ((~~($_.lbit / 2)) % $_.lwid))); //#23133
            $_.cmv(); //#23133
        } //#23133
    }; //#23133
    if ($eq($_.format, "full")) { //#23139
        $_.fw = 12; //#23139
    } else { //#23139
        $_.fw = 9; //#23139
    } //#23139
    $_.size = $f(($f($_.fw + ($_.layers * 4))) + 2); //#23140
    $k[$j++] = Infinity; //#23141
    for (var _I1 = 0, _I2 = $_.size * $_.size; _I1 < _I2; _I1++) { //#23141
        $k[$j++] = -1; //#23141
    } //#23141
    $_.pixs = $a(); //#23141
    $_.mid = $f(((~~($f($_.size - 1) / 2)) * $_.size) + (~~($f($_.size - 1) / 2))); //#23142
    $_.i = 0; //#23145
    for (var _I9 = 1, _I8 = $_.layers; _I9 <= _I8; _I9 += 1) { //#23153
        $_.layer = _I9; //#23147
        for (var _ID = 0, _IC = (($_.fw + ($_.layer * 4)) * 8) - 1; _ID <= _IC; _ID += 1) { //#23152
            $_.pos = _ID; //#23149
            $k[$j++] = $_.pixs; //#23150
            $k[$j++] = $_.layer; //#23150
            $k[$j++] = $_.pos; //#23150
            $_.lmv(); //#23150
            var _IL = $k[--$j]; //#23150
            $put($k[--$j], _IL, $get($_.databits, ($_.databits.length - $_.i) - 1) - 48); //#23150
            $_.i = $_.i + 1; //#23151
        } //#23151
    } //#23151
    if ($eq($_.format, "full")) { //#23180
        $_.fw = 13; //#23157
        $_.size = $f(($f(($f($_.fw + ($_.layers * 4))) + 2)) + ((~~($f(($f($_.layers + 10.5) / 7.5) - 1))) * 2)); //#23158
        $_.mid = ~~(($_.size * $_.size) / 2); //#23159
        $k[$j++] = Infinity; //#23160
        for (var _IW = 0, _IX = $_.size * $_.size; _IW < _IX; _IW++) { //#23160
            $k[$j++] = -2; //#23160
        } //#23160
        $_.npixs = $a(); //#23160
        for (var _Ib = 0, _Ia = ~~($_.size / 2); _Ib <= _Ia; _Ib += 16) { //#23170
            $_.i = _Ib; //#23162
            for (var _Ie = 0, _Id = $f($_.size - 1); _Ie <= _Id; _Ie += 1) { //#23169
                $_.j = _Ie; //#23164
                $k[$j++] = $_.npixs; //#23165
                $k[$j++] = (-(~~($_.size / 2))) + $_.j; //#23165
                $k[$j++] = $_.i; //#23165
                $_.cmv(); //#23165
                var _In = $k[--$j]; //#23165
                $puti($k[--$j], _In, $a([((((~~($_.size / 2)) + $_.j) + $_.i) + 1) % 2])); //#23165
                $k[$j++] = $_.npixs; //#23166
                $k[$j++] = (-(~~($_.size / 2))) + $_.j; //#23166
                $k[$j++] = -$_.i; //#23166
                $_.cmv(); //#23166
                var _Ix = $k[--$j]; //#23166
                $puti($k[--$j], _Ix, $a([((((~~($_.size / 2)) + $_.j) + $_.i) + 1) % 2])); //#23166
                $k[$j++] = $_.npixs; //#23167
                $k[$j++] = $_.i; //#23167
                $k[$j++] = (-(~~($_.size / 2))) + $_.j; //#23167
                $_.cmv(); //#23167
                var _J7 = $k[--$j]; //#23167
                $puti($k[--$j], _J7, $a([((((~~($_.size / 2)) + $_.j) + $_.i) + 1) % 2])); //#23167
                $k[$j++] = $_.npixs; //#23168
                $k[$j++] = -$_.i; //#23168
                $k[$j++] = (-(~~($_.size / 2))) + $_.j; //#23168
                $_.cmv(); //#23168
                var _JH = $k[--$j]; //#23168
                $puti($k[--$j], _JH, $a([((((~~($_.size / 2)) + $_.j) + $_.i) + 1) % 2])); //#23168
            } //#23168
        } //#23168
        $_.j = 0; //#23171
        for (var _JL = 0, _JK = $_.npixs.length - 1; _JL <= _JK; _JL += 1) { //#23178
            $_.i = _JL; //#23173
            if ($get($_.npixs, $_.i) == -2) { //#23177
                $put($_.npixs, $_.i, $get($_.pixs, $_.j)); //#23175
                $_.j = $_.j + 1; //#23176
            } //#23176
        } //#23176
        $_.pixs = $_.npixs; //#23179
    } //#23179
    $_.fw = ~~($_.fw / 2); //#23183
    for (var _Ja = -$_.fw, _JZ = $_.fw; _Ja <= _JZ; _Ja += 1) { //#23192
        $_.i = _Ja; //#23185
        for (var _Je = -$_.fw, _Jd = $_.fw; _Je <= _Jd; _Je += 1) { //#23191
            $_.j = _Je; //#23187
            $k[$j++] = $_.pixs; //#23188
            $k[$j++] = $_.i; //#23188
            $k[$j++] = $_.j; //#23188
            $_.cmv(); //#23188
            if (Math.abs($_.i) > Math.abs($_.j)) { //#23189
                $k[$j++] = Math.abs($_.i); //#23189
            } else { //#23189
                $k[$j++] = Math.abs($_.j); //#23189
            } //#23189
            var _Jm = $k[--$j]; //#23189
            var _Jn = $k[--$j]; //#23190
            $put($k[--$j], _Jn, $f(_Jm + 1) % 2); //#23190
        } //#23190
    } //#23190
    var _KP = $a([$a([-($_.fw + 1), $_.fw, 1]), $a([-($_.fw + 1), $_.fw + 1, 1]), $a([-$_.fw, $_.fw + 1, 1]), $a([$_.fw + 1, $_.fw + 1, 1]), $a([$_.fw + 1, $_.fw, 1]), $a([$_.fw + 1, -$_.fw, 1]), $a([$_.fw, $_.fw + 1, 0]), $a([$_.fw + 1, -($_.fw + 1), 0]), $a([$_.fw, -($_.fw + 1), 0]), $a([-$_.fw, -($_.fw + 1), 0]), $a([-($_.fw + 1), -($_.fw + 1), 0]), $a([-($_.fw + 1), -$_.fw, 0])]); //#23200
    for (var _KQ = 0, _KR = _KP.length; _KQ < _KR; _KQ++) { //#23201
        $k[$j++] = $_.pixs; //#23201
        $aload($get(_KP, _KQ)); //#23201
        $r(3, 1); //#23201
        $_.cmv(); //#23201
        var _KU = $k[--$j]; //#23201
        var _KV = $k[--$j]; //#23201
        $put($k[--$j], _KU, _KV); //#23201
    } //#23201
    if (!bwipp_azteccode.__23217__) { //#23217
        $_ = Object.create($_); //#23217
        $_.modemapfull = $a([$a([-5, 7]), $a([-4, 7]), $a([-3, 7]), $a([-2, 7]), $a([-1, 7]), $a([1, 7]), $a([2, 7]), $a([3, 7]), $a([4, 7]), $a([5, 7]), $a([7, 5]), $a([7, 4]), $a([7, 3]), $a([7, 2]), $a([7, 1]), $a([7, -1]), $a([7, -2]), $a([7, -3]), $a([7, -4]), $a([7, -5]), $a([5, -7]), $a([4, -7]), $a([3, -7]), $a([2, -7]), $a([1, -7]), $a([-1, -7]), $a([-2, -7]), $a([-3, -7]), $a([-4, -7]), $a([-5, -7]), $a([-7, -5]), $a([-7, -4]), $a([-7, -3]), $a([-7, -2]), $a([-7, -1]), $a([-7, 1]), $a([-7, 2]), $a([-7, 3]), $a([-7, 4]), $a([-7, 5])]); //#23210
        $_.modemapcompact = $a([$a([-3, 5]), $a([-2, 5]), $a([-1, 5]), $a([0, 5]), $a([1, 5]), $a([2, 5]), $a([3, 5]), $a([5, 3]), $a([5, 2]), $a([5, 1]), $a([5, 0]), $a([5, -1]), $a([5, -2]), $a([5, -3]), $a([3, -5]), $a([2, -5]), $a([1, -5]), $a([0, -5]), $a([-1, -5]), $a([-2, -5]), $a([-3, -5]), $a([-5, -3]), $a([-5, -2]), $a([-5, -1]), $a([-5, 0]), $a([-5, 1]), $a([-5, 2]), $a([-5, 3])]); //#23216
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_azteccode.$ctx[id] = $_[id]); //#23216
        bwipp_azteccode.__23217__ = 1; //#23216
        $_ = Object.getPrototypeOf($_); //#23216
    } //#23216
    $k[$j++] = 'modemap'; //#23218
    if ($eq($_.format, "full")) { //#23218
        $k[$j++] = $_.modemapfull; //#23218
    } else { //#23218
        $k[$j++] = $_.modemapcompact; //#23218
    } //#23218
    var _Lj = $k[--$j]; //#23218
    $_[$k[--$j]] = _Lj; //#23218
    for (var _Ln = 0, _Lm = $_.modemap.length - 1; _Ln <= _Lm; _Ln += 1) { //#23222
        $k[$j++] = _Ln; //#23220
        $k[$j++] = $_.pixs; //#23220
        $aload($get($_.modemap, _Ln)); //#23220
        $_.cmv(); //#23220
        var _Ls = $k[--$j]; //#23220
        var _Lt = $k[--$j]; //#23220
        $put(_Lt, _Ls, $get($_.modebits, $k[--$j]) - 48); //#23220
    } //#23221
    var _M2 = new Map([
        ["ren", 'renmatrix'],
        ["pixs", $_.pixs],
        ["pixx", $_.size],
        ["pixy", $_.size],
        ["height", ($_.size * 2) / 72],
        ["width", ($_.size * 2) / 72],
        ["opt", $_.options]
    ]); //#23231
    $k[$j++] = _M2; //#23234
    if (!$_.dontdraw) { //#23234
        bwipp_renmatrix(); //#23234
    } //#23234
    $_ = Object.getPrototypeOf($_); //#23236
    $_ = Object.getPrototypeOf($_); //#23238
} //bwipp_azteccode
function bwipp_azteccodecompact() {
    $_ = Object.create($_); //#23267
    $_.dontdraw = false; //#23270
    $k[$j++] = $_; //#23272
    bwipp_processoptions(); //#23272
    $_.options = $k[--$j]; //#23272
    $_.barcode = $k[--$j]; //#23273
    $put($_.options, "dontdraw", true); //#23276
    $put($_.options, "format", "compact"); //#23277
    $k[$j++] = 'args'; //#23279
    $k[$j++] = $_.barcode; //#23279
    $k[$j++] = $_.options; //#23279
    bwipp_azteccode(); //#23279
    var _6 = $k[--$j]; //#23279
    $_[$k[--$j]] = _6; //#23279
    $put($_.args, "opt", $_.options); //#23281
    $k[$j++] = $_.args; //#23284
    if (!$_.dontdraw) { //#23284
        bwipp_renmatrix(); //#23284
    } //#23284
    $_ = Object.getPrototypeOf($_); //#23286
} //bwipp_azteccodecompact
function bwipp_aztecrune() {
    $_ = Object.create($_); //#23315
    $_.dontdraw = false; //#23318
    $k[$j++] = $_; //#23320
    bwipp_processoptions(); //#23320
    $_.options = $k[--$j]; //#23320
    $_.barcode = $k[--$j]; //#23321
    $put($_.options, "dontdraw", true); //#23324
    $put($_.options, "format", "rune"); //#23325
    $k[$j++] = 'args'; //#23327
    $k[$j++] = $_.barcode; //#23327
    $k[$j++] = $_.options; //#23327
    bwipp_azteccode(); //#23327
    var _6 = $k[--$j]; //#23327
    $_[$k[--$j]] = _6; //#23327
    $put($_.args, "opt", $_.options); //#23329
    $k[$j++] = $_.args; //#23332
    if (!$_.dontdraw) { //#23332
        bwipp_renmatrix(); //#23332
    } //#23332
    $_ = Object.getPrototypeOf($_); //#23334
} //bwipp_aztecrune
function bwipp_codeone() {
    $_ = Object.create($_); //#23365
    $_.dontdraw = false; //#23368
    $_.version = "unset"; //#23369
    $_.parse = false; //#23370
    $_.parsefnc = false; //#23371
    $k[$j++] = $_; //#23373
    bwipp_processoptions(); //#23373
    $_.options = $k[--$j]; //#23373
    $_.barcode = $k[--$j]; //#23374
    var _2 = $a(["unset", "T-16", "T-32", "T-48", "S-10", "S-20", "S-30", "A", "B", "C", "D", "E", "F", "G", "H"]); //#23376
    $k[$j++] = false; //#23377
    for (var _3 = 0, _4 = _2.length; _3 < _4; _3++) { //#23377
        var _7 = $k[--$j]; //#23377
        $k[$j++] = _7 || $eq($get(_2, _3), $_.version); //#23377
    } //#23377
    if ($nt($k[--$j])) { //#23379
        $k[$j++] = 'bwipp.codeoneBadVersion#23378'; //#23378
        $k[$j++] = "version must be A to H, T-16, T-32, T-48, S-10, S-20 or S-30"; //#23378
        bwipp_raiseerror(); //#23378
    } //#23378
    bwipp_loadctx(bwipp_codeone); //#23381
    $_.stype = $eq($geti($_.version, 0, 1), "S"); //#23383
    $_.ttype = $eq($geti($_.version, 0, 1), "T"); //#23384
    if (!bwipp_codeone.__23542__) { //#23542
        $_ = Object.create($_); //#23542
        $_.stypevals = $a(["1", "1010", "1100100", "1111101000", "10011100010000", "11000011010100000", "11110100001001000000", "100110001001011010000000", "101111101011110000100000000", "111011100110101100101000000000", "1001010100000010111110010000000000", "1011101001000011101101110100000000000", "1110100011010100101001010001000000000000", "10010001100001001110011100101010000000000000", "10110101111001100010000011110100100000000000000", "11100011010111111010100100110001101000000000000000", "100011100001101111001001101111110000010000000000000000", "101100011010001010111100001011101100010100000000000000000"]); //#23406
        $_.stypemetrics = $a([$a(["S-10", 8, 11, 10, 4, 4, 1, 99, 99, 99]), $a(["S-20", 8, 21, 20, 8, 8, 1, 99, 99, 99]), $a(["S-30", 8, 31, 30, 12, 12, 1, 99, 99, 99])]); //#23414
        $_.nonstypemetrics = $a([$a(["A", 16, 18, 16, 10, 10, 1, 4, 99, 6]), $a(["B", 22, 22, 20, 19, 16, 1, 4, 99, 8]), $a(["C", 28, 32, 28, 44, 26, 1, 4, 22, 11]), $a(["D", 40, 42, 36, 91, 44, 1, 4, 16, 16]), $a(["E", 52, 54, 48, 182, 70, 1, 4, 22, 22]), $a(["F", 70, 76, 68, 370, 140, 2, 4, 22, 31]), $a(["G", 104, 98, 88, 732, 280, 4, 6, 21, 47]), $a(["H", 148, 134, 120, 1480, 560, 8, 6, 20, 69]), $a(["T-16", 16, 17, 16, 10, 10, 1, 99, 99, 99]), $a(["T-32", 16, 33, 32, 24, 16, 1, 99, 99, 99]), $a(["T-48", 16, 49, 48, 38, 22, 1, 99, 99, 99])]); //#23430
        $_.fnc1 = -1; //#23433
        $_.fnc3 = -2; //#23433
        $_.lC = -5; //#23434
        $_.lB = -6; //#23434
        $_.lX = -7; //#23434
        $_.lT = -8; //#23434
        $_.lD = -9; //#23434
        $_.unl = -10; //#23434
        $_.fnc2 = -11; //#23435
        $_.fnc4 = -12; //#23435
        $_.sft1 = -13; //#23435
        $_.sft2 = -14; //#23435
        $_.sft3 = -15; //#23435
        $_.eci = -16; //#23435
        $_.pad = -17; //#23435
        $_.fnc1lD = -18; //#23435
        $_.unlcw = 255; //#23436
        $k[$j++] = Infinity; //#23438
        for (var _U = 0; _U <= 128; _U += 1) { //#23439
            $k[$j++] = _U; //#23439
            $k[$j++] = _U + 1; //#23439
        } //#23439
        $k[$j++] = $_.pad; //#23444
        $k[$j++] = 129; //#23444
        for (var _W = 0; _W <= 99; _W += 1) { //#23444
            var _Y = $cvrs($s(2), _W, 10); //#23442
            var _a = $strcpy($s(2), "00"); //#23442
            $puti(_a, 2 - _Y.length, _Y); //#23442
            $k[$j++] = _a; //#23443
            $k[$j++] = _W + 130; //#23443
        } //#23443
        var _i = $a([$_.lC, $_.lB, $_.fnc1, $_.fnc2, $_.fnc3, $_.fnc4, $_.fnc1lD]); //#23445
        $k[$j++] = 229; //#23445
        for (var _j = 0, _k = _i.length; _j < _k; _j++) { //#23445
            var _n = $f($k[--$j] + 1); //#23445
            $k[$j++] = $get(_i, _j); //#23445
            $k[$j++] = _n; //#23445
            $k[$j++] = _n; //#23445
        } //#23445
        $j--; //#23445
        $k[$j++] = $_.lX; //#23447
        $k[$j++] = 238; //#23447
        $k[$j++] = $_.lT; //#23447
        $k[$j++] = 239; //#23447
        $_.Avals = $d(); //#23449
        $k[$j++] = Infinity; //#23450
        var _r = $_.Avals; //#23451
        for (var _w = _r.size, _v = _r.keys(), _u = 0; _u < _w; _u++) { //#23451
            var _s = _v.next().value; //#23451
            $k[$j++] = _s; //#23451
            $k[$j++] = _r.get(_s); //#23451
            $k[$j++] = Infinity; //#23451
            var _x = $k[--$j]; //#23451
            var _y = $k[--$j]; //#23451
            $k[$j++] = _x; //#23451
            $k[$j++] = _y; //#23451
            var _z = $a(); //#23451
            $k[$j++] = _z; //#23451
        } //#23451
        $_.Avals = $d(); //#23452
        $k[$j++] = Infinity; //#23454
        $k[$j++] = $_.sft1; //#23459
        $k[$j++] = 0; //#23459
        $k[$j++] = $_.sft2; //#23459
        $k[$j++] = 1; //#23459
        $k[$j++] = $_.sft3; //#23459
        $k[$j++] = 2; //#23459
        $k[$j++] = 32; //#23459
        $k[$j++] = 3; //#23459
        for (var _14 = 48; _14 <= 57; _14 += 1) { //#23459
            $k[$j++] = _14; //#23459
            $k[$j++] = _14 - 44; //#23459
        } //#23459
        for (var _15 = 65; _15 <= 90; _15 += 1) { //#23460
            $k[$j++] = _15; //#23460
            $k[$j++] = _15 - 51; //#23460
        } //#23460
        $_.CNvals = $d(); //#23461
        $k[$j++] = Infinity; //#23462
        for (var _17 = 0; _17 <= 31; _17 += 1) { //#23462
            $k[$j++] = _17; //#23462
            $k[$j++] = _17; //#23462
        } //#23462
        $_.C1vals = $d(); //#23462
        $k[$j++] = Infinity; //#23463
        for (var _19 = 33; _19 <= 47; _19 += 1) { //#23464
            $k[$j++] = _19; //#23464
            $k[$j++] = _19 - 33; //#23464
        } //#23464
        for (var _1A = 58; _1A <= 64; _1A += 1) { //#23465
            $k[$j++] = _1A; //#23465
            $k[$j++] = _1A - 43; //#23465
        } //#23465
        for (var _1B = 91; _1B <= 95; _1B += 1) { //#23466
            $k[$j++] = _1B; //#23466
            $k[$j++] = _1B - 69; //#23466
        } //#23466
        $k[$j++] = $_.fnc1; //#23471
        $k[$j++] = 27; //#23471
        $k[$j++] = $_.fnc2; //#23471
        $k[$j++] = 28; //#23471
        $k[$j++] = $_.fnc3; //#23471
        $k[$j++] = 29; //#23471
        $k[$j++] = $_.fnc4; //#23471
        $k[$j++] = 30; //#23471
        $k[$j++] = $_.pad; //#23471
        $k[$j++] = 31; //#23471
        $_.C2vals = $d(); //#23472
        $k[$j++] = Infinity; //#23473
        for (var _1I = 96; _1I <= 127; _1I += 1) { //#23473
            $k[$j++] = _1I; //#23473
            $k[$j++] = _1I - 96; //#23473
        } //#23473
        $_.C3vals = $d(); //#23473
        $k[$j++] = Infinity; //#23474
        var _1K = $_.CNvals; //#23475
        for (var _1P = _1K.size, _1O = _1K.keys(), _1N = 0; _1N < _1P; _1N++) { //#23475
            var _1L = _1O.next().value; //#23475
            $k[$j++] = _1L; //#23475
            $k[$j++] = _1K.get(_1L); //#23475
            $k[$j++] = Infinity; //#23475
            var _1Q = $k[--$j]; //#23475
            var _1R = $k[--$j]; //#23475
            $k[$j++] = _1Q; //#23475
            $k[$j++] = _1R; //#23475
            var _1S = $a(); //#23475
            $k[$j++] = _1S; //#23475
        } //#23475
        var _1T = $_.C1vals; //#23476
        for (var _1Y = _1T.size, _1X = _1T.keys(), _1W = 0; _1W < _1Y; _1W++) { //#23476
            var _1U = _1X.next().value; //#23476
            $k[$j++] = _1U; //#23476
            $k[$j++] = _1T.get(_1U); //#23476
            $k[$j++] = Infinity; //#23476
            var _1Z = $k[--$j]; //#23476
            var _1a = $k[--$j]; //#23476
            $k[$j++] = _1Z; //#23476
            $k[$j++] = $get($_.CNvals, $_.sft1); //#23476
            $k[$j++] = _1a; //#23476
            var _1e = $a(); //#23476
            $k[$j++] = _1e; //#23476
        } //#23476
        var _1f = $_.C2vals; //#23477
        for (var _1k = _1f.size, _1j = _1f.keys(), _1i = 0; _1i < _1k; _1i++) { //#23477
            var _1g = _1j.next().value; //#23477
            $k[$j++] = _1g; //#23477
            $k[$j++] = _1f.get(_1g); //#23477
            $k[$j++] = Infinity; //#23477
            var _1l = $k[--$j]; //#23477
            var _1m = $k[--$j]; //#23477
            $k[$j++] = _1l; //#23477
            $k[$j++] = $get($_.CNvals, $_.sft2); //#23477
            $k[$j++] = _1m; //#23477
            var _1q = $a(); //#23477
            $k[$j++] = _1q; //#23477
        } //#23477
        var _1r = $_.C3vals; //#23478
        for (var _1w = _1r.size, _1v = _1r.keys(), _1u = 0; _1u < _1w; _1u++) { //#23478
            var _1s = _1v.next().value; //#23478
            $k[$j++] = _1s; //#23478
            $k[$j++] = _1r.get(_1s); //#23478
            $k[$j++] = Infinity; //#23478
            var _1x = $k[--$j]; //#23478
            var _1y = $k[--$j]; //#23478
            $k[$j++] = _1x; //#23478
            $k[$j++] = $get($_.CNvals, $_.sft3); //#23478
            $k[$j++] = _1y; //#23478
            var _22 = $a(); //#23478
            $k[$j++] = _22; //#23478
        } //#23478
        $_.Cvals = $d(); //#23479
        $k[$j++] = Infinity; //#23481
        $k[$j++] = $_.sft1; //#23486
        $k[$j++] = 0; //#23486
        $k[$j++] = $_.sft2; //#23486
        $k[$j++] = 1; //#23486
        $k[$j++] = $_.sft3; //#23486
        $k[$j++] = 2; //#23486
        $k[$j++] = 32; //#23486
        $k[$j++] = 3; //#23486
        for (var _27 = 48; _27 <= 57; _27 += 1) { //#23486
            $k[$j++] = _27; //#23486
            $k[$j++] = _27 - 44; //#23486
        } //#23486
        for (var _28 = 97; _28 <= 122; _28 += 1) { //#23487
            $k[$j++] = _28; //#23487
            $k[$j++] = _28 - 83; //#23487
        } //#23487
        $_.TNvals = $d(); //#23488
        $k[$j++] = Infinity; //#23489
        for (var _2A = 0; _2A <= 31; _2A += 1) { //#23489
            $k[$j++] = _2A; //#23489
            $k[$j++] = _2A; //#23489
        } //#23489
        $_.T1vals = $d(); //#23489
        $k[$j++] = Infinity; //#23490
        for (var _2C = 33; _2C <= 47; _2C += 1) { //#23491
            $k[$j++] = _2C; //#23491
            $k[$j++] = _2C - 33; //#23491
        } //#23491
        for (var _2D = 58; _2D <= 64; _2D += 1) { //#23492
            $k[$j++] = _2D; //#23492
            $k[$j++] = _2D - 43; //#23492
        } //#23492
        for (var _2E = 91; _2E <= 95; _2E += 1) { //#23493
            $k[$j++] = _2E; //#23493
            $k[$j++] = _2E - 69; //#23493
        } //#23493
        $k[$j++] = $_.fnc1; //#23498
        $k[$j++] = 27; //#23498
        $k[$j++] = $_.fnc2; //#23498
        $k[$j++] = 28; //#23498
        $k[$j++] = $_.fnc3; //#23498
        $k[$j++] = 29; //#23498
        $k[$j++] = $_.fnc4; //#23498
        $k[$j++] = 30; //#23498
        $k[$j++] = $_.pad; //#23498
        $k[$j++] = 31; //#23498
        $_.T2vals = $d(); //#23499
        $k[$j++] = Infinity; //#23500
        $k[$j++] = 96; //#23502
        $k[$j++] = 0; //#23502
        for (var _2L = 65; _2L <= 90; _2L += 1) { //#23502
            $k[$j++] = _2L; //#23502
            $k[$j++] = _2L - 64; //#23502
        } //#23502
        for (var _2M = 123; _2M <= 127; _2M += 1) { //#23503
            $k[$j++] = _2M; //#23503
            $k[$j++] = _2M - 96; //#23503
        } //#23503
        $_.T3vals = $d(); //#23504
        $k[$j++] = Infinity; //#23505
        var _2O = $_.TNvals; //#23506
        for (var _2T = _2O.size, _2S = _2O.keys(), _2R = 0; _2R < _2T; _2R++) { //#23506
            var _2P = _2S.next().value; //#23506
            $k[$j++] = _2P; //#23506
            $k[$j++] = _2O.get(_2P); //#23506
            $k[$j++] = Infinity; //#23506
            var _2U = $k[--$j]; //#23506
            var _2V = $k[--$j]; //#23506
            $k[$j++] = _2U; //#23506
            $k[$j++] = _2V; //#23506
            var _2W = $a(); //#23506
            $k[$j++] = _2W; //#23506
        } //#23506
        var _2X = $_.T1vals; //#23507
        for (var _2c = _2X.size, _2b = _2X.keys(), _2a = 0; _2a < _2c; _2a++) { //#23507
            var _2Y = _2b.next().value; //#23507
            $k[$j++] = _2Y; //#23507
            $k[$j++] = _2X.get(_2Y); //#23507
            $k[$j++] = Infinity; //#23507
            var _2d = $k[--$j]; //#23507
            var _2e = $k[--$j]; //#23507
            $k[$j++] = _2d; //#23507
            $k[$j++] = $get($_.TNvals, $_.sft1); //#23507
            $k[$j++] = _2e; //#23507
            var _2i = $a(); //#23507
            $k[$j++] = _2i; //#23507
        } //#23507
        var _2j = $_.T2vals; //#23508
        for (var _2o = _2j.size, _2n = _2j.keys(), _2m = 0; _2m < _2o; _2m++) { //#23508
            var _2k = _2n.next().value; //#23508
            $k[$j++] = _2k; //#23508
            $k[$j++] = _2j.get(_2k); //#23508
            $k[$j++] = Infinity; //#23508
            var _2p = $k[--$j]; //#23508
            var _2q = $k[--$j]; //#23508
            $k[$j++] = _2p; //#23508
            $k[$j++] = $get($_.TNvals, $_.sft2); //#23508
            $k[$j++] = _2q; //#23508
            var _2u = $a(); //#23508
            $k[$j++] = _2u; //#23508
        } //#23508
        var _2v = $_.T3vals; //#23509
        for (var _30 = _2v.size, _2z = _2v.keys(), _2y = 0; _2y < _30; _2y++) { //#23509
            var _2w = _2z.next().value; //#23509
            $k[$j++] = _2w; //#23509
            $k[$j++] = _2v.get(_2w); //#23509
            $k[$j++] = Infinity; //#23509
            var _31 = $k[--$j]; //#23509
            var _32 = $k[--$j]; //#23509
            $k[$j++] = _31; //#23509
            $k[$j++] = $get($_.TNvals, $_.sft3); //#23509
            $k[$j++] = _32; //#23509
            var _36 = $a(); //#23509
            $k[$j++] = _36; //#23509
        } //#23509
        $_.Tvals = $d(); //#23510
        for (var _38 = 128; _38 <= 255; _38 += 1) { //#23518
            $_.i = _38; //#23514
            $k[$j++] = $_.Avals; //#23515
            $k[$j++] = $_.i; //#23515
            $k[$j++] = Infinity; //#23515
            $aload($get($_.Avals, $_.fnc4)); //#23515
            $aload($get($_.Avals, $_.i - 128)); //#23515
            var _3H = $a(); //#23515
            var _3I = $k[--$j]; //#23515
            $put($k[--$j], _3I, _3H); //#23515
            $k[$j++] = $_.Cvals; //#23516
            $k[$j++] = $_.i; //#23516
            $k[$j++] = Infinity; //#23516
            $aload($get($_.Cvals, $_.fnc4)); //#23516
            $aload($get($_.Cvals, $_.i - 128)); //#23516
            var _3S = $a(); //#23516
            var _3T = $k[--$j]; //#23516
            $put($k[--$j], _3T, _3S); //#23516
            $k[$j++] = $_.Tvals; //#23517
            $k[$j++] = $_.i; //#23517
            $k[$j++] = Infinity; //#23517
            $aload($get($_.Tvals, $_.fnc4)); //#23517
            $aload($get($_.Tvals, $_.i - 128)); //#23517
            var _3d = $a(); //#23517
            var _3e = $k[--$j]; //#23517
            $put($k[--$j], _3e, _3d); //#23517
        } //#23517
        $k[$j++] = Infinity; //#23520
        $k[$j++] = 13; //#23525
        $k[$j++] = 0; //#23525
        $k[$j++] = 42; //#23525
        $k[$j++] = 1; //#23525
        $k[$j++] = 62; //#23525
        $k[$j++] = 2; //#23525
        $k[$j++] = 32; //#23525
        $k[$j++] = 3; //#23525
        for (var _3g = 48; _3g <= 57; _3g += 1) { //#23525
            $k[$j++] = _3g; //#23525
            $k[$j++] = _3g - 44; //#23525
        } //#23525
        for (var _3h = 65; _3h <= 90; _3h += 1) { //#23526
            $k[$j++] = _3h; //#23526
            $k[$j++] = _3h - 51; //#23526
        } //#23526
        $_.Xvals = $d(); //#23527
        $k[$j++] = Infinity; //#23528
        var _3j = $_.Xvals; //#23529
        for (var _3o = _3j.size, _3n = _3j.keys(), _3m = 0; _3m < _3o; _3m++) { //#23529
            var _3k = _3n.next().value; //#23529
            $k[$j++] = _3k; //#23529
            $k[$j++] = _3j.get(_3k); //#23529
            $k[$j++] = Infinity; //#23529
            var _3p = $k[--$j]; //#23529
            var _3q = $k[--$j]; //#23529
            $k[$j++] = _3p; //#23529
            $k[$j++] = _3q; //#23529
            var _3r = $a(); //#23529
            $k[$j++] = _3r; //#23529
        } //#23529
        $_.Xvals = $d(); //#23530
        $k[$j++] = Infinity; //#23532
        for (var _3t = 0; _3t <= 255; _3t += 1) { //#23533
            $k[$j++] = _3t; //#23533
            $k[$j++] = _3t; //#23533
        } //#23533
        $_.Bvals = $d(); //#23534
        $k[$j++] = Infinity; //#23535
        var _3v = $_.Bvals; //#23536
        for (var _40 = _3v.size, _3z = _3v.keys(), _3y = 0; _3y < _40; _3y++) { //#23536
            var _3w = _3z.next().value; //#23536
            $k[$j++] = _3w; //#23536
            $k[$j++] = _3v.get(_3w); //#23536
            $k[$j++] = Infinity; //#23536
            var _41 = $k[--$j]; //#23536
            var _42 = $k[--$j]; //#23536
            $k[$j++] = _41; //#23536
            $k[$j++] = _42; //#23536
            var _43 = $a(); //#23536
            $k[$j++] = _43; //#23536
        } //#23536
        $_.Bvals = $d(); //#23537
        $_.encvals = $a([$_.Avals, $_.Cvals, $_.Tvals, $_.Xvals, -1, $_.Bvals]); //#23539
        $_.A = 0; //#23541
        $_.C = 1; //#23541
        $_.T = 2; //#23541
        $_.X = 3; //#23541
        $_.D = 4; //#23541
        $_.B = 5; //#23541
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_codeone.$ctx[id] = $_[id]); //#23541
        bwipp_codeone.__23542__ = 1; //#23541
        $_ = Object.getPrototypeOf($_); //#23541
    } //#23541
    if ($_.stype) { //#24040
        $forall($_.barcode, function() { //#23550
            var _4E = $k[--$j]; //#23547
            if ((_4E < 48) || (_4E > 57)) { //#23549
                $k[$j++] = 'bwipp.codeoneStypeNonDigit#23548'; //#23548
                $k[$j++] = "S-Type symbols can only contain digits"; //#23548
                bwipp_raiseerror(); //#23548
            } //#23548
        }); //#23548
        $_.barlen = $_.barcode.length; //#23552
        if ($_.barlen > 18) { //#23555
            $k[$j++] = 'bwipp.codeoneStypeTooLong#23554'; //#23554
            $k[$j++] = "Maximum length exceeded"; //#23554
            bwipp_raiseerror(); //#23554
        } //#23554
        $_.normalize = function() {
            $_.base = $k[--$j]; //#23558
            $_.num = $k[--$j]; //#23559
            for (var _4K = $_.num.length - 1; _4K >= 1; _4K -= 1) { //#23564
                $_.i = _4K; //#23561
                var _4L = $_.num; //#23562
                var _4M = $_.i; //#23562
                $put(_4L, _4M - 1, $f($get(_4L, _4M - 1) + (~~($get($_.num, $_.i) / $_.base)))); //#23562
                $put($_.num, $_.i, $get($_.num, $_.i) % $_.base); //#23563
            } //#23563
            for (;;) { //#23570
                if ($lt($get($_.num, 0), $_.base)) { //#23566
                    break; //#23566
                } //#23566
                $k[$j++] = Infinity; //#23567
                $k[$j++] = 0; //#23567
                $forall($_.num); //#23567
                $_.num = $a(); //#23567
                $put($_.num, 0, $f($get($_.num, 0) + (~~($get($_.num, 1) / $_.base)))); //#23568
                $put($_.num, 1, $get($_.num, 1) % $_.base); //#23569
            } //#23569
            $k[$j++] = Infinity; //#23572
            $_.i = true; //#23572
            var _4n = $_.num; //#23572
            for (var _4o = 0, _4p = _4n.length; _4o < _4p; _4o++) { //#23572
                var _4q = $get(_4n, _4o); //#23572
                $k[$j++] = _4q; //#23572
                if ((_4q == 0) && $_.i) { //#23572
                    $j--; //#23572
                } else { //#23572
                    $_.i = false; //#23572
                } //#23572
            } //#23572
            $_.num = $a(); //#23572
            if ($_.num.length == 0) { //#23573
                $_.num = $a([0]); //#23573
            } //#23573
            $k[$j++] = $_.num; //#23574
        }; //#23574
        $_.bigadd = function() {
            var _4w = $k[--$j]; //#23578
            var _4x = $k[--$j]; //#23578
            $_.offset = Math.abs(_4w.length - _4x.length); //#23579
            if (_4w.length < _4x.length) { //#23580
                var _ = _4w; //#23580
                _4w = _4x; //#23580
                _4x = _; //#23580
            } //#23580
            $_.a = _4w; //#23581
            $_.b = _4x; //#23581
            for (var _50 = 0, _4z = $_.b.length - 1; _50 <= _4z; _50 += 1) { //#23584
                var _51 = $_.a; //#23583
                var _52 = $_.offset; //#23583
                $put(_51, _50 + _52, $f($get(_51, _50 + _52) + $get($_.b, _50))); //#23583
            } //#23583
            $k[$j++] = $_.a; //#23585
        }; //#23585
        $_.barlen = $_.barcode.length; //#23588
        $_.v = $a([1]); //#23591
        for (var _5B = 0, _5A = $_.barlen - 1; _5B <= _5A; _5B += 1) { //#23596
            $_.i = _5B; //#23593
            $k[$j++] = Infinity; //#23594
            $forall($get($_.stypevals, $_.i), function() { //#23594
                var _5F = $k[--$j]; //#23594
                $k[$j++] = $f(_5F - 48) * $f($get($_.barcode, ($_.barlen - $_.i) - 1) - 48); //#23594
            }); //#23594
            var _5K = $a(); //#23594
            $k[$j++] = _5K; //#23595
            $k[$j++] = $_.v; //#23595
            $_.bigadd(); //#23595
            $_.v = $k[--$j]; //#23595
        } //#23595
        $k[$j++] = 'v'; //#23597
        $k[$j++] = $_.v; //#23597
        $k[$j++] = 2; //#23597
        $_.normalize(); //#23597
        var _5O = $k[--$j]; //#23597
        $_[$k[--$j]] = _5O; //#23597
        $k[$j++] = Infinity; //#23600
        for (var _5R = 0, _5S = (5 - ($_.v.length % 5)) % 5; _5R < _5S; _5R++) { //#23600
            $k[$j++] = 0; //#23600
        } //#23600
        $aload($_.v); //#23600
        $_.v = $a(); //#23600
        $_.cws = $a(~~($_.v.length / 5)); //#23601
        for (var _5Z = 0, _5Y = $_.cws.length - 1; _5Z <= _5Y; _5Z += 1) { //#23607
            $_.i = _5Z; //#23603
            var _5c = $geti($_.v, $_.i * 5, 5); //#23604
            $k[$j++] = 0; //#23605
            for (var _5d = 0, _5e = _5c.length; _5d < _5e; _5d++) { //#23605
                var _5g = $k[--$j]; //#23605
                $k[$j++] = $f(_5g + $get(_5c, _5d)) * 2; //#23605
            } //#23605
            $put($_.cws, $_.i, ~~($k[--$j] / 2)); //#23606
        } //#23606
        $_.metrics = $_.stypemetrics; //#23609
    } else { //#24040
        var _5p = new Map([
            ["parse", $_.parse],
            ["parsefnc", $_.parsefnc],
            ["eci", true],
            ["FNC1", $_.fnc1],
            ["FNC3", $_.fnc3]
        ]); //#23619
        $_.fncvals = _5p; //#23620
        $k[$j++] = 'msg'; //#23621
        $k[$j++] = $_.barcode; //#23621
        $k[$j++] = $_.fncvals; //#23621
        bwipp_parseinput(); //#23621
        var _5s = $k[--$j]; //#23621
        $_[$k[--$j]] = _5s; //#23621
        $_.msglen = $_.msg.length; //#23622
        $_.eciesc = 92; //#23625
        var _5v = $_.msg; //#23626
        $k[$j++] = 'numecis'; //#23626
        $k[$j++] = 0; //#23626
        for (var _5w = 0, _5x = _5v.length; _5w < _5x; _5w++) { //#23626
            if ($get(_5v, _5w) <= -1000000) { //#23626
                var _5z = $k[--$j]; //#23626
                $k[$j++] = $f(_5z + 1); //#23626
            } //#23626
        } //#23626
        var _60 = $k[--$j]; //#23626
        $_[$k[--$j]] = _60; //#23626
        if ($_.numecis > 0) { //#23653
            $_.msgtmp = $a($f(($f(($_.msg.length * 2) + ($_.numecis * 6))) + 2)); //#23628
            $put($_.msgtmp, 0, $_.pad); //#23629
            $put($_.msgtmp, 1, $_.eciesc); //#23630
            $_.j = 2; //#23631
            for (var _6C = 0, _6B = $_.msg.length - 1; _6C <= _6B; _6C += 1) { //#23650
                var _6E = $get($_.msg, _6C); //#23633
                $k[$j++] = _6E; //#23649
                if (_6E <= -1000000) { //#23647
                    var _6I = $geti($cvrs($s(7), -$k[--$j], 10), 1, 6); //#23635
                    for (var _6J = 0, _6K = _6I.length; _6J < _6K; _6J++) { //#23635
                        $k[$j++] = $get(_6I, _6J); //#23635
                    } //#23635
                    $astore($a(6)); //#23635
                    $puti($_.msgtmp, $_.j + 1, $k[--$j]); //#23636
                    $put($_.msgtmp, $_.j, $_.eciesc); //#23637
                    $_.j = $_.j + 7; //#23638
                } else { //#23647
                    var _6U = $k[--$j]; //#23640
                    $k[$j++] = _6U; //#23648
                    if (_6U != $_.eciesc) { //#23647
                        $put($_.msgtmp, $_.j, $k[--$j]); //#23641
                        $_.j = $_.j + 1; //#23642
                    } else { //#23647
                        $j--; //#23644
                        $put($_.msgtmp, $_.j, $_.eciesc); //#23645
                        $put($_.msgtmp, $_.j + 1, $_.eciesc); //#23646
                        $_.j = $_.j + 2; //#23647
                    } //#23647
                } //#23647
            } //#23647
            $_.msg = $geti($_.msgtmp, 0, $_.j); //#23651
            $_.msglen = $_.msg.length; //#23652
        } //#23652
        $_.metrics = $_.nonstypemetrics; //#23655
        $_.fullcws = $a([]); //#23658
        var _6n = $_.metrics; //#23659
        for (var _6o = 0, _6p = _6n.length; _6o < _6p; _6o++) { //#23670
            $_.m = $get(_6n, _6o); //#23660
            $_.vers = $get($_.m, 0); //#23661
            $_.dcws = $get($_.m, 4); //#23662
            $_.okay = true; //#23663
            if ($eq($_.version, "unset")) { //#23667
                if ($_.vers.length != 1) { //#23665
                    $_.okay = false; //#23665
                } //#23665
            } else { //#23667
                if ($ne($_.version, $_.vers)) { //#23667
                    $_.okay = false; //#23667
                } //#23667
            } //#23667
            if ($_.okay) { //#23669
                $k[$j++] = Infinity; //#23669
                $aload($_.fullcws); //#23669
                $k[$j++] = $_.dcws; //#23669
                $_.fullcws = $a(); //#23669
            } //#23669
        } //#23669
        $k[$j++] = Infinity; //#23671
        for (var _73 = 0, _74 = 1480; _73 < _74; _73++) { //#23671
            $k[$j++] = 10000; //#23671
        } //#23671
        $_.numremcws = $a(); //#23671
        var _76 = $_.fullcws; //#23672
        for (var _77 = 0, _78 = _76.length; _77 < _78; _77++) { //#23672
            $put($_.numremcws, $f($get(_76, _77) - 1), 1); //#23672
        } //#23672
        for (var _7B = 1478; _7B >= 0; _7B -= 1) { //#23678
            $_.i = _7B; //#23674
            if ($get($_.numremcws, $_.i) != 1) { //#23677
                $put($_.numremcws, $_.i, $f($get($_.numremcws, $_.i + 1) + 1)); //#23676
            } //#23676
        } //#23676
        $k[$j++] = Infinity; //#23680
        for (var _7L = 0, _7M = $_.msglen; _7L < _7M; _7L++) { //#23680
            $k[$j++] = 0; //#23680
        } //#23680
        $k[$j++] = 0; //#23680
        $_.numD = $a(); //#23680
        $k[$j++] = Infinity; //#23681
        for (var _7P = 0, _7Q = $_.msglen; _7P < _7Q; _7P++) { //#23681
            $k[$j++] = 0; //#23681
        } //#23681
        $k[$j++] = 9999; //#23681
        $_.nextXterm = $a(); //#23681
        $k[$j++] = Infinity; //#23682
        for (var _7T = 0, _7U = $_.msglen; _7T < _7U; _7T++) { //#23682
            $k[$j++] = 0; //#23682
        } //#23682
        $k[$j++] = 9999; //#23682
        $_.nextNonX = $a(); //#23682
        for (var _7X = $_.msglen - 1; _7X >= 0; _7X -= 1) { //#23699
            $_.i = _7X; //#23684
            $_.barchar = $get($_.msg, $_.i); //#23685
            if (($_.barchar >= 48) && ($_.barchar <= 57)) { //#23688
                $put($_.numD, $_.i, $f($get($_.numD, $_.i + 1) + 1)); //#23687
            } //#23687
            if ((($_.barchar == 13) || ($_.barchar == 42)) || ($_.barchar == 62)) { //#23692
                $put($_.nextXterm, $_.i, 0); //#23690
            } else { //#23692
                $put($_.nextXterm, $_.i, $f($get($_.nextXterm, $_.i + 1) + 1)); //#23692
            } //#23692
            var _7u = $get($_.Xvals, $_.barchar) !== undefined; //#23694
            if (!_7u) { //#23697
                $put($_.nextNonX, $_.i, 0); //#23695
            } else { //#23697
                $put($_.nextNonX, $_.i, $f($get($_.nextNonX, $_.i + 1) + 1)); //#23697
            } //#23697
        } //#23697
        $k[$j++] = Infinity; //#23700
        var _82 = $_.nextXterm; //#23700
        for (var _83 = 0, _84 = _82.length; _83 < _84; _83++) { //#23700
            var _85 = $get(_82, _83); //#23700
            $k[$j++] = _85; //#23700
            if (_85 > 10000) { //#23700
                $j--; //#23700
                $k[$j++] = 10000; //#23700
            } //#23700
        } //#23700
        $_.nextXterm = $a(); //#23700
        $k[$j++] = Infinity; //#23701
        var _87 = $_.nextNonX; //#23701
        for (var _88 = 0, _89 = _87.length; _88 < _89; _88++) { //#23701
            var _8A = $get(_87, _88); //#23701
            $k[$j++] = _8A; //#23701
            if (_8A > 10000) { //#23701
                $j--; //#23701
                $k[$j++] = 10000; //#23701
            } //#23701
        } //#23701
        $_.nextNonX = $a(); //#23701
        $_.isD = function() {
            $k[$j++] = ($_.char >= 48) && ($_.char <= 57); //#23703
        }; //#23703
        $_.isC = function() {
            var _8G = $get($_.CNvals, $_.char) !== undefined; //#23704
            $k[$j++] = _8G; //#23704
        }; //#23704
        $_.isT = function() {
            var _8J = $get($_.TNvals, $_.char) !== undefined; //#23705
            $k[$j++] = _8J; //#23705
        }; //#23705
        $_.isX = function() {
            var _8M = $get($_.Xvals, $_.char) !== undefined; //#23706
            $k[$j++] = _8M; //#23706
        }; //#23706
        $_.isEA = function() {
            $k[$j++] = $_.char > 127; //#23707
        }; //#23707
        $_.isFN = function() {
            $k[$j++] = $_.char < 0; //#23708
        }; //#23708
        $_.XtermFirst = function() {
            var _8P = $k[--$j]; //#23709
            $k[$j++] = $lt($get($_.nextXterm, _8P), $get($_.nextNonX, _8P)); //#23709
        }; //#23709
        $_.lookup = function() {
            $_.ac = 1; //#23712
            $_.cc = 2; //#23712
            $_.tc = 2; //#23712
            $_.xc = 2; //#23712
            $_.bc = 3; //#23712
            if ($_.mode == $_.A) { //#23713
                $_.ac = 0; //#23713
                $_.cc = 1; //#23713
                $_.tc = 1; //#23713
                $_.xc = 1; //#23713
                $_.bc = 2; //#23713
            } //#23713
            if ($_.mode == $_.C) { //#23714
                $_.cc = 0; //#23714
            } //#23714
            if ($_.mode == $_.T) { //#23715
                $_.tc = 0; //#23715
            } //#23715
            if ($_.mode == $_.X) { //#23716
                $_.xc = 0; //#23716
            } //#23716
            if ($_.mode == $_.B) { //#23717
                $_.bc = 0; //#23717
            } //#23717
            for (var _8e = 0, _8f = 1; _8e < _8f; _8e++) { //#23745
                $_.k = 0; //#23719
                for (;;) { //#23744
                    if (($_.i + $_.k) == $_.msglen) { //#23726
                        var _8n = $a([$_.ac, $_.cc, $_.tc, $_.xc]); //#23721
                        $k[$j++] = true; //#23721
                        for (var _8o = 0, _8p = _8n.length; _8o < _8p; _8o++) { //#23721
                            var _8s = $k[--$j]; //#23721
                            $k[$j++] = _8s && ($_.bc <= Math.ceil($get(_8n, _8o))); //#23721
                        } //#23721
                        if ($k[--$j]) { //#23721
                            $k[$j++] = $_.B; //#23721
                            break; //#23721
                        } //#23721
                        var _8z = $a([$_.cc, $_.tc, $_.xc, $_.bc]); //#23722
                        $k[$j++] = true; //#23722
                        for (var _90 = 0, _91 = _8z.length; _90 < _91; _90++) { //#23722
                            var _94 = $k[--$j]; //#23722
                            $k[$j++] = _94 && ($_.ac <= Math.ceil($get(_8z, _90))); //#23722
                        } //#23722
                        if ($k[--$j]) { //#23722
                            $k[$j++] = $_.A; //#23722
                            break; //#23722
                        } //#23722
                        var _99 = $a([$_.tc, $_.xc]); //#23723
                        $k[$j++] = true; //#23723
                        for (var _9A = 0, _9B = _99.length; _9A < _9B; _9A++) { //#23723
                            var _9E = $k[--$j]; //#23723
                            $k[$j++] = _9E && (Math.ceil($_.cc) <= Math.ceil($get(_99, _9A))); //#23723
                        } //#23723
                        if ($k[--$j]) { //#23723
                            $k[$j++] = $_.C; //#23723
                            break; //#23723
                        } //#23723
                        var _9I = $a([$_.xc]); //#23724
                        $k[$j++] = true; //#23724
                        for (var _9J = 0, _9K = _9I.length; _9J < _9K; _9J++) { //#23724
                            var _9N = $k[--$j]; //#23724
                            $k[$j++] = _9N && (Math.ceil($_.tc) <= Math.ceil($get(_9I, _9J))); //#23724
                        } //#23724
                        if ($k[--$j]) { //#23724
                            $k[$j++] = $_.T; //#23724
                            break; //#23724
                        } //#23724
                        $k[$j++] = $_.X; //#23725
                        break; //#23725
                    } //#23725
                    $_.char = $get($_.msg, $_.i + $_.k); //#23727
                    $k[$j++] = 'ac'; //#23728
                    $k[$j++] = $_.ac; //#23728
                    $_.isD(); //#23728
                    if ($k[--$j]) { //#23728
                        var _9X = $k[--$j]; //#23728
                        $k[$j++] = $f(_9X + (1 / 2)); //#23728
                    } else { //#23728
                        $_.isEA(); //#23728
                        if ($k[--$j]) { //#23728
                            var _9Z = $k[--$j]; //#23728
                            $k[$j++] = Math.ceil(_9Z) + 2; //#23728
                        } else { //#23728
                            var _9a = $k[--$j]; //#23728
                            $k[$j++] = Math.ceil(_9a) + 1; //#23728
                        } //#23728
                    } //#23728
                    var _9b = $k[--$j]; //#23728
                    $_[$k[--$j]] = _9b; //#23728
                    $k[$j++] = 'cc'; //#23729
                    $k[$j++] = $_.cc; //#23729
                    $_.isC(); //#23729
                    if ($k[--$j]) { //#23729
                        var _9f = $k[--$j]; //#23729
                        $k[$j++] = $f(_9f + 0.6666667); //#23729
                    } else { //#23729
                        $_.isEA(); //#23729
                        if ($k[--$j]) { //#23729
                            var _9h = $k[--$j]; //#23729
                            $k[$j++] = $f(_9h + 2.6666667); //#23729
                        } else { //#23729
                            var _9i = $k[--$j]; //#23729
                            $k[$j++] = $f(_9i + 1.3333334); //#23729
                        } //#23729
                    } //#23729
                    var _9j = $k[--$j]; //#23729
                    $_[$k[--$j]] = _9j; //#23729
                    $k[$j++] = 'tc'; //#23730
                    $k[$j++] = $_.tc; //#23730
                    $_.isT(); //#23730
                    if ($k[--$j]) { //#23730
                        var _9n = $k[--$j]; //#23730
                        $k[$j++] = $f(_9n + 0.6666667); //#23730
                    } else { //#23730
                        $_.isEA(); //#23730
                        if ($k[--$j]) { //#23730
                            var _9p = $k[--$j]; //#23730
                            $k[$j++] = $f(_9p + 2.6666667); //#23730
                        } else { //#23730
                            var _9q = $k[--$j]; //#23730
                            $k[$j++] = $f(_9q + 1.3333334); //#23730
                        } //#23730
                    } //#23730
                    var _9r = $k[--$j]; //#23730
                    $_[$k[--$j]] = _9r; //#23730
                    $k[$j++] = 'xc'; //#23731
                    $k[$j++] = $_.xc; //#23731
                    $_.isX(); //#23731
                    if ($k[--$j]) { //#23731
                        var _9v = $k[--$j]; //#23731
                        $k[$j++] = $f(_9v + 0.6666667); //#23731
                    } else { //#23731
                        $_.isEA(); //#23731
                        if ($k[--$j]) { //#23731
                            var _9x = $k[--$j]; //#23731
                            $k[$j++] = $f(_9x + 4.3333334); //#23731
                        } else { //#23731
                            var _9y = $k[--$j]; //#23731
                            $k[$j++] = $f(_9y + 3.3333334); //#23731
                        } //#23731
                    } //#23731
                    var _9z = $k[--$j]; //#23731
                    $_[$k[--$j]] = _9z; //#23731
                    $k[$j++] = 'bc'; //#23732
                    $k[$j++] = $_.bc; //#23732
                    $_.isFN(); //#23732
                    if ($k[--$j]) { //#23732
                        var _A3 = $k[--$j]; //#23732
                        $k[$j++] = $f(_A3 + 3); //#23732
                    } else { //#23732
                        var _A4 = $k[--$j]; //#23732
                        $k[$j++] = $f(_A4 + 1); //#23732
                    } //#23732
                    var _A5 = $k[--$j]; //#23732
                    $_[$k[--$j]] = _A5; //#23732
                    if ($_.k >= 3) { //#23742
                        var _AC = $a([$_.ac, $_.cc, $_.tc, $_.xc]); //#23734
                        $k[$j++] = true; //#23734
                        for (var _AD = 0, _AE = _AC.length; _AD < _AE; _AD++) { //#23734
                            var _AH = $k[--$j]; //#23734
                            $k[$j++] = _AH && (($_.bc + 1) <= Math.ceil($get(_AC, _AD))); //#23734
                        } //#23734
                        if ($k[--$j]) { //#23734
                            $k[$j++] = $_.B; //#23734
                            break; //#23734
                        } //#23734
                        var _AO = $a([$_.cc, $_.tc, $_.xc, $_.bc]); //#23735
                        $k[$j++] = true; //#23735
                        for (var _AP = 0, _AQ = _AO.length; _AP < _AQ; _AP++) { //#23735
                            var _AT = $k[--$j]; //#23735
                            $k[$j++] = _AT && (($_.ac + 1) <= Math.ceil($get(_AO, _AP))); //#23735
                        } //#23735
                        if ($k[--$j]) { //#23735
                            $k[$j++] = $_.A; //#23735
                            break; //#23735
                        } //#23735
                        var _Aa = $a([$_.ac, $_.cc, $_.xc, $_.bc]); //#23736
                        $k[$j++] = true; //#23736
                        for (var _Ab = 0, _Ac = _Aa.length; _Ab < _Ac; _Ab++) { //#23736
                            var _Af = $k[--$j]; //#23736
                            $k[$j++] = _Af && ((Math.ceil($_.tc) + 1) <= Math.ceil($get(_Aa, _Ab))); //#23736
                        } //#23736
                        if ($k[--$j]) { //#23736
                            $k[$j++] = $_.T; //#23736
                            break; //#23736
                        } //#23736
                        var _Ak = $a([$_.ac, $_.tc]); //#23737
                        $k[$j++] = true; //#23737
                        for (var _Al = 0, _Am = _Ak.length; _Al < _Am; _Al++) { //#23737
                            var _Ap = $k[--$j]; //#23737
                            $k[$j++] = _Ap && ((Math.ceil($_.cc) + 1) <= Math.ceil($get(_Ak, _Al))); //#23737
                        } //#23737
                        if ($k[--$j]) { //#23740
                            if (Math.ceil($_.cc) < Math.ceil($_.xc)) { //#23738
                                $k[$j++] = $_.C; //#23738
                                break; //#23738
                            } //#23738
                            if ($_.cc == $_.xc) { //#23739
                                $k[$j++] = ($_.i + $_.k) + 1; //#23739
                                $_.XtermFirst(); //#23739
                                if ($k[--$j]) { //#23739
                                    $k[$j++] = $_.X; //#23739
                                    break; //#23739
                                } else { //#23739
                                    $k[$j++] = $_.C; //#23739
                                    break; //#23739
                                } //#23739
                            } //#23739
                        } //#23739
                        var _B5 = $a([$_.ac, $_.cc, $_.tc, $_.bc]); //#23741
                        $k[$j++] = true; //#23741
                        for (var _B6 = 0, _B7 = _B5.length; _B6 < _B7; _B6++) { //#23741
                            var _BA = $k[--$j]; //#23741
                            $k[$j++] = _BA && ((Math.ceil($_.xc) + 1) <= Math.ceil($get(_B5, _B6))); //#23741
                        } //#23741
                        if ($k[--$j]) { //#23741
                            $k[$j++] = $_.X; //#23741
                            break; //#23741
                        } //#23741
                    } //#23741
                    $_.k = $_.k + 1; //#23743
                } //#23743
            } //#23743
        }; //#23743
        $_.addtocws = function() {
            var _BE = $k[--$j]; //#23749
            $k[$j++] = _BE; //#23751
            if ((_BE.length + $_.j) > 1480) { //#23751
                $j--; //#23750
                $k[$j++] = 'bwipp.codeoneTooLong#23750'; //#23750
                $k[$j++] = "Maximum length exceeded"; //#23750
                bwipp_raiseerror(); //#23750
            } //#23750
            var _BG = $k[--$j]; //#23752
            $puti($_.cws, $_.j, _BG); //#23752
            $_.j = _BG.length + $_.j; //#23753
        }; //#23753
        $_.tobin = function() {
            var _BL = $s($k[--$j]); //#23757
            $k[$j++] = _BL; //#23757
            for (var _BN = 0, _BM = _BL.length - 1; _BN <= _BM; _BN += 1) { //#23757
                var _BO = $k[--$j]; //#23757
                $put(_BO, _BN, 48); //#23757
                $k[$j++] = _BO; //#23757
            } //#23757
            var _BP = $k[--$j]; //#23758
            $k[$j++] = _BP; //#23758
            $k[$j++] = _BP; //#23758
            $r(3, -1); //#23758
            var _BQ = $k[--$j]; //#23758
            var _BR = $k[--$j]; //#23758
            var _BT = $cvrs($s(_BR.length), _BQ, 2); //#23758
            $puti(_BR, _BR.length - _BT.length, _BT); //#23758
            $k[$j++] = Infinity; //#23759
            var _BU = $k[--$j]; //#23759
            var _BV = $k[--$j]; //#23759
            $k[$j++] = _BU; //#23759
            $forall(_BV, function() { //#23759
                var _BW = $k[--$j]; //#23759
                $k[$j++] = $f(_BW - 48); //#23759
            }); //#23759
            var _BX = $a(); //#23759
            $k[$j++] = _BX; //#23759
        }; //#23759
        $_.encA = function() {
            for (var _BY = 0, _BZ = 1; _BY < _BZ; _BY++) { //#23804
                if ($get($_.numD, $_.i) >= 21) { //#23768
                    $_.Dbits = $a([1, 1, 1, 1]); //#23765
                    $_.mode = $_.D; //#23766
                    break; //#23767
                } //#23767
                var _Bh = $get($_.numD, $_.i); //#23769
                if ((_Bh >= 13) && ($f(_Bh + $_.i) == $_.msglen)) { //#23773
                    $_.Dbits = $a([1, 1, 1, 1]); //#23770
                    $_.mode = $_.D; //#23771
                    break; //#23772
                } //#23772
                if ($get($_.numD, $_.i) >= 2) { //#23778
                    var _Bp = $s(2); //#23775
                    $put(_Bp, 0, $get($_.msg, $_.i)); //#23775
                    $put(_Bp, 1, $get($_.msg, $_.i + 1)); //#23775
                    $k[$j++] = $get($_.Avals, _Bp); //#23775
                    $_.addtocws(); //#23775
                    $_.i = $_.i + 2; //#23776
                    break; //#23777
                } //#23777
                if ($get($_.msg, $_.i) == $_.fnc1) { //#23794
                    if ($get($_.numD, $_.i + 1) >= 15) { //#23786
                        $k[$j++] = $get($_.Avals, $_.fnc1lD); //#23781
                        $_.addtocws(); //#23781
                        $_.i = $_.i + 1; //#23782
                        $_.Dbits = $a([]); //#23783
                        $_.mode = $_.D; //#23784
                        break; //#23785
                    } //#23785
                    var _CE = $get($_.numD, $_.i + 1); //#23787
                    if ((_CE >= 7) && (($f($f(_CE + $_.i) + 1)) == $_.msglen)) { //#23793
                        $k[$j++] = $get($_.Avals, $_.fnc1lD); //#23788
                        $_.addtocws(); //#23788
                        $_.i = $_.i + 1; //#23789
                        $_.Dbits = $a([]); //#23790
                        $_.mode = $_.D; //#23791
                        break; //#23792
                    } //#23792
                } //#23792
                $k[$j++] = 'newmode'; //#23795
                $_.lookup(); //#23795
                var _CN = $k[--$j]; //#23795
                $_[$k[--$j]] = _CN; //#23795
                if ($_.newmode != $_.mode) { //#23800
                    $k[$j++] = $get($_.Avals, $get($a([-1, $_.lC, $_.lT, $_.lX, $_.lD, $_.lB]), $_.newmode)); //#23797
                    $_.addtocws(); //#23797
                    $_.mode = $_.newmode; //#23798
                    break; //#23799
                } //#23799
                $k[$j++] = $get($_.Avals, $get($_.msg, $_.i)); //#23801
                $_.addtocws(); //#23801
                $_.i = $_.i + 1; //#23802
                break; //#23803
            } //#23803
        }; //#23803
        $_.CTXvalstocws = function() {
            $_.in = $k[--$j]; //#23808
            $k[$j++] = Infinity; //#23809
            for (var _Cl = 0, _Ck = $_.in.length - 1; _Cl <= _Ck; _Cl += 3) { //#23813
                var _Cn = $geti($_.in, _Cl, 3); //#23811
                $k[$j++] = 0; //#23811
                for (var _Co = 0, _Cp = _Cn.length; _Co < _Cp; _Co++) { //#23811
                    var _Cr = $k[--$j]; //#23811
                    $k[$j++] = $f(_Cr + $get(_Cn, _Co)) * 40; //#23811
                } //#23811
                var _Ct = (~~($k[--$j] / 40)) + 1; //#23812
                $k[$j++] = ~~(_Ct / 256); //#23812
                $k[$j++] = _Ct % 256; //#23812
            } //#23812
            $astore($a($counttomark())); //#23814
            var _Cw = $k[--$j]; //#23814
            var _Cx = $k[--$j]; //#23814
            $k[$j++] = _Cw; //#23814
            $k[$j++] = _Cx; //#23814
            $j--; //#23814
        }; //#23814
        $_.encCTX = function() {
            $_.p = 0; //#23818
            $_.ctxvals = $a(2220); //#23819
            for (;;) { //#23916
                if ($_.i == $_.msglen) { //#23823
                    break; //#23823
                } //#23823
                if (($_.p % 3) == 0) { //#23911
                    if ($get($_.numD, $_.i) >= 12) { //#23830
                        $k[$j++] = $geti($_.ctxvals, 0, $_.p); //#23826
                        $_.CTXvalstocws(); //#23826
                        $_.addtocws(); //#23826
                        $k[$j++] = $a([$_.unlcw]); //#23827
                        $_.addtocws(); //#23827
                        $_.mode = $_.A; //#23828
                        break; //#23829
                    } //#23829
                    var _DD = $get($_.numD, $_.i); //#23831
                    if ((_DD >= 8) && ($f(_DD + $_.i) == $_.msglen)) { //#23836
                        $k[$j++] = $geti($_.ctxvals, 0, $_.p); //#23832
                        $_.CTXvalstocws(); //#23832
                        $_.addtocws(); //#23832
                        $k[$j++] = $a([$_.unlcw]); //#23833
                        $_.addtocws(); //#23833
                        $_.mode = $_.A; //#23834
                        break; //#23835
                    } //#23835
                    if ($_.mode == $_.X) { //#23858
                        var _DS = $get($_.Xvals, $get($_.msg, $_.i)) !== undefined; //#23838
                        if (!_DS) { //#23846
                            $k[$j++] = $geti($_.ctxvals, 0, $_.p); //#23839
                            $_.CTXvalstocws(); //#23839
                            $_.addtocws(); //#23839
                            if (($get($_.numremcws, $_.j) != 1) || ($get($_.msg, $_.i) > 127)) { //#23843
                                $k[$j++] = $a([$_.unlcw]); //#23842
                                $_.addtocws(); //#23842
                            } //#23842
                            $_.mode = $_.A; //#23844
                            break; //#23845
                        } //#23845
                        if (($_.i + 1) < $_.msglen) { //#23852
                            var _Dl = $get($_.Xvals, $get($_.msg, $_.i + 1)) !== undefined; //#23848
                            if (!_Dl) { //#23848
                                break; //#23848
                            } //#23848
                            if (($_.i + 2) < $_.msglen) { //#23851
                                var _Ds = $get($_.Xvals, $get($_.msg, $_.i + 2)) !== undefined; //#23850
                                if (!_Ds) { //#23850
                                    break; //#23850
                                } //#23850
                            } //#23850
                        } //#23850
                    } else { //#23858
                        $_.lookup(); //#23854
                        if ($k[--$j] != $_.mode) { //#23859
                            $k[$j++] = $geti($_.ctxvals, 0, $_.p); //#23855
                            $_.CTXvalstocws(); //#23855
                            $_.addtocws(); //#23855
                            $k[$j++] = $a([$_.unlcw]); //#23856
                            $_.addtocws(); //#23856
                            $_.mode = $_.A; //#23857
                            break; //#23858
                        } //#23858
                    } //#23858
                    if (($_.msglen - $_.i) <= 3) { //#23910
                        $_.remcws = $get($_.numremcws, $_.j + ((~~($_.p / 3)) * 2)); //#23862
                        $k[$j++] = Infinity; //#23863
                        var _EB = $geti($_.msg, $_.i, $_.msglen - $_.i); //#23864
                        for (var _EC = 0, _ED = _EB.length; _EC < _ED; _EC++) { //#23870
                            var _EE = $get(_EB, _EC); //#23870
                            var _EI = $get($get($_.encvals, $_.mode), _EE) !== undefined; //#23865
                            $k[$j++] = _EE; //#23869
                            if (_EI) { //#23868
                                $aload($get($get($_.encvals, $_.mode), $k[--$j])); //#23866
                            } else { //#23868
                                $j--; //#23868
                                $k[$j++] = -1; //#23868
                                $k[$j++] = -1; //#23868
                                $k[$j++] = -1; //#23868
                                $k[$j++] = -1; //#23868
                            } //#23868
                        } //#23868
                        $_.remvals = $a(); //#23868
                        if (($_.remcws == 2) && ($_.remvals.length == 3)) { //#23881
                            $k[$j++] = Infinity; //#23874
                            $aload($geti($_.ctxvals, 0, $_.p)); //#23875
                            $aload($_.remvals); //#23876
                            var _EV = $a(); //#23876
                            $k[$j++] = _EV; //#23877
                            $_.CTXvalstocws(); //#23877
                            $_.addtocws(); //#23877
                            $_.mode = $_.A; //#23878
                            $_.i = $_.msglen; //#23879
                            break; //#23880
                        } //#23880
                        if ((($_.remcws == 2) && ($_.remvals.length == 2)) && ($_.mode != $_.X)) { //#23892
                            $k[$j++] = Infinity; //#23884
                            $aload($geti($_.ctxvals, 0, $_.p)); //#23885
                            $aload($_.remvals); //#23886
                            $aload($get($get($_.encvals, $_.mode), $_.sft1)); //#23887
                            var _El = $a(); //#23887
                            $k[$j++] = _El; //#23888
                            $_.CTXvalstocws(); //#23888
                            $_.addtocws(); //#23888
                            $_.mode = $_.A; //#23889
                            $_.i = $_.msglen; //#23890
                            break; //#23891
                        } //#23891
                        if (($_.remcws == 2) && ($_.remvals.length == 1)) { //#23901
                            $k[$j++] = $geti($_.ctxvals, 0, $_.p); //#23895
                            $_.CTXvalstocws(); //#23895
                            $_.addtocws(); //#23895
                            $k[$j++] = $a([$_.unlcw]); //#23896
                            $_.addtocws(); //#23896
                            $k[$j++] = $get($_.Avals, $get($_.msg, $_.i)); //#23897
                            $_.addtocws(); //#23897
                            $_.mode = $_.A; //#23898
                            $_.i = $_.msglen; //#23899
                            break; //#23900
                        } //#23900
                        if (($_.remcws == 1) && ($_.remvals.length == 1)) { //#23909
                            $k[$j++] = $geti($_.ctxvals, 0, $_.p); //#23904
                            $_.CTXvalstocws(); //#23904
                            $_.addtocws(); //#23904
                            $k[$j++] = $get($_.Avals, $get($_.msg, $_.i)); //#23905
                            $_.addtocws(); //#23905
                            $_.mode = $_.A; //#23906
                            $_.i = $_.msglen; //#23907
                            break; //#23908
                        } //#23908
                    } //#23908
                } //#23908
                var _FK = $get($get($_.encvals, $_.mode), $get($_.msg, $_.i)); //#23912
                $puti($_.ctxvals, $_.p, _FK); //#23913
                $_.p = _FK.length + $_.p; //#23914
                $_.i = $_.i + 1; //#23915
            } //#23915
            if ($_.mode != $_.A) { //#23940
                for (;;) { //#23924
                    if (($_.p % 3) == 0) { //#23921
                        break; //#23921
                    } //#23921
                    $_.i = $_.i - 1; //#23922
                    $_.p = $_.p - $get($get($_.encvals, $_.mode), $get($_.msg, $_.i)).length; //#23923
                } //#23923
                $k[$j++] = Infinity; //#23925
                $aload($geti($_.ctxvals, 0, $_.p)); //#23926
                var _Fe = $a(); //#23926
                $k[$j++] = _Fe; //#23927
                $_.CTXvalstocws(); //#23927
                $_.addtocws(); //#23927
                $k[$j++] = $a([$_.unlcw]); //#23928
                $_.addtocws(); //#23928
                $_.mode = $_.A; //#23929
                if ($_.i != $_.msglen) { //#23939
                    if ($get($_.numD, $_.i) >= 2) { //#23937
                        var _Fn = $s(2); //#23933
                        $put(_Fn, 0, $get($_.msg, $_.i)); //#23933
                        $put(_Fn, 1, $get($_.msg, $_.i + 1)); //#23933
                        $k[$j++] = $get($_.Avals, _Fn); //#23933
                        $_.addtocws(); //#23933
                        $_.i = $_.i + 2; //#23934
                    } else { //#23937
                        $k[$j++] = $get($_.Avals, $get($_.msg, $_.i)); //#23936
                        $_.addtocws(); //#23936
                        $_.i = $_.i + 1; //#23937
                    } //#23937
                } //#23937
            } //#23937
        }; //#23937
        $_.encD = function() {
            for (;;) { //#24001
                if ($get($_.numD, $_.i) < 3) { //#23991
                    $_.Drem = (8 - ($_.Dbits.length % 8)) % 8; //#23950
                    $_.remcws = $get($_.numremcws, $_.j + (~~($_.Dbits.length / 8))); //#23951
                    if (((($f($get($_.numremcws, ($_.j + (~~($_.Dbits.length / 8))) - 1) - 1) == 0) && ($_.Drem == 0)) || (($_.remcws == 1) && ($_.Drem != 0))) && ($_.i == $_.msglen)) { //#23960
                        if (($_.Drem == 4) || ($_.Drem == 6)) { //#23957
                            $k[$j++] = Infinity; //#23957
                            $aload($_.Dbits); //#23957
                            $k[$j++] = 1; //#23957
                            $k[$j++] = 1; //#23957
                            $k[$j++] = 1; //#23957
                            $k[$j++] = 1; //#23957
                            $_.Dbits = $a(); //#23957
                        } //#23957
                        if (($_.Drem == 2) || ($_.Drem == 6)) { //#23958
                            $k[$j++] = Infinity; //#23958
                            $aload($_.Dbits); //#23958
                            $k[$j++] = 0; //#23958
                            $k[$j++] = 1; //#23958
                            $_.Dbits = $a(); //#23958
                        } //#23958
                        break; //#23959
                    } //#23959
                    if ((((($_.i == ($_.msglen - 1)) && ($get($_.numD, $_.i) == 1)) || (($_.i == ($_.msglen - 2)) && ($get($_.numD, $_.i) == 2))) && ($_.remcws == 1)) && ($_.Drem == 0)) { //#23965
                        break; //#23965
                    } //#23965
                    if (!(((($_.i == ($_.msglen - 1)) && ($get($_.numD, $_.i) == 1)) && ($_.remcws == 1)) && (($_.Drem == 4) || ($_.Drem == 6)))) { //#23972
                        $k[$j++] = Infinity; //#23970
                        $aload($_.Dbits); //#23970
                        $k[$j++] = 1; //#23970
                        $k[$j++] = 1; //#23970
                        $k[$j++] = 1; //#23970
                        $k[$j++] = 1; //#23970
                        $k[$j++] = 1; //#23970
                        $k[$j++] = 1; //#23970
                        $_.Dbits = $a(); //#23970
                        $_.Drem = (8 - ($_.Dbits.length % 8)) % 8; //#23971
                    } //#23971
                    if (($_.Drem == 4) || ($_.Drem == 6)) { //#23983
                        if ($get($_.numD, $_.i) >= 1) { //#23980
                            $k[$j++] = Infinity; //#23977
                            $aload($_.Dbits); //#23977
                            $k[$j++] = $f($f($get($_.msg, $_.i) - 48) + 1); //#23977
                            $k[$j++] = 4; //#23977
                            $_.tobin(); //#23977
                            $aload($k[--$j]); //#23977
                            $_.Dbits = $a(); //#23977
                            $_.i = $_.i + 1; //#23978
                        } else { //#23980
                            $k[$j++] = Infinity; //#23980
                            $aload($_.Dbits); //#23980
                            $k[$j++] = 1; //#23980
                            $k[$j++] = 1; //#23980
                            $k[$j++] = 1; //#23980
                            $k[$j++] = 1; //#23980
                            $_.Dbits = $a(); //#23980
                        } //#23980
                        $_.Drem = $_.Drem - 4; //#23982
                    } //#23982
                    if ($_.Drem == 2) { //#23987
                        $k[$j++] = Infinity; //#23985
                        $aload($_.Dbits); //#23985
                        $k[$j++] = 0; //#23985
                        $k[$j++] = 1; //#23985
                        $_.Dbits = $a(); //#23985
                        $_.Drem = 0; //#23986
                    } //#23986
                    break; //#23989
                } //#23989
                $k[$j++] = Infinity; //#23994
                $aload($_.Dbits); //#23995
                var _HA = $geti($_.msg, $_.i, 3); //#23996
                $k[$j++] = 0; //#23996
                for (var _HB = 0, _HC = _HA.length; _HB < _HC; _HB++) { //#23996
                    var _HE = $k[--$j]; //#23996
                    $k[$j++] = ($f(_HE + $f($get(_HA, _HB) - 48))) * 10; //#23996
                } //#23996
                var _HF = $k[--$j]; //#23996
                $k[$j++] = (~~(_HF / 10)) + 1; //#23997
                $k[$j++] = 10; //#23997
                $_.tobin(); //#23997
                $aload($k[--$j]); //#23997
                $_.Dbits = $a(); //#23997
                $_.i = $_.i + 3; //#23999
            } //#23999
            $k[$j++] = Infinity; //#24003
            for (var _HL = 0, _HK = $_.Dbits.length - 1; _HL <= _HK; _HL += 8) { //#24006
                var _HN = $geti($_.Dbits, _HL, 8); //#24005
                $k[$j++] = 0; //#24005
                for (var _HO = 0, _HP = _HN.length; _HO < _HP; _HO++) { //#24005
                    var _HR = $k[--$j]; //#24005
                    $k[$j++] = $f(_HR + $get(_HN, _HO)) * 2; //#24005
                } //#24005
                var _HS = $k[--$j]; //#24005
                $k[$j++] = ~~(_HS / 2); //#24005
            } //#24005
            $astore($a($counttomark())); //#24007
            var _HV = $k[--$j]; //#24007
            var _HW = $k[--$j]; //#24007
            $k[$j++] = _HV; //#24007
            $k[$j++] = _HW; //#24007
            $j--; //#24007
            $_.addtocws(); //#24007
            $_.mode = $_.A; //#24008
        }; //#24008
        $_.encB = function() {
            $_.p = 0; //#24013
            $_.bvals = $a(1480); //#24013
            for (;;) { //#24020
                if ($_.i == $_.msglen) { //#24014
                    break; //#24014
                } //#24014
                if ($get($_.msg, $_.i) < 0) { //#24015
                    break; //#24015
                } //#24015
                $_.lookup(); //#24016
                if ($k[--$j] != $_.mode) { //#24016
                    break; //#24016
                } //#24016
                $put($_.bvals, $_.p, $get($_.msg, $_.i)); //#24017
                $_.p = $_.p + 1; //#24018
                $_.i = $_.i + 1; //#24019
            } //#24019
            $_.remcws = $f($get($_.numremcws, $_.j + $_.p) - 1); //#24021
            $k[$j++] = Infinity; //#24022
            if (($_.remcws == 0) && ($_.i == $_.msglen)) { //#24026
                $k[$j++] = 0; //#24024
            } else { //#24026
                if ($_.p < 250) { //#24026
                    $k[$j++] = $_.p; //#24026
                } else { //#24026
                    $k[$j++] = (~~($_.p / 250)) + 249; //#24026
                    $k[$j++] = $_.p % 250; //#24026
                } //#24026
            } //#24026
            $aload($geti($_.bvals, 0, $_.p)); //#24028
            $_.bvals = $a(); //#24028
            $k[$j++] = $_.bvals; //#24030
            $_.addtocws(); //#24030
            $_.mode = $_.A; //#24031
        }; //#24031
        $_.cws = $a(1480); //#24035
        $_.mode = $_.A; //#24036
        $_.i = 0; //#24036
        $_.j = 0; //#24036
        for (;;) { //#24039
            if ($_.i >= $_.msglen) { //#24037
                break; //#24037
            } //#24037
            if ($_[$get($a(['encA', 'encCTX', 'encCTX', 'encCTX', 'encD', 'encB']), $_.mode)]() === true) {
                break;
            } //#24038
        } //#24038
        $_.cws = $geti($_.cws, 0, $_.j); //#24040
    } //#24040
    var _IF = $_.metrics; //#24045
    for (var _IG = 0, _IH = _IF.length; _IG < _IH; _IG++) { //#24063
        $_.m = $get(_IF, _IG); //#24046
        $_.vers = $get($_.m, 0); //#24047
        $_.rows = $get($_.m, 1); //#24048
        $_.cols = $get($_.m, 2); //#24049
        $_.dcol = $get($_.m, 3); //#24050
        $_.dcws = $get($_.m, 4); //#24051
        $_.rscw = $get($_.m, 5); //#24052
        $_.rsbl = $get($_.m, 6); //#24053
        $_.riso = $get($_.m, 7); //#24054
        $_.risi = $get($_.m, 8); //#24055
        $_.risl = $get($_.m, 9); //#24056
        $_.dcpb = ~~($_.dcws / $_.rsbl); //#24057
        $_.ecpb = ~~($_.rscw / $_.rsbl); //#24058
        $_.okay = true; //#24059
        if ($ne($_.version, "unset") && $ne($_.version, $_.vers)) { //#24060
            $_.okay = false; //#24060
        } //#24060
        if ($_.cws.length > $_.dcws) { //#24061
            $_.okay = false; //#24061
        } //#24061
        if ($_.okay) { //#24062
            break; //#24062
        } //#24062
    } //#24062
    if (!$_.okay) { //#24067
        $k[$j++] = 'bwipp.codeoneNoValidSymbol#24066'; //#24066
        $k[$j++] = "Maximum length exceeded"; //#24066
        bwipp_raiseerror(); //#24066
    } //#24066
    if (!$_.stype) { //#24073
        $k[$j++] = Infinity; //#24071
        $aload($_.cws); //#24071
        for (var _Is = 0, _It = $f($_.dcws - $_.cws.length); _Is < _It; _Is++) { //#24071
            $k[$j++] = 129; //#24071
        } //#24071
        $_.cws = $a(); //#24071
    } else { //#24073
        $k[$j++] = Infinity; //#24073
        for (var _Ix = 0, _Iy = $f($_.dcws - $_.cws.length); _Ix < _Iy; _Ix++) { //#24073
            $k[$j++] = 0; //#24073
        } //#24073
        $aload($_.cws); //#24073
        $_.cws = $a(); //#24073
    } //#24073
    var _J2 = $get($_.options, 'debugcws') !== undefined; //#24076
    if (_J2) { //#24076
        $k[$j++] = 'bwipp.debugcws#24076'; //#24076
        $k[$j++] = $_.cws; //#24076
        bwipp_raiseerror(); //#24076
    } //#24076
    $_.cwbs = $a($_.rsbl); //#24079
    $_.ecbs = $a($_.rsbl); //#24080
    for (var _JA = 0, _J9 = $f($_.rsbl - 1); _JA <= _J9; _JA += 1) { //#24089
        $_.i = _JA; //#24082
        $_.cwb = $a($_.dcpb); //#24083
        for (var _JF = 0, _JE = $_.dcpb - 1; _JF <= _JE; _JF += 1) { //#24087
            $_.j = _JF; //#24085
            $put($_.cwb, $_.j, $get($_.cws, $f(($_.j * $_.rsbl) + $_.i))); //#24086
        } //#24086
        $put($_.cwbs, $_.i, $_.cwb); //#24088
    } //#24088
    var _JR = $_.stype ? 32 : 256; //#24092
    $_.gf = _JR; //#24092
    $_['gf-1'] = $_.gf - 1; //#24093
    var _JU = $_.stype ? 37 : 301; //#24094
    $_.pm = _JU; //#24094
    $k[$j++] = Infinity; //#24095
    $k[$j++] = 1; //#24095
    for (var _JW = 0, _JX = $_["gf-1"]; _JW < _JX; _JW++) { //#24095
        var _JY = $k[--$j]; //#24095
        var _JZ = _JY * 2; //#24095
        $k[$j++] = _JY; //#24095
        $k[$j++] = _JZ; //#24095
        if (_JZ >= $_.gf) { //#24095
            var _Jc = $k[--$j]; //#24095
            $k[$j++] = _Jc ^ $_.pm; //#24095
        } //#24095
    } //#24095
    $_.rsalog = $a(); //#24095
    $_.rslog = $a($_.gf); //#24096
    for (var _Ji = 1, _Jh = $_["gf-1"]; _Ji <= _Jh; _Ji += 1) { //#24097
        $put($_.rslog, $get($_.rsalog, _Ji), _Ji); //#24097
    } //#24097
    $_.rsprod = function() {
        var _Jm = $k[--$j]; //#24099
        var _Jn = $k[--$j]; //#24099
        $k[$j++] = _Jn; //#24103
        $k[$j++] = _Jm; //#24103
        if ((_Jm != 0) && (_Jn != 0)) { //#24102
            var _Jq = $get($_.rslog, $k[--$j]); //#24100
            var _Jw = $get($_.rsalog, $f(_Jq + $get($_.rslog, $k[--$j])) % $_["gf-1"]); //#24100
            $k[$j++] = _Jw; //#24100
        } else { //#24102
            $j -= 2; //#24102
            $k[$j++] = 0; //#24102
        } //#24102
    }; //#24102
    $k[$j++] = Infinity; //#24107
    $k[$j++] = 1; //#24107
    for (var _Jy = 0, _Jz = $_.ecpb; _Jy < _Jz; _Jy++) { //#24107
        $k[$j++] = 0; //#24107
    } //#24107
    $_.coeffs = $a(); //#24107
    for (var _K3 = 0, _K2 = $_.ecpb - 1; _K3 <= _K2; _K3 += 1) { //#24116
        $_.i = _K3; //#24109
        $put($_.coeffs, $_.i + 1, $get($_.coeffs, $_.i)); //#24110
        for (var _KA = $_.i; _KA >= 1; _KA -= 1) { //#24114
            $_.j = _KA; //#24112
            $k[$j++] = $_.coeffs; //#24113
            $k[$j++] = $_.j; //#24113
            $k[$j++] = $get($_.coeffs, $_.j - 1); //#24113
            $k[$j++] = $get($_.coeffs, $_.j); //#24113
            $k[$j++] = $get($_.rsalog, $_.i); //#24113
            $_.rsprod(); //#24113
            var _KM = $k[--$j]; //#24113
            var _KN = $k[--$j]; //#24113
            var _KO = $k[--$j]; //#24113
            $put($k[--$j], _KO, $xo(_KN, _KM)); //#24113
        } //#24113
        $k[$j++] = $_.coeffs; //#24115
        $k[$j++] = 0; //#24115
        $k[$j++] = $get($_.coeffs, 0); //#24115
        $k[$j++] = $get($_.rsalog, $_.i); //#24115
        $_.rsprod(); //#24115
        var _KW = $k[--$j]; //#24115
        var _KX = $k[--$j]; //#24115
        $put($k[--$j], _KX, _KW); //#24115
    } //#24115
    $_.coeffs = $geti($_.coeffs, 0, $_.coeffs.length - 1); //#24117
    for (var _Ke = 0, _Kd = $_.cwbs.length - 1; _Ke <= _Kd; _Ke += 1) { //#24132
        $_.i = _Ke; //#24121
        $k[$j++] = Infinity; //#24122
        $aload($get($_.cwbs, $_.i)); //#24122
        for (var _Kj = 0, _Kk = $_.ecpb; _Kj < _Kk; _Kj++) { //#24122
            $k[$j++] = 0; //#24122
        } //#24122
        $_.rscws = $a(); //#24122
        for (var _Ko = 0, _Kn = $_.dcpb - 1; _Ko <= _Kn; _Ko += 1) { //#24130
            $_.m = _Ko; //#24124
            $_.k = $get($_.rscws, $_.m); //#24125
            for (var _Ku = 0, _Kt = $_.ecpb - 1; _Ku <= _Kt; _Ku += 1) { //#24129
                $_.j = _Ku; //#24127
                $k[$j++] = $_.rscws; //#24128
                $k[$j++] = ($_.m + $_.j) + 1; //#24128
                $k[$j++] = $get($_.coeffs, ($_.ecpb - $_.j) - 1); //#24128
                $k[$j++] = $_.k; //#24128
                $_.rsprod(); //#24128
                var _L7 = $k[--$j]; //#24128
                var _L8 = $k[--$j]; //#24128
                $put($k[--$j], _L8, $xo(_L7, $get($_.rscws, ($_.m + $_.j) + 1))); //#24128
            } //#24128
        } //#24128
        $put($_.ecbs, $_.i, $geti($_.rscws, $_.dcpb, $_.ecpb)); //#24131
    } //#24131
    $k[$j++] = Infinity; //#24135
    $aload($_.cws); //#24135
    for (var _LI = 0, _LJ = $_.rscw; _LI < _LJ; _LI++) { //#24135
        $k[$j++] = 0; //#24135
    } //#24135
    $_.cws = $a(); //#24135
    for (var _LN = 0, _LM = $f($_.rscw - 1); _LN <= _LM; _LN += 1) { //#24139
        $_.i = _LN; //#24137
        $put($_.cws, $f($_.dcws + $_.i), $get($get($_.ecbs, $_.i % $_.rsbl), ~~($_.i / $_.rsbl))); //#24138
    } //#24138
    var _Lb = $_.stype ? 5 : 8; //#24142
    $_.mmat = $a($f($_.dcws + $_.rscw) * _Lb); //#24142
    $_.r = 0; //#24143
    $_.c = 0; //#24143
    var _Le = $_.stype ? 2 : 1; //#24144
    for (var _Lh = 0, _Li = _Le, _Lg = $_.cws.length - 1; _Li < 0 ? _Lh >= _Lg : _Lh <= _Lg; _Lh += _Li) { //#24165
        $_.i = _Lh; //#24145
        if (!$_.stype) { //#24159
            var _Ll = $strcpy($s(8), "00000000"); //#24147
            var _Lq = $cvrs($s(8), $get($_.cws, $_.i), 2); //#24147
            $puti(_Ll, 8 - _Lq.length, _Lq); //#24148
            $k[$j++] = _Ll; //#24148
            $k[$j++] = Infinity; //#24148
            var _Lr = $k[--$j]; //#24148
            var _Ls = $k[--$j]; //#24148
            $k[$j++] = _Lr; //#24148
            $forall(_Ls, function() { //#24148
                var _Lt = $k[--$j]; //#24148
                $k[$j++] = $f(_Lt - 48); //#24148
            }); //#24148
            var _Lu = $a(); //#24148
            $_.top = $geti(_Lu, 0, 4); //#24149
            $_.bot = $geti(_Lu, 4, 4); //#24150
        } else { //#24159
            var _Ly = $strcpy($s(5), "00000"); //#24152
            var _M3 = $cvrs($s(5), $get($_.cws, $_.i), 2); //#24152
            $puti(_Ly, 5 - _M3.length, _M3); //#24153
            $k[$j++] = _Ly; //#24153
            $k[$j++] = Infinity; //#24153
            var _M4 = $k[--$j]; //#24153
            var _M5 = $k[--$j]; //#24153
            $k[$j++] = _M4; //#24153
            $forall(_M5, function() { //#24153
                var _M6 = $k[--$j]; //#24153
                $k[$j++] = $f(_M6 - 48); //#24153
            }); //#24153
            $_.c1 = $a(); //#24154
            var _M9 = $strcpy($s(5), "00000"); //#24155
            var _ME = $cvrs($s(5), $get($_.cws, $_.i + 1), 2); //#24155
            $puti(_M9, 5 - _ME.length, _ME); //#24156
            $k[$j++] = _M9; //#24156
            $k[$j++] = Infinity; //#24156
            var _MF = $k[--$j]; //#24156
            var _MG = $k[--$j]; //#24156
            $k[$j++] = _MF; //#24156
            $forall(_MG, function() { //#24156
                var _MH = $k[--$j]; //#24156
                $k[$j++] = $f(_MH - 48); //#24156
            }); //#24156
            $_.c2 = $a(); //#24157
            $k[$j++] = Infinity; //#24158
            $aload($geti($_.c1, 0, 3)); //#24158
            $aload($geti($_.c2, 0, 2)); //#24158
            $_.top = $a(); //#24158
            $k[$j++] = Infinity; //#24159
            $aload($geti($_.c1, 3, 2)); //#24159
            $aload($geti($_.c2, 2, 3)); //#24159
            $_.bot = $a(); //#24159
        } //#24159
        $puti($_.mmat, $f(($_.r * $_.dcol) + $_.c), $_.top); //#24161
        $puti($_.mmat, $f((($_.r + 1) * $_.dcol) + $_.c), $_.bot); //#24162
        $_.c = $_.c + $_.top.length; //#24163
        if ($_.c == $_.dcol) { //#24164
            $_.c = 0; //#24164
            $_.r = $_.r + 2; //#24164
        } //#24164
    } //#24164
    $_.mmv = function() {
        var _Mj = $k[--$j]; //#24168
        var _Mk = $k[--$j]; //#24168
        $k[$j++] = $f(_Mk + (_Mj * $_.cols)); //#24168
    }; //#24168
    $k[$j++] = Infinity; //#24169
    for (var _Mn = 0, _Mo = $_.rows * $_.cols; _Mn < _Mo; _Mn++) { //#24169
        $k[$j++] = -1; //#24169
    } //#24169
    $_.pixs = $a(); //#24169
    var _NK = $a([function() {
        for (var _Mr = 0, _Ms = $_.cols; _Mr < _Ms; _Mr++) { //#24173
            $k[$j++] = 0; //#24173
        } //#24173
    }, function() {
        for (var _Mu = 0, _Mv = $_.cols; _Mu < _Mv; _Mu++) { //#24174
            $k[$j++] = 1; //#24174
        } //#24174
    }, function() {
        $k[$j++] = 0; //#24175
        for (var _Mx = 0, _My = $f($_.cols - 2); _Mx < _My; _Mx++) { //#24175
            $k[$j++] = 1; //#24175
        } //#24175
        $k[$j++] = 0; //#24175
    }, function() {
        $k[$j++] = 0; //#24176
        $k[$j++] = 1; //#24176
        for (var _N0 = 0, _N1 = $f($_.cols - 4); _N0 < _N1; _N0++) { //#24176
            $k[$j++] = 0; //#24176
        } //#24176
        $k[$j++] = 1; //#24176
        $k[$j++] = 0; //#24176
    }, function() {
        for (var _N3 = 0, _N4 = ~~($f($_.cols - 1) / 2); _N3 < _N4; _N3++) { //#24177
            $k[$j++] = -1; //#24177
        } //#24177
        $k[$j++] = 1; //#24177
        for (var _N6 = 0, _N7 = ~~($f($_.cols - 1) / 2); _N6 < _N7; _N6++) { //#24177
            $k[$j++] = -1; //#24177
        } //#24177
    }, function() {
        for (var _N9 = 0, _NA = ~~($f($_.cols - 1) / 2); _N9 < _NA; _N9++) { //#24178
            $k[$j++] = -1; //#24178
        } //#24178
        $k[$j++] = 0; //#24178
        for (var _NC = 0, _ND = ~~($f($_.cols - 1) / 2); _NC < _ND; _NC++) { //#24178
            $k[$j++] = -1; //#24178
        } //#24178
    }, function() {
        $k[$j++] = 1; //#24179
        for (var _NF = 0, _NG = $f($_.cols - 2); _NF < _NG; _NF++) { //#24179
            $k[$j++] = 0; //#24179
        } //#24179
        $k[$j++] = 1; //#24179
    }, function() {
        $k[$j++] = 1; //#24180
        $k[$j++] = 0; //#24180
        for (var _NI = 0, _NJ = $f($_.cols - 4); _NI < _NJ; _NI++) { //#24180
            $k[$j++] = 1; //#24180
        } //#24180
        $k[$j++] = 0; //#24180
        $k[$j++] = 1; //#24180
    }]); //#24180
    $_.artifact = _NK; //#24181
    if (!bwipp_codeone.__24195__) { //#24195
        $_ = Object.create($_); //#24195
        var _NL = new Map([
            ["A", "121343"],
            ["B", "12134343"],
            ["C", "12121343"],
            ["D", "1213434343"],
            ["E", "1212134343"],
            ["F", "1212121343"],
            ["G", "121213434343"],
            ["H", "121212134343"],
            ["S", "56661278"],
            ["T", "5666666666127878"]
        ]); //#24193
        $_.cpatmap = _NL; //#24194
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_codeone.$ctx[id] = $_[id]); //#24194
        bwipp_codeone.__24195__ = 1; //#24194
        $_ = Object.getPrototypeOf($_); //#24194
    } //#24194
    $_.cpat = $get($_.cpatmap, $geti($_.vers, 0, 1)); //#24196
    $k[$j++] = $_.pixs; //#24197
    $k[$j++] = 0; //#24197
    $k[$j++] = ~~($f($_.rows - $_.cpat.length) / 2); //#24197
    $_.mmv(); //#24197
    $k[$j++] = Infinity; //#24198
    $forall($_.cpat, function() { //#24198
        if ($get($_.artifact, $f($k[--$j] - 49))() === true) {
            return true;
        } //#24198
    }); //#24198
    var _NY = $a(); //#24198
    var _NZ = $k[--$j]; //#24198
    $puti($k[--$j], _NZ, _NY); //#24198
    for (var _Nd = 0, _Nc = $f($_.risl - 1); _Nd <= _Nc; _Nd += 1) { //#24213
        $_.i = _Nd; //#24202
        for (var _Ni = $_.riso, _Nj = $_.risi, _Nh = $f($_.cols - 1); _Nj < 0 ? _Ni >= _Nh : _Ni <= _Nh; _Ni += _Nj) { //#24212
            $_.j = _Ni; //#24204
            var _Nl = (($_.i % 12) == 0) ? 1 : 0; //#24205
            var _Nm = $a([1, _Nl]); //#24205
            $k[$j++] = _Nm; //#24206
            $k[$j++] = _Nm; //#24206
            $k[$j++] = $_.pixs; //#24206
            $k[$j++] = $_.j; //#24206
            $k[$j++] = $_.i; //#24206
            $_.mmv(); //#24206
            $r(3, -1); //#24207
            var _Nq = $k[--$j]; //#24207
            var _Nr = $k[--$j]; //#24207
            $puti($k[--$j], _Nr, _Nq); //#24207
            if ($_.i != $f($_.risl - 1)) { //#24211
                $k[$j++] = $_.pixs; //#24209
                $k[$j++] = $f($f($_.cols - $_.j) - 2); //#24209
                $k[$j++] = $f($f($_.rows - $_.i) - 1); //#24209
                $_.mmv(); //#24209
                $r(3, -1); //#24210
                var _O0 = $k[--$j]; //#24210
                var _O1 = $k[--$j]; //#24210
                $puti($k[--$j], _O1, _O0); //#24210
            } else { //#24211
                $j--; //#24211
            } //#24211
        } //#24211
    } //#24211
    if (!bwipp_codeone.__24233__) { //#24233
        $_ = Object.create($_); //#24233
        var _Og = new Map([
            ["A", $a([$a([12, 5])])],
            ["B", $a([$a([16, 7])])],
            ["C", $a([$a([26, 12])])],
            ["D", $a([])],
            ["E", $a([$a([26, 23])])],
            ["F", $a([$a([26, 32]), $a([70, 32]), $a([26, 34]), $a([70, 34])])],
            ["G", $a([$a([27, 48]), $a([69, 48])])],
            ["H", $a([$a([26, 70]), $a([66, 70]), $a([106, 70]), $a([26, 72]), $a([66, 72]), $a([106, 72])])],
            ["S-10", $a([])],
            ["S-20", $a([$a([10, 4])])],
            ["S-30", $a([$a([15, 4]), $a([15, 6])])],
            ["T-16", $a([$a([8, 10])])],
            ["T-32", $a([$a([16, 10]), $a([16, 12])])],
            ["T-48", $a([$a([24, 10]), $a([24, 12]), $a([24, 14])])]
        ]); //#24231
        $_.blackdotmap = _Og; //#24232
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_codeone.$ctx[id] = $_[id]); //#24232
        bwipp_codeone.__24233__ = 1; //#24232
        $_ = Object.getPrototypeOf($_); //#24232
    } //#24232
    $forall($get($_.blackdotmap, $_.vers), function() { //#24234
        var _Om = $k[--$j]; //#24234
        $k[$j++] = $_.pixs; //#24234
        $aload(_Om); //#24234
        $_.mmv(); //#24234
        var _On = $k[--$j]; //#24234
        $put($k[--$j], _On, 1); //#24234
    }); //#24234
    $_.j = 0; //#24237
    for (var _Or = 0, _Oq = $_.pixs.length - 1; _Or <= _Oq; _Or += 1) { //#24244
        $_.i = _Or; //#24239
        if ($get($_.pixs, $_.i) == -1) { //#24243
            $put($_.pixs, $_.i, $get($_.mmat, $_.j)); //#24241
            $_.j = $_.j + 1; //#24242
        } //#24242
    } //#24242
    $k[$j++] = Infinity; //#24247
    $k[$j++] = 'ren'; //#24259
    $k[$j++] = 'renmatrix'; //#24259
    $k[$j++] = 'pixs'; //#24259
    $k[$j++] = $_.pixs; //#24259
    $k[$j++] = 'pixx'; //#24259
    $k[$j++] = $_.cols; //#24259
    $k[$j++] = 'pixy'; //#24259
    $k[$j++] = $_.rows; //#24259
    $k[$j++] = 'height'; //#24259
    $k[$j++] = ($_.rows / 72) * 2; //#24259
    $k[$j++] = 'width'; //#24259
    $k[$j++] = ($_.cols / 72) * 2; //#24259
    if ($_.stype || $_.ttype) { //#24259
        $k[$j++] = 'borderleft'; //#24258
        $k[$j++] = 1; //#24258
        $k[$j++] = 'borderright'; //#24258
        $k[$j++] = 1; //#24258
        $k[$j++] = 'bordertop'; //#24258
        $k[$j++] = 0; //#24258
        $k[$j++] = 'borderbottom'; //#24258
        $k[$j++] = 1; //#24258
    } //#24258
    $k[$j++] = 'opt'; //#24260
    $k[$j++] = $_.options; //#24260
    var _P9 = $d(); //#24260
    $k[$j++] = _P9; //#24263
    if (!$_.dontdraw) { //#24263
        bwipp_renmatrix(); //#24263
    } //#24263
    $_ = Object.getPrototypeOf($_); //#24265
    $_ = Object.getPrototypeOf($_); //#24267
} //bwipp_codeone
function bwipp_hanxin() {
    $_ = Object.create($_); //#24298
    $_.dontdraw = false; //#24301
    $_.version = "unset"; //#24302
    $_.eclevel = "L2"; //#24303
    $_.parse = false; //#24304
    $_.parsefnc = false; //#24305
    $_.mask = -1; //#24306
    $k[$j++] = $_; //#24308
    bwipp_processoptions(); //#24308
    $_.options = $k[--$j]; //#24308
    $_.barcode = $k[--$j]; //#24309
    if ($eq($_.barcode, "")) { //#24313
        $k[$j++] = 'bwipp.hanxinEmptyData#24312'; //#24312
        $k[$j++] = "The data must not be empty"; //#24312
        bwipp_raiseerror(); //#24312
    } //#24312
    if ($ne($_.version, "unset")) { //#24325
        var _5 = $_.version.length; //#24316
        var _6 = (_5 >= 1) && (_5 <= 2); //#24316
        $k[$j++] = _6; //#24321
        if (_6) { //#24321
            $j--; //#24317
            var _7 = $_.version; //#24318
            $k[$j++] = true; //#24318
            for (var _8 = 0, _9 = _7.length; _8 < _9; _8++) { //#24318
                var _A = $get(_7, _8); //#24318
                if ((_A < 48) || (_A > 57)) { //#24318
                    $j--; //#24318
                    $k[$j++] = false; //#24318
                } //#24318
            } //#24318
            var _B = $k[--$j]; //#24318
            $k[$j++] = _B; //#24320
            if (_B) { //#24320
                $j--; //#24319
                var _D = $cvi($_.version); //#24319
                $k[$j++] = (_D >= 1) && (_D <= 84); //#24319
            } //#24319
        } //#24319
        if ($nt($k[--$j])) { //#24324
            $k[$j++] = 'bwipp.hanxinInvalidVersion#24323'; //#24323
            $k[$j++] = "Valid versions are 1 to 84"; //#24323
            bwipp_raiseerror(); //#24323
        } //#24323
    } //#24323
    var _G = $_.eclevel.length == 2; //#24327
    $k[$j++] = _G; //#24331
    if (_G) { //#24331
        $j--; //#24328
        $k[$j++] = $geti($_.eclevel, 0, 1); //#24330
        if ($eq("L", "L")) { //#24330
            $j--; //#24329
            var _L = $get($_.eclevel, 1) - 48; //#24329
            $k[$j++] = (_L >= 1) && (_L <= 4); //#24329
        } //#24329
    } //#24329
    if ($nt($k[--$j])) { //#24334
        $k[$j++] = 'bwipp.hanxinInvalidErrorCorrectionLevel#24333'; //#24333
        $k[$j++] = "Valid error correction levels are L1 to L4"; //#24333
        bwipp_raiseerror(); //#24333
    } //#24333
    if ($_.mask != -1) { //#24340
        if (($_.mask < 1) || ($_.mask > 4)) { //#24339
            $k[$j++] = 'bwipp.hanxinInvalidErrorCorrectionLevel#24338'; //#24338
            $k[$j++] = "The valid masks are 1 to 4"; //#24338
            bwipp_raiseerror(); //#24338
        } //#24338
    } //#24338
    bwipp_loadctx(bwipp_hanxin); //#24342
    var _S = new Map([
        ["parse", $_.parse],
        ["parsefnc", $_.parsefnc]
    ]); //#24347
    $_.fncvals = _S; //#24349
    $k[$j++] = 'msg'; //#24350
    $k[$j++] = $_.barcode; //#24350
    $k[$j++] = $_.fncvals; //#24350
    bwipp_parseinput(); //#24350
    var _V = $k[--$j]; //#24350
    $_[$k[--$j]] = _V; //#24350
    $_.msglen = $_.msg.length; //#24351
    $_.tobin = function() {
        var _Z = $s($k[--$j]); //#24354
        $k[$j++] = _Z; //#24354
        for (var _b = 0, _a = _Z.length - 1; _b <= _a; _b += 1) { //#24354
            var _c = $k[--$j]; //#24354
            $put(_c, _b, 48); //#24354
            $k[$j++] = _c; //#24354
        } //#24354
        var _d = $k[--$j]; //#24355
        $k[$j++] = _d; //#24355
        $k[$j++] = _d; //#24355
        $r(3, -1); //#24355
        var _e = $k[--$j]; //#24355
        var _f = $k[--$j]; //#24355
        var _h = $cvrs($s(_f.length), _e, 2); //#24355
        $puti(_f, _f.length - _h.length, _h); //#24356
    }; //#24356
    $_.bits = $s((4 + 13) + ($_.msglen * 8)); //#24360
    $puti($_.bits, 0, "0011"); //#24361
    $k[$j++] = $_.bits; //#24362
    $k[$j++] = 4; //#24362
    $k[$j++] = $_.msglen; //#24362
    $k[$j++] = 13; //#24362
    $_.tobin(); //#24362
    var _n = $k[--$j]; //#24362
    var _o = $k[--$j]; //#24362
    $puti($k[--$j], _o, _n); //#24362
    for (var _s = 0, _r = $_.msglen - 1; _s <= _r; _s += 1) { //#24366
        $_.i = _s; //#24364
        $k[$j++] = $_.bits; //#24365
        $k[$j++] = 17 + ($_.i * 8); //#24365
        $k[$j++] = $get($_.msg, $_.i); //#24365
        $k[$j++] = 8; //#24365
        $_.tobin(); //#24365
        var _y = $k[--$j]; //#24365
        var _z = $k[--$j]; //#24365
        $puti($k[--$j], _z, _y); //#24365
    } //#24365
    if (!bwipp_hanxin.__24709__) { //#24709
        $_ = Object.create($_); //#24709
        var _24 = $a([1, 70, 14]); //#24392
        $_.metrics = $a([$a(["1", 23, -1, 0, 205, $a([1, 21, 4]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 17, 8]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 13, 12]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 9, 16]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["2", 25, -1, 0, 301, $a([1, 31, 6]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 25, 12]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 19, 18]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 15, 22]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["3", 27, -1, 0, 405, $a([1, 42, 8]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 34, 16]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 26, 24]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 20, 30]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["4", 29, 14, 1, 439, $a([1, 46, 8]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 38, 16]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 30, 24]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 22, 32]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["5", 31, 16, 1, 555, $a([1, 57, 12]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 49, 20]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 37, 32]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 14, 20]), $a([1, 13, 22]), $a([0, -1, -1])]), $a(["6", 33, 16, 1, 675, _24, $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 58, 26]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 24, 20]), $a([1, 22, 18]), $a([0, -1, -1]), $a([1, 16, 24]), $a([1, 18, 26]), $a([0, -1, -1])]), $a(["7", 35, 17, 1, 805, $a([1, 84, 16]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 70, 30]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 26, 22]), $a([1, 28, 24]), $a([0, -1, -1]), $a([2, 14, 20]), $a([1, 12, 20]), $a([0, -1, -1])]), $a(["8", 37, 18, 1, 943, $a([1, 99, 18]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 40, 18]), $a([1, 41, 18]), $a([0, -1, -1]), $a([1, 31, 26]), $a([1, 32, 28]), $a([0, -1, -1]), $a([2, 16, 24]), $a([1, 15, 22]), $a([0, -1, -1])]), $a(["9", 39, 19, 1, 1089, $a([1, 114, 22]), $a([0, -1, -1]), $a([0, -1, -1]), $a([2, 48, 20]), $a([0, -1, -1]), $a([0, -1, -1]), $a([2, 24, 20]), $a([1, 26, 22]), $a([0, -1, -1]), $a([2, 18, 28]), $a([1, 18, 26]), $a([0, -1, -1])]), $a(["10", 41, 20, 1, 1243, $a([1, 131, 24]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 52, 22]), $a([1, 57, 24]), $a([0, -1, -1]), $a([2, 27, 24]), $a([1, 29, 24]), $a([0, -1, -1]), $a([2, 21, 32]), $a([1, 19, 30]), $a([0, -1, -1])]), $a(["11", 43, 14, 2, 1289, $a([1, 135, 26]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 56, 24]), $a([1, 57, 24]), $a([0, -1, -1]), $a([2, 28, 24]), $a([1, 31, 26]), $a([0, -1, -1]), $a([2, 22, 32]), $a([1, 21, 32]), $a([0, -1, -1])]), $a(["12", 45, 15, 2, 1455, $a([1, 153, 28]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 62, 26]), $a([1, 65, 28]), $a([0, -1, -1]), $a([2, 32, 28]), $a([1, 33, 28]), $a([0, -1, -1]), $a([3, 17, 26]), $a([1, 22, 30]), $a([0, -1, -1])]), $a(["13", 47, 16, 2, 1629, $a([1, 86, 16]), $a([1, 85, 16]), $a([0, -1, -1]), $a([1, 71, 30]), $a([1, 72, 30]), $a([0, -1, -1]), $a([2, 37, 32]), $a([1, 35, 30]), $a([0, -1, -1]), $a([3, 20, 30]), $a([1, 21, 32]), $a([0, -1, -1])]), $a(["14", 49, 16, 2, 1805, $a([1, 94, 18]), $a([1, 95, 18]), $a([0, -1, -1]), $a([2, 51, 22]), $a([1, 55, 24]), $a([0, -1, -1]), $a([3, 30, 26]), $a([1, 31, 26]), $a([0, -1, -1]), $a([4, 18, 28]), $a([1, 17, 24]), $a([0, -1, -1])]), $a(["15", 51, 17, 2, 1995, $a([1, 104, 20]), $a([1, 105, 20]), $a([0, -1, -1]), $a([2, 57, 24]), $a([1, 61, 26]), $a([0, -1, -1]), $a([3, 33, 28]), $a([1, 36, 30]), $a([0, -1, -1]), $a([4, 20, 30]), $a([1, 19, 30]), $a([0, -1, -1])]), $a(["16", 53, 17, 2, 2187, $a([1, 115, 22]), $a([1, 114, 22]), $a([0, -1, -1]), $a([2, 65, 28]), $a([1, 61, 26]), $a([0, -1, -1]), $a([3, 38, 32]), $a([1, 33, 30]), $a([0, -1, -1]), $a([5, 19, 28]), $a([1, 14, 24]), $a([0, -1, -1])]), $a(["17", 55, 18, 2, 2393, $a([1, 126, 24]), $a([1, 125, 24]), $a([0, -1, -1]), $a([2, 70, 30]), $a([1, 69, 30]), $a([0, -1, -1]), $a([4, 33, 28]), $a([1, 29, 26]), $a([0, -1, -1]), $a([5, 20, 30]), $a([1, 19, 30]), $a([0, -1, -1])]), $a(["18", 57, 19, 2, 2607, $a([1, 136, 26]), $a([1, 137, 26]), $a([0, -1, -1]), $a([3, 56, 24]), $a([1, 59, 26]), $a([0, -1, -1]), $a([5, 35, 30]), $a([0, -1, -1]), $a([0, -1, -1]), $a([6, 18, 28]), $a([1, 21, 28]), $a([0, -1, -1])]), $a(["19", 59, 20, 2, 2829, $a([1, 148, 28]), $a([1, 149, 28]), $a([0, -1, -1]), $a([3, 61, 26]), $a([1, 64, 28]), $a([0, -1, -1]), $a([7, 24, 20]), $a([1, 23, 22]), $a([0, -1, -1]), $a([6, 20, 30]), $a([1, 21, 32]), $a([0, -1, -1])]), $a(["20", 61, 20, 2, 3053, $a([3, 107, 20]), $a([0, -1, -1]), $a([0, -1, -1]), $a([3, 65, 28]), $a([1, 72, 30]), $a([0, -1, -1]), $a([7, 26, 22]), $a([1, 23, 22]), $a([0, -1, -1]), $a([7, 19, 28]), $a([1, 20, 32]), $a([0, -1, -1])]), $a(["21", 63, 21, 2, 3291, $a([3, 115, 22]), $a([0, -1, -1]), $a([0, -1, -1]), $a([4, 56, 24]), $a([1, 63, 28]), $a([0, -1, -1]), $a([7, 28, 24]), $a([1, 25, 22]), $a([0, -1, -1]), $a([8, 18, 28]), $a([1, 21, 22]), $a([0, -1, -1])]), $a(["22", 65, 16, 3, 3383, $a([2, 116, 22]), $a([1, 122, 24]), $a([0, -1, -1]), $a([4, 56, 24]), $a([1, 72, 30]), $a([0, -1, -1]), $a([7, 28, 24]), $a([1, 32, 26]), $a([0, -1, -1]), $a([8, 18, 28]), $a([1, 24, 30]), $a([0, -1, -1])]), $a(["23", 67, 17, 3, 3631, $a([3, 127, 24]), $a([0, -1, -1]), $a([0, -1, -1]), $a([5, 51, 22]), $a([1, 62, 26]), $a([0, -1, -1]), $a([7, 30, 26]), $a([1, 35, 26]), $a([0, -1, -1]), $a([8, 20, 30]), $a([1, 21, 32]), $a([0, -1, -1])]), $a(["24", 69, 17, 3, 3887, $a([2, 135, 26]), $a([1, 137, 26]), $a([0, -1, -1]), $a([5, 56, 24]), $a([1, 59, 26]), $a([0, -1, -1]), $a([7, 33, 28]), $a([1, 30, 28]), $a([0, -1, -1]), $a([11, 16, 24]), $a([1, 19, 26]), $a([0, -1, -1])]), $a(["25", 71, 18, 3, 4151, $a([3, 105, 20]), $a([1, 121, 22]), $a([0, -1, -1]), $a([5, 61, 26]), $a([1, 57, 26]), $a([0, -1, -1]), $a([9, 28, 24]), $a([1, 28, 22]), $a([0, -1, -1]), $a([10, 19, 28]), $a([1, 18, 30]), $a([0, -1, -1])]), $a(["26", 73, 18, 3, 4423, $a([2, 157, 30]), $a([1, 150, 28]), $a([0, -1, -1]), $a([5, 65, 28]), $a([1, 61, 26]), $a([0, -1, -1]), $a([8, 33, 28]), $a([1, 34, 30]), $a([0, -1, -1]), $a([10, 19, 28]), $a([2, 15, 26]), $a([0, -1, -1])]), $a(["27", 75, 19, 3, 4703, $a([3, 126, 24]), $a([1, 115, 22]), $a([0, -1, -1]), $a([7, 51, 22]), $a([1, 54, 22]), $a([0, -1, -1]), $a([8, 35, 30]), $a([1, 37, 30]), $a([0, -1, -1]), $a([15, 15, 22]), $a([1, 10, 22]), $a([0, -1, -1])]), $a(["28", 77, 19, 3, 4991, $a([4, 105, 20]), $a([1, 103, 20]), $a([0, -1, -1]), $a([7, 56, 24]), $a([1, 45, 18]), $a([0, -1, -1]), $a([10, 31, 26]), $a([1, 27, 26]), $a([0, -1, -1]), $a([10, 17, 26]), $a([3, 20, 28]), $a([1, 21, 28])]), $a(["29", 79, 20, 3, 5287, $a([3, 139, 26]), $a([1, 137, 28]), $a([0, -1, -1]), $a([6, 66, 28]), $a([1, 66, 30]), $a([0, -1, -1]), $a([9, 36, 30]), $a([1, 34, 32]), $a([0, -1, -1]), $a([13, 19, 28]), $a([1, 17, 32]), $a([0, -1, -1])]), $a(["30", 81, 20, 3, 5591, $a([6, 84, 16]), $a([1, 82, 16]), $a([0, -1, -1]), $a([6, 70, 30]), $a([1, 68, 30]), $a([0, -1, -1]), $a([7, 35, 30]), $a([3, 33, 28]), $a([1, 32, 28]), $a([13, 20, 30]), $a([1, 20, 28]), $a([0, -1, -1])]), $a(["31", 83, 21, 3, 5903, $a([5, 105, 20]), $a([1, 94, 18]), $a([0, -1, -1]), $a([6, 74, 32]), $a([1, 71, 30]), $a([0, -1, -1]), $a([11, 33, 28]), $a([1, 34, 32]), $a([0, -1, -1]), $a([13, 19, 28]), $a([3, 16, 26]), $a([0, -1, -1])]), $a(["32", 85, 17, 4, 6033, $a([4, 127, 24]), $a([1, 126, 24]), $a([0, -1, -1]), $a([7, 66, 28]), $a([1, 66, 30]), $a([0, -1, -1]), $a([12, 30, 24]), $a([1, 24, 28]), $a([1, 24, 30]), $a([15, 19, 28]), $a([1, 17, 32]), $a([0, -1, -1])]), $a(["33", 87, 17, 4, 6353, $a([7, 84, 16]), $a([1, 78, 16]), $a([0, -1, -1]), $a([7, 70, 30]), $a([1, 66, 28]), $a([0, -1, -1]), $a([12, 33, 28]), $a([1, 32, 30]), $a([0, -1, -1]), $a([14, 21, 32]), $a([1, 24, 28]), $a([0, -1, -1])]), $a(["34", 89, 18, 4, 6689, $a([5, 117, 22]), $a([1, 117, 24]), $a([0, -1, -1]), $a([8, 66, 28]), $a([1, 58, 26]), $a([0, -1, -1]), $a([11, 38, 32]), $a([1, 34, 32]), $a([0, -1, -1]), $a([15, 20, 30]), $a([2, 17, 26]), $a([0, -1, -1])]), $a(["35", 91, 18, 4, 7025, $a([4, 148, 28]), $a([1, 146, 28]), $a([0, -1, -1]), $a([8, 68, 30]), $a([1, 70, 24]), $a([0, -1, -1]), $a([10, 36, 32]), $a([3, 38, 28]), $a([0, -1, -1]), $a([16, 19, 28]), $a([3, 16, 26]), $a([0, -1, -1])]), $a(["36", 93, 19, 4, 7377, $a([4, 126, 24]), $a([2, 135, 26]), $a([0, -1, -1]), $a([8, 70, 28]), $a([2, 43, 26]), $a([0, -1, -1]), $a([13, 32, 28]), $a([2, 41, 30]), $a([0, -1, -1]), $a([17, 19, 28]), $a([3, 15, 26]), $a([0, -1, -1])]), $a(["37", 95, 19, 4, 7729, $a([5, 136, 26]), $a([1, 132, 24]), $a([0, -1, -1]), $a([5, 67, 30]), $a([4, 68, 28]), $a([1, 69, 28]), $a([14, 35, 30]), $a([1, 32, 24]), $a([0, -1, -1]), $a([18, 18, 26]), $a([3, 16, 28]), $a([1, 14, 28])]), $a(["38", 97, 19, 4, 8089, $a([3, 142, 26]), $a([3, 141, 28]), $a([0, -1, -1]), $a([8, 70, 30]), $a([1, 73, 32]), $a([1, 74, 32]), $a([12, 34, 30]), $a([3, 34, 26]), $a([1, 35, 28]), $a([18, 21, 32]), $a([1, 27, 30]), $a([0, -1, -1])]), $a(["39", 99, 20, 4, 8465, $a([5, 116, 22]), $a([2, 103, 20]), $a([1, 102, 20]), $a([9, 74, 32]), $a([1, 74, 30]), $a([0, -1, -1]), $a([14, 34, 28]), $a([2, 32, 32]), $a([1, 32, 30]), $a([19, 21, 32]), $a([1, 25, 26]), $a([0, -1, -1])]), $a(["40", 101, 20, 4, 8841, $a([7, 116, 22]), $a([1, 117, 22]), $a([0, -1, -1]), $a([11, 65, 28]), $a([1, 58, 24]), $a([0, -1, -1]), $a([15, 38, 32]), $a([1, 27, 28]), $a([0, -1, -1]), $a([20, 20, 30]), $a([1, 20, 32]), $a([1, 21, 32])]), $a(["41", 103, 17, 5, 9009, $a([6, 136, 26]), $a([1, 130, 24]), $a([0, -1, -1]), $a([11, 66, 28]), $a([1, 62, 30]), $a([0, -1, -1]), $a([14, 34, 28]), $a([3, 34, 32]), $a([1, 30, 30]), $a([18, 20, 30]), $a([3, 20, 28]), $a([2, 15, 26])]), $a(["42", 105, 17, 5, 9401, $a([5, 105, 20]), $a([2, 115, 22]), $a([2, 116, 22]), $a([10, 75, 32]), $a([1, 73, 32]), $a([0, -1, -1]), $a([16, 38, 32]), $a([1, 27, 28]), $a([0, -1, -1]), $a([22, 19, 28]), $a([2, 16, 30]), $a([1, 19, 30])]), $a(["43", 107, 18, 5, 9799, $a([6, 147, 28]), $a([1, 146, 28]), $a([0, -1, -1]), $a([11, 66, 28]), $a([2, 65, 30]), $a([0, -1, -1]), $a([18, 33, 28]), $a([2, 33, 30]), $a([0, -1, -1]), $a([22, 21, 32]), $a([1, 28, 30]), $a([0, -1, -1])]), $a(["44", 109, 18, 5, 10207, $a([6, 116, 22]), $a([3, 125, 24]), $a([0, -1, -1]), $a([11, 75, 32]), $a([1, 68, 30]), $a([0, -1, -1]), $a([13, 35, 28]), $a([6, 34, 32]), $a([1, 30, 30]), $a([23, 21, 32]), $a([1, 26, 30]), $a([0, -1, -1])]), $a(["45", 111, 18, 5, 10623, $a([7, 105, 20]), $a([4, 95, 18]), $a([0, -1, -1]), $a([12, 67, 28]), $a([1, 63, 30]), $a([1, 62, 32]), $a([21, 31, 26]), $a([2, 33, 32]), $a([0, -1, -1]), $a([23, 21, 32]), $a([2, 24, 30]), $a([0, -1, -1])]), $a(["46", 113, 19, 5, 11045, $a([10, 116, 22]), $a([0, -1, -1]), $a([0, -1, -1]), $a([12, 74, 32]), $a([1, 78, 30]), $a([0, -1, -1]), $a([18, 37, 32]), $a([1, 39, 30]), $a([1, 41, 28]), $a([25, 21, 32]), $a([1, 27, 28]), $a([0, -1, -1])]), $a(["47", 115, 19, 5, 11477, $a([5, 126, 24]), $a([4, 115, 22]), $a([1, 114, 22]), $a([12, 67, 28]), $a([2, 66, 32]), $a([1, 68, 30]), $a([21, 35, 30]), $a([1, 39, 30]), $a([0, -1, -1]), $a([26, 21, 32]), $a([1, 28, 28]), $a([0, -1, -1])]), $a(["48", 117, 19, 5, 11917, $a([9, 126, 24]), $a([1, 117, 22]), $a([0, -1, -1]), $a([13, 75, 32]), $a([1, 68, 30]), $a([0, -1, -1]), $a([20, 35, 30]), $a([3, 35, 28]), $a([0, -1, -1]), $a([27, 21, 32]), $a([1, 28, 30]), $a([0, -1, -1])]), $a(["49", 119, 17, 6, 12111, $a([9, 126, 24]), $a([1, 137, 26]), $a([0, -1, -1]), $a([13, 71, 30]), $a([2, 68, 32]), $a([0, -1, -1]), $a([20, 37, 32]), $a([1, 39, 28]), $a([1, 38, 28]), $a([24, 20, 32]), $a([5, 25, 28]), $a([0, -1, -1])]), $a(["50", 121, 17, 6, 12559, $a([8, 147, 28]), $a([1, 141, 28]), $a([0, -1, -1]), $a([10, 73, 32]), $a([4, 74, 30]), $a([1, 73, 30]), $a([16, 36, 32]), $a([6, 39, 30]), $a([1, 37, 30]), $a([27, 21, 32]), $a([3, 20, 26]), $a([0, -1, -1])]), $a(["51", 123, 18, 6, 13025, $a([9, 137, 26]), $a([1, 135, 26]), $a([0, -1, -1]), $a([12, 70, 30]), $a([4, 75, 32]), $a([0, -1, -1]), $a([24, 35, 30]), $a([1, 40, 28]), $a([0, -1, -1]), $a([23, 20, 32]), $a([8, 24, 30]), $a([0, -1, -1])]), $a(["52", 125, 18, 6, 13489, $a([14, 95, 18]), $a([1, 86, 18]), $a([0, -1, -1]), $a([13, 73, 32]), $a([3, 77, 30]), $a([0, -1, -1]), $a([24, 35, 30]), $a([2, 35, 28]), $a([0, -1, -1]), $a([26, 21, 32]), $a([5, 21, 30]), $a([1, 23, 30])]), $a(["53", 127, 18, 6, 13961, $a([9, 147, 28]), $a([1, 142, 28]), $a([0, -1, -1]), $a([10, 73, 30]), $a([6, 70, 32]), $a([1, 71, 32]), $a([25, 35, 30]), $a([2, 34, 26]), $a([0, -1, -1]), $a([29, 21, 32]), $a([4, 22, 30]), $a([0, -1, -1])]), $a(["54", 129, 18, 6, 14441, $a([11, 126, 24]), $a([1, 131, 24]), $a([0, -1, -1]), $a([16, 74, 32]), $a([1, 79, 30]), $a([0, -1, -1]), $a([25, 38, 32]), $a([1, 25, 30]), $a([0, -1, -1]), $a([33, 21, 32]), $a([1, 28, 28]), $a([0, -1, -1])]), $a(["55", 131, 19, 6, 14939, $a([14, 105, 20]), $a([1, 99, 18]), $a([0, -1, -1]), $a([19, 65, 28]), $a([1, 72, 28]), $a([0, -1, -1]), $a([24, 37, 32]), $a([2, 40, 30]), $a([1, 41, 30]), $a([31, 21, 32]), $a([4, 24, 32]), $a([0, -1, -1])]), $a(["56", 133, 19, 6, 15435, $a([10, 147, 28]), $a([1, 151, 28]), $a([0, -1, -1]), $a([15, 71, 30]), $a([3, 71, 32]), $a([1, 73, 32]), $a([24, 37, 32]), $a([3, 38, 30]), $a([1, 39, 30]), $a([36, 19, 30]), $a([3, 29, 26]), $a([0, -1, -1])]), $a(["57", 135, 19, 6, 15939, $a([15, 105, 20]), $a([1, 99, 18]), $a([0, -1, -1]), $a([19, 70, 30]), $a([1, 64, 28]), $a([0, -1, -1]), $a([27, 38, 32]), $a([2, 25, 26]), $a([0, -1, -1]), $a([38, 20, 30]), $a([2, 18, 28]), $a([0, -1, -1])]), $a(["58", 137, 17, 7, 16171, $a([14, 105, 20]), $a([1, 113, 22]), $a([1, 114, 22]), $a([17, 67, 30]), $a([3, 92, 32]), $a([0, -1, -1]), $a([30, 35, 30]), $a([1, 41, 30]), $a([0, -1, -1]), $a([36, 21, 32]), $a([1, 26, 30]), $a([1, 27, 30])]), $a(["59", 139, 17, 7, 16691, $a([11, 146, 28]), $a([1, 146, 26]), $a([0, -1, -1]), $a([20, 70, 30]), $a([1, 60, 26]), $a([0, -1, -1]), $a([29, 38, 32]), $a([1, 24, 32]), $a([0, -1, -1]), $a([40, 20, 30]), $a([2, 17, 26]), $a([0, -1, -1])]), $a(["60", 141, 18, 7, 17215, $a([3, 137, 26]), $a([1, 136, 26]), $a([10, 126, 24]), $a([22, 65, 28]), $a([1, 75, 30]), $a([0, -1, -1]), $a([30, 37, 32]), $a([1, 51, 30]), $a([0, -1, -1]), $a([42, 20, 30]), $a([1, 21, 30]), $a([0, -1, -1])]), $a(["61", 143, 18, 7, 17751, $a([12, 126, 24]), $a([2, 118, 22]), $a([1, 116, 22]), $a([19, 74, 32]), $a([1, 74, 30]), $a([1, 72, 28]), $a([30, 38, 32]), $a([2, 29, 30]), $a([0, -1, -1]), $a([39, 20, 32]), $a([2, 37, 26]), $a([1, 38, 26])]), $a(["62", 145, 18, 7, 18295, $a([12, 126, 24]), $a([3, 136, 26]), $a([0, -1, -1]), $a([21, 70, 30]), $a([2, 65, 28]), $a([0, -1, -1]), $a([34, 35, 30]), $a([1, 44, 32]), $a([0, -1, -1]), $a([42, 20, 30]), $a([2, 19, 28]), $a([2, 18, 28])]), $a(["63", 147, 18, 7, 18847, $a([12, 126, 24]), $a([3, 117, 22]), $a([1, 116, 22]), $a([25, 61, 26]), $a([2, 62, 28]), $a([0, -1, -1]), $a([34, 35, 30]), $a([1, 40, 32]), $a([1, 41, 32]), $a([45, 20, 30]), $a([1, 20, 32]), $a([1, 21, 32])]), $a(["64", 149, 19, 7, 19403, $a([15, 105, 20]), $a([2, 115, 22]), $a([2, 116, 22]), $a([25, 65, 28]), $a([1, 72, 28]), $a([0, -1, -1]), $a([18, 35, 30]), $a([17, 37, 32]), $a([1, 50, 32]), $a([42, 20, 30]), $a([6, 19, 28]), $a([1, 15, 28])]), $a(["65", 151, 19, 7, 19971, $a([19, 105, 20]), $a([1, 101, 20]), $a([0, -1, -1]), $a([33, 51, 22]), $a([1, 65, 22]), $a([0, -1, -1]), $a([40, 33, 28]), $a([1, 28, 28]), $a([0, -1, -1]), $a([49, 20, 30]), $a([1, 18, 28]), $a([0, -1, -1])]), $a(["66", 153, 17, 8, 20229, $a([18, 105, 20]), $a([2, 117, 22]), $a([0, -1, -1]), $a([26, 65, 28]), $a([1, 80, 30]), $a([0, -1, -1]), $a([35, 35, 30]), $a([3, 35, 28]), $a([1, 36, 28]), $a([52, 18, 28]), $a([2, 38, 30]), $a([0, -1, -1])]), $a(["67", 155, 17, 8, 20805, $a([26, 84, 16]), $a([0, -1, -1]), $a([0, -1, -1]), $a([26, 70, 30]), $a([0, -1, -1]), $a([0, -1, -1]), $a([45, 31, 26]), $a([1, 9, 26]), $a([0, -1, -1]), $a([52, 20, 30]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["68", 157, 17, 8, 21389, $a([16, 126, 24]), $a([1, 114, 22]), $a([1, 115, 22]), $a([23, 70, 30]), $a([3, 65, 28]), $a([1, 66, 28]), $a([40, 35, 30]), $a([1, 43, 30]), $a([0, -1, -1]), $a([46, 20, 30]), $a([7, 19, 28]), $a([1, 16, 28])]), $a(["69", 159, 18, 8, 21993, $a([19, 116, 22]), $a([1, 105, 22]), $a([0, -1, -1]), $a([20, 70, 30]), $a([7, 66, 28]), $a([1, 63, 28]), $a([40, 35, 30]), $a([1, 42, 32]), $a([1, 43, 32]), $a([54, 20, 30]), $a([1, 19, 30]), $a([0, -1, -1])]), $a(["70", 161, 18, 8, 22593, $a([17, 126, 24]), $a([2, 115, 22]), $a([0, -1, -1]), $a([24, 70, 30]), $a([4, 74, 32]), $a([0, -1, -1]), $a([48, 31, 26]), $a([2, 18, 26]), $a([0, -1, -1]), $a([54, 19, 28]), $a([6, 15, 26]), $a([1, 14, 26])]), $a(["71", 163, 18, 8, 23201, $a([29, 84, 16]), $a([0, -1, -1]), $a([0, -1, -1]), $a([29, 70, 30]), $a([0, -1, -1]), $a([0, -1, -1]), $a([6, 34, 30]), $a([3, 36, 30]), $a([38, 33, 28]), $a([58, 20, 30]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["72", 165, 18, 8, 23817, $a([16, 147, 28]), $a([1, 149, 28]), $a([0, -1, -1]), $a([31, 66, 28]), $a([1, 37, 26]), $a([0, -1, -1]), $a([48, 33, 28]), $a([1, 23, 26]), $a([0, -1, -1]), $a([53, 20, 30]), $a([6, 19, 28]), $a([1, 17, 28])]), $a(["73", 167, 19, 8, 24453, $a([20, 115, 22]), $a([2, 134, 24]), $a([0, -1, -1]), $a([29, 66, 28]), $a([2, 56, 26]), $a([2, 57, 26]), $a([45, 36, 30]), $a([2, 15, 28]), $a([0, -1, -1]), $a([59, 20, 30]), $a([2, 21, 32]), $a([0, -1, -1])]), $a(["74", 169, 19, 8, 25085, $a([17, 147, 28]), $a([1, 134, 26]), $a([0, -1, -1]), $a([26, 70, 30]), $a([5, 75, 32]), $a([0, -1, -1]), $a([47, 35, 30]), $a([1, 48, 32]), $a([0, -1, -1]), $a([64, 18, 28]), $a([2, 33, 30]), $a([1, 35, 30])]), $a(["75", 171, 17, 9, 25373, $a([22, 115, 22]), $a([1, 133, 24]), $a([0, -1, -1]), $a([33, 65, 28]), $a([1, 74, 28]), $a([0, -1, -1]), $a([43, 36, 30]), $a([5, 27, 28]), $a([1, 30, 28]), $a([57, 20, 30]), $a([5, 21, 32]), $a([1, 24, 32])]), $a(["76", 173, 17, 9, 26021, $a([18, 136, 26]), $a([2, 142, 26]), $a([0, -1, -1]), $a([33, 66, 28]), $a([2, 49, 26]), $a([0, -1, -1]), $a([48, 35, 30]), $a([2, 38, 28]), $a([0, -1, -1]), $a([64, 20, 30]), $a([1, 20, 32]), $a([0, -1, -1])]), $a(["77", 175, 17, 9, 26677, $a([19, 126, 24]), $a([2, 135, 26]), $a([1, 136, 26]), $a([32, 66, 28]), $a([2, 55, 26]), $a([2, 56, 26]), $a([49, 36, 30]), $a([2, 18, 32]), $a([0, -1, -1]), $a([65, 18, 28]), $a([5, 27, 30]), $a([1, 29, 30])]), $a(["78", 177, 18, 9, 27335, $a([20, 137, 26]), $a([1, 130, 26]), $a([0, -1, -1]), $a([30, 75, 32]), $a([2, 71, 32]), $a([0, -1, -1]), $a([46, 35, 30]), $a([6, 39, 32]), $a([0, -1, -1]), $a([3, 12, 30]), $a([70, 19, 28]), $a([0, -1, -1])]), $a(["79", 179, 18, 9, 28007, $a([20, 147, 28]), $a([0, -1, -1]), $a([0, -1, -1]), $a([35, 70, 30]), $a([0, -1, -1]), $a([0, -1, -1]), $a([49, 35, 30]), $a([5, 35, 28]), $a([0, -1, -1]), $a([70, 20, 30]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["80", 181, 18, 9, 28687, $a([21, 136, 26]), $a([1, 155, 28]), $a([0, -1, -1]), $a([34, 70, 30]), $a([1, 64, 28]), $a([1, 65, 28]), $a([54, 35, 30]), $a([1, 45, 30]), $a([0, -1, -1]), $a([68, 20, 30]), $a([3, 18, 28]), $a([1, 19, 28])]), $a(["81", 183, 18, 9, 29375, $a([19, 126, 24]), $a([5, 115, 22]), $a([1, 114, 22]), $a([33, 70, 30]), $a([3, 65, 28]), $a([1, 64, 28]), $a([52, 35, 30]), $a([3, 41, 32]), $a([1, 40, 32]), $a([67, 20, 30]), $a([5, 21, 32]), $a([1, 24, 32])]), $a(["82", 185, 18, 9, 30071, $a([2, 150, 28]), $a([21, 136, 26]), $a([0, -1, -1]), $a([32, 70, 30]), $a([6, 65, 28]), $a([0, -1, -1]), $a([52, 38, 32]), $a([2, 27, 32]), $a([0, -1, -1]), $a([73, 20, 30]), $a([2, 22, 32]), $a([0, -1, -1])]), $a(["83", 187, 17, 10, 30387, $a([21, 126, 24]), $a([4, 136, 26]), $a([0, -1, -1]), $a([30, 74, 32]), $a([6, 73, 30]), $a([0, -1, -1]), $a([54, 35, 30]), $a([4, 40, 32]), $a([0, -1, -1]), $a([75, 20, 30]), $a([1, 20, 28]), $a([0, -1, -1])]), $a(["84", 189, 17, 10, 31091, $a([30, 105, 20]), $a([1, 114, 22]), $a([0, -1, -1]), $a([3, 45, 22]), $a([55, 47, 20]), $a([0, -1, -1]), $a([2, 26, 26]), $a([62, 33, 28]), $a([0, -1, -1]), $a([79, 18, 28]), $a([4, 33, 30]), $a([0, -1, -1])])]); //#24708
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_hanxin.$ctx[id] = $_[id]); //#24708
        bwipp_hanxin.__24709__ = 1; //#24708
        $_ = Object.getPrototypeOf($_); //#24708
    } //#24708
    $_.eclval = $get($_.eclevel, 1) - 49; //#24711
    var _Ih = $_.metrics; //#24712
    for (var _Ii = 0, _Ij = _Ih.length; _Ii < _Ij; _Ii++) { //#24730
        $_.m = $get(_Ih, _Ii); //#24713
        $_.vers = $get($_.m, 0); //#24714
        $_.size = $get($_.m, 1); //#24715
        $_.alnk = $get($_.m, 2); //#24716
        $_.alnn = $get($_.m, 3); //#24717
        $_.alnr = $f($_.size - ($_.alnk * $_.alnn)); //#24718
        $_.nmod = $get($_.m, 4); //#24719
        $_.ncws = ~~($_.nmod / 8); //#24720
        $_.rbit = $_.nmod % 8; //#24721
        $_.ecbs = $geti($_.m, 5 + ($_.eclval * 3), 3); //#24722
        var _J3 = $_.ecbs; //#24723
        $k[$j++] = 'ecws'; //#24723
        $k[$j++] = 0; //#24723
        for (var _J4 = 0, _J5 = _J3.length; _J4 < _J5; _J4++) { //#24723
            var _J6 = $get(_J3, _J4); //#24723
            var _J9 = $k[--$j]; //#24723
            $k[$j++] = $f(_J9 + ($get(_J6, 0) * $get(_J6, 2))); //#24723
        } //#24723
        var _JA = $k[--$j]; //#24723
        $_[$k[--$j]] = _JA; //#24723
        $_.dcws = $f($_.ncws - $_.ecws); //#24724
        $_.dmod = $_.dcws * 8; //#24725
        $_.okay = true; //#24726
        if ($ne($_.version, "unset") && $ne($_.version, $_.vers)) { //#24727
            $_.okay = false; //#24727
        } //#24727
        if ($_.bits.length > $_.dmod) { //#24728
            $_.okay = false; //#24728
        } //#24728
        if ($_.okay) { //#24729
            break; //#24729
        } //#24729
    } //#24729
    if (!$_.okay) { //#24734
        $k[$j++] = 'bwipp.hanxinNoValidSymbol#24733'; //#24733
        $k[$j++] = "Maximum length exceeded or invalid content"; //#24733
        bwipp_raiseerror(); //#24733
    } //#24733
    $_.version = $_.vers; //#24736
    $_.msgbits = $_.bits; //#24737
    $_.e1nb = $get($get($_.ecbs, 0), 0); //#24738
    $_.e2nb = $get($get($_.ecbs, 1), 0); //#24738
    $_.e3nb = $get($get($_.ecbs, 2), 0); //#24738
    $_.e1dcws = $get($get($_.ecbs, 0), 1); //#24739
    $_.e2dcws = $get($get($_.ecbs, 1), 1); //#24739
    $_.e3dcws = $get($get($_.ecbs, 2), 1); //#24739
    $_.e1ecws = $get($get($_.ecbs, 0), 2); //#24740
    $_.e2ecws = $get($get($_.ecbs, 1), 2); //#24740
    $_.e3ecws = $get($get($_.ecbs, 2), 2); //#24740
    $_.pad = $s($_.dmod); //#24743
    for (var _Jt = 0, _Js = $_.pad.length - 1; _Jt <= _Js; _Jt += 1) { //#24744
        $put($_.pad, _Jt, 48); //#24744
    } //#24744
    $puti($_.pad, 0, $_.msgbits); //#24745
    $_.cws = $a($_.dcws); //#24748
    for (var _K1 = 0, _K0 = $_.cws.length - 1; _K1 <= _K0; _K1 += 1) { //#24758
        $_.c = _K1; //#24750
        $_.cwb = $geti($_.pad, $_.c * 8, 8); //#24751
        $_.cw = 0; //#24752
        for (var _K5 = 0; _K5 <= 7; _K5 += 1) { //#24756
            $_.i = _K5; //#24754
            $_.cw = $f($_.cw + ((~~(Math.pow(2, (8 - $_.i) - 1))) * $f($get($_.cwb, $_.i) - 48))); //#24755
        } //#24755
        $put($_.cws, $_.c, $_.cw); //#24757
    } //#24757
    $_.rscodes = function() {
        $_.rspm = $k[--$j]; //#24762
        $_.rsgf = $k[--$j]; //#24763
        $_.rsnc = $k[--$j]; //#24764
        $_.rscws = $k[--$j]; //#24765
        $k[$j++] = Infinity; //#24768
        $k[$j++] = 1; //#24768
        for (var _KJ = 0, _KK = $f($_.rsgf - 1); _KJ < _KK; _KJ++) { //#24768
            var _KL = $k[--$j]; //#24768
            var _KM = _KL * 2; //#24768
            $k[$j++] = _KL; //#24768
            $k[$j++] = _KM; //#24768
            if (_KM >= $_.rsgf) { //#24768
                var _KP = $k[--$j]; //#24768
                $k[$j++] = $xo(_KP, $_.rspm); //#24768
            } //#24768
        } //#24768
        $_.rsalog = $a(); //#24768
        $_.rslog = $a($_.rsgf); //#24769
        for (var _KV = 1, _KU = $f($_.rsgf - 1); _KV <= _KU; _KV += 1) { //#24770
            $put($_.rslog, $get($_.rsalog, _KV), _KV); //#24770
        } //#24770
        $_.rsprod = function() {
            var _KZ = $k[--$j]; //#24774
            var _Ka = $k[--$j]; //#24774
            $k[$j++] = _Ka; //#24778
            $k[$j++] = _KZ; //#24778
            if ((_KZ != 0) && (_Ka != 0)) { //#24777
                var _Kd = $get($_.rslog, $k[--$j]); //#24775
                var _Kj = $get($_.rsalog, $f(_Kd + $get($_.rslog, $k[--$j])) % $f($_.rsgf - 1)); //#24775
                $k[$j++] = _Kj; //#24775
            } else { //#24777
                $j -= 2; //#24777
                $k[$j++] = 0; //#24777
            } //#24777
        }; //#24777
        $k[$j++] = Infinity; //#24782
        $k[$j++] = 1; //#24782
        for (var _Kl = 0, _Km = $_.rsnc; _Kl < _Km; _Kl++) { //#24782
            $k[$j++] = 0; //#24782
        } //#24782
        $_.coeffs = $a(); //#24782
        for (var _Kq = 1, _Kp = $_.rsnc; _Kq <= _Kp; _Kq += 1) { //#24791
            $_.i = _Kq; //#24784
            $put($_.coeffs, $_.i, $get($_.coeffs, $_.i - 1)); //#24785
            for (var _Kx = $_.i - 1; _Kx >= 1; _Kx -= 1) { //#24789
                $_.j = _Kx; //#24787
                $k[$j++] = $_.coeffs; //#24788
                $k[$j++] = $_.j; //#24788
                $k[$j++] = $get($_.coeffs, $_.j - 1); //#24788
                $k[$j++] = $get($_.coeffs, $_.j); //#24788
                $k[$j++] = $get($_.rsalog, $_.i); //#24788
                $_.rsprod(); //#24788
                var _L9 = $k[--$j]; //#24788
                var _LA = $k[--$j]; //#24788
                var _LB = $k[--$j]; //#24788
                $put($k[--$j], _LB, $xo(_LA, _L9)); //#24788
            } //#24788
            $k[$j++] = $_.coeffs; //#24790
            $k[$j++] = 0; //#24790
            $k[$j++] = $get($_.coeffs, 0); //#24790
            $k[$j++] = $get($_.rsalog, $_.i); //#24790
            $_.rsprod(); //#24790
            var _LJ = $k[--$j]; //#24790
            var _LK = $k[--$j]; //#24790
            $put($k[--$j], _LK, _LJ); //#24790
        } //#24790
        $_.nd = $_.rscws.length; //#24794
        $k[$j++] = Infinity; //#24795
        $forall($_.rscws); //#24795
        for (var _LP = 0, _LQ = $_.rsnc; _LP < _LQ; _LP++) { //#24795
            $k[$j++] = 0; //#24795
        } //#24795
        $k[$j++] = 0; //#24795
        $_.rscws = $a(); //#24795
        for (var _LU = 0, _LT = $_.nd - 1; _LU <= _LT; _LU += 1) { //#24802
            $_.k = $xo($get($_.rscws, _LU), $get($_.rscws, $_.nd)); //#24797
            for (var _Lc = 0, _Lb = $f($_.rsnc - 1); _Lc <= _Lb; _Lc += 1) { //#24801
                $_.j = _Lc; //#24799
                $k[$j++] = $_.rscws; //#24800
                $k[$j++] = $_.nd + $_.j; //#24800
                $k[$j++] = $get($_.rscws, ($_.nd + $_.j) + 1); //#24800
                $k[$j++] = $_.k; //#24800
                $k[$j++] = $get($_.coeffs, $f($f($_.rsnc - $_.j) - 1)); //#24800
                $_.rsprod(); //#24800
                var _Lp = $k[--$j]; //#24800
                var _Lq = $k[--$j]; //#24800
                var _Lr = $k[--$j]; //#24800
                $put($k[--$j], _Lr, $xo(_Lq, _Lp)); //#24800
            } //#24800
        } //#24800
        $k[$j++] = $geti($_.rscws, 0, $_.rscws.length - 1); //#24805
    }; //#24805
    $_.dcwsb = $a($f($f($_.e1nb + $_.e2nb) + $_.e3nb)); //#24810
    $_.ecwsb = $a($_.dcwsb.length); //#24811
    $_.in = 0; //#24812
    $_.out = 0; //#24812
    for (var _M3 = 0, _M4 = $_.e1nb; _M3 < _M4; _M3++) { //#24818
        $k[$j++] = $geti($_.cws, $_.in, $_.e1dcws); //#24814
        $k[$j++] = $_.e1ecws; //#24814
        $k[$j++] = 256; //#24814
        $k[$j++] = 355; //#24814
        $_.rscodes(); //#24814
        var _MA = $k[--$j]; //#24815
        $put($_.dcwsb, $_.out, $geti(_MA, 0, $_.e1dcws)); //#24815
        $put($_.ecwsb, $_.out, $geti(_MA, $_.e1dcws, $_.e1ecws)); //#24816
        $_.in = $f($_.in + $_.e1dcws); //#24817
        $_.out = $_.out + 1; //#24817
    } //#24817
    for (var _MO = 0, _MP = $_.e2nb; _MO < _MP; _MO++) { //#24824
        $k[$j++] = $geti($_.cws, $_.in, $_.e2dcws); //#24820
        $k[$j++] = $_.e2ecws; //#24820
        $k[$j++] = 256; //#24820
        $k[$j++] = 355; //#24820
        $_.rscodes(); //#24820
        var _MV = $k[--$j]; //#24821
        $put($_.dcwsb, $_.out, $geti(_MV, 0, $_.e2dcws)); //#24821
        $put($_.ecwsb, $_.out, $geti(_MV, $_.e2dcws, $_.e2ecws)); //#24822
        $_.in = $f($_.in + $_.e2dcws); //#24823
        $_.out = $_.out + 1; //#24823
    } //#24823
    for (var _Mj = 0, _Mk = $_.e3nb; _Mj < _Mk; _Mj++) { //#24830
        $k[$j++] = $geti($_.cws, $_.in, $_.e3dcws); //#24826
        $k[$j++] = $_.e3ecws; //#24826
        $k[$j++] = 256; //#24826
        $k[$j++] = 355; //#24826
        $_.rscodes(); //#24826
        var _Mq = $k[--$j]; //#24827
        $put($_.dcwsb, $_.out, $geti(_Mq, 0, $_.e3dcws)); //#24827
        $put($_.ecwsb, $_.out, $geti(_Mq, $_.e3dcws, $_.e3ecws)); //#24828
        $_.in = $f($_.in + $_.e3dcws); //#24829
        $_.out = $_.out + 1; //#24829
    } //#24829
    $_.cws = $a($_.ncws); //#24833
    $_.cw = 0; //#24834
    for (var _N7 = 0, _N6 = $_.dcwsb.length - 1; _N7 <= _N6; _N7 += 1) { //#24839
        $_.i = _N7; //#24836
        var _NA = $get($_.dcwsb, $_.i); //#24837
        $puti($_.cws, $_.cw, _NA); //#24837
        $_.cw = _NA.length + $_.cw; //#24837
        var _NG = $get($_.ecwsb, $_.i); //#24838
        $puti($_.cws, $_.cw, _NG); //#24838
        $_.cw = _NG.length + $_.cw; //#24838
    } //#24838
    $k[$j++] = Infinity; //#24842
    var _NK = $_.ncws; //#24843
    var _NL = 12; //#24843
    var _NM = _NK - 1; //#24843
    if ((_NK - 1) > 12) { //#24843
        var _ = _NL; //#24843
        _NL = _NM; //#24843
        _NM = _; //#24843
    } //#24843
    for (var _NO = 0, _NN = _NM; _NO <= _NN; _NO += 1) { //#24845
        for (var _NR = _NO, _NQ = $_.ncws - 1; _NR <= _NQ; _NR += 13) { //#24844
            $k[$j++] = _NR; //#24844
            if (_NR < $_.ncws) { //#24844
                var _NV = $get($_.cws, $k[--$j]); //#24844
                $k[$j++] = _NV; //#24844
            } else { //#24844
                $j--; //#24844
            } //#24844
        } //#24844
    } //#24844
    $_.cws = $a(); //#24844
    if ($_.rbit > 0) { //#24854
        $_.pad = $a($_.cws.length + 1); //#24850
        $puti($_.pad, 0, $_.cws); //#24851
        $put($_.pad, $_.pad.length - 1, 0); //#24852
        $_.cws = $_.pad; //#24853
    } //#24853
    $k[$j++] = Infinity; //#24857
    for (var _Nh = 0, _Ni = $_.size * $_.size; _Nh < _Ni; _Nh++) { //#24857
        $k[$j++] = -1; //#24857
    } //#24857
    $_.pixs = $a(); //#24857
    $_.qmv = function() {
        var _Nl = $k[--$j]; //#24858
        var _Nm = $k[--$j]; //#24858
        $k[$j++] = $f(_Nm + (_Nl * $_.size)); //#24858
    }; //#24858
    if ($_.alnn != 0) { //#24917
        $_.trmv = function() {
            var _Np = $k[--$j]; //#24862
            var _Nr = $k[--$j]; //#24862
            $k[$j++] = $f(($f(($f((_Np * $_.size) + $_.size)) - 1)) - _Nr); //#24862
        }; //#24862
        $_.aplot = function() {
            $r(3, 1); //#24864
            var _Ns = $k[--$j]; //#24864
            var _Nt = $k[--$j]; //#24864
            var _Nu = $k[--$j]; //#24864
            $k[$j++] = _Nu; //#24864
            $k[$j++] = _Nt; //#24864
            $k[$j++] = _Ns; //#24864
            $k[$j++] = _Nu; //#24864
            $k[$j++] = _Ns; //#24864
            $k[$j++] = _Nt; //#24864
            $_.trmv(); //#24864
            var _Nw = $k[--$j]; //#24864
            $k[$j++] = $_.pixs; //#24864
            $k[$j++] = _Nw; //#24864
            $r(3, -1); //#24864
            var _Nx = $k[--$j]; //#24864
            var _Ny = $k[--$j]; //#24864
            $put($k[--$j], _Ny, _Nx); //#24864
            $_.trmv(); //#24865
            var _O1 = $k[--$j]; //#24865
            $k[$j++] = $_.pixs; //#24865
            $k[$j++] = _O1; //#24865
            $r(3, -1); //#24865
            var _O2 = $k[--$j]; //#24865
            var _O3 = $k[--$j]; //#24865
            $put($k[--$j], _O3, _O2); //#24865
        }; //#24865
        $_.i = 0; //#24867
        $_.stag = 0; //#24867
        for (;;) { //#24889
            if ($_.i >= $_.size) { //#24868
                break; //#24868
            } //#24868
            for (var _O9 = 0, _O8 = $f($_.size - 1); _O9 <= _O8; _O9 += 1) { //#24882
                $_.j = _O9; //#24870
                if ($f($_.j + $_.alnr) < $_.size) { //#24876
                    $k[$j++] = (((((~~($_.j / $_.alnk)) + $_.stag) % 2) == 0) && (!(($_.i == 0) && ($_.j < $_.alnk)))) || (($_.j % $_.alnk) == 0); //#24874
                } else { //#24876
                    $k[$j++] = ($f($_.alnn + $_.stag) % 2) == 0; //#24876
                } //#24876
                if ($k[--$j]) { //#24881
                    $k[$j++] = $_.j; //#24879
                    $k[$j++] = $_.i; //#24879
                    $k[$j++] = 1; //#24879
                    $_.aplot(); //#24879
                    var _OQ = $_.j; //#24880
                    var _OR = $_.i; //#24880
                    $k[$j++] = _OQ + 1; //#24880
                    $k[$j++] = _OR + 1; //#24880
                    if (((_OR + 1) < $_.size) && ((_OQ + 1) < $_.size)) { //#24880
                        $k[$j++] = 0; //#24880
                        $_.aplot(); //#24880
                    } else { //#24880
                        $j -= 2; //#24880
                    } //#24880
                } //#24880
            } //#24880
            if ($f($_.i + $_.alnr) == $_.size) { //#24886
                $_.i = $f($f($_.i + $_.alnr) - 1); //#24884
            } else { //#24886
                $_.i = $f($_.i + $_.alnk); //#24886
            } //#24886
            $_.stag = 1 - $_.stag; //#24888
        } //#24888
        for (var _Og = $_.alnk, _Oh = $_.alnk, _Of = $f($_.size - 2); _Oh < 0 ? _Og >= _Of : _Og <= _Of; _Og += _Oh) { //#24916
            $_.i = _Og; //#24891
            if (((~~($_.i / $_.alnk)) % 2) != 0) { //#24903
                $k[$j++] = $_.pixs; //#24893
                $k[$j++] = 0; //#24893
                $k[$j++] = $_.i - 1; //#24893
                $_.trmv(); //#24893
                var _Om = $k[--$j]; //#24893
                $put($k[--$j], _Om, 0); //#24893
                $k[$j++] = $_.pixs; //#24894
                $k[$j++] = 0; //#24894
                $k[$j++] = $_.i + 1; //#24894
                $_.trmv(); //#24894
                var _Oq = $k[--$j]; //#24894
                $put($k[--$j], _Oq, 0); //#24894
                $k[$j++] = $_.pixs; //#24895
                $k[$j++] = 1; //#24895
                $k[$j++] = $_.i - 1; //#24895
                $_.trmv(); //#24895
                var _Ou = $k[--$j]; //#24895
                $put($k[--$j], _Ou, 0); //#24895
                $k[$j++] = $_.pixs; //#24896
                $k[$j++] = 1; //#24896
                $k[$j++] = $_.i; //#24896
                $_.trmv(); //#24896
                var _Oy = $k[--$j]; //#24896
                $put($k[--$j], _Oy, 0); //#24896
                $k[$j++] = $_.pixs; //#24897
                $k[$j++] = 1; //#24897
                $k[$j++] = $_.i + 1; //#24897
                $_.trmv(); //#24897
                var _P2 = $k[--$j]; //#24897
                $put($k[--$j], _P2, 0); //#24897
                $k[$j++] = $_.pixs; //#24898
                $k[$j++] = $_.i - 1; //#24898
                $k[$j++] = 0; //#24898
                $_.trmv(); //#24898
                var _P6 = $k[--$j]; //#24898
                $put($k[--$j], _P6, 0); //#24898
                $k[$j++] = $_.pixs; //#24899
                $k[$j++] = $_.i + 1; //#24899
                $k[$j++] = 0; //#24899
                $_.trmv(); //#24899
                var _PA = $k[--$j]; //#24899
                $put($k[--$j], _PA, 0); //#24899
                $k[$j++] = $_.pixs; //#24900
                $k[$j++] = $_.i - 1; //#24900
                $k[$j++] = 1; //#24900
                $_.trmv(); //#24900
                var _PE = $k[--$j]; //#24900
                $put($k[--$j], _PE, 0); //#24900
                $k[$j++] = $_.pixs; //#24901
                $k[$j++] = $_.i; //#24901
                $k[$j++] = 1; //#24901
                $_.trmv(); //#24901
                var _PI = $k[--$j]; //#24901
                $put($k[--$j], _PI, 0); //#24901
                $k[$j++] = $_.pixs; //#24902
                $k[$j++] = $_.i + 1; //#24902
                $k[$j++] = 1; //#24902
                $_.trmv(); //#24902
                var _PM = $k[--$j]; //#24902
                $put($k[--$j], _PM, 0); //#24902
            } //#24902
            $k[$j++] = $_.pixs; //#24904
            $k[$j++] = $f($_.size - 1); //#24904
            $k[$j++] = $_.i - 1; //#24904
            $_.trmv(); //#24904
            var _PR = $k[--$j]; //#24904
            if ($get($k[--$j], _PR) != 1) { //#24915
                $k[$j++] = $_.pixs; //#24905
                $k[$j++] = $f($_.size - 1); //#24905
                $k[$j++] = $_.i - 1; //#24905
                $_.trmv(); //#24905
                var _PX = $k[--$j]; //#24905
                $put($k[--$j], _PX, 0); //#24905
                $k[$j++] = $_.pixs; //#24906
                $k[$j++] = $f($_.size - 2); //#24906
                $k[$j++] = $_.i - 1; //#24906
                $_.trmv(); //#24906
                var _Pc = $k[--$j]; //#24906
                $put($k[--$j], _Pc, 0); //#24906
                $k[$j++] = $_.pixs; //#24907
                $k[$j++] = $f($_.size - 2); //#24907
                $k[$j++] = $_.i; //#24907
                $_.trmv(); //#24907
                var _Ph = $k[--$j]; //#24907
                $put($k[--$j], _Ph, 0); //#24907
                $k[$j++] = $_.pixs; //#24908
                $k[$j++] = $f($_.size - 2); //#24908
                $k[$j++] = $_.i + 1; //#24908
                $_.trmv(); //#24908
                var _Pm = $k[--$j]; //#24908
                $put($k[--$j], _Pm, 0); //#24908
                $k[$j++] = $_.pixs; //#24909
                $k[$j++] = $f($_.size - 1); //#24909
                $k[$j++] = $_.i + 1; //#24909
                $_.trmv(); //#24909
                var _Pr = $k[--$j]; //#24909
                $put($k[--$j], _Pr, 0); //#24909
                $k[$j++] = $_.pixs; //#24910
                $k[$j++] = $_.i - 1; //#24910
                $k[$j++] = $f($_.size - 1); //#24910
                $_.trmv(); //#24910
                var _Pw = $k[--$j]; //#24910
                $put($k[--$j], _Pw, 0); //#24910
                $k[$j++] = $_.pixs; //#24911
                $k[$j++] = $_.i - 1; //#24911
                $k[$j++] = $f($_.size - 2); //#24911
                $_.trmv(); //#24911
                var _Q1 = $k[--$j]; //#24911
                $put($k[--$j], _Q1, 0); //#24911
                $k[$j++] = $_.pixs; //#24912
                $k[$j++] = $_.i; //#24912
                $k[$j++] = $f($_.size - 2); //#24912
                $_.trmv(); //#24912
                var _Q6 = $k[--$j]; //#24912
                $put($k[--$j], _Q6, 0); //#24912
                $k[$j++] = $_.pixs; //#24913
                $k[$j++] = $_.i + 1; //#24913
                $k[$j++] = $f($_.size - 2); //#24913
                $_.trmv(); //#24913
                var _QB = $k[--$j]; //#24913
                $put($k[--$j], _QB, 0); //#24913
                $k[$j++] = $_.pixs; //#24914
                $k[$j++] = $_.i + 1; //#24914
                $k[$j++] = $f($_.size - 1); //#24914
                $_.trmv(); //#24914
                var _QG = $k[--$j]; //#24914
                $put($k[--$j], _QG, 0); //#24914
            } //#24914
        } //#24914
    } //#24914
    if (!bwipp_hanxin.__24941__) { //#24941
        $_ = Object.create($_); //#24941
        $_.fpat = $a([$a([1, 1, 1, 1, 1, 1, 1, 0]), $a([1, 0, 0, 0, 0, 0, 0, 0]), $a([1, 0, 1, 1, 1, 1, 1, 0]), $a([1, 0, 1, 0, 0, 0, 0, 0]), $a([1, 0, 1, 0, 1, 1, 1, 0]), $a([1, 0, 1, 0, 1, 1, 1, 0]), $a([1, 0, 1, 0, 1, 1, 1, 0]), $a([0, 0, 0, 0, 0, 0, 0, 0])]); //#24930
        $_.fpat2 = $a([$a([1, 1, 1, 0, 1, 0, 1, 0]), $a([1, 1, 1, 0, 1, 0, 1, 0]), $a([1, 1, 1, 0, 1, 0, 1, 0]), $a([0, 0, 0, 0, 1, 0, 1, 0]), $a([1, 1, 1, 1, 1, 0, 1, 0]), $a([0, 0, 0, 0, 0, 0, 1, 0]), $a([1, 1, 1, 1, 1, 1, 1, 0]), $a([0, 0, 0, 0, 0, 0, 0, 0])]); //#24940
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_hanxin.$ctx[id] = $_[id]); //#24940
        bwipp_hanxin.__24941__ = 1; //#24940
        $_ = Object.getPrototypeOf($_); //#24940
    } //#24940
    for (var _Qd = 0, _Qc = $_.fpat.length - 1; _Qd <= _Qc; _Qd += 1) { //#24953
        $_.y = _Qd; //#24943
        for (var _Qh = 0, _Qg = $get($_.fpat, 0).length - 1; _Qh <= _Qg; _Qh += 1) { //#24952
            $_.x = _Qh; //#24945
            $_.fpb = $get($get($_.fpat, $_.y), $_.x); //#24946
            $_.fpb2 = $get($get($_.fpat2, $_.y), $_.x); //#24947
            $k[$j++] = $_.pixs; //#24948
            $k[$j++] = $_.x; //#24948
            $k[$j++] = $_.y; //#24948
            $_.qmv(); //#24948
            var _Qw = $k[--$j]; //#24948
            $put($k[--$j], _Qw, $_.fpb); //#24948
            $k[$j++] = $_.pixs; //#24949
            $k[$j++] = $f($f($_.size - $_.x) - 1); //#24949
            $k[$j++] = $_.y; //#24949
            $_.qmv(); //#24949
            var _R3 = $k[--$j]; //#24949
            $put($k[--$j], _R3, $_.fpb); //#24949
            $k[$j++] = $_.pixs; //#24950
            $k[$j++] = $f($f($_.size - $_.x) - 1); //#24950
            $k[$j++] = $f($f($_.size - $_.y) - 1); //#24950
            $_.qmv(); //#24950
            var _RB = $k[--$j]; //#24950
            $put($k[--$j], _RB, $_.fpb); //#24950
            $k[$j++] = $_.pixs; //#24951
            $k[$j++] = $_.x; //#24951
            $k[$j++] = $f($f($_.size - $_.y) - 1); //#24951
            $_.qmv(); //#24951
            var _RI = $k[--$j]; //#24951
            $put($k[--$j], _RI, $_.fpb2); //#24951
        } //#24951
    } //#24951
    $_.functionmap = $a([$a([$a([0, 8]), $a([$f($_.size - 1), $f($_.size - 9)])]), $a([$a([1, 8]), $a([$f($_.size - 2), $f($_.size - 9)])]), $a([$a([2, 8]), $a([$f($_.size - 3), $f($_.size - 9)])]), $a([$a([3, 8]), $a([$f($_.size - 4), $f($_.size - 9)])]), $a([$a([4, 8]), $a([$f($_.size - 5), $f($_.size - 9)])]), $a([$a([5, 8]), $a([$f($_.size - 6), $f($_.size - 9)])]), $a([$a([6, 8]), $a([$f($_.size - 7), $f($_.size - 9)])]), $a([$a([7, 8]), $a([$f($_.size - 8), $f($_.size - 9)])]), $a([$a([8, 8]), $a([$f($_.size - 9), $f($_.size - 9)])]), $a([$a([8, 7]), $a([$f($_.size - 9), $f($_.size - 8)])]), $a([$a([8, 6]), $a([$f($_.size - 9), $f($_.size - 7)])]), $a([$a([8, 5]), $a([$f($_.size - 9), $f($_.size - 6)])]), $a([$a([8, 4]), $a([$f($_.size - 9), $f($_.size - 5)])]), $a([$a([8, 3]), $a([$f($_.size - 9), $f($_.size - 4)])]), $a([$a([8, 2]), $a([$f($_.size - 9), $f($_.size - 3)])]), $a([$a([8, 1]), $a([$f($_.size - 9), $f($_.size - 2)])]), $a([$a([8, 0]), $a([$f($_.size - 9), $f($_.size - 1)])]), $a([$a([$f($_.size - 9), 0]), $a([8, $f($_.size - 1)])]), $a([$a([$f($_.size - 9), 1]), $a([8, $f($_.size - 2)])]), $a([$a([$f($_.size - 9), 2]), $a([8, $f($_.size - 3)])]), $a([$a([$f($_.size - 9), 3]), $a([8, $f($_.size - 4)])]), $a([$a([$f($_.size - 9), 4]), $a([8, $f($_.size - 5)])]), $a([$a([$f($_.size - 9), 5]), $a([8, $f($_.size - 6)])]), $a([$a([$f($_.size - 9), 6]), $a([8, $f($_.size - 7)])]), $a([$a([$f($_.size - 9), 7]), $a([8, $f($_.size - 8)])]), $a([$a([$f($_.size - 9), 8]), $a([8, $f($_.size - 9)])]), $a([$a([$f($_.size - 8), 8]), $a([7, $f($_.size - 9)])]), $a([$a([$f($_.size - 7), 8]), $a([6, $f($_.size - 9)])]), $a([$a([$f($_.size - 6), 8]), $a([5, $f($_.size - 9)])]), $a([$a([$f($_.size - 5), 8]), $a([4, $f($_.size - 9)])]), $a([$a([$f($_.size - 4), 8]), $a([3, $f($_.size - 9)])]), $a([$a([$f($_.size - 3), 8]), $a([2, $f($_.size - 9)])]), $a([$a([$f($_.size - 2), 8]), $a([1, $f($_.size - 9)])]), $a([$a([$f($_.size - 1), 8]), $a([0, $f($_.size - 9)])])]); //#24975
    var _U5 = $_.functionmap; //#24976
    for (var _U6 = 0, _U7 = _U5.length; _U6 < _U7; _U6++) { //#24978
        $forall($get(_U5, _U6), function() { //#24977
            $forall($k[--$j]); //#24977
            $_.qmv(); //#24977
            $put($_.pixs, $k[--$j], 0); //#24977
        }); //#24977
    } //#24977
    var _UI = $a([function() {
        $j -= 2; //#24981
        $k[$j++] = 1; //#24981
    }, function() {
        var _UC = $k[--$j]; //#24982
        var _UD = $k[--$j]; //#24982
        $k[$j++] = $f(_UD + _UC) % 2; //#24982
    }, function() {
        var _UE = $k[--$j]; //#24983
        var _UF = $k[--$j]; //#24983
        $k[$j++] = ($f(($f(_UE + _UF) % 3) + (_UF % 3))) % 2; //#24983
    }, function() {
        var _UG = $k[--$j]; //#24984
        var _UH = $k[--$j]; //#24984
        $k[$j++] = ($f((_UH % _UG) + ($f((_UG % _UH) + ($f((_UG % 3) + (_UH % 3))))))) % 2; //#24985
    }]); //#24985
    $_.maskfuncs = _UI; //#24986
    if ($_.mask != -1) { //#24990
        $_.maskfuncs = $a([$get($_.maskfuncs, $_.mask - 1)]); //#24988
        $_.bestmaskval = $_.mask - 1; //#24989
    } //#24989
    $_.masks = $a($_.maskfuncs.length); //#24991
    for (var _UT = 0, _US = $_.masks.length - 1; _UT <= _US; _UT += 1) { //#25005
        $_.m = _UT; //#24993
        $_.mask = $a($_.size * $_.size); //#24994
        for (var _UZ = 0, _UY = $f($_.size - 1); _UZ <= _UY; _UZ += 1) { //#25003
            $_.j = _UZ; //#24996
            for (var _Uc = 0, _Ub = $f($_.size - 1); _Uc <= _Ub; _Uc += 1) { //#25002
                $_.i = _Uc; //#24998
                $k[$j++] = $_.i + 1; //#24999
                $k[$j++] = $_.j + 1; //#24999
                if ($get($_.maskfuncs, $_.m)() === true) {
                    break;
                } //#24999
                var _Ui = $k[--$j]; //#24999
                $k[$j++] = _Ui == 0; //#25000
                $k[$j++] = $_.pixs; //#25000
                $k[$j++] = $_.i; //#25000
                $k[$j++] = $_.j; //#25000
                $_.qmv(); //#25000
                var _Um = $k[--$j]; //#25000
                var _Uo = $get($k[--$j], _Um); //#25000
                var _Up = $k[--$j]; //#25000
                var _Uq = (_Up && (_Uo == -1)) ? 1 : 0; //#25000
                $k[$j++] = _Uq; //#25001
                $k[$j++] = $_.mask; //#25001
                $k[$j++] = $_.i; //#25001
                $k[$j++] = $_.j; //#25001
                $_.qmv(); //#25001
                $r(3, -1); //#25001
                var _Uu = $k[--$j]; //#25001
                var _Uv = $k[--$j]; //#25001
                $put($k[--$j], _Uv, _Uu); //#25001
            } //#25001
        } //#25001
        $put($_.masks, $_.m, $_.mask); //#25004
    } //#25004
    $_.posx = 0; //#25008
    $_.posy = 0; //#25009
    $_.num = 0; //#25010
    for (;;) { //#25020
        if ($_.posy == $_.size) { //#25012
            break; //#25012
        } //#25012
        $k[$j++] = $_.pixs; //#25013
        $k[$j++] = $_.posx; //#25013
        $k[$j++] = $_.posy; //#25013
        $_.qmv(); //#25013
        var _V5 = $k[--$j]; //#25013
        if ($get($k[--$j], _V5) == -1) { //#25017
            var _VA = $get($_.cws, ~~($_.num / 8)); //#25014
            var _VC = -(7 - ($_.num % 8)); //#25014
            $k[$j++] = ((_VC < 0 ? _VA >>> -_VC : _VA << _VC)) & 1; //#25015
            $k[$j++] = $_.pixs; //#25015
            $k[$j++] = $_.posx; //#25015
            $k[$j++] = $_.posy; //#25015
            $_.qmv(); //#25015
            $r(3, -1); //#25015
            var _VG = $k[--$j]; //#25015
            var _VH = $k[--$j]; //#25015
            $put($k[--$j], _VH, _VG); //#25015
            $_.num = $_.num + 1; //#25016
        } //#25016
        $_.posx = $_.posx + 1; //#25018
        if ($_.posx == $_.size) { //#25019
            $_.posx = 0; //#25019
            $_.posy = $_.posy + 1; //#25019
        } //#25019
    } //#25019
    $_.evalfulln1n3 = function() {
        $_.scrle = $k[--$j]; //#25024
        $k[$j++] = 'scr1'; //#25026
        $k[$j++] = 0; //#25026
        $forall($_.scrle, function() { //#25026
            var _VQ = $k[--$j]; //#25026
            $k[$j++] = _VQ; //#25026
            if (_VQ >= 3) { //#25026
                var _VR = $k[--$j]; //#25026
                var _VT = $f($k[--$j] + (_VR * 4)); //#25026
                $k[$j++] = _VT; //#25026
                $k[$j++] = _VT; //#25026
            } //#25026
            $j--; //#25026
        }); //#25026
        var _VU = $k[--$j]; //#25026
        $_[$k[--$j]] = _VU; //#25026
        $_.scr3 = 0; //#25027
        for (var _VY = 5, _VX = $_.scrle.length - 1; _VY <= _VX; _VY += 2) { //#25043
            $_.j = _VY; //#25030
            if (($get($_.scrle, $_.j) % 3) == 0) { //#25042
                $_.fact = ~~($get($_.scrle, $_.j) / 3); //#25032
                var _Vh = $geti($_.scrle, $_.j - 4, 4); //#25033
                for (var _Vi = 0, _Vj = _Vh.length; _Vi < _Vj; _Vi++) { //#25033
                    $k[$j++] = $get(_Vh, _Vi) == $_.fact; //#25033
                } //#25033
                var _Vm = $k[--$j]; //#25033
                var _Vn = $k[--$j]; //#25033
                var _Vo = $k[--$j]; //#25033
                var _Vp = $k[--$j]; //#25033
                if (_Vp && (_Vo && (_Vn && _Vm))) { //#25041
                    if (($_.j == 5) || (($_.j + 2) >= $_.scrle.length)) { //#25038
                        $_.scr3 = $_.scr3 + 50; //#25035
                    } else { //#25038
                        if (($get($_.scrle, $_.j - 5) >= 3) || ($get($_.scrle, $_.j + 1) >= 3)) { //#25039
                            $_.scr3 = $_.scr3 + 50; //#25038
                        } //#25038
                    } //#25038
                } //#25038
            } //#25038
        } //#25038
        for (var _W3 = 1, _W2 = $_.scrle.length - 5; _W3 <= _W2; _W3 += 2) { //#25059
            $_.j = _W3; //#25046
            if (($get($_.scrle, $_.j) % 3) == 0) { //#25058
                $_.fact = ~~($get($_.scrle, $_.j) / 3); //#25048
                var _WC = $geti($_.scrle, $_.j + 1, 4); //#25049
                for (var _WD = 0, _WE = _WC.length; _WD < _WE; _WD++) { //#25049
                    $k[$j++] = $get(_WC, _WD) == $_.fact; //#25049
                } //#25049
                var _WH = $k[--$j]; //#25049
                var _WI = $k[--$j]; //#25049
                var _WJ = $k[--$j]; //#25049
                var _WK = $k[--$j]; //#25049
                if (_WK && (_WJ && (_WI && _WH))) { //#25057
                    if (($_.j == 1) || (($_.j + 6) >= $_.scrle.length)) { //#25054
                        $_.scr3 = $_.scr3 + 50; //#25051
                    } else { //#25054
                        if (($get($_.scrle, $_.j - 1) >= 3) || ($get($_.scrle, $_.j + 5) >= 3)) { //#25055
                            $_.scr3 = $_.scr3 + 50; //#25054
                        } //#25054
                    } //#25054
                } //#25054
            } //#25054
        } //#25054
        $k[$j++] = $_.scr1; //#25060
        $k[$j++] = $_.scr3; //#25060
    }; //#25060
    $_.evalfull = function() {
        $_.sym = $k[--$j]; //#25065
        $_.n1 = 0; //#25067
        $_.n3 = 0; //#25067
        $_.rle = $a($f($_.size + 1)); //#25068
        $_.lastpairs = $a($_.size); //#25069
        $_.thispairs = $a($_.size); //#25070
        $_.sizeadd1 = $f($_.size + 1); //#25071
        for (var _Wi = 0, _Wh = $f($_.size - 1); _Wi <= _Wh; _Wi += 1) { //#25096
            $_.i = _Wi; //#25073
            $k[$j++] = Infinity; //#25076
            var _Wk = $_.size; //#25077
            $k[$j++] = 0; //#25079
            $k[$j++] = 0; //#25079
            for (var _Wm = $_.i, _Wn = _Wk, _Wl = $f((_Wk * _Wk) - 1); _Wn < 0 ? _Wm >= _Wl : _Wm <= _Wl; _Wm += _Wn) { //#25079
                var _Wp = $get($_.sym, _Wm); //#25078
                var _Wq = $k[--$j]; //#25078
                $k[$j++] = _Wp; //#25078
                if ($eq(_Wq, _Wp)) { //#25078
                    var _Wr = $k[--$j]; //#25078
                    var _Ws = $k[--$j]; //#25078
                    $k[$j++] = $f(_Ws + 1); //#25078
                    $k[$j++] = _Wr; //#25078
                } else { //#25078
                    var _Wt = $k[--$j]; //#25078
                    $k[$j++] = 1; //#25078
                    $k[$j++] = _Wt; //#25078
                } //#25078
            } //#25078
            $j--; //#25080
            var _Wv = $counttomark() + 2; //#25081
            $astore($geti($_.rle, 0, _Wv - 2)); //#25081
            $_.evalfulln1n3(); //#25082
            $_.n3 = $f($k[--$j] + $_.n3); //#25082
            $_.n1 = $f($k[--$j] + $_.n1); //#25082
            $j--; //#25083
            $_.symrow = $geti($_.sym, $_.i * $_.size, $_.size); //#25086
            $k[$j++] = Infinity; //#25087
            var _X6 = $_.symrow; //#25088
            $k[$j++] = 0; //#25090
            $k[$j++] = 0; //#25090
            for (var _X7 = 0, _X8 = _X6.length; _X7 < _X8; _X7++) { //#25090
                var _X9 = $get(_X6, _X7); //#25090
                var _XA = $k[--$j]; //#25089
                $k[$j++] = _X9; //#25089
                if ($eq(_XA, _X9)) { //#25089
                    var _XB = $k[--$j]; //#25089
                    var _XC = $k[--$j]; //#25089
                    $k[$j++] = $f(_XC + 1); //#25089
                    $k[$j++] = _XB; //#25089
                } else { //#25089
                    var _XD = $k[--$j]; //#25089
                    $k[$j++] = 1; //#25089
                    $k[$j++] = _XD; //#25089
                } //#25089
            } //#25089
            $j--; //#25091
            var _XF = $counttomark() + 2; //#25092
            $astore($geti($_.rle, 0, _XF - 2)); //#25092
            $_.evalfulln1n3(); //#25093
            $_.n3 = $f($k[--$j] + $_.n3); //#25093
            $_.n1 = $f($k[--$j] + $_.n1); //#25093
            $j--; //#25094
        } //#25094
        $k[$j++] = $f($_.n1 + $_.n3); //#25098
    }; //#25098
    $_.bestscore = 999999999; //#25102
    for (var _XP = 0, _XO = $_.masks.length - 1; _XP <= _XO; _XP += 1) { //#25120
        $_.m = _XP; //#25104
        $_.masksym = $a($_.size * $_.size); //#25105
        for (var _XW = 0, _XV = $f(($_.size * $_.size) - 1); _XW <= _XV; _XW += 1) { //#25109
            $_.i = _XW; //#25107
            $put($_.masksym, $_.i, $xo($get($_.pixs, $_.i), $get($get($_.masks, $_.m), $_.i))); //#25108
        } //#25108
        if ($_.masks.length != 1) { //#25118
            $k[$j++] = $_.masksym; //#25111
            $_.evalfull(); //#25111
            $_.score = $k[--$j]; //#25111
            if ($_.score < $_.bestscore) { //#25116
                $_.bestsym = $_.masksym; //#25113
                $_.bestmaskval = $_.m; //#25114
                $_.bestscore = $_.score; //#25115
            } //#25115
        } else { //#25118
            $_.bestsym = $_.masksym; //#25118
        } //#25118
    } //#25118
    $_.pixs = $_.bestsym; //#25121
    $_.funval = (((((~~($f($_.size - 21) / 2)) + 20) * 4) + $_.eclval) * 4) + $_.bestmaskval; //#25124
    $k[$j++] = $a([($_.funval & 3840) >>> 8, ($_.funval & 240) >>> 4, $_.funval & 15]); //#25128
    $k[$j++] = 4; //#25128
    $k[$j++] = 16; //#25128
    $k[$j++] = 19; //#25128
    $_.rscodes(); //#25128
    $_.funvals = $k[--$j]; //#25128
    $k[$j++] = Infinity; //#25129
    $forall($_.funvals, function() { //#25132
        $k[$j++] = 4; //#25131
        $_.tobin(); //#25131
        $forall($k[--$j], function() { //#25131
            var _Y1 = $k[--$j]; //#25131
            $k[$j++] = $f(_Y1 - 48); //#25131
        }); //#25131
    }); //#25131
    $k[$j++] = 0; //#25133
    $k[$j++] = 1; //#25133
    $k[$j++] = 0; //#25133
    $k[$j++] = 1; //#25133
    $k[$j++] = 0; //#25133
    $k[$j++] = 1; //#25133
    $_.funbits = $a(); //#25133
    for (var _Y5 = 0, _Y4 = $_.functionmap.length - 1; _Y5 <= _Y4; _Y5 += 1) { //#25140
        $_.i = _Y5; //#25136
        $forall($get($_.functionmap, $_.i), function() { //#25139
            var _YA = $k[--$j]; //#25138
            $k[$j++] = $_.pixs; //#25138
            $aload(_YA); //#25138
            $_.qmv(); //#25138
            var _YE = $k[--$j]; //#25138
            $put($k[--$j], _YE, $get($_.funbits, $_.i)); //#25138
        }); //#25138
    } //#25138
    var _YM = new Map([
        ["ren", 'renmatrix'],
        ["pixs", $_.pixs],
        ["pixx", $_.size],
        ["pixy", $_.size],
        ["height", ($_.size * 2) / 72],
        ["width", ($_.size * 2) / 72],
        ["borderleft", 3],
        ["borderright", 3],
        ["bordertop", 3],
        ["borderbottom", 3],
        ["opt", $_.options]
    ]); //#25154
    $k[$j++] = _YM; //#25157
    if (!$_.dontdraw) { //#25157
        bwipp_renmatrix(); //#25157
    } //#25157
    $_ = Object.getPrototypeOf($_); //#25159
    $_ = Object.getPrototypeOf($_); //#25161
} //bwipp_hanxin
function bwipp_dotcode() {
    $_ = Object.create($_); //#25192
    $_.dontdraw = false; //#25195
    $_.rows = -1; //#25196
    $_.columns = -1; //#25197
    $_.ratio = -1; //#25198
    $_.parse = false; //#25199
    $_.parsefnc = false; //#25200
    $_.raw = false; //#25201
    $_.fast = false; //#25202
    $_.mask = -1; //#25203
    $k[$j++] = $_; //#25205
    bwipp_processoptions(); //#25205
    $_.options = $k[--$j]; //#25205
    $_.barcode = $k[--$j]; //#25206
    if ($_.rows != -1) { //#25212
        if ($_.rows < 5) { //#25211
            $k[$j++] = 'bwipp.dotcodeBadRows#25210'; //#25210
            $k[$j++] = "There must be at least 5 rows"; //#25210
            bwipp_raiseerror(); //#25210
        } //#25210
    } //#25210
    if ($_.columns != -1) { //#25218
        if ($_.columns < 5) { //#25217
            $k[$j++] = 'bwipp.dotcodeBadColumns#25216'; //#25216
            $k[$j++] = "There must be at least 5 columns"; //#25216
            bwipp_raiseerror(); //#25216
        } //#25216
    } //#25216
    if ((($_.rows != -1) && ($_.columns != -1)) && ((($_.rows + $_.columns) % 2) != 1)) { //#25222
        $k[$j++] = 'bwipp.dotcodeRowsColumnsBadParity#25221'; //#25221
        $k[$j++] = "Sum of rows and columns must be odd"; //#25221
        bwipp_raiseerror(); //#25221
    } //#25221
    if ((($_.ratio == -1) && ($_.rows == -1)) && ($_.columns == -1)) { //#25227
        $_.ratio = 3 / 2; //#25226
    } //#25226
    if ($_.ratio != -1) { //#25232
        if ($_.ratio <= 0) { //#25231
            $k[$j++] = 'bwipp.dotcodeRatio#25230'; //#25230
            $k[$j++] = "The ratio must be greater than 0"; //#25230
            bwipp_raiseerror(); //#25230
        } //#25230
    } //#25230
    if ($_.mask != -1) { //#25238
        if (($_.mask < 0) || ($_.mask > 3)) { //#25237
            $k[$j++] = 'bwipp.dotcodeBadMask#25236'; //#25236
            $k[$j++] = "Valid mask values are 0 to 3"; //#25236
            bwipp_raiseerror(); //#25236
        } //#25236
    } //#25236
    bwipp_loadctx(bwipp_dotcode); //#25240
    if (!bwipp_dotcode.__25253__) { //#25253
        $_ = Object.create($_); //#25253
        $_.laa = -1; //#25244
        $_.lab = -2; //#25244
        $_.lac = -3; //#25244
        $_.bin = -4; //#25244
        $_.sfa = -5; //#25245
        $_.sfb = -6; //#25245
        $_.sb2 = -7; //#25245
        $_.sb3 = -8; //#25245
        $_.sb4 = -9; //#25246
        $_.sb5 = -10; //#25246
        $_.sb6 = -11; //#25246
        $_.sfc = -12; //#25246
        $_.sc2 = -13; //#25247
        $_.sc3 = -14; //#25247
        $_.sc4 = -15; //#25247
        $_.sc5 = -16; //#25247
        $_.sc6 = -17; //#25248
        $_.sc7 = -18; //#25248
        $_.bsa = -19; //#25248
        $_.bsb = -20; //#25248
        $_.tma = -21; //#25249
        $_.tmb = -22; //#25249
        $_.tmc = -23; //#25249
        $_.tms = -24; //#25249
        $_.fn1 = -25; //#25250
        $_.fn2 = -26; //#25250
        $_.fn3 = -27; //#25250
        $_.crl = -28; //#25250
        $_.aim = -29; //#25251
        $_.m05 = -30; //#25251
        $_.m06 = -31; //#25251
        $_.m12 = -32; //#25251
        $_.mac = -33; //#25252
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_dotcode.$ctx[id] = $_[id]); //#25252
        bwipp_dotcode.__25253__ = 1; //#25252
        $_ = Object.getPrototypeOf($_); //#25252
    } //#25252
    var _N = new Map([
        ["parse", $_.parse],
        ["parsefnc", $_.parsefnc],
        ["eci", true],
        ["FNC1", $_.fn1],
        ["FNC3", $_.fn3]
    ]); //#25262
    $_.fncvals = _N; //#25263
    $k[$j++] = 'msg'; //#25264
    $k[$j++] = $_.barcode; //#25264
    $k[$j++] = $_.fncvals; //#25264
    bwipp_parseinput(); //#25264
    var _Q = $k[--$j]; //#25264
    $_[$k[--$j]] = _Q; //#25264
    $_.msglen = $_.msg.length; //#25265
    var _T = $_.msg; //#25268
    $k[$j++] = 'numecis'; //#25268
    $k[$j++] = 0; //#25268
    for (var _U = 0, _V = _T.length; _U < _V; _U++) { //#25268
        if ($get(_T, _U) <= -1000000) { //#25268
            var _X = $k[--$j]; //#25268
            $k[$j++] = $f(_X + 1); //#25268
        } //#25268
    } //#25268
    var _Y = $k[--$j]; //#25268
    $_[$k[--$j]] = _Y; //#25268
    $_.msgtmp = $a($f($_.msg.length + ($_.numecis * 6))); //#25269
    $_.j = 0; //#25270
    for (var _f = 0, _e = $_.msg.length - 1; _f <= _e; _f += 1) { //#25281
        var _h = $get($_.msg, _f); //#25272
        $k[$j++] = _h; //#25280
        if (_h <= -1000000) { //#25279
            var _l = $geti($cvrs($s(7), -$k[--$j], 10), 1, 6); //#25273
            for (var _m = 0, _n = _l.length; _m < _n; _m++) { //#25273
                $k[$j++] = $get(_l, _m); //#25273
            } //#25273
            $astore($a(6)); //#25273
            $puti($_.msgtmp, $_.j + 1, $k[--$j]); //#25274
            $put($_.msgtmp, $_.j, $_.fn2); //#25275
            $_.j = $_.j + 7; //#25276
        } else { //#25279
            $put($_.msgtmp, $_.j, $k[--$j]); //#25278
            $_.j = $_.j + 1; //#25279
        } //#25279
    } //#25279
    $_.msg = $_.msgtmp; //#25282
    $_.msglen = $_.msg.length; //#25283
    if (!bwipp_dotcode.__25352__) { //#25352
        $_ = Object.create($_); //#25352
        $_.charmaps = $a([$a([32, 32, "00"]), $a(["!", "!", "01"]), $a(["\"", "\"", "02"]), $a(["#", "#", "03"]), $a(["$", "$", "04"]), $a(["%", "%", "05"]), $a(["&", "&", "06"]), $a(["'", "'", "07"]), $a([40, 40, "08"]), $a([41, 41, "09"]), $a(["*", "*", "10"]), $a(["+", "+", "11"]), $a([",", ",", "12"]), $a(["-", "-", "13"]), $a([".", ".", "14"]), $a(["/", "/", "15"]), $a(["0", "0", "16"]), $a(["1", "1", "17"]), $a(["2", "2", "18"]), $a(["3", "3", "19"]), $a(["4", "4", "20"]), $a(["5", "5", "21"]), $a(["6", "6", "22"]), $a(["7", "7", "23"]), $a(["8", "8", "24"]), $a(["9", "9", "25"]), $a([":", ":", "26"]), $a([";", ";", "27"]), $a(["<", "<", "28"]), $a(["=", "=", "29"]), $a([">", ">", "30"]), $a(["?", "?", "31"]), $a(["@", "@", "32"]), $a(["A", "A", "33"]), $a(["B", "B", "34"]), $a(["C", "C", "35"]), $a(["D", "D", "36"]), $a(["E", "E", "37"]), $a(["F", "F", "38"]), $a(["G", "G", "39"]), $a(["H", "H", "40"]), $a(["I", "I", "41"]), $a(["J", "J", "42"]), $a(["K", "K", "43"]), $a(["L", "L", "44"]), $a(["M", "M", "45"]), $a(["N", "N", "46"]), $a(["O", "O", "47"]), $a(["P", "P", "48"]), $a(["Q", "Q", "49"]), $a(["R", "R", "50"]), $a(["S", "S", "51"]), $a(["T", "T", "52"]), $a(["U", "U", "53"]), $a(["V", "V", "54"]), $a(["W", "W", "55"]), $a(["X", "X", "56"]), $a(["Y", "Y", "57"]), $a(["Z", "Z", "58"]), $a(["[", "[", "59"]), $a([92, 92, "60"]), $a(["]", "]", "61"]), $a(["^", "^", "62"]), $a(["_", "_", "63"]), $a([0, "`", "64"]), $a([1, "a", "65"]), $a([2, "b", "66"]), $a([3, "c", "67"]), $a([4, "d", "68"]), $a([5, "e", "69"]), $a([6, "f", "70"]), $a([7, "g", "71"]), $a([8, "h", "72"]), $a([9, "i", "73"]), $a([10, "j", "74"]), $a([11, "k", "75"]), $a([12, "l", "76"]), $a([13, "m", "77"]), $a([14, "n", "78"]), $a([15, "o", "79"]), $a([16, "p", "80"]), $a([17, "q", "81"]), $a([18, "r", "82"]), $a([19, "s", "83"]), $a([20, "t", "84"]), $a([21, "u", "85"]), $a([22, "v", "86"]), $a([23, "w", "87"]), $a([24, "x", "88"]), $a([25, "y", "89"]), $a([26, "z", "90"]), $a([27, "{", "91"]), $a([28, "|", "92"]), $a([29, "}", "93"]), $a([30, "~", "94"]), $a([31, 127, "95"]), $a([$_.sfb, $_.crl, "96"]), $a([$_.sb2, 9, "97"]), $a([$_.sb3, 28, "98"]), $a([$_.sb4, 29, "99"]), $a([$_.sb5, 30, $_.aim]), $a([$_.sb6, $_.sfa, $_.laa]), $a([$_.lab, $_.laa, $_.sfb]), $a([$_.sc2, $_.sc2, $_.sb2]), $a([$_.sc3, $_.sc3, $_.sb3]), $a([$_.sc4, $_.sc4, $_.sb4]), $a([$_.lac, $_.lac, $_.lab]), $a([$_.fn1, $_.fn1, $_.fn1]), $a([$_.fn2, $_.fn2, $_.fn2]), $a([$_.fn3, $_.fn3, $_.fn3]), $a([$_.bsa, $_.bsa, $_.bsa]), $a([$_.bsb, $_.bsb, $_.bsb]), $a([$_.bin, $_.bin, $_.bin])]); //#25327
        $_.charvals = $a([new Map, new Map, new Map]); //#25330
        for (var _3d = 0, _3c = $_.charmaps.length - 1; _3d <= _3c; _3d += 1) { //#25339
            $_.i = _3d; //#25332
            $_.encs = $get($_.charmaps, $_.i); //#25333
            for (var _3h = 0; _3h <= 2; _3h += 1) { //#25338
                $_.j = _3h; //#25335
                var _3k = $get($_.encs, $_.j); //#25336
                $k[$j++] = _3k; //#25336
                if ($eq($type(_3k), 'stringtype')) { //#25336
                    var _3n = $get($k[--$j], 0); //#25336
                    $k[$j++] = _3n; //#25336
                } //#25336
                $put($get($_.charvals, $_.j), $k[--$j], $_.i); //#25337
            } //#25337
        } //#25337
        $_.Avals = $get($_.charvals, 0); //#25340
        $_.Bvals = $get($_.charvals, 1); //#25341
        $put($_.Bvals, $_.m05, 97); //#25342
        $put($_.Bvals, $_.m06, 98); //#25343
        $put($_.Bvals, $_.m12, 99); //#25344
        $put($_.Bvals, $_.mac, 100); //#25345
        $_.Cvals = $get($_.charvals, 2); //#25346
        $k[$j++] = Infinity; //#25347
        var _4H = $a([$_.sc2, $_.sc3, $_.sc4, $_.sc5, $_.sc6, $_.sc7, $_.tma, $_.tmb, $_.tmc, $_.tms]); //#25348
        $k[$j++] = 102; //#25348
        for (var _4I = 0, _4J = _4H.length; _4I < _4J; _4I++) { //#25348
            var _4M = $f($k[--$j] + 1); //#25348
            $k[$j++] = $get(_4H, _4I); //#25348
            $k[$j++] = _4M; //#25348
            $k[$j++] = _4M; //#25348
        } //#25348
        $j--; //#25348
        $_.BINvals = $d(); //#25349
        $_.A = 0; //#25351
        $_.B = 1; //#25351
        $_.C = 2; //#25351
        $_.BIN = 3; //#25351
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_dotcode.$ctx[id] = $_[id]); //#25351
        bwipp_dotcode.__25352__ = 1; //#25351
        $_ = Object.getPrototypeOf($_); //#25351
    } //#25351
    $k[$j++] = Infinity; //#25355
    for (var _4Q = 0, _4R = $_.msglen + 1; _4Q < _4R; _4Q++) { //#25355
        $k[$j++] = 0; //#25355
    } //#25355
    $_.nDigits = $a(); //#25355
    $k[$j++] = Infinity; //#25356
    for (var _4U = 0, _4V = $_.msglen + 1; _4U < _4V; _4U++) { //#25356
        $k[$j++] = false; //#25356
    } //#25356
    $_.SeventeenTen = $a(); //#25356
    $k[$j++] = Infinity; //#25357
    for (var _4Y = 0, _4Z = $_.msglen + 1; _4Y < _4Z; _4Y++) { //#25357
        $k[$j++] = false; //#25357
    } //#25357
    $_.ECI = $a(); //#25357
    $k[$j++] = Infinity; //#25358
    for (var _4c = 0, _4d = $_.msglen + 1; _4c < _4d; _4c++) { //#25358
        $k[$j++] = false; //#25358
    } //#25358
    $_.DatumA = $a(); //#25358
    $k[$j++] = Infinity; //#25359
    for (var _4g = 0, _4h = $_.msglen + 1; _4g < _4h; _4g++) { //#25359
        $k[$j++] = false; //#25359
    } //#25359
    $_.DatumB = $a(); //#25359
    $k[$j++] = Infinity; //#25360
    for (var _4k = 0, _4l = $_.msglen + 1; _4k < _4l; _4k++) { //#25360
        $k[$j++] = false; //#25360
    } //#25360
    $_.DatumC = $a(); //#25360
    $k[$j++] = Infinity; //#25361
    for (var _4o = 0, _4p = $_.msglen + 8; _4o < _4p; _4o++) { //#25361
        $k[$j++] = false; //#25361
    } //#25361
    $_.Binary = $a(); //#25361
    $k[$j++] = Infinity; //#25362
    for (var _4s = 0, _4t = $_.msglen + 1; _4s < _4t; _4s++) { //#25362
        $k[$j++] = 0; //#25362
    } //#25362
    $_.AheadC = $a(); //#25362
    $k[$j++] = Infinity; //#25363
    for (var _4w = 0, _4x = $_.msglen + 1; _4w < _4x; _4w++) { //#25363
        $k[$j++] = 0; //#25363
    } //#25363
    $_.TryC = $a(); //#25363
    $k[$j++] = Infinity; //#25364
    for (var _50 = 0, _51 = $_.msglen + 1; _50 < _51; _50++) { //#25364
        $k[$j++] = 0; //#25364
    } //#25364
    $_.AheadA = $a(); //#25364
    $k[$j++] = Infinity; //#25365
    for (var _54 = 0, _55 = $_.msglen + 1; _54 < _55; _54++) { //#25365
        $k[$j++] = 0; //#25365
    } //#25365
    $_.AheadB = $a(); //#25365
    $k[$j++] = Infinity; //#25366
    for (var _58 = 0, _59 = $_.msglen + 1; _58 < _59; _58++) { //#25366
        $k[$j++] = 0; //#25366
    } //#25366
    $_.UntilEndSeg = $a(); //#25366
    for (var _5C = $_.msglen - 1; _5C >= 0; _5C -= 1) { //#25421
        $_.i = _5C; //#25368
        $_.barchar = $get($_.msg, $_.i); //#25369
        if (($_.barchar >= 48) && ($_.barchar <= 57)) { //#25372
            $put($_.nDigits, $_.i, $f($get($_.nDigits, $_.i + 1) + 1)); //#25371
        } //#25371
        var _5P = $get($_.Avals, $_.barchar) !== undefined; //#25373
        if (_5P) { //#25373
            $put($_.DatumA, $_.i, true); //#25373
        } //#25373
        var _5U = $get($_.Bvals, $_.barchar) !== undefined; //#25374
        if (_5U) { //#25374
            $put($_.DatumB, $_.i, true); //#25374
        } //#25374
        $_.CRLF = false; //#25375
        if (($_.barchar == 13) && ($_.i < ($_.msglen - 1))) { //#25378
            if ($get($_.msg, $_.i + 1) == 10) { //#25377
                $_.CRLF = true; //#25377
            } //#25377
        } //#25377
        if ($_.CRLF) { //#25379
            $put($_.DatumB, $_.i, true); //#25379
        } //#25379
        if ($get($_.nDigits, $_.i) >= 2) { //#25380
            $put($_.DatumC, $_.i, true); //#25380
        } //#25380
        if ($_.barchar < 0) { //#25381
            $put($_.DatumC, $_.i, true); //#25381
        } //#25381
        if ($_.barchar >= 128) { //#25382
            $put($_.Binary, $_.i, true); //#25382
        } //#25382
        if ($get($_.nDigits, $_.i) >= 10) { //#25396
            $k[$j++] = Infinity; //#25384
            $aload($geti($_.msg, $_.i, 10)); //#25385
            for (var _5x = 0, _5y = 1; _5x < _5y; _5x++) { //#25393
                if ($k[--$j] != 48) { //#25387
                    $k[$j++] = false; //#25387
                    break; //#25387
                } //#25387
                if ($k[--$j] != 49) { //#25388
                    $k[$j++] = false; //#25388
                    break; //#25388
                } //#25388
                $j -= 6; //#25389
                if ($k[--$j] != 55) { //#25390
                    $k[$j++] = false; //#25390
                    break; //#25390
                } //#25390
                if ($k[--$j] != 49) { //#25391
                    $k[$j++] = false; //#25391
                    break; //#25391
                } //#25391
                $k[$j++] = true; //#25392
            } //#25392
            $k[$j++] = $_.SeventeenTen; //#25394
            $k[$j++] = $_.i; //#25394
            $r(3, -1); //#25394
            var _65 = $k[--$j]; //#25394
            var _66 = $k[--$j]; //#25394
            $put($k[--$j], _66, _65); //#25394
            $cleartomark(); //#25395
        } //#25395
        if (($get($_.nDigits, $_.i + 1) >= 6) && ($get($_.msg, $_.i) == $_.fn2)) { //#25399
            $put($_.ECI, $_.i, true); //#25398
        } //#25398
        if (($_.barchar < 0) && ($_.barchar != $_.fn3)) { //#25406
            $put($_.AheadC, $_.i, $f($get($_.AheadC, $_.i + 1) + 1)); //#25401
        } else { //#25406
            if ($get($_.nDigits, $_.i) <= 1) { //#25406
                $put($_.AheadC, $_.i, 0); //#25404
            } else { //#25406
                $put($_.AheadC, $_.i, $f($get($_.AheadC, $_.i + 2) + 1)); //#25406
            } //#25406
        } //#25406
        if (($get($_.nDigits, $_.i) > 0) && $gt($get($_.AheadC, $_.i), $get($_.AheadC, $_.i + 1))) { //#25411
            $put($_.TryC, $_.i, $get($_.AheadC, $_.i)); //#25410
        } //#25410
        if (($get($_.DatumA, $_.i) && ($get($_.TryC, $_.i) < 2)) && ($_.barchar != $_.fn3)) { //#25414
            $put($_.AheadA, $_.i, $f($get($_.AheadA, $_.i + 1) + 1)); //#25413
        } //#25413
        if (($get($_.DatumB, $_.i) && ($get($_.TryC, $_.i) < 2)) && ($_.barchar != $_.fn3)) { //#25417
            $k[$j++] = $_.AheadB; //#25416
            $k[$j++] = $_.i; //#25416
            $k[$j++] = $_.AheadB; //#25416
            $k[$j++] = $_.i + 1; //#25416
            if ($_.CRLF) { //#25416
                var _7D = $k[--$j]; //#25416
                $k[$j++] = $f(_7D + 1); //#25416
            } //#25416
            var _7E = $k[--$j]; //#25416
            var _7G = $get($k[--$j], _7E); //#25416
            var _7H = $k[--$j]; //#25416
            $put($k[--$j], _7H, $f(_7G + 1)); //#25416
        } //#25416
        if ($_.barchar != $_.fn3) { //#25420
            $put($_.UntilEndSeg, $_.i, $f($get($_.UntilEndSeg, $_.i + 1) + 1)); //#25419
        } //#25419
    } //#25419
    $_.addtocws = function() {
        var _7Q = $k[--$j]; //#25424
        $puti($_.cws, $_.j, _7Q); //#25424
        $_.j = _7Q.length + $_.j; //#25425
    }; //#25425
    $_.base259to103 = function() {
        $_.in = $k[--$j]; //#25430
        $_.inlen = $_.in.length; //#25431
        $k[$j++] = Infinity; //#25432
        for (var _7X = 0, _7Y = 5 - $_.inlen; _7X < _7Y; _7X++) { //#25432
            $k[$j++] = 0; //#25432
        } //#25432
        $aload($_.in); //#25432
        $_.in = $a(); //#25432
        $_.out = $a(6); //#25433
        $k[$j++] = Infinity; //#25434
        $aload($geti($_.in, 0, 2)); //#25434
        $_.msbs = $a(); //#25434
        $k[$j++] = Infinity; //#25435
        $aload($_.msbs); //#25436
        var _7g = $k[--$j]; //#25436
        var _7h = $k[--$j]; //#25436
        $k[$j++] = $f(_7g + (_7h * 259)); //#25437
        for (var _7i = 0, _7j = 2; _7i < _7j; _7i++) { //#25437
            var _7k = $k[--$j]; //#25437
            $k[$j++] = _7k % 103; //#25437
            $k[$j++] = ~~(_7k / 103); //#25437
        } //#25437
        $_.mscs = $a(); //#25437
        $k[$j++] = Infinity; //#25439
        $aload($geti($_.in, 2, 3)); //#25439
        $_.lsbs = $a(); //#25439
        $k[$j++] = Infinity; //#25440
        $aload($_.lsbs); //#25441
        var _7q = $k[--$j]; //#25441
        var _7r = $k[--$j]; //#25441
        var _7s = $k[--$j]; //#25441
        $k[$j++] = $f(($f(_7q + (_7r * 259))) + (_7s * 67081)); //#25442
        for (var _7t = 0, _7u = 3; _7t < _7u; _7t++) { //#25442
            var _7v = $k[--$j]; //#25442
            $k[$j++] = _7v % 103; //#25442
            $k[$j++] = ~~(_7v / 103); //#25442
        } //#25442
        $_.lscs = $a(); //#25442
        var _7y = $get($_.lscs, 0); //#25444
        var _80 = $get($_.mscs, 0); //#25444
        $put($_.out, 5, ($f(_7y + (_80 * 42))) % 103); //#25445
        var _83 = $get($_.lscs, 1); //#25446
        var _85 = $get($_.mscs, 0); //#25446
        var _87 = $get($_.mscs, 1); //#25446
        $put($_.out, 4, ($f(($f(($f((~~(($f(_7y + (_80 * 42))) / 103)) + _83)) + (_85 * 68))) + (_87 * 42))) % 103); //#25447
        var _8A = $get($_.lscs, 2); //#25448
        var _8C = $get($_.mscs, 0); //#25448
        var _8E = $get($_.mscs, 1); //#25448
        var _8G = $get($_.mscs, 2); //#25448
        $put($_.out, 3, ($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_7y + (_80 * 42))) / 103)) + _83)) + (_85 * 68))) + (_87 * 42))) / 103)) + _8A)) + (_8C * 92))) + (_8E * 68))) + (_8G * 42))) % 103); //#25449
        var _8J = $get($_.lscs, 3); //#25450
        var _8L = $get($_.mscs, 0); //#25450
        var _8N = $get($_.mscs, 1); //#25450
        var _8P = $get($_.mscs, 2); //#25450
        $put($_.out, 2, ($f(($f(($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_7y + (_80 * 42))) / 103)) + _83)) + (_85 * 68))) + (_87 * 42))) / 103)) + _8A)) + (_8C * 92))) + (_8E * 68))) + (_8G * 42))) / 103)) + _8J)) + (_8L * 15))) + (_8N * 92))) + (_8P * 68))) % 103); //#25451
        var _8S = $get($_.mscs, 1); //#25452
        var _8U = $get($_.mscs, 2); //#25452
        $put($_.out, 1, ($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_7y + (_80 * 42))) / 103)) + _83)) + (_85 * 68))) + (_87 * 42))) / 103)) + _8A)) + (_8C * 92))) + (_8E * 68))) + (_8G * 42))) / 103)) + _8J)) + (_8L * 15))) + (_8N * 92))) + (_8P * 68))) / 103)) + (_8S * 15))) + (_8U * 92))) % 103); //#25453
        $put($_.out, 0, ($f((~~(($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_7y + (_80 * 42))) / 103)) + _83)) + (_85 * 68))) + (_87 * 42))) / 103)) + _8A)) + (_8C * 92))) + (_8E * 68))) + (_8G * 42))) / 103)) + _8J)) + (_8L * 15))) + (_8N * 92))) + (_8P * 68))) / 103)) + (_8S * 15))) + (_8U * 92))) / 103)) + ($get($_.mscs, 2) * 15))) % 103); //#25455
        $k[$j++] = $geti($_.out, (6 - $_.inlen) - 1, $_.inlen + 1); //#25456
    }; //#25456
    $_.finaliseBIN = function() {
        if ($_.bpos != 0) { //#25463
            $k[$j++] = $geti($_.bvals, 0, $_.bpos); //#25461
            $_.base259to103(); //#25461
            $aload($k[--$j]); //#25461
            $_.bpos = 0; //#25462
        } //#25462
    }; //#25462
    $_.addtobin = function() {
        $put($_.bvals, $_.bpos, $k[--$j]); //#25467
        $_.bpos = $_.bpos + 1; //#25468
        if ($_.bpos == 5) { //#25469
            $_.finaliseBIN(); //#25469
        } //#25469
    }; //#25469
    $_.ECIabc = function() {
        var _8p = $geti($_.msg, $_.i + 1, 6); //#25473
        $k[$j++] = 0; //#25473
        for (var _8q = 0, _8r = _8p.length; _8q < _8r; _8q++) { //#25473
            var _8t = $k[--$j]; //#25473
            $k[$j++] = ($f(_8t + $f($get(_8p, _8q) - 48))) * 10; //#25473
        } //#25473
        var _8v = ~~($k[--$j] / 10); //#25474
        $k[$j++] = _8v; //#25478
        if (_8v >= 40) { //#25478
            var _8x = $f($k[--$j] - 40); //#25476
            var _8y = _8x % 12769; //#25477
            $k[$j++] = (~~(_8x / 12769)) + 40; //#25477
            $k[$j++] = ~~(_8y / 113); //#25477
            $k[$j++] = _8y % 113; //#25477
        } //#25477
    }; //#25477
    $_.ECIbin = function() {
        $k[$j++] = Infinity; //#25482
        var _91 = $geti($_.msg, $_.i + 1, 6); //#25483
        $k[$j++] = 0; //#25483
        for (var _92 = 0, _93 = _91.length; _92 < _93; _92++) { //#25483
            var _95 = $k[--$j]; //#25483
            $k[$j++] = ($f(_95 + $f($get(_91, _92) - 48))) * 10; //#25483
        } //#25483
        var _97 = ~~($k[--$j] / 10); //#25484
        $k[$j++] = _97; //#25492
        if (_97 >= 65536) { //#25490
            var _98 = $k[--$j]; //#25485
            var _99 = _98 % 65536; //#25485
            $k[$j++] = 258; //#25485
            $k[$j++] = ~~(_98 / 65536); //#25485
            $k[$j++] = ~~(_99 / 256); //#25485
            $k[$j++] = _99 % 256; //#25485
        } else { //#25490
            var _9A = $k[--$j]; //#25487
            $k[$j++] = _9A; //#25491
            if (_9A >= 256) { //#25490
                var _9B = $k[--$j]; //#25488
                $k[$j++] = 257; //#25488
                $k[$j++] = ~~(_9B / 256); //#25488
                $k[$j++] = _9B % 256; //#25488
            } else { //#25490
                var _9C = $k[--$j]; //#25490
                $k[$j++] = 256; //#25490
                $k[$j++] = _9C; //#25490
            } //#25490
        } //#25490
        var _9D = $a(); //#25490
        for (var _9E = 0, _9F = _9D.length; _9E < _9F; _9E++) { //#25495
            $k[$j++] = $get(_9D, _9E); //#25494
            $_.addtobin(); //#25494
        } //#25494
    }; //#25494
    $_.encC = function() {
        for (var _9H = 0, _9I = 1; _9H < _9I; _9H++) { //#25619
            if ($_.i == $_.segstart) { //#25532
                for (var _9L = 0, _9M = 1; _9L < _9M; _9L++) { //#25517
                    if ($_.i > $f($_.segend - 7)) { //#25502
                        $k[$j++] = 0; //#25502
                        break; //#25502
                    } //#25502
                    if ($get($_.msg, $_.segstart) != 91) { //#25503
                        $k[$j++] = 0; //#25503
                        break; //#25503
                    } //#25503
                    if ($get($_.msg, $_.segstart + 1) != 41) { //#25504
                        $k[$j++] = 0; //#25504
                        break; //#25504
                    } //#25504
                    if ($get($_.msg, $_.segstart + 2) != 62) { //#25505
                        $k[$j++] = 0; //#25505
                        break; //#25505
                    } //#25505
                    if ($get($_.msg, $_.segstart + 3) != 30) { //#25506
                        $k[$j++] = 0; //#25506
                        break; //#25506
                    } //#25506
                    var _9d = $get($_.msg, $_.segstart + 4); //#25507
                    if ((_9d < 48) || (_9d > 57)) { //#25507
                        $k[$j++] = 0; //#25507
                        break; //#25507
                    } //#25507
                    var _9g = $get($_.msg, $_.segstart + 5); //#25508
                    if ((_9g < 48) || (_9g > 57)) { //#25508
                        $k[$j++] = 0; //#25508
                        break; //#25508
                    } //#25508
                    if ($get($_.msg, $f($_.segend - 1)) != 4) { //#25509
                        $k[$j++] = 0; //#25509
                        break; //#25509
                    } //#25509
                    var _9q = $f(($f($get($_.msg, $_.segstart + 4) - 48) * 10) + $f($get($_.msg, $_.segstart + 5) - 48)); //#25511
                    $k[$j++] = _9q; //#25511
                    if ((_9q != 5) && ((_9q != 6) && (_9q != 12))) { //#25511
                        $j--; //#25511
                        $k[$j++] = $_.mac; //#25511
                        break; //#25511
                    } //#25511
                    if ($get($_.msg, $_.segstart + 6) != 29) { //#25512
                        $j--; //#25512
                        $k[$j++] = 0; //#25512
                        break; //#25512
                    } //#25512
                    if ($get($_.msg, $f($_.segend - 2)) != 30) { //#25513
                        $j--; //#25513
                        $k[$j++] = 0; //#25513
                        break; //#25513
                    } //#25513
                    var _9y = $k[--$j]; //#25514
                    $k[$j++] = _9y; //#25514
                    if (_9y == 5) { //#25514
                        $j--; //#25514
                        $k[$j++] = $_.m05; //#25514
                        break; //#25514
                    } //#25514
                    if ($k[--$j] == 6) { //#25515
                        $k[$j++] = $_.m06; //#25515
                        break; //#25515
                    } //#25515
                    $k[$j++] = $_.m12; //#25516
                    break; //#25516
                } //#25516
                $_.inmac = $k[--$j]; //#25518
                if ($_.inmac != 0) { //#25531
                    $k[$j++] = $a([$get($_.Cvals, $_.lab)]); //#25520
                    $_.addtocws(); //#25520
                    $_.mode = $_.B; //#25521
                    $k[$j++] = $a([$get($_.Bvals, $_.inmac)]); //#25522
                    $_.addtocws(); //#25522
                    if ($_.inmac == $_.mac) { //#25528
                        $k[$j++] = $a([$get($_.Bvals, $get($_.msg, $_.segstart + 4))]); //#25524
                        $_.addtocws(); //#25524
                        $k[$j++] = $a([$get($_.Bvals, $get($_.msg, $_.segstart + 5))]); //#25525
                        $_.addtocws(); //#25525
                        $_.i = $_.i + 6; //#25526
                    } else { //#25528
                        $_.i = $_.i + 7; //#25528
                    } //#25528
                    break; //#25530
                } //#25530
            } //#25530
            if ($_.i == $_.segstart) { //#25543
                if ($get($_.nDigits, $_.i) >= 2) { //#25538
                    $k[$j++] = $a([$get($_.Cvals, $_.fn1)]); //#25537
                    $_.addtocws(); //#25537
                } //#25537
                if (($get($_.msg, $_.i) == $_.fn1) && ($get($_.nDigits, $_.i + 1) >= 2)) { //#25542
                    $_.i = $_.i + 1; //#25541
                } //#25541
            } //#25541
            if ($get($_.SeventeenTen, $_.i)) { //#25553
                $k[$j++] = $a([$get($_.Cvals, $_.aim), $f(($f($get($_.msg, $_.i + 2) - 48) * 10) + $f($get($_.msg, $_.i + 3) - 48)), $f(($f($get($_.msg, $_.i + 4) - 48) * 10) + $f($get($_.msg, $_.i + 5) - 48)), $f(($f($get($_.msg, $_.i + 6) - 48) * 10) + $f($get($_.msg, $_.i + 7) - 48))]); //#25550
                $_.addtocws(); //#25550
                $_.i = $_.i + 10; //#25551
                break; //#25552
            } //#25552
            if ($get($_.DatumC, $_.i)) { //#25575
                var _BG = $get($_.msg, $_.i); //#25555
                if ((_BG == $_.fn1) || ((_BG == $_.fn2) || (_BG == $_.fn3))) { //#25571
                    $k[$j++] = $a([$get($_.Cvals, $get($_.msg, $_.i))]); //#25556
                    $_.addtocws(); //#25556
                    if ($get($_.ECI, $_.i)) { //#25561
                        $k[$j++] = Infinity; //#25558
                        $_.ECIabc(); //#25558
                        var _BT = $a(); //#25558
                        $k[$j++] = _BT; //#25558
                        $_.addtocws(); //#25558
                        $_.i = $_.i + 7; //#25559
                        break; //#25560
                    } //#25560
                    if (($get($_.msg, $_.i) == $_.fn3) && ($_.segstart != $_.i)) { //#25568
                        $_.i = $_.i + 1; //#25563
                        $_.inmac = 0; //#25564
                        $_.segstart = $_.i; //#25565
                        $_.segend = $f($_.i + $get($_.UntilEndSeg, $_.i)); //#25566
                        break; //#25567
                    } //#25567
                    $_.i = $_.i + 1; //#25569
                    break; //#25570
                } //#25570
                $k[$j++] = $a([$f(($f($get($_.msg, $_.i) - 48) * 10) + $f($get($_.msg, $_.i + 1) - 48))]); //#25572
                $_.addtocws(); //#25572
                $_.i = $_.i + 2; //#25573
                break; //#25574
            } //#25574
            if ($get($_.Binary, $_.i)) { //#25589
                if ($get($_.nDigits, $_.i + 1) > 0) { //#25585
                    if ($get($_.msg, $_.i) < 160) { //#25581
                        $k[$j++] = $a([$get($_.Cvals, $_.bsa), $get($_.Avals, $f($get($_.msg, $_.i) - 128))]); //#25579
                        $_.addtocws(); //#25579
                    } else { //#25581
                        $k[$j++] = $a([$get($_.Cvals, $_.bsb), $get($_.Bvals, $f($get($_.msg, $_.i) - 128))]); //#25581
                        $_.addtocws(); //#25581
                    } //#25581
                    $_.i = $_.i + 1; //#25583
                    break; //#25584
                } //#25584
                $k[$j++] = $a([$get($_.Cvals, $_.bin)]); //#25586
                $_.addtocws(); //#25586
                $_.mode = $_.BIN; //#25587
                break; //#25588
            } //#25588
            $_.m = $get($_.AheadA, $_.i); //#25590
            $_.n = $get($_.AheadB, $_.i); //#25590
            if ($gt($_.m, $_.n)) { //#25595
                $k[$j++] = $a([$get($_.Cvals, $_.laa)]); //#25592
                $_.addtocws(); //#25592
                $_.mode = $_.A; //#25593
                break; //#25594
            } //#25594
            if ($_.i == $_.segstart) { //#25602
                var _Ce = $get($_.msg, $_.i); //#25597
                if ((_Ce == 9) || ((_Ce == 28) || ((_Ce == 29) || (_Ce == 30)))) { //#25601
                    $k[$j++] = $a([$get($_.Cvals, $_.laa)]); //#25598
                    $_.addtocws(); //#25598
                    $_.mode = $_.A; //#25599
                    break; //#25600
                } //#25600
            } //#25600
            if ($_.n > 4) { //#25607
                $k[$j++] = $a([$get($_.Cvals, $_.lab)]); //#25604
                $_.addtocws(); //#25604
                $_.mode = $_.B; //#25605
                break; //#25606
            } //#25606
            $k[$j++] = $a([$get($_.Cvals, $get($a([$_.sfb, $_.sb2, $_.sb3, $_.sb4]), $f($_.n - 1)))]); //#25608
            $_.addtocws(); //#25608
            for (var _D1 = 0, _D2 = $_.n; _D1 < _D2; _D1++) { //#25617
                if ($get($_.msg, $_.i) == 13) { //#25615
                    $k[$j++] = $a([$get($_.Bvals, $_.crl)]); //#25611
                    $_.addtocws(); //#25611
                    $_.i = $_.i + 2; //#25612
                } else { //#25615
                    $k[$j++] = $a([$get($_.Bvals, $get($_.msg, $_.i))]); //#25614
                    $_.addtocws(); //#25614
                    $_.i = $_.i + 1; //#25615
                } //#25615
            } //#25615
            break; //#25618
        } //#25618
    }; //#25618
    $_.encB = function() {
        for (var _DI = 0, _DJ = 1; _DI < _DJ; _DI++) { //#25695
            $_.n = $get($_.TryC, $_.i); //#25624
            if ($_.n >= 2) { //#25642
                if ($_.n > 4) { //#25630
                    $k[$j++] = $a([$get($_.Bvals, $_.lac)]); //#25627
                    $_.addtocws(); //#25627
                    $_.mode = $_.C; //#25628
                    break; //#25629
                } //#25629
                $k[$j++] = $a([$get($_.Bvals, $get($a([$_.sfc, $_.sc2, $_.sc3, $_.sc4]), $f($_.n - 1)))]); //#25631
                $_.addtocws(); //#25631
                for (var _Df = 0, _Dg = $_.n; _Df < _Dg; _Df++) { //#25640
                    if ($get($_.msg, $_.i) < 0) { //#25638
                        $k[$j++] = $a([$get($_.Cvals, $get($_.msg, $_.i))]); //#25634
                        $_.addtocws(); //#25634
                        $_.i = $_.i + 1; //#25635
                    } else { //#25638
                        $k[$j++] = $a([$f(($f($get($_.msg, $_.i) - 48) * 10) + $f($get($_.msg, $_.i + 1) - 48))]); //#25637
                        $_.addtocws(); //#25637
                        $_.i = $_.i + 2; //#25638
                    } //#25638
                } //#25638
                break; //#25641
            } //#25641
            if ($get($_.DatumB, $_.i)) { //#25672
                var _E4 = $get($_.msg, $_.i); //#25644
                if ((_E4 == $_.fn1) || ((_E4 == $_.fn2) || (_E4 == $_.fn3))) { //#25661
                    $k[$j++] = $a([$get($_.Bvals, $get($_.msg, $_.i))]); //#25645
                    $_.addtocws(); //#25645
                    if ($get($_.ECI, $_.i)) { //#25650
                        $k[$j++] = Infinity; //#25647
                        $_.ECIabc(); //#25647
                        var _EH = $a(); //#25647
                        $k[$j++] = _EH; //#25647
                        $_.addtocws(); //#25647
                        $_.i = $_.i + 7; //#25648
                        break; //#25649
                    } //#25649
                    if (($get($_.msg, $_.i) == $_.fn3) && ($_.i != $_.segstart)) { //#25658
                        $_.i = $_.i + 1; //#25652
                        $_.mode = $_.C; //#25653
                        $_.inmac = 0; //#25654
                        $_.segstart = $_.i; //#25655
                        $_.segend = $f($_.i + $get($_.UntilEndSeg, $_.i)); //#25656
                        break; //#25657
                    } //#25657
                    $_.i = $_.i + 1; //#25659
                    break; //#25660
                } //#25660
                if (($get($_.msg, $_.i) == 13) && ($_.i < ($_.msglen - 1))) { //#25668
                    if ($get($_.msg, $_.i + 1) == 10) { //#25667
                        $k[$j++] = $a([$get($_.Bvals, $_.crl)]); //#25664
                        $_.addtocws(); //#25664
                        $_.i = $_.i + 2; //#25665
                        break; //#25666
                    } //#25666
                } //#25666
                $k[$j++] = $a([$get($_.Bvals, $get($_.msg, $_.i))]); //#25669
                $_.addtocws(); //#25669
                $_.i = $_.i + 1; //#25670
                break; //#25671
            } //#25671
            if ($get($_.Binary, $_.i)) { //#25686
                if ($get($_.DatumB, $_.i + 1)) { //#25682
                    if ($get($_.msg, $_.i) < 160) { //#25678
                        $k[$j++] = $a([$get($_.Bvals, $_.bsa), $get($_.Avals, $f($get($_.msg, $_.i) - 128))]); //#25676
                        $_.addtocws(); //#25676
                    } else { //#25678
                        $k[$j++] = $a([$get($_.Bvals, $_.bsb), $get($_.Bvals, $f($get($_.msg, $_.i) - 128))]); //#25678
                        $_.addtocws(); //#25678
                    } //#25678
                    $_.i = $_.i + 1; //#25680
                    break; //#25681
                } //#25681
                $k[$j++] = $a([$get($_.Bvals, $_.bin)]); //#25683
                $_.addtocws(); //#25683
                $_.mode = $_.BIN; //#25684
                break; //#25685
            } //#25685
            if ($get($_.AheadA, $_.i) == 1) { //#25691
                $k[$j++] = $a([$get($_.Bvals, $_.sfa), $get($_.Avals, $get($_.msg, $_.i))]); //#25688
                $_.addtocws(); //#25688
                $_.i = $_.i + 1; //#25689
                break; //#25690
            } //#25690
            $k[$j++] = $a([$get($_.Bvals, $_.laa)]); //#25692
            $_.addtocws(); //#25692
            $_.mode = $_.A; //#25693
            break; //#25694
        } //#25694
    }; //#25694
    $_.encA = function() {
        for (var _Fg = 0, _Fh = 1; _Fg < _Fh; _Fg++) { //#25773
            $_.n = $get($_.TryC, $_.i); //#25700
            if ($_.n >= 2) { //#25718
                if ($_.n > 4) { //#25706
                    $k[$j++] = $a([$get($_.Avals, $_.lac)]); //#25703
                    $_.addtocws(); //#25703
                    $_.mode = $_.C; //#25704
                    break; //#25705
                } //#25705
                $k[$j++] = $a([$get($_.Avals, $get($a([$_.sfc, $_.sc2, $_.sc3, $_.sc4]), $f($_.n - 1)))]); //#25707
                $_.addtocws(); //#25707
                for (var _G3 = 0, _G4 = $_.n; _G3 < _G4; _G3++) { //#25716
                    if ($get($_.msg, $_.i) < 0) { //#25714
                        $k[$j++] = $a([$get($_.Cvals, $get($_.msg, $_.i))]); //#25710
                        $_.addtocws(); //#25710
                        $_.i = $_.i + 1; //#25711
                    } else { //#25714
                        $k[$j++] = $a([$f(($f($get($_.msg, $_.i) - 48) * 10) + $f($get($_.msg, $_.i + 1) - 48))]); //#25713
                        $_.addtocws(); //#25713
                        $_.i = $_.i + 2; //#25714
                    } //#25714
                } //#25714
                break; //#25717
            } //#25717
            if ($get($_.DatumA, $_.i)) { //#25741
                var _GS = $get($_.msg, $_.i); //#25720
                if ((_GS == $_.fn1) || ((_GS == $_.fn2) || (_GS == $_.fn3))) { //#25737
                    $k[$j++] = $a([$get($_.Avals, $get($_.msg, $_.i))]); //#25721
                    $_.addtocws(); //#25721
                    if ($get($_.ECI, $_.i)) { //#25726
                        $k[$j++] = Infinity; //#25723
                        $_.ECIabc(); //#25723
                        var _Gf = $a(); //#25723
                        $k[$j++] = _Gf; //#25723
                        $_.addtocws(); //#25723
                        $_.i = $_.i + 7; //#25724
                        break; //#25725
                    } //#25725
                    if (($get($_.msg, $_.i) == $_.fn3) && ($_.i != $_.segstart)) { //#25734
                        $_.i = $_.i + 1; //#25728
                        $_.mode = $_.C; //#25729
                        $_.inmac = 0; //#25730
                        $_.segstart = $_.i; //#25731
                        $_.segend = $f($_.i + $get($_.UntilEndSeg, $_.i)); //#25732
                        break; //#25733
                    } //#25733
                    $_.i = $_.i + 1; //#25735
                    break; //#25736
                } //#25736
                $k[$j++] = $a([$get($_.Avals, $get($_.msg, $_.i))]); //#25738
                $_.addtocws(); //#25738
                $_.i = $_.i + 1; //#25739
                break; //#25740
            } //#25740
            if ($get($_.Binary, $_.i)) { //#25755
                if ($get($_.DatumA, $_.i + 1)) { //#25751
                    if ($get($_.msg, $_.i) < 160) { //#25747
                        $k[$j++] = $a([$get($_.Avals, $_.bsa), $get($_.Avals, $f($get($_.msg, $_.i) - 128))]); //#25745
                        $_.addtocws(); //#25745
                    } else { //#25747
                        $k[$j++] = $a([$get($_.Avals, $_.bsb), $get($_.Bvals, $f($get($_.msg, $_.i) - 128))]); //#25747
                        $_.addtocws(); //#25747
                    } //#25747
                    $_.i = $_.i + 1; //#25749
                    break; //#25750
                } //#25750
                $k[$j++] = $a([$get($_.Avals, $_.bin)]); //#25752
                $_.addtocws(); //#25752
                $_.mode = $_.BIN; //#25753
                break; //#25754
            } //#25754
            $_.n = $get($_.AheadB, $_.i); //#25756
            if ($_.n > 6) { //#25761
                $k[$j++] = $a([$get($_.Avals, $_.lab)]); //#25758
                $_.addtocws(); //#25758
                $_.mode = $_.B; //#25759
                break; //#25760
            } //#25760
            $k[$j++] = $a([$get($_.Avals, $get($a([$_.sfb, $_.sb2, $_.sb3, $_.sb4, $_.sb5, $_.sb6]), $f($_.n - 1)))]); //#25762
            $_.addtocws(); //#25762
            for (var _Hv = 0, _Hw = $_.n; _Hv < _Hw; _Hv++) { //#25771
                if ($get($_.msg, $_.i) == 13) { //#25769
                    $k[$j++] = $a([$get($_.Bvals, $_.crl)]); //#25765
                    $_.addtocws(); //#25765
                    $_.i = $_.i + 2; //#25766
                } else { //#25769
                    $k[$j++] = $a([$get($_.Bvals, $get($_.msg, $_.i))]); //#25768
                    $_.addtocws(); //#25768
                    $_.i = $_.i + 1; //#25769
                } //#25769
            } //#25769
            break; //#25772
        } //#25772
    }; //#25772
    $_.encBIN = function() {
        for (var _IC = 0, _ID = 1; _IC < _ID; _IC++) { //#25835
            $_.n = $get($_.TryC, $_.i); //#25778
            if ($_.n >= 2) { //#25797
                $k[$j++] = Infinity; //#25780
                $_.finaliseBIN(); //#25780
                var _II = $a(); //#25780
                $k[$j++] = _II; //#25780
                $_.addtocws(); //#25780
                if ($_.n > 7) { //#25785
                    $k[$j++] = $a([$get($_.BINvals, $_.tmc)]); //#25782
                    $_.addtocws(); //#25782
                    $_.mode = $_.C; //#25783
                    break; //#25784
                } //#25784
                $k[$j++] = $a([$get($_.BINvals, $get($a([$_.sc2, $_.sc3, $_.sc4, $_.sc5, $_.sc6, $_.sc7]), $f($_.n - 2)))]); //#25786
                $_.addtocws(); //#25786
                for (var _Ic = 0, _Id = $_.n; _Ic < _Id; _Ic++) { //#25795
                    if ($get($_.msg, $_.i) < 0) { //#25793
                        $k[$j++] = $a([$get($_.Cvals, $get($_.msg, $_.i))]); //#25789
                        $_.addtocws(); //#25789
                        $_.i = $_.i + 1; //#25790
                    } else { //#25793
                        $k[$j++] = $a([$f(($f($get($_.msg, $_.i) - 48) * 10) + $f($get($_.msg, $_.i + 1) - 48))]); //#25792
                        $_.addtocws(); //#25792
                        $_.i = $_.i + 2; //#25793
                    } //#25793
                } //#25793
                break; //#25796
            } //#25796
            if (($get($_.ECI, $_.i) && $get($_.Binary, $_.i + 7))) { //#25803
                $k[$j++] = Infinity; //#25799
                $_.ECIbin(); //#25799
                var _J2 = $a(); //#25799
                $k[$j++] = _J2; //#25799
                $_.addtocws(); //#25799
                $_.i = $_.i + 7; //#25800
                if ($_.i == $_.msglen) { //#25801
                    $k[$j++] = Infinity; //#25801
                    $_.finaliseBIN(); //#25801
                    var _J6 = $a(); //#25801
                    $k[$j++] = _J6; //#25801
                    $_.addtocws(); //#25801
                } //#25801
                break; //#25802
            } //#25802
            if ($get($_.msg, $_.i) >= 0) { //#25813
                if (((($get($_.Binary, $_.i) || $get($_.Binary, $_.i + 1)) || $get($_.Binary, $_.i + 2)) || $get($_.Binary, $_.i + 3)) || ($get($_.ECI, $_.i + 1) && $get($_.Binary, $_.i + 8))) { //#25812
                    $k[$j++] = Infinity; //#25808
                    $k[$j++] = $get($_.msg, $_.i); //#25808
                    $_.addtobin(); //#25808
                    var _JV = $a(); //#25808
                    $k[$j++] = _JV; //#25808
                    $_.addtocws(); //#25808
                    $_.i = $_.i + 1; //#25809
                    if ($_.i == $_.msglen) { //#25810
                        $k[$j++] = Infinity; //#25810
                        $_.finaliseBIN(); //#25810
                        var _JZ = $a(); //#25810
                        $k[$j++] = _JZ; //#25810
                        $_.addtocws(); //#25810
                    } //#25810
                    break; //#25811
                } //#25811
            } //#25811
            $k[$j++] = Infinity; //#25814
            $_.finaliseBIN(); //#25814
            var _Ja = $a(); //#25814
            $k[$j++] = _Ja; //#25814
            $_.addtocws(); //#25814
            if ($_.i != ($_.msglen - 1)) { //#25833
                if (($get($_.msg, $_.i) == $_.fn3) && ($_.i != $_.segstart)) { //#25824
                    $k[$j++] = $a([$get($_.BINvals, $_.tms)]); //#25817
                    $_.addtocws(); //#25817
                    $_.i = $_.i + 1; //#25818
                    $_.mode = $_.C; //#25819
                    $_.inmac = 0; //#25820
                    $_.segstart = $_.i; //#25821
                    $_.segend = $f($_.i + $get($_.UntilEndSeg, $_.i)); //#25822
                    break; //#25823
                } //#25823
                if ($gt($get($_.AheadA, $_.i), $get($_.AheadB, $_.i))) { //#25830
                    $k[$j++] = $a([$get($_.BINvals, $_.tma)]); //#25826
                    $_.addtocws(); //#25826
                    $_.mode = $_.A; //#25827
                } else { //#25830
                    $k[$j++] = $a([$get($_.BINvals, $_.tmb)]); //#25829
                    $_.addtocws(); //#25829
                    $_.mode = $_.B; //#25830
                } //#25830
                break; //#25832
            } //#25832
            break; //#25834
        } //#25834
    }; //#25834
    $_.cws = $a(($_.msglen * 2) + 1); //#25838
    $_.mode = $_.C; //#25839
    $_.bvals = $a(5); //#25840
    $_.bpos = 0; //#25840
    $_.inmac = 0; //#25841
    $_.segstart = 0; //#25841
    $_.segend = $get($_.UntilEndSeg, 0); //#25841
    $_.i = 0; //#25842
    $_.j = 0; //#25842
    for (;;) { //#25855
        if ($_.i >= $_.msglen) { //#25843
            break; //#25843
        } //#25843
        if ($_.inmac != 0) { //#25853
            if (($_.inmac != $_.mac) && ($_.i == $f($_.segend - 2))) { //#25848
                $_.i = $_.i + 2; //#25846
                if ($_.i >= $_.msglen) { //#25847
                    break; //#25847
                } //#25847
            } //#25847
            if (($_.inmac == $_.mac) && ($_.i == $f($_.segend - 1))) { //#25852
                $_.i = $_.i + 1; //#25850
                if ($_.i >= $_.msglen) { //#25851
                    break; //#25851
                } //#25851
            } //#25851
        } //#25851
        if ($_[$get($a(['encA', 'encB', 'encC', 'encBIN']), $_.mode)]() === true) {
            break;
        } //#25854
    } //#25854
    $_.cws = $geti($_.cws, 0, $_.j); //#25856
    $_.nd = $_.cws.length; //#25859
    $_.minarea = (((($_.nd + 3) + (~~($_.nd / 2))) * 9) + 2) * 2; //#25860
    if ($_.ratio != -1) { //#25888
        $_.hgt = Math.sqrt($_.minarea / $_.ratio); //#25862
        $_.wid = Math.sqrt($_.minarea * $_.ratio); //#25863
        $_.h = ~~$_.hgt; //#25864
        $_.w = ~~$_.wid; //#25864
        if ((($_.h + $_.w) % 2) == 1) { //#25878
            if (($_.h * $_.w) < $_.minarea) { //#25866
                $_.h = $_.h + 1; //#25866
                $_.w = $_.w + 1; //#25866
            } //#25866
        } else { //#25878
            if (($_.hgt * $_.w) < ($_.wid * $_.h)) { //#25878
                $_.w = $_.w + 1; //#25869
                if (($_.h * $_.w) < $_.minarea) { //#25873
                    $_.w = $_.w - 1; //#25871
                    $_.h = $_.h + 1; //#25871
                    if (($_.h * $_.w) < $_.minarea) { //#25872
                        $_.w = $_.w + 2; //#25872
                    } //#25872
                } //#25872
            } else { //#25878
                $_.h = $_.h + 1; //#25875
                if (($_.h * $_.w) < $_.minarea) { //#25879
                    $_.h = $_.h - 1; //#25877
                    $_.w = $_.w + 1; //#25877
                    if (($_.h * $_.w) < $_.minarea) { //#25878
                        $_.h = $_.h + 2; //#25878
                    } //#25878
                } //#25878
            } //#25878
        } //#25878
        $_.rows = $_.h; //#25882
        $_.columns = $_.w; //#25882
    } else { //#25888
        if ($_.columns == -1) { //#25886
            var _LP = ~~((($_.minarea + $_.rows) - 1) / $_.rows); //#25885
            $k[$j++] = 'columns'; //#25885
            $k[$j++] = _LP; //#25885
            if (((_LP + $_.rows) % 2) == 0) { //#25885
                var _LR = $k[--$j]; //#25885
                $k[$j++] = $f(_LR + 1); //#25885
            } //#25885
            var _LS = $k[--$j]; //#25885
            $_[$k[--$j]] = _LS; //#25885
        } //#25885
        if ($_.rows == -1) { //#25889
            var _LY = ~~((($_.minarea + $_.columns) - 1) / $_.columns); //#25888
            $k[$j++] = 'rows'; //#25888
            $k[$j++] = _LY; //#25888
            if (((_LY + $_.columns) % 2) == 0) { //#25888
                var _La = $k[--$j]; //#25888
                $k[$j++] = $f(_La + 1); //#25888
            } //#25888
            var _Lb = $k[--$j]; //#25888
            $_[$k[--$j]] = _Lb; //#25888
        } //#25888
    } //#25888
    $_.ndots = ~~(($_.rows * $_.columns) / 2); //#25893
    for (;;) { //#25897
        var _Lg = $_.nd + 1; //#25895
        if ((((_Lg + ((~~(_Lg / 2)) + 3)) * 9) + 2) > $_.ndots) { //#25895
            break; //#25895
        } //#25895
        $_.nd = $_.nd + 1; //#25896
    } //#25896
    $_.nc = (~~($_.nd / 2)) + 3; //#25898
    $_.nw = $_.nd + $_.nc; //#25899
    $_.rembits = $_.ndots - (($_.nw * 9) + 2); //#25900
    if ($_.nd > $_.cws.length) { //#25907
        $k[$j++] = Infinity; //#25902
        $aload($_.cws); //#25903
        var _Lt = ($_.mode == $_.BIN) ? 109 : 106; //#25904
        $k[$j++] = _Lt; //#25905
        for (var _Lw = 0, _Lx = ($_.nd - $_.cws.length) - 1; _Lw < _Lx; _Lw++) { //#25905
            $k[$j++] = 106; //#25905
        } //#25905
        $_.cws = $a(); //#25905
    } //#25906
    var _M0 = $get($_.options, 'debugcws') !== undefined; //#25909
    if (_M0) { //#25909
        $k[$j++] = 'bwipp.debugcws#25909'; //#25909
        $k[$j++] = $_.cws; //#25909
        bwipp_raiseerror(); //#25909
    } //#25909
    if (($_.nw * 9) > ($_.ndots - 2)) { //#25914
        $k[$j++] = 'bwipp.dotcodeTooLong#25913'; //#25913
        $k[$j++] = "Maximum length exceeded"; //#25913
        bwipp_raiseerror(); //#25913
    } //#25913
    if (!bwipp_dotcode.__25943__) { //#25943
        $_ = Object.create($_); //#25943
        $_.encs = $a(["101010101", "010101011", "010101101", "010110101", "011010101", "101010110", "101011010", "101101010", "110101010", "010101110", "010110110", "010111010", "011010110", "011011010", "011101010", "100101011", "100101101", "100110101", "101001011", "101001101", "101010011", "101011001", "101100101", "101101001", "110010101", "110100101", "110101001", "001010111", "001011011", "001011101", "001101011", "001101101", "001110101", "010010111", "010011011", "010011101", "010100111", "010110011", "010111001", "011001011", "011001101", "011010011", "011011001", "011100101", "011101001", "100101110", "100110110", "100111010", "101001110", "101011100", "101100110", "101101100", "101110010", "101110100", "110010110", "110011010", "110100110", "110101100", "110110010", "110110100", "111001010", "111010010", "111010100", "001011110", "001101110", "001110110", "001111010", "010011110", "010111100", "011001110", "011011100", "011100110", "011101100", "011110010", "011110100", "100010111", "100011011", "100011101", "100100111", "100110011", "100111001", "101000111", "101100011", "101110001", "110001011", "110001101", "110010011", "110011001", "110100011", "110110001", "111000101", "111001001", "111010001", "000101111", "000110111", "000111011", "000111101", "001001111", "001100111", "001110011", "001111001", "010001111", "011000111", "011100011", "011110001", "100011110", "100111100", "101111000", "110001110", "110011100", "110111000", "111000110", "111001100"]); //#25942
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_dotcode.$ctx[id] = $_[id]); //#25942
        bwipp_dotcode.__25943__ = 1; //#25942
        $_ = Object.getPrototypeOf($_); //#25942
    } //#25942
    if (($_.rows % 2) == 0) { //#25963
        $_.sixedges = $a([$a([$_.columns - 1, $_.rows - 2]), $a([0, $_.rows - 2]), $a([$_.columns - 2, $_.rows - 1]), $a([1, $_.rows - 1]), $a([$_.columns - 1, 0]), $a([0, 0])]); //#25954
    } else { //#25963
        $_.sixedges = $a([$a([$_.columns - 2, 0]), $a([$_.columns - 2, $_.rows - 1]), $a([$_.columns - 1, 1]), $a([$_.columns - 1, $_.rows - 2]), $a([0, 0]), $a([0, $_.rows - 1])]); //#25963
    } //#25963
    $_.dmv = function() {
        var _Ma = $k[--$j]; //#25966
        var _Mb = $k[--$j]; //#25966
        $k[$j++] = $f(_Mb + (_Ma * $_.columns)); //#25966
    }; //#25966
    $_.outline = $a($_.rows * $_.columns); //#25969
    for (var _Mh = 0, _Mg = $_.rows - 1; _Mh <= _Mg; _Mh += 1) { //#25976
        $_.y = _Mh; //#25971
        for (var _Mk = 0, _Mj = $_.columns - 1; _Mk <= _Mj; _Mk += 1) { //#25975
            $_.x = _Mk; //#25973
            $k[$j++] = $_.outline; //#25974
            $k[$j++] = $_.x; //#25974
            $k[$j++] = $_.y; //#25974
            $_.dmv(); //#25974
            var _Mq = $k[--$j]; //#25974
            $put($k[--$j], _Mq, (($_.x + $_.y) % 2) - 1); //#25974
        } //#25974
    } //#25974
    var _Ms = $_.sixedges; //#25977
    for (var _Mt = 0, _Mu = _Ms.length; _Mt < _Mu; _Mt++) { //#25979
        $k[$j++] = $_.outline; //#25978
        $aload($get(_Ms, _Mt)); //#25978
        $_.dmv(); //#25978
        var _Mx = $k[--$j]; //#25978
        $put($k[--$j], _Mx, 1); //#25978
    } //#25978
    $_.clearcol = function() {
        $_.x = $k[--$j]; //#25982
        $k[$j++] = true; //#25986
        for (var _N3 = $_.x & 1, _N2 = $_.rows - 1; _N3 <= _N2; _N3 += 2) { //#25986
            $k[$j++] = $_.x; //#25985
            $k[$j++] = _N3; //#25985
            $_.dmv(); //#25985
            if ($get($_.sym, $k[--$j]) == 1) { //#25985
                $j--; //#25985
                $k[$j++] = false; //#25985
                break; //#25985
            } //#25985
        } //#25985
    }; //#25985
    $_.clearrow = function() {
        $_.y = $k[--$j]; //#25990
        $k[$j++] = true; //#25994
        for (var _NC = $_.y & 1, _NB = $_.columns - 1; _NC <= _NB; _NC += 2) { //#25994
            $k[$j++] = _NC; //#25993
            $k[$j++] = $_.y; //#25993
            $_.dmv(); //#25993
            if ($get($_.sym, $k[--$j]) == 1) { //#25993
                $j--; //#25993
                $k[$j++] = false; //#25993
                break; //#25993
            } //#25993
        } //#25993
    }; //#25993
    $_.evalsymbol = function() {
        $_.sym = $k[--$j]; //#25999
        $_.worst = 9999999; //#26002
        var _NM = $a([$a(['x', 0]), $a(['x', 1]), $a(['y', 0]), $a(['y', 1])]); //#26003
        for (var _NN = 0, _NO = _NM.length; _NN < _NO; _NN++) { //#26021
            $aload($get(_NM, _NN)); //#26004
            $_.fl = $k[--$j]; //#26004
            $_.dir = $k[--$j]; //#26004
            $_.sum = 0; //#26005
            $_.first = -1; //#26005
            $_.last = -1; //#26005
            var _NT = $eq($_.dir, 'x') ? $_.columns : $_.rows; //#26006
            for (var _NV = 0, _NU = _NT - 1; _NV <= _NU; _NV += 1) { //#26017
                $_[$_.dir] = _NV; //#26007
                var _NX = $_.sym; //#26008
                var _NZ = $_[$_.dir]; //#26009
                var _Nb = $eq($_.dir, 'x') ? $_.rows : $_.columns; //#26010
                var _Ne = (_Nb - 1) * $_.fl; //#26011
                if ($eq($_.dir, 'y')) { //#26011
                    var _ = _Ne; //#26011
                    _Ne = _NZ; //#26011
                    _NZ = _; //#26011
                } //#26011
                $k[$j++] = _NX; //#26012
                $k[$j++] = _NZ; //#26012
                $k[$j++] = _Ne; //#26012
                $_.dmv(); //#26012
                var _Nf = $k[--$j]; //#26012
                if ($get($k[--$j], _Nf) == 1) { //#26016
                    if ($_.first == -1) { //#26013
                        $_.first = $_[$_.dir]; //#26013
                    } //#26013
                    $_.last = $_[$_.dir]; //#26014
                    $_.sum = $_.sum + 1; //#26015
                } //#26015
            } //#26015
            var _Ns = $eq($_.dir, 'x') ? $_.rows : $_.columns; //#26019
            var _Nt = ($f($f($_.sum + $_.last) - $_.first)) * _Ns; //#26020
            $k[$j++] = _Nt; //#26020
            if (_Nt < $_.worst) { //#26020
                $_.worst = $k[--$j]; //#26020
            } else { //#26020
                $j--; //#26020
            } //#26020
        } //#26020
        $_.pen = 0; //#26023
        if ((($_.rows % 2) == 1) || ($_.rows <= 12)) { //#26041
            $_.sum = 0; //#26029
            $_.p = 0; //#26029
            for (var _O0 = 1, _Nz = $_.columns - 2; _O0 <= _Nz; _O0 += 1) { //#26039
                $k[$j++] = _O0; //#26031
                $_.clearcol(); //#26031
                if ($k[--$j]) { //#26037
                    $_.sum = $_.sum + 1; //#26032
                    $k[$j++] = 'p'; //#26033
                    if ($_.sum == 1) { //#26033
                        $k[$j++] = $_.rows; //#26033
                    } else { //#26033
                        $k[$j++] = $_.p * $_.rows; //#26033
                    } //#26033
                    var _O7 = $k[--$j]; //#26033
                    $_[$k[--$j]] = _O7; //#26033
                } else { //#26037
                    $_.sum = 0; //#26035
                    $_.pen = $_.pen + $_.p; //#26036
                    $_.p = 0; //#26037
                } //#26037
            } //#26037
            $_.pen = $_.pen + $_.p; //#26040
        } //#26040
        if ((($_.rows % 2) == 0) || ($_.columns <= 12)) { //#26059
            $_.sum = 0; //#26047
            $_.p = 0; //#26047
            for (var _OH = 1, _OG = $_.rows - 2; _OH <= _OG; _OH += 1) { //#26057
                $k[$j++] = _OH; //#26049
                $_.clearrow(); //#26049
                if ($k[--$j]) { //#26055
                    $_.sum = $_.sum + 1; //#26050
                    $k[$j++] = 'p'; //#26051
                    if ($_.sum == 1) { //#26051
                        $k[$j++] = $_.columns; //#26051
                    } else { //#26051
                        $k[$j++] = $_.p * $_.columns; //#26051
                    } //#26051
                    var _OO = $k[--$j]; //#26051
                    $_[$k[--$j]] = _OO; //#26051
                } else { //#26055
                    $_.sum = 0; //#26053
                    $_.pen = $_.pen + $_.p; //#26054
                    $_.p = 0; //#26055
                } //#26055
            } //#26055
            $_.pen = $_.pen + $_.p; //#26058
        } //#26058
        $k[$j++] = Infinity; //#26062
        for (var _OV = 0, _OW = ($_.columns + 4) * 2; _OV < _OW; _OV++) { //#26063
            $k[$j++] = 0; //#26063
        } //#26063
        for (var _Oa = 0, _Ob = $_.columns, _OZ = $_.sym.length - 1; _Ob < 0 ? _Oa >= _OZ : _Oa <= _OZ; _Oa += _Ob) { //#26068
            $k[$j++] = 0; //#26066
            $k[$j++] = 0; //#26066
            $aload($geti($_.sym, _Oa, $_.columns)); //#26066
            $k[$j++] = 0; //#26067
            $k[$j++] = 0; //#26067
        } //#26067
        for (var _Og = 0, _Oh = ($_.columns + 4) * 2; _Og < _Oh; _Og++) { //#26069
            $k[$j++] = 0; //#26069
        } //#26069
        $_.symp = $a(); //#26069
        $_.columns = $_.columns + 4; //#26073
        $_.rows = $_.rows + 4; //#26074
        $_.sum = 0; //#26075
        for (var _On = 2, _Om = $_.rows - 3; _On <= _Om; _On += 1) { //#26093
            $_.y = _On; //#26077
            for (var _Or = ($_.y & 1) + 2, _Oq = $_.columns - 3; _Or <= _Oq; _Or += 2) { //#26092
                $_.x = _Or; //#26079
                for (var _Os = 0, _Ot = 1; _Os < _Ot; _Os++) { //#26091
                    $k[$j++] = $_.symp; //#26081
                    $k[$j++] = $_.x - 1; //#26081
                    $k[$j++] = $_.y - 1; //#26081
                    $_.dmv(); //#26081
                    var _Ox = $k[--$j]; //#26081
                    if ($get($k[--$j], _Ox) == 1) { //#26081
                        break; //#26081
                    } //#26081
                    $k[$j++] = $_.symp; //#26082
                    $k[$j++] = $_.x + 1; //#26082
                    $k[$j++] = $_.y - 1; //#26082
                    $_.dmv(); //#26082
                    var _P3 = $k[--$j]; //#26082
                    if ($get($k[--$j], _P3) == 1) { //#26082
                        break; //#26082
                    } //#26082
                    $k[$j++] = $_.symp; //#26083
                    $k[$j++] = $_.x - 1; //#26083
                    $k[$j++] = $_.y + 1; //#26083
                    $_.dmv(); //#26083
                    var _P9 = $k[--$j]; //#26083
                    if ($get($k[--$j], _P9) == 1) { //#26083
                        break; //#26083
                    } //#26083
                    $k[$j++] = $_.symp; //#26084
                    $k[$j++] = $_.x + 1; //#26084
                    $k[$j++] = $_.y + 1; //#26084
                    $_.dmv(); //#26084
                    var _PF = $k[--$j]; //#26084
                    if ($get($k[--$j], _PF) == 1) { //#26084
                        break; //#26084
                    } //#26084
                    $k[$j++] = $_.symp; //#26085
                    $k[$j++] = $_.x; //#26085
                    $k[$j++] = $_.y; //#26085
                    $_.dmv(); //#26085
                    var _PL = $k[--$j]; //#26085
                    if ($get($k[--$j], _PL) == 0) { //#26085
                        $_.sum = $_.sum + 1; //#26085
                        break; //#26085
                    } //#26085
                    $k[$j++] = $_.symp; //#26086
                    $k[$j++] = $_.x - 2; //#26086
                    $k[$j++] = $_.y; //#26086
                    $_.dmv(); //#26086
                    var _PS = $k[--$j]; //#26086
                    if ($get($k[--$j], _PS) == 1) { //#26086
                        break; //#26086
                    } //#26086
                    $k[$j++] = $_.symp; //#26087
                    $k[$j++] = $_.x; //#26087
                    $k[$j++] = $_.y - 2; //#26087
                    $_.dmv(); //#26087
                    var _PY = $k[--$j]; //#26087
                    if ($get($k[--$j], _PY) == 1) { //#26087
                        break; //#26087
                    } //#26087
                    $k[$j++] = $_.symp; //#26088
                    $k[$j++] = $_.x + 2; //#26088
                    $k[$j++] = $_.y; //#26088
                    $_.dmv(); //#26088
                    var _Pe = $k[--$j]; //#26088
                    if ($get($k[--$j], _Pe) == 1) { //#26088
                        break; //#26088
                    } //#26088
                    $k[$j++] = $_.symp; //#26089
                    $k[$j++] = $_.x; //#26089
                    $k[$j++] = $_.y + 2; //#26089
                    $_.dmv(); //#26089
                    var _Pk = $k[--$j]; //#26089
                    if ($get($k[--$j], _Pk) == 1) { //#26089
                        break; //#26089
                    } //#26089
                    $_.sum = $_.sum + 1; //#26090
                } //#26090
            } //#26090
        } //#26090
        $_.columns = $_.columns - 4; //#26094
        $_.rows = $_.rows - 4; //#26095
        if ($_.worst == 0) { //#26100
            $k[$j++] = -99999; //#26098
        } else { //#26100
            $k[$j++] = $f(($f($_.worst - ($_.sum * $_.sum))) - $_.pen); //#26100
        } //#26100
    }; //#26100
    if (!bwipp_dotcode.__26108__) { //#26108
        $_ = Object.create($_); //#26108
        $k[$j++] = Infinity; //#26107
        $k[$j++] = 1; //#26107
        for (var _Pv = 0, _Pw = 112; _Pv < _Pw; _Pv++) { //#26107
            var _Px = $k[--$j]; //#26107
            $k[$j++] = _Px; //#26107
            $k[$j++] = (_Px * 3) % 113; //#26107
        } //#26107
        $_.rsalog = $a(); //#26107
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_dotcode.$ctx[id] = $_[id]); //#26107
        bwipp_dotcode.__26108__ = 1; //#26107
        $_ = Object.getPrototypeOf($_); //#26107
    } //#26107
    $_.step = (~~($_.nw / 112)) + 1; //#26109
    $_.offset = function() {
        var _Q2 = $k[--$j]; //#26110
        $k[$j++] = $f((_Q2 * $_.step) + $_.start); //#26110
    }; //#26110
    $_.bestscore = -99999999; //#26118
    $k[$j++] = 'masks'; //#26123
    if ($_.mask != -1) { //#26122
        $k[$j++] = $a([$_.mask]); //#26120
    } else { //#26122
        if ($_.fast) { //#26122
            $k[$j++] = $a([3, 2, 1, 0]); //#26122
        } else { //#26122
            $k[$j++] = $a([0, 1, 2, 3]); //#26122
        } //#26122
    } //#26122
    var _QA = $k[--$j]; //#26123
    $_[$k[--$j]] = _QA; //#26123
    $_.litmasks = $a(4); //#26124
    $forall($_.masks, function() { //#26226
        $_.mask = $k[--$j]; //#26127
        $k[$j++] = Infinity; //#26130
        var _QJ = $_.cws; //#26132
        $k[$j++] = $_.mask; //#26132
        $k[$j++] = $get($a([0, 3, 7, 17]), $_.mask); //#26132
        $k[$j++] = 0; //#26132
        for (var _QK = 0, _QL = _QJ.length; _QK < _QL; _QK++) { //#26132
            var _QN = $k[--$j]; //#26132
            var _QO = $k[--$j]; //#26132
            $k[$j++] = $f($get(_QJ, _QK) + _QN) % 113; //#26132
            $k[$j++] = _QO; //#26132
            $k[$j++] = $f(_QN + _QO); //#26132
        } //#26132
        $j -= 2; //#26132
        for (var _QQ = 0, _QR = $_.nc; _QQ < _QR; _QQ++) { //#26133
            $k[$j++] = 0; //#26133
        } //#26133
        $_.rscws = $a(); //#26133
        for (var _QV = 0, _QU = $_.step - 1; _QV <= _QU; _QV += 1) { //#26157
            $_.start = _QV; //#26136
            $_.ND = ~~((((($_.nd + 1) - $_.start) + $_.step) - 1) / $_.step); //#26137
            $_.NW = ~~((((($_.nw + 1) - $_.start) + $_.step) - 1) / $_.step); //#26138
            $_.NC = $_.NW - $_.ND; //#26139
            $k[$j++] = Infinity; //#26140
            $k[$j++] = 1; //#26140
            for (var _Qh = 0, _Qi = $_.NC; _Qh < _Qi; _Qh++) { //#26140
                $k[$j++] = 0; //#26140
            } //#26140
            $_.coeffs = $a(); //#26140
            for (var _Qm = 1, _Ql = $_.NC; _Qm <= _Ql; _Qm += 1) { //#26147
                $_.i = _Qm; //#26142
                for (var _Qo = $_.NC; _Qo >= 1; _Qo -= 1) { //#26146
                    $_.j = _Qo; //#26144
                    $put($_.coeffs, $_.j, ($f($f($get($_.coeffs, $_.j) + 113) - (($get($_.rsalog, $_.i) * $get($_.coeffs, $_.j - 1)) % 113))) % 113); //#26145
                } //#26145
            } //#26145
            for (var _R2 = 0, _R1 = $_.ND - 1; _R2 <= _R1; _R2 += 1) { //#26155
                $k[$j++] = 't'; //#26149
                $k[$j++] = $_.rscws; //#26149
                $k[$j++] = _R2; //#26149
                $_.offset(); //#26149
                var _R4 = $k[--$j]; //#26149
                var _R6 = $get($k[--$j], _R4); //#26149
                $k[$j++] = _R6; //#26149
                $k[$j++] = $_.rscws; //#26149
                $k[$j++] = $_.ND; //#26149
                $_.offset(); //#26149
                var _R9 = $k[--$j]; //#26149
                var _RB = $get($k[--$j], _R9); //#26149
                var _RC = $k[--$j]; //#26149
                $_[$k[--$j]] = $f(_RC + _RB) % 113; //#26149
                for (var _RG = 0, _RF = $_.NC - 2; _RG <= _RF; _RG += 1) { //#26153
                    $_.j = _RG; //#26151
                    $k[$j++] = $_.rscws; //#26152
                    $k[$j++] = $_.ND + $_.j; //#26152
                    $_.offset(); //#26152
                    $k[$j++] = $_.rscws; //#26152
                    $k[$j++] = ($_.ND + $_.j) + 1; //#26152
                    $_.offset(); //#26152
                    var _RN = $k[--$j]; //#26152
                    var _RP = $get($k[--$j], _RN); //#26152
                    var _RU = $k[--$j]; //#26152
                    $put($k[--$j], _RU, ($f($f(_RP + 113) - (($_.t * $get($_.coeffs, $_.j + 1)) % 113))) % 113); //#26152
                } //#26152
                $k[$j++] = $_.rscws; //#26154
                $k[$j++] = ($_.ND + $_.NC) - 1; //#26154
                $_.offset(); //#26154
                var _Rd = $k[--$j]; //#26154
                $put($k[--$j], _Rd, ($f(113 - (($_.t * $get($_.coeffs, $_.NC)) % 113))) % 113); //#26154
            } //#26154
            for (var _Ri = $_.ND, _Rh = $_.NW - 1; _Ri <= _Rh; _Ri += 1) { //#26156
                $k[$j++] = _Ri; //#26156
                $k[$j++] = $_.rscws; //#26156
                $k[$j++] = _Ri; //#26156
                $_.offset(); //#26156
                $k[$j++] = 113; //#26156
                $k[$j++] = $_.rscws; //#26156
                $r(5, -1); //#26156
                $_.offset(); //#26156
                var _Rl = $k[--$j]; //#26156
                var _Rn = $get($k[--$j], _Rl); //#26156
                var _Ro = $k[--$j]; //#26156
                var _Rp = $k[--$j]; //#26156
                $put($k[--$j], _Rp, $f(_Ro - _Rn) % 113); //#26156
            } //#26156
        } //#26156
        $_.bits = $s($_.ndots); //#26160
        $puti($_.bits, 0, $get($a(["00", "01", "10", "11"]), $_.mask)); //#26161
        for (var _Rz = 1, _Ry = $_.nw; _Rz <= _Ry; _Rz += 1) { //#26165
            $_.i = _Rz; //#26163
            $puti($_.bits, (($_.i - 1) * 9) + 2, $get($_.encs, $get($_.rscws, $_.i))); //#26164
        } //#26164
        if ($_.rembits > 0) { //#26168
            $puti($_.bits, ($_.nw * 9) + 2, $geti("11111111111111111", 0, $_.rembits)); //#26167
        } //#26167
        var _SC = $_.outline; //#26171
        $_.pixs = $arrcpy($a(_SC.length), _SC); //#26171
        $_.posx = 0; //#26172
        $k[$j++] = 'posy'; //#26173
        if (($_.rows % 2) == 0) { //#26173
            $k[$j++] = 0; //#26173
        } else { //#26173
            $k[$j++] = $_.rows - 1; //#26173
        } //#26173
        var _SH = $k[--$j]; //#26173
        $_[$k[--$j]] = _SH; //#26173
        var _SL = $geti($_.bits, 0, $_.bits.length - 6); //#26174
        for (var _SM = 0, _SN = _SL.length; _SM < _SN; _SM++) { //#26192
            $k[$j++] = $get(_SL, _SM); //#26190
            for (;;) { //#26190
                $k[$j++] = $_.pixs; //#26176
                $k[$j++] = $_.posx; //#26176
                $k[$j++] = $_.posy; //#26176
                $_.dmv(); //#26176
                var _SS = $k[--$j]; //#26176
                if ($get($k[--$j], _SS) == -1) { //#26176
                    break; //#26176
                } //#26176
                if (($_.rows % 2) == 0) { //#26187
                    $_.posy = $_.posy + 1; //#26178
                    if ($_.posy == $_.rows) { //#26182
                        $_.posy = 0; //#26180
                        $_.posx = $_.posx + 1; //#26181
                    } //#26181
                } else { //#26187
                    $_.posx = $_.posx + 1; //#26184
                    if ($_.posx == $_.columns) { //#26188
                        $_.posx = 0; //#26186
                        $_.posy = $_.posy - 1; //#26187
                    } //#26187
                } //#26187
            } //#26187
            $k[$j++] = $_.pixs; //#26191
            $k[$j++] = $_.posx; //#26191
            $k[$j++] = $_.posy; //#26191
            $_.dmv(); //#26191
            $r(3, -1); //#26191
            var _Sh = $k[--$j]; //#26191
            var _Si = $k[--$j]; //#26191
            $put($k[--$j], _Si, $f(_Sh - 48)); //#26191
        } //#26191
        for (var _Sk = 0; _Sk <= 5; _Sk += 1) { //#26197
            $_.i = _Sk; //#26194
            $k[$j++] = $_.pixs; //#26195
            $aload($get($_.sixedges, $_.i)); //#26195
            $_.dmv(); //#26195
            var _St = $k[--$j]; //#26196
            $put($k[--$j], _St, $get($_.bits, ($_.bits.length - 6) + $_.i) - 48); //#26196
        } //#26196
        $k[$j++] = 'score'; //#26200
        $k[$j++] = $_.pixs; //#26200
        $_.evalsymbol(); //#26200
        var _Sw = $k[--$j]; //#26200
        $_[$k[--$j]] = _Sw; //#26200
        if ($_.score > $_.bestscore) { //#26205
            $_.bestsym = $_.pixs; //#26202
            $_.bestscore = $_.score; //#26203
            if ($_.fast && ($_.bestscore > (~~(($_.rows * $_.columns) / 2)))) { //#26204
                return true; //#26204
            } //#26204
        } //#26204
        var _T6 = $_.pixs; //#26208
        $_.litmask = $arrcpy($a(_T6.length), _T6); //#26208
        for (var _T9 = 0; _T9 <= 5; _T9 += 1) { //#26213
            $_.i = _T9; //#26210
            $k[$j++] = $_.litmask; //#26211
            $aload($get($_.sixedges, $_.i)); //#26211
            $_.dmv(); //#26211
            var _TE = $k[--$j]; //#26212
            $put($k[--$j], _TE, 1); //#26212
        } //#26212
        $put($_.litmasks, $_.mask, $_.litmask); //#26214
        if ($_.fast) { //#26224
            $k[$j++] = 'score'; //#26218
            $k[$j++] = $_.litmask; //#26218
            $_.evalsymbol(); //#26218
            var _TL = $k[--$j]; //#26218
            $_[$k[--$j]] = _TL; //#26218
            if ($gt($_.score, $_.bestscore)) { //#26223
                $_.bestsym = $_.litmask; //#26220
                $_.bestscore = $_.score; //#26221
                if ($_.bestscore > (~~(($_.rows * $_.columns) / 2))) { //#26222
                    return true; //#26222
                } //#26222
            } //#26222
        } //#26222
    }); //#26222
    $_.pixs = $_.bestsym; //#26227
    if ((!$_.fast) && ($_.bestscore <= (~~(($_.rows * $_.columns) / 2)))) { //#26241
        $_.bestscore = -99999999; //#26231
        $forall($_.masks, function() { //#26239
            $_.litmask = $get($_.litmasks, $k[--$j]); //#26233
            $k[$j++] = 'score'; //#26234
            $k[$j++] = $_.litmask; //#26234
            $_.evalsymbol(); //#26234
            var _Te = $k[--$j]; //#26234
            $_[$k[--$j]] = _Te; //#26234
            if ($_.score > $_.bestscore) { //#26238
                $_.bestsym = $_.litmask; //#26236
                $_.bestscore = $_.score; //#26237
            } //#26237
        }); //#26237
        $_.pixs = $_.bestsym; //#26240
    } //#26240
    var _Tr = new Map([
        ["ren", 'renmatrix'],
        ["dotty", true],
        ["pixs", $_.pixs],
        ["pixx", $_.columns],
        ["pixy", $_.rows],
        ["height", ($_.rows * 2) / 72],
        ["width", ($_.columns * 2) / 72],
        ["borderleft", 3],
        ["borderright", 3],
        ["bordertop", 3],
        ["borderbottom", 3],
        ["opt", $_.options]
    ]); //#26256
    $k[$j++] = _Tr; //#26259
    if (!$_.dontdraw) { //#26259
        bwipp_renmatrix(); //#26259
    } //#26259
    $_ = Object.getPrototypeOf($_); //#26261
    $_ = Object.getPrototypeOf($_); //#26263
} //bwipp_dotcode
function bwipp_ultracode() {
    $_ = Object.create($_); //#26294
    $_.dontdraw = false; //#26297
    $_.eclevel = "EC2"; //#26298
    $_.parse = false; //#26299
    $_.parsefnc = false; //#26300
    $_.start = 257; //#26301
    $_.link1 = 0; //#26302
    $_.raw = false; //#26303
    $_.rev = 2; //#26304
    $k[$j++] = $_; //#26306
    bwipp_processoptions(); //#26306
    $_.options = $k[--$j]; //#26306
    $_.barcode = $k[--$j]; //#26307
    var _2 = $_.rev; //#26309
    if ((_2 != 1) && (_2 != 2)) { //#26311
        $k[$j++] = 'bwipp.ultracodeInvalidRevision#26310'; //#26310
        $k[$j++] = "Valid revisions are 1 and 2"; //#26310
        bwipp_raiseerror(); //#26310
    } //#26310
    var _4 = $_.eclevel.length == 3; //#26313
    $k[$j++] = _4; //#26317
    if (_4) { //#26317
        $j--; //#26314
        $k[$j++] = $geti($_.eclevel, 0, 2); //#26316
        if ($eq("EC", "EC")) { //#26316
            $j--; //#26315
            var _9 = $get($_.eclevel, 2) - 48; //#26315
            var _B = ($_.rev == 2) ? 1 : 0; //#26315
            $k[$j++] = (_9 >= _B) && (_9 <= 5); //#26315
        } //#26315
    } //#26315
    if ($nt($k[--$j])) { //#26320
        $k[$j++] = 'bwipp.ultracodeInvalidErrorCorrectionLevel#26319'; //#26319
        $k[$j++] = "Valid error correction levels are EC1 to EC5, and EC0 for legacy revision 1"; //#26319
        bwipp_raiseerror(); //#26319
    } //#26319
    bwipp_loadctx(bwipp_ultracode); //#26322
    if ($_.raw) { //#26359
        $_.dcws = $a($_.barcode.length); //#26326
        $_.i = 0; //#26327
        $_.j = 0; //#26327
        for (;;) { //#26334
            if ($_.i == $_.barcode.length) { //#26329
                break; //#26329
            } //#26329
            $_.cw = $cvi($geti($_.barcode, $_.i + 1, 3)); //#26330
            $put($_.dcws, $_.j, $_.cw); //#26331
            $_.i = $_.i + 4; //#26332
            $_.j = $_.j + 1; //#26333
        } //#26333
        $_.dcws = $geti($_.dcws, 0, $_.j); //#26335
    } else { //#26359
        $_.fn1 = -1; //#26340
        $_.fn3 = -2; //#26340
        var _X = new Map([
            ["parse", $_.parse],
            ["parsefnc", $_.parsefnc],
            ["FNC1", $_.fn1],
            ["FNC3", $_.fn3]
        ]); //#26345
        $_.fncvals = _X; //#26346
        $k[$j++] = 'msg'; //#26347
        $k[$j++] = $_.barcode; //#26347
        $k[$j++] = $_.fncvals; //#26347
        bwipp_parseinput(); //#26347
        var _a = $k[--$j]; //#26347
        $_[$k[--$j]] = _a; //#26347
        $_.msglen = $_.msg.length; //#26348
        $_.scr = $a([]); //#26350
        $_.scp = $a([]); //#26351
        $k[$j++] = Infinity; //#26352
        $aload($_.scr); //#26353
        $aload($_.scp); //#26354
        $forall($_.msg, function() { //#26358
            var _i = $k[--$j]; //#26356
            $k[$j++] = _i; //#26356
            if (_i == $_.fn1) { //#26356
                $j--; //#26356
                $k[$j++] = 268; //#26356
            } //#26356
            var _k = $k[--$j]; //#26357
            $k[$j++] = _k; //#26357
            if (_k == $_.fn3) { //#26357
                $j--; //#26357
                $k[$j++] = 269; //#26357
            } //#26357
        }); //#26357
        $_.dcws = $a(); //#26357
    } //#26359
    var _o = $get($_.options, 'debugcws') !== undefined; //#26363
    if (_o) { //#26363
        $k[$j++] = 'bwipp.debugcws#26363'; //#26363
        $k[$j++] = $_.dcws; //#26363
        bwipp_raiseerror(); //#26363
    } //#26363
    $_.mcc = $_.dcws.length + 3; //#26365
    $_.eclval = $get($_.eclevel, 2) - 48; //#26367
    if ($_.eclval != 0) { //#26371
        $k[$j++] = 'qcc'; //#26369
        $k[$j++] = $get($a([0, 1, 2, 4, 6, 8]), $_.eclval); //#26369
        $k[$j++] = ~~($_.mcc / 25); //#26369
        if (($_.mcc % 25) != 0) { //#26369
            var _z = $k[--$j]; //#26369
            $k[$j++] = $f(_z + 1); //#26369
        } //#26369
        var _10 = $k[--$j]; //#26369
        var _11 = $k[--$j]; //#26369
        $_[$k[--$j]] = $f((_11 * _10) + 5); //#26369
    } else { //#26371
        $_.qcc = 3; //#26371
    } //#26371
    $_.acc = ($_.qcc - 3) + (78 * $_.link1); //#26373
    $_.tcc = $_.mcc + $_.qcc; //#26374
    if (!bwipp_ultracode.__26385__) { //#26385
        $_ = Object.create($_); //#26385
        $_.metrics = $a([$a([2, 7, 37, 5]), $a([3, 36, 84, 13]), $a([4, 85, 161, 22]), $a([5, 142, 282, 29])]); //#26384
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_ultracode.$ctx[id] = $_[id]); //#26384
        bwipp_ultracode.__26385__ = 1; //#26384
        $_ = Object.getPrototypeOf($_); //#26384
    } //#26384
    var _1D = $_.metrics; //#26387
    for (var _1E = 0, _1F = _1D.length; _1E < _1F; _1E++) { //#26396
        $_.m = $get(_1D, _1E); //#26388
        $_.rows = $get($_.m, 0); //#26389
        $_.minc = $get($_.m, 1); //#26390
        $_.maxc = $get($_.m, 2); //#26391
        $_.mcol = $get($_.m, 3); //#26392
        $_.okay = true; //#26393
        if (($_.tcc < $_.minc) || ($_.tcc > $_.maxc)) { //#26394
            $_.okay = false; //#26394
        } //#26394
        if ($_.okay) { //#26395
            break; //#26395
        } //#26395
    } //#26395
    if (!$_.okay) { //#26400
        $k[$j++] = 'bwipp.ultracodeNoValidSymbol#26399'; //#26399
        $k[$j++] = "Maximum length exceeded or invalid content"; //#26399
        bwipp_raiseerror(); //#26399
    } //#26399
    for (var _1W = $_.mcol; _1W <= 61; _1W += 1) { //#26414
        $_.columns = _1W; //#26404
        $k[$j++] = $_.columns; //#26406
        if ($_.columns >= 15) { //#26406
            var _1Z = $k[--$j]; //#26406
            $k[$j++] = $f(_1Z - 1); //#26406
        } //#26406
        if ($_.columns >= 31) { //#26407
            var _1b = $k[--$j]; //#26407
            $k[$j++] = $f(_1b - 1); //#26407
        } //#26407
        if ($_.columns >= 47) { //#26408
            var _1d = $k[--$j]; //#26408
            $k[$j++] = $f(_1d - 1); //#26408
        } //#26408
        var _1h = $f(($f(($k[--$j] * $_.rows) - 3)) - $_.tcc); //#26409
        $k[$j++] = _1h; //#26412
        if (_1h >= 0) { //#26412
            $_.pads = $k[--$j]; //#26410
            break; //#26411
        } //#26411
        $j--; //#26413
    } //#26413
    $_.dcc = $f($_.columns - $_.mcol); //#26415
    $k[$j++] = Infinity; //#26418
    $k[$j++] = $_.start; //#26422
    $k[$j++] = $_.mcc; //#26422
    $k[$j++] = $_.acc; //#26422
    $aload($_.dcws); //#26422
    for (var _1q = 0, _1r = $_.qcc; _1q < _1r; _1q++) { //#26423
        $k[$j++] = 0; //#26423
    } //#26423
    $k[$j++] = 0; //#26424
    $_.rsseq = $a(); //#26424
    if (!bwipp_ultracode.__26432__) { //#26432
        $_ = Object.create($_); //#26432
        $k[$j++] = Infinity; //#26429
        $k[$j++] = 1; //#26429
        for (var _1t = 0, _1u = 282; _1t < _1u; _1t++) { //#26429
            var _1v = $k[--$j]; //#26429
            $k[$j++] = _1v; //#26429
            $k[$j++] = (_1v * 3) % 283; //#26429
        } //#26429
        $_.rsalog = $a(); //#26429
        $_.rslog = $a(283); //#26430
        for (var _1y = 1; _1y <= 282; _1y += 1) { //#26431
            $put($_.rslog, $get($_.rsalog, _1y), _1y); //#26431
        } //#26431
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_ultracode.$ctx[id] = $_[id]); //#26431
        bwipp_ultracode.__26432__ = 1; //#26431
        $_ = Object.getPrototypeOf($_); //#26431
    } //#26431
    $_.rsprod = function() {
        var _23 = $k[--$j]; //#26436
        var _24 = $k[--$j]; //#26436
        $k[$j++] = _24; //#26440
        $k[$j++] = _23; //#26440
        if ((_23 != 0) && (_24 != 0)) { //#26439
            var _27 = $get($_.rslog, $k[--$j]); //#26437
            var _2C = $get($_.rsalog, $f(_27 + $get($_.rslog, $k[--$j])) % 282); //#26437
            $k[$j++] = _2C; //#26437
        } else { //#26439
            $j -= 2; //#26439
            $k[$j++] = 0; //#26439
        } //#26439
    }; //#26439
    $_.n = $_.mcc; //#26444
    $_.k = $_.qcc; //#26444
    $k[$j++] = Infinity; //#26445
    $k[$j++] = 1; //#26445
    for (var _2G = 0, _2H = $_.k; _2G < _2H; _2G++) { //#26445
        $k[$j++] = 0; //#26445
    } //#26445
    $_.coeffs = $a(); //#26445
    for (var _2L = 1, _2K = $_.k; _2L <= _2K; _2L += 1) { //#26454
        $_.i = _2L; //#26447
        $put($_.coeffs, $_.i, $get($_.coeffs, $_.i - 1)); //#26448
        for (var _2S = $_.i - 1; _2S >= 1; _2S -= 1) { //#26452
            $_.j = _2S; //#26450
            $k[$j++] = $_.coeffs; //#26451
            $k[$j++] = $_.j; //#26451
            $k[$j++] = $get($_.coeffs, $_.j - 1); //#26451
            $k[$j++] = $get($_.coeffs, $_.j); //#26451
            $k[$j++] = $get($_.rsalog, $_.i); //#26451
            $_.rsprod(); //#26451
            var _2e = $k[--$j]; //#26451
            var _2f = $k[--$j]; //#26451
            var _2g = $k[--$j]; //#26451
            $put($k[--$j], _2g, $f(_2f + _2e) % 283); //#26451
        } //#26451
        $k[$j++] = $_.coeffs; //#26453
        $k[$j++] = 0; //#26453
        $k[$j++] = $get($_.coeffs, 0); //#26453
        $k[$j++] = $get($_.rsalog, $_.i); //#26453
        $_.rsprod(); //#26453
        var _2o = $k[--$j]; //#26453
        var _2p = $k[--$j]; //#26453
        $put($k[--$j], _2p, _2o); //#26453
    } //#26453
    $_.coeffs = $geti($_.coeffs, 0, $_.coeffs.length - 1); //#26455
    for (var _2v = $_.coeffs.length - 1; _2v >= 0; _2v -= 2) { //#26456
        var _2w = $_.coeffs; //#26456
        $put(_2w, _2v, $f(283 - $get(_2w, _2v))); //#26456
    } //#26456
    for (var _30 = 0, _2z = $_.n - 1; _30 <= _2z; _30 += 1) { //#26465
        $_.t = $f($get($_.rsseq, _30) + $get($_.rsseq, $_.n)) % 283; //#26460
        for (var _38 = 0, _37 = $_.k - 1; _38 <= _37; _38 += 1) { //#26464
            $_.j = _38; //#26462
            $put($_.rsseq, $_.n + $_.j, ($f($get($_.rsseq, ($_.n + $_.j) + 1) + ($f(283 - (($_.t * $get($_.coeffs, ($_.k - $_.j) - 1)) % 283))))) % 283); //#26463
        } //#26463
    } //#26463
    for (var _3P = $_.n, _3O = $_.n + $_.k; _3P <= _3O; _3P += 1) { //#26466
        $put($_.rsseq, _3P, $f(283 - $get($_.rsseq, _3P)) % 283); //#26466
    } //#26466
    $_.ecws = $geti($_.rsseq, $_.n, $_.k); //#26467
    var _3Y = $get($_.options, 'debugecc') !== undefined; //#26469
    if (_3Y) { //#26469
        $k[$j++] = 'bwipp.debugecc#26469'; //#26469
        $k[$j++] = $_.ecws; //#26469
        bwipp_raiseerror(); //#26469
    } //#26469
    if (!bwipp_ultracode.__26528__) { //#26528
        $_ = Object.create($_); //#26528
        $_.tiles = $a([13135, 13136, 13153, 13156, 13163, 13165, 13513, 13515, 13516, 13531, 13535, 13536, 13561, 13563, 13565, 13613, 13615, 13616, 13631, 13635, 13636, 13651, 13653, 13656, 15135, 15136, 15153, 15163, 15165, 15313, 15315, 15316, 15351, 15353, 15356, 15361, 15363, 15365, 15613, 15615, 15616, 15631, 15635, 15636, 15651, 15653, 15656, 16135, 16136, 16153, 16156, 16165, 16313, 16315, 16316, 16351, 16353, 16356, 16361, 16363, 16365, 16513, 16515, 16516, 16531, 16535, 16536, 16561, 16563, 16565, 31315, 31316, 31351, 31356, 31361, 31365, 31513, 31515, 31516, 31531, 31535, 31536, 31561, 31563, 31565, 31613, 31615, 31631, 31635, 31636, 31651, 31653, 31656, 35131, 35135, 35136, 35151, 35153, 35156, 35161, 35163, 35165, 35315, 35316, 35351, 35356, 35361, 35365, 35613, 35615, 35616, 35631, 35635, 35636, 35651, 35653, 35656, 36131, 36135, 36136, 36151, 36153, 36156, 36163, 36165, 36315, 36316, 36351, 36356, 36361, 36365, 36513, 36515, 36516, 36531, 36535, 36536, 36561, 36563, 36565, 51313, 51315, 51316, 51351, 51353, 51356, 51361, 51363, 51365, 51513, 51516, 51531, 51536, 51561, 51563, 51613, 51615, 51616, 51631, 51635, 51636, 51651, 51653, 51656, 53131, 53135, 53136, 53151, 53153, 53156, 53161, 53163, 53165, 53513, 53516, 53531, 53536, 53561, 53563, 53613, 53615, 53616, 53631, 53635, 53636, 53651, 53653, 53656, 56131, 56135, 56136, 56151, 56153, 56156, 56161, 56163, 56165, 56313, 56315, 56316, 56351, 56353, 56356, 56361, 56363, 56365, 56513, 56516, 56531, 56536, 56561, 56563, 61313, 61315, 61316, 61351, 61353, 61356, 61361, 61363, 61365, 61513, 61515, 61516, 61531, 61535, 61536, 61561, 61563, 61565, 61615, 61631, 61635, 61651, 61653, 63131, 63135, 63136, 63151, 63153, 63156, 63161, 63163, 63165, 63513, 63515, 63516, 63531, 63535, 63536, 63561, 63563, 63565, 63613, 63615, 63631, 63635, 63651, 63653, 65131, 65135, 65136, 65151, 65153, 65156, 65161, 65163, 65165, 65313, 65315, 65316, 65351, 65353, 65356, 65361, 65363, 65365, 65613, 65615, 65631, 65635, 65651, 65653, 56565, 51515]); //#26502
        $_.dccurev1 = $a([51363, 51563, 51653, 53153, 53163, 53513, 53563, 53613, 53653, 56153, 56163, 56313, 56353, 56363, 56513, 56563, 51316, 51356, 51536, 51616, 53156, 53516, 53536, 53616, 53636, 53656, 56136, 56156, 56316, 56356, 56516, 56536]); //#26509
        $_.dcclrev1 = $a([61351, 61361, 61531, 61561, 61631, 61651, 63131, 63151, 63161, 63531, 63561, 63631, 65131, 65161, 65351, 65631, 31351, 31361, 31531, 31561, 31631, 31651, 35131, 35151, 35161, 35361, 35631, 35651, 36131, 36151, 36351, 36531]); //#26515
        $_.dccurev2 = $a([15316, 16316, 13516, 16516, 13616, 15616, 13136, 15136, 16136, 13536, 16536, 13636, 13156, 16156, 15356, 13656, 15313, 16313, 13513, 16513, 13613, 15613, 13153, 15153, 16153, 16353, 13653, 15653, 13163, 15163, 15363, 13563]); //#26521
        $_.dcclrev2 = $a([36315, 36515, 35615, 35135, 36135, 31535, 36535, 31635, 35635, 35165, 36165, 31365, 35365, 36365, 31565, 36565, 61315, 65315, 63515, 61615, 65135, 61535, 63535, 61635, 63635, 65635, 63165, 65165, 61365, 65365, 61565, 63565]); //#26527
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_ultracode.$ctx[id] = $_[id]); //#26527
        bwipp_ultracode.__26528__ = 1; //#26527
        $_ = Object.getPrototypeOf($_); //#26527
    } //#26527
    $k[$j++] = 'dccu'; //#26530
    if ($_.rev == 1) { //#26530
        $k[$j++] = $_.dccurev1; //#26530
    } else { //#26530
        $k[$j++] = $_.dccurev2; //#26530
    } //#26530
    var _3j = $k[--$j]; //#26530
    $_[$k[--$j]] = _3j; //#26530
    $k[$j++] = 'dccl'; //#26531
    if ($_.rev == 1) { //#26531
        $k[$j++] = $_.dcclrev1; //#26531
    } else { //#26531
        $k[$j++] = $_.dcclrev2; //#26531
    } //#26531
    var _3o = $k[--$j]; //#26531
    $_[$k[--$j]] = _3o; //#26531
    $_.rows = $f(($_.rows * 6) + 1); //#26534
    $_.columns = $_.columns + 6; //#26535
    $k[$j++] = Infinity; //#26536
    for (var _3u = 0, _3v = $_.rows * $_.columns; _3u < _3v; _3u++) { //#26536
        $k[$j++] = -1; //#26536
    } //#26536
    $_.pixs = $a(); //#26536
    $_.qmv = function() {
        var _3y = $k[--$j]; //#26537
        var _3z = $k[--$j]; //#26537
        $k[$j++] = $f(_3z + (_3y * $_.columns)); //#26537
    }; //#26537
    for (var _42 = 0, _41 = $_.columns - 1; _42 <= _41; _42 += 1) { //#26546
        $_.i = _42; //#26539
        for (var _45 = 0, _44 = $f($_.rows - 1); _45 <= _44; _45 += 6) { //#26543
            $_.j = _45; //#26541
            if ($_.i >= 5) { //#26542
                $k[$j++] = $_.pixs; //#26542
                $k[$j++] = $_.i; //#26542
                $k[$j++] = $_.j; //#26542
                $_.qmv(); //#26542
                var _4B = $k[--$j]; //#26542
                $put($k[--$j], _4B, ($_.i % 2) * 9); //#26542
            } //#26542
        } //#26542
        $k[$j++] = $_.pixs; //#26544
        $k[$j++] = $_.i; //#26544
        $k[$j++] = 0; //#26544
        $_.qmv(); //#26544
        var _4F = $k[--$j]; //#26544
        $put($k[--$j], _4F, 9); //#26544
        $k[$j++] = $_.pixs; //#26545
        $k[$j++] = $_.i; //#26545
        $k[$j++] = $f($_.rows - 1); //#26545
        $_.qmv(); //#26545
        var _4K = $k[--$j]; //#26545
        $put($k[--$j], _4K, 9); //#26545
    } //#26545
    for (var _4O = 1, _4N = $f($_.rows - 2); _4O <= _4N; _4O += 1) { //#26559
        $_.i = _4O; //#26548
        for (var _4R = 3, _4Q = $_.columns - 1; _4R <= _4Q; _4R += 16) { //#26552
            $_.j = _4R; //#26550
            $k[$j++] = $_.pixs; //#26551
            $k[$j++] = $_.j; //#26551
            $k[$j++] = $_.i; //#26551
            $_.qmv(); //#26551
            var _4W = $k[--$j]; //#26551
            $put($k[--$j], _4W, (1 - ($_.i % 2)) * 9); //#26551
        } //#26551
        $k[$j++] = $_.pixs; //#26553
        $k[$j++] = 0; //#26553
        $k[$j++] = $_.i; //#26553
        $_.qmv(); //#26553
        var _4a = $k[--$j]; //#26553
        $put($k[--$j], _4a, 9); //#26553
        $k[$j++] = $_.pixs; //#26554
        $k[$j++] = 1; //#26554
        $k[$j++] = $_.i; //#26554
        $_.qmv(); //#26554
        var _4f = $k[--$j]; //#26554
        $put($k[--$j], _4f, (1 - ($_.i % 2)) * 9); //#26554
        $k[$j++] = $_.pixs; //#26555
        $k[$j++] = 2; //#26555
        $k[$j++] = $_.i; //#26555
        $_.qmv(); //#26555
        var _4j = $k[--$j]; //#26555
        $put($k[--$j], _4j, 0); //#26555
        $k[$j++] = $_.pixs; //#26556
        $k[$j++] = 3; //#26556
        $k[$j++] = $_.i; //#26556
        $_.qmv(); //#26556
        var _4n = $k[--$j]; //#26556
        $put($k[--$j], _4n, 9); //#26556
        $k[$j++] = $_.pixs; //#26557
        $k[$j++] = 4; //#26557
        $k[$j++] = $_.i; //#26557
        $_.qmv(); //#26557
        var _4r = $k[--$j]; //#26557
        $put($k[--$j], _4r, 0); //#26557
        $k[$j++] = $_.pixs; //#26558
        $k[$j++] = $_.columns - 1; //#26558
        $k[$j++] = $_.i; //#26558
        $_.qmv(); //#26558
        var _4w = $k[--$j]; //#26558
        $put($k[--$j], _4w, 9); //#26558
    } //#26558
    $_.i = (~~($_.rows / 2)) - 5; //#26562
    $k[$j++] = Infinity; //#26563
    var _53 = $cvrs($s(5), $get($_.dccu, $_.dcc), 10); //#26564
    for (var _54 = 0, _55 = _53.length; _54 < _55; _54++) { //#26564
        $k[$j++] = $get(_53, _54) - 48; //#26564
    } //#26564
    var _5B = $cvrs($s(5), $get($_.dccl, $_.dcc), 10); //#26566
    $k[$j++] = 0; //#26566
    for (var _5C = 0, _5D = _5B.length; _5C < _5D; _5C++) { //#26566
        $k[$j++] = $get(_5B, _5C) - 48; //#26566
    } //#26566
    var _5F = $a(); //#26566
    for (var _5G = 0, _5H = _5F.length; _5G < _5H; _5G++) { //#26570
        $k[$j++] = $get(_5F, _5G); //#26568
        $k[$j++] = $_.pixs; //#26568
        $k[$j++] = 2; //#26568
        $k[$j++] = $_.i; //#26568
        $_.qmv(); //#26568
        $r(3, -1); //#26568
        var _5L = $k[--$j]; //#26568
        var _5M = $k[--$j]; //#26568
        $put($k[--$j], _5M, _5L); //#26568
        $_.i = $_.i + 1; //#26569
    } //#26569
    $k[$j++] = Infinity; //#26573
    $k[$j++] = $_.start; //#26576
    $k[$j++] = $_.mcc; //#26576
    $aload($_.ecws); //#26576
    $k[$j++] = $_.tcc; //#26580
    $k[$j++] = 283; //#26580
    $k[$j++] = $_.acc; //#26580
    $aload($_.dcws); //#26580
    for (var _5W = 0, _5X = $_.pads; _5W < _5X; _5W++) { //#26581
        $k[$j++] = 284; //#26581
    } //#26581
    $k[$j++] = $_.qcc; //#26582
    $_.tileseq = $a(); //#26582
    $_.x = 5; //#26585
    $_.y = 1; //#26585
    var _5a = $_.tileseq; //#26586
    for (var _5b = 0, _5c = _5a.length; _5b < _5c; _5b++) { //#26599
        var _5h = $cvrs($s(5), $get($_.tiles, $get(_5a, _5b)), 10); //#26587
        for (var _5i = 0, _5j = _5h.length; _5i < _5j; _5i++) { //#26590
            $k[$j++] = $get(_5h, _5i); //#26588
            $k[$j++] = $_.pixs; //#26588
            $k[$j++] = $_.x; //#26588
            $k[$j++] = $_.y; //#26588
            $_.qmv(); //#26588
            $r(3, -1); //#26588
            var _5o = $k[--$j]; //#26588
            var _5p = $k[--$j]; //#26588
            $put($k[--$j], _5p, $f(_5o - 48)); //#26588
            $_.y = $_.y + 1; //#26589
        } //#26589
        if ($_.y != $f($_.rows - 1)) { //#26596
            $_.y = $_.y + 1; //#26592
        } else { //#26596
            $_.x = $_.x + 1; //#26594
            $_.y = 1; //#26594
            $k[$j++] = $_.pixs; //#26595
            $k[$j++] = $_.x; //#26595
            $k[$j++] = $_.y; //#26595
            $_.qmv(); //#26595
            var _5z = $k[--$j]; //#26595
            if ($get($k[--$j], _5z) != -1) { //#26597
                $_.x = $_.x + 1; //#26596
            } //#26596
        } //#26596
    } //#26596
    if (!bwipp_ultracode.__26610__) { //#26610
        $_ = Object.create($_); //#26610
        var _63 = new Map([
            [0, "FFFFFF"],
            [9, "000000"],
            [1, "00FFFF"],
            [3, "FF00FF"],
            [5, "FFFF00"],
            [6, "00FF00"]
        ]); //#26608
        $_.colormap = _63; //#26609
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_ultracode.$ctx[id] = $_[id]); //#26609
        bwipp_ultracode.__26610__ = 1; //#26609
        $_ = Object.getPrototypeOf($_); //#26609
    } //#26609
    var _6C = new Map([
        ["ren", 'renmatrix'],
        ["pixs", $_.pixs],
        ["pixx", $_.columns],
        ["pixy", $_.rows],
        ["height", ($_.rows / 72) * 2],
        ["width", ($_.columns / 72) * 2],
        ["colormap", $_.colormap],
        ["borderleft", 1],
        ["borderright", 1],
        ["bordertop", 1],
        ["borderbottom", 1],
        ["opt", $_.options]
    ]); //#26625
    $k[$j++] = _6C; //#26628
    if (!$_.dontdraw) { //#26628
        bwipp_renmatrix(); //#26628
    } //#26628
    $_ = Object.getPrototypeOf($_); //#26630
    $_ = Object.getPrototypeOf($_); //#26632
} //bwipp_ultracode
function bwipp_jabcode() {
    $_ = Object.create($_); //#26661
    $_.dontdraw = false; //#26664
    $_.rows = -1; //#26665
    $_.columns = -1; //#26666
    $_.slave = false; //#26667
    $_.colors = 16; //#26668
    $_.eclevel = 6; //#26669
    $_.raw = false; //#26670
    $_.parse = false; //#26671
    $_.parsefnc = false; //#26672
    $_.mask = -1; //#26673
    $k[$j++] = $_; //#26675
    bwipp_processoptions(); //#26675
    $_.options = $k[--$j]; //#26675
    $_.barcode = $k[--$j]; //#26676
    $_.databpm = ~~(Math.round(Math.log($_.colors) / Math.log(2))); //#26678
    var _3 = $_.colors; //#26679
    $k[$j++] = 'metabpm'; //#26679
    $k[$j++] = _3; //#26679
    if (_3 > 8) { //#26679
        $j--; //#26679
        $k[$j++] = 8; //#26679
    } //#26679
    var _4 = $k[--$j]; //#26679
    $_[$k[--$j]] = ~~(Math.round(Math.log(_4) / Math.log(2))); //#26679
    $_.fn1 = -1; //#26682
    var _9 = new Map([
        ["parse", $_.parse],
        ["parsefnc", $_.parsefnc],
        ["FNC1", $_.fn1]
    ]); //#26686
    $_.fncvals = _9; //#26687
    $k[$j++] = 'msg'; //#26688
    $k[$j++] = $_.barcode; //#26688
    $k[$j++] = $_.fncvals; //#26688
    bwipp_parseinput(); //#26688
    var _C = $k[--$j]; //#26688
    $_[$k[--$j]] = _C; //#26688
    $_.msglen = $_.msg.length; //#26689
    $_.addtobits = function() {
        var _F = $k[--$j]; //#26710
        $puti($_.bits, $_.j, _F); //#26710
        $_.j = _F.length + $_.j; //#26711
    }; //#26711
    $_.tofixedbits = function() {
        var _K = $strcpy($s(13), "0000000000000"); //#26715
        $k[$j++] = _K; //#26715
        $k[$j++] = _K; //#26715
        $r(4, -1); //#26715
        var _N = $cvrs($s(13), $k[--$j], 2); //#26715
        var _O = $k[--$j]; //#26716
        var _P = $k[--$j]; //#26716
        var _Q = $k[--$j]; //#26716
        $puti(_O, $f(_Q - _N.length), _N); //#26716
        $k[$j++] = $geti(_P, 0, _Q); //#26717
    }; //#26717
    var _T = ($_.msglen <= 15) ? 4 : 17; //#26721
    $_.bits = $s(((7 + _T) + ($_.msglen * 8)) + 12); //#26721
    $_.j = 0; //#26722
    $k[$j++] = 31; //#26723
    $k[$j++] = 5; //#26723
    $_.tofixedbits(); //#26723
    $_.addtobits(); //#26723
    $k[$j++] = "00"; //#26724
    $_.addtobits(); //#26724
    if ($_.msglen <= 15) { //#26729
        $k[$j++] = $_.msglen; //#26726
        $k[$j++] = 4; //#26726
        $_.tofixedbits(); //#26726
        $_.addtobits(); //#26726
    } else { //#26729
        $k[$j++] = "0000"; //#26728
        $_.addtobits(); //#26728
        $k[$j++] = $_.msglen - 16; //#26729
        $k[$j++] = 13; //#26729
        $_.tofixedbits(); //#26729
        $_.addtobits(); //#26729
    } //#26729
    for (var _b = 0, _a = $_.msglen - 1; _b <= _a; _b += 1) { //#26733
        $k[$j++] = $get($_.msg, _b); //#26732
        $k[$j++] = 8; //#26732
        $_.tofixedbits(); //#26732
        $_.addtobits(); //#26732
    } //#26732
    $k[$j++] = 28; //#26734
    $k[$j++] = 5; //#26734
    $_.tofixedbits(); //#26734
    $_.addtobits(); //#26734
    $k[$j++] = 31; //#26735
    $k[$j++] = 5; //#26735
    $_.tofixedbits(); //#26735
    $_.addtobits(); //#26735
    $k[$j++] = "11"; //#26736
    $_.addtobits(); //#26736
    $_.diffside = 21; //#26739
    $_.sameshape = false; //#26740
    $_.sameecc = false; //#26741
    $_.hasslaves = false; //#26742
    $_.metrics = function() {
        $_.mc = $k[--$j]; //#26746
        $_.mr = $k[--$j]; //#26746
        var _g = $_.mc; //#26747
        var _h = $_.mr; //#26747
        var _i = $_.mc; //#26748
        var _j = $_.mr; //#26748
        var _k = $_.colors; //#26750
        var _l = 64; //#26750
        if (64 > _k) { //#26750
            var _ = _k; //#26750
            _k = _l; //#26750
            _l = _; //#26750
        } //#26750
        var _n = $_.slave ? 7 : 17; //#26751
        $k[$j++] = _g * _h; //#26779
        $k[$j++] = ((((~~($f(_i - 25) / 16)) + 2) * ((~~($f(_j - 25) / 16)) + 2)) - 4) * 7; //#26779
        $k[$j++] = _l * 2; //#26779
        $k[$j++] = _n * 4; //#26779
        if (!$_.slave) { //#26778
            var _r = $eq($_.mr, $_.mc) ? 0 : 1; //#26755
            $_.metass = _r; //#26755
            var _s = $_.mr; //#26756
            var _t = $_.mc; //#26756
            if ($lt(_s, _t)) { //#26756
                var _ = _t; //#26756
                _t = _s; //#26756
                _s = _; //#26756
            } //#26756
            $_.metavf = $get($a([0, 1, 2, 2, 3, 3, 3, 3]), ~~($f(_s - 21) / 16)); //#26757
            $k[$j++] = 'metavlen'; //#26758
            if ($_.metass == 0) { //#26758
                $k[$j++] = $a([2, 2, 3, 4]); //#26758
            } else { //#26758
                $k[$j++] = $a([4, 6, 8, 10]); //#26758
            } //#26758
            var _11 = $get($k[--$j], $_.metavf); //#26758
            $_[$k[--$j]] = _11; //#26758
            $_.metaelen = $f(($_.metavf * 2) + 10); //#26759
            $k[$j++] = $f($f(7 + $_.metavlen) + $_.metaelen); //#26762
            if ($_.hasslaves) { //#26762
                var _17 = $k[--$j]; //#26762
                $k[$j++] = $f(_17 + 4); //#26762
            } //#26762
            var _1A = ~~(Math.ceil(($k[--$j] * 2) / $_.metabpm)); //#26765
            $_.nummetabits = $f((_1A * $_.metabpm) + 6); //#26765
            $k[$j++] = _1A + 6; //#26766
        } else { //#26778
            $k[$j++] = 3; //#26769
            if (!$_.sameshape) { //#26769
                var _1D = $k[--$j]; //#26769
                $k[$j++] = $f(_1D + 5); //#26769
            } //#26769
            if ($_.hasslaves) { //#26770
                var _1F = $k[--$j]; //#26770
                $k[$j++] = $f(_1F + 3); //#26770
            } //#26770
            if (!$_.sameecc) { //#26775
                var _1H = $_.mr; //#26772
                var _1I = $_.mc; //#26772
                if ($lt(_1H, _1I)) { //#26772
                    var _ = _1I; //#26772
                    _1I = _1H; //#26772
                    _1H = _; //#26772
                } //#26772
                var _1L = $k[--$j]; //#26774
                $k[$j++] = $f(_1L + $get($a([10, 12, 14, 14, 16, 16, 16, 16]), ~~($f(_1H - 21) / 16))); //#26774
            } //#26774
            var _1O = ~~(Math.ceil(($k[--$j] * 2) / $_.metabpm)); //#26778
            $_.nummetabits = _1O * $_.metabpm; //#26778
            $k[$j++] = _1O; //#26778
        } //#26778
        var _1Q = $k[--$j]; //#26781
        $_.nummetamodules = _1Q; //#26781
        var _1R = $k[--$j]; //#26782
        var _1S = $k[--$j]; //#26782
        var _1T = $k[--$j]; //#26782
        $_.numdatamodules = $f($k[--$j] - ($f(_1T + ($f(_1S + $f(_1R + _1Q)))))); //#26782
        $_.numdatabits = $_.numdatamodules * $_.databpm; //#26783
    }; //#26783
    $_.coderate = $get($a([0.67, 0.63, 0.57, 0.55, 0.5, 0.43, 0.34, 0.25, 0.2, 0.17, 0.14]), $_.eclevel); //#26787
    $_.grosslen = ~~Math.ceil($_.bits.length / $_.coderate); //#26788
    $_.snapsize = function() {
        var _1d = (~~Math.ceil($k[--$j])) - 18; //#26789
        $k[$j++] = _1d; //#26789
        if (_1d < 0) { //#26789
            $j--; //#26789
            $k[$j++] = 0; //#26789
        } //#26789
        var _1e = $k[--$j]; //#26789
        $k[$j++] = ((~~(_1e / 4)) * 4) + 21; //#26789
    }; //#26789
    if (($_.rows == -1) && ($_.columns == -1)) { //#26818
        $k[$j++] = 'size'; //#26792
        $k[$j++] = Math.sqrt($_.grosslen); //#26792
        $_.snapsize(); //#26792
        var _1i = $k[--$j]; //#26792
        $_[$k[--$j]] = _1i; //#26792
        for (;;) { //#26797
            $k[$j++] = $_.size; //#26794
            $k[$j++] = $_.size; //#26794
            $_.metrics(); //#26794
            if ($_.grosslen <= $_.numdatabits) { //#26795
                break; //#26795
            } //#26795
            $_.size = $f($_.size + 4); //#26796
        } //#26796
        $_.rows = $_.size; //#26798
        $_.columns = $_.size; //#26799
    } else { //#26818
        if (($_.columns == -1) && ($_.rows != -1)) { //#26808
            $k[$j++] = 'columns'; //#26802
            $k[$j++] = $_.grosslen / $_.rows; //#26802
            $_.snapsize(); //#26802
            var _1v = $k[--$j]; //#26802
            $_[$k[--$j]] = _1v; //#26802
            for (;;) { //#26807
                $k[$j++] = $_.rows; //#26804
                $k[$j++] = $_.columns; //#26804
                $_.metrics(); //#26804
                if ($_.grosslen <= $_.numdatabits) { //#26805
                    break; //#26805
                } //#26805
                $_.columns = $f($_.columns + 4); //#26806
            } //#26806
        } //#26806
        if (($_.rows == -1) && ($_.columns != -1)) { //#26816
            $k[$j++] = 'rows'; //#26810
            $k[$j++] = $_.grosslen / $_.columns; //#26810
            $_.snapsize(); //#26810
            var _26 = $k[--$j]; //#26810
            $_[$k[--$j]] = _26; //#26810
            for (;;) { //#26815
                $k[$j++] = $_.rows; //#26812
                $k[$j++] = $_.columns; //#26812
                $_.metrics(); //#26812
                if ($_.grosslen <= $_.numdatabits) { //#26813
                    break; //#26813
                } //#26813
                $_.rows = $f($_.rows + 4); //#26814
            } //#26814
        } //#26814
        if (($_.rows != -1) && ($_.columns != -1)) { //#26819
            $k[$j++] = $_.rows; //#26818
            $k[$j++] = $_.columns; //#26818
            $_.metrics(); //#26818
        } //#26818
    } //#26818
    $_.C = $_.numdatabits; //#26821
    $_.cols = $_.columns; //#26822
    if (($_.rows > 145) || ($_.cols > 145)) { //#26827
        $k[$j++] = 'bwipp.jabcodeNoValidSymbol#26826'; //#26826
        $k[$j++] = "Maximum length exceeded or invalid content"; //#26826
        bwipp_raiseerror(); //#26826
    } //#26826
    $_.min = $_.C; //#26830
    for (var _2M = 3; _2M <= 8; _2M += 1) { //#26842
        $_.i = _2M; //#26832
        for (var _2O = $_.i + 1; _2O <= 9; _2O += 1) { //#26841
            $_.j = _2O; //#26834
            $_.dist = (((~~($_.C / $_.j)) * $_.j) - ((~~($_.C / $_.j)) * $_.i)) - $_.bits.length; //#26835
            if (($_.dist < $_.min) && ($_.dist >= 0)) { //#26840
                $_.datawc = $_.i; //#26837
                $_.datawr = $_.j; //#26838
                $_.min = $_.dist; //#26839
            } //#26839
        } //#26839
    } //#26839
    $_.tmpbits = $s(((~~($_.C / $_.datawr)) * $_.datawr) - ((~~($_.C / $_.datawr)) * $_.datawc)); //#26845
    $puti($_.tmpbits, 0, $_.bits); //#26846
    for (var _2o = $_.bits.length, _2n = $_.tmpbits.length - 1; _2o <= _2n; _2o += 1) { //#26850
        var _2q = $get($_.tmpbits, _2o - 1); //#26848
        $k[$j++] = _2o; //#26848
        $k[$j++] = _2q; //#26848
        if ((_2q % 2) == 0) { //#26848
            var _2r = $k[--$j]; //#26848
            $k[$j++] = $f(_2r + 1); //#26848
        } else { //#26848
            var _2s = $k[--$j]; //#26848
            $k[$j++] = $f(_2s - 1); //#26848
        } //#26848
        $k[$j++] = $_.tmpbits; //#26849
        $r(3, 1); //#26849
        var _2u = $k[--$j]; //#26849
        var _2v = $k[--$j]; //#26849
        $put($k[--$j], _2v, _2u); //#26849
    } //#26849
    $_.bits = $_.tmpbits; //#26851
    $_.m0 = 22609 + 1; //#26855
    $_.m1 = 62509 - 65536; //#26855
    $_.m2 = 19605; //#26855
    $_.m3 = 32557; //#26855
    $_.lcg64_temper = function() {
        $_.p00 = $_.m0 * $_.s0; //#26861
        $_.p01 = $_.m0 * $_.s1; //#26861
        $_.p02 = $_.m0 * $_.s2; //#26861
        $_.p03 = $_.m0 * $_.s3; //#26861
        $_.p10 = $_.m1 * $_.s0; //#26862
        $_.p11 = $_.m1 * $_.s1; //#26862
        $_.p12 = $_.m1 * $_.s2; //#26862
        $_.p13 = $_.m1 * $_.s3; //#26862
        $_.p20 = $_.m2 * $_.s0; //#26863
        $_.p21 = $_.m2 * $_.s1; //#26863
        $_.p22 = $_.m2 * $_.s2; //#26863
        $_.p23 = $_.m2 * $_.s3; //#26863
        $_.p30 = $_.m3 * $_.s0; //#26864
        $_.p31 = $_.m3 * $_.s1; //#26864
        $_.p32 = $_.m3 * $_.s2; //#26864
        $_.p33 = $_.m3 * $_.s3; //#26864
        $_.s3 = ($_.p33 % 65536) + 1; //#26866
        $_.s2 = (($_.p32 % 65536) + (~~($_.p33 / 65536))) + ($_.p23 % 65536); //#26868
        $_.s1 = ((($_.p31 % 65536) + (~~($_.p32 / 65536))) + (($_.p22 % 65536) + (~~($_.p23 / 65536)))) + ($_.p13 % 65536); //#26871
        $_.s0 = (((($_.p30 % 65536) + (~~($_.p31 / 65536))) + (($_.p21 % 65536) + (~~($_.p22 / 65536)))) + (($_.p12 % 65536) + (~~($_.p13 / 65536)))) + ($_.p03 % 65536); //#26875
        $_.s3 = $_.s3 + 65536; //#26878
        $_.s2 = $_.s2 + 65535; //#26879
        $_.s1 = $_.s1 + 65535; //#26880
        $_.s0 = $_.s0 + 65535; //#26881
        $_.s2 = (~~($_.s3 / 65536)) + $_.s2; //#26884
        $_.s3 = $_.s3 % 65536; //#26884
        $_.s1 = (~~($_.s2 / 65536)) + $_.s1; //#26885
        $_.s2 = $_.s2 % 65536; //#26885
        $_.s0 = (~~($_.s1 / 65536)) + $_.s0; //#26886
        $_.s1 = $_.s1 % 65536; //#26886
        $_.s0 = $_.s0 % 65536; //#26887
        var _40 = (((($_.s0 - 32768) * 65536) + $_.s1) ^ 2147483648) & 4294967295; //#26892
        var _41 = _40 ^ (_40 >>> 11); //#26893
        var _42 = _41 ^ ((_41 << 7) & -1658038656); //#26894
        var _43 = (_42 ^ ((_42 << 15) & -272236544)) & 4294967295; //#26896
        $k[$j++] = _43 ^ (_43 >>> 18); //#26896
    }; //#26896
    $_.createMatrixA = function() {
        $k[$j++] = 'nb_pcb'; //#26902
        if ($_.wr < 4) { //#26902
            $k[$j++] = ~~($_.Pg_sub_block / 2); //#26902
        } else { //#26902
            $k[$j++] = (~~($_.Pg_sub_block / $_.wr)) * $_.wc; //#26902
        } //#26902
        var _49 = $k[--$j]; //#26902
        $_[$k[--$j]] = _49; //#26902
        $_.offset = ~~Math.ceil($_.Pg_sub_block / 32); //#26903
        $_.effwidth = $_.offset * 32; //#26904
        $_.matrixA = $a($_.offset * $_.nb_pcb); //#26905
        for (var _4J = 0, _4I = ($_.offset * $_.nb_pcb) - 1; _4J <= _4I; _4J += 1) { //#26906
            $put($_.matrixA, _4J, 0); //#26906
        } //#26906
        $_.permutation = $a($_.Pg_sub_block); //#26907
        for (var _4P = 0, _4O = $_.Pg_sub_block - 1; _4P <= _4O; _4P += 1) { //#26908
            $put($_.permutation, _4P, _4P); //#26908
        } //#26908
        for (var _4U = 0, _4T = (~~($_.Pg_sub_block / $_.wr)) - 1; _4U <= _4T; _4U += 1) { //#26917
            $_.i = _4U; //#26911
            for (var _4X = 0, _4W = $f($_.wr - 1); _4X <= _4W; _4X += 1) { //#26916
                $_.j = _4X; //#26913
                var _4Y = $_.matrixA; //#26914
                var _4Z = $_.i; //#26914
                var _4a = $_.effwidth; //#26914
                var _4b = $_.wr; //#26914
                var _4c = $_.j; //#26914
                var _4i = $f(31 - (($f(($_.i * $f($_.effwidth + $_.wr)) + $_.j)) % 32)); //#26915
                $put(_4Y, ~~(($f((_4Z * $f(_4a + _4b)) + _4c)) / 32), $get(_4Y, ~~(($f((_4Z * $f(_4a + _4b)) + _4c)) / 32)) | ((_4i < 0 ? 1 >>> -_4i : 1 << _4i))); //#26915
            } //#26915
        } //#26915
        $_.s0 = 0; //#26920
        $_.s1 = 0; //#26920
        $_.s2 = 11; //#26920
        $_.s3 = 64569; //#26920
        for (var _4l = 1, _4k = $f($_.wc - 1); _4l <= _4k; _4l += 1) { //#26943
            $_.i = _4l; //#26922
            $_.off_index = (~~($_.Pg_sub_block / $_.wr)) * $_.i; //#26923
            for (var _4r = 0, _4q = $_.Pg_sub_block - 1; _4r <= _4q; _4r += 1) { //#26942
                $_.j = _4r; //#26925
                $_.lcg64_temper(); //#26926
                var _4s = $k[--$j]; //#26927
                $k[$j++] = _4s; //#26927
                if (_4s < 0) { //#26927
                    var _4t = $k[--$j]; //#26927
                    $k[$j++] = $f((_4t ^ 2147483648) + 2147483648); //#26927
                } //#26927
                $_.pos = ~~(($k[--$j] / 4294967296) * ($_.Pg_sub_block - $_.j)); //#26929
                for (var _50 = 0, _4z = (~~($_.Pg_sub_block / $_.wr)) - 1; _50 <= _4z; _50 += 1) { //#26938
                    $_.k = _50; //#26931
                    var _51 = $_.matrixA; //#26932
                    var _52 = $_.off_index; //#26932
                    var _53 = $_.k; //#26932
                    var _54 = $_.offset; //#26932
                    var _55 = $_.j; //#26932
                    var _5D = $get($_.matrixA, (~~($get($_.permutation, $_.pos) / 32)) + ($_.k * $_.offset)); //#26934
                    var _5H = -($f(31 - ($get($_.permutation, $_.pos) % 32))); //#26935
                    var _5J = 31 - ($_.j % 32); //#26936
                    $put(_51, ((_52 + _53) * _54) + (~~(_55 / 32)), $get(_51, ((_52 + _53) * _54) + (~~(_55 / 32))) | ((_5J < 0 ? (((_5H < 0 ? _5D >>> -_5H : _5D << _5H)) & 1) >>> -_5J : (((_5H < 0 ? _5D >>> -_5H : _5D << _5H)) & 1) << _5J))); //#26937
                } //#26937
                var _5M = $_.permutation; //#26939
                var _5N = $_.Pg_sub_block; //#26939
                var _5O = $_.j; //#26939
                $put(_5M, (_5N - 1) - _5O, $get($_.permutation, $_.pos)); //#26941
                $put($_.permutation, $_.pos, $get(_5M, (_5N - 1) - _5O)); //#26941
            } //#26941
        } //#26941
    }; //#26941
    $_.createMetadataMatrixA = function() {
        $_.nb_pcb = ~~($_.Pg_sub_block / 2); //#26949
        $_.offset = ~~Math.ceil($_.Pg_sub_block / 32); //#26950
        $_.matrixA = $a($_.offset * $_.nb_pcb); //#26951
        for (var _5b = 0, _5a = ($_.offset * $_.nb_pcb) - 1; _5b <= _5a; _5b += 1) { //#26952
            $put($_.matrixA, _5b, 0); //#26952
        } //#26952
        $_.permutation = $a($_.Pg_sub_block); //#26953
        for (var _5h = 0, _5g = $_.Pg_sub_block - 1; _5h <= _5g; _5h += 1) { //#26954
            $put($_.permutation, _5h, _5h); //#26954
        } //#26954
        $_.s0 = 0; //#26957
        $_.s1 = 0; //#26957
        $_.s2 = 0; //#26957
        $_.s3 = 38545; //#26957
        $_.nb_once = ~~((~~($f((($_.nb_pcb / $_.wc) * $_.Pg_sub_block) + 3))) / $_.nb_pcb); //#26958
        for (var _5p = 0, _5o = $_.nb_pcb - 1; _5p <= _5o; _5p += 1) { //#26973
            $_.i = _5p; //#26960
            for (var _5s = 0, _5r = $_.nb_once - 1; _5s <= _5r; _5s += 1) { //#26972
                $_.j = _5s; //#26962
                $_.lcg64_temper(); //#26963
                var _5t = $k[--$j]; //#26964
                $k[$j++] = _5t; //#26964
                if (_5t < 0) { //#26964
                    var _5u = $k[--$j]; //#26964
                    $k[$j++] = $f((_5u ^ 2147483648) + 2147483648); //#26964
                } //#26964
                $_.pos = ~~(($k[--$j] / 4294967296) * ($_.Pg_sub_block - $_.j)); //#26966
                var _5y = $_.matrixA; //#26967
                var _5z = $_.i; //#26967
                var _60 = $_.offset; //#26967
                var _63 = $get($_.permutation, $_.pos); //#26967
                var _68 = $f(31 - ($get($_.permutation, $_.pos) % 32)); //#26968
                $put(_5y, (_5z * _60) + (~~(_63 / 32)), $get(_5y, (_5z * _60) + (~~(_63 / 32))) | ((_68 < 0 ? 1 >>> -_68 : 1 << _68))); //#26968
                var _6B = $_.permutation; //#26969
                var _6C = $_.Pg_sub_block; //#26969
                var _6D = $_.j; //#26969
                $put(_6B, (_6C - 1) - _6D, $get($_.permutation, $_.pos)); //#26971
                $put($_.permutation, $_.pos, $get(_6B, (_6C - 1) - _6D)); //#26971
            } //#26971
        } //#26971
    }; //#26971
    $_.GaussJordan = function() {
        $k[$j++] = 'nb_pcb'; //#26979
        if ($_.wr < 4) { //#26979
            $k[$j++] = ~~($_.Pg_sub_block / 2); //#26979
        } else { //#26979
            $k[$j++] = (~~($_.Pg_sub_block / $_.wr)) * $_.wc; //#26979
        } //#26979
        var _6N = $k[--$j]; //#26979
        $_[$k[--$j]] = _6N; //#26979
        $_.offset = ~~Math.ceil($_.Pg_sub_block / 32); //#26980
        var _6Q = $_.matrixA; //#26981
        $_.matrixH = $arrcpy($a(_6Q.length), _6Q); //#26981
        $k[$j++] = Infinity; //#26982
        for (var _6U = 0, _6V = $_.Pg_sub_block; _6U < _6V; _6U++) { //#26982
            $k[$j++] = 0; //#26982
        } //#26982
        $_.column_arrangement = $a(); //#26982
        $k[$j++] = Infinity; //#26983
        for (var _6Y = 0, _6Z = $_.Pg_sub_block; _6Y < _6Z; _6Y++) { //#26983
            $k[$j++] = false; //#26983
        } //#26983
        $_.processed_column = $a(); //#26983
        $k[$j++] = Infinity; //#26984
        for (var _6c = 0, _6d = $_.nb_pcb; _6c < _6d; _6c++) { //#26984
            $k[$j++] = 0; //#26984
        } //#26984
        $_.zero_lines_nb = $a(); //#26984
        $k[$j++] = Infinity; //#26985
        for (var _6g = 0, _6h = $_.Pg_sub_block * 2; _6g < _6h; _6g++) { //#26985
            $k[$j++] = 0; //#26985
        } //#26985
        $_.swap_col = $a(); //#26985
        $_.zero_lines = 0; //#26986
        $_.loop0 = 0; //#26988
        for (var _6l = 0, _6k = $_.nb_pcb - 1; _6l <= _6k; _6l += 1) { //#27026
            $_.i = _6l; //#26990
            $_.pivot_column = $_.Pg_sub_block + 1; //#26991
            for (var _6p = 0, _6o = $_.Pg_sub_block - 1; _6p <= _6o; _6p += 1) { //#26999
                $_.j = _6p; //#26993
                var _6u = $get($_.matrixH, ~~(((($_.offset * 32) * $_.i) + $_.j) / 32)); //#26994
                var _6y = -(31 - (((($_.offset * 32) * $_.i) + $_.j) % 32)); //#26995
                if ((((_6y < 0 ? _6u >>> -_6y : _6u << _6y)) & 1) == 1) { //#26998
                    $_.pivot_column = $_.j; //#26996
                    break; //#26997
                } //#26997
            } //#26997
            if ($_.pivot_column < $_.Pg_sub_block) { //#27024
                $put($_.processed_column, $_.pivot_column, true); //#27001
                $put($_.column_arrangement, $_.pivot_column, $_.i); //#27002
                if ($_.pivot_column >= $_.nb_pcb) { //#27006
                    $put($_.swap_col, $_.loop0 * 2, $_.pivot_column); //#27004
                    $_.loop0 = $_.loop0 + 1; //#27005
                } //#27005
                $_.off_index = ~~($_.pivot_column / 32); //#27007
                $_.off_index1 = $_.pivot_column % 32; //#27008
                for (var _7H = 0, _7G = $_.nb_pcb - 1; _7H <= _7G; _7H += 1) { //#27021
                    $_.j = _7H; //#27010
                    if ($_.i != $_.j) { //#27020
                        var _7O = $get($_.matrixH, $_.off_index + ($_.j * $_.offset)); //#27012
                        var _7Q = -(31 - $_.off_index1); //#27013
                        if ((((_7Q < 0 ? _7O >>> -_7Q : _7O << _7Q)) & 1) == 1) { //#27019
                            for (var _7T = 0, _7S = $_.offset - 1; _7T <= _7S; _7T += 1) { //#27018
                                $_.k = _7T; //#27015
                                var _7U = $_.matrixH; //#27016
                                var _7V = $_.offset; //#27016
                                var _7W = $_.j; //#27016
                                var _7X = $_.k; //#27016
                                $put(_7U, (_7V * _7W) + _7X, $xo($get(_7U, (_7V * _7W) + _7X), $get($_.matrixH, ($_.offset * $_.i) + $_.k))); //#27017
                            } //#27017
                        } //#27017
                    } //#27017
                } //#27017
            } else { //#27024
                $put($_.zero_lines_nb, $_.zero_lines, $_.i); //#27023
                $_.zero_lines = $_.zero_lines + 1; //#27024
            } //#27024
        } //#27024
        $_.matrix_rank = $_.nb_pcb - $_.zero_lines; //#27028
        $_.loop2 = 0; //#27029
        for (var _7n = $_.matrix_rank, _7m = $_.nb_pcb - 1; _7n <= _7m; _7n += 1) { //#27049
            $_.i = _7n; //#27031
            if ($get($_.column_arrangement, $_.i) > 0) { //#27048
                for (var _7t = 0, _7s = $_.nb_pcb - 1; _7t <= _7s; _7t += 1) { //#27047
                    $_.j = _7t; //#27034
                    if ($nt($get($_.processed_column, $_.j))) { //#27046
                        $put($_.column_arrangement, $_.j, $get($_.column_arrangement, $_.i)); //#27036
                        $put($_.column_arrangement, $_.i, 0); //#27037
                        $put($_.processed_column, $_.j, true); //#27038
                        $put($_.processed_column, $_.i, false); //#27039
                        $put($_.swap_col, $_.loop0 * 2, $_.i); //#27040
                        $put($_.swap_col, ($_.loop0 * 2) + 1, $_.j); //#27041
                        $put($_.column_arrangement, $_.i, $_.j); //#27042
                        $_.loop0 = $_.loop0 + 1; //#27043
                        $_.loop2 = $_.loop2 + 1; //#27044
                        break; //#27045
                    } //#27045
                } //#27045
            } //#27045
        } //#27045
        $_.loop1 = 0; //#27051
        for (var _8L = 0, _8K = $_.nb_pcb - 1; _8L <= _8K; _8L += 1) { //#27060
            $_.kl = _8L; //#27053
            if ($nt($get($_.processed_column, $_.kl)) && ($_.loop1 < ($_.loop0 - $_.loop2))) { //#27059
                $put($_.column_arrangement, $_.kl, $get($_.column_arrangement, $get($_.swap_col, $_.loop1 * 2))); //#27055
                $put($_.processed_column, $_.kl, true); //#27056
                $put($_.swap_col, ($_.loop1 * 2) + 1, $_.kl); //#27057
                $_.loop1 = $_.loop1 + 1; //#27058
            } //#27058
        } //#27058
        $_.loop1 = 0; //#27062
        for (var _8h = 0, _8g = $_.nb_pcb - 1; _8h <= _8g; _8h += 1) { //#27069
            $_.kl = _8h; //#27064
            if ($nt($get($_.processed_column, $_.kl))) { //#27068
                $put($_.column_arrangement, $_.kl, $get($_.zero_lines_nb, $_.loop1)); //#27066
                $_.loop1 = $_.loop1 + 1; //#27067
            } //#27067
        } //#27067
        for (var _8t = 0, _8s = $_.nb_pcb - 1; _8t <= _8s; _8t += 1) { //#27078
            $_.i = _8t; //#27072
            for (var _8w = 0, _8v = $_.offset - 1; _8w <= _8v; _8w += 1) { //#27077
                $_.j = _8w; //#27074
                $put($_.matrixA, ($_.i * $_.offset) + $_.j, $get($_.matrixH, $f(($get($_.column_arrangement, $_.i) * $_.offset) + $_.j))); //#27076
            } //#27076
        } //#27076
        $_.tmp = 0; //#27080
        for (var _9A = 0, _99 = $_.loop0 - 1; _9A <= _99; _9A += 1) { //#27102
            $_.i = _9A; //#27082
            for (var _9D = 0, _9C = $_.nb_pcb - 1; _9D <= _9C; _9D += 1) { //#27101
                $_.j = _9D; //#27084
                var _9K = $get($_.matrixA, (~~($get($_.swap_col, $_.i * 2) / 32)) + ($_.j * $_.offset)); //#27085
                var _9O = -($f(31 - ($get($_.swap_col, $_.i * 2) % 32))); //#27086
                $_.tmp = (((-(((_9O < 0 ? _9K >>> -_9O : _9K << _9O)) & 1)) ^ $_.tmp) & 1) ^ $_.tmp; //#27087
                var _9R = $_.matrixA; //#27088
                var _9U = $get($_.swap_col, $_.i * 2); //#27088
                var _9V = $_.j; //#27088
                var _9W = $_.offset; //#27088
                var _9e = $get($_.matrixA, (~~($get($_.swap_col, ($_.i * 2) + 1) / 32)) + ($_.j * $_.offset)); //#27090
                var _9i = -($f(31 - ($get($_.swap_col, ($_.i * 2) + 1) % 32))); //#27091
                var _9t = $f(31 - ($get($_.swap_col, $_.i * 2) % 32)); //#27093
                $put(_9R, (~~(_9U / 32)) + (_9V * _9W), $get(_9R, (~~(_9U / 32)) + (_9V * _9W)) ^ (((-(((_9i < 0 ? _9e >>> -_9i : _9e << _9i)) & 1)) ^ $get($_.matrixA, (~~($get($_.swap_col, $_.i * 2) / 32)) + ($_.j * $_.offset))) & ((_9t < 0 ? 1 >>> -_9t : 1 << _9t)))); //#27094
                var _9u = $_.matrixA; //#27095
                var _9x = $get($_.swap_col, ($_.i * 2) + 1); //#27095
                var _9y = $_.j; //#27095
                var _9z = $_.offset; //#27095
                var _AC = $f(31 - ($get($_.swap_col, ($_.i * 2) + 1) % 32)); //#27099
                $put(_9u, (~~(_9x / 32)) + (_9y * _9z), $get(_9u, (~~(_9x / 32)) + (_9y * _9z)) ^ (((-($_.tmp & 1)) ^ $get($_.matrixA, (~~($get($_.swap_col, ($_.i * 2) + 1) / 32)) + ($_.j * $_.offset))) & ((_AC < 0 ? 1 >>> -_AC : 1 << _AC)))); //#27100
            } //#27100
        } //#27100
    }; //#27100
    $_.createGeneratorMatrix = function() {
        $_.pn = $_.Pg_sub_block - $_.matrix_rank; //#27108
        $_.offset = ~~Math.ceil($_.pn / 32); //#27109
        $_.effwidth = $_.offset * 32; //#27110
        $_.offset_cap = ~~Math.ceil($_.Pg_sub_block / 32); //#27111
        $_.G = $a($_.offset * $_.Pg_sub_block); //#27112
        for (var _AO = 0, _AN = ($_.offset * $_.Pg_sub_block) - 1; _AO <= _AN; _AO += 1) { //#27115
            $put($_.G, _AO, 0); //#27114
        } //#27114
        for (var _AS = 0, _AR = $_.pn - 1; _AS <= _AR; _AS += 1) { //#27120
            $_.i = _AS; //#27117
            var _AT = $_.G; //#27118
            var _AU = $_.Pg_sub_block; //#27118
            var _AV = $_.pn; //#27118
            var _AW = $_.i; //#27118
            var _AX = $_.offset; //#27118
            var _AY = $_.i; //#27118
            var _Ab = 31 - ($_.i % 32); //#27119
            $put(_AT, (((_AU - _AV) + _AW) * _AX) + (~~(_AY / 32)), $get(_AT, (((_AU - _AV) + _AW) * _AX) + (~~(_AY / 32))) | ((_Ab < 0 ? 1 >>> -_Ab : 1 << _Ab))); //#27119
        } //#27119
        $_.matrix_index = $_.Pg_sub_block - $_.pn; //#27121
        $_.loop0 = 0; //#27122
        for (var _Ai = 0, _Ah = (($_.Pg_sub_block - $_.pn) * $_.effwidth) - 1; _Ai <= _Ah; _Ai += 1) { //#27139
            $_.i = _Ai; //#27124
            if ($_.matrix_index >= $_.Pg_sub_block) { //#27128
                $_.loop0 = $_.loop0 + 1; //#27126
                $_.matrix_index = $_.Pg_sub_block - $_.pn; //#27127
            } //#27127
            if (($_.i % $_.effwidth) < $_.pn) { //#27138
                var _Ar = $_.G; //#27130
                var _As = $_.i; //#27130
                var _Ay = $get($_.matrixA, (~~($_.matrix_index / 32)) + ($_.offset_cap * $_.loop0)); //#27132
                var _B0 = -(31 - ($_.matrix_index % 32)); //#27133
                var _B5 = 31 - ($_.i % 32); //#27135
                $put(_Ar, ~~(_As / 32), $get(_Ar, ~~(_As / 32)) ^ (((-(((_B0 < 0 ? _Ay >>> -_B0 : _Ay << _B0)) & 1)) ^ $get($_.G, ~~($_.i / 32))) & ((_B5 < 0 ? 1 >>> -_B5 : 1 << _B5)))); //#27136
                $_.matrix_index = $_.matrix_index + 1; //#27137
            } //#27137
        } //#27137
    }; //#27137
    $_.ldpc = function() {
        $_.wr = $k[--$j]; //#27145
        $_.wc = $k[--$j]; //#27146
        $k[$j++] = Infinity; //#27147
        var _B9 = $k[--$j]; //#27147
        var _BA = $k[--$j]; //#27147
        $k[$j++] = _B9; //#27147
        $forall(_BA, function() { //#27147
            var _BB = $k[--$j]; //#27147
            $k[$j++] = $f(_BB - 48); //#27147
        }); //#27147
        $_.data = $a(); //#27147
        $_.Pn = $_.data.length; //#27149
        if ($_.wr != -1) { //#27164
            $_.Pg = ~~((Math.ceil((Math.ceil(($_.Pn * $_.wr) / $f($_.wr - $_.wc))) / $_.wr)) * $_.wr); //#27151
            $_.nb_sub_blocks = (~~($_.Pg / 2700)) + 1; //#27152
            $_.Pg_sub_block = (~~((~~($_.Pg / $_.nb_sub_blocks)) / $_.wr)) * $_.wr; //#27153
            $_.Pn_sub_block = ~~(($_.Pg_sub_block * $f($_.wr - $_.wc)) / $_.wr); //#27154
            $_.nb_sub_blocks = ~~($_.Pg / $_.Pg_sub_block); //#27155
            $k[$j++] = 'encoding_iterations'; //#27156
            $k[$j++] = ~~($_.Pg / $_.Pg_sub_block); //#27156
            if (($_.Pn_sub_block * $_.nb_sub_blocks) < $_.Pn) { //#27156
                var _Bb = $k[--$j]; //#27156
                $k[$j++] = $f(_Bb - 1); //#27156
            } //#27156
            var _Bc = $k[--$j]; //#27156
            $_[$k[--$j]] = _Bc; //#27156
            $_.createMatrixA(); //#27157
        } else { //#27164
            $_.Pg = $_.Pn * 2; //#27159
            $_.nb_sub_blocks = 1; //#27160
            $_.Pg_sub_block = $_.Pg; //#27161
            $_.Pn_sub_block = $_.Pn; //#27162
            $_.encoding_iterations = 1; //#27163
            $_.createMetadataMatrixA(); //#27164
        } //#27164
        $_.GaussJordan(); //#27166
        $_.createGeneratorMatrix(); //#27167
        $_.ecc_encoded_data = $a($_.Pg); //#27169
        $_.offset = ~~(Math.ceil(($_.Pg_sub_block - $_.matrix_rank) / 32)); //#27171
        for (var _Bn = 0, _Bm = $_.encoding_iterations - 1; _Bn <= _Bm; _Bn += 1) { //#27187
            $_.iter = _Bn; //#27173
            for (var _Bq = 0, _Bp = $_.Pg_sub_block - 1; _Bq <= _Bp; _Bq += 1) { //#27186
                $_.i = _Bq; //#27175
                $_.temp = 0; //#27176
                $_.loop0 = 0; //#27177
                $_.offset_index = $_.offset * $_.i; //#27178
                for (var _By = $_.iter * $_.Pn_sub_block, _Bx = (($_.iter + 1) * $_.Pn_sub_block) - 1; _By <= _Bx; _By += 1) { //#27184
                    var _C4 = $get($_.G, $_.offset_index + (~~($_.loop0 / 32))); //#27181
                    var _C6 = -(31 - ($_.loop0 % 32)); //#27181
                    $_.temp = ($get($_.data, _By) & (((_C6 < 0 ? _C4 >>> -_C6 : _C4 << _C6)) & 1)) ^ $_.temp; //#27182
                    $_.loop0 = $_.loop0 + 1; //#27183
                } //#27183
                $put($_.ecc_encoded_data, $_.i + ($_.iter * $_.Pg_sub_block), $_.temp); //#27185
            } //#27185
        } //#27185
        if ($_.encoding_iterations != $_.nb_sub_blocks) { //#27211
            $_.start = $_.encoding_iterations * $_.Pn_sub_block; //#27190
            $_.last_index = $_.encoding_iterations * $_.Pg_sub_block; //#27191
            $_.Pg_sub_block = $_.Pg - ($_.encoding_iterations * $_.Pg_sub_block); //#27192
            $_.Pn_sub_block = ~~(($_.Pg_sub_block * $f($_.wr - $_.wc)) / $_.wr); //#27193
            $_.createMatrixA(); //#27194
            $_.GaussJordan(); //#27195
            $_.createGeneratorMatrix(); //#27196
            $_.offset = ~~(Math.ceil(($_.Pg_sub_block - $_.matrix_rank) / 32)); //#27197
            for (var _CV = 0, _CU = $_.Pg_sub_block - 1; _CV <= _CU; _CV += 1) { //#27210
                $_.i = _CV; //#27199
                $_.temp = 0; //#27200
                $_.loop0 = 0; //#27201
                $_.offset_index = $_.offset * $_.i; //#27202
                for (var _Cb = $_.start, _Ca = $_.Pn - 1; _Cb <= _Ca; _Cb += 1) { //#27208
                    var _Ch = $get($_.G, $_.offset_index + (~~($_.loop0 / 32))); //#27205
                    var _Cj = -(31 - ($_.loop0 % 32)); //#27205
                    $_.temp = ($get($_.data, _Cb) & (((_Cj < 0 ? _Ch >>> -_Cj : _Ch << _Cj)) & 1)) ^ $_.temp; //#27206
                    $_.loop0 = $_.loop0 + 1; //#27207
                } //#27207
                $put($_.ecc_encoded_data, $_.i + $_.last_index, $_.temp); //#27209
            } //#27209
        } //#27209
        $_.out = $s($_.Pg); //#27213
        for (var _Cu = 0, _Ct = $_.Pg - 1; _Cu <= _Ct; _Cu += 1) { //#27217
            $put($_.out, _Cu, $f($get($_.ecc_encoded_data, _Cu) + 48)); //#27216
        } //#27216
        $k[$j++] = $_.out; //#27218
    }; //#27218
    $k[$j++] = 'bits'; //#27223
    $k[$j++] = $_.bits; //#27223
    $k[$j++] = $_.datawc; //#27223
    $k[$j++] = $_.datawr; //#27223
    $_.ldpc(); //#27223
    var _D2 = $k[--$j]; //#27223
    $_[$k[--$j]] = _D2; //#27223
    $_.s0 = 0; //#27226
    $_.s1 = 0; //#27226
    $_.s2 = 3; //#27226
    $_.s3 = 30151; //#27226
    for (var _D5 = $_.bits.length - 1; _D5 >= 1; _D5 -= 1) { //#27236
        $_.l = _D5; //#27228
        $_.lcg64_temper(); //#27229
        var _D6 = $k[--$j]; //#27230
        $k[$j++] = _D6; //#27230
        if (_D6 < 0) { //#27230
            var _D7 = $k[--$j]; //#27230
            $k[$j++] = $f((_D7 ^ 2147483648) + 2147483648); //#27230
        } //#27230
        $_.r = ~~(($k[--$j] / 4294967296) * ($_.l + 1)); //#27232
        $put($_.bits, $_.l, $get($_.bits, $_.r)); //#27234
        $put($_.bits, $_.r, $get($_.bits, $_.l)); //#27235
    } //#27235
    $_.tmpbits = $s($_.C); //#27239
    $puti($_.tmpbits, 0, $_.bits); //#27240
    $_.j = $_.bits.length; //#27241
    for (var _DR = 0, _DS = ~~(($f($f($_.C - $_.j) + 1)) / 2); _DR < _DS; _DR++) { //#27246
        $put($_.tmpbits, $_.j, 48); //#27243
        if (($_.j + 1) < $_.C) { //#27244
            $put($_.tmpbits, $_.j + 1, 49); //#27244
        } //#27244
        $_.j = $_.j + 2; //#27245
    } //#27245
    $_.bits = $_.tmpbits; //#27247
    if ($_.colors == 4) { //#27312
        $_.bi = 0; //#27251
        $_.gi = 1; //#27251
        $_.mi = 2; //#27251
        $_.yi = 3; //#27251
        $_.ki = 4; //#27252
        $_.wi = 5; //#27252
        $k[$j++] = Infinity; //#27253
        $k[$j++] = $_.bi; //#27255
        $k[$j++] = "0000FF"; //#27255
        $k[$j++] = $_.gi; //#27255
        $k[$j++] = "00FF00"; //#27255
        $k[$j++] = $_.mi; //#27255
        $k[$j++] = "FF00FF"; //#27255
        $k[$j++] = $_.yi; //#27255
        $k[$j++] = "FFFF00"; //#27255
        $k[$j++] = $_.ki; //#27255
        $k[$j++] = "000000"; //#27255
        $k[$j++] = $_.wi; //#27255
        $k[$j++] = "FFFFFF"; //#27255
        $_.palette = $d(); //#27256
        $_.metacolorindex = $a([$_.bi, $_.gi, $_.mi, $_.yi]); //#27257
        $_.palettelayout = $a([$_.bi, $_.gi, $_.mi, $_.yi]); //#27258
    } else { //#27312
        var _Dz = new Map([
            [8, $a([2, 2, 2])],
            [16, $a([4, 2, 2])],
            [32, $a([4, 4, 2])],
            [64, $a([4, 4, 4])],
            [128, $a([8, 4, 4])],
            [256, $a([8, 8, 4])]
        ]); //#27267
        $_.rgbres = $get(_Dz, $_.colors); //#27268
        $k[$j++] = 'rvals'; //#27270
        $k[$j++] = $get($_.rgbres, 0); //#27270
        $k[$j++] = Infinity; //#27270
        var _E4 = $k[--$j]; //#27270
        var _E6 = $f($k[--$j] - 1); //#27270
        $k[$j++] = _E4; //#27270
        $k[$j++] = _E6; //#27270
        for (var _E8 = 0, _E7 = _E6; _E8 <= _E7; _E8 += 1) { //#27270
            var _E9 = $k[--$j]; //#27270
            $k[$j++] = ~~(Math.round(_E8 * (255 / _E9))); //#27270
            $k[$j++] = _E9; //#27270
        } //#27270
        $j--; //#27270
        var _EA = $a(); //#27270
        $_[$k[--$j]] = _EA; //#27270
        $k[$j++] = 'gvals'; //#27271
        $k[$j++] = $get($_.rgbres, 1); //#27271
        $k[$j++] = Infinity; //#27271
        var _EE = $k[--$j]; //#27271
        var _EG = $f($k[--$j] - 1); //#27271
        $k[$j++] = _EE; //#27271
        $k[$j++] = _EG; //#27271
        for (var _EI = 0, _EH = _EG; _EI <= _EH; _EI += 1) { //#27271
            var _EJ = $k[--$j]; //#27271
            $k[$j++] = ~~(Math.round(_EI * (255 / _EJ))); //#27271
            $k[$j++] = _EJ; //#27271
        } //#27271
        $j--; //#27271
        var _EK = $a(); //#27271
        $_[$k[--$j]] = _EK; //#27271
        $k[$j++] = 'bvals'; //#27272
        $k[$j++] = $get($_.rgbres, 2); //#27272
        $k[$j++] = Infinity; //#27272
        var _EO = $k[--$j]; //#27272
        var _EQ = $f($k[--$j] - 1); //#27272
        $k[$j++] = _EO; //#27272
        $k[$j++] = _EQ; //#27272
        for (var _ES = 0, _ER = _EQ; _ES <= _ER; _ES += 1) { //#27272
            var _ET = $k[--$j]; //#27272
            $k[$j++] = ~~(Math.round(_ES * (255 / _ET))); //#27272
            $k[$j++] = _ET; //#27272
        } //#27272
        $j--; //#27272
        var _EU = $a(); //#27272
        $_[$k[--$j]] = _EU; //#27272
        var _EW = $_.colors; //#27274
        $_.palette = new Map; //#27274
        var _EX = $_.colors; //#27275
        var _EY = 64; //#27275
        if (64 > _EX) { //#27275
            var _ = _EX; //#27275
            _EX = _EY; //#27275
            _EY = _; //#27275
        } //#27275
        $_.palettelayout = $a(_EY); //#27275
        $_.i = 0; //#27276
        $_.j = 8; //#27276
        $forall($_.rvals, function() { //#27310
            $_.r = $k[--$j]; //#27278
            $forall($_.gvals, function() { //#27309
                $_.g = $k[--$j]; //#27280
                $forall($_.bvals, function() { //#27308
                    $_.b = $k[--$j]; //#27282
                    var _Ek = $strcpy($s(6), "000000"); //#27284
                    var _Em = $cvrs($s(6), (($_.r << 16) | ($_.g << 8)) | $_.b, 16); //#27284
                    $puti(_Ek, 6 - _Em.length, _Em); //#27284
                    $k[$j++] = _Ek; //#27286
                    $k[$j++] = false; //#27286
                    if ($eq(_Ek, "000000")) { //#27286
                        $_.ki = $_.i; //#27286
                        $j--; //#27286
                        $k[$j++] = true; //#27286
                    } //#27286
                    var _Eo = $k[--$j]; //#27287
                    var _Ep = $k[--$j]; //#27287
                    $k[$j++] = _Ep; //#27287
                    $k[$j++] = _Eo; //#27287
                    if ($eq(_Ep, "0000FF")) { //#27287
                        $_.bi = $_.i; //#27287
                        $j--; //#27287
                        $k[$j++] = true; //#27287
                    } //#27287
                    var _Er = $k[--$j]; //#27288
                    var _Es = $k[--$j]; //#27288
                    $k[$j++] = _Es; //#27288
                    $k[$j++] = _Er; //#27288
                    if ($eq(_Es, "00FF00")) { //#27288
                        $_.gi = $_.i; //#27288
                        $j--; //#27288
                        $k[$j++] = true; //#27288
                    } //#27288
                    var _Eu = $k[--$j]; //#27289
                    var _Ev = $k[--$j]; //#27289
                    $k[$j++] = _Ev; //#27289
                    $k[$j++] = _Eu; //#27289
                    if ($eq(_Ev, "00FFFF")) { //#27289
                        $_.ci = $_.i; //#27289
                        $j--; //#27289
                        $k[$j++] = true; //#27289
                    } //#27289
                    var _Ex = $k[--$j]; //#27290
                    var _Ey = $k[--$j]; //#27290
                    $k[$j++] = _Ey; //#27290
                    $k[$j++] = _Ex; //#27290
                    if ($eq(_Ey, "FF0000")) { //#27290
                        $_.ri = $_.i; //#27290
                        $j--; //#27290
                        $k[$j++] = true; //#27290
                    } //#27290
                    var _F0 = $k[--$j]; //#27291
                    var _F1 = $k[--$j]; //#27291
                    $k[$j++] = _F1; //#27291
                    $k[$j++] = _F0; //#27291
                    if ($eq(_F1, "FF00FF")) { //#27291
                        $_.mi = $_.i; //#27291
                        $j--; //#27291
                        $k[$j++] = true; //#27291
                    } //#27291
                    var _F3 = $k[--$j]; //#27292
                    var _F4 = $k[--$j]; //#27292
                    $k[$j++] = _F4; //#27292
                    $k[$j++] = _F3; //#27292
                    if ($eq(_F4, "FFFF00")) { //#27292
                        $_.yi = $_.i; //#27292
                        $j--; //#27292
                        $k[$j++] = true; //#27292
                    } //#27292
                    var _F6 = $k[--$j]; //#27293
                    var _F7 = $k[--$j]; //#27293
                    $k[$j++] = _F7; //#27293
                    $k[$j++] = _F6; //#27293
                    if ($eq(_F7, "FFFFFF")) { //#27293
                        $_.wi = $_.i; //#27293
                        $j--; //#27293
                        $k[$j++] = true; //#27293
                    } //#27293
                    if ($nt($k[--$j])) { //#27305
                        if (($_.colors <= 64) || ((($_.colors == 128) && (((($_.r == 0) || ($_.r == 73)) || ($_.r == 182)) || ($_.r == 255))) || ((($_.colors == 256) && (((($_.r == 0) || ($_.r == 73)) || ($_.r == 182)) || ($_.r == 255))) && (((($_.g == 0) || ($_.g == 73)) || ($_.g == 182)) || ($_.g == 255))))) { //#27304
                            $put($_.palettelayout, $_.j, $_.i); //#27302
                            $_.j = $_.j + 1; //#27303
                        } //#27303
                    } //#27303
                    $put($_.palette, $_.i, $k[--$j]); //#27306
                    $_.i = $_.i + 1; //#27307
                }); //#27307
            }); //#27307
        }); //#27307
        $puti($_.palettelayout, 0, $a([$_.ki, $_.bi, $_.gi, $_.ci, $_.ri, $_.mi, $_.yi, $_.wi])); //#27311
        $_.metacolorindex = $a([$_.ki, $_.bi, $_.gi, $_.ci, $_.ri, $_.mi, $_.yi, $_.wi]); //#27312
    } //#27312
    $k[$j++] = Infinity; //#27316
    for (var _Fs = 0, _Ft = $_.rows * $_.cols; _Fs < _Ft; _Fs++) { //#27316
        $k[$j++] = -1; //#27316
    } //#27316
    $_.pixs = $a(); //#27316
    $_.jmv = function() {
        var _Fw = $k[--$j]; //#27317
        var _Fx = $k[--$j]; //#27317
        $k[$j++] = $f(_Fx + (_Fw * $_.cols)); //#27317
    }; //#27317
    if (!$_.slave) { //#27347
        $_.fpat = $a([$a([1, 1, 1, 0, 0]), $a([1, 2, 2, 0, 0]), $a([1, 2, 1, 2, 1]), $a([0, 0, 2, 2, 1]), $a([0, 0, 1, 1, 1])]); //#27327
        $_.fmap = $a([$a([-1, $_.bi, $_.yi]), $a([-1, $_.yi, $_.bi]), $a([-1, $_.gi, $_.mi]), $a([-1, $_.mi, $_.gi])]); //#27333
    } else { //#27347
        $_.fpat = $a([$a([0, 0, 0, 0, 0]), $a([0, 2, 2, 0, 0]), $a([0, 2, 1, 2, 0]), $a([0, 0, 2, 2, 0]), $a([0, 0, 0, 0, 0])]); //#27341
        $_.fmap = $a([$a([-1, $_.ki, $_.wi]), $a([-1, $_.ki, $_.wi]), $a([-1, $_.ki, $_.wi]), $a([-1, $_.ki, $_.wi])]); //#27347
    } //#27347
    for (var _Gb = 0; _Gb <= 4; _Gb += 1) { //#27359
        $_.y = _Gb; //#27350
        for (var _Gc = 0; _Gc <= 4; _Gc += 1) { //#27358
            $_.x = _Gc; //#27352
            $_.fpb = $get($get($_.fpat, $_.y), $_.x); //#27353
            $k[$j++] = $_.pixs; //#27354
            $k[$j++] = $_.x + 1; //#27354
            $k[$j++] = $_.y + 1; //#27354
            $_.jmv(); //#27354
            var _Gp = $k[--$j]; //#27354
            $put($k[--$j], _Gp, $get($get($_.fmap, 0), $_.fpb)); //#27354
            $k[$j++] = $_.pixs; //#27355
            $k[$j++] = $_.x + 1; //#27355
            $k[$j++] = $f($f($_.rows - $_.y) - 2); //#27355
            $_.jmv(); //#27355
            var _Gz = $k[--$j]; //#27355
            $put($k[--$j], _Gz, $get($get($_.fmap, 1), $_.fpb)); //#27355
            $k[$j++] = $_.pixs; //#27356
            $k[$j++] = $f($f($_.x + $_.cols) - 6); //#27356
            $k[$j++] = $_.y + 1; //#27356
            $_.jmv(); //#27356
            var _H9 = $k[--$j]; //#27356
            $put($k[--$j], _H9, $get($get($_.fmap, 2), $_.fpb)); //#27356
            $k[$j++] = $_.pixs; //#27357
            $k[$j++] = $f($f($_.x + $_.cols) - 6); //#27357
            $k[$j++] = $f($f($_.rows - $_.y) - 2); //#27357
            $_.jmv(); //#27357
            var _HK = $k[--$j]; //#27357
            $put($k[--$j], _HK, $get($get($_.fmap, 3), $_.fpb)); //#27357
        } //#27357
    } //#27357
    $_.algnpat0 = $a([$a([$_.ki, $_.ki, -1]), $a([$_.ki, $_.wi, $_.ki]), $a([-1, $_.ki, $_.ki])]); //#27366
    $_.algnpat1 = $a([$a([-1, $_.ki, $_.ki]), $a([$_.ki, $_.wi, $_.ki]), $a([$_.ki, $_.ki, -1])]); //#27371
    $_.num = (~~Math.round($_.cols / 16)) - 1; //#27372
    $_.algnrpos = $a([3, 17]); //#27373
    if ($_.num > 0) { //#27376
        $k[$j++] = Infinity; //#27375
        for (var _Hn = 0, _Hm = $_.num; _Hn <= _Hm; _Hn += 1) { //#27375
            $k[$j++] = (~~(_Hn * ($f($_.cols - 7) / $_.num))) + 3; //#27375
        } //#27375
        $_.algnrpos = $a(); //#27375
    } //#27375
    $_.num = (~~Math.round($_.rows / 16)) - 1; //#27377
    $_.algncpos = $a([3, 17]); //#27378
    if ($_.num > 0) { //#27381
        $k[$j++] = Infinity; //#27380
        for (var _Hw = 0, _Hv = $_.num; _Hw <= _Hv; _Hw += 1) { //#27380
            $k[$j++] = (~~(_Hw * ($f($_.rows - 7) / $_.num))) + 3; //#27380
        } //#27380
        $_.algncpos = $a(); //#27380
    } //#27380
    $_.putalgnpat = function() {
        $_.pp = $k[--$j]; //#27383
        $_.py = $k[--$j]; //#27384
        $_.px = $k[--$j]; //#27385
        for (var _I3 = 0; _I3 <= 2; _I3 += 1) { //#27392
            $_.pb = _I3; //#27387
            for (var _I4 = 0; _I4 <= 2; _I4 += 1) { //#27391
                $_.pa = _I4; //#27389
                $k[$j++] = $_.pixs; //#27390
                $k[$j++] = $f($_.px + $_.pa); //#27390
                $k[$j++] = $f($_.py + $_.pb); //#27390
                $_.jmv(); //#27390
                var _IF = $k[--$j]; //#27390
                $put($k[--$j], _IF, $get($get($_.pp, $_.pb), $_.pa)); //#27390
            } //#27390
        } //#27390
    }; //#27390
    for (var _IJ = 0, _II = $_.algncpos.length - 1; _IJ <= _II; _IJ += 1) { //#27404
        $_.j = _IJ; //#27395
        $_.y = $get($_.algncpos, $_.j); //#27396
        for (var _IP = 0, _IO = $_.algnrpos.length - 1; _IP <= _IO; _IP += 1) { //#27403
            $_.i = _IP; //#27398
            $_.x = $get($_.algnrpos, $_.i); //#27399
            $k[$j++] = $_.pixs; //#27400
            $k[$j++] = $_.x; //#27400
            $k[$j++] = $_.y; //#27400
            $_.jmv(); //#27400
            var _IW = $k[--$j]; //#27400
            if ($get($k[--$j], _IW) == -1) { //#27402
                $k[$j++] = $f($_.x - 1); //#27401
                $k[$j++] = $f($_.y - 1); //#27401
                if ((($_.i + $_.j) % 2) == 0) { //#27401
                    $k[$j++] = $_.algnpat0; //#27401
                } else { //#27401
                    $k[$j++] = $_.algnpat1; //#27401
                } //#27401
                $_.putalgnpat(); //#27401
            } //#27401
        } //#27401
    } //#27401
    if (!$_.slave) { //#27456
        var _JO = $a([$a([6, 1]), $a([6, 2]), $a([6, 3]), $a([6, 4]), $a([6, 5]), $a([6, 6]), $a([5, 6]), $a([4, 6]), $a([3, 6]), $a([2, 6]), $a([1, 6]), $a([7, 1]), $a([7, 2]), $a([7, 3]), $a([7, 4]), $a([7, 5]), $a([7, 6]), $a([7, 7]), $a([6, 7]), $a([5, 7]), $a([4, 7]), $a([3, 7]), $a([2, 7]), $a([1, 7]), $a([8, 1]), $a([8, 2]), $a([8, 3]), $a([8, 4]), $a([8, 5]), $a([8, 6]), $a([8, 7]), $a([8, 8]), $a([7, 8]), $a([6, 8]), $a([5, 8]), $a([4, 8]), $a([3, 8]), $a([2, 8]), $a([1, 8]), $a([9, 1]), $a([9, 2]), $a([9, 3]), $a([9, 4]), $a([9, 5])]); //#27415
        for (var _JP = 0, _JQ = _JO.length; _JP < _JQ; _JP++) { //#27419
            $aload($get(_JO, _JP)); //#27417
            $_.y = $k[--$j]; //#27417
            $_.x = $k[--$j]; //#27417
            $k[$j++] = $a([$_.x, $_.y]); //#27418
            $k[$j++] = $a([-$_.x, $_.y]); //#27418
            $k[$j++] = $a([-$_.x, -$_.y]); //#27418
            $k[$j++] = $a([$_.x, -$_.y]); //#27418
        } //#27418
        $astore($a(176)); //#27420
        $_.metadatamap = $k[--$j]; //#27420
        $_.palettemap1 = $a([$a([4, 1]), $a([4, 2]), $a([5, 1]), $a([5, 2]), $a([2, 4]), $a([2, 5]), $a([1, 4]), $a([1, 5]), $a([-2, 1]), $a([-2, 2]), $a([-1, 1]), $a([-1, 2]), $a([-4, 4]), $a([-4, 5]), $a([-5, 4]), $a([-5, 5])]); //#27425
        $_.palettemap2 = $a([$a([-4, -5]), $a([-4, -4]), $a([-5, -5]), $a([-5, -4]), $a([-2, -2]), $a([-2, -1]), $a([-1, -2]), $a([-1, -1]), $a([2, -5]), $a([2, -4]), $a([1, -5]), $a([1, -4]), $a([4, -2]), $a([4, -1]), $a([5, -2]), $a([5, -1])]); //#27430
    } else { //#27456
        $k[$j++] = Infinity; //#27436
        for (var _KG = 1; _KG <= 19; _KG += 1) { //#27440
            $_.i = _KG; //#27438
            $k[$j++] = $a([0, $_.i]); //#27439
            $k[$j++] = $a([1, $_.i]); //#27439
        } //#27439
        for (var _KL = 5; _KL <= 12; _KL += 1) { //#27444
            $_.i = _KL; //#27442
            $k[$j++] = $a([2, $_.i]); //#27443
            $k[$j++] = $a([3, $_.i]); //#27443
        } //#27443
        $_.metadatamap = $a(); //#27443
        $k[$j++] = Infinity; //#27447
        for (var _KR = 5; _KR <= 12; _KR += 1) { //#27448
            $k[$j++] = _KR; //#27448
            $k[$j++] = Infinity; //#27448
            var _KS = $k[--$j]; //#27448
            var _KT = $k[--$j]; //#27448
            $k[$j++] = _KS; //#27448
            $k[$j++] = 4; //#27448
            $k[$j++] = _KT; //#27448
            var _KU = $a(); //#27448
            $k[$j++] = _KU; //#27448
        } //#27448
        for (var _KV = 12; _KV >= 5; _KV -= 1) { //#27449
            $k[$j++] = _KV; //#27449
            $k[$j++] = Infinity; //#27449
            var _KW = $k[--$j]; //#27449
            var _KX = $k[--$j]; //#27449
            $k[$j++] = _KW; //#27449
            $k[$j++] = 5; //#27449
            $k[$j++] = _KX; //#27449
            var _KY = $a(); //#27449
            $k[$j++] = _KY; //#27449
        } //#27449
        for (var _KZ = 5; _KZ <= 12; _KZ += 1) { //#27450
            $k[$j++] = _KZ; //#27450
            $k[$j++] = Infinity; //#27450
            var _Ka = $k[--$j]; //#27450
            var _Kb = $k[--$j]; //#27450
            $k[$j++] = _Ka; //#27450
            $k[$j++] = 6; //#27450
            $k[$j++] = _Kb; //#27450
            var _Kc = $a(); //#27450
            $k[$j++] = _Kc; //#27450
        } //#27450
        for (var _Kd = 12; _Kd >= 5; _Kd -= 1) { //#27451
            $k[$j++] = _Kd; //#27451
            $k[$j++] = Infinity; //#27451
            var _Ke = $k[--$j]; //#27451
            var _Kf = $k[--$j]; //#27451
            $k[$j++] = _Ke; //#27451
            $k[$j++] = 7; //#27451
            $k[$j++] = _Kf; //#27451
            var _Kg = $a(); //#27451
            $k[$j++] = _Kg; //#27451
        } //#27451
        $_.palettemap1 = $a(); //#27451
        $k[$j++] = Infinity; //#27454
        var _Ki = $_.palettemap1; //#27455
        for (var _Kj = 0, _Kk = _Ki.length; _Kj < _Kk; _Kj++) { //#27455
            $k[$j++] = $get(_Ki, _Kj); //#27455
            $k[$j++] = Infinity; //#27455
            var _Km = $k[--$j]; //#27455
            var _Kn = $k[--$j]; //#27455
            $k[$j++] = _Km; //#27455
            $aload(_Kn); //#27455
            var _Ko = $k[--$j]; //#27455
            var _Kp = $k[--$j]; //#27455
            $k[$j++] = -_Kp; //#27455
            $k[$j++] = -_Ko; //#27455
            var _Kq = $a(); //#27455
            $k[$j++] = _Kq; //#27455
        } //#27455
        $_.palettemap2 = $a(); //#27455
    } //#27456
    var _Ks = $_.metadatamap; //#27461
    for (var _Kt = 0, _Ku = _Ks.length; _Kt < _Ku; _Kt++) { //#27465
        var _Kv = $get(_Ks, _Kt); //#27465
        var _Kw = $get(_Kv, 0); //#27462
        $k[$j++] = _Kv; //#27462
        $k[$j++] = _Kw; //#27462
        if (_Kw < 0) { //#27462
            var _Ky = $k[--$j]; //#27462
            var _Kz = $k[--$j]; //#27462
            $put(_Kz, 0, $f($f(_Ky + $_.cols) - 1)); //#27462
            $k[$j++] = _Kz; //#27462
        } else { //#27462
            $j--; //#27462
        } //#27462
        var _L0 = $k[--$j]; //#27463
        var _L1 = $get(_L0, 1); //#27463
        $k[$j++] = _L0; //#27463
        $k[$j++] = _L1; //#27463
        if (_L1 < 0) { //#27463
            var _L3 = $k[--$j]; //#27463
            var _L4 = $k[--$j]; //#27463
            $put(_L4, 1, $f($f(_L3 + $_.rows) - 1)); //#27463
            $k[$j++] = _L4; //#27463
        } else { //#27463
            $j--; //#27463
        } //#27463
        $j--; //#27464
    } //#27464
    var _L5 = $_.palettemap1; //#27466
    for (var _L6 = 0, _L7 = _L5.length; _L6 < _L7; _L6++) { //#27470
        var _L8 = $get(_L5, _L6); //#27470
        var _L9 = $get(_L8, 0); //#27467
        $k[$j++] = _L8; //#27467
        $k[$j++] = _L9; //#27467
        if (_L9 < 0) { //#27467
            var _LB = $k[--$j]; //#27467
            var _LC = $k[--$j]; //#27467
            $put(_LC, 0, $f($f(_LB + $_.cols) - 1)); //#27467
            $k[$j++] = _LC; //#27467
        } else { //#27467
            $j--; //#27467
        } //#27467
        var _LD = $k[--$j]; //#27468
        var _LE = $get(_LD, 1); //#27468
        $k[$j++] = _LD; //#27468
        $k[$j++] = _LE; //#27468
        if (_LE < 0) { //#27468
            var _LG = $k[--$j]; //#27468
            var _LH = $k[--$j]; //#27468
            $put(_LH, 1, $f($f(_LG + $_.rows) - 1)); //#27468
            $k[$j++] = _LH; //#27468
        } else { //#27468
            $j--; //#27468
        } //#27468
        $j--; //#27469
    } //#27469
    var _LI = $_.palettemap2; //#27471
    for (var _LJ = 0, _LK = _LI.length; _LJ < _LK; _LJ++) { //#27475
        var _LL = $get(_LI, _LJ); //#27475
        var _LM = $get(_LL, 0); //#27472
        $k[$j++] = _LL; //#27472
        $k[$j++] = _LM; //#27472
        if (_LM < 0) { //#27472
            var _LO = $k[--$j]; //#27472
            var _LP = $k[--$j]; //#27472
            $put(_LP, 0, $f($f(_LO + $_.cols) - 1)); //#27472
            $k[$j++] = _LP; //#27472
        } else { //#27472
            $j--; //#27472
        } //#27472
        var _LQ = $k[--$j]; //#27473
        var _LR = $get(_LQ, 1); //#27473
        $k[$j++] = _LQ; //#27473
        $k[$j++] = _LR; //#27473
        if (_LR < 0) { //#27473
            var _LT = $k[--$j]; //#27473
            var _LU = $k[--$j]; //#27473
            $put(_LU, 1, $f($f(_LT + $_.rows) - 1)); //#27473
            $k[$j++] = _LU; //#27473
        } else { //#27473
            $j--; //#27473
        } //#27473
        $j--; //#27474
    } //#27474
    for (var _LX = 0, _LW = $f($_.nummetamodules - 1); _LX <= _LW; _LX += 1) { //#27480
        $k[$j++] = $_.pixs; //#27479
        $aload($get($_.metadatamap, _LX)); //#27479
        $_.jmv(); //#27479
        var _Lb = $k[--$j]; //#27479
        $put($k[--$j], _Lb, 0); //#27479
    } //#27479
    if (!$_.slave) { //#27493
        var _Le = $_.colors; //#27485
        var _Lf = 16; //#27485
        if (16 > _Le) { //#27485
            var _ = _Le; //#27485
            _Le = _Lf; //#27485
            _Lf = _; //#27485
        } //#27485
        for (var _Lh = 0, _Lg = _Lf - 1; _Lh <= _Lg; _Lh += 1) { //#27490
            $_.i = _Lh; //#27486
            var _Lk = $get($_.palettelayout, $_.i); //#27487
            $k[$j++] = _Lk; //#27488
            $k[$j++] = $_.pixs; //#27488
            $k[$j++] = _Lk; //#27488
            $aload($get($_.palettemap1, $_.i)); //#27488
            $_.jmv(); //#27488
            var _Lp = $k[--$j]; //#27488
            var _Lq = $k[--$j]; //#27488
            $put($k[--$j], _Lp, _Lq); //#27488
            var _Lt = $k[--$j]; //#27489
            $k[$j++] = $_.pixs; //#27489
            $k[$j++] = _Lt; //#27489
            $aload($get($_.palettemap2, $_.i)); //#27489
            $_.jmv(); //#27489
            var _Lx = $k[--$j]; //#27489
            var _Ly = $k[--$j]; //#27489
            $put($k[--$j], _Lx, _Ly); //#27489
        } //#27489
        $_.i = 16; //#27491
    } else { //#27493
        $_.i = 0; //#27493
    } //#27493
    $_.j = $_.nummetamodules; //#27497
    for (var _M4 = $_.i, _M3 = $_.palettelayout.length - 1; _M4 <= _M3; _M4 += 2) { //#27507
        $_.i = _M4; //#27499
        var _M7 = $get($_.palettelayout, $_.i); //#27500
        $k[$j++] = _M7; //#27501
        $k[$j++] = $_.pixs; //#27501
        $k[$j++] = _M7; //#27501
        $aload($get($_.metadatamap, $_.j)); //#27501
        $_.jmv(); //#27501
        var _MC = $k[--$j]; //#27501
        var _MD = $k[--$j]; //#27501
        $put($k[--$j], _MC, _MD); //#27501
        var _MG = $k[--$j]; //#27502
        $k[$j++] = $_.pixs; //#27502
        $k[$j++] = _MG; //#27502
        $aload($get($_.metadatamap, $f($_.j + 2))); //#27502
        $_.jmv(); //#27502
        var _MK = $k[--$j]; //#27502
        var _ML = $k[--$j]; //#27502
        $put($k[--$j], _MK, _ML); //#27502
        var _MP = $get($_.palettelayout, $_.i + 1); //#27503
        $k[$j++] = _MP; //#27504
        $k[$j++] = $_.pixs; //#27504
        $k[$j++] = _MP; //#27504
        $aload($get($_.metadatamap, $f($_.j + 1))); //#27504
        $_.jmv(); //#27504
        var _MU = $k[--$j]; //#27504
        var _MV = $k[--$j]; //#27504
        $put($k[--$j], _MU, _MV); //#27504
        var _MY = $k[--$j]; //#27505
        $k[$j++] = $_.pixs; //#27505
        $k[$j++] = _MY; //#27505
        $aload($get($_.metadatamap, $f($_.j + 3))); //#27505
        $_.jmv(); //#27505
        var _Mc = $k[--$j]; //#27505
        var _Md = $k[--$j]; //#27505
        $put($k[--$j], _Mc, _Md); //#27505
        $_.j = $f($_.j + 4); //#27506
    } //#27506
    var _N5 = $a([function() {
        var _Mg = $k[--$j]; //#27511
        var _Mh = $k[--$j]; //#27511
        $k[$j++] = $f(_Mh + _Mg) % $_.colors; //#27511
    }, function() {
        $j--; //#27512
        var _Mk = $k[--$j]; //#27512
        $k[$j++] = _Mk % $_.colors; //#27512
    }, function() {
        var _Ml = $k[--$j]; //#27513
        var _Mm = $k[--$j]; //#27513
        $k[$j++] = _Ml; //#27513
        $k[$j++] = _Mm; //#27513
        $j--; //#27513
        var _Mo = $k[--$j]; //#27513
        $k[$j++] = _Mo % $_.colors; //#27513
    }, function() {
        var _Mp = $k[--$j]; //#27514
        var _Mq = $k[--$j]; //#27514
        $k[$j++] = ((~~(_Mp / 3)) + (~~(_Mq / 2))) % $_.colors; //#27514
    }, function() {
        var _Ms = $k[--$j]; //#27515
        var _Mt = $k[--$j]; //#27515
        $k[$j++] = ((~~(_Ms / 2)) + (~~(_Mt / 3))) % $_.colors; //#27515
    }, function() {
        var _Mv = $k[--$j]; //#27516
        var _Mx = $f($k[--$j] + _Mv); //#27516
        $k[$j++] = ((~~(_Mx / 2)) + (~~(_Mx / 3))) % $_.colors; //#27516
    }, function() {
        var _Mz = $k[--$j]; //#27517
        var _N0 = $k[--$j]; //#27517
        $k[$j++] = ($f(((_Mz * (_N0 * _N0)) % 7) + ((($f(_Mz + (_N0 * _N0))) * 2) % 19))) % $_.colors; //#27517
    }, function() {
        var _N2 = $k[--$j]; //#27518
        var _N3 = $k[--$j]; //#27518
        $k[$j++] = ($f(((_N3 * (_N2 * _N2)) % 5) + (($f((_N2 * _N2) + (_N3 * 2))) % 13))) % $_.colors; //#27518
    }]); //#27518
    $_.maskfuncs = _N5; //#27519
    if ($_.mask != -1) { //#27523
        $_.maskfuncs = $a([$get($_.maskfuncs, $_.mask)]); //#27521
        $_.bestmaskval = $_.mask; //#27522
    } //#27522
    $_.masks = $a($_.maskfuncs.length); //#27524
    for (var _NG = 0, _NF = $_.masks.length - 1; _NG <= _NF; _NG += 1) { //#27537
        $_.m = _NG; //#27526
        $_.mask = $a($_.rows * $_.cols); //#27527
        for (var _NM = 0, _NL = $f($_.rows - 1); _NM <= _NL; _NM += 1) { //#27535
            $_.j = _NM; //#27529
            for (var _NP = 0, _NO = $f($_.cols - 1); _NP <= _NO; _NP += 1) { //#27534
                $_.i = _NP; //#27531
                $k[$j++] = $_.pixs; //#27532
                $k[$j++] = $_.i; //#27532
                $k[$j++] = $_.j; //#27532
                $_.jmv(); //#27532
                var _NT = $k[--$j]; //#27532
                if ($get($k[--$j], _NT) == -1) { //#27532
                    $k[$j++] = $_.i; //#27532
                    $k[$j++] = $_.j; //#27532
                    if ($get($_.maskfuncs, $_.m)() === true) {
                        break;
                    } //#27532
                } else { //#27532
                    $k[$j++] = 0; //#27532
                } //#27532
                $k[$j++] = $_.mask; //#27533
                $k[$j++] = $_.i; //#27533
                $k[$j++] = $_.j; //#27533
                $_.jmv(); //#27533
                $r(3, -1); //#27533
                var _Ne = $k[--$j]; //#27533
                var _Nf = $k[--$j]; //#27533
                $put($k[--$j], _Nf, _Ne); //#27533
            } //#27533
        } //#27533
        $put($_.masks, $_.m, $_.mask); //#27536
    } //#27536
    $_.posx = 0; //#27540
    $_.posy = 0; //#27540
    $_.i = 0; //#27541
    for (;;) { //#27551
        if ($_.posx == $_.cols) { //#27543
            break; //#27543
        } //#27543
        $k[$j++] = $_.pixs; //#27544
        $k[$j++] = $_.posx; //#27544
        $k[$j++] = $_.posy; //#27544
        $_.jmv(); //#27544
        var _Np = $k[--$j]; //#27544
        if ($get($k[--$j], _Np) == -1) { //#27548
            var _Nv = $geti($_.bits, $_.i, $_.databpm); //#27545
            $k[$j++] = 0; //#27545
            for (var _Nw = 0, _Nx = _Nv.length; _Nw < _Nx; _Nw++) { //#27545
                var _Nz = $k[--$j]; //#27545
                $k[$j++] = ($f(_Nz + $f($get(_Nv, _Nw) - 48))) * 2; //#27545
            } //#27545
            var _O0 = $k[--$j]; //#27545
            $k[$j++] = ~~(_O0 / 2); //#27546
            $k[$j++] = $_.pixs; //#27546
            $k[$j++] = $_.posx; //#27546
            $k[$j++] = $_.posy; //#27546
            $_.jmv(); //#27546
            $r(3, -1); //#27546
            var _O4 = $k[--$j]; //#27546
            var _O5 = $k[--$j]; //#27546
            $put($k[--$j], _O5, _O4); //#27546
            $_.i = $_.i + $_.databpm; //#27547
        } //#27547
        $_.posy = $_.posy + 1; //#27549
        if ($_.posy == $_.rows) { //#27550
            $_.posy = 0; //#27550
            $_.posx = $_.posx + 1; //#27550
        } //#27550
    } //#27550
    $_.evalrle = function() {
        $_.scrle = $k[--$j]; //#27555
        $_.scr1 = 0; //#27556
        $_.scr3 = 0; //#27556
        for (var _OG = 0, _OF = $_.scrle.length - 2; _OG <= _OF; _OG += 2) { //#27578
            $_.j = _OG; //#27558
            if ($get($_.scrle, $_.j + 1) != -1) { //#27577
                var _OM = $get($_.scrle, $_.j); //#27561
                $k[$j++] = _OM; //#27561
                if (_OM >= 5) { //#27561
                    $_.scr1 = $f($f($k[--$j] - 2) + $_.scr1); //#27561
                } else { //#27561
                    $j--; //#27561
                } //#27561
                if (($_.j >= 4) && ($_.j <= ($_.scrle.length - 5))) { //#27576
                    var _OU = $geti($_.scrle, $_.j - 4, 10); //#27564
                    $k[$j++] = _OU; //#27565
                    for (var _OV = 0, _OW = _OU.length; _OV < _OW; _OV++) { //#27565
                        $k[$j++] = $get(_OU, _OV) == 1; //#27565
                    } //#27565
                    $j--; //#27565
                    for (var _OY = 0, _OZ = 4; _OY < _OZ; _OY++) { //#27565
                        var _Oa = $k[--$j]; //#27565
                        var _Ob = $k[--$j]; //#27565
                        $k[$j++] = _Oa; //#27565
                        $k[$j++] = _Ob; //#27565
                        $j--; //#27565
                        var _Oc = $k[--$j]; //#27565
                        var _Od = $k[--$j]; //#27565
                        $k[$j++] = $an(_Od, _Oc); //#27565
                    } //#27565
                    if ($k[--$j]) { //#27575
                        $k[$j++] = Infinity; //#27566
                        var _Of = $k[--$j]; //#27566
                        var _Og = $k[--$j]; //#27566
                        $k[$j++] = _Of; //#27566
                        $aload(_Og); //#27566
                        var _Oh = $k[--$j]; //#27567
                        var _Oi = $k[--$j]; //#27567
                        var _Oj = $k[--$j]; //#27567
                        var _Ok = $k[--$j]; //#27567
                        var _Ol = $k[--$j]; //#27567
                        var _Om = $k[--$j]; //#27567
                        var _On = $k[--$j]; //#27567
                        var _Oo = $k[--$j]; //#27567
                        var _Op = $k[--$j]; //#27567
                        $k[$j++] = _Op; //#27573
                        $k[$j++] = _Oo; //#27573
                        $k[$j++] = _On; //#27573
                        $k[$j++] = _Om; //#27573
                        $k[$j++] = _Ol; //#27573
                        $k[$j++] = _Ok; //#27573
                        $k[$j++] = _Oj; //#27573
                        $k[$j++] = _Oi; //#27573
                        $k[$j++] = _Oh; //#27573
                        if (($eq(_Op, _Ol) && $eq(_Op, _Oh)) && $eq(_On, _Oj)) { //#27573
                            var _Oq = $k[--$j]; //#27569
                            var _Or = $k[--$j]; //#27569
                            var _Os = $k[--$j]; //#27569
                            $_.c4 = _Os; //#27569
                            $_.c5 = _Oq; //#27569
                            $k[$j++] = _Os; //#27572
                            $k[$j++] = _Or; //#27572
                            if ((($_.c4 == $_.bi) && ($_.c5 == $_.yi)) || ((($_.c4 == $_.yi) && ($_.c5 == $_.bi)) || ((($_.c4 == $_.gi) && ($_.c5 == $_.mi)) || (($_.c4 == $_.mi) && ($_.c5 == $_.gi))))) { //#27572
                                $_.scr3 = $_.scr3 + 100; //#27572
                            } //#27572
                        } //#27572
                        $cleartomark(); //#27574
                    } else { //#27575
                        $j--; //#27575
                    } //#27575
                } //#27575
            } //#27575
        } //#27575
        $k[$j++] = $_.scr1; //#27579
        $k[$j++] = $_.scr3; //#27579
    }; //#27579
    $_.evalmask = function() {
        $_.sym = $k[--$j]; //#27583
        $_.n1 = 0; //#27585
        $_.n2 = 0; //#27585
        $_.n3 = 0; //#27585
        var _PD = $_.rows; //#27586
        var _PE = $_.cols; //#27586
        if (_PD < _PE) { //#27586
            var _ = _PE; //#27586
            _PE = _PD; //#27586
            _PD = _; //#27586
        } //#27586
        $_.rle = $a($f((_PD * 2) + 2)); //#27586
        $_.lastpairs = $a($_.cols); //#27587
        $_.thispairs = $a($_.cols); //#27588
        for (var _PM = 0, _PL = $f($_.cols - 1); _PM <= _PL; _PM += 1) { //#27600
            $_.i = _PM; //#27592
            $k[$j++] = Infinity; //#27593
            $k[$j++] = 0; //#27596
            $k[$j++] = -1; //#27596
            for (var _PS = $_.i, _PT = $_.cols, _PR = $f(($_.rows * $_.cols) - 1); _PT < 0 ? _PS >= _PR : _PS <= _PR; _PS += _PT) { //#27596
                var _PV = $get($_.sym, _PS); //#27595
                var _PW = $k[--$j]; //#27595
                $k[$j++] = _PW; //#27595
                $k[$j++] = _PV; //#27595
                if ($eq(_PW, _PV)) { //#27595
                    $j--; //#27595
                    var _PX = $k[--$j]; //#27595
                    var _PY = $k[--$j]; //#27595
                    $k[$j++] = $f(_PY + 1); //#27595
                    $k[$j++] = _PX; //#27595
                } else { //#27595
                    var _PZ = $k[--$j]; //#27595
                    $k[$j++] = 1; //#27595
                    $k[$j++] = _PZ; //#27595
                } //#27595
            } //#27595
            var _Pb = $counttomark() + 2; //#27597
            $astore($geti($_.rle, 0, _Pb - 2)); //#27597
            $_.evalrle(); //#27598
            $_.n3 = $f($k[--$j] + $_.n3); //#27598
            $_.n1 = $f($k[--$j] + $_.n1); //#27598
            $j--; //#27599
        } //#27599
        for (var _Pj = 0, _Pi = $f($_.rows - 1); _Pj <= _Pi; _Pj += 1) { //#27627
            $_.i = _Pj; //#27603
            $_.symrow = $geti($_.sym, $_.i * $_.cols, $_.cols); //#27606
            $k[$j++] = Infinity; //#27607
            var _Pp = $_.symrow; //#27608
            $k[$j++] = 0; //#27610
            $k[$j++] = -1; //#27610
            for (var _Pq = 0, _Pr = _Pp.length; _Pq < _Pr; _Pq++) { //#27610
                var _Ps = $get(_Pp, _Pq); //#27610
                var _Pt = $k[--$j]; //#27609
                $k[$j++] = _Pt; //#27609
                $k[$j++] = _Ps; //#27609
                if ($eq(_Pt, _Ps)) { //#27609
                    $j--; //#27609
                    var _Pu = $k[--$j]; //#27609
                    var _Pv = $k[--$j]; //#27609
                    $k[$j++] = $f(_Pv + 1); //#27609
                    $k[$j++] = _Pu; //#27609
                } else { //#27609
                    var _Pw = $k[--$j]; //#27609
                    $k[$j++] = 1; //#27609
                    $k[$j++] = _Pw; //#27609
                } //#27609
            } //#27609
            var _Py = $counttomark() + 2; //#27611
            $astore($geti($_.rle, 0, _Py - 2)); //#27611
            $_.evalrle(); //#27612
            $_.n3 = $f($k[--$j] + $_.n3); //#27612
            $_.n1 = $f($k[--$j] + $_.n1); //#27612
            $j--; //#27613
            var _Q4 = $_.thispairs; //#27616
            $_.thispairs = $_.lastpairs; //#27616
            $_.lastpairs = _Q4; //#27616
            var _Q6 = $_.symrow; //#27617
            $k[$j++] = -1; //#27617
            for (var _Q7 = 0, _Q8 = _Q6.length; _Q7 < _Q8; _Q7++) { //#27617
                var _Q9 = $get(_Q6, _Q7); //#27617
                var _QA = $k[--$j]; //#27617
                $k[$j++] = _Q9; //#27617
                $k[$j++] = _QA; //#27617
                if ($ne(_Q9, _QA)) { //#27617
                    $j--; //#27617
                    var _QB = $k[--$j]; //#27617
                    $k[$j++] = -1; //#27617
                    $k[$j++] = _QB; //#27617
                } //#27617
            } //#27617
            $j--; //#27618
            $astore($_.thispairs); //#27619
            $j--; //#27619
            if ($_.i > 0) { //#27626
                $k[$j++] = Infinity; //#27621
                $aload($_.lastpairs); //#27622
                $aload($_.thispairs); //#27622
                $k[$j++] = $_.n2; //#27623
                for (var _QI = 0, _QJ = $_.cols; _QI < _QJ; _QI++) { //#27623
                    var _QK = $k[--$j]; //#27623
                    var _QL = $k[--$j]; //#27623
                    $k[$j++] = _QK; //#27623
                    $k[$j++] = _QL; //#27623
                    if (_QL != -1) { //#27623
                        var _QN = $k[$j - 1 - $f($_.cols + 1)]; //#27623
                        if ($eq($k[--$j], _QN)) { //#27623
                            var _QP = $k[--$j]; //#27623
                            $k[$j++] = $f(_QP + 3); //#27623
                        } //#27623
                    } else { //#27623
                        $j--; //#27623
                    } //#27623
                } //#27623
                $_.n2 = $k[--$j]; //#27624
                $cleartomark(); //#27625
            } //#27625
        } //#27625
        $k[$j++] = $f($f($_.n1 + $_.n2) + $_.n3); //#27629
    }; //#27629
    $_.bestscore = 999999999; //#27633
    for (var _QW = 0, _QV = $_.masks.length - 1; _QW <= _QV; _QW += 1) { //#27651
        $_.m = _QW; //#27635
        $_.masksym = $a($_.rows * $_.cols); //#27636
        for (var _Qd = 0, _Qc = $f(($_.rows * $_.cols) - 1); _Qd <= _Qc; _Qd += 1) { //#27640
            $_.i = _Qd; //#27638
            $put($_.masksym, $_.i, $xo($get($_.pixs, $_.i), $get($get($_.masks, $_.m), $_.i))); //#27639
        } //#27639
        if ($_.masks.length != 1) { //#27649
            $k[$j++] = $_.masksym; //#27642
            $_.evalmask(); //#27642
            $_.score = $k[--$j]; //#27642
            if ($_.score < $_.bestscore) { //#27647
                $_.bestsym = $_.masksym; //#27644
                $_.bestmaskval = $_.m; //#27645
                $_.bestscore = $_.score; //#27646
            } //#27646
        } else { //#27649
            $_.bestsym = $_.masksym; //#27649
        } //#27649
    } //#27649
    $_.pixs = $_.bestsym; //#27652
    $_.metamask = $_.bestmaskval; //#27653
    $_.addtometapart = function() {
        var _Qz = $k[--$j]; //#27657
        $puti($_.metapart, $_.p, _Qz); //#27657
        $_.p = _Qz.length + $_.p; //#27658
    }; //#27658
    $_.addtometabits = function() {
        var _R3 = $k[--$j]; //#27662
        $puti($_.metabits, $_.q, _R3); //#27662
        $_.q = _R3.length + $_.q; //#27663
    }; //#27663
    $_.metapart = $s(40); //#27666
    $_.metabits = $s($_.nummetabits); //#27667
    $_.p = 0; //#27668
    $_.q = 0; //#27668
    if (!$_.slave) { //#27723
        $k[$j++] = (~~(Math.round(Math.log($_.colors) / Math.log(2)))) - 1; //#27673
        $k[$j++] = 3; //#27673
        $_.tofixedbits(); //#27673
        $_.addtometapart(); //#27673
        $k[$j++] = $geti($_.metapart, 0, $_.p); //#27674
        $k[$j++] = 2; //#27674
        $k[$j++] = -1; //#27674
        $_.ldpc(); //#27674
        $_.addtometabits(); //#27674
        $_.p = 0; //#27674
        $k[$j++] = $_.metass; //#27677
        $k[$j++] = 1; //#27677
        $_.tofixedbits(); //#27677
        $_.addtometapart(); //#27677
        $k[$j++] = $_.metavf; //#27678
        $k[$j++] = 2; //#27678
        $_.tofixedbits(); //#27678
        $_.addtometapart(); //#27678
        $k[$j++] = $_.metamask; //#27679
        $k[$j++] = 3; //#27679
        $_.tofixedbits(); //#27679
        $_.addtometapart(); //#27679
        if ($_.hasslaves) { //#27680
            $k[$j++] = "1"; //#27680
        } else { //#27680
            $k[$j++] = "0"; //#27680
        } //#27680
        $_.addtometapart(); //#27680
        $k[$j++] = $geti($_.metapart, 0, $_.p); //#27681
        $k[$j++] = 2; //#27681
        $k[$j++] = -1; //#27681
        $_.ldpc(); //#27681
        $_.addtometabits(); //#27681
        $_.p = 0; //#27681
        if ($_.metass == 0) { //#27691
            $k[$j++] = $f(($f((~~($f($_.cols - 17) / 4)) - $get($a([0, 4, 8, 16]), $_.metavf))) - 1); //#27686
            $k[$j++] = $_.metavlen; //#27686
            $_.tofixedbits(); //#27686
            $_.addtometapart(); //#27686
        } else { //#27691
            $k[$j++] = (~~($f($_.cols - 17) / 4)) - 1; //#27689
            $k[$j++] = ~~($_.metavlen / 2); //#27689
            $_.tofixedbits(); //#27689
            $_.addtometapart(); //#27689
            $k[$j++] = (~~($f($_.rows - 17) / 4)) - 1; //#27691
            $k[$j++] = ~~($_.metavlen / 2); //#27691
            $_.tofixedbits(); //#27691
            $_.addtometapart(); //#27691
        } //#27691
        $k[$j++] = $_.datawc - 3; //#27693
        $k[$j++] = ~~($_.metaelen / 2); //#27693
        $_.tofixedbits(); //#27693
        $_.addtometapart(); //#27693
        $k[$j++] = $_.datawr - 4; //#27694
        $k[$j++] = ~~($_.metaelen / 2); //#27694
        $_.tofixedbits(); //#27694
        $_.addtometapart(); //#27694
        if ($_.hasslaves) { //#27697
            $k[$j++] = 0; //#27696
            $k[$j++] = 4; //#27696
            $_.tofixedbits(); //#27696
            $_.addtometapart(); //#27696
        } //#27696
        $k[$j++] = $geti($_.metapart, 0, $_.p); //#27698
        $k[$j++] = 2; //#27698
        $k[$j++] = -1; //#27698
        $_.ldpc(); //#27698
        $_.addtometabits(); //#27698
        $_.p = 0; //#27698
    } else { //#27723
        var _Rf = $_.sameshape ? 0 : 1; //#27703
        $k[$j++] = _Rf; //#27703
        $k[$j++] = 1; //#27703
        $_.tofixedbits(); //#27703
        $_.addtometapart(); //#27703
        var _Rh = $_.sameecc ? 0 : 1; //#27704
        $k[$j++] = _Rh; //#27704
        $k[$j++] = 1; //#27704
        $_.tofixedbits(); //#27704
        $_.addtometapart(); //#27704
        var _Rj = $_.hasslaves ? 1 : 0; //#27705
        $k[$j++] = _Rj; //#27705
        $k[$j++] = 1; //#27705
        $_.tofixedbits(); //#27705
        $_.addtometapart(); //#27705
        $k[$j++] = $geti($_.metapart, 0, $_.p); //#27706
        $k[$j++] = 2; //#27706
        $k[$j++] = -1; //#27706
        $_.ldpc(); //#27706
        $_.addtometabits(); //#27706
        $_.p = 0; //#27706
        if (!$_.sameshape) { //#27712
            $k[$j++] = (~~(($_.diffside - 17) / 4)) - 1; //#27711
            $k[$j++] = 5; //#27711
            $_.tofixedbits(); //#27711
            $_.addtometapart(); //#27711
        } //#27711
        if ($_.hasslaves) { //#27715
            $k[$j++] = 0; //#27714
            $k[$j++] = 3; //#27714
            $_.tofixedbits(); //#27714
            $_.addtometapart(); //#27714
        } //#27714
        $k[$j++] = $geti($_.metapart, 0, $_.p); //#27716
        $k[$j++] = 2; //#27716
        $k[$j++] = -1; //#27716
        $_.ldpc(); //#27716
        $_.addtometabits(); //#27716
        $_.p = 0; //#27716
        if (!$_.sameecc) { //#27722
            $k[$j++] = $_.datawc - 3; //#27720
            $k[$j++] = ~~($_.metaelen / 2); //#27720
            $_.tofixedbits(); //#27720
            $_.addtometapart(); //#27720
            $k[$j++] = $_.datawr - 4; //#27721
            $k[$j++] = ~~($_.metaelen / 2); //#27721
            $_.tofixedbits(); //#27721
            $_.addtometapart(); //#27721
        } //#27721
        $k[$j++] = $geti($_.metapart, 0, $_.p); //#27723
        $k[$j++] = 2; //#27723
        $k[$j++] = -1; //#27723
        $_.ldpc(); //#27723
        $_.addtometabits(); //#27723
        $_.p = 0; //#27723
    } //#27723
    for (var _S4 = $_.q, _S3 = $f($_.nummetabits - 1); _S4 <= _S3; _S4 += 1) { //#27728
        $put($_.metabits, _S4, 48); //#27727
    } //#27727
    $_.i = 0; //#27731
    $_.j = 0; //#27731
    if (!$_.slave) { //#27739
        var _S9 = $geti($_.metabits, $_.i, 6); //#27733
        for (var _SA = 0, _SB = _S9.length; _SA < _SB; _SA++) { //#27737
            $k[$j++] = $get(_S9, _SA); //#27734
            if ($_.colors == 4) { //#27734
                $k[$j++] = $a([$_.bi, $_.yi]); //#27734
            } else { //#27734
                $k[$j++] = $a([$_.ki, $_.wi]); //#27734
            } //#27734
            var _SK = $k[--$j]; //#27734
            var _SM = $get(_SK, $f($k[--$j] - 48)); //#27734
            $k[$j++] = _SM; //#27735
            $k[$j++] = $_.pixs; //#27735
            $aload($get($_.metadatamap, $_.j)); //#27735
            $_.jmv(); //#27735
            $r(3, -1); //#27735
            var _SR = $k[--$j]; //#27735
            var _SS = $k[--$j]; //#27735
            $put($k[--$j], _SS, _SR); //#27735
            $_.j = $_.j + 1; //#27736
        } //#27736
        $_.i = $_.i + 6; //#27738
    } //#27738
    for (var _SZ = 0, _Sa = ~~($f($_.nummetabits - $_.i) / $_.metabpm); _SZ < _Sa; _SZ++) { //#27746
        var _Se = $geti($_.metabits, $_.i, $_.metabpm); //#27741
        $k[$j++] = 0; //#27741
        for (var _Sf = 0, _Sg = _Se.length; _Sf < _Sg; _Sf++) { //#27741
            var _Si = $k[--$j]; //#27741
            $k[$j++] = ($f(_Si + $f($get(_Se, _Sf) - 48))) * 2; //#27741
        } //#27741
        var _Sl = $get($_.metacolorindex, ~~($k[--$j] / 2)); //#27742
        $k[$j++] = _Sl; //#27743
        $k[$j++] = $_.pixs; //#27743
        $aload($get($_.metadatamap, $_.j)); //#27743
        $_.jmv(); //#27743
        $r(3, -1); //#27743
        var _Sq = $k[--$j]; //#27743
        var _Sr = $k[--$j]; //#27743
        $put($k[--$j], _Sr, _Sq); //#27743
        $_.i = $f($_.i + $_.metabpm); //#27744
        $_.j = $_.j + 1; //#27745
    } //#27745
    var _T3 = new Map([
        ["ren", 'renmatrix'],
        ["pixs", $_.pixs],
        ["pixx", $_.cols],
        ["pixy", $_.rows],
        ["colormap", $_.palette],
        ["height", ($_.rows * 2) / 72],
        ["width", ($_.cols * 2) / 72],
        ["borderleft", 0],
        ["borderright", 0],
        ["bordertop", 0],
        ["borderbottom", 0],
        ["opt", $_.options]
    ]); //#27760
    $k[$j++] = _T3; //#27763
    if (!$_.dontdraw) { //#27763
        bwipp_renmatrix(); //#27763
    } //#27763
    $_ = Object.getPrototypeOf($_); //#27765
} //bwipp_jabcode
function bwipp_gs1_cc() {
    $_ = Object.create($_); //#27798
    $_.parse = false; //#27801
    $_.dontlint = false; //#27802
    $_.lintreqs = false; //#27803
    $_.dontdraw = false; //#27804
    $_.ccversion = "a"; //#27805
    $_.cccolumns = -1; //#27806
    $_.lintype = ""; //#27807
    $_.linwidth = -1; //#27808
    $k[$j++] = $_; //#27810
    bwipp_processoptions(); //#27810
    $_.options = $k[--$j]; //#27810
    $_.barcode = $k[--$j]; //#27811
    bwipp_loadctx(bwipp_gs1_cc); //#27813
    if (($ne($_.ccversion, "a") && $ne($_.ccversion, "b")) && $ne($_.ccversion, "c")) { //#27817
        $k[$j++] = 'bwipp.gs1ccBadCCversion#27816'; //#27816
        $k[$j++] = "ccversion must be a, b or c"; //#27816
        bwipp_raiseerror(); //#27816
    } //#27816
    if ($_.cccolumns > 30) { //#27821
        $k[$j++] = 'bwipp.gs1ccColumnsTooBig#27820'; //#27820
        $k[$j++] = "The maximum number of composite component columns is 30"; //#27820
        bwipp_raiseerror(); //#27820
    } //#27820
    if (!bwipp_gs1_cc.__27838__) { //#27838
        $_ = Object.create($_); //#27838
        var _6 = new Map([
            ["ean13", 4],
            ["upca", 4],
            ["ean8", 3],
            ["upce", 2],
            ["gs1-128", 4],
            ["databaromni", 4],
            ["databarstacked", 2],
            ["databarstackedomni", 2],
            ["databartruncated", 4],
            ["databarlimited", 3],
            ["databarexpanded", 4],
            ["databarexpandedstacked", 4]
        ]); //#27836
        $_.lintypecccolumns = _6; //#27837
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_gs1_cc.$ctx[id] = $_[id]); //#27837
        bwipp_gs1_cc.__27838__ = 1; //#27837
        $_ = Object.getPrototypeOf($_); //#27837
    } //#27837
    if ($ne($_.lintype, "")) { //#27844
        var _B = $get($_.lintypecccolumns, $_.lintype) !== undefined; //#27841
        if (!_B) { //#27843
            $k[$j++] = 'bwipp.gs1ccBadLinType#27842'; //#27842
            $k[$j++] = "The lintype is not recognised"; //#27842
            bwipp_raiseerror(); //#27842
        } //#27842
    } //#27842
    if ($_.cccolumns == -1) { //#27860
        if ($eq($_.lintype, "gs1-128") && $eq($_.ccversion, "c")) { //#27857
            if ($_.linwidth < 0) { //#27851
                $k[$j++] = 'bwipp.gs1ccMissingLinWidth#27850'; //#27850
                $k[$j++] = "linwidth must be set for a GS1-128 with a CC-C composite component"; //#27850
                bwipp_raiseerror(); //#27850
            } //#27850
            if ($_.linwidth < 68) { //#27854
                $k[$j++] = 'bwipp.gs1ccMinimumLinWidth#27853'; //#27853
                $k[$j++] = "Minimum linwidth for a GS1-128 with a CC-C composite component is 68"; //#27853
                bwipp_raiseerror(); //#27853
            } //#27853
            if ($_.linwidth == 68) { //#27855
                $k[$j++] = 1; //#27855
            } else { //#27855
                $k[$j++] = ~~(($_.linwidth - 52) / 17); //#27855
            } //#27855
        } else { //#27857
            if ($ne($_.lintype, "")) { //#27857
                $k[$j++] = $get($_.lintypecccolumns, $_.lintype); //#27857
            } else { //#27857
                $k[$j++] = 2; //#27857
            } //#27857
        } //#27857
        $_.cccolumns = $k[--$j]; //#27859
    } //#27859
    $k[$j++] = $_.barcode; //#27862
    $k[$j++] = 'ai'; //#27862
    bwipp_gs1process(); //#27862
    $_.fncs = $k[--$j]; //#27863
    $_.vals = $k[--$j]; //#27864
    $_.ais = $k[--$j]; //#27865
    $_.isupper = function() {
        var _S = $k[--$j]; //#27868
        $k[$j++] = (_S >= 65) && (_S <= 90); //#27868
    }; //#27868
    $_.isnum0 = function() {
        var _T = $k[--$j]; //#27869
        $k[$j++] = (_T >= 48) && (_T <= 57); //#27869
    }; //#27869
    $_.isnum1 = function() {
        var _U = $k[--$j]; //#27870
        $k[$j++] = (_U >= 49) && (_U <= 57); //#27870
    }; //#27870
    for (;;) { //#27916
        if ($_.ais.length >= 1) { //#27878
            if (($eq($get($_.ais, 0), "10") || $eq($get($_.ais, 0), "11")) || $eq($get($_.ais, 0), "17")) { //#27877
                $k[$j++] = -1; //#27876
                $k[$j++] = "10"; //#27876
                break; //#27876
            } //#27876
        } //#27876
        if ($_.ais.length >= 1) { //#27911
            if ($eq($get($_.ais, 0), "90")) { //#27910
                $_.v = $get($_.vals, 0); //#27883
                if ($_.v.length >= 1) { //#27888
                    $k[$j++] = $get($_.v, 0); //#27885
                    $_.isupper(); //#27885
                    if ($k[--$j]) { //#27887
                        $k[$j++] = 0; //#27886
                        $k[$j++] = "11"; //#27886
                        break; //#27886
                    } //#27886
                } //#27886
                if ($_.v.length >= 2) { //#27894
                    $k[$j++] = $get($_.v, 0); //#27890
                    $_.isnum1(); //#27890
                    $k[$j++] = $get($_.v, 1); //#27891
                    $_.isupper(); //#27891
                    var _q = $k[--$j]; //#27891
                    var _r = $k[--$j]; //#27891
                    if ((_r && _q)) { //#27893
                        $k[$j++] = 1; //#27892
                        $k[$j++] = "11"; //#27892
                        break; //#27892
                    } //#27892
                } //#27892
                if ($_.v.length >= 3) { //#27901
                    $k[$j++] = $get($_.v, 0); //#27896
                    $_.isnum1(); //#27896
                    $k[$j++] = $get($_.v, 1); //#27897
                    $_.isnum0(); //#27897
                    var _x = $k[--$j]; //#27897
                    var _y = $k[--$j]; //#27897
                    $k[$j++] = $an(_y, _x); //#27898
                    $k[$j++] = $get($_.v, 2); //#27898
                    $_.isupper(); //#27898
                    var _11 = $k[--$j]; //#27898
                    var _12 = $k[--$j]; //#27898
                    if ((_12 && _11)) { //#27900
                        $k[$j++] = 2; //#27899
                        $k[$j++] = "11"; //#27899
                        break; //#27899
                    } //#27899
                } //#27899
                if ($_.v.length >= 4) { //#27909
                    $k[$j++] = $get($_.v, 0); //#27903
                    $_.isnum1(); //#27903
                    $k[$j++] = $get($_.v, 1); //#27904
                    $_.isnum0(); //#27904
                    var _18 = $k[--$j]; //#27904
                    var _19 = $k[--$j]; //#27904
                    $k[$j++] = $an(_19, _18); //#27905
                    $k[$j++] = $get($_.v, 2); //#27905
                    $_.isnum0(); //#27905
                    var _1C = $k[--$j]; //#27905
                    var _1D = $k[--$j]; //#27905
                    $k[$j++] = $an(_1D, _1C); //#27906
                    $k[$j++] = $get($_.v, 3); //#27906
                    $_.isupper(); //#27906
                    var _1G = $k[--$j]; //#27906
                    var _1H = $k[--$j]; //#27906
                    if ((_1H && _1G)) { //#27908
                        $k[$j++] = 3; //#27907
                        $k[$j++] = "11"; //#27907
                        break; //#27907
                    } //#27907
                } //#27907
            } //#27907
        } //#27907
        $k[$j++] = -1; //#27914
        $k[$j++] = "0"; //#27914
        break; //#27914
    } //#27914
    $_.method = $k[--$j]; //#27917
    $_.npre = $k[--$j]; //#27918
    $_.tobin = function() {
        var _1L = $s($k[--$j]); //#27921
        $k[$j++] = _1L; //#27921
        for (var _1N = 0, _1M = _1L.length - 1; _1N <= _1M; _1N += 1) { //#27921
            var _1O = $k[--$j]; //#27921
            $put(_1O, _1N, 48); //#27921
            $k[$j++] = _1O; //#27921
        } //#27921
        var _1P = $k[--$j]; //#27922
        $k[$j++] = _1P; //#27922
        $k[$j++] = _1P; //#27922
        $r(3, -1); //#27922
        var _1Q = $k[--$j]; //#27922
        var _1R = $k[--$j]; //#27922
        var _1T = $cvrs($s(_1R.length), _1Q, 2); //#27922
        $puti(_1R, _1R.length - _1T.length, _1T); //#27922
    }; //#27922
    if (!bwipp_gs1_cc.__27973__) { //#27973
        $_ = Object.create($_); //#27973
        $_.fnc1 = -1; //#27927
        $_.lnumeric = -2; //#27927
        $_.lalphanumeric = -3; //#27927
        $_.liso646 = -4; //#27927
        $k[$j++] = Infinity; //#27929
        for (var _1U = 65; _1U <= 90; _1U += 1) { //#27930
            $k[$j++] = _1U; //#27930
            $k[$j++] = _1U - 65; //#27930
            $k[$j++] = 5; //#27930
            $_.tobin(); //#27930
        } //#27930
        for (var _1V = 48; _1V <= 57; _1V += 1) { //#27931
            $k[$j++] = _1V; //#27931
            $k[$j++] = _1V + 4; //#27931
            $k[$j++] = 6; //#27931
            $_.tobin(); //#27931
        } //#27931
        $k[$j++] = $_.fnc1; //#27932
        $k[$j++] = "11111"; //#27932
        $_.alpha = $d(); //#27933
        $k[$j++] = Infinity; //#27935
        for (var _1Y = 0; _1Y <= 119; _1Y += 1) { //#27944
            var _1a = $strcpy($s(2), "00"); //#27937
            var _1c = $cvrs($s(2), _1Y, 11); //#27937
            $puti(_1a, 2 - _1c.length, _1c); //#27938
            $k[$j++] = _1Y; //#27939
            $k[$j++] = _1a; //#27939
            if ($get(_1a, 0) == 65) { //#27939
                var _1e = $k[--$j]; //#27939
                $put(_1e, 0, 94); //#27939
                $k[$j++] = _1e; //#27939
            } //#27939
            var _1f = $k[--$j]; //#27940
            $k[$j++] = _1f; //#27940
            if ($get(_1f, 1) == 65) { //#27940
                var _1h = $k[--$j]; //#27940
                $put(_1h, 1, 94); //#27940
                $k[$j++] = _1h; //#27940
            } //#27940
            var _1i = $k[--$j]; //#27941
            var _1l = $strcpy($s(7), "0000000"); //#27942
            var _1n = $cvrs($s(7), $f($k[--$j] + 8), 2); //#27942
            $puti(_1l, 7 - _1n.length, _1n); //#27943
            $k[$j++] = _1i; //#27943
            $k[$j++] = _1l; //#27943
        } //#27943
        $k[$j++] = $_.lalphanumeric; //#27945
        $k[$j++] = "0000"; //#27945
        $_.numeric = $d(); //#27946
        $k[$j++] = Infinity; //#27948
        for (var _1q = 48; _1q <= 57; _1q += 1) { //#27949
            $k[$j++] = _1q; //#27949
            $k[$j++] = _1q - 43; //#27949
            $k[$j++] = 5; //#27949
            $_.tobin(); //#27949
        } //#27949
        $k[$j++] = $_.fnc1; //#27951
        $k[$j++] = "01111"; //#27951
        for (var _1s = 65; _1s <= 90; _1s += 1) { //#27951
            $k[$j++] = _1s; //#27951
            $k[$j++] = _1s - 33; //#27951
            $k[$j++] = 6; //#27951
            $_.tobin(); //#27951
        } //#27951
        $k[$j++] = 42; //#27953
        $k[$j++] = "111010"; //#27953
        for (var _1t = 44; _1t <= 47; _1t += 1) { //#27953
            $k[$j++] = _1t; //#27953
            $k[$j++] = _1t + 15; //#27953
            $k[$j++] = 6; //#27953
            $_.tobin(); //#27953
        } //#27953
        $k[$j++] = $_.lnumeric; //#27955
        $k[$j++] = "000"; //#27955
        $k[$j++] = $_.liso646; //#27955
        $k[$j++] = "00100"; //#27955
        $_.alphanumeric = $d(); //#27956
        $k[$j++] = Infinity; //#27958
        for (var _1x = 48; _1x <= 57; _1x += 1) { //#27959
            $k[$j++] = _1x; //#27959
            $k[$j++] = _1x - 43; //#27959
            $k[$j++] = 5; //#27959
            $_.tobin(); //#27959
        } //#27959
        $k[$j++] = $_.fnc1; //#27961
        $k[$j++] = "01111"; //#27961
        for (var _1z = 65; _1z <= 90; _1z += 1) { //#27961
            $k[$j++] = _1z; //#27961
            $k[$j++] = _1z - 1; //#27961
            $k[$j++] = 7; //#27961
            $_.tobin(); //#27961
        } //#27961
        for (var _20 = 97; _20 <= 122; _20 += 1) { //#27962
            $k[$j++] = _20; //#27962
            $k[$j++] = _20 - 7; //#27962
            $k[$j++] = 7; //#27962
            $_.tobin(); //#27962
        } //#27962
        $k[$j++] = 33; //#27965
        $k[$j++] = "11101000"; //#27965
        $k[$j++] = 34; //#27965
        $k[$j++] = "11101001"; //#27965
        for (var _21 = 37; _21 <= 47; _21 += 1) { //#27965
            $k[$j++] = _21; //#27965
            $k[$j++] = _21 + 197; //#27965
            $k[$j++] = 8; //#27965
            $_.tobin(); //#27965
        } //#27965
        for (var _22 = 58; _22 <= 63; _22 += 1) { //#27966
            $k[$j++] = _22; //#27966
            $k[$j++] = _22 + 187; //#27966
            $k[$j++] = 8; //#27966
            $_.tobin(); //#27966
        } //#27966
        $k[$j++] = 95; //#27970
        $k[$j++] = "11111011"; //#27970
        $k[$j++] = 32; //#27970
        $k[$j++] = "11111100"; //#27970
        $k[$j++] = $_.lnumeric; //#27970
        $k[$j++] = "000"; //#27970
        $k[$j++] = $_.lalphanumeric; //#27970
        $k[$j++] = "00100"; //#27970
        $_.iso646 = $d(); //#27971
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_gs1_cc.$ctx[id] = $_[id]); //#27971
        bwipp_gs1_cc.__27973__ = 1; //#27971
        $_ = Object.getPrototypeOf($_); //#27971
    } //#27971
    if ($eq($_.method, "10")) { //#28008
        if ($eq($get($_.ais, 0), "11") || $eq($get($_.ais, 0), "17")) { //#27991
            var _2D = $get($_.vals, 0); //#27977
            var _2I = $strcpy($s(16), "0000000000000000"); //#27981
            var _2K = $cvrs($s(16), ($cvi($geti(_2D, 0, 2)) * 384) + ((($cvi($geti(_2D, 2, 2)) - 1) * 32) + $cvi($geti(_2D, 4, 2))), 2); //#27981
            $puti(_2I, 16 - _2K.length, _2K); //#27982
            $k[$j++] = _2I; //#27985
            $k[$j++] = Infinity; //#27983
            $k[$j++] = 1; //#27984
            $k[$j++] = 0; //#27984
            $r(4, -1); //#27984
            $forall($k[--$j], function() { //#27984
                var _2M = $k[--$j]; //#27984
                $k[$j++] = $f(_2M - 48); //#27984
            }); //#27984
            var _2P = $eq($get($_.ais, 0), "11") ? 0 : 1; //#27985
            $k[$j++] = _2P; //#27985
            $_.cdf = $a(); //#27986
            $_.ais = $geti($_.ais, 1, $_.ais.length - 1); //#27987
            $_.vals = $geti($_.vals, 1, $_.vals.length - 1); //#27988
            $_.fncs = $geti($_.fncs, 1, $_.fncs.length - 1); //#27989
        } else { //#27991
            $_.cdf = $a([1, 0, 1, 1]); //#27991
        } //#27991
        if ($_.ais.length != 0) { //#28005
            if ($eq($get($_.ais, 0), "10")) { //#28001
                $k[$j++] = Infinity; //#27995
                $forall($get($_.vals, 0)); //#27995
                $_.gpf = $a(); //#27995
                if ($_.ais.length > 1) { //#27996
                    $k[$j++] = Infinity; //#27996
                    $aload($_.gpf); //#27996
                    $k[$j++] = $_.fnc1; //#27996
                    $_.gpf = $a(); //#27996
                } //#27996
                $_.ais = $geti($_.ais, 1, $_.ais.length - 1); //#27997
                $_.vals = $geti($_.vals, 1, $_.vals.length - 1); //#27998
                $_.fncs = $geti($_.fncs, 1, $_.fncs.length - 1); //#27999
            } else { //#28001
                $_.gpf = $a([$_.fnc1]); //#28001
            } //#28001
        } else { //#28005
            $k[$j++] = Infinity; //#28004
            $aload($_.cdf); //#28004
            $k[$j++] = 0; //#28004
            $k[$j++] = 0; //#28004
            $k[$j++] = 0; //#28004
            $k[$j++] = 0; //#28004
            $k[$j++] = 0; //#28004
            $k[$j++] = 1; //#28004
            $k[$j++] = 1; //#28004
            $k[$j++] = 1; //#28004
            $k[$j++] = 1; //#28004
            $_.cdf = $a(); //#28004
            $_.gpf = $a([]); //#28005
        } //#28005
        $_.mode = "numeric"; //#28007
    } //#28007
    if ($eq($_.method, "11")) { //#28102
        $_.cdf = $a([1, 1]); //#28011
        $_.ai90 = $get($_.vals, 0); //#28012
        if ($f($_.npre + 1) != $_.ai90.length) { //#28016
            $k[$j++] = $geti($_.ai90, $f($_.npre + 1), $f($f($_.ai90.length - $_.npre) - 1)); //#28014
        } else { //#28016
            $k[$j++] = ""; //#28016
        } //#28016
        $_.ai90rem = $k[--$j]; //#28018
        $k[$j++] = 'nalpha'; //#28019
        $k[$j++] = 0; //#28019
        $forall($_.ai90rem, function() { //#28019
            var _3C = $k[--$j]; //#28019
            if ((_3C >= 65) && (_3C <= 90)) { //#28019
                var _3D = $k[--$j]; //#28019
                $k[$j++] = $f(_3D + 1); //#28019
            } //#28019
        }); //#28019
        var _3E = $k[--$j]; //#28019
        $_[$k[--$j]] = _3E; //#28019
        $k[$j++] = 'nnums'; //#28020
        $k[$j++] = 0; //#28020
        $forall($_.ai90rem, function() { //#28020
            var _3H = $k[--$j]; //#28020
            if ((_3H >= 48) && (_3H <= 57)) { //#28020
                var _3I = $k[--$j]; //#28020
                $k[$j++] = $f(_3I + 1); //#28020
            } //#28020
        }); //#28020
        var _3J = $k[--$j]; //#28020
        $_[$k[--$j]] = _3J; //#28020
        $k[$j++] = 'mode'; //#28021
        if ($gt($_.nalpha, $_.nnums)) { //#28021
            $k[$j++] = "alpha"; //#28021
        } else { //#28021
            if ($_.nalpha == 0) { //#28021
                $k[$j++] = "numeric"; //#28021
            } else { //#28021
                $k[$j++] = "alphanumeric"; //#28021
            } //#28021
        } //#28021
        var _3O = $k[--$j]; //#28021
        $_[$k[--$j]] = _3O; //#28021
        if ($f($_.nalpha + $_.nnums) != $_.ai90rem.length) { //#28022
            $_.mode = "alphanumeric"; //#28022
        } //#28022
        $k[$j++] = Infinity; //#28023
        $aload($_.cdf); //#28024
        if ($eq($_.mode, "alphanumeric")) { //#28025
            $k[$j++] = 0; //#28025
        } //#28025
        if ($eq($_.mode, "numeric")) { //#28026
            $k[$j++] = 1; //#28026
            $k[$j++] = 0; //#28026
        } //#28026
        if ($eq($_.mode, "alpha")) { //#28027
            $k[$j++] = 1; //#28027
            $k[$j++] = 1; //#28027
        } //#28027
        $_.cdf = $a(); //#28027
        $k[$j++] = 'ais1'; //#28029
        if ($_.ais.length > 1) { //#28029
            $k[$j++] = $get($_.ais, 1); //#28029
        } else { //#28029
            $k[$j++] = -1; //#28029
        } //#28029
        var _3b = $k[--$j]; //#28029
        $_[$k[--$j]] = _3b; //#28029
        $k[$j++] = 'vals1'; //#28030
        if ($_.vals.length > 1) { //#28030
            $k[$j++] = $get($_.vals, 1); //#28030
        } else { //#28030
            $k[$j++] = -1; //#28030
        } //#28030
        var _3g = $k[--$j]; //#28030
        $_[$k[--$j]] = _3g; //#28030
        if ($eq($_.ais1, "21") || $eq($_.ais1, "8004")) { //#28034
            $k[$j++] = Infinity; //#28032
            $aload($_.cdf); //#28032
            if ($eq($_.ais1, "21")) { //#28032
                $k[$j++] = 1; //#28032
                $k[$j++] = 0; //#28032
            } else { //#28032
                $k[$j++] = 1; //#28032
                $k[$j++] = 1; //#28032
            } //#28032
            $_.cdf = $a(); //#28032
        } else { //#28034
            $k[$j++] = Infinity; //#28034
            $aload($_.cdf); //#28034
            $k[$j++] = 0; //#28034
            $_.cdf = $a(); //#28034
        } //#28034
        $k[$j++] = 'nval'; //#28036
        if ($_.npre != 0) { //#28036
            $k[$j++] = $cvi($geti($_.ai90, 0, $_.npre)); //#28036
        } else { //#28036
            $k[$j++] = 0; //#28036
        } //#28036
        var _3t = $k[--$j]; //#28036
        $_[$k[--$j]] = _3t; //#28036
        $search("BDHIJKLNPQRSTVXZ", $geti($_.ai90, $_.npre, 1)); //#28037
        if ($k[--$j]) { //#28041
            var _3z = $k[--$j]; //#28038
            var _40 = $k[--$j]; //#28038
            $k[$j++] = _3z.length; //#28038
            $k[$j++] = _40; //#28038
            $j--; //#28038
            var _41 = $k[--$j]; //#28038
            var _42 = $k[--$j]; //#28038
            $k[$j++] = _41; //#28038
            $k[$j++] = _42; //#28038
            $j--; //#28038
            $_.aval = $k[--$j]; //#28039
        } else { //#28041
            $j--; //#28041
            $_.aval = -1; //#28041
        } //#28041
        if (($_.nval < 31) && ($_.aval != -1)) { //#28067
            var _47 = $strcpy($s(5), "00000"); //#28044
            var _4A = $cvrs($s(5), $_.nval, 2); //#28044
            $puti(_47, 5 - _4A.length, _4A); //#28045
            $k[$j++] = _47; //#28046
            $k[$j++] = Infinity; //#28046
            var _4B = $k[--$j]; //#28046
            var _4C = $k[--$j]; //#28046
            $k[$j++] = _4B; //#28046
            $forall(_4C, function() { //#28046
                var _4D = $k[--$j]; //#28046
                $k[$j++] = $f(_4D - 48); //#28046
            }); //#28046
            $_.nbits = $a(); //#28046
            var _4G = $strcpy($s(4), "0000"); //#28047
            var _4J = $cvrs($s(4), $_.aval, 2); //#28047
            $puti(_4G, 4 - _4J.length, _4J); //#28048
            $k[$j++] = _4G; //#28049
            $k[$j++] = Infinity; //#28049
            var _4K = $k[--$j]; //#28049
            var _4L = $k[--$j]; //#28049
            $k[$j++] = _4K; //#28049
            $forall(_4L, function() { //#28049
                var _4M = $k[--$j]; //#28049
                $k[$j++] = $f(_4M - 48); //#28049
            }); //#28049
            $_.abits = $a(); //#28049
            $k[$j++] = Infinity; //#28050
            $aload($_.cdf); //#28051
            $aload($_.nbits); //#28052
            $aload($_.abits); //#28053
            $_.cdf = $a(); //#28053
        } else { //#28067
            var _4T = $strcpy($s(10), "0000000000"); //#28056
            var _4W = $cvrs($s(10), $_.nval, 2); //#28056
            $puti(_4T, 10 - _4W.length, _4W); //#28057
            $k[$j++] = _4T; //#28058
            $k[$j++] = Infinity; //#28058
            var _4X = $k[--$j]; //#28058
            var _4Y = $k[--$j]; //#28058
            $k[$j++] = _4X; //#28058
            $forall(_4Y, function() { //#28058
                var _4Z = $k[--$j]; //#28058
                $k[$j++] = $f(_4Z - 48); //#28058
            }); //#28058
            $_.nbits = $a(); //#28058
            var _4c = $strcpy($s(5), "00000"); //#28059
            var _4h = $cvrs($s(5), $f($get($_.ai90, $_.npre) - 65), 2); //#28059
            $puti(_4c, 5 - _4h.length, _4h); //#28060
            $k[$j++] = _4c; //#28061
            $k[$j++] = Infinity; //#28061
            var _4i = $k[--$j]; //#28061
            var _4j = $k[--$j]; //#28061
            $k[$j++] = _4i; //#28061
            $forall(_4j, function() { //#28061
                var _4k = $k[--$j]; //#28061
                $k[$j++] = $f(_4k - 48); //#28061
            }); //#28061
            $_.abits = $a(); //#28061
            $k[$j++] = Infinity; //#28062
            $aload($_.cdf); //#28063
            $k[$j++] = 1; //#28065
            $k[$j++] = 1; //#28065
            $k[$j++] = 1; //#28065
            $k[$j++] = 1; //#28065
            $k[$j++] = 1; //#28065
            $aload($_.nbits); //#28065
            $aload($_.abits); //#28066
            $_.cdf = $a(); //#28066
        } //#28067
        if ($ne($_.mode, "alpha")) { //#28085
            $k[$j++] = Infinity; //#28070
            $forall($_.ai90rem); //#28070
            if ($_.ais.length > 1) { //#28070
                $k[$j++] = $_.fnc1; //#28070
            } //#28070
            $_.gpf = $a(); //#28070
        } else { //#28085
            $k[$j++] = Infinity; //#28072
            $forall($_.ai90rem); //#28072
            if ($_.ais.length > 1) { //#28072
                $k[$j++] = $_.fnc1; //#28072
            } //#28072
            $_.in = $a(); //#28072
            $_.out = $a($_.in.length * 6); //#28073
            $_.j = 0; //#28074
            for (var _53 = 0, _52 = $_.in.length - 1; _53 <= _52; _53 += 1) { //#28079
                var _57 = $get($_.alpha, $get($_.in, _53)); //#28076
                $k[$j++] = _57; //#28077
                $k[$j++] = _57; //#28077
                $k[$j++] = Infinity; //#28077
                var _58 = $k[--$j]; //#28077
                var _59 = $k[--$j]; //#28077
                $k[$j++] = _58; //#28077
                $forall(_59, function() { //#28077
                    var _5A = $k[--$j]; //#28077
                    $k[$j++] = $f(_5A - 48); //#28077
                }); //#28077
                $puti($_.out, $_.j, $a()); //#28077
                $_.j = $k[--$j].length + $_.j; //#28078
            } //#28078
            $k[$j++] = Infinity; //#28080
            $aload($_.cdf); //#28081
            $aload($geti($_.out, 0, $_.j)); //#28082
            $_.cdf = $a(); //#28082
            $_.gpf = $a([]); //#28084
            if ($_.ais.length > 1) { //#28085
                $_.mode = "numeric"; //#28085
            } //#28085
        } //#28085
        $_.ais = $geti($_.ais, 1, $_.ais.length - 1); //#28087
        $_.vals = $geti($_.vals, 1, $_.vals.length - 1); //#28088
        $_.fncs = $geti($_.fncs, 1, $_.fncs.length - 1); //#28089
        if ($_.ais.length != 0) { //#28101
            if ($eq($_.ais1, "21") || $eq($_.ais1, "8004")) { //#28100
                $k[$j++] = Infinity; //#28092
                $aload($_.gpf); //#28093
                $forall($_.vals1); //#28094
                $_.gpf = $a(); //#28094
                $_.ais = $geti($_.ais, 1, $_.ais.length - 1); //#28096
                $_.vals = $geti($_.vals, 1, $_.vals.length - 1); //#28097
                $_.fncs = $geti($_.fncs, 1, $_.fncs.length - 1); //#28098
                if ($_.ais.length != 0) { //#28099
                    $k[$j++] = Infinity; //#28099
                    $aload($_.gpf); //#28099
                    $k[$j++] = $_.fnc1; //#28099
                    $_.gpf = $a(); //#28099
                } //#28099
            } //#28099
        } //#28099
    } //#28099
    if ($eq($_.method, "0")) { //#28108
        $_.cdf = $a([0]); //#28105
        $_.gpf = $a([]); //#28106
        $_.mode = "numeric"; //#28107
    } //#28107
    for (var _5u = 0, _5t = $_.ais.length - 1; _5u <= _5t; _5u += 1) { //#28126
        $_.i = _5u; //#28112
        $_.ai = $get($_.ais, $_.i); //#28113
        $_.val = $get($_.vals, $_.i); //#28114
        var _64 = $a(($_.gpf.length + $_.ai.length) + $_.val.length); //#28115
        $puti(_64, 0, $_.gpf); //#28116
        $k[$j++] = _64; //#28117
        $k[$j++] = _64; //#28117
        $k[$j++] = $_.gpf.length; //#28117
        $k[$j++] = $_.ai; //#28117
        $k[$j++] = Infinity; //#28117
        var _68 = $k[--$j]; //#28117
        var _69 = $k[--$j]; //#28117
        $k[$j++] = _68; //#28117
        $forall(_69); //#28117
        var _6A = $a(); //#28117
        var _6B = $k[--$j]; //#28117
        $puti($k[--$j], _6B, _6A); //#28117
        var _6D = $k[--$j]; //#28118
        $k[$j++] = _6D; //#28118
        $k[$j++] = _6D; //#28118
        $k[$j++] = $_.gpf.length + $_.ai.length; //#28118
        $k[$j++] = $_.val; //#28118
        $k[$j++] = Infinity; //#28118
        var _6H = $k[--$j]; //#28118
        var _6I = $k[--$j]; //#28118
        $k[$j++] = _6H; //#28118
        $forall(_6I); //#28118
        var _6J = $a(); //#28118
        var _6K = $k[--$j]; //#28118
        $puti($k[--$j], _6K, _6J); //#28118
        $_.gpf = $k[--$j]; //#28119
        if (($_.i != ($_.ais.length - 1)) && $get($_.fncs, $_.i)) { //#28125
            var _6T = $a($_.gpf.length + 1); //#28121
            $puti(_6T, 0, $_.gpf); //#28122
            $put(_6T, $_.gpf.length, $_.fnc1); //#28123
            $_.gpf = _6T; //#28124
        } //#28124
    } //#28124
    if (!bwipp_gs1_cc.__28142__) { //#28142
        $_ = Object.create($_); //#28142
        var _6f = new Map([
            ["a", $a([$a([167, 138, 118, 108, 88, 78, 59]), $a([167, 138, 118, 98, 78]), $a([197, 167, 138, 108, 78])])],
            ["b", $a([$a([336, 296, 256, 208, 160, 104, 56]), $a([768, 648, 536, 416, 304, 208, 152, 112, 72, 32]), $a([1184, 1016, 840, 672, 496, 352, 264, 208, 152, 96, 56])])]
        ]); //#28139
        $_.bitcapsmaps = _6f; //#28141
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_gs1_cc.$ctx[id] = $_[id]); //#28141
        bwipp_gs1_cc.__28142__ = 1; //#28141
        $_ = Object.getPrototypeOf($_); //#28141
    } //#28141
    $_.rembits = function() {
        $_.used = $k[--$j]; //#28145
        if ($ne($_.ccversion, "c")) { //#28168
            $_.bitcaps = $get($get($_.bitcapsmaps, $_.ccversion), $f($_.cccolumns - 2)); //#28147
            $k[$j++] = -1; //#28148
            $forall($_.bitcaps, function() { //#28148
                var _6p = $k[--$j]; //#28148
                $k[$j++] = _6p; //#28148
                if ($ge(_6p, $_.used)) { //#28148
                    var _6r = $k[--$j]; //#28148
                    var _6s = $k[--$j]; //#28148
                    $k[$j++] = _6r; //#28148
                    $k[$j++] = _6s; //#28148
                } //#28148
                $j--; //#28148
            }); //#28148
            var _6t = $k[--$j]; //#28149
            $k[$j++] = _6t; //#28149
            if (_6t != -1) { //#28149
                var _6v = $k[--$j]; //#28149
                $k[$j++] = $f(_6v - $_.used); //#28149
            } //#28149
        } else { //#28168
            var _6w = new Map([
                ["c", -1]
            ]); //#28151
            var _6y = $get(_6w, $_.ccversion); //#28151
            var _70 = ~~Math.ceil($_.used / 8); //#28152
            $_.m = ((~~(_70 / 6)) * 5) + (_70 % 6); //#28152
            if ($_.m <= 40) { //#28153
                $k[$j++] = 8; //#28153
            } //#28153
            if (($_.m >= 41) && ($_.m <= 160)) { //#28154
                $k[$j++] = 16; //#28154
            } //#28154
            if (($_.m >= 161) && ($_.m <= 320)) { //#28155
                $k[$j++] = 32; //#28155
            } //#28155
            if (($_.m >= 321) && ($_.m <= 833)) { //#28156
                $k[$j++] = 64; //#28156
            } //#28156
            if ($_.m >= 834) { //#28157
                $k[$j++] = 32; //#28157
            } //#28157
            $_.eccws = $k[--$j]; //#28158
            $_.m = $f($f($_.m + $_.eccws) + 3); //#28159
            if ($_.cccolumns > 30) { //#28160
                $_.cccolumns = 30; //#28160
            } //#28160
            for (;;) { //#28164
                if (((~~Math.ceil($_.m / $_.cccolumns)) <= 30) || ($_.cccolumns >= 30)) { //#28162
                    break; //#28162
                } //#28162
                $_.cccolumns = $_.cccolumns + 1; //#28163
            } //#28163
            $_.r = ~~Math.ceil($_.m / $_.cccolumns); //#28165
            if ($_.r < 3) { //#28166
                $_.r = 3; //#28166
            } //#28166
            var _7N = $f(($f(($_.cccolumns * $_.r) - $_.eccws)) - 3); //#28167
            $_.tgt = ($f(((~~(_7N / 5)) * 6) + (_7N % 5))) * 8; //#28167
            if ($_.used <= 8304) { //#28168
                $k[$j++] = $f($_.tgt - $_.used); //#28168
            } else { //#28168
                $k[$j++] = -1; //#28168
            } //#28168
        } //#28168
        var _7R = $k[--$j]; //#28170
        $k[$j++] = _7R; //#28183
        if (_7R == -1) { //#28183
            $j--; //#28171
            if ($eq($_.ccversion, "a")) { //#28179
                $_.ccversion = "b"; //#28173
            } else { //#28179
                if ($eq($_.ccversion, "b") && $eq($_.lintype, "gs1-128")) { //#28179
                    $_.ccversion = "c"; //#28176
                    $_.cccolumns = ~~(($_.linwidth - 52) / 17); //#28177
                } else { //#28179
                    $_.ccversion = -1; //#28179
                } //#28179
            } //#28179
            $k[$j++] = $_.used; //#28182
            $_.rembits(); //#28182
        } //#28182
    }; //#28182
    $_.encode = function() {
        var _7X = $k[--$j]; //#28187
        $k[$j++] = _7X; //#28187
        if ($ne(_7X, 'raw')) { //#28187
            var _7Y = $k[--$j]; //#28187
            var _7a = $get(_7Y, $k[--$j]); //#28187
            $k[$j++] = _7a; //#28187
        } else { //#28187
            $j--; //#28187
        } //#28187
        $k[$j++] = Infinity; //#28188
        var _7b = $k[--$j]; //#28188
        var _7c = $k[--$j]; //#28188
        $k[$j++] = _7b; //#28188
        $forall(_7c, function() { //#28188
            var _7d = $k[--$j]; //#28188
            $k[$j++] = $f(_7d - 48); //#28188
        }); //#28188
        var _7e = $a(); //#28188
        $puti($_.gpfenc, $_.j, _7e); //#28190
        $_.j = _7e.length + $_.j; //#28191
    }; //#28191
    $k[$j++] = Infinity; //#28195
    for (var _7j = 0, _7k = $_.gpf.length; _7j < _7k; _7j++) { //#28195
        $k[$j++] = 0; //#28195
    } //#28195
    $k[$j++] = 0; //#28195
    $k[$j++] = -1; //#28195
    $_.numericruns = $a(); //#28195
    $k[$j++] = Infinity; //#28196
    for (var _7n = 0, _7o = $_.gpf.length; _7n < _7o; _7n++) { //#28196
        $k[$j++] = 0; //#28196
    } //#28196
    $k[$j++] = 0; //#28196
    $_.alphanumericruns = $a(); //#28196
    $k[$j++] = Infinity; //#28197
    for (var _7r = 0, _7s = $_.gpf.length; _7r < _7s; _7r++) { //#28197
        $k[$j++] = 0; //#28197
    } //#28197
    $k[$j++] = 9999; //#28197
    $_.nextiso646only = $a(); //#28197
    for (var _7v = $_.gpf.length - 1; _7v >= 0; _7v -= 1) { //#28219
        $_.i = _7v; //#28199
        var _80 = $strcpy($s(2), "00"); //#28201
        var _83 = $get($_.gpf, $_.i); //#28202
        $k[$j++] = $get($_.gpf, $_.i); //#28202
        $k[$j++] = _80; //#28202
        $k[$j++] = _80; //#28202
        $k[$j++] = 0; //#28202
        $k[$j++] = _83; //#28202
        if (_83 == $_.fnc1) { //#28202
            $j--; //#28202
            $k[$j++] = 94; //#28202
        } //#28202
        var _85 = $k[--$j]; //#28202
        var _86 = $k[--$j]; //#28202
        $put($k[--$j], _86, _85); //#28202
        if ($_.i < ($_.gpf.length - 1)) { //#28203
            var _8A = $k[--$j]; //#28203
            var _8D = $get($_.gpf, $_.i + 1); //#28203
            $k[$j++] = _8A; //#28203
            $k[$j++] = _8A; //#28203
            $k[$j++] = 1; //#28203
            $k[$j++] = _8D; //#28203
            if (_8D == $_.fnc1) { //#28203
                $j--; //#28203
                $k[$j++] = 94; //#28203
            } //#28203
            var _8F = $k[--$j]; //#28203
            var _8G = $k[--$j]; //#28203
            $put($k[--$j], _8G, _8F); //#28203
        } //#28203
        var _8K = $get($_.numeric, $k[--$j]) !== undefined; //#28204
        if (_8K) { //#28207
            $put($_.numericruns, $_.i, $f($get($_.numericruns, $_.i + 2) + 2)); //#28205
        } else { //#28207
            $put($_.numericruns, $_.i, 0); //#28207
        } //#28207
        var _8S = $k[--$j]; //#28209
        var _8U = $get($_.alphanumeric, _8S) !== undefined; //#28209
        $k[$j++] = _8S; //#28213
        if (_8U) { //#28212
            $put($_.alphanumericruns, $_.i, $f($get($_.alphanumericruns, $_.i + 1) + 1)); //#28210
        } else { //#28212
            $put($_.alphanumericruns, $_.i, 0); //#28212
        } //#28212
        var _8c = $k[--$j]; //#28214
        var _8e = $get($_.iso646, _8c) !== undefined; //#28214
        var _8g = $get($_.alphanumeric, _8c) !== undefined; //#28214
        if (_8e && (!_8g)) { //#28217
            $put($_.nextiso646only, $_.i, 0); //#28215
        } else { //#28217
            $put($_.nextiso646only, $_.i, $f($get($_.nextiso646only, $_.i + 1) + 1)); //#28217
        } //#28217
    } //#28217
    $_.gpfenc = $a(8304); //#28222
    $_.i = 0; //#28223
    $_.j = 0; //#28223
    for (;;) { //#28313
        if ($_.i == $_.gpf.length) { //#28225
            break; //#28225
        } //#28225
        for (;;) { //#28312
            if ($eq($_.mode, "numeric")) { //#28261
                if ($_.i <= ($_.gpf.length - 2)) { //#28258
                    var _8u = $s(2); //#28230
                    var _8x = $get($_.gpf, $_.i); //#28231
                    $k[$j++] = _8u; //#28231
                    $k[$j++] = _8u; //#28231
                    $k[$j++] = 0; //#28231
                    $k[$j++] = _8x; //#28231
                    if (_8x == $_.fnc1) { //#28231
                        $j--; //#28231
                        $k[$j++] = 94; //#28231
                    } //#28231
                    var _8z = $k[--$j]; //#28231
                    var _90 = $k[--$j]; //#28231
                    $put($k[--$j], _90, _8z); //#28231
                    var _92 = $k[--$j]; //#28232
                    var _95 = $get($_.gpf, $_.i + 1); //#28232
                    $k[$j++] = _92; //#28232
                    $k[$j++] = _92; //#28232
                    $k[$j++] = 1; //#28232
                    $k[$j++] = _95; //#28232
                    if (_95 == $_.fnc1) { //#28232
                        $j--; //#28232
                        $k[$j++] = 94; //#28232
                    } //#28232
                    var _97 = $k[--$j]; //#28232
                    var _98 = $k[--$j]; //#28232
                    $put($k[--$j], _98, _97); //#28232
                    var _9A = $k[--$j]; //#28233
                    var _9C = $get($_.numeric, _9A) !== undefined; //#28233
                    $k[$j++] = _9A; //#28237
                    if (_9C) { //#28237
                        $k[$j++] = $_.numeric; //#28234
                        $_.encode(); //#28234
                        $_.i = $_.i + 2; //#28235
                        break; //#28236
                    } //#28236
                    $j--; //#28238
                    $k[$j++] = $_.lalphanumeric; //#28239
                    $k[$j++] = $_.numeric; //#28239
                    $_.encode(); //#28239
                    $_.mode = "alphanumeric"; //#28240
                    break; //#28241
                } else { //#28258
                    var _9J = $get($_.gpf, $_.i); //#28243
                    if ((_9J < 48) || (_9J > 57)) { //#28247
                        $k[$j++] = $_.lalphanumeric; //#28244
                        $k[$j++] = $_.numeric; //#28244
                        $_.encode(); //#28244
                        $_.mode = "alphanumeric"; //#28245
                        break; //#28246
                    } //#28246
                    $k[$j++] = 'rem'; //#28248
                    $k[$j++] = $_.cdf.length + $_.j; //#28248
                    $_.rembits(); //#28248
                    var _9O = $k[--$j]; //#28248
                    $_[$k[--$j]] = _9O; //#28248
                    if (($_.rem >= 4) && ($_.rem <= 6)) { //#28258
                        var _9V = $geti($strcpy($s(6), "000000"), 0, $_.rem); //#28250
                        var _9a = $cvrs($s(4), $f($get($_.gpf, $_.i) - 47), 2); //#28251
                        $puti(_9V, 4 - _9a.length, _9a); //#28252
                        $k[$j++] = _9V; //#28252
                        $k[$j++] = 'raw'; //#28252
                        $_.encode(); //#28252
                        $_.i = $_.i + 1; //#28253
                        break; //#28254
                    } else { //#28258
                        var _9c = $s(2); //#28256
                        $put(_9c, 0, $get($_.gpf, $_.i)); //#28256
                        $put(_9c, 1, 94); //#28256
                        $k[$j++] = _9c; //#28256
                        $k[$j++] = $_.numeric; //#28256
                        $_.encode(); //#28256
                        $_.i = $_.i + 1; //#28257
                        break; //#28258
                    } //#28258
                } //#28258
            } //#28258
            if ($eq($_.mode, "alphanumeric")) { //#28288
                if ($get($_.gpf, $_.i) == $_.fnc1) { //#28269
                    $k[$j++] = $_.fnc1; //#28265
                    $k[$j++] = $_.alphanumeric; //#28265
                    $_.encode(); //#28265
                    $_.mode = "numeric"; //#28266
                    $_.i = $_.i + 1; //#28267
                    break; //#28268
                } //#28268
                var _9s = $get($_.gpf, $_.i); //#28270
                var _9u = $get($_.iso646, _9s) !== undefined; //#28270
                var _9w = $get($_.alphanumeric, _9s) !== undefined; //#28270
                if (_9u && (!_9w)) { //#28274
                    $k[$j++] = $_.liso646; //#28271
                    $k[$j++] = $_.alphanumeric; //#28271
                    $_.encode(); //#28271
                    $_.mode = "iso646"; //#28272
                    break; //#28273
                } //#28273
                if ($get($_.numericruns, $_.i) >= 6) { //#28279
                    $k[$j++] = $_.lnumeric; //#28276
                    $k[$j++] = $_.alphanumeric; //#28276
                    $_.encode(); //#28276
                    $_.mode = "numeric"; //#28277
                    break; //#28278
                } //#28278
                var _A6 = $get($_.numericruns, $_.i); //#28280
                if ((_A6 >= 4) && ($f(_A6 + $_.i) == $_.gpf.length)) { //#28284
                    $k[$j++] = $_.lnumeric; //#28281
                    $k[$j++] = $_.alphanumeric; //#28281
                    $_.encode(); //#28281
                    $_.mode = "numeric"; //#28282
                    break; //#28283
                } //#28283
                $k[$j++] = $get($_.gpf, $_.i); //#28285
                $k[$j++] = $_.alphanumeric; //#28285
                $_.encode(); //#28285
                $_.i = $_.i + 1; //#28286
                break; //#28287
            } //#28287
            if ($eq($_.mode, "iso646")) { //#28310
                if ($get($_.gpf, $_.i) == $_.fnc1) { //#28296
                    $k[$j++] = $_.fnc1; //#28292
                    $k[$j++] = $_.iso646; //#28292
                    $_.encode(); //#28292
                    $_.mode = "numeric"; //#28293
                    $_.i = $_.i + 1; //#28294
                    break; //#28295
                } //#28295
                if (($get($_.numericruns, $_.i) >= 4) && ($get($_.nextiso646only, $_.i) >= 10)) { //#28301
                    $k[$j++] = $_.lnumeric; //#28298
                    $k[$j++] = $_.iso646; //#28298
                    $_.encode(); //#28298
                    $_.mode = "numeric"; //#28299
                    break; //#28300
                } //#28300
                if (($get($_.alphanumericruns, $_.i) >= 5) && ($get($_.nextiso646only, $_.i) >= 10)) { //#28306
                    $k[$j++] = $_.lalphanumeric; //#28303
                    $k[$j++] = $_.iso646; //#28303
                    $_.encode(); //#28303
                    $_.mode = "alphanumeric"; //#28304
                    break; //#28305
                } //#28305
                $k[$j++] = $get($_.gpf, $_.i); //#28307
                $k[$j++] = $_.iso646; //#28307
                $_.encode(); //#28307
                $_.i = $_.i + 1; //#28308
                break; //#28309
            } //#28309
        } //#28309
    } //#28309
    $_.gpf = $geti($_.gpfenc, 0, $_.j); //#28314
    $k[$j++] = 'pad'; //#28317
    $k[$j++] = $_.cdf.length + $_.gpf.length; //#28317
    $_.rembits(); //#28317
    var _Ap = $a($k[--$j]); //#28317
    $_[$k[--$j]] = _Ap; //#28317
    if ($_.pad.length > 0) { //#28329
        for (var _Au = 0, _At = $_.pad.length - 1; _Au <= _At; _Au += 5) { //#28322
            $_.i = _Au; //#28320
            var _Av = $_.pad; //#28321
            var _Aw = $_.i; //#28321
            var _Ax = $a([0, 0, 1, 0, 0]); //#28321
            var _Ay = $_.pad; //#28321
            var _Az = $_.i; //#28321
            var _B0 = 5; //#28321
            var _B1 = _Ay.length - _Az; //#28321
            if ((_Ay.length - _Az) > 5) { //#28321
                var _ = _B0; //#28321
                _B0 = _B1; //#28321
                _B1 = _; //#28321
            } //#28321
            $puti(_Av, _Aw, $geti(_Ax, 0, _B1)); //#28321
        } //#28321
        if ($eq($_.mode, "numeric")) { //#28325
            $k[$j++] = Infinity; //#28324
            $k[$j++] = 0; //#28324
            $k[$j++] = 0; //#28324
            $k[$j++] = 0; //#28324
            $k[$j++] = 0; //#28324
            $aload($_.pad); //#28324
            $_.pad = $geti($a(), 0, $_.pad.length); //#28324
        } //#28324
        if ($eq($_.mode, "alpha")) { //#28328
            $k[$j++] = Infinity; //#28327
            $k[$j++] = 1; //#28327
            $k[$j++] = 1; //#28327
            $k[$j++] = 1; //#28327
            $k[$j++] = 1; //#28327
            $k[$j++] = 1; //#28327
            $k[$j++] = 0; //#28327
            $k[$j++] = 0; //#28327
            $k[$j++] = 0; //#28327
            $k[$j++] = 0; //#28327
            $aload($_.pad); //#28327
            $_.pad = $geti($a(), 0, $_.pad.length); //#28327
        } //#28327
    } //#28327
    $k[$j++] = Infinity; //#28332
    $aload($_.cdf); //#28333
    $aload($_.gpf); //#28334
    $aload($_.pad); //#28335
    $_.bits = $a(); //#28335
    if (!bwipp_gs1_cc.__28353__) { //#28353
        $_ = Object.create($_); //#28353
        $k[$j++] = Infinity; //#28339
        $k[$j++] = $a([0, 0, 0, 0, 0, 0, 1]); //#28341
        for (var _BI = 0, _BJ = 68; _BI < _BJ; _BI++) { //#28341
            $k[$j++] = $a(7); //#28341
        } //#28341
        $_.pwr928 = $a(); //#28341
        for (var _BM = 1; _BM <= 68; _BM += 1) { //#28352
            $_.j = _BM; //#28344
            $_.v = 0; //#28345
            for (var _BN = 6; _BN >= 1; _BN -= 1) { //#28350
                $_.i = _BN; //#28347
                $_.v = $f(($get($get($_.pwr928, $_.j - 1), $_.i) * 2) + (~~($_.v / 928))); //#28348
                $put($get($_.pwr928, $_.j), $_.i, $_.v % 928); //#28349
            } //#28349
            $put($get($_.pwr928, $_.j), 0, $f(($get($get($_.pwr928, $_.j - 1), 0) * 2) + (~~($_.v / 928)))); //#28351
        } //#28351
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_gs1_cc.$ctx[id] = $_[id]); //#28351
        bwipp_gs1_cc.__28353__ = 1; //#28351
        $_ = Object.getPrototypeOf($_); //#28351
    } //#28351
    if ($_.ccversion == "a") { //#28395
        $k[$j++] = Infinity; //#28356
        for (var _Bj = 0, _Bk = 28; _Bj < _Bk; _Bj++) { //#28356
            $k[$j++] = 0; //#28356
        } //#28356
        $_.cws = $a(); //#28356
        $_.b = 0; //#28357
        $_.c = 0; //#28357
        for (;;) { //#28381
            if ($_.b == $_.bits.length) { //#28359
                break; //#28359
            } //#28359
            var _Bo = $_.bits; //#28360
            var _Bp = $_.b; //#28360
            var _Bq = $_.bits; //#28360
            var _Br = $_.b; //#28360
            var _Bs = _Bq.length - _Br; //#28360
            var _Bt = 69; //#28360
            if (69 > (_Bq.length - _Br)) { //#28360
                var _ = _Bs; //#28360
                _Bs = _Bt; //#28360
                _Bt = _; //#28360
            } //#28360
            $_.bs = $geti(_Bo, _Bp, _Bt); //#28360
            $_.bsl = $_.bs.length; //#28361
            $_.cs = $geti($_.cws, $_.c, (~~($_.bsl / 10)) + 1); //#28362
            $_.csl = $_.cs.length; //#28363
            for (var _C3 = 0, _C2 = $_.bsl - 1; _C3 <= _C2; _C3 += 1) { //#28373
                $_.i = _C3; //#28365
                for (var _C6 = 0, _C5 = $_.csl - 1; _C6 <= _C5; _C6 += 1) { //#28372
                    $_.j = _C6; //#28367
                    var _C7 = $_.cs; //#28368
                    var _C8 = $_.j; //#28368
                    $put(_C7, _C8, $f($get(_C7, _C8) + ($get($get($_.pwr928, $_.i), ($_.j + 7) - $_.csl) * $get($_.bs, ($_.bsl - $_.i) - 1)))); //#28371
                } //#28371
            } //#28371
            for (var _CL = $_.csl - 1; _CL >= 1; _CL -= 1) { //#28378
                $_.i = _CL; //#28375
                var _CM = $_.cs; //#28376
                var _CN = $_.i; //#28376
                $put(_CM, _CN - 1, $f($get(_CM, _CN - 1) + (~~($get($_.cs, $_.i) / 928)))); //#28376
                var _CS = $_.cs; //#28377
                var _CT = $_.i; //#28377
                $put(_CS, _CT, $get(_CS, _CT) % 928); //#28377
            } //#28377
            $_.b = $_.b + $_.bsl; //#28379
            $_.c = $_.c + $_.csl; //#28380
        } //#28380
        $_.cws = $geti($_.cws, 0, $_.c); //#28382
        $_.barcode = $s($_.cws.length * 4); //#28383
        for (var _Cg = 0, _Cf = $_.cws.length - 1; _Cg <= _Cf; _Cg += 1) { //#28389
            $_.i = _Cg; //#28385
            var _Ci = $strcpy($s(4), "^000"); //#28386
            var _Cn = $cvrs($s(4), $get($_.cws, $_.i), 10); //#28386
            $puti(_Ci, 4 - _Cn.length, _Cn); //#28387
            $puti($_.barcode, $_.i * 4, _Ci); //#28388
        } //#28388
        delete $_.options["parse"]; //#28390
        $put($_.options, "dontdraw", true); //#28391
        $put($_.options, "cca", true); //#28392
        $put($_.options, "columns", $_.cccolumns); //#28393
        $k[$j++] = 'args'; //#28394
        $k[$j++] = $_.barcode; //#28394
        $k[$j++] = $_.options; //#28394
        bwipp_micropdf417(); //#28394
        var _Cx = $k[--$j]; //#28394
        $_[$k[--$j]] = _Cx; //#28394
    } //#28394
    if ($_.ccversion == "b") { //#28409
        $_.barcode = $s(~~($_.bits.length / 8)); //#28398
        for (var _D4 = 0, _D3 = $_.barcode.length - 1; _D4 <= _D3; _D4 += 1) { //#28403
            $_.i = _D4; //#28400
            var _D7 = $geti($_.bits, $_.i * 8, 8); //#28401
            $k[$j++] = 0; //#28401
            for (var _D8 = 0, _D9 = _D7.length; _D8 < _D9; _D8++) { //#28401
                var _DB = $k[--$j]; //#28401
                $k[$j++] = $f(_DB + $get(_D7, _D8)) * 2; //#28401
            } //#28401
            $put($_.barcode, $_.i, ~~($k[--$j] / 2)); //#28402
        } //#28402
        delete $_.options["parse"]; //#28404
        $put($_.options, "dontdraw", true); //#28405
        $put($_.options, "ccb", true); //#28406
        $put($_.options, "columns", $_.cccolumns); //#28407
        $k[$j++] = 'args'; //#28408
        $k[$j++] = $_.barcode; //#28408
        $k[$j++] = $_.options; //#28408
        bwipp_micropdf417(); //#28408
        var _DM = $k[--$j]; //#28408
        $_[$k[--$j]] = _DM; //#28408
    } //#28408
    if ($_.ccversion == "c") { //#28424
        $_.barcode = $s(~~($_.bits.length / 8)); //#28412
        for (var _DT = 0, _DS = $_.barcode.length - 1; _DT <= _DS; _DT += 1) { //#28417
            $_.i = _DT; //#28414
            var _DW = $geti($_.bits, $_.i * 8, 8); //#28415
            $k[$j++] = 0; //#28415
            for (var _DX = 0, _DY = _DW.length; _DX < _DY; _DX++) { //#28415
                var _Da = $k[--$j]; //#28415
                $k[$j++] = $f(_Da + $get(_DW, _DX)) * 2; //#28415
            } //#28415
            $put($_.barcode, $_.i, ~~($k[--$j] / 2)); //#28416
        } //#28416
        delete $_.options["parse"]; //#28418
        $put($_.options, "dontdraw", true); //#28419
        $put($_.options, "ccc", true); //#28420
        $put($_.options, "columns", $_.cccolumns); //#28421
        $put($_.options, "eclevel", (~~(Math.log($_.eccws) / Math.log(2))) - 1); //#28422
        $k[$j++] = 'args'; //#28423
        $k[$j++] = $_.barcode; //#28423
        $k[$j++] = $_.options; //#28423
        bwipp_pdf417(); //#28423
        var _Dn = $k[--$j]; //#28423
        $_[$k[--$j]] = _Dn; //#28423
    } //#28423
    $k[$j++] = $_.args; //#28427
    if (!$_.dontdraw) { //#28427
        bwipp_renmatrix(); //#28427
    } //#28427
    $_ = Object.getPrototypeOf($_); //#28429
    $_ = Object.getPrototypeOf($_); //#28431
} //bwipp_gs1_cc
function bwipp_ean13composite() {
    $_ = Object.create($_); //#28463
    $_.dontdraw = false; //#28466
    $_.usematrix = false; //#28467
    $_.parse = false; //#28468
    $_.dontlint = false; //#28469
    $_.lintreqs = true; //#28470
    $k[$j++] = $_; //#28472
    bwipp_processoptions(); //#28472
    $_.options = $k[--$j]; //#28472
    $_.barcode = $k[--$j]; //#28473
    if ($_.dontdraw) { //#28475
        $_.usematrix = true; //#28475
    } //#28475
    $search($_.barcode, "|"); //#28478
    if ($k[--$j]) { //#28483
        $_.linear = $k[--$j]; //#28479
        $j--; //#28480
        $_.comp = $k[--$j]; //#28481
    } else { //#28483
        $j--; //#28483
        $k[$j++] = 'bwipp.missingCompositeComponent#28483'; //#28483
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#28483
        bwipp_raiseerror(); //#28483
    } //#28483
    $put($_.options, "lintype", "ean13"); //#28486
    $put($_.options, "inkspreadv", 0); //#28487
    $put($_.options, "dontdraw", true); //#28488
    $put($_.options, "dontlint", true); //#28489
    var _C = $s($_.comp.length + 18); //#28492
    $puti(_C, 0, "(01)00000000000000"); //#28493
    $puti(_C, 18, $_.comp); //#28494
    $k[$j++] = _C; //#28495
    $k[$j++] = 'ai'; //#28495
    bwipp_gs1process(); //#28495
    $j -= 3; //#28495
    $k[$j++] = $_.linear; //#28498
    $k[$j++] = $_.options; //#28498
    bwipp_ean13(); //#28498
    if (!$_.usematrix) { //#28588
        $$.save(); //#28500
        bwipp_renlinear(); //#28502
        $$.rmoveto(-1, 72); //#28505
        $k[$j++] = Infinity; //#28505
        $k[$j++] = Infinity; //#28507
        $k[$j++] = 0; //#28508
        $k[$j++] = 1; //#28508
        for (var _H = 0, _I = 93; _H < _I; _H++) { //#28508
            $k[$j++] = 0; //#28508
        } //#28508
        $k[$j++] = 1; //#28509
        $k[$j++] = 0; //#28509
        $k[$j++] = 1; //#28509
        $k[$j++] = 0; //#28509
        for (var _J = 0, _K = 93; _J < _K; _J++) { //#28509
            $k[$j++] = 0; //#28509
        } //#28509
        $k[$j++] = 0; //#28510
        $k[$j++] = 1; //#28510
        $k[$j++] = 0; //#28510
        $k[$j++] = 1; //#28510
        for (var _L = 0, _M = 93; _L < _M; _L++) { //#28510
            $k[$j++] = 0; //#28510
        } //#28510
        $k[$j++] = 1; //#28510
        $k[$j++] = 0; //#28510
        var _N = $a(); //#28510
        $k[$j++] = 'ren'; //#28516
        $k[$j++] = 'renmatrix'; //#28516
        $k[$j++] = 'pixs'; //#28516
        $k[$j++] = _N; //#28516
        $k[$j++] = 'pixx'; //#28516
        $k[$j++] = 97; //#28516
        $k[$j++] = 'pixy'; //#28516
        $k[$j++] = 3; //#28516
        $k[$j++] = 'height'; //#28516
        $k[$j++] = 6 / 72; //#28516
        $k[$j++] = 'width'; //#28516
        $k[$j++] = 97 / 72; //#28516
        $k[$j++] = 'opt'; //#28516
        $k[$j++] = $_.options; //#28516
        var _P = $d(); //#28516
        $k[$j++] = _P; //#28517
        bwipp_renmatrix(); //#28517
        $$.rmoveto(-2, 6); //#28520
        $k[$j++] = $_.comp; //#28520
        $k[$j++] = $_.options; //#28520
        bwipp_gs1_cc(); //#28520
        bwipp_renmatrix(); //#28520
        $$.restore(); //#28522
    } else { //#28588
        $_.linsym = $k[--$j]; //#28524
        $_.sbs = $get($_.linsym, 'sbs'); //#28525
        $_.bhs = $get($_.linsym, 'bhs'); //#28526
        $_.bbs = $get($_.linsym, 'bbs'); //#28527
        $k[$j++] = 'linwidth'; //#28528
        $k[$j++] = 0; //#28528
        $forall($_.sbs, function() { //#28528
            var _a = $k[--$j]; //#28528
            var _b = $k[--$j]; //#28528
            $k[$j++] = $f(_b + $cvi(_a)); //#28528
        }); //#28528
        var _c = $k[--$j]; //#28528
        $_[$k[--$j]] = _c; //#28528
        $k[$j++] = 'compsym'; //#28530
        $k[$j++] = $_.comp; //#28530
        $k[$j++] = $_.options; //#28530
        bwipp_gs1_cc(); //#28530
        var _g = $k[--$j]; //#28530
        $_[$k[--$j]] = _g; //#28530
        $_.ccpixs = $get($_.compsym, 'pixs'); //#28531
        $_.ccpixx = $get($_.compsym, 'pixx'); //#28532
        $k[$j++] = Infinity; //#28534
        for (var _n = 0, _o = $f($_.ccpixx - 97); _n < _o; _n++) { //#28534
            $k[$j++] = 0; //#28534
        } //#28534
        $_.linpad = $a(); //#28534
        $_.diff = $f(($f($f($_.linwidth + $_.linpad.length) + 1)) - $_.ccpixx); //#28536
        if ($_.diff > 0) { //#28542
            $k[$j++] = Infinity; //#28538
            for (var _v = 0, _w = $_.diff; _v < _w; _v++) { //#28538
                $k[$j++] = 0; //#28538
            } //#28538
            $_.ccrpad = $a(); //#28538
            $_.pixx = $f($_.ccpixx + $_.diff); //#28539
        } else { //#28542
            $_.ccrpad = $a(0); //#28541
            $_.pixx = $_.ccpixx; //#28542
        } //#28542
        $k[$j++] = Infinity; //#28545
        for (var _15 = 0, _16 = $_.ccpixx, _14 = $_.ccpixs.length - 1; _16 < 0 ? _15 >= _14 : _15 <= _14; _15 += _16) { //#28549
            $_.i = _15; //#28547
            $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#28548
            $aload($_.ccrpad); //#28548
        } //#28548
        for (var _1C = 0, _1D = 2; _1C < _1D; _1C++) { //#28550
            $aload($_.linpad); //#28550
            $k[$j++] = 0; //#28550
            $k[$j++] = 1; //#28550
            for (var _1F = 0, _1G = 93; _1F < _1G; _1F++) { //#28550
                $k[$j++] = 0; //#28550
            } //#28550
            $k[$j++] = 1; //#28550
            $k[$j++] = 0; //#28550
            $aload($_.ccrpad); //#28550
        } //#28550
        for (var _1I = 0, _1J = 2; _1I < _1J; _1I++) { //#28551
            $aload($_.linpad); //#28551
            $k[$j++] = 1; //#28551
            $k[$j++] = 0; //#28551
            for (var _1L = 0, _1M = 93; _1L < _1M; _1L++) { //#28551
                $k[$j++] = 0; //#28551
            } //#28551
            $k[$j++] = 0; //#28551
            $k[$j++] = 1; //#28551
            $aload($_.ccrpad); //#28551
        } //#28551
        for (var _1O = 0, _1P = 2; _1O < _1P; _1O++) { //#28552
            $aload($_.linpad); //#28552
            $k[$j++] = 0; //#28552
            $k[$j++] = 1; //#28552
            for (var _1R = 0, _1S = 93; _1R < _1S; _1R++) { //#28552
                $k[$j++] = 0; //#28552
            } //#28552
            $k[$j++] = 1; //#28552
            $k[$j++] = 0; //#28552
            $aload($_.ccrpad); //#28552
        } //#28552
        for (var _1U = 71; _1U >= 0; _1U -= 1) { //#28571
            $_.y = _1U; //#28554
            $aload($_.linpad); //#28555
            $k[$j++] = 0; //#28569
            for (var _1Y = 0, _1X = $_.sbs.length - 1; _1Y <= _1X; _1Y += 1) { //#28569
                $_.i = _1Y; //#28558
                if (($_.i % 2) == 0) { //#28567
                    var _1d = $get($_.bbs, ~~($_.i / 2)) * 72; //#28561
                    if ((_1d > $_.y) || (($f(_1d + ($get($_.bhs, ~~($_.i / 2)) * 72))) < $_.y)) { //#28564
                        for (var _1m = 0, _1n = $cvi($get($_.sbs, $_.i)); _1m < _1n; _1m++) { //#28562
                            $k[$j++] = 0; //#28562
                        } //#28562
                    } else { //#28564
                        for (var _1r = 0, _1s = $cvi($get($_.sbs, $_.i)); _1r < _1s; _1r++) { //#28564
                            $k[$j++] = 1; //#28564
                        } //#28564
                    } //#28564
                } else { //#28567
                    for (var _1w = 0, _1x = $cvi($get($_.sbs, $_.i)); _1w < _1x; _1w++) { //#28567
                        $k[$j++] = 0; //#28567
                    } //#28567
                } //#28567
            } //#28567
            if ($_.diff < 0) { //#28570
                $k[$j++] = 0; //#28570
            } //#28570
        } //#28570
        $_.pixs = $a(); //#28570
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#28574
        var _28 = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#28582
        $k[$j++] = _28; //#28589
        if (!$_.dontdraw) { //#28589
            $$.save(); //#28586
            bwipp_renmatrix(); //#28587
            $$.restore(); //#28588
        } //#28588
    } //#28588
    $_ = Object.getPrototypeOf($_); //#28592
} //bwipp_ean13composite
function bwipp_ean8composite() {
    $_ = Object.create($_); //#28624
    $_.dontdraw = false; //#28627
    $_.usematrix = false; //#28628
    $_.parse = false; //#28629
    $_.dontlint = false; //#28630
    $_.lintreqs = true; //#28631
    $k[$j++] = $_; //#28633
    bwipp_processoptions(); //#28633
    $_.options = $k[--$j]; //#28633
    $_.barcode = $k[--$j]; //#28634
    if ($_.dontdraw) { //#28636
        $_.usematrix = true; //#28636
    } //#28636
    $search($_.barcode, "|"); //#28639
    if ($k[--$j]) { //#28644
        $_.linear = $k[--$j]; //#28640
        $j--; //#28641
        $_.comp = $k[--$j]; //#28642
    } else { //#28644
        $j--; //#28644
        $k[$j++] = 'bwipp.missingCompositeComponent#28644'; //#28644
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#28644
        bwipp_raiseerror(); //#28644
    } //#28644
    $put($_.options, "lintype", "ean8"); //#28648
    $put($_.options, "inkspreadv", 0); //#28649
    $put($_.options, "dontdraw", true); //#28650
    $put($_.options, "dontlint", true); //#28651
    var _C = $s($_.comp.length + 18); //#28654
    $puti(_C, 0, "(01)00000000000000"); //#28655
    $puti(_C, 18, $_.comp); //#28656
    $k[$j++] = _C; //#28657
    $k[$j++] = 'ai'; //#28657
    bwipp_gs1process(); //#28657
    $j -= 3; //#28657
    $k[$j++] = $_.linear; //#28660
    $k[$j++] = $_.options; //#28660
    bwipp_ean8(); //#28660
    if (!$_.usematrix) { //#28752
        $$.save(); //#28662
        bwipp_renlinear(); //#28664
        $$.rmoveto(-1, 72); //#28667
        $k[$j++] = Infinity; //#28667
        $k[$j++] = Infinity; //#28669
        $k[$j++] = 0; //#28670
        $k[$j++] = 1; //#28670
        for (var _H = 0, _I = 65; _H < _I; _H++) { //#28670
            $k[$j++] = 0; //#28670
        } //#28670
        $k[$j++] = 1; //#28671
        $k[$j++] = 0; //#28671
        $k[$j++] = 1; //#28671
        $k[$j++] = 0; //#28671
        for (var _J = 0, _K = 65; _J < _K; _J++) { //#28671
            $k[$j++] = 0; //#28671
        } //#28671
        $k[$j++] = 0; //#28672
        $k[$j++] = 1; //#28672
        $k[$j++] = 0; //#28672
        $k[$j++] = 1; //#28672
        for (var _L = 0, _M = 65; _L < _M; _L++) { //#28672
            $k[$j++] = 0; //#28672
        } //#28672
        $k[$j++] = 1; //#28672
        $k[$j++] = 0; //#28672
        var _N = $a(); //#28672
        $k[$j++] = 'ren'; //#28678
        $k[$j++] = 'renmatrix'; //#28678
        $k[$j++] = 'pixs'; //#28678
        $k[$j++] = _N; //#28678
        $k[$j++] = 'pixx'; //#28678
        $k[$j++] = 69; //#28678
        $k[$j++] = 'pixy'; //#28678
        $k[$j++] = 3; //#28678
        $k[$j++] = 'height'; //#28678
        $k[$j++] = 6 / 72; //#28678
        $k[$j++] = 'width'; //#28678
        $k[$j++] = 69 / 72; //#28678
        $k[$j++] = 'opt'; //#28678
        $k[$j++] = $_.options; //#28678
        var _P = $d(); //#28678
        $k[$j++] = _P; //#28679
        bwipp_renmatrix(); //#28679
        $k[$j++] = $_.comp; //#28682
        $k[$j++] = $_.options; //#28682
        bwipp_gs1_cc(); //#28682
        var _S = $k[--$j]; //#28683
        $$.rmoveto($f(69 - $get(_S, "pixx")), 6); //#28683
        $k[$j++] = _S; //#28684
        bwipp_renmatrix(); //#28684
        $$.restore(); //#28686
    } else { //#28752
        $_.linsym = $k[--$j]; //#28688
        $_.sbs = $get($_.linsym, 'sbs'); //#28689
        $_.bhs = $get($_.linsym, 'bhs'); //#28690
        $_.bbs = $get($_.linsym, 'bbs'); //#28691
        $k[$j++] = 'linwidth'; //#28692
        $k[$j++] = 0; //#28692
        $forall($_.sbs, function() { //#28692
            var _c = $k[--$j]; //#28692
            var _d = $k[--$j]; //#28692
            $k[$j++] = $f(_d + $cvi(_c)); //#28692
        }); //#28692
        var _e = $k[--$j]; //#28692
        $_[$k[--$j]] = _e; //#28692
        var _g = $_.comp; //#28694
        $k[$j++] = 'compsym'; //#28694
        $k[$j++] = _g; //#28694
        $k[$j++] = $_.options; //#28694
        bwipp_gs1_cc(); //#28694
        var _i = $k[--$j]; //#28694
        $_[$k[--$j]] = _i; //#28694
        $_.ccpixs = $get($_.compsym, 'pixs'); //#28695
        $_.ccpixx = $get($_.compsym, 'pixx'); //#28696
        $k[$j++] = Infinity; //#28698
        for (var _p = 0, _q = $f($_.ccpixx - 69); _p < _q; _p++) { //#28698
            $k[$j++] = 0; //#28698
        } //#28698
        $_.linpad = $a(); //#28698
        $_.diff = $f(($f($f($_.linwidth + $_.linpad.length) + 1)) - $_.ccpixx); //#28700
        if ($_.diff > 0) { //#28706
            $k[$j++] = Infinity; //#28702
            for (var _x = 0, _y = $_.diff; _x < _y; _x++) { //#28702
                $k[$j++] = 0; //#28702
            } //#28702
            $_.ccrpad = $a(); //#28702
            $_.pixx = $f($_.ccpixx + $_.diff); //#28703
        } else { //#28706
            $_.ccrpad = $a(0); //#28705
            $_.pixx = $_.ccpixx; //#28706
        } //#28706
        $k[$j++] = Infinity; //#28709
        for (var _17 = 0, _18 = $_.ccpixx, _16 = $_.ccpixs.length - 1; _18 < 0 ? _17 >= _16 : _17 <= _16; _17 += _18) { //#28713
            $_.i = _17; //#28711
            $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#28712
            $aload($_.ccrpad); //#28712
        } //#28712
        for (var _1E = 0, _1F = 2; _1E < _1F; _1E++) { //#28714
            $aload($_.linpad); //#28714
            $k[$j++] = 0; //#28714
            $k[$j++] = 1; //#28714
            for (var _1H = 0, _1I = 65; _1H < _1I; _1H++) { //#28714
                $k[$j++] = 0; //#28714
            } //#28714
            $k[$j++] = 1; //#28714
            $k[$j++] = 0; //#28714
            $aload($_.ccrpad); //#28714
        } //#28714
        for (var _1K = 0, _1L = 2; _1K < _1L; _1K++) { //#28715
            $aload($_.linpad); //#28715
            $k[$j++] = 1; //#28715
            $k[$j++] = 0; //#28715
            for (var _1N = 0, _1O = 65; _1N < _1O; _1N++) { //#28715
                $k[$j++] = 0; //#28715
            } //#28715
            $k[$j++] = 0; //#28715
            $k[$j++] = 1; //#28715
            $aload($_.ccrpad); //#28715
        } //#28715
        for (var _1Q = 0, _1R = 2; _1Q < _1R; _1Q++) { //#28716
            $aload($_.linpad); //#28716
            $k[$j++] = 0; //#28716
            $k[$j++] = 1; //#28716
            for (var _1T = 0, _1U = 65; _1T < _1U; _1T++) { //#28716
                $k[$j++] = 0; //#28716
            } //#28716
            $k[$j++] = 1; //#28716
            $k[$j++] = 0; //#28716
            $aload($_.ccrpad); //#28716
        } //#28716
        for (var _1W = 71; _1W >= 0; _1W -= 1) { //#28735
            $_.y = _1W; //#28718
            $aload($_.linpad); //#28719
            $k[$j++] = 0; //#28733
            for (var _1a = 0, _1Z = $_.sbs.length - 1; _1a <= _1Z; _1a += 1) { //#28733
                $_.i = _1a; //#28722
                if (($_.i % 2) == 0) { //#28731
                    var _1f = $get($_.bbs, ~~($_.i / 2)) * 72; //#28725
                    if ((_1f > $_.y) || (($f(_1f + ($get($_.bhs, ~~($_.i / 2)) * 72))) < $_.y)) { //#28728
                        for (var _1o = 0, _1p = $cvi($get($_.sbs, $_.i)); _1o < _1p; _1o++) { //#28726
                            $k[$j++] = 0; //#28726
                        } //#28726
                    } else { //#28728
                        for (var _1t = 0, _1u = $cvi($get($_.sbs, $_.i)); _1t < _1u; _1t++) { //#28728
                            $k[$j++] = 1; //#28728
                        } //#28728
                    } //#28728
                } else { //#28731
                    for (var _1y = 0, _1z = $cvi($get($_.sbs, $_.i)); _1y < _1z; _1y++) { //#28731
                        $k[$j++] = 0; //#28731
                    } //#28731
                } //#28731
            } //#28731
            if ($_.diff < 0) { //#28734
                $k[$j++] = 0; //#28734
            } //#28734
        } //#28734
        $_.pixs = $a(); //#28734
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#28738
        var _2A = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#28746
        $k[$j++] = _2A; //#28753
        if (!$_.dontdraw) { //#28753
            $$.save(); //#28750
            bwipp_renmatrix(); //#28751
            $$.restore(); //#28752
        } //#28752
    } //#28752
    $_ = Object.getPrototypeOf($_); //#28756
} //bwipp_ean8composite
function bwipp_upcacomposite() {
    $_ = Object.create($_); //#28788
    $_.dontdraw = false; //#28791
    $_.usematrix = false; //#28792
    $_.parse = false; //#28793
    $_.dontlint = false; //#28794
    $_.lintreqs = true; //#28795
    $k[$j++] = $_; //#28797
    bwipp_processoptions(); //#28797
    $_.options = $k[--$j]; //#28797
    $_.barcode = $k[--$j]; //#28798
    if ($_.dontdraw) { //#28800
        $_.usematrix = true; //#28800
    } //#28800
    $search($_.barcode, "|"); //#28803
    if ($k[--$j]) { //#28808
        $_.linear = $k[--$j]; //#28804
        $j--; //#28805
        $_.comp = $k[--$j]; //#28806
    } else { //#28808
        $j--; //#28808
        $k[$j++] = 'bwipp.missingCompositeComponent#28808'; //#28808
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#28808
        bwipp_raiseerror(); //#28808
    } //#28808
    $put($_.options, "lintype", "ean13"); //#28811
    $put($_.options, "inkspreadv", 0); //#28812
    $put($_.options, "dontdraw", true); //#28813
    $put($_.options, "dontlint", true); //#28814
    var _C = $s($_.comp.length + 18); //#28817
    $puti(_C, 0, "(01)00000000000000"); //#28818
    $puti(_C, 18, $_.comp); //#28819
    $k[$j++] = _C; //#28820
    $k[$j++] = 'ai'; //#28820
    bwipp_gs1process(); //#28820
    $j -= 3; //#28820
    $k[$j++] = $_.linear; //#28823
    $k[$j++] = $_.options; //#28823
    bwipp_upca(); //#28823
    if (!$_.usematrix) { //#28913
        $$.save(); //#28825
        bwipp_renlinear(); //#28827
        $$.rmoveto(-1, 72); //#28830
        $k[$j++] = Infinity; //#28830
        $k[$j++] = Infinity; //#28832
        $k[$j++] = 0; //#28833
        $k[$j++] = 1; //#28833
        for (var _H = 0, _I = 93; _H < _I; _H++) { //#28833
            $k[$j++] = 0; //#28833
        } //#28833
        $k[$j++] = 1; //#28834
        $k[$j++] = 0; //#28834
        $k[$j++] = 1; //#28834
        $k[$j++] = 0; //#28834
        for (var _J = 0, _K = 93; _J < _K; _J++) { //#28834
            $k[$j++] = 0; //#28834
        } //#28834
        $k[$j++] = 0; //#28835
        $k[$j++] = 1; //#28835
        $k[$j++] = 0; //#28835
        $k[$j++] = 1; //#28835
        for (var _L = 0, _M = 93; _L < _M; _L++) { //#28835
            $k[$j++] = 0; //#28835
        } //#28835
        $k[$j++] = 1; //#28835
        $k[$j++] = 0; //#28835
        var _N = $a(); //#28835
        $k[$j++] = 'ren'; //#28841
        $k[$j++] = 'renmatrix'; //#28841
        $k[$j++] = 'pixs'; //#28841
        $k[$j++] = _N; //#28841
        $k[$j++] = 'pixx'; //#28841
        $k[$j++] = 97; //#28841
        $k[$j++] = 'pixy'; //#28841
        $k[$j++] = 3; //#28841
        $k[$j++] = 'height'; //#28841
        $k[$j++] = 6 / 72; //#28841
        $k[$j++] = 'width'; //#28841
        $k[$j++] = 97 / 72; //#28841
        $k[$j++] = 'opt'; //#28841
        $k[$j++] = $_.options; //#28841
        var _P = $d(); //#28841
        $k[$j++] = _P; //#28842
        bwipp_renmatrix(); //#28842
        $$.rmoveto(-2, 6); //#28845
        $k[$j++] = $_.comp; //#28845
        $k[$j++] = $_.options; //#28845
        bwipp_gs1_cc(); //#28845
        bwipp_renmatrix(); //#28845
        $$.restore(); //#28847
    } else { //#28913
        $_.linsym = $k[--$j]; //#28849
        $_.sbs = $get($_.linsym, 'sbs'); //#28850
        $_.bhs = $get($_.linsym, 'bhs'); //#28851
        $_.bbs = $get($_.linsym, 'bbs'); //#28852
        $k[$j++] = 'linwidth'; //#28853
        $k[$j++] = 0; //#28853
        $forall($_.sbs, function() { //#28853
            var _a = $k[--$j]; //#28853
            var _b = $k[--$j]; //#28853
            $k[$j++] = $f(_b + $cvi(_a)); //#28853
        }); //#28853
        var _c = $k[--$j]; //#28853
        $_[$k[--$j]] = _c; //#28853
        $k[$j++] = 'compsym'; //#28855
        $k[$j++] = $_.comp; //#28855
        $k[$j++] = $_.options; //#28855
        bwipp_gs1_cc(); //#28855
        var _g = $k[--$j]; //#28855
        $_[$k[--$j]] = _g; //#28855
        $_.ccpixs = $get($_.compsym, 'pixs'); //#28856
        $_.ccpixx = $get($_.compsym, 'pixx'); //#28857
        $k[$j++] = Infinity; //#28859
        for (var _n = 0, _o = $f($_.ccpixx - 97); _n < _o; _n++) { //#28859
            $k[$j++] = 0; //#28859
        } //#28859
        $_.linpad = $a(); //#28859
        $_.diff = $f(($f($f($_.linwidth + $_.linpad.length) + 1)) - $_.ccpixx); //#28861
        if ($_.diff > 0) { //#28867
            $k[$j++] = Infinity; //#28863
            for (var _v = 0, _w = $_.diff; _v < _w; _v++) { //#28863
                $k[$j++] = 0; //#28863
            } //#28863
            $_.ccrpad = $a(); //#28863
            $_.pixx = $f($_.ccpixx + $_.diff); //#28864
        } else { //#28867
            $_.ccrpad = $a(0); //#28866
            $_.pixx = $_.ccpixx; //#28867
        } //#28867
        $k[$j++] = Infinity; //#28870
        for (var _15 = 0, _16 = $_.ccpixx, _14 = $_.ccpixs.length - 1; _16 < 0 ? _15 >= _14 : _15 <= _14; _15 += _16) { //#28874
            $_.i = _15; //#28872
            $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#28873
            $aload($_.ccrpad); //#28873
        } //#28873
        for (var _1C = 0, _1D = 2; _1C < _1D; _1C++) { //#28875
            $aload($_.linpad); //#28875
            $k[$j++] = 0; //#28875
            $k[$j++] = 1; //#28875
            for (var _1F = 0, _1G = 93; _1F < _1G; _1F++) { //#28875
                $k[$j++] = 0; //#28875
            } //#28875
            $k[$j++] = 1; //#28875
            $k[$j++] = 0; //#28875
            $aload($_.ccrpad); //#28875
        } //#28875
        for (var _1I = 0, _1J = 2; _1I < _1J; _1I++) { //#28876
            $aload($_.linpad); //#28876
            $k[$j++] = 1; //#28876
            $k[$j++] = 0; //#28876
            for (var _1L = 0, _1M = 93; _1L < _1M; _1L++) { //#28876
                $k[$j++] = 0; //#28876
            } //#28876
            $k[$j++] = 0; //#28876
            $k[$j++] = 1; //#28876
            $aload($_.ccrpad); //#28876
        } //#28876
        for (var _1O = 0, _1P = 2; _1O < _1P; _1O++) { //#28877
            $aload($_.linpad); //#28877
            $k[$j++] = 0; //#28877
            $k[$j++] = 1; //#28877
            for (var _1R = 0, _1S = 93; _1R < _1S; _1R++) { //#28877
                $k[$j++] = 0; //#28877
            } //#28877
            $k[$j++] = 1; //#28877
            $k[$j++] = 0; //#28877
            $aload($_.ccrpad); //#28877
        } //#28877
        for (var _1U = 71; _1U >= 0; _1U -= 1) { //#28896
            $_.y = _1U; //#28879
            $aload($_.linpad); //#28880
            $k[$j++] = 0; //#28894
            for (var _1Y = 0, _1X = $_.sbs.length - 1; _1Y <= _1X; _1Y += 1) { //#28894
                $_.i = _1Y; //#28883
                if (($_.i % 2) == 0) { //#28892
                    var _1d = $get($_.bbs, ~~($_.i / 2)) * 72; //#28886
                    if ((_1d > $_.y) || (($f(_1d + ($get($_.bhs, ~~($_.i / 2)) * 72))) < $_.y)) { //#28889
                        for (var _1m = 0, _1n = $cvi($get($_.sbs, $_.i)); _1m < _1n; _1m++) { //#28887
                            $k[$j++] = 0; //#28887
                        } //#28887
                    } else { //#28889
                        for (var _1r = 0, _1s = $cvi($get($_.sbs, $_.i)); _1r < _1s; _1r++) { //#28889
                            $k[$j++] = 1; //#28889
                        } //#28889
                    } //#28889
                } else { //#28892
                    for (var _1w = 0, _1x = $cvi($get($_.sbs, $_.i)); _1w < _1x; _1w++) { //#28892
                        $k[$j++] = 0; //#28892
                    } //#28892
                } //#28892
            } //#28892
            if ($_.diff < 0) { //#28895
                $k[$j++] = 0; //#28895
            } //#28895
        } //#28895
        $_.pixs = $a(); //#28895
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#28899
        var _28 = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#28907
        $k[$j++] = _28; //#28914
        if (!$_.dontdraw) { //#28914
            $$.save(); //#28911
            bwipp_renmatrix(); //#28912
            $$.restore(); //#28913
        } //#28913
    } //#28913
    $_ = Object.getPrototypeOf($_); //#28917
} //bwipp_upcacomposite
function bwipp_upcecomposite() {
    $_ = Object.create($_); //#28949
    $_.dontdraw = false; //#28952
    $_.usematrix = false; //#28953
    $_.parse = false; //#28954
    $_.dontlint = false; //#28955
    $_.lintreqs = true; //#28956
    $k[$j++] = $_; //#28958
    bwipp_processoptions(); //#28958
    $_.options = $k[--$j]; //#28958
    $_.barcode = $k[--$j]; //#28959
    if ($_.dontdraw) { //#28961
        $_.usematrix = true; //#28961
    } //#28961
    $search($_.barcode, "|"); //#28964
    if ($k[--$j]) { //#28969
        $_.linear = $k[--$j]; //#28965
        $j--; //#28966
        $_.comp = $k[--$j]; //#28967
    } else { //#28969
        $j--; //#28969
        $k[$j++] = 'bwipp.missingCompositeComponent#28969'; //#28969
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#28969
        bwipp_raiseerror(); //#28969
    } //#28969
    $put($_.options, "lintype", "upce"); //#28972
    $put($_.options, "inkspreadv", 0); //#28973
    $put($_.options, "dontdraw", true); //#28974
    $put($_.options, "dontlint", true); //#28975
    var _C = $s($_.comp.length + 18); //#28978
    $puti(_C, 0, "(01)00000000000000"); //#28979
    $puti(_C, 18, $_.comp); //#28980
    $k[$j++] = _C; //#28981
    $k[$j++] = 'ai'; //#28981
    bwipp_gs1process(); //#28981
    $j -= 3; //#28981
    $k[$j++] = $_.linear; //#28984
    $k[$j++] = $_.options; //#28984
    bwipp_upce(); //#28984
    if (!$_.usematrix) { //#29074
        $$.save(); //#28986
        bwipp_renlinear(); //#28988
        $$.rmoveto(-1, 72); //#28991
        $k[$j++] = Infinity; //#28991
        $k[$j++] = Infinity; //#28993
        $k[$j++] = 0; //#28994
        $k[$j++] = 1; //#28994
        for (var _H = 0, _I = 49; _H < _I; _H++) { //#28994
            $k[$j++] = 0; //#28994
        } //#28994
        $k[$j++] = 1; //#28995
        $k[$j++] = 0; //#28995
        $k[$j++] = 1; //#28995
        $k[$j++] = 0; //#28995
        for (var _J = 0, _K = 49; _J < _K; _J++) { //#28995
            $k[$j++] = 0; //#28995
        } //#28995
        $k[$j++] = 0; //#28996
        $k[$j++] = 1; //#28996
        $k[$j++] = 0; //#28996
        $k[$j++] = 1; //#28996
        for (var _L = 0, _M = 49; _L < _M; _L++) { //#28996
            $k[$j++] = 0; //#28996
        } //#28996
        $k[$j++] = 1; //#28996
        $k[$j++] = 0; //#28996
        var _N = $a(); //#28996
        $k[$j++] = 'ren'; //#29002
        $k[$j++] = 'renmatrix'; //#29002
        $k[$j++] = 'pixs'; //#29002
        $k[$j++] = _N; //#29002
        $k[$j++] = 'pixx'; //#29002
        $k[$j++] = 53; //#29002
        $k[$j++] = 'pixy'; //#29002
        $k[$j++] = 3; //#29002
        $k[$j++] = 'height'; //#29002
        $k[$j++] = 6 / 72; //#29002
        $k[$j++] = 'width'; //#29002
        $k[$j++] = 53 / 72; //#29002
        $k[$j++] = 'opt'; //#29002
        $k[$j++] = $_.options; //#29002
        var _P = $d(); //#29002
        $k[$j++] = _P; //#29003
        bwipp_renmatrix(); //#29003
        $$.rmoveto(-2, 6); //#29006
        $k[$j++] = $_.comp; //#29006
        $k[$j++] = $_.options; //#29006
        bwipp_gs1_cc(); //#29006
        bwipp_renmatrix(); //#29006
        $$.restore(); //#29008
    } else { //#29074
        $_.linsym = $k[--$j]; //#29010
        $_.sbs = $get($_.linsym, 'sbs'); //#29011
        $_.bhs = $get($_.linsym, 'bhs'); //#29012
        $_.bbs = $get($_.linsym, 'bbs'); //#29013
        $k[$j++] = 'linwidth'; //#29014
        $k[$j++] = 0; //#29014
        $forall($_.sbs, function() { //#29014
            var _a = $k[--$j]; //#29014
            var _b = $k[--$j]; //#29014
            $k[$j++] = $f(_b + $cvi(_a)); //#29014
        }); //#29014
        var _c = $k[--$j]; //#29014
        $_[$k[--$j]] = _c; //#29014
        $k[$j++] = 'compsym'; //#29016
        $k[$j++] = $_.comp; //#29016
        $k[$j++] = $_.options; //#29016
        bwipp_gs1_cc(); //#29016
        var _g = $k[--$j]; //#29016
        $_[$k[--$j]] = _g; //#29016
        $_.ccpixs = $get($_.compsym, 'pixs'); //#29017
        $_.ccpixx = $get($_.compsym, 'pixx'); //#29018
        $k[$j++] = Infinity; //#29020
        for (var _n = 0, _o = $f($_.ccpixx - 53); _n < _o; _n++) { //#29020
            $k[$j++] = 0; //#29020
        } //#29020
        $_.linpad = $a(); //#29020
        $_.diff = $f(($f($f($_.linwidth + $_.linpad.length) + 1)) - $_.ccpixx); //#29022
        if ($_.diff > 0) { //#29028
            $k[$j++] = Infinity; //#29024
            for (var _v = 0, _w = $_.diff; _v < _w; _v++) { //#29024
                $k[$j++] = 0; //#29024
            } //#29024
            $_.ccrpad = $a(); //#29024
            $_.pixx = $f($_.ccpixx + $_.diff); //#29025
        } else { //#29028
            $_.ccrpad = $a(0); //#29027
            $_.pixx = $_.ccpixx; //#29028
        } //#29028
        $k[$j++] = Infinity; //#29031
        for (var _15 = 0, _16 = $_.ccpixx, _14 = $_.ccpixs.length - 1; _16 < 0 ? _15 >= _14 : _15 <= _14; _15 += _16) { //#29035
            $_.i = _15; //#29033
            $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#29034
            $aload($_.ccrpad); //#29034
        } //#29034
        for (var _1C = 0, _1D = 2; _1C < _1D; _1C++) { //#29036
            $aload($_.linpad); //#29036
            $k[$j++] = 0; //#29036
            $k[$j++] = 1; //#29036
            for (var _1F = 0, _1G = 49; _1F < _1G; _1F++) { //#29036
                $k[$j++] = 0; //#29036
            } //#29036
            $k[$j++] = 1; //#29036
            $k[$j++] = 0; //#29036
            $aload($_.ccrpad); //#29036
        } //#29036
        for (var _1I = 0, _1J = 2; _1I < _1J; _1I++) { //#29037
            $aload($_.linpad); //#29037
            $k[$j++] = 1; //#29037
            $k[$j++] = 0; //#29037
            for (var _1L = 0, _1M = 49; _1L < _1M; _1L++) { //#29037
                $k[$j++] = 0; //#29037
            } //#29037
            $k[$j++] = 0; //#29037
            $k[$j++] = 1; //#29037
            $aload($_.ccrpad); //#29037
        } //#29037
        for (var _1O = 0, _1P = 2; _1O < _1P; _1O++) { //#29038
            $aload($_.linpad); //#29038
            $k[$j++] = 0; //#29038
            $k[$j++] = 1; //#29038
            for (var _1R = 0, _1S = 49; _1R < _1S; _1R++) { //#29038
                $k[$j++] = 0; //#29038
            } //#29038
            $k[$j++] = 1; //#29038
            $k[$j++] = 0; //#29038
            $aload($_.ccrpad); //#29038
        } //#29038
        for (var _1U = 71; _1U >= 0; _1U -= 1) { //#29057
            $_.y = _1U; //#29040
            $aload($_.linpad); //#29041
            $k[$j++] = 0; //#29055
            for (var _1Y = 0, _1X = $_.sbs.length - 1; _1Y <= _1X; _1Y += 1) { //#29055
                $_.i = _1Y; //#29044
                if (($_.i % 2) == 0) { //#29053
                    var _1d = $get($_.bbs, ~~($_.i / 2)) * 72; //#29047
                    if ((_1d > $_.y) || (($f(_1d + ($get($_.bhs, ~~($_.i / 2)) * 72))) < $_.y)) { //#29050
                        for (var _1m = 0, _1n = $cvi($get($_.sbs, $_.i)); _1m < _1n; _1m++) { //#29048
                            $k[$j++] = 0; //#29048
                        } //#29048
                    } else { //#29050
                        for (var _1r = 0, _1s = $cvi($get($_.sbs, $_.i)); _1r < _1s; _1r++) { //#29050
                            $k[$j++] = 1; //#29050
                        } //#29050
                    } //#29050
                } else { //#29053
                    for (var _1w = 0, _1x = $cvi($get($_.sbs, $_.i)); _1w < _1x; _1w++) { //#29053
                        $k[$j++] = 0; //#29053
                    } //#29053
                } //#29053
            } //#29053
            if ($_.diff < 0) { //#29056
                $k[$j++] = 0; //#29056
            } //#29056
        } //#29056
        $_.pixs = $a(); //#29056
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#29060
        var _28 = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#29068
        $k[$j++] = _28; //#29075
        if (!$_.dontdraw) { //#29075
            $$.save(); //#29072
            bwipp_renmatrix(); //#29073
            $$.restore(); //#29074
        } //#29074
    } //#29074
    $_ = Object.getPrototypeOf($_); //#29078
} //bwipp_upcecomposite
function bwipp_databaromnicomposite() {
    $_ = Object.create($_); //#29110
    $_.dontdraw = false; //#29113
    $_.usematrix = false; //#29114
    $_.parse = false; //#29115
    $_.dontlint = false; //#29116
    $_.lintreqs = true; //#29117
    $k[$j++] = $_; //#29119
    bwipp_processoptions(); //#29119
    $_.options = $k[--$j]; //#29119
    $_.barcode = $k[--$j]; //#29120
    if ($_.dontdraw) { //#29122
        $_.usematrix = true; //#29122
    } //#29122
    $search($_.barcode, "|"); //#29125
    if ($k[--$j]) { //#29130
        $_.linear = $k[--$j]; //#29126
        $j--; //#29127
        $_.comp = $k[--$j]; //#29128
    } else { //#29130
        $j--; //#29130
        $k[$j++] = 'bwipp.missingCompositeComponent#29130'; //#29130
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#29130
        bwipp_raiseerror(); //#29130
    } //#29130
    if (!$_.usematrix) { //#29133
        $$.save(); //#29133
    } //#29133
    $put($_.options, "lintype", "databaromni"); //#29135
    $put($_.options, "linkage", true); //#29136
    $put($_.options, "inkspreadv", 0); //#29137
    $put($_.options, "dontdraw", true); //#29138
    $put($_.options, "dontlint", true); //#29139
    var _F = $s($_.linear.length + $_.comp.length); //#29142
    $puti(_F, 0, $_.linear); //#29143
    $puti(_F, $_.linear.length, $_.comp); //#29144
    $k[$j++] = _F; //#29145
    $k[$j++] = 'ai'; //#29145
    bwipp_gs1process(); //#29145
    $j -= 3; //#29145
    $k[$j++] = $_.linear; //#29148
    $k[$j++] = $_.options; //#29148
    bwipp_databaromni(); //#29148
    var _L = $k[--$j]; //#29149
    $_.linsbs = $get(_L, "sbs"); //#29149
    $_.linheight = $get($get(_L, "bhs"), 0) * 72; //#29150
    $k[$j++] = _L; //#29151
    if (!$_.usematrix) { //#29151
        bwipp_renlinear(); //#29151
    } else { //#29151
        $j--; //#29151
    } //#29151
    $_.sepfinder = function() {
        $_.fp = $k[--$j]; //#29155
        for (var _U = $_.fp, _T = $f($_.fp + 12); _U <= _T; _U += 1) { //#29168
            $_.i = _U; //#29157
            if ($get($_.bot, $_.i) == 0) { //#29165
                if ($get($_.bot, $_.i - 1) == 1) { //#29162
                    $k[$j++] = 1; //#29160
                } else { //#29162
                    var _e = ($get($_.sep, $_.i - 1) == 0) ? 1 : 0; //#29162
                    $k[$j++] = _e; //#29162
                } //#29162
            } else { //#29165
                $k[$j++] = 0; //#29165
            } //#29165
            $put($_.sep, $_.i, $k[--$j]); //#29167
        } //#29167
        $_.f3 = $a([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1]); //#29169
        $k[$j++] = true; //#29170
        for (var _j = 0; _j <= 12; _j += 1) { //#29170
            var _p = $k[--$j]; //#29170
            $k[$j++] = _p && $eq($get($_.bot, $f(_j + $_.fp)), $get($_.f3, _j)); //#29170
        } //#29170
        if ($k[--$j]) { //#29173
            $puti($_.sep, $_.fp, $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0])); //#29172
        } //#29172
    }; //#29172
    $k[$j++] = Infinity; //#29175
    $k[$j++] = 0; //#29176
    $forall($_.linsbs, function() { //#29176
        var _v = $k[--$j]; //#29176
        var _w = $k[--$j]; //#29176
        var _x = (_w == 1) ? 0 : 1; //#29176
        $k[$j++] = _w; //#29176
        for (var _y = 0, _z = _v; _y < _z; _y++) { //#29176
            $k[$j++] = _x //#29176
        } //#29176
    }); //#29176
    $astore($a($counttomark() - 1)); //#29177
    $_.bot = $k[--$j]; //#29177
    $j -= 2; //#29177
    $k[$j++] = Infinity; //#29178
    $forall($_.bot, function() { //#29178
        var _14 = $k[--$j]; //#29178
        $k[$j++] = $f(1 - _14); //#29178
    }); //#29178
    $_.sep = $a(); //#29178
    $puti($_.sep, 0, $a([0, 0, 0])); //#29179
    $puti($_.sep, $_.sep.length - 4, $a([0, 0, 0, 0])); //#29180
    $k[$j++] = 18; //#29181
    $_.sepfinder(); //#29181
    $k[$j++] = 64; //#29181
    $_.sepfinder(); //#29181
    if (!$_.usematrix) { //#29232
        $$.rmoveto(0, $_.linheight); //#29183
        var _1H = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.sep],
            ["pixx", $_.sep.length],
            ["pixy", 1],
            ["height", 1 / 72],
            ["width", $_.sep.length / 72],
            ["opt", $_.options]
        ]); //#29190
        $k[$j++] = _1H; //#29191
        bwipp_renmatrix(); //#29191
        $$.rmoveto(-5, 1); //#29194
        $k[$j++] = $_.comp; //#29194
        $k[$j++] = $_.options; //#29194
        bwipp_gs1_cc(); //#29194
        bwipp_renmatrix(); //#29194
        $$.restore(); //#29196
    } else { //#29232
        $k[$j++] = 'compsym'; //#29198
        $k[$j++] = $_.comp; //#29198
        $k[$j++] = $_.options; //#29198
        bwipp_gs1_cc(); //#29198
        var _1M = $k[--$j]; //#29198
        $_[$k[--$j]] = _1M; //#29198
        $_.ccpixs = $get($_.compsym, 'pixs'); //#29199
        $_.ccpixx = $get($_.compsym, 'pixx'); //#29200
        $k[$j++] = Infinity; //#29202
        $k[$j++] = 0; //#29203
        $forall($_.linsbs, function() { //#29203
            var _1T = $k[--$j]; //#29203
            var _1U = $k[--$j]; //#29203
            var _1V = (_1U == 0) ? 1 : 0; //#29203
            $k[$j++] = _1U; //#29203
            for (var _1W = 0, _1X = $cvi(_1T); _1W < _1X; _1W++) { //#29203
                $k[$j++] = _1V //#29203
            } //#29203
        }); //#29203
        $_.linpixs = $a(); //#29203
        $k[$j++] = Infinity; //#29205
        $k[$j++] = 0; //#29205
        $aload($_.sep); //#29205
        $_.sep = $a(); //#29205
        $_.linheight = ~~$_.linheight; //#29207
        $k[$j++] = Infinity; //#29209
        for (var _1f = 0, _1g = $_.ccpixx, _1e = $_.ccpixs.length - 1; _1g < 0 ? _1f >= _1e : _1f <= _1e; _1f += _1g) { //#29213
            $_.i = _1f; //#29211
            $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#29212
            $k[$j++] = 0; //#29212
        } //#29212
        $k[$j++] = 0; //#29214
        $k[$j++] = 0; //#29214
        $k[$j++] = 0; //#29214
        $k[$j++] = 0; //#29214
        $aload($_.sep); //#29214
        for (var _1n = 0, _1o = $_.linheight; _1n < _1o; _1n++) { //#29214
            $k[$j++] = 0; //#29214
            $k[$j++] = 0; //#29214
            $k[$j++] = 0; //#29214
            $k[$j++] = 0; //#29214
            $aload($_.linpixs); //#29214
        } //#29214
        $_.pixs = $a(); //#29214
        $_.pixx = $f($_.ccpixx + 1); //#29216
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#29218
        var _20 = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#29226
        $k[$j++] = _20; //#29233
        if (!$_.dontdraw) { //#29233
            $$.save(); //#29230
            bwipp_renmatrix(); //#29231
            $$.restore(); //#29232
        } //#29232
    } //#29232
    $_ = Object.getPrototypeOf($_); //#29236
} //bwipp_databaromnicomposite
function bwipp_databarstackedcomposite() {
    $_ = Object.create($_); //#29267
    $_.dontdraw = false; //#29270
    $_.usematrix = false; //#29271
    $_.parse = false; //#29272
    $_.dontlint = false; //#29273
    $_.lintreqs = true; //#29274
    $k[$j++] = $_; //#29276
    bwipp_processoptions(); //#29276
    $_.options = $k[--$j]; //#29276
    $_.barcode = $k[--$j]; //#29277
    if ($_.dontdraw) { //#29279
        $_.usematrix = true; //#29279
    } //#29279
    $search($_.barcode, "|"); //#29282
    if ($k[--$j]) { //#29287
        $_.linear = $k[--$j]; //#29283
        $j--; //#29284
        $_.comp = $k[--$j]; //#29285
    } else { //#29287
        $j--; //#29287
        $k[$j++] = 'bwipp.missingCompositeComponent#29287'; //#29287
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#29287
        bwipp_raiseerror(); //#29287
    } //#29287
    if (!$_.usematrix) { //#29290
        $$.save(); //#29290
    } //#29290
    $put($_.options, "lintype", "databarstacked"); //#29292
    $put($_.options, "linkage", true); //#29293
    $put($_.options, "inkspreadv", 0); //#29294
    $put($_.options, "dontdraw", true); //#29295
    $put($_.options, "dontlint", true); //#29296
    var _F = $s($_.linear.length + $_.comp.length); //#29299
    $puti(_F, 0, $_.linear); //#29300
    $puti(_F, $_.linear.length, $_.comp); //#29301
    $k[$j++] = _F; //#29302
    $k[$j++] = 'ai'; //#29302
    bwipp_gs1process(); //#29302
    $j -= 3; //#29302
    $k[$j++] = $_.linear; //#29305
    $k[$j++] = $_.options; //#29305
    bwipp_databarstacked(); //#29305
    var _L = $k[--$j]; //#29306
    $_.bot = $geti($get(_L, "pixs"), 0, $get(_L, "pixx")); //#29306
    $_.linheight = $get(_L, "pixy"); //#29307
    $k[$j++] = _L; //#29308
    if (!$_.usematrix) { //#29308
        bwipp_renmatrix(); //#29308
    } else { //#29308
        $_.linpixs = $get($k[--$j], 'pixs'); //#29308
    } //#29308
    $_.sepfinder = function() {
        $_.fp = $k[--$j]; //#29312
        for (var _X = $_.fp, _W = $f($_.fp + 12); _X <= _W; _X += 1) { //#29325
            $_.i = _X; //#29314
            if ($get($_.bot, $_.i) == 0) { //#29322
                if ($get($_.bot, $_.i - 1) == 1) { //#29319
                    $k[$j++] = 1; //#29317
                } else { //#29319
                    var _h = ($get($_.sep, $_.i - 1) == 0) ? 1 : 0; //#29319
                    $k[$j++] = _h; //#29319
                } //#29319
            } else { //#29322
                $k[$j++] = 0; //#29322
            } //#29322
            $put($_.sep, $_.i, $k[--$j]); //#29324
        } //#29324
        $_.f3 = $a([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1]); //#29326
        $k[$j++] = true; //#29327
        for (var _m = 0; _m <= 12; _m += 1) { //#29327
            var _s = $k[--$j]; //#29327
            $k[$j++] = _s && $eq($get($_.bot, $f(_m + $_.fp)), $get($_.f3, _m)); //#29327
        } //#29327
        if ($k[--$j]) { //#29330
            $puti($_.sep, $_.fp, $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0])); //#29329
        } //#29329
    }; //#29329
    $k[$j++] = Infinity; //#29332
    var _x = $_.bot; //#29332
    for (var _y = 0, _z = _x.length; _y < _z; _y++) { //#29332
        $k[$j++] = $f(1 - $get(_x, _y)); //#29332
    } //#29332
    $_.sep = $a(); //#29332
    $puti($_.sep, 0, $a([0, 0, 0, 0])); //#29333
    $puti($_.sep, $_.sep.length - 4, $a([0, 0, 0, 0])); //#29334
    $k[$j++] = 18; //#29335
    $_.sepfinder(); //#29335
    if (!$_.usematrix) { //#29385
        $$.rmoveto(0, $_.linheight); //#29337
        var _1D = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.sep],
            ["pixx", $_.sep.length],
            ["pixy", 1],
            ["height", 1 / 72],
            ["width", $_.sep.length / 72],
            ["opt", $_.options]
        ]); //#29344
        $k[$j++] = _1D; //#29345
        bwipp_renmatrix(); //#29345
        $$.rmoveto(1, 1); //#29348
        $k[$j++] = $_.comp; //#29348
        $k[$j++] = $_.options; //#29348
        bwipp_gs1_cc(); //#29348
        bwipp_renmatrix(); //#29348
        $$.restore(); //#29350
    } else { //#29385
        $k[$j++] = 'compsym'; //#29352
        $k[$j++] = $_.comp; //#29352
        $k[$j++] = $_.options; //#29352
        bwipp_gs1_cc(); //#29352
        var _1I = $k[--$j]; //#29352
        $_[$k[--$j]] = _1I; //#29352
        $_.ccpixs = $get($_.compsym, 'pixs'); //#29353
        $_.ccpixx = $get($_.compsym, 'pixx'); //#29354
        $_.linwidth = $_.sep.length; //#29356
        $k[$j++] = Infinity; //#29358
        for (var _1S = 0, _1T = $_.ccpixx, _1R = $_.ccpixs.length - 1; _1T < 0 ? _1S >= _1R : _1S <= _1R; _1S += _1T) { //#29362
            $_.i = _1S; //#29360
            $k[$j++] = 0; //#29361
            $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#29361
        } //#29361
        $aload($_.sep); //#29363
        $k[$j++] = 0; //#29367
        $k[$j++] = 0; //#29367
        $k[$j++] = 0; //#29367
        $k[$j++] = 0; //#29367
        $k[$j++] = 0; //#29367
        $k[$j++] = 0; //#29367
        for (var _1c = 0, _1d = $_.linwidth, _1b = $_.linpixs.length - 1; _1d < 0 ? _1c >= _1b : _1c <= _1b; _1c += _1d) { //#29367
            $_.i = _1c; //#29365
            $aload($geti($_.linpixs, $_.i, $_.linwidth)); //#29366
            $k[$j++] = 0; //#29366
            $k[$j++] = 0; //#29366
            $k[$j++] = 0; //#29366
            $k[$j++] = 0; //#29366
            $k[$j++] = 0; //#29366
            $k[$j++] = 0; //#29366
        } //#29366
        $_.pixs = $a(); //#29366
        $_.pixx = $f($_.ccpixx + 1); //#29369
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#29371
        var _1s = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#29379
        $k[$j++] = _1s; //#29386
        if (!$_.dontdraw) { //#29386
            $$.save(); //#29383
            bwipp_renmatrix(); //#29384
            $$.restore(); //#29385
        } //#29385
    } //#29385
    $_ = Object.getPrototypeOf($_); //#29389
} //bwipp_databarstackedcomposite
function bwipp_databarstackedomnicomposite() {
    $_ = Object.create($_); //#29420
    $_.dontdraw = false; //#29423
    $_.usematrix = false; //#29424
    $_.parse = false; //#29425
    $_.dontlint = false; //#29426
    $_.lintreqs = true; //#29427
    $k[$j++] = $_; //#29429
    bwipp_processoptions(); //#29429
    $_.options = $k[--$j]; //#29429
    $_.barcode = $k[--$j]; //#29430
    if ($_.dontdraw) { //#29432
        $_.usematrix = true; //#29432
    } //#29432
    $search($_.barcode, "|"); //#29435
    if ($k[--$j]) { //#29440
        $_.linear = $k[--$j]; //#29436
        $j--; //#29437
        $_.comp = $k[--$j]; //#29438
    } else { //#29440
        $j--; //#29440
        $k[$j++] = 'bwipp.missingCompositeComponent#29440'; //#29440
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#29440
        bwipp_raiseerror(); //#29440
    } //#29440
    if (!$_.usematrix) { //#29443
        $$.save(); //#29443
    } //#29443
    $put($_.options, "lintype", "databarstackedomni"); //#29445
    $put($_.options, "linkage", true); //#29446
    $put($_.options, "inkspreadv", 0); //#29447
    $put($_.options, "dontdraw", true); //#29448
    $put($_.options, "dontlint", true); //#29449
    var _F = $s($_.linear.length + $_.comp.length); //#29452
    $puti(_F, 0, $_.linear); //#29453
    $puti(_F, $_.linear.length, $_.comp); //#29454
    $k[$j++] = _F; //#29455
    $k[$j++] = 'ai'; //#29455
    bwipp_gs1process(); //#29455
    $j -= 3; //#29455
    $k[$j++] = $_.linear; //#29458
    $k[$j++] = $_.options; //#29458
    bwipp_databarstackedomni(); //#29458
    var _L = $k[--$j]; //#29459
    $_.bot = $geti($get(_L, "pixs"), 0, $get(_L, "pixx")); //#29459
    $_.linheight = $get(_L, "pixy"); //#29460
    $k[$j++] = _L; //#29461
    if (!$_.usematrix) { //#29461
        bwipp_renmatrix(); //#29461
    } else { //#29461
        $_.linpixs = $get($k[--$j], 'pixs'); //#29461
    } //#29461
    $_.sepfinder = function() {
        $_.fp = $k[--$j]; //#29465
        for (var _X = $_.fp, _W = $f($_.fp + 12); _X <= _W; _X += 1) { //#29478
            $_.i = _X; //#29467
            if ($get($_.bot, $_.i) == 0) { //#29475
                if ($get($_.bot, $_.i - 1) == 1) { //#29472
                    $k[$j++] = 1; //#29470
                } else { //#29472
                    var _h = ($get($_.sep, $_.i - 1) == 0) ? 1 : 0; //#29472
                    $k[$j++] = _h; //#29472
                } //#29472
            } else { //#29475
                $k[$j++] = 0; //#29475
            } //#29475
            $put($_.sep, $_.i, $k[--$j]); //#29477
        } //#29477
        $_.f3 = $a([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1]); //#29479
        $k[$j++] = true; //#29480
        for (var _m = 0; _m <= 12; _m += 1) { //#29480
            var _s = $k[--$j]; //#29480
            $k[$j++] = _s && $eq($get($_.bot, $f(_m + $_.fp)), $get($_.f3, _m)); //#29480
        } //#29480
        if ($k[--$j]) { //#29483
            $puti($_.sep, $_.fp, $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0])); //#29482
        } //#29482
    }; //#29482
    $k[$j++] = Infinity; //#29485
    var _x = $_.bot; //#29485
    for (var _y = 0, _z = _x.length; _y < _z; _y++) { //#29485
        $k[$j++] = $f(1 - $get(_x, _y)); //#29485
    } //#29485
    $_.sep = $a(); //#29485
    $puti($_.sep, 0, $a([0, 0, 0, 0])); //#29486
    $puti($_.sep, $_.sep.length - 4, $a([0, 0, 0, 0])); //#29487
    $k[$j++] = 18; //#29488
    $_.sepfinder(); //#29488
    if (!$_.usematrix) { //#29538
        $$.rmoveto(0, $_.linheight); //#29490
        var _1D = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.sep],
            ["pixx", $_.sep.length],
            ["pixy", 1],
            ["height", 1 / 72],
            ["width", $_.sep.length / 72],
            ["opt", $_.options]
        ]); //#29497
        $k[$j++] = _1D; //#29498
        bwipp_renmatrix(); //#29498
        $$.rmoveto(1, 1); //#29501
        $k[$j++] = $_.comp; //#29501
        $k[$j++] = $_.options; //#29501
        bwipp_gs1_cc(); //#29501
        bwipp_renmatrix(); //#29501
        $$.restore(); //#29503
    } else { //#29538
        $k[$j++] = 'compsym'; //#29505
        $k[$j++] = $_.comp; //#29505
        $k[$j++] = $_.options; //#29505
        bwipp_gs1_cc(); //#29505
        var _1I = $k[--$j]; //#29505
        $_[$k[--$j]] = _1I; //#29505
        $_.ccpixs = $get($_.compsym, 'pixs'); //#29506
        $_.ccpixx = $get($_.compsym, 'pixx'); //#29507
        $_.linwidth = $_.sep.length; //#29509
        $k[$j++] = Infinity; //#29511
        for (var _1S = 0, _1T = $_.ccpixx, _1R = $_.ccpixs.length - 1; _1T < 0 ? _1S >= _1R : _1S <= _1R; _1S += _1T) { //#29515
            $_.i = _1S; //#29513
            $k[$j++] = 0; //#29514
            $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#29514
        } //#29514
        $aload($_.sep); //#29516
        $k[$j++] = 0; //#29520
        $k[$j++] = 0; //#29520
        $k[$j++] = 0; //#29520
        $k[$j++] = 0; //#29520
        $k[$j++] = 0; //#29520
        $k[$j++] = 0; //#29520
        for (var _1c = 0, _1d = $_.linwidth, _1b = $_.linpixs.length - 1; _1d < 0 ? _1c >= _1b : _1c <= _1b; _1c += _1d) { //#29520
            $_.i = _1c; //#29518
            $aload($geti($_.linpixs, $_.i, $_.linwidth)); //#29519
            $k[$j++] = 0; //#29519
            $k[$j++] = 0; //#29519
            $k[$j++] = 0; //#29519
            $k[$j++] = 0; //#29519
            $k[$j++] = 0; //#29519
            $k[$j++] = 0; //#29519
        } //#29519
        $_.pixs = $a(); //#29519
        $_.pixx = $f($_.ccpixx + 1); //#29522
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#29524
        var _1s = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#29532
        $k[$j++] = _1s; //#29539
        if (!$_.dontdraw) { //#29539
            $$.save(); //#29536
            bwipp_renmatrix(); //#29537
            $$.restore(); //#29538
        } //#29538
    } //#29538
    $_ = Object.getPrototypeOf($_); //#29542
} //bwipp_databarstackedomnicomposite
function bwipp_databartruncatedcomposite() {
    $_ = Object.create($_); //#29574
    $_.dontdraw = false; //#29577
    $_.usematrix = false; //#29578
    $_.parse = false; //#29579
    $_.dontlint = false; //#29580
    $_.lintreqs = true; //#29581
    $k[$j++] = $_; //#29583
    bwipp_processoptions(); //#29583
    $_.options = $k[--$j]; //#29583
    $_.barcode = $k[--$j]; //#29584
    if ($_.dontdraw) { //#29586
        $_.usematrix = true; //#29586
    } //#29586
    $search($_.barcode, "|"); //#29589
    if ($k[--$j]) { //#29594
        $_.linear = $k[--$j]; //#29590
        $j--; //#29591
        $_.comp = $k[--$j]; //#29592
    } else { //#29594
        $j--; //#29594
        $k[$j++] = 'bwipp.missingCompositeComponent#29594'; //#29594
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#29594
        bwipp_raiseerror(); //#29594
    } //#29594
    if (!$_.usematrix) { //#29597
        $$.save(); //#29597
    } //#29597
    $put($_.options, "lintype", "databartruncated"); //#29599
    $put($_.options, "linkage", true); //#29600
    $put($_.options, "inkspreadv", 0); //#29601
    $put($_.options, "dontdraw", true); //#29602
    $put($_.options, "dontlint", true); //#29603
    var _F = $s($_.linear.length + $_.comp.length); //#29606
    $puti(_F, 0, $_.linear); //#29607
    $puti(_F, $_.linear.length, $_.comp); //#29608
    $k[$j++] = _F; //#29609
    $k[$j++] = 'ai'; //#29609
    bwipp_gs1process(); //#29609
    $j -= 3; //#29609
    $k[$j++] = $_.linear; //#29612
    $k[$j++] = $_.options; //#29612
    bwipp_databartruncated(); //#29612
    var _L = $k[--$j]; //#29613
    $_.linsbs = $get(_L, "sbs"); //#29613
    $_.linheight = $get($get(_L, "bhs"), 0) * 72; //#29614
    $k[$j++] = _L; //#29615
    if (!$_.usematrix) { //#29615
        bwipp_renlinear(); //#29615
    } else { //#29615
        $j--; //#29615
    } //#29615
    $_.sepfinder = function() {
        $_.fp = $k[--$j]; //#29619
        for (var _U = $_.fp, _T = $f($_.fp + 12); _U <= _T; _U += 1) { //#29632
            $_.i = _U; //#29621
            if ($get($_.bot, $_.i) == 0) { //#29629
                if ($get($_.bot, $_.i - 1) == 1) { //#29626
                    $k[$j++] = 1; //#29624
                } else { //#29626
                    var _e = ($get($_.sep, $_.i - 1) == 0) ? 1 : 0; //#29626
                    $k[$j++] = _e; //#29626
                } //#29626
            } else { //#29629
                $k[$j++] = 0; //#29629
            } //#29629
            $put($_.sep, $_.i, $k[--$j]); //#29631
        } //#29631
        $_.f3 = $a([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1]); //#29633
        $k[$j++] = true; //#29634
        for (var _j = 0; _j <= 12; _j += 1) { //#29634
            var _p = $k[--$j]; //#29634
            $k[$j++] = _p && $eq($get($_.bot, $f(_j + $_.fp)), $get($_.f3, _j)); //#29634
        } //#29634
        if ($k[--$j]) { //#29637
            $puti($_.sep, $_.fp, $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0])); //#29636
        } //#29636
    }; //#29636
    $k[$j++] = Infinity; //#29639
    $k[$j++] = 0; //#29640
    $forall($_.linsbs, function() { //#29640
        var _v = $k[--$j]; //#29640
        var _w = $k[--$j]; //#29640
        var _x = (_w == 1) ? 0 : 1; //#29640
        $k[$j++] = _w; //#29640
        for (var _y = 0, _z = _v; _y < _z; _y++) { //#29640
            $k[$j++] = _x //#29640
        } //#29640
    }); //#29640
    $astore($a($counttomark() - 1)); //#29641
    $_.bot = $k[--$j]; //#29641
    $j -= 2; //#29641
    $k[$j++] = Infinity; //#29642
    $forall($_.bot, function() { //#29642
        var _14 = $k[--$j]; //#29642
        $k[$j++] = $f(1 - _14); //#29642
    }); //#29642
    $_.sep = $a(); //#29642
    $puti($_.sep, 0, $a([0, 0, 0])); //#29643
    $puti($_.sep, $_.sep.length - 4, $a([0, 0, 0, 0])); //#29644
    $k[$j++] = 18; //#29645
    $_.sepfinder(); //#29645
    $k[$j++] = 64; //#29645
    $_.sepfinder(); //#29645
    if (!$_.usematrix) { //#29696
        $$.rmoveto(0, $_.linheight); //#29647
        var _1H = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.sep],
            ["pixx", $_.sep.length],
            ["pixy", 1],
            ["height", 1 / 72],
            ["width", $_.sep.length / 72],
            ["opt", $_.options]
        ]); //#29654
        $k[$j++] = _1H; //#29655
        bwipp_renmatrix(); //#29655
        $$.rmoveto(-5, 1); //#29658
        $k[$j++] = $_.comp; //#29658
        $k[$j++] = $_.options; //#29658
        bwipp_gs1_cc(); //#29658
        bwipp_renmatrix(); //#29658
        $$.restore(); //#29660
    } else { //#29696
        $k[$j++] = 'compsym'; //#29662
        $k[$j++] = $_.comp; //#29662
        $k[$j++] = $_.options; //#29662
        bwipp_gs1_cc(); //#29662
        var _1M = $k[--$j]; //#29662
        $_[$k[--$j]] = _1M; //#29662
        $_.ccpixs = $get($_.compsym, 'pixs'); //#29663
        $_.ccpixx = $get($_.compsym, 'pixx'); //#29664
        $k[$j++] = Infinity; //#29666
        $k[$j++] = 0; //#29667
        $forall($_.linsbs, function() { //#29667
            var _1T = $k[--$j]; //#29667
            var _1U = $k[--$j]; //#29667
            var _1V = (_1U == 0) ? 1 : 0; //#29667
            $k[$j++] = _1U; //#29667
            for (var _1W = 0, _1X = $cvi(_1T); _1W < _1X; _1W++) { //#29667
                $k[$j++] = _1V //#29667
            } //#29667
        }); //#29667
        $_.linpixs = $a(); //#29667
        $k[$j++] = Infinity; //#29669
        $k[$j++] = 0; //#29669
        $aload($_.sep); //#29669
        $_.sep = $a(); //#29669
        $_.linheight = ~~$_.linheight; //#29671
        $k[$j++] = Infinity; //#29673
        for (var _1f = 0, _1g = $_.ccpixx, _1e = $_.ccpixs.length - 1; _1g < 0 ? _1f >= _1e : _1f <= _1e; _1f += _1g) { //#29677
            $_.i = _1f; //#29675
            $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#29676
            $k[$j++] = 0; //#29676
        } //#29676
        $k[$j++] = 0; //#29678
        $k[$j++] = 0; //#29678
        $k[$j++] = 0; //#29678
        $k[$j++] = 0; //#29678
        $aload($_.sep); //#29678
        for (var _1n = 0, _1o = $_.linheight; _1n < _1o; _1n++) { //#29678
            $k[$j++] = 0; //#29678
            $k[$j++] = 0; //#29678
            $k[$j++] = 0; //#29678
            $k[$j++] = 0; //#29678
            $aload($_.linpixs); //#29678
        } //#29678
        $_.pixs = $a(); //#29678
        $_.pixx = $f($_.ccpixx + 1); //#29680
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#29682
        var _20 = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#29690
        $k[$j++] = _20; //#29697
        if (!$_.dontdraw) { //#29697
            $$.save(); //#29694
            bwipp_renmatrix(); //#29695
            $$.restore(); //#29696
        } //#29696
    } //#29696
    $_ = Object.getPrototypeOf($_); //#29700
} //bwipp_databartruncatedcomposite
function bwipp_databarlimitedcomposite() {
    $_ = Object.create($_); //#29732
    $_.dontdraw = false; //#29735
    $_.usematrix = false; //#29736
    $_.parse = false; //#29737
    $_.dontlint = false; //#29738
    $_.lintreqs = true; //#29739
    $k[$j++] = $_; //#29741
    bwipp_processoptions(); //#29741
    $_.options = $k[--$j]; //#29741
    $_.barcode = $k[--$j]; //#29742
    if ($_.dontdraw) { //#29744
        $_.usematrix = true; //#29744
    } //#29744
    $search($_.barcode, "|"); //#29747
    if ($k[--$j]) { //#29752
        $_.linear = $k[--$j]; //#29748
        $j--; //#29749
        $_.comp = $k[--$j]; //#29750
    } else { //#29752
        $j--; //#29752
        $k[$j++] = 'bwipp.missingCompositeComponent#29752'; //#29752
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#29752
        bwipp_raiseerror(); //#29752
    } //#29752
    if (!$_.usematrix) { //#29755
        $$.save(); //#29755
    } //#29755
    $put($_.options, "lintype", "databarlimited"); //#29757
    $put($_.options, "linkage", true); //#29758
    $put($_.options, "inkspreadv", 0); //#29759
    $put($_.options, "dontdraw", true); //#29760
    $put($_.options, "dontlint", true); //#29761
    var _F = $s($_.linear.length + $_.comp.length); //#29764
    $puti(_F, 0, $_.linear); //#29765
    $puti(_F, $_.linear.length, $_.comp); //#29766
    $k[$j++] = _F; //#29767
    $k[$j++] = 'ai'; //#29767
    bwipp_gs1process(); //#29767
    $j -= 3; //#29767
    $k[$j++] = $_.linear; //#29770
    $k[$j++] = $_.options; //#29770
    bwipp_databarlimited(); //#29770
    var _L = $k[--$j]; //#29771
    $_.linsbs = $get(_L, "sbs"); //#29771
    $_.linheight = $get($get(_L, "bhs"), 0) * 72; //#29772
    $k[$j++] = _L; //#29773
    if (!$_.usematrix) { //#29773
        bwipp_renlinear(); //#29773
    } else { //#29773
        $j--; //#29773
    } //#29773
    $k[$j++] = Infinity; //#29776
    $k[$j++] = 1; //#29777
    $forall($_.linsbs, function() { //#29777
        var _R = $k[--$j]; //#29777
        var _S = $k[--$j]; //#29777
        var _T = (_S == 0) ? 1 : 0; //#29777
        $k[$j++] = _S; //#29777
        for (var _U = 0, _V = _R; _U < _V; _U++) { //#29777
            $k[$j++] = _T //#29777
        } //#29777
    }); //#29777
    $astore($a($counttomark() - 1)); //#29778
    $_.sep = $k[--$j]; //#29778
    $j -= 2; //#29778
    $puti($_.sep, 0, $a([0, 0, 0])); //#29779
    var _c = $_.sep; //#29780
    $puti($_.sep, _c.length - 9, $a([0, 0, 0, 0, 0, 0, 0, 0, 0])); //#29780
    if (!$_.usematrix) { //#29845
        $$.rmoveto(0, $_.linheight); //#29783
        var _g = $_.sep; //#29785
        var _k = new Map([
            ["ren", 'renmatrix'],
            ["pixs", _g],
            ["pixx", $_.sep.length],
            ["pixy", 1],
            ["height", 1 / 72],
            ["width", $_.sep.length / 72],
            ["opt", $_.options]
        ]); //#29790
        $k[$j++] = _k; //#29791
        bwipp_renmatrix(); //#29791
        $k[$j++] = $_.comp; //#29794
        $k[$j++] = $_.options; //#29794
        bwipp_gs1_cc(); //#29794
        var _n = $k[--$j]; //#29795
        $$.rmoveto($f(72 - $get(_n, "pixx")), 1); //#29795
        $k[$j++] = _n; //#29796
        bwipp_renmatrix(); //#29796
        $$.restore(); //#29798
    } else { //#29845
        $k[$j++] = 'compsym'; //#29800
        $k[$j++] = $_.comp; //#29800
        $k[$j++] = $_.options; //#29800
        bwipp_gs1_cc(); //#29800
        var _r = $k[--$j]; //#29800
        $_[$k[--$j]] = _r; //#29800
        $_.ccpixs = $get($_.compsym, 'pixs'); //#29801
        $_.ccpixx = $get($_.compsym, 'pixx'); //#29802
        $k[$j++] = Infinity; //#29804
        $k[$j++] = 0; //#29805
        $forall($_.linsbs, function() { //#29805
            var _y = $k[--$j]; //#29805
            var _z = $k[--$j]; //#29805
            var _10 = (_z == 0) ? 1 : 0; //#29805
            $k[$j++] = _z; //#29805
            for (var _11 = 0, _12 = $cvi(_y); _11 < _12; _11++) { //#29805
                $k[$j++] = _10 //#29805
            } //#29805
        }); //#29805
        $_.linpixs = $a(); //#29805
        $k[$j++] = Infinity; //#29807
        $k[$j++] = 0; //#29807
        $aload($_.sep); //#29807
        $_.sep = $a(); //#29807
        $_.linheight = ~~$_.linheight; //#29809
        if ($_.ccpixx == 72) { //#29828
            $k[$j++] = Infinity; //#29812
            for (var _1B = 0, _1C = $_.ccpixx, _1A = $_.ccpixs.length - 1; _1C < 0 ? _1B >= _1A : _1B <= _1A; _1B += _1C) { //#29816
                $_.i = _1B; //#29814
                $k[$j++] = 0; //#29815
                $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#29815
                $k[$j++] = 0; //#29815
                $k[$j++] = 0; //#29815
                $k[$j++] = 0; //#29815
                $k[$j++] = 0; //#29815
                $k[$j++] = 0; //#29815
                $k[$j++] = 0; //#29815
            } //#29815
            $aload($_.sep); //#29817
            for (var _1J = 0, _1K = $_.linheight; _1J < _1K; _1J++) { //#29817
                $aload($_.linpixs); //#29817
            } //#29817
            $_.pixs = $a(); //#29817
            $_.pixx = $_.linpixs.length; //#29819
        } else { //#29828
            $k[$j++] = Infinity; //#29821
            for (var _1R = 0, _1S = $_.ccpixx, _1Q = $_.ccpixs.length - 1; _1S < 0 ? _1R >= _1Q : _1R <= _1Q; _1R += _1S) { //#29825
                $_.i = _1R; //#29823
                $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#29824
                $k[$j++] = 0; //#29824
                $k[$j++] = 0; //#29824
                $k[$j++] = 0; //#29824
                $k[$j++] = 0; //#29824
                $k[$j++] = 0; //#29824
                $k[$j++] = 0; //#29824
            } //#29824
            $k[$j++] = 0; //#29826
            $k[$j++] = 0; //#29826
            $k[$j++] = 0; //#29826
            $k[$j++] = 0; //#29826
            $k[$j++] = 0; //#29826
            $k[$j++] = 0; //#29826
            $k[$j++] = 0; //#29826
            $k[$j++] = 0; //#29826
            $k[$j++] = 0; //#29826
            $aload($_.sep); //#29826
            for (var _1Z = 0, _1a = $_.linheight; _1Z < _1a; _1Z++) { //#29826
                $k[$j++] = 0; //#29826
                $k[$j++] = 0; //#29826
                $k[$j++] = 0; //#29826
                $k[$j++] = 0; //#29826
                $k[$j++] = 0; //#29826
                $k[$j++] = 0; //#29826
                $k[$j++] = 0; //#29826
                $k[$j++] = 0; //#29826
                $k[$j++] = 0; //#29826
                $aload($_.linpixs); //#29826
            } //#29826
            $_.pixs = $a(); //#29826
            $_.pixx = $f($_.ccpixx + 6); //#29828
        } //#29828
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#29831
        var _1m = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#29839
        $k[$j++] = _1m; //#29846
        if (!$_.dontdraw) { //#29846
            $$.save(); //#29843
            bwipp_renmatrix(); //#29844
            $$.restore(); //#29845
        } //#29845
    } //#29845
    $_ = Object.getPrototypeOf($_); //#29849
} //bwipp_databarlimitedcomposite
function bwipp_databarexpandedcomposite() {
    $_ = Object.create($_); //#29881
    $_.dontdraw = false; //#29884
    $_.usematrix = false; //#29885
    $_.parse = false; //#29886
    $_.dontlint = false; //#29887
    $_.lintreqs = true; //#29888
    $k[$j++] = $_; //#29890
    bwipp_processoptions(); //#29890
    $_.options = $k[--$j]; //#29890
    $_.barcode = $k[--$j]; //#29891
    if ($_.dontdraw) { //#29893
        $_.usematrix = true; //#29893
    } //#29893
    $search($_.barcode, "|"); //#29896
    if ($k[--$j]) { //#29901
        $_.linear = $k[--$j]; //#29897
        $j--; //#29898
        $_.comp = $k[--$j]; //#29899
    } else { //#29901
        $j--; //#29901
        $k[$j++] = 'bwipp.missingCompositeComponent#29901'; //#29901
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#29901
        bwipp_raiseerror(); //#29901
    } //#29901
    if (!$_.usematrix) { //#29904
        $$.save(); //#29904
    } //#29904
    $put($_.options, "lintype", "databarexpanded"); //#29906
    $put($_.options, "linkage", true); //#29907
    $put($_.options, "inkspreadv", 0); //#29908
    $put($_.options, "dontdraw", true); //#29909
    $put($_.options, "dontlint", true); //#29910
    var _F = $s($_.linear.length + $_.comp.length); //#29913
    $puti(_F, 0, $_.linear); //#29914
    $puti(_F, $_.linear.length, $_.comp); //#29915
    $k[$j++] = _F; //#29916
    $k[$j++] = 'ai'; //#29916
    bwipp_gs1process(); //#29916
    $j -= 3; //#29916
    $k[$j++] = $_.linear; //#29919
    $k[$j++] = $_.options; //#29919
    bwipp_databarexpanded(); //#29919
    var _L = $k[--$j]; //#29920
    $_.linsbs = $get(_L, "sbs"); //#29920
    $_.linheight = $get($get(_L, "bhs"), 0) * 72; //#29921
    $k[$j++] = _L; //#29922
    if (!$_.usematrix) { //#29922
        bwipp_renlinear(); //#29922
    } else { //#29922
        $j--; //#29922
    } //#29922
    $_.sepfinder = function() {
        $_.fp = $k[--$j]; //#29926
        for (var _U = $_.fp, _T = $f($_.fp + 12); _U <= _T; _U += 1) { //#29939
            $_.i = _U; //#29928
            if ($get($_.bot, $_.i) == 0) { //#29936
                if ($get($_.bot, $_.i - 1) == 1) { //#29933
                    $k[$j++] = 1; //#29931
                } else { //#29933
                    var _e = ($get($_.sep, $_.i - 1) == 0) ? 1 : 0; //#29933
                    $k[$j++] = _e; //#29933
                } //#29933
            } else { //#29936
                $k[$j++] = 0; //#29936
            } //#29936
            $put($_.sep, $_.i, $k[--$j]); //#29938
        } //#29938
    }; //#29938
    $k[$j++] = Infinity; //#29941
    $k[$j++] = 0; //#29942
    $forall($_.linsbs, function() { //#29942
        var _j = $k[--$j]; //#29942
        var _k = $k[--$j]; //#29942
        var _l = (_k == 1) ? 0 : 1; //#29942
        $k[$j++] = _k; //#29942
        for (var _m = 0, _n = _j; _m < _n; _m++) { //#29942
            $k[$j++] = _l //#29942
        } //#29942
    }); //#29942
    $astore($a($counttomark() - 1)); //#29943
    $_.bot = $k[--$j]; //#29943
    $j -= 2; //#29943
    $k[$j++] = Infinity; //#29944
    $forall($_.bot, function() { //#29944
        var _s = $k[--$j]; //#29944
        $k[$j++] = $f(1 - _s); //#29944
    }); //#29944
    $_.sep = $a(); //#29944
    $puti($_.sep, 0, $a([0, 0, 0])); //#29945
    $puti($_.sep, $_.sep.length - 4, $a([0, 0, 0, 0])); //#29946
    $k[$j++] = Infinity; //#29947
    for (var _11 = 18, _10 = $_.bot.length - 13; _11 <= _10; _11 += 98) { //#29948
        $k[$j++] = _11; //#29948
    } //#29948
    for (var _14 = 69, _13 = $_.bot.length - 13; _14 <= _13; _14 += 98) { //#29949
        $k[$j++] = _14; //#29949
    } //#29949
    var _15 = $a(); //#29949
    for (var _16 = 0, _17 = _15.length; _16 < _17; _16++) { //#29950
        $k[$j++] = $get(_15, _16); //#29950
        $_.sepfinder(); //#29950
    } //#29950
    if (!$_.usematrix) { //#30003
        $$.rmoveto(0, $_.linheight); //#29953
        var _1F = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.sep],
            ["pixx", $_.sep.length],
            ["pixy", 1],
            ["height", 1 / 72],
            ["width", $_.sep.length / 72],
            ["opt", $_.options]
        ]); //#29960
        $k[$j++] = _1F; //#29961
        bwipp_renmatrix(); //#29961
        $$.rmoveto(1, 1); //#29964
        $k[$j++] = $_.comp; //#29964
        $k[$j++] = $_.options; //#29964
        bwipp_gs1_cc(); //#29964
        bwipp_renmatrix(); //#29964
        $$.restore(); //#29966
    } else { //#30003
        $k[$j++] = 'compsym'; //#29968
        $k[$j++] = $_.comp; //#29968
        $k[$j++] = $_.options; //#29968
        bwipp_gs1_cc(); //#29968
        var _1K = $k[--$j]; //#29968
        $_[$k[--$j]] = _1K; //#29968
        $_.ccpixs = $get($_.compsym, 'pixs'); //#29969
        $_.ccpixx = $get($_.compsym, 'pixx'); //#29970
        $k[$j++] = Infinity; //#29972
        $k[$j++] = 0; //#29973
        $forall($_.linsbs, function() { //#29973
            var _1R = $k[--$j]; //#29973
            var _1S = $k[--$j]; //#29973
            var _1T = (_1S == 0) ? 1 : 0; //#29973
            $k[$j++] = _1S; //#29973
            for (var _1U = 0, _1V = $cvi(_1R); _1U < _1V; _1U++) { //#29973
                $k[$j++] = _1T //#29973
            } //#29973
        }); //#29973
        $_.linpixs = $a(); //#29973
        $k[$j++] = Infinity; //#29975
        $k[$j++] = 0; //#29975
        $aload($_.sep); //#29975
        $_.sep = $a(); //#29975
        $_.linheight = ~~$_.linheight; //#29977
        $_.diff = $f($_.linpixs.length - $_.ccpixx); //#29978
        $k[$j++] = Infinity; //#29979
        for (var _1d = 0, _1e = $f($_.diff - 2); _1d < _1e; _1d++) { //#29979
            $k[$j++] = 0; //#29979
        } //#29979
        $_.ccrpad = $a(); //#29979
        $k[$j++] = Infinity; //#29980
        for (var _1j = 0, _1k = $_.ccpixx, _1i = $_.ccpixs.length - 1; _1k < 0 ? _1j >= _1i : _1j <= _1i; _1j += _1k) { //#29984
            $_.i = _1j; //#29982
            $k[$j++] = 0; //#29983
            $k[$j++] = 0; //#29983
            $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#29983
            $aload($_.ccrpad); //#29983
        } //#29983
        $aload($_.sep); //#29985
        for (var _1s = 0, _1t = $_.linheight; _1s < _1t; _1s++) { //#29985
            $aload($_.linpixs); //#29985
        } //#29985
        $_.pixs = $a(); //#29985
        $_.pixx = $_.linpixs.length; //#29988
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#29989
        var _25 = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#29997
        $k[$j++] = _25; //#30004
        if (!$_.dontdraw) { //#30004
            $$.save(); //#30001
            bwipp_renmatrix(); //#30002
            $$.restore(); //#30003
        } //#30003
    } //#30003
    $_ = Object.getPrototypeOf($_); //#30007
} //bwipp_databarexpandedcomposite
function bwipp_databarexpandedstackedcomposite() {
    $_ = Object.create($_); //#30038
    $_.dontdraw = false; //#30041
    $_.usematrix = false; //#30042
    $_.parse = false; //#30043
    $_.dontlint = false; //#30044
    $_.lintreqs = true; //#30045
    $k[$j++] = $_; //#30047
    bwipp_processoptions(); //#30047
    $_.options = $k[--$j]; //#30047
    $_.barcode = $k[--$j]; //#30048
    if ($_.dontdraw) { //#30050
        $_.usematrix = true; //#30050
    } //#30050
    $search($_.barcode, "|"); //#30053
    if ($k[--$j]) { //#30058
        $_.linear = $k[--$j]; //#30054
        $j--; //#30055
        $_.comp = $k[--$j]; //#30056
    } else { //#30058
        $j--; //#30058
        $k[$j++] = 'bwipp.missingCompositeComponent#30058'; //#30058
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#30058
        bwipp_raiseerror(); //#30058
    } //#30058
    if (!$_.usematrix) { //#30061
        $$.save(); //#30061
    } //#30061
    $put($_.options, "lintype", "databarexpandedstacked"); //#30063
    $put($_.options, "linkage", true); //#30064
    $put($_.options, "inkspreadv", 0); //#30065
    $put($_.options, "dontdraw", true); //#30066
    $put($_.options, "dontlint", true); //#30067
    var _F = $s($_.linear.length + $_.comp.length); //#30070
    $puti(_F, 0, $_.linear); //#30071
    $puti(_F, $_.linear.length, $_.comp); //#30072
    $k[$j++] = _F; //#30073
    $k[$j++] = 'ai'; //#30073
    bwipp_gs1process(); //#30073
    $j -= 3; //#30073
    $k[$j++] = $_.linear; //#30076
    $k[$j++] = $_.options; //#30076
    bwipp_databarexpandedstacked(); //#30076
    var _L = $k[--$j]; //#30077
    $_.bot = $geti($get(_L, "pixs"), 0, $get(_L, "pixx")); //#30077
    $_.linheight = $get(_L, "pixy"); //#30078
    $k[$j++] = _L; //#30079
    if (!$_.usematrix) { //#30079
        bwipp_renmatrix(); //#30079
    } else { //#30079
        $_.linpixs = $get($k[--$j], 'pixs'); //#30079
    } //#30079
    $_.sepfinder = function() {
        $_.fp = $k[--$j]; //#30083
        for (var _X = $_.fp, _W = $f($_.fp + 12); _X <= _W; _X += 1) { //#30096
            $_.i = _X; //#30085
            if ($get($_.bot, $_.i) == 0) { //#30093
                if ($get($_.bot, $_.i - 1) == 1) { //#30090
                    $k[$j++] = 1; //#30088
                } else { //#30090
                    var _h = ($get($_.sep, $_.i - 1) == 0) ? 1 : 0; //#30090
                    $k[$j++] = _h; //#30090
                } //#30090
            } else { //#30093
                $k[$j++] = 0; //#30093
            } //#30093
            $put($_.sep, $_.i, $k[--$j]); //#30095
        } //#30095
    }; //#30095
    $k[$j++] = Infinity; //#30098
    var _l = $_.bot; //#30098
    for (var _m = 0, _n = _l.length; _m < _n; _m++) { //#30098
        $k[$j++] = $f(1 - $get(_l, _m)); //#30098
    } //#30098
    $_.sep = $a(); //#30098
    $puti($_.sep, 0, $a([0, 0, 0, 0])); //#30099
    $puti($_.sep, $_.sep.length - 4, $a([0, 0, 0, 0])); //#30100
    $k[$j++] = Infinity; //#30101
    for (var _x = 19, _w = $_.bot.length - 13; _x <= _w; _x += 98) { //#30102
        $k[$j++] = _x; //#30102
    } //#30102
    for (var _10 = 70, _z = $_.bot.length - 13; _10 <= _z; _10 += 98) { //#30103
        $k[$j++] = _10; //#30103
    } //#30103
    var _11 = $a(); //#30103
    for (var _12 = 0, _13 = _11.length; _12 < _13; _12++) { //#30104
        $k[$j++] = $get(_11, _12); //#30104
        $_.sepfinder(); //#30104
    } //#30104
    if (!$_.usematrix) { //#30151
        $$.rmoveto(0, $_.linheight); //#30106
        var _1B = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.sep],
            ["pixx", $_.sep.length],
            ["pixy", 1],
            ["height", 1 / 72],
            ["width", $_.sep.length / 72],
            ["opt", $_.options]
        ]); //#30113
        $k[$j++] = _1B; //#30114
        bwipp_renmatrix(); //#30114
        var _1E = ($get($_.bot, 0) == 0) ? 2 : 0; //#30117
        $$.rmoveto(_1E, 1); //#30117
        $k[$j++] = $_.comp; //#30118
        $k[$j++] = $_.options; //#30118
        bwipp_gs1_cc(); //#30118
        bwipp_renmatrix(); //#30118
        $$.restore(); //#30120
    } else { //#30151
        $k[$j++] = 'compsym'; //#30122
        $k[$j++] = $_.comp; //#30122
        $k[$j++] = $_.options; //#30122
        bwipp_gs1_cc(); //#30122
        var _1J = $k[--$j]; //#30122
        $_[$k[--$j]] = _1J; //#30122
        $_.ccpixs = $get($_.compsym, 'pixs'); //#30123
        $_.ccpixx = $get($_.compsym, 'pixx'); //#30124
        $_.pixx = $_.sep.length; //#30126
        $k[$j++] = Infinity; //#30127
        for (var _1S = 0, _1T = ~~(($f($f($_.pixx - $_.ccpixx) + 1)) / 2); _1S < _1T; _1S++) { //#30127
            $k[$j++] = 0; //#30127
        } //#30127
        $_.cclpad = $a(); //#30127
        $k[$j++] = Infinity; //#30128
        for (var _1X = 0, _1Y = ~~($f($_.pixx - $_.ccpixx) / 2); _1X < _1Y; _1X++) { //#30128
            $k[$j++] = 0; //#30128
        } //#30128
        $_.ccrpad = $a(); //#30128
        $k[$j++] = Infinity; //#30129
        for (var _1d = 0, _1e = $_.ccpixx, _1c = $_.ccpixs.length - 1; _1e < 0 ? _1d >= _1c : _1d <= _1c; _1d += _1e) { //#30133
            $_.i = _1d; //#30131
            $aload($_.cclpad); //#30132
            $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#30132
            $aload($_.ccrpad); //#30132
        } //#30132
        $aload($_.sep); //#30134
        $aload($_.linpixs); //#30134
        $_.pixs = $a(); //#30134
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#30137
        var _1w = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#30145
        $k[$j++] = _1w; //#30152
        if (!$_.dontdraw) { //#30152
            $$.save(); //#30149
            bwipp_renmatrix(); //#30150
            $$.restore(); //#30151
        } //#30151
    } //#30151
    $_ = Object.getPrototypeOf($_); //#30155
} //bwipp_databarexpandedstackedcomposite
function bwipp_gs1_128composite() {
    $_ = Object.create($_); //#30187
    $_.dontdraw = false; //#30190
    $_.usematrix = false; //#30191
    $_.parse = false; //#30192
    $_.dontlint = false; //#30193
    $_.lintreqs = true; //#30194
    $k[$j++] = $_; //#30196
    bwipp_processoptions(); //#30196
    $_.options = $k[--$j]; //#30196
    $_.barcode = $k[--$j]; //#30197
    if ($_.dontdraw) { //#30199
        $_.usematrix = true; //#30199
    } //#30199
    $search($_.barcode, "|"); //#30202
    if ($k[--$j]) { //#30207
        $_.linear = $k[--$j]; //#30203
        $j--; //#30204
        $_.comp = $k[--$j]; //#30205
    } else { //#30207
        $j--; //#30207
        $k[$j++] = 'bwipp.missingCompositeComponent#30207'; //#30207
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#30207
        bwipp_raiseerror(); //#30207
    } //#30207
    if (!$_.usematrix) { //#30210
        $$.save(); //#30210
    } //#30210
    $put($_.options, "inkspreadv", 0); //#30212
    $put($_.options, "dontdraw", true); //#30213
    $put($_.options, "dontlint", true); //#30214
    var _D = $s($_.linear.length + $_.comp.length); //#30217
    $puti(_D, 0, $_.linear); //#30218
    $puti(_D, $_.linear.length, $_.comp); //#30219
    $k[$j++] = _D; //#30220
    $k[$j++] = 'ai'; //#30220
    bwipp_gs1process(); //#30220
    $j -= 3; //#30220
    $put($_.options, "linkagea", true); //#30223
    $k[$j++] = $_.linear; //#30224
    $k[$j++] = Infinity; //#30224
    $forall($_.options); //#30224
    var _K = $d(); //#30224
    $k[$j++] = _K; //#30224
    bwipp_gs1_128(); //#30224
    var _M = $get($k[--$j], "sbs"); //#30225
    $k[$j++] = 0; //#30225
    $forall(_M, function() { //#30225
        var _N = $k[--$j]; //#30225
        var _O = $k[--$j]; //#30225
        $k[$j++] = $f(_O + _N); //#30225
    }); //#30225
    $_.linwidth = $k[--$j]; //#30225
    $put($_.options, "lintype", "gs1-128"); //#30228
    $put($_.options, "linwidth", $_.linwidth); //#30229
    $k[$j++] = $_.comp; //#30230
    $k[$j++] = Infinity; //#30230
    $forall($_.options); //#30230
    var _V = $d(); //#30230
    $k[$j++] = _V; //#30230
    bwipp_gs1_cc(); //#30230
    $_.compsym = $k[--$j]; //#30230
    if ($get($_.compsym, "pixx") == 99) { //#30231
        $k[$j++] = "a"; //#30231
    } else { //#30231
        $k[$j++] = "c"; //#30231
    } //#30231
    $_.linktype = $k[--$j]; //#30231
    if ($eq($_.linktype, "a")) { //#30239
        $put($_.options, "linkagea", true); //#30235
        $put($_.options, "linkagec", false); //#30236
    } else { //#30239
        $put($_.options, "linkagea", false); //#30238
        $put($_.options, "linkagec", true); //#30239
    } //#30239
    $k[$j++] = $_.linear; //#30241
    $k[$j++] = Infinity; //#30241
    var _g = $_.options; //#30241
    $forall(_g); //#30241
    var _h = $d(); //#30241
    $k[$j++] = _h; //#30241
    bwipp_gs1_128(); //#30241
    var _i = $k[--$j]; //#30242
    $_.linsbs = $get(_i, "sbs"); //#30242
    $_.linheight = $get($get(_i, "bhs"), 0) * 72; //#30243
    $k[$j++] = _i; //#30244
    if (!$_.usematrix) { //#30244
        bwipp_renlinear(); //#30244
    } else { //#30244
        $j--; //#30244
    } //#30244
    $k[$j++] = Infinity; //#30247
    $k[$j++] = 1; //#30248
    $forall($_.linsbs, function() { //#30248
        var _o = $k[--$j]; //#30248
        var _p = $k[--$j]; //#30248
        var _q = (_p == 0) ? 1 : 0; //#30248
        $k[$j++] = _p; //#30248
        for (var _r = 0, _s = _o; _r < _s; _r++) { //#30248
            $k[$j++] = _q //#30248
        } //#30248
    }); //#30248
    $astore($a($counttomark() - 1)); //#30249
    $_.sep = $k[--$j]; //#30249
    $j -= 2; //#30249
    if (!$_.usematrix) { //#30260
        $$.rmoveto(0, $_.linheight); //#30251
        var _12 = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.sep],
            ["pixx", $_.sep.length],
            ["pixy", 1],
            ["height", 1 / 72],
            ["width", $_.sep.length / 72],
            ["opt", $_.options]
        ]); //#30258
        $k[$j++] = _12; //#30259
        bwipp_renmatrix(); //#30259
    } //#30259
    if ($eq($_.linktype, "a")) { //#30268
        $_.s = ~~($f($_.linwidth - 2) / 11); //#30264
        $_.p = ~~(($_.s - 9) / 2); //#30265
        $k[$j++] = 'x'; //#30266
        $k[$j++] = ((($_.s - $_.p) - 1) * 11) + 10; //#30266
        if ($_.p == 0) { //#30266
            var _19 = $k[--$j]; //#30266
            $k[$j++] = $f(_19 + 2); //#30266
        } //#30266
        var _1A = $k[--$j]; //#30266
        $_[$k[--$j]] = $f(_1A - 99); //#30266
    } else { //#30268
        $_.x = -7; //#30268
    } //#30268
    if (!$_.usematrix) { //#30325
        $$.rmoveto($_.x, 1); //#30272
        $k[$j++] = $_.compsym; //#30272
        bwipp_renmatrix(); //#30272
        $$.restore(); //#30274
    } else { //#30325
        $_.ccpixs = $get($_.compsym, 'pixs'); //#30276
        $_.ccpixx = $get($_.compsym, 'pixx'); //#30277
        $k[$j++] = Infinity; //#30279
        $forall($_.linsbs, function() { //#30280
            var _1K = $k[--$j]; //#30280
            var _1L = $k[--$j]; //#30280
            var _1M = (_1L == 1) ? 0 : 1; //#30280
            $k[$j++] = _1L; //#30280
            for (var _1N = 0, _1O = _1K; _1N < _1O; _1N++) { //#30280
                $k[$j++] = _1M //#30280
            } //#30280
        }); //#30280
        $_.linpixs = $a(); //#30280
        if ($_.x > 0) { //#30288
            $k[$j++] = Infinity; //#30284
            for (var _1S = 0, _1T = $_.x; _1S < _1T; _1S++) { //#30284
                $k[$j++] = 0; //#30284
            } //#30284
            $_.cclpad = $a(); //#30284
            $_.linlpad = $a(0); //#30285
        } else { //#30288
            $_.cclpad = $a(0); //#30287
            $k[$j++] = Infinity; //#30288
            for (var _1Y = 0, _1Z = -$_.x; _1Y < _1Z; _1Y++) { //#30288
                $k[$j++] = 0; //#30288
            } //#30288
            $_.linlpad = $a(); //#30288
        } //#30288
        $_.diff = $f($_.linwidth - $f($_.ccpixx + $_.x)); //#30291
        if ($_.diff > 0) { //#30297
            $k[$j++] = Infinity; //#30293
            for (var _1g = 0, _1h = $_.diff; _1g < _1h; _1g++) { //#30293
                $k[$j++] = 0; //#30293
            } //#30293
            $_.ccrpad = $a(); //#30293
            $_.linrpad = $a(0); //#30294
        } else { //#30297
            $_.ccrpad = $a(0); //#30296
            $k[$j++] = Infinity; //#30297
            for (var _1m = 0, _1n = -$_.diff; _1m < _1n; _1m++) { //#30297
                $k[$j++] = 0; //#30297
            } //#30297
            $_.linrpad = $a(); //#30297
        } //#30297
        $_.linheight = ~~$_.linheight; //#30300
        $k[$j++] = Infinity; //#30301
        for (var _1t = 0, _1u = $_.ccpixx, _1s = $_.ccpixs.length - 1; _1u < 0 ? _1t >= _1s : _1t <= _1s; _1t += _1u) { //#30305
            $_.i = _1t; //#30303
            $aload($_.cclpad); //#30304
            $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#30304
            $aload($_.ccrpad); //#30304
        } //#30304
        $aload($_.linlpad); //#30306
        $aload($_.sep); //#30306
        $aload($_.linrpad); //#30306
        for (var _25 = 0, _26 = $_.linheight; _25 < _26; _25++) { //#30307
            $aload($_.linlpad); //#30307
            $aload($_.linpixs); //#30307
            $aload($_.linrpad); //#30307
        } //#30307
        $_.pixs = $a(); //#30307
        $_.pixx = $f($f($_.cclpad.length + $_.ccpixx) + $_.ccrpad.length); //#30310
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#30311
        var _2M = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#30319
        $k[$j++] = _2M; //#30326
        if (!$_.dontdraw) { //#30326
            $$.save(); //#30323
            bwipp_renmatrix(); //#30324
            $$.restore(); //#30325
        } //#30325
    } //#30325
    $_ = Object.getPrototypeOf($_); //#30329
} //bwipp_gs1_128composite
function bwipp_gs1datamatrix() {
    $_ = Object.create($_); //#30359
    $_.dontdraw = false; //#30362
    $_.parse = false; //#30363
    $_.dontlint = false; //#30364
    $_.lintreqs = true; //#30365
    $_.gssep = false; //#30366
    $k[$j++] = $_; //#30368
    bwipp_processoptions(); //#30368
    $_.options = $k[--$j]; //#30368
    $_.barcode = $k[--$j]; //#30369
    $k[$j++] = $_.barcode; //#30371
    $k[$j++] = 'ai'; //#30371
    bwipp_gs1process(); //#30371
    $_.fncs = $k[--$j]; //#30372
    $_.vals = $k[--$j]; //#30373
    $_.ais = $k[--$j]; //#30374
    $_.fnc1 = -1; //#30377
    $_.dmtx = $a([$_.fnc1]); //#30378
    for (var _A = 0, _9 = $_.ais.length - 1; _A <= _9; _A += 1) { //#30394
        $_.i = _A; //#30380
        $_.ai = $get($_.ais, $_.i); //#30381
        $_.val = $get($_.vals, $_.i); //#30382
        var _K = $a(($_.dmtx.length + $_.ai.length) + $_.val.length); //#30383
        $puti(_K, 0, $_.dmtx); //#30384
        $k[$j++] = _K; //#30385
        $k[$j++] = _K; //#30385
        $k[$j++] = $_.dmtx.length; //#30385
        $k[$j++] = $_.ai; //#30385
        $k[$j++] = Infinity; //#30385
        var _O = $k[--$j]; //#30385
        var _P = $k[--$j]; //#30385
        $k[$j++] = _O; //#30385
        $forall(_P); //#30385
        var _Q = $a(); //#30385
        var _R = $k[--$j]; //#30385
        $puti($k[--$j], _R, _Q); //#30385
        var _T = $k[--$j]; //#30386
        $k[$j++] = _T; //#30386
        $k[$j++] = _T; //#30386
        $k[$j++] = $_.dmtx.length + $_.ai.length; //#30386
        $k[$j++] = $_.val; //#30386
        $k[$j++] = Infinity; //#30386
        var _X = $k[--$j]; //#30386
        var _Y = $k[--$j]; //#30386
        $k[$j++] = _X; //#30386
        $forall(_Y); //#30386
        var _Z = $a(); //#30386
        var _a = $k[--$j]; //#30386
        $puti($k[--$j], _a, _Z); //#30386
        $_.dmtx = $k[--$j]; //#30387
        if (($_.i != ($_.ais.length - 1)) && $get($_.fncs, $_.i)) { //#30393
            var _j = $a($_.dmtx.length + 1); //#30389
            $puti(_j, 0, $_.dmtx); //#30390
            $k[$j++] = _j; //#30391
            $k[$j++] = _j; //#30391
            $k[$j++] = $_.dmtx.length; //#30391
            if ($_.gssep) { //#30391
                $k[$j++] = 29; //#30391
            } else { //#30391
                $k[$j++] = $_.fnc1; //#30391
            } //#30391
            var _o = $k[--$j]; //#30391
            var _p = $k[--$j]; //#30391
            $put($k[--$j], _p, _o); //#30391
            $_.dmtx = $k[--$j]; //#30392
        } //#30392
    } //#30392
    $_.barcode = $s(($_.dmtx.length + 1) * 5); //#30397
    $_.i = 0; //#30398
    $_.j = 0; //#30398
    for (;;) { //#30408
        if ($_.i == $_.dmtx.length) { //#30399
            break; //#30399
        } //#30399
        var _y = $get($_.dmtx, $_.i); //#30400
        $k[$j++] = _y; //#30405
        if (_y == $_.fnc1) { //#30404
            $j--; //#30401
            $puti($_.barcode, $_.j, "^FNC1"); //#30401
            $_.j = $_.j + 4; //#30402
        } else { //#30404
            $put($_.barcode, $_.j, $k[--$j]); //#30404
        } //#30404
        $_.i = $_.i + 1; //#30406
        $_.j = $_.j + 1; //#30407
    } //#30407
    $_.barcode = $geti($_.barcode, 0, $_.j); //#30409
    delete $_.options["parse"]; //#30412
    $put($_.options, "dontdraw", true); //#30413
    $put($_.options, "parsefnc", true); //#30414
    $k[$j++] = 'args'; //#30415
    $k[$j++] = $_.barcode; //#30415
    $k[$j++] = $_.options; //#30415
    bwipp_datamatrix(); //#30415
    var _1G = $k[--$j]; //#30415
    $_[$k[--$j]] = _1G; //#30415
    $put($_.args, "opt", $_.options); //#30417
    $k[$j++] = $_.args; //#30420
    if (!$_.dontdraw) { //#30420
        bwipp_renmatrix(); //#30420
    } //#30420
    $_ = Object.getPrototypeOf($_); //#30422
} //bwipp_gs1datamatrix
function bwipp_gs1datamatrixrectangular() {
    $_ = Object.create($_); //#30452
    $_.parse = false; //#30455
    $_.dontlint = false; //#30456
    $_.lintreqs = true; //#30457
    $_.dontdraw = false; //#30458
    $_.gssep = false; //#30459
    $k[$j++] = $_; //#30461
    bwipp_processoptions(); //#30461
    $_.options = $k[--$j]; //#30461
    $_.barcode = $k[--$j]; //#30462
    $k[$j++] = $_.barcode; //#30464
    $k[$j++] = 'ai'; //#30464
    bwipp_gs1process(); //#30464
    $_.fncs = $k[--$j]; //#30465
    $_.vals = $k[--$j]; //#30466
    $_.ais = $k[--$j]; //#30467
    $_.fnc1 = -1; //#30470
    $_.dmtx = $a([$_.fnc1]); //#30471
    for (var _A = 0, _9 = $_.ais.length - 1; _A <= _9; _A += 1) { //#30487
        $_.i = _A; //#30473
        $_.ai = $get($_.ais, $_.i); //#30474
        $_.val = $get($_.vals, $_.i); //#30475
        var _K = $a(($_.dmtx.length + $_.ai.length) + $_.val.length); //#30476
        $puti(_K, 0, $_.dmtx); //#30477
        $k[$j++] = _K; //#30478
        $k[$j++] = _K; //#30478
        $k[$j++] = $_.dmtx.length; //#30478
        $k[$j++] = $_.ai; //#30478
        $k[$j++] = Infinity; //#30478
        var _O = $k[--$j]; //#30478
        var _P = $k[--$j]; //#30478
        $k[$j++] = _O; //#30478
        $forall(_P); //#30478
        var _Q = $a(); //#30478
        var _R = $k[--$j]; //#30478
        $puti($k[--$j], _R, _Q); //#30478
        var _T = $k[--$j]; //#30479
        $k[$j++] = _T; //#30479
        $k[$j++] = _T; //#30479
        $k[$j++] = $_.dmtx.length + $_.ai.length; //#30479
        $k[$j++] = $_.val; //#30479
        $k[$j++] = Infinity; //#30479
        var _X = $k[--$j]; //#30479
        var _Y = $k[--$j]; //#30479
        $k[$j++] = _X; //#30479
        $forall(_Y); //#30479
        var _Z = $a(); //#30479
        var _a = $k[--$j]; //#30479
        $puti($k[--$j], _a, _Z); //#30479
        $_.dmtx = $k[--$j]; //#30480
        if (($_.i != ($_.ais.length - 1)) && $get($_.fncs, $_.i)) { //#30486
            var _j = $a($_.dmtx.length + 1); //#30482
            $puti(_j, 0, $_.dmtx); //#30483
            $k[$j++] = _j; //#30484
            $k[$j++] = _j; //#30484
            $k[$j++] = $_.dmtx.length; //#30484
            if ($_.gssep) { //#30484
                $k[$j++] = 29; //#30484
            } else { //#30484
                $k[$j++] = $_.fnc1; //#30484
            } //#30484
            var _o = $k[--$j]; //#30484
            var _p = $k[--$j]; //#30484
            $put($k[--$j], _p, _o); //#30484
            $_.dmtx = $k[--$j]; //#30485
        } //#30485
    } //#30485
    $_.barcode = $s(($_.dmtx.length + 1) * 5); //#30490
    $_.i = 0; //#30491
    $_.j = 0; //#30491
    for (;;) { //#30501
        if ($_.i == $_.dmtx.length) { //#30492
            break; //#30492
        } //#30492
        var _y = $get($_.dmtx, $_.i); //#30493
        $k[$j++] = _y; //#30498
        if (_y == $_.fnc1) { //#30497
            $j--; //#30494
            $puti($_.barcode, $_.j, "^FNC1"); //#30494
            $_.j = $_.j + 4; //#30495
        } else { //#30497
            $put($_.barcode, $_.j, $k[--$j]); //#30497
        } //#30497
        $_.i = $_.i + 1; //#30499
        $_.j = $_.j + 1; //#30500
    } //#30500
    $_.barcode = $geti($_.barcode, 0, $_.j); //#30502
    delete $_.options["parse"]; //#30505
    $put($_.options, "dontdraw", true); //#30506
    $put($_.options, "parsefnc", true); //#30507
    $put($_.options, "format", "rectangle"); //#30508
    $k[$j++] = 'args'; //#30509
    $k[$j++] = $_.barcode; //#30509
    $k[$j++] = $_.options; //#30509
    bwipp_datamatrix(); //#30509
    var _1H = $k[--$j]; //#30509
    $_[$k[--$j]] = _1H; //#30509
    $put($_.args, "opt", $_.options); //#30511
    $k[$j++] = $_.args; //#30514
    if (!$_.dontdraw) { //#30514
        bwipp_renmatrix(); //#30514
    } //#30514
    $_ = Object.getPrototypeOf($_); //#30516
} //bwipp_gs1datamatrixrectangular
function bwipp_gs1dldatamatrix() {
    $_ = Object.create($_); //#30546
    $_.parse = false; //#30549
    $_.dontlint = false; //#30550
    $_.lintreqs = true; //#30551
    $_.dontdraw = false; //#30552
    $k[$j++] = $_; //#30554
    bwipp_processoptions(); //#30554
    $_.options = $k[--$j]; //#30554
    $_.barcode = $k[--$j]; //#30555
    var _3 = new Map([
        ["parse", $_.parse],
        ["parseonly", true],
        ["parsefnc", false]
    ]); //#30561
    $_.fncvals = _3; //#30562
    $k[$j++] = 'barcode'; //#30563
    $k[$j++] = $_.barcode; //#30563
    $k[$j++] = $_.fncvals; //#30563
    bwipp_parseinput(); //#30563
    var _6 = $k[--$j]; //#30563
    $_[$k[--$j]] = _6; //#30563
    $k[$j++] = $_.barcode; //#30565
    $k[$j++] = 'dl'; //#30565
    bwipp_gs1process(); //#30565
    $j -= 3; //#30565
    delete $_.options["parse"]; //#30568
    $put($_.options, "dontdraw", true); //#30569
    $k[$j++] = 'args'; //#30570
    $k[$j++] = $_.barcode; //#30570
    $k[$j++] = $_.options; //#30570
    bwipp_datamatrix(); //#30570
    var _D = $k[--$j]; //#30570
    $_[$k[--$j]] = _D; //#30570
    $put($_.args, "opt", $_.options); //#30572
    $k[$j++] = $_.args; //#30575
    if (!$_.dontdraw) { //#30575
        bwipp_renmatrix(); //#30575
    } //#30575
    $_ = Object.getPrototypeOf($_); //#30577
} //bwipp_gs1dldatamatrix
function bwipp_gs1qrcode() {
    $_ = Object.create($_); //#30606
    $_.parse = false; //#30609
    $_.dontlint = false; //#30610
    $_.lintreqs = true; //#30611
    $_.dontdraw = false; //#30612
    $k[$j++] = $_; //#30614
    bwipp_processoptions(); //#30614
    $_.options = $k[--$j]; //#30614
    $_.barcode = $k[--$j]; //#30615
    $k[$j++] = $_.barcode; //#30617
    $k[$j++] = 'ai'; //#30617
    bwipp_gs1process(); //#30617
    $_.fncs = $k[--$j]; //#30618
    $_.vals = $k[--$j]; //#30619
    $_.ais = $k[--$j]; //#30620
    $_.fnc1 = -1; //#30623
    $_.qrc = $a([$_.fnc1]); //#30624
    for (var _A = 0, _9 = $_.ais.length - 1; _A <= _9; _A += 1) { //#30640
        $_.i = _A; //#30626
        $_.ai = $get($_.ais, $_.i); //#30627
        $_.val = $get($_.vals, $_.i); //#30628
        var _K = $a(($_.qrc.length + $_.ai.length) + $_.val.length); //#30629
        $puti(_K, 0, $_.qrc); //#30630
        $k[$j++] = _K; //#30631
        $k[$j++] = _K; //#30631
        $k[$j++] = $_.qrc.length; //#30631
        $k[$j++] = $_.ai; //#30631
        $k[$j++] = Infinity; //#30631
        var _O = $k[--$j]; //#30631
        var _P = $k[--$j]; //#30631
        $k[$j++] = _O; //#30631
        $forall(_P); //#30631
        var _Q = $a(); //#30631
        var _R = $k[--$j]; //#30631
        $puti($k[--$j], _R, _Q); //#30631
        var _T = $k[--$j]; //#30632
        $k[$j++] = _T; //#30632
        $k[$j++] = _T; //#30632
        $k[$j++] = $_.qrc.length + $_.ai.length; //#30632
        $k[$j++] = $_.val; //#30632
        $k[$j++] = Infinity; //#30632
        var _X = $k[--$j]; //#30632
        var _Y = $k[--$j]; //#30632
        $k[$j++] = _X; //#30632
        $forall(_Y); //#30632
        var _Z = $a(); //#30632
        var _a = $k[--$j]; //#30632
        $puti($k[--$j], _a, _Z); //#30632
        $_.qrc = $k[--$j]; //#30633
        if (($_.i != ($_.ais.length - 1)) && $get($_.fncs, $_.i)) { //#30639
            var _j = $a($_.qrc.length + 1); //#30635
            $puti(_j, 0, $_.qrc); //#30636
            $put(_j, $_.qrc.length, $_.fnc1); //#30637
            $_.qrc = _j; //#30638
        } //#30638
    } //#30638
    $_.barcode = $s(($_.qrc.length + 1) * 5); //#30643
    $_.i = 0; //#30644
    $_.j = 0; //#30644
    for (;;) { //#30654
        if ($_.i == $_.qrc.length) { //#30645
            break; //#30645
        } //#30645
        var _t = $get($_.qrc, $_.i); //#30646
        $k[$j++] = _t; //#30651
        if (_t == $_.fnc1) { //#30650
            $j--; //#30647
            $puti($_.barcode, $_.j, "^FNC1"); //#30647
            $_.j = $_.j + 4; //#30648
        } else { //#30650
            $put($_.barcode, $_.j, $k[--$j]); //#30650
        } //#30650
        $_.i = $_.i + 1; //#30652
        $_.j = $_.j + 1; //#30653
    } //#30653
    $_.barcode = $geti($_.barcode, 0, $_.j); //#30655
    delete $_.options["parse"]; //#30658
    $put($_.options, "dontdraw", true); //#30659
    $put($_.options, "parsefnc", true); //#30660
    $k[$j++] = 'args'; //#30661
    $k[$j++] = $_.barcode; //#30661
    $k[$j++] = $_.options; //#30661
    bwipp_qrcode(); //#30661
    var _1B = $k[--$j]; //#30661
    $_[$k[--$j]] = _1B; //#30661
    $put($_.args, "opt", $_.options); //#30663
    $k[$j++] = $_.args; //#30666
    if (!$_.dontdraw) { //#30666
        bwipp_renmatrix(); //#30666
    } //#30666
    $_ = Object.getPrototypeOf($_); //#30668
} //bwipp_gs1qrcode
function bwipp_gs1dlqrcode() {
    $_ = Object.create($_); //#30698
    $_.parse = false; //#30701
    $_.dontlint = false; //#30702
    $_.lintreqs = true; //#30703
    $_.dontdraw = false; //#30704
    $k[$j++] = $_; //#30706
    bwipp_processoptions(); //#30706
    $_.options = $k[--$j]; //#30706
    $_.barcode = $k[--$j]; //#30707
    var _3 = new Map([
        ["parse", $_.parse],
        ["parseonly", true],
        ["parsefnc", false]
    ]); //#30713
    $_.fncvals = _3; //#30714
    $k[$j++] = 'barcode'; //#30715
    $k[$j++] = $_.barcode; //#30715
    $k[$j++] = $_.fncvals; //#30715
    bwipp_parseinput(); //#30715
    var _6 = $k[--$j]; //#30715
    $_[$k[--$j]] = _6; //#30715
    $k[$j++] = $_.barcode; //#30717
    $k[$j++] = 'dl'; //#30717
    bwipp_gs1process(); //#30717
    $j -= 3; //#30717
    delete $_.options["parse"]; //#30720
    $put($_.options, "dontdraw", true); //#30721
    $k[$j++] = 'args'; //#30722
    $k[$j++] = $_.barcode; //#30722
    $k[$j++] = $_.options; //#30722
    bwipp_qrcode(); //#30722
    var _D = $k[--$j]; //#30722
    $_[$k[--$j]] = _D; //#30722
    $put($_.args, "opt", $_.options); //#30724
    $k[$j++] = $_.args; //#30727
    if (!$_.dontdraw) { //#30727
        bwipp_renmatrix(); //#30727
    } //#30727
    $_ = Object.getPrototypeOf($_); //#30729
} //bwipp_gs1dlqrcode
function bwipp_gs1dotcode() {
    $_ = Object.create($_); //#30759
    $_.dontdraw = false; //#30762
    $_.parse = false; //#30763
    $_.dontlint = false; //#30764
    $_.lintreqs = true; //#30765
    $k[$j++] = $_; //#30767
    bwipp_processoptions(); //#30767
    $_.options = $k[--$j]; //#30767
    $_.barcode = $k[--$j]; //#30768
    $k[$j++] = $_.barcode; //#30770
    $k[$j++] = 'ai'; //#30770
    bwipp_gs1process(); //#30770
    $_.fncs = $k[--$j]; //#30771
    $_.vals = $k[--$j]; //#30772
    $_.ais = $k[--$j]; //#30773
    $_.fnc1 = -1; //#30776
    $_.dmtx = $a([$_.fnc1]); //#30777
    for (var _A = 0, _9 = $_.ais.length - 1; _A <= _9; _A += 1) { //#30793
        $_.i = _A; //#30779
        $_.ai = $get($_.ais, $_.i); //#30780
        $_.val = $get($_.vals, $_.i); //#30781
        var _K = $a(($_.dmtx.length + $_.ai.length) + $_.val.length); //#30782
        $puti(_K, 0, $_.dmtx); //#30783
        $k[$j++] = _K; //#30784
        $k[$j++] = _K; //#30784
        $k[$j++] = $_.dmtx.length; //#30784
        $k[$j++] = $_.ai; //#30784
        $k[$j++] = Infinity; //#30784
        var _O = $k[--$j]; //#30784
        var _P = $k[--$j]; //#30784
        $k[$j++] = _O; //#30784
        $forall(_P); //#30784
        var _Q = $a(); //#30784
        var _R = $k[--$j]; //#30784
        $puti($k[--$j], _R, _Q); //#30784
        var _T = $k[--$j]; //#30785
        $k[$j++] = _T; //#30785
        $k[$j++] = _T; //#30785
        $k[$j++] = $_.dmtx.length + $_.ai.length; //#30785
        $k[$j++] = $_.val; //#30785
        $k[$j++] = Infinity; //#30785
        var _X = $k[--$j]; //#30785
        var _Y = $k[--$j]; //#30785
        $k[$j++] = _X; //#30785
        $forall(_Y); //#30785
        var _Z = $a(); //#30785
        var _a = $k[--$j]; //#30785
        $puti($k[--$j], _a, _Z); //#30785
        $_.dmtx = $k[--$j]; //#30786
        if (($_.i != ($_.ais.length - 1)) && $get($_.fncs, $_.i)) { //#30792
            var _j = $a($_.dmtx.length + 1); //#30788
            $puti(_j, 0, $_.dmtx); //#30789
            $put(_j, $_.dmtx.length, $_.fnc1); //#30790
            $_.dmtx = _j; //#30791
        } //#30791
    } //#30791
    $_.barcode = $s(($_.dmtx.length + 1) * 5); //#30796
    $_.i = 0; //#30797
    $_.j = 0; //#30797
    for (;;) { //#30807
        if ($_.i == $_.dmtx.length) { //#30798
            break; //#30798
        } //#30798
        var _t = $get($_.dmtx, $_.i); //#30799
        $k[$j++] = _t; //#30804
        if (_t == $_.fnc1) { //#30803
            $j--; //#30800
            $puti($_.barcode, $_.j, "^FNC1"); //#30800
            $_.j = $_.j + 4; //#30801
        } else { //#30803
            $put($_.barcode, $_.j, $k[--$j]); //#30803
        } //#30803
        $_.i = $_.i + 1; //#30805
        $_.j = $_.j + 1; //#30806
    } //#30806
    $_.barcode = $geti($_.barcode, 0, $_.j); //#30808
    delete $_.options["parse"]; //#30811
    $put($_.options, "dontdraw", true); //#30812
    $put($_.options, "parsefnc", true); //#30813
    $k[$j++] = 'args'; //#30814
    $k[$j++] = $_.barcode; //#30814
    $k[$j++] = $_.options; //#30814
    bwipp_dotcode(); //#30814
    var _1B = $k[--$j]; //#30814
    $_[$k[--$j]] = _1B; //#30814
    $put($_.args, "opt", $_.options); //#30816
    $k[$j++] = $_.args; //#30819
    if (!$_.dontdraw) { //#30819
        bwipp_renmatrix(); //#30819
    } //#30819
    $_ = Object.getPrototypeOf($_); //#30821
} //bwipp_gs1dotcode
function bwipp_hibccode39() {
    $_ = Object.create($_); //#30852
    $_.dontdraw = false; //#30855
    $_.textfont = "OCR-B"; //#30856
    $_.textsize = 10; //#30857
    $_.textyoffset = -8; //#30858
    $_.textxoffset = 0; //#30859
    $_.validatecheck = false; //#30860
    $k[$j++] = $_; //#30862
    bwipp_processoptions(); //#30862
    $_.options = $k[--$j]; //#30862
    $_.barcode = $k[--$j]; //#30863
    if ($eq($_.barcode, "")) { //#30867
        $k[$j++] = 'bwipp.hibccode39emptyData#30866'; //#30866
        $k[$j++] = "The data must not be empty"; //#30866
        bwipp_raiseerror(); //#30866
    } //#30866
    bwipp_loadctx(bwipp_hibccode39); //#30869
    if (!bwipp_hibccode39.__30876__) { //#30876
        $_ = Object.create($_); //#30876
        $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#30873
        $_.charvals = new Map; //#30874
        for (var _3 = 0; _3 <= 42; _3 += 1) { //#30875
            $put($_.charvals, $geti($_.barchars, _3, 1), _3); //#30875
        } //#30875
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_hibccode39.$ctx[id] = $_[id]); //#30875
        bwipp_hibccode39.__30876__ = 1; //#30875
        $_ = Object.getPrototypeOf($_); //#30875
    } //#30875
    for (var _A = 0, _9 = $_.barcode.length - 1; _A <= _9; _A += 1) { //#30883
        var _E = $get($_.charvals, $geti($_.barcode, _A, 1)) !== undefined; //#30880
        if (!_E) { //#30882
            $k[$j++] = 'bwipp.hibccode39badCharacter#30881'; //#30881
            $k[$j++] = "HIBC Code 39 must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#30881
            bwipp_raiseerror(); //#30881
        } //#30881
    } //#30881
    $k[$j++] = 'barlen'; //#30885
    $k[$j++] = $_.barcode.length; //#30885
    if ($_.validatecheck) { //#30885
        var _H = $k[--$j]; //#30885
        $k[$j++] = $f(_H - 1); //#30885
    } //#30885
    var _I = $k[--$j]; //#30885
    $_[$k[--$j]] = _I; //#30885
    $_.checksum = 41; //#30887
    for (var _M = 0, _L = $f($_.barlen - 1); _M <= _L; _M += 1) { //#30891
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _M, 1)) + $_.checksum); //#30890
    } //#30890
    $_.checksum = $_.checksum % 43; //#30892
    if ($_.validatecheck) { //#30898
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#30896
            $k[$j++] = 'bwipp.hibccode39badCheckDigit#30895'; //#30895
            $k[$j++] = "Incorrect HIBC Code 39 check digit provided"; //#30895
            bwipp_raiseerror(); //#30895
        } //#30895
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#30897
    } //#30897
    var _e = $s($f($_.barlen + 2)); //#30900
    $puti(_e, 1, $_.barcode); //#30900
    $_.barcode = _e; //#30900
    $put($_.barcode, 0, 43); //#30901
    $put($_.barcode, $f($_.barlen + 1), $get($_.barchars, $_.checksum)); //#30902
    $_.text = $s($f($_.barlen + 4)); //#30904
    $put($_.text, 0, 42); //#30905
    $puti($_.text, 1, $_.barcode); //#30906
    var _v = $get($_.barcode, $f($_.barlen + 1)); //#30907
    $k[$j++] = $_.text; //#30907
    $k[$j++] = $f($_.barlen + 2); //#30907
    $k[$j++] = _v; //#30907
    if (_v == 32) { //#30907
        $j--; //#30907
        $k[$j++] = 95; //#30907
    } //#30907
    var _w = $k[--$j]; //#30907
    var _x = $k[--$j]; //#30907
    $put($k[--$j], _x, _w); //#30907
    $put($_.text, $f($_.barlen + 3), 42); //#30908
    $put($_.options, "dontdraw", true); //#30911
    $put($_.options, "includecheck", false); //#30912
    $put($_.options, "validatecheck", false); //#30913
    $k[$j++] = 'args'; //#30914
    $k[$j++] = $_.barcode; //#30914
    $k[$j++] = $_.options; //#30914
    bwipp_code39(); //#30914
    var _16 = $k[--$j]; //#30914
    $_[$k[--$j]] = _16; //#30914
    $put($_.args, "txt", $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])])); //#30916
    $put($_.args, "textxalign", "center"); //#30917
    $put($_.args, "opt", $_.options); //#30918
    $k[$j++] = $_.args; //#30921
    if (!$_.dontdraw) { //#30921
        bwipp_renlinear(); //#30921
    } //#30921
    $_ = Object.getPrototypeOf($_); //#30923
    $_ = Object.getPrototypeOf($_); //#30925
} //bwipp_hibccode39
function bwipp_hibccode128() {
    $_ = Object.create($_); //#30956
    $_.dontdraw = false; //#30959
    $_.textfont = "OCR-B"; //#30960
    $_.textsize = 10; //#30961
    $_.textyoffset = -8; //#30962
    $_.textxoffset = 0; //#30963
    $_.validatecheck = false; //#30964
    $k[$j++] = $_; //#30966
    bwipp_processoptions(); //#30966
    $_.options = $k[--$j]; //#30966
    $_.barcode = $k[--$j]; //#30967
    if ($eq($_.barcode, "")) { //#30971
        $k[$j++] = 'bwipp.hibccode128emptyData#30970'; //#30970
        $k[$j++] = "The data must not be empty"; //#30970
        bwipp_raiseerror(); //#30970
    } //#30970
    bwipp_loadctx(bwipp_hibccode128); //#30973
    if (!bwipp_hibccode128.__30980__) { //#30980
        $_ = Object.create($_); //#30980
        $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#30977
        $_.charvals = new Map; //#30978
        for (var _3 = 0; _3 <= 42; _3 += 1) { //#30979
            $put($_.charvals, $geti($_.barchars, _3, 1), _3); //#30979
        } //#30979
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_hibccode128.$ctx[id] = $_[id]); //#30979
        bwipp_hibccode128.__30980__ = 1; //#30979
        $_ = Object.getPrototypeOf($_); //#30979
    } //#30979
    for (var _A = 0, _9 = $_.barcode.length - 1; _A <= _9; _A += 1) { //#30987
        var _E = $get($_.charvals, $geti($_.barcode, _A, 1)) !== undefined; //#30984
        if (!_E) { //#30986
            $k[$j++] = 'bwipp.hibccode128badCharacter#30985'; //#30985
            $k[$j++] = "HIBC Code 128 must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#30985
            bwipp_raiseerror(); //#30985
        } //#30985
    } //#30985
    $k[$j++] = 'barlen'; //#30989
    $k[$j++] = $_.barcode.length; //#30989
    if ($_.validatecheck) { //#30989
        var _H = $k[--$j]; //#30989
        $k[$j++] = $f(_H - 1); //#30989
    } //#30989
    var _I = $k[--$j]; //#30989
    $_[$k[--$j]] = _I; //#30989
    $_.checksum = 41; //#30991
    for (var _M = 0, _L = $f($_.barlen - 1); _M <= _L; _M += 1) { //#30995
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _M, 1)) + $_.checksum); //#30994
    } //#30994
    $_.checksum = $_.checksum % 43; //#30996
    if ($_.validatecheck) { //#31002
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#31000
            $k[$j++] = 'bwipp.hibccode128badCheckDigit#30999'; //#30999
            $k[$j++] = "Incorrect HIBC Code 128 check digit provided"; //#30999
            bwipp_raiseerror(); //#30999
        } //#30999
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#31001
    } //#31001
    var _e = $s($f($_.barlen + 2)); //#31004
    $puti(_e, 1, $_.barcode); //#31004
    $_.barcode = _e; //#31004
    $put($_.barcode, 0, 43); //#31005
    $put($_.barcode, $f($_.barlen + 1), $get($_.barchars, $_.checksum)); //#31006
    $_.text = $s($f($_.barlen + 4)); //#31008
    $put($_.text, 0, 42); //#31009
    $puti($_.text, 1, $_.barcode); //#31010
    var _v = $get($_.barcode, $f($_.barlen + 1)); //#31011
    $k[$j++] = $_.text; //#31011
    $k[$j++] = $f($_.barlen + 2); //#31011
    $k[$j++] = _v; //#31011
    if (_v == 32) { //#31011
        $j--; //#31011
        $k[$j++] = 95; //#31011
    } //#31011
    var _w = $k[--$j]; //#31011
    var _x = $k[--$j]; //#31011
    $put($k[--$j], _x, _w); //#31011
    $put($_.text, $f($_.barlen + 3), 42); //#31012
    $put($_.options, "dontdraw", true); //#31015
    $put($_.options, "validatecheck", false); //#31016
    $k[$j++] = 'args'; //#31017
    $k[$j++] = $_.barcode; //#31017
    $k[$j++] = $_.options; //#31017
    bwipp_code128(); //#31017
    var _15 = $k[--$j]; //#31017
    $_[$k[--$j]] = _15; //#31017
    $put($_.args, "txt", $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])])); //#31019
    $put($_.args, "textxalign", "center"); //#31020
    $put($_.args, "opt", $_.options); //#31021
    $k[$j++] = $_.args; //#31024
    if (!$_.dontdraw) { //#31024
        bwipp_renlinear(); //#31024
    } //#31024
    $_ = Object.getPrototypeOf($_); //#31026
    $_ = Object.getPrototypeOf($_); //#31028
} //bwipp_hibccode128
function bwipp_hibcdatamatrix() {
    $_ = Object.create($_); //#31059
    $_.dontdraw = false; //#31062
    $_.validatecheck = false; //#31063
    $k[$j++] = $_; //#31065
    bwipp_processoptions(); //#31065
    $_.options = $k[--$j]; //#31065
    $_.barcode = $k[--$j]; //#31066
    if ($eq($_.barcode, "")) { //#31070
        $k[$j++] = 'bwipp.hibcdatamatrixEmptyData#31069'; //#31069
        $k[$j++] = "The data must not be empty"; //#31069
        bwipp_raiseerror(); //#31069
    } //#31069
    bwipp_loadctx(bwipp_hibcdatamatrix); //#31072
    if (!bwipp_hibcdatamatrix.__31079__) { //#31079
        $_ = Object.create($_); //#31079
        $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#31076
        $_.charvals = new Map; //#31077
        for (var _3 = 0; _3 <= 42; _3 += 1) { //#31078
            $put($_.charvals, $geti($_.barchars, _3, 1), _3); //#31078
        } //#31078
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_hibcdatamatrix.$ctx[id] = $_[id]); //#31078
        bwipp_hibcdatamatrix.__31079__ = 1; //#31078
        $_ = Object.getPrototypeOf($_); //#31078
    } //#31078
    for (var _A = 0, _9 = $_.barcode.length - 1; _A <= _9; _A += 1) { //#31086
        var _E = $get($_.charvals, $geti($_.barcode, _A, 1)) !== undefined; //#31083
        if (!_E) { //#31085
            $k[$j++] = 'bwipp.hibcdatamatrixBadCharacter#31084'; //#31084
            $k[$j++] = "HIBC Data Matrix must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#31084
            bwipp_raiseerror(); //#31084
        } //#31084
    } //#31084
    $k[$j++] = 'barlen'; //#31088
    $k[$j++] = $_.barcode.length; //#31088
    if ($_.validatecheck) { //#31088
        var _H = $k[--$j]; //#31088
        $k[$j++] = $f(_H - 1); //#31088
    } //#31088
    var _I = $k[--$j]; //#31088
    $_[$k[--$j]] = _I; //#31088
    $_.checksum = 41; //#31090
    for (var _M = 0, _L = $f($_.barlen - 1); _M <= _L; _M += 1) { //#31094
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _M, 1)) + $_.checksum); //#31093
    } //#31093
    $_.checksum = $_.checksum % 43; //#31095
    if ($_.validatecheck) { //#31101
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#31099
            $k[$j++] = 'bwipp.hibcdatamatrixBadCheckDigit#31098'; //#31098
            $k[$j++] = "Incorrect HIBC Data Matrix check digit provided"; //#31098
            bwipp_raiseerror(); //#31098
        } //#31098
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#31100
    } //#31100
    var _d = $_.barlen; //#31103
    var _e = $s($f(_d + 2)); //#31103
    $puti(_e, 1, $_.barcode); //#31103
    $_.barcode = _e; //#31103
    $put($_.barcode, 0, 43); //#31104
    $put($_.barcode, $f($_.barlen + 1), $get($_.barchars, $_.checksum)); //#31105
    $put($_.options, "dontdraw", true); //#31108
    $put($_.options, "validatecheck", false); //#31109
    $k[$j++] = 'args'; //#31110
    $k[$j++] = $_.barcode; //#31110
    $k[$j++] = $_.options; //#31110
    bwipp_datamatrix(); //#31110
    var _q = $k[--$j]; //#31110
    var _r = $k[--$j]; //#31110
    $_[_r] = _q; //#31110
    $put($_.args, "opt", $_.options); //#31112
    $k[$j++] = $_.args; //#31115
    if (!$_.dontdraw) { //#31115
        bwipp_renmatrix(); //#31115
    } //#31115
    $_ = Object.getPrototypeOf($_); //#31117
    $_ = Object.getPrototypeOf($_); //#31119
} //bwipp_hibcdatamatrix
function bwipp_hibcdatamatrixrectangular() {
    $_ = Object.create($_); //#31150
    $_.dontdraw = false; //#31153
    $_.validatecheck = false; //#31154
    $k[$j++] = $_; //#31156
    bwipp_processoptions(); //#31156
    $_.options = $k[--$j]; //#31156
    $_.barcode = $k[--$j]; //#31157
    if ($eq($_.barcode, "")) { //#31161
        $k[$j++] = 'bwipp.hibcdatamatrixrectangularEmptyData#31160'; //#31160
        $k[$j++] = "The data must not be empty"; //#31160
        bwipp_raiseerror(); //#31160
    } //#31160
    bwipp_loadctx(bwipp_hibcdatamatrixrectangular); //#31163
    if (!bwipp_hibcdatamatrixrectangular.__31170__) { //#31170
        $_ = Object.create($_); //#31170
        $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#31167
        $_.charvals = new Map; //#31168
        for (var _3 = 0; _3 <= 42; _3 += 1) { //#31169
            $put($_.charvals, $geti($_.barchars, _3, 1), _3); //#31169
        } //#31169
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_hibcdatamatrixrectangular.$ctx[id] = $_[id]); //#31169
        bwipp_hibcdatamatrixrectangular.__31170__ = 1; //#31169
        $_ = Object.getPrototypeOf($_); //#31169
    } //#31169
    for (var _A = 0, _9 = $_.barcode.length - 1; _A <= _9; _A += 1) { //#31177
        var _E = $get($_.charvals, $geti($_.barcode, _A, 1)) !== undefined; //#31174
        if (!_E) { //#31176
            $k[$j++] = 'bwipp.hibcdatamatrixrectangularBadCharacter#31175'; //#31175
            $k[$j++] = "HIBC Data Matrix Rectangular must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#31175
            bwipp_raiseerror(); //#31175
        } //#31175
    } //#31175
    $k[$j++] = 'barlen'; //#31179
    $k[$j++] = $_.barcode.length; //#31179
    if ($_.validatecheck) { //#31179
        var _H = $k[--$j]; //#31179
        $k[$j++] = $f(_H - 1); //#31179
    } //#31179
    var _I = $k[--$j]; //#31179
    $_[$k[--$j]] = _I; //#31179
    $_.checksum = 41; //#31181
    for (var _M = 0, _L = $f($_.barlen - 1); _M <= _L; _M += 1) { //#31185
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _M, 1)) + $_.checksum); //#31184
    } //#31184
    $_.checksum = $_.checksum % 43; //#31186
    if ($_.validatecheck) { //#31192
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#31190
            $k[$j++] = 'bwipp.hibcdatamatrixrectangularBadCheckDigit#31189'; //#31189
            $k[$j++] = "Incorrect HIBC Data Matrix Rectangular check digit provided"; //#31189
            bwipp_raiseerror(); //#31189
        } //#31189
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#31191
    } //#31191
    var _d = $_.barlen; //#31194
    var _e = $s($f(_d + 2)); //#31194
    $puti(_e, 1, $_.barcode); //#31194
    $_.barcode = _e; //#31194
    $put($_.barcode, 0, 43); //#31195
    $put($_.barcode, $f($_.barlen + 1), $get($_.barchars, $_.checksum)); //#31196
    $put($_.options, "dontdraw", true); //#31199
    $put($_.options, "validatecheck", false); //#31200
    $put($_.options, "format", "rectangle"); //#31201
    $k[$j++] = 'args'; //#31202
    $k[$j++] = $_.barcode; //#31202
    $k[$j++] = $_.options; //#31202
    bwipp_datamatrix(); //#31202
    var _r = $k[--$j]; //#31202
    $_[$k[--$j]] = _r; //#31202
    $put($_.args, "opt", $_.options); //#31204
    $k[$j++] = $_.args; //#31207
    if (!$_.dontdraw) { //#31207
        bwipp_renmatrix(); //#31207
    } //#31207
    $_ = Object.getPrototypeOf($_); //#31209
    $_ = Object.getPrototypeOf($_); //#31211
} //bwipp_hibcdatamatrixrectangular
function bwipp_hibcpdf417() {
    $_ = Object.create($_); //#31242
    $_.dontdraw = false; //#31245
    $_.columns = 2; //#31246
    $_.validatecheck = false; //#31247
    $k[$j++] = $_; //#31249
    bwipp_processoptions(); //#31249
    $_.options = $k[--$j]; //#31249
    $_.barcode = $k[--$j]; //#31250
    if ($eq($_.barcode, "")) { //#31254
        $k[$j++] = 'bwipp.hibcpdf417EmptyData#31253'; //#31253
        $k[$j++] = "The data must not be empty"; //#31253
        bwipp_raiseerror(); //#31253
    } //#31253
    bwipp_loadctx(bwipp_hibcpdf417); //#31256
    if (!bwipp_hibcpdf417.__31263__) { //#31263
        $_ = Object.create($_); //#31263
        $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#31260
        $_.charvals = new Map; //#31261
        for (var _3 = 0; _3 <= 42; _3 += 1) { //#31262
            $put($_.charvals, $geti($_.barchars, _3, 1), _3); //#31262
        } //#31262
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_hibcpdf417.$ctx[id] = $_[id]); //#31262
        bwipp_hibcpdf417.__31263__ = 1; //#31262
        $_ = Object.getPrototypeOf($_); //#31262
    } //#31262
    for (var _A = 0, _9 = $_.barcode.length - 1; _A <= _9; _A += 1) { //#31270
        var _E = $get($_.charvals, $geti($_.barcode, _A, 1)) !== undefined; //#31267
        if (!_E) { //#31269
            $k[$j++] = 'bwipp.hibcpdf417BadCharacter#31268'; //#31268
            $k[$j++] = "HIBC PDF417 must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#31268
            bwipp_raiseerror(); //#31268
        } //#31268
    } //#31268
    $k[$j++] = 'barlen'; //#31272
    $k[$j++] = $_.barcode.length; //#31272
    if ($_.validatecheck) { //#31272
        var _H = $k[--$j]; //#31272
        $k[$j++] = $f(_H - 1); //#31272
    } //#31272
    var _I = $k[--$j]; //#31272
    $_[$k[--$j]] = _I; //#31272
    $_.checksum = 41; //#31274
    for (var _M = 0, _L = $f($_.barlen - 1); _M <= _L; _M += 1) { //#31278
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _M, 1)) + $_.checksum); //#31277
    } //#31277
    $_.checksum = $_.checksum % 43; //#31279
    if ($_.validatecheck) { //#31285
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#31283
            $k[$j++] = 'bwipp.hibcpdf417BadCheckDigit#31282'; //#31282
            $k[$j++] = "Incorrect HIBC PDF417 check digit provided"; //#31282
            bwipp_raiseerror(); //#31282
        } //#31282
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#31284
    } //#31284
    var _e = $s($f($_.barlen + 2)); //#31287
    $puti(_e, 1, $_.barcode); //#31287
    $_.barcode = _e; //#31287
    $put($_.barcode, 0, 43); //#31288
    $put($_.barcode, $f($_.barlen + 1), $get($_.barchars, $_.checksum)); //#31289
    $put($_.options, "dontdraw", true); //#31292
    $put($_.options, "columns", $_.columns); //#31293
    var _p = $_.options; //#31294
    $put(_p, "validatecheck", false); //#31294
    var _r = $_.options; //#31295
    $k[$j++] = 'args'; //#31295
    $k[$j++] = $_.barcode; //#31295
    $k[$j++] = _r; //#31295
    bwipp_pdf417(); //#31295
    var _s = $k[--$j]; //#31295
    $_[$k[--$j]] = _s; //#31295
    $put($_.args, "opt", $_.options); //#31297
    $k[$j++] = $_.args; //#31300
    if (!$_.dontdraw) { //#31300
        bwipp_renmatrix(); //#31300
    } //#31300
    $_ = Object.getPrototypeOf($_); //#31302
    $_ = Object.getPrototypeOf($_); //#31304
} //bwipp_hibcpdf417
function bwipp_hibcmicropdf417() {
    $_ = Object.create($_); //#31335
    $_.dontdraw = false; //#31338
    $_.columns = 2; //#31339
    $_.validatecheck = false; //#31340
    $k[$j++] = $_; //#31342
    bwipp_processoptions(); //#31342
    $_.options = $k[--$j]; //#31342
    $_.barcode = $k[--$j]; //#31343
    if ($eq($_.barcode, "")) { //#31347
        $k[$j++] = 'bwipp.hibcmicropdf417EmptyData#31346'; //#31346
        $k[$j++] = "The data must not be empty"; //#31346
        bwipp_raiseerror(); //#31346
    } //#31346
    bwipp_loadctx(bwipp_hibcmicropdf417); //#31349
    if (!bwipp_hibcmicropdf417.__31356__) { //#31356
        $_ = Object.create($_); //#31356
        $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#31353
        $_.charvals = new Map; //#31354
        for (var _3 = 0; _3 <= 42; _3 += 1) { //#31355
            $put($_.charvals, $geti($_.barchars, _3, 1), _3); //#31355
        } //#31355
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_hibcmicropdf417.$ctx[id] = $_[id]); //#31355
        bwipp_hibcmicropdf417.__31356__ = 1; //#31355
        $_ = Object.getPrototypeOf($_); //#31355
    } //#31355
    for (var _A = 0, _9 = $_.barcode.length - 1; _A <= _9; _A += 1) { //#31363
        var _E = $get($_.charvals, $geti($_.barcode, _A, 1)) !== undefined; //#31360
        if (!_E) { //#31362
            $k[$j++] = 'bwipp.hibcmicropdf417BadCharacter#31361'; //#31361
            $k[$j++] = "HIBC MicroPDF417 must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#31361
            bwipp_raiseerror(); //#31361
        } //#31361
    } //#31361
    $k[$j++] = 'barlen'; //#31365
    $k[$j++] = $_.barcode.length; //#31365
    if ($_.validatecheck) { //#31365
        var _H = $k[--$j]; //#31365
        $k[$j++] = $f(_H - 1); //#31365
    } //#31365
    var _I = $k[--$j]; //#31365
    $_[$k[--$j]] = _I; //#31365
    $_.checksum = 41; //#31367
    for (var _M = 0, _L = $f($_.barlen - 1); _M <= _L; _M += 1) { //#31371
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _M, 1)) + $_.checksum); //#31370
    } //#31370
    $_.checksum = $_.checksum % 43; //#31372
    if ($_.validatecheck) { //#31378
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#31376
            $k[$j++] = 'bwipp.hibcmicropdf417BadCheckDigit#31375'; //#31375
            $k[$j++] = "Incorrect HIBC MicroPDF417 check digit provided"; //#31375
            bwipp_raiseerror(); //#31375
        } //#31375
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#31377
    } //#31377
    var _e = $s($f($_.barlen + 2)); //#31380
    $puti(_e, 1, $_.barcode); //#31380
    $_.barcode = _e; //#31380
    $put($_.barcode, 0, 43); //#31381
    $put($_.barcode, $f($_.barlen + 1), $get($_.barchars, $_.checksum)); //#31382
    var _m = $_.options; //#31385
    $put(_m, "dontdraw", true); //#31385
    $put($_.options, "columns", $_.columns); //#31386
    $put($_.options, "validatecheck", false); //#31387
    var _r = $_.options; //#31388
    $k[$j++] = 'args'; //#31388
    $k[$j++] = $_.barcode; //#31388
    $k[$j++] = _r; //#31388
    bwipp_micropdf417(); //#31388
    var _s = $k[--$j]; //#31388
    $_[$k[--$j]] = _s; //#31388
    $put($_.args, "opt", $_.options); //#31390
    $k[$j++] = $_.args; //#31393
    if (!$_.dontdraw) { //#31393
        bwipp_renmatrix(); //#31393
    } //#31393
    $_ = Object.getPrototypeOf($_); //#31395
    $_ = Object.getPrototypeOf($_); //#31397
} //bwipp_hibcmicropdf417
function bwipp_hibcqrcode() {
    $_ = Object.create($_); //#31428
    $_.dontdraw = false; //#31431
    $_.validatecheck = false; //#31432
    $k[$j++] = $_; //#31434
    bwipp_processoptions(); //#31434
    $_.options = $k[--$j]; //#31434
    $_.barcode = $k[--$j]; //#31435
    if ($eq($_.barcode, "")) { //#31439
        $k[$j++] = 'bwipp.hibcqrcodeEmptyData#31438'; //#31438
        $k[$j++] = "The data must not be empty"; //#31438
        bwipp_raiseerror(); //#31438
    } //#31438
    bwipp_loadctx(bwipp_hibcqrcode); //#31441
    if (!bwipp_hibcqrcode.__31448__) { //#31448
        $_ = Object.create($_); //#31448
        $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#31445
        $_.charvals = new Map; //#31446
        for (var _3 = 0; _3 <= 42; _3 += 1) { //#31447
            $put($_.charvals, $geti($_.barchars, _3, 1), _3); //#31447
        } //#31447
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_hibcqrcode.$ctx[id] = $_[id]); //#31447
        bwipp_hibcqrcode.__31448__ = 1; //#31447
        $_ = Object.getPrototypeOf($_); //#31447
    } //#31447
    for (var _A = 0, _9 = $_.barcode.length - 1; _A <= _9; _A += 1) { //#31455
        var _E = $get($_.charvals, $geti($_.barcode, _A, 1)) !== undefined; //#31452
        if (!_E) { //#31454
            $k[$j++] = 'bwipp.hibcqrcodeBadCharacter#31453'; //#31453
            $k[$j++] = "HIBC QR Code must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#31453
            bwipp_raiseerror(); //#31453
        } //#31453
    } //#31453
    $k[$j++] = 'barlen'; //#31457
    $k[$j++] = $_.barcode.length; //#31457
    if ($_.validatecheck) { //#31457
        var _H = $k[--$j]; //#31457
        $k[$j++] = $f(_H - 1); //#31457
    } //#31457
    var _I = $k[--$j]; //#31457
    $_[$k[--$j]] = _I; //#31457
    $_.checksum = 41; //#31459
    for (var _M = 0, _L = $f($_.barlen - 1); _M <= _L; _M += 1) { //#31463
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _M, 1)) + $_.checksum); //#31462
    } //#31462
    $_.checksum = $_.checksum % 43; //#31464
    if ($_.validatecheck) { //#31470
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#31468
            $k[$j++] = 'bwipp.hibcqrcodeBadCheckDigit#31467'; //#31467
            $k[$j++] = "Incorrect HIBC QR Code check digit provided"; //#31467
            bwipp_raiseerror(); //#31467
        } //#31467
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#31469
    } //#31469
    var _e = $s($f($_.barlen + 2)); //#31472
    $puti(_e, 1, $_.barcode); //#31472
    $_.barcode = _e; //#31472
    $put($_.barcode, 0, 43); //#31473
    $put($_.barcode, $f($_.barlen + 1), $get($_.barchars, $_.checksum)); //#31474
    $put($_.options, "dontdraw", true); //#31477
    $put($_.options, "validatecheck", false); //#31478
    $k[$j++] = 'args'; //#31479
    $k[$j++] = $_.barcode; //#31479
    $k[$j++] = $_.options; //#31479
    bwipp_qrcode(); //#31479
    var _q = $k[--$j]; //#31479
    var _r = $k[--$j]; //#31479
    $_[_r] = _q; //#31479
    $put($_.args, "opt", $_.options); //#31481
    $k[$j++] = $_.args; //#31484
    if (!$_.dontdraw) { //#31484
        bwipp_renmatrix(); //#31484
    } //#31484
    $_ = Object.getPrototypeOf($_); //#31486
    $_ = Object.getPrototypeOf($_); //#31488
} //bwipp_hibcqrcode
function bwipp_hibccodablockf() {
    $_ = Object.create($_); //#31519
    $_.dontdraw = false; //#31522
    $_.validatecheck = false; //#31523
    $k[$j++] = $_; //#31525
    bwipp_processoptions(); //#31525
    $_.options = $k[--$j]; //#31525
    $_.barcode = $k[--$j]; //#31526
    if ($eq($_.barcode, "")) { //#31530
        $k[$j++] = 'bwipp.hibccodablockfEmptyData#31529'; //#31529
        $k[$j++] = "The data must not be empty"; //#31529
        bwipp_raiseerror(); //#31529
    } //#31529
    bwipp_loadctx(bwipp_hibccodablockf); //#31532
    if (!bwipp_hibccodablockf.__31539__) { //#31539
        $_ = Object.create($_); //#31539
        $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#31536
        $_.charvals = new Map; //#31537
        for (var _3 = 0; _3 <= 42; _3 += 1) { //#31538
            $put($_.charvals, $geti($_.barchars, _3, 1), _3); //#31538
        } //#31538
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_hibccodablockf.$ctx[id] = $_[id]); //#31538
        bwipp_hibccodablockf.__31539__ = 1; //#31538
        $_ = Object.getPrototypeOf($_); //#31538
    } //#31538
    for (var _A = 0, _9 = $_.barcode.length - 1; _A <= _9; _A += 1) { //#31546
        var _E = $get($_.charvals, $geti($_.barcode, _A, 1)) !== undefined; //#31543
        if (!_E) { //#31545
            $k[$j++] = 'bwipp.hibccodablockfBadCharacter#31544'; //#31544
            $k[$j++] = "HIBC Codablock F must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#31544
            bwipp_raiseerror(); //#31544
        } //#31544
    } //#31544
    $k[$j++] = 'barlen'; //#31548
    $k[$j++] = $_.barcode.length; //#31548
    if ($_.validatecheck) { //#31548
        var _H = $k[--$j]; //#31548
        $k[$j++] = $f(_H - 1); //#31548
    } //#31548
    var _I = $k[--$j]; //#31548
    $_[$k[--$j]] = _I; //#31548
    $_.checksum = 41; //#31550
    for (var _M = 0, _L = $f($_.barlen - 1); _M <= _L; _M += 1) { //#31554
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _M, 1)) + $_.checksum); //#31553
    } //#31553
    $_.checksum = $_.checksum % 43; //#31555
    if ($_.validatecheck) { //#31561
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#31559
            $k[$j++] = 'bwipp.hibccodablockfBadCheckDigit#31558'; //#31558
            $k[$j++] = "Incorrect HIBC Codablock F check digit provided"; //#31558
            bwipp_raiseerror(); //#31558
        } //#31558
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#31560
    } //#31560
    var _e = $s($f($_.barlen + 2)); //#31563
    $puti(_e, 1, $_.barcode); //#31563
    $_.barcode = _e; //#31563
    $put($_.barcode, 0, 43); //#31564
    $put($_.barcode, $f($_.barlen + 1), $get($_.barchars, $_.checksum)); //#31565
    $put($_.options, "dontdraw", true); //#31568
    $put($_.options, "validatecheck", false); //#31569
    $k[$j++] = 'args'; //#31570
    $k[$j++] = $_.barcode; //#31570
    $k[$j++] = $_.options; //#31570
    bwipp_codablockf(); //#31570
    var _q = $k[--$j]; //#31570
    var _r = $k[--$j]; //#31570
    $_[_r] = _q; //#31570
    $put($_.args, "opt", $_.options); //#31572
    $k[$j++] = $_.args; //#31575
    if (!$_.dontdraw) { //#31575
        bwipp_renmatrix(); //#31575
    } //#31575
    $_ = Object.getPrototypeOf($_); //#31577
    $_ = Object.getPrototypeOf($_); //#31579
} //bwipp_hibccodablockf
function bwipp_hibcazteccode() {
    $_ = Object.create($_); //#31610
    $_.dontdraw = false; //#31613
    $_.validatecheck = false; //#31614
    $k[$j++] = $_; //#31616
    bwipp_processoptions(); //#31616
    $_.options = $k[--$j]; //#31616
    $_.barcode = $k[--$j]; //#31617
    if ($eq($_.barcode, "")) { //#31621
        $k[$j++] = 'bwipp.hibcazteccodeEmptyData#31620'; //#31620
        $k[$j++] = "The data must not be empty"; //#31620
        bwipp_raiseerror(); //#31620
    } //#31620
    bwipp_loadctx(bwipp_hibcazteccode); //#31623
    if (!bwipp_hibcazteccode.__31630__) { //#31630
        $_ = Object.create($_); //#31630
        $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#31627
        $_.charvals = new Map; //#31628
        for (var _3 = 0; _3 <= 42; _3 += 1) { //#31629
            $put($_.charvals, $geti($_.barchars, _3, 1), _3); //#31629
        } //#31629
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_hibcazteccode.$ctx[id] = $_[id]); //#31629
        bwipp_hibcazteccode.__31630__ = 1; //#31629
        $_ = Object.getPrototypeOf($_); //#31629
    } //#31629
    for (var _A = 0, _9 = $_.barcode.length - 1; _A <= _9; _A += 1) { //#31637
        var _E = $get($_.charvals, $geti($_.barcode, _A, 1)) !== undefined; //#31634
        if (!_E) { //#31636
            $k[$j++] = 'bwipp.hibcazteccodeBadCharacter#31635'; //#31635
            $k[$j++] = "HIBC Aztec Code must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#31635
            bwipp_raiseerror(); //#31635
        } //#31635
    } //#31635
    $k[$j++] = 'barlen'; //#31639
    $k[$j++] = $_.barcode.length; //#31639
    if ($_.validatecheck) { //#31639
        var _H = $k[--$j]; //#31639
        $k[$j++] = $f(_H - 1); //#31639
    } //#31639
    var _I = $k[--$j]; //#31639
    $_[$k[--$j]] = _I; //#31639
    $_.checksum = 41; //#31641
    for (var _M = 0, _L = $f($_.barlen - 1); _M <= _L; _M += 1) { //#31645
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _M, 1)) + $_.checksum); //#31644
    } //#31644
    $_.checksum = $_.checksum % 43; //#31646
    if ($_.validatecheck) { //#31652
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#31650
            $k[$j++] = 'bwipp.hibcazteccodeBadCheckDigit#31649'; //#31649
            $k[$j++] = "Incorrect HIBC Aztec Code check digit provided"; //#31649
            bwipp_raiseerror(); //#31649
        } //#31649
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#31651
    } //#31651
    var _e = $s($f($_.barlen + 2)); //#31654
    $puti(_e, 1, $_.barcode); //#31654
    $_.barcode = _e; //#31654
    $put($_.barcode, 0, 43); //#31655
    $put($_.barcode, $f($_.barlen + 1), $get($_.barchars, $_.checksum)); //#31656
    $put($_.options, "dontdraw", true); //#31659
    $put($_.options, "validatecheck", false); //#31660
    $k[$j++] = 'args'; //#31661
    $k[$j++] = $_.barcode; //#31661
    $k[$j++] = $_.options; //#31661
    bwipp_azteccode(); //#31661
    var _q = $k[--$j]; //#31661
    var _r = $k[--$j]; //#31661
    $_[_r] = _q; //#31661
    $put($_.args, "opt", $_.options); //#31663
    $k[$j++] = $_.args; //#31666
    if (!$_.dontdraw) { //#31666
        bwipp_renmatrix(); //#31666
    } //#31666
    $_ = Object.getPrototypeOf($_); //#31668
    $_ = Object.getPrototypeOf($_); //#31670
} //bwipp_hibcazteccode
function bwipp_channelcode() {
    $_ = Object.create($_); //#31698
    $_.options = $k[--$j]; //#31700
    $_.barcode = $k[--$j]; //#31701
    $_.dontdraw = false; //#31703
    $_.shortfinder = false; //#31704
    $_.includetext = false; //#31705
    $_.includecheck = false; //#31706
    $_.height = 1; //#31707
    $forall($_.options, function() { //#31718
        var _3 = $k[--$j]; //#31718
        $_[$k[--$j]] = _3; //#31718
    }); //#31718
    $_.height = +$_.height; //#31720
    if (($_.barcode.length < 2) || ($_.barcode.length > 7)) { //#31725
        $k[$j++] = 'bwipp.channelcodeBadLength#31724'; //#31724
        $k[$j++] = "Channel Code must be 2 to 7 digits"; //#31724
        bwipp_raiseerror(); //#31724
    } //#31724
    $forall($_.barcode, function() { //#31730
        var _9 = $k[--$j]; //#31727
        if ((_9 < 48) || (_9 > 57)) { //#31729
            $k[$j++] = 'bwipp.channelcodeBadCharacter#31728'; //#31728
            $k[$j++] = "Channel Code must contain only digits"; //#31728
            bwipp_raiseerror(); //#31728
        } //#31728
    }); //#31728
    if ($cvi($_.barcode) > $get($a([26, 292, 3493, 44072, 576688, 7742862]), $_.barcode.length - 2)) { //#31733
        $k[$j++] = 'bwipp.channelcodeTooBig#31732'; //#31732
        $k[$j++] = "The Channel Code value is too big for the number of channels"; //#31732
        bwipp_raiseerror(); //#31732
    } //#31732
    $_.nextb = function() {
        var _E = $k[--$j]; //#31736
        var _N = (($f($get($_.s, _E) + ($f($get($_.b, $f(_E - 1)) + $f($get($_.b, $f(_E - 2)) + $get($_.s, $f(_E - 1))))))) > 4) ? 1 : 2; //#31741
        $k[$j++] = _E; //#31757
        $k[$j++] = _N; //#31757
        if (_E < $f($_.chan + 2)) { //#31755
            var _P = $k[--$j]; //#31743
            var _Q = $k[--$j]; //#31743
            var _R = $k[--$j]; //#31743
            $k[$j++] = _R; //#31746
            $k[$j++] = _Q; //#31746
            $k[$j++] = _P; //#31746
            for (var _T = _P, _S = _R; _T <= _S; _T += 1) { //#31746
                var _V = $k[--$j]; //#31744
                var _W = $k[--$j]; //#31744
                $put($_.b, _W, _T); //#31744
                var _X = $k[--$j]; //#31745
                var _Y = $k[--$j]; //#31745
                $k[$j++] = _Y; //#31745
                $k[$j++] = _X; //#31745
                $k[$j++] = _W; //#31745
                $k[$j++] = _V; //#31745
                $k[$j++] = $f($f(_X - _T) + 1); //#31745
                $k[$j++] = _Y; //#31745
                $k[$j++] = $f(_W + 1); //#31745
                $_.nexts(); //#31745
            } //#31745
        } else { //#31755
            var _Z = $k[--$j]; //#31748
            var _a = $k[--$j]; //#31748
            var _b = $k[--$j]; //#31748
            $k[$j++] = _b; //#31756
            $k[$j++] = _a; //#31756
            $k[$j++] = _Z; //#31756
            if ($le(_Z, _b)) { //#31756
                var _d = $k[--$j]; //#31749
                var _e = $k[--$j]; //#31749
                var _f = $k[--$j]; //#31749
                $put($_.b, _e, _f); //#31749
                $k[$j++] = _f; //#31754
                $k[$j++] = _e; //#31754
                $k[$j++] = _d; //#31754
                if ($_.value == $_.target) { //#31754
                    $k[$j++] = Infinity; //#31751
                    for (var _i = 3; _i <= 10; _i += 1) { //#31752
                        $k[$j++] = $get($_.s, _i); //#31752
                        $k[$j++] = $get($_.b, _i); //#31752
                    } //#31752
                    $_.out = $geti($a(), 0, $_.chan * 2); //#31753
                } //#31753
                $_.value = $_.value + 1; //#31755
            } //#31755
        } //#31755
        $j -= 4; //#31758
    }; //#31759
    $_.nexts = function() {
        var _r = $k[--$j]; //#31762
        $k[$j++] = _r; //#31762
        if (_r < $f($_.chan + 2)) { //#31762
            $k[$j++] = 1; //#31762
        } else { //#31762
            var _t = $k[--$j]; //#31762
            var _u = $k[--$j]; //#31762
            $k[$j++] = _u; //#31762
            $k[$j++] = _t; //#31762
            $k[$j++] = _u; //#31762
        } //#31762
        var _v = $k[--$j]; //#31762
        var _w = $k[--$j]; //#31762
        var _x = $k[--$j]; //#31762
        $k[$j++] = _x; //#31765
        $k[$j++] = _w; //#31765
        for (var _z = _v, _y = _x; _z <= _y; _z += 1) { //#31765
            var _11 = $k[--$j]; //#31763
            $put($_.s, _11, _z); //#31763
            var _12 = $k[--$j]; //#31764
            var _13 = $k[--$j]; //#31764
            $k[$j++] = _13; //#31764
            $k[$j++] = _12; //#31764
            $k[$j++] = _11; //#31764
            $k[$j++] = $f($f(_12 - _z) + 1); //#31764
            $k[$j++] = _13; //#31764
            $k[$j++] = _11; //#31764
            $_.nextb(); //#31764
        } //#31764
        $j -= 3; //#31766
    }; //#31767
    $_.encode = function() {
        $_.chan = $k[--$j]; //#31770
        $_.target = $k[--$j]; //#31771
        $_.value = 0; //#31772
        $_.out = -1; //#31773
        $_.b = $a([1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]); //#31774
        $_.s = $a([0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]); //#31775
        var _18 = $_.chan; //#31776
        $k[$j++] = _18; //#31776
        $k[$j++] = _18; //#31776
        $k[$j++] = 3; //#31776
        $_.nexts(); //#31776
        $k[$j++] = $_.out; //#31777
    }; //#31778
    $_.barlen = $_.barcode.length; //#31780
    $k[$j++] = 'finder'; //#31783
    if ($_.shortfinder) { //#31783
        $k[$j++] = $a([1, 1, 1, 1, 1]); //#31783
    } else { //#31783
        $k[$j++] = $a([1, 1, 1, 1, 1, 1, 1, 1, 1]); //#31783
    } //#31783
    var _1E = $k[--$j]; //#31783
    $_[$k[--$j]] = _1E; //#31783
    $k[$j++] = 'data'; //#31786
    $k[$j++] = $cvi($_.barcode); //#31786
    $k[$j++] = $_.barlen + 1; //#31786
    $_.encode(); //#31786
    var _1I = $k[--$j]; //#31786
    $_[$k[--$j]] = _1I; //#31786
    $_.check = $a([]); //#31789
    if ($_.includecheck) { //#31805
        $_.mod23 = $get($a([$a([]), $a([]), $a([13, 12, 4, 9, 3, 1]), $a([13, 2, 12, 3, 18, 16, 4, 1]), $a([11, 16, 17, 8, 20, 4, 10, 2, 5, 1]), $a([1, 4, 16, 18, 3, 12, 2, 8, 9, 13, 6, 1]), $a([20, 16, 22, 13, 15, 12, 5, 4, 8, 9, 21, 3, 7, 1]), $a([2, 6, 18, 8, 1, 3, 9, 4, 12, 13, 16, 2, 6, 18, 8, 1])]), $_.barlen); //#31799
        $k[$j++] = 0; //#31803
        for (var _1Z = 0, _1Y = $_.data.length - 1; _1Z <= _1Y; _1Z += 1) { //#31803
            var _1e = $k[--$j]; //#31802
            $k[$j++] = $f(_1e + ($f($get($_.data, _1Z) - 1) * $get($_.mod23, _1Z))); //#31802
        } //#31802
        var _1f = $k[--$j]; //#31804
        $k[$j++] = _1f % 23; //#31804
        $k[$j++] = 3; //#31804
        $_.encode(); //#31804
        $_.check = $k[--$j]; //#31804
    } //#31804
    $k[$j++] = Infinity; //#31808
    $aload($_.finder); //#31809
    $aload($_.data); //#31810
    $aload($_.check); //#31811
    $_.sbs = $a(); //#31811
    $_.txt = $a($_.barlen); //#31815
    for (var _1p = 0, _1o = $_.barlen - 1; _1p <= _1o; _1p += 1) { //#31819
        $_.i = _1p; //#31817
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), 0, 0, "", 0])); //#31818
    } //#31818
    $k[$j++] = Infinity; //#31822
    var _1w = $_.sbs; //#31824
    $k[$j++] = Infinity; //#31825
    for (var _1y = 0, _1z = ~~(($_.sbs.length + 1) / 2); _1y < _1z; _1y++) { //#31825
        $k[$j++] = $_.height; //#31825
    } //#31825
    var _21 = $a(); //#31825
    $k[$j++] = Infinity; //#31826
    for (var _23 = 0, _24 = ~~(($_.sbs.length + 1) / 2); _23 < _24; _23++) { //#31826
        $k[$j++] = 0; //#31826
    } //#31826
    var _25 = $a(); //#31826
    $k[$j++] = 'ren'; //#31829
    $k[$j++] = bwipp_renlinear; //#31829
    $k[$j++] = 'sbs'; //#31829
    $k[$j++] = _1w; //#31829
    $k[$j++] = 'bhs'; //#31829
    $k[$j++] = _21; //#31829
    $k[$j++] = 'bbs'; //#31829
    $k[$j++] = _25; //#31829
    $k[$j++] = 'txt'; //#31829
    $k[$j++] = $_.txt; //#31829
    $k[$j++] = 'textxalign'; //#31829
    $k[$j++] = "center"; //#31829
    $k[$j++] = 'opt'; //#31829
    $k[$j++] = $_.options; //#31829
    var _28 = $d(); //#31829
    $k[$j++] = _28; //#31832
    if (!$_.dontdraw) { //#31832
        bwipp_renlinear(); //#31832
    } //#31832
    $_ = Object.getPrototypeOf($_); //#31834
} //bwipp_channelcode
function bwipp_renlinear() {
    if ($_.bwipjs_dontdraw) { //#31861
        return; //#31861
    } //#31861
    $_ = Object.create($_); //#31862
    $_.sbs = $a([]); //#31867
    $_.bhs = $a([]); //#31868
    $_.bbs = $a([]); //#31869
    $_.txt = $a([]); //#31870
    $_.barcolor = "unset"; //#31871
    $_.includetext = false; //#31872
    $_.textcolor = "unset"; //#31873
    $_.textxalign = "unset"; //#31874
    $_.textyalign = "unset"; //#31875
    $_.textfont = "OCR-B"; //#31876
    $_.textsize = 10; //#31877
    $_.textxoffset = 0; //#31878
    $_.textyoffset = 0; //#31879
    $_.textgaps = 0; //#31880
    $_.alttext = ""; //#31881
    $_.extratext = ""; //#31882
    $_.extratextcolor = "unset"; //#31883
    $_.extratextxalign = "left"; //#31884
    $_.extratextyalign = "above"; //#31885
    $_.extratextfont = "OCR-B"; //#31886
    $_.extratextsize = 10; //#31887
    $_.extratextxoffset = 0; //#31888
    $_.extratextyoffset = 0; //#31889
    $_.extratextgaps = 0; //#31890
    $_.bordercolor = "unset"; //#31891
    $_.backgroundcolor = "unset"; //#31892
    $_.inkspread = 0; //#31893
    $_.width = 0; //#31894
    $_.barratio = 1; //#31895
    $_.spaceratio = 1; //#31896
    $_.showborder = false; //#31897
    $_.showbearer = false; //#31898
    $_.borderleft = 10; //#31899
    $_.borderright = 10; //#31900
    $_.bordertop = 1; //#31901
    $_.borderbottom = 1; //#31902
    $_.borderwidth = 0.5; //#31903
    $_.guardwhitespace = false; //#31904
    $_.guardleftpos = 0; //#31905
    $_.guardleftypos = 0; //#31906
    $_.guardrightpos = 0; //#31907
    $_.guardrightypos = 0; //#31908
    $_.guardwidth = 7; //#31909
    $_.guardheight = 7; //#31910
    $forall($k[--$j], function() { //#31912
        var _6 = $k[--$j]; //#31912
        $_[$k[--$j]] = _6; //#31912
    }); //#31912
    $k[$j++] = $_.opt; //#31913
    delete $_['opt']; //#31913
    $k[$j++] = $_; //#31913
    bwipp_processoptions(); //#31913
    $j--; //#31913
    if ($_.textsize <= 0) { //#31917
        $k[$j++] = 'bwipp.renlinearBadTextsize#31916'; //#31916
        $k[$j++] = "The font size must be greater than zero"; //#31916
        bwipp_raiseerror(); //#31916
    } //#31916
    $_.bars = $a(~~(($_.sbs.length + 1) / 2)); //#31920
    $_.pixx = 0; //#31921
    $_.pixy = 0; //#31921
    for (var _E = 0, _D = ((~~(($_.sbs.length + 1) / 2)) * 2) - 2; _E <= _D; _E += 1) { //#31940
        $_.i = _E; //#31923
        if (($_.i % 2) == 0) { //#31937
            $_.d = $f(($f(($get($_.sbs, $_.i) * $_.barratio) - $_.barratio)) + 1); //#31925
            if ($get($_.sbs, $_.i) != 0) { //#31934
                $_.h = $get($_.bhs, ~~($_.i / 2)) * 72; //#31927
                $_.c = $f(($_.d / 2) + $_.pixx); //#31928
                $_.y = $get($_.bbs, ~~($_.i / 2)) * 72; //#31929
                $_.w = $f($_.d - $_.inkspread); //#31930
                $put($_.bars, ~~($_.i / 2), $a([$_.h, $_.c, $_.y, $_.w])); //#31931
                if ($f($_.h + $_.y) > $_.pixy) { //#31932
                    $_.pixy = $f($_.h + $_.y); //#31932
                } //#31932
            } else { //#31934
                $put($_.bars, ~~($_.i / 2), -1); //#31934
            } //#31934
        } else { //#31937
            $_.d = $f(($f(($get($_.sbs, $_.i) * $_.spaceratio) - $_.spaceratio)) + 1); //#31937
        } //#31937
        $_.pixx = $f($_.pixx + $_.d); //#31939
    } //#31939
    $$.save(); //#31942
    var _t = $$.currpos(); //#31944
    $$.translate(_t.x, _t.y); //#31944
    if ($_.width != 0) { //#31949
        $$.scale(($_.width * 72) / $_.pixx, 1); //#31948
    } //#31948
    $_.tl = $a([-($f($_.borderleft + ($_.borderwidth / 2))), $f($f($_.pixy + $_.bordertop) + ($_.borderwidth / 2))]); //#31959
    $_.tr = $a([$f($f($_.pixx + $_.borderright) + ($_.borderwidth / 2)), $f($f($_.pixy + $_.bordertop) + ($_.borderwidth / 2))]); //#31960
    $_.bl = $a([-($f($_.borderleft + ($_.borderwidth / 2))), -($f($_.borderbottom + ($_.borderwidth / 2)))]); //#31961
    $_.br = $a([$f($f($_.pixx + $_.borderright) + ($_.borderwidth / 2)), -($f($_.borderbottom + ($_.borderwidth / 2)))]); //#31962
    if ($_.showbearer) { //#31987
        $$.save(); //#31964
        $$.newpath(); //#31965
        $aload($_.bl); //#31966
        var _1N = $k[--$j]; //#31966
        $$.moveto($k[--$j], _1N); //#31966
        $aload($_.br); //#31966
        var _1Q = $k[--$j]; //#31966
        $$.lineto($k[--$j], _1Q); //#31966
        $aload($_.tl); //#31967
        var _1T = $k[--$j]; //#31967
        $$.moveto($k[--$j], _1T); //#31967
        $aload($_.tr); //#31967
        var _1W = $k[--$j]; //#31967
        $$.lineto($k[--$j], _1W); //#31967
        if ($ne($_.bordercolor, "unset")) { //#31968
            $$.setcolor($_.bordercolor); //#31968
        } //#31968
        $$.setlinewidth($f($_.borderwidth - ($_.inkspread * 2))); //#31969
        $$.stroke(); //#31969
        $$.restore(); //#31970
    } else { //#31987
        if ($_.showborder) { //#31988
            $$.save(); //#31983
            $$.newpath(); //#31984
            $aload($_.bl); //#31984
            var _1e = $k[--$j]; //#31984
            $$.moveto($k[--$j], _1e); //#31984
            var _1j = $a([$_.br, $_.tr, $_.tl]); //#31984
            for (var _1k = 0, _1l = _1j.length; _1k < _1l; _1k++) { //#31984
                $aload($get(_1j, _1k)); //#31984
                var _1n = $k[--$j]; //#31984
                $$.lineto($k[--$j], _1n); //#31984
            } //#31984
            $$.closepath(); //#31984
            if ($ne($_.bordercolor, "unset")) { //#31985
                $$.setcolor($_.bordercolor); //#31985
            } //#31985
            $$.setlinewidth($_.borderwidth); //#31986
            $$.stroke(); //#31986
            $$.restore(); //#31987
        } //#31987
    } //#31987
    $$.save(); //#31991
    if ($ne($_.barcolor, "unset")) { //#31993
        $$.setcolor($_.barcolor); //#31993
    } //#31993
    var _1u = $_.bars; //#31994
    for (var _1v = 0, _1w = _1u.length; _1v < _1w; _1v++) { //#32000
        var _1x = $get(_1u, _1v); //#32000
        $k[$j++] = _1x; //#31999
        if (_1x != -1) { //#31998
            $aload($k[--$j]); //#31996
            $$.newpath(); //#31996
            $$.setlinewidth($k[--$j]); //#31996
            var _20 = $k[--$j]; //#31996
            $$.moveto($k[--$j], _20); //#31996
            $$.rlineto(0, $k[--$j]); //#31996
            $$.stroke(); //#31996
        } else { //#31998
            $j--; //#31998
        } //#31998
    } //#31998
    $$.restore(); //#32001
    if ($ne($_.textcolor, "unset")) { //#32004
        $$.setcolor($_.textcolor); //#32004
    } //#32004
    if ($_.includetext) { //#32061
        if (($eq($_.textxalign, "unset") && $eq($_.textyalign, "unset")) && $eq($_.alttext, "")) { //#32059
            $_.s = 0; //#32007
            $_.fn = ""; //#32007
            var _29 = $_.txt; //#32008
            for (var _2A = 0, _2B = _29.length; _2A < _2B; _2A++) { //#32017
                $forall($get(_29, _2A)); //#32009
                var _2D = $k[--$j]; //#32010
                var _2E = $k[--$j]; //#32010
                $k[$j++] = _2E; //#32015
                $k[$j++] = _2D; //#32015
                if ((_2D != $_.s) || $ne(_2E, $_.fn)) { //#32014
                    var _2H = $k[--$j]; //#32011
                    var _2I = $k[--$j]; //#32011
                    $_.s = _2H; //#32011
                    $_.fn = _2I; //#32011
                    $$.selectfont(_2I, _2H); //#32012
                } else { //#32014
                    $j -= 2; //#32014
                } //#32014
                var _2J = $k[--$j]; //#32016
                $$.moveto($k[--$j], _2J); //#32016
                $$.show($k[--$j], 0, 0); //#32016
            } //#32016
        } else { //#32059
            $$.selectfont($_.textfont, $_.textsize); //#32019
            if ($eq($_.alttext, "")) { //#32025
                $k[$j++] = Infinity; //#32021
                var _2P = $_.txt; //#32021
                for (var _2Q = 0, _2R = _2P.length; _2Q < _2R; _2Q++) { //#32021
                    $forall($get($get(_2P, _2Q), 0)); //#32021
                } //#32021
                $_.txt = $a(); //#32021
                $_.tstr = $s($_.txt.length); //#32022
                for (var _2Z = 0, _2Y = $_.txt.length - 1; _2Z <= _2Y; _2Z += 1) { //#32023
                    $put($_.tstr, _2Z, $get($_.txt, _2Z)); //#32023
                } //#32023
            } else { //#32025
                $_.tstr = $_.alttext; //#32025
            } //#32025
            if ($_.tstr.length == 0) { //#32035
                $k[$j++] = 0; //#32030
            } else { //#32035
                $$.save(); //#32032
                $$.newpath(); //#32033
                $$.moveto(0, 0); //#32033
                $$.charpath("0", false); //#32033
                var _2f = $$.pathbbox(); //#32033
                $$.restore(); //#32035
                $k[$j++] = _2f.ury; //#32035
            } //#32035
            $_.textascent = $k[--$j]; //#32044
            var _2i = $$.stringwidth($_.tstr); //#32045
            $_.textwidth = $f(_2i.w + (($_.tstr.length - 1) * $_.textgaps)); //#32045
            $_.textxpos = $f($_.textxoffset + ($f($_.pixx - $_.textwidth) / 2)); //#32047
            if ($eq($_.textxalign, "left")) { //#32048
                $_.textxpos = $_.textxoffset; //#32048
            } //#32048
            if ($eq($_.textxalign, "right")) { //#32049
                $_.textxpos = $f($f($_.pixx - $_.textxoffset) - $_.textwidth); //#32049
            } //#32049
            if ($eq($_.textxalign, "offleft")) { //#32050
                $_.textxpos = -$f($_.textwidth + $_.textxoffset); //#32050
            } //#32050
            if ($eq($_.textxalign, "offright")) { //#32051
                $_.textxpos = $f($_.pixx + $_.textxoffset); //#32051
            } //#32051
            if ($eq($_.textxalign, "justify") && ($_.textwidth < $_.pixx)) { //#32055
                $_.textxpos = 0; //#32053
                $_.textgaps = $f($_.pixx - $_.textwidth) / ($_.tstr.length - 1); //#32054
            } //#32054
            $_.textypos = -($f($f($_.textyoffset + $_.textascent) + 1)); //#32056
            if ($eq($_.textyalign, "above")) { //#32057
                $_.textypos = $f($f($_.textyoffset + $_.pixy) + 1); //#32057
            } //#32057
            if ($eq($_.textyalign, "center")) { //#32058
                $_.textypos = $f($_.textyoffset + ($f($_.pixy - $_.textascent) / 2)); //#32058
            } //#32058
            $$.moveto($_.textxpos, $_.textypos); //#32059
            $$.show($_.tstr, $_.textgaps, 0); //#32059
        } //#32059
    } //#32059
    if ($_.guardwhitespace) { //#32074
        $$.selectfont("OCR-B", $_.guardheight * 2); //#32065
        if ($_.guardleftpos != 0) { //#32069
            $$.moveto((-$_.guardleftpos) - 2, $f(($f($_.guardleftypos - ($_.guardheight / 2))) - 1.25)); //#32067
            $$.show("<", 0, 0); //#32068
        } //#32068
        if ($_.guardrightpos != 0) { //#32073
            $$.moveto($f(($f($f($_.guardrightpos + $_.pixx) - $_.guardwidth)) + 1), $f(($f($_.guardrightypos - ($_.guardheight / 2))) - 1.25)); //#32071
            $$.show(">", 0, 0); //#32072
        } //#32072
    } //#32072
    if ($ne($_.extratext, "")) { //#32109
        if ($ne($_.extratextcolor, "unset")) { //#32078
            $$.setcolor($_.extratextcolor); //#32078
        } //#32078
        $$.selectfont($_.extratextfont, $_.extratextsize); //#32079
        $$.save(); //#32082
        $$.newpath(); //#32083
        $$.moveto(0, 0); //#32083
        $$.charpath("0", false); //#32083
        var _3a = $$.pathbbox(); //#32083
        $$.restore(); //#32085
        $_.textascent = _3a.ury; //#32093
        var _3c = $$.stringwidth($_.extratext); //#32094
        $_.textwidth = $f(_3c.w + (($_.extratext.length - 1) * $_.extratextgaps)); //#32094
        $_.extratextxpos = $f($_.extratextxoffset + ($f($_.pixx - $_.textwidth) / 2)); //#32096
        if ($eq($_.extratextxalign, "left")) { //#32097
            $_.textxpos = $_.extratextxoffset; //#32097
        } //#32097
        if ($eq($_.extratextxalign, "right")) { //#32098
            $_.textxpos = $f($f($_.pixx - $_.extratextxoffset) - $_.textwidth); //#32098
        } //#32098
        if ($eq($_.extratextxalign, "offleft")) { //#32099
            $_.textxpos = -$f($_.textwidth + $_.extratextxoffset); //#32099
        } //#32099
        if ($eq($_.extratextxalign, "offright")) { //#32100
            $_.textxpos = $f($_.pixx + $_.extratextxoffset); //#32100
        } //#32100
        if ($eq($_.extratextxalign, "justify") && ($_.textwidth < $_.pixx)) { //#32104
            $_.textxpos = 0; //#32102
            $_.extratextgaps = $f($_.pixx - $_.textwidth) / ($_.extratext.length - 1); //#32103
        } //#32103
        $_.textypos = -($f($f($_.extratextyoffset + $_.textascent) + 1)); //#32105
        if ($eq($_.extratextyalign, "above")) { //#32106
            $_.textypos = $f($f($_.extratextyoffset + $_.pixy) + 1); //#32106
        } //#32106
        if ($eq($_.extratextyalign, "center")) { //#32107
            $_.textypos = $f($_.extratextyoffset + ($f($_.pixy - $_.textascent) / 2)); //#32107
        } //#32107
        $$.moveto($_.textxpos, $_.textypos); //#32108
        $$.show($_.extratext, $_.extratextgaps, 0); //#32108
    } //#32108
    $$.restore(); //#32111
    $_ = Object.getPrototypeOf($_); //#32113
} //bwipp_renlinear
function bwipp_renmaximatrix() {
    if ($_.bwipjs_dontdraw) { //#32131
        return; //#32131
    } //#32131
    $_ = Object.create($_); //#32133
    $_.args = $k[--$j]; //#32135
    $_.barcolor = "unset"; //#32138
    $_.backgroundcolor = "unset"; //#32139
    $forall($_.args, function() { //#32142
        var _3 = $k[--$j]; //#32142
        $_[$k[--$j]] = _3; //#32142
    }); //#32142
    var _5 = $_.opt; //#32143
    for (var _A = _5.size, _9 = _5.keys(), _8 = 0; _8 < _A; _8++) { //#32143
        var _6 = _9.next().value; //#32143
        $_[_6] = _5.get(_6); //#32143
    } //#32143
    $_.barcolor = "" + $_.barcolor; //#32145
    $_.backgroundcolor = "" + $_.backgroundcolor; //#32146
    $$.save(); //#32148
    if ($ne($_.barcolor, "unset")) { //#32150
        $$.setcolor($_.barcolor); //#32150
    } //#32150
    $$.showmaxicode($_.pixs); //#32151
    $$.restore(); //#32153
    $_ = Object.getPrototypeOf($_); //#32155
} //bwipp_renmaximatrix
// bwip-js/barcode-ftr.js
//
// This code is injected below the cross-compiled barcode.js.

// `encoder` is one of the bwipp_ functions
function bwipp_encode(bwipjs, encoder, text, opts, dontdraw) {
    if (typeof text !== 'string') {
        throw new Error('bwipp.typeError: barcode text not a string (' +
            text + ')');
    }
    opts = opts || {};
    if (typeof opts === 'string') {
        var tmp = opts.split(' ');
        opts = {};
        for (var i = 0; i < tmp.length; i++) {
            if (!tmp[i]) {
                continue;
            }
            var eq = tmp[i].indexOf('=');
            if (eq == -1) {
                if (tmp[i][0] == '!') {
                    // boolean !name
                    opts[tmp[i].substr(1)] = false;
                } else {
                    // boolean name
                    opts[tmp[i]] = true;
                }
            } else {
                opts[tmp[i].substr(0, eq)] = tmp[i].substr(eq + 1);
            }
        }
    } else if (typeof opts !== 'object' || opts.constructor !== Object) {
        throw new Error('bwipp.typeError: options not an object');
    }

    // Convert utf-16 to utf-8 unless caller has pre-encoded the text.
    if (opts.binarytext) {
        // No 16-bit chars allowed.
        if (/[\u0100-\uffff]/.test(text)) {
            throw new Error('bwip-js: 16-bit chars not allowed with binarytext');
        }
    } else if (/[\u0080-\uffff]/.test(text)) {
        text = unescape(encodeURIComponent(text));
    }

    // Convert opts to a Map
    var map = new Map;
    for (var id in opts) {
        if (opts.hasOwnProperty(id)) {
            map.set(id, opts[id]);
        }
    }

    // Set up the initial postscript state and invoke the encoder
    $$ = bwipjs;
    $k = [text, map];
    $j = 2;
    $_ = {
        bwipjs_dontdraw: opts.dontdraw || dontdraw || false
    };
    encoder();

    // Return what is left on the stack.  This branch should only be taken
    // when running with the dontdraw option.
    if ($j) {
        return $k.splice(0, $j);
    }

    return true;
}

function bwipp_lookup(symbol) {
    if (!symbol) {
        throw new Error("bwipp.undefinedEncoder: bcid is not defined");
    }
    switch (symbol.replace(/-/g, "_")) {
        case "auspost":
            return bwipp_auspost;
        case "azteccode":
            return bwipp_azteccode;
        case "azteccodecompact":
            return bwipp_azteccodecompact;
        case "aztecrune":
            return bwipp_aztecrune;
        case "bc412":
            return bwipp_bc412;
        case "channelcode":
            return bwipp_channelcode;
        case "codablockf":
            return bwipp_codablockf;
        case "code11":
            return bwipp_code11;
        case "code128":
            return bwipp_code128;
        case "code16k":
            return bwipp_code16k;
        case "code2of5":
            return bwipp_code2of5;
        case "code32":
            return bwipp_code32;
        case "code39":
            return bwipp_code39;
        case "code39ext":
            return bwipp_code39ext;
        case "code49":
            return bwipp_code49;
        case "code93":
            return bwipp_code93;
        case "code93ext":
            return bwipp_code93ext;
        case "codeone":
            return bwipp_codeone;
        case "coop2of5":
            return bwipp_coop2of5;
        case "daft":
            return bwipp_daft;
        case "databarexpanded":
            return bwipp_databarexpanded;
        case "databarexpandedcomposite":
            return bwipp_databarexpandedcomposite;
        case "databarexpandedstacked":
            return bwipp_databarexpandedstacked;
        case "databarexpandedstackedcomposite":
            return bwipp_databarexpandedstackedcomposite;
        case "databarlimited":
            return bwipp_databarlimited;
        case "databarlimitedcomposite":
            return bwipp_databarlimitedcomposite;
        case "databaromni":
            return bwipp_databaromni;
        case "databaromnicomposite":
            return bwipp_databaromnicomposite;
        case "databarstacked":
            return bwipp_databarstacked;
        case "databarstackedcomposite":
            return bwipp_databarstackedcomposite;
        case "databarstackedomni":
            return bwipp_databarstackedomni;
        case "databarstackedomnicomposite":
            return bwipp_databarstackedomnicomposite;
        case "databartruncated":
            return bwipp_databartruncated;
        case "databartruncatedcomposite":
            return bwipp_databartruncatedcomposite;
        case "datalogic2of5":
            return bwipp_datalogic2of5;
        case "datamatrix":
            return bwipp_datamatrix;
        case "datamatrixrectangular":
            return bwipp_datamatrixrectangular;
        case "datamatrixrectangularextension":
            return bwipp_datamatrixrectangularextension;
        case "dotcode":
            return bwipp_dotcode;
        case "ean13":
            return bwipp_ean13;
        case "ean13composite":
            return bwipp_ean13composite;
        case "ean14":
            return bwipp_ean14;
        case "ean2":
            return bwipp_ean2;
        case "ean5":
            return bwipp_ean5;
        case "ean8":
            return bwipp_ean8;
        case "ean8composite":
            return bwipp_ean8composite;
        case "flattermarken":
            return bwipp_flattermarken;
        case "gs1_128":
            return bwipp_gs1_128;
        case "gs1_128composite":
            return bwipp_gs1_128composite;
        case "gs1_cc":
            return bwipp_gs1_cc;
        case "gs1datamatrix":
            return bwipp_gs1datamatrix;
        case "gs1datamatrixrectangular":
            return bwipp_gs1datamatrixrectangular;
        case "gs1dldatamatrix":
            return bwipp_gs1dldatamatrix;
        case "gs1dlqrcode":
            return bwipp_gs1dlqrcode;
        case "gs1dotcode":
            return bwipp_gs1dotcode;
        case "gs1northamericancoupon":
            return bwipp_gs1northamericancoupon;
        case "gs1qrcode":
            return bwipp_gs1qrcode;
        case "hanxin":
            return bwipp_hanxin;
        case "hibcazteccode":
            return bwipp_hibcazteccode;
        case "hibccodablockf":
            return bwipp_hibccodablockf;
        case "hibccode128":
            return bwipp_hibccode128;
        case "hibccode39":
            return bwipp_hibccode39;
        case "hibcdatamatrix":
            return bwipp_hibcdatamatrix;
        case "hibcdatamatrixrectangular":
            return bwipp_hibcdatamatrixrectangular;
        case "hibcmicropdf417":
            return bwipp_hibcmicropdf417;
        case "hibcpdf417":
            return bwipp_hibcpdf417;
        case "hibcqrcode":
            return bwipp_hibcqrcode;
        case "iata2of5":
            return bwipp_iata2of5;
        case "identcode":
            return bwipp_identcode;
        case "industrial2of5":
            return bwipp_industrial2of5;
        case "interleaved2of5":
            return bwipp_interleaved2of5;
        case "isbn":
            return bwipp_isbn;
        case "ismn":
            return bwipp_ismn;
        case "issn":
            return bwipp_issn;
        case "itf14":
            return bwipp_itf14;
        case "jabcode":
            return bwipp_jabcode;
        case "japanpost":
            return bwipp_japanpost;
        case "kix":
            return bwipp_kix;
        case "leitcode":
            return bwipp_leitcode;
        case "mailmark":
            return bwipp_mailmark;
        case "mands":
            return bwipp_mands;
        case "matrix2of5":
            return bwipp_matrix2of5;
        case "maxicode":
            return bwipp_maxicode;
        case "micropdf417":
            return bwipp_micropdf417;
        case "microqrcode":
            return bwipp_microqrcode;
        case "msi":
            return bwipp_msi;
        case "onecode":
            return bwipp_onecode;
        case "pdf417":
            return bwipp_pdf417;
        case "pdf417compact":
            return bwipp_pdf417compact;
        case "pharmacode":
            return bwipp_pharmacode;
        case "pharmacode2":
            return bwipp_pharmacode2;
        case "planet":
            return bwipp_planet;
        case "plessey":
            return bwipp_plessey;
        case "posicode":
            return bwipp_posicode;
        case "postnet":
            return bwipp_postnet;
        case "pzn":
            return bwipp_pzn;
        case "qrcode":
            return bwipp_qrcode;
        case "rationalizedCodabar":
            return bwipp_rationalizedCodabar;
        case "raw":
            return bwipp_raw;
        case "rectangularmicroqrcode":
            return bwipp_rectangularmicroqrcode;
        case "royalmail":
            return bwipp_royalmail;
        case "sscc18":
            return bwipp_sscc18;
        case "swissqrcode":
            return bwipp_swissqrcode;
        case "symbol":
            return bwipp_symbol;
        case "telepen":
            return bwipp_telepen;
        case "telepennumeric":
            return bwipp_telepennumeric;
        case "ultracode":
            return bwipp_ultracode;
        case "upca":
            return bwipp_upca;
        case "upcacomposite":
            return bwipp_upcacomposite;
        case "upce":
            return bwipp_upce;
        case "upcecomposite":
            return bwipp_upcecomposite;
    }
    throw new Error("bwipp.unknownEncoder: unknown encoder name: " + symbol);
}
var BWIPP_VERSION = '2024-06-18';

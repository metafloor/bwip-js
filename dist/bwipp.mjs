// This file is part of the bwip-js project available at:
//
//    http://metafloor.github.io/bwip-js
//
// Copyright (c) 2011-2024 Mark Warren
//
// This file contains code automatically generated from:
// Barcode Writer in Pure PostScript - Version 2024-01-03
// Copyright (c) 2004-2024 Terry Burton
//
// The MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//
"use strict";

// bwip-js // Barcode Writer in Pure JavaScript
// https://github.com/metafloor/bwip-js
//
// This code was automatically generated from:
// Barcode Writer in Pure PostScript - Version 2024-01-03
//
// Copyright (c) 2011-2024 Mark Warren
// Copyright (c) 2004-2024 Terry Burton
//
// Licensed MIT. See the LICENSE file in the bwip-js root directory.
// bwip-js/barcode-hdr.js
//
// This code is injected above the cross-compiled barcode.js.

// The BWIPJS object (graphics interface)
var $$ = null;
var $j = 0; // stack pointer
var $k = []; // operand stack
var $_ = {}; // base of the dictionary stack

// Array ctor
//  $a()    : Build a new array up to the Infinity-marker on the stack.
//  $a(arr) : Convert native array to a "view" of the array.
//  $a(len) : Create a new array of length `len`
function $a(a) {
    if (!arguments.length) {
        for (var i = $j - 1; i >= 0 && $k[i] !== Infinity; i--);
        if (i < 0) {
            throw new Error('array-marker-not-found');
        }
        a = $k.splice(i + 1, $j - 1 - i);
        $j = i;
    } else if (!(a instanceof Array)) {
        a = new Array(+arguments[0]);
        for (var i = 0, l = a.length; i < l; i++) {
            a[i] = null;
        }
    }
    a.b = a; // base array
    a.o = 0; // offset into base
    return a;
}

// dict ctor
//  $d() : look for the Infinity marker on the stack
function $d() {
    // Build the dictionary in the order the keys/values were pushed so enumeration
    // occurs in the correct sequence.
    for (var mark = $j - 1; mark >= 0 && $k[mark] !== Infinity; mark -= 2) {
        if ($k[mark - 1] === Infinity) {
            throw new Error('dict-malformed-stack');
        }
    }
    if (mark < 0) {
        throw new Error('dict-marker-not-found');
    }
    var d = new Map;
    for (var i = mark + 1; i < $j; i += 2) {
        // Unlike javascript, postscript dict keys differentiate between
        // numbers and the string representation of a number.
        var k = $k[i]; // "key" into the dict entry
        var t = typeof k;
        if (t == 'number' || t == 'string') {
            d.set(k, $k[i + 1]);
        } else if (k instanceof Uint8Array) {
            d.set($z(k), $k[i + 1]);
        } else {
            throw new Error('dict-not-a-valid-key(' + k + ')');
        }
    }
    $j = mark;
    return d;
}

// string ctor
//  s(number)   : create zero-filled string of number-length
//  s(string)   : make a copy of the string
//  s(uint8[])  : make a copy of the string
//
// Returns a Uint8Array-string.
function $s(v) {
    var t = typeof v;
    if (t === 'number') {
        return new Uint8Array(v);
    }
    if (t !== 'string') {
        v = '' + v;
    }
    var s = new Uint8Array(v.length);
    for (var i = 0; i < v.length; i++) {
        s[i] = v.charCodeAt(i);
    }
    return s;
}

// ... n c roll
function $r(n, c) {
    if ($j < n) {
        throw new Error('roll: --stack-underflow--');
    }
    if (!c) {
        return;
    }
    if (c < 0) {
        var t = $k.splice($j - n, -c);
    } else {
        var t = $k.splice($j - n, n - c);
    }
    $k.splice.apply($k, [$j - t.length, 0].concat(t));
}

// Primarily designed to convert uint8-string to string, but will call the
// the toString() method on any value.
function $z(s) {
    if (s instanceof Uint8Array) {
        return String.fromCharCode.apply(null, s);
    }
    return '' + s;
}

// Copies source to dest and returns a view of just the copied characters
function $strcpy(dst, src) {
    if (typeof dst === 'string') {
        dst = $s(dst);
    }
    if (src instanceof Uint8Array) {
        for (var i = 0, l = src.length; i < l; i++) {
            dst[i] = src[i];
        }
    } else {
        for (var i = 0, l = src.length; i < l; i++) {
            dst[i] = src.charCodeAt(i);
        }
    }
    return src.length < dst.length ? dst.subarray(0, src.length) : dst;
}

// Copies source to dest and should (but doesn't) return a view of just the copied elements
function $arrcpy(dst, src) {
    for (var i = 0, l = src.length; i < l; i++) {
        dst[i] = src[i];
    }
    dst.length = src.length;
    return dst;
}

// cvs operator - convert a value to its string representation
//  s : string to store into
//  v : any value
function $cvs(s, v) {
    var t = typeof v;
    if (t == 'number' || t == 'boolean' || v === null) {
        v = '' + v;
    } else if (t !== 'string') {
        v = '--nostringval--';
    }
    for (var i = 0, l = v.length; i < l; i++) {
        s[i] = v.charCodeAt(i);
    }
    $k[$j++] = i < s.length ? s.subarray(0, i) : s;
}
// cvi operator - converts a numeric string value to integer.
function $cvi(s) {
    if (s instanceof Uint8Array) {
        // nul-chars on the end of a string are ignored by postscript but cause javascript
        // to return a zero result.
        return String.fromCharCode.apply(null, s).replace(/\0+$/, '') | 0;
    }
    return ('' + s) | 0;
}

// cvrs operator - convert a number to a radix string
//  s : string to store into
//  n : number
//  r : radix
function $cvrs(s, n, r) {
    return $strcpy(s, (~~n).toString(r).toUpperCase());
}

// cvx - convert to executable.
// This is only used by BWIPP to convert <XX> string literals.
function $cvx(s) {
    s = $z(s)
    var m = /^\s*<((?:[0-9a-fA-F]{2})+)>\s*$/.exec(s);
    if (!m) {
        throw new Error('cvx: not a <HH> hex string literal');
    }
    var h = m[1];
    var l = h.length >> 1;
    var u = new Uint8Array(l);
    for (var i = 0, j = 0; i < l; i++) {
        var c0 = h.charCodeAt(j++);
        var c1 = h.charCodeAt(j++);
        u[i] = ((c0 < 58 ? c0 - 48 : (c0 & 15) + 9) << 4) +
            (c1 < 58 ? c1 - 48 : (c1 & 15) + 9);
    }
    return u;
}

// get operator
//  s : source
//  k : key
function $get(s, k) {
    if (s instanceof Uint8Array) {
        return s[k];
    }
    if (typeof s === 'string') {
        return s.charCodeAt(k);
    }
    if (s instanceof Array) {
        return s.b[s.o + k];
    }
    if (k instanceof Uint8Array) {
        return s.get($z(k));
    }
    return s.get(k);
}

// put operator
//  d : dest
//  k : key
//  v : value
function $put(d, k, v) {
    if (d instanceof Uint8Array) {
        d[k] = v;
    } else if (d instanceof Array) {
        d.b[d.o + k] = v;
    } else if (typeof d == 'object') {
        if (k instanceof Uint8Array) {
            d.set($z(k), v);
        } else {
            d.set(k, v);
        }
    } else {
        throw new Error('put-not-writable-' + (typeof d));
    }
}

// getinterval operator
//  s : src
//  o : offset
//  l : length
function $geti(s, o, l) {
    if (s instanceof Uint8Array) {
        return s.subarray(o, o + l);
    }
    if (s instanceof Array) {
        var a = new Array(l);
        a.b = s.b; // base array
        a.o = s.o + o; // offset into base
        return a;
    }
    // Must be a string
    return s.substr(o, l);
}

// putinterval operator
//  d : dst
//  o : offset
//  s : src
function $puti(d, o, s) {
    if (d instanceof Uint8Array) {
        if (typeof s == 'string') {
            for (var i = 0, l = s.length; i < l; i++) {
                d[o + i] = s.charCodeAt(i);
            }
        } else {
            // When both d and s are the same, we want to copy
            // backwards, which works for the general case as well.
            for (var i = s.length - 1; i >= 0; i--) {
                d[o + i] = s[i];
            }
        }
    } else if (d instanceof Array) {
        // Operate on the base arrays
        var darr = d.b;
        var doff = o + d.o;
        var sarr = s.b;
        var soff = s.o;

        for (var i = 0, l = s.length; i < l; i++) {
            darr[doff + i] = sarr[soff + i];
        }
    } else {
        throw new Error('putinterval-not-writable-' + (typeof d));
    }
}

// type operator
function $type(v) {
    // null can be mis-typed - get it out of the way
    if (v == null) {
        return 'nulltype';
    }
    var t = typeof v;
    if (t == 'number') {
        return v % 1 ? 'realtype' : 'integertype';
    }
    if (t == 'boolean') {
        return 'booleantype';
    }
    if (t == 'string' || v instanceof Uint8Array) {
        return 'stringtype';
    }
    if (t == 'function') {
        return 'operatortype';
    }
    if (v instanceof Array) {
        return 'arraytype';
    }
    return 'dicttype';
    // filetype
    // fonttype
    // gstatetype
    // marktype (v === Infinity)
    // nametype
    // savetype
}

// anchorsearch operator
//      string seek anchorsearch suffix seek true %if-found
//                               string false     %if-not-found
function $anchorsearch(str, seek) {
    if (!(str instanceof Uint8Array)) {
        str = $s(str);
    }
    var i = 0,
        ls = str.length,
        lk = seek.length;

    // Optimize for single characters.
    if (lk == 1) {
        var cd = seek instanceof Uint8Array ? seek[0] : seek.charCodeAt(0);
        i = str[0] == cd ? 1 : ls;
    } else if (seek.length <= ls) {
        // Slow path, 
        if (!(seek instanceof Uint8Array)) {
            seek = $s(seek);
        }
        for (; i < lk && str[i] == seek[i]; i++);
    }
    if (i == lk) {
        $k[$j++] = str.subarray(lk);
        $k[$j++] = str.subarray(0, lk);
        $k[$j++] = true;
    } else {
        $k[$j++] = str;
        $k[$j++] = false;
    }
}

// search operator
//      string seek search suffix match prefix true %if-found
//                         string false             %if-not-found
function $search(str, seek) {
    if (!(str instanceof Uint8Array)) {
        str = $s(str);
    }
    var ls = str.length;

    // Virtually all uses of search in BWIPP are for single-characters.
    // Optimize for that case.
    if (seek.length == 1) {
        var lk = 1;
        var cd = seek instanceof Uint8Array ? seek[0] : seek.charCodeAt(0);
        for (var i = 0; i < ls && str[i] != cd; i++);
    } else {
        // Slow path, 
        if (!(seek instanceof Uint8Array)) {
            seek = $s(seek);
        }
        var lk = seek.length;
        var cd = seek[0];
        for (var i = 0; i < ls && str[i] != cd; i++);
        while (i < ls) {
            for (var j = 1; j < lk && str[i + j] === seek[j]; j++);
            if (j === lk) {
                break;
            }
            for (i++; i < ls && str[i] != cd; i++);
        }
    }
    if (i < ls) {
        $k[$j++] = str.subarray(i + lk);
        $k[$j++] = str.subarray(i, i + lk);
        $k[$j++] = str.subarray(0, i);
        $k[$j++] = true;
    } else {
        $k[$j++] = str;
        $k[$j++] = false;
    }
}

// The callback is omitted when forall is being used just to push onto the
// stack.  The callback normally returns undefined.  A return of true means break.
function $forall(o, cb) {
    if (o instanceof Uint8Array) {
        for (var i = 0, l = o.length; i < l; i++) {
            $k[$j++] = o[i];
            if (cb && cb()) break;
        }
    } else if (o instanceof Array) {
        // The array may be a view.
        for (var a = o.b, i = o.o, l = o.o + o.length; i < l; i++) {
            $k[$j++] = a[i];
            if (cb && cb()) break;
        }
    } else if (typeof o === 'string') {
        for (var i = 0, l = o.length; i < l; i++) {
            $k[$j++] = o.charCodeAt(i);
            if (cb && cb()) break;
        }
    } else if (o instanceof Map) {
        for (var keys = o.keys(), i = 0, l = o.size; i < l; i++) {
            var id = keys.next().value;
            $k[$j++] = id;
            $k[$j++] = o.get(id);
            if (cb && cb()) break;
        }
    } else {
        for (var id in o) {
            $k[$j++] = id;
            $k[$j++] = o[id];
            if (cb && cb()) break;
        }
    }
}

function $cleartomark() {
    while ($j > 0 && $k[--$j] !== Infinity);
}

function $counttomark() {
    for (var i = $j - 1; i >= 0 && $k[i] !== Infinity; i--);
    return $j - i - 1;
}

function $aload(a) {
    for (var i = 0, l = a.length, b = a.b, o = a.o; i < l; i++) {
        $k[$j++] = b[o + i];
    }
    // This push has been optimized out.  See $.aload() in psc.js.
    //$k[$j++] = a;
}

function $astore(a) {
    for (var i = 0, l = a.length, b = a.b, o = a.o + l - 1; i < l; i++) {
        b[o - i] = $k[--$j];
    }
    $k[$j++] = a;
}

function $eq(a, b) {
    if (typeof a === 'string' && typeof b === 'string') {
        return a == b;
    }
    if (a instanceof Uint8Array && b instanceof Uint8Array) {
        if (a.length != b.length) {
            return false;
        }
        for (var i = 0, l = a.length; i < l; i++) {
            if (a[i] != b[i]) {
                return false;
            }
        }
        return true;
    }
    if (a instanceof Uint8Array && typeof b === 'string' ||
        b instanceof Uint8Array && typeof a === 'string') {
        if (a instanceof Uint8Array) {
            a = $z(a);
        } else {
            b = $z(b);
        }
        return a == b;
    }
    return a == b;
}

function $ne(a, b) {
    return !$eq(a, b);
}

function $lt(a, b) {
    if (a instanceof Uint8Array) {
        a = $z(a);
    }
    if (b instanceof Uint8Array) {
        b = $z(b);
    }
    return a < b;
}

function $le(a, b) {
    if (a instanceof Uint8Array) {
        a = $z(a);
    }
    if (b instanceof Uint8Array) {
        b = $z(b);
    }
    return a <= b;
}

function $gt(a, b) {
    if (a instanceof Uint8Array) {
        a = $z(a);
    }
    if (b instanceof Uint8Array) {
        b = $z(b);
    }
    return a > b;
}

function $ge(a, b) {
    if (a instanceof Uint8Array) {
        a = $z(a);
    }
    if (b instanceof Uint8Array) {
        b = $z(b);
    }
    return a >= b;
}

function $an(a, b) { // and
    return (typeof a === 'boolean') ? a && b : a & b;
}

function $or(a, b) { // or
    return (typeof a === 'boolean') ? a || b : a | b;
}

function $xo(a, b) { // xor
    return (typeof a === 'boolean') ? !a && b || a && !b : a ^ b;
}

function $nt(a) {
    return typeof a == 'boolean' ? !a : ~a;
}
// emulate single-precision floating-point (pseudo-polyfill for Math.fround)
var $f = (function(fa) {
    return function(v) {
        return Number.isInteger(v) ? v : (fa[0] = v, fa[0]);
    };
})(new Float32Array(1));

// This is a replacement for the BWIPP raiseerror function.
function bwipp_raiseerror() {
    var info = $k[--$j];
    var name = $k[--$j];
    throw new Error($z(name) + ": " + $z(info));
}

// This is a replacement for the BWIPP processoptions function.
// We cannot use the BWIPP version due to two reasons:
// - legacy code allows strings to be numbers and numbers to be strings
// - in javascript, there is no way to tell the difference between a real
//   number that is an integer, and an actual integer.
//
// options currentdict processoptions exec -> options
function bwipp_processoptions() {
    var dict = $k[--$j];
    var opts = $k[$j - 1];
    var map = opts instanceof Map;
    for (var id in dict) {
        var val;
        if (map) {
            if (!opts.has(id)) {
                continue;
            }
            val = opts.get(id);
        } else {
            if (!opts.hasOwnProperty(id)) {
                continue;
            }
            val = opts[id];
        }
        var def = dict[id];
        var typ = typeof def;

        // null is a placeholder for realtype
        if (def == null || typ == 'number') {
            // This allows for numeric strings
            if (!isFinite(+val)) {
                throw new Error('bwipp.invalidOptionType: ' + id +
                    ': not a realtype: ' + val);
            }
            if (typeof val == 'string') {
                val = +val;
                map ? opts.set(id, val) : (opts[id] = val);
            }
        } else if (typ == 'boolean') {
            if (val !== true && val !== false) {
                // In keeping with the ethos of javascript, allow a more relaxed
                // interpretation of boolean.
                if (val == null || (val | 0) === val) {
                    val = !!val;
                } else if (val == 'true') {
                    val = true;
                } else if (val == 'false') {
                    val = false;
                } else {
                    throw new Error('bwipp.invalidOptionType: ' + id +
                        ': not a booleantype: ' + val);
                }
                map ? opts.set(id, val) : (opts[id] = val);
            }
        } else if (typ == 'string' || def instanceof Uint8Array) {
            // This allows numbers to be strings
            if (typeof val == 'number') {
                val = '' + val;
                map ? opts.set(id, val) : (opts[id] = val);
            } else if (typeof val != 'string' && !(val instanceof Uint8Array)) {
                throw new Error('bwipp.invalidOptionType: ' + id +
                    ': not a stringtype: ' + val);
            }
        }
        // Set the option into the dictionary
        dict[id] = val;
    }
}

// Replacement for loadctx which contains complex postscript operations
// that we don't implement correctly.
// f is a reference to the enclosing function.
function bwipp_loadctx(f) {
    if (!f.$ctx) {
        f.$ctx = {};
    }
    var next = Object.getPrototypeOf($_);
    Object.setPrototypeOf(f.$ctx, next);
    Object.setPrototypeOf($_, f.$ctx);
}

function bwipp_parseinput() {
    $_ = Object.create($_); //#200
    bwipp_loadctx(bwipp_parseinput) //#202
    $_.fncvals = $k[--$j]; //#204
    $_.barcode = $k[--$j]; //#205
    var _2 = 'parse'; //#207
    $_[_2] = $get($_.fncvals, _2); //#207
    delete $_.fncvals[_2]; //#207
    var _6 = 'parsefnc'; //#208
    $_[_6] = $get($_.fncvals, _6); //#208
    delete $_.fncvals[_6]; //#208
    var _A = 'parseonly'; //#209
    var _C = $get($_.fncvals, _A) !== undefined; //#209
    $_[_A] = _C; //#209
    delete $_.fncvals[_A]; //#209
    var _E = 'eci'; //#210
    var _G = $get($_.fncvals, _E) !== undefined; //#210
    $_[_E] = _G; //#210
    delete $_.fncvals[_E]; //#210
    if (!bwipp_parseinput.__225__) { //#225
        $_ = Object.create($_); //#225
        $k[$j++] = Infinity; //#214
        var _I = $a(['NUL', 'SOH', 'STX', 'ETX', 'EOT', 'ENQ', 'ACK', 'BEL', 'BS', 'TAB', 'LF', 'VT', 'FF', 'CR', "", "", 'DLE', 'DC1', 'DC2', 'DC3', 'DC4', 'NAK', 'SYN', 'ETB', 'CAN', 'EM', 'SUB', 'ESC', 'FS', 'GS', 'RS', 'US']); //#219
        $k[$j++] = 0; //#223
        for (var _J = 0, _K = _I.length; _J < _K; _J++) { //#223
            var _M = $k[--$j]; //#222
            $k[$j++] = $get(_I, _J); //#222
            $k[$j++] = _M; //#222
            $k[$j++] = $f(_M + 1); //#222
        } //#222
        $j--; //#223
        $_.ctrl = $d(); //#224
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_parseinput.$ctx[id] = $_[id]); //#224
        bwipp_parseinput.__225__ = 1; //#224
        $_ = Object.getPrototypeOf($_); //#224
    } //#224
    $_.msg = $a($_.barcode.length); //#227
    $_.j = 0; //#228
    $k[$j++] = $_.barcode; //#347
    for (;;) { //#347
        $search($k[--$j], "^"); //#230
        var _T = $k[--$j]; //#230
        var _U = $k[--$j]; //#230
        $k[$j++] = _T; //#233
        $k[$j++] = _U.length; //#233
        $k[$j++] = $_.msg; //#233
        $k[$j++] = $_.j; //#233
        $k[$j++] = _U; //#233
        $k[$j++] = Infinity; //#233
        var _X = $k[--$j]; //#233
        var _Y = $k[--$j]; //#233
        $k[$j++] = _X; //#233
        $forall(_Y); //#233
        var _Z = $a(); //#233
        var _a = $k[--$j]; //#233
        $puti($k[--$j], _a, _Z); //#233
        $_.j = $f($k[--$j] + $_.j); //#234
        if ($k[--$j]) { //#345
            $j--; //#236
            for (var _f = 0, _g = 1; _f < _g; _f++) { //#343
                if ($an($nt($_.parse), $nt($_.parsefnc))) { //#243
                    $put($_.msg, $_.j, 94); //#240
                    $_.j = $f($_.j + 1); //#241
                    break; //#242
                } //#242
                $put($_.msg, $_.j, 94); //#246
                $_.j = $f($_.j + 1); //#247
                if ($_.parse) { //#290
                    var _q = $k[--$j]; //#251
                    $k[$j++] = _q; //#262
                    if (_q.length >= 3) { //#262
                        var _r = $k[--$j]; //#252
                        var _s = $geti(_r, 0, 3); //#252
                        var _t = $_.ctrl; //#252
                        var _u = $get(_t, _s) !== undefined; //#253
                        $k[$j++] = _r; //#261
                        $k[$j++] = _t; //#261
                        $k[$j++] = _s; //#261
                        if (_u) { //#260
                            $_.j = $f($_.j - 1); //#254
                            var _w = $k[--$j]; //#255
                            $put($_.msg, $_.j, $get($k[--$j], _w)); //#255
                            $_.j = $f($_.j + 1); //#256
                            var _12 = $k[--$j]; //#257
                            $k[$j++] = $geti(_12, 3, _12.length - 3); //#258
                            break; //#258
                        } else { //#260
                            $j -= 2; //#260
                        } //#260
                    } //#260
                    var _14 = $k[--$j]; //#263
                    $k[$j++] = _14; //#274
                    if (_14.length >= 2) { //#274
                        var _15 = $k[--$j]; //#264
                        var _16 = $geti(_15, 0, 2); //#264
                        var _17 = $_.ctrl; //#264
                        var _18 = $get(_17, _16) !== undefined; //#265
                        $k[$j++] = _15; //#273
                        $k[$j++] = _17; //#273
                        $k[$j++] = _16; //#273
                        if (_18) { //#272
                            $_.j = $f($_.j - 1); //#266
                            var _1A = $k[--$j]; //#267
                            $put($_.msg, $_.j, $get($k[--$j], _1A)); //#267
                            $_.j = $f($_.j + 1); //#268
                            var _1G = $k[--$j]; //#269
                            $k[$j++] = $geti(_1G, 2, _1G.length - 2); //#270
                            break; //#270
                        } else { //#272
                            $j -= 2; //#272
                        } //#272
                    } //#272
                    var _1I = $k[--$j]; //#275
                    $k[$j++] = _1I; //#289
                    if (_1I.length >= 3) { //#289
                        var _1J = $k[--$j]; //#276
                        var _1K = $geti(_1J, 0, 3); //#276
                        $k[$j++] = _1J; //#278
                        $k[$j++] = true; //#278
                        for (var _1L = 0, _1M = _1K.length; _1L < _1M; _1L++) { //#278
                            var _1N = $get(_1K, _1L); //#278
                            if ((_1N < 48) || (_1N > 57)) { //#277
                                $j--; //#277
                                $k[$j++] = false; //#277
                            } //#277
                        } //#277
                        if ($k[--$j]) { //#288
                            var _1P = $k[--$j]; //#280
                            var _1R = $cvi($geti(_1P, 0, 3)); //#280
                            $k[$j++] = _1P; //#283
                            $k[$j++] = _1R; //#283
                            if (_1R > 255) { //#283
                                $j -= 2; //#281
                                $k[$j++] = 'bwipp.invalidOrdinal#282'; //#282
                                $k[$j++] = "Ordinal must be 000 to 255"; //#282
                                bwipp_raiseerror(); //#282
                            } //#282
                            $_.j = $f($_.j - 1); //#284
                            $put($_.msg, $_.j, $k[--$j]); //#285
                            $_.j = $f($_.j + 1); //#286
                            var _1X = $k[--$j]; //#287
                            $k[$j++] = $geti(_1X, 3, _1X.length - 3); //#287
                        } //#287
                    } //#287
                } //#287
                if (($or($_.parseonly, $nt($_.parsefnc))) || ($get($_.msg, $f($_.j - 1)) != 94)) { //#295
                    break; //#295
                } //#295
                $_.j = $f($_.j - 1); //#298
                var _1f = $k[--$j]; //#299
                $k[$j++] = _1f; //#302
                if (_1f.length < 3) { //#302
                    $j--; //#300
                    $k[$j++] = 'bwipp.truncatedFNC#301'; //#301
                    $k[$j++] = "Function character truncated"; //#301
                    bwipp_raiseerror(); //#301
                } //#301
                var _1g = $k[--$j]; //#303
                $k[$j++] = _1g; //#308
                if ($get(_1g, 0) == 94) { //#308
                    $put($_.msg, $_.j, 94); //#304
                    $_.j = $f($_.j + 1); //#305
                    var _1l = $k[--$j]; //#306
                    $k[$j++] = $geti(_1l, 1, _1l.length - 1); //#307
                    break; //#307
                } //#307
                var _1n = $k[--$j]; //#309
                $k[$j++] = _1n; //#326
                if ($eq($geti(_1n, 0, 3), "ECI") && $_.eci) { //#326
                    var _1q = $k[--$j]; //#310
                    $k[$j++] = _1q; //#313
                    if (_1q.length < 9) { //#313
                        $j--; //#311
                        $k[$j++] = 'bwipp.truncatedECI#312'; //#312
                        $k[$j++] = "ECI truncated"; //#312
                        bwipp_raiseerror(); //#312
                    } //#312
                    var _1r = $k[--$j]; //#314
                    var _1s = $geti(_1r, 3, 6); //#314
                    $k[$j++] = _1r; //#320
                    $k[$j++] = _1s; //#320
                    for (var _1t = 0, _1u = _1s.length; _1t < _1u; _1t++) { //#320
                        var _1v = $get(_1s, _1t); //#320
                        if ((_1v < 48) || (_1v > 57)) { //#319
                            $j -= 2; //#317
                            $k[$j++] = 'bwipp.invalidECI#318'; //#318
                            $k[$j++] = "ECI must be 000000 to 999999"; //#318
                            bwipp_raiseerror(); //#318
                        } //#318
                    } //#318
                    var _1w = $k[--$j]; //#321
                    $k[$j++] = 0; //#321
                    $forall(_1w, function() { //#321
                        var _1x = $k[--$j]; //#321
                        var _1y = $k[--$j]; //#321
                        $k[$j++] = ($f(_1y - $f(_1x - 48))) * 10; //#321
                    }); //#321
                    $put($_.msg, $_.j, (~~($k[--$j] / 10)) - 1000000); //#322
                    $_.j = $f($_.j + 1); //#323
                    var _23 = $k[--$j]; //#324
                    $k[$j++] = $geti(_23, 9, _23.length - 9); //#325
                    break; //#325
                } //#325
                var _25 = $k[--$j]; //#327
                $k[$j++] = _25; //#330
                if (_25.length < 4) { //#330
                    $j--; //#328
                    $k[$j++] = 'bwipp.truncatedFNC#329'; //#329
                    $k[$j++] = "Function character truncated"; //#329
                    bwipp_raiseerror(); //#329
                } //#329
                var _26 = $k[--$j]; //#331
                var _27 = $geti(_26, 0, 4); //#331
                var _29 = $get($_.fncvals, _27) !== undefined; //#331
                $k[$j++] = _26; //#336
                $k[$j++] = _27; //#336
                if (!_29) { //#336
                    var _2A = $k[--$j]; //#332
                    var _2B = $s(_2A.length + 28); //#332
                    $puti(_2B, 28, _2A); //#332
                    $puti(_2B, 0, "Unknown function character: "); //#333
                    var _2C = $k[--$j]; //#334
                    $k[$j++] = _2B; //#334
                    $k[$j++] = _2C; //#334
                    $j--; //#334
                    var _2D = $k[--$j]; //#335
                    $k[$j++] = 'bwipp.unknownFNC#335'; //#335
                    $k[$j++] = _2D; //#335
                    bwipp_raiseerror(); //#335
                } //#335
                $put($_.msg, $_.j, $get($_.fncvals, $k[--$j])); //#338
                $_.j = $f($_.j + 1); //#339
                var _2K = $k[--$j]; //#340
                $k[$j++] = $geti(_2K, 4, _2K.length - 4); //#341
                break; //#341
            } //#341
        } else { //#345
            break; //#345
        } //#345
    } //#345
    if ($nt($_.parseonly)) { //#353
        $k[$j++] = $geti($_.msg, 0, $_.j); //#350
    } else { //#353
        $k[$j++] = $s($_.j); //#353
        for (var _2U = 0, _2T = $f($_.j - 1); _2U <= _2T; _2U += 1) { //#353
            var _2V = $k[--$j]; //#353
            $put(_2V, _2U, $get($_.msg, _2U)); //#353
            $k[$j++] = _2V; //#353
        } //#353
    } //#353
    $_ = Object.getPrototypeOf($_); //#356
    $_ = Object.getPrototypeOf($_); //#358
} //bwipp_parseinput
function bwipp_gs1process() {
    $_ = Object.create($_); //#383
    bwipp_loadctx(bwipp_gs1process) //#385
    if (!bwipp_gs1process.__2299__) { //#2299
        $_ = Object.create($_); //#2299
        var _1 = new Map([
            ["cset", 'N'],
            ["min", 18],
            ["max", 18],
            ["opt", false],
            ["linters", $a(['lintcsum', 'lintkey'])]
        ]); //#393
        var _2 = $a([_1]); //#393
        var _3 = $a([]); //#395
        var _4 = new Map([
            ["parts", _2],
            ["dlpkey", _3]
        ]); //#395
        var _5 = $a(['lintcsum', 'lintkey']); //#402
        var _6 = new Map([
            ["cset", 'N'],
            ["min", 14],
            ["max", 14],
            ["opt", false],
            ["linters", _5]
        ]); //#402
        var _7 = $a([_6]); //#402
        var _8 = $a(["02", "255", "37"]); //#404
        var _9 = $a(["22", "10", "21"]); //#405
        var _A = $a(["235"]); //#405
        var _B = $a([_9, _A]); //#405
        var _C = new Map([
            ["parts", _7],
            ["ex", _8],
            ["dlpkey", _B]
        ]); //#405
        var _D = $a(['lintcsum', 'lintkey']); //#412
        var _E = new Map([
            ["cset", 'N'],
            ["min", 14],
            ["max", 14],
            ["opt", false],
            ["linters", _D]
        ]); //#412
        var _F = $a([_E]); //#412
        var _G = $a(["37"]); //#414
        var _H = $a([_G]); //#414
        var _I = $a([_H]); //#414
        var _J = new Map([
            ["parts", _F],
            ["req", _I]
        ]); //#414
        var _K = $a([]); //#421
        var _L = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", _K]
        ]); //#421
        var _T = new Map([
            ["parts", $a([_L])],
            ["req", $a([$a([$a(["01"]), $a(["02"]), $a(["8006"]), $a(["8026"])])])]
        ]); //#423
        var _V = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a(['lintyymmd0'])]
        ]); //#430
        var _d = new Map([
            ["parts", $a([_V])],
            ["req", $a([$a([$a(["01"]), $a(["02"]), $a(["8006"]), $a(["8026"])])])]
        ]); //#432
        var _f = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a(['lintyymmd0'])]
        ]); //#439
        var _k = new Map([
            ["parts", $a([_f])],
            ["req", $a([$a([$a(["8020"])])])]
        ]); //#441
        var _m = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a(['lintyymmd0'])]
        ]); //#448
        var _u = new Map([
            ["parts", $a([_m])],
            ["req", $a([$a([$a(["01"]), $a(["02"]), $a(["8006"]), $a(["8026"])])])]
        ]); //#450
        var _w = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a(['lintyymmd0'])]
        ]); //#459
        var _15 = new Map([
            ["parts", $a([_w])],
            ["req", $a([$a([$a(["01"]), $a(["02"]), $a(["255"]), $a(["8006"]), $a(["8026"])])])]
        ]); //#461
        var _17 = new Map([
            ["cset", 'N'],
            ["min", 2],
            ["max", 2],
            ["opt", false],
            ["linters", $a([])]
        ]); //#468
        var _1F = new Map([
            ["parts", $a([_17])],
            ["req", $a([$a([$a(["01"]), $a(["02"]), $a(["8006"]), $a(["8026"])])])]
        ]); //#470
        var _1H = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#477
        var _1O = new Map([
            ["parts", $a([_1H])],
            ["ex", $a(["235"])],
            ["req", $a([$a([$a(["01"]), $a(["8006"])])])]
        ]); //#480
        var _1Q = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#487
        var _1V = new Map([
            ["parts", $a([_1Q])],
            ["req", $a([$a([$a(["01"])])])]
        ]); //#489
        var _1X = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 28],
            ["opt", false],
            ["linters", $a([])]
        ]); //#496
        var _1c = new Map([
            ["parts", $a([_1X])],
            ["req", $a([$a([$a(["01"])])])]
        ]); //#498
        var _1e = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 30],
            ["opt", false],
            ["linters", $a([])]
        ]); //#505
        var _1m = new Map([
            ["parts", $a([_1e])],
            ["req", $a([$a([$a(["01"]), $a(["02"]), $a(["8006"]), $a(["8026"])])])]
        ]); //#507
        var _1o = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#515
        var _1w = new Map([
            ["parts", $a([_1o])],
            ["req", $a([$a([$a(["01"]), $a(["02"]), $a(["8006"]), $a(["8026"])])])]
        ]); //#517
        var _1y = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#524
        var _22 = $a([$a([$a(["01"])])]); //#526
        var _23 = new Map([
            ["parts", $a([_1y])],
            ["req", _22]
        ]); //#526
        var _25 = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 30],
            ["opt", false],
            ["linters", $a([])]
        ]); //#533
        var _2D = new Map([
            ["parts", $a([_25])],
            ["req", $a([$a([$a(["01"]), $a(["8006"])]), $a([$a(["21"])])])]
        ]); //#535
        var _2F = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 30],
            ["opt", false],
            ["linters", $a([])]
        ]); //#542
        var _2L = new Map([
            ["parts", $a([_2F])],
            ["req", $a([$a([$a(["01"]), $a(["8006"])])])]
        ]); //#544
        var _2N = new Map([
            ["cset", 'N'],
            ["min", 13],
            ["max", 13],
            ["opt", false],
            ["linters", $a(['lintcsum', 'lintkey'])]
        ]); //#551
        var _2P = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 17],
            ["opt", true],
            ["linters", $a([])]
        ]); //#552
        var _2S = new Map([
            ["parts", $a([_2N, _2P])],
            ["dlpkey", $a([])]
        ]); //#554
        var _2U = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#561
        var _2Z = new Map([
            ["parts", $a([_2U])],
            ["req", $a([$a([$a(["414"])])])]
        ]); //#563
        var _2b = new Map([
            ["cset", 'N'],
            ["min", 13],
            ["max", 13],
            ["opt", false],
            ["linters", $a(['lintcsum', 'lintkey'])]
        ]); //#570
        var _2d = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 12],
            ["opt", true],
            ["linters", $a([])]
        ]); //#571
        var _2h = new Map([
            ["parts", $a([_2b, _2d])],
            ["ex", $a(["01", "02", "415", "8006", "8020", "8026"])],
            ["dlpkey", $a([])]
        ]); //#574
        var _2j = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 8],
            ["opt", false],
            ["linters", $a([])]
        ]); //#581
        var _2p = new Map([
            ["parts", $a([_2j])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#583
        var _2r = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#590
        var _2y = new Map([
            ["parts", $a([_2r])],
            ["ex", $a(["310n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#593
        var _30 = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#605
        var _37 = new Map([
            ["parts", $a([_30])],
            ["ex", $a(["311n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#608
        var _39 = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#620
        var _3G = new Map([
            ["parts", $a([_39])],
            ["ex", $a(["312n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#623
        var _3I = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#635
        var _3P = new Map([
            ["parts", $a([_3I])],
            ["ex", $a(["313n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#638
        var _3R = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#650
        var _3Y = new Map([
            ["parts", $a([_3R])],
            ["ex", $a(["314n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#653
        var _3a = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#665
        var _3h = new Map([
            ["parts", $a([_3a])],
            ["ex", $a(["315n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#668
        var _3j = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#680
        var _3q = new Map([
            ["parts", $a([_3j])],
            ["ex", $a(["316n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#683
        var _3s = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#695
        var _3z = new Map([
            ["parts", $a([_3s])],
            ["ex", $a(["320n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#698
        var _41 = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#710
        var _48 = new Map([
            ["parts", $a([_41])],
            ["ex", $a(["321n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#713
        var _4A = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#725
        var _4H = new Map([
            ["parts", $a([_4A])],
            ["ex", $a(["322n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#728
        var _4J = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#740
        var _4Q = new Map([
            ["parts", $a([_4J])],
            ["ex", $a(["323n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#743
        var _4S = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#755
        var _4Z = new Map([
            ["parts", $a([_4S])],
            ["ex", $a(["324n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#758
        var _4b = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#770
        var _4i = new Map([
            ["parts", $a([_4b])],
            ["ex", $a(["325n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#773
        var _4k = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#785
        var _4r = new Map([
            ["parts", $a([_4k])],
            ["ex", $a(["326n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#788
        var _4t = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#800
        var _50 = new Map([
            ["parts", $a([_4t])],
            ["ex", $a(["327n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#803
        var _52 = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#815
        var _59 = new Map([
            ["parts", $a([_52])],
            ["ex", $a(["328n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#818
        var _5B = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#830
        var _5I = new Map([
            ["parts", $a([_5B])],
            ["ex", $a(["329n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#833
        var _5K = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#845
        var _5R = new Map([
            ["parts", $a([_5K])],
            ["ex", $a(["330n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#848
        var _5T = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#860
        var _5a = new Map([
            ["parts", $a([_5T])],
            ["ex", $a(["331n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#863
        var _5c = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#875
        var _5j = new Map([
            ["parts", $a([_5c])],
            ["ex", $a(["332n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#878
        var _5l = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#890
        var _5s = new Map([
            ["parts", $a([_5l])],
            ["ex", $a(["333n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#893
        var _5u = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#905
        var _61 = new Map([
            ["parts", $a([_5u])],
            ["ex", $a(["334n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#908
        var _63 = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#920
        var _6A = new Map([
            ["parts", $a([_63])],
            ["ex", $a(["335n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#923
        var _6C = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#935
        var _6J = new Map([
            ["parts", $a([_6C])],
            ["ex", $a(["336n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#938
        var _6L = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#950
        var _6R = new Map([
            ["parts", $a([_6L])],
            ["ex", $a(["337n"])],
            ["req", $a([$a([$a(["01"])])])]
        ]); //#953
        var _6T = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#965
        var _6a = new Map([
            ["parts", $a([_6T])],
            ["ex", $a(["340n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#968
        var _6c = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#980
        var _6j = new Map([
            ["parts", $a([_6c])],
            ["ex", $a(["341n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#983
        var _6l = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#995
        var _6s = new Map([
            ["parts", $a([_6l])],
            ["ex", $a(["342n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#998
        var _6u = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1010
        var _71 = new Map([
            ["parts", $a([_6u])],
            ["ex", $a(["343n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#1013
        var _73 = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1025
        var _7A = new Map([
            ["parts", $a([_73])],
            ["ex", $a(["344n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#1028
        var _7C = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1040
        var _7J = new Map([
            ["parts", $a([_7C])],
            ["ex", $a(["345n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#1043
        var _7L = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1055
        var _7S = new Map([
            ["parts", $a([_7L])],
            ["ex", $a(["346n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#1058
        var _7U = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1070
        var _7b = new Map([
            ["parts", $a([_7U])],
            ["ex", $a(["347n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#1073
        var _7d = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1085
        var _7k = new Map([
            ["parts", $a([_7d])],
            ["ex", $a(["348n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#1088
        var _7m = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1100
        var _7t = new Map([
            ["parts", $a([_7m])],
            ["ex", $a(["349n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#1103
        var _7v = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1115
        var _82 = new Map([
            ["parts", $a([_7v])],
            ["ex", $a(["350n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1118
        var _84 = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1130
        var _8B = new Map([
            ["parts", $a([_84])],
            ["ex", $a(["351n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1133
        var _8D = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1145
        var _8K = new Map([
            ["parts", $a([_8D])],
            ["ex", $a(["352n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1148
        var _8M = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1160
        var _8T = new Map([
            ["parts", $a([_8M])],
            ["ex", $a(["353n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#1163
        var _8V = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1175
        var _8c = new Map([
            ["parts", $a([_8V])],
            ["ex", $a(["354n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#1178
        var _8e = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1190
        var _8l = new Map([
            ["parts", $a([_8e])],
            ["ex", $a(["355n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#1193
        var _8n = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1205
        var _8u = new Map([
            ["parts", $a([_8n])],
            ["ex", $a(["356n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1208
        var _8w = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1220
        var _93 = new Map([
            ["parts", $a([_8w])],
            ["ex", $a(["357n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1223
        var _95 = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1235
        var _9C = new Map([
            ["parts", $a([_95])],
            ["ex", $a(["360n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1238
        var _9E = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1250
        var _9L = new Map([
            ["parts", $a([_9E])],
            ["ex", $a(["361n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1253
        var _9N = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1265
        var _9U = new Map([
            ["parts", $a([_9N])],
            ["ex", $a(["362n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#1268
        var _9W = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1280
        var _9d = new Map([
            ["parts", $a([_9W])],
            ["ex", $a(["363n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#1283
        var _9f = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1295
        var _9m = new Map([
            ["parts", $a([_9f])],
            ["ex", $a(["364n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1298
        var _9o = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1310
        var _9v = new Map([
            ["parts", $a([_9o])],
            ["ex", $a(["365n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1313
        var _9x = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1325
        var _A4 = new Map([
            ["parts", $a([_9x])],
            ["ex", $a(["366n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1328
        var _A6 = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1340
        var _AD = new Map([
            ["parts", $a([_A6])],
            ["ex", $a(["367n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#1343
        var _AF = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1355
        var _AM = new Map([
            ["parts", $a([_AF])],
            ["ex", $a(["368n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#1358
        var _AO = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1370
        var _AV = new Map([
            ["parts", $a([_AO])],
            ["ex", $a(["369n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#1373
        var _AX = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 8],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1385
        var _Af = new Map([
            ["parts", $a([_AX])],
            ["req", $a([$a([$a(["00"])]), $a([$a(["02"]), $a(["8026"])])])]
        ]); //#1387
        var _Ah = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 15],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1394
        var _Ao = new Map([
            ["parts", $a([_Ah])],
            ["ex", $a(["390n", "391n", "394n", "8111"])],
            ["req", $a([$a([$a(["255"]), $a(["8020"])])])]
        ]); //#1397
        var _Aq = new Map([
            ["cset", 'N'],
            ["min", 3],
            ["max", 3],
            ["opt", false],
            ["linters", $a(['lintiso4217'])]
        ]); //#1413
        var _As = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 15],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1414
        var _Ay = new Map([
            ["parts", $a([_Aq, _As])],
            ["ex", $a(["391n"])],
            ["req", $a([$a([$a(["8020"])])])]
        ]); //#1417
        var _B0 = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 15],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1433
        var _BC = new Map([
            ["parts", $a([_B0])],
            ["ex", $a(["392n", "393n"])],
            ["req", $a([$a([$a(["01"])]), $a([$a(["30"]), $a(["31nn"]), $a(["32nn"]), $a(["35nn"]), $a(["36nn"])])])]
        ]); //#1436
        var _BE = new Map([
            ["cset", 'N'],
            ["min", 3],
            ["max", 3],
            ["opt", false],
            ["linters", $a(['lintiso4217'])]
        ]); //#1452
        var _BG = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 15],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1453
        var _BQ = new Map([
            ["parts", $a([_BE, _BG])],
            ["ex", $a(["393n"])],
            ["req", $a([$a([$a(["30"]), $a(["31nn"]), $a(["32nn"]), $a(["35nn"]), $a(["36nn"])])])]
        ]); //#1456
        var _BS = new Map([
            ["cset", 'N'],
            ["min", 4],
            ["max", 4],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1472
        var _BY = new Map([
            ["parts", $a([_BS])],
            ["ex", $a(["394n", "8111"])],
            ["req", $a([$a([$a(["255"])])])]
        ]); //#1475
        var _Ba = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1485
        var _Bk = new Map([
            ["parts", $a([_Ba])],
            ["ex", $a(["392n", "393n", "395n", "8005"])],
            ["req", $a([$a([$a(["30"]), $a(["31nn"]), $a(["32nn"]), $a(["35nn"]), $a(["36nn"])])])]
        ]); //#1488
        var _Bm = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 30],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1500
        var _Bo = new Map([
            ["parts", $a([_Bm])]
        ]); //#1500
        var _Bq = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 30],
            ["opt", false],
            ["linters", $a(['lintkey'])]
        ]); //#1508
        var _Bt = new Map([
            ["parts", $a([_Bq])],
            ["dlpkey", $a([])]
        ]); //#1510
        var _Bv = new Map([
            ["cset", 'N'],
            ["min", 17],
            ["max", 17],
            ["opt", false],
            ["linters", $a(['lintcsum', 'lintkey'])]
        ]); //#1517
        var _By = new Map([
            ["parts", $a([_Bv])],
            ["dlpkey", $a([])]
        ]); //#1519
        var _C0 = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 30],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1526
        var _C5 = new Map([
            ["parts", $a([_C0])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1528
        var _C7 = new Map([
            ["cset", 'N'],
            ["min", 13],
            ["max", 13],
            ["opt", false],
            ["linters", $a(['lintcsum', 'lintkey'])]
        ]); //#1535
        var _C9 = new Map([
            ["parts", $a([_C7])]
        ]); //#1535
        var _CB = new Map([
            ["cset", 'N'],
            ["min", 13],
            ["max", 13],
            ["opt", false],
            ["linters", $a(['lintcsum', 'lintkey'])]
        ]); //#1546
        var _CG = new Map([
            ["parts", $a([_CB])],
            ["dlpkey", $a([$a(["254"]), $a(["7040"])])]
        ]); //#1548
        var _CI = new Map([
            ["cset", 'N'],
            ["min", 13],
            ["max", 13],
            ["opt", false],
            ["linters", $a(['lintcsum', 'lintkey'])]
        ]); //#1555
        var _CP = new Map([
            ["parts", $a([_CI])],
            ["req", $a([$a([$a(["8020"])])])],
            ["dlpkey", $a([$a(["8020"])])]
        ]); //#1558
        var _CR = new Map([
            ["cset", 'N'],
            ["min", 13],
            ["max", 13],
            ["opt", false],
            ["linters", $a(['lintcsum', 'lintkey'])]
        ]); //#1565
        var _CT = new Map([
            ["parts", $a([_CR])]
        ]); //#1565
        var _CV = new Map([
            ["cset", 'N'],
            ["min", 13],
            ["max", 13],
            ["opt", false],
            ["linters", $a(['lintcsum', 'lintkey'])]
        ]); //#1573
        var _CZ = new Map([
            ["parts", $a([_CV])],
            ["dlpkey", $a([$a(["7040"])])]
        ]); //#1575
        var _Cb = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1582
        var _Ce = new Map([
            ["parts", $a([_Cb])],
            ["ex", $a(["421"])]
        ]); //#1584
        var _Cg = new Map([
            ["cset", 'N'],
            ["min", 3],
            ["max", 3],
            ["opt", false],
            ["linters", $a(['lintiso3166'])]
        ]); //#1591
        var _Ci = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 9],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1592
        var _Cl = new Map([
            ["parts", $a([_Cg, _Ci])],
            ["ex", $a(["4307"])]
        ]); //#1594
        var _Cn = new Map([
            ["cset", 'N'],
            ["min", 3],
            ["max", 3],
            ["opt", false],
            ["linters", $a(['lintiso3166'])]
        ]); //#1601
        var _Cw = new Map([
            ["parts", $a([_Cn])],
            ["ex", $a(["426"])],
            ["req", $a([$a([$a(["01"]), $a(["02"]), $a(["8006"]), $a(["8026"])])])]
        ]); //#1604
        var _Cy = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 15],
            ["opt", false],
            ["linters", $a(['lintiso3166list'])]
        ]); //#1611
        var _D5 = new Map([
            ["parts", $a([_Cy])],
            ["ex", $a(["426"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1614
        var _D7 = new Map([
            ["cset", 'N'],
            ["min", 3],
            ["max", 3],
            ["opt", false],
            ["linters", $a(['lintiso3166'])]
        ]); //#1621
        var _DE = new Map([
            ["parts", $a([_D7])],
            ["ex", $a(["426"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1624
        var _DG = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 15],
            ["opt", false],
            ["linters", $a(['lintiso3166list'])]
        ]); //#1631
        var _DN = new Map([
            ["parts", $a([_DG])],
            ["ex", $a(["426"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1634
        var _DP = new Map([
            ["cset", 'N'],
            ["min", 3],
            ["max", 3],
            ["opt", false],
            ["linters", $a(['lintiso3166'])]
        ]); //#1641
        var _DV = new Map([
            ["parts", $a([_DP])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1643
        var _DX = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 3],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1650
        var _Df = new Map([
            ["parts", $a([_DX])],
            ["req", $a([$a([$a(["01"]), $a(["02"])]), $a([$a(["422"])])])]
        ]); //#1652
        var _Dh = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 35],
            ["opt", false],
            ["linters", $a(['lintpcenc'])]
        ]); //#1659
        var _Dm = new Map([
            ["parts", $a([_Dh])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1661
        var _Do = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 70],
            ["opt", false],
            ["linters", $a(['lintpcenc'])]
        ]); //#1669
        var _Dt = new Map([
            ["parts", $a([_Do])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1671
        var _Dv = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 70],
            ["opt", false],
            ["linters", $a(['lintpcenc'])]
        ]); //#1678
        var _E0 = new Map([
            ["parts", $a([_Dv])],
            ["req", $a([$a([$a(["4302"])])])]
        ]); //#1680
        var _E2 = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 70],
            ["opt", false],
            ["linters", $a(['lintpcenc'])]
        ]); //#1687
        var _E7 = new Map([
            ["parts", $a([_E2])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1689
        var _E9 = new Map([
            ["cset", 'X'],
            ["min", 2],
            ["max", 2],
            ["opt", false],
            ["linters", $a(['lintiso3166alpha2'])]
        ]); //#1698
        var _EE = new Map([
            ["parts", $a([_E9])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1700
        var _EG = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 30],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1707
        var _EL = new Map([
            ["parts", $a([_EG])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1709
        var _EN = new Map([
            ["cset", 'N'],
            ["min", 10],
            ["max", 10],
            ["opt", false],
            ["linters", $a(['lintlatitude'])]
        ]); //#1716
        var _EP = new Map([
            ["cset", 'N'],
            ["min", 10],
            ["max", 10],
            ["opt", false],
            ["linters", $a(['lintlongitude'])]
        ]); //#1717
        var _EU = new Map([
            ["parts", $a([_EN, _EP])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1719
        var _EW = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 35],
            ["opt", false],
            ["linters", $a(['lintpcenc'])]
        ]); //#1726
        var _Eb = new Map([
            ["parts", $a([_EW])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1728
        var _Ed = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 70],
            ["opt", false],
            ["linters", $a(['lintpcenc'])]
        ]); //#1736
        var _Ei = new Map([
            ["parts", $a([_Ed])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1738
        var _Ek = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 70],
            ["opt", false],
            ["linters", $a(['lintpcenc'])]
        ]); //#1745
        var _Ep = new Map([
            ["parts", $a([_Ek])],
            ["req", $a([$a([$a(["4312"])])])]
        ]); //#1747
        var _Er = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 70],
            ["opt", false],
            ["linters", $a(['lintpcenc'])]
        ]); //#1754
        var _Ew = new Map([
            ["parts", $a([_Er])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1756
        var _Ey = new Map([
            ["cset", 'X'],
            ["min", 2],
            ["max", 2],
            ["opt", false],
            ["linters", $a(['lintiso3166alpha2'])]
        ]); //#1765
        var _F3 = new Map([
            ["parts", $a([_Ey])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1767
        var _F5 = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1774
        var _FA = new Map([
            ["parts", $a([_F5])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1776
        var _FC = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 30],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1783
        var _FH = new Map([
            ["parts", $a([_FC])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1785
        var _FJ = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 35],
            ["opt", false],
            ["linters", $a(['lintpcenc'])]
        ]); //#1792
        var _FO = new Map([
            ["parts", $a([_FJ])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1794
        var _FQ = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 1],
            ["opt", false],
            ["linters", $a(['lintyesno'])]
        ]); //#1801
        var _FV = new Map([
            ["parts", $a([_FQ])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1803
        var _FX = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a(['lintyymmd0'])]
        ]); //#1812
        var _FZ = new Map([
            ["cset", 'N'],
            ["min", 4],
            ["max", 4],
            ["opt", false],
            ["linters", $a(['linthhmm'])]
        ]); //#1813
        var _Fe = new Map([
            ["parts", $a([_FX, _FZ])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1815
        var _Fg = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a(['lintyymmdd'])]
        ]); //#1823
        var _Fl = new Map([
            ["parts", $a([_Fg])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1825
        var _Fn = new Map([
            ["cset", 'N'],
            ["min", 13],
            ["max", 13],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1832
        var _Fv = new Map([
            ["parts", $a([_Fn])],
            ["req", $a([$a([$a(["01"]), $a(["02"]), $a(["8006"]), $a(["8026"])])])]
        ]); //#1834
        var _Fx = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 30],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1841
        var _G3 = new Map([
            ["parts", $a([_Fx])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1843
        var _G5 = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a(['lintyymmdd'])]
        ]); //#1850
        var _G7 = new Map([
            ["cset", 'N'],
            ["min", 4],
            ["max", 4],
            ["opt", false],
            ["linters", $a(['linthhmm'])]
        ]); //#1851
        var _GD = new Map([
            ["parts", $a([_G5, _G7])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1853
        var _GF = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 4],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1860
        var _GM = new Map([
            ["parts", $a([_GF])],
            ["req", $a([$a([$a(["01"])]), $a([$a(["10"])])])]
        ]); //#1862
        var _GO = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 12],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1869
        var _GU = new Map([
            ["parts", $a([_GO])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1871
        var _GW = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a(['lintyymmdd'])]
        ]); //#1878
        var _Gc = new Map([
            ["parts", $a([_GW])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1880
        var _Ge = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a(['lintyymmdd'])]
        ]); //#1887
        var _Gg = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", true],
            ["linters", $a(['lintyymmdd'])]
        ]); //#1888
        var _Gm = new Map([
            ["parts", $a([_Ge, _Gg])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1890
        var _Go = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 3],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1897
        var _Gu = new Map([
            ["parts", $a([_Go])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1899
        var _Gw = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 10],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1906
        var _H2 = new Map([
            ["parts", $a([_Gw])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1908
        var _H4 = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 2],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1915
        var _HA = new Map([
            ["parts", $a([_H4])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1917
        var _HC = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a(['lintyymmdd'])]
        ]); //#1924
        var _HE = new Map([
            ["cset", 'N'],
            ["min", 4],
            ["max", 4],
            ["opt", true],
            ["linters", $a(['linthhmm'])]
        ]); //#1925
        var _HK = new Map([
            ["parts", $a([_HC, _HE])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1927
        var _HM = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1934
        var _HU = new Map([
            ["parts", $a([_HM])],
            ["req", $a([$a([$a(["01"]), $a(["8006"])]), $a([$a(["416"])])])]
        ]); //#1936
        var _HW = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1943
        var _Hc = new Map([
            ["parts", $a([_HW])],
            ["req", $a([$a([$a(["01"]), $a(["8006"])])])]
        ]); //#1945
        var _He = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1952
        var _Hj = new Map([
            ["parts", $a([_He])],
            ["req", $a([$a([$a(["7021"])])])]
        ]); //#1954
        var _Hl = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 30],
            ["opt", false],
            ["linters", $a(['lintkey'])]
        ]); //#1961
        var _Hn = new Map([
            ["parts", $a([_Hl])]
        ]); //#1961
        var _Hp = new Map([
            ["cset", 'N'],
            ["min", 3],
            ["max", 3],
            ["opt", false],
            ["linters", $a(['lintiso3166999'])]
        ]); //#1969
        var _Hr = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 27],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1970
        var _Hx = new Map([
            ["parts", $a([_Hp, _Hr])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1972
        var _Hz = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 1],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1988
        var _I1 = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 1],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1989
        var _I3 = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 1],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1990
        var _I5 = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 1],
            ["opt", false],
            ["linters", $a(['lintimporteridx'])]
        ]); //#1991
        var _I7 = new Map([
            ["parts", $a([_Hz, _I1, _I3, _I5])]
        ]); //#1991
        var _I9 = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1999
        var _IE = new Map([
            ["parts", $a([_I9])],
            ["req", $a([$a([$a(["01"])])])]
        ]); //#2001
        var _IG = new Map([
            ["cset", 'X'],
            ["min", 2],
            ["max", 2],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2013
        var _II = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 28],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2014
        var _IO = new Map([
            ["parts", $a([_IG, _II])],
            ["req", $a([$a([$a(["01"]), $a(["8004"])])])]
        ]); //#2016
        var _IQ = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2032
        var _IW = new Map([
            ["parts", $a([_IQ])],
            ["req", $a([$a([$a(["01"]), $a(["8006"])])])]
        ]); //#2034
        var _IY = new Map([
            ["cset", 'N'],
            ["min", 2],
            ["max", 2],
            ["opt", false],
            ["linters", $a(['lintmediatype'])]
        ]); //#2041
        var _Ie = new Map([
            ["parts", $a([_IY])],
            ["req", $a([$a([$a(["8017"]), $a(["8018"])])])]
        ]); //#2043
        var _Ig = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 25],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2050
        var _Im = new Map([
            ["parts", $a([_Ig])],
            ["req", $a([$a([$a(["8017"]), $a(["8018"])])])]
        ]); //#2052
        var _Io = new Map([
            ["cset", 'N'],
            ["min", 4],
            ["max", 4],
            ["opt", false],
            ["linters", $a(['lintnonzero'])]
        ]); //#2059
        var _Iq = new Map([
            ["cset", 'N'],
            ["min", 5],
            ["max", 5],
            ["opt", false],
            ["linters", $a(['lintnonzero'])]
        ]); //#2060
        var _Is = new Map([
            ["cset", 'N'],
            ["min", 3],
            ["max", 3],
            ["opt", false],
            ["linters", $a(['lintnonzero'])]
        ]); //#2061
        var _Iu = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 1],
            ["opt", false],
            ["linters", $a(['lintwinding'])]
        ]); //#2062
        var _Iw = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 1],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2063
        var _J1 = new Map([
            ["parts", $a([_Io, _Iq, _Is, _Iu, _Iw])],
            ["req", $a([$a([$a(["01"])])])]
        ]); //#2065
        var _J3 = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2072
        var _J5 = new Map([
            ["parts", $a([_J3])]
        ]); //#2072
        var _J7 = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 1],
            ["opt", false],
            ["linters", $a(['lintzero'])]
        ]); //#2080
        var _J9 = new Map([
            ["cset", 'N'],
            ["min", 13],
            ["max", 13],
            ["opt", false],
            ["linters", $a(['lintcsum', 'lintkey'])]
        ]); //#2081
        var _JB = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 16],
            ["opt", true],
            ["linters", $a([])]
        ]); //#2082
        var _JE = new Map([
            ["parts", $a([_J7, _J9, _JB])],
            ["dlpkey", $a([])]
        ]); //#2084
        var _JG = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 30],
            ["opt", false],
            ["linters", $a(['lintkey'])]
        ]); //#2091
        var _JK = new Map([
            ["parts", $a([_JG])],
            ["dlpkey", $a([$a(["7040"])])]
        ]); //#2093
        var _JM = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2100
        var _JS = new Map([
            ["parts", $a([_JM])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#2102
        var _JU = new Map([
            ["cset", 'N'],
            ["min", 14],
            ["max", 14],
            ["opt", false],
            ["linters", $a(['lintcsum'])]
        ]); //#2109
        var _JW = new Map([
            ["cset", 'N'],
            ["min", 4],
            ["max", 4],
            ["opt", false],
            ["linters", $a(['lintpieceoftotal'])]
        ]); //#2110
        var _Jb = new Map([
            ["parts", $a([_JU, _JW])],
            ["ex", $a(["01", "37"])],
            ["dlpkey", $a([$a(["22", "10", "21"])])]
        ]); //#2113
        var _Jd = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 34],
            ["opt", false],
            ["linters", $a(['lintiban'])]
        ]); //#2120
        var _Ji = new Map([
            ["parts", $a([_Jd])],
            ["req", $a([$a([$a(["415"])])])]
        ]); //#2122
        var _Jk = new Map([
            ["cset", 'N'],
            ["min", 8],
            ["max", 8],
            ["opt", false],
            ["linters", $a(['lintyymmddhh'])]
        ]); //#2129
        var _Jm = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 4],
            ["opt", true],
            ["linters", $a(['lintmmoptss'])]
        ]); //#2130
        var _Js = new Map([
            ["parts", $a([_Jk, _Jm])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#2132
        var _Ju = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 50],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2139
        var _K0 = new Map([
            ["parts", $a([_Ju])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#2141
        var _K2 = new Map([
            ["cset", 'Y'],
            ["min", 1],
            ["max", 30],
            ["opt", false],
            ["linters", $a(['lintkey'])]
        ]); //#2148
        var _K6 = new Map([
            ["parts", $a([_K2])],
            ["dlpkey", $a([$a(["8011"])])]
        ]); //#2150
        var _K8 = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 12],
            ["opt", false],
            ["linters", $a(['lintnozeroprefix'])]
        ]); //#2157
        var _KD = new Map([
            ["parts", $a([_K8])],
            ["req", $a([$a([$a(["8010"])])])]
        ]); //#2159
        var _KF = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2166
        var _KL = new Map([
            ["parts", $a([_KF])],
            ["req", $a([$a([$a(["01"]), $a(["8006"])])])]
        ]); //#2168
        var _KN = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 25],
            ["opt", false],
            ["linters", $a(['lintcsumalpha', 'lintkey'])]
        ]); //#2175
        var _KQ = new Map([
            ["parts", $a([_KN])],
            ["dlpkey", $a([])]
        ]); //#2177
        var _KS = new Map([
            ["cset", 'N'],
            ["min", 18],
            ["max", 18],
            ["opt", false],
            ["linters", $a(['lintcsum', 'lintkey'])]
        ]); //#2184
        var _KX = new Map([
            ["parts", $a([_KS])],
            ["ex", $a(["8018"])],
            ["dlpkey", $a([$a(["8019"])])]
        ]); //#2187
        var _KZ = new Map([
            ["cset", 'N'],
            ["min", 18],
            ["max", 18],
            ["opt", false],
            ["linters", $a(['lintcsum', 'lintkey'])]
        ]); //#2194
        var _Ke = new Map([
            ["parts", $a([_KZ])],
            ["ex", $a(["8017"])],
            ["dlpkey", $a([$a(["8019"])])]
        ]); //#2197
        var _Kg = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 10],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2204
        var _Km = new Map([
            ["parts", $a([_Kg])],
            ["req", $a([$a([$a(["8017"]), $a(["8018"])])])]
        ]); //#2206
        var _Ko = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 25],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2213
        var _Kt = new Map([
            ["parts", $a([_Ko])],
            ["req", $a([$a([$a(["415"])])])]
        ]); //#2215
        var _Kv = new Map([
            ["cset", 'N'],
            ["min", 14],
            ["max", 14],
            ["opt", false],
            ["linters", $a(['lintcsum'])]
        ]); //#2222
        var _Kx = new Map([
            ["cset", 'N'],
            ["min", 4],
            ["max", 4],
            ["opt", false],
            ["linters", $a(['lintpieceoftotal'])]
        ]); //#2223
        var _L3 = new Map([
            ["parts", $a([_Kv, _Kx])],
            ["ex", $a(["02", "8006"])],
            ["req", $a([$a([$a(["37"])])])]
        ]); //#2226
        var _L5 = new Map([
            ["cset", 'Z'],
            ["min", 1],
            ["max", 90],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2233
        var _LJ = new Map([
            ["parts", $a([_L5])],
            ["req", $a([$a([$a(["00"]), $a(["01"]), $a(["253"]), $a(["255"]), $a(["8003"]), $a(["8004"]), $a(["8006"]), $a(["8010"]), $a(["8017"]), $a(["8018"])])])]
        ]); //#2235
        var _LL = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 70],
            ["opt", false],
            ["linters", $a(['lintcouponcode'])]
        ]); //#2242
        var _LN = new Map([
            ["parts", $a([_LL])]
        ]); //#2242
        var _LP = new Map([
            ["cset", 'N'],
            ["min", 4],
            ["max", 4],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2250
        var _LU = new Map([
            ["parts", $a([_LP])],
            ["req", $a([$a([$a(["255"])])])]
        ]); //#2252
        var _LW = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 70],
            ["opt", false],
            ["linters", $a(['lintcouponposoffer'])]
        ]); //#2259
        var _LY = new Map([
            ["parts", $a([_LW])]
        ]); //#2259
        var _La = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 70],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2267
        var _Lf = new Map([
            ["parts", $a([_La])],
            ["req", $a([$a([$a(["01"])])])]
        ]); //#2269
        var _Lh = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 30],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2276
        var _Lj = new Map([
            ["parts", $a([_Lh])]
        ]); //#2276
        var _Ll = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 90],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2284
        var _Ln = new Map([
            ["parts", $a([_Ll])]
        ]); //#2284
        var _Lo = new Map([
            ["00", _4],
            ["01", _C],
            ["02", _J],
            ["10", _T],
            ["11", _d],
            ["12", _k],
            ["13", _u],
            ["15", _u],
            ["16", _u],
            ["17", _15],
            ["20", _1F],
            ["21", _1O],
            ["22", _1V],
            ["235", _1c],
            ["240", _1m],
            ["241", _1m],
            ["242", _1w],
            ["243", _23],
            ["250", _2D],
            ["251", _2L],
            ["253", _2S],
            ["254", _2Z],
            ["255", _2h],
            ["30", _2p],
            ["3100", _2y],
            ["3101", _2y],
            ["3102", _2y],
            ["3103", _2y],
            ["3104", _2y],
            ["3105", _2y],
            ["3110", _37],
            ["3111", _37],
            ["3112", _37],
            ["3113", _37],
            ["3114", _37],
            ["3115", _37],
            ["3120", _3G],
            ["3121", _3G],
            ["3122", _3G],
            ["3123", _3G],
            ["3124", _3G],
            ["3125", _3G],
            ["3130", _3P],
            ["3131", _3P],
            ["3132", _3P],
            ["3133", _3P],
            ["3134", _3P],
            ["3135", _3P],
            ["3140", _3Y],
            ["3141", _3Y],
            ["3142", _3Y],
            ["3143", _3Y],
            ["3144", _3Y],
            ["3145", _3Y],
            ["3150", _3h],
            ["3151", _3h],
            ["3152", _3h],
            ["3153", _3h],
            ["3154", _3h],
            ["3155", _3h],
            ["3160", _3q],
            ["3161", _3q],
            ["3162", _3q],
            ["3163", _3q],
            ["3164", _3q],
            ["3165", _3q],
            ["3200", _3z],
            ["3201", _3z],
            ["3202", _3z],
            ["3203", _3z],
            ["3204", _3z],
            ["3205", _3z],
            ["3210", _48],
            ["3211", _48],
            ["3212", _48],
            ["3213", _48],
            ["3214", _48],
            ["3215", _48],
            ["3220", _4H],
            ["3221", _4H],
            ["3222", _4H],
            ["3223", _4H],
            ["3224", _4H],
            ["3225", _4H],
            ["3230", _4Q],
            ["3231", _4Q],
            ["3232", _4Q],
            ["3233", _4Q],
            ["3234", _4Q],
            ["3235", _4Q],
            ["3240", _4Z],
            ["3241", _4Z],
            ["3242", _4Z],
            ["3243", _4Z],
            ["3244", _4Z],
            ["3245", _4Z],
            ["3250", _4i],
            ["3251", _4i],
            ["3252", _4i],
            ["3253", _4i],
            ["3254", _4i],
            ["3255", _4i],
            ["3260", _4r],
            ["3261", _4r],
            ["3262", _4r],
            ["3263", _4r],
            ["3264", _4r],
            ["3265", _4r],
            ["3270", _50],
            ["3271", _50],
            ["3272", _50],
            ["3273", _50],
            ["3274", _50],
            ["3275", _50],
            ["3280", _59],
            ["3281", _59],
            ["3282", _59],
            ["3283", _59],
            ["3284", _59],
            ["3285", _59],
            ["3290", _5I],
            ["3291", _5I],
            ["3292", _5I],
            ["3293", _5I],
            ["3294", _5I],
            ["3295", _5I],
            ["3300", _5R],
            ["3301", _5R],
            ["3302", _5R],
            ["3303", _5R],
            ["3304", _5R],
            ["3305", _5R],
            ["3310", _5a],
            ["3311", _5a],
            ["3312", _5a],
            ["3313", _5a],
            ["3314", _5a],
            ["3315", _5a],
            ["3320", _5j],
            ["3321", _5j],
            ["3322", _5j],
            ["3323", _5j],
            ["3324", _5j],
            ["3325", _5j],
            ["3330", _5s],
            ["3331", _5s],
            ["3332", _5s],
            ["3333", _5s],
            ["3334", _5s],
            ["3335", _5s],
            ["3340", _61],
            ["3341", _61],
            ["3342", _61],
            ["3343", _61],
            ["3344", _61],
            ["3345", _61],
            ["3350", _6A],
            ["3351", _6A],
            ["3352", _6A],
            ["3353", _6A],
            ["3354", _6A],
            ["3355", _6A],
            ["3360", _6J],
            ["3361", _6J],
            ["3362", _6J],
            ["3363", _6J],
            ["3364", _6J],
            ["3365", _6J],
            ["3370", _6R],
            ["3371", _6R],
            ["3372", _6R],
            ["3373", _6R],
            ["3374", _6R],
            ["3375", _6R],
            ["3400", _6a],
            ["3401", _6a],
            ["3402", _6a],
            ["3403", _6a],
            ["3404", _6a],
            ["3405", _6a],
            ["3410", _6j],
            ["3411", _6j],
            ["3412", _6j],
            ["3413", _6j],
            ["3414", _6j],
            ["3415", _6j],
            ["3420", _6s],
            ["3421", _6s],
            ["3422", _6s],
            ["3423", _6s],
            ["3424", _6s],
            ["3425", _6s],
            ["3430", _71],
            ["3431", _71],
            ["3432", _71],
            ["3433", _71],
            ["3434", _71],
            ["3435", _71],
            ["3440", _7A],
            ["3441", _7A],
            ["3442", _7A],
            ["3443", _7A],
            ["3444", _7A],
            ["3445", _7A],
            ["3450", _7J],
            ["3451", _7J],
            ["3452", _7J],
            ["3453", _7J],
            ["3454", _7J],
            ["3455", _7J],
            ["3460", _7S],
            ["3461", _7S],
            ["3462", _7S],
            ["3463", _7S],
            ["3464", _7S],
            ["3465", _7S],
            ["3470", _7b],
            ["3471", _7b],
            ["3472", _7b],
            ["3473", _7b],
            ["3474", _7b],
            ["3475", _7b],
            ["3480", _7k],
            ["3481", _7k],
            ["3482", _7k],
            ["3483", _7k],
            ["3484", _7k],
            ["3485", _7k],
            ["3490", _7t],
            ["3491", _7t],
            ["3492", _7t],
            ["3493", _7t],
            ["3494", _7t],
            ["3495", _7t],
            ["3500", _82],
            ["3501", _82],
            ["3502", _82],
            ["3503", _82],
            ["3504", _82],
            ["3505", _82],
            ["3510", _8B],
            ["3511", _8B],
            ["3512", _8B],
            ["3513", _8B],
            ["3514", _8B],
            ["3515", _8B],
            ["3520", _8K],
            ["3521", _8K],
            ["3522", _8K],
            ["3523", _8K],
            ["3524", _8K],
            ["3525", _8K],
            ["3530", _8T],
            ["3531", _8T],
            ["3532", _8T],
            ["3533", _8T],
            ["3534", _8T],
            ["3535", _8T],
            ["3540", _8c],
            ["3541", _8c],
            ["3542", _8c],
            ["3543", _8c],
            ["3544", _8c],
            ["3545", _8c],
            ["3550", _8l],
            ["3551", _8l],
            ["3552", _8l],
            ["3553", _8l],
            ["3554", _8l],
            ["3555", _8l],
            ["3560", _8u],
            ["3561", _8u],
            ["3562", _8u],
            ["3563", _8u],
            ["3564", _8u],
            ["3565", _8u],
            ["3570", _93],
            ["3571", _93],
            ["3572", _93],
            ["3573", _93],
            ["3574", _93],
            ["3575", _93],
            ["3600", _9C],
            ["3601", _9C],
            ["3602", _9C],
            ["3603", _9C],
            ["3604", _9C],
            ["3605", _9C],
            ["3610", _9L],
            ["3611", _9L],
            ["3612", _9L],
            ["3613", _9L],
            ["3614", _9L],
            ["3615", _9L],
            ["3620", _9U],
            ["3621", _9U],
            ["3622", _9U],
            ["3623", _9U],
            ["3624", _9U],
            ["3625", _9U],
            ["3630", _9d],
            ["3631", _9d],
            ["3632", _9d],
            ["3633", _9d],
            ["3634", _9d],
            ["3635", _9d],
            ["3640", _9m],
            ["3641", _9m],
            ["3642", _9m],
            ["3643", _9m],
            ["3644", _9m],
            ["3645", _9m],
            ["3650", _9v],
            ["3651", _9v],
            ["3652", _9v],
            ["3653", _9v],
            ["3654", _9v],
            ["3655", _9v],
            ["3660", _A4],
            ["3661", _A4],
            ["3662", _A4],
            ["3663", _A4],
            ["3664", _A4],
            ["3665", _A4],
            ["3670", _AD],
            ["3671", _AD],
            ["3672", _AD],
            ["3673", _AD],
            ["3674", _AD],
            ["3675", _AD],
            ["3680", _AM],
            ["3681", _AM],
            ["3682", _AM],
            ["3683", _AM],
            ["3684", _AM],
            ["3685", _AM],
            ["3690", _AV],
            ["3691", _AV],
            ["3692", _AV],
            ["3693", _AV],
            ["3694", _AV],
            ["3695", _AV],
            ["37", _Af],
            ["3900", _Ao],
            ["3901", _Ao],
            ["3902", _Ao],
            ["3903", _Ao],
            ["3904", _Ao],
            ["3905", _Ao],
            ["3906", _Ao],
            ["3907", _Ao],
            ["3908", _Ao],
            ["3909", _Ao],
            ["3910", _Ay],
            ["3911", _Ay],
            ["3912", _Ay],
            ["3913", _Ay],
            ["3914", _Ay],
            ["3915", _Ay],
            ["3916", _Ay],
            ["3917", _Ay],
            ["3918", _Ay],
            ["3919", _Ay],
            ["3920", _BC],
            ["3921", _BC],
            ["3922", _BC],
            ["3923", _BC],
            ["3924", _BC],
            ["3925", _BC],
            ["3926", _BC],
            ["3927", _BC],
            ["3928", _BC],
            ["3929", _BC],
            ["3930", _BQ],
            ["3931", _BQ],
            ["3932", _BQ],
            ["3933", _BQ],
            ["3934", _BQ],
            ["3935", _BQ],
            ["3936", _BQ],
            ["3937", _BQ],
            ["3938", _BQ],
            ["3939", _BQ],
            ["3940", _BY],
            ["3941", _BY],
            ["3942", _BY],
            ["3943", _BY],
            ["3950", _Bk],
            ["3951", _Bk],
            ["3952", _Bk],
            ["3953", _Bk],
            ["3954", _Bk],
            ["3955", _Bk],
            ["400", _Bo],
            ["401", _Bt],
            ["402", _By],
            ["403", _C5],
            ["410", _C9],
            ["411", _C9],
            ["412", _C9],
            ["413", _C9],
            ["414", _CG],
            ["415", _CP],
            ["416", _CT],
            ["417", _CZ],
            ["420", _Ce],
            ["421", _Cl],
            ["422", _Cw],
            ["423", _D5],
            ["424", _DE],
            ["425", _DN],
            ["426", _DV],
            ["427", _Df],
            ["4300", _Dm],
            ["4301", _Dm],
            ["4302", _Dt],
            ["4303", _E0],
            ["4304", _E7],
            ["4305", _E7],
            ["4306", _E7],
            ["4307", _EE],
            ["4308", _EL],
            ["4309", _EU],
            ["4310", _Eb],
            ["4311", _Eb],
            ["4312", _Ei],
            ["4313", _Ep],
            ["4314", _Ew],
            ["4315", _Ew],
            ["4316", _Ew],
            ["4317", _F3],
            ["4318", _FA],
            ["4319", _FH],
            ["4320", _FO],
            ["4321", _FV],
            ["4322", _FV],
            ["4323", _FV],
            ["4324", _Fe],
            ["4325", _Fe],
            ["4326", _Fl],
            ["7001", _Fv],
            ["7002", _G3],
            ["7003", _GD],
            ["7004", _GM],
            ["7005", _GU],
            ["7006", _Gc],
            ["7007", _Gm],
            ["7008", _Gu],
            ["7009", _H2],
            ["7010", _HA],
            ["7011", _HK],
            ["7020", _HU],
            ["7021", _Hc],
            ["7022", _Hj],
            ["7023", _Hn],
            ["7030", _Hx],
            ["7031", _Hx],
            ["7032", _Hx],
            ["7033", _Hx],
            ["7034", _Hx],
            ["7035", _Hx],
            ["7036", _Hx],
            ["7037", _Hx],
            ["7038", _Hx],
            ["7039", _Hx],
            ["7040", _I7],
            ["710", _IE],
            ["711", _IE],
            ["712", _IE],
            ["713", _IE],
            ["714", _IE],
            ["715", _IE],
            ["7230", _IO],
            ["7231", _IO],
            ["7232", _IO],
            ["7233", _IO],
            ["7234", _IO],
            ["7235", _IO],
            ["7236", _IO],
            ["7237", _IO],
            ["7238", _IO],
            ["7239", _IO],
            ["7240", _IW],
            ["7241", _Ie],
            ["7242", _Im],
            ["8001", _J1],
            ["8002", _J5],
            ["8003", _JE],
            ["8004", _JK],
            ["8005", _JS],
            ["8006", _Jb],
            ["8007", _Ji],
            ["8008", _Js],
            ["8009", _K0],
            ["8010", _K6],
            ["8011", _KD],
            ["8012", _KL],
            ["8013", _KQ],
            ["8017", _KX],
            ["8018", _Ke],
            ["8019", _Km],
            ["8020", _Kt],
            ["8026", _L3],
            ["8030", _LJ],
            ["8110", _LN],
            ["8111", _LU],
            ["8112", _LY],
            ["8200", _Lf],
            ["90", _Lj],
            ["91", _Ln],
            ["92", _Ln],
            ["93", _Ln],
            ["94", _Ln],
            ["95", _Ln],
            ["96", _Ln],
            ["97", _Ln],
            ["98", _Ln],
            ["99", _Ln]
        ]); //#2296
        $_.gs1syntax = _Lo; //#2298
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_gs1process.$ctx[id] = $_[id]); //#2298
        bwipp_gs1process.__2299__ = 1; //#2298
        $_ = Object.getPrototypeOf($_); //#2298
    } //#2298
    if ($eq($k[--$j], 'ai')) { //#2507
        $anchorsearch($k[--$j], "("); //#2306
        if ($nt($k[--$j])) { //#2308
            $j--; //#2307
            $k[$j++] = 'bwipp.GS1aiMissingOpenParen#2307'; //#2307
            $k[$j++] = "AIs must start with '('"; //#2307
            bwipp_raiseerror(); //#2307
        } //#2307
        $j--; //#2309
        $k[$j++] = Infinity; //#2310
        var _Lt = $k[--$j]; //#2310
        var _Lu = $k[--$j]; //#2310
        $k[$j++] = _Lt; //#2317
        $k[$j++] = _Lu; //#2317
        for (;;) { //#2317
            var _Lv = $k[--$j]; //#2311
            $k[$j++] = _Lv; //#2311
            if ($eq(_Lv, "")) { //#2311
                $j--; //#2311
                break; //#2311
            } //#2311
            $search($k[--$j], ")"); //#2312
            if ($nt($k[--$j])) { //#2314
                $cleartomark(); //#2313
                $k[$j++] = 'bwipp.GS1aiMissingCloseParen#2313'; //#2313
                $k[$j++] = "AIs must end with ')'"; //#2313
                bwipp_raiseerror(); //#2313
            } //#2313
            var _Ly = $k[--$j]; //#2315
            var _Lz = $k[--$j]; //#2315
            $k[$j++] = _Ly; //#2315
            $k[$j++] = _Lz; //#2315
            $j--; //#2315
            var _M0 = $k[--$j]; //#2315
            var _M1 = $k[--$j]; //#2315
            $k[$j++] = _M0; //#2316
            $search(_M1, "("); //#2316
            if ($k[--$j]) { //#2316
                var _M3 = $k[--$j]; //#2316
                var _M4 = $k[--$j]; //#2316
                $k[$j++] = _M3; //#2316
                $k[$j++] = _M4; //#2316
                $j--; //#2316
                var _M5 = $k[--$j]; //#2316
                var _M6 = $k[--$j]; //#2316
                $k[$j++] = _M5; //#2316
                $k[$j++] = _M6; //#2316
            } else { //#2316
                $k[$j++] = ""; //#2316
            } //#2316
        } //#2316
        var _M7 = $counttomark(); //#2318
        $k[$j++] = _M7; //#2318
        if (_M7 > 0) { //#2318
            var _M8 = $k[--$j]; //#2318
            for (var _MA = _M8, _M9 = (~~(_M8 / 2)) + 1; _MA >= _M9; _MA -= 1) { //#2318
                $r(_MA, -1); //#2318
            } //#2318
        } else { //#2318
            $j--; //#2318
        } //#2318
        $astore($a(~~($counttomark() / 2))); //#2319
        $_.ais = $k[--$j]; //#2319
        $astore($a($counttomark())); //#2320
        $k[$j++] = Infinity; //#2320
        var _MG = $k[--$j]; //#2320
        var _MH = $k[--$j]; //#2320
        $k[$j++] = _MG; //#2322
        $forall(_MH, function() { //#2322
            var _MJ = new Map([
                ["parse", $_.parse],
                ["parseonly", true],
                ["parsefnc", false]
            ]); //#2321
            $k[$j++] = _MJ; //#2321
            bwipp_parseinput(); //#2321
        }); //#2321
        $_.vals = $a(); //#2322
        $j--; //#2323
    } else { //#2507
        $anchorsearch($k[--$j], "http://"); //#2328
        if ($nt($k[--$j])) { //#2331
            $anchorsearch($k[--$j], "https://"); //#2329
            if ($nt($k[--$j])) { //#2331
                $j--; //#2330
                $k[$j++] = 'bwipp.GS1dlURIbadScheme#2330'; //#2330
                $k[$j++] = "Scheme must be http:// or https://"; //#2330
                bwipp_raiseerror(); //#2330
            } //#2330
        } //#2330
        $j--; //#2332
        $search($k[--$j], "/"); //#2335
        if ($nt($k[--$j])) { //#2337
            $j--; //#2336
            $k[$j++] = 'bwipp.GS1dlMissingDomainOrPathInfo#2336'; //#2336
            $k[$j++] = "URI must contain a domain and path info"; //#2336
            bwipp_raiseerror(); //#2336
        } //#2336
        $j -= 2; //#2338
        $search($k[--$j], "#"); //#2341
        if ($k[--$j]) { //#2343
            var _MT = $k[--$j]; //#2342
            var _MU = $k[--$j]; //#2342
            $k[$j++] = _MT; //#2342
            $k[$j++] = _MU; //#2342
            $j--; //#2342
            var _MV = $k[--$j]; //#2342
            var _MW = $k[--$j]; //#2342
            $k[$j++] = _MV; //#2342
            $k[$j++] = _MW; //#2342
            $j--; //#2342
        } //#2342
        $search($k[--$j], "?"); //#2346
        if ($nt($k[--$j])) { //#2348
            var _MZ = $k[--$j]; //#2347
            $k[$j++] = ""; //#2347
            $k[$j++] = null; //#2347
            $k[$j++] = _MZ; //#2347
        } //#2347
        $_.pp = $k[--$j]; //#2349
        $j--; //#2350
        $_.qp = $k[--$j]; //#2351
        $k[$j++] = Infinity; //#2354
        $k[$j++] = 0; //#2358
        $k[$j++] = 0; //#2358
        $k[$j++] = $_.pp; //#2358
        for (;;) { //#2358
            $search($k[--$j], "/"); //#2356
            if ($nt($k[--$j])) { //#2356
                $j--; //#2356
                break; //#2356
            } //#2356
            var _Mf = $k[--$j]; //#2357
            var _Mg = $k[--$j]; //#2357
            $k[$j++] = _Mf.length + 1; //#2357
            $k[$j++] = _Mg; //#2357
            $j--; //#2357
            var _Mh = $k[--$j]; //#2357
            var _Mi = $k[--$j]; //#2357
            var _Mj = $k[--$j]; //#2357
            $k[$j++] = _Mj; //#2357
            $k[$j++] = $f(_Mh + _Mj); //#2357
            $k[$j++] = _Mi; //#2357
        } //#2357
        $astore($a($counttomark() - 1)); //#2359
        $_.pipos = $k[--$j]; //#2359
        $j -= 2; //#2359
        if ($_.pipos.length <= 1) { //#2362
            $k[$j++] = 'bwipp.GS1dlNoAIinfo#2361'; //#2361
            $k[$j++] = "The path was too short to contain AI info"; //#2361
            bwipp_raiseerror(); //#2361
        } //#2361
        $k[$j++] = false; //#2378
        for (var _Mp = $_.pipos.length - 2; _Mp >= 0; _Mp -= 2) { //#2378
            var _Mr = $get($_.pipos, _Mp); //#2368
            var _Mv = $geti($_.pp, _Mr, $f($f($get($_.pipos, _Mp + 1) - _Mr) - 1)); //#2369
            var _Mx = $get($_.gs1syntax, _Mv) !== undefined; //#2370
            $k[$j++] = _Mp; //#2376
            $k[$j++] = _Mv; //#2376
            if (_Mx) { //#2375
                var _N1 = $get($get($_.gs1syntax, $k[--$j]), 'dlpkey') !== undefined; //#2371
                if (_N1) { //#2373
                    var _N2 = $k[--$j]; //#2372
                    var _N3 = $k[--$j]; //#2372
                    $k[$j++] = _N2; //#2372
                    $k[$j++] = _N3; //#2372
                    $j--; //#2372
                    $k[$j++] = true; //#2372
                    break; //#2372
                } //#2372
            } else { //#2375
                $j--; //#2375
            } //#2375
            $j--; //#2377
        } //#2377
        if ($nt($k[--$j])) { //#2381
            $k[$j++] = 'bwipp.GS1dlNoAIinfo#2380'; //#2380
            $k[$j++] = "The path does not contain a valid primary key"; //#2380
            bwipp_raiseerror(); //#2380
        } //#2380
        var _N7 = $get($_.pipos, $k[--$j]); //#2382
        $_.pp = $geti($_.pp, _N7, $f($_.pp.length - _N7)); //#2382
        $_.uriunescape = function() {
            $_.qq = $k[--$j]; //#2385
            $_.in = $k[--$j]; //#2386
            $_.out = $s($_.in.length); //#2387
            $k[$j++] = 0; //#2407
            $k[$j++] = 0; //#2407
            for (;;) { //#2407
                var _NF = $k[--$j]; //#2389
                var _NG = $k[--$j]; //#2389
                $k[$j++] = _NG; //#2389
                $k[$j++] = _NF; //#2389
                if (_NG >= $_.in.length) { //#2389
                    break; //#2389
                } //#2389
                var _NJ = $k[--$j]; //#2390
                var _NK = $k[--$j]; //#2390
                var _NL = $get($_.in, _NK); //#2390
                $k[$j++] = _NK; //#2406
                $k[$j++] = _NJ; //#2406
                $k[$j++] = _NL; //#2406
                if ((_NL == 43) && $_.qq) { //#2405
                    $j--; //#2392
                    var _NO = $k[--$j]; //#2392
                    $put($_.out, _NO, 32); //#2392
                    var _NP = $k[--$j]; //#2393
                    $k[$j++] = $f(_NP + 1); //#2393
                    $k[$j++] = $f(_NO + 1); //#2393
                } else { //#2405
                    var _NQ = $k[--$j]; //#2395
                    var _NR = $k[--$j]; //#2395
                    var _NS = $k[--$j]; //#2395
                    $k[$j++] = _NS; //#2406
                    $k[$j++] = _NR; //#2406
                    $k[$j++] = _NQ; //#2406
                    if ((_NQ == 37) && (_NS < ($_.in.length - 2))) { //#2405
                        $j--; //#2396
                        var _NV = $strcpy($s(4), "<  >"); //#2397
                        var _NX = $k[--$j]; //#2397
                        var _NY = $k[--$j]; //#2397
                        $puti(_NV, 1, $geti($_.in, $f(_NY + 1), 2)); //#2397
                        try { //#2398
                            $k[$j++] = _NY; //#2398
                            $k[$j++] = _NX; //#2398
                            $k[$j++] = $cvx(_NV); //#2398
                            $k[$j++] = false
                        } catch (e) {
                            $k[$j++] = true
                        } //#2398
                        if ($k[--$j]) { //#2400
                            $j -= 2; //#2399
                            $k[$j++] = 'bwipp.GS1dlBadHexCharacter#2399'; //#2399
                            $k[$j++] = "Invalid hex character"; //#2399
                            bwipp_raiseerror(); //#2399
                        } //#2399
                        var _Nc = $get($k[--$j], 0); //#2401
                        var _Ne = $k[--$j]; //#2401
                        $put($_.out, _Ne, _Nc); //#2401
                        var _Nf = $k[--$j]; //#2402
                        $k[$j++] = $f(_Nf + 3); //#2402
                        $k[$j++] = $f(_Ne + 1); //#2402
                    } else { //#2405
                        var _Nh = $k[--$j]; //#2404
                        var _Ni = $k[--$j]; //#2404
                        $put($_.out, _Ni, _Nh); //#2404
                        var _Nj = $k[--$j]; //#2405
                        $k[$j++] = $f(_Nj + 1); //#2405
                        $k[$j++] = $f(_Ni + 1); //#2405
                    } //#2405
                } //#2405
            } //#2405
            $_.out = $geti($_.out, 0, $k[--$j]); //#2408
            $j--; //#2409
            $k[$j++] = $_.out; //#2410
        }; //#2410
        $_.isvaliddlpkeyseq = function() {
            $_.in = $k[--$j]; //#2414
            $k[$j++] = false; //#2428
            $forall($get($get($_.gs1syntax, $get($_.in, 0)), 'dlpkey'), function() { //#2428
                $_.seq = $k[--$j]; //#2417
                $_.i = 1; //#2418
                $_.j = 0; //#2418
                for (;;) { //#2426
                    if ($_.i >= $_.in.length) { //#2420
                        break; //#2420
                    } //#2420
                    if ($_.j >= $_.seq.length) { //#2421
                        break; //#2421
                    } //#2421
                    if ($eq($get($_.in, $_.i), $get($_.seq, $_.j))) { //#2424
                        $_.i = $_.i + 1; //#2423
                    } //#2423
                    $_.j = $_.j + 1; //#2425
                } //#2425
                if ($_.i == $_.in.length) { //#2427
                    $j--; //#2427
                    $k[$j++] = true; //#2427
                    return true; //#2427
                } //#2427
            }); //#2427
        }; //#2427
        $_.ais = $a(99); //#2431
        $_.vals = $a(99); //#2432
        $k[$j++] = 0; //#2446
        $k[$j++] = $_.pp; //#2446
        for (;;) { //#2446
            $search($k[--$j], "/"); //#2437
            if ($k[--$j]) { //#2443
                var _OF = $k[--$j]; //#2438
                var _OG = $k[--$j]; //#2438
                var _OH = $k[--$j]; //#2438
                var _OI = $k[--$j]; //#2438
                $put($_.ais, _OI, _OF); //#2438
                $k[$j++] = _OI; //#2440
                $search(_OH, "/"); //#2440
                if ($k[--$j]) { //#2440
                    var _OK = $k[--$j]; //#2440
                    var _OL = $k[--$j]; //#2440
                    $k[$j++] = _OK; //#2440
                    $k[$j++] = _OL; //#2440
                    $j--; //#2440
                } else { //#2440
                    var _OM = $k[--$j]; //#2440
                    $k[$j++] = ""; //#2440
                    $k[$j++] = _OM; //#2440
                } //#2440
                var _OO = $k[--$j]; //#2441
                var _OP = $k[--$j]; //#2441
                var _OQ = $k[--$j]; //#2441
                $k[$j++] = _OQ; //#2441
                $k[$j++] = _OP; //#2441
                $k[$j++] = $_.vals; //#2441
                $k[$j++] = _OQ; //#2441
                $k[$j++] = _OO; //#2441
                $k[$j++] = false; //#2441
                $_.uriunescape(); //#2441
                var _OR = $k[--$j]; //#2441
                var _OS = $k[--$j]; //#2441
                $put($k[--$j], _OS, _OR); //#2441
            } else { //#2443
                $j--; //#2443
                break; //#2443
            } //#2443
            var _OU = $k[--$j]; //#2445
            var _OV = $k[--$j]; //#2445
            $k[$j++] = $f(_OV + 1); //#2445
            $k[$j++] = _OU; //#2445
        } //#2445
        var _OW = $k[--$j]; //#2447
        $_.plen = _OW; //#2447
        $k[$j++] = _OW; //#2454
        if (_OW > 1) { //#2454
            $k[$j++] = $geti($_.ais, 0, $_.plen); //#2451
            $_.isvaliddlpkeyseq(); //#2451
            if ($nt($k[--$j])) { //#2453
                $j--; //#2452
                $k[$j++] = 'bwipp.GS1dlBadPathInfo#2452'; //#2452
                $k[$j++] = "The AIs in the path are not a valid key-qualifier sequence for the key"; //#2452
                bwipp_raiseerror(); //#2452
            } //#2452
        } //#2452
        $k[$j++] = $_.qp; //#2472
        for (;;) { //#2472
            var _Oc = $k[--$j]; //#2458
            $k[$j++] = _Oc; //#2458
            if ($eq(_Oc, "")) { //#2458
                $j--; //#2458
                break; //#2458
            } //#2458
            $search($k[--$j], "&"); //#2459
            if ($k[--$j]) { //#2459
                var _Of = $k[--$j]; //#2459
                var _Og = $k[--$j]; //#2459
                $k[$j++] = _Of; //#2459
                $k[$j++] = _Og; //#2459
                $j--; //#2459
            } else { //#2459
                var _Oh = $k[--$j]; //#2459
                $k[$j++] = ""; //#2459
                $k[$j++] = _Oh; //#2459
            } //#2459
            $search($k[--$j], "="); //#2460
            if ($k[--$j]) { //#2470
                var _Ok = $k[--$j]; //#2461
                $k[$j++] = _Ok; //#2461
                $k[$j++] = true; //#2461
                $forall(_Ok, function() { //#2461
                    var _Ol = $k[--$j]; //#2461
                    var _Om = $k[--$j]; //#2461
                    $k[$j++] = _Om && ((_Ol >= 48) && (_Ol <= 57)); //#2461
                }); //#2461
                if ($k[--$j]) { //#2467
                    var _Op = $k[--$j]; //#2462
                    var _Oq = $k[--$j]; //#2462
                    var _Or = $k[--$j]; //#2462
                    var _Os = $k[--$j]; //#2462
                    var _Ot = $k[--$j]; //#2462
                    $put($_.ais, _Ot, _Op); //#2462
                    $k[$j++] = _Ot; //#2464
                    $k[$j++] = _Os; //#2464
                    $k[$j++] = $_.vals; //#2464
                    $k[$j++] = _Ot; //#2464
                    $k[$j++] = _Or; //#2464
                    $k[$j++] = true; //#2464
                    $_.uriunescape(); //#2464
                    var _Ov = $k[--$j]; //#2464
                    var _Ow = $k[--$j]; //#2464
                    $put($k[--$j], _Ow, _Ov); //#2464
                    var _Oy = $k[--$j]; //#2465
                    var _Oz = $k[--$j]; //#2465
                    $k[$j++] = $f(_Oz + 1); //#2465
                    $k[$j++] = _Oy; //#2465
                } else { //#2467
                    $j -= 3; //#2467
                } //#2467
            } else { //#2470
                $j--; //#2470
            } //#2470
        } //#2470
        var _P2 = $k[--$j]; //#2475
        var _P4 = $geti($_.ais, $_.plen, $f(_P2 - $_.plen)); //#2475
        $k[$j++] = _P2; //#2490
        for (var _P5 = 0, _P6 = _P4.length; _P5 < _P6; _P5++) { //#2490
            $k[$j++] = $get(_P4, _P5); //#2488
            for (var _P9 = $_.plen; _P9 >= 1; _P9 -= 1) { //#2488
                var _PA = $k[--$j]; //#2477
                $k[$j++] = _PA; //#2479
                $k[$j++] = _P9; //#2479
                $k[$j++] = _PA; //#2479
                $k[$j++] = Infinity; //#2477
                $aload($geti($_.ais, 0, $_.plen)); //#2478
                $r($counttomark() + 3, -2); //#2479
                var _PF = $k[--$j]; //#2479
                var _PG = $k[--$j]; //#2479
                $k[$j++] = _PF; //#2479
                $r(_PG, 1); //#2479
                var _PH = $a(); //#2479
                $k[$j++] = _PH; //#2480
                $_.isvaliddlpkeyseq(); //#2480
                if ($k[--$j]) { //#2487
                    var _PJ = $k[--$j]; //#2481
                    var _PK = $k[--$j]; //#2481
                    $k[$j++] = _PJ; //#2481
                    $k[$j++] = _PK; //#2481
                    $j--; //#2481
                    var _PL = $k[--$j]; //#2482
                    var _PM = _PL.length; //#2482
                    var _PN = $s(_PM + 50); //#2482
                    $puti(_PN, 0, "AI ("); //#2483
                    $puti(_PN, 4, _PL); //#2484
                    $puti(_PN, _PM + 4, ") from query params should be in the path info"); //#2485
                    $k[$j++] = _PL; //#2486
                    $k[$j++] = _PN; //#2486
                    $k[$j++] = _PM; //#2486
                    $j--; //#2486
                    var _PO = $k[--$j]; //#2486
                    var _PP = $k[--$j]; //#2486
                    $k[$j++] = _PO; //#2486
                    $k[$j++] = _PP; //#2486
                    $j--; //#2486
                    var _PQ = $k[--$j]; //#2486
                    $k[$j++] = 'bwipp.GS1dlAttributeMustBeQualifier#2486'; //#2486
                    $k[$j++] = _PQ; //#2486
                    bwipp_raiseerror(); //#2486
                } //#2486
            } //#2486
            $j--; //#2489
        } //#2489
        var _PS = $k[--$j]; //#2492
        $_.ais = $geti($_.ais, 0, _PS); //#2492
        $_.vals = $geti($_.vals, 0, _PS); //#2493
        for (var _PY = 0, _PX = $_.ais.length - 1; _PY <= _PX; _PY += 1) { //#2508
            $k[$j++] = _PY; //#2506
            if ($eq($get($_.ais, _PY), "01")) { //#2506
                var _Pb = $k[--$j]; //#2499
                var _Pd = $get($_.vals, _Pb); //#2499
                var _Pe = _Pd.length; //#2500
                $k[$j++] = _Pb; //#2505
                $k[$j++] = _Pd; //#2505
                if ((_Pe == 8) || ((_Pe == 12) || (_Pe == 13))) { //#2504
                    var _Pg = $strcpy($s(14), "00000000000000"); //#2501
                    var _Ph = $k[--$j]; //#2501
                    $puti(_Pg, 14 - _Ph.length, _Ph); //#2501
                    var _Pj = $k[--$j]; //#2502
                    $put($_.vals, _Pj, _Pg); //#2502
                    $k[$j++] = _Pj; //#2502
                } else { //#2504
                    $j--; //#2504
                } //#2504
            } //#2504
            $j--; //#2507
        } //#2507
    } //#2507
    if (!bwipp_gs1process.__2521__) { //#2521
        $_ = Object.create($_); //#2521
        $k[$j++] = Infinity; //#2514
        var _Pk = $a(["00", "01", "02", "03", "04", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "31", "32", "33", "34", "35", "36", "41"]); //#2519
        for (var _Pl = 0, _Pm = _Pk.length; _Pl < _Pm; _Pl++) { //#2520
            var _Pn = $get(_Pk, _Pl); //#2520
            $k[$j++] = _Pn; //#2520
            $k[$j++] = _Pn; //#2520
        } //#2520
        $_.aifixed = $d(); //#2520
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_gs1process.$ctx[id] = $_[id]); //#2520
        bwipp_gs1process.__2521__ = 1; //#2520
        $_ = Object.getPrototypeOf($_); //#2520
    } //#2520
    $k[$j++] = Infinity; //#2523
    var _Pq = $_.ais; //#2524
    for (var _Pr = 0, _Ps = _Pq.length; _Pr < _Ps; _Pr++) { //#2531
        var _Pt = $get(_Pq, _Pr); //#2531
        $k[$j++] = true; //#2530
        $k[$j++] = _Pt; //#2530
        if (_Pt.length >= 2) { //#2529
            var _Px = $get($_.aifixed, $geti($k[--$j], 0, 2)) !== undefined; //#2527
            if (_Px) { //#2527
                $j--; //#2527
                $k[$j++] = false; //#2527
            } //#2527
        } else { //#2529
            $j--; //#2529
        } //#2529
    } //#2529
    $_.fncs = $a(); //#2529
    if (!bwipp_gs1process.__2556__) { //#2556
        $_ = Object.create($_); //#2556
        $k[$j++] = Infinity; //#2537
        $k[$j++] = 0; //#2539
        for (var _Pz = 0, _Q0 = "!\"%&'()*+,-./0123456789:;<=>?ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz".length; _Pz < _Q0; _Pz++) { //#2539
            var _Q2 = $k[--$j]; //#2539
            $k[$j++] = $get("!\"%&'()*+,-./0123456789:;<=>?ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz", _Pz); //#2539
            $k[$j++] = _Q2; //#2539
            $k[$j++] = $f(_Q2 + 1); //#2539
        } //#2539
        $j--; //#2539
        $_.cset82 = $d(); //#2540
        $k[$j++] = Infinity; //#2542
        $k[$j++] = 0; //#2544
        for (var _Q4 = 0, _Q5 = "#-/0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ".length; _Q4 < _Q5; _Q4++) { //#2544
            var _Q7 = $k[--$j]; //#2544
            $k[$j++] = $get("#-/0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ", _Q4); //#2544
            $k[$j++] = _Q7; //#2544
            $k[$j++] = $f(_Q7 + 1); //#2544
        } //#2544
        $j--; //#2544
        $_.cset39 = $d(); //#2545
        $k[$j++] = Infinity; //#2547
        $k[$j++] = 0; //#2549
        for (var _Q9 = 0, _QA = "23456789ABCDEFGHJKLMNPQRSTUVWXYZ".length; _Q9 < _QA; _Q9++) { //#2549
            var _QC = $k[--$j]; //#2549
            $k[$j++] = $get("23456789ABCDEFGHJKLMNPQRSTUVWXYZ", _Q9); //#2549
            $k[$j++] = _QC; //#2549
            $k[$j++] = $f(_QC + 1); //#2549
        } //#2549
        $j--; //#2549
        $_.cset32 = $d(); //#2550
        $k[$j++] = Infinity; //#2552
        $k[$j++] = 0; //#2554
        for (var _QE = 0, _QF = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_".length; _QE < _QF; _QE++) { //#2554
            var _QH = $k[--$j]; //#2554
            $k[$j++] = $get("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", _QE); //#2554
            $k[$j++] = _QH; //#2554
            $k[$j++] = $f(_QH + 1); //#2554
        } //#2554
        $j--; //#2554
        $_.cset64 = $d(); //#2555
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_gs1process.$ctx[id] = $_[id]); //#2555
        bwipp_gs1process.__2556__ = 1; //#2555
        $_ = Object.getPrototypeOf($_); //#2555
    } //#2555
    $_.lintnumeric = function() {
        var _QK = $k[--$j]; //#2559
        $k[$j++] = true; //#2559
        $forall(_QK, function() { //#2559
            var _QL = $k[--$j]; //#2559
            if ((_QL < 48) || (_QL > 57)) { //#2559
                $j--; //#2559
                $k[$j++] = false; //#2559
                return true; //#2559
            } //#2559
        }); //#2559
        if ($nt($k[--$j])) { //#2560
            $j--; //#2560
            $k[$j++] = 'bwipp.GS1notNumeric#2560'; //#2560
            $k[$j++] = "Not numeric"; //#2560
            $k[$j++] = false; //#2560
            return true; //#2560
        } //#2560
    }; //#2560
    $_.lintcset82 = function() {
        var _QN = $k[--$j]; //#2564
        $k[$j++] = true; //#2564
        $forall(_QN, function() { //#2564
            var _QQ = $get($_.cset82, $k[--$j]) !== undefined; //#2564
            if (!_QQ) { //#2564
                $j--; //#2564
                $k[$j++] = false; //#2564
                return true; //#2564
            } //#2564
        }); //#2564
        if ($nt($k[--$j])) { //#2565
            $j--; //#2565
            $k[$j++] = 'bwipp.GS1badCSET82character#2565'; //#2565
            $k[$j++] = "Invalid CSET 82 character"; //#2565
            $k[$j++] = false; //#2565
            return true; //#2565
        } //#2565
    }; //#2565
    $_.lintcset39 = function() {
        var _QS = $k[--$j]; //#2569
        $k[$j++] = true; //#2569
        $forall(_QS, function() { //#2569
            var _QV = $get($_.cset39, $k[--$j]) !== undefined; //#2569
            if (!_QV) { //#2569
                $j--; //#2569
                $k[$j++] = false; //#2569
                return true; //#2569
            } //#2569
        }); //#2569
        if ($nt($k[--$j])) { //#2570
            $j--; //#2570
            $k[$j++] = 'bwipp.GS1badCSET39character#2570'; //#2570
            $k[$j++] = "Invalid CSET 39 character"; //#2570
            $k[$j++] = false; //#2570
            return true; //#2570
        } //#2570
    }; //#2570
    $_.lintcset64 = function() {
        var _QX = $k[--$j]; //#2575
        $k[$j++] = true; //#2575
        $forall(_QX, function() { //#2575
            var _QY = $k[--$j]; //#2575
            var _Qa = $get($_.cset64, _QY) !== undefined; //#2575
            if ((!_Qa) && (_QY != 61)) { //#2575
                $j--; //#2575
                $k[$j++] = false; //#2575
                return true; //#2575
            } //#2575
        }); //#2575
        if ($nt($k[--$j])) { //#2576
            $j--; //#2576
            $k[$j++] = 'bwipp.GS1badCSET64character#2576'; //#2576
            $k[$j++] = "Invalid CSET 64 character"; //#2576
            $k[$j++] = false; //#2576
            return true; //#2576
        } //#2576
    }; //#2576
    $_.lintkey = function() {
        var _Qc = $k[--$j]; //#2580
        $k[$j++] = _Qc; //#2580
        if (_Qc.length < 2) { //#2580
            $j -= 2; //#2580
            $k[$j++] = 'bwipp.GS1keyTooShort#2580'; //#2580
            $k[$j++] = "Key is too short"; //#2580
            $k[$j++] = false; //#2580
            return true; //#2580
        } //#2580
        var _Qd = $k[--$j]; //#2581
        var _Qe = $get(_Qd, 0); //#2581
        var _Qf = $get(_Qd, 1); //#2582
        if (((_Qe < 48) || (_Qe > 57)) || ((_Qf < 48) || (_Qf > 57))) { //#2584
            $j--; //#2583
            $k[$j++] = 'bwipp.GS1badGCP#2583'; //#2583
            $k[$j++] = "Non-numeric company prefix"; //#2583
            $k[$j++] = false; //#2583
            return true; //#2583
        } //#2583
    }; //#2583
    $_.lintimporteridx = function() {
        $search("-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz", $k[--$j]); //#2589
        if ($nt($k[--$j])) { //#2589
            $j -= 2; //#2589
            $k[$j++] = 'bwipp.GS1badImporterIndex#2589'; //#2589
            $k[$j++] = "Invalid importer index"; //#2589
            $k[$j++] = false; //#2589
            return true; //#2589
        } //#2589
        $j -= 3; //#2590
    }; //#2590
    $_.lintcsum = function() {
        $k[$j++] = Infinity; //#2594
        var _Qi = $k[--$j]; //#2594
        var _Qj = $k[--$j]; //#2594
        var _Qk = ((_Qj.length % 2) == 0) ? 3 : 1; //#2595
        $k[$j++] = _Qi; //#2596
        $k[$j++] = _Qk; //#2596
        $forall(_Qj, function() { //#2596
            var _Ql = $k[--$j]; //#2596
            var _Qm = $k[--$j]; //#2596
            $k[$j++] = $f(_Ql - 48) * _Qm; //#2596
            $k[$j++] = $f(4 - _Qm); //#2596
        }); //#2596
        $j--; //#2596
        var _Qn = $counttomark() + 1; //#2597
        $k[$j++] = 0; //#2597
        for (var _Qo = 0, _Qp = _Qn - 1; _Qo < _Qp; _Qo++) { //#2597
            var _Qq = $k[--$j]; //#2597
            var _Qr = $k[--$j]; //#2597
            $k[$j++] = $f(_Qr + _Qq); //#2597
        } //#2597
        var _Qs = $k[--$j]; //#2597
        var _Qt = $k[--$j]; //#2597
        $k[$j++] = _Qs; //#2597
        $k[$j++] = _Qt; //#2597
        $j--; //#2597
        if (($k[--$j] % 10) != 0) { //#2598
            $j--; //#2598
            $k[$j++] = 'bwipp.GS1badChecksum#2598'; //#2598
            $k[$j++] = "Bad checksum"; //#2598
            $k[$j++] = false; //#2598
            return true; //#2598
        } //#2598
    }; //#2598
    $_.lintcsumalpha = function() {
        var _Qv = $k[--$j]; //#2602
        $k[$j++] = _Qv; //#2602
        if (_Qv.length < 2) { //#2602
            $j -= 2; //#2602
            $k[$j++] = 'bwipp.GS1alphaTooShort#2602'; //#2602
            $k[$j++] = "Alphanumeric string is too short to check"; //#2602
            $k[$j++] = false; //#2602
            return true; //#2602
        } //#2602
        var _Qw = $k[--$j]; //#2603
        $k[$j++] = _Qw; //#2605
        $k[$j++] = _Qw.length - 2; //#2605
        $k[$j++] = $geti(_Qw, 0, _Qw.length - 2); //#2605
        $k[$j++] = Infinity; //#2605
        var _Qy = $k[--$j]; //#2605
        var _Qz = $k[--$j]; //#2605
        $k[$j++] = _Qy; //#2607
        $forall(_Qz, function() { //#2607
            var _R0 = $k[--$j]; //#2606
            var _R2 = $get($_.cset82, _R0) !== undefined; //#2606
            $k[$j++] = _R0; //#2606
            if (_R2) { //#2606
                var _R5 = $get($_.cset82, $k[--$j]); //#2606
                $k[$j++] = _R5; //#2606
            } else { //#2606
                $k[$j++] = -1; //#2606
                return true; //#2606
            } //#2606
        }); //#2606
        var _R6 = $k[--$j]; //#2608
        $k[$j++] = _R6; //#2608
        if (_R6 == -1) { //#2608
            $cleartomark(); //#2608
            $j -= 3; //#2608
            $k[$j++] = 'bwipp.GS1UnknownCSET82Character#2608'; //#2608
            $k[$j++] = "Unknown CSET 82 character"; //#2608
            $k[$j++] = false; //#2608
            return true; //#2608
        } //#2608
        $astore($a($counttomark())); //#2609
        var _R9 = $k[--$j]; //#2609
        var _RA = $k[--$j]; //#2609
        $k[$j++] = _R9; //#2609
        $k[$j++] = _RA; //#2609
        $j--; //#2609
        var _RB = $k[--$j]; //#2610
        var _RC = $k[--$j]; //#2610
        var _RE = $geti($k[--$j], _RC, 2); //#2611
        $k[$j++] = _RB; //#2611
        $k[$j++] = _RE; //#2611
        $k[$j++] = Infinity; //#2611
        var _RF = $k[--$j]; //#2611
        var _RG = $k[--$j]; //#2611
        $k[$j++] = _RF; //#2613
        $forall(_RG, function() { //#2613
            var _RH = $k[--$j]; //#2612
            var _RJ = $get($_.cset32, _RH) !== undefined; //#2612
            $k[$j++] = _RH; //#2612
            if (_RJ) { //#2612
                var _RM = $get($_.cset32, $k[--$j]); //#2612
                $k[$j++] = _RM; //#2612
            } else { //#2612
                $k[$j++] = -1; //#2612
                return true; //#2612
            } //#2612
        }); //#2612
        var _RN = $k[--$j]; //#2614
        $k[$j++] = _RN; //#2614
        if (_RN == -1) { //#2614
            $cleartomark(); //#2614
            $j -= 2; //#2614
            $k[$j++] = 'bwipp.GS1UnknownCSET32Character#2614'; //#2614
            $k[$j++] = "Unknown CSET 32 character"; //#2614
            $k[$j++] = false; //#2614
            return true; //#2614
        } //#2614
        $astore($a($counttomark())); //#2615
        var _RQ = $k[--$j]; //#2615
        var _RR = $k[--$j]; //#2615
        $k[$j++] = _RQ; //#2615
        $k[$j++] = _RR; //#2615
        $j--; //#2615
        var _RS = $k[--$j]; //#2616
        var _RV = $k[--$j]; //#2616
        var _RW = $a([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83]); //#2617
        var _RX = _RV.length; //#2619
        $k[$j++] = $f(($get(_RS, 0) << 5) + $get(_RS, 1)); //#2619
        $k[$j++] = _RV; //#2619
        $k[$j++] = _RW; //#2619
        $k[$j++] = _RX; //#2619
        if (_RX > _RW.length) { //#2619
            $j -= 5; //#2619
            $k[$j++] = 'bwipp.GS1alphaTooLong#2619'; //#2619
            $k[$j++] = "Alphanumeric string is too long to check"; //#2619
            $k[$j++] = false; //#2619
            return true; //#2619
        } //#2619
        var _RY = $k[--$j]; //#2620
        var _Ra = $geti($k[--$j], 0, _RY); //#2620
        for (var _Rb = 0, _Rc = _Ra.length; _Rb < _Rc; _Rb++) { //#2620
            var _Re = $k[--$j]; //#2620
            $k[$j++] = $get(_Ra, _Rb); //#2620
            $k[$j++] = _Re; //#2620
        } //#2620
        var _Rf = $k[--$j]; //#2621
        $k[$j++] = 0; //#2621
        $forall(_Rf, function() { //#2621
            var _Rg = $k[--$j]; //#2621
            var _Rh = $k[--$j]; //#2621
            var _Ri = $k[--$j]; //#2621
            $k[$j++] = $f(_Rh + (_Ri * _Rg)); //#2621
        }); //#2621
        var _Rj = $k[--$j]; //#2621
        if ($k[--$j] != (_Rj % 1021)) { //#2622
            $j--; //#2622
            $k[$j++] = 'bwipp.GS1badAlphaCheckCharacters#2622'; //#2622
            $k[$j++] = "Bad alphanumeric check characters"; //#2622
            $k[$j++] = false; //#2622
            return true; //#2622
        } //#2622
    }; //#2622
    if (!bwipp_gs1process.__2646__) { //#2646
        $_ = Object.create($_); //#2646
        $k[$j++] = Infinity; //#2626
        var _Rl = $a(['004', '008', '010', '012', '016', '020', '024', '028', '031', '032', '036', '040', '044', '048', '050', '051', '052', '056', '060', '064', '068', '070', '072', '074', '076', '084', '086', '090', '092', '096', '100', '104', '108', '112', '116', '120', '124', '132', '136', '140', '144', '148', '152', '156', '158', '162', '166', '170', '174', '175', '178', '180', '184', '188', '191', '192', '196', '203', '204', '208', '212', '214', '218', '222', '226', '231', '232', '233', '234', '238', '239', '242', '246', '248', '250', '254', '258', '260', '262', '266', '268', '270', '275', '276', '288', '292', '296', '300', '304', '308', '312', '316', '320', '324', '328', '332', '334', '336', '340', '344', '348', '352', '356', '360', '364', '368', '372', '376', '380', '384', '388', '392', '398', '400', '404', '408', '410', '414', '417', '418', '422', '426', '428', '430', '434', '438', '440', '442', '446', '450', '454', '458', '462', '466', '470', '474', '478', '480', '484', '492', '496', '498', '499', '500', '504', '508', '512', '516', '520', '524', '528', '531', '533', '534', '535', '540', '548', '554', '558', '562', '566', '570', '574', '578', '580', '581', '583', '584', '585', '586', '591', '598', '600', '604', '608', '612', '616', '620', '624', '626', '630', '634', '638', '642', '643', '646', '652', '654', '659', '660', '662', '663', '666', '670', '674', '678', '682', '686', '688', '690', '694', '702', '703', '704', '705', '706', '710', '716', '724', '728', '729', '732', '740', '744', '748', '752', '756', '760', '762', '764', '768', '772', '776', '780', '784', '788', '792', '795', '796', '798', '800', '804', '807', '818', '826', '831', '832', '833', '834', '840', '850', '854', '858', '860', '862', '876', '882', '887', '894']); //#2644
        for (var _Rm = 0, _Rn = _Rl.length; _Rm < _Rn; _Rm++) { //#2645
            var _Ro = $get(_Rl, _Rm); //#2645
            $k[$j++] = _Ro; //#2645
            $k[$j++] = _Ro; //#2645
        } //#2645
        $_.iso3166 = $d(); //#2645
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_gs1process.$ctx[id] = $_[id]); //#2645
        bwipp_gs1process.__2646__ = 1; //#2645
        $_ = Object.getPrototypeOf($_); //#2645
    } //#2645
    $_.lintiso3166 = function() {
        var _Rt = $get($_.iso3166, $k[--$j]) !== undefined; //#2649
        if (!_Rt) { //#2649
            $j--; //#2649
            $k[$j++] = 'bwipp.GS1UnknownCountry#2649'; //#2649
            $k[$j++] = "Unknown country code"; //#2649
            $k[$j++] = false; //#2649
            return true; //#2649
        } //#2649
    }; //#2649
    $_.lintiso3166999 = function() {
        var _Ru = $k[--$j]; //#2653
        $k[$j++] = _Ru; //#2657
        if ($ne(_Ru, '999')) { //#2656
            var _Rx = $get($_.iso3166, $k[--$j]) !== undefined; //#2654
            if (!_Rx) { //#2654
                $j--; //#2654
                $k[$j++] = 'bwipp.GS1UnknownCountryOr999#2654'; //#2654
                $k[$j++] = "Unknown country code or not 999"; //#2654
                $k[$j++] = false; //#2654
                return true; //#2654
            } //#2654
        } else { //#2656
            $j--; //#2656
        } //#2656
    }; //#2656
    $_.lintiso3166list = function() {
        var _Ry = $k[--$j]; //#2661
        $k[$j++] = _Ry; //#2663
        if ((_Ry.length % 3) != 0) { //#2663
            $j -= 2; //#2662
            $k[$j++] = 'bwipp.GS1BadCountryListLength#2662'; //#2662
            $k[$j++] = "Not a group of three-digit country codes"; //#2662
            $k[$j++] = false; //#2662
            return true; //#2662
        } //#2662
        var _Rz = $k[--$j]; //#2665
        $k[$j++] = _Rz; //#2668
        $k[$j++] = true; //#2668
        for (var _S1 = 0, _S0 = _Rz.length - 1; _S1 <= _S0; _S1 += 3) { //#2668
            var _S2 = $k[--$j]; //#2666
            var _S3 = $k[--$j]; //#2666
            var _S6 = $get($_.iso3166, $geti(_S3, _S1, 3)) !== undefined; //#2667
            $k[$j++] = _S3; //#2667
            $k[$j++] = _S2; //#2667
            if (!_S6) { //#2667
                $j -= 2; //#2667
                $k[$j++] = false; //#2667
                break; //#2667
            } //#2667
        } //#2667
        if ($nt($k[--$j])) { //#2669
            $j--; //#2669
            $k[$j++] = 'bwipp.GS1UnknownCountry#2669'; //#2669
            $k[$j++] = "Unknown country code"; //#2669
            $k[$j++] = false; //#2669
            return true; //#2669
        } //#2669
        $j--; //#2670
    }; //#2670
    if (!bwipp_gs1process.__2700__) { //#2700
        $_ = Object.create($_); //#2700
        $k[$j++] = Infinity; //#2674
        var _S8 = $a(['AD', 'AE', 'AF', 'AG', 'AI', 'AL', 'AM', 'AO', 'AQ', 'AR', 'AS', 'AT', 'AU', 'AW', 'AX', 'AZ', 'BA', 'BB', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ', 'BL', 'BM', 'BN', 'BO', 'BQ', 'BR', 'BS', 'BT', 'BV', 'BW', 'BY', 'BZ', 'CA', 'CC', 'CD', 'CF', 'CG', 'CH', 'CI', 'CK', 'CL', 'CM', 'CN', 'CO', 'CR', 'CU', 'CV', 'CW', 'CX', 'CY', 'CZ', 'DE', 'DJ', 'DK', 'DM', 'DO', 'DZ', 'EC', 'EE', 'EG', 'EH', 'ER', 'ES', 'ET', 'FI', 'FJ', 'FK', 'FM', 'FO', 'FR', 'GA', 'GB', 'GD', 'GE', 'GF', 'GG', 'GH', 'GI', 'GL', 'GM', 'GN', 'GP', 'GQ', 'GR', 'GS', 'GT', 'GU', 'GW', 'GY', 'HK', 'HM', 'HN', 'HR', 'HT', 'HU', 'ID', 'IE', 'IL', 'IM', 'IN', 'IO', 'IQ', 'IR', 'IS', 'IT', 'JE', 'JM', 'JO', 'JP', 'KE', 'KG', 'KH', 'KI', 'KM', 'KN', 'KP', 'KR', 'KW', 'KY', 'KZ', 'LA', 'LB', 'LC', 'LI', 'LK', 'LR', 'LS', 'LT', 'LU', 'LV', 'LY', 'MA', 'MC', 'MD', 'ME', 'MF', 'MG', 'MH', 'MK', 'ML', 'MM', 'MN', 'MO', 'MP', 'MQ', 'MR', 'MS', 'MT', 'MU', 'MV', 'MW', 'MX', 'MY', 'MZ', 'NA', 'NC', 'NE', 'NF', 'NG', 'NI', 'NL', 'NO', 'NP', 'NR', 'NU', 'NZ', 'OM', 'PA', 'PE', 'PF', 'PG', 'PH', 'PK', 'PL', 'PM', 'PN', 'PR', 'PS', 'PT', 'PW', 'PY', 'QA', 'RE', 'RO', 'RS', 'RU', 'RW', 'SA', 'SB', 'SC', 'SD', 'SE', 'SG', 'SH', 'SI', 'SJ', 'SK', 'SL', 'SM', 'SN', 'SO', 'SR', 'SS', 'ST', 'SV', 'SX', 'SY', 'SZ', 'TC', 'TD', 'TF', 'TG', 'TH', 'TJ', 'TK', 'TL', 'TM', 'TN', 'TO', 'TR', 'TT', 'TV', 'TW', 'TZ', 'UA', 'UG', 'UM', 'US', 'UY', 'UZ', 'VA', 'VC', 'VE', 'VG', 'VI', 'VN', 'VU', 'WF', 'WS', 'YE', 'YT', 'ZA', 'ZM', 'ZW']); //#2698
        for (var _S9 = 0, _SA = _S8.length; _S9 < _SA; _S9++) { //#2699
            var _SB = $get(_S8, _S9); //#2699
            $k[$j++] = _SB; //#2699
            $k[$j++] = _SB; //#2699
        } //#2699
        $_.iso3166alpha2 = $d(); //#2699
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_gs1process.$ctx[id] = $_[id]); //#2699
        bwipp_gs1process.__2700__ = 1; //#2699
        $_ = Object.getPrototypeOf($_); //#2699
    } //#2699
    $_.lintiso3166alpha2 = function() {
        var _SG = $get($_.iso3166alpha2, $k[--$j]) !== undefined; //#2703
        if (!_SG) { //#2703
            $j--; //#2703
            $k[$j++] = 'bwipp.GS1UnknownCountryAlpha#2703'; //#2703
            $k[$j++] = "Unknown country alpha code"; //#2703
            $k[$j++] = false; //#2703
            return true; //#2703
        } //#2703
    }; //#2703
    if (!bwipp_gs1process.__2731__) { //#2731
        $_ = Object.create($_); //#2731
        $k[$j++] = Infinity; //#2707
        var _SH = $a(['008', '012', '032', '036', '044', '048', '050', '051', '052', '060', '064', '068', '072', '084', '090', '096', '104', '108', '116', '124', '132', '136', '144', '152', '156', '170', '174', '188', '191', '192', '203', '208', '214', '222', '230', '232', '238', '242', '262', '270', '292', '320', '324', '328', '332', '340', '344', '348', '352', '356', '360', '364', '368', '376', '388', '392', '398', '400', '404', '408', '410', '414', '417', '418', '422', '426', '430', '434', '446', '454', '458', '462', '480', '484', '496', '498', '504', '512', '516', '524', '532', '533', '548', '554', '558', '566', '578', '586', '590', '598', '600', '604', '608', '634', '643', '646', '654', '682', '690', '694', '702', '704', '706', '710', '728', '748', '752', '756', '760', '764', '776', '780', '784', '788', '800', '807', '818', '826', '834', '840', '858', '860', '882', '886', '901', '925', '927', '928', '929', '930', '931', '932', '933', '934', '936', '938', '940', '941', '943', '944', '946', '947', '948', '949', '950', '951', '952', '953', '955', '956', '957', '958', '959', '960', '961', '962', '963', '964', '965', '967', '968', '969', '970', '971', '972', '973', '975', '976', '977', '978', '979', '980', '981', '984', '985', '986', '990', '994', '997', '999']); //#2729
        for (var _SI = 0, _SJ = _SH.length; _SI < _SJ; _SI++) { //#2730
            var _SK = $get(_SH, _SI); //#2730
            $k[$j++] = _SK; //#2730
            $k[$j++] = _SK; //#2730
        } //#2730
        $_.iso4217 = $d(); //#2730
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_gs1process.$ctx[id] = $_[id]); //#2730
        bwipp_gs1process.__2731__ = 1; //#2730
        $_ = Object.getPrototypeOf($_); //#2730
    } //#2730
    $_.lintiso4217 = function() {
        var _SP = $get($_.iso4217, $k[--$j]) !== undefined; //#2734
        if (!_SP) { //#2734
            $j--; //#2734
            $k[$j++] = 'bwipp.GS1UnknownCurrency#2734'; //#2734
            $k[$j++] = "Unknown currency code"; //#2734
            $k[$j++] = false; //#2734
            return true; //#2734
        } //#2734
    }; //#2734
    $_.lintiban = function() {
        var _SQ = $k[--$j]; //#2738
        $k[$j++] = _SQ; //#2738
        if (_SQ.length <= 4) { //#2738
            $j -= 2; //#2738
            $k[$j++] = 'bwipp.GS1tooShort#2738'; //#2738
            $k[$j++] = "IBAN too short"; //#2738
            $k[$j++] = false; //#2738
            return true; //#2738
        } //#2738
        var _SR = $k[--$j]; //#2739
        $k[$j++] = _SR; //#2744
        $k[$j++] = true; //#2744
        $forall(_SR, function() { //#2744
            var _SS = $s(1); //#2740
            $put(_SS, 0, $k[--$j]); //#2740
            $search("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ", _SS); //#2742
            if ($nt($k[--$j])) { //#2742
                $j -= 2; //#2742
                $k[$j++] = false; //#2742
                return true; //#2742
            } //#2742
            $j -= 3; //#2743
        }); //#2743
        if ($nt($k[--$j])) { //#2745
            $j--; //#2745
            $k[$j++] = 'bwipp.GS1badIBANcharacter#2745'; //#2745
            $k[$j++] = "Invalid IBAN character"; //#2745
            $k[$j++] = false; //#2745
            return true; //#2745
        } //#2745
        var _SW = $k[--$j]; //#2746
        $k[$j++] = _SW; //#2746
        $k[$j++] = _SW; //#2746
        $k[$j++] = Infinity; //#2746
        var _SX = $k[--$j]; //#2746
        var _SY = $k[--$j]; //#2746
        $k[$j++] = _SX; //#2746
        $k[$j++] = _SY; //#2746
        $k[$j++] = Infinity; //#2746
        var _SZ = $k[--$j]; //#2746
        var _Sa = $k[--$j]; //#2746
        $k[$j++] = _SZ; //#2746
        $forall(_Sa); //#2746
        $r($counttomark(), -4); //#2746
        $astore($a($counttomark())); //#2746
        var _Se = $k[--$j]; //#2746
        var _Sf = $k[--$j]; //#2746
        $k[$j++] = _Se; //#2746
        $k[$j++] = _Sf; //#2746
        $j--; //#2746
        $forall($k[--$j], function() { //#2748
            var _Si = $f($k[--$j] - 48); //#2747
            $k[$j++] = _Si; //#2747
            if (_Si > 9) { //#2747
                var _Sk = $f($k[--$j] - 7); //#2747
                $k[$j++] = ~~(_Sk / 10); //#2747
                $k[$j++] = _Sk % 10; //#2747
            } //#2747
        }); //#2747
        $astore($a($counttomark())); //#2748
        var _Sn = $k[--$j]; //#2748
        var _So = $k[--$j]; //#2748
        $k[$j++] = _Sn; //#2748
        $k[$j++] = _So; //#2748
        $j--; //#2748
        var _Sp = $k[--$j]; //#2749
        $k[$j++] = 0; //#2749
        $forall(_Sp, function() { //#2749
            var _Sq = $k[--$j]; //#2749
            var _Sr = $k[--$j]; //#2749
            $k[$j++] = ($f(_Sq + (_Sr * 10))) % 97; //#2749
        }); //#2749
        if ($k[--$j] != 1) { //#2750
            $j -= 2; //#2750
            $k[$j++] = 'bwipp.GS1badIBANchecksum#2750'; //#2750
            $k[$j++] = "IBAN checksum incorrect"; //#2750
            $k[$j++] = false; //#2750
            return true; //#2750
        } //#2750
        var _Su = $geti($k[--$j], 0, 2); //#2751
        $k[$j++] = _Su; //#2751
        $_.lintiso3166alpha2(); //#2751
    }; //#2751
    $_.lintzero = function() {
        if ($ne($k[--$j], "0")) { //#2755
            $j--; //#2755
            $k[$j++] = 'bwipp.GS1zeroRequired#2755'; //#2755
            $k[$j++] = "Zero is required"; //#2755
            $k[$j++] = false; //#2755
            return true; //#2755
        } //#2755
    }; //#2755
    $_.lintnonzero = function() {
        var _Sw = $k[--$j]; //#2759
        $k[$j++] = false; //#2759
        $forall(_Sw, function() { //#2759
            if ($k[--$j] != 48) { //#2759
                $j--; //#2759
                $k[$j++] = true; //#2759
            } //#2759
        }); //#2759
        if ($nt($k[--$j])) { //#2760
            $j--; //#2760
            $k[$j++] = 'bwipp.GS1zeroNotPermitted#2760'; //#2760
            $k[$j++] = "Zero not permitted"; //#2760
            $k[$j++] = false; //#2760
            return true; //#2760
        } //#2760
    }; //#2760
    $_.lintnozeroprefix = function() {
        var _Sz = $k[--$j]; //#2764
        if ((_Sz.length > 1) && ($get(_Sz, 0) == 48)) { //#2766
            $j--; //#2765
            $k[$j++] = 'bwipp.GS1badZeroPrefix#2765'; //#2765
            $k[$j++] = "Zero prefix is not permitted"; //#2765
            $k[$j++] = false; //#2765
            return true; //#2765
        } //#2765
    }; //#2765
    $_.lintyymmd0 = function() {
        var _T1 = $k[--$j]; //#2770
        var _T3 = $cvi($geti(_T1, 2, 2)); //#2770
        $k[$j++] = _T1; //#2770
        if ((_T3 < 1) || (_T3 > 12)) { //#2770
            $j--; //#2770
            $k[$j++] = 'bwipp.GS1badMonth#2770'; //#2770
            $k[$j++] = "Invalid month"; //#2770
            $k[$j++] = false; //#2770
            return true; //#2770
        } //#2770
        var _T4 = $k[--$j]; //#2771
        var _T6 = $cvi($geti(_T4, 0, 2)); //#2771
        var _T7 = _T6 - 21; //#2772
        $k[$j++] = _T4; //#2772
        $k[$j++] = _T6; //#2772
        $k[$j++] = _T7; //#2772
        if (_T7 >= 51) { //#2772
            $j--; //#2772
            var _T8 = $k[--$j]; //#2772
            $k[$j++] = $f(_T8 + 1900); //#2772
        } else { //#2772
            if ($k[--$j] <= -50) { //#2772
                var _TA = $k[--$j]; //#2772
                $k[$j++] = $f(_TA + 2100); //#2772
            } else { //#2772
                var _TB = $k[--$j]; //#2772
                $k[$j++] = $f(_TB + 2000); //#2772
            } //#2772
        } //#2772
        var _TC = $k[--$j]; //#2773
        $k[$j++] = ((_TC % 400) == 0) || (((_TC % 4) == 0) && ((_TC % 100) != 0)); //#2774
        $k[$j++] = Infinity; //#2774
        var _TD = $k[--$j]; //#2774
        var _TF = $k[--$j] ? 29 : 28; //#2774
        $k[$j++] = _TD; //#2774
        $k[$j++] = 31; //#2774
        $k[$j++] = _TF; //#2774
        $k[$j++] = 31; //#2774
        $k[$j++] = 30; //#2774
        $k[$j++] = 31; //#2774
        $k[$j++] = 30; //#2774
        $k[$j++] = 31; //#2774
        $k[$j++] = 31; //#2774
        $k[$j++] = 30; //#2774
        $k[$j++] = 31; //#2774
        $k[$j++] = 30; //#2774
        $k[$j++] = 31; //#2774
        var _TG = $a(); //#2774
        var _TH = $k[--$j]; //#2775
        if ($get(_TG, $cvi($geti(_TH, 2, 2)) - 1) < $cvi($geti(_TH, 4, 2))) { //#2776
            $j--; //#2776
            $k[$j++] = 'bwipp.GS1badDay#2776'; //#2776
            $k[$j++] = "Invalid day of month"; //#2776
            $k[$j++] = false; //#2776
            return true; //#2776
        } //#2776
    }; //#2776
    $_.lintyymmdd = function() {
        var _TL = $k[--$j]; //#2780
        $k[$j++] = _TL; //#2780
        if (_TL.length != 6) { //#2780
            $j--; //#2780
            $k[$j++] = 'bwipp.GS1badDateLength#2780'; //#2780
            $k[$j++] = "Invalid length for date"; //#2780
            $k[$j++] = false; //#2780
            return true; //#2780
        } //#2780
        var _TM = $k[--$j]; //#2781
        $k[$j++] = _TM; //#2781
        if ($cvi($geti(_TM, 4, 2)) < 1) { //#2781
            $j--; //#2781
            $k[$j++] = 'bwipp.GS1badDay#2781'; //#2781
            $k[$j++] = "Invalid day of month"; //#2781
            $k[$j++] = false; //#2781
            return true; //#2781
        } //#2781
        $_.lintyymmd0(); //#2782
    }; //#2782
    $_.lintyymmddhh = function() {
        var _TO = $k[--$j]; //#2786
        $k[$j++] = _TO; //#2786
        if (_TO.length != 8) { //#2786
            $j--; //#2786
            $k[$j++] = 'bwipp.GS1badYYMMDDHHLength#2786'; //#2786
            $k[$j++] = "Invalid length for date with hour"; //#2786
            $k[$j++] = false; //#2786
            return true; //#2786
        } //#2786
        var _TP = $k[--$j]; //#2787
        $k[$j++] = _TP; //#2787
        if ($cvi($geti(_TP, 6, 2)) > 23) { //#2787
            $j -= 2; //#2787
            $k[$j++] = 'bwipp.GS1badHour#2787'; //#2787
            $k[$j++] = "Invalid hour of day"; //#2787
            $k[$j++] = false; //#2787
            return true; //#2787
        } //#2787
        var _TS = $geti($k[--$j], 0, 6); //#2788
        $k[$j++] = _TS; //#2788
        $_.lintyymmdd(); //#2788
    }; //#2788
    $_.linthhmm = function() {
        var _TT = $k[--$j]; //#2792
        $k[$j++] = _TT; //#2792
        if ($cvi($geti(_TT, 0, 2)) > 23) { //#2792
            $j -= 2; //#2792
            $k[$j++] = 'bwipp.GS1badHour#2792'; //#2792
            $k[$j++] = "Invalid hour of day"; //#2792
            $k[$j++] = false; //#2792
            return true; //#2792
        } //#2792
        if ($cvi($geti($k[--$j], 2, 2)) > 59) { //#2793
            $j--; //#2793
            $k[$j++] = 'bwipp.GS1badMinute#2793'; //#2793
            $k[$j++] = "Invalid minute in the hour"; //#2793
            $k[$j++] = false; //#2793
            return true; //#2793
        } //#2793
    }; //#2793
    $_.lintmmoptss = function() {
        var _TX = $k[--$j]; //#2797
        var _TY = _TX.length; //#2797
        $k[$j++] = _TX; //#2799
        if ((_TY != 2) && (_TY != 4)) { //#2799
            $j--; //#2798
            $k[$j++] = 'bwipp.GS1badTimeLength#2798'; //#2798
            $k[$j++] = "Invalid length for optional minutes and seconds"; //#2798
            $k[$j++] = false; //#2798
            return true; //#2798
        } //#2798
        var _TZ = $k[--$j]; //#2800
        $k[$j++] = _TZ; //#2800
        if ($cvi($geti(_TZ, 0, 2)) > 59) { //#2800
            $j -= 2; //#2800
            $k[$j++] = 'bwipp.GS1badMinute#2800'; //#2800
            $k[$j++] = "Invalid minute in the hour"; //#2800
            $k[$j++] = false; //#2800
            return true; //#2800
        } //#2800
        var _Tb = $k[--$j]; //#2801
        $k[$j++] = _Tb; //#2803
        if (_Tb.length >= 4) { //#2803
            var _Tc = $k[--$j]; //#2802
            $k[$j++] = _Tc; //#2802
            if ($cvi($geti(_Tc, 2, 2)) > 59) { //#2802
                $j -= 2; //#2802
                $k[$j++] = 'bwipp.GS1badSecond#2802'; //#2802
                $k[$j++] = "Invalid second in the minute"; //#2802
                $k[$j++] = false; //#2802
                return true; //#2802
            } //#2802
        } //#2802
        $j--; //#2804
    }; //#2804
    $_.lintyesno = function() {
        var _Te = $k[--$j]; //#2808
        if ($ne(_Te, "0") && $ne(_Te, "1")) { //#2810
            $j--; //#2809
            $k[$j++] = 'bwipp.GS1badBoolean#2809'; //#2809
            $k[$j++] = "Neither 0 nor 1 for yes or no"; //#2809
            $k[$j++] = false; //#2809
            return true; //#2809
        } //#2809
    }; //#2809
    $_.lintwinding = function() {
        var _Tf = $k[--$j]; //#2814
        if ($ne(_Tf, "0") && ($ne(_Tf, "1") && $ne(_Tf, "9"))) { //#2816
            $j--; //#2815
            $k[$j++] = 'bwipp.GS1badWinding#2815'; //#2815
            $k[$j++] = "Invalid winding direction"; //#2815
            $k[$j++] = false; //#2815
            return true; //#2815
        } //#2815
    }; //#2815
    $_.lintpieceoftotal = function() {
        var _Tg = $k[--$j]; //#2820
        $k[$j++] = _Tg; //#2820
        if ((_Tg.length % 2) != 0) { //#2820
            $j -= 2; //#2820
            $k[$j++] = 'bwipp.GS1badPieceTotalLength#2820'; //#2820
            $k[$j++] = "Invalid piece/total length"; //#2820
            $k[$j++] = false; //#2820
            return true; //#2820
        } //#2820
        var _Th = $k[--$j]; //#2821
        var _Tj = $cvi($geti(_Th, 0, ~~(_Th.length / 2))); //#2822
        $k[$j++] = _Th; //#2822
        $k[$j++] = _Tj; //#2822
        if (_Tj == 0) { //#2822
            $j -= 3; //#2822
            $k[$j++] = 'bwipp.GS1badPieceNumber#2822'; //#2822
            $k[$j++] = "Invalid piece number"; //#2822
            $k[$j++] = false; //#2822
            return true; //#2822
        } //#2822
        var _Tk = $k[--$j]; //#2823
        var _Tl = $k[--$j]; //#2823
        var _Tm = ~~(_Tl.length / 2); //#2823
        var _To = $cvi($geti(_Tl, _Tm, _Tm)); //#2824
        $k[$j++] = _Tk; //#2824
        $k[$j++] = _To; //#2824
        if (_To == 0) { //#2824
            $j -= 3; //#2824
            $k[$j++] = 'bwipp.GS1badPieceTotal#2824'; //#2824
            $k[$j++] = "Invalid total number"; //#2824
            $k[$j++] = false; //#2824
            return true; //#2824
        } //#2824
        var _Tp = $k[--$j]; //#2825
        if ($gt($k[--$j], _Tp)) { //#2825
            $j--; //#2825
            $k[$j++] = 'bwipp.GS1pieceExceedsTotal#2825'; //#2825
            $k[$j++] = "Piece number exceeds total"; //#2825
            $k[$j++] = false; //#2825
            return true; //#2825
        } //#2825
    }; //#2825
    $_.lintpcenc = function() {
        for (;;) { //#2839
            $search($k[--$j], "%"); //#2830
            if ($nt($k[--$j])) { //#2830
                $j--; //#2830
                break; //#2830
            } //#2830
            $j -= 2; //#2831
            var _Tt = $k[--$j]; //#2831
            $k[$j++] = _Tt; //#2831
            if (_Tt.length < 2) { //#2831
                $j -= 2; //#2831
                $k[$j++] = 'bwipp.GS1badPercentEscape#2831'; //#2831
                $k[$j++] = "Invalid % escape"; //#2831
                $k[$j++] = false; //#2831
                break; //#2831
            } //#2831
            var _Tu = $k[--$j]; //#2832
            var _Tv = $geti(_Tu, 0, 2); //#2832
            $k[$j++] = _Tu; //#2837
            $k[$j++] = true; //#2837
            for (var _Tw = 0, _Tx = _Tv.length; _Tw < _Tx; _Tw++) { //#2837
                var _Tz = $s(1); //#2833
                $put(_Tz, 0, $get(_Tv, _Tw)); //#2833
                $search("0123456789ABCDEFabcdef", _Tz); //#2835
                if ($nt($k[--$j])) { //#2835
                    $j -= 2; //#2835
                    $k[$j++] = false; //#2835
                    break; //#2835
                } //#2835
                $j -= 3; //#2836
            } //#2836
            if ($nt($k[--$j])) { //#2838
                $j -= 2; //#2838
                $k[$j++] = 'bwipp.GS1badPercentChars#2838'; //#2838
                $k[$j++] = "Invalid characters for percent encoding"; //#2838
                $k[$j++] = false; //#2838
                break; //#2838
            } //#2838
        } //#2838
    }; //#2838
    $_.lintcouponcode = function() {
        var _U2 = $k[--$j]; //#2843
        $k[$j++] = _U2; //#2845
        $k[$j++] = true; //#2845
        $forall(_U2, function() { //#2845
            var _U3 = $k[--$j]; //#2844
            if ((_U3 < 48) || (_U3 > 57)) { //#2844
                $j--; //#2844
                $k[$j++] = false; //#2844
                return true; //#2844
            } //#2844
        }); //#2844
        if ($nt($k[--$j])) { //#2846
            $j -= 2; //#2846
            $k[$j++] = 'bwipp.GS1couponNotNumeric#2846'; //#2846
            $k[$j++] = "Coupon not numeric"; //#2846
            $k[$j++] = false; //#2846
            return true; //#2846
        } //#2846
        var _U5 = $k[--$j]; //#2849
        $k[$j++] = _U5; //#2851
        if (_U5.length < 1) { //#2851
            $j -= 2; //#2850
            $k[$j++] = 'bwipp.GS1couponTooShortGCPVLI#2850'; //#2850
            $k[$j++] = "Coupon too short: Missing GCP VLI"; //#2850
            $k[$j++] = false; //#2850
            return true; //#2850
        } //#2850
        var _U6 = $k[--$j]; //#2852
        var _U8 = $cvi($geti(_U6, 0, 1)); //#2852
        $k[$j++] = _U6; //#2854
        $k[$j++] = _U8; //#2854
        if (_U8 > 6) { //#2854
            $j -= 2; //#2853
            $k[$j++] = 'bwipp.GS1couponBadGCPVLI#2853'; //#2853
            $k[$j++] = "Coupon GCP length indicator must be 0-6"; //#2853
            $k[$j++] = false; //#2853
            return true; //#2853
        } //#2853
        var _U9 = $k[--$j]; //#2855
        var _UA = $k[--$j]; //#2856
        $k[$j++] = _UA; //#2858
        $k[$j++] = $f($f(_U9 + 6) + 1); //#2858
        if (($f($f(_U9 + 6) + 1)) > _UA.length) { //#2858
            $j -= 3; //#2857
            $k[$j++] = 'bwipp.GS1couponTooShortGCP#2857'; //#2857
            $k[$j++] = "Coupon too short: GCP truncated"; //#2857
            $k[$j++] = false; //#2857
            return true; //#2857
        } //#2857
        var _UB = $k[--$j]; //#2859
        var _UC = $k[--$j]; //#2859
        var _UD = $geti(_UC, _UB, $f(_UC.length - _UB)); //#2859
        $k[$j++] = _UD; //#2864
        if (_UD.length < 6) { //#2864
            $j -= 2; //#2863
            $k[$j++] = 'bwipp.GS1couponTooShortOfferCode#2863'; //#2863
            $k[$j++] = "Coupon too short: Offer Code truncated"; //#2863
            $k[$j++] = false; //#2863
            return true; //#2863
        } //#2863
        var _UE = $k[--$j]; //#2865
        var _UF = $geti(_UE, 6, _UE.length - 6); //#2865
        $k[$j++] = _UF; //#2870
        if (_UF.length < 1) { //#2870
            $j -= 2; //#2869
            $k[$j++] = 'bwipp.GS1couponTooShortSaveValueVLI#2869'; //#2869
            $k[$j++] = "Coupon too short: Missing Save Value VLI"; //#2869
            $k[$j++] = false; //#2869
            return true; //#2869
        } //#2869
        var _UG = $k[--$j]; //#2871
        var _UI = $cvi($geti(_UG, 0, 1)); //#2871
        $k[$j++] = _UG; //#2873
        $k[$j++] = _UI; //#2873
        if ((_UI < 1) || (_UI > 5)) { //#2873
            $j -= 2; //#2872
            $k[$j++] = 'bwipp.GS1couponBadSaveValueVLI#2872'; //#2872
            $k[$j++] = "Coupon Save Value length indicator must be 1-5"; //#2872
            $k[$j++] = false; //#2872
            return true; //#2872
        } //#2872
        var _UJ = $k[--$j]; //#2874
        var _UK = $k[--$j]; //#2875
        $k[$j++] = _UK; //#2877
        $k[$j++] = $f(_UJ + 1); //#2877
        if ($f(_UJ + 1) > _UK.length) { //#2877
            $j -= 3; //#2876
            $k[$j++] = 'bwipp.GS1couponTooShortSaveValue#2876'; //#2876
            $k[$j++] = "Coupon too short: Save Value truncated"; //#2876
            $k[$j++] = false; //#2876
            return true; //#2876
        } //#2876
        var _UL = $k[--$j]; //#2878
        var _UM = $k[--$j]; //#2878
        var _UN = $geti(_UM, _UL, $f(_UM.length - _UL)); //#2878
        $k[$j++] = _UN; //#2883
        if (_UN.length < 1) { //#2883
            $j -= 2; //#2882
            $k[$j++] = 'bwipp.GS1couponTooShort1stPurchaseRequirementVLI#2882'; //#2882
            $k[$j++] = "Coupon too short: Missing 1st Purchase Requirement VLI"; //#2882
            $k[$j++] = false; //#2882
            return true; //#2882
        } //#2882
        var _UO = $k[--$j]; //#2884
        var _UQ = $cvi($geti(_UO, 0, 1)); //#2884
        $k[$j++] = _UO; //#2886
        $k[$j++] = _UQ; //#2886
        if ((_UQ < 1) || (_UQ > 5)) { //#2886
            $j -= 2; //#2885
            $k[$j++] = 'bwipp.GS1couponBad1stPurchaseRequirementVLI#2885'; //#2885
            $k[$j++] = "Coupon 1st Purchase Requirement length indicator must be 1-5"; //#2885
            $k[$j++] = false; //#2885
            return true; //#2885
        } //#2885
        var _UR = $k[--$j]; //#2887
        var _US = $k[--$j]; //#2888
        $k[$j++] = _US; //#2890
        $k[$j++] = $f(_UR + 1); //#2890
        if ($f(_UR + 1) > _US.length) { //#2890
            $j -= 3; //#2889
            $k[$j++] = 'bwipp.GS1couponTooShort1stPurchaseRequirement#2889'; //#2889
            $k[$j++] = "Coupon too short: 1st Purchase Requirement truncated"; //#2889
            $k[$j++] = false; //#2889
            return true; //#2889
        } //#2889
        var _UT = $k[--$j]; //#2891
        var _UU = $k[--$j]; //#2891
        var _UV = $geti(_UU, _UT, $f(_UU.length - _UT)); //#2891
        $k[$j++] = _UV; //#2896
        if (_UV.length < 1) { //#2896
            $j -= 2; //#2895
            $k[$j++] = 'bwipp.GS1couponTooShort1stPurchaseRequirementCode#2895'; //#2895
            $k[$j++] = "Coupon too short: Missing 1st Purchase Requirement Code"; //#2895
            $k[$j++] = false; //#2895
            return true; //#2895
        } //#2895
        var _UW = $k[--$j]; //#2897
        var _UY = $cvi($geti(_UW, 0, 1)); //#2897
        $k[$j++] = _UW; //#2899
        if ((_UY > 4) && (_UY != 9)) { //#2899
            $j -= 2; //#2898
            $k[$j++] = 'bwipp.GS1couponBad1stPurchaseRequirementCode#2898'; //#2898
            $k[$j++] = "Coupon 1st Purchase Requirement Code must be 0-4 or 9"; //#2898
            $k[$j++] = false; //#2898
            return true; //#2898
        } //#2898
        var _UZ = $k[--$j]; //#2900
        var _Ua = $geti(_UZ, 1, _UZ.length - 1); //#2900
        $k[$j++] = _Ua; //#2905
        if (_Ua.length < 3) { //#2905
            $j -= 2; //#2904
            $k[$j++] = 'bwipp.GS1couponTooShort1stPurchaseFamilyCode#2904'; //#2904
            $k[$j++] = "Coupon too short: 1st Purchase Family Code truncated"; //#2904
            $k[$j++] = false; //#2904
            return true; //#2904
        } //#2904
        var _Ub = $k[--$j]; //#2906
        var _Uc = $geti(_Ub, 3, _Ub.length - 3); //#2906
        $k[$j++] = _Uc; //#2962
        if (_Uc.length >= 1) { //#2962
            var _Ud = $k[--$j]; //#2909
            $k[$j++] = _Ud; //#2962
            if ($cvi($geti(_Ud, 0, 1)) == 1) { //#2962
                var _Uf = $k[--$j]; //#2910
                var _Ug = $geti(_Uf, 1, _Uf.length - 1); //#2910
                $k[$j++] = _Ug; //#2915
                if (_Ug.length < 1) { //#2915
                    $j -= 2; //#2914
                    $k[$j++] = 'bwipp.GS1couponTooShortAdditionalPurchaseRulesCode#2914'; //#2914
                    $k[$j++] = "Coupon too short: Missing Additional Purchase Rules Code"; //#2914
                    $k[$j++] = false; //#2914
                    return true; //#2914
                } //#2914
                var _Uh = $k[--$j]; //#2916
                $k[$j++] = _Uh; //#2918
                if ($cvi($geti(_Uh, 0, 1)) > 3) { //#2918
                    $j -= 2; //#2917
                    $k[$j++] = 'bwipp.GS1couponBadAdditionalPurchaseRulesCode#2917'; //#2917
                    $k[$j++] = "Coupon Additional Purchase Rules Code must be 0-3"; //#2917
                    $k[$j++] = false; //#2917
                    return true; //#2917
                } //#2917
                var _Uj = $k[--$j]; //#2919
                var _Uk = $geti(_Uj, 1, _Uj.length - 1); //#2919
                $k[$j++] = _Uk; //#2924
                if (_Uk.length < 1) { //#2924
                    $j -= 2; //#2923
                    $k[$j++] = 'bwipp.GS1couponTooShort2ndPurchaseRequirementVLI#2923'; //#2923
                    $k[$j++] = "Coupon too short: Missing 2nd Purchase Requirement VLI"; //#2923
                    $k[$j++] = false; //#2923
                    return true; //#2923
                } //#2923
                var _Ul = $k[--$j]; //#2925
                var _Un = $cvi($geti(_Ul, 0, 1)); //#2925
                $k[$j++] = _Ul; //#2927
                $k[$j++] = _Un; //#2927
                if ((_Un < 1) || (_Un > 5)) { //#2927
                    $j -= 2; //#2926
                    $k[$j++] = 'bwipp.GS1couponBad2ndPurchaseRequirementVLI#2926'; //#2926
                    $k[$j++] = "Coupon 2nd Purchase Requirement length indicator must be 1-5"; //#2926
                    $k[$j++] = false; //#2926
                    return true; //#2926
                } //#2926
                var _Uo = $k[--$j]; //#2928
                var _Up = $k[--$j]; //#2929
                $k[$j++] = _Up; //#2931
                $k[$j++] = $f(_Uo + 1); //#2931
                if ($f(_Uo + 1) > _Up.length) { //#2931
                    $j -= 3; //#2930
                    $k[$j++] = 'bwipp.GS1couponTooShort2ndPurchaseRequirement#2930'; //#2930
                    $k[$j++] = "Coupon too short: 2nd Purchase Requirement truncated"; //#2930
                    $k[$j++] = false; //#2930
                    return true; //#2930
                } //#2930
                var _Uq = $k[--$j]; //#2932
                var _Ur = $k[--$j]; //#2932
                var _Us = $geti(_Ur, _Uq, $f(_Ur.length - _Uq)); //#2932
                $k[$j++] = _Us; //#2937
                if (_Us.length < 1) { //#2937
                    $j -= 2; //#2936
                    $k[$j++] = 'bwipp.GS1couponTooShort2ndPurchaseRequirementCode#2936'; //#2936
                    $k[$j++] = "Coupon too short: Missing 2nd Purchase Requirement Code"; //#2936
                    $k[$j++] = false; //#2936
                    return true; //#2936
                } //#2936
                var _Ut = $k[--$j]; //#2938
                var _Uv = $cvi($geti(_Ut, 0, 1)); //#2938
                $k[$j++] = _Ut; //#2940
                if ((_Uv > 4) && (_Uv != 9)) { //#2940
                    $j -= 2; //#2939
                    $k[$j++] = 'bwipp.GS1couponBad2ndPurchaseRequirementCode#2939'; //#2939
                    $k[$j++] = "Coupon 2nd Purchase Requirement Code must be 0-4 or 9"; //#2939
                    $k[$j++] = false; //#2939
                    return true; //#2939
                } //#2939
                var _Uw = $k[--$j]; //#2941
                var _Ux = $geti(_Uw, 1, _Uw.length - 1); //#2941
                $k[$j++] = _Ux; //#2946
                if (_Ux.length < 3) { //#2946
                    $j -= 2; //#2945
                    $k[$j++] = 'bwipp.GS1couponTooShort2ndPurchaseFamilyCode#2945'; //#2945
                    $k[$j++] = "Coupon too short: 2nd Purchase Family Code truncated"; //#2945
                    $k[$j++] = false; //#2945
                    return true; //#2945
                } //#2945
                var _Uy = $k[--$j]; //#2947
                var _Uz = $geti(_Uy, 3, _Uy.length - 3); //#2947
                $k[$j++] = _Uz; //#2952
                if (_Uz.length < 1) { //#2952
                    $j -= 2; //#2951
                    $k[$j++] = 'bwipp.GS1couponTooShort2ndPurchaseGCPVLI#2951'; //#2951
                    $k[$j++] = "Coupon too short: Missing 2nd Purchase GCP VLI"; //#2951
                    $k[$j++] = false; //#2951
                    return true; //#2951
                } //#2951
                var _V0 = $k[--$j]; //#2953
                var _V2 = $cvi($geti(_V0, 0, 1)); //#2953
                $k[$j++] = _V0; //#2955
                $k[$j++] = _V2; //#2955
                if ((_V2 > 6) && (_V2 != 9)) { //#2955
                    $j -= 2; //#2954
                    $k[$j++] = 'bwipp.GS1couponBad2ndPurchaseGCPVLI#2954'; //#2954
                    $k[$j++] = "Coupon 2nd Purchase GCP length indicator must be 0-6 or 9"; //#2954
                    $k[$j++] = false; //#2954
                    return true; //#2954
                } //#2954
                var _V3 = $k[--$j]; //#2956
                $k[$j++] = _V3; //#2956
                if (_V3 != 9) { //#2956
                    var _V4 = $k[--$j]; //#2956
                    $k[$j++] = $f(_V4 + 6); //#2956
                } else { //#2956
                    $j--; //#2956
                    $k[$j++] = 0; //#2956
                } //#2956
                var _V5 = $k[--$j]; //#2956
                var _V6 = $k[--$j]; //#2957
                $k[$j++] = _V6; //#2959
                $k[$j++] = $f(_V5 + 1); //#2959
                if ($f(_V5 + 1) > _V6.length) { //#2959
                    $j -= 3; //#2958
                    $k[$j++] = 'bwipp.GS1couponTooShort2ndPurchaseGCP#2958'; //#2958
                    $k[$j++] = "Coupon too short: 2nd Purchase GCP truncated"; //#2958
                    $k[$j++] = false; //#2958
                    return true; //#2958
                } //#2958
                var _V7 = $k[--$j]; //#2960
                var _V8 = $k[--$j]; //#2960
                $k[$j++] = $geti(_V8, _V7, $f(_V8.length - _V7)); //#2960
            } //#2960
        } //#2960
        var _VA = $k[--$j]; //#2965
        $k[$j++] = _VA; //#3009
        if (_VA.length >= 1) { //#3009
            var _VB = $k[--$j]; //#2965
            $k[$j++] = _VB; //#3009
            if ($cvi($geti(_VB, 0, 1)) == 2) { //#3009
                var _VD = $k[--$j]; //#2966
                var _VE = $geti(_VD, 1, _VD.length - 1); //#2966
                $k[$j++] = _VE; //#2971
                if (_VE.length < 1) { //#2971
                    $j -= 2; //#2970
                    $k[$j++] = 'bwipp.GS1couponTooShort3rdPurchaseRequirementVLI#2970'; //#2970
                    $k[$j++] = "Coupon too short: Missing 3rd Purchase Requirement VLI"; //#2970
                    $k[$j++] = false; //#2970
                    return true; //#2970
                } //#2970
                var _VF = $k[--$j]; //#2972
                var _VH = $cvi($geti(_VF, 0, 1)); //#2972
                $k[$j++] = _VF; //#2974
                $k[$j++] = _VH; //#2974
                if ((_VH < 1) || (_VH > 5)) { //#2974
                    $j -= 2; //#2973
                    $k[$j++] = 'bwipp.GS1couponBad3rdPurchaseRequirementVLI#2973'; //#2973
                    $k[$j++] = "Coupon 3rd Purchase Requirement length indicator must be 1-5"; //#2973
                    $k[$j++] = false; //#2973
                    return true; //#2973
                } //#2973
                var _VI = $k[--$j]; //#2975
                var _VJ = $k[--$j]; //#2976
                $k[$j++] = _VJ; //#2978
                $k[$j++] = $f(_VI + 1); //#2978
                if ($f(_VI + 1) > _VJ.length) { //#2978
                    $j -= 3; //#2977
                    $k[$j++] = 'bwipp.GS1couponTooShort3rdPurchaseRequirement#2977'; //#2977
                    $k[$j++] = "Coupon too short: 3rd Purchase Requirement truncated"; //#2977
                    $k[$j++] = false; //#2977
                    return true; //#2977
                } //#2977
                var _VK = $k[--$j]; //#2979
                var _VL = $k[--$j]; //#2979
                var _VM = $geti(_VL, _VK, $f(_VL.length - _VK)); //#2979
                $k[$j++] = _VM; //#2984
                if (_VM.length < 1) { //#2984
                    $j -= 2; //#2983
                    $k[$j++] = 'bwipp.GS1couponTooShort3rdPurchaseRequirementCode#2983'; //#2983
                    $k[$j++] = "Coupon too short: Missing 3rd Purchase Requirement Code"; //#2983
                    $k[$j++] = false; //#2983
                    return true; //#2983
                } //#2983
                var _VN = $k[--$j]; //#2985
                var _VP = $cvi($geti(_VN, 0, 1)); //#2985
                $k[$j++] = _VN; //#2987
                if ((_VP > 4) && (_VP != 9)) { //#2987
                    $j -= 2; //#2986
                    $k[$j++] = 'bwipp.GS1couponBad3rdPurchaseRequirementCode#2986'; //#2986
                    $k[$j++] = "Coupon 3rd Purchase Requirement Code must be 0-4 or 9"; //#2986
                    $k[$j++] = false; //#2986
                    return true; //#2986
                } //#2986
                var _VQ = $k[--$j]; //#2988
                var _VR = $geti(_VQ, 1, _VQ.length - 1); //#2988
                $k[$j++] = _VR; //#2993
                if (_VR.length < 3) { //#2993
                    $j -= 2; //#2992
                    $k[$j++] = 'bwipp.GS1couponTooShort3rdPurchaseFamilyCode#2992'; //#2992
                    $k[$j++] = "Coupon too short: 3rd Purchase Family Code truncated"; //#2992
                    $k[$j++] = false; //#2992
                    return true; //#2992
                } //#2992
                var _VS = $k[--$j]; //#2994
                var _VT = $geti(_VS, 3, _VS.length - 3); //#2994
                $k[$j++] = _VT; //#2999
                if (_VT.length < 1) { //#2999
                    $j -= 2; //#2998
                    $k[$j++] = 'bwipp.GS1couponTooShort3rdPurchaseGCPVLI#2998'; //#2998
                    $k[$j++] = "Coupon too short: Missing 3rd Purchase GCP VLI"; //#2998
                    $k[$j++] = false; //#2998
                    return true; //#2998
                } //#2998
                var _VU = $k[--$j]; //#3000
                var _VW = $cvi($geti(_VU, 0, 1)); //#3000
                $k[$j++] = _VU; //#3002
                $k[$j++] = _VW; //#3002
                if ((_VW > 6) && (_VW != 9)) { //#3002
                    $j -= 2; //#3001
                    $k[$j++] = 'bwipp.GS1couponBad3rdPurchaseGCPVLI#3001'; //#3001
                    $k[$j++] = "Coupon 3rd Purchase GCP length indicator must be 0-6 or 9"; //#3001
                    $k[$j++] = false; //#3001
                    return true; //#3001
                } //#3001
                var _VX = $k[--$j]; //#3003
                $k[$j++] = _VX; //#3003
                if (_VX != 9) { //#3003
                    var _VY = $k[--$j]; //#3003
                    $k[$j++] = $f(_VY + 6); //#3003
                } else { //#3003
                    $j--; //#3003
                    $k[$j++] = 0; //#3003
                } //#3003
                var _VZ = $k[--$j]; //#3003
                var _Va = $k[--$j]; //#3004
                $k[$j++] = _Va; //#3006
                $k[$j++] = $f(_VZ + 1); //#3006
                if ($f(_VZ + 1) > _Va.length) { //#3006
                    $j -= 3; //#3005
                    $k[$j++] = 'bwipp.GS1couponTooShort3rdPurchaseGCP#3005'; //#3005
                    $k[$j++] = "Coupon too short: 3rd Purchase GCP truncated"; //#3005
                    $k[$j++] = false; //#3005
                    return true; //#3005
                } //#3005
                var _Vb = $k[--$j]; //#3007
                var _Vc = $k[--$j]; //#3007
                $k[$j++] = $geti(_Vc, _Vb, $f(_Vc.length - _Vb)); //#3007
            } //#3007
        } //#3007
        $_.couponexpire = -1; //#3012
        var _Ve = $k[--$j]; //#3013
        $k[$j++] = _Ve; //#3031
        if (_Ve.length >= 1) { //#3031
            var _Vf = $k[--$j]; //#3013
            $k[$j++] = _Vf; //#3031
            if ($cvi($geti(_Vf, 0, 1)) == 3) { //#3031
                var _Vh = $k[--$j]; //#3014
                var _Vi = $geti(_Vh, 1, _Vh.length - 1); //#3014
                $k[$j++] = _Vi; //#3019
                if (_Vi.length < 6) { //#3019
                    $j -= 2; //#3018
                    $k[$j++] = 'bwipp.GS1couponTooShortExpirationDate#3018'; //#3018
                    $k[$j++] = "Coupon too short: Expiration date"; //#3018
                    $k[$j++] = false; //#3018
                    return true; //#3018
                } //#3018
                var _Vj = $k[--$j]; //#3020
                var _Vl = $cvi($geti(_Vj, 2, 2)); //#3020
                $k[$j++] = _Vj; //#3020
                if ((_Vl < 1) || (_Vl > 12)) { //#3020
                    $j -= 2; //#3020
                    $k[$j++] = 'bwipp.GS1couponExpirationDateBadMonth#3020'; //#3020
                    $k[$j++] = "Invalid month in expiration date"; //#3020
                    $k[$j++] = false; //#3020
                    return true; //#3020
                } //#3020
                var _Vm = $k[--$j]; //#3021
                var _Vo = $cvi($geti(_Vm, 0, 2)); //#3021
                var _Vp = _Vo - 21; //#3022
                $k[$j++] = _Vm; //#3022
                $k[$j++] = _Vo; //#3022
                $k[$j++] = _Vp; //#3022
                if (_Vp >= 51) { //#3022
                    $j--; //#3022
                    var _Vq = $k[--$j]; //#3022
                    $k[$j++] = $f(_Vq + 1900); //#3022
                } else { //#3022
                    if ($k[--$j] <= -50) { //#3022
                        var _Vs = $k[--$j]; //#3022
                        $k[$j++] = $f(_Vs + 2100); //#3022
                    } else { //#3022
                        var _Vt = $k[--$j]; //#3022
                        $k[$j++] = $f(_Vt + 2000); //#3022
                    } //#3022
                } //#3022
                var _Vu = $k[--$j]; //#3023
                $k[$j++] = ((_Vu % 400) == 0) || (((_Vu % 4) == 0) && ((_Vu % 100) != 0)); //#3024
                $k[$j++] = Infinity; //#3024
                var _Vv = $k[--$j]; //#3024
                var _Vx = $k[--$j] ? 29 : 28; //#3024
                $k[$j++] = _Vv; //#3024
                $k[$j++] = 31; //#3024
                $k[$j++] = _Vx; //#3024
                $k[$j++] = 31; //#3024
                $k[$j++] = 30; //#3024
                $k[$j++] = 31; //#3024
                $k[$j++] = 30; //#3024
                $k[$j++] = 31; //#3024
                $k[$j++] = 31; //#3024
                $k[$j++] = 30; //#3024
                $k[$j++] = 31; //#3024
                $k[$j++] = 30; //#3024
                $k[$j++] = 31; //#3024
                var _Vy = $a(); //#3024
                var _Vz = $k[--$j]; //#3025
                var _W3 = $cvi($geti(_Vz, 4, 2)); //#3026
                $k[$j++] = _Vz; //#3027
                if (($get(_Vy, $cvi($geti(_Vz, 2, 2)) - 1) < _W3) || (_W3 < 1)) { //#3027
                    $j -= 2; //#3027
                    $k[$j++] = 'bwipp.GS1couponExpirationDateBadDay#3027'; //#3027
                    $k[$j++] = "Invalid day of month in expiration date"; //#3027
                    $k[$j++] = false; //#3027
                    return true; //#3027
                } //#3027
                var _W4 = $k[--$j]; //#3028
                $_.couponexpire = $cvi($geti(_W4, 0, 6)); //#3028
                $k[$j++] = $geti(_W4, 6, _W4.length - 6); //#3029
            } //#3029
        } //#3029
        var _W7 = $k[--$j]; //#3034
        $k[$j++] = _W7; //#3055
        if (_W7.length >= 1) { //#3055
            var _W8 = $k[--$j]; //#3034
            $k[$j++] = _W8; //#3055
            if ($cvi($geti(_W8, 0, 1)) == 4) { //#3055
                var _WA = $k[--$j]; //#3035
                var _WB = $geti(_WA, 1, _WA.length - 1); //#3035
                $k[$j++] = _WB; //#3040
                if (_WB.length < 6) { //#3040
                    $j -= 2; //#3039
                    $k[$j++] = 'bwipp.GS1couponTooShortStartDate#3039'; //#3039
                    $k[$j++] = "Coupon too short: Start date"; //#3039
                    $k[$j++] = false; //#3039
                    return true; //#3039
                } //#3039
                var _WC = $k[--$j]; //#3041
                var _WE = $cvi($geti(_WC, 2, 2)); //#3041
                $k[$j++] = _WC; //#3041
                if ((_WE < 1) || (_WE > 12)) { //#3041
                    $j -= 2; //#3041
                    $k[$j++] = 'bwipp.GS1couponStartDateBadMonth#3041'; //#3041
                    $k[$j++] = "Invalid month in start date"; //#3041
                    $k[$j++] = false; //#3041
                    return true; //#3041
                } //#3041
                var _WF = $k[--$j]; //#3042
                var _WH = $cvi($geti(_WF, 0, 2)); //#3042
                var _WI = _WH - 21; //#3043
                $k[$j++] = _WF; //#3043
                $k[$j++] = _WH; //#3043
                $k[$j++] = _WI; //#3043
                if (_WI >= 51) { //#3043
                    $j--; //#3043
                    var _WJ = $k[--$j]; //#3043
                    $k[$j++] = $f(_WJ + 1900); //#3043
                } else { //#3043
                    if ($k[--$j] <= -50) { //#3043
                        var _WL = $k[--$j]; //#3043
                        $k[$j++] = $f(_WL + 2100); //#3043
                    } else { //#3043
                        var _WM = $k[--$j]; //#3043
                        $k[$j++] = $f(_WM + 2000); //#3043
                    } //#3043
                } //#3043
                var _WN = $k[--$j]; //#3044
                $k[$j++] = ((_WN % 400) == 0) || (((_WN % 4) == 0) && ((_WN % 100) != 0)); //#3045
                $k[$j++] = Infinity; //#3045
                var _WO = $k[--$j]; //#3045
                var _WQ = $k[--$j] ? 29 : 28; //#3045
                $k[$j++] = _WO; //#3045
                $k[$j++] = 31; //#3045
                $k[$j++] = _WQ; //#3045
                $k[$j++] = 31; //#3045
                $k[$j++] = 30; //#3045
                $k[$j++] = 31; //#3045
                $k[$j++] = 30; //#3045
                $k[$j++] = 31; //#3045
                $k[$j++] = 31; //#3045
                $k[$j++] = 30; //#3045
                $k[$j++] = 31; //#3045
                $k[$j++] = 30; //#3045
                $k[$j++] = 31; //#3045
                var _WR = $a(); //#3045
                var _WS = $k[--$j]; //#3046
                var _WW = $cvi($geti(_WS, 4, 2)); //#3047
                $k[$j++] = _WS; //#3048
                if (($get(_WR, $cvi($geti(_WS, 2, 2)) - 1) < _WW) || (_WW < 1)) { //#3048
                    $j -= 2; //#3048
                    $k[$j++] = 'bwipp.GS1couponStartDateBadDay#3048'; //#3048
                    $k[$j++] = "Invalid day of month in start date"; //#3048
                    $k[$j++] = false; //#3048
                    return true; //#3048
                } //#3048
                var _WX = $k[--$j]; //#3049
                $_.couponstart = $cvi($geti(_WX, 0, 6)); //#3049
                $k[$j++] = _WX; //#3052
                if (($_.couponexpire != -1) && ($_.couponexpire < $_.couponstart)) { //#3052
                    $j -= 2; //#3051
                    $k[$j++] = 'bwipp.GS1couponExpireDateBeforeStartDate#3051'; //#3051
                    $k[$j++] = "Coupon expires before it starts"; //#3051
                    $k[$j++] = false; //#3051
                    return true; //#3051
                } //#3051
                var _Wc = $k[--$j]; //#3053
                $k[$j++] = $geti(_Wc, 6, _Wc.length - 6); //#3053
            } //#3053
        } //#3053
        var _We = $k[--$j]; //#3058
        $k[$j++] = _We; //#3071
        if (_We.length >= 1) { //#3071
            var _Wf = $k[--$j]; //#3058
            $k[$j++] = _Wf; //#3071
            if ($cvi($geti(_Wf, 0, 1)) == 5) { //#3071
                var _Wh = $k[--$j]; //#3059
                var _Wi = $geti(_Wh, 1, _Wh.length - 1); //#3059
                $k[$j++] = _Wi; //#3064
                if (_Wi.length < 1) { //#3064
                    $j -= 2; //#3063
                    $k[$j++] = 'bwipp.GS1couponTooShortSerialNumberVLI#3063'; //#3063
                    $k[$j++] = "Coupon too short: Missing Serial Number VLI"; //#3063
                    $k[$j++] = false; //#3063
                    return true; //#3063
                } //#3063
                var _Wj = $k[--$j]; //#3065
                var _Wk = $geti(_Wj, 0, 1); //#3065
                $k[$j++] = _Wj; //#3068
                $k[$j++] = ($cvi(_Wk) + 6) + 1; //#3068
                if ((($cvi(_Wk) + 6) + 1) > _Wj.length) { //#3068
                    $j -= 3; //#3067
                    $k[$j++] = 'bwipp.GS1couponTooShortSerialNumber#3067'; //#3067
                    $k[$j++] = "Coupon too short: Serial Number truncated"; //#3067
                    $k[$j++] = false; //#3067
                    return true; //#3067
                } //#3067
                var _Wl = $k[--$j]; //#3069
                var _Wm = $k[--$j]; //#3069
                $k[$j++] = $geti(_Wm, _Wl, $f(_Wm.length - _Wl)); //#3069
            } //#3069
        } //#3069
        var _Wo = $k[--$j]; //#3074
        $k[$j++] = _Wo; //#3090
        if (_Wo.length >= 1) { //#3090
            var _Wp = $k[--$j]; //#3074
            $k[$j++] = _Wp; //#3090
            if ($cvi($geti(_Wp, 0, 1)) == 6) { //#3090
                var _Wr = $k[--$j]; //#3075
                var _Ws = $geti(_Wr, 1, _Wr.length - 1); //#3075
                $k[$j++] = _Ws; //#3080
                if (_Ws.length < 1) { //#3080
                    $j -= 2; //#3079
                    $k[$j++] = 'bwipp.GS1couponTooShortRetailerGCPGLNVLI#3079'; //#3079
                    $k[$j++] = "Coupon too short: Missing Retailer GCP/GLN VLI"; //#3079
                    $k[$j++] = false; //#3079
                    return true; //#3079
                } //#3079
                var _Wt = $k[--$j]; //#3081
                var _Wv = $cvi($geti(_Wt, 0, 1)); //#3081
                $k[$j++] = _Wt; //#3083
                $k[$j++] = _Wv; //#3083
                if ((_Wv < 1) || (_Wv > 7)) { //#3083
                    $j -= 2; //#3082
                    $k[$j++] = 'bwipp.GS1couponBadRetailerGCPGLNVLI#3082'; //#3082
                    $k[$j++] = "Coupon Retailer GCP/GLN length indicator must be 1-7"; //#3082
                    $k[$j++] = false; //#3082
                    return true; //#3082
                } //#3082
                var _Ww = $k[--$j]; //#3084
                var _Wx = $k[--$j]; //#3085
                $k[$j++] = _Wx; //#3087
                $k[$j++] = $f($f(_Ww + 6) + 1); //#3087
                if (($f($f(_Ww + 6) + 1)) > _Wx.length) { //#3087
                    $j -= 3; //#3086
                    $k[$j++] = 'bwipp.GS1couponTooShortRetailerGCPGLN#3086'; //#3086
                    $k[$j++] = "Coupon too short: Retailer GCP/GLN truncated"; //#3086
                    $k[$j++] = false; //#3086
                    return true; //#3086
                } //#3086
                var _Wy = $k[--$j]; //#3088
                var _Wz = $k[--$j]; //#3088
                $k[$j++] = $geti(_Wz, _Wy, $f(_Wz.length - _Wy)); //#3088
            } //#3088
        } //#3088
        var _X1 = $k[--$j]; //#3093
        $k[$j++] = _X1; //#3129
        if (_X1.length >= 1) { //#3129
            var _X2 = $k[--$j]; //#3093
            $k[$j++] = _X2; //#3129
            if ($cvi($geti(_X2, 0, 1)) == 9) { //#3129
                var _X4 = $k[--$j]; //#3094
                var _X5 = $geti(_X4, 1, _X4.length - 1); //#3094
                $k[$j++] = _X5; //#3099
                if (_X5.length < 1) { //#3099
                    $j -= 2; //#3098
                    $k[$j++] = 'bwipp.GS1couponTooShortSaveValueCode#3098'; //#3098
                    $k[$j++] = "Coupon too short: Missing Save Value Code"; //#3098
                    $k[$j++] = false; //#3098
                    return true; //#3098
                } //#3098
                var _X6 = $k[--$j]; //#3100
                var _X8 = $cvi($geti(_X6, 0, 1)); //#3100
                $k[$j++] = _X6; //#3102
                if ((_X8 > 6) || ((_X8 == 3) || (_X8 == 4))) { //#3102
                    $j -= 2; //#3101
                    $k[$j++] = 'bwipp.GS1couponBadSaveValueCode#3101'; //#3101
                    $k[$j++] = "Coupon Save Value Code must be 0,1,2,5 or 6"; //#3101
                    $k[$j++] = false; //#3101
                    return true; //#3101
                } //#3101
                var _X9 = $k[--$j]; //#3103
                var _XA = $geti(_X9, 1, _X9.length - 1); //#3103
                $k[$j++] = _XA; //#3108
                if (_XA.length < 1) { //#3108
                    $j -= 2; //#3107
                    $k[$j++] = 'bwipp.GS1couponTooShortSaveValueAppliesToItem#3107'; //#3107
                    $k[$j++] = "Coupon too short: Missing Save Value Applies to Item"; //#3107
                    $k[$j++] = false; //#3107
                    return true; //#3107
                } //#3107
                var _XB = $k[--$j]; //#3109
                $k[$j++] = _XB; //#3111
                if ($cvi($geti(_XB, 0, 1)) > 2) { //#3111
                    $j -= 2; //#3110
                    $k[$j++] = 'bwipp.GS1couponBadSaveValueAppliesToItem#3110'; //#3110
                    $k[$j++] = "Coupon Save Value Applies to Item must be 0-2"; //#3110
                    $k[$j++] = false; //#3110
                    return true; //#3110
                } //#3110
                var _XD = $k[--$j]; //#3112
                var _XE = $geti(_XD, 1, _XD.length - 1); //#3112
                $k[$j++] = _XE; //#3117
                if (_XE.length < 1) { //#3117
                    $j -= 2; //#3116
                    $k[$j++] = 'bwipp.GS1couponTooShortStoreCouponFlag#3116'; //#3116
                    $k[$j++] = "Coupon too short: Missing Store Coupon Flag"; //#3116
                    $k[$j++] = false; //#3116
                    return true; //#3116
                } //#3116
                var _XF = $k[--$j]; //#3118
                var _XG = $geti(_XF, 1, _XF.length - 1); //#3118
                $k[$j++] = _XG; //#3123
                if (_XG.length < 1) { //#3123
                    $j -= 2; //#3122
                    $k[$j++] = 'bwipp.GS1couponTooShortDontMultiplyFlag#3122'; //#3122
                    $k[$j++] = "Coupon too short: Missing Don't Multiply Flag"; //#3122
                    $k[$j++] = false; //#3122
                    return true; //#3122
                } //#3122
                var _XH = $k[--$j]; //#3124
                $k[$j++] = _XH; //#3126
                if ($cvi($geti(_XH, 0, 1)) > 1) { //#3126
                    $j -= 2; //#3125
                    $k[$j++] = 'bwipp.GS1couponBadDontMultiplyFlag#3125'; //#3125
                    $k[$j++] = "Don't Multiply Flag must be 0 or 1"; //#3125
                    $k[$j++] = false; //#3125
                    return true; //#3125
                } //#3125
                var _XJ = $k[--$j]; //#3127
                $k[$j++] = $geti(_XJ, 1, _XJ.length - 1); //#3127
            } //#3127
        } //#3127
        var _XL = $k[--$j]; //#3131
        $k[$j++] = _XL; //#3133
        if (_XL.length != 0) { //#3133
            $j -= 2; //#3132
            $k[$j++] = 'bwipp.GS1couponUnrecognisedOptionalField#3132'; //#3132
            $k[$j++] = "Coupon fields must be 1,2,3,4,5,6 or 9, increasing order"; //#3132
            $k[$j++] = false; //#3132
            return true; //#3132
        } //#3132
        $j--; //#3134
    }; //#3134
    $_.lintcouponposoffer = function() {
        var _XM = $k[--$j]; //#3138
        $k[$j++] = _XM; //#3140
        $k[$j++] = true; //#3140
        $forall(_XM, function() { //#3140
            var _XN = $k[--$j]; //#3139
            if ((_XN < 48) || (_XN > 57)) { //#3139
                $j--; //#3139
                $k[$j++] = false; //#3139
                return true; //#3139
            } //#3139
        }); //#3139
        if ($nt($k[--$j])) { //#3141
            $j -= 2; //#3141
            $k[$j++] = 'bwipp.GS1couponNotNumeric#3141'; //#3141
            $k[$j++] = "Coupon not numeric"; //#3141
            $k[$j++] = false; //#3141
            return true; //#3141
        } //#3141
        var _XP = $k[--$j]; //#3143
        $k[$j++] = _XP; //#3145
        if (_XP.length < 1) { //#3145
            $j -= 2; //#3144
            $k[$j++] = 'bwipp.GS1couponTooShortFormatCode#3144'; //#3144
            $k[$j++] = "Coupon too short: Missing Format Code"; //#3144
            $k[$j++] = false; //#3144
            return true; //#3144
        } //#3144
        var _XQ = $k[--$j]; //#3146
        var _XR = $geti(_XQ, 0, 1); //#3146
        $k[$j++] = _XQ; //#3148
        if ($ne(_XR, "0") && $ne(_XR, "1")) { //#3148
            $j -= 2; //#3147
            $k[$j++] = 'bwipp.GS1couponBadFormatCode#3147'; //#3147
            $k[$j++] = "Coupon format must be 0 or 1"; //#3147
            $k[$j++] = false; //#3147
            return true; //#3147
        } //#3147
        var _XS = $k[--$j]; //#3149
        var _XT = $geti(_XS, 1, _XS.length - 1); //#3149
        $k[$j++] = _XT; //#3153
        if (_XT.length < 1) { //#3153
            $j -= 2; //#3152
            $k[$j++] = 'bwipp.GS1couponTooShortFunderVLI#3152'; //#3152
            $k[$j++] = "Coupon too short: Missing Funder VLI"; //#3152
            $k[$j++] = false; //#3152
            return true; //#3152
        } //#3152
        var _XU = $k[--$j]; //#3154
        var _XW = $cvi($geti(_XU, 0, 1)); //#3154
        $k[$j++] = _XU; //#3156
        $k[$j++] = _XW; //#3156
        if (_XW > 6) { //#3156
            $j -= 3; //#3155
            $k[$j++] = 'bwipp.GS1couponBadFunderVLI#3155'; //#3155
            $k[$j++] = "Coupon Funder length indicator must be 0-6"; //#3155
            $k[$j++] = false; //#3155
            return true; //#3155
        } //#3155
        var _XX = $k[--$j]; //#3157
        var _XY = $k[--$j]; //#3158
        $k[$j++] = _XY; //#3160
        $k[$j++] = $f($f(_XX + 6) + 1); //#3160
        if (($f($f(_XX + 6) + 1)) > _XY.length) { //#3160
            $j -= 3; //#3159
            $k[$j++] = 'bwipp.GS1couponTooShortFunder#3159'; //#3159
            $k[$j++] = "Coupon too short: Truncated Funder ID"; //#3159
            $k[$j++] = false; //#3159
            return true; //#3159
        } //#3159
        var _XZ = $k[--$j]; //#3161
        var _Xa = $k[--$j]; //#3161
        var _Xb = $geti(_Xa, _XZ, $f(_Xa.length - _XZ)); //#3161
        $k[$j++] = _Xb; //#3165
        if (_Xb.length < 6) { //#3165
            $j -= 2; //#3164
            $k[$j++] = 'bwipp.GS1couponTooShortOfferCode#3164'; //#3164
            $k[$j++] = "Coupon too short: Truncated Offer Code"; //#3164
            $k[$j++] = false; //#3164
            return true; //#3164
        } //#3164
        var _Xc = $k[--$j]; //#3166
        var _Xd = $geti(_Xc, 6, _Xc.length - 6); //#3166
        $k[$j++] = _Xd; //#3170
        if (_Xd.length < 1) { //#3170
            $j -= 2; //#3169
            $k[$j++] = 'bwipp.GS1couponTooShortSnVLI#3169'; //#3169
            $k[$j++] = "Coupon too short: Missing SN VLI"; //#3169
            $k[$j++] = false; //#3169
            return true; //#3169
        } //#3169
        var _Xe = $k[--$j]; //#3171
        var _Xf = $geti(_Xe, 0, 1); //#3171
        $k[$j++] = _Xe; //#3175
        $k[$j++] = ($cvi(_Xf) + 6) + 1; //#3175
        if ((($cvi(_Xf) + 6) + 1) > _Xe.length) { //#3175
            $j -= 3; //#3174
            $k[$j++] = 'bwipp.GS1couponTooShortSn#3174'; //#3174
            $k[$j++] = "Coupon too short: Truncated SN"; //#3174
            $k[$j++] = false; //#3174
            return true; //#3174
        } //#3174
        var _Xg = $k[--$j]; //#3176
        var _Xh = $k[--$j]; //#3176
        var _Xi = $geti(_Xh, _Xg, $f(_Xh.length - _Xg)); //#3176
        $k[$j++] = _Xi; //#3179
        if (_Xi.length != 0) { //#3179
            $j -= 2; //#3178
            $k[$j++] = 'bwipp.GS1couponTooLong#3178'; //#3178
            $k[$j++] = "Coupon too long"; //#3178
            $k[$j++] = false; //#3178
            return true; //#3178
        } //#3178
        $j--; //#3180
    }; //#3180
    $_.lintlatitude = function() {
        var _Xj = $k[--$j]; //#3184
        $k[$j++] = _Xj; //#3186
        if (_Xj.length != 10) { //#3186
            $j--; //#3185
            $k[$j++] = 'bwipp.GS1badLatitudeLength#3185'; //#3185
            $k[$j++] = "Invalid length for a latitude"; //#3185
            $k[$j++] = false; //#3185
            return true; //#3185
        } //#3185
        if ($cvi($k[--$j]) > $cvi("1800000000")) { //#3189
            $j--; //#3189
            $k[$j++] = 'bwipp.GS1badLatitude#3189'; //#3189
            $k[$j++] = "Invalid value for latitude"; //#3189
            $k[$j++] = false; //#3189
            return true; //#3189
        } //#3189
    }; //#3189
    $_.lintlongitude = function() {
        var _Xl = $k[--$j]; //#3193
        $k[$j++] = _Xl; //#3195
        if (_Xl.length != 10) { //#3195
            $j--; //#3194
            $k[$j++] = 'bwipp.GS1badLongitudeLength#3194'; //#3194
            $k[$j++] = "Invalid length for a longitude"; //#3194
            $k[$j++] = false; //#3194
            return true; //#3194
        } //#3194
        if ($cvi($k[--$j]) > $cvi("3600000000")) { //#3199
            $j--; //#3199
            $k[$j++] = 'bwipp.GS1badLongitude#3199'; //#3199
            $k[$j++] = "Invalid value for longitude"; //#3199
            $k[$j++] = false; //#3199
            return true; //#3199
        } //#3199
    }; //#3199
    if (!bwipp_gs1process.__3208__) { //#3208
        $_ = Object.create($_); //#3208
        $k[$j++] = Infinity; //#3203
        var _Xn = $a(['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99']); //#3206
        for (var _Xo = 0, _Xp = _Xn.length; _Xo < _Xp; _Xo++) { //#3207
            var _Xq = $get(_Xn, _Xo); //#3207
            $k[$j++] = _Xq; //#3207
            $k[$j++] = _Xq; //#3207
        } //#3207
        $_.aidcmediatype = $d(); //#3207
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_gs1process.$ctx[id] = $_[id]); //#3207
        bwipp_gs1process.__3208__ = 1; //#3207
        $_ = Object.getPrototypeOf($_); //#3207
    } //#3207
    $_.lintmediatype = function() {
        var _Xv = $get($_.aidcmediatype, $k[--$j]) !== undefined; //#3211
        if (!_Xv) { //#3211
            $j--; //#3211
            $k[$j++] = 'bwipp.GS1UnknownMediaType#3211'; //#3211
            $k[$j++] = "Unknown AIDC media type"; //#3211
            $k[$j++] = false; //#3211
            return true; //#3211
        } //#3211
    }; //#3211
    if (!$_.dontlint) { //#3352
        $k[$j++] = true; //#3255
        for (var _Xz = 0, _Xy = $_.vals.length - 1; _Xz <= _Xy; _Xz += 1) { //#3255
            $_.ai = $get($_.ais, _Xz); //#3219
            $_.val = $get($_.vals, _Xz); //#3220
            var _Y6 = $get($_.gs1syntax, $_.ai) !== undefined; //#3221
            if (_Y6) { //#3253
                var _YA = $get($get($_.gs1syntax, $_.ai), 'parts'); //#3222
                $k[$j++] = _YA; //#3224
                $k[$j++] = 0; //#3224
                $forall(_YA, function() { //#3224
                    var _YB = $k[--$j]; //#3224
                    $k[$j++] = _YB; //#3224
                    if ($get(_YB, 'opt')) { //#3224
                        $j--; //#3224
                        $k[$j++] = 0; //#3224
                    } else { //#3224
                        var _YE = $get($k[--$j], 'min'); //#3224
                        $k[$j++] = _YE; //#3224
                    } //#3224
                    var _YF = $k[--$j]; //#3224
                    var _YG = $k[--$j]; //#3224
                    $k[$j++] = $f(_YG + _YF); //#3224
                }); //#3224
                if ($k[--$j] > $_.val.length) { //#3226
                    $j--; //#3225
                    $k[$j++] = 'bwipp.GS1valueTooShort#3225'; //#3225
                    $k[$j++] = "Too short"; //#3225
                    $k[$j++] = false; //#3225
                    break; //#3225
                } //#3225
                var _YJ = $k[--$j]; //#3227
                $k[$j++] = _YJ; //#3227
                $k[$j++] = 0; //#3227
                $forall(_YJ, function() { //#3227
                    var _YL = $get($k[--$j], 'max'); //#3227
                    var _YM = $k[--$j]; //#3227
                    $k[$j++] = $f(_YM + _YL); //#3227
                }); //#3227
                if ($k[--$j] < $_.val.length) { //#3229
                    $j--; //#3228
                    $k[$j++] = 'bwipp.GS1valueTooLong#3228'; //#3228
                    $k[$j++] = "Too long"; //#3228
                    $k[$j++] = false; //#3228
                    break; //#3228
                } //#3228
                $forall($k[--$j], function() { //#3247
                    $_.props = $k[--$j]; //#3231
                    var _YS = $get($_.props, 'max'); //#3232
                    var _YT = $_.val; //#3232
                    var _YU = _YT.length; //#3232
                    if (_YS > _YT.length) { //#3232
                        var _ = _YU; //#3232
                        _YU = _YS; //#3232
                        _YS = _; //#3232
                    } //#3232
                    $_.eval = $geti($_.val, 0, _YS); //#3233
                    var _YZ = $_.eval.length; //#3234
                    $_.val = $geti($_.val, _YZ, $_.val.length - _YZ); //#3234
                    if ($_.eval.length == 0) { //#3245
                        if ($nt($get($_.props, 'opt'))) { //#3238
                            $j--; //#3237
                            $k[$j++] = 'bwipp.GS1valueTooShort#3237'; //#3237
                            $k[$j++] = "Too short"; //#3237
                            $k[$j++] = false; //#3237
                            return true; //#3237
                        } //#3237
                    } else { //#3245
                        if ($_.eval.length < $get($_.props, 'min')) { //#3242
                            $j--; //#3241
                            $k[$j++] = 'bwipp.GS1valueTooShort#3241'; //#3241
                            $k[$j++] = "Too short"; //#3241
                            $k[$j++] = false; //#3241
                            return true; //#3241
                        } //#3241
                        var _Yi = new Map([
                            ["N", 'lintnumeric'],
                            ["X", 'lintcset82'],
                            ["Y", 'lintcset39'],
                            ["Z", 'lintcset64']
                        ]); //#3243
                        $k[$j++] = $_.eval; //#3244
                        if ($_[$get(_Yi, $get($_.props, 'cset'))]() === true) {
                            return true;
                        } //#3244
                        $forall($get($_.props, 'linters'), function() { //#3245
                            var _Ys = $_[$k[--$j]]; //#3245
                            $k[$j++] = $_.eval; //#3245
                            if (_Ys() === true) {
                                return true;
                            } //#3245
                        }); //#3245
                    } //#3245
                }); //#3245
                var _Yt = $k[--$j]; //#3248
                $k[$j++] = _Yt; //#3248
                if ($nt(_Yt)) { //#3248
                    break; //#3248
                } //#3248
                if ($_.val.length != 0) { //#3251
                    $j--; //#3250
                    $k[$j++] = 'bwipp.GS1valueTooLong#3250'; //#3250
                    $k[$j++] = "Too long"; //#3250
                    $k[$j++] = false; //#3250
                    break; //#3250
                } //#3250
            } else { //#3253
                $j--; //#3253
                $k[$j++] = 'bwipp.GS1unknownAI#3253'; //#3253
                $k[$j++] = "Unrecognised AI"; //#3253
                $k[$j++] = false; //#3253
                break; //#3253
            } //#3253
        } //#3253
        if ($nt($k[--$j])) { //#3263
            var _Yw = $k[--$j]; //#3257
            var _Yy = $s((_Yw.length + $_.ai.length) + 5); //#3257
            $puti(_Yy, 0, "AI "); //#3258
            $puti(_Yy, 3, $_.ai); //#3259
            $puti(_Yy, 3 + $_.ai.length, ": "); //#3260
            $puti(_Yy, 5 + $_.ai.length, _Yw); //#3261
            $k[$j++] = _Yy; //#3262
            bwipp_raiseerror(); //#3262
        } //#3262
        $_.aiexists = function() {
            $_.this = $k[--$j]; //#3267
            $_.patt = $k[--$j]; //#3268
            for (var _Z4 = 0, _Z5 = 1; _Z4 < _Z5; _Z4++) { //#3289
                var _Z8 = $get($_.aivals, $_.patt) !== undefined; //#3270
                if (_Z8) { //#3270
                    $k[$j++] = true; //#3270
                    break; //#3270
                } //#3270
                if ($_.patt.length == 4) { //#3287
                    if ($eq($geti($_.patt, 3, 1), "n")) { //#3285
                        var _ZE = $eq($geti($_.patt, 2, 1), "n") ? 2 : 3; //#3273
                        $_.pfxlen = _ZE; //#3273
                        var _ZF = $_.ais; //#3275
                        $k[$j++] = false; //#3283
                        for (var _ZG = 0, _ZH = _ZF.length; _ZG < _ZH; _ZG++) { //#3283
                            var _ZI = $get(_ZF, _ZG); //#3283
                            $k[$j++] = _ZI; //#3282
                            if ($ne(_ZI, $_.this) && (_ZI.length == 4)) { //#3281
                                if ($eq($geti($k[--$j], 0, $_.pfxlen), $geti($_.patt, 0, $_.pfxlen))) { //#3279
                                    $j--; //#3278
                                    $k[$j++] = true; //#3278
                                } //#3278
                            } else { //#3281
                                $j--; //#3281
                            } //#3281
                        } //#3281
                        break; //#3284
                    } //#3284
                    $k[$j++] = false; //#3286
                    break; //#3286
                } //#3286
                $k[$j++] = false; //#3288
                break; //#3288
            } //#3288
        }; //#3288
        var _ZQ = $_.vals; //#3293
        $_.aivals = new Map; //#3293
        for (var _ZT = 0, _ZS = $_.vals.length - 1; _ZT <= _ZS; _ZT += 1) { //#3308
            $_.ai = $get($_.ais, _ZT); //#3295
            $_.val = $get($_.vals, _ZT); //#3296
            var _Za = $get($_.aivals, $_.ai) !== undefined; //#3297
            if (_Za) { //#3306
                if ($ne($get($_.aivals, $_.ai), $_.val)) { //#3304
                    var _Zg = $s($_.ai.length + 40); //#3299
                    $puti(_Zg, 0, "Repeated AIs ("); //#3300
                    $puti(_Zg, 14, $_.ai); //#3301
                    $puti(_Zg, 14 + $_.ai.length, ") must have the same value"); //#3302
                    $k[$j++] = 'bwipp.GS1repeatedDifferingAIs#3303'; //#3303
                    $k[$j++] = _Zg; //#3303
                    bwipp_raiseerror(); //#3303
                } //#3303
            } else { //#3306
                $put($_.aivals, $_.ai, $_.val); //#3306
            } //#3306
        } //#3306
        for (var _Zo = 0, _Zn = $_.vals.length - 1; _Zo <= _Zn; _Zo += 1) { //#3350
            $_.ai = $get($_.ais, _Zo); //#3312
            var _Zt = $get($_.gs1syntax, $_.ai); //#3313
            var _Zu = $get(_Zt, 'ex') !== undefined; //#3313
            $k[$j++] = _Zt; //#3328
            $k[$j++] = 'ex'; //#3328
            if (_Zu) { //#3327
                var _Zv = $k[--$j]; //#3314
                $forall($get($k[--$j], _Zv), function() { //#3325
                    $_.patt = $k[--$j]; //#3315
                    $k[$j++] = $_.patt; //#3316
                    $k[$j++] = $_.ai; //#3316
                    $_.aiexists(); //#3316
                    if ($k[--$j]) { //#3324
                        var _a4 = $s(($_.ai.length + $_.patt.length) + 36); //#3317
                        $puti(_a4, 0, "AIs ("); //#3318
                        $puti(_a4, 5, $_.ai); //#3319
                        $puti(_a4, 5 + $_.ai.length, ") and ("); //#3320
                        $puti(_a4, 12 + $_.ai.length, $_.patt); //#3321
                        $puti(_a4, (12 + $_.ai.length) + $_.patt.length, ") are mutually exclusive"); //#3322
                        $k[$j++] = 'bwipp.GS1exclusiveAIs#3323'; //#3323
                        $k[$j++] = _a4; //#3323
                        bwipp_raiseerror(); //#3323
                    } //#3323
                }); //#3323
            } else { //#3327
                $j -= 2; //#3327
            } //#3327
            if ($_.lintreqs) { //#3349
                var _aE = $get($_.gs1syntax, $_.ai); //#3330
                var _aF = $get(_aE, 'req') !== undefined; //#3330
                $k[$j++] = _aE; //#3348
                $k[$j++] = 'req'; //#3348
                if (_aF) { //#3347
                    var _aG = $k[--$j]; //#3331
                    $forall($get($k[--$j], _aG), function() { //#3345
                        var _aJ = $k[--$j]; //#3332
                        $k[$j++] = false; //#3337
                        $forall(_aJ, function() { //#3337
                            var _aK = $k[--$j]; //#3333
                            $k[$j++] = true; //#3335
                            $forall(_aK, function() { //#3335
                                $k[$j++] = $_.ai; //#3334
                                $_.aiexists(); //#3334
                                if ($nt($k[--$j])) { //#3334
                                    $j--; //#3334
                                    $k[$j++] = false; //#3334
                                } //#3334
                            }); //#3334
                            if ($k[--$j]) { //#3336
                                $j--; //#3336
                                $k[$j++] = true; //#3336
                                return true; //#3336
                            } //#3336
                        }); //#3336
                        if ($nt($k[--$j])) { //#3344
                            var _aQ = $s($_.ai.length + 47); //#3339
                            $puti(_aQ, 0, "One of more requisite AIs for AI ("); //#3340
                            $puti(_aQ, 34, $_.ai); //#3341
                            $puti(_aQ, 34 + $_.ai.length, ") are missing"); //#3342
                            $k[$j++] = 'bwipp.GS1missingAIs#3343'; //#3343
                            $k[$j++] = _aQ; //#3343
                            bwipp_raiseerror(); //#3343
                        } //#3343
                    }); //#3343
                } else { //#3347
                    $j -= 2; //#3347
                } //#3347
            } //#3347
        } //#3347
    } //#3347
    $k[$j++] = $_.ais; //#3356
    $k[$j++] = $_.vals; //#3356
    $k[$j++] = $_.fncs; //#3356
    $_ = Object.getPrototypeOf($_); //#3356
    $_ = Object.getPrototypeOf($_); //#3358
} //bwipp_gs1process
function bwipp_renmatrix() {
    if ($_.bwipjs_dontdraw) { //#3633
        return; //#3633
    } //#3633
    $_ = Object.create($_); //#3635
    $_.width = 1; //#3638
    $_.height = 1; //#3639
    $_.bordercolor = "unset"; //#3640
    $_.barcolor = "unset"; //#3641
    $_.backgroundcolor = "unset"; //#3642
    $_.colormap = "unset"; //#3643
    $_.dotty = false; //#3644
    $_.inkspread = null; //#3645
    $_.inkspreadh = null; //#3646
    $_.inkspreadv = null; //#3647
    $_.includetext = false; //#3648
    $_.txt = $a([]); //#3649
    $_.textcolor = "unset"; //#3650
    $_.textxalign = "unset"; //#3651
    $_.textyalign = "unset"; //#3652
    $_.textfont = "OCR-B"; //#3653
    $_.textsize = 10; //#3654
    $_.textxoffset = 0; //#3655
    $_.textyoffset = 0; //#3656
    $_.textgaps = 0; //#3657
    $_.alttext = ""; //#3658
    $_.showborder = false; //#3659
    $_.borderleft = 0; //#3660
    $_.borderright = 0; //#3661
    $_.bordertop = 0; //#3662
    $_.borderbottom = 0; //#3663
    $_.borderwidth = 0.25; //#3664
    $forall($k[--$j], function() { //#3666
        var _3 = $k[--$j]; //#3666
        $_[$k[--$j]] = _3; //#3666
    }); //#3666
    $k[$j++] = $_.opt; //#3667
    delete $_['opt']; //#3667
    $k[$j++] = $_; //#3667
    bwipp_processoptions(); //#3667
    $j--; //#3667
    if ($eq($_.inkspread, null)) { //#3669
        $_.inkspread = 0; //#3669
    } //#3669
    if ($eq($_.inkspreadh, null)) { //#3670
        $_.inkspreadh = $_.inkspread; //#3670
    } //#3670
    if ($eq($_.inkspreadv, null)) { //#3671
        $_.inkspreadv = $_.inkspread; //#3671
    } //#3671
    if ($_.textsize <= 0) { //#3675
        $k[$j++] = 'bwipp.renmatrixBadTextsize#3674'; //#3674
        $k[$j++] = "The font size must be greater than zero"; //#3674
        bwipp_raiseerror(); //#3674
    } //#3674
    $_.xyget = function() {
        var _D = $k[--$j]; //#3677
        var _G = $get($_.pixs, $f($k[--$j] + (_D * $_.pixx))); //#3677
        $k[$j++] = _G; //#3677
    }; //#3677
    $_.cget = function() {
        var _I = $k[--$j]; //#3678
        var _L = $get($_.cache, $f($k[--$j] + (_I * $_.pixx))); //#3678
        var _M = $k[--$j]; //#3678
        $k[$j++] = $an(_M, _L); //#3678
    }; //#3678
    $_.cput = function() {
        var _N = $k[--$j]; //#3680
        $k[$j++] = _N; //#3684
        if ((_N % 4) == 0) { //#3683
            var _O = $k[--$j]; //#3681
            var _P = $k[--$j]; //#3681
            var _Q = $k[--$j]; //#3681
            var _R = $_.pixx; //#3681
            var _S = $_.cache; //#3681
            $put(_S, $f(_Q + (_P * _R)), $or($get(_S, $f(_Q + (_P * _R))), _O)); //#3681
        } else { //#3683
            $j -= 3; //#3683
        } //#3683
    }; //#3683
    $_.abcd = function() {
        $k[$j++] = $s(4); //#3692
        $k[$j++] = 0; //#3692
        $k[$j++] = Infinity; //#3688
        var _V = $k[--$j]; //#3689
        var _W = $k[--$j]; //#3689
        var _X = $k[--$j]; //#3689
        var _Y = $k[--$j]; //#3689
        var _b = $f($k[--$j] + (_Y * $_.pixx)); //#3690
        $k[$j++] = _X; //#3691
        $k[$j++] = _W; //#3691
        $k[$j++] = _V; //#3691
        $k[$j++] = _b; //#3691
        $aload($geti($_.pixs, _b, 2)); //#3691
        var _e = $k[--$j]; //#3691
        var _f = $k[--$j]; //#3691
        var _j = $geti($_.pixs, $f($k[--$j] + $_.pixx), 2); //#3692
        $k[$j++] = _f; //#3692
        $k[$j++] = _e; //#3692
        $aload(_j); //#3692
        var _k = $a(); //#3692
        for (var _l = 0, _m = _k.length; _l < _m; _l++) { //#3693
            var _o = $k[--$j]; //#3693
            var _p = $k[--$j]; //#3693
            $put(_p, _o, $f($get(_k, _l) + 48)); //#3693
            $k[$j++] = _p; //#3693
            $k[$j++] = $f(_o + 1); //#3693
        } //#3693
        $j--; //#3693
    }; //#3693
    $_.right = function() {
        if ($_.dir != 1) { //#3696
            $k[$j++] = $_.x; //#3696
            $k[$j++] = $_.y; //#3696
            $k[$j++] = $_.dir; //#3696
            $_.cput(); //#3696
            $k[$j++] = $a([$_.x, $_.y]); //#3696
        } //#3696
        $_.x = $_.x + 1; //#3696
        $_.dir = 1; //#3696
    }; //#3696
    $_.down = function() {
        if ($_.dir != 2) { //#3697
            $k[$j++] = $_.x; //#3697
            $k[$j++] = $_.y; //#3697
            $k[$j++] = $_.dir; //#3697
            $_.cput(); //#3697
            $k[$j++] = $a([$_.x, $_.y]); //#3697
        } //#3697
        $_.y = $_.y + 1; //#3697
        $_.dir = 2; //#3697
    }; //#3697
    $_.left = function() {
        if ($_.dir != 4) { //#3698
            $k[$j++] = $_.x; //#3698
            $k[$j++] = $_.y; //#3698
            $k[$j++] = $_.dir; //#3698
            $_.cput(); //#3698
            $k[$j++] = $a([$_.x, $_.y]); //#3698
        } //#3698
        $_.x = $_.x - 1; //#3698
        $_.dir = 4; //#3698
    }; //#3698
    $_.up = function() {
        if ($_.dir != 8) { //#3699
            $k[$j++] = $_.x; //#3699
            $k[$j++] = $_.y; //#3699
            $k[$j++] = $_.dir; //#3699
            $_.cput(); //#3699
            $k[$j++] = $a([$_.x, $_.y]); //#3699
        } //#3699
        $_.y = $_.y - 1; //#3699
        $_.dir = 8; //#3699
    }; //#3699
    $_.trace = function() {
        $_.y = $k[--$j]; //#3703
        $_.x = $k[--$j]; //#3703
        $k[$j++] = 'dir'; //#3705
        $k[$j++] = $f($_.x + 1); //#3705
        $k[$j++] = $f($_.y + 1); //#3705
        $_.xyget(); //#3705
        var _1R = ($k[--$j] == 1) ? 8 : 4; //#3705
        $_[$k[--$j]] = _1R; //#3705
        $_.sx = $_.x; //#3706
        $_.sy = $_.y; //#3706
        $_.sdir = $_.dir; //#3706
        $k[$j++] = Infinity; //#3710
        for (;;) { //#3724
            $k[$j++] = $_.x; //#3711
            $k[$j++] = $_.y; //#3711
            $_.abcd(); //#3711
            for (var _1Y = 0, _1Z = 1; _1Y < _1Z; _1Y++) { //#3722
                var _1a = $k[--$j]; //#3713
                $k[$j++] = _1a; //#3713
                if ($eq(_1a, "0001") || ($eq(_1a, "0011") || $eq(_1a, "1011"))) { //#3713
                    $j--; //#3713
                    $_.right(); //#3713
                    break; //#3713
                } //#3713
                var _1b = $k[--$j]; //#3714
                $k[$j++] = _1b; //#3714
                if ($eq(_1b, "0010") || ($eq(_1b, "1010") || $eq(_1b, "1110"))) { //#3714
                    $j--; //#3714
                    $_.down(); //#3714
                    break; //#3714
                } //#3714
                var _1c = $k[--$j]; //#3715
                $k[$j++] = _1c; //#3715
                if ($eq(_1c, "1000") || ($eq(_1c, "1100") || $eq(_1c, "1101"))) { //#3715
                    $j--; //#3715
                    $_.left(); //#3715
                    break; //#3715
                } //#3715
                var _1d = $k[--$j]; //#3716
                $k[$j++] = _1d; //#3716
                if ($eq(_1d, "0100") || ($eq(_1d, "0101") || $eq(_1d, "0111"))) { //#3716
                    $j--; //#3716
                    $_.up(); //#3716
                    break; //#3716
                } //#3716
                var _1e = $k[--$j]; //#3717
                $k[$j++] = _1e; //#3721
                if ($eq(_1e, "1001")) { //#3720
                    if ($_.dir == 2) { //#3718
                        $j--; //#3718
                        $_.left(); //#3718
                        break; //#3718
                    } else { //#3718
                        $j--; //#3718
                        $_.right(); //#3718
                        break; //#3718
                    } //#3718
                } else { //#3720
                    if ($_.dir == 1) { //#3720
                        $j--; //#3720
                        $_.down(); //#3720
                        break; //#3720
                    } else { //#3720
                        $j--; //#3720
                        $_.up(); //#3720
                        break; //#3720
                    } //#3720
                } //#3720
            } //#3720
            if (($eq($_.x, $_.sx) && $eq($_.y, $_.sy)) && ($_.dir == $_.sdir)) { //#3723
                break; //#3723
            } //#3723
        } //#3723
        $astore($a($counttomark())); //#3725
        var _1p = $k[--$j]; //#3725
        var _1q = $k[--$j]; //#3725
        $k[$j++] = _1p; //#3725
        $k[$j++] = _1q; //#3725
        $j--; //#3725
    }; //#3725
    $_.drawlayer = function() {
        $_.pixsorig = $_.pixs; //#3751
        $_.pixs = $k[--$j]; //#3752
        $k[$j++] = Infinity; //#3755
        for (var _1u = 0, _1v = $_.pixx + 2; _1u < _1v; _1u++) { //#3756
            $k[$j++] = 0; //#3756
        } //#3756
        for (var _1z = 0, _20 = $_.pixx, _1y = $_.pixs.length - 1; _20 < 0 ? _1z >= _1y : _1z <= _1y; _1z += _20) { //#3761
            $k[$j++] = 0; //#3759
            $aload($geti($_.pixs, _1z, $_.pixx)); //#3759
            $k[$j++] = 0; //#3760
        } //#3760
        for (var _25 = 0, _26 = $_.pixx + 2; _25 < _26; _25++) { //#3762
            $k[$j++] = 0; //#3762
        } //#3762
        $_.pixs = $a(); //#3762
        $_.pixx = $_.pixx + 2; //#3764
        $_.pixy = $_.pixy + 2; //#3765
        $k[$j++] = Infinity; //#3768
        for (var _2B = 0, _2C = $_.pixs.length; _2B < _2C; _2B++) { //#3768
            $k[$j++] = 0; //#3768
        } //#3768
        $_.cache = $a(); //#3768
        $k[$j++] = Infinity; //#3771
        for (var _2G = 0, _2F = $_.pixy - 2; _2G <= _2F; _2G += 1) { //#3788
            $_.j = _2G; //#3773
            for (var _2J = 0, _2I = $_.pixx - 2; _2J <= _2I; _2J += 1) { //#3787
                $_.i = _2J; //#3775
                $k[$j++] = 'k'; //#3776
                $k[$j++] = $_.i; //#3776
                $k[$j++] = $_.j; //#3776
                $_.abcd(); //#3776
                var _2M = $k[--$j]; //#3776
                $_[$k[--$j]] = _2M; //#3776
                if ($eq($_.k, "0001") || $eq($_.k, "1001")) { //#3781
                    $k[$j++] = 8; //#3778
                    $k[$j++] = $_.i; //#3778
                    $k[$j++] = $_.j; //#3778
                    $_.cget(); //#3778
                    if ($k[--$j] == 0) { //#3780
                        $k[$j++] = $_.i; //#3779
                        $k[$j++] = $_.j; //#3779
                        $_.trace(); //#3779
                    } //#3779
                } //#3779
                if ($eq($_.k, "1110")) { //#3786
                    $k[$j++] = 4; //#3783
                    $k[$j++] = $_.i; //#3783
                    $k[$j++] = $_.j; //#3783
                    $_.cget(); //#3783
                    if ($k[--$j] == 0) { //#3785
                        $k[$j++] = $_.i; //#3784
                        $k[$j++] = $_.j; //#3784
                        $_.trace(); //#3784
                    } //#3784
                } //#3784
            } //#3784
        } //#3784
        $_.paths = $a(); //#3784
        $_.pixx = $_.pixx - 2; //#3792
        $_.pixy = $_.pixy - 2; //#3793
        $$.newpath(); //#3796
        var _2e = $_.paths; //#3797
        for (var _2f = 0, _2g = _2e.length; _2f < _2g; _2f++) { //#3815
            $_.p = $get(_2e, _2f); //#3798
            $_.len = $_.p.length; //#3799
            $aload($get($_.p, $_.len - 1)); //#3800
            $aload($get($_.p, 0)); //#3801
            for (var _2q = 0, _2p = $_.len - 1; _2q <= _2p; _2q += 1) { //#3812
                $_.i = _2q; //#3803
                $aload($get($_.p, ($_.i + 1) % $_.len)); //#3804
                var _2v = $k[--$j]; //#3804
                var _2w = $k[--$j]; //#3804
                var _2x = $k[--$j]; //#3804
                var _2y = $k[--$j]; //#3804
                var _2z = $k[--$j]; //#3804
                var _30 = $k[--$j]; //#3804
                $k[$j++] = _2y; //#3806
                $k[$j++] = _2x; //#3806
                $k[$j++] = _2w; //#3806
                $k[$j++] = _2v; //#3806
                $k[$j++] = _30; //#3806
                $k[$j++] = _2y; //#3806
                $k[$j++] = $_.inkspreadh; //#3806
                if ($lt(_2v, _2z)) { //#3806
                    var _32 = $k[--$j]; //#3806
                    var _33 = $k[--$j]; //#3806
                    $k[$j++] = $f(_33 + _32); //#3806
                } else { //#3806
                    var _34 = $k[--$j]; //#3806
                    var _35 = $k[--$j]; //#3806
                    $k[$j++] = $f(_35 - _34); //#3806
                } //#3806
                var _36 = $k[--$j]; //#3807
                var _37 = $k[--$j]; //#3807
                var _38 = $k[--$j]; //#3807
                var _39 = $k[--$j]; //#3807
                var _3A = $k[--$j]; //#3808
                $k[$j++] = _3A; //#3809
                $k[$j++] = _36; //#3809
                $k[$j++] = _39; //#3809
                $k[$j++] = _38; //#3809
                $k[$j++] = _3A; //#3809
                $k[$j++] = $_.inkspreadv; //#3809
                if ($gt(_39, _37)) { //#3809
                    var _3C = $k[--$j]; //#3809
                    var _3D = $k[--$j]; //#3809
                    $k[$j++] = $f(_3D + _3C); //#3809
                } else { //#3809
                    var _3E = $k[--$j]; //#3809
                    var _3F = $k[--$j]; //#3809
                    $k[$j++] = $f(_3F - _3E); //#3809
                } //#3809
                var _3G = $k[--$j]; //#3810
                var _3H = $k[--$j]; //#3810
                var _3I = $k[--$j]; //#3810
                var _3J = $k[--$j]; //#3810
                $k[$j++] = _3I; //#3811
                $k[$j++] = _3H; //#3811
                $k[$j++] = _3J; //#3811
                $k[$j++] = $f($_.pixy - _3G); //#3811
                if ($_.i == 0) { //#3811
                    var _3M = $k[--$j]; //#3811
                    $$.moveto($k[--$j], _3M); //#3811
                } else { //#3811
                    var _3O = $k[--$j]; //#3811
                    $$.lineto($k[--$j], _3O); //#3811
                } //#3811
            } //#3811
            $$.closepath(); //#3813
            $j -= 4; //#3814
        } //#3814
        $$.fill(); //#3816
        $_.pixs = $_.pixsorig; //#3818
    }; //#3818
    $_.drawlayerdots = function() {
        $_.pixsorig = $_.pixs; //#3824
        $_.pixs = $k[--$j]; //#3825
        $$.newpath(); //#3827
        for (var _3V = 0, _3U = $_.pixs.length - 1; _3V <= _3U; _3V += 1) { //#3835
            $_.x = _3V % $_.pixx; //#3829
            $_.y = ~~(_3V / $_.pixx); //#3830
            $k[$j++] = $_.x; //#3831
            $k[$j++] = $_.y; //#3831
            $_.xyget(); //#3831
            if ($k[--$j] == 1) { //#3834
                $$.moveto($f($_.x + 0.5), $f(($_.pixy - $_.y) - 0.5)); //#3832
                $$.arc($f($_.x + 0.5), $f(($_.pixy - $_.y) - 0.5), $f(0.5 - $_.inkspread), 0, 360, 1); //#3833
            } //#3833
        } //#3833
        $$.fill(); //#3836
        $_.pixs = $_.pixsorig; //#3838
    }; //#3838
    $$.save(); //#3842
    var _3j = $$.currpos(); //#3844
    $$.translate(_3j.x, _3j.y); //#3844
    $_.inkspread = $_.inkspread / 2; //#3846
    $_.inkspreadh = $_.inkspreadh / 2; //#3847
    $_.inkspreadv = $_.inkspreadv / 2; //#3848
    $$.scale(($_.width / $_.pixx) * 72, ($_.height / $_.pixy) * 72); //#3851
    $_.tl = $a([-($f($_.borderleft + ($_.borderwidth / 2))), $f(($_.pixy + $_.bordertop) + ($_.borderwidth / 2))]); //#3854
    $_.tr = $a([$f(($_.pixx + $_.borderright) + ($_.borderwidth / 2)), $f(($_.pixy + $_.bordertop) + ($_.borderwidth / 2))]); //#3855
    $_.bl = $a([-($f($_.borderleft + ($_.borderwidth / 2))), -($f($_.borderbottom + ($_.borderwidth / 2)))]); //#3856
    $_.br = $a([$f(($_.pixx + $_.borderright) + ($_.borderwidth / 2)), -($f($_.borderbottom + ($_.borderwidth / 2)))]); //#3857
    if ($ne($_.backgroundcolor, "unset")) { //#3863
        $$.save(); //#3859
        $$.newpath(); //#3860
        $aload($_.bl); //#3860
        var _4H = $k[--$j]; //#3860
        $$.moveto($k[--$j], _4H); //#3860
        var _4M = $a([$_.br, $_.tr, $_.tl]); //#3860
        for (var _4N = 0, _4O = _4M.length; _4N < _4O; _4N++) { //#3860
            $aload($get(_4M, _4N)); //#3860
            var _4Q = $k[--$j]; //#3860
            $$.lineto($k[--$j], _4Q); //#3860
        } //#3860
        $$.closepath(); //#3860
        $$.setcolor($_.backgroundcolor); //#3861
        $$.fill(); //#3861
        $$.restore(); //#3862
    } //#3862
    if ($_.showborder) { //#3870
        $$.save(); //#3865
        $$.newpath(); //#3866
        $aload($_.bl); //#3866
        var _4V = $k[--$j]; //#3866
        $$.moveto($k[--$j], _4V); //#3866
        var _4a = $a([$_.br, $_.tr, $_.tl]); //#3866
        for (var _4b = 0, _4c = _4a.length; _4b < _4c; _4b++) { //#3866
            $aload($get(_4a, _4b)); //#3866
            var _4e = $k[--$j]; //#3866
            $$.lineto($k[--$j], _4e); //#3866
        } //#3866
        $$.closepath(); //#3866
        if ($ne($_.bordercolor, "unset")) { //#3867
            $$.setcolor($_.bordercolor); //#3867
        } //#3867
        $$.setlinewidth($f($_.borderwidth - ($_.inkspread * 2))); //#3868
        $$.stroke(); //#3868
        $$.restore(); //#3869
    } //#3869
    if ($eq($_.colormap, "unset")) { //#3875
        var _4m = new Map([
            [1, $_.barcolor]
        ]); //#3874
        $_.colormap = _4m; //#3874
    } //#3874
    var _4n = $_.colormap; //#3877
    for (var _4s = _4n.size, _4r = _4n.keys(), _4q = 0; _4q < _4s; _4q++) { //#3883
        var _4o = _4r.next().value; //#3883
        var _4p = _4n.get(_4o); //#3883
        $k[$j++] = _4o; //#3878
        $k[$j++] = _4p; //#3878
        if ($ne(_4p, "unset")) { //#3878
            $$.setcolor($k[--$j]); //#3878
        } else { //#3878
            $j--; //#3878
        } //#3878
        $_.key = $k[--$j]; //#3879
        $k[$j++] = Infinity; //#3880
        var _4v = $_.pixs; //#3881
        for (var _4w = 0, _4x = _4v.length; _4w < _4x; _4w++) { //#3881
            var _50 = $eq($get(_4v, _4w), $_.key) ? 1 : 0; //#3881
            $k[$j++] = _50; //#3881
        } //#3881
        var _51 = $a(); //#3881
        $k[$j++] = _51; //#3882
        if ($_.dotty) { //#3882
            $_.drawlayerdots(); //#3882
        } else { //#3882
            $_.drawlayer(); //#3882
        } //#3882
    } //#3882
    if ($ne($_.textcolor, "unset")) { //#3886
        $$.setcolor($_.textcolor); //#3886
    } //#3886
    if ($_.includetext) { //#3947
        if (($eq($_.textxalign, "unset") && $eq($_.textyalign, "unset")) && $eq($_.alttext, "")) { //#3945
            $_.s = 0; //#3889
            $_.fn = ""; //#3889
            var _59 = $_.txt; //#3890
            for (var _5A = 0, _5B = _59.length; _5A < _5B; _5A++) { //#3903
                $forall($get(_59, _5A)); //#3891
                var _5D = $k[--$j]; //#3892
                var _5E = $k[--$j]; //#3892
                $k[$j++] = _5E; //#3901
                $k[$j++] = _5D; //#3901
                if ((_5D != $_.s) || $ne(_5E, $_.fn)) { //#3900
                    var _5H = $k[--$j]; //#3893
                    $k[$j++] = _5H; //#3896
                    if (_5H <= 0) { //#3896
                        $j -= 5; //#3894
                        $k[$j++] = 'bwipp.renmatrixFontTooSmall#3895'; //#3895
                        $k[$j++] = "The font size is too small"; //#3895
                        bwipp_raiseerror(); //#3895
                    } //#3895
                    var _5I = $k[--$j]; //#3897
                    var _5J = $k[--$j]; //#3897
                    $_.s = _5I; //#3897
                    $_.fn = _5J; //#3897
                    $$.selectfont(_5J, _5I); //#3898
                } else { //#3900
                    $j -= 2; //#3900
                } //#3900
                var _5K = $k[--$j]; //#3902
                $$.moveto($k[--$j], _5K); //#3902
                $$.show($k[--$j], 0, 0); //#3902
            } //#3902
        } else { //#3945
            $$.selectfont($_.textfont, $_.textsize); //#3905
            if ($eq($_.alttext, "")) { //#3911
                $k[$j++] = Infinity; //#3907
                var _5Q = $_.txt; //#3907
                for (var _5R = 0, _5S = _5Q.length; _5R < _5S; _5R++) { //#3907
                    $forall($get($get(_5Q, _5R), 0)); //#3907
                } //#3907
                $_.txt = $a(); //#3907
                $_.tstr = $s($_.txt.length); //#3908
                for (var _5a = 0, _5Z = $_.txt.length - 1; _5a <= _5Z; _5a += 1) { //#3909
                    $put($_.tstr, _5a, $get($_.txt, _5a)); //#3909
                } //#3909
            } else { //#3911
                $_.tstr = $_.alttext; //#3911
            } //#3911
            if ($_.tstr.length == 0) { //#3921
                $k[$j++] = 0; //#3916
            } else { //#3921
                $$.save(); //#3918
                $$.newpath(); //#3919
                $$.moveto(0, 0); //#3919
                $$.charpath("0", false); //#3919
                var _5g = $$.pathbbox(); //#3919
                $$.restore(); //#3921
                $k[$j++] = _5g.ury; //#3921
            } //#3921
            $_.textascent = $k[--$j]; //#3930
            var _5j = $$.stringwidth($_.tstr); //#3931
            $_.textwidth = $f(_5j.w + (($_.tstr.length - 1) * $_.textgaps)); //#3931
            $_.textxpos = $f($_.textxoffset + ($f($_.pixx - $_.textwidth) / 2)); //#3933
            if ($eq($_.textxalign, "left")) { //#3934
                $_.textxpos = $_.textxoffset; //#3934
            } //#3934
            if ($eq($_.textxalign, "right")) { //#3935
                $_.textxpos = $f(($_.pixx - $_.textxoffset) - $_.textwidth); //#3935
            } //#3935
            if ($eq($_.textxalign, "offleft")) { //#3936
                $_.textxpos = -$f($_.textwidth + $_.textxoffset); //#3936
            } //#3936
            if ($eq($_.textxalign, "offright")) { //#3937
                $_.textxpos = $_.pixx + $_.textxoffset; //#3937
            } //#3937
            if ($eq($_.textxalign, "justify") && ($_.textwidth < $_.pixx)) { //#3941
                $_.textxpos = 0; //#3939
                $_.textgaps = $f($_.pixx - $_.textwidth) / ($_.tstr.length - 1); //#3940
            } //#3940
            $_.textypos = -($f($f($_.textyoffset + $_.textascent) + 1)); //#3942
            if ($eq($_.textyalign, "above")) { //#3943
                $_.textypos = ($_.textyoffset + $_.pixy) + 1; //#3943
            } //#3943
            if ($eq($_.textyalign, "center")) { //#3944
                $_.textypos = $f($_.textyoffset + ($f($_.pixy - $_.textascent) / 2)); //#3944
            } //#3944
            $$.moveto($_.textxpos, $_.textypos); //#3945
            $$.show($_.tstr, $_.textgaps, 0); //#3945
        } //#3945
    } //#3945
    $$.restore(); //#3949
    $_ = Object.getPrototypeOf($_); //#3951
} //bwipp_renmatrix
function bwipp_ean5() {
    $_ = Object.create($_); //#4099
    $_.dontdraw = false; //#4102
    $_.includetext = false; //#4103
    $_.textfont = "OCR-B"; //#4104
    $_.textsize = 12; //#4105
    $_.textxoffset = 0; //#4106
    $_.textyoffset = null; //#4107
    $_.height = 0.7; //#4108
    $k[$j++] = $_; //#4110
    bwipp_processoptions(); //#4110
    $_.options = $k[--$j]; //#4110
    $_.barcode = $k[--$j]; //#4111
    if ($eq($_.textyoffset, null)) { //#4115
        $_.textyoffset = $f(($_.height * 72) + 1); //#4114
    } //#4114
    bwipp_loadctx(bwipp_ean5) //#4117
    if ($_.barcode.length != 5) { //#4122
        $k[$j++] = 'bwipp.ean5badLength#4121'; //#4121
        $k[$j++] = "EAN-5 add-on must be 5 digits"; //#4121
        bwipp_raiseerror(); //#4121
    } //#4121
    $forall($_.barcode, function() { //#4127
        var _6 = $k[--$j]; //#4124
        if ((_6 < 48) || (_6 > 57)) { //#4126
            $k[$j++] = 'bwipp.ean5badCharacter#4125'; //#4125
            $k[$j++] = "EAN-5 add-on must contain only digits"; //#4125
            bwipp_raiseerror(); //#4125
        } //#4125
    }); //#4125
    if (!bwipp_ean5.__4145__) { //#4145
        $_ = Object.create($_); //#4145
        $_.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "112", "11"]); //#4135
        $_.barchars = "0123456789"; //#4138
        $_.mirrormaps = $a(["11000", "10100", "10010", "10001", "01100", "00110", "00011", "01010", "01001", "00101"]); //#4144
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_ean5.$ctx[id] = $_[id]); //#4144
        bwipp_ean5.__4145__ = 1; //#4144
        $_ = Object.getPrototypeOf($_); //#4144
    } //#4144
    $_.checksum = 0; //#4147
    for (var _A = 0; _A <= 4; _A += 1) { //#4156
        $_.i = _A; //#4149
        $_.barchar = $f($get($_.barcode, $_.i) - 48); //#4150
        if (($_.i % 2) == 0) { //#4154
            $_.checksum = $f(($_.barchar * 3) + $_.checksum); //#4152
        } else { //#4154
            $_.checksum = $f(($_.barchar * 9) + $_.checksum); //#4154
        } //#4154
    } //#4154
    $_.checksum = $_.checksum % 10; //#4157
    $_.mirrormap = $get($_.mirrormaps, $_.checksum); //#4158
    $_.sbs = $s(31); //#4160
    $_.txt = $a(5); //#4161
    for (var _P = 0; _P <= 4; _P += 1) { //#4191
        $_.i = _P; //#4164
        if ($_.i == 0) { //#4170
            $puti($_.sbs, 0, $get($_.encs, 10)); //#4168
        } else { //#4170
            $puti($_.sbs, (($_.i - 1) * 6) + 7, $get($_.encs, 11)); //#4170
        } //#4170
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#4174
        $j--; //#4175
        $_.indx = $k[--$j].length; //#4176
        $j -= 2; //#4177
        $_.enc = $get($_.encs, $_.indx); //#4178
        if ($get($_.mirrormap, $_.i) == 49) { //#4188
            $_.enclen = $_.enc.length; //#4180
            $_.revenc = $s($_.enclen); //#4181
            for (var _o = 0, _n = $_.enclen - 1; _o <= _n; _o += 1) { //#4186
                $_.j = _o; //#4183
                $_.char = $get($_.enc, $_.j); //#4184
                $put($_.revenc, ($_.enclen - $_.j) - 1, $_.char); //#4185
            } //#4185
            $_.enc = $_.revenc; //#4187
        } //#4187
        $puti($_.sbs, ($_.i * 6) + 3, $_.enc); //#4189
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ((($_.i - 1) * 9) + 10) + $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])); //#4190
    } //#4190
    $k[$j++] = Infinity; //#4194
    $k[$j++] = Infinity; //#4196
    var _1B = $_.sbs; //#4196
    for (var _1C = 0, _1D = _1B.length; _1C < _1D; _1C++) { //#4196
        $k[$j++] = $get(_1B, _1C) - 48; //#4196
    } //#4196
    var _1F = $a(); //#4196
    $k[$j++] = Infinity; //#4197
    for (var _1G = 0, _1H = 16; _1G < _1H; _1G++) { //#4197
        $k[$j++] = $_.height; //#4197
    } //#4197
    var _1J = $a(); //#4197
    $k[$j++] = Infinity; //#4198
    for (var _1K = 0, _1L = 16; _1K < _1L; _1K++) { //#4198
        $k[$j++] = 0; //#4198
    } //#4198
    var _1M = $a(); //#4198
    $k[$j++] = 'ren'; //#4201
    $k[$j++] = bwipp_renlinear; //#4201
    $k[$j++] = 'sbs'; //#4201
    $k[$j++] = _1F; //#4201
    $k[$j++] = 'bhs'; //#4201
    $k[$j++] = _1J; //#4201
    $k[$j++] = 'bbs'; //#4201
    $k[$j++] = _1M; //#4201
    if ($_.includetext) { //#4201
        $k[$j++] = 'txt'; //#4200
        $k[$j++] = $_.txt; //#4200
    } //#4200
    $k[$j++] = 'opt'; //#4207
    $k[$j++] = $_.options; //#4207
    $k[$j++] = 'guardrightpos'; //#4207
    $k[$j++] = 5; //#4207
    $k[$j++] = 'guardrightypos'; //#4207
    $k[$j++] = $f($_.textyoffset + 4); //#4207
    $k[$j++] = 'borderleft'; //#4207
    $k[$j++] = 12; //#4207
    $k[$j++] = 'borderright'; //#4207
    $k[$j++] = 5; //#4207
    $k[$j++] = 'bordertop'; //#4207
    $k[$j++] = 10; //#4207
    var _1R = $d(); //#4207
    $k[$j++] = _1R; //#4210
    if (!$_.dontdraw) { //#4210
        bwipp_renlinear(); //#4210
    } //#4210
    $_ = Object.getPrototypeOf($_); //#4212
    $_ = Object.getPrototypeOf($_); //#4214
} //bwipp_ean5
function bwipp_ean2() {
    $_ = Object.create($_); //#4244
    $_.dontdraw = false; //#4247
    $_.includetext = false; //#4248
    $_.textfont = "OCR-B"; //#4249
    $_.textsize = 12; //#4250
    $_.textxoffset = 0; //#4251
    $_.textyoffset = null; //#4252
    $_.height = 0.7; //#4253
    $k[$j++] = $_; //#4255
    bwipp_processoptions(); //#4255
    $_.options = $k[--$j]; //#4255
    $_.barcode = $k[--$j]; //#4256
    if ($eq($_.textyoffset, null)) { //#4260
        $_.textyoffset = $f(($_.height * 72) + 1); //#4259
    } //#4259
    bwipp_loadctx(bwipp_ean2) //#4262
    if ($_.barcode.length != 2) { //#4267
        $k[$j++] = 'bwipp.ean2badLength#4266'; //#4266
        $k[$j++] = "EAN-2 add-on must be 2 digits"; //#4266
        bwipp_raiseerror(); //#4266
    } //#4266
    $forall($_.barcode, function() { //#4272
        var _6 = $k[--$j]; //#4269
        if ((_6 < 48) || (_6 > 57)) { //#4271
            $k[$j++] = 'bwipp.ean2badCharacter#4270'; //#4270
            $k[$j++] = "EAN-2 add-on must contain only digits"; //#4270
            bwipp_raiseerror(); //#4270
        } //#4270
    }); //#4270
    if (!bwipp_ean2.__4287__) { //#4287
        $_ = Object.create($_); //#4287
        $_.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "112", "11"]); //#4280
        $_.barchars = "0123456789"; //#4283
        $_.mirrormaps = $a(["00", "01", "10", "11"]); //#4286
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_ean2.$ctx[id] = $_[id]); //#4286
        bwipp_ean2.__4287__ = 1; //#4286
        $_ = Object.getPrototypeOf($_); //#4286
    } //#4286
    $_.mirrormap = $get($_.mirrormaps, $cvi($geti($_.barcode, 0, 2)) % 4); //#4289
    $_.sbs = $s(13); //#4291
    $_.txt = $a(2); //#4292
    for (var _G = 0; _G <= 1; _G += 1) { //#4322
        $_.i = _G; //#4295
        if ($_.i == 0) { //#4301
            $puti($_.sbs, 0, $get($_.encs, 10)); //#4299
        } else { //#4301
            $puti($_.sbs, (($_.i - 1) * 6) + 7, $get($_.encs, 11)); //#4301
        } //#4301
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#4305
        $j--; //#4306
        $_.indx = $k[--$j].length; //#4307
        $j -= 2; //#4308
        $_.enc = $get($_.encs, $_.indx); //#4309
        if ($get($_.mirrormap, $_.i) == 49) { //#4319
            $_.enclen = $_.enc.length; //#4311
            $_.revenc = $s($_.enclen); //#4312
            for (var _f = 0, _e = $_.enclen - 1; _f <= _e; _f += 1) { //#4317
                $_.j = _f; //#4314
                $_.char = $get($_.enc, $_.j); //#4315
                $put($_.revenc, ($_.enclen - $_.j) - 1, $_.char); //#4316
            } //#4316
            $_.enc = $_.revenc; //#4318
        } //#4318
        $puti($_.sbs, ($_.i * 6) + 3, $_.enc); //#4320
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ((($_.i - 1) * 9) + 10) + $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])); //#4321
    } //#4321
    $k[$j++] = Infinity; //#4325
    $k[$j++] = Infinity; //#4327
    var _12 = $_.sbs; //#4327
    for (var _13 = 0, _14 = _12.length; _13 < _14; _13++) { //#4327
        $k[$j++] = $get(_12, _13) - 48; //#4327
    } //#4327
    var _16 = $a(); //#4327
    $k[$j++] = Infinity; //#4328
    for (var _17 = 0, _18 = 12; _17 < _18; _17++) { //#4328
        $k[$j++] = $_.height; //#4328
    } //#4328
    var _1A = $a(); //#4328
    $k[$j++] = Infinity; //#4329
    for (var _1B = 0, _1C = 12; _1B < _1C; _1B++) { //#4329
        $k[$j++] = 0; //#4329
    } //#4329
    var _1D = $a(); //#4329
    $k[$j++] = 'ren'; //#4332
    $k[$j++] = bwipp_renlinear; //#4332
    $k[$j++] = 'sbs'; //#4332
    $k[$j++] = _16; //#4332
    $k[$j++] = 'bhs'; //#4332
    $k[$j++] = _1A; //#4332
    $k[$j++] = 'bbs'; //#4332
    $k[$j++] = _1D; //#4332
    if ($_.includetext) { //#4332
        $k[$j++] = 'txt'; //#4331
        $k[$j++] = $_.txt; //#4331
    } //#4331
    $k[$j++] = 'opt'; //#4338
    $k[$j++] = $_.options; //#4338
    $k[$j++] = 'guardrightpos'; //#4338
    $k[$j++] = 5; //#4338
    $k[$j++] = 'guardrightypos'; //#4338
    $k[$j++] = $f($_.textyoffset + 4); //#4338
    $k[$j++] = 'borderleft'; //#4338
    $k[$j++] = 12; //#4338
    $k[$j++] = 'borderright'; //#4338
    $k[$j++] = 5; //#4338
    $k[$j++] = 'bordertop'; //#4338
    $k[$j++] = 10; //#4338
    var _1I = $d(); //#4338
    $k[$j++] = _1I; //#4341
    if (!$_.dontdraw) { //#4341
        bwipp_renlinear(); //#4341
    } //#4341
    $_ = Object.getPrototypeOf($_); //#4343
    $_ = Object.getPrototypeOf($_); //#4345
} //bwipp_ean2
function bwipp_ean13() {
    $_ = Object.create($_); //#4377
    $_.dontdraw = false; //#4380
    $_.includetext = false; //#4381
    $_.textfont = "OCR-B"; //#4382
    $_.textsize = 12; //#4383
    $_.textxoffset = -11; //#4384
    $_.textyoffset = -4; //#4385
    $_.height = 1; //#4386
    $_.addongap = 12; //#4387
    $_.addontextfont = "unset"; //#4388
    $_.addontextsize = null; //#4389
    $_.addontextxoffset = null; //#4390
    $_.addontextyoffset = null; //#4391
    $k[$j++] = $_; //#4393
    bwipp_processoptions(); //#4393
    $_.options = $k[--$j]; //#4393
    $_.barcode = $k[--$j]; //#4394
    bwipp_loadctx(bwipp_ean13) //#4396
    $search($_.barcode, " "); //#4399
    if ($k[--$j]) { //#4405
        $_.barcode = $k[--$j]; //#4400
        $j--; //#4401
        $_.addon = $k[--$j]; //#4402
    } else { //#4405
        $j--; //#4404
        $_.addon = ""; //#4405
    } //#4405
    if (($_.barcode.length != 12) && ($_.barcode.length != 13)) { //#4411
        $k[$j++] = 'bwipp.ean13badLength#4410'; //#4410
        $k[$j++] = "EAN-13 must be 12 or 13 digits"; //#4410
        bwipp_raiseerror(); //#4410
    } //#4410
    $forall($_.barcode, function() { //#4416
        var _9 = $k[--$j]; //#4413
        if ((_9 < 48) || (_9 > 57)) { //#4415
            $k[$j++] = 'bwipp.ean13badCharacter#4414'; //#4414
            $k[$j++] = "EAN-13 must contain only digits"; //#4414
            bwipp_raiseerror(); //#4414
        } //#4414
    }); //#4414
    if ((($_.addon.length != 0) && ($_.addon.length != 2)) && ($_.addon.length != 5)) { //#4419
        $k[$j++] = 'bwipp.ean13badAddOnLength#4418'; //#4418
        $k[$j++] = "Add-on for EAN-13 must be 2 or 5 digits"; //#4418
        bwipp_raiseerror(); //#4418
    } //#4418
    $_.pad = $s(13); //#4422
    $_.checksum = 0; //#4423
    for (var _E = 0; _E <= 11; _E += 1) { //#4432
        $_.i = _E; //#4425
        $_.barchar = $f($get($_.barcode, $_.i) - 48); //#4426
        if (($_.i % 2) == 0) { //#4430
            $_.checksum = $f($_.barchar + $_.checksum); //#4428
        } else { //#4430
            $_.checksum = $f(($_.barchar * 3) + $_.checksum); //#4430
        } //#4430
    } //#4430
    $_.checksum = ($f(10 - ($_.checksum % 10))) % 10; //#4433
    if ($_.barcode.length == 13) { //#4438
        if ($get($_.barcode, 12) != $f($_.checksum + 48)) { //#4437
            $k[$j++] = 'bwipp.ean13badCheckDigit#4436'; //#4436
            $k[$j++] = "Incorrect EAN-13 check digit provided"; //#4436
            bwipp_raiseerror(); //#4436
        } //#4436
    } //#4436
    $puti($_.pad, 0, $_.barcode); //#4439
    $put($_.pad, 12, $f($_.checksum + 48)); //#4440
    $_.barcode = $_.pad; //#4441
    if (!bwipp_ean13.__4459__) { //#4459
        $_ = Object.create($_); //#4459
        $_.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "111", "11111", "111"]); //#4449
        $_.barchars = "0123456789"; //#4452
        $_.mirrormaps = $a(["000000", "001011", "001101", "001110", "010011", "011001", "011100", "010101", "010110", "011010"]); //#4458
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_ean13.$ctx[id] = $_[id]); //#4458
        bwipp_ean13.__4459__ = 1; //#4458
        $_ = Object.getPrototypeOf($_); //#4458
    } //#4458
    $_.sbs = $s(59); //#4461
    $_.txt = $a(13); //#4462
    $puti($_.sbs, 0, $get($_.encs, 10)); //#4465
    $_.mirrormap = $get($_.mirrormaps, $get($_.barcode, 0) - 48); //#4468
    $put($_.txt, 0, $a([$geti($_.barcode, 0, 1), $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])); //#4469
    for (var _r = 1; _r <= 6; _r += 1) { //#4492
        $_.i = _r; //#4474
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#4475
        $j--; //#4476
        $_.indx = $k[--$j].length; //#4477
        $j -= 2; //#4478
        $_.enc = $get($_.encs, $_.indx); //#4479
        if ($get($_.mirrormap, $_.i - 1) == 49) { //#4489
            $_.enclen = $_.enc.length; //#4481
            $_.revenc = $s($_.enclen); //#4482
            for (var _18 = 0, _17 = $_.enclen - 1; _18 <= _17; _18 += 1) { //#4487
                $_.j = _18; //#4484
                $_.char = $get($_.enc, $_.j); //#4485
                $put($_.revenc, ($_.enclen - $_.j) - 1, $_.char); //#4486
            } //#4486
            $_.enc = $_.revenc; //#4488
        } //#4488
        $puti($_.sbs, (($_.i - 1) * 4) + 3, $_.enc); //#4490
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ((($_.i - 1) * 7) + 15) + $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])); //#4491
    } //#4491
    $puti($_.sbs, ((7 - 1) * 4) + 3, $get($_.encs, 11)); //#4495
    for (var _1Y = 7; _1Y <= 12; _1Y += 1) { //#4508
        $_.i = _1Y; //#4500
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#4501
        $j--; //#4502
        $_.indx = $k[--$j].length; //#4503
        $j -= 2; //#4504
        $_.enc = $get($_.encs, $_.indx); //#4505
        $puti($_.sbs, (($_.i - 1) * 4) + 8, $_.enc); //#4506
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ((($_.i - 1) * 7) + 19) + $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])); //#4507
    } //#4507
    $puti($_.sbs, 56, $get($_.encs, 12)); //#4511
    $k[$j++] = Infinity; //#4513
    var _1y = $_.sbs; //#4513
    for (var _1z = 0, _20 = _1y.length; _1z < _20; _1z++) { //#4513
        $k[$j++] = $get(_1y, _1z) - 48; //#4513
    } //#4513
    $_.sbs = $a(); //#4513
    if ($_.includetext) { //#4520
        $k[$j++] = Infinity; //#4515
        $k[$j++] = $_.height; //#4515
        $k[$j++] = $_.height; //#4515
        for (var _26 = 0, _27 = 12; _26 < _27; _26++) { //#4515
            $k[$j++] = $f($_.height - 0.075); //#4515
        } //#4515
        $k[$j++] = $_.height; //#4515
        $k[$j++] = $_.height; //#4515
        for (var _2B = 0, _2C = 12; _2B < _2C; _2B++) { //#4515
            $k[$j++] = $f($_.height - 0.075); //#4515
        } //#4515
        $k[$j++] = $_.height; //#4515
        $k[$j++] = $_.height; //#4515
        $_.bhs = $a(); //#4515
        $k[$j++] = Infinity; //#4516
        $k[$j++] = 0; //#4516
        $k[$j++] = 0; //#4516
        for (var _2H = 0, _2I = 12; _2H < _2I; _2H++) { //#4516
            $k[$j++] = 0.075; //#4516
        } //#4516
        $k[$j++] = 0; //#4516
        $k[$j++] = 0; //#4516
        for (var _2J = 0, _2K = 12; _2J < _2K; _2J++) { //#4516
            $k[$j++] = 0.075; //#4516
        } //#4516
        $k[$j++] = 0; //#4516
        $k[$j++] = 0; //#4516
        $_.bbs = $a(); //#4516
    } else { //#4520
        $k[$j++] = Infinity; //#4518
        for (var _2M = 0, _2N = 30; _2M < _2N; _2M++) { //#4518
            $k[$j++] = $_.height; //#4518
        } //#4518
        $_.bhs = $a(); //#4518
        $k[$j++] = Infinity; //#4519
        for (var _2Q = 0, _2R = 30; _2Q < _2R; _2Q++) { //#4519
            $k[$j++] = 0; //#4519
        } //#4519
        $_.bbs = $a(); //#4519
        $_.txt = $a([]); //#4520
    } //#4520
    $_.guardrightypos = 0; //#4522
    if ($ne($_.addon, "")) { //#4543
        $k[$j++] = Infinity; //#4526
        $k[$j++] = 'dontdraw'; //#4530
        $k[$j++] = true; //#4530
        $k[$j++] = 'includetext'; //#4530
        $k[$j++] = true; //#4530
        $k[$j++] = 'height'; //#4530
        $k[$j++] = $f($_.height - 0.15); //#4530
        $k[$j++] = 'textxoffset'; //#4530
        if ($ne($_.addontextxoffset, null)) { //#4530
            $k[$j++] = $_.addontextxoffset; //#4530
        } else { //#4530
            $k[$j++] = 95 + $_.addongap; //#4530
        } //#4530
        if ($ne($_.addontextyoffset, null)) { //#4531
            $k[$j++] = 'textyoffset'; //#4531
            $k[$j++] = $_.addontextyoffset; //#4531
        } //#4531
        $k[$j++] = 'textsize'; //#4532
        if ($ne($_.addontextsize, null)) { //#4532
            $k[$j++] = $_.addontextsize; //#4532
        } else { //#4532
            $k[$j++] = $_.textsize; //#4532
        } //#4532
        var _2f = $ne($_.addontextfont, "unset") ? $_.addontextfont : $_.textfont; //#4533
        $k[$j++] = 'textfont'; //#4533
        $k[$j++] = _2f; //#4533
        $_.addopts = $d(); //#4534
        if ($_.addon.length == 2) { //#4535
            $k[$j++] = $_.addon; //#4535
            $k[$j++] = $_.addopts; //#4535
            bwipp_ean2(); //#4535
        } //#4535
        if ($_.addon.length == 5) { //#4536
            $k[$j++] = $_.addon; //#4536
            $k[$j++] = $_.addopts; //#4536
            bwipp_ean5(); //#4536
        } //#4536
        $_.addcode = $k[--$j]; //#4537
        $k[$j++] = Infinity; //#4538
        $aload($_.sbs); //#4538
        $k[$j++] = $_.addongap; //#4538
        $aload($get($_.addcode, "sbs")); //#4538
        $_.sbs = $a(); //#4538
        $k[$j++] = Infinity; //#4539
        $aload($_.bhs); //#4539
        $forall($get($_.addcode, "bhs"), function() { //#4539
            var _2w = $k[--$j]; //#4539
            $k[$j++] = $f(_2w - 0.075); //#4539
        }); //#4539
        $_.bhs = $a(); //#4539
        $k[$j++] = Infinity; //#4540
        $aload($_.bbs); //#4540
        $forall($get($_.addcode, "bbs"), function() { //#4540
            var _31 = $k[--$j]; //#4540
            $k[$j++] = $f(_31 + 0.075); //#4540
        }); //#4540
        $_.bbs = $a(); //#4540
        $k[$j++] = Infinity; //#4541
        $aload($_.txt); //#4541
        $aload($get($_.addcode, "txt")); //#4541
        $_.txt = $a(); //#4541
        $_.guardrightypos = ($_.height * 72) - 6; //#4542
    } //#4542
    $k[$j++] = Infinity; //#4546
    $k[$j++] = 'ren'; //#4553
    $k[$j++] = bwipp_renlinear; //#4553
    $k[$j++] = 'sbs'; //#4553
    $k[$j++] = $_.sbs; //#4553
    $k[$j++] = 'bhs'; //#4553
    $k[$j++] = $_.bhs; //#4553
    $k[$j++] = 'bbs'; //#4553
    $k[$j++] = $_.bbs; //#4553
    $k[$j++] = 'txt'; //#4553
    $k[$j++] = $_.txt; //#4553
    $k[$j++] = 'opt'; //#4553
    $k[$j++] = $_.options; //#4553
    $k[$j++] = 'guardrightpos'; //#4553
    if ($eq($_.addon, "")) { //#4553
        $k[$j++] = 7; //#4553
    } else { //#4553
        $k[$j++] = 5; //#4553
    } //#4553
    $k[$j++] = 'guardrightypos'; //#4556
    $k[$j++] = $_.guardrightypos; //#4556
    $k[$j++] = 'borderleft'; //#4556
    $k[$j++] = 11; //#4556
    $k[$j++] = 'borderright'; //#4556
    if ($eq($_.addon, "")) { //#4556
        $k[$j++] = 7; //#4556
    } else { //#4556
        $k[$j++] = 5; //#4556
    } //#4556
    $k[$j++] = 'bordertop'; //#4558
    $k[$j++] = 0; //#4558
    $k[$j++] = 'borderbottom'; //#4558
    $k[$j++] = 5; //#4558
    var _3G = $d(); //#4558
    $k[$j++] = _3G; //#4561
    if (!$_.dontdraw) { //#4561
        bwipp_renlinear(); //#4561
    } //#4561
    $_ = Object.getPrototypeOf($_); //#4563
    $_ = Object.getPrototypeOf($_); //#4565
} //bwipp_ean13
function bwipp_ean8() {
    $_ = Object.create($_); //#4597
    $_.dontdraw = false; //#4600
    $_.includetext = false; //#4601
    $_.textfont = "OCR-B"; //#4602
    $_.textsize = 12; //#4603
    $_.textxoffset = 4; //#4604
    $_.textyoffset = -4; //#4605
    $_.height = 1; //#4606
    $_.addongap = 12; //#4607
    $_.addontextfont = "unset"; //#4608
    $_.addontextsize = null; //#4609
    $_.addontextxoffset = null; //#4610
    $_.addontextyoffset = null; //#4611
    $k[$j++] = $_; //#4613
    bwipp_processoptions(); //#4613
    $_.options = $k[--$j]; //#4613
    $_.barcode = $k[--$j]; //#4614
    bwipp_loadctx(bwipp_ean8) //#4616
    $search($_.barcode, " "); //#4619
    if ($k[--$j]) { //#4625
        $_.barcode = $k[--$j]; //#4620
        $j--; //#4621
        $_.addon = $k[--$j]; //#4622
    } else { //#4625
        $j--; //#4624
        $_.addon = ""; //#4625
    } //#4625
    if (($_.barcode.length != 7) && ($_.barcode.length != 8)) { //#4631
        $k[$j++] = 'bwipp.ean8badLength#4630'; //#4630
        $k[$j++] = "EAN-8 must be 7 or 8 digits"; //#4630
        bwipp_raiseerror(); //#4630
    } //#4630
    $forall($_.barcode, function() { //#4636
        var _9 = $k[--$j]; //#4633
        if ((_9 < 48) || (_9 > 57)) { //#4635
            $k[$j++] = 'bwipp.ean8badCharacter#4634'; //#4634
            $k[$j++] = "EAN-8 must contain only digits"; //#4634
            bwipp_raiseerror(); //#4634
        } //#4634
    }); //#4634
    if ((($_.addon.length != 0) && ($_.addon.length != 2)) && ($_.addon.length != 5)) { //#4639
        $k[$j++] = 'bwipp.ean8badAddOnLength#4638'; //#4638
        $k[$j++] = "Add-on for EAN-8 must be 2 or 5 digits"; //#4638
        bwipp_raiseerror(); //#4638
    } //#4638
    $_.pad = $s(8); //#4642
    $_.checksum = 0; //#4643
    for (var _E = 0; _E <= 6; _E += 1) { //#4652
        $_.i = _E; //#4645
        $_.barchar = $f($get($_.barcode, $_.i) - 48); //#4646
        if (($_.i % 2) != 0) { //#4650
            $_.checksum = $f($_.barchar + $_.checksum); //#4648
        } else { //#4650
            $_.checksum = $f(($_.barchar * 3) + $_.checksum); //#4650
        } //#4650
    } //#4650
    $_.checksum = ($f(10 - ($_.checksum % 10))) % 10; //#4653
    if ($_.barcode.length == 8) { //#4658
        if ($get($_.barcode, 7) != $f($_.checksum + 48)) { //#4657
            $k[$j++] = 'bwipp.ean8badCheckDigit#4656'; //#4656
            $k[$j++] = "Incorrect EAN-8 check digit provided"; //#4656
            bwipp_raiseerror(); //#4656
        } //#4656
    } //#4656
    $puti($_.pad, 0, $_.barcode); //#4659
    $put($_.pad, 7, $f($_.checksum + 48)); //#4660
    $_.barcode = $_.pad; //#4661
    if (!bwipp_ean8.__4673__) { //#4673
        $_ = Object.create($_); //#4673
        $_.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "111", "11111", "111"]); //#4669
        $_.barchars = "0123456789"; //#4672
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_ean8.$ctx[id] = $_[id]); //#4672
        bwipp_ean8.__4673__ = 1; //#4672
        $_ = Object.getPrototypeOf($_); //#4672
    } //#4672
    $_.sbs = $s(43); //#4675
    $_.txt = $a(8); //#4676
    $puti($_.sbs, 0, $get($_.encs, 10)); //#4679
    for (var _e = 0; _e <= 3; _e += 1) { //#4692
        $_.i = _e; //#4684
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#4685
        $j--; //#4686
        $_.indx = $k[--$j].length; //#4687
        $j -= 2; //#4688
        $_.enc = $get($_.encs, $_.indx); //#4689
        $puti($_.sbs, ($_.i * 4) + 3, $_.enc); //#4690
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ($_.i * 7) + $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])); //#4691
    } //#4691
    $puti($_.sbs, (4 * 4) + 3, $get($_.encs, 11)); //#4695
    for (var _14 = 4; _14 <= 7; _14 += 1) { //#4708
        $_.i = _14; //#4700
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#4701
        $j--; //#4702
        $_.indx = $k[--$j].length; //#4703
        $j -= 2; //#4704
        $_.enc = $get($_.encs, $_.indx); //#4705
        $puti($_.sbs, ($_.i * 4) + 8, $_.enc); //#4706
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), (($_.i * 7) + $_.textxoffset) + 4, $_.textyoffset, $_.textfont, $_.textsize])); //#4707
    } //#4707
    $puti($_.sbs, 40, $get($_.encs, 12)); //#4711
    $k[$j++] = Infinity; //#4713
    var _1U = $_.sbs; //#4713
    for (var _1V = 0, _1W = _1U.length; _1V < _1W; _1V++) { //#4713
        $k[$j++] = $get(_1U, _1V) - 48; //#4713
    } //#4713
    $_.sbs = $a(); //#4713
    if ($_.includetext) { //#4720
        $k[$j++] = Infinity; //#4715
        $k[$j++] = $_.height; //#4715
        $k[$j++] = $_.height; //#4715
        for (var _1c = 0, _1d = 8; _1c < _1d; _1c++) { //#4715
            $k[$j++] = $f($_.height - 0.075); //#4715
        } //#4715
        $k[$j++] = $_.height; //#4715
        $k[$j++] = $_.height; //#4715
        for (var _1h = 0, _1i = 8; _1h < _1i; _1h++) { //#4715
            $k[$j++] = $f($_.height - 0.075); //#4715
        } //#4715
        $k[$j++] = $_.height; //#4715
        $k[$j++] = $_.height; //#4715
        $_.bhs = $a(); //#4715
        $k[$j++] = Infinity; //#4716
        $k[$j++] = 0; //#4716
        $k[$j++] = 0; //#4716
        for (var _1n = 0, _1o = 8; _1n < _1o; _1n++) { //#4716
            $k[$j++] = 0.075; //#4716
        } //#4716
        $k[$j++] = 0; //#4716
        $k[$j++] = 0; //#4716
        for (var _1p = 0, _1q = 8; _1p < _1q; _1p++) { //#4716
            $k[$j++] = 0.075; //#4716
        } //#4716
        $k[$j++] = 0; //#4716
        $k[$j++] = 0; //#4716
        $_.bbs = $a(); //#4716
    } else { //#4720
        $k[$j++] = Infinity; //#4718
        for (var _1s = 0, _1t = 22; _1s < _1t; _1s++) { //#4718
            $k[$j++] = $_.height; //#4718
        } //#4718
        $_.bhs = $a(); //#4718
        $k[$j++] = Infinity; //#4719
        for (var _1w = 0, _1x = 22; _1w < _1x; _1w++) { //#4719
            $k[$j++] = 0; //#4719
        } //#4719
        $_.bbs = $a(); //#4719
        $_.txt = $a([]); //#4720
    } //#4720
    $_.guardrightypos = 0; //#4722
    if ($ne($_.addon, "")) { //#4743
        $k[$j++] = Infinity; //#4726
        $k[$j++] = 'dontdraw'; //#4730
        $k[$j++] = true; //#4730
        $k[$j++] = 'includetext'; //#4730
        $k[$j++] = true; //#4730
        $k[$j++] = 'height'; //#4730
        $k[$j++] = $f($_.height - 0.15); //#4730
        $k[$j++] = 'textxoffset'; //#4730
        if ($ne($_.addontextxoffset, null)) { //#4730
            $k[$j++] = $_.addontextxoffset; //#4730
        } else { //#4730
            $k[$j++] = 67 + $_.addongap; //#4730
        } //#4730
        if ($ne($_.addontextyoffset, null)) { //#4731
            $k[$j++] = 'textyoffset'; //#4731
            $k[$j++] = $_.addontextyoffset; //#4731
        } //#4731
        $k[$j++] = 'textsize'; //#4732
        if ($ne($_.addontextsize, null)) { //#4732
            $k[$j++] = $_.addontextsize; //#4732
        } else { //#4732
            $k[$j++] = $_.textsize; //#4732
        } //#4732
        var _2B = $ne($_.addontextfont, "unset") ? $_.addontextfont : $_.textfont; //#4733
        $k[$j++] = 'textfont'; //#4733
        $k[$j++] = _2B; //#4733
        $_.addopts = $d(); //#4734
        if ($_.addon.length == 2) { //#4735
            $k[$j++] = $_.addon; //#4735
            $k[$j++] = $_.addopts; //#4735
            bwipp_ean2(); //#4735
        } //#4735
        if ($_.addon.length == 5) { //#4736
            $k[$j++] = $_.addon; //#4736
            $k[$j++] = $_.addopts; //#4736
            bwipp_ean5(); //#4736
        } //#4736
        $_.addcode = $k[--$j]; //#4737
        $k[$j++] = Infinity; //#4738
        $aload($_.sbs); //#4738
        $k[$j++] = $_.addongap; //#4738
        $aload($get($_.addcode, "sbs")); //#4738
        $_.sbs = $a(); //#4738
        $k[$j++] = Infinity; //#4739
        $aload($_.bhs); //#4739
        $forall($get($_.addcode, "bhs"), function() { //#4739
            var _2S = $k[--$j]; //#4739
            $k[$j++] = $f(_2S - 0.075); //#4739
        }); //#4739
        $_.bhs = $a(); //#4739
        $k[$j++] = Infinity; //#4740
        $aload($_.bbs); //#4740
        $forall($get($_.addcode, "bbs"), function() { //#4740
            var _2X = $k[--$j]; //#4740
            $k[$j++] = $f(_2X + 0.075); //#4740
        }); //#4740
        $_.bbs = $a(); //#4740
        $k[$j++] = Infinity; //#4741
        $aload($_.txt); //#4741
        $aload($get($_.addcode, "txt")); //#4741
        $_.txt = $a(); //#4741
        $_.guardrightypos = ($_.height * 72) - 6; //#4742
    } //#4742
    $k[$j++] = Infinity; //#4746
    $k[$j++] = 'ren'; //#4754
    $k[$j++] = bwipp_renlinear; //#4754
    $k[$j++] = 'sbs'; //#4754
    $k[$j++] = $_.sbs; //#4754
    $k[$j++] = 'bhs'; //#4754
    $k[$j++] = $_.bhs; //#4754
    $k[$j++] = 'bbs'; //#4754
    $k[$j++] = $_.bbs; //#4754
    $k[$j++] = 'txt'; //#4754
    $k[$j++] = $_.txt; //#4754
    $k[$j++] = 'opt'; //#4754
    $k[$j++] = $_.options; //#4754
    $k[$j++] = 'guardleftpos'; //#4754
    $k[$j++] = 7; //#4754
    $k[$j++] = 'guardrightpos'; //#4754
    if ($eq($_.addon, "")) { //#4754
        $k[$j++] = 7; //#4754
    } else { //#4754
        $k[$j++] = 5; //#4754
    } //#4754
    $k[$j++] = 'guardrightypos'; //#4757
    $k[$j++] = $_.guardrightypos; //#4757
    $k[$j++] = 'borderleft'; //#4757
    $k[$j++] = 7; //#4757
    $k[$j++] = 'borderright'; //#4757
    if ($eq($_.addon, "")) { //#4757
        $k[$j++] = 7; //#4757
    } else { //#4757
        $k[$j++] = 5; //#4757
    } //#4757
    $k[$j++] = 'bordertop'; //#4759
    $k[$j++] = 0; //#4759
    $k[$j++] = 'borderbottom'; //#4759
    $k[$j++] = 5; //#4759
    var _2m = $d(); //#4759
    $k[$j++] = _2m; //#4762
    if (!$_.dontdraw) { //#4762
        bwipp_renlinear(); //#4762
    } //#4762
    $_ = Object.getPrototypeOf($_); //#4764
    $_ = Object.getPrototypeOf($_); //#4766
} //bwipp_ean8
function bwipp_upca() {
    $_ = Object.create($_); //#4798
    $_.dontdraw = false; //#4801
    $_.includetext = false; //#4802
    $_.textfont = "OCR-B"; //#4803
    $_.textsize = 12; //#4804
    $_.textxoffset = -9; //#4805
    $_.textyoffset = -4; //#4806
    $_.height = 1; //#4807
    $_.addongap = 12; //#4808
    $_.addontextfont = "unset"; //#4809
    $_.addontextsize = null; //#4810
    $_.addontextxoffset = null; //#4811
    $_.addontextyoffset = null; //#4812
    $k[$j++] = $_; //#4814
    bwipp_processoptions(); //#4814
    $_.options = $k[--$j]; //#4814
    $_.barcode = $k[--$j]; //#4815
    bwipp_loadctx(bwipp_upca) //#4817
    $search($_.barcode, " "); //#4820
    if ($k[--$j]) { //#4826
        $_.barcode = $k[--$j]; //#4821
        $j--; //#4822
        $_.addon = $k[--$j]; //#4823
    } else { //#4826
        $j--; //#4825
        $_.addon = ""; //#4826
    } //#4826
    if (($_.barcode.length == 7) || ($_.barcode.length == 8)) { //#4872
        $forall($_.barcode, function() { //#4836
            var _9 = $k[--$j]; //#4833
            if ((_9 < 48) || (_9 > 57)) { //#4835
                $k[$j++] = 'bwipp.upcAupcEbadCharacter#4834'; //#4834
                $k[$j++] = "UPC-E must contain only digits"; //#4834
                bwipp_raiseerror(); //#4834
            } //#4834
        }); //#4834
        var _B = $get($_.barcode, 0); //#4837
        if ((_B != 48) && (_B != 49)) { //#4839
            $k[$j++] = 'bwipp.upcAupcEbadNumberSystem#4838'; //#4838
            $k[$j++] = "UPC-E must have number system 0 or 1"; //#4838
            bwipp_raiseerror(); //#4838
        } //#4838
        for (var _C = 0, _D = 1; _C < _D; _C++) { //#4867
            var _F = ($_.barcode.length == 8) ? 12 : 11; //#4841
            $_.upcacode = $s(_F); //#4841
            if ($f($get($_.barcode, 6) - 48) <= 2) { //#4848
                $puti($_.upcacode, 0, $geti($_.barcode, 0, 3)); //#4843
                $puti($_.upcacode, 3, $geti($_.barcode, 6, 1)); //#4844
                $puti($_.upcacode, 4, "0000"); //#4845
                $puti($_.upcacode, 8, $geti($_.barcode, 3, 3)); //#4846
                break; //#4847
            } //#4847
            if ($f($get($_.barcode, 6) - 48) == 3) { //#4854
                $puti($_.upcacode, 0, $geti($_.barcode, 0, 4)); //#4850
                $puti($_.upcacode, 4, "00000"); //#4851
                $puti($_.upcacode, 9, $geti($_.barcode, 4, 2)); //#4852
                break; //#4853
            } //#4853
            if ($f($get($_.barcode, 6) - 48) == 4) { //#4860
                $puti($_.upcacode, 0, $geti($_.barcode, 0, 5)); //#4856
                $puti($_.upcacode, 5, "00000"); //#4857
                $puti($_.upcacode, 10, $geti($_.barcode, 5, 1)); //#4858
                break; //#4859
            } //#4859
            if ($f($get($_.barcode, 6) - 48) >= 5) { //#4866
                $puti($_.upcacode, 0, $geti($_.barcode, 0, 6)); //#4862
                $puti($_.upcacode, 6, "0000"); //#4863
                $puti($_.upcacode, 10, $geti($_.barcode, 6, 1)); //#4864
                break; //#4865
            } //#4865
        } //#4865
        if ($_.barcode.length == 8) { //#4870
            $puti($_.upcacode, 11, $geti($_.barcode, 7, 1)); //#4869
        } //#4869
        $_.barcode = $_.upcacode; //#4871
    } //#4871
    if (($_.barcode.length != 11) && ($_.barcode.length != 12)) { //#4877
        $k[$j++] = 'bwipp.upcAbadLength#4876'; //#4876
        $k[$j++] = "UPC-A must be 11 or 12 digits"; //#4876
        bwipp_raiseerror(); //#4876
    } //#4876
    var _11 = $_.barcode; //#4878
    for (var _12 = 0, _13 = _11.length; _12 < _13; _12++) { //#4882
        var _14 = $get(_11, _12); //#4882
        if ((_14 < 48) || (_14 > 57)) { //#4881
            $k[$j++] = 'bwipp.upcAbadCharacter#4880'; //#4880
            $k[$j++] = "UPC-A must contain only digits"; //#4880
            bwipp_raiseerror(); //#4880
        } //#4880
    } //#4880
    if ((($_.addon.length != 0) && ($_.addon.length != 2)) && ($_.addon.length != 5)) { //#4885
        $k[$j++] = 'bwipp.upcAbadAddOnLength#4884'; //#4884
        $k[$j++] = "Add-on for UPC-A must be 2 or 5 digits"; //#4884
        bwipp_raiseerror(); //#4884
    } //#4884
    $_.pad = $s(12); //#4888
    $_.checksum = 0; //#4889
    for (var _19 = 0; _19 <= 10; _19 += 1) { //#4898
        $_.i = _19; //#4891
        $_.barchar = $get($_.barcode, $_.i) - 48; //#4892
        if (($_.i % 2) != 0) { //#4896
            $_.checksum = $_.checksum + $_.barchar; //#4894
        } else { //#4896
            $_.checksum = $_.checksum + ($_.barchar * 3); //#4896
        } //#4896
    } //#4896
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#4899
    if ($_.barcode.length == 12) { //#4904
        if ($get($_.barcode, 11) != ($_.checksum + 48)) { //#4903
            $k[$j++] = 'bwipp.upcAbadCheckDigit#4902'; //#4902
            $k[$j++] = "Incorrect UPC check digit provided"; //#4902
            bwipp_raiseerror(); //#4902
        } //#4902
    } //#4902
    $puti($_.pad, 0, $_.barcode); //#4905
    $put($_.pad, 11, $_.checksum + 48); //#4906
    $_.barcode = $_.pad; //#4907
    if (!bwipp_upca.__4919__) { //#4919
        $_ = Object.create($_); //#4919
        $_.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "111", "11111", "111"]); //#4915
        $_.barchars = "0123456789"; //#4918
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_upca.$ctx[id] = $_[id]); //#4918
        bwipp_upca.__4919__ = 1; //#4918
        $_ = Object.getPrototypeOf($_); //#4918
    } //#4918
    $_.sbs = $s(59); //#4921
    $_.txt = $a(12); //#4922
    $puti($_.sbs, 0, $get($_.encs, 10)); //#4925
    for (var _1Z = 0; _1Z <= 5; _1Z += 1) { //#4942
        $_.i = _1Z; //#4930
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#4931
        $j--; //#4932
        $_.indx = $k[--$j].length; //#4933
        $j -= 2; //#4934
        $_.enc = $get($_.encs, $_.indx); //#4935
        $puti($_.sbs, ($_.i * 4) + 3, $_.enc); //#4936
        if ($_.i == 0) { //#4940
            $put($_.txt, 0, $a([$geti($_.barcode, 0, 1), $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize - 2])); //#4938
        } else { //#4940
            $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), (($_.i * 7) + 13) + $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])); //#4940
        } //#4940
    } //#4940
    $puti($_.sbs, (6 * 4) + 3, $get($_.encs, 11)); //#4945
    for (var _28 = 6; _28 <= 11; _28 += 1) { //#4962
        $_.i = _28; //#4950
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#4951
        $j--; //#4952
        $_.indx = $k[--$j].length; //#4953
        $j -= 2; //#4954
        $_.enc = $get($_.encs, $_.indx); //#4955
        $puti($_.sbs, ($_.i * 4) + 8, $_.enc); //#4956
        if ($_.i == 11) { //#4960
            $put($_.txt, 11, $a([$geti($_.barcode, 11, 1), $_.textxoffset + 107, $_.textyoffset, $_.textfont, $_.textsize - 2])); //#4958
        } else { //#4960
            $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), (($_.i * 7) + $_.textxoffset) + 17, $_.textyoffset, $_.textfont, $_.textsize])); //#4960
        } //#4960
    } //#4960
    $puti($_.sbs, 56, $get($_.encs, 12)); //#4965
    $k[$j++] = Infinity; //#4967
    var _2h = $_.sbs; //#4967
    for (var _2i = 0, _2j = _2h.length; _2i < _2j; _2i++) { //#4967
        $k[$j++] = $get(_2h, _2i) - 48; //#4967
    } //#4967
    $_.sbs = $a(); //#4967
    if ($_.includetext) { //#4974
        $k[$j++] = Infinity; //#4969
        for (var _2n = 0, _2o = 4; _2n < _2o; _2n++) { //#4969
            $k[$j++] = $_.height; //#4969
        } //#4969
        for (var _2q = 0, _2r = 10; _2q < _2r; _2q++) { //#4969
            $k[$j++] = $f($_.height - 0.075); //#4969
        } //#4969
        $k[$j++] = $_.height; //#4969
        $k[$j++] = $_.height; //#4969
        for (var _2v = 0, _2w = 10; _2v < _2w; _2v++) { //#4969
            $k[$j++] = $f($_.height - 0.075); //#4969
        } //#4969
        for (var _2y = 0, _2z = 4; _2y < _2z; _2y++) { //#4969
            $k[$j++] = $_.height; //#4969
        } //#4969
        $_.bhs = $a(); //#4969
        $k[$j++] = Infinity; //#4970
        $k[$j++] = 0; //#4970
        $k[$j++] = 0; //#4970
        $k[$j++] = 0; //#4970
        $k[$j++] = 0; //#4970
        for (var _32 = 0, _33 = 10; _32 < _33; _32++) { //#4970
            $k[$j++] = 0.075; //#4970
        } //#4970
        $k[$j++] = 0; //#4970
        $k[$j++] = 0; //#4970
        for (var _34 = 0, _35 = 10; _34 < _35; _34++) { //#4970
            $k[$j++] = 0.075; //#4970
        } //#4970
        $k[$j++] = 0; //#4970
        $k[$j++] = 0; //#4970
        $k[$j++] = 0; //#4970
        $k[$j++] = 0; //#4970
        $_.bbs = $a(); //#4970
    } else { //#4974
        $k[$j++] = Infinity; //#4972
        for (var _37 = 0, _38 = 30; _37 < _38; _37++) { //#4972
            $k[$j++] = $_.height; //#4972
        } //#4972
        $_.bhs = $a(); //#4972
        $k[$j++] = Infinity; //#4973
        for (var _3B = 0, _3C = 30; _3B < _3C; _3B++) { //#4973
            $k[$j++] = 0; //#4973
        } //#4973
        $_.bbs = $a(); //#4973
        $_.txt = $a([]); //#4974
    } //#4974
    $_.guardrightypos = 0; //#4976
    if ($ne($_.addon, "")) { //#4997
        $k[$j++] = Infinity; //#4980
        $k[$j++] = 'dontdraw'; //#4984
        $k[$j++] = true; //#4984
        $k[$j++] = 'includetext'; //#4984
        $k[$j++] = true; //#4984
        $k[$j++] = 'height'; //#4984
        $k[$j++] = $f($_.height - 0.15); //#4984
        $k[$j++] = 'textxoffset'; //#4984
        if ($ne($_.addontextxoffset, null)) { //#4984
            $k[$j++] = $_.addontextxoffset; //#4984
        } else { //#4984
            $k[$j++] = 95 + $_.addongap; //#4984
        } //#4984
        if ($ne($_.addontextyoffset, null)) { //#4985
            $k[$j++] = 'textyoffset'; //#4985
            $k[$j++] = $_.addontextyoffset; //#4985
        } //#4985
        $k[$j++] = 'textsize'; //#4986
        if ($ne($_.addontextsize, null)) { //#4986
            $k[$j++] = $_.addontextsize; //#4986
        } else { //#4986
            $k[$j++] = $_.textsize; //#4986
        } //#4986
        var _3Q = $ne($_.addontextfont, "unset") ? $_.addontextfont : $_.textfont; //#4987
        $k[$j++] = 'textfont'; //#4987
        $k[$j++] = _3Q; //#4987
        $_.addopts = $d(); //#4988
        if ($_.addon.length == 2) { //#4989
            $k[$j++] = $_.addon; //#4989
            $k[$j++] = $_.addopts; //#4989
            bwipp_ean2(); //#4989
        } //#4989
        if ($_.addon.length == 5) { //#4990
            $k[$j++] = $_.addon; //#4990
            $k[$j++] = $_.addopts; //#4990
            bwipp_ean5(); //#4990
        } //#4990
        $_.addcode = $k[--$j]; //#4991
        $k[$j++] = Infinity; //#4992
        $aload($_.sbs); //#4992
        $k[$j++] = $_.addongap; //#4992
        $aload($get($_.addcode, "sbs")); //#4992
        $_.sbs = $a(); //#4992
        $k[$j++] = Infinity; //#4993
        $aload($_.bhs); //#4993
        $forall($get($_.addcode, "bhs"), function() { //#4993
            var _3h = $k[--$j]; //#4993
            $k[$j++] = $f(_3h - 0.075); //#4993
        }); //#4993
        $_.bhs = $a(); //#4993
        $k[$j++] = Infinity; //#4994
        $aload($_.bbs); //#4994
        $forall($get($_.addcode, "bbs"), function() { //#4994
            var _3m = $k[--$j]; //#4994
            $k[$j++] = $f(_3m + 0.075); //#4994
        }); //#4994
        $_.bbs = $a(); //#4994
        $k[$j++] = Infinity; //#4995
        $aload($_.txt); //#4995
        $aload($get($_.addcode, "txt")); //#4995
        $_.txt = $a(); //#4995
        $_.guardrightypos = ($_.height * 72) - 6; //#4996
    } //#4996
    $k[$j++] = Infinity; //#5000
    $k[$j++] = 'ren'; //#5007
    $k[$j++] = bwipp_renlinear; //#5007
    $k[$j++] = 'sbs'; //#5007
    $k[$j++] = $_.sbs; //#5007
    $k[$j++] = 'bhs'; //#5007
    $k[$j++] = $_.bhs; //#5007
    $k[$j++] = 'bbs'; //#5007
    $k[$j++] = $_.bbs; //#5007
    $k[$j++] = 'txt'; //#5007
    $k[$j++] = $_.txt; //#5007
    $k[$j++] = 'opt'; //#5007
    $k[$j++] = $_.options; //#5007
    $k[$j++] = 'guardrightpos'; //#5007
    if ($eq($_.addon, "")) { //#5007
        $k[$j++] = 9; //#5007
    } else { //#5007
        $k[$j++] = 5; //#5007
    } //#5007
    $k[$j++] = 'guardrightypos'; //#5010
    $k[$j++] = $_.guardrightypos; //#5010
    $k[$j++] = 'borderleft'; //#5010
    $k[$j++] = 9; //#5010
    $k[$j++] = 'borderright'; //#5010
    if ($eq($_.addon, "")) { //#5010
        $k[$j++] = 9; //#5010
    } else { //#5010
        $k[$j++] = 5; //#5010
    } //#5010
    $k[$j++] = 'bordertop'; //#5012
    $k[$j++] = 0; //#5012
    $k[$j++] = 'borderbottom'; //#5012
    $k[$j++] = 5; //#5012
    var _41 = $d(); //#5012
    $k[$j++] = _41; //#5015
    if (!$_.dontdraw) { //#5015
        bwipp_renlinear(); //#5015
    } //#5015
    $_ = Object.getPrototypeOf($_); //#5017
    $_ = Object.getPrototypeOf($_); //#5019
} //bwipp_upca
function bwipp_upce() {
    $_ = Object.create($_); //#5051
    $_.dontdraw = false; //#5054
    $_.includetext = false; //#5055
    $_.textfont = "OCR-B"; //#5056
    $_.textsize = 12; //#5057
    $_.textxoffset = -9; //#5058
    $_.textyoffset = -4; //#5059
    $_.height = 1; //#5060
    $_.addongap = 12; //#5061
    $_.addontextfont = "unset"; //#5062
    $_.addontextsize = null; //#5063
    $_.addontextxoffset = null; //#5064
    $_.addontextyoffset = null; //#5065
    $k[$j++] = $_; //#5067
    bwipp_processoptions(); //#5067
    $_.options = $k[--$j]; //#5067
    $_.barcode = $k[--$j]; //#5068
    bwipp_loadctx(bwipp_upce) //#5070
    $search($_.barcode, " "); //#5073
    if ($k[--$j]) { //#5079
        $_.barcode = $k[--$j]; //#5074
        $j--; //#5075
        $_.addon = $k[--$j]; //#5076
    } else { //#5079
        $j--; //#5078
        $_.addon = ""; //#5079
    } //#5079
    if (($_.barcode.length == 11) || ($_.barcode.length == 12)) { //#5121
        $forall($_.barcode, function() { //#5089
            var _9 = $k[--$j]; //#5086
            if ((_9 < 48) || (_9 > 57)) { //#5088
                $k[$j++] = 'bwipp.upcEupcAbadCharacter#5087'; //#5087
                $k[$j++] = "UPC-A must contain only digits"; //#5087
                bwipp_raiseerror(); //#5087
            } //#5087
        }); //#5087
        for (var _A = 0, _B = 1; _A < _B; _A++) { //#5116
            var _D = ($_.barcode.length == 12) ? 8 : 7; //#5091
            $_.upcecode = $s(_D); //#5091
            if (($f($get($_.barcode, 3) - 48) <= 2) && $eq($geti($_.barcode, 4, 4), "0000")) { //#5097
                $puti($_.upcecode, 0, $geti($_.barcode, 0, 3)); //#5093
                $puti($_.upcecode, 3, $geti($_.barcode, 8, 3)); //#5094
                $puti($_.upcecode, 6, $geti($_.barcode, 3, 1)); //#5095
                break; //#5096
            } //#5096
            if ($eq($geti($_.barcode, 4, 5), "00000")) { //#5103
                $puti($_.upcecode, 0, $geti($_.barcode, 0, 4)); //#5099
                $puti($_.upcecode, 4, $geti($_.barcode, 9, 2)); //#5100
                $puti($_.upcecode, 6, "3"); //#5101
                break; //#5102
            } //#5102
            if ($eq($geti($_.barcode, 5, 5), "00000")) { //#5109
                $puti($_.upcecode, 0, $geti($_.barcode, 0, 5)); //#5105
                $puti($_.upcecode, 5, $geti($_.barcode, 10, 1)); //#5106
                $puti($_.upcecode, 6, "4"); //#5107
                break; //#5108
            } //#5108
            if (($f($get($_.barcode, 10) - 48) >= 5) && $eq($geti($_.barcode, 6, 4), "0000")) { //#5114
                $puti($_.upcecode, 0, $geti($_.barcode, 0, 6)); //#5111
                $puti($_.upcecode, 6, $geti($_.barcode, 10, 1)); //#5112
                break; //#5113
            } //#5113
            $k[$j++] = 'bwipp.upcEupcAnotCompressible#5115'; //#5115
            $k[$j++] = "UPC-A cannot be converted to a UPC-E"; //#5115
            bwipp_raiseerror(); //#5115
        } //#5115
        if ($_.barcode.length == 12) { //#5119
            $puti($_.upcecode, 7, $geti($_.barcode, 11, 1)); //#5118
        } //#5118
        $_.barcode = $_.upcecode; //#5120
    } //#5120
    if (($_.barcode.length != 7) && ($_.barcode.length != 8)) { //#5126
        $k[$j++] = 'bwipp.upcEbadLength#5125'; //#5125
        $k[$j++] = "UPC-E must be 7 or 8 digits"; //#5125
        bwipp_raiseerror(); //#5125
    } //#5125
    var _11 = $_.barcode; //#5127
    for (var _12 = 0, _13 = _11.length; _12 < _13; _12++) { //#5131
        var _14 = $get(_11, _12); //#5131
        if ((_14 < 48) || (_14 > 57)) { //#5130
            $k[$j++] = 'bwipp.upcEbadCharacter#5129'; //#5129
            $k[$j++] = "UPC-E must contain only digits"; //#5129
            bwipp_raiseerror(); //#5129
        } //#5129
    } //#5129
    if ((($_.addon.length != 0) && ($_.addon.length != 2)) && ($_.addon.length != 5)) { //#5134
        $k[$j++] = 'bwipp.upcEbadAddOnLength#5133'; //#5133
        $k[$j++] = "Add-on for UPC-E must be 2 or 5 digits"; //#5133
        bwipp_raiseerror(); //#5133
    } //#5133
    var _19 = $get($_.barcode, 0); //#5137
    if ((_19 != 48) && (_19 != 49)) { //#5139
        $k[$j++] = 'bwipp.upcEbadNumberSystem#5138'; //#5138
        $k[$j++] = "UPC-E must have number system 0 or 1"; //#5138
        bwipp_raiseerror(); //#5138
    } //#5138
    if (!bwipp_upce.__5156__) { //#5156
        $_ = Object.create($_); //#5156
        $_.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "111", "111111"]); //#5147
        $_.barchars = "0123456789"; //#5150
        $_.mirrormaps = $a(["000111", "001011", "001101", "001110", "010011", "011001", "011100", "010101", "010110", "011010"]); //#5155
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_upce.$ctx[id] = $_[id]); //#5155
        bwipp_upce.__5156__ = 1; //#5155
        $_ = Object.getPrototypeOf($_); //#5155
    } //#5155
    for (var _1D = 0, _1E = 1; _1D < _1E; _1D++) { //#5186
        $_.upcacode = $s(11); //#5160
        if (($get($_.barcode, 6) - 48) <= 2) { //#5167
            $puti($_.upcacode, 0, $geti($_.barcode, 0, 3)); //#5162
            $puti($_.upcacode, 3, $geti($_.barcode, 6, 1)); //#5163
            $puti($_.upcacode, 4, "0000"); //#5164
            $puti($_.upcacode, 8, $geti($_.barcode, 3, 3)); //#5165
            break; //#5166
        } //#5166
        if (($get($_.barcode, 6) - 48) == 3) { //#5173
            $puti($_.upcacode, 0, $geti($_.barcode, 0, 4)); //#5169
            $puti($_.upcacode, 4, "00000"); //#5170
            $puti($_.upcacode, 9, $geti($_.barcode, 4, 2)); //#5171
            break; //#5172
        } //#5172
        if (($get($_.barcode, 6) - 48) == 4) { //#5179
            $puti($_.upcacode, 0, $geti($_.barcode, 0, 5)); //#5175
            $puti($_.upcacode, 5, "00000"); //#5176
            $puti($_.upcacode, 10, $geti($_.barcode, 5, 1)); //#5177
            break; //#5178
        } //#5178
        if (($get($_.barcode, 6) - 48) >= 5) { //#5185
            $puti($_.upcacode, 0, $geti($_.barcode, 0, 6)); //#5181
            $puti($_.upcacode, 6, "0000"); //#5182
            $puti($_.upcacode, 10, $geti($_.barcode, 6, 1)); //#5183
            break; //#5184
        } //#5184
    } //#5184
    $_.checksum = 0; //#5187
    for (var _1t = 0; _1t <= 10; _1t += 1) { //#5196
        $_.i = _1t; //#5189
        $_.barchar = $get($_.upcacode, $_.i) - 48; //#5190
        if (($_.i % 2) != 0) { //#5194
            $_.checksum = $_.checksum + $_.barchar; //#5192
        } else { //#5194
            $_.checksum = $_.checksum + ($_.barchar * 3); //#5194
        } //#5194
    } //#5194
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#5197
    if ($_.barcode.length == 8) { //#5202
        if ($get($_.barcode, 7) != ($_.checksum + 48)) { //#5201
            $k[$j++] = 'bwipp.upcEbadCheckDigit#5200'; //#5200
            $k[$j++] = "Incorrect UPC check digit provided"; //#5200
            bwipp_raiseerror(); //#5200
        } //#5200
    } //#5200
    $_.pad = $s(8); //#5203
    $puti($_.pad, 0, $_.barcode); //#5204
    $put($_.pad, 7, $_.checksum + 48); //#5205
    $_.barcode = $_.pad; //#5206
    $_.txt = $a(8); //#5207
    $put($_.txt, 0, $a([$geti($_.barcode, 0, 1), $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize - 2])); //#5208
    $_.mirrormap = $get($_.mirrormaps, $_.checksum); //#5211
    if ($get($_.barcode, 0) == 48) { //#5225
        $_.invt = $s($_.mirrormap.length); //#5215
        for (var _2V = 0, _2U = $_.mirrormap.length - 1; _2V <= _2U; _2V += 1) { //#5223
            $_.i = _2V; //#5217
            if ($get($_.mirrormap, $_.i) == 48) { //#5221
                $put($_.invt, $_.i, 49); //#5219
            } else { //#5221
                $put($_.invt, $_.i, 48); //#5221
            } //#5221
        } //#5221
        $_.mirrormap = $_.invt; //#5224
    } //#5224
    $_.sbs = $s(33); //#5227
    $puti($_.sbs, 0, $get($_.encs, 10)); //#5230
    for (var _2i = 1; _2i <= 6; _2i += 1) { //#5252
        $_.i = _2i; //#5233
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#5235
        $j--; //#5236
        $_.indx = $k[--$j].length; //#5237
        $j -= 2; //#5238
        $_.enc = $get($_.encs, $_.indx); //#5239
        if ($get($_.mirrormap, $_.i - 1) == 49) { //#5249
            $_.enclen = $_.enc.length; //#5241
            $_.revenc = $s($_.enclen); //#5242
            for (var _2z = 0, _2y = $_.enclen - 1; _2z <= _2y; _2z += 1) { //#5247
                $_.j = _2z; //#5244
                $_.char = $get($_.enc, $_.j); //#5245
                $put($_.revenc, ($_.enclen - $_.j) - 1, $_.char); //#5246
            } //#5246
            $_.enc = $_.revenc; //#5248
        } //#5248
        $puti($_.sbs, (($_.i - 1) * 4) + 3, $_.enc); //#5250
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ((($_.i - 1) * 7) + 13) + $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])); //#5251
    } //#5251
    $put($_.txt, 7, $a([$geti($_.barcode, 7, 1), ((6 * 7) + 21) + $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize - 2])); //#5254
    $puti($_.sbs, 27, $get($_.encs, 11)); //#5257
    $k[$j++] = Infinity; //#5259
    var _3X = $_.sbs; //#5259
    for (var _3Y = 0, _3Z = _3X.length; _3Y < _3Z; _3Y++) { //#5259
        $k[$j++] = $get(_3X, _3Y) - 48; //#5259
    } //#5259
    $_.sbs = $a(); //#5259
    if ($_.includetext) { //#5266
        $k[$j++] = Infinity; //#5261
        $k[$j++] = $_.height; //#5261
        $k[$j++] = $_.height; //#5261
        for (var _3f = 0, _3g = 12; _3f < _3g; _3f++) { //#5261
            $k[$j++] = $f($_.height - 0.075); //#5261
        } //#5261
        $k[$j++] = $_.height; //#5261
        $k[$j++] = $_.height; //#5261
        $k[$j++] = $_.height; //#5261
        $_.bhs = $a(); //#5261
        $k[$j++] = Infinity; //#5262
        $k[$j++] = 0; //#5262
        $k[$j++] = 0; //#5262
        for (var _3m = 0, _3n = 12; _3m < _3n; _3m++) { //#5262
            $k[$j++] = 0.075; //#5262
        } //#5262
        $k[$j++] = 0; //#5262
        $k[$j++] = 0; //#5262
        $k[$j++] = 0; //#5262
        $_.bbs = $a(); //#5262
    } else { //#5266
        $k[$j++] = Infinity; //#5264
        for (var _3p = 0, _3q = 17; _3p < _3q; _3p++) { //#5264
            $k[$j++] = $_.height; //#5264
        } //#5264
        $_.bhs = $a(); //#5264
        $k[$j++] = Infinity; //#5265
        for (var _3t = 0, _3u = 17; _3t < _3u; _3t++) { //#5265
            $k[$j++] = 0; //#5265
        } //#5265
        $_.bbs = $a(); //#5265
        $_.txt = $a([]); //#5266
    } //#5266
    $_.guardrightypos = 0; //#5268
    if ($ne($_.addon, "")) { //#5289
        $k[$j++] = Infinity; //#5272
        $k[$j++] = 'dontdraw'; //#5276
        $k[$j++] = true; //#5276
        $k[$j++] = 'includetext'; //#5276
        $k[$j++] = true; //#5276
        $k[$j++] = 'height'; //#5276
        $k[$j++] = $f($_.height - 0.15); //#5276
        $k[$j++] = 'textxoffset'; //#5276
        if ($ne($_.addontextxoffset, null)) { //#5276
            $k[$j++] = $_.addontextxoffset; //#5276
        } else { //#5276
            $k[$j++] = 51 + $_.addongap; //#5276
        } //#5276
        if ($ne($_.addontextyoffset, null)) { //#5277
            $k[$j++] = 'textyoffset'; //#5277
            $k[$j++] = $_.addontextyoffset; //#5277
        } //#5277
        $k[$j++] = 'textsize'; //#5278
        if ($ne($_.addontextsize, null)) { //#5278
            $k[$j++] = $_.addontextsize; //#5278
        } else { //#5278
            $k[$j++] = $_.textsize; //#5278
        } //#5278
        var _48 = $ne($_.addontextfont, "unset") ? $_.addontextfont : $_.textfont; //#5279
        $k[$j++] = 'textfont'; //#5279
        $k[$j++] = _48; //#5279
        $_.addopts = $d(); //#5280
        if ($_.addon.length == 2) { //#5281
            $k[$j++] = $_.addon; //#5281
            $k[$j++] = $_.addopts; //#5281
            bwipp_ean2(); //#5281
        } //#5281
        if ($_.addon.length == 5) { //#5282
            $k[$j++] = $_.addon; //#5282
            $k[$j++] = $_.addopts; //#5282
            bwipp_ean5(); //#5282
        } //#5282
        $_.addcode = $k[--$j]; //#5283
        $k[$j++] = Infinity; //#5284
        $aload($_.sbs); //#5284
        $k[$j++] = $_.addongap; //#5284
        $aload($get($_.addcode, "sbs")); //#5284
        $_.sbs = $a(); //#5284
        $k[$j++] = Infinity; //#5285
        $aload($_.bhs); //#5285
        $forall($get($_.addcode, "bhs"), function() { //#5285
            var _4P = $k[--$j]; //#5285
            $k[$j++] = $f(_4P - 0.075); //#5285
        }); //#5285
        $_.bhs = $a(); //#5285
        $k[$j++] = Infinity; //#5286
        $aload($_.bbs); //#5286
        $forall($get($_.addcode, "bbs"), function() { //#5286
            var _4U = $k[--$j]; //#5286
            $k[$j++] = $f(_4U + 0.075); //#5286
        }); //#5286
        $_.bbs = $a(); //#5286
        $k[$j++] = Infinity; //#5287
        $aload($_.txt); //#5287
        $aload($get($_.addcode, "txt")); //#5287
        $_.txt = $a(); //#5287
        $_.guardrightypos = ($_.height * 72) - 6; //#5288
    } //#5288
    $k[$j++] = Infinity; //#5292
    $k[$j++] = 'ren'; //#5299
    $k[$j++] = bwipp_renlinear; //#5299
    $k[$j++] = 'sbs'; //#5299
    $k[$j++] = $_.sbs; //#5299
    $k[$j++] = 'bhs'; //#5299
    $k[$j++] = $_.bhs; //#5299
    $k[$j++] = 'bbs'; //#5299
    $k[$j++] = $_.bbs; //#5299
    $k[$j++] = 'txt'; //#5299
    $k[$j++] = $_.txt; //#5299
    $k[$j++] = 'opt'; //#5299
    $k[$j++] = $_.options; //#5299
    $k[$j++] = 'guardrightpos'; //#5299
    if ($eq($_.addon, "")) { //#5299
        $k[$j++] = 9; //#5299
    } else { //#5299
        $k[$j++] = 5; //#5299
    } //#5299
    $k[$j++] = 'guardrightypos'; //#5302
    $k[$j++] = $_.guardrightypos; //#5302
    $k[$j++] = 'borderleft'; //#5302
    $k[$j++] = 9; //#5302
    $k[$j++] = 'borderright'; //#5302
    if ($eq($_.addon, "")) { //#5302
        $k[$j++] = 9; //#5302
    } else { //#5302
        $k[$j++] = 5; //#5302
    } //#5302
    $k[$j++] = 'bordertop'; //#5304
    $k[$j++] = 0; //#5304
    $k[$j++] = 'borderbottom'; //#5304
    $k[$j++] = 5; //#5304
    var _4j = $d(); //#5304
    $k[$j++] = _4j; //#5307
    if (!$_.dontdraw) { //#5307
        bwipp_renlinear(); //#5307
    } //#5307
    $_ = Object.getPrototypeOf($_); //#5309
    $_ = Object.getPrototypeOf($_); //#5311
} //bwipp_upce
function bwipp_isbn() {
    $_ = Object.create($_); //#5340
    $_.dontdraw = false; //#5343
    $_.includetext = false; //#5344
    $_.isbntextfont = 'OCR-A'; //#5345
    $_.isbntextsize = 8; //#5346
    $_.isbntextxoffset = null; //#5347
    $_.isbntextyoffset = null; //#5348
    $_.height = 1; //#5349
    $_.addongap = 12; //#5350
    $_.legacy = false; //#5351
    $k[$j++] = $_; //#5353
    bwipp_processoptions(); //#5353
    $_.options = $k[--$j]; //#5353
    $_.barcode = $k[--$j]; //#5354
    $search($_.barcode, " "); //#5357
    if ($k[--$j]) { //#5363
        $_.barcode = $k[--$j]; //#5358
        $j--; //#5359
        $_.addon = $k[--$j]; //#5360
    } else { //#5363
        $j--; //#5362
        $_.addon = ""; //#5363
    } //#5363
    if ((($_.barcode.length != 15) && ($_.barcode.length != 17)) && (($_.barcode.length != 11) && ($_.barcode.length != 13))) { //#5370
        $k[$j++] = 'bwipp.isbnBadLength#5369'; //#5369
        $k[$j++] = "ISBN-13 must be 15 or 17 characters including dashes. ISBN-10 must be 11 or 13 characters including dashes"; //#5369
        bwipp_raiseerror(); //#5369
    } //#5369
    if ((($_.addon.length != 0) && ($_.addon.length != 2)) && ($_.addon.length != 5)) { //#5373
        $k[$j++] = 'bwipp.isbnBadAddOnLength#5372'; //#5372
        $k[$j++] = "Add-on for ISBN must be 2 or 5 digits"; //#5372
        bwipp_raiseerror(); //#5372
    } //#5372
    if ($_.barcode.length >= 15) { //#5437
        var _F = $geti($_.barcode, 0, 4); //#5375
        if ($ne(_F, "978-") && $ne(_F, "979-")) { //#5377
            $k[$j++] = 'bwipp.isbn13badPrefix#5376'; //#5376
            $k[$j++] = "ISBN-13 prefix must be 978- or 979-"; //#5376
            bwipp_raiseerror(); //#5376
        } //#5376
        $_.wasdash = false; //#5378
        $_.numdash = 0; //#5378
        $_.numdigit = 0; //#5378
        var _H = $geti($_.barcode, 5, 9); //#5379
        for (var _I = 0, _J = _H.length; _I < _J; _I++) { //#5392
            var _K = $get(_H, _I); //#5392
            $k[$j++] = _K; //#5387
            if (_K == 45) { //#5387
                if ($_.wasdash) { //#5384
                    $k[$j++] = 'bwipp.isbn13adjacentDashes#5383'; //#5383
                    $k[$j++] = "ISBN-13 does not permit adjacent dashes"; //#5383
                    bwipp_raiseerror(); //#5383
                } //#5383
                $_.wasdash = true; //#5385
                $_.numdash = $_.numdash + 1; //#5386
            } //#5386
            var _N = $k[--$j]; //#5388
            if ((_N >= 48) && (_N <= 57)) { //#5391
                $_.wasdash = false; //#5389
                $_.numdigit = $_.numdigit + 1; //#5390
            } //#5390
        } //#5390
        if (($_.numdash != 2) || ($_.numdigit != 7)) { //#5395
            $k[$j++] = 'bwipp.isbn13numDashesDigits#5394'; //#5394
            $k[$j++] = "Incorrect number of dashes and digits for ISBN-13"; //#5394
            bwipp_raiseerror(); //#5394
        } //#5394
        var _S = $get($_.barcode, 14); //#5396
        if ((_S < 48) || (_S > 57)) { //#5398
            $k[$j++] = 'bwipp.isbn13character15#5397'; //#5397
            $k[$j++] = "ISBN-13 character 15 must be a digit"; //#5397
            bwipp_raiseerror(); //#5397
        } //#5397
        if ($_.barcode.length == 17) { //#5406
            if ($ne($geti($_.barcode, 15, 1), "-")) { //#5402
                $k[$j++] = 'bwipp.isbn13character16#5401'; //#5401
                $k[$j++] = "ISBN-13 penultimate character must be a dash"; //#5401
                bwipp_raiseerror(); //#5401
            } //#5401
            var _X = $get($_.barcode, 16); //#5403
            if ((_X < 48) || (_X > 57)) { //#5405
                $k[$j++] = 'bwipp.isbn13character17#5404'; //#5404
                $k[$j++] = "ISBN-13 final character must be a digit"; //#5404
                bwipp_raiseerror(); //#5404
            } //#5404
        } //#5404
    } else { //#5437
        var _Z = $get($_.barcode, 0); //#5408
        if ((_Z < 48) || (_Z > 57)) { //#5410
            $k[$j++] = 'bwipp.isbn10FirstDigit#5409'; //#5409
            $k[$j++] = "ISBN-10 first character must be a digit"; //#5409
            bwipp_raiseerror(); //#5409
        } //#5409
        $_.wasdash = false; //#5411
        $_.numdash = 0; //#5411
        $_.numdigit = 0; //#5411
        var _b = $geti($_.barcode, 1, 9); //#5412
        for (var _c = 0, _d = _b.length; _c < _d; _c++) { //#5425
            var _e = $get(_b, _c); //#5425
            $k[$j++] = _e; //#5420
            if (_e == 45) { //#5420
                if ($_.wasdash) { //#5417
                    $k[$j++] = 'bwipp.isbn10adjacentDashes#5416'; //#5416
                    $k[$j++] = "ISBN-10 does not permit adjacent dashes"; //#5416
                    bwipp_raiseerror(); //#5416
                } //#5416
                $_.wasdash = true; //#5418
                $_.numdash = $_.numdash + 1; //#5419
            } //#5419
            var _h = $k[--$j]; //#5421
            if ((_h >= 48) && (_h <= 57)) { //#5424
                $_.wasdash = false; //#5422
                $_.numdigit = $_.numdigit + 1; //#5423
            } //#5423
        } //#5423
        if (($_.numdash != 2) || ($_.numdigit != 7)) { //#5428
            $k[$j++] = 'bwipp.isbn10numDashesDigits#5427'; //#5427
            $k[$j++] = "Incorrect number of dashes and digits for ISBN-10"; //#5427
            bwipp_raiseerror(); //#5427
        } //#5427
        var _m = $get($_.barcode, 10); //#5429
        if ((_m < 48) || (_m > 57)) { //#5431
            $k[$j++] = 'bwipp.isbn10character11#5430'; //#5430
            $k[$j++] = "ISBN-10 character 11 must be a digit"; //#5430
            bwipp_raiseerror(); //#5430
        } //#5430
        if ($_.barcode.length == 13) { //#5439
            if ($ne($geti($_.barcode, 11, 1), "-")) { //#5435
                $k[$j++] = 'bwipp.isbn10character12#5434'; //#5434
                $k[$j++] = "ISBN-10 penultimate character must be a dash"; //#5434
                bwipp_raiseerror(); //#5434
            } //#5434
            var _r = $get($_.barcode, 12); //#5436
            if (((_r < 48) || (_r > 57)) && (_r != 88)) { //#5438
                $k[$j++] = 'bwipp.isbn10character13#5437'; //#5437
                $k[$j++] = "ISBN-10 final character must be a digit or X"; //#5437
                bwipp_raiseerror(); //#5437
            } //#5437
        } //#5437
    } //#5437
    $_.isbntxt = $_.barcode; //#5442
    if ($_.isbntxt.length <= 13) { //#5468
        $_.isbn = $s(10); //#5446
        $_.checksum = 0; //#5447
        $_.i = 0; //#5448
        $_.n = 0; //#5448
        for (;;) { //#5460
            $_.isbnchar = $f($get($_.isbntxt, $_.i) - 48); //#5450
            if ($_.isbnchar != -3) { //#5457
                $put($_.isbn, $_.n, $f($_.isbnchar + 48)); //#5452
                if ($_.n < 9) { //#5455
                    $_.checksum = $f($_.checksum + ((10 - $_.n) * $_.isbnchar)); //#5454
                } //#5454
                $_.n = $_.n + 1; //#5456
            } //#5456
            $_.i = $_.i + 1; //#5458
            if ($_.i == $_.isbntxt.length) { //#5459
                break; //#5459
            } //#5459
        } //#5459
        var _1B = ($f(11 - ($_.checksum % 11))) % 11; //#5461
        $k[$j++] = 'checksum'; //#5461
        $k[$j++] = _1B; //#5461
        if (_1B == 10) { //#5461
            $j--; //#5461
            $k[$j++] = 40; //#5461
        } //#5461
        var _1C = $k[--$j]; //#5461
        $_[$k[--$j]] = $f(_1C + 48); //#5461
        $_.isbn = $geti($_.isbn, 0, 9); //#5462
        if ($_.isbntxt.length == 13) { //#5467
            if ($get($_.isbntxt, 12) != $_.checksum) { //#5466
                $k[$j++] = 'bwipp.isbn10badCheckDigit#5465'; //#5465
                $k[$j++] = "Incorrect ISBN-10 check digit provided"; //#5465
                bwipp_raiseerror(); //#5465
            } //#5465
        } //#5465
    } //#5465
    if ((!$_.legacy) || ($_.isbntxt.length >= 15)) { //#5504
        if ($_.isbntxt.length <= 13) { //#5478
            $_.pad = $s(15); //#5474
            $puti($_.pad, 0, "978-"); //#5475
            $puti($_.pad, 4, $geti($_.isbntxt, 0, 11)); //#5476
            $_.isbntxt = $_.pad; //#5477
        } //#5477
        $_.isbn = $s(13); //#5481
        $_.checksum = 0; //#5482
        $_.i = 0; //#5483
        $_.n = 0; //#5483
        for (;;) { //#5495
            $_.isbnchar = $get($_.isbntxt, $_.i) - 48; //#5485
            if ($_.isbnchar != -3) { //#5492
                $put($_.isbn, $_.n, $_.isbnchar + 48); //#5487
                if ($_.n < 12) { //#5490
                    $k[$j++] = 'checksum'; //#5489
                    $k[$j++] = $_.isbnchar; //#5489
                    if (($_.n % 2) != 0) { //#5489
                        var _1e = $k[--$j]; //#5489
                        $k[$j++] = _1e * 3; //#5489
                    } //#5489
                    var _1g = $k[--$j]; //#5489
                    $_[$k[--$j]] = $f(_1g + $_.checksum); //#5489
                } //#5489
                $_.n = $_.n + 1; //#5491
            } //#5491
            $_.i = $_.i + 1; //#5493
            if ($_.i == $_.isbntxt.length) { //#5494
                break; //#5494
            } //#5494
        } //#5494
        $_.checksum = ((10 - ($_.checksum % 10)) % 10) + 48; //#5496
        $_.isbn = $geti($_.isbn, 0, 12); //#5497
        if ($_.isbntxt.length == 17) { //#5502
            if ($get($_.isbntxt, 16) != $_.checksum) { //#5501
                $k[$j++] = 'bwipp.isbn13badCheckDigit#5500'; //#5500
                $k[$j++] = "Incorrect ISBN-13 check digit provided"; //#5500
                bwipp_raiseerror(); //#5500
            } //#5500
        } //#5500
    } //#5500
    var _1u = ($_.isbn.length == 12) ? 22 : 18; //#5507
    $_.pad = $s(_1u); //#5507
    $puti($_.pad, 0, "ISBN "); //#5508
    $puti($_.pad, 5, $_.isbntxt); //#5509
    $put($_.pad, $_.pad.length - 2, 45); //#5510
    $put($_.pad, $_.pad.length - 1, $_.checksum); //#5511
    $_.isbntxt = $_.pad; //#5512
    $_.barcode = $s(12); //#5515
    if ($_.isbn.length == 9) { //#5520
        $puti($_.barcode, 0, "978"); //#5517
        $puti($_.barcode, 3, $_.isbn); //#5518
    } else { //#5520
        $puti($_.barcode, 0, $_.isbn); //#5520
    } //#5520
    if ($ne($_.addon, "")) { //#5530
        var _2E = $s((12 + $_.addon.length) + 1); //#5525
        $puti(_2E, 0, $_.barcode); //#5526
        $puti(_2E, 12, " "); //#5527
        $puti(_2E, 13, $_.addon); //#5528
        $_.barcode = _2E; //#5529
    } //#5529
    $put($_.options, "dontdraw", true); //#5533
    $put($_.options, "addongap", $_.addongap); //#5534
    $k[$j++] = 'args'; //#5535
    $k[$j++] = $_.barcode; //#5535
    $k[$j++] = $_.options; //#5535
    bwipp_ean13(); //#5535
    var _2M = $k[--$j]; //#5535
    $_[$k[--$j]] = _2M; //#5535
    if ($_.includetext) { //#5554
        if ($eq($_.isbntextxoffset, null)) { //#5541
            $k[$j++] = 'isbntextxoffset'; //#5540
            if ($_.isbn.length == 9) { //#5540
                $k[$j++] = -1; //#5540
            } else { //#5540
                $k[$j++] = -12; //#5540
            } //#5540
            var _2R = $k[--$j]; //#5540
            $_[$k[--$j]] = _2R; //#5540
        } //#5540
        if ($eq($_.isbntextyoffset, null)) { //#5544
            $_.isbntextyoffset = ($_.height * 72) + 3; //#5543
        } //#5543
        var _2W = $get($_.args, "txt") !== undefined; //#5545
        if (_2W) { //#5552
            $_.txt = $get($_.args, "txt"); //#5546
            $_.newtxt = $a($_.txt.length + 1); //#5547
            $puti($_.newtxt, 0, $_.txt); //#5548
            $put($_.newtxt, $_.newtxt.length - 1, $a([$_.isbntxt, $_.isbntextxoffset, $_.isbntextyoffset, $_.isbntextfont, $_.isbntextsize])); //#5549
            $put($_.args, "txt", $_.newtxt); //#5550
        } else { //#5552
            $put($_.args, "txt", $a([$a([$_.isbntxt, $_.isbntextxoffset, $_.isbntextyoffset, $_.isbntextfont, $_.isbntextsize])])); //#5552
        } //#5552
    } //#5552
    $put($_.args, "opt", $_.options); //#5556
    $k[$j++] = $_.args; //#5559
    if (!$_.dontdraw) { //#5559
        bwipp_renlinear(); //#5559
    } //#5559
    $_ = Object.getPrototypeOf($_); //#5561
} //bwipp_isbn
function bwipp_ismn() {
    $_ = Object.create($_); //#5590
    $_.dontdraw = false; //#5593
    $_.includetext = false; //#5594
    $_.ismntextfont = 'OCR-A'; //#5595
    $_.ismntextsize = 8; //#5596
    $_.ismntextxoffset = null; //#5597
    $_.ismntextyoffset = null; //#5598
    $_.height = 1; //#5599
    $_.addongap = 12; //#5600
    $_.legacy = false; //#5601
    $k[$j++] = $_; //#5603
    bwipp_processoptions(); //#5603
    $_.options = $k[--$j]; //#5603
    $_.barcode = $k[--$j]; //#5604
    $search($_.barcode, " "); //#5607
    if ($k[--$j]) { //#5613
        $_.barcode = $k[--$j]; //#5608
        $j--; //#5609
        $_.addon = $k[--$j]; //#5610
    } else { //#5613
        $j--; //#5612
        $_.addon = ""; //#5613
    } //#5613
    if ((($_.barcode.length != 15) && ($_.barcode.length != 17)) && (($_.barcode.length != 11) && ($_.barcode.length != 13))) { //#5620
        $k[$j++] = 'bwipp.ismnBadLength#5619'; //#5619
        $k[$j++] = "ISMN-13 must be 15 or 17 characters including dashes. ISMN-10 must be 11 or 13 characters including dashes"; //#5619
        bwipp_raiseerror(); //#5619
    } //#5619
    if ((($_.addon.length != 0) && ($_.addon.length != 2)) && ($_.addon.length != 5)) { //#5623
        $k[$j++] = 'bwipp.ismnBadAddOnLength#5622'; //#5622
        $k[$j++] = "Add-on for ISMN must be 2 or 5 digits"; //#5622
        bwipp_raiseerror(); //#5622
    } //#5622
    if ($_.barcode.length >= 15) { //#5690
        if ($ne($geti($_.barcode, 0, 4), "979-")) { //#5627
            $k[$j++] = 'bwipp.ismn13badPrefix#5626'; //#5626
            $k[$j++] = "ISMN-13 prefix must be 979-"; //#5626
            bwipp_raiseerror(); //#5626
        } //#5626
        $_.wasdash = false; //#5628
        $_.numdash = 0; //#5628
        $_.numdigit = 0; //#5628
        var _H = $geti($_.barcode, 5, 9); //#5629
        for (var _I = 0, _J = _H.length; _I < _J; _I++) { //#5642
            var _K = $get(_H, _I); //#5642
            $k[$j++] = _K; //#5637
            if (_K == 45) { //#5637
                if ($_.wasdash) { //#5634
                    $k[$j++] = 'bwipp.ismn13adjacentDashes#5633'; //#5633
                    $k[$j++] = "ISMN-13 does not permit adjacent dashes"; //#5633
                    bwipp_raiseerror(); //#5633
                } //#5633
                $_.wasdash = true; //#5635
                $_.numdash = $_.numdash + 1; //#5636
            } //#5636
            var _N = $k[--$j]; //#5638
            if ((_N >= 48) && (_N <= 57)) { //#5641
                $_.wasdash = false; //#5639
                $_.numdigit = $_.numdigit + 1; //#5640
            } //#5640
        } //#5640
        if (($_.numdash != 2) || ($_.numdigit != 7)) { //#5645
            $k[$j++] = 'bwipp.ismn13numDashesDigits#5644'; //#5644
            $k[$j++] = "Incorrect number of dashes and digits for ISMN-13"; //#5644
            bwipp_raiseerror(); //#5644
        } //#5644
        var _S = $get($_.barcode, 14); //#5646
        if ((_S < 48) || (_S > 57)) { //#5648
            $k[$j++] = 'bwipp.ismn13character15#5647'; //#5647
            $k[$j++] = "ISMN-13 character 15 must be a digit"; //#5647
            bwipp_raiseerror(); //#5647
        } //#5647
        if ($_.barcode.length == 17) { //#5656
            if ($ne($geti($_.barcode, 15, 1), "-")) { //#5652
                $k[$j++] = 'bwipp.ismn13character16#5651'; //#5651
                $k[$j++] = "ISMN-13 penultimate character must be a dash"; //#5651
                bwipp_raiseerror(); //#5651
            } //#5651
            var _X = $get($_.barcode, 16); //#5653
            if ((_X < 48) || (_X > 57)) { //#5655
                $k[$j++] = 'bwipp.ismn13character17#5654'; //#5654
                $k[$j++] = "ISMN-13 final character must be a digit"; //#5654
                bwipp_raiseerror(); //#5654
            } //#5654
        } //#5654
    } else { //#5690
        if ($ne($geti($_.barcode, 0, 2), "M-")) { //#5660
            $k[$j++] = 'bwipp.ismn10badPrefix#5659'; //#5659
            $k[$j++] = "ISMN-10 prefix must be M-"; //#5659
            bwipp_raiseerror(); //#5659
        } //#5659
        var _b = $get($_.barcode, 2); //#5661
        if ((_b < 48) || (_b > 57)) { //#5663
            $k[$j++] = 'bwipp.ismn10character3#5662'; //#5662
            $k[$j++] = "ISMN-10 character 3 must be a digit"; //#5662
            bwipp_raiseerror(); //#5662
        } //#5662
        $_.wasdash = false; //#5664
        $_.numdash = 0; //#5664
        $_.numdigit = 0; //#5664
        var _d = $geti($_.barcode, 3, 7); //#5665
        for (var _e = 0, _f = _d.length; _e < _f; _e++) { //#5678
            var _g = $get(_d, _e); //#5678
            $k[$j++] = _g; //#5673
            if (_g == 45) { //#5673
                if ($_.wasdash) { //#5670
                    $k[$j++] = 'bwipp.ismn10adjacentDashes#5669'; //#5669
                    $k[$j++] = "ISMN-10 does not permit adjacent dashes"; //#5669
                    bwipp_raiseerror(); //#5669
                } //#5669
                $_.wasdash = true; //#5671
                $_.numdash = $_.numdash + 1; //#5672
            } //#5672
            var _j = $k[--$j]; //#5674
            if ((_j >= 48) && (_j <= 57)) { //#5677
                $_.wasdash = false; //#5675
                $_.numdigit = $_.numdigit + 1; //#5676
            } //#5676
        } //#5676
        if (($_.numdash != 1) || ($_.numdigit != 6)) { //#5681
            $k[$j++] = 'bwipp.ismn10numDashesDigits#5680'; //#5680
            $k[$j++] = "Incorrect number of dashes and digits for ISMN-10"; //#5680
            bwipp_raiseerror(); //#5680
        } //#5680
        var _o = $get($_.barcode, 10); //#5682
        if ((_o < 48) || (_o > 57)) { //#5684
            $k[$j++] = 'bwipp.ismn10character11#5683'; //#5683
            $k[$j++] = "ISMN-10 character 11 must be a digit"; //#5683
            bwipp_raiseerror(); //#5683
        } //#5683
        if ($_.barcode.length == 13) { //#5692
            var _r = $geti($_.barcode, 11, 1); //#5686
            if ($ne(_r, "-")) { //#5688
                $k[$j++] = 'bwipp.ismn10character12#5687'; //#5687
                $k[$j++] = "ISMN-10 penultimate character must be a dash"; //#5687
                bwipp_raiseerror(); //#5687
            } //#5687
            var _t = $get($_.barcode, 12); //#5689
            if (((_t < 48) || (_t > 57)) && (_t != 88)) { //#5691
                $k[$j++] = 'bwipp.ismn10character13#5690'; //#5690
                $k[$j++] = "ISMN-10 final character must be a digit or X"; //#5690
                bwipp_raiseerror(); //#5690
            } //#5690
        } //#5690
    } //#5690
    $_.ismntxt = $_.barcode; //#5695
    $_.legacytxt = ""; //#5698
    if ($_.ismntxt.length <= 13) { //#5705
        $_.legacytxt = $_.ismntxt; //#5700
        $_.pad = $s($_.ismntxt.length + 4); //#5701
        $puti($_.pad, 0, "979-0-"); //#5702
        $puti($_.pad, 6, $geti($_.ismntxt, 2, $_.ismntxt.length - 2)); //#5703
        $_.ismntxt = $_.pad; //#5704
    } //#5704
    $_.ismn = $s(13); //#5708
    $_.checksum = 0; //#5709
    $_.i = 0; //#5710
    $_.n = 0; //#5710
    for (;;) { //#5726
        $_.ismnchar = $get($_.ismntxt, $_.i) - 48; //#5712
        if ($_.ismnchar != -3) { //#5723
            $put($_.ismn, $_.n, $_.ismnchar + 48); //#5714
            if ($_.n < 12) { //#5721
                if (($_.n % 2) == 0) { //#5719
                    $_.checksum = $_.ismnchar + $_.checksum; //#5717
                } else { //#5719
                    $_.checksum = ($_.ismnchar * 3) + $_.checksum; //#5719
                } //#5719
            } //#5719
            $_.n = $_.n + 1; //#5722
        } //#5722
        $_.i = $_.i + 1; //#5724
        if ($_.i == $_.ismntxt.length) { //#5725
            break; //#5725
        } //#5725
    } //#5725
    $_.checksum = ((10 - ($_.checksum % 10)) % 10) + 48; //#5727
    if (($_.barcode.length == 13) || ($_.barcode.length == 17)) { //#5734
        var _1Q = $_.barcode; //#5731
        if ($get(_1Q, _1Q.length - 1) != $_.checksum) { //#5733
            $k[$j++] = 'bwipp.ismnBadCheckDigit#5732'; //#5732
            $k[$j++] = "Incorrect ISMN check digit provided"; //#5732
            bwipp_raiseerror(); //#5732
        } //#5732
    } //#5732
    if ($_.legacy && $ne($_.legacytxt, "")) { //#5741
        $_.ismntxt = $_.legacytxt; //#5738
        $_.pad = $s(18); //#5739
    } else { //#5741
        $_.pad = $s(22); //#5741
    } //#5741
    $puti($_.pad, 0, "ISMN "); //#5743
    $puti($_.pad, 5, $_.ismntxt); //#5744
    $put($_.pad, $_.pad.length - 2, 45); //#5745
    $put($_.pad, $_.pad.length - 1, $_.checksum); //#5746
    $_.ismntxt = $_.pad; //#5747
    $_.barcode = $geti($_.ismn, 0, 12); //#5750
    if ($ne($_.addon, "")) { //#5759
        var _1l = $s((12 + $_.addon.length) + 1); //#5754
        $puti(_1l, 0, $_.barcode); //#5755
        $puti(_1l, 12, " "); //#5756
        $puti(_1l, 13, $_.addon); //#5757
        $_.barcode = _1l; //#5758
    } //#5758
    $put($_.options, "dontdraw", true); //#5762
    $put($_.options, "addongap", $_.addongap); //#5763
    $k[$j++] = 'args'; //#5764
    $k[$j++] = $_.barcode; //#5764
    $k[$j++] = $_.options; //#5764
    bwipp_ean13(); //#5764
    var _1t = $k[--$j]; //#5764
    $_[$k[--$j]] = _1t; //#5764
    if ($_.includetext) { //#5783
        if ($eq($_.ismntextxoffset, null)) { //#5770
            $k[$j++] = 'ismntextxoffset'; //#5769
            if ($_.ismntxt.length == 18) { //#5769
                $k[$j++] = -1; //#5769
            } else { //#5769
                $k[$j++] = -12; //#5769
            } //#5769
            var _1y = $k[--$j]; //#5769
            $_[$k[--$j]] = _1y; //#5769
        } //#5769
        if ($eq($_.ismntextyoffset, null)) { //#5773
            $_.ismntextyoffset = ($_.height * 72) + 3; //#5772
        } //#5772
        var _23 = $get($_.args, "txt") !== undefined; //#5774
        if (_23) { //#5781
            $_.txt = $get($_.args, "txt"); //#5775
            $_.newtxt = $a($_.txt.length + 1); //#5776
            $puti($_.newtxt, 0, $_.txt); //#5777
            $put($_.newtxt, $_.newtxt.length - 1, $a([$_.ismntxt, $_.ismntextxoffset, $_.ismntextyoffset, $_.ismntextfont, $_.ismntextsize])); //#5778
            $put($_.args, "txt", $_.newtxt); //#5779
        } else { //#5781
            $put($_.args, "txt", $a([$a([$_.ismntxt, $_.ismntextxoffset, $_.ismntextyoffset, $_.ismntextfont, $_.ismntextsize])])); //#5781
        } //#5781
    } //#5781
    $put($_.args, "opt", $_.options); //#5785
    $k[$j++] = $_.args; //#5788
    if (!$_.dontdraw) { //#5788
        bwipp_renlinear(); //#5788
    } //#5788
    $_ = Object.getPrototypeOf($_); //#5790
} //bwipp_ismn
function bwipp_issn() {
    $_ = Object.create($_); //#5819
    $_.dontdraw = false; //#5822
    $_.includetext = false; //#5823
    $_.issntextfont = 'OCR-A'; //#5824
    $_.issntextsize = 8; //#5825
    $_.issntextxoffset = null; //#5826
    $_.issntextyoffset = null; //#5827
    $_.height = 1; //#5828
    $_.addongap = 12; //#5829
    $k[$j++] = $_; //#5831
    bwipp_processoptions(); //#5831
    $_.options = $k[--$j]; //#5831
    $_.issntxt = $k[--$j]; //#5832
    $search($_.issntxt, " "); //#5835
    if ($k[--$j]) { //#5841
        $_.issntxt = $k[--$j]; //#5836
        $j--; //#5837
        $_.seqvar = $k[--$j]; //#5838
    } else { //#5841
        $j--; //#5840
        $_.seqvar = "00"; //#5841
    } //#5841
    $search($_.seqvar, " "); //#5845
    if ($k[--$j]) { //#5851
        $_.seqvar = $k[--$j]; //#5846
        $j--; //#5847
        $_.addon = $k[--$j]; //#5848
    } else { //#5851
        $j--; //#5850
        $_.addon = ""; //#5851
    } //#5851
    if (($_.issntxt.length != 8) && ($_.issntxt.length != 9)) { //#5857
        $k[$j++] = 'bwipp.issnBadLength#5856'; //#5856
        $k[$j++] = "ISSN must be 8 or 9 characters including dash, in the format XXXX-XXXX"; //#5856
        bwipp_raiseerror(); //#5856
    } //#5856
    var _D = $geti($_.issntxt, 0, 4); //#5858
    for (var _E = 0, _F = _D.length; _E < _F; _E++) { //#5862
        var _G = $get(_D, _E); //#5862
        if ((_G < 48) || (_G > 57)) { //#5861
            $k[$j++] = 'bwipp.issnFirstThroughFourthNotNumeric#5860'; //#5860
            $k[$j++] = "ISSN first four characters must be numeral characters"; //#5860
            bwipp_raiseerror(); //#5860
        } //#5860
    } //#5860
    if ($ne($geti($_.issntxt, 4, 1), "-")) { //#5865
        $k[$j++] = 'bwipp.issnNeedsDash#5864'; //#5864
        $k[$j++] = "ISSN fifth character must be a dash"; //#5864
        bwipp_raiseerror(); //#5864
    } //#5864
    var _K = $geti($_.issntxt, 5, 3); //#5866
    for (var _L = 0, _M = _K.length; _L < _M; _L++) { //#5870
        var _N = $get(_K, _L); //#5870
        if ((_N < 48) || (_N > 57)) { //#5869
            $k[$j++] = 'bwipp.issnSixthThroughEighthNotNumeric#5868'; //#5868
            $k[$j++] = "ISSN sixth through eighth characters must be numerals"; //#5868
            bwipp_raiseerror(); //#5868
        } //#5868
    } //#5868
    if ($_.issntxt.length == 9) { //#5875
        var _Q = $get($_.issntxt, 8); //#5872
        if (((_Q < 48) || (_Q > 57)) && (_Q != 88)) { //#5874
            $k[$j++] = 'bwipp.issnNinthCharacterBadFormat#5873'; //#5873
            $k[$j++] = "ISSN ninth character must be a number or the character X"; //#5873
            bwipp_raiseerror(); //#5873
        } //#5873
    } //#5873
    if ($_.seqvar.length != 2) { //#5878
        $k[$j++] = 'bwipp.issnBadSequenceVariantLength#5877'; //#5877
        $k[$j++] = "Sequence variant for ISSN must be 2 digits"; //#5877
        bwipp_raiseerror(); //#5877
    } //#5877
    $forall($_.seqvar, function() { //#5883
        var _T = $k[--$j]; //#5880
        if ((_T < 48) || (_T > 57)) { //#5882
            $k[$j++] = 'bwipp.issnSequenceVariantBadCharacter#5881'; //#5881
            $k[$j++] = "Sequence variant for ISSN must contain only digits"; //#5881
            bwipp_raiseerror(); //#5881
        } //#5881
    }); //#5881
    if ((($_.addon.length != 0) && ($_.addon.length != 2)) && ($_.addon.length != 5)) { //#5886
        $k[$j++] = 'bwipp.issnBadAddOnLength#5885'; //#5885
        $k[$j++] = "Add-on for ISSN must be 2 or 5 digits"; //#5885
        bwipp_raiseerror(); //#5885
    } //#5885
    $_.issn = $s(8); //#5889
    $_.checksum = 0; //#5890
    $_.i = 0; //#5891
    $_.n = 0; //#5891
    for (;;) { //#5903
        $_.issnchar = $f($get($_.issntxt, $_.i) - 48); //#5893
        if ($_.issnchar != -3) { //#5900
            $put($_.issn, $_.n, $f($_.issnchar + 48)); //#5895
            if ($_.n < 7) { //#5898
                $_.checksum = $f($_.checksum + ($_.issnchar * (8 - $_.n))); //#5897
            } //#5897
            $_.n = $_.n + 1; //#5899
        } //#5899
        $_.i = $_.i + 1; //#5901
        if ($_.i == $_.issntxt.length) { //#5902
            break; //#5902
        } //#5902
    } //#5902
    $_.checksum = ($f(11 - ($_.checksum % 11))) % 11; //#5904
    var _p = $f($_.checksum + 48); //#5905
    $k[$j++] = 'checksum'; //#5905
    $k[$j++] = _p; //#5905
    if (_p == 58) { //#5905
        $j--; //#5905
        $k[$j++] = 88; //#5905
    } //#5905
    var _q = $k[--$j]; //#5905
    var _r = $k[--$j]; //#5905
    $_[_r] = _q; //#5905
    if ($_.issntxt.length == 9) { //#5910
        if ($get($_.issntxt, 8) != $_.checksum) { //#5909
            $k[$j++] = 'bwipp.issnBadCheckDigit#5908'; //#5908
            $k[$j++] = "Incorrect ISSN check digit provided"; //#5908
            bwipp_raiseerror(); //#5908
        } //#5908
    } //#5908
    $_.pad = $s(14); //#5913
    $puti($_.pad, 0, "ISSN "); //#5914
    $puti($_.pad, 5, $_.issntxt); //#5915
    $put($_.pad, 13, $_.checksum); //#5916
    $_.issntxt = $_.pad; //#5917
    $_.barcode = $geti($_.issn, 0, 7); //#5920
    $_.barcode = $s(12); //#5923
    $puti($_.barcode, 0, "977"); //#5924
    $puti($_.barcode, 3, $_.issn); //#5925
    $puti($_.barcode, 10, $_.seqvar); //#5926
    if ($ne($_.addon, "")) { //#5935
        var _1D = $s((12 + $_.addon.length) + 1); //#5930
        $puti(_1D, 0, $_.barcode); //#5931
        $puti(_1D, 12, " "); //#5932
        $puti(_1D, 13, $_.addon); //#5933
        $_.barcode = _1D; //#5934
    } //#5934
    $put($_.options, "dontdraw", true); //#5938
    $put($_.options, "addongap", $_.addongap); //#5939
    $k[$j++] = 'args'; //#5940
    $k[$j++] = $_.barcode; //#5940
    $k[$j++] = $_.options; //#5940
    bwipp_ean13(); //#5940
    var _1L = $k[--$j]; //#5940
    $_[$k[--$j]] = _1L; //#5940
    if ($_.includetext) { //#5955
        if ($eq($_.issntextxoffset, null)) { //#5944
            $_.issntextxoffset = 10; //#5944
        } //#5944
        if ($eq($_.issntextyoffset, null)) { //#5945
            $_.issntextyoffset = ($_.height * 72) + 3; //#5945
        } //#5945
        var _1S = $get($_.args, "txt") !== undefined; //#5946
        if (_1S) { //#5953
            $_.txt = $get($_.args, "txt"); //#5947
            $_.newtxt = $a($_.txt.length + 1); //#5948
            $puti($_.newtxt, 0, $_.txt); //#5949
            $put($_.newtxt, $_.newtxt.length - 1, $a([$_.issntxt, $_.issntextxoffset, $_.issntextyoffset, $_.issntextfont, $_.issntextsize])); //#5950
            $put($_.args, "txt", $_.newtxt); //#5951
        } else { //#5953
            $put($_.args, "txt", $a([$a([$_.issntxt, $_.issntextxoffset, $_.issntextyoffset, $_.issntextfont, $_.issntextsize])])); //#5953
        } //#5953
    } //#5953
    $put($_.args, "opt", $_.options); //#5957
    $k[$j++] = $_.args; //#5960
    if (!$_.dontdraw) { //#5960
        bwipp_renlinear(); //#5960
    } //#5960
    $_ = Object.getPrototypeOf($_); //#5962
} //bwipp_issn
function bwipp_mands() {
    $_ = Object.create($_); //#5991
    $_.dontdraw = false; //#5994
    $_.includetext = false; //#5995
    $k[$j++] = $_; //#5997
    bwipp_processoptions(); //#5997
    $_.options = $k[--$j]; //#5997
    $_.barcode = $k[--$j]; //#5998
    $_.barlen = $_.barcode.length; //#6000
    if (($_.barlen != 7) && ($_.barlen != 8)) { //#6005
        $k[$j++] = 'bwipp.MandSbadLength#6004'; //#6004
        $k[$j++] = "M&S barcode must be 7 or 8 characters"; //#6004
        bwipp_raiseerror(); //#6004
    } //#6004
    if ($_.barlen == 7) { //#6009
        var _7 = $strcpy($s(8), "00000000"); //#6008
        $puti(_7, 1, $_.barcode); //#6008
        $_.barcode = _7; //#6008
    } //#6008
    $put($_.options, "dontdraw", true); //#6012
    $k[$j++] = 'args'; //#6013
    $k[$j++] = $_.barcode; //#6013
    $k[$j++] = $_.options; //#6013
    bwipp_ean8(); //#6013
    var _C = $k[--$j]; //#6013
    $_[$k[--$j]] = _C; //#6013
    var _F = $get($_.args, "bbs"); //#6016
    $put(_F, 10, $get(_F, 2)); //#6017
    $put(_F, 11, $get(_F, 2)); //#6018
    var _J = $get($_.args, "bhs"); //#6019
    $put(_J, 10, $get(_J, 2)); //#6020
    $put(_J, 11, $get(_J, 2)); //#6021
    $_.txt = $get($_.args, "txt"); //#6024
    if ($_.barlen == 7) { //#6032
        for (var _P = 0; _P <= 6; _P += 1) { //#6030
            var _Q = $_.txt; //#6027
            $puti($get($get(_Q, _P), 0), 0, $get($get(_Q, _P + 1), 0)); //#6029
        } //#6029
        $puti($get($get($_.txt, 7), 0), 0, " "); //#6031
    } //#6031
    var _Y = $a(10); //#6035
    $puti(_Y, 0, $_.txt); //#6035
    $_.txt = _Y; //#6035
    var _b = $get($_.txt, 0); //#6036
    $put($_.txt, 8, $arrcpy($a(_b.length), _b)); //#6036
    var _g = $get($_.txt, 0); //#6037
    $put($_.txt, 9, $arrcpy($a(_g.length), _g)); //#6037
    $put($get($_.txt, 8), 0, "M"); //#6038
    $put($get($_.txt, 8), 1, -12); //#6038
    $put($get($_.txt, 9), 0, "S"); //#6039
    var _r = $get($_.txt, 9); //#6039
    $put(_r, 1, 69); //#6039
    $put($_.args, "txt", $_.txt); //#6041
    $put($_.args, "opt", $_.options); //#6042
    $k[$j++] = $_.args; //#6045
    if (!$_.dontdraw) { //#6045
        bwipp_renlinear(); //#6045
    } //#6045
    $_ = Object.getPrototypeOf($_); //#6047
} //bwipp_mands
function bwipp_code128() {
    $_ = Object.create($_); //#6078
    $_.dontdraw = false; //#6081
    $_.includetext = false; //#6082
    $_.textfont = "OCR-B"; //#6083
    $_.textsize = 10; //#6084
    $_.textxoffset = 0; //#6085
    $_.textyoffset = -8; //#6086
    $_.height = 1; //#6087
    $_.encoding = "auto"; //#6088
    $_.raw = false; //#6089
    $_.parse = false; //#6090
    $_.parsefnc = false; //#6091
    $k[$j++] = $_; //#6093
    bwipp_processoptions(); //#6093
    $_.options = $k[--$j]; //#6093
    $_.barcode = $k[--$j]; //#6094
    bwipp_loadctx(bwipp_code128) //#6096
    if (!bwipp_code128.__6105__) { //#6105
        $_ = Object.create($_); //#6105
        $_.sta = -1; //#6100
        $_.stb = -2; //#6100
        $_.stc = -3; //#6100
        $_.swa = -4; //#6101
        $_.swb = -5; //#6101
        $_.swc = -6; //#6101
        $_.fn1 = -7; //#6102
        $_.fn2 = -8; //#6102
        $_.fn3 = -9; //#6102
        $_.fn4 = -10; //#6103
        $_.sft = -11; //#6103
        $_.stp = -12; //#6103
        $_.lka = -13; //#6104
        $_.lkc = -14; //#6104
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code128.$ctx[id] = $_[id]); //#6104
        bwipp_code128.__6105__ = 1; //#6104
        $_ = Object.getPrototypeOf($_); //#6104
    } //#6104
    var _6 = $_.fn1; //#6112
    var _B = new Map([
        ["parse", $_.parse],
        ["parsefnc", $_.parsefnc],
        ["FNC1", $_.fn1],
        ["FNC1", _6],
        ["FNC2", $_.fn2],
        ["FNC3", $_.fn3],
        ["LNKA", $_.lka],
        ["LNKC", $_.lkc]
    ]); //#6117
    $_.fncvals = _B; //#6118
    $k[$j++] = 'msg'; //#6119
    $k[$j++] = $_.barcode; //#6119
    $k[$j++] = $_.fncvals; //#6119
    bwipp_parseinput(); //#6119
    var _E = $k[--$j]; //#6119
    $_[$k[--$j]] = _E; //#6119
    $_.msglen = $_.msg.length; //#6120
    if (!bwipp_code128.__6178__) { //#6178
        $_ = Object.create($_); //#6178
        $_.charmaps = $a([$a([32, 32, "00"]), $a(["!", "!", "01"]), $a(["\"", "\"", "02"]), $a(["#", "#", "03"]), $a(["$", "$", "04"]), $a(["%", "%", "05"]), $a(["&", "&", "06"]), $a(["'", "'", "07"]), $a([40, 40, "08"]), $a([41, 41, "09"]), $a(["*", "*", "10"]), $a(["+", "+", "11"]), $a([",", ",", "12"]), $a(["-", "-", "13"]), $a([".", ".", "14"]), $a(["/", "/", "15"]), $a(["0", "0", "16"]), $a(["1", "1", "17"]), $a(["2", "2", "18"]), $a(["3", "3", "19"]), $a(["4", "4", "20"]), $a(["5", "5", "21"]), $a(["6", "6", "22"]), $a(["7", "7", "23"]), $a(["8", "8", "24"]), $a(["9", "9", "25"]), $a([":", ":", "26"]), $a([";", ";", "27"]), $a(["<", "<", "28"]), $a(["=", "=", "29"]), $a([">", ">", "30"]), $a(["?", "?", "31"]), $a(["@", "@", "32"]), $a(["A", "A", "33"]), $a(["B", "B", "34"]), $a(["C", "C", "35"]), $a(["D", "D", "36"]), $a(["E", "E", "37"]), $a(["F", "F", "38"]), $a(["G", "G", "39"]), $a(["H", "H", "40"]), $a(["I", "I", "41"]), $a(["J", "J", "42"]), $a(["K", "K", "43"]), $a(["L", "L", "44"]), $a(["M", "M", "45"]), $a(["N", "N", "46"]), $a(["O", "O", "47"]), $a(["P", "P", "48"]), $a(["Q", "Q", "49"]), $a(["R", "R", "50"]), $a(["S", "S", "51"]), $a(["T", "T", "52"]), $a(["U", "U", "53"]), $a(["V", "V", "54"]), $a(["W", "W", "55"]), $a(["X", "X", "56"]), $a(["Y", "Y", "57"]), $a(["Z", "Z", "58"]), $a(["[", "[", "59"]), $a([92, 92, "60"]), $a(["]", "]", "61"]), $a(["^", "^", "62"]), $a(["_", "_", "63"]), $a([0, "`", "64"]), $a([1, "a", "65"]), $a([2, "b", "66"]), $a([3, "c", "67"]), $a([4, "d", "68"]), $a([5, "e", "69"]), $a([6, "f", "70"]), $a([7, "g", "71"]), $a([8, "h", "72"]), $a([9, "i", "73"]), $a([10, "j", "74"]), $a([11, "k", "75"]), $a([12, "l", "76"]), $a([13, "m", "77"]), $a([14, "n", "78"]), $a([15, "o", "79"]), $a([16, "p", "80"]), $a([17, "q", "81"]), $a([18, "r", "82"]), $a([19, "s", "83"]), $a([20, "t", "84"]), $a([21, "u", "85"]), $a([22, "v", "86"]), $a([23, "w", "87"]), $a([24, "x", "88"]), $a([25, "y", "89"]), $a([26, "z", "90"]), $a([27, "{", "91"]), $a([28, "|", "92"]), $a([29, "}", "93"]), $a([30, "~", "94"]), $a([31, 127, "95"]), $a([$_.fn3, $_.fn3, "96"]), $a([$_.fn2, $_.fn2, "97"]), $a([$_.sft, $_.sft, "98"]), $a([$_.swc, $_.swc, "99"]), $a([$_.swb, $_.fn4, $_.swb]), $a([$_.fn4, $_.swa, $_.swa]), $a([$_.fn1, $_.fn1, $_.fn1]), $a([$_.sta, $_.sta, $_.sta]), $a([$_.stb, $_.stb, $_.stb]), $a([$_.stc, $_.stc, $_.stc]), $a([$_.stp, $_.stp, $_.stp])]); //#6162
        $_.charvals = $a([new Map, new Map, new Map]); //#6165
        for (var _2X = 0, _2W = $_.charmaps.length - 1; _2X <= _2W; _2X += 1) { //#6174
            $_.i = _2X; //#6167
            $_.encs = $get($_.charmaps, $_.i); //#6168
            for (var _2b = 0; _2b <= 2; _2b += 1) { //#6173
                $_.j = _2b; //#6170
                var _2e = $get($_.encs, $_.j); //#6171
                $k[$j++] = _2e; //#6171
                if ($eq($type(_2e), 'stringtype')) { //#6171
                    var _2h = $get($k[--$j], 0); //#6171
                    $k[$j++] = _2h; //#6171
                } //#6171
                $put($get($_.charvals, $_.j), $k[--$j], $_.i); //#6172
            } //#6172
        } //#6172
        $_.seta = $get($_.charvals, 0); //#6175
        $_.setb = $get($_.charvals, 1); //#6176
        $_.setc = $get($_.charvals, 2); //#6177
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code128.$ctx[id] = $_[id]); //#6177
        bwipp_code128.__6178__ = 1; //#6177
        $_ = Object.getPrototypeOf($_); //#6177
    } //#6177
    $put($_.seta, $_.lka, $get($_.seta, $_.swb)); //#6181
    $put($_.seta, $_.lkc, $get($_.seta, $_.swc)); //#6181
    $put($_.setb, $_.lka, $get($_.setb, $_.swc)); //#6182
    $put($_.setb, $_.lkc, $get($_.setb, $_.swa)); //#6182
    $put($_.setc, $_.lka, $get($_.setc, $_.swa)); //#6183
    $put($_.setc, $_.lkc, $get($_.setc, $_.swb)); //#6183
    if ($_.raw) { //#6185
        $_.encoding = "raw"; //#6185
    } //#6185
    if ($eq($_.encoding, "raw")) { //#6199
        $_.cws = $a($_.barcode.length); //#6188
        $_.i = 0; //#6189
        $_.j = 0; //#6189
        for (;;) { //#6196
            if ($_.i == $_.barcode.length) { //#6191
                break; //#6191
            } //#6191
            $_.cw = $cvi($geti($_.barcode, $_.i + 1, 3)); //#6192
            $put($_.cws, $_.j, $_.cw); //#6193
            $_.i = $_.i + 4; //#6194
            $_.j = $_.j + 1; //#6195
        } //#6195
        $_.cws = $geti($_.cws, 0, $_.j); //#6197
        $_.text = ""; //#6198
    } //#6198
    if ($eq($_.encoding, "auto")) { //#6424
        $_.text = $s($_.msglen); //#6203
        for (var _3k = 0, _3j = $_.msglen - 1; _3k <= _3j; _3k += 1) { //#6207
            $_.i = _3k; //#6205
            var _3p = $get($_.msg, $_.i); //#6206
            $k[$j++] = $_.text; //#6206
            $k[$j++] = $_.i; //#6206
            $k[$j++] = _3p; //#6206
            if (_3p < 0) { //#6206
                $j--; //#6206
                $k[$j++] = 32; //#6206
            } //#6206
            var _3q = $k[--$j]; //#6206
            var _3r = $k[--$j]; //#6206
            $put($k[--$j], _3r, _3q); //#6206
        } //#6206
        $k[$j++] = Infinity; //#6210
        for (var _3u = 0, _3v = $_.msglen; _3u < _3v; _3u++) { //#6210
            $k[$j++] = 0; //#6210
        } //#6210
        $k[$j++] = 0; //#6210
        $_.numSA = $a(); //#6210
        $k[$j++] = Infinity; //#6211
        for (var _3y = 0, _3z = $_.msglen; _3y < _3z; _3y++) { //#6211
            $k[$j++] = 0; //#6211
        } //#6211
        $k[$j++] = 0; //#6211
        $_.numEA = $a(); //#6211
        for (var _42 = $_.msglen - 1; _42 >= 0; _42 -= 1) { //#6221
            $_.i = _42; //#6213
            if ($get($_.msg, $_.i) >= 0) { //#6220
                if ($get($_.msg, $_.i) >= 128) { //#6218
                    $put($_.numEA, $_.i, $f($get($_.numEA, $_.i + 1) + 1)); //#6216
                } else { //#6218
                    $put($_.numSA, $_.i, $f($get($_.numSA, $_.i + 1) + 1)); //#6218
                } //#6218
            } //#6218
        } //#6218
        $_.ea = false; //#6224
        $_.msgtmp = $a([]); //#6224
        for (var _4M = 0, _4L = $_.msglen - 1; _4M <= _4L; _4M += 1) { //#6239
            $_.i = _4M; //#6226
            $_.c = $get($_.msg, $_.i); //#6227
            if ((!$xo($_.ea, $_.c < 128)) && ($_.c >= 0)) { //#6237
                if ($_.ea) { //#6229
                    $k[$j++] = $_.numSA; //#6229
                } else { //#6229
                    $k[$j++] = $_.numEA; //#6229
                } //#6229
                var _4Y = $get($k[--$j], $_.i); //#6229
                var _4b = ($f(_4Y + $_.i) == $_.msglen) ? 3 : 5; //#6230
                if (_4Y < _4b) { //#6235
                    $k[$j++] = Infinity; //#6232
                    $aload($_.msgtmp); //#6232
                    $k[$j++] = $_.fn4; //#6232
                    $_.msgtmp = $a(); //#6232
                } else { //#6235
                    $k[$j++] = Infinity; //#6234
                    $aload($_.msgtmp); //#6234
                    $k[$j++] = $_.fn4; //#6234
                    $k[$j++] = $_.fn4; //#6234
                    $_.msgtmp = $a(); //#6234
                    $_.ea = !$_.ea; //#6235
                } //#6235
            } //#6235
            $k[$j++] = Infinity; //#6238
            $aload($_.msgtmp); //#6238
            if ($_.c >= 0) { //#6238
                $k[$j++] = $_.c & 127; //#6238
            } else { //#6238
                $k[$j++] = $_.c; //#6238
            } //#6238
            $_.msgtmp = $a(); //#6238
        } //#6238
        $_.msg = $_.msgtmp; //#6240
        $_.msglen = $_.msg.length; //#6241
        $_.numsscr = function() {
            $_.n = 0; //#6245
            $_.s = 0; //#6245
            $_.p = $k[--$j]; //#6246
            for (;;) { //#6259
                if ($_.p >= $_.msglen) { //#6247
                    break; //#6247
                } //#6247
                var _4w = $get($_.msg, $_.p); //#6248
                var _4y = $get($_.setc, _4w) !== undefined; //#6249
                $k[$j++] = _4w; //#6249
                if (!_4y) { //#6249
                    $j--; //#6249
                    break; //#6249
                } //#6249
                var _4z = $k[--$j]; //#6250
                $k[$j++] = _4z; //#6255
                if (_4z <= -1) { //#6254
                    var _51 = $k[--$j]; //#6252
                    if ((_51 == $_.fn1) && (($_.s % 2) == 0)) { //#6252
                        $_.s = $_.s + 1; //#6252
                    } else { //#6252
                        break; //#6252
                    } //#6252
                } else { //#6254
                    $j--; //#6254
                } //#6254
                $_.n = $_.n + 1; //#6256
                $_.s = $_.s + 1; //#6257
                $_.p = $f($_.p + 1); //#6258
            } //#6258
            $k[$j++] = $_.n; //#6260
            $k[$j++] = $_.s; //#6260
        }; //#6260
        $_.enca = function() {
            $put($_.cws, $_.j, $get($_.seta, $k[--$j])); //#6265
            $_.j = $_.j + 1; //#6266
        }; //#6266
        $_.encb = function() {
            $put($_.cws, $_.j, $get($_.setb, $k[--$j])); //#6269
            $_.j = $_.j + 1; //#6270
        }; //#6270
        $_.encc = function() {
            var _5L = $k[--$j]; //#6273
            $k[$j++] = _5L; //#6277
            if ($ne($type(_5L), 'arraytype')) { //#6276
                var _5P = $get($_.setc, $k[--$j]); //#6274
                $k[$j++] = _5P; //#6274
            } else { //#6276
                $aload($k[--$j]); //#6276
                var _5R = $k[--$j]; //#6276
                var _5S = $k[--$j]; //#6276
                $k[$j++] = $f($f(_5R - 48) + ($f(_5S - 48) * 10)); //#6276
            } //#6276
            $put($_.cws, $_.j, $k[--$j]); //#6278
            $_.j = $_.j + 1; //#6279
        }; //#6279
        $_.anotb = function() {
            var _5X = $k[--$j]; //#6283
            var _5Z = $get($_.seta, _5X) !== undefined; //#6283
            var _5b = $get($_.setb, _5X) !== undefined; //#6283
            $k[$j++] = _5Z && (!_5b); //#6283
        }; //#6283
        $_.bnota = function() {
            var _5c = $k[--$j]; //#6284
            var _5e = $get($_.setb, _5c) !== undefined; //#6284
            var _5g = $get($_.seta, _5c) !== undefined; //#6284
            $k[$j++] = _5e && (!_5g); //#6284
        }; //#6284
        $k[$j++] = Infinity; //#6287
        for (var _5i = 0, _5j = $_.msg.length; _5i < _5j; _5i++) { //#6287
            $k[$j++] = 0; //#6287
        } //#6287
        $k[$j++] = 9999; //#6287
        $_.nextanotb = $a(); //#6287
        $k[$j++] = Infinity; //#6288
        for (var _5m = 0, _5n = $_.msg.length; _5m < _5n; _5m++) { //#6288
            $k[$j++] = 0; //#6288
        } //#6288
        $k[$j++] = 9999; //#6288
        $_.nextbnota = $a(); //#6288
        for (var _5q = $_.msg.length - 1; _5q >= 0; _5q -= 1) { //#6301
            $_.i = _5q; //#6290
            $k[$j++] = $get($_.msg, $_.i); //#6291
            $_.anotb(); //#6291
            if ($k[--$j]) { //#6294
                $put($_.nextanotb, $_.i, 0); //#6292
            } else { //#6294
                $put($_.nextanotb, $_.i, $f($get($_.nextanotb, $_.i + 1) + 1)); //#6294
            } //#6294
            $k[$j++] = $get($_.msg, $_.i); //#6296
            $_.bnota(); //#6296
            if ($k[--$j]) { //#6299
                $put($_.nextbnota, $_.i, 0); //#6297
            } else { //#6299
                $put($_.nextbnota, $_.i, $f($get($_.nextbnota, $_.i + 1) + 1)); //#6299
            } //#6299
        } //#6299
        $_.abeforeb = function() {
            var _6D = $k[--$j]; //#6304
            $k[$j++] = $lt($get($_.nextanotb, _6D), $get($_.nextbnota, _6D)); //#6304
        }; //#6304
        $_.bbeforea = function() {
            var _6I = $k[--$j]; //#6305
            $k[$j++] = $lt($get($_.nextbnota, _6I), $get($_.nextanotb, _6I)); //#6305
        }; //#6305
        $_.cws = $a(($_.barcode.length * 2) + 3); //#6307
        $_.j = 0; //#6310
        if ($_.msglen > 0) { //#6311
            $k[$j++] = 0; //#6311
            $_.numsscr(); //#6311
        } else { //#6311
            $k[$j++] = -1; //#6311
            $k[$j++] = -1; //#6311
        } //#6311
        $_.nums = $k[--$j]; //#6311
        $_.nchars = $k[--$j]; //#6311
        for (;;) { //#6336
            if ($_.msglen == 0) { //#6317
                $k[$j++] = $_.stb; //#6314
                $_.enca(); //#6314
                $_.cset = "setb"; //#6315
                break; //#6316
            } //#6316
            if (($_.msglen == 2) && ($_.nums == 2)) { //#6322
                $k[$j++] = $_.stc; //#6319
                $_.enca(); //#6319
                $_.cset = "setc"; //#6320
                break; //#6321
            } //#6321
            if ($_.nums >= 4) { //#6327
                $k[$j++] = $_.stc; //#6324
                $_.enca(); //#6324
                $_.cset = "setc"; //#6325
                break; //#6326
            } //#6326
            $k[$j++] = 0; //#6328
            $_.abeforeb(); //#6328
            if ($k[--$j]) { //#6332
                $k[$j++] = $_.sta; //#6329
                $_.enca(); //#6329
                $_.cset = "seta"; //#6330
                break; //#6331
            } //#6331
            $k[$j++] = $_.stb; //#6333
            $_.enca(); //#6333
            $_.cset = "setb"; //#6334
            break; //#6335
        } //#6335
        $_.i = 0; //#6339
        for (;;) { //#6422
            if ($_.i == $_.msglen) { //#6340
                break; //#6340
            } //#6340
            $k[$j++] = $_.i; //#6342
            $_.numsscr(); //#6342
            $_.nums = $k[--$j]; //#6342
            $_.nchars = $k[--$j]; //#6342
            for (;;) { //#6420
                if ((($eq($_.cset, "seta") || $eq($_.cset, "setb")) && ($_.nums >= 4)) && ($get($_.msg, $_.i) != $_.fn1)) { //#6359
                    if (($_.nums % 2) == 0) { //#6357
                        $k[$j++] = $_.swc; //#6349
                        if ($eq($_.cset, "seta")) { //#6349
                            $_.enca(); //#6349
                        } else { //#6349
                            $_.encb(); //#6349
                        } //#6349
                        $_.cset = "setc"; //#6350
                        break; //#6351
                    } else { //#6357
                        $k[$j++] = $get($_.msg, $_.i); //#6353
                        if ($eq($_.cset, "seta")) { //#6353
                            $_.enca(); //#6353
                        } else { //#6353
                            $_.encb(); //#6353
                        } //#6353
                        $_.i = $_.i + 1; //#6354
                        $k[$j++] = $_.swc; //#6355
                        if ($eq($_.cset, "seta")) { //#6355
                            $_.enca(); //#6355
                        } else { //#6355
                            $_.encb(); //#6355
                        } //#6355
                        $_.cset = "setc"; //#6356
                        break; //#6357
                    } //#6357
                } //#6357
                $k[$j++] = $eq($_.cset, "setb"); //#6360
                $k[$j++] = $get($_.msg, $_.i); //#6360
                $_.anotb(); //#6360
                var _72 = $k[--$j]; //#6360
                var _73 = $k[--$j]; //#6360
                if ((_73 && _72)) { //#6372
                    if ($_.i < ($_.msglen - 1)) { //#6368
                        $k[$j++] = $_.i + 1; //#6362
                        $_.bbeforea(); //#6362
                        if ($k[--$j]) { //#6367
                            $k[$j++] = $_.sft; //#6363
                            $_.encb(); //#6363
                            $k[$j++] = $get($_.msg, $_.i); //#6364
                            $_.enca(); //#6364
                            $_.i = $_.i + 1; //#6365
                            break; //#6366
                        } //#6366
                    } //#6366
                    $k[$j++] = $_.swa; //#6369
                    $_.encb(); //#6369
                    $_.cset = "seta"; //#6370
                    break; //#6371
                } //#6371
                $k[$j++] = $eq($_.cset, "seta"); //#6373
                $k[$j++] = $get($_.msg, $_.i); //#6373
                $_.bnota(); //#6373
                var _7I = $k[--$j]; //#6373
                var _7J = $k[--$j]; //#6373
                if ((_7J && _7I)) { //#6385
                    if ($_.i < ($_.msglen - 1)) { //#6381
                        $k[$j++] = $_.i + 1; //#6375
                        $_.abeforeb(); //#6375
                        if ($k[--$j]) { //#6380
                            $k[$j++] = $_.sft; //#6376
                            $_.enca(); //#6376
                            $k[$j++] = $get($_.msg, $_.i); //#6377
                            $_.encb(); //#6377
                            $_.i = $_.i + 1; //#6378
                            break; //#6379
                        } //#6379
                    } //#6379
                    $k[$j++] = $_.swb; //#6382
                    $_.enca(); //#6382
                    $_.cset = "setb"; //#6383
                    break; //#6384
                } //#6384
                if (($eq($_.cset, "setc") && ($_.nums < 2)) && (($get($_.msg, $_.i) > -1) || ($get($_.msg, $_.i) == $_.fn4))) { //#6395
                    $k[$j++] = $_.i; //#6387
                    $_.abeforeb(); //#6387
                    if ($k[--$j]) { //#6391
                        $k[$j++] = $_.swa; //#6388
                        $_.encc(); //#6388
                        $_.cset = "seta"; //#6389
                        break; //#6390
                    } //#6390
                    $k[$j++] = $_.swb; //#6392
                    $_.encc(); //#6392
                    $_.cset = "setb"; //#6393
                    break; //#6394
                } //#6394
                if ($eq($_.cset, "seta")) { //#6402
                    $k[$j++] = $get($_.msg, $_.i); //#6399
                    $_.enca(); //#6399
                    $_.i = $_.i + 1; //#6400
                    break; //#6401
                } //#6401
                if ($eq($_.cset, "setb")) { //#6407
                    $k[$j++] = $get($_.msg, $_.i); //#6404
                    $_.encb(); //#6404
                    $_.i = $_.i + 1; //#6405
                    break; //#6406
                } //#6406
                if ($eq($_.cset, "setc")) { //#6417
                    if ($get($_.msg, $_.i) <= -1) { //#6414
                        $k[$j++] = $get($_.msg, $_.i); //#6410
                        $_.encc(); //#6410
                        $_.i = $_.i + 1; //#6411
                    } else { //#6414
                        $k[$j++] = $geti($_.msg, $_.i, 2); //#6413
                        $_.encc(); //#6413
                        $_.i = $_.i + 2; //#6414
                    } //#6414
                    break; //#6416
                } //#6416
                break; //#6419
            } //#6419
        } //#6419
        $_.cws = $geti($_.cws, 0, $_.j); //#6423
    } //#6423
    var _87 = $a($_.j + 2); //#6427
    $puti(_87, 0, $_.cws); //#6427
    $_.cws = _87; //#6427
    $_.csum = $get($_.cws, 0); //#6428
    for (var _8D = 1, _8C = $_.j - 1; _8D <= _8C; _8D += 1) { //#6432
        $_.i = _8D; //#6430
        $_.csum = $f($_.csum + ($get($_.cws, $_.i) * $_.i)); //#6431
    } //#6431
    $_.csum = $_.csum % 103; //#6433
    $put($_.cws, $_.j, $_.csum); //#6434
    $put($_.cws, $_.j + 1, $get($_.seta, $_.stp)); //#6435
    var _8T = $get($_.options, 'debugcws') !== undefined; //#6437
    if (_8T) { //#6437
        $k[$j++] = 'bwipp.debugcws#6437'; //#6437
        $k[$j++] = $_.cws; //#6437
        bwipp_raiseerror(); //#6437
    } //#6437
    if (!bwipp_code128.__6459__) { //#6459
        $_ = Object.create($_); //#6459
        $_.encs = $a(["212222", "222122", "222221", "121223", "121322", "131222", "122213", "122312", "132212", "221213", "221312", "231212", "112232", "122132", "122231", "113222", "123122", "123221", "223211", "221132", "221231", "213212", "223112", "312131", "311222", "321122", "321221", "312212", "322112", "322211", "212123", "212321", "232121", "111323", "131123", "131321", "112313", "132113", "132311", "211313", "231113", "231311", "112133", "112331", "132131", "113123", "113321", "133121", "313121", "211331", "231131", "213113", "213311", "213131", "311123", "311321", "331121", "312113", "312311", "332111", "314111", "221411", "431111", "111224", "111422", "121124", "121421", "141122", "141221", "112214", "112412", "122114", "122411", "142112", "142211", "241211", "221114", "413111", "241112", "134111", "111242", "121142", "121241", "114212", "124112", "124211", "411212", "421112", "421211", "212141", "214121", "412121", "111143", "111341", "131141", "114113", "114311", "411113", "411311", "113141", "114131", "311141", "411131", "211412", "211214", "211232", "2331112"]); //#6458
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code128.$ctx[id] = $_[id]); //#6458
        bwipp_code128.__6459__ = 1; //#6458
        $_ = Object.getPrototypeOf($_); //#6458
    } //#6458
    $_.sbs = $s(($_.cws.length * 6) + 1); //#6462
    for (var _8b = 0, _8a = $_.cws.length - 1; _8b <= _8a; _8b += 1) { //#6466
        $_.i = _8b; //#6464
        $puti($_.sbs, $_.i * 6, $get($_.encs, $get($_.cws, $_.i))); //#6465
    } //#6465
    $k[$j++] = Infinity; //#6469
    $k[$j++] = Infinity; //#6471
    var _8j = $_.sbs; //#6471
    for (var _8k = 0, _8l = _8j.length; _8k < _8l; _8k++) { //#6471
        $k[$j++] = $get(_8j, _8k) - 48; //#6471
    } //#6471
    var _8n = $a(); //#6471
    $k[$j++] = Infinity; //#6472
    for (var _8p = 0, _8q = ~~(($_.sbs.length + 1) / 2); _8p < _8q; _8p++) { //#6472
        $k[$j++] = $_.height; //#6472
    } //#6472
    var _8s = $a(); //#6472
    $k[$j++] = Infinity; //#6473
    for (var _8u = 0, _8v = ~~(($_.sbs.length + 1) / 2); _8u < _8v; _8u++) { //#6473
        $k[$j++] = 0; //#6473
    } //#6473
    var _8w = $a(); //#6473
    $k[$j++] = 'ren'; //#6476
    $k[$j++] = bwipp_renlinear; //#6476
    $k[$j++] = 'sbs'; //#6476
    $k[$j++] = _8n; //#6476
    $k[$j++] = 'bhs'; //#6476
    $k[$j++] = _8s; //#6476
    $k[$j++] = 'bbs'; //#6476
    $k[$j++] = _8w; //#6476
    $k[$j++] = 'txt'; //#6476
    $k[$j++] = $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])]); //#6476
    $k[$j++] = 'textxalign'; //#6476
    $k[$j++] = "center"; //#6476
    $k[$j++] = 'opt'; //#6476
    $k[$j++] = $_.options; //#6476
    var _95 = $d(); //#6476
    $k[$j++] = _95; //#6479
    if (!$_.dontdraw) { //#6479
        bwipp_renlinear(); //#6479
    } //#6479
    $_ = Object.getPrototypeOf($_); //#6481
    $_ = Object.getPrototypeOf($_); //#6483
} //bwipp_code128
function bwipp_gs1_128() {
    $_ = Object.create($_); //#6514
    $_.dontdraw = false; //#6517
    $_.includetext = false; //#6518
    $_.textfont = "OCR-B"; //#6519
    $_.textsize = 10; //#6520
    $_.textxoffset = 0; //#6521
    $_.textyoffset = -8; //#6522
    $_.height = 0.5; //#6523
    $_.linkagea = false; //#6524
    $_.linkagec = false; //#6525
    $_.parse = false; //#6526
    $_.dontlint = false; //#6527
    $_.lintreqs = false; //#6528
    $k[$j++] = $_; //#6530
    bwipp_processoptions(); //#6530
    $_.options = $k[--$j]; //#6530
    $_.barcode = $k[--$j]; //#6531
    if ($_.linkagea && $_.linkagec) { //#6535
        $k[$j++] = 'bwipp.gs1128badLinkage#6534'; //#6534
        $k[$j++] = "linkagea and linkagec cannot be used together"; //#6534
        bwipp_raiseerror(); //#6534
    } //#6534
    $_.text = $_.barcode; //#6537
    $k[$j++] = $_.barcode; //#6539
    $k[$j++] = 'ai'; //#6539
    bwipp_gs1process(); //#6539
    $_.fncs = $k[--$j]; //#6540
    $_.vals = $k[--$j]; //#6541
    $_.ais = $k[--$j]; //#6542
    $_.fnc1 = -1; //#6545
    $_.c128 = $a([$_.fnc1]); //#6546
    for (var _D = 0, _C = $_.ais.length - 1; _D <= _C; _D += 1) { //#6562
        $_.i = _D; //#6548
        $_.ai = $get($_.ais, $_.i); //#6549
        $_.val = $get($_.vals, $_.i); //#6550
        var _N = $a(($_.c128.length + $_.ai.length) + $_.val.length); //#6551
        $puti(_N, 0, $_.c128); //#6552
        $k[$j++] = _N; //#6553
        $k[$j++] = _N; //#6553
        $k[$j++] = $_.c128.length; //#6553
        $k[$j++] = $_.ai; //#6553
        $k[$j++] = Infinity; //#6553
        var _R = $k[--$j]; //#6553
        var _S = $k[--$j]; //#6553
        $k[$j++] = _R; //#6553
        $forall(_S); //#6553
        var _T = $a(); //#6553
        var _U = $k[--$j]; //#6553
        $puti($k[--$j], _U, _T); //#6553
        var _W = $k[--$j]; //#6554
        $k[$j++] = _W; //#6554
        $k[$j++] = _W; //#6554
        $k[$j++] = $_.c128.length + $_.ai.length; //#6554
        $k[$j++] = $_.val; //#6554
        $k[$j++] = Infinity; //#6554
        var _a = $k[--$j]; //#6554
        var _b = $k[--$j]; //#6554
        $k[$j++] = _a; //#6554
        $forall(_b); //#6554
        var _c = $a(); //#6554
        var _d = $k[--$j]; //#6554
        $puti($k[--$j], _d, _c); //#6554
        $_.c128 = $k[--$j]; //#6555
        if (($_.i != ($_.ais.length - 1)) && $get($_.fncs, $_.i)) { //#6561
            var _m = $a($_.c128.length + 1); //#6557
            $puti(_m, 0, $_.c128); //#6558
            $put(_m, $_.c128.length, $_.fnc1); //#6559
            $_.c128 = _m; //#6560
        } //#6560
    } //#6560
    $_.barcode = $s(($_.c128.length + 1) * 5); //#6565
    $_.i = 0; //#6566
    $_.j = 0; //#6566
    for (;;) { //#6576
        if ($_.i == $_.c128.length) { //#6567
            break; //#6567
        } //#6567
        var _w = $get($_.c128, $_.i); //#6568
        $k[$j++] = _w; //#6573
        if (_w == $_.fnc1) { //#6572
            $j--; //#6569
            $puti($_.barcode, $_.j, "^FNC1"); //#6569
            $_.j = $_.j + 4; //#6570
        } else { //#6572
            $put($_.barcode, $_.j, $k[--$j]); //#6572
        } //#6572
        $_.i = $_.i + 1; //#6574
        $_.j = $_.j + 1; //#6575
    } //#6575
    if ($_.linkagea || $_.linkagec) { //#6580
        $k[$j++] = $_.barcode; //#6578
        $k[$j++] = $_.j; //#6578
        if ($_.linkagea) { //#6578
            $k[$j++] = "^LNKA"; //#6578
        } else { //#6578
            $k[$j++] = "^LNKC"; //#6578
        } //#6578
        var _1B = $k[--$j]; //#6578
        var _1C = $k[--$j]; //#6578
        $puti($k[--$j], _1C, _1B); //#6578
        $_.j = $_.j + 5; //#6579
    } //#6579
    $_.barcode = $geti($_.barcode, 0, $_.j); //#6581
    delete $_.options["parse"]; //#6584
    $put($_.options, "height", $_.height); //#6585
    $put($_.options, "dontdraw", true); //#6586
    $put($_.options, "parsefnc", true); //#6587
    $k[$j++] = 'args'; //#6588
    $k[$j++] = $_.barcode; //#6588
    $k[$j++] = $_.options; //#6588
    bwipp_code128(); //#6588
    var _1P = $k[--$j]; //#6588
    $_[$k[--$j]] = _1P; //#6588
    $put($_.args, "txt", $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])])); //#6590
    $put($_.args, "textxalign", "center"); //#6591
    $put($_.args, "opt", $_.options); //#6592
    $k[$j++] = $_.args; //#6595
    if (!$_.dontdraw) { //#6595
        bwipp_renlinear(); //#6595
    } //#6595
    $_ = Object.getPrototypeOf($_); //#6597
} //bwipp_gs1_128
function bwipp_ean14() {
    $_ = Object.create($_); //#6626
    $_.dontdraw = false; //#6629
    $_.includetext = false; //#6630
    $_.textfont = "OCR-B"; //#6631
    $_.textsize = 10; //#6632
    $_.textxoffset = 0; //#6633
    $_.textyoffset = -8; //#6634
    $_.height = 1; //#6635
    $k[$j++] = $_; //#6637
    bwipp_processoptions(); //#6637
    $_.options = $k[--$j]; //#6637
    $_.barcode = $k[--$j]; //#6638
    $_.text = $_.barcode; //#6641
    var _3 = $_.barcode; //#6642
    $k[$j++] = $s(_3.length); //#6643
    $k[$j++] = 0; //#6643
    $forall(_3, function() { //#6643
        var _5 = $k[--$j]; //#6643
        $k[$j++] = _5; //#6643
        if (_5 != 32) { //#6643
            var _6 = $k[--$j]; //#6643
            var _7 = $k[--$j]; //#6643
            var _8 = $k[--$j]; //#6643
            $put(_8, _7, _6); //#6643
            $k[$j++] = _8; //#6643
            $k[$j++] = $f(_7 + 1); //#6643
        } else { //#6643
            $j--; //#6643
        } //#6643
    }); //#6643
    var _9 = $k[--$j]; //#6644
    $_.barcode = $geti($k[--$j], 0, _9); //#6644
    $_.hasspace = $_.text.length != $_.barcode.length; //#6645
    if (($_.barcode.length != 17) && ($_.barcode.length != 18)) { //#6650
        $k[$j++] = 'bwipp.ean14badLength#6649'; //#6649
        $k[$j++] = "GS1-14 must be 13 or 14 digits"; //#6649
        bwipp_raiseerror(); //#6649
    } //#6649
    if ($ne($geti($_.barcode, 0, 4), "(01)")) { //#6653
        $k[$j++] = 'bwipp.ean14badAI#6652'; //#6652
        $k[$j++] = "GS1-14 must begin with (01) application identifier"; //#6652
        bwipp_raiseerror(); //#6652
    } //#6652
    var _K = $geti($_.barcode, 4, $_.barcode.length - 4); //#6654
    for (var _L = 0, _M = _K.length; _L < _M; _L++) { //#6658
        var _N = $get(_K, _L); //#6658
        if ((_N < 48) || (_N > 57)) { //#6657
            $k[$j++] = 'bwipp.ean14badCharacter#6656'; //#6656
            $k[$j++] = "GS1-14 must contain only digits"; //#6656
            bwipp_raiseerror(); //#6656
        } //#6656
    } //#6656
    $_.checksum = 0; //#6661
    for (var _O = 0; _O <= 12; _O += 1) { //#6665
        $_.i = _O; //#6663
        $k[$j++] = 'checksum'; //#6664
        $k[$j++] = $_.checksum; //#6664
        $k[$j++] = $f($get($_.barcode, $_.i + 4) - 48); //#6664
        if (($_.i % 2) == 0) { //#6664
            var _U = $k[--$j]; //#6664
            $k[$j++] = _U * 3; //#6664
        } //#6664
        var _V = $k[--$j]; //#6664
        var _W = $k[--$j]; //#6664
        $_[$k[--$j]] = $f(_W + _V); //#6664
    } //#6664
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#6666
    if ($_.barcode.length == 18) { //#6680
        if ($get($_.barcode, 17) != ($_.checksum + 48)) { //#6670
            $k[$j++] = 'bwipp.ean14badCheckDigit#6669'; //#6669
            $k[$j++] = "Incorrect GS1-14 check digit provided"; //#6669
            bwipp_raiseerror(); //#6669
        } //#6669
    } else { //#6680
        var _d = $s(18); //#6672
        $puti(_d, 0, $_.barcode); //#6673
        $put(_d, 17, $_.checksum + 48); //#6674
        $_.barcode = _d; //#6675
        var _i = $_.hasspace ? 2 : 1; //#6676
        var _j = $s($_.text.length + _i); //#6676
        $puti(_j, _j.length - 2, " "); //#6677
        $put(_j, _j.length - 1, $_.checksum + 48); //#6678
        $puti(_j, 0, $_.text); //#6679
        $_.text = _j; //#6680
    } //#6680
    $_.gtin = $geti($_.barcode, 4, 14); //#6682
    $_.barcode = $s(21); //#6685
    $puti($_.barcode, 0, "^FNC101"); //#6686
    var _r = $_.gtin; //#6687
    $puti($_.barcode, 7, _r); //#6687
    $put($_.options, "dontdraw", true); //#6690
    $put($_.options, "parsefnc", true); //#6691
    $k[$j++] = 'args'; //#6692
    $k[$j++] = $_.barcode; //#6692
    $k[$j++] = $_.options; //#6692
    bwipp_code128(); //#6692
    var _w = $k[--$j]; //#6692
    $_[$k[--$j]] = _w; //#6692
    $put($_.args, "txt", $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])])); //#6694
    $put($_.args, "textxalign", "center"); //#6695
    $put($_.args, "opt", $_.options); //#6696
    $k[$j++] = $_.args; //#6699
    if (!$_.dontdraw) { //#6699
        bwipp_renlinear(); //#6699
    } //#6699
    $_ = Object.getPrototypeOf($_); //#6701
} //bwipp_ean14
function bwipp_sscc18() {
    $_ = Object.create($_); //#6730
    $_.dontdraw = false; //#6733
    $_.includetext = false; //#6734
    $_.textfont = "OCR-B"; //#6735
    $_.textsize = 10; //#6736
    $_.textxoffset = 0; //#6737
    $_.textyoffset = -8; //#6738
    $_.height = 1; //#6739
    $k[$j++] = $_; //#6741
    bwipp_processoptions(); //#6741
    $_.options = $k[--$j]; //#6741
    $_.barcode = $k[--$j]; //#6742
    $_.text = $_.barcode; //#6745
    var _3 = $_.barcode; //#6746
    $k[$j++] = $s(_3.length); //#6747
    $k[$j++] = 0; //#6747
    $forall(_3, function() { //#6747
        var _5 = $k[--$j]; //#6747
        $k[$j++] = _5; //#6747
        if (_5 != 32) { //#6747
            var _6 = $k[--$j]; //#6747
            var _7 = $k[--$j]; //#6747
            var _8 = $k[--$j]; //#6747
            $put(_8, _7, _6); //#6747
            $k[$j++] = _8; //#6747
            $k[$j++] = $f(_7 + 1); //#6747
        } else { //#6747
            $j--; //#6747
        } //#6747
    }); //#6747
    var _9 = $k[--$j]; //#6748
    $_.barcode = $geti($k[--$j], 0, _9); //#6748
    $_.hasspace = $_.text.length != $_.barcode.length; //#6749
    if (($_.barcode.length != 21) && ($_.barcode.length != 22)) { //#6754
        $k[$j++] = 'bwipp.sscc18badLength#6753'; //#6753
        $k[$j++] = "SSCC-18 must be 17 or 18 digits"; //#6753
        bwipp_raiseerror(); //#6753
    } //#6753
    if ($ne($geti($_.barcode, 0, 4), "(00)")) { //#6757
        $k[$j++] = 'bwipp.sscc18badAI#6756'; //#6756
        $k[$j++] = "SSCC-18 must begin with (00) application identifier"; //#6756
        bwipp_raiseerror(); //#6756
    } //#6756
    var _K = $geti($_.barcode, 4, $_.barcode.length - 4); //#6758
    for (var _L = 0, _M = _K.length; _L < _M; _L++) { //#6762
        var _N = $get(_K, _L); //#6762
        if ((_N < 48) || (_N > 57)) { //#6761
            $k[$j++] = 'bwipp.sscc18badCharacter#6760'; //#6760
            $k[$j++] = "SSCC-18 must contain only digits"; //#6760
            bwipp_raiseerror(); //#6760
        } //#6760
    } //#6760
    $_.checksum = 0; //#6765
    for (var _O = 0; _O <= 16; _O += 1) { //#6769
        $_.i = _O; //#6767
        $k[$j++] = 'checksum'; //#6768
        $k[$j++] = $_.checksum; //#6768
        $k[$j++] = $f($get($_.barcode, $_.i + 4) - 48); //#6768
        if (($_.i % 2) == 0) { //#6768
            var _U = $k[--$j]; //#6768
            $k[$j++] = _U * 3; //#6768
        } //#6768
        var _V = $k[--$j]; //#6768
        var _W = $k[--$j]; //#6768
        $_[$k[--$j]] = $f(_W + _V); //#6768
    } //#6768
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#6770
    if ($_.barcode.length == 22) { //#6784
        if ($get($_.barcode, 21) != ($_.checksum + 48)) { //#6774
            $k[$j++] = 'bwipp.sscc18badCheckDigit#6773'; //#6773
            $k[$j++] = "Incorrect SSCC-18 check digit provided"; //#6773
            bwipp_raiseerror(); //#6773
        } //#6773
    } else { //#6784
        var _d = $s(22); //#6776
        $puti(_d, 0, $_.barcode); //#6777
        $put(_d, 21, $_.checksum + 48); //#6778
        $_.barcode = _d; //#6779
        var _i = $_.hasspace ? 2 : 1; //#6780
        var _j = $s($_.text.length + _i); //#6780
        $puti(_j, _j.length - 2, " "); //#6781
        $put(_j, _j.length - 1, $_.checksum + 48); //#6782
        $puti(_j, 0, $_.text); //#6783
        $_.text = _j; //#6784
    } //#6784
    $_.sscc = $geti($_.barcode, 4, 18); //#6786
    $_.barcode = $s(25); //#6789
    $puti($_.barcode, 0, "^FNC100"); //#6790
    var _r = $_.sscc; //#6791
    $puti($_.barcode, 7, _r); //#6791
    $put($_.options, "dontdraw", true); //#6794
    $put($_.options, "parsefnc", true); //#6795
    $k[$j++] = 'args'; //#6796
    $k[$j++] = $_.barcode; //#6796
    $k[$j++] = $_.options; //#6796
    bwipp_code128(); //#6796
    var _w = $k[--$j]; //#6796
    $_[$k[--$j]] = _w; //#6796
    $put($_.args, "txt", $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])])); //#6798
    $put($_.args, "textxalign", "center"); //#6799
    $put($_.args, "opt", $_.options); //#6800
    $k[$j++] = $_.args; //#6803
    if (!$_.dontdraw) { //#6803
        bwipp_renlinear(); //#6803
    } //#6803
    $_ = Object.getPrototypeOf($_); //#6805
} //bwipp_sscc18
function bwipp_code39() {
    $_ = Object.create($_); //#6835
    $_.dontdraw = false; //#6838
    $_.includecheck = false; //#6839
    $_.validatecheck = false; //#6840
    $_.includetext = false; //#6841
    $_.includecheckintext = false; //#6842
    $_.hidestars = false; //#6843
    $_.textfont = "OCR-B"; //#6844
    $_.textsize = 10; //#6845
    $_.textyoffset = -8; //#6846
    $_.height = 1; //#6847
    $k[$j++] = $_; //#6849
    bwipp_processoptions(); //#6849
    $_.options = $k[--$j]; //#6849
    $_.barcode = $k[--$j]; //#6850
    if ($eq($_.barcode, "")) { //#6854
        $k[$j++] = 'bwipp.code39emptyData#6853'; //#6853
        $k[$j++] = "The data must not be empty"; //#6853
        bwipp_raiseerror(); //#6853
    } //#6853
    bwipp_loadctx(bwipp_code39) //#6856
    if (!bwipp_code39.__6876__) { //#6876
        $_ = Object.create($_); //#6876
        $_.encs = $a(["1113313111", "3113111131", "1133111131", "3133111111", "1113311131", "3113311111", "1133311111", "1113113131", "3113113111", "1133113111", "3111131131", "1131131131", "3131131111", "1111331131", "3111331111", "1131331111", "1111133131", "3111133111", "1131133111", "1111333111", "3111111331", "1131111331", "3131111311", "1111311331", "3111311311", "1131311311", "1111113331", "3111113311", "1131113311", "1111313311", "3311111131", "1331111131", "3331111111", "1311311131", "3311311111", "1331311111", "1311113131", "3311113111", "1331113111", "1313131111", "1313111311", "1311131311", "1113131311", "1311313111"]); //#6870
        $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#6873
        $_.charvals = new Map; //#6874
        for (var _4 = 0; _4 <= 42; _4 += 1) { //#6875
            $put($_.charvals, $geti($_.barchars, _4, 1), _4); //#6875
        } //#6875
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code39.$ctx[id] = $_[id]); //#6875
        bwipp_code39.__6876__ = 1; //#6875
        $_ = Object.getPrototypeOf($_); //#6875
    } //#6875
    for (var _B = 0, _A = $_.barcode.length - 1; _B <= _A; _B += 1) { //#6883
        var _F = $get($_.charvals, $geti($_.barcode, _B, 1)) !== undefined; //#6880
        if (!_F) { //#6882
            $k[$j++] = 'bwipp.code39badCharacter#6881'; //#6881
            $k[$j++] = "Code 39 must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#6881
            bwipp_raiseerror(); //#6881
        } //#6881
    } //#6881
    $k[$j++] = 'barlen'; //#6885
    $k[$j++] = $_.barcode.length; //#6885
    if ($_.validatecheck) { //#6885
        var _I = $k[--$j]; //#6885
        $k[$j++] = $f(_I - 1); //#6885
    } //#6885
    var _J = $k[--$j]; //#6885
    $_[$k[--$j]] = _J; //#6885
    $_.checksum = 0; //#6887
    for (var _N = 0, _M = $f($_.barlen - 1); _N <= _M; _N += 1) { //#6891
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _N, 1)) + $_.checksum); //#6890
    } //#6890
    $_.checksum = $_.checksum % 43; //#6892
    if ($_.validatecheck) { //#6899
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#6896
            $k[$j++] = 'bwipp.code39badCheckDigit#6895'; //#6895
            $k[$j++] = "Incorrect Code 39 check digit provided"; //#6895
            bwipp_raiseerror(); //#6895
        } //#6895
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#6897
        $_.includecheck = true; //#6898
    } //#6898
    var _g = $_.includecheck ? 3 : 2; //#6901
    $_.sbs = $s($f($_.barlen + _g) * 10); //#6901
    var _k = $_.includecheck ? 3 : 2; //#6902
    $_.txt = $a($f($_.barlen + _k)); //#6902
    $puti($_.sbs, 0, $get($_.encs, 43)); //#6905
    if (!$_.hidestars) { //#6909
        $put($_.txt, 0, $a(["*", 0, $_.textyoffset, $_.textfont, $_.textsize])); //#6907
    } else { //#6909
        $put($_.txt, 0, $a(["", 0, $_.textyoffset, $_.textfont, $_.textsize])); //#6909
    } //#6909
    for (var _12 = 0, _11 = $f($_.barlen - 1); _12 <= _11; _12 += 1) { //#6917
        $_.i = _12; //#6913
        $_.indx = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#6914
        $puti($_.sbs, ($_.i * 10) + 10, $get($_.encs, $_.indx)); //#6915
        $put($_.txt, $_.i + 1, $a([$geti($_.barcode, $_.i, 1), ($_.i + 1) * 16, $_.textyoffset, $_.textfont, $_.textsize])); //#6916
    } //#6916
    if ($_.includecheck) { //#6938
        $puti($_.sbs, $f(($_.barlen * 10) + 10), $get($_.encs, $_.checksum)); //#6921
        if ($_.includecheckintext) { //#6925
            $put($_.txt, $f($_.barlen + 1), $a([$geti($_.barchars, $_.checksum, 1), $f($_.barlen + 1) * 16, $_.textyoffset, $_.textfont, $_.textsize])); //#6923
        } else { //#6925
            $put($_.txt, $f($_.barlen + 1), $a(["", $f($_.barlen + 1) * 16, $_.textyoffset, $_.textfont, $_.textsize])); //#6925
        } //#6925
        $puti($_.sbs, $f(($_.barlen * 10) + 20), $get($_.encs, 43)); //#6927
        if (!$_.hidestars) { //#6931
            $put($_.txt, $f($_.barlen + 2), $a(["*", $f($_.barlen + 2) * 16, $_.textyoffset, $_.textfont, $_.textsize])); //#6929
        } else { //#6931
            $put($_.txt, $f($_.barlen + 2), $a(["", $f($_.barlen + 2) * 16, $_.textyoffset, $_.textfont, $_.textsize])); //#6931
        } //#6931
    } else { //#6938
        $puti($_.sbs, $f(($_.barlen * 10) + 10), $get($_.encs, 43)); //#6934
        if (!$_.hidestars) { //#6938
            $put($_.txt, $f($_.barlen + 1), $a(["*", $f($_.barlen + 1) * 16, $_.textyoffset, $_.textfont, $_.textsize])); //#6936
        } else { //#6938
            $put($_.txt, $f($_.barlen + 1), $a(["", $f($_.barlen + 1) * 16, $_.textyoffset, $_.textfont, $_.textsize])); //#6938
        } //#6938
    } //#6938
    $k[$j++] = Infinity; //#6943
    $k[$j++] = Infinity; //#6945
    var _2N = $_.sbs; //#6945
    for (var _2O = 0, _2P = _2N.length; _2O < _2P; _2O++) { //#6945
        $k[$j++] = $get(_2N, _2O) - 48; //#6945
    } //#6945
    var _2R = $a(); //#6945
    $k[$j++] = Infinity; //#6946
    for (var _2T = 0, _2U = ~~(($_.sbs.length + 1) / 2); _2T < _2U; _2T++) { //#6946
        $k[$j++] = $_.height; //#6946
    } //#6946
    var _2W = $a(); //#6946
    $k[$j++] = Infinity; //#6947
    for (var _2Y = 0, _2Z = ~~(($_.sbs.length + 1) / 2); _2Y < _2Z; _2Y++) { //#6947
        $k[$j++] = 0; //#6947
    } //#6947
    var _2a = $a(); //#6947
    $k[$j++] = 'ren'; //#6950
    $k[$j++] = bwipp_renlinear; //#6950
    $k[$j++] = 'sbs'; //#6950
    $k[$j++] = _2R; //#6950
    $k[$j++] = 'bhs'; //#6950
    $k[$j++] = _2W; //#6950
    $k[$j++] = 'bbs'; //#6950
    $k[$j++] = _2a; //#6950
    if ($_.includetext) { //#6950
        $k[$j++] = 'txt'; //#6949
        $k[$j++] = $_.txt; //#6949
    } //#6949
    $k[$j++] = 'opt'; //#6951
    $k[$j++] = $_.options; //#6951
    var _2e = $d(); //#6951
    $k[$j++] = _2e; //#6954
    if (!$_.dontdraw) { //#6954
        bwipp_renlinear(); //#6954
    } //#6954
    $_ = Object.getPrototypeOf($_); //#6956
    $_ = Object.getPrototypeOf($_); //#6958
} //bwipp_code39
function bwipp_code39ext() {
    $_ = Object.create($_); //#6990
    $_.dontdraw = false; //#6993
    $_.includetext = false; //#6994
    $_.parse = false; //#6995
    $k[$j++] = $_; //#6997
    bwipp_processoptions(); //#6997
    $_.options = $k[--$j]; //#6997
    $_.barcode = $k[--$j]; //#6998
    bwipp_loadctx(bwipp_code39ext) //#7000
    var _3 = new Map([
        ["parse", $_.parse],
        ["parseonly", true],
        ["parsefnc", false]
    ]); //#7006
    $_.fncvals = _3; //#7007
    $k[$j++] = 'barcode'; //#7008
    $k[$j++] = $_.barcode; //#7008
    $k[$j++] = $_.fncvals; //#7008
    bwipp_parseinput(); //#7008
    var _6 = $k[--$j]; //#7008
    $_[$k[--$j]] = _6; //#7008
    $_.barlen = $_.barcode.length; //#7009
    delete $_.options["parse"]; //#7010
    $forall($_.barcode, function() { //#7017
        if ($k[--$j] >= 128) { //#7016
            $k[$j++] = 'bwipp.code39extBadCharacter#7015'; //#7015
            $k[$j++] = "Code 39 Extended must contain only ASCII characters"; //#7015
            bwipp_raiseerror(); //#7015
        } //#7015
    }); //#7015
    if (!bwipp_code39ext.__7031__) { //#7031
        $_ = Object.create($_); //#7031
        $_.extencs = $a
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code39ext.$ctx[id] = $_[id]); //#7030
        bwipp_code39ext.__7031__ = 1; //#7030
        $_ = Object.getPrototypeOf($_); //#7030
    } //#7030
    $_.newcode = $s($_.barlen * 2); //#7033
    $_.newtext = $s($_.barlen * 2); //#7034
    $_.j = 0; //#7035
    for (var _K = 0, _J = $_.barlen - 1; _K <= _J; _K += 1) { //#7043
        $_.i = _K; //#7037
        $_.extchar = $get($_.extencs, $get($_.barcode, $_.i)); //#7038
        $puti($_.newcode, $_.j, $_.extchar); //#7039
        var _X = $get($_.barcode, $_.i); //#7040
        $k[$j++] = $_.newtext; //#7040
        $k[$j++] = $_.j; //#7040
        $k[$j++] = _X; //#7040
        if ((_X < 32) || (_X == 127)) { //#7040
            $j--; //#7040
            $k[$j++] = 32; //#7040
        } //#7040
        var _Y = $k[--$j]; //#7040
        var _Z = $k[--$j]; //#7040
        $put($k[--$j], _Z, _Y); //#7040
        if ($_.extchar.length != 1) { //#7041
            $put($_.newtext, $_.j + 1, 32); //#7041
        } //#7041
        $_.j = $_.j + $_.extchar.length; //#7042
    } //#7042
    $_.newcode = $geti($_.newcode, 0, $_.j); //#7044
    $_.newtext = $geti($_.newtext, 0, $_.j); //#7045
    $put($_.options, "dontdraw", true); //#7048
    $k[$j++] = 'args'; //#7049
    $k[$j++] = $_.newcode; //#7049
    $k[$j++] = $_.options; //#7049
    bwipp_code39(); //#7049
    var _p = $k[--$j]; //#7049
    $_[$k[--$j]] = _p; //#7049
    if ($_.includetext) { //#7061
        $_.txt = $get($_.args, "txt"); //#7053
        for (var _w = 0, _v = $_.newtext.length - 1; _w <= _v; _w += 1) { //#7059
            $_.i = _w; //#7055
            $_.txtentry = $get($_.txt, $_.i + 1); //#7056
            $put($_.txtentry, 0, $geti($_.newtext, $_.i, 1)); //#7057
            $put($_.txt, $_.i + 1, $_.txtentry); //#7058
        } //#7058
        $put($_.args, "txt", $_.txt); //#7060
    } //#7060
    $put($_.args, "opt", $_.options); //#7062
    $k[$j++] = $_.args; //#7065
    if (!$_.dontdraw) { //#7065
        bwipp_renlinear(); //#7065
    } //#7065
    $_ = Object.getPrototypeOf($_); //#7067
    $_ = Object.getPrototypeOf($_); //#7069
} //bwipp_code39ext
function bwipp_code32() {
    $_ = Object.create($_); //#7098
    $_.dontdraw = false; //#7101
    $_.includetext = false; //#7102
    $_.textfont = "OCR-B"; //#7103
    $_.textsize = 10; //#7104
    $_.textyoffset = -8; //#7105
    $_.textxoffset = 0; //#7106
    $_.height = 1; //#7107
    $k[$j++] = $_; //#7109
    bwipp_processoptions(); //#7109
    $_.options = $k[--$j]; //#7109
    $_.barcode = $k[--$j]; //#7110
    if (($_.barcode.length != 8) && ($_.barcode.length != 9)) { //#7115
        $k[$j++] = 'bwipp.code32badLength#7114'; //#7114
        $k[$j++] = "Italian Pharmacode must be 8 or 9 digits"; //#7114
        bwipp_raiseerror(); //#7114
    } //#7114
    $forall($_.barcode, function() { //#7120
        var _5 = $k[--$j]; //#7117
        if ((_5 < 48) || (_5 > 57)) { //#7119
            $k[$j++] = 'bwipp.code32badCharacter#7118'; //#7118
            $k[$j++] = "Italian Pharmacode must contain only digits"; //#7118
            bwipp_raiseerror(); //#7118
        } //#7118
    }); //#7118
    $_.checksum = 0; //#7123
    for (var _6 = 0; _6 <= 7; _6 += 1) { //#7128
        $_.i = _6; //#7125
        $k[$j++] = $f($get($_.barcode, $_.i) - 48); //#7126
        if (($_.i % 2) != 0) { //#7126
            var _B = $k[--$j]; //#7126
            $k[$j++] = _B * 2; //#7126
        } //#7126
        var _C = $k[--$j]; //#7126
        $k[$j++] = _C; //#7126
        if (_C > 9) { //#7126
            var _D = $k[--$j]; //#7126
            $k[$j++] = $f(_D - 9); //#7126
        } //#7126
        $_.checksum = $f($k[--$j] + $_.checksum); //#7127
    } //#7127
    $_.checksum = $_.checksum % 10; //#7129
    if ($_.barcode.length == 9) { //#7134
        if ($get($_.barcode, 8) != $f($_.checksum + 48)) { //#7133
            $k[$j++] = 'bwipp.code32badCheckDigit#7132'; //#7132
            $k[$j++] = "Incorrect Italian Pharmacode check digit provided"; //#7132
            bwipp_raiseerror(); //#7132
        } //#7132
    } //#7132
    var _L = $s(10); //#7135
    $puti(_L, 0, $_.barcode); //#7136
    $put(_L, 8, $f($_.checksum + 48)); //#7137
    $_.text = _L; //#7138
    $_.val = $cvrs($s(6), $cvi($_.text), 32); //#7141
    $_.barcode = $s(6); //#7142
    for (var _S = 0; _S <= 5; _S += 1) { //#7143
        $put($_.barcode, _S, 48); //#7143
    } //#7143
    $puti($_.barcode, 6 - $_.val.length, $_.val); //#7144
    for (var _X = 0; _X <= 5; _X += 1) { //#7151
        var _Z = $get($_.barcode, _X); //#7148
        $k[$j++] = _X; //#7149
        $k[$j++] = _Z; //#7149
        $k[$j++] = _Z; //#7149
        for (var _a = 0, _b = "AEIO".length; _a < _b; _a++) { //#7149
            if ($k[--$j] >= $get("AEIO", _a)) { //#7149
                var _e = $k[--$j]; //#7149
                $k[$j++] = $f(_e + 1); //#7149
            } //#7149
            var _f = $k[--$j]; //#7149
            $k[$j++] = _f; //#7149
            $k[$j++] = _f; //#7149
        } //#7149
        $j--; //#7149
        var _h = $k[--$j]; //#7150
        $put($_.barcode, $k[--$j], _h); //#7150
    } //#7150
    $puti($_.text, 1, $geti($_.text, 0, 9)); //#7154
    $put($_.text, 0, 65); //#7155
    $put($_.options, "dontdraw", true); //#7158
    $k[$j++] = 'args'; //#7159
    $k[$j++] = $_.barcode; //#7159
    $k[$j++] = $_.options; //#7159
    bwipp_code39(); //#7159
    var _q = $k[--$j]; //#7159
    var _r = $k[--$j]; //#7159
    $_[_r] = _q; //#7159
    $put($_.args, "txt", $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])])); //#7161
    $put($_.args, "textxalign", "center"); //#7162
    $put($_.args, "opt", $_.options); //#7163
    $k[$j++] = $_.args; //#7166
    if (!$_.dontdraw) { //#7166
        bwipp_renlinear(); //#7166
    } //#7166
    $_ = Object.getPrototypeOf($_); //#7168
} //bwipp_code32
function bwipp_pzn() {
    $_ = Object.create($_); //#7197
    $_.dontdraw = false; //#7200
    $_.includetext = false; //#7201
    $_.textfont = "OCR-B"; //#7202
    $_.textsize = 10; //#7203
    $_.textyoffset = -8; //#7204
    $_.textxoffset = 0; //#7205
    $_.height = 1; //#7206
    $_.pzn8 = false; //#7207
    $k[$j++] = $_; //#7209
    bwipp_processoptions(); //#7209
    $_.options = $k[--$j]; //#7209
    $_.barcode = $k[--$j]; //#7210
    if ($_.pzn8) { //#7219
        if (($_.barcode.length != 7) && ($_.barcode.length != 8)) { //#7216
            $k[$j++] = 'bwipp.pzn8badLength#7215'; //#7215
            $k[$j++] = "PZN8 must be 7 or 8 digits"; //#7215
            bwipp_raiseerror(); //#7215
        } //#7215
    } else { //#7219
        if (($_.barcode.length != 6) && ($_.barcode.length != 7)) { //#7220
            $k[$j++] = 'bwipp.pzn7badLength#7219'; //#7219
            $k[$j++] = "PZN7 must be 6 or 7 digits"; //#7219
            bwipp_raiseerror(); //#7219
        } //#7219
    } //#7219
    $forall($_.barcode, function() { //#7226
        var _8 = $k[--$j]; //#7223
        if ((_8 < 48) || (_8 > 57)) { //#7225
            $k[$j++] = 'bwipp.pznBadCharacter#7224'; //#7224
            $k[$j++] = "PZN must contain only digits"; //#7224
            bwipp_raiseerror(); //#7224
        } //#7224
    }); //#7224
    var _A = $_.pzn8 ? 9 : 8; //#7229
    $_.msglen = _A; //#7229
    $_.checksum = 0; //#7230
    for (var _D = 0, _C = $_.msglen - 3; _D <= _C; _D += 1) { //#7235
        $_.i = _D; //#7232
        var _J = $_.pzn8 ? 1 : 2; //#7233
        $_.checksum = $f(($f($get($_.barcode, $_.i) - 48) * ($_.i + _J)) + $_.checksum); //#7234
    } //#7234
    $_.checksum = $_.checksum % 11; //#7236
    if ($_.checksum == 10) { //#7239
        $k[$j++] = 'bwipp.pznBadInputSequence#7238'; //#7238
        $k[$j++] = "Incorrect PZN input sequence provided"; //#7238
        bwipp_raiseerror(); //#7238
    } //#7238
    if ($_.barcode.length == ($_.msglen - 1)) { //#7244
        if ($get($_.barcode, $_.msglen - 2) != $f($_.checksum + 48)) { //#7243
            $k[$j++] = 'bwipp.pznBadCheckDigit#7242'; //#7242
            $k[$j++] = "Incorrect PZN check digit provided"; //#7242
            bwipp_raiseerror(); //#7242
        } //#7242
    } //#7242
    var _U = $s($_.msglen); //#7245
    $put(_U, 0, 45); //#7246
    $puti(_U, 1, $_.barcode); //#7247
    $put(_U, $_.msglen - 1, $f($_.checksum + 48)); //#7248
    $_.msg = _U; //#7249
    $put($_.options, "dontdraw", true); //#7252
    $k[$j++] = 'args'; //#7253
    $k[$j++] = $_.msg; //#7253
    $k[$j++] = $_.options; //#7253
    bwipp_code39(); //#7253
    var _b = $k[--$j]; //#7253
    $_[$k[--$j]] = _b; //#7253
    $_.text = $s($_.msglen + 5); //#7256
    $puti($_.text, 0, "PZN - "); //#7257
    $puti($_.text, 6, $geti($_.msg, 1, $_.msglen - 1)); //#7258
    var _r = $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])]); //#7260
    $put($_.args, "txt", _r); //#7260
    $put($_.args, "textxalign", "center"); //#7261
    $put($_.args, "opt", $_.options); //#7262
    $k[$j++] = $_.args; //#7265
    if (!$_.dontdraw) { //#7265
        bwipp_renlinear(); //#7265
    } //#7265
    $_ = Object.getPrototypeOf($_); //#7267
} //bwipp_pzn
function bwipp_code93() {
    $_ = Object.create($_); //#7298
    $_.dontdraw = false; //#7301
    $_.includecheck = false; //#7302
    $_.includetext = false; //#7303
    $_.textfont = "OCR-B"; //#7304
    $_.textsize = 10; //#7305
    $_.textyoffset = -8; //#7306
    $_.height = 1; //#7307
    $_.parse = false; //#7308
    $_.parsefnc = false; //#7309
    $k[$j++] = $_; //#7311
    bwipp_processoptions(); //#7311
    $_.options = $k[--$j]; //#7311
    $_.barcode = $k[--$j]; //#7312
    bwipp_loadctx(bwipp_code93) //#7314
    if (!bwipp_code93.__7342__) { //#7342
        $_ = Object.create($_); //#7342
        $_.encs = $a(["131112", "111213", "111312", "111411", "121113", "121212", "121311", "111114", "131211", "141111", "211113", "211212", "211311", "221112", "221211", "231111", "112113", "112212", "112311", "122112", "132111", "111123", "111222", "111321", "121122", "131121", "212112", "212211", "211122", "211221", "221121", "222111", "112122", "112221", "122121", "123111", "121131", "311112", "311211", "321111", "112131", "113121", "211131", "121221", "312111", "311121", "122211", "111141", "1111411"]); //#7328
        $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#7331
        $_.charvals = new Map; //#7332
        for (var _3 = 0; _3 <= 42; _3 += 1) { //#7333
            $put($_.charvals, $get($_.barchars, _3), _3); //#7333
        } //#7333
        $_.sft1 = -1; //#7335
        $_.sft2 = -2; //#7335
        $_.sft3 = -3; //#7335
        $_.sft4 = -4; //#7335
        var _7 = $_.charvals; //#7337
        $put(_7, $_.sft1, 43); //#7337
        $put($_.charvals, $_.sft2, 44); //#7338
        $put($_.charvals, $_.sft3, 45); //#7339
        $put($_.charvals, $_.sft4, 46); //#7340
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code93.$ctx[id] = $_[id]); //#7340
        bwipp_code93.__7342__ = 1; //#7340
        $_ = Object.getPrototypeOf($_); //#7340
    } //#7340
    var _M = new Map([
        ["parse", $_.parse],
        ["parsefnc", $_.parsefnc],
        ["SFT$", $_.sft1],
        ["SFT%", $_.sft2],
        ["SFT/", $_.sft3],
        ["SFT+", $_.sft4]
    ]); //#7351
    $_.fncvals = _M; //#7352
    $k[$j++] = 'msg'; //#7353
    $k[$j++] = $_.barcode; //#7353
    $k[$j++] = $_.fncvals; //#7353
    bwipp_parseinput(); //#7353
    var _P = $k[--$j]; //#7353
    $_[$k[--$j]] = _P; //#7353
    $_.msglen = $_.msg.length; //#7354
    $forall($_.msg, function() { //#7361
        var _V = $get($_.charvals, $k[--$j]) !== undefined; //#7358
        if (!_V) { //#7360
            $k[$j++] = 'bwipp.code93BadCharacter#7359'; //#7359
            $k[$j++] = "Code 93 must only contain digits, capital letters, spaces, the symbols -.$/+ and shift non-data characters"; //#7359
            bwipp_raiseerror(); //#7359
        } //#7359
    }); //#7359
    if ($_.includecheck) { //#7366
        $_.sbs = $s(($_.msglen * 6) + 25); //#7364
    } else { //#7366
        $_.sbs = $s(($_.msglen * 6) + 13); //#7366
    } //#7366
    $_.txt = $a($_.msglen); //#7368
    $puti($_.sbs, 0, $get($_.encs, 47)); //#7371
    $_.checksum1 = 0; //#7373
    $_.checksum2 = 0; //#7373
    for (var _i = 0, _h = $_.msglen - 1; _i <= _h; _i += 1) { //#7382
        $_.i = _i; //#7375
        $_.indx = $get($_.charvals, $get($_.msg, $_.i)); //#7376
        $puti($_.sbs, ($_.i * 6) + 6, $get($_.encs, $_.indx)); //#7377
        var _v = $get($_.msg, $_.i); //#7378
        $k[$j++] = 'char'; //#7378
        $k[$j++] = _v; //#7378
        if (_v < 0) { //#7378
            $j--; //#7378
            $k[$j++] = " "; //#7378
        } else { //#7378
            var _w = $s(1); //#7378
            $put(_w, 0, $k[--$j]); //#7378
            $k[$j++] = _w; //#7378
        } //#7378
        var _y = $k[--$j]; //#7378
        $_[$k[--$j]] = _y; //#7378
        $put($_.txt, $_.i, $a([$_.char, ($_.i * 9) + 9, $_.textyoffset, $_.textfont, $_.textsize])); //#7379
        $_.checksum1 = $f($_.checksum1 + ((((($_.msglen - $_.i) - 1) % 20) + 1) * $_.indx)); //#7380
        $_.checksum2 = $f($_.checksum2 + (((($_.msglen - $_.i) % 15) + 1) * $_.indx)); //#7381
    } //#7381
    if ($_.includecheck) { //#7394
        $_.checksum1 = $_.checksum1 % 47; //#7386
        $_.checksum2 = $f($_.checksum2 + $_.checksum1) % 47; //#7387
        $puti($_.sbs, ($_.msglen * 6) + 6, $get($_.encs, $_.checksum1)); //#7388
        $puti($_.sbs, ($_.msglen * 6) + 12, $get($_.encs, $_.checksum2)); //#7389
        $puti($_.sbs, ($_.msglen * 6) + 18, $get($_.encs, 48)); //#7391
    } else { //#7394
        $puti($_.sbs, ($_.msglen * 6) + 6, $get($_.encs, 48)); //#7394
    } //#7394
    $k[$j++] = Infinity; //#7398
    $k[$j++] = Infinity; //#7400
    var _1c = $_.sbs; //#7400
    for (var _1d = 0, _1e = _1c.length; _1d < _1e; _1d++) { //#7400
        $k[$j++] = $get(_1c, _1d) - 48; //#7400
    } //#7400
    var _1g = $a(); //#7400
    $k[$j++] = Infinity; //#7401
    for (var _1i = 0, _1j = ~~(($_.sbs.length + 1) / 2); _1i < _1j; _1i++) { //#7401
        $k[$j++] = $_.height; //#7401
    } //#7401
    var _1l = $a(); //#7401
    $k[$j++] = Infinity; //#7402
    for (var _1n = 0, _1o = ~~(($_.sbs.length + 1) / 2); _1n < _1o; _1n++) { //#7402
        $k[$j++] = 0; //#7402
    } //#7402
    var _1p = $a(); //#7402
    $k[$j++] = 'ren'; //#7405
    $k[$j++] = bwipp_renlinear; //#7405
    $k[$j++] = 'sbs'; //#7405
    $k[$j++] = _1g; //#7405
    $k[$j++] = 'bhs'; //#7405
    $k[$j++] = _1l; //#7405
    $k[$j++] = 'bbs'; //#7405
    $k[$j++] = _1p; //#7405
    if ($_.includetext) { //#7405
        $k[$j++] = 'txt'; //#7404
        $k[$j++] = $_.txt; //#7404
    } //#7404
    $k[$j++] = 'opt'; //#7406
    $k[$j++] = $_.options; //#7406
    var _1t = $d(); //#7406
    $k[$j++] = _1t; //#7409
    if (!$_.dontdraw) { //#7409
        bwipp_renlinear(); //#7409
    } //#7409
    $_ = Object.getPrototypeOf($_); //#7411
    $_ = Object.getPrototypeOf($_); //#7413
} //bwipp_code93
function bwipp_code93ext() {
    $_ = Object.create($_); //#7445
    $_.dontdraw = false; //#7448
    $_.includetext = false; //#7449
    $_.parse = false; //#7450
    $k[$j++] = $_; //#7452
    bwipp_processoptions(); //#7452
    $_.options = $k[--$j]; //#7452
    $_.barcode = $k[--$j]; //#7453
    bwipp_loadctx(bwipp_code93ext) //#7455
    var _3 = new Map([
        ["parse", $_.parse],
        ["parseonly", true],
        ["parsefnc", false]
    ]); //#7461
    $_.fncvals = _3; //#7462
    $k[$j++] = 'barcode'; //#7463
    $k[$j++] = $_.barcode; //#7463
    $k[$j++] = $_.fncvals; //#7463
    bwipp_parseinput(); //#7463
    var _6 = $k[--$j]; //#7463
    var _7 = $k[--$j]; //#7463
    $_[_7] = _6; //#7463
    $_.barlen = $_.barcode.length; //#7464
    delete $_.options["parse"]; //#7465
    if (!bwipp_code93ext.__7487__) { //#7487
        $_ = Object.create($_); //#7487
        $_.extencs = $a
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code93ext.$ctx[id] = $_[id]); //#7486
        bwipp_code93ext.__7487__ = 1; //#7486
        $_ = Object.getPrototypeOf($_); //#7486
    } //#7486
    $_.newcode = $s($_.barlen * 6); //#7489
    $_.newtext = $s($_.barlen * 6); //#7490
    $_.j = 0; //#7491
    $_.k = 0; //#7491
    for (var _I = 0, _H = $_.barlen - 1; _I <= _H; _I += 1) { //#7505
        $_.i = _I; //#7493
        var _L = $get($_.barcode, $_.i); //#7494
        $k[$j++] = _L; //#7497
        if (_L > 127) { //#7497
            $j--; //#7496
            $k[$j++] = 'bwipp.code93extbadCharacter#7496'; //#7496
            $k[$j++] = "Code 93 Extended only support ASCII characters with values 0 to 127"; //#7496
            bwipp_raiseerror(); //#7496
        } //#7496
        $_.extchar = $get($_.extencs, $k[--$j]); //#7498
        $_.extlen = $_.extchar.length; //#7499
        $puti($_.newcode, $_.j, $_.extchar); //#7500
        var _X = $get($_.barcode, $_.i); //#7501
        $k[$j++] = $_.newtext; //#7501
        $k[$j++] = $_.k; //#7501
        $k[$j++] = _X; //#7501
        if ((_X < 32) || (_X == 127)) { //#7501
            $j--; //#7501
            $k[$j++] = 32; //#7501
        } //#7501
        var _Y = $k[--$j]; //#7501
        var _Z = $k[--$j]; //#7501
        $put($k[--$j], _Z, _Y); //#7501
        if ($_.extlen != 1) { //#7502
            $put($_.newtext, $_.k + 1, 32); //#7502
        } //#7502
        $_.j = $_.j + $_.extlen; //#7503
        var _i = ($_.extlen == 1) ? 1 : 2; //#7504
        $_.k = $_.k + _i; //#7504
    } //#7504
    $_.newcode = $geti($_.newcode, 0, $_.j); //#7506
    $_.newtext = $geti($_.newtext, 0, $_.k); //#7507
    $put($_.options, "dontdraw", true); //#7510
    $put($_.options, "parsefnc", true); //#7511
    $k[$j++] = 'args'; //#7512
    $k[$j++] = $_.newcode; //#7512
    $k[$j++] = $_.options; //#7512
    bwipp_code93(); //#7512
    var _t = $k[--$j]; //#7512
    $_[$k[--$j]] = _t; //#7512
    if ($_.includetext) { //#7524
        $_.txt = $get($_.args, "txt"); //#7516
        for (var _10 = 0, _z = $_.newtext.length - 1; _10 <= _z; _10 += 1) { //#7522
            $_.i = _10; //#7518
            $_.txtentry = $get($_.txt, $_.i); //#7519
            $put($_.txtentry, 0, $geti($_.newtext, $_.i, 1)); //#7520
            $put($_.txt, $_.i, $_.txtentry); //#7521
        } //#7521
        $put($_.args, "txt", $_.txt); //#7523
    } //#7523
    $put($_.args, "opt", $_.options); //#7525
    $k[$j++] = $_.args; //#7528
    if (!$_.dontdraw) { //#7528
        bwipp_renlinear(); //#7528
    } //#7528
    $_ = Object.getPrototypeOf($_); //#7530
    $_ = Object.getPrototypeOf($_); //#7532
} //bwipp_code93ext
function bwipp_interleaved2of5() {
    $_ = Object.create($_); //#7562
    $_.dontdraw = false; //#7565
    $_.includecheck = false; //#7566
    $_.includetext = false; //#7567
    $_.includecheckintext = false; //#7568
    $_.textfont = "OCR-B"; //#7569
    $_.textsize = 10; //#7570
    $_.textyoffset = -8; //#7571
    $_.height = 1; //#7572
    $k[$j++] = $_; //#7574
    bwipp_processoptions(); //#7574
    $_.options = $k[--$j]; //#7574
    $_.barcode = $k[--$j]; //#7575
    bwipp_loadctx(bwipp_interleaved2of5) //#7577
    $forall($_.barcode, function() { //#7584
        var _3 = $k[--$j]; //#7581
        if ((_3 < 48) || (_3 > 57)) { //#7583
            $k[$j++] = 'bwipp.interleaved2of5badCharacter#7582'; //#7582
            $k[$j++] = "Interleaved 2 of 5 must contain only digits"; //#7582
            bwipp_raiseerror(); //#7582
        } //#7582
    }); //#7582
    $_.barlen = $_.barcode.length; //#7586
    if (((($_.barlen % 2) == 0) && $_.includecheck) || ((($_.barlen % 2) != 0) && (!$_.includecheck))) { //#7597
        $_.pad = $s($_.barlen + 1); //#7592
        $put($_.pad, 0, 48); //#7593
        $puti($_.pad, 1, $_.barcode); //#7594
        $_.barcode = $_.pad; //#7595
        $_.barlen = $_.barlen + 1; //#7596
    } //#7596
    if ($_.includecheck) { //#7616
        $_.checksum = 0; //#7601
        for (var _J = 0, _I = $_.barlen - 1; _J <= _I; _J += 1) { //#7609
            $_.i = _J; //#7603
            if (($_.i % 2) == 0) { //#7607
                $_.checksum = $_.checksum + (($get($_.barcode, $_.i) - 48) * 3); //#7605
            } else { //#7607
                $_.checksum = $_.checksum + ($get($_.barcode, $_.i) - 48); //#7607
            } //#7607
        } //#7607
        $_.checksum = (10 - ($_.checksum % 10)) % 10; //#7610
        $_.pad = $s($_.barlen + 1); //#7611
        $puti($_.pad, 0, $_.barcode); //#7612
        $put($_.pad, $_.barlen, $_.checksum + 48); //#7613
        $_.barcode = $_.pad; //#7614
        $_.barlen = $_.barlen + 1; //#7615
    } //#7615
    if (!bwipp_interleaved2of5.__7628__) { //#7628
        $_ = Object.create($_); //#7628
        $_.encs = $a(["11221", "21112", "12112", "22111", "11212", "21211", "12211", "11122", "21121", "12121", "1111", "2111"]); //#7624
        $_.barchars = "0123456789"; //#7627
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_interleaved2of5.$ctx[id] = $_[id]); //#7627
        bwipp_interleaved2of5.__7628__ = 1; //#7627
        $_ = Object.getPrototypeOf($_); //#7627
    } //#7627
    $_.sbs = $s(($_.barlen * 5) + 8); //#7630
    $_.txt = $a($_.barlen); //#7631
    $puti($_.sbs, 0, $get($_.encs, 10)); //#7634
    for (var _o = 0, _n = $_.barlen - 1; _o <= _n; _o += 2) { //#7668
        $_.i = _o; //#7637
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#7639
        $j--; //#7640
        $_.indx = $k[--$j].length; //#7641
        $j -= 2; //#7642
        $_.enca = $get($_.encs, $_.indx); //#7643
        $search($_.barchars, $geti($_.barcode, $_.i + 1, 1)); //#7645
        $j--; //#7646
        $_.indx = $k[--$j].length; //#7647
        $j -= 2; //#7648
        $_.encb = $get($_.encs, $_.indx); //#7649
        $_.intl = $s($_.enca.length * 2); //#7652
        for (var _19 = 0, _18 = $_.enca.length - 1; _19 <= _18; _19 += 1) { //#7659
            $_.j = _19; //#7654
            $_.achar = $get($_.enca, $_.j); //#7655
            $_.bchar = $get($_.encb, $_.j); //#7656
            $put($_.intl, $_.j * 2, $_.achar); //#7657
            $put($_.intl, ($_.j * 2) + 1, $_.bchar); //#7658
        } //#7658
        $puti($_.sbs, ($_.i * 5) + 4, $_.intl); //#7661
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ($_.i * 9) + 4, $_.textyoffset, $_.textfont, $_.textsize])); //#7662
        if (($_.includecheck && (!$_.includecheckintext)) && (($_.barlen - 2) == $_.i)) { //#7666
            $put($_.txt, $_.i + 1, $a([" ", (($_.i + 1) * 9) + 4, $_.textyoffset, $_.textfont, $_.textsize])); //#7664
        } else { //#7666
            $put($_.txt, $_.i + 1, $a([$geti($_.barcode, $_.i + 1, 1), (($_.i + 1) * 9) + 4, $_.textyoffset, $_.textfont, $_.textsize])); //#7666
        } //#7666
    } //#7666
    $puti($_.sbs, ($_.barlen * 5) + 4, $get($_.encs, 11)); //#7671
    $k[$j++] = Infinity; //#7674
    $k[$j++] = Infinity; //#7676
    var _1y = $_.sbs; //#7676
    for (var _1z = 0, _20 = _1y.length; _1z < _20; _1z++) { //#7676
        $k[$j++] = $get(_1y, _1z) - 48; //#7676
    } //#7676
    var _22 = $a(); //#7676
    $k[$j++] = Infinity; //#7677
    for (var _24 = 0, _25 = ~~(($_.sbs.length + 1) / 2); _24 < _25; _24++) { //#7677
        $k[$j++] = $_.height; //#7677
    } //#7677
    var _27 = $a(); //#7677
    $k[$j++] = Infinity; //#7678
    for (var _29 = 0, _2A = ~~(($_.sbs.length + 1) / 2); _29 < _2A; _29++) { //#7678
        $k[$j++] = 0; //#7678
    } //#7678
    var _2B = $a(); //#7678
    $k[$j++] = 'ren'; //#7681
    $k[$j++] = bwipp_renlinear; //#7681
    $k[$j++] = 'sbs'; //#7681
    $k[$j++] = _22; //#7681
    $k[$j++] = 'bhs'; //#7681
    $k[$j++] = _27; //#7681
    $k[$j++] = 'bbs'; //#7681
    $k[$j++] = _2B; //#7681
    if ($_.includetext) { //#7681
        $k[$j++] = 'txt'; //#7680
        $k[$j++] = $_.txt; //#7680
    } //#7680
    $k[$j++] = 'barratio'; //#7684
    $k[$j++] = 2; //#7684
    $k[$j++] = 'spaceratio'; //#7684
    $k[$j++] = 2; //#7684
    $k[$j++] = 'opt'; //#7684
    $k[$j++] = $_.options; //#7684
    var _2F = $d(); //#7684
    $k[$j++] = _2F; //#7687
    if (!$_.dontdraw) { //#7687
        bwipp_renlinear(); //#7687
    } //#7687
    $_ = Object.getPrototypeOf($_); //#7689
    $_ = Object.getPrototypeOf($_); //#7691
} //bwipp_interleaved2of5
function bwipp_itf14() {
    $_ = Object.create($_); //#7720
    $_.dontdraw = false; //#7723
    $_.includetext = false; //#7724
    $_.includecheckintext = true; //#7725
    $_.textfont = "OCR-B"; //#7726
    $_.textsize = 10; //#7727
    $_.textxoffset = 0; //#7728
    $_.textyoffset = 3.5; //#7729
    $_.height = 0.5; //#7730
    $_.showborder = true; //#7731
    $_.borderwidth = 4; //#7732
    $_.borderleft = 10; //#7733
    $_.borderright = 10; //#7734
    $_.bordertop = -0.55; //#7735
    $_.borderbottom = -0.55; //#7736
    $k[$j++] = $_; //#7738
    bwipp_processoptions(); //#7738
    $_.options = $k[--$j]; //#7738
    $_.barcode = $k[--$j]; //#7739
    $_.text = $_.barcode; //#7742
    var _3 = $_.barcode; //#7743
    $k[$j++] = $s(_3.length); //#7744
    $k[$j++] = 0; //#7744
    $forall(_3, function() { //#7744
        var _5 = $k[--$j]; //#7744
        $k[$j++] = _5; //#7744
        if (_5 != 32) { //#7744
            var _6 = $k[--$j]; //#7744
            var _7 = $k[--$j]; //#7744
            var _8 = $k[--$j]; //#7744
            $put(_8, _7, _6); //#7744
            $k[$j++] = _8; //#7744
            $k[$j++] = $f(_7 + 1); //#7744
        } else { //#7744
            $j--; //#7744
        } //#7744
    }); //#7744
    var _9 = $k[--$j]; //#7745
    $_.barcode = $geti($k[--$j], 0, _9); //#7745
    $_.hasspace = $_.text.length != $_.barcode.length; //#7746
    if (($_.barcode.length != 13) && ($_.barcode.length != 14)) { //#7751
        $k[$j++] = 'bwipp.itf14badLength#7750'; //#7750
        $k[$j++] = "ITF-14 must be 13 or 14 digits"; //#7750
        bwipp_raiseerror(); //#7750
    } //#7750
    var _G = $_.barcode; //#7752
    for (var _H = 0, _I = _G.length; _H < _I; _H++) { //#7756
        var _J = $get(_G, _H); //#7756
        if ((_J < 48) || (_J > 57)) { //#7755
            $k[$j++] = 'bwipp.itf14badCharacter#7754'; //#7754
            $k[$j++] = "ITF-14 must contain only digits"; //#7754
            bwipp_raiseerror(); //#7754
        } //#7754
    } //#7754
    $_.checksum = 0; //#7759
    for (var _K = 0; _K <= 12; _K += 1) { //#7763
        $_.i = _K; //#7761
        $k[$j++] = 'checksum'; //#7762
        $k[$j++] = $_.checksum; //#7762
        $k[$j++] = $f($get($_.barcode, $_.i) - 48); //#7762
        if (($_.i % 2) == 0) { //#7762
            var _Q = $k[--$j]; //#7762
            $k[$j++] = _Q * 3; //#7762
        } //#7762
        var _R = $k[--$j]; //#7762
        var _S = $k[--$j]; //#7762
        $_[$k[--$j]] = $f(_S + _R); //#7762
    } //#7762
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#7764
    if ($_.barcode.length == 14) { //#7778
        if ($get($_.barcode, 13) != ($_.checksum + 48)) { //#7768
            $k[$j++] = 'bwipp.itf14badCheckDigit#7767'; //#7767
            $k[$j++] = "Incorrect ITF-14 check digit provided"; //#7767
            bwipp_raiseerror(); //#7767
        } //#7767
    } else { //#7778
        var _Z = $s(14); //#7770
        $puti(_Z, 0, $_.barcode); //#7771
        $put(_Z, 13, $_.checksum + 48); //#7772
        $_.barcode = _Z; //#7773
        var _e = $_.hasspace ? 2 : 1; //#7774
        var _f = $s($_.text.length + _e); //#7774
        $puti(_f, _f.length - 2, " "); //#7775
        $put(_f, _f.length - 1, $_.checksum + 48); //#7776
        $puti(_f, 0, $_.text); //#7777
        $_.text = _f; //#7778
    } //#7778
    var _i = $_.options; //#7782
    $put(_i, "dontdraw", true); //#7782
    $put($_.options, "showborder", $_.showborder); //#7783
    $put($_.options, "borderwidth", $_.borderwidth); //#7784
    $put($_.options, "borderleft", $_.borderleft); //#7785
    $put($_.options, "borderright", $_.borderright); //#7786
    var _r = $_.options; //#7787
    $put(_r, "bordertop", $_.bordertop); //#7787
    $put($_.options, "borderbottom", $_.borderbottom); //#7788
    $put($_.options, "height", $_.height); //#7789
    $put($_.options, "textyoffset", $_.textyoffset); //#7790
    $k[$j++] = 'args'; //#7791
    $k[$j++] = $_.barcode; //#7791
    $k[$j++] = $_.options; //#7791
    bwipp_interleaved2of5(); //#7791
    var _11 = $k[--$j]; //#7791
    $_[$k[--$j]] = _11; //#7791
    $put($_.args, "txt", $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])])); //#7793
    $put($_.args, "textxalign", "center"); //#7794
    $put($_.args, "opt", $_.options); //#7795
    $k[$j++] = $_.args; //#7798
    if (!$_.dontdraw) { //#7798
        bwipp_renlinear(); //#7798
    } //#7798
    $_ = Object.getPrototypeOf($_); //#7800
} //bwipp_itf14
function bwipp_identcode() {
    $_ = Object.create($_); //#7829
    $_.dontdraw = false; //#7832
    $_.includetext = false; //#7833
    $_.textfont = "OCR-B"; //#7834
    $_.textsize = 10; //#7835
    $_.textxoffset = 0; //#7836
    $_.textyoffset = -8; //#7837
    $_.height = 1; //#7838
    $k[$j++] = $_; //#7840
    bwipp_processoptions(); //#7840
    $_.options = $k[--$j]; //#7840
    $_.barcode = $k[--$j]; //#7841
    if (($_.barcode.length != 11) && ($_.barcode.length != 12)) { //#7846
        $k[$j++] = 'bwipp.identcodeBadLength#7845'; //#7845
        $k[$j++] = "Deutsche Post Identcode must be 11 or 12 digits"; //#7845
        bwipp_raiseerror(); //#7845
    } //#7845
    $forall($_.barcode, function() { //#7851
        var _5 = $k[--$j]; //#7848
        if ((_5 < 48) || (_5 > 57)) { //#7850
            $k[$j++] = 'bwipp.identcodeBadCharacter#7849'; //#7849
            $k[$j++] = "Deutsche Post Identcode must contain only digits"; //#7849
            bwipp_raiseerror(); //#7849
        } //#7849
    }); //#7849
    $_.checksum = 0; //#7854
    for (var _6 = 0; _6 <= 10; _6 += 1) { //#7858
        $_.i = _6; //#7856
        $k[$j++] = 'checksum'; //#7857
        $k[$j++] = $_.checksum; //#7857
        $k[$j++] = $f($get($_.barcode, $_.i) - 48); //#7857
        if (($_.i % 2) == 0) { //#7857
            var _C = $k[--$j]; //#7857
            $k[$j++] = _C * 4; //#7857
        } else { //#7857
            var _D = $k[--$j]; //#7857
            $k[$j++] = _D * 9; //#7857
        } //#7857
        var _E = $k[--$j]; //#7857
        var _F = $k[--$j]; //#7857
        $_[$k[--$j]] = $f(_F + _E); //#7857
    } //#7857
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#7859
    if ($_.barcode.length == 12) { //#7864
        if ($get($_.barcode, 11) != ($_.checksum + 48)) { //#7863
            $k[$j++] = 'bwipp.identcodeBadCheckDigit#7862'; //#7862
            $k[$j++] = "Incorrect Deutsche Post Identcode check digit provided"; //#7862
            bwipp_raiseerror(); //#7862
        } //#7862
    } //#7862
    var _M = $s(12); //#7865
    $puti(_M, 0, $_.barcode); //#7866
    $put(_M, 11, $_.checksum + 48); //#7867
    $_.barcode = _M; //#7868
    $_.text = $strcpy($s(16), "  .       .     "); //#7871
    $puti($_.text, 0, $geti($_.barcode, 0, 2)); //#7872
    $puti($_.text, 3, $geti($_.barcode, 2, 3)); //#7873
    $puti($_.text, 7, $geti($_.barcode, 5, 3)); //#7874
    $puti($_.text, 11, $geti($_.barcode, 8, 3)); //#7875
    $puti($_.text, 15, $geti($_.barcode, 11, 1)); //#7876
    $put($_.options, "dontdraw", true); //#7879
    $put($_.options, "includecheck", false); //#7880
    var _i = $_.barcode; //#7881
    $k[$j++] = 'args'; //#7881
    $k[$j++] = _i; //#7881
    $k[$j++] = $_.options; //#7881
    bwipp_interleaved2of5(); //#7881
    var _k = $k[--$j]; //#7881
    $_[$k[--$j]] = _k; //#7881
    var _r = $_.textsize; //#7883
    $put($_.args, "txt", $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, _r])])); //#7883
    $put($_.args, "textxalign", "center"); //#7884
    $put($_.args, "opt", $_.options); //#7885
    $k[$j++] = $_.args; //#7888
    if (!$_.dontdraw) { //#7888
        bwipp_renlinear(); //#7888
    } //#7888
    $_ = Object.getPrototypeOf($_); //#7890
} //bwipp_identcode
function bwipp_leitcode() {
    $_ = Object.create($_); //#7919
    $_.dontdraw = false; //#7922
    $_.includetext = false; //#7923
    $_.textfont = "OCR-B"; //#7924
    $_.textsize = 10; //#7925
    $_.textxoffset = 0; //#7926
    $_.textyoffset = -8; //#7927
    $_.height = 1; //#7928
    $k[$j++] = $_; //#7930
    bwipp_processoptions(); //#7930
    $_.options = $k[--$j]; //#7930
    $_.barcode = $k[--$j]; //#7931
    if (($_.barcode.length != 13) && ($_.barcode.length != 14)) { //#7936
        $k[$j++] = 'bwipp.leitcodeBadLength#7935'; //#7935
        $k[$j++] = "Deutsche Post Leitcode must be 13 or 14 digits"; //#7935
        bwipp_raiseerror(); //#7935
    } //#7935
    $forall($_.barcode, function() { //#7941
        var _5 = $k[--$j]; //#7938
        if ((_5 < 48) || (_5 > 57)) { //#7940
            $k[$j++] = 'bwipp.leitcodeBadCharacter#7939'; //#7939
            $k[$j++] = "Deutsche Post Leitcode must contain only digits"; //#7939
            bwipp_raiseerror(); //#7939
        } //#7939
    }); //#7939
    $_.checksum = 0; //#7944
    for (var _6 = 0; _6 <= 12; _6 += 1) { //#7948
        $_.i = _6; //#7946
        $k[$j++] = 'checksum'; //#7947
        $k[$j++] = $_.checksum; //#7947
        $k[$j++] = $f($get($_.barcode, $_.i) - 48); //#7947
        if (($_.i % 2) == 0) { //#7947
            var _C = $k[--$j]; //#7947
            $k[$j++] = _C * 4; //#7947
        } else { //#7947
            var _D = $k[--$j]; //#7947
            $k[$j++] = _D * 9; //#7947
        } //#7947
        var _E = $k[--$j]; //#7947
        var _F = $k[--$j]; //#7947
        $_[$k[--$j]] = $f(_F + _E); //#7947
    } //#7947
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#7949
    if ($_.barcode.length == 14) { //#7954
        if ($get($_.barcode, 13) != ($_.checksum + 48)) { //#7953
            $k[$j++] = 'bwipp.leitcodeBadCheckDigit#7952'; //#7952
            $k[$j++] = "Incorrect Deutsche Post Leitcode check digit provided"; //#7952
            bwipp_raiseerror(); //#7952
        } //#7952
    } //#7952
    var _M = $s(14); //#7955
    $puti(_M, 0, $_.barcode); //#7956
    $put(_M, 13, $_.checksum + 48); //#7957
    $_.barcode = _M; //#7958
    $_.text = $strcpy($s(18), "     .   .   .    "); //#7961
    $puti($_.text, 0, $geti($_.barcode, 0, 5)); //#7962
    $puti($_.text, 6, $geti($_.barcode, 5, 3)); //#7963
    $puti($_.text, 10, $geti($_.barcode, 8, 3)); //#7964
    $puti($_.text, 14, $geti($_.barcode, 11, 2)); //#7965
    $puti($_.text, 17, $geti($_.barcode, 13, 1)); //#7966
    $put($_.options, "dontdraw", true); //#7969
    $put($_.options, "includecheck", false); //#7970
    var _i = $_.barcode; //#7971
    $k[$j++] = 'args'; //#7971
    $k[$j++] = _i; //#7971
    $k[$j++] = $_.options; //#7971
    bwipp_interleaved2of5(); //#7971
    var _k = $k[--$j]; //#7971
    $_[$k[--$j]] = _k; //#7971
    var _r = $_.textsize; //#7973
    $put($_.args, "txt", $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, _r])])); //#7973
    $put($_.args, "textxalign", "center"); //#7974
    $put($_.args, "opt", $_.options); //#7975
    $k[$j++] = $_.args; //#7978
    if (!$_.dontdraw) { //#7978
        bwipp_renlinear(); //#7978
    } //#7978
    $_ = Object.getPrototypeOf($_); //#7980
} //bwipp_leitcode
function bwipp_databaromni() {
    $_ = Object.create($_); //#8011
    $_.dontdraw = false; //#8014
    $_.height = 33 / 72; //#8015
    $_.linkage = false; //#8016
    $_.format = "omni"; //#8017
    $_.barxmult = 33; //#8018
    $k[$j++] = $_; //#8020
    bwipp_processoptions(); //#8020
    $_.options = $k[--$j]; //#8020
    $_.barcode = $k[--$j]; //#8021
    if (($_.barcode.length != 17) && ($_.barcode.length != 18)) { //#8025
        $k[$j++] = 'bwipp.databaromniBadLength#8024'; //#8024
        $k[$j++] = "GS1 DataBar Omnidirectional must be 13 or 14 digits"; //#8024
        bwipp_raiseerror(); //#8024
    } //#8024
    if ($ne($geti($_.barcode, 0, 4), "(01)")) { //#8028
        $k[$j++] = 'bwipp.databaromniBadAI#8027'; //#8027
        $k[$j++] = "GS1 DataBar Omnidirectional must begin with (01) application identifier"; //#8027
        bwipp_raiseerror(); //#8027
    } //#8027
    var _8 = $geti($_.barcode, 4, $_.barcode.length - 4); //#8029
    for (var _9 = 0, _A = _8.length; _9 < _A; _9++) { //#8033
        var _B = $get(_8, _9); //#8033
        if ((_B < 48) || (_B > 57)) { //#8032
            $k[$j++] = 'bwipp.databaromniBadCharacter#8031'; //#8031
            $k[$j++] = "GS1 DataBar Omnidirectional must contain only digits"; //#8031
            bwipp_raiseerror(); //#8031
        } //#8031
    } //#8031
    if ($_.barxmult < 33) { //#8037
        $k[$j++] = 'bwipp.databarStackedOmniBarXmult#8036'; //#8036
        $k[$j++] = "GS1 DataBar Stacked Omnidirectional must have a barxmult of at least 33"; //#8036
        bwipp_raiseerror(); //#8036
    } //#8036
    if ((($ne($_.format, "omni") && $ne($_.format, "stacked")) && $ne($_.format, "stackedomni")) && $ne($_.format, "truncated")) { //#8041
        $k[$j++] = 'bwipp.databaromniBadFormat#8040'; //#8040
        $k[$j++] = "Valid formats are omni, stacked, stackedomni and truncated"; //#8040
        bwipp_raiseerror(); //#8040
    } //#8040
    if ($eq($_.format, "truncated")) { //#8043
        $_.height = 13 / 72; //#8043
    } //#8043
    bwipp_loadctx(bwipp_databaromni) //#8045
    $_.checksum = 0; //#8048
    for (var _I = 0; _I <= 12; _I += 1) { //#8052
        $_.i = _I; //#8050
        $k[$j++] = 'checksum'; //#8051
        $k[$j++] = $_.checksum; //#8051
        $k[$j++] = $f($get($_.barcode, $_.i + 4) - 48); //#8051
        if (($_.i % 2) == 0) { //#8051
            var _O = $k[--$j]; //#8051
            $k[$j++] = _O * 3; //#8051
        } //#8051
        var _P = $k[--$j]; //#8051
        var _Q = $k[--$j]; //#8051
        $_[$k[--$j]] = $f(_Q + _P); //#8051
    } //#8051
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#8053
    if ($_.barcode.length == 18) { //#8058
        if ($get($_.barcode, 17) != ($_.checksum + 48)) { //#8057
            $k[$j++] = 'bwipp.databaromniBadCheckDigit#8056'; //#8056
            $k[$j++] = "Incorrect GS1 DataBar Omnidirectional check digit provided"; //#8056
            bwipp_raiseerror(); //#8056
        } //#8056
    } //#8056
    var _X = $s(18); //#8059
    $puti(_X, 0, $_.barcode); //#8060
    $put(_X, 17, $_.checksum + 48); //#8061
    $_.barcode = _X; //#8062
    $_.txt = $a($_.barcode.length); //#8065
    for (var _e = 0, _d = $_.barcode.length - 1; _e <= _d; _e += 1) { //#8069
        $_.i = _e; //#8067
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), 0, 0, "", 0])); //#8068
    } //#8068
    $_.ncr = function() {
        var _l = $k[--$j]; //#8072
        var _m = $k[--$j]; //#8072
        var _n = $f(_m - _l); //#8072
        if (_l < $f(_m - _l)) { //#8072
            var _ = _n; //#8072
            _n = _l; //#8072
            _l = _; //#8072
        } //#8072
        $k[$j++] = _n; //#8079
        $k[$j++] = 1; //#8079
        $k[$j++] = 1; //#8079
        for (var _p = _m, _o = $f(_l + 1); _p >= _o; _p -= 1) { //#8079
            var _q = $k[--$j]; //#8075
            var _r = $k[--$j]; //#8076
            var _s = $k[--$j]; //#8076
            $k[$j++] = _s; //#8078
            $k[$j++] = _r; //#8078
            $k[$j++] = _q * _p; //#8078
            if ($le(_r, _s)) { //#8078
                var _t = $k[--$j]; //#8077
                var _u = $k[--$j]; //#8077
                $k[$j++] = $f(_u + 1); //#8077
                $k[$j++] = ~~(_t / _u); //#8077
            } //#8077
        } //#8077
        for (;;) { //#8083
            var _v = $k[--$j]; //#8081
            var _w = $k[--$j]; //#8081
            var _x = $k[--$j]; //#8081
            $k[$j++] = _x; //#8081
            $k[$j++] = _w; //#8081
            $k[$j++] = _v; //#8081
            if ($gt(_w, _x)) { //#8081
                break; //#8081
            } //#8081
            var _y = $k[--$j]; //#8082
            var _z = $k[--$j]; //#8082
            $k[$j++] = $f(_z + 1); //#8082
            $k[$j++] = ~~(_y / _z); //#8082
        } //#8082
        var _10 = $k[--$j]; //#8084
        var _11 = $k[--$j]; //#8084
        $k[$j++] = _10; //#8084
        $k[$j++] = _11; //#8084
        $j--; //#8084
        var _12 = $k[--$j]; //#8084
        var _13 = $k[--$j]; //#8084
        $k[$j++] = _12; //#8084
        $k[$j++] = _13; //#8084
        $j--; //#8084
    }; //#8084
    $_.getRSSwidths = function() {
        $_.oe = $k[--$j]; //#8088
        $_.el = $k[--$j]; //#8089
        $_.mw = $k[--$j]; //#8090
        $_.nm = $k[--$j]; //#8091
        $_.val = $k[--$j]; //#8092
        $_.out = $a($_.el); //#8093
        $_.mask = 0; //#8094
        for (var _1D = 0, _1C = $f($_.el - 2); _1D <= _1C; _1D += 1) { //#8121
            $_.bar = _1D; //#8096
            $_.ew = 1; //#8097
            var _1F = $_.bar; //#8098
            $_.mask = $_.mask | ((_1F < 0 ? 1 >>> -_1F : 1 << _1F)); //#8098
            for (;;) { //#8117
                $k[$j++] = 'sval'; //#8099
                $k[$j++] = $f($f($_.nm - $_.ew) - 1); //#8099
                $k[$j++] = $f($f($_.el - $_.bar) - 2); //#8099
                $_.ncr(); //#8099
                var _1K = $k[--$j]; //#8099
                $_[$k[--$j]] = _1K; //#8099
                if (($_.oe && ($_.mask == 0)) && (($f(($f($f($_.nm - $_.ew) - ($_.el * 2))) + ($_.bar * 2))) >= -2)) { //#8102
                    $k[$j++] = 'sval'; //#8101
                    $k[$j++] = $_.sval; //#8101
                    $k[$j++] = $f(($f($f($_.nm - $_.ew) - $_.el)) + $_.bar); //#8101
                    $k[$j++] = $f($f($_.el - $_.bar) - 2); //#8101
                    $_.ncr(); //#8101
                    var _1Z = $k[--$j]; //#8101
                    var _1a = $k[--$j]; //#8101
                    $_[$k[--$j]] = $f(_1a - _1Z); //#8101
                } //#8101
                if ($f($_.el - $_.bar) > 2) { //#8111
                    $_.lval = 0; //#8104
                    for (var _1k = $f(($f(($f($f($_.nm - $_.ew) - $_.el)) + $_.bar)) + 2), _1j = $f($_.mw + 1); _1k >= _1j; _1k -= 1) { //#8108
                        $k[$j++] = $f(($f($f($_.nm - _1k) - $_.ew)) - 1); //#8106
                        $k[$j++] = $f($f($_.el - $_.bar) - 3); //#8106
                        $_.ncr(); //#8106
                        $_.lval = $f($k[--$j] + $_.lval); //#8107
                    } //#8107
                    $_.sval = $f($_.sval - ($_.lval * ($f($f($_.el - $_.bar) - 1)))); //#8109
                } else { //#8111
                    if ($f($_.nm - $_.ew) > $_.mw) { //#8111
                        $_.sval = $f($_.sval - 1); //#8111
                    } //#8111
                } //#8111
                $_.val = $f($_.val - $_.sval); //#8113
                if ($_.val < 0) { //#8114
                    break; //#8114
                } //#8114
                $_.ew = $_.ew + 1; //#8115
                var _24 = $_.bar; //#8116
                $_.mask = $_.mask & (~((_24 < 0 ? 1 >>> -_24 : 1 << _24))); //#8116
            } //#8116
            $_.val = $f($_.val + $_.sval); //#8118
            $_.nm = $f($_.nm - $_.ew); //#8119
            $put($_.out, $_.bar, $_.ew); //#8120
        } //#8120
        $put($_.out, $f($_.el - 1), $_.nm); //#8122
        $k[$j++] = $_.out; //#8123
    }; //#8123
    $k[$j++] = Infinity; //#8126
    var _2H = $_.linkage ? 1 : 0; //#8127
    var _2J = $geti($_.barcode, 4, 13); //#8128
    $k[$j++] = _2H; //#8128
    for (var _2K = 0, _2L = _2J.length; _2K < _2L; _2K++) { //#8128
        $k[$j++] = $f($get(_2J, _2K) - 48); //#8128
    } //#8128
    $_.binval = $a(); //#8128
    for (var _2O = 0; _2O <= 12; _2O += 1) { //#8135
        $_.i = _2O; //#8132
        var _2P = $_.binval; //#8133
        var _2Q = $_.i; //#8133
        $put(_2P, _2Q + 1, $f($get(_2P, _2Q + 1) + (($get($_.binval, $_.i) % 4537077) * 10))); //#8133
        $put($_.binval, $_.i, ~~($get($_.binval, $_.i) / 4537077)); //#8134
    } //#8134
    $_.right = $get($_.binval, 13) % 4537077; //#8136
    var _2c = $_.binval; //#8137
    $put(_2c, 13, ~~($get(_2c, 13) / 4537077)); //#8137
    $_.left = 0; //#8139
    $_.i = true; //#8140
    for (var _2e = 0; _2e <= 13; _2e += 1) { //#8150
        $_.j = _2e; //#8142
        var _2h = $get($_.binval, $_.j); //#8143
        $k[$j++] = _2h; //#8149
        if ((_2h == 0) && $_.i) { //#8148
            $j--; //#8145
        } else { //#8148
            $_.i = false; //#8147
            $_.left = $f($_.left + ($k[--$j] * (~~Math.pow(10, 13 - $_.j)))); //#8148
        } //#8148
    } //#8148
    $_.d1 = ~~($_.left / 1597); //#8152
    $_.d2 = $_.left % 1597; //#8153
    $_.d3 = ~~($_.right / 1597); //#8154
    $_.d4 = $_.right % 1597; //#8155
    if (!bwipp_databaromni.__8172__) { //#8172
        $_ = Object.create($_); //#8172
        $_.tab164 = $a([160, 0, 12, 4, 8, 1, 161, 1, 960, 161, 10, 6, 6, 3, 80, 10, 2014, 961, 8, 8, 4, 5, 31, 34, 2714, 2015, 6, 10, 3, 6, 10, 70, 2840, 2715, 4, 12, 1, 8, 1, 126]); //#8164
        $_.tab154 = $a([335, 0, 5, 10, 2, 7, 4, 84, 1035, 336, 7, 8, 4, 5, 20, 35, 1515, 1036, 9, 6, 6, 3, 48, 10, 1596, 1516, 11, 4, 8, 1, 81, 1]); //#8171
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_databaromni.$ctx[id] = $_[id]); //#8171
        bwipp_databaromni.__8172__ = 1; //#8171
        $_ = Object.getPrototypeOf($_); //#8171
    } //#8171
    $_.i = 0; //#8174
    for (;;) { //#8184
        if ($_.d1 <= $get($_.tab164, $_.i)) { //#8182
            var _2z = $geti($_.tab164, $_.i + 1, 7); //#8176
            for (var _30 = 0, _31 = _2z.length; _30 < _31; _30++) { //#8176
                $k[$j++] = $get(_2z, _30); //#8176
            } //#8176
            $_.d1te = $k[--$j]; //#8177
            $_.d1to = $k[--$j]; //#8177
            $_.d1mwe = $k[--$j]; //#8178
            $_.d1mwo = $k[--$j]; //#8178
            $_.d1ele = $k[--$j]; //#8179
            $_.d1elo = $k[--$j]; //#8179
            $_.d1gs = $k[--$j]; //#8180
            break; //#8181
        } //#8181
        $_.i = $_.i + 8; //#8183
    } //#8183
    $_.i = 0; //#8186
    for (;;) { //#8196
        if ($_.d2 <= $get($_.tab154, $_.i)) { //#8194
            var _3H = $geti($_.tab154, $_.i + 1, 7); //#8188
            for (var _3I = 0, _3J = _3H.length; _3I < _3J; _3I++) { //#8188
                $k[$j++] = $get(_3H, _3I); //#8188
            } //#8188
            $_.d2te = $k[--$j]; //#8189
            $_.d2to = $k[--$j]; //#8189
            $_.d2mwe = $k[--$j]; //#8190
            $_.d2mwo = $k[--$j]; //#8190
            $_.d2ele = $k[--$j]; //#8191
            $_.d2elo = $k[--$j]; //#8191
            $_.d2gs = $k[--$j]; //#8192
            break; //#8193
        } //#8193
        $_.i = $_.i + 8; //#8195
    } //#8195
    $_.i = 0; //#8198
    for (;;) { //#8208
        if ($_.d3 <= $get($_.tab164, $_.i)) { //#8206
            var _3Z = $geti($_.tab164, $_.i + 1, 7); //#8200
            for (var _3a = 0, _3b = _3Z.length; _3a < _3b; _3a++) { //#8200
                $k[$j++] = $get(_3Z, _3a); //#8200
            } //#8200
            $_.d3te = $k[--$j]; //#8201
            $_.d3to = $k[--$j]; //#8201
            $_.d3mwe = $k[--$j]; //#8202
            $_.d3mwo = $k[--$j]; //#8202
            $_.d3ele = $k[--$j]; //#8203
            $_.d3elo = $k[--$j]; //#8203
            $_.d3gs = $k[--$j]; //#8204
            break; //#8205
        } //#8205
        $_.i = $_.i + 8; //#8207
    } //#8207
    $_.i = 0; //#8210
    for (;;) { //#8220
        if ($_.d4 <= $get($_.tab154, $_.i)) { //#8218
            var _3r = $geti($_.tab154, $_.i + 1, 7); //#8212
            for (var _3s = 0, _3t = _3r.length; _3s < _3t; _3s++) { //#8212
                $k[$j++] = $get(_3r, _3s); //#8212
            } //#8212
            $_.d4te = $k[--$j]; //#8213
            $_.d4to = $k[--$j]; //#8213
            $_.d4mwe = $k[--$j]; //#8214
            $_.d4mwo = $k[--$j]; //#8214
            $_.d4ele = $k[--$j]; //#8215
            $_.d4elo = $k[--$j]; //#8215
            $_.d4gs = $k[--$j]; //#8216
            break; //#8217
        } //#8217
        $_.i = $_.i + 8; //#8219
    } //#8219
    $k[$j++] = 'd1wo'; //#8222
    $k[$j++] = ~~($f($_.d1 - $_.d1gs) / $_.d1te); //#8222
    $k[$j++] = $_.d1elo; //#8222
    $k[$j++] = $_.d1mwo; //#8222
    $k[$j++] = 4; //#8222
    $k[$j++] = false; //#8222
    $_.getRSSwidths(); //#8222
    var _48 = $k[--$j]; //#8222
    $_[$k[--$j]] = _48; //#8222
    $k[$j++] = 'd1we'; //#8223
    $k[$j++] = $f($_.d1 - $_.d1gs) % $_.d1te; //#8223
    $k[$j++] = $_.d1ele; //#8223
    $k[$j++] = $_.d1mwe; //#8223
    $k[$j++] = 4; //#8223
    $k[$j++] = true; //#8223
    $_.getRSSwidths(); //#8223
    var _4F = $k[--$j]; //#8223
    $_[$k[--$j]] = _4F; //#8223
    $k[$j++] = 'd2wo'; //#8224
    $k[$j++] = $f($_.d2 - $_.d2gs) % $_.d2to; //#8224
    $k[$j++] = $_.d2elo; //#8224
    $k[$j++] = $_.d2mwo; //#8224
    $k[$j++] = 4; //#8224
    $k[$j++] = true; //#8224
    $_.getRSSwidths(); //#8224
    var _4M = $k[--$j]; //#8224
    $_[$k[--$j]] = _4M; //#8224
    $k[$j++] = 'd2we'; //#8225
    $k[$j++] = ~~($f($_.d2 - $_.d2gs) / $_.d2to); //#8225
    $k[$j++] = $_.d2ele; //#8225
    $k[$j++] = $_.d2mwe; //#8225
    $k[$j++] = 4; //#8225
    $k[$j++] = false; //#8225
    $_.getRSSwidths(); //#8225
    var _4T = $k[--$j]; //#8225
    $_[$k[--$j]] = _4T; //#8225
    $k[$j++] = 'd3wo'; //#8226
    $k[$j++] = ~~($f($_.d3 - $_.d3gs) / $_.d3te); //#8226
    $k[$j++] = $_.d3elo; //#8226
    $k[$j++] = $_.d3mwo; //#8226
    $k[$j++] = 4; //#8226
    $k[$j++] = false; //#8226
    $_.getRSSwidths(); //#8226
    var _4a = $k[--$j]; //#8226
    $_[$k[--$j]] = _4a; //#8226
    $k[$j++] = 'd3we'; //#8227
    $k[$j++] = $f($_.d3 - $_.d3gs) % $_.d3te; //#8227
    $k[$j++] = $_.d3ele; //#8227
    $k[$j++] = $_.d3mwe; //#8227
    $k[$j++] = 4; //#8227
    $k[$j++] = true; //#8227
    $_.getRSSwidths(); //#8227
    var _4h = $k[--$j]; //#8227
    $_[$k[--$j]] = _4h; //#8227
    $k[$j++] = 'd4wo'; //#8228
    $k[$j++] = $f($_.d4 - $_.d4gs) % $_.d4to; //#8228
    $k[$j++] = $_.d4elo; //#8228
    $k[$j++] = $_.d4mwo; //#8228
    $k[$j++] = 4; //#8228
    $k[$j++] = true; //#8228
    $_.getRSSwidths(); //#8228
    var _4o = $k[--$j]; //#8228
    $_[$k[--$j]] = _4o; //#8228
    $k[$j++] = 'd4we'; //#8229
    $k[$j++] = ~~($f($_.d4 - $_.d4gs) / $_.d4to); //#8229
    $k[$j++] = $_.d4ele; //#8229
    $k[$j++] = $_.d4mwe; //#8229
    $k[$j++] = 4; //#8229
    $k[$j++] = false; //#8229
    $_.getRSSwidths(); //#8229
    var _4v = $k[--$j]; //#8229
    $_[$k[--$j]] = _4v; //#8229
    $_.d1w = $a(8); //#8231
    for (var _4y = 0; _4y <= 3; _4y += 1) { //#8236
        $_.i = _4y; //#8233
        $put($_.d1w, $_.i * 2, $get($_.d1wo, $_.i)); //#8234
        $put($_.d1w, ($_.i * 2) + 1, $get($_.d1we, $_.i)); //#8235
    } //#8235
    $_.d2w = $a(8); //#8238
    for (var _5A = 0; _5A <= 3; _5A += 1) { //#8243
        $_.i = _5A; //#8240
        $put($_.d2w, 7 - ($_.i * 2), $get($_.d2wo, $_.i)); //#8241
        $put($_.d2w, 6 - ($_.i * 2), $get($_.d2we, $_.i)); //#8242
    } //#8242
    $_.d3w = $a(8); //#8245
    for (var _5M = 0; _5M <= 3; _5M += 1) { //#8250
        $_.i = _5M; //#8247
        $put($_.d3w, 7 - ($_.i * 2), $get($_.d3wo, $_.i)); //#8248
        $put($_.d3w, 6 - ($_.i * 2), $get($_.d3we, $_.i)); //#8249
    } //#8249
    $_.d4w = $a(8); //#8252
    for (var _5Y = 0; _5Y <= 3; _5Y += 1) { //#8257
        $_.i = _5Y; //#8254
        $put($_.d4w, $_.i * 2, $get($_.d4wo, $_.i)); //#8255
        $put($_.d4w, ($_.i * 2) + 1, $get($_.d4we, $_.i)); //#8256
    } //#8256
    $k[$j++] = Infinity; //#8259
    var _5j = $_.d1w; //#8260
    for (var _5k = 0, _5l = _5j.length; _5k < _5l; _5k++) { //#8260
        $k[$j++] = $get(_5j, _5k); //#8260
    } //#8260
    var _5n = $_.d2w; //#8261
    for (var _5o = 0, _5p = _5n.length; _5o < _5p; _5o++) { //#8261
        $k[$j++] = $get(_5n, _5o); //#8261
    } //#8261
    var _5r = $_.d3w; //#8262
    for (var _5s = 0, _5t = _5r.length; _5s < _5t; _5s++) { //#8262
        $k[$j++] = $get(_5r, _5s); //#8262
    } //#8262
    var _5v = $_.d4w; //#8263
    for (var _5w = 0, _5x = _5v.length; _5w < _5x; _5w++) { //#8263
        $k[$j++] = $get(_5v, _5w); //#8263
    } //#8263
    $_.widths = $a(); //#8263
    if (!bwipp_databaromni.__8279__) { //#8279
        $_ = Object.create($_); //#8279
        $_.checkweights = $a([1, 3, 9, 27, 2, 6, 18, 54, 58, 72, 24, 8, 29, 36, 12, 4, 74, 51, 17, 32, 37, 65, 48, 16, 64, 34, 23, 69, 49, 68, 46, 59]); //#8272
        $_.checkwidths = $a([3, 8, 2, 1, 1, 3, 5, 5, 1, 1, 3, 3, 7, 1, 1, 3, 1, 9, 1, 1, 2, 7, 4, 1, 1, 2, 5, 6, 1, 1, 2, 3, 8, 1, 1, 1, 5, 7, 1, 1, 1, 3, 9, 1, 1]); //#8278
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_databaromni.$ctx[id] = $_[id]); //#8278
        bwipp_databaromni.__8279__ = 1; //#8278
        $_ = Object.getPrototypeOf($_); //#8278
    } //#8278
    $_.checksum = 0; //#8281
    for (var _63 = 0; _63 <= 31; _63 += 1) { //#8285
        $_.i = _63; //#8283
        $_.checksum = $f($_.checksum + ($get($_.widths, $_.i) * $get($_.checkweights, $_.i))); //#8284
    } //#8284
    $_.checksum = $_.checksum % 79; //#8286
    if ($_.checksum >= 8) { //#8287
        $_.checksum = $f($_.checksum + 1); //#8287
    } //#8287
    if ($_.checksum >= 72) { //#8288
        $_.checksum = $f($_.checksum + 1); //#8288
    } //#8288
    $_.checklt = $geti($_.checkwidths, (~~($_.checksum / 9)) * 5, 5); //#8289
    $_.checkrtrev = $geti($_.checkwidths, ($_.checksum % 9) * 5, 5); //#8290
    $_.checkrt = $a(5); //#8291
    for (var _6N = 0; _6N <= 4; _6N += 1) { //#8295
        $_.i = _6N; //#8293
        $put($_.checkrt, $_.i, $get($_.checkrtrev, 4 - $_.i)); //#8294
    } //#8294
    if ($eq($_.format, "omni") || $eq($_.format, "truncated")) { //#8423
        $k[$j++] = Infinity; //#8300
        var _6V = $_.d1w; //#8301
        $k[$j++] = 1; //#8301
        for (var _6W = 0, _6X = _6V.length; _6W < _6X; _6W++) { //#8301
            $k[$j++] = $get(_6V, _6W); //#8301
        } //#8301
        var _6Z = $_.checklt; //#8301
        for (var _6a = 0, _6b = _6Z.length; _6a < _6b; _6a++) { //#8301
            $k[$j++] = $get(_6Z, _6a); //#8301
        } //#8301
        var _6d = $_.d2w; //#8301
        for (var _6e = 0, _6f = _6d.length; _6e < _6f; _6e++) { //#8301
            $k[$j++] = $get(_6d, _6e); //#8301
        } //#8301
        var _6h = $_.d4w; //#8302
        for (var _6i = 0, _6j = _6h.length; _6i < _6j; _6i++) { //#8302
            $k[$j++] = $get(_6h, _6i); //#8302
        } //#8302
        var _6l = $_.checkrt; //#8302
        for (var _6m = 0, _6n = _6l.length; _6m < _6n; _6m++) { //#8302
            $k[$j++] = $get(_6l, _6m); //#8302
        } //#8302
        var _6p = $_.d3w; //#8302
        for (var _6q = 0, _6r = _6p.length; _6q < _6r; _6q++) { //#8302
            $k[$j++] = $get(_6p, _6q); //#8302
        } //#8302
        $k[$j++] = 1; //#8302
        $k[$j++] = 1; //#8302
        $_.sbs = $a(); //#8302
        $k[$j++] = Infinity; //#8305
        var _6u = $_.sbs; //#8307
        $k[$j++] = Infinity; //#8308
        for (var _6w = 0, _6x = ~~(($_.sbs.length + 1) / 2); _6w < _6x; _6w++) { //#8308
            $k[$j++] = $_.height; //#8308
        } //#8308
        var _6z = $a(); //#8308
        $k[$j++] = Infinity; //#8309
        for (var _71 = 0, _72 = ~~(($_.sbs.length + 1) / 2); _71 < _72; _71++) { //#8309
            $k[$j++] = 0; //#8309
        } //#8309
        var _73 = $a(); //#8309
        $k[$j++] = 'ren'; //#8314
        $k[$j++] = bwipp_renlinear; //#8314
        $k[$j++] = 'sbs'; //#8314
        $k[$j++] = _6u; //#8314
        $k[$j++] = 'bhs'; //#8314
        $k[$j++] = _6z; //#8314
        $k[$j++] = 'bbs'; //#8314
        $k[$j++] = _73; //#8314
        $k[$j++] = 'txt'; //#8314
        $k[$j++] = $_.txt; //#8314
        $k[$j++] = 'textxalign'; //#8314
        $k[$j++] = "center"; //#8314
        $k[$j++] = 'borderleft'; //#8314
        $k[$j++] = 0; //#8314
        $k[$j++] = 'borderright'; //#8314
        $k[$j++] = 0; //#8314
        $k[$j++] = 'opt'; //#8314
        $k[$j++] = $_.options; //#8314
        var _76 = $d(); //#8314
        $k[$j++] = _76; //#8317
        if (!$_.dontdraw) { //#8317
            bwipp_renlinear(); //#8317
        } //#8317
    } else { //#8423
        $k[$j++] = Infinity; //#8321
        var _78 = $_.d1w; //#8321
        $k[$j++] = 1; //#8321
        $k[$j++] = 1; //#8321
        for (var _79 = 0, _7A = _78.length; _79 < _7A; _79++) { //#8321
            $k[$j++] = $get(_78, _79); //#8321
        } //#8321
        var _7C = $_.checklt; //#8321
        for (var _7D = 0, _7E = _7C.length; _7D < _7E; _7D++) { //#8321
            $k[$j++] = $get(_7C, _7D); //#8321
        } //#8321
        var _7G = $_.d2w; //#8321
        for (var _7H = 0, _7I = _7G.length; _7H < _7I; _7H++) { //#8321
            $k[$j++] = $get(_7G, _7H); //#8321
        } //#8321
        $k[$j++] = 1; //#8321
        $k[$j++] = 1; //#8321
        $k[$j++] = 0; //#8321
        $_.top = $a(); //#8321
        $k[$j++] = Infinity; //#8322
        var _7L = $_.d4w; //#8322
        $k[$j++] = 1; //#8322
        $k[$j++] = 1; //#8322
        for (var _7M = 0, _7N = _7L.length; _7M < _7N; _7M++) { //#8322
            $k[$j++] = $get(_7L, _7M); //#8322
        } //#8322
        var _7P = $_.checkrt; //#8322
        for (var _7Q = 0, _7R = _7P.length; _7Q < _7R; _7Q++) { //#8322
            $k[$j++] = $get(_7P, _7Q); //#8322
        } //#8322
        var _7T = $_.d3w; //#8322
        for (var _7U = 0, _7V = _7T.length; _7U < _7V; _7U++) { //#8322
            $k[$j++] = $get(_7T, _7U); //#8322
        } //#8322
        $k[$j++] = 1; //#8322
        $k[$j++] = 1; //#8322
        $k[$j++] = 0; //#8322
        $_.bot = $a(); //#8322
        for (var _7Y = 0; _7Y <= 24; _7Y += 2) { //#8327
            $_.i = _7Y; //#8324
            for (var _7c = 0, _7d = $get($_.top, $_.i); _7c < _7d; _7c++) { //#8325
                $k[$j++] = 0; //#8325
            } //#8325
            for (var _7h = 0, _7i = $get($_.top, $_.i + 1); _7h < _7i; _7h++) { //#8326
                $k[$j++] = 1; //#8326
            } //#8326
        } //#8326
        $astore($a(50)); //#8328
        $_.top = $k[--$j]; //#8328
        for (var _7l = 0; _7l <= 24; _7l += 2) { //#8333
            $_.i = _7l; //#8330
            for (var _7p = 0, _7q = $get($_.bot, $_.i); _7p < _7q; _7p++) { //#8331
                $k[$j++] = 1; //#8331
            } //#8331
            for (var _7u = 0, _7v = $get($_.bot, $_.i + 1); _7u < _7v; _7u++) { //#8332
                $k[$j++] = 0; //#8332
            } //#8332
        } //#8332
        $astore($a(50)); //#8334
        $_.bot = $k[--$j]; //#8334
        if ($eq($_.format, "stacked")) { //#8356
            $_.sep = $a(50); //#8338
            $put($_.sep, 0, 0); //#8339
            for (var _81 = 1; _81 <= 49; _81 += 1) { //#8347
                $_.i = _81; //#8341
                if ($eq($get($_.top, $_.i), $get($_.bot, $_.i))) { //#8345
                    $put($_.sep, $_.i, $f(1 - $get($_.top, $_.i))); //#8343
                } else { //#8345
                    $put($_.sep, $_.i, $f(1 - $get($_.sep, $_.i - 1))); //#8345
                } //#8345
            } //#8345
            $puti($_.sep, 0, $a([0, 0, 0, 0])); //#8348
            $puti($_.sep, 46, $a([0, 0, 0, 0])); //#8349
            $k[$j++] = Infinity; //#8350
            for (var _8M = 0, _8N = 5; _8M < _8N; _8M++) { //#8351
                $aload($_.top); //#8351
            } //#8351
            $aload($_.sep); //#8352
            for (var _8Q = 0, _8R = 7; _8Q < _8R; _8Q++) { //#8353
                $aload($_.bot); //#8353
            } //#8353
            $_.pixs = $a(); //#8353
            $_.pixy = ~~($_.pixs.length / 50); //#8355
        } //#8355
        if ($eq($_.format, "stackedomni")) { //#8406
            $k[$j++] = Infinity; //#8360
            $forall($_.top, function() { //#8360
                var _8X = $k[--$j]; //#8360
                $k[$j++] = $f(1 - _8X); //#8360
            }); //#8360
            $_.sep1 = $a(); //#8360
            $puti($_.sep1, 0, $a([0, 0, 0, 0])); //#8361
            $puti($_.sep1, 46, $a([0, 0, 0, 0])); //#8362
            for (var _8d = 18; _8d <= 30; _8d += 1) { //#8375
                $_.i = _8d; //#8364
                if ($get($_.top, $_.i) == 0) { //#8372
                    if ($get($_.top, $_.i - 1) == 1) { //#8369
                        $k[$j++] = 1; //#8367
                    } else { //#8369
                        var _8n = ($get($_.sep1, $_.i - 1) == 0) ? 1 : 0; //#8369
                        $k[$j++] = _8n; //#8369
                    } //#8369
                } else { //#8372
                    $k[$j++] = 0; //#8372
                } //#8372
                $put($_.sep1, $_.i, $k[--$j]); //#8374
            } //#8374
            $k[$j++] = Infinity; //#8376
            $k[$j++] = 0; //#8376
            $k[$j++] = 0; //#8376
            $k[$j++] = 0; //#8376
            $k[$j++] = 0; //#8376
            for (var _8r = 0, _8s = 21; _8r < _8s; _8r++) { //#8376
                $k[$j++] = 0; //#8376
                $k[$j++] = 1; //#8376
            } //#8376
            $k[$j++] = 0; //#8376
            $k[$j++] = 0; //#8376
            $k[$j++] = 0; //#8376
            $k[$j++] = 0; //#8376
            $_.sep2 = $a(); //#8376
            $k[$j++] = Infinity; //#8377
            $forall($_.bot, function() { //#8377
                var _8v = $k[--$j]; //#8377
                $k[$j++] = $f(1 - _8v); //#8377
            }); //#8377
            $_.sep3 = $a(); //#8377
            $puti($_.sep3, 0, $a([0, 0, 0, 0])); //#8378
            $puti($_.sep3, 46, $a([0, 0, 0, 0])); //#8379
            for (var _91 = 19; _91 <= 31; _91 += 1) { //#8392
                $_.i = _91; //#8381
                if ($get($_.bot, $_.i) == 0) { //#8389
                    if ($get($_.bot, $_.i - 1) == 1) { //#8386
                        $k[$j++] = 1; //#8384
                    } else { //#8386
                        var _9B = ($get($_.sep3, $_.i - 1) == 0) ? 1 : 0; //#8386
                        $k[$j++] = _9B; //#8386
                    } //#8386
                } else { //#8389
                    $k[$j++] = 0; //#8389
                } //#8389
                $put($_.sep3, $_.i, $k[--$j]); //#8391
            } //#8391
            $_.f3 = $a([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1]); //#8393
            $k[$j++] = true; //#8394
            for (var _9G = 0; _9G <= 12; _9G += 1) { //#8394
                var _9L = $k[--$j]; //#8394
                $k[$j++] = _9L && $eq($get($_.bot, _9G + 19), $get($_.f3, _9G)); //#8394
            } //#8394
            if ($k[--$j]) { //#8397
                $puti($_.sep3, 19, $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0])); //#8396
            } //#8396
            $k[$j++] = Infinity; //#8398
            for (var _9Q = 0, _9R = $_.barxmult; _9Q < _9R; _9Q++) { //#8399
                $aload($_.top); //#8399
            } //#8399
            $aload($_.sep1); //#8400
            $aload($_.sep2); //#8401
            $aload($_.sep3); //#8402
            for (var _9X = 0, _9Y = $_.barxmult; _9X < _9Y; _9X++) { //#8403
                $aload($_.bot); //#8403
            } //#8403
            $_.pixs = $a(); //#8403
            $_.pixy = ~~($_.pixs.length / 50); //#8405
        } //#8405
        var _9g = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $_.pixs],
            ["pixx", 50],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", 50 / 72],
            ["borderleft", 0],
            ["borderright", 0],
            ["bordertop", 0],
            ["borderbottom", 0],
            ["opt", $_.options]
        ]); //#8420
        $k[$j++] = _9g; //#8423
        if (!$_.dontdraw) { //#8423
            bwipp_renmatrix(); //#8423
        } //#8423
    } //#8423
    $_ = Object.getPrototypeOf($_); //#8427
    $_ = Object.getPrototypeOf($_); //#8429
} //bwipp_databaromni
function bwipp_databarstacked() {
    $_ = Object.create($_); //#8458
    $_.dontdraw = false; //#8461
    $k[$j++] = $_; //#8463
    bwipp_processoptions(); //#8463
    $_.options = $k[--$j]; //#8463
    $_.barcode = $k[--$j]; //#8464
    if (($_.barcode.length != 17) && ($_.barcode.length != 18)) { //#8469
        $k[$j++] = 'bwipp.databarstackedBadLength#8468'; //#8468
        $k[$j++] = "GS1 DataBar Stacked must be 13 or 14 digits"; //#8468
        bwipp_raiseerror(); //#8468
    } //#8468
    if ($ne($geti($_.barcode, 0, 4), "(01)")) { //#8472
        $k[$j++] = 'bwipp.databarstackedBadAI#8471'; //#8471
        $k[$j++] = "GS1 DataBar Stacked must begin with (01) application identifier"; //#8471
        bwipp_raiseerror(); //#8471
    } //#8471
    var _8 = $geti($_.barcode, 4, $_.barcode.length - 4); //#8473
    for (var _9 = 0, _A = _8.length; _9 < _A; _9++) { //#8477
        var _B = $get(_8, _9); //#8477
        if ((_B < 48) || (_B > 57)) { //#8476
            $k[$j++] = 'bwipp.databarstackedBadCharacter#8475'; //#8475
            $k[$j++] = "GS1 DataBar Stacked must contain only digits"; //#8475
            bwipp_raiseerror(); //#8475
        } //#8475
    } //#8475
    $_.checksum = 0; //#8480
    for (var _C = 0; _C <= 12; _C += 1) { //#8484
        $_.i = _C; //#8482
        $k[$j++] = 'checksum'; //#8483
        $k[$j++] = $_.checksum; //#8483
        $k[$j++] = $f($get($_.barcode, $_.i + 4) - 48); //#8483
        if (($_.i % 2) == 0) { //#8483
            var _I = $k[--$j]; //#8483
            $k[$j++] = _I * 3; //#8483
        } //#8483
        var _J = $k[--$j]; //#8483
        var _K = $k[--$j]; //#8483
        $_[$k[--$j]] = $f(_K + _J); //#8483
    } //#8483
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#8485
    if ($_.barcode.length == 18) { //#8490
        if ($get($_.barcode, 17) != ($_.checksum + 48)) { //#8489
            $k[$j++] = 'bwipp.databarstackedBadCheckDigit#8488'; //#8488
            $k[$j++] = "Incorrect GS1 DataBar Stacked check digit provided"; //#8488
            bwipp_raiseerror(); //#8488
        } //#8488
    } //#8488
    var _R = $s(18); //#8491
    $puti(_R, 0, $_.barcode); //#8492
    $put(_R, 17, $_.checksum + 48); //#8493
    $_.barcode = _R; //#8494
    $put($_.options, "dontdraw", true); //#8497
    $put($_.options, "format", "stacked"); //#8498
    $k[$j++] = 'args'; //#8500
    $k[$j++] = $_.barcode; //#8500
    $k[$j++] = $_.options; //#8500
    bwipp_databaromni(); //#8500
    var _Y = $k[--$j]; //#8500
    $_[$k[--$j]] = _Y; //#8500
    $put($_.args, "opt", $_.options); //#8502
    $k[$j++] = $_.args; //#8505
    if (!$_.dontdraw) { //#8505
        bwipp_renmatrix(); //#8505
    } //#8505
    $_ = Object.getPrototypeOf($_); //#8507
} //bwipp_databarstacked
function bwipp_databarstackedomni() {
    $_ = Object.create($_); //#8536
    $_.dontdraw = false; //#8539
    $k[$j++] = $_; //#8541
    bwipp_processoptions(); //#8541
    $_.options = $k[--$j]; //#8541
    $_.barcode = $k[--$j]; //#8542
    if ($ne($geti($_.barcode, 0, 4), "(01)")) { //#8547
        $k[$j++] = 'bwipp.databarstackedomniBadAI#8546'; //#8546
        $k[$j++] = "GS1 DataBar Stacked Omnidirectional must begin with (01) application identifier"; //#8546
        bwipp_raiseerror(); //#8546
    } //#8546
    if (($_.barcode.length != 17) && ($_.barcode.length != 18)) { //#8550
        $k[$j++] = 'bwipp.databarstackedomniBadLength#8549'; //#8549
        $k[$j++] = "GS1 DataBar Stacked Omnidirectional must be 13 or 14 digits"; //#8549
        bwipp_raiseerror(); //#8549
    } //#8549
    var _8 = $geti($_.barcode, 4, $_.barcode.length - 4); //#8551
    for (var _9 = 0, _A = _8.length; _9 < _A; _9++) { //#8555
        var _B = $get(_8, _9); //#8555
        if ((_B < 48) || (_B > 57)) { //#8554
            $k[$j++] = 'bwipp.databarstackedomniBadCharacter#8553'; //#8553
            $k[$j++] = "GS1 DataBar Stacked Omnidirectional must contain only digits"; //#8553
            bwipp_raiseerror(); //#8553
        } //#8553
    } //#8553
    $_.checksum = 0; //#8558
    for (var _C = 0; _C <= 12; _C += 1) { //#8562
        $_.i = _C; //#8560
        $k[$j++] = 'checksum'; //#8561
        $k[$j++] = $_.checksum; //#8561
        $k[$j++] = $f($get($_.barcode, $_.i + 4) - 48); //#8561
        if (($_.i % 2) == 0) { //#8561
            var _I = $k[--$j]; //#8561
            $k[$j++] = _I * 3; //#8561
        } //#8561
        var _J = $k[--$j]; //#8561
        var _K = $k[--$j]; //#8561
        $_[$k[--$j]] = $f(_K + _J); //#8561
    } //#8561
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#8563
    if ($_.barcode.length == 18) { //#8568
        if ($get($_.barcode, 17) != ($_.checksum + 48)) { //#8567
            $k[$j++] = 'bwipp.databarstackedomniBadCheckDigit#8566'; //#8566
            $k[$j++] = "Incorrect GS1 DataBar Stacked Omnidirectional check digit provided"; //#8566
            bwipp_raiseerror(); //#8566
        } //#8566
    } //#8566
    var _R = $s(18); //#8569
    $puti(_R, 0, $_.barcode); //#8570
    $put(_R, 17, $_.checksum + 48); //#8571
    $_.barcode = _R; //#8572
    $put($_.options, "dontdraw", true); //#8575
    $put($_.options, "format", "stackedomni"); //#8576
    $k[$j++] = 'args'; //#8578
    $k[$j++] = $_.barcode; //#8578
    $k[$j++] = $_.options; //#8578
    bwipp_databaromni(); //#8578
    var _Y = $k[--$j]; //#8578
    $_[$k[--$j]] = _Y; //#8578
    $put($_.args, "opt", $_.options); //#8580
    $k[$j++] = $_.args; //#8583
    if (!$_.dontdraw) { //#8583
        bwipp_renmatrix(); //#8583
    } //#8583
    $_ = Object.getPrototypeOf($_); //#8585
} //bwipp_databarstackedomni
function bwipp_databartruncated() {
    $_ = Object.create($_); //#8614
    $_.dontdraw = false; //#8617
    $k[$j++] = $_; //#8619
    bwipp_processoptions(); //#8619
    $_.options = $k[--$j]; //#8619
    $_.barcode = $k[--$j]; //#8620
    if (($_.barcode.length != 17) && ($_.barcode.length != 18)) { //#8625
        $k[$j++] = 'bwipp.databartruncatedBadLength#8624'; //#8624
        $k[$j++] = "GS1 DataBar Truncated must be 13 or 14 digits"; //#8624
        bwipp_raiseerror(); //#8624
    } //#8624
    if ($ne($geti($_.barcode, 0, 4), "(01)")) { //#8628
        $k[$j++] = 'bwipp.databartruncatedBadAI#8627'; //#8627
        $k[$j++] = "GS1 DataBar Truncated must begin with (01) application identifier"; //#8627
        bwipp_raiseerror(); //#8627
    } //#8627
    var _8 = $geti($_.barcode, 4, $_.barcode.length - 4); //#8629
    for (var _9 = 0, _A = _8.length; _9 < _A; _9++) { //#8633
        var _B = $get(_8, _9); //#8633
        if ((_B < 48) || (_B > 57)) { //#8632
            $k[$j++] = 'bwipp.databartruncatedBadCharacter#8631'; //#8631
            $k[$j++] = "GS1 DataBar Truncated must contain only digits"; //#8631
            bwipp_raiseerror(); //#8631
        } //#8631
    } //#8631
    $_.checksum = 0; //#8636
    for (var _C = 0; _C <= 12; _C += 1) { //#8640
        $_.i = _C; //#8638
        $k[$j++] = 'checksum'; //#8639
        $k[$j++] = $_.checksum; //#8639
        $k[$j++] = $f($get($_.barcode, $_.i + 4) - 48); //#8639
        if (($_.i % 2) == 0) { //#8639
            var _I = $k[--$j]; //#8639
            $k[$j++] = _I * 3; //#8639
        } //#8639
        var _J = $k[--$j]; //#8639
        var _K = $k[--$j]; //#8639
        $_[$k[--$j]] = $f(_K + _J); //#8639
    } //#8639
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#8641
    if ($_.barcode.length == 18) { //#8646
        if ($get($_.barcode, 17) != ($_.checksum + 48)) { //#8645
            $k[$j++] = 'bwipp.databartruncatedBadCheckDigit#8644'; //#8644
            $k[$j++] = "Incorrect GS1 DataBar Truncated check digit provided"; //#8644
            bwipp_raiseerror(); //#8644
        } //#8644
    } //#8644
    var _R = $s(18); //#8647
    $puti(_R, 0, $_.barcode); //#8648
    $put(_R, 17, $_.checksum + 48); //#8649
    $_.barcode = _R; //#8650
    $put($_.options, "dontdraw", true); //#8653
    $put($_.options, "format", "truncated"); //#8654
    $k[$j++] = 'args'; //#8656
    $k[$j++] = $_.barcode; //#8656
    $k[$j++] = $_.options; //#8656
    bwipp_databaromni(); //#8656
    var _Y = $k[--$j]; //#8656
    $_[$k[--$j]] = _Y; //#8656
    $put($_.args, "opt", $_.options); //#8658
    $k[$j++] = $_.args; //#8661
    if (!$_.dontdraw) { //#8661
        bwipp_renlinear(); //#8661
    } //#8661
    $_ = Object.getPrototypeOf($_); //#8663
} //bwipp_databartruncated
function bwipp_databarlimited() {
    $_ = Object.create($_); //#8693
    $_.dontdraw = false; //#8696
    $_.height = 10 / 72; //#8697
    $_.linkage = false; //#8698
    $k[$j++] = $_; //#8700
    bwipp_processoptions(); //#8700
    $_.options = $k[--$j]; //#8700
    $_.barcode = $k[--$j]; //#8701
    bwipp_loadctx(bwipp_databarlimited) //#8703
    if (($_.barcode.length != 17) && ($_.barcode.length != 18)) { //#8708
        $k[$j++] = 'bwipp.databarlimitedBadLength#8707'; //#8707
        $k[$j++] = "GS1 DataBar Limited must be 13 or 14 digits"; //#8707
        bwipp_raiseerror(); //#8707
    } //#8707
    if ($ne($geti($_.barcode, 0, 4), "(01)")) { //#8711
        $k[$j++] = 'bwipp.databarlimitedBadAI#8710'; //#8710
        $k[$j++] = "GS1 DataBar Limited must begin with (01) application identifier"; //#8710
        bwipp_raiseerror(); //#8710
    } //#8710
    var _7 = $get($_.barcode, 4); //#8712
    if ((_7 < 48) || (_7 > 49)) { //#8714
        $k[$j++] = 'bwipp.databarlimitedBadStartDigit#8713'; //#8713
        $k[$j++] = "GS1 DataBar Limited must begin with 0 or 1"; //#8713
        bwipp_raiseerror(); //#8713
    } //#8713
    var _A = $geti($_.barcode, 5, $_.barcode.length - 5); //#8715
    for (var _B = 0, _C = _A.length; _B < _C; _B++) { //#8719
        var _D = $get(_A, _B); //#8719
        if ((_D < 48) || (_D > 57)) { //#8718
            $k[$j++] = 'bwipp.databarlimitedBadCharacter#8717'; //#8717
            $k[$j++] = "GS1 DataBar Limited must contain only digits"; //#8717
            bwipp_raiseerror(); //#8717
        } //#8717
    } //#8717
    $_.checksum = 0; //#8722
    for (var _E = 0; _E <= 12; _E += 1) { //#8726
        $_.i = _E; //#8724
        $k[$j++] = 'checksum'; //#8725
        $k[$j++] = $_.checksum; //#8725
        $k[$j++] = $f($get($_.barcode, $_.i + 4) - 48); //#8725
        if (($_.i % 2) == 0) { //#8725
            var _K = $k[--$j]; //#8725
            $k[$j++] = _K * 3; //#8725
        } //#8725
        var _L = $k[--$j]; //#8725
        var _M = $k[--$j]; //#8725
        $_[$k[--$j]] = $f(_M + _L); //#8725
    } //#8725
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#8727
    if ($_.barcode.length == 18) { //#8732
        if ($get($_.barcode, 17) != ($_.checksum + 48)) { //#8731
            $k[$j++] = 'bwipp.databarlimitedBadCheckDigit#8730'; //#8730
            $k[$j++] = "Incorrect GS1 DataBar Limited check digit provided"; //#8730
            bwipp_raiseerror(); //#8730
        } //#8730
    } //#8730
    var _T = $s(18); //#8733
    $puti(_T, 0, $_.barcode); //#8734
    $put(_T, 17, $_.checksum + 48); //#8735
    $_.barcode = _T; //#8736
    if (!bwipp_databarlimited.__8741__) { //#8741
        $_ = Object.create($_); //#8741
        $_.linkval = $a([2, 0, 1, 5, 1, 3, 3, 5, 3, 1, 0, 9, 6]); //#8740
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_databarlimited.$ctx[id] = $_[id]); //#8740
        bwipp_databarlimited.__8741__ = 1; //#8740
        $_ = Object.getPrototypeOf($_); //#8740
    } //#8740
    $k[$j++] = Infinity; //#8742
    var _Z = $geti($_.barcode, 4, 13); //#8743
    for (var _a = 0, _b = _Z.length; _a < _b; _a++) { //#8743
        $k[$j++] = $f($get(_Z, _a) - 48); //#8743
    } //#8743
    $_.binval = $a(); //#8743
    if ($_.linkage) { //#8750
        for (var _h = 0, _g = $_.binval.length - 1; _h <= _g; _h += 1) { //#8749
            $_.i = _h; //#8747
            $put($_.binval, $_.i, $f($get($_.binval, $_.i) + $get($_.linkval, $_.i))); //#8748
        } //#8748
    } //#8748
    $_.txt = $a($_.barcode.length); //#8753
    for (var _u = 0, _t = $_.barcode.length - 1; _u <= _t; _u += 1) { //#8757
        $_.i = _u; //#8755
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), 0, 0, "", 0])); //#8756
    } //#8756
    $_.ncr = function() {
        var _11 = $k[--$j]; //#8760
        var _12 = $k[--$j]; //#8760
        var _13 = $f(_12 - _11); //#8760
        if (_11 < $f(_12 - _11)) { //#8760
            var _ = _13; //#8760
            _13 = _11; //#8760
            _11 = _; //#8760
        } //#8760
        $k[$j++] = _13; //#8767
        $k[$j++] = 1; //#8767
        $k[$j++] = 1; //#8767
        for (var _15 = _12, _14 = $f(_11 + 1); _15 >= _14; _15 -= 1) { //#8767
            var _16 = $k[--$j]; //#8763
            var _17 = $k[--$j]; //#8764
            var _18 = $k[--$j]; //#8764
            $k[$j++] = _18; //#8766
            $k[$j++] = _17; //#8766
            $k[$j++] = _16 * _15; //#8766
            if ($le(_17, _18)) { //#8766
                var _19 = $k[--$j]; //#8765
                var _1A = $k[--$j]; //#8765
                $k[$j++] = $f(_1A + 1); //#8765
                $k[$j++] = ~~(_19 / _1A); //#8765
            } //#8765
        } //#8765
        for (;;) { //#8771
            var _1B = $k[--$j]; //#8769
            var _1C = $k[--$j]; //#8769
            var _1D = $k[--$j]; //#8769
            $k[$j++] = _1D; //#8769
            $k[$j++] = _1C; //#8769
            $k[$j++] = _1B; //#8769
            if ($gt(_1C, _1D)) { //#8769
                break; //#8769
            } //#8769
            var _1E = $k[--$j]; //#8770
            var _1F = $k[--$j]; //#8770
            $k[$j++] = $f(_1F + 1); //#8770
            $k[$j++] = ~~(_1E / _1F); //#8770
        } //#8770
        var _1G = $k[--$j]; //#8772
        var _1H = $k[--$j]; //#8772
        $k[$j++] = _1G; //#8772
        $k[$j++] = _1H; //#8772
        $j--; //#8772
        var _1I = $k[--$j]; //#8772
        var _1J = $k[--$j]; //#8772
        $k[$j++] = _1I; //#8772
        $k[$j++] = _1J; //#8772
        $j--; //#8772
    }; //#8772
    $_.getRSSwidths = function() {
        $_.oe = $k[--$j]; //#8776
        $_.el = $k[--$j]; //#8777
        $_.mw = $k[--$j]; //#8778
        $_.nm = $k[--$j]; //#8779
        $_.val = $k[--$j]; //#8780
        $_.out = $a($_.el); //#8781
        $_.mask = 0; //#8782
        for (var _1T = 0, _1S = $f($_.el - 2); _1T <= _1S; _1T += 1) { //#8809
            $_.bar = _1T; //#8784
            $_.ew = 1; //#8785
            var _1V = $_.bar; //#8786
            $_.mask = $_.mask | ((_1V < 0 ? 1 >>> -_1V : 1 << _1V)); //#8786
            for (;;) { //#8805
                $k[$j++] = 'sval'; //#8787
                $k[$j++] = $f($f($_.nm - $_.ew) - 1); //#8787
                $k[$j++] = $f($f($_.el - $_.bar) - 2); //#8787
                $_.ncr(); //#8787
                var _1a = $k[--$j]; //#8787
                $_[$k[--$j]] = _1a; //#8787
                if (($_.oe && ($_.mask == 0)) && (($f(($f($f($_.nm - $_.ew) - ($_.el * 2))) + ($_.bar * 2))) >= -2)) { //#8790
                    $k[$j++] = 'sval'; //#8789
                    $k[$j++] = $_.sval; //#8789
                    $k[$j++] = $f(($f($f($_.nm - $_.ew) - $_.el)) + $_.bar); //#8789
                    $k[$j++] = $f($f($_.el - $_.bar) - 2); //#8789
                    $_.ncr(); //#8789
                    var _1p = $k[--$j]; //#8789
                    var _1q = $k[--$j]; //#8789
                    $_[$k[--$j]] = $f(_1q - _1p); //#8789
                } //#8789
                if ($f($_.el - $_.bar) > 2) { //#8799
                    $_.lval = 0; //#8792
                    for (var _20 = $f(($f(($f($f($_.nm - $_.ew) - $_.el)) + $_.bar)) + 2), _1z = $f($_.mw + 1); _20 >= _1z; _20 -= 1) { //#8796
                        $k[$j++] = $f(($f($f($_.nm - _20) - $_.ew)) - 1); //#8794
                        $k[$j++] = $f($f($_.el - $_.bar) - 3); //#8794
                        $_.ncr(); //#8794
                        $_.lval = $f($k[--$j] + $_.lval); //#8795
                    } //#8795
                    $_.sval = $f($_.sval - ($_.lval * ($f($f($_.el - $_.bar) - 1)))); //#8797
                } else { //#8799
                    if ($f($_.nm - $_.ew) > $_.mw) { //#8799
                        $_.sval = $f($_.sval - 1); //#8799
                    } //#8799
                } //#8799
                $_.val = $f($_.val - $_.sval); //#8801
                if ($_.val < 0) { //#8802
                    break; //#8802
                } //#8802
                $_.ew = $_.ew + 1; //#8803
                var _2K = $_.bar; //#8804
                $_.mask = $_.mask & (~((_2K < 0 ? 1 >>> -_2K : 1 << _2K))); //#8804
            } //#8804
            $_.val = $f($_.val + $_.sval); //#8806
            $_.nm = $f($_.nm - $_.ew); //#8807
            $put($_.out, $_.bar, $_.ew); //#8808
        } //#8808
        $put($_.out, $f($_.el - 1), $_.nm); //#8810
        $k[$j++] = $_.out; //#8811
    }; //#8811
    for (var _2W = 0; _2W <= 11; _2W += 1) { //#8818
        $_.i = _2W; //#8815
        var _2X = $_.binval; //#8816
        var _2Y = $_.i; //#8816
        $put(_2X, _2Y + 1, $f($get(_2X, _2Y + 1) + (($get($_.binval, $_.i) % 2013571) * 10))); //#8816
        $put($_.binval, $_.i, ~~($get($_.binval, $_.i) / 2013571)); //#8817
    } //#8817
    $_.d2 = $get($_.binval, 12) % 2013571; //#8819
    var _2k = $_.binval; //#8820
    $put(_2k, 12, ~~($get(_2k, 12) / 2013571)); //#8820
    $_.d1 = 0; //#8822
    $_.i = true; //#8823
    for (var _2m = 0; _2m <= 12; _2m += 1) { //#8833
        $_.j = _2m; //#8825
        var _2p = $get($_.binval, $_.j); //#8826
        $k[$j++] = _2p; //#8832
        if ((_2p == 0) && $_.i) { //#8831
            $j--; //#8828
        } else { //#8831
            $_.i = false; //#8830
            $_.d1 = $f($_.d1 + ($k[--$j] * (~~Math.pow(10, 12 - $_.j)))); //#8831
        } //#8831
    } //#8831
    if (!bwipp_databarlimited.__8845__) { //#8845
        $_ = Object.create($_); //#8845
        $_.tab267 = $a([183063, 0, 17, 9, 6, 3, 6538, 28, 820063, 183064, 13, 13, 5, 4, 875, 728, 1000775, 820064, 9, 17, 3, 6, 28, 6454, 1491020, 1000776, 15, 11, 5, 4, 2415, 203, 1979844, 1491021, 11, 15, 4, 5, 203, 2408, 1996938, 1979845, 19, 7, 8, 1, 17094, 1, 2013570, 1996939, 7, 19, 1, 8, 1, 16632]); //#8844
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_databarlimited.$ctx[id] = $_[id]); //#8844
        bwipp_databarlimited.__8845__ = 1; //#8844
        $_ = Object.getPrototypeOf($_); //#8844
    } //#8844
    $_.i = 0; //#8847
    for (;;) { //#8857
        if ($_.d1 <= $get($_.tab267, $_.i)) { //#8855
            var _32 = $geti($_.tab267, $_.i + 1, 7); //#8849
            for (var _33 = 0, _34 = _32.length; _33 < _34; _33++) { //#8849
                $k[$j++] = $get(_32, _33); //#8849
            } //#8849
            $_.d1te = $k[--$j]; //#8850
            $_.d1to = $k[--$j]; //#8850
            $_.d1mwe = $k[--$j]; //#8851
            $_.d1mwo = $k[--$j]; //#8851
            $_.d1ele = $k[--$j]; //#8852
            $_.d1elo = $k[--$j]; //#8852
            $_.d1gs = $k[--$j]; //#8853
            break; //#8854
        } //#8854
        $_.i = $_.i + 8; //#8856
    } //#8856
    $_.i = 0; //#8859
    for (;;) { //#8869
        if ($_.d2 <= $get($_.tab267, $_.i)) { //#8867
            var _3K = $geti($_.tab267, $_.i + 1, 7); //#8861
            for (var _3L = 0, _3M = _3K.length; _3L < _3M; _3L++) { //#8861
                $k[$j++] = $get(_3K, _3L); //#8861
            } //#8861
            $_.d2te = $k[--$j]; //#8862
            $_.d2to = $k[--$j]; //#8862
            $_.d2mwe = $k[--$j]; //#8863
            $_.d2mwo = $k[--$j]; //#8863
            $_.d2ele = $k[--$j]; //#8864
            $_.d2elo = $k[--$j]; //#8864
            $_.d2gs = $k[--$j]; //#8865
            break; //#8866
        } //#8866
        $_.i = $_.i + 8; //#8868
    } //#8868
    $k[$j++] = 'd1wo'; //#8871
    $k[$j++] = ~~($f($_.d1 - $_.d1gs) / $_.d1te); //#8871
    $k[$j++] = $_.d1elo; //#8871
    $k[$j++] = $_.d1mwo; //#8871
    $k[$j++] = 7; //#8871
    $k[$j++] = false; //#8871
    $_.getRSSwidths(); //#8871
    var _3b = $k[--$j]; //#8871
    $_[$k[--$j]] = _3b; //#8871
    $k[$j++] = 'd1we'; //#8872
    $k[$j++] = $f($_.d1 - $_.d1gs) % $_.d1te; //#8872
    $k[$j++] = $_.d1ele; //#8872
    $k[$j++] = $_.d1mwe; //#8872
    $k[$j++] = 7; //#8872
    $k[$j++] = true; //#8872
    $_.getRSSwidths(); //#8872
    var _3i = $k[--$j]; //#8872
    $_[$k[--$j]] = _3i; //#8872
    $k[$j++] = 'd2wo'; //#8873
    $k[$j++] = ~~($f($_.d2 - $_.d2gs) / $_.d2te); //#8873
    $k[$j++] = $_.d2elo; //#8873
    $k[$j++] = $_.d2mwo; //#8873
    $k[$j++] = 7; //#8873
    $k[$j++] = false; //#8873
    $_.getRSSwidths(); //#8873
    var _3p = $k[--$j]; //#8873
    $_[$k[--$j]] = _3p; //#8873
    $k[$j++] = 'd2we'; //#8874
    $k[$j++] = $f($_.d2 - $_.d2gs) % $_.d2te; //#8874
    $k[$j++] = $_.d2ele; //#8874
    $k[$j++] = $_.d2mwe; //#8874
    $k[$j++] = 7; //#8874
    $k[$j++] = true; //#8874
    $_.getRSSwidths(); //#8874
    var _3w = $k[--$j]; //#8874
    $_[$k[--$j]] = _3w; //#8874
    $_.d1w = $a(14); //#8876
    for (var _3z = 0; _3z <= 6; _3z += 1) { //#8881
        $_.i = _3z; //#8878
        $put($_.d1w, $_.i * 2, $get($_.d1wo, $_.i)); //#8879
        $put($_.d1w, ($_.i * 2) + 1, $get($_.d1we, $_.i)); //#8880
    } //#8880
    $_.d2w = $a(14); //#8883
    for (var _4B = 0; _4B <= 6; _4B += 1) { //#8888
        $_.i = _4B; //#8885
        $put($_.d2w, $_.i * 2, $get($_.d2wo, $_.i)); //#8886
        $put($_.d2w, ($_.i * 2) + 1, $get($_.d2we, $_.i)); //#8887
    } //#8887
    $k[$j++] = Infinity; //#8890
    var _4M = $_.d1w; //#8891
    for (var _4N = 0, _4O = _4M.length; _4N < _4O; _4N++) { //#8891
        $k[$j++] = $get(_4M, _4N); //#8891
    } //#8891
    var _4Q = $_.d2w; //#8892
    for (var _4R = 0, _4S = _4Q.length; _4R < _4S; _4R++) { //#8892
        $k[$j++] = $get(_4Q, _4R); //#8892
    } //#8892
    $_.widths = $a(); //#8892
    if (!bwipp_databarlimited.__8916__) { //#8916
        $_ = Object.create($_); //#8916
        $_.checkweights = $a([1, 3, 9, 27, 81, 65, 17, 51, 64, 14, 42, 37, 22, 66, 20, 60, 2, 6, 18, 54, 73, 41, 34, 13, 39, 28, 84, 74]); //#8899
        $k[$j++] = Infinity; //#8901
        for (var _4W = 0; _4W <= 43; _4W += 1) { //#8902
            $k[$j++] = _4W; //#8902
        } //#8902
        $k[$j++] = 45; //#8904
        $k[$j++] = 52; //#8904
        $k[$j++] = 57; //#8904
        for (var _4X = 63; _4X <= 66; _4X += 1) { //#8904
            $k[$j++] = _4X; //#8904
        } //#8904
        for (var _4Y = 73; _4Y <= 79; _4Y += 1) { //#8905
            $k[$j++] = _4Y; //#8905
        } //#8905
        $k[$j++] = 82; //#8907
        for (var _4Z = 126; _4Z <= 130; _4Z += 1) { //#8907
            $k[$j++] = _4Z; //#8907
        } //#8907
        $k[$j++] = 132; //#8909
        for (var _4a = 141; _4a <= 146; _4a += 1) { //#8909
            $k[$j++] = _4a; //#8909
        } //#8909
        for (var _4b = 210; _4b <= 217; _4b += 1) { //#8910
            $k[$j++] = _4b; //#8910
        } //#8910
        $k[$j++] = 220; //#8912
        for (var _4c = 316; _4c <= 320; _4c += 1) { //#8912
            $k[$j++] = _4c; //#8912
        } //#8912
        $k[$j++] = 322; //#8914
        $k[$j++] = 323; //#8914
        $k[$j++] = 326; //#8914
        $k[$j++] = 337; //#8914
        $_.checkseq = $a(); //#8914
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_databarlimited.$ctx[id] = $_[id]); //#8915
        bwipp_databarlimited.__8916__ = 1; //#8915
        $_ = Object.getPrototypeOf($_); //#8915
    } //#8915
    $_.checksum = 0; //#8918
    for (var _4f = 0; _4f <= 27; _4f += 1) { //#8922
        $_.i = _4f; //#8920
        $_.checksum = $f($_.checksum + ($get($_.widths, $_.i) * $get($_.checkweights, $_.i))); //#8921
    } //#8921
    $_.checksum = $_.checksum % 89; //#8923
    $_.seq = $get($_.checkseq, $_.checksum); //#8924
    $k[$j++] = 'swidths'; //#8925
    $k[$j++] = ~~($_.seq / 21); //#8925
    $k[$j++] = 8; //#8925
    $k[$j++] = 3; //#8925
    $k[$j++] = 6; //#8925
    $k[$j++] = false; //#8925
    $_.getRSSwidths(); //#8925
    var _4s = $k[--$j]; //#8925
    $_[$k[--$j]] = _4s; //#8925
    $k[$j++] = 'bwidths'; //#8926
    $k[$j++] = $_.seq % 21; //#8926
    $k[$j++] = 8; //#8926
    $k[$j++] = 3; //#8926
    $k[$j++] = 6; //#8926
    $k[$j++] = false; //#8926
    $_.getRSSwidths(); //#8926
    var _4v = $k[--$j]; //#8926
    $_[$k[--$j]] = _4v; //#8926
    $_.checkwidths = $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1]); //#8928
    for (var _4y = 0; _4y <= 5; _4y += 1) { //#8933
        $_.i = _4y; //#8930
        $put($_.checkwidths, $_.i * 2, $get($_.swidths, $_.i)); //#8931
        $put($_.checkwidths, ($_.i * 2) + 1, $get($_.bwidths, $_.i)); //#8932
    } //#8932
    $k[$j++] = Infinity; //#8935
    var _59 = $_.d1w; //#8936
    $k[$j++] = 1; //#8936
    for (var _5A = 0, _5B = _59.length; _5A < _5B; _5A++) { //#8936
        $k[$j++] = $get(_59, _5A); //#8936
    } //#8936
    var _5D = $_.checkwidths; //#8936
    for (var _5E = 0, _5F = _5D.length; _5E < _5F; _5E++) { //#8936
        $k[$j++] = $get(_5D, _5E); //#8936
    } //#8936
    var _5H = $_.d2w; //#8936
    for (var _5I = 0, _5J = _5H.length; _5I < _5J; _5I++) { //#8936
        $k[$j++] = $get(_5H, _5I); //#8936
    } //#8936
    $k[$j++] = 1; //#8936
    $k[$j++] = 1; //#8936
    $k[$j++] = 5; //#8936
    $_.sbs = $a(); //#8936
    $k[$j++] = Infinity; //#8940
    var _5M = $_.sbs; //#8942
    $k[$j++] = Infinity; //#8943
    for (var _5O = 0, _5P = ~~(($_.sbs.length + 1) / 2); _5O < _5P; _5O++) { //#8943
        $k[$j++] = $_.height; //#8943
    } //#8943
    var _5R = $a(); //#8943
    $k[$j++] = Infinity; //#8944
    for (var _5T = 0, _5U = ~~(($_.sbs.length + 1) / 2); _5T < _5U; _5T++) { //#8944
        $k[$j++] = 0; //#8944
    } //#8944
    var _5V = $a(); //#8944
    $k[$j++] = 'ren'; //#8949
    $k[$j++] = bwipp_renlinear; //#8949
    $k[$j++] = 'sbs'; //#8949
    $k[$j++] = _5M; //#8949
    $k[$j++] = 'bhs'; //#8949
    $k[$j++] = _5R; //#8949
    $k[$j++] = 'bbs'; //#8949
    $k[$j++] = _5V; //#8949
    $k[$j++] = 'txt'; //#8949
    $k[$j++] = $_.txt; //#8949
    $k[$j++] = 'textxalign'; //#8949
    $k[$j++] = "center"; //#8949
    $k[$j++] = 'borderleft'; //#8949
    $k[$j++] = 0; //#8949
    $k[$j++] = 'borderright'; //#8949
    $k[$j++] = 0; //#8949
    $k[$j++] = 'opt'; //#8949
    $k[$j++] = $_.options; //#8949
    var _5Y = $d(); //#8949
    $k[$j++] = _5Y; //#8952
    if (!$_.dontdraw) { //#8952
        bwipp_renlinear(); //#8952
    } //#8952
    $_ = Object.getPrototypeOf($_); //#8954
    $_ = Object.getPrototypeOf($_); //#8956
} //bwipp_databarlimited
function bwipp_databarexpanded() {
    $_ = Object.create($_); //#8988
    $_.parse = false; //#8991
    $_.dontlint = false; //#8992
    $_.lintreqs = true; //#8993
    $_.dontdraw = false; //#8994
    $_.height = 34 / 72; //#8995
    $_.format = "expanded"; //#8996
    $_.segments = -1; //#8997
    $_.linkage = false; //#8998
    $_.barxmult = 34; //#8999
    $k[$j++] = $_; //#9001
    bwipp_processoptions(); //#9001
    $_.options = $k[--$j]; //#9001
    $_.barcode = $k[--$j]; //#9002
    bwipp_loadctx(bwipp_databarexpanded) //#9004
    if ($_.barxmult < 34) { //#9008
        $k[$j++] = 'bwipp.databarStackedOmniBarXmult#9007'; //#9007
        $k[$j++] = "GS1 DataBar Expanded Stacked must have a barxmult of at least 34"; //#9007
        bwipp_raiseerror(); //#9007
    } //#9007
    if ($ne($_.format, "expanded") && $ne($_.format, "expandedstacked")) { //#9012
        $k[$j++] = 'bwipp.databarexpandedBadFormat#9011'; //#9011
        $k[$j++] = "Valid formats are expanded and expandedstacked"; //#9011
        bwipp_raiseerror(); //#9011
    } //#9011
    if ($_.segments == -1) { //#9018
        var _7 = $eq($_.format, "expandedstacked") ? 4 : 22; //#9015
        $_.segments = _7; //#9015
    } else { //#9018
        if ((($_.segments < 2) || ($_.segments > 22)) || (($_.segments % 2) != 0)) { //#9019
            $k[$j++] = 'bwipp.gs1databarexpandedBadSegments#9018'; //#9018
            $k[$j++] = "The number of segments must be even from 2 to 22"; //#9018
            bwipp_raiseerror(); //#9018
        } //#9018
    } //#9018
    $k[$j++] = $_.barcode; //#9022
    $k[$j++] = 'ai'; //#9022
    bwipp_gs1process(); //#9022
    $_.fncs = $k[--$j]; //#9023
    $_.vals = $k[--$j]; //#9024
    $_.ais = $k[--$j]; //#9025
    for (;;) { //#9113
        if ($_.ais.length == 2) { //#9037
            if ($eq($get($_.ais, 0), "01") && $eq($get($_.ais, 1), "3103")) { //#9036
                if ($eq($geti($get($_.vals, 0), 0, 1), "9") && ($cvi($get($_.vals, 1)) <= 32767)) { //#9035
                    $k[$j++] = "0100"; //#9034
                    $k[$j++] = false; //#9034
                    break; //#9034
                } //#9034
            } //#9034
        } //#9034
        if ($_.ais.length == 2) { //#9046
            if ($eq($get($_.ais, 0), "01") && $eq($get($_.ais, 1), "3202")) { //#9045
                if ($eq($geti($get($_.vals, 0), 0, 1), "9") && ($cvi($get($_.vals, 1)) <= 9999)) { //#9044
                    $k[$j++] = "0101"; //#9043
                    $k[$j++] = false; //#9043
                    break; //#9043
                } //#9043
            } //#9043
        } //#9043
        if ($_.ais.length == 2) { //#9055
            if ($eq($get($_.ais, 0), "01") && $eq($get($_.ais, 1), "3203")) { //#9054
                if ($eq($geti($get($_.vals, 0), 0, 1), "9") && ($cvi($get($_.vals, 1)) <= 22767)) { //#9053
                    $k[$j++] = "0101"; //#9052
                    $k[$j++] = false; //#9052
                    break; //#9052
                } //#9052
            } //#9052
        } //#9052
        var _k = $_.ais.length; //#9058
        if ((_k == 2) || (_k == 3)) { //#9089
            $k[$j++] = 'ai310x'; //#9059
            $k[$j++] = false; //#9059
            for (var _l = 3100; _l <= 3109; _l += 1) { //#9059
                var _q = $k[--$j]; //#9059
                $k[$j++] = _q || $eq($cvrs($s(4), _l, 10), $get($_.ais, 1)); //#9059
            } //#9059
            var _r = $k[--$j]; //#9059
            $_[$k[--$j]] = _r; //#9059
            $k[$j++] = 'ai320x'; //#9060
            $k[$j++] = false; //#9060
            for (var _t = 3200; _t <= 3209; _t += 1) { //#9060
                var _y = $k[--$j]; //#9060
                $k[$j++] = _y || $eq($cvrs($s(4), _t, 10), $get($_.ais, 1)); //#9060
            } //#9060
            var _z = $k[--$j]; //#9060
            $_[$k[--$j]] = _z; //#9060
            if ($_.ais.length == 3) { //#9064
                var _12 = $a(["11", "13", "15", "17"]); //#9062
                $k[$j++] = 'aibad'; //#9062
                $k[$j++] = true; //#9062
                for (var _13 = 0, _14 = _12.length; _13 < _14; _13++) { //#9062
                    var _18 = $k[--$j]; //#9062
                    $k[$j++] = _18 && $ne($get(_12, _13), $get($_.ais, 2)); //#9062
                } //#9062
                var _19 = $k[--$j]; //#9062
                $_[$k[--$j]] = _19; //#9062
            } else { //#9064
                $_.aibad = false; //#9064
            } //#9064
            if (($eq($get($_.ais, 0), "01") && ($_.ai310x || $_.ai320x)) && (!$_.aibad)) { //#9088
                if ($_.ais.length == 3) { //#9085
                    var _1P = $cvi($geti($get($_.vals, 2), 2, 2)); //#9070
                    var _1T = $cvi($geti($get($_.vals, 2), 4, 2)); //#9071
                    if ((($eq($geti($get($_.vals, 0), 0, 1), "9") && ($cvi($get($_.vals, 1)) <= 99999)) && ((_1P >= 1) && (_1P <= 12))) && ((_1T >= 0) && (_1T <= 31))) { //#9080
                        if ($_.ai310x && $eq($get($_.ais, 2), "11")) { //#9072
                            $k[$j++] = "0111000"; //#9072
                            $k[$j++] = false; //#9072
                            break; //#9072
                        } //#9072
                        if ($_.ai320x && $eq($get($_.ais, 2), "11")) { //#9073
                            $k[$j++] = "0111001"; //#9073
                            $k[$j++] = false; //#9073
                            break; //#9073
                        } //#9073
                        if ($_.ai310x && $eq($get($_.ais, 2), "13")) { //#9074
                            $k[$j++] = "0111010"; //#9074
                            $k[$j++] = false; //#9074
                            break; //#9074
                        } //#9074
                        if ($_.ai320x && $eq($get($_.ais, 2), "13")) { //#9075
                            $k[$j++] = "0111011"; //#9075
                            $k[$j++] = false; //#9075
                            break; //#9075
                        } //#9075
                        if ($_.ai310x && $eq($get($_.ais, 2), "15")) { //#9076
                            $k[$j++] = "0111100"; //#9076
                            $k[$j++] = false; //#9076
                            break; //#9076
                        } //#9076
                        if ($_.ai320x && $eq($get($_.ais, 2), "15")) { //#9077
                            $k[$j++] = "0111101"; //#9077
                            $k[$j++] = false; //#9077
                            break; //#9077
                        } //#9077
                        if ($_.ai310x && $eq($get($_.ais, 2), "17")) { //#9078
                            $k[$j++] = "0111110"; //#9078
                            $k[$j++] = false; //#9078
                            break; //#9078
                        } //#9078
                        if ($_.ai320x && $eq($get($_.ais, 2), "17")) { //#9079
                            $k[$j++] = "0111111"; //#9079
                            $k[$j++] = false; //#9079
                            break; //#9079
                        } //#9079
                    } //#9079
                } else { //#9085
                    if ($eq($geti($get($_.vals, 0), 0, 1), "9") && ($cvi($get($_.vals, 1)) <= 99999)) { //#9086
                        if ($_.ai310x) { //#9084
                            $k[$j++] = "0111000"; //#9084
                            $k[$j++] = false; //#9084
                            break; //#9084
                        } //#9084
                        if ($_.ai320x) { //#9085
                            $k[$j++] = "0111001"; //#9085
                            $k[$j++] = false; //#9085
                            break; //#9085
                        } //#9085
                    } //#9085
                } //#9085
            } //#9085
        } //#9085
        if ($_.ais.length >= 2) { //#9097
            $k[$j++] = 'ai392x'; //#9093
            $k[$j++] = false; //#9093
            for (var _20 = 3920; _20 <= 3923; _20 += 1) { //#9093
                var _25 = $k[--$j]; //#9093
                $k[$j++] = _25 || $eq($cvrs($s(4), _20, 10), $get($_.ais, 1)); //#9093
            } //#9093
            var _26 = $k[--$j]; //#9093
            $_[$k[--$j]] = _26; //#9093
            if ($eq($get($_.ais, 0), "01") && $_.ai392x) { //#9096
                if ($eq($geti($get($_.vals, 0), 0, 1), "9")) { //#9095
                    $k[$j++] = "01100"; //#9095
                    $k[$j++] = true; //#9095
                    break; //#9095
                } //#9095
            } //#9095
        } //#9095
        if ($_.ais.length >= 2) { //#9105
            $k[$j++] = 'ai393x'; //#9101
            $k[$j++] = false; //#9101
            for (var _2F = 3930; _2F <= 3933; _2F += 1) { //#9101
                var _2K = $k[--$j]; //#9101
                $k[$j++] = _2K || $eq($cvrs($s(4), _2F, 10), $get($_.ais, 1)); //#9101
            } //#9101
            var _2L = $k[--$j]; //#9101
            $_[$k[--$j]] = _2L; //#9101
            if ($eq($get($_.ais, 0), "01") && $_.ai393x) { //#9104
                if ($eq($geti($get($_.vals, 0), 0, 1), "9")) { //#9103
                    $k[$j++] = "01101"; //#9103
                    $k[$j++] = true; //#9103
                    break; //#9103
                } //#9103
            } //#9103
        } //#9103
        if ($eq($get($_.ais, 0), "01")) { //#9108
            $k[$j++] = "1"; //#9108
            $k[$j++] = true; //#9108
            break; //#9108
        } //#9108
        $k[$j++] = "00"; //#9111
        $k[$j++] = true; //#9111
        break; //#9111
    } //#9111
    $_.gpfallow = $k[--$j]; //#9114
    $_.method = $k[--$j]; //#9115
    $_.conv12to40 = function() {
        var _2Y = $strcpy($s(40), "0000000000000000000000000000000000000000"); //#9118
        var _2Z = $k[--$j]; //#9119
        var _2d = $cvrs($s(10), $cvi($geti(_2Z, 0, 3)), 2); //#9119
        $puti($geti(_2Y, 0, 10), 10 - _2d.length, _2d); //#9119
        var _2h = $cvrs($s(10), $cvi($geti(_2Z, 3, 3)), 2); //#9120
        $puti($geti(_2Y, 10, 10), 10 - _2h.length, _2h); //#9120
        var _2l = $cvrs($s(10), $cvi($geti(_2Z, 6, 3)), 2); //#9121
        $puti($geti(_2Y, 20, 10), 10 - _2l.length, _2l); //#9121
        var _2p = $cvrs($s(10), $cvi($geti(_2Z, 9, 3)), 2); //#9122
        $puti($geti(_2Y, 30, 10), 10 - _2p.length, _2p); //#9122
        $k[$j++] = _2Y; //#9123
        $k[$j++] = _2Z; //#9123
        $j--; //#9123
    }; //#9123
    $_.conv13to44 = function() {
        var _2r = $strcpy($s(44), "00000000000000000000000000000000000000000000"); //#9127
        var _2s = $k[--$j]; //#9128
        var _2w = $cvrs($s(4), $cvi($geti(_2s, 0, 1)), 2); //#9128
        $puti($geti(_2r, 0, 4), 4 - _2w.length, _2w); //#9128
        $k[$j++] = _2r; //#9129
        $k[$j++] = _2r; //#9129
        $k[$j++] = $geti(_2s, 1, 12); //#9129
        $_.conv12to40(); //#9129
        var _2y = $k[--$j]; //#9129
        $puti($k[--$j], 4, _2y); //#9129
    }; //#9129
    $_.tobin = function() {
        var _31 = $s($k[--$j]); //#9133
        $k[$j++] = _31; //#9133
        for (var _33 = 0, _32 = _31.length - 1; _33 <= _32; _33 += 1) { //#9133
            var _34 = $k[--$j]; //#9133
            $put(_34, _33, 48); //#9133
            $k[$j++] = _34; //#9133
        } //#9133
        var _35 = $k[--$j]; //#9134
        var _38 = $cvrs($s(_35.length), $k[--$j], 2); //#9134
        $puti(_35, _35.length - _38.length, _38); //#9134
        $k[$j++] = _35; //#9134
    }; //#9134
    $_.fnc1 = -1; //#9137
    $_.lnumeric = -2; //#9137
    $_.lalphanumeric = -3; //#9137
    $_.liso646 = -4; //#9137
    if ($eq($_.method, "00")) { //#9142
        $_.cdf = $a([]); //#9140
        $_.gpf = $a([]); //#9141
    } //#9141
    if ($eq($_.method, "1")) { //#9151
        $k[$j++] = 'cdf'; //#9145
        $k[$j++] = $geti($get($_.vals, 0), 0, 13); //#9145
        $_.conv13to44(); //#9145
        var _3G = $k[--$j]; //#9145
        $_[$k[--$j]] = _3G; //#9145
        $k[$j++] = Infinity; //#9146
        var _3I = $_.cdf; //#9146
        for (var _3J = 0, _3K = _3I.length; _3J < _3K; _3J++) { //#9146
            $k[$j++] = $f($get(_3I, _3J) - 48); //#9146
        } //#9146
        $_.cdf = $a(); //#9146
        $_.gpf = $a([]); //#9147
        $_.ais = $geti($_.ais, 1, $_.ais.length - 1); //#9148
        $_.vals = $geti($_.vals, 1, $_.vals.length - 1); //#9149
        $_.fncs = $geti($_.fncs, 1, $_.fncs.length - 1); //#9150
    } //#9150
    if ($eq($_.method, "0100")) { //#9162
        $_.cdf = $s(55); //#9154
        $k[$j++] = $_.cdf; //#9155
        $k[$j++] = 0; //#9155
        $k[$j++] = $geti($get($_.vals, 0), 1, 12); //#9155
        $_.conv12to40(); //#9155
        var _3d = $k[--$j]; //#9155
        var _3e = $k[--$j]; //#9155
        $puti($k[--$j], _3e, _3d); //#9155
        $k[$j++] = $_.cdf; //#9156
        $k[$j++] = 40; //#9156
        $k[$j++] = $cvi($get($_.vals, 1)); //#9156
        $k[$j++] = 15; //#9156
        $_.tobin(); //#9156
        var _3j = $k[--$j]; //#9156
        var _3k = $k[--$j]; //#9156
        $puti($k[--$j], _3k, _3j); //#9156
        $k[$j++] = Infinity; //#9157
        var _3m = $_.cdf; //#9157
        for (var _3n = 0, _3o = _3m.length; _3n < _3o; _3n++) { //#9157
            $k[$j++] = $get(_3m, _3n) - 48; //#9157
        } //#9157
        $_.cdf = $a(); //#9157
        $_.gpf = $a([]); //#9158
        $_.ais = $a([]); //#9159
        $_.vals = $a([]); //#9160
        $_.fncs = $a([]); //#9161
    } //#9161
    if ($eq($_.method, "0101")) { //#9178
        $_.cdf = $s(55); //#9165
        $k[$j++] = $_.cdf; //#9166
        $k[$j++] = 0; //#9166
        $k[$j++] = $geti($get($_.vals, 0), 1, 12); //#9166
        $_.conv12to40(); //#9166
        var _41 = $k[--$j]; //#9166
        var _42 = $k[--$j]; //#9166
        $puti($k[--$j], _42, _41); //#9166
        if ($eq($get($_.ais, 1), "3202")) { //#9170
            $k[$j++] = $cvi($get($_.vals, 1)); //#9168
            $k[$j++] = 15; //#9168
            $_.tobin(); //#9168
        } else { //#9170
            $k[$j++] = $cvi($get($_.vals, 1)) + 10000; //#9170
            $k[$j++] = 15; //#9170
            $_.tobin(); //#9170
        } //#9170
        $puti($_.cdf, 40, $k[--$j]); //#9172
        $k[$j++] = Infinity; //#9173
        var _4C = $_.cdf; //#9173
        for (var _4D = 0, _4E = _4C.length; _4D < _4E; _4D++) { //#9173
            $k[$j++] = $get(_4C, _4D) - 48; //#9173
        } //#9173
        $_.cdf = $a(); //#9173
        $_.gpf = $a([]); //#9174
        $_.ais = $a([]); //#9175
        $_.vals = $a([]); //#9176
        $_.fncs = $a([]); //#9177
    } //#9177
    if ($_.method.length == 7) { //#9200
        $_.cdf = $s(76); //#9181
        $k[$j++] = $_.cdf; //#9182
        $k[$j++] = 0; //#9182
        $k[$j++] = $geti($get($_.vals, 0), 1, 12); //#9182
        $_.conv12to40(); //#9182
        var _4R = $k[--$j]; //#9182
        var _4S = $k[--$j]; //#9182
        $puti($k[--$j], _4S, _4R); //#9182
        var _4U = $s(6); //#9183
        $puti(_4U, 0, $geti($get($_.ais, 1), 3, 1)); //#9183
        $puti(_4U, 1, $geti($get($_.vals, 1), 1, 5)); //#9184
        $k[$j++] = $cvi(_4U); //#9184
        $k[$j++] = 20; //#9184
        $_.tobin(); //#9184
        $puti($_.cdf, 40, $k[--$j]); //#9185
        if ($_.ais.length == 3) { //#9192
            var _4f = $get($_.vals, 2); //#9187
            $k[$j++] = ($cvi($geti(_4f, 0, 2)) * 384) + ((($cvi($geti(_4f, 2, 2)) - 1) * 32) + $cvi($geti(_4f, 4, 2))); //#9190
        } else { //#9192
            $k[$j++] = 38400; //#9192
        } //#9192
        $k[$j++] = 16; //#9194
        $_.tobin(); //#9194
        $puti($_.cdf, 60, $k[--$j]); //#9194
        $k[$j++] = Infinity; //#9195
        var _4l = $_.cdf; //#9195
        for (var _4m = 0, _4n = _4l.length; _4m < _4n; _4m++) { //#9195
            $k[$j++] = $get(_4l, _4m) - 48; //#9195
        } //#9195
        $_.cdf = $a(); //#9195
        $_.gpf = $a([]); //#9196
        $_.ais = $a([]); //#9197
        $_.vals = $a([]); //#9198
        $_.fncs = $a([]); //#9199
    } //#9199
    if ($eq($_.method, "01100")) { //#9211
        $_.cdf = $s(42); //#9203
        $k[$j++] = $_.cdf; //#9204
        $k[$j++] = 0; //#9204
        $k[$j++] = $geti($get($_.vals, 0), 1, 12); //#9204
        $_.conv12to40(); //#9204
        var _50 = $k[--$j]; //#9204
        var _51 = $k[--$j]; //#9204
        $puti($k[--$j], _51, _50); //#9204
        $k[$j++] = $_.cdf; //#9205
        $k[$j++] = 40; //#9205
        $k[$j++] = $cvi($geti($get($_.ais, 1), 3, 1)); //#9205
        $k[$j++] = 2; //#9205
        $_.tobin(); //#9205
        var _57 = $k[--$j]; //#9205
        var _58 = $k[--$j]; //#9205
        $puti($k[--$j], _58, _57); //#9205
        $k[$j++] = Infinity; //#9206
        var _5A = $_.cdf; //#9206
        for (var _5B = 0, _5C = _5A.length; _5B < _5C; _5B++) { //#9206
            $k[$j++] = $get(_5A, _5B) - 48; //#9206
        } //#9206
        $_.cdf = $a(); //#9206
        $k[$j++] = Infinity; //#9207
        $forall($get($_.vals, 1)); //#9207
        if ($_.ais.length > 2) { //#9207
            $k[$j++] = $_.fnc1; //#9207
        } //#9207
        $_.gpf = $a(); //#9207
        $_.ais = $geti($_.ais, 2, $_.ais.length - 2); //#9208
        $_.vals = $geti($_.vals, 2, $_.vals.length - 2); //#9209
        $_.fncs = $geti($_.fncs, 2, $_.fncs.length - 2); //#9210
    } //#9210
    if ($eq($_.method, "01101")) { //#9223
        $_.cdf = $s(52); //#9214
        $k[$j++] = $_.cdf; //#9215
        $k[$j++] = 0; //#9215
        $k[$j++] = $geti($get($_.vals, 0), 1, 12); //#9215
        $_.conv12to40(); //#9215
        var _5Z = $k[--$j]; //#9215
        var _5a = $k[--$j]; //#9215
        $puti($k[--$j], _5a, _5Z); //#9215
        $k[$j++] = $_.cdf; //#9216
        $k[$j++] = 40; //#9216
        $k[$j++] = $cvi($geti($get($_.ais, 1), 3, 1)); //#9216
        $k[$j++] = 2; //#9216
        $_.tobin(); //#9216
        var _5g = $k[--$j]; //#9216
        var _5h = $k[--$j]; //#9216
        $puti($k[--$j], _5h, _5g); //#9216
        $k[$j++] = $_.cdf; //#9217
        $k[$j++] = 42; //#9217
        $k[$j++] = $cvi($geti($get($_.vals, 1), 0, 3)); //#9217
        $k[$j++] = 10; //#9217
        $_.tobin(); //#9217
        var _5n = $k[--$j]; //#9217
        var _5o = $k[--$j]; //#9217
        $puti($k[--$j], _5o, _5n); //#9217
        $k[$j++] = Infinity; //#9218
        var _5q = $_.cdf; //#9218
        for (var _5r = 0, _5s = _5q.length; _5r < _5s; _5r++) { //#9218
            $k[$j++] = $get(_5q, _5r) - 48; //#9218
        } //#9218
        $_.cdf = $a(); //#9218
        $k[$j++] = Infinity; //#9219
        var _5w = $get($_.vals, 1); //#9219
        var _5x = $geti(_5w, 3, _5w.length - 3); //#9219
        for (var _5y = 0, _5z = _5x.length; _5y < _5z; _5y++) { //#9219
            $k[$j++] = $get(_5x, _5y); //#9219
        } //#9219
        if ($_.ais.length > 2) { //#9219
            $k[$j++] = $_.fnc1; //#9219
        } //#9219
        $_.gpf = $a(); //#9219
        $_.ais = $geti($_.ais, 2, $_.ais.length - 2); //#9220
        $_.vals = $geti($_.vals, 2, $_.vals.length - 2); //#9221
        $_.fncs = $geti($_.fncs, 2, $_.fncs.length - 2); //#9222
    } //#9222
    if ($_.gpfallow) { //#9229
        $_.vlf = $a(2); //#9227
    } else { //#9229
        $_.vlf = $a([]); //#9229
    } //#9229
    if (!bwipp_databarexpanded.__9270__) { //#9270
        $_ = Object.create($_); //#9270
        $k[$j++] = Infinity; //#9233
        for (var _6G = 0; _6G <= 119; _6G += 1) { //#9242
            var _6I = $strcpy($s(2), "00"); //#9235
            var _6K = $cvrs($s(2), _6G, 11); //#9235
            $puti(_6I, 2 - _6K.length, _6K); //#9236
            $k[$j++] = _6G; //#9237
            $k[$j++] = _6I; //#9237
            if ($get(_6I, 0) == 65) { //#9237
                var _6M = $k[--$j]; //#9237
                $put(_6M, 0, 94); //#9237
                $k[$j++] = _6M; //#9237
            } //#9237
            var _6N = $k[--$j]; //#9238
            $k[$j++] = _6N; //#9238
            if ($get(_6N, 1) == 65) { //#9238
                var _6P = $k[--$j]; //#9238
                $put(_6P, 1, 94); //#9238
                $k[$j++] = _6P; //#9238
            } //#9238
            var _6Q = $k[--$j]; //#9239
            var _6T = $strcpy($s(7), "0000000"); //#9240
            var _6V = $cvrs($s(7), $f($k[--$j] + 8), 2); //#9240
            $puti(_6T, 7 - _6V.length, _6V); //#9241
            $k[$j++] = _6Q; //#9241
            $k[$j++] = _6T; //#9241
        } //#9241
        $k[$j++] = $_.lalphanumeric; //#9243
        $k[$j++] = "0000"; //#9243
        $_.numeric = $d(); //#9244
        $k[$j++] = Infinity; //#9246
        for (var _6Y = 48; _6Y <= 57; _6Y += 1) { //#9247
            $k[$j++] = _6Y; //#9247
            $k[$j++] = _6Y - 43; //#9247
            $k[$j++] = 5; //#9247
            $_.tobin(); //#9247
        } //#9247
        $k[$j++] = $_.fnc1; //#9249
        $k[$j++] = "01111"; //#9249
        for (var _6a = 65; _6a <= 90; _6a += 1) { //#9249
            $k[$j++] = _6a; //#9249
            $k[$j++] = _6a - 33; //#9249
            $k[$j++] = 6; //#9249
            $_.tobin(); //#9249
        } //#9249
        $k[$j++] = 42; //#9251
        $k[$j++] = "111010"; //#9251
        for (var _6b = 44; _6b <= 47; _6b += 1) { //#9251
            $k[$j++] = _6b; //#9251
            $k[$j++] = _6b + 15; //#9251
            $k[$j++] = 6; //#9251
            $_.tobin(); //#9251
        } //#9251
        $k[$j++] = $_.lnumeric; //#9253
        $k[$j++] = "000"; //#9253
        $k[$j++] = $_.liso646; //#9253
        $k[$j++] = "00100"; //#9253
        $_.alphanumeric = $d(); //#9254
        $k[$j++] = Infinity; //#9256
        for (var _6f = 48; _6f <= 57; _6f += 1) { //#9257
            $k[$j++] = _6f; //#9257
            $k[$j++] = _6f - 43; //#9257
            $k[$j++] = 5; //#9257
            $_.tobin(); //#9257
        } //#9257
        $k[$j++] = $_.fnc1; //#9259
        $k[$j++] = "01111"; //#9259
        for (var _6h = 65; _6h <= 90; _6h += 1) { //#9259
            $k[$j++] = _6h; //#9259
            $k[$j++] = _6h - 1; //#9259
            $k[$j++] = 7; //#9259
            $_.tobin(); //#9259
        } //#9259
        for (var _6i = 97; _6i <= 122; _6i += 1) { //#9260
            $k[$j++] = _6i; //#9260
            $k[$j++] = _6i - 7; //#9260
            $k[$j++] = 7; //#9260
            $_.tobin(); //#9260
        } //#9260
        $k[$j++] = 33; //#9263
        $k[$j++] = "11101000"; //#9263
        $k[$j++] = 34; //#9263
        $k[$j++] = "11101001"; //#9263
        for (var _6j = 37; _6j <= 47; _6j += 1) { //#9263
            $k[$j++] = _6j; //#9263
            $k[$j++] = _6j + 197; //#9263
            $k[$j++] = 8; //#9263
            $_.tobin(); //#9263
        } //#9263
        for (var _6k = 58; _6k <= 63; _6k += 1) { //#9264
            $k[$j++] = _6k; //#9264
            $k[$j++] = _6k + 187; //#9264
            $k[$j++] = 8; //#9264
            $_.tobin(); //#9264
        } //#9264
        $k[$j++] = 95; //#9268
        $k[$j++] = "11111011"; //#9268
        $k[$j++] = 32; //#9268
        $k[$j++] = "11111100"; //#9268
        $k[$j++] = $_.lnumeric; //#9268
        $k[$j++] = "000"; //#9268
        $k[$j++] = $_.lalphanumeric; //#9268
        $k[$j++] = "00100"; //#9268
        $_.iso646 = $d(); //#9269
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_databarexpanded.$ctx[id] = $_[id]); //#9269
        bwipp_databarexpanded.__9270__ = 1; //#9269
        $_ = Object.getPrototypeOf($_); //#9269
    } //#9269
    for (var _6r = 0, _6q = $_.ais.length - 1; _6r <= _6q; _6r += 1) { //#9288
        $_.i = _6r; //#9274
        $_.ai = $get($_.ais, $_.i); //#9275
        $_.val = $get($_.vals, $_.i); //#9276
        var _71 = $a(($_.gpf.length + $_.ai.length) + $_.val.length); //#9277
        $puti(_71, 0, $_.gpf); //#9278
        $k[$j++] = _71; //#9279
        $k[$j++] = _71; //#9279
        $k[$j++] = $_.gpf.length; //#9279
        $k[$j++] = $_.ai; //#9279
        $k[$j++] = Infinity; //#9279
        var _75 = $k[--$j]; //#9279
        var _76 = $k[--$j]; //#9279
        $k[$j++] = _75; //#9279
        $forall(_76); //#9279
        var _77 = $a(); //#9279
        var _78 = $k[--$j]; //#9279
        $puti($k[--$j], _78, _77); //#9279
        var _7A = $k[--$j]; //#9280
        $k[$j++] = _7A; //#9280
        $k[$j++] = _7A; //#9280
        $k[$j++] = $_.gpf.length + $_.ai.length; //#9280
        $k[$j++] = $_.val; //#9280
        $k[$j++] = Infinity; //#9280
        var _7E = $k[--$j]; //#9280
        var _7F = $k[--$j]; //#9280
        $k[$j++] = _7E; //#9280
        $forall(_7F); //#9280
        var _7G = $a(); //#9280
        var _7H = $k[--$j]; //#9280
        $puti($k[--$j], _7H, _7G); //#9280
        $_.gpf = $k[--$j]; //#9281
        if (($_.i != ($_.ais.length - 1)) && $get($_.fncs, $_.i)) { //#9287
            var _7Q = $a($_.gpf.length + 1); //#9283
            $puti(_7Q, 0, $_.gpf); //#9284
            $put(_7Q, $_.gpf.length, $_.fnc1); //#9285
            $_.gpf = _7Q; //#9286
        } //#9286
    } //#9286
    $_.rembits = function() {
        var _7U = $k[--$j]; //#9292
        var _7V = 48; //#9294
        var _7W = (~~Math.ceil(_7U / 12)) * 12; //#9294
        if (((~~Math.ceil(_7U / 12)) * 12) < 48) { //#9294
            var _ = _7V; //#9294
            _7V = _7W; //#9294
            _7W = _; //#9294
        } //#9294
        var _7X = ~~(_7W / 12); //#9295
        $k[$j++] = _7U; //#9299
        $k[$j++] = _7W; //#9299
        $k[$j++] = _7X; //#9299
        if ((_7X % $_.segments) == 1) { //#9298
            var _7Z = $k[--$j]; //#9296
            var _7a = $k[--$j]; //#9296
            $k[$j++] = $f(_7Z + 1) * 12; //#9296
            $k[$j++] = _7a; //#9296
            $j--; //#9296
        } else { //#9298
            $j--; //#9298
        } //#9298
        var _7b = $k[--$j]; //#9300
        var _7c = $k[--$j]; //#9300
        $k[$j++] = $f(_7b - _7c); //#9300
    }; //#9300
    $_.encode = function() {
        var _7d = $k[--$j]; //#9304
        $k[$j++] = _7d; //#9304
        if ($ne(_7d, 'raw')) { //#9304
            var _7e = $k[--$j]; //#9304
            var _7g = $get(_7e, $k[--$j]); //#9304
            $k[$j++] = _7g; //#9304
        } else { //#9304
            $j--; //#9304
        } //#9304
        var _7h = $k[--$j]; //#9305
        $k[$j++] = _7h; //#9307
        if ((_7h.length + $_.j) >= 252) { //#9307
            $j--; //#9306
            $k[$j++] = 'bwipp.gs1databarexpandedTooLong#9306'; //#9306
            $k[$j++] = "Maximum length exceeded"; //#9306
            bwipp_raiseerror(); //#9306
        } //#9306
        $k[$j++] = Infinity; //#9308
        var _7j = $k[--$j]; //#9308
        var _7k = $k[--$j]; //#9308
        $k[$j++] = _7j; //#9308
        $forall(_7k, function() { //#9308
            var _7l = $k[--$j]; //#9308
            $k[$j++] = $f(_7l - 48); //#9308
        }); //#9308
        var _7m = $a(); //#9308
        $puti($_.gpfenc, $_.j, _7m); //#9310
        $_.j = _7m.length + $_.j; //#9311
    }; //#9311
    $k[$j++] = Infinity; //#9315
    for (var _7r = 0, _7s = $_.gpf.length; _7r < _7s; _7r++) { //#9315
        $k[$j++] = 0; //#9315
    } //#9315
    $k[$j++] = 0; //#9315
    $k[$j++] = -1; //#9315
    $_.numericruns = $a(); //#9315
    $k[$j++] = Infinity; //#9316
    for (var _7v = 0, _7w = $_.gpf.length; _7v < _7w; _7v++) { //#9316
        $k[$j++] = 0; //#9316
    } //#9316
    $k[$j++] = 0; //#9316
    $_.alphanumericruns = $a(); //#9316
    $k[$j++] = Infinity; //#9317
    for (var _7z = 0, _80 = $_.gpf.length; _7z < _80; _7z++) { //#9317
        $k[$j++] = 0; //#9317
    } //#9317
    $k[$j++] = 9999; //#9317
    $_.nextiso646only = $a(); //#9317
    for (var _83 = $_.gpf.length - 1; _83 >= 0; _83 -= 1) { //#9339
        $_.i = _83; //#9319
        var _88 = $strcpy($s(2), "00"); //#9321
        var _8B = $get($_.gpf, $_.i); //#9322
        $k[$j++] = $get($_.gpf, $_.i); //#9322
        $k[$j++] = _88; //#9322
        $k[$j++] = _88; //#9322
        $k[$j++] = 0; //#9322
        $k[$j++] = _8B; //#9322
        if (_8B == $_.fnc1) { //#9322
            $j--; //#9322
            $k[$j++] = 94; //#9322
        } //#9322
        var _8D = $k[--$j]; //#9322
        var _8E = $k[--$j]; //#9322
        $put($k[--$j], _8E, _8D); //#9322
        if ($_.i < ($_.gpf.length - 1)) { //#9323
            var _8I = $k[--$j]; //#9323
            var _8L = $get($_.gpf, $_.i + 1); //#9323
            $k[$j++] = _8I; //#9323
            $k[$j++] = _8I; //#9323
            $k[$j++] = 1; //#9323
            $k[$j++] = _8L; //#9323
            if (_8L == $_.fnc1) { //#9323
                $j--; //#9323
                $k[$j++] = 94; //#9323
            } //#9323
            var _8N = $k[--$j]; //#9323
            var _8O = $k[--$j]; //#9323
            $put($k[--$j], _8O, _8N); //#9323
        } //#9323
        var _8S = $get($_.numeric, $k[--$j]) !== undefined; //#9324
        if (_8S) { //#9327
            $put($_.numericruns, $_.i, $f($get($_.numericruns, $_.i + 2) + 2)); //#9325
        } else { //#9327
            $put($_.numericruns, $_.i, 0); //#9327
        } //#9327
        var _8a = $k[--$j]; //#9329
        var _8c = $get($_.alphanumeric, _8a) !== undefined; //#9329
        $k[$j++] = _8a; //#9333
        if (_8c) { //#9332
            $put($_.alphanumericruns, $_.i, $f($get($_.alphanumericruns, $_.i + 1) + 1)); //#9330
        } else { //#9332
            $put($_.alphanumericruns, $_.i, 0); //#9332
        } //#9332
        var _8k = $k[--$j]; //#9334
        var _8m = $get($_.iso646, _8k) !== undefined; //#9334
        var _8o = $get($_.alphanumeric, _8k) !== undefined; //#9334
        if (_8m && (!_8o)) { //#9337
            $put($_.nextiso646only, $_.i, 0); //#9335
        } else { //#9337
            $put($_.nextiso646only, $_.i, $f($get($_.nextiso646only, $_.i + 1) + 1)); //#9337
        } //#9337
    } //#9337
    $_.gpfenc = $a(252); //#9342
    $_.i = 0; //#9343
    $_.j = 0; //#9343
    $_.mode = "numeric"; //#9343
    for (;;) { //#9433
        if ($_.i == $_.gpf.length) { //#9345
            break; //#9345
        } //#9345
        for (;;) { //#9432
            if ($eq($_.mode, "numeric")) { //#9381
                if ($_.i <= ($_.gpf.length - 2)) { //#9378
                    var _92 = $s(2); //#9350
                    var _95 = $get($_.gpf, $_.i); //#9351
                    $k[$j++] = _92; //#9351
                    $k[$j++] = _92; //#9351
                    $k[$j++] = 0; //#9351
                    $k[$j++] = _95; //#9351
                    if (_95 == $_.fnc1) { //#9351
                        $j--; //#9351
                        $k[$j++] = 94; //#9351
                    } //#9351
                    var _97 = $k[--$j]; //#9351
                    var _98 = $k[--$j]; //#9351
                    $put($k[--$j], _98, _97); //#9351
                    var _9A = $k[--$j]; //#9352
                    var _9D = $get($_.gpf, $_.i + 1); //#9352
                    $k[$j++] = _9A; //#9352
                    $k[$j++] = _9A; //#9352
                    $k[$j++] = 1; //#9352
                    $k[$j++] = _9D; //#9352
                    if (_9D == $_.fnc1) { //#9352
                        $j--; //#9352
                        $k[$j++] = 94; //#9352
                    } //#9352
                    var _9F = $k[--$j]; //#9352
                    var _9G = $k[--$j]; //#9352
                    $put($k[--$j], _9G, _9F); //#9352
                    var _9I = $k[--$j]; //#9353
                    var _9K = $get($_.numeric, _9I) !== undefined; //#9353
                    $k[$j++] = _9I; //#9357
                    if (_9K) { //#9357
                        $k[$j++] = $_.numeric; //#9354
                        $_.encode(); //#9354
                        $_.i = $_.i + 2; //#9355
                        break; //#9356
                    } //#9356
                    $j--; //#9358
                    $k[$j++] = $_.lalphanumeric; //#9359
                    $k[$j++] = $_.numeric; //#9359
                    $_.encode(); //#9359
                    $_.mode = "alphanumeric"; //#9360
                    break; //#9361
                } else { //#9378
                    var _9R = $get($_.gpf, $_.i); //#9363
                    if ((_9R < 48) || (_9R > 57)) { //#9367
                        $k[$j++] = $_.lalphanumeric; //#9364
                        $k[$j++] = $_.numeric; //#9364
                        $_.encode(); //#9364
                        $_.mode = "alphanumeric"; //#9365
                        break; //#9366
                    } //#9366
                    $k[$j++] = 'rem'; //#9368
                    $k[$j++] = ((((12 + 1) + $_.method.length) + $_.vlf.length) + $_.cdf.length) + $_.j; //#9368
                    $_.rembits(); //#9368
                    var _9Y = $k[--$j]; //#9368
                    $_[$k[--$j]] = _9Y; //#9368
                    if (($_.rem >= 4) && ($_.rem <= 6)) { //#9378
                        var _9f = $geti($strcpy($s(6), "000000"), 0, $_.rem); //#9370
                        var _9k = $cvrs($s(4), $f($get($_.gpf, $_.i) - 47), 2); //#9371
                        $puti(_9f, 4 - _9k.length, _9k); //#9372
                        $k[$j++] = _9f; //#9372
                        $k[$j++] = 'raw'; //#9372
                        $_.encode(); //#9372
                        $_.i = $_.i + 1; //#9373
                        break; //#9374
                    } else { //#9378
                        var _9m = $s(2); //#9376
                        $put(_9m, 0, $get($_.gpf, $_.i)); //#9376
                        $put(_9m, 1, 94); //#9376
                        $k[$j++] = _9m; //#9376
                        $k[$j++] = $_.numeric; //#9376
                        $_.encode(); //#9376
                        $_.i = $_.i + 1; //#9377
                        break; //#9378
                    } //#9378
                } //#9378
            } //#9378
            if ($eq($_.mode, "alphanumeric")) { //#9408
                if ($get($_.gpf, $_.i) == $_.fnc1) { //#9389
                    $k[$j++] = $_.fnc1; //#9385
                    $k[$j++] = $_.alphanumeric; //#9385
                    $_.encode(); //#9385
                    $_.mode = "numeric"; //#9386
                    $_.i = $_.i + 1; //#9387
                    break; //#9388
                } //#9388
                var _A2 = $get($_.gpf, $_.i); //#9390
                var _A4 = $get($_.iso646, _A2) !== undefined; //#9390
                var _A6 = $get($_.alphanumeric, _A2) !== undefined; //#9390
                if (_A4 && (!_A6)) { //#9394
                    $k[$j++] = $_.liso646; //#9391
                    $k[$j++] = $_.alphanumeric; //#9391
                    $_.encode(); //#9391
                    $_.mode = "iso646"; //#9392
                    break; //#9393
                } //#9393
                if ($get($_.numericruns, $_.i) >= 6) { //#9399
                    $k[$j++] = $_.lnumeric; //#9396
                    $k[$j++] = $_.alphanumeric; //#9396
                    $_.encode(); //#9396
                    $_.mode = "numeric"; //#9397
                    break; //#9398
                } //#9398
                var _AG = $get($_.numericruns, $_.i); //#9400
                if ((_AG >= 4) && ($f(_AG + $_.i) == $_.gpf.length)) { //#9404
                    $k[$j++] = $_.lnumeric; //#9401
                    $k[$j++] = $_.alphanumeric; //#9401
                    $_.encode(); //#9401
                    $_.mode = "numeric"; //#9402
                    break; //#9403
                } //#9403
                $k[$j++] = $get($_.gpf, $_.i); //#9405
                $k[$j++] = $_.alphanumeric; //#9405
                $_.encode(); //#9405
                $_.i = $_.i + 1; //#9406
                break; //#9407
            } //#9407
            if ($eq($_.mode, "iso646")) { //#9430
                if ($get($_.gpf, $_.i) == $_.fnc1) { //#9416
                    $k[$j++] = $_.fnc1; //#9412
                    $k[$j++] = $_.iso646; //#9412
                    $_.encode(); //#9412
                    $_.mode = "numeric"; //#9413
                    $_.i = $_.i + 1; //#9414
                    break; //#9415
                } //#9415
                if (($get($_.numericruns, $_.i) >= 4) && ($get($_.nextiso646only, $_.i) >= 10)) { //#9421
                    $k[$j++] = $_.lnumeric; //#9418
                    $k[$j++] = $_.iso646; //#9418
                    $_.encode(); //#9418
                    $_.mode = "numeric"; //#9419
                    break; //#9420
                } //#9420
                if (($get($_.alphanumericruns, $_.i) >= 5) && ($get($_.nextiso646only, $_.i) >= 10)) { //#9426
                    $k[$j++] = $_.lalphanumeric; //#9423
                    $k[$j++] = $_.iso646; //#9423
                    $_.encode(); //#9423
                    $_.mode = "alphanumeric"; //#9424
                    break; //#9425
                } //#9425
                $k[$j++] = $get($_.gpf, $_.i); //#9427
                $k[$j++] = $_.iso646; //#9427
                $_.encode(); //#9427
                $_.i = $_.i + 1; //#9428
                break; //#9429
            } //#9429
        } //#9429
    } //#9429
    $_.gpf = $geti($_.gpfenc, 0, $_.j); //#9434
    var _B0 = ((((1 + 12) + $_.method.length) + $_.vlf.length) + $_.cdf.length) + $_.gpf.length; //#9438
    $k[$j++] = _B0; //#9438
    $k[$j++] = _B0; //#9438
    $_.rembits(); //#9438
    var _B1 = $k[--$j]; //#9438
    $_.pad = $a(_B1); //#9438
    $k[$j++] = _B1; //#9445
    if ($_.vlf.length != 0) { //#9444
        var _B4 = $k[--$j]; //#9440
        var _B6 = ~~($f($k[--$j] + _B4) / 12); //#9441
        $put($_.vlf, 0, _B6 % 2); //#9441
        var _B8 = (_B6 <= 14) ? 0 : 1; //#9442
        $put($_.vlf, 1, _B8); //#9442
    } else { //#9444
        $j -= 2; //#9444
    } //#9444
    if ($_.pad.length > 0) { //#9454
        for (var _BD = 0, _BC = $_.pad.length - 1; _BD <= _BC; _BD += 5) { //#9450
            $_.i = _BD; //#9448
            var _BE = $_.pad; //#9449
            var _BF = $_.i; //#9449
            var _BG = $a([0, 0, 1, 0, 0]); //#9449
            var _BH = $_.pad; //#9449
            var _BI = $_.i; //#9449
            var _BJ = 5; //#9449
            var _BK = _BH.length - _BI; //#9449
            if ((_BH.length - _BI) > 5) { //#9449
                var _ = _BJ; //#9449
                _BJ = _BK; //#9449
                _BK = _; //#9449
            } //#9449
            $puti(_BE, _BF, $geti(_BG, 0, _BK)); //#9449
        } //#9449
        if ($eq($_.mode, "numeric")) { //#9453
            $k[$j++] = Infinity; //#9452
            $k[$j++] = 0; //#9452
            $k[$j++] = 0; //#9452
            $k[$j++] = 0; //#9452
            $k[$j++] = 0; //#9452
            $aload($_.pad); //#9452
            $_.pad = $geti($a(), 0, $_.pad.length); //#9452
        } //#9452
    } //#9452
    $k[$j++] = Infinity; //#9457
    var _BS = $_.linkage ? 1 : 0; //#9458
    $k[$j++] = _BS; //#9459
    $forall($_.method, function() { //#9459
        var _BU = $k[--$j]; //#9459
        $k[$j++] = $f(_BU - 48); //#9459
    }); //#9459
    $aload($_.vlf); //#9460
    $aload($_.cdf); //#9461
    $aload($_.gpf); //#9462
    $aload($_.pad); //#9463
    $_.binval = $a(); //#9463
    $_.datalen = ~~($_.binval.length / 12); //#9465
    $_.ncr = function() {
        var _Bb = $k[--$j]; //#9468
        var _Bc = $k[--$j]; //#9468
        var _Bd = $f(_Bc - _Bb); //#9468
        if (_Bb < $f(_Bc - _Bb)) { //#9468
            var _ = _Bd; //#9468
            _Bd = _Bb; //#9468
            _Bb = _; //#9468
        } //#9468
        $k[$j++] = _Bd; //#9475
        $k[$j++] = 1; //#9475
        $k[$j++] = 1; //#9475
        for (var _Bf = _Bc, _Be = $f(_Bb + 1); _Bf >= _Be; _Bf -= 1) { //#9475
            var _Bg = $k[--$j]; //#9471
            var _Bh = $k[--$j]; //#9472
            var _Bi = $k[--$j]; //#9472
            $k[$j++] = _Bi; //#9474
            $k[$j++] = _Bh; //#9474
            $k[$j++] = _Bg * _Bf; //#9474
            if ($le(_Bh, _Bi)) { //#9474
                var _Bj = $k[--$j]; //#9473
                var _Bk = $k[--$j]; //#9473
                $k[$j++] = $f(_Bk + 1); //#9473
                $k[$j++] = ~~(_Bj / _Bk); //#9473
            } //#9473
        } //#9473
        for (;;) { //#9479
            var _Bl = $k[--$j]; //#9477
            var _Bm = $k[--$j]; //#9477
            var _Bn = $k[--$j]; //#9477
            $k[$j++] = _Bn; //#9477
            $k[$j++] = _Bm; //#9477
            $k[$j++] = _Bl; //#9477
            if ($gt(_Bm, _Bn)) { //#9477
                break; //#9477
            } //#9477
            var _Bo = $k[--$j]; //#9478
            var _Bp = $k[--$j]; //#9478
            $k[$j++] = $f(_Bp + 1); //#9478
            $k[$j++] = ~~(_Bo / _Bp); //#9478
        } //#9478
        var _Bq = $k[--$j]; //#9480
        var _Br = $k[--$j]; //#9480
        $k[$j++] = _Bq; //#9480
        $k[$j++] = _Br; //#9480
        $j--; //#9480
        var _Bs = $k[--$j]; //#9480
        var _Bt = $k[--$j]; //#9480
        $k[$j++] = _Bs; //#9480
        $k[$j++] = _Bt; //#9480
        $j--; //#9480
    }; //#9480
    $_.getRSSwidths = function() {
        $_.oe = $k[--$j]; //#9484
        $_.el = $k[--$j]; //#9485
        $_.mw = $k[--$j]; //#9486
        $_.nm = $k[--$j]; //#9487
        $_.val = $k[--$j]; //#9488
        $_.out = $a($_.el); //#9489
        $_.mask = 0; //#9490
        for (var _C3 = 0, _C2 = $f($_.el - 2); _C3 <= _C2; _C3 += 1) { //#9517
            $_.bar = _C3; //#9492
            $_.ew = 1; //#9493
            var _C5 = $_.bar; //#9494
            $_.mask = $_.mask | ((_C5 < 0 ? 1 >>> -_C5 : 1 << _C5)); //#9494
            for (;;) { //#9513
                $k[$j++] = 'sval'; //#9495
                $k[$j++] = $f($f($_.nm - $_.ew) - 1); //#9495
                $k[$j++] = $f($f($_.el - $_.bar) - 2); //#9495
                $_.ncr(); //#9495
                var _CA = $k[--$j]; //#9495
                $_[$k[--$j]] = _CA; //#9495
                if (($_.oe && ($_.mask == 0)) && (($f(($f($f($_.nm - $_.ew) - ($_.el * 2))) + ($_.bar * 2))) >= -2)) { //#9498
                    $k[$j++] = 'sval'; //#9497
                    $k[$j++] = $_.sval; //#9497
                    $k[$j++] = $f(($f($f($_.nm - $_.ew) - $_.el)) + $_.bar); //#9497
                    $k[$j++] = $f($f($_.el - $_.bar) - 2); //#9497
                    $_.ncr(); //#9497
                    var _CP = $k[--$j]; //#9497
                    var _CQ = $k[--$j]; //#9497
                    $_[$k[--$j]] = $f(_CQ - _CP); //#9497
                } //#9497
                if ($f($_.el - $_.bar) > 2) { //#9507
                    $_.lval = 0; //#9500
                    for (var _Ca = $f(($f(($f($f($_.nm - $_.ew) - $_.el)) + $_.bar)) + 2), _CZ = $f($_.mw + 1); _Ca >= _CZ; _Ca -= 1) { //#9504
                        $k[$j++] = $f(($f($f($_.nm - _Ca) - $_.ew)) - 1); //#9502
                        $k[$j++] = $f($f($_.el - $_.bar) - 3); //#9502
                        $_.ncr(); //#9502
                        $_.lval = $f($k[--$j] + $_.lval); //#9503
                    } //#9503
                    $_.sval = $f($_.sval - ($_.lval * ($f($f($_.el - $_.bar) - 1)))); //#9505
                } else { //#9507
                    if ($f($_.nm - $_.ew) > $_.mw) { //#9507
                        $_.sval = $f($_.sval - 1); //#9507
                    } //#9507
                } //#9507
                $_.val = $f($_.val - $_.sval); //#9509
                if ($_.val < 0) { //#9510
                    break; //#9510
                } //#9510
                $_.ew = $_.ew + 1; //#9511
                var _Cu = $_.bar; //#9512
                $_.mask = $_.mask & (~((_Cu < 0 ? 1 >>> -_Cu : 1 << _Cu))); //#9512
            } //#9512
            $_.val = $f($_.val + $_.sval); //#9514
            $_.nm = $f($_.nm - $_.ew); //#9515
            $put($_.out, $_.bar, $_.ew); //#9516
        } //#9516
        $put($_.out, $f($_.el - 1), $_.nm); //#9518
        $k[$j++] = $_.out; //#9519
    }; //#9519
    if (!bwipp_databarexpanded.__9530__) { //#9530
        $_ = Object.create($_); //#9530
        $_.tab174 = $a([347, 0, 12, 5, 7, 2, 87, 4, 1387, 348, 10, 7, 5, 4, 52, 20, 2947, 1388, 8, 9, 4, 5, 30, 52, 3987, 2948, 6, 11, 3, 6, 10, 104, 4191, 3988, 4, 13, 1, 8, 1, 204]); //#9529
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_databarexpanded.$ctx[id] = $_[id]); //#9529
        bwipp_databarexpanded.__9530__ = 1; //#9529
        $_ = Object.getPrototypeOf($_); //#9529
    } //#9529
    $_.dxw = $a($_.datalen); //#9532
    for (var _DC = 0, _DB = $_.datalen - 1; _DC <= _DB; _DC += 1) { //#9573
        $_.x = _DC; //#9536
        $_.d = $geti($_.binval, $_.x * 12, 12); //#9538
        $k[$j++] = 'd'; //#9539
        $k[$j++] = 0; //#9539
        for (var _DG = 0; _DG <= 11; _DG += 1) { //#9539
            $_.j = _DG; //#9539
            var _DL = $k[--$j]; //#9539
            $k[$j++] = $f(_DL + ((~~Math.pow(2, 11 - $_.j)) * $get($_.d, $_.j))); //#9539
        } //#9539
        var _DM = $k[--$j]; //#9539
        $_[$k[--$j]] = _DM; //#9539
        $_.j = 0; //#9541
        for (;;) { //#9551
            if ($le($_.d, $get($_.tab174, $_.j))) { //#9549
                var _DU = $geti($_.tab174, $_.j + 1, 7); //#9543
                for (var _DV = 0, _DW = _DU.length; _DV < _DW; _DV++) { //#9543
                    $k[$j++] = $get(_DU, _DV); //#9543
                } //#9543
                $_.dte = $k[--$j]; //#9544
                $_.dto = $k[--$j]; //#9544
                $_.dmwe = $k[--$j]; //#9545
                $_.dmwo = $k[--$j]; //#9545
                $_.dele = $k[--$j]; //#9546
                $_.delo = $k[--$j]; //#9546
                $_.dgs = $k[--$j]; //#9547
                break; //#9548
            } //#9548
            $_.j = $_.j + 8; //#9550
        } //#9550
        $k[$j++] = 'dwo'; //#9553
        $k[$j++] = ~~($f($_.d - $_.dgs) / $_.dte); //#9553
        $k[$j++] = $_.delo; //#9553
        $k[$j++] = $_.dmwo; //#9553
        $k[$j++] = 4; //#9553
        $k[$j++] = true; //#9553
        $_.getRSSwidths(); //#9553
        var _Dl = $k[--$j]; //#9553
        $_[$k[--$j]] = _Dl; //#9553
        $k[$j++] = 'dwe'; //#9554
        $k[$j++] = $f($_.d - $_.dgs) % $_.dte; //#9554
        $k[$j++] = $_.dele; //#9554
        $k[$j++] = $_.dmwe; //#9554
        $k[$j++] = 4; //#9554
        $k[$j++] = false; //#9554
        $_.getRSSwidths(); //#9554
        var _Ds = $k[--$j]; //#9554
        $_[$k[--$j]] = _Ds; //#9554
        $_.dw = $a(8); //#9556
        if (($_.x % 2) == 0) { //#9567
            for (var _Dw = 0; _Dw <= 3; _Dw += 1) { //#9562
                $_.j = _Dw; //#9559
                $put($_.dw, 7 - ($_.j * 2), $get($_.dwo, $_.j)); //#9560
                $put($_.dw, 6 - ($_.j * 2), $get($_.dwe, $_.j)); //#9561
            } //#9561
        } else { //#9567
            for (var _E7 = 0; _E7 <= 3; _E7 += 1) { //#9568
                $_.j = _E7; //#9565
                $put($_.dw, $_.j * 2, $get($_.dwo, $_.j)); //#9566
                $put($_.dw, ($_.j * 2) + 1, $get($_.dwe, $_.j)); //#9567
            } //#9567
        } //#9567
        $put($_.dxw, $_.x, $_.dw); //#9571
    } //#9571
    if (!bwipp_databarexpanded.__9597__) { //#9597
        $_ = Object.create($_); //#9597
        $_.finderwidths = $a([1, 8, 4, 1, 1, 1, 1, 4, 8, 1, 3, 6, 4, 1, 1, 1, 1, 4, 6, 3, 3, 4, 6, 1, 1, 1, 1, 6, 4, 3, 3, 2, 8, 1, 1, 1, 1, 8, 2, 3, 2, 6, 5, 1, 1, 1, 1, 5, 6, 2, 2, 2, 9, 1, 1, 1, 1, 9, 2, 2]); //#9583
        $_.finderseq = $a([$a([0, 1]), $a([0, 3, 2]), $a([0, 5, 2, 7]), $a([0, 9, 2, 7, 4]), $a([0, 9, 2, 7, 6, 11]), $a([0, 9, 2, 7, 8, 11, 10]), $a([0, 1, 2, 3, 4, 5, 6, 7]), $a([0, 1, 2, 3, 4, 5, 6, 9, 8]), $a([0, 1, 2, 3, 4, 5, 6, 9, 10, 11]), $a([0, 1, 2, 3, 4, 7, 6, 9, 8, 11, 10])]); //#9596
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_databarexpanded.$ctx[id] = $_[id]); //#9596
        bwipp_databarexpanded.__9597__ = 1; //#9596
        $_ = Object.getPrototypeOf($_); //#9596
    } //#9596
    $_.seq = $get($_.finderseq, ~~(($_.datalen - 2) / 2)); //#9599
    $_.fxw = $a($_.seq.length); //#9600
    for (var _Ef = 0, _Ee = $_.seq.length - 1; _Ef <= _Ee; _Ef += 1) { //#9604
        $_.x = _Ef; //#9602
        $put($_.fxw, $_.x, $geti($_.finderwidths, $get($_.seq, $_.x) * 5, 5)); //#9603
    } //#9603
    if (!bwipp_databarexpanded.__9633__) { //#9633
        $_ = Object.create($_); //#9633
        $_.checkweights = $a([-1, -1, -1, -1, -1, -1, -1, -1, 77, 96, 32, 81, 27, 9, 3, 1, 20, 60, 180, 118, 143, 7, 21, 63, 205, 209, 140, 117, 39, 13, 145, 189, 193, 157, 49, 147, 19, 57, 171, 91, 132, 44, 85, 169, 197, 136, 186, 62, 185, 133, 188, 142, 4, 12, 36, 108, 50, 87, 29, 80, 97, 173, 128, 113, 150, 28, 84, 41, 123, 158, 52, 156, 166, 196, 206, 139, 187, 203, 138, 46, 76, 17, 51, 153, 37, 111, 122, 155, 146, 119, 110, 107, 106, 176, 129, 43, 16, 48, 144, 10, 30, 90, 59, 177, 164, 125, 112, 178, 200, 137, 116, 109, 70, 210, 208, 202, 184, 130, 179, 115, 190, 204, 68, 93, 31, 151, 191, 134, 148, 22, 66, 198, 172, 94, 71, 2, 40, 154, 192, 64, 162, 54, 18, 6, 120, 149, 25, 75, 14, 42, 126, 167, 175, 199, 207, 69, 23, 78, 26, 79, 103, 98, 83, 38, 114, 131, 182, 124, 159, 53, 88, 170, 127, 183, 61, 161, 55, 165, 73, 8, 24, 72, 5, 15, 89, 100, 174, 58, 160, 194, 135, 45]); //#9632
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_databarexpanded.$ctx[id] = $_[id]); //#9632
        bwipp_databarexpanded.__9633__ = 1; //#9632
        $_ = Object.getPrototypeOf($_); //#9632
    } //#9632
    $k[$j++] = Infinity; //#9635
    $forall($_.seq, function() { //#9636
        $aload($geti($_.checkweights, $k[--$j] * 16, 16)); //#9636
    }); //#9636
    var _Et = $a(); //#9636
    $_.checkweightseq = $geti(_Et, 8, _Et.length - 8); //#9637
    $k[$j++] = Infinity; //#9639
    var _Ev = $_.dxw; //#9640
    for (var _Ew = 0, _Ex = _Ev.length; _Ew < _Ex; _Ew++) { //#9640
        $forall($get(_Ev, _Ew)); //#9640
    } //#9640
    $_.widths = $a(); //#9640
    $_.checksum = 0; //#9643
    for (var _F2 = 0, _F1 = $_.widths.length - 1; _F2 <= _F1; _F2 += 1) { //#9647
        $_.i = _F2; //#9645
        $_.checksum = $f($_.checksum + ($get($_.widths, $_.i) * $get($_.checkweightseq, $_.i))); //#9646
    } //#9646
    $_.checksum = $f(($_.checksum % 211) + (($_.datalen - 3) * 211)); //#9648
    $_.i = 0; //#9650
    for (;;) { //#9660
        if ($_.checksum <= $get($_.tab174, $_.i)) { //#9658
            var _FI = $geti($_.tab174, $_.i + 1, 7); //#9652
            for (var _FJ = 0, _FK = _FI.length; _FJ < _FK; _FJ++) { //#9652
                $k[$j++] = $get(_FI, _FJ); //#9652
            } //#9652
            $_.cte = $k[--$j]; //#9653
            $_.cto = $k[--$j]; //#9653
            $_.cmwe = $k[--$j]; //#9654
            $_.cmwo = $k[--$j]; //#9654
            $_.cele = $k[--$j]; //#9655
            $_.celo = $k[--$j]; //#9655
            $_.cgs = $k[--$j]; //#9656
            break; //#9657
        } //#9657
        $_.i = $_.i + 8; //#9659
    } //#9659
    $k[$j++] = 'cwo'; //#9662
    $k[$j++] = ~~($f($_.checksum - $_.cgs) / $_.cte); //#9662
    $k[$j++] = $_.celo; //#9662
    $k[$j++] = $_.cmwo; //#9662
    $k[$j++] = 4; //#9662
    $k[$j++] = true; //#9662
    $_.getRSSwidths(); //#9662
    var _FZ = $k[--$j]; //#9662
    $_[$k[--$j]] = _FZ; //#9662
    $k[$j++] = 'cwe'; //#9663
    $k[$j++] = $f($_.checksum - $_.cgs) % $_.cte; //#9663
    $k[$j++] = $_.cele; //#9663
    $k[$j++] = $_.cmwe; //#9663
    $k[$j++] = 4; //#9663
    $k[$j++] = false; //#9663
    $_.getRSSwidths(); //#9663
    var _Fg = $k[--$j]; //#9663
    $_[$k[--$j]] = _Fg; //#9663
    $_.cw = $a(8); //#9665
    for (var _Fj = 0; _Fj <= 3; _Fj += 1) { //#9670
        $_.i = _Fj; //#9667
        $put($_.cw, $_.i * 2, $get($_.cwo, $_.i)); //#9668
        $put($_.cw, ($_.i * 2) + 1, $get($_.cwe, $_.i)); //#9669
    } //#9669
    var _Fu = $a(22); //#9672
    $put(_Fu, 0, $_.cw); //#9673
    $puti(_Fu, 1, $_.dxw); //#9673
    $_.dxw = $geti(_Fu, 0, $_.datalen + 1); //#9674
    $_.datalen = $_.dxw.length; //#9675
    $_.rows = $a(~~Math.ceil($_.datalen / $_.segments)); //#9678
    $_.numrows = $_.rows.length; //#9679
    for (var _G6 = 0, _G5 = $_.numrows - 1; _G6 <= _G5; _G6 += 1) { //#9694
        $_.r = _G6; //#9681
        $k[$j++] = Infinity; //#9682
        if ((($_.segments % 4) != 0) && (($_.r % 2) == 1)) { //#9683
            $k[$j++] = 0; //#9683
        } //#9683
        $k[$j++] = 1; //#9691
        $k[$j++] = 1; //#9691
        for (var _GB = 0, _GA = $_.segments - 1; _GB <= _GA; _GB += 1) { //#9691
            $_.pos = _GB + ($_.r * $_.segments); //#9686
            if ($_.pos < $_.datalen) { //#9690
                $forall($get($_.dxw, $_.pos)); //#9688
                if (($_.pos % 2) == 0) { //#9689
                    $forall($get($_.fxw, ~~($_.pos / 2))); //#9689
                } //#9689
            } //#9689
        } //#9689
        var _GN = $counttomark() + 2; //#9693
        $k[$j++] = 1; //#9693
        $k[$j++] = 1; //#9693
        $astore($a(_GN)); //#9693
        $put($_.rows, $_.r, $k[--$j]); //#9693
        $j--; //#9693
    } //#9693
    if ($ne($_.format, "expandedstacked")) { //#9826
        var _GU = $get($_.rows, 0); //#9699
        $_.sbs = $geti(_GU, 1, _GU.length - 1); //#9699
        $k[$j++] = Infinity; //#9701
        $k[$j++] = 1; //#9707
        for (var _GY = 0, _GX = $_.datalen - 1; _GY <= _GX; _GY += 1) { //#9707
            $_.i = _GY; //#9704
            $forall($get($_.dxw, $_.i)); //#9705
            if (($_.i % 2) == 0) { //#9706
                $forall($get($_.fxw, ~~($_.i / 2))); //#9706
            } //#9706
        } //#9706
        $k[$j++] = 1; //#9708
        $k[$j++] = 1; //#9708
        $_.sbs = $a(); //#9708
        $k[$j++] = Infinity; //#9711
        var _Gh = $_.sbs; //#9713
        $k[$j++] = Infinity; //#9714
        for (var _Gj = 0, _Gk = ~~(($_.sbs.length + 1) / 2); _Gj < _Gk; _Gj++) { //#9714
            $k[$j++] = $_.height; //#9714
        } //#9714
        var _Gm = $a(); //#9714
        $k[$j++] = Infinity; //#9715
        for (var _Go = 0, _Gp = ~~(($_.sbs.length + 1) / 2); _Go < _Gp; _Go++) { //#9715
            $k[$j++] = 0; //#9715
        } //#9715
        var _Gq = $a(); //#9715
        $k[$j++] = 'ren'; //#9720
        $k[$j++] = bwipp_renlinear; //#9720
        $k[$j++] = 'sbs'; //#9720
        $k[$j++] = _Gh; //#9720
        $k[$j++] = 'bhs'; //#9720
        $k[$j++] = _Gm; //#9720
        $k[$j++] = 'bbs'; //#9720
        $k[$j++] = _Gq; //#9720
        $k[$j++] = 'borderleft'; //#9720
        $k[$j++] = 0; //#9720
        $k[$j++] = 'borderright'; //#9720
        $k[$j++] = 0; //#9720
        $k[$j++] = 'bordertop'; //#9720
        $k[$j++] = 0; //#9720
        $k[$j++] = 'borderbottom'; //#9720
        $k[$j++] = 0; //#9720
        $k[$j++] = 'opt'; //#9720
        $k[$j++] = $_.options; //#9720
        var _Gs = $d(); //#9720
        $k[$j++] = _Gs; //#9723
        if (!$_.dontdraw) { //#9723
            bwipp_renlinear(); //#9723
        } //#9723
    } else { //#9826
        $_.seps = $a($_.numrows); //#9727
        for (var _Gy = 0, _Gx = $_.numrows - 1; _Gy <= _Gx; _Gy += 1) { //#9783
            $_.r = _Gy; //#9730
            $_.row = $get($_.rows, $_.r); //#9731
            $k[$j++] = Infinity; //#9734
            for (var _H4 = 0, _H3 = $_.row.length - 1; _H4 <= _H3; _H4 += 2) { //#9739
                $_.i = _H4; //#9736
                for (var _H8 = 0, _H9 = $get($_.row, $_.i); _H8 < _H9; _H8++) { //#9737
                    $k[$j++] = 0; //#9737
                } //#9737
                if ($_.i < ($_.row.length - 1)) { //#9738
                    for (var _HF = 0, _HG = $get($_.row, $_.i + 1); _HF < _HG; _HF++) { //#9738
                        $k[$j++] = 1; //#9738
                    } //#9738
                } //#9738
            } //#9738
            $astore($a($counttomark())); //#9740
            $_.row = $k[--$j]; //#9740
            $j--; //#9740
            $k[$j++] = Infinity; //#9743
            $forall($_.row, function() { //#9743
                var _HL = $k[--$j]; //#9743
                $k[$j++] = $f(1 - _HL); //#9743
            }); //#9743
            $_.sep = $a(); //#9743
            $k[$j++] = Infinity; //#9744
            for (var _HP = 19, _HO = $_.row.length - 13; _HP <= _HO; _HP += 98) { //#9745
                $k[$j++] = _HP; //#9745
            } //#9745
            for (var _HS = 68, _HR = $_.row.length - 13; _HS <= _HR; _HS += 98) { //#9746
                $k[$j++] = _HS; //#9746
            } //#9746
            $_.finderpos = $a(); //#9746
            var _HU = $_.finderpos; //#9748
            for (var _HV = 0, _HW = _HU.length; _HV < _HW; _HV++) { //#9762
                var _HX = $get(_HU, _HV); //#9762
                for (var _HZ = _HX, _HY = $f(_HX + 14); _HZ <= _HY; _HZ += 1) { //#9761
                    $_.i = _HZ; //#9750
                    if ($get($_.row, $_.i) == 0) { //#9758
                        if ($get($_.row, $_.i - 1) == 1) { //#9755
                            $k[$j++] = 1; //#9753
                        } else { //#9755
                            var _Hj = ($get($_.sep, $_.i - 1) == 0) ? 1 : 0; //#9755
                            $k[$j++] = _Hj; //#9755
                        } //#9755
                    } else { //#9758
                        $k[$j++] = 0; //#9758
                    } //#9758
                    $put($_.sep, $_.i, $k[--$j]); //#9760
                } //#9760
            } //#9760
            $puti($_.sep, 0, $a([0, 0, 0, 0])); //#9763
            $puti($_.sep, $_.row.length - 4, $a([0, 0, 0, 0])); //#9764
            if ((($_.segments % 4) == 0) && (($_.r % 2) == 1)) { //#9778
                if (($get($_.rows, $_.r).length != $get($_.rows, 0).length) && (($_.finderpos.length % 2) == 1)) { //#9776
                    $k[$j++] = Infinity; //#9770
                    $k[$j++] = 0; //#9770
                    $aload($_.row); //#9770
                    $_.row = $a(); //#9770
                    $k[$j++] = Infinity; //#9771
                    $k[$j++] = 0; //#9771
                    $aload($_.sep); //#9771
                    $_.sep = $a(); //#9771
                } else { //#9776
                    for (var _I5 = $_.row.length - 1; _I5 >= 0; _I5 -= 1) { //#9773
                        $k[$j++] = $get($_.row, _I5); //#9773
                    } //#9773
                    $astore($_.row); //#9774
                    $j--; //#9774
                    for (var _IA = $_.sep.length - 1; _IA >= 0; _IA -= 1) { //#9775
                        $k[$j++] = $get($_.sep, _IA); //#9775
                    } //#9775
                    $astore($_.sep); //#9776
                    $j--; //#9776
                } //#9776
            } //#9776
            $put($_.rows, $_.r, $_.row); //#9780
            $put($_.seps, $_.r, $_.sep); //#9781
        } //#9781
        $_.pixx = $get($_.rows, 0).length; //#9786
        $k[$j++] = Infinity; //#9787
        for (var _IN = 0, _IO = $_.pixx; _IN < _IO; _IN++) { //#9787
            $k[$j++] = 0; //#9787
        } //#9787
        var _IP = $a(); //#9787
        $puti(_IP, 0, $get($_.rows, $_.numrows - 1)); //#9787
        $put($_.rows, $_.numrows - 1, _IP); //#9788
        $k[$j++] = Infinity; //#9789
        for (var _IW = 0, _IX = $_.pixx; _IW < _IX; _IW++) { //#9789
            $k[$j++] = 0; //#9789
        } //#9789
        var _IY = $a(); //#9789
        $puti(_IY, 0, $get($_.seps, $_.numrows - 1)); //#9789
        $put($_.seps, $_.numrows - 1, _IY); //#9790
        $k[$j++] = Infinity; //#9793
        for (var _If = 0, _Ig = (~~($_.pixx / 2)) + 1; _If < _Ig; _If++) { //#9793
            $k[$j++] = 0; //#9793
            $k[$j++] = 1; //#9793
        } //#9793
        $_.sep = $geti($a(), 0, $_.pixx); //#9793
        $puti($_.sep, 0, $a([0, 0, 0, 0])); //#9794
        $puti($_.sep, $_.pixx - 4, $a([0, 0, 0, 0])); //#9795
        $k[$j++] = Infinity; //#9798
        for (var _Ir = 0, _Iq = $_.numrows - 1; _Ir <= _Iq; _Ir += 1) { //#9809
            $_.r = _Ir; //#9800
            if ($_.r != 0) { //#9803
                $aload($get($_.seps, $_.r)); //#9802
            } //#9802
            for (var _Ix = 0, _Iy = $_.barxmult; _Ix < _Iy; _Ix++) { //#9804
                $aload($get($_.rows, $_.r)); //#9804
            } //#9804
            if ($_.r != ($_.numrows - 1)) { //#9808
                $aload($get($_.seps, $_.r)); //#9806
                $aload($_.sep); //#9807
            } //#9807
        } //#9807
        $_.pixs = $a(); //#9807
        var _JH = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", ~~($_.pixs.length / $_.pixx)],
            ["height", (~~($_.pixs.length / $_.pixx)) / 72],
            ["width", $_.pixx / 72],
            ["borderleft", 0],
            ["borderright", 0],
            ["bordertop", 0],
            ["borderbottom", 0],
            ["opt", $_.options]
        ]); //#9823
        $k[$j++] = _JH; //#9826
        if (!$_.dontdraw) { //#9826
            bwipp_renmatrix(); //#9826
        } //#9826
    } //#9826
    $_ = Object.getPrototypeOf($_); //#9830
    $_ = Object.getPrototypeOf($_); //#9832
} //bwipp_databarexpanded
function bwipp_databarexpandedstacked() {
    $_ = Object.create($_); //#9861
    $_.dontdraw = false; //#9864
    $k[$j++] = $_; //#9866
    bwipp_processoptions(); //#9866
    $_.options = $k[--$j]; //#9866
    $_.barcode = $k[--$j]; //#9867
    $put($_.options, "dontdraw", true); //#9870
    $put($_.options, "format", "expandedstacked"); //#9871
    $k[$j++] = 'args'; //#9873
    $k[$j++] = $_.barcode; //#9873
    $k[$j++] = $_.options; //#9873
    bwipp_databarexpanded(); //#9873
    var _6 = $k[--$j]; //#9873
    $_[$k[--$j]] = _6; //#9873
    $put($_.args, "opt", $_.options); //#9875
    $k[$j++] = $_.args; //#9878
    if (!$_.dontdraw) { //#9878
        bwipp_renmatrix(); //#9878
    } //#9878
    $_ = Object.getPrototypeOf($_); //#9880
} //bwipp_databarexpandedstacked
function bwipp_gs1northamericancoupon() {
    $_ = Object.create($_); //#9910
    $_.dontdraw = false; //#9913
    $_.includetext = false; //#9914
    $_.coupontextfont = "OCR-B"; //#9915
    $_.coupontextsize = 9; //#9916
    $_.coupontextxoffset = null; //#9917
    $_.coupontextyoffset = null; //#9918
    $_.parse = false; //#9919
    $_.dontlint = false; //#9920
    $_.lintreqs = true; //#9921
    $k[$j++] = $_; //#9923
    bwipp_processoptions(); //#9923
    $_.options = $k[--$j]; //#9923
    $_.barcode = $k[--$j]; //#9924
    $k[$j++] = $_.barcode; //#9926
    $k[$j++] = 'ai'; //#9926
    bwipp_gs1process(); //#9926
    $j--; //#9927
    $_.vals = $k[--$j]; //#9928
    $_.ais = $k[--$j]; //#9929
    if ($_.ais.length != 1) { //#9934
        $k[$j++] = 'bwipp.gs1northamericancouponBadAIStructure#9933'; //#9933
        $k[$j++] = "A GS1 North American Coupon should consist of a single AI (8110)"; //#9933
        bwipp_raiseerror(); //#9933
    } //#9933
    if ($ne($get($_.ais, 0), "8110")) { //#9937
        $k[$j++] = 'bwipp.gs1northamericancouponBadAIStructure#9936'; //#9936
        $k[$j++] = "A GS1 North American Coupon should consist of a single AI (8110)"; //#9936
        bwipp_raiseerror(); //#9936
    } //#9936
    $_.val = $get($_.vals, 0); //#9940
    $_.vli = $f($get($_.val, 0) - 48); //#9941
    if (($_.vli < 0) || ($_.vli > 6)) { //#9944
        $k[$j++] = 'bwipp.gs1northamericancouponBadVLI#9943'; //#9943
        $k[$j++] = "The AI (8110) data should start with a Company Prefix length indicator in the range 0 to 6"; //#9943
        bwipp_raiseerror(); //#9943
    } //#9943
    $_.gcp = $geti($_.val, 1, $f($_.vli + 6)); //#9945
    $_.cod = $geti($_.val, $f($_.vli + 7), 6); //#9946
    $_.coupontext = $s($_.gcp.length + 7); //#9947
    $puti($_.coupontext, 0, $_.gcp); //#9948
    $puti($_.coupontext, $_.gcp.length, "-"); //#9949
    $puti($_.coupontext, $_.gcp.length + 1, $_.cod); //#9950
    $put($_.options, "dontdraw", true); //#9953
    $k[$j++] = 'args'; //#9955
    $k[$j++] = $_.barcode; //#9955
    $k[$j++] = $_.options; //#9955
    bwipp_databarexpandedstacked(); //#9955
    var _W = $k[--$j]; //#9955
    $_[$k[--$j]] = _W; //#9955
    if ($_.includetext) { //#9974
        if ($eq($_.coupontextxoffset, null)) { //#9961
            $_.coupontextxoffset = 0; //#9960
        } //#9960
        if ($eq($_.coupontextyoffset, null)) { //#9964
            $_.coupontextyoffset = $f(($get($_.args, "height") * 72) + 3); //#9963
        } //#9963
        var _e = $get($_.args, "txt") !== undefined; //#9965
        if (_e) { //#9972
            $_.txt = $get($_.args, "txt"); //#9966
            $_.newtxt = $a($_.txt.length + 1); //#9967
            $puti($_.newtxt, 0, $_.txt); //#9968
            $put($_.newtxt, $_.newtxt.length - 1, $a([$_.coupontext, $_.coupontextxoffset, $_.coupontextyoffset, $_.coupontextfont, $_.coupontextsize])); //#9969
            $put($_.args, "txt", $_.newtxt); //#9970
        } else { //#9972
            $put($_.args, "txt", $a([$a([$_.coupontext, $_.coupontextxoffset, $_.coupontextyoffset, $_.coupontextfont, $_.coupontextsize])])); //#9972
        } //#9972
    } //#9972
    $put($_.args, "opt", $_.options); //#9976
    $k[$j++] = $_.args; //#9979
    if (!$_.dontdraw) { //#9979
        bwipp_renmatrix(); //#9979
    } //#9979
    $_ = Object.getPrototypeOf($_); //#9981
} //bwipp_gs1northamericancoupon
function bwipp_pharmacode() {
    $_ = Object.create($_); //#10009
    $_.dontdraw = false; //#10012
    $_.height = (8 * 2.835) / 72; //#10013
    $_.nwidth = 0.5 * 2.835; //#10014
    $_.wwidth = 1.5 * 2.835; //#10015
    $_.swidth = 1 * 2.835; //#10016
    $k[$j++] = $_; //#10018
    bwipp_processoptions(); //#10018
    $_.options = $k[--$j]; //#10018
    $_.barcode = $k[--$j]; //#10019
    if (($_.barcode.length < 1) || ($_.barcode.length > 6)) { //#10024
        $k[$j++] = 'bwipp.pharmacodeBadLength#10023'; //#10023
        $k[$j++] = "Pharmacode must be 1 to 6 digits"; //#10023
        bwipp_raiseerror(); //#10023
    } //#10023
    $forall($_.barcode, function() { //#10029
        var _5 = $k[--$j]; //#10026
        if ((_5 < 48) || (_5 > 57)) { //#10028
            $k[$j++] = 'bwipp.pharmacodeBadCharacter#10027'; //#10027
            $k[$j++] = "Pharmacode must contain only digits"; //#10027
            bwipp_raiseerror(); //#10027
        } //#10027
    }); //#10027
    var _7 = $cvi($_.barcode); //#10030
    if ((_7 < 3) || (_7 > 131070)) { //#10032
        $k[$j++] = 'bwipp.pharmacodeBadValue#10031'; //#10031
        $k[$j++] = "Pharmacode value must be between 3 and 131070"; //#10031
        bwipp_raiseerror(); //#10031
    } //#10031
    $_.txt = $a($_.barcode.length); //#10035
    for (var _C = 0, _B = $_.barcode.length - 1; _C <= _B; _C += 1) { //#10039
        $_.i = _C; //#10037
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), 0, 0, "", 0])); //#10038
    } //#10038
    $_.barcode = $cvrs($s(17), $cvi($_.barcode) + 1, 2); //#10042
    $_.barcode = $geti($_.barcode, 1, $_.barcode.length - 1); //#10043
    $_.barlen = $_.barcode.length; //#10045
    $_.sbs = $a($_.barlen * 2); //#10046
    for (var _U = 0, _T = $_.barlen - 1; _U <= _T; _U += 1) { //#10057
        $_.i = _U; //#10049
        $_.enc = $geti($_.barcode, $_.i, 1); //#10050
        if ($eq($_.enc, "0")) { //#10054
            $put($_.sbs, $_.i * 2, $_.nwidth); //#10052
        } else { //#10054
            $put($_.sbs, $_.i * 2, $_.wwidth); //#10054
        } //#10054
        $put($_.sbs, ($_.i * 2) + 1, $_.swidth); //#10056
    } //#10056
    $k[$j++] = Infinity; //#10060
    var _i = $_.sbs; //#10062
    $k[$j++] = Infinity; //#10063
    for (var _k = 0, _l = ~~(($_.sbs.length + 1) / 2); _k < _l; _k++) { //#10063
        $k[$j++] = $_.height; //#10063
    } //#10063
    var _n = $a(); //#10063
    $k[$j++] = Infinity; //#10064
    for (var _p = 0, _q = ~~(($_.sbs.length + 1) / 2); _p < _q; _p++) { //#10064
        $k[$j++] = 0; //#10064
    } //#10064
    var _r = $a(); //#10064
    $k[$j++] = 'ren'; //#10067
    $k[$j++] = bwipp_renlinear; //#10067
    $k[$j++] = 'sbs'; //#10067
    $k[$j++] = _i; //#10067
    $k[$j++] = 'bhs'; //#10067
    $k[$j++] = _n; //#10067
    $k[$j++] = 'bbs'; //#10067
    $k[$j++] = _r; //#10067
    $k[$j++] = 'txt'; //#10067
    $k[$j++] = $_.txt; //#10067
    $k[$j++] = 'textxalign'; //#10067
    $k[$j++] = "center"; //#10067
    $k[$j++] = 'opt'; //#10067
    $k[$j++] = $_.options; //#10067
    var _u = $d(); //#10067
    $k[$j++] = _u; //#10070
    if (!$_.dontdraw) { //#10070
        bwipp_renlinear(); //#10070
    } //#10070
    $_ = Object.getPrototypeOf($_); //#10072
} //bwipp_pharmacode
function bwipp_pharmacode2() {
    $_ = Object.create($_); //#10100
    $_.dontdraw = false; //#10103
    $_.includetext = false; //#10104
    $_.height = 4; //#10105
    $k[$j++] = $_; //#10107
    bwipp_processoptions(); //#10107
    $_.options = $k[--$j]; //#10107
    $_.barcode = $k[--$j]; //#10108
    if (($_.barcode.length < 1) || ($_.barcode.length > 8)) { //#10113
        $k[$j++] = 'bwipp.pharmacode2BadLength#10112'; //#10112
        $k[$j++] = "Two-track Pharmacode must be 1 to 6 digits"; //#10112
        bwipp_raiseerror(); //#10112
    } //#10112
    $forall($_.barcode, function() { //#10118
        var _5 = $k[--$j]; //#10115
        if ((_5 < 48) || (_5 > 57)) { //#10117
            $k[$j++] = 'bwipp.pharmacode2badCharacter#10116'; //#10116
            $k[$j++] = "Two-track Pharmacode must contain only digits"; //#10116
            bwipp_raiseerror(); //#10116
        } //#10116
    }); //#10116
    var _7 = $cvi($_.barcode); //#10119
    if ((_7 < 4) || (_7 > 64570080)) { //#10121
        $k[$j++] = 'bwipp.pharmacode2badValue#10120'; //#10120
        $k[$j++] = "Two-track Pharmacode value must be between 4 and 64570080"; //#10120
        bwipp_raiseerror(); //#10120
    } //#10120
    $_.txt = $a($_.barcode.length); //#10124
    for (var _C = 0, _B = $_.barcode.length - 1; _C <= _B; _C += 1) { //#10128
        $_.i = _C; //#10126
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), 0, 0, "", 0])); //#10127
    } //#10127
    $_.encstr = $s(16); //#10130
    $_.sbs = $a(32); //#10131
    $_.bar = (1 / 25.4) * $_.height; //#10132
    $_.spc = (1 / 25.4) * 72; //#10133
    $_.i = 15; //#10136
    $_.val = $cvi($_.barcode); //#10137
    for (;;) { //#10144
        if ($_.val == 0) { //#10139
            break; //#10139
        } //#10139
        var _P = $_.val % 3; //#10140
        $_.val = ~~($f($_.val - $get($a([3, 1, 2]), _P)) / 3); //#10141
        $put($_.encstr, $_.i, $get($a([2, 0, 1]), _P)); //#10142
        $_.i = $_.i - 1; //#10143
    } //#10143
    $_.encstr = $geti($_.encstr, $_.i + 1, 15 - $_.i); //#10145
    $_.bhs = $a($_.encstr.length); //#10148
    $_.bbs = $a($_.encstr.length); //#10149
    for (var _i = 0, _h = $_.encstr.length - 1; _i <= _h; _i += 1) { //#10155
        $_.i = _i; //#10151
        var _l = $get($_.encstr, $_.i); //#10152
        $put($_.bhs, $_.i, $_.bar * $get($a([1, 1, 2]), _l)); //#10153
        $put($_.bbs, $_.i, $get($a([0, $_.bar, 0]), _l)); //#10154
    } //#10154
    $k[$j++] = Infinity; //#10158
    var _w = $_.bhs; //#10160
    var _x = $_.bbs; //#10161
    $k[$j++] = Infinity; //#10162
    for (var _z = 0, _10 = $_.encstr.length * 2; _z < _10; _z++) { //#10162
        $k[$j++] = $_.spc; //#10162
    } //#10162
    var _12 = $a(); //#10162
    $k[$j++] = 'ren'; //#10166
    $k[$j++] = bwipp_renlinear; //#10166
    $k[$j++] = 'bhs'; //#10166
    $k[$j++] = _w; //#10166
    $k[$j++] = 'bbs'; //#10166
    $k[$j++] = _x; //#10166
    $k[$j++] = 'sbs'; //#10166
    $k[$j++] = _12; //#10166
    $k[$j++] = 'txt'; //#10166
    $k[$j++] = $_.txt; //#10166
    $k[$j++] = 'textxalign'; //#10166
    $k[$j++] = "center"; //#10166
    $k[$j++] = 'textyoffset'; //#10166
    $k[$j++] = 4; //#10166
    $k[$j++] = 'opt'; //#10166
    $k[$j++] = $_.options; //#10166
    var _15 = $d(); //#10166
    $k[$j++] = _15; //#10169
    if (!$_.dontdraw) { //#10169
        bwipp_renlinear(); //#10169
    } //#10169
    $_ = Object.getPrototypeOf($_); //#10171
} //bwipp_pharmacode2
function bwipp_code2of5() {
    $_ = Object.create($_); //#10201
    $_.dontdraw = false; //#10204
    $_.includecheck = false; //#10205
    $_.validatecheck = false; //#10206
    $_.includetext = false; //#10207
    $_.includecheckintext = false; //#10208
    $_.textfont = "OCR-B"; //#10209
    $_.textsize = 10; //#10210
    $_.textyoffset = -8; //#10211
    $_.height = 1; //#10212
    $_.version = "industrial"; //#10213
    $k[$j++] = $_; //#10215
    bwipp_processoptions(); //#10215
    $_.options = $k[--$j]; //#10215
    $_.barcode = $k[--$j]; //#10216
    if ($eq($_.barcode, "")) { //#10220
        $k[$j++] = 'bwipp.code2of5emptyData#10219'; //#10219
        $k[$j++] = "The data must not be empty"; //#10219
        bwipp_raiseerror(); //#10219
    } //#10219
    bwipp_loadctx(bwipp_code2of5) //#10222
    $forall($_.barcode, function() { //#10229
        var _4 = $k[--$j]; //#10226
        if ((_4 < 48) || (_4 > 57)) { //#10228
            $k[$j++] = 'bwipp.code2of5badCharacter#10227'; //#10227
            $k[$j++] = "Code 25 must contain only digits"; //#10227
            bwipp_raiseerror(); //#10227
        } //#10227
    }); //#10227
    $k[$j++] = 'barlen'; //#10231
    $k[$j++] = $_.barcode.length; //#10231
    if ($_.validatecheck) { //#10231
        var _7 = $k[--$j]; //#10231
        $k[$j++] = $f(_7 - 1); //#10231
    } //#10231
    var _8 = $k[--$j]; //#10231
    $_[$k[--$j]] = _8; //#10231
    $_.checksum = 0; //#10233
    for (var _C = 0, _B = $f($_.barlen - 1); _C <= _B; _C += 1) { //#10237
        $_.i = _C; //#10235
        $k[$j++] = 'checksum'; //#10236
        $k[$j++] = $_.checksum; //#10236
        $k[$j++] = $f($get($_.barcode, $_.i) - 48); //#10236
        if (($f($_.barlen - $_.i) % 2) != 0) { //#10236
            var _J = $k[--$j]; //#10236
            $k[$j++] = _J * 3; //#10236
        } //#10236
        var _K = $k[--$j]; //#10236
        var _L = $k[--$j]; //#10236
        $_[$k[--$j]] = $f(_L + _K); //#10236
    } //#10236
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#10238
    if ($_.validatecheck) { //#10245
        if ($get($_.barcode, $_.barlen) != ($_.checksum + 48)) { //#10242
            $k[$j++] = 'bwipp.code2of5badCheckDigit#10241'; //#10241
            $k[$j++] = "Incorrect Code 25 check digit provided"; //#10241
            bwipp_raiseerror(); //#10241
        } //#10241
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#10243
        $_.includecheck = true; //#10244
    } //#10244
    if (!bwipp_code2of5.__10273__) { //#10273
        $_ = Object.create($_); //#10273
        var _b = new Map([
            ["industrial", $a(["1111313111", "3111111131", "1131111131", "3131111111", "1111311131", "3111311111", "1131311111", "1111113131", "3111113111", "1131113111", "313111", "31113"])],
            ["iata", $a(["1111313111", "3111111131", "1131111131", "3131111111", "1111311131", "3111311111", "1131311111", "1111113131", "3111113111", "1131113111", "1111", "311"])],
            ["matrix", $a(["113311", "311131", "131131", "331111", "113131", "313111", "133111", "111331", "311311", "131311", "311111", "31111"])],
            ["coop", $a(["331111", "111331", "113131", "113311", "131131", "131311", "133111", "311131", "311311", "313111", "3131", "133"])],
            ["datalogic", $a(["113311", "311131", "131131", "331111", "113131", "313111", "133111", "111331", "311311", "131311", "1111", "311"])]
        ]); //#10270
        $_.versions = _b; //#10272
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code2of5.$ctx[id] = $_[id]); //#10272
        bwipp_code2of5.__10273__ = 1; //#10272
        $_ = Object.getPrototypeOf($_); //#10272
    } //#10272
    var _f = $get($_.versions, $_.version) !== undefined; //#10275
    if (!_f) { //#10277
        $k[$j++] = 'bwipp.code2of5badVersion#10276'; //#10276
        $k[$j++] = "Unrecognised Code 25 version"; //#10276
        bwipp_raiseerror(); //#10276
    } //#10276
    $_.encs = $get($_.versions, $_.version); //#10278
    $_.cs = $get($_.encs, 0).length; //#10280
    $k[$j++] = 'cw'; //#10281
    $k[$j++] = 0; //#10281
    $forall($get($_.encs, 0), function() { //#10281
        var _n = $k[--$j]; //#10281
        var _o = $k[--$j]; //#10281
        $k[$j++] = $f(_o + $f(_n - 48)); //#10281
    }); //#10281
    var _p = $k[--$j]; //#10281
    $_[$k[--$j]] = _p; //#10281
    $_.ss = $get($_.encs, 10).length; //#10282
    $k[$j++] = 'sw'; //#10283
    $k[$j++] = 0; //#10283
    $forall($get($_.encs, 10), function() { //#10283
        var _v = $k[--$j]; //#10283
        var _w = $k[--$j]; //#10283
        $k[$j++] = $f(_w + $f(_v - 48)); //#10283
    }); //#10283
    var _x = $k[--$j]; //#10283
    $_[$k[--$j]] = _x; //#10283
    var _10 = $get($_.encs, 11); //#10284
    $_.es = _10.length; //#10284
    if (!bwipp_code2of5.__10289__) { //#10289
        $_ = Object.create($_); //#10289
        $_.barchars = "0123456789"; //#10288
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code2of5.$ctx[id] = $_[id]); //#10288
        bwipp_code2of5.__10289__ = 1; //#10288
        $_ = Object.getPrototypeOf($_); //#10288
    } //#10288
    $k[$j++] = 'sbs'; //#10291
    $k[$j++] = $_.barlen; //#10291
    if ($_.includecheck) { //#10291
        var _14 = $k[--$j]; //#10291
        $k[$j++] = $f(_14 + 1); //#10291
    } //#10291
    var _19 = $s($f(($f(($k[--$j] * $_.cs) + $_.ss)) + $_.es)); //#10291
    $_[$k[--$j]] = _19; //#10291
    $k[$j++] = 'txt'; //#10292
    $k[$j++] = $_.barlen; //#10292
    if ($_.includecheck) { //#10292
        var _1D = $k[--$j]; //#10292
        $k[$j++] = $f(_1D + 1); //#10292
    } //#10292
    var _1F = $a($k[--$j]); //#10292
    $_[$k[--$j]] = _1F; //#10292
    $puti($_.sbs, 0, $get($_.encs, 10)); //#10295
    for (var _1M = 0, _1L = $f($_.barlen - 1); _1M <= _1L; _1M += 1) { //#10306
        $_.i = _1M; //#10297
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#10299
        $j--; //#10300
        $_.indx = $k[--$j].length; //#10301
        $j -= 2; //#10302
        $_.enc = $get($_.encs, $_.indx); //#10303
        $puti($_.sbs, ($_.i * $_.cs) + $_.ss, $_.enc); //#10304
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), $f(($_.i * $_.cw) + $_.sw), $_.textyoffset, $_.textfont, $_.textsize])); //#10305
    } //#10305
    if ($_.includecheck) { //#10318
        $puti($_.sbs, $f(($_.barlen * $_.cs) + $_.ss), $get($_.encs, $_.checksum)); //#10310
        $puti($_.sbs, $f(($f(($_.barlen * $_.cs) + $_.cs)) + $_.ss), $get($_.encs, 11)); //#10311
        if ($_.includecheckintext) { //#10315
            $put($_.txt, $_.barlen, $a([$geti($_.barchars, $_.checksum, 1), $f(($_.barlen * $_.cw) + $_.sw), $_.textyoffset, $_.textfont, $_.textsize])); //#10313
        } else { //#10315
            $put($_.txt, $_.barlen, $a([" ", $f(($_.barlen * $_.cw) + $_.sw), $_.textyoffset, $_.textfont, $_.textsize])); //#10315
        } //#10315
    } else { //#10318
        $puti($_.sbs, $f(($_.barlen * $_.cs) + $_.ss), $get($_.encs, 11)); //#10318
    } //#10318
    $k[$j++] = Infinity; //#10322
    $k[$j++] = Infinity; //#10324
    $forall($_.sbs, function() { //#10324
        var _2U = $k[--$j]; //#10324
        $k[$j++] = $f(_2U - 48); //#10324
    }); //#10324
    var _2V = $a(); //#10324
    $k[$j++] = Infinity; //#10325
    for (var _2X = 0, _2Y = ~~(($_.sbs.length + 1) / 2); _2X < _2Y; _2X++) { //#10325
        $k[$j++] = $_.height; //#10325
    } //#10325
    var _2a = $a(); //#10325
    $k[$j++] = Infinity; //#10326
    for (var _2c = 0, _2d = ~~(($_.sbs.length + 1) / 2); _2c < _2d; _2c++) { //#10326
        $k[$j++] = 0; //#10326
    } //#10326
    var _2e = $a(); //#10326
    $k[$j++] = 'ren'; //#10329
    $k[$j++] = bwipp_renlinear; //#10329
    $k[$j++] = 'sbs'; //#10329
    $k[$j++] = _2V; //#10329
    $k[$j++] = 'bhs'; //#10329
    $k[$j++] = _2a; //#10329
    $k[$j++] = 'bbs'; //#10329
    $k[$j++] = _2e; //#10329
    if ($_.includetext) { //#10329
        $k[$j++] = 'txt'; //#10328
        $k[$j++] = $_.txt; //#10328
    } //#10328
    $k[$j++] = 'opt'; //#10330
    $k[$j++] = $_.options; //#10330
    var _2i = $d(); //#10330
    $k[$j++] = _2i; //#10333
    if (!$_.dontdraw) { //#10333
        bwipp_renlinear(); //#10333
    } //#10333
    $_ = Object.getPrototypeOf($_); //#10335
    $_ = Object.getPrototypeOf($_); //#10337
} //bwipp_code2of5
function bwipp_industrial2of5() {
    $_ = Object.create($_); //#10366
    $_.dontdraw = false; //#10369
    $k[$j++] = $_; //#10371
    bwipp_processoptions(); //#10371
    $_.options = $k[--$j]; //#10371
    $_.barcode = $k[--$j]; //#10372
    $put($_.options, "dontdraw", true); //#10375
    $put($_.options, "version", "industrial"); //#10376
    $k[$j++] = 'args'; //#10378
    $k[$j++] = $_.barcode; //#10378
    $k[$j++] = $_.options; //#10378
    bwipp_code2of5(); //#10378
    var _6 = $k[--$j]; //#10378
    $_[$k[--$j]] = _6; //#10378
    $put($_.args, "opt", $_.options); //#10380
    $k[$j++] = $_.args; //#10383
    if (!$_.dontdraw) { //#10383
        bwipp_renlinear(); //#10383
    } //#10383
    $_ = Object.getPrototypeOf($_); //#10385
} //bwipp_industrial2of5
function bwipp_iata2of5() {
    $_ = Object.create($_); //#10414
    $_.dontdraw = false; //#10417
    $k[$j++] = $_; //#10419
    bwipp_processoptions(); //#10419
    $_.options = $k[--$j]; //#10419
    $_.barcode = $k[--$j]; //#10420
    $put($_.options, "dontdraw", true); //#10423
    $put($_.options, "version", "iata"); //#10424
    $k[$j++] = 'args'; //#10426
    $k[$j++] = $_.barcode; //#10426
    $k[$j++] = $_.options; //#10426
    bwipp_code2of5(); //#10426
    var _6 = $k[--$j]; //#10426
    $_[$k[--$j]] = _6; //#10426
    $put($_.args, "opt", $_.options); //#10428
    $k[$j++] = $_.args; //#10431
    if (!$_.dontdraw) { //#10431
        bwipp_renlinear(); //#10431
    } //#10431
    $_ = Object.getPrototypeOf($_); //#10433
} //bwipp_iata2of5
function bwipp_matrix2of5() {
    $_ = Object.create($_); //#10462
    $_.dontdraw = false; //#10465
    $k[$j++] = $_; //#10467
    bwipp_processoptions(); //#10467
    $_.options = $k[--$j]; //#10467
    $_.barcode = $k[--$j]; //#10468
    $put($_.options, "dontdraw", true); //#10471
    $put($_.options, "version", "matrix"); //#10472
    $k[$j++] = 'args'; //#10474
    $k[$j++] = $_.barcode; //#10474
    $k[$j++] = $_.options; //#10474
    bwipp_code2of5(); //#10474
    var _6 = $k[--$j]; //#10474
    $_[$k[--$j]] = _6; //#10474
    $put($_.args, "opt", $_.options); //#10476
    $k[$j++] = $_.args; //#10479
    if (!$_.dontdraw) { //#10479
        bwipp_renlinear(); //#10479
    } //#10479
    $_ = Object.getPrototypeOf($_); //#10481
} //bwipp_matrix2of5
function bwipp_coop2of5() {
    $_ = Object.create($_); //#10510
    $_.dontdraw = false; //#10513
    $k[$j++] = $_; //#10515
    bwipp_processoptions(); //#10515
    $_.options = $k[--$j]; //#10515
    $_.barcode = $k[--$j]; //#10516
    $put($_.options, "dontdraw", true); //#10519
    $put($_.options, "version", "coop"); //#10520
    $k[$j++] = 'args'; //#10522
    $k[$j++] = $_.barcode; //#10522
    $k[$j++] = $_.options; //#10522
    bwipp_code2of5(); //#10522
    var _6 = $k[--$j]; //#10522
    $_[$k[--$j]] = _6; //#10522
    $put($_.args, "opt", $_.options); //#10524
    $k[$j++] = $_.args; //#10527
    if (!$_.dontdraw) { //#10527
        bwipp_renlinear(); //#10527
    } //#10527
    $_ = Object.getPrototypeOf($_); //#10529
} //bwipp_coop2of5
function bwipp_datalogic2of5() {
    $_ = Object.create($_); //#10558
    $_.dontdraw = false; //#10561
    $k[$j++] = $_; //#10563
    bwipp_processoptions(); //#10563
    $_.options = $k[--$j]; //#10563
    $_.barcode = $k[--$j]; //#10564
    $put($_.options, "dontdraw", true); //#10567
    $put($_.options, "version", "datalogic"); //#10568
    $k[$j++] = 'args'; //#10570
    $k[$j++] = $_.barcode; //#10570
    $k[$j++] = $_.options; //#10570
    bwipp_code2of5(); //#10570
    var _6 = $k[--$j]; //#10570
    $_[$k[--$j]] = _6; //#10570
    $put($_.args, "opt", $_.options); //#10572
    $k[$j++] = $_.args; //#10575
    if (!$_.dontdraw) { //#10575
        bwipp_renlinear(); //#10575
    } //#10575
    $_ = Object.getPrototypeOf($_); //#10577
} //bwipp_datalogic2of5
function bwipp_code11() {
    $_ = Object.create($_); //#10607
    $_.dontdraw = false; //#10610
    $_.includecheck = false; //#10611
    $_.validatecheck = false; //#10612
    $_.includetext = false; //#10613
    $_.includecheckintext = false; //#10614
    $_.textfont = "OCR-B"; //#10615
    $_.textsize = 10; //#10616
    $_.textyoffset = -8; //#10617
    $_.height = 1; //#10618
    $k[$j++] = $_; //#10620
    bwipp_processoptions(); //#10620
    $_.options = $k[--$j]; //#10620
    $_.barcode = $k[--$j]; //#10621
    if ($eq($_.barcode, "")) { //#10625
        $k[$j++] = 'bwipp.code11emptyData#10624'; //#10624
        $k[$j++] = "The data must not be empty"; //#10624
        bwipp_raiseerror(); //#10624
    } //#10624
    bwipp_loadctx(bwipp_code11) //#10627
    if (!bwipp_code11.__10641__) { //#10641
        $_ = Object.create($_); //#10641
        $_.encs = $a(["111131", "311131", "131131", "331111", "113131", "313111", "133111", "111331", "311311", "311111", "113111", "113311"]); //#10635
        $_.barchars = "0123456789-"; //#10638
        $_.charvals = new Map; //#10639
        for (var _4 = 0; _4 <= 10; _4 += 1) { //#10640
            $put($_.charvals, $geti($_.barchars, _4, 1), _4); //#10640
        } //#10640
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code11.$ctx[id] = $_[id]); //#10640
        bwipp_code11.__10641__ = 1; //#10640
        $_ = Object.getPrototypeOf($_); //#10640
    } //#10640
    for (var _B = 0, _A = $_.barcode.length - 1; _B <= _A; _B += 1) { //#10648
        var _F = $get($_.charvals, $geti($_.barcode, _B, 1)) !== undefined; //#10645
        if (!_F) { //#10647
            $k[$j++] = 'bwipp.code11badCharacter#10646'; //#10646
            $k[$j++] = "Code 11 must contain only digits and dashes"; //#10646
            bwipp_raiseerror(); //#10646
        } //#10646
    } //#10646
    $_.barlen = $_.barcode.length; //#10650
    if ($_.validatecheck) { //#10656
        if ($_.barlen == 11) { //#10654
            $k[$j++] = 'bwipp.code11badLength#10653'; //#10653
            $k[$j++] = "Code 11 cannot be 11 characters using check digits"; //#10653
            bwipp_raiseerror(); //#10653
        } //#10653
        var _L = ($_.barlen <= 10) ? 1 : 2; //#10655
        $_.barlen = $_.barlen - _L; //#10655
    } //#10655
    $k[$j++] = 'numchecks'; //#10658
    if ($_.includecheck || $_.validatecheck) { //#10658
        var _P = ($_.barlen >= 10) ? 2 : 1; //#10658
        $k[$j++] = _P; //#10658
    } else { //#10658
        $k[$j++] = 0; //#10658
    } //#10658
    var _Q = $k[--$j]; //#10658
    $_[$k[--$j]] = _Q; //#10658
    $_.checksum1 = 0; //#10659
    $_.checksum2 = 0; //#10659
    for (var _U = 0, _T = $_.barlen - 1; _U <= _T; _U += 1) { //#10665
        $_.i = _U; //#10661
        $_.indx = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#10662
        $_.checksum1 = $f($_.checksum1 + ((((($_.barlen - $_.i) - 1) % 10) + 1) * $_.indx)); //#10663
        $_.checksum2 = $f($_.checksum2 + (((($_.barlen - $_.i) % 9) + 1) * $_.indx)); //#10664
    } //#10664
    $_.checksum1 = $_.checksum1 % 11; //#10666
    $_.checksum2 = $f($_.checksum2 + $_.checksum1) % 11; //#10667
    if ($_.validatecheck) { //#10681
        if ($_.numchecks == 1) { //#10676
            var _r = $_.checksum1; //#10670
            if ($get($_.barcode, $_.barlen) != $get($_.barchars, _r)) { //#10672
                $k[$j++] = 'bwipp.code11badCheckDigit#10671'; //#10671
                $k[$j++] = "Incorrect Code 11 check digit provided"; //#10671
                bwipp_raiseerror(); //#10671
            } //#10671
        } else { //#10676
            if (($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum1)) || ($get($_.barcode, $_.barlen + 1) != $get($_.barchars, $_.checksum2))) { //#10677
                $k[$j++] = 'bwipp.code11badCheckDigits#10676'; //#10676
                $k[$j++] = "Incorrect Code 11 check digits provided"; //#10676
                bwipp_raiseerror(); //#10676
            } //#10676
        } //#10676
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#10679
        $_.includecheck = true; //#10680
    } //#10680
    $_.sbs = $s($f(($f($_.barlen + $_.numchecks) * 6) + 12)); //#10683
    $_.txt = $a($f($_.barlen + $_.numchecks)); //#10684
    $puti($_.sbs, 0, $get($_.encs, 11)); //#10687
    $_.xpos = 8; //#10689
    for (var _1J = 0, _1I = $_.barlen - 1; _1J <= _1I; _1J += 1) { //#10699
        $_.i = _1J; //#10691
        $_.indx = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#10692
        $_.enc = $get($_.encs, $_.indx); //#10693
        $puti($_.sbs, ($_.i * 6) + 6, $_.enc); //#10694
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#10695
        for (var _1f = 0; _1f <= 5; _1f += 1) { //#10698
            $_.xpos = $f($f($get($_.enc, _1f) - 48) + $_.xpos); //#10697
        } //#10697
    } //#10697
    if ($_.includecheck) { //#10728
        if ($_.barlen >= 10) { //#10725
            $puti($_.sbs, ($_.barlen * 6) + 6, $get($_.encs, $_.checksum1)); //#10704
            $puti($_.sbs, ($_.barlen * 6) + 12, $get($_.encs, $_.checksum2)); //#10705
            if ($_.includecheckintext) { //#10715
                $put($_.txt, $_.barlen, $a([$geti($_.barchars, $_.checksum1, 1), $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#10707
                $_.enc = $get($_.encs, $_.checksum1); //#10708
                for (var _29 = 0; _29 <= 5; _29 += 1) { //#10711
                    $_.xpos = $f($f($get($_.enc, _29) - 48) + $_.xpos); //#10710
                } //#10710
                $put($_.txt, $_.barlen + 1, $a([$geti($_.barchars, $_.checksum2, 1), $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#10712
            } else { //#10715
                $put($_.txt, $_.barlen, $a(["", $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#10714
                $put($_.txt, $_.barlen + 1, $a(["", $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#10715
            } //#10715
            $puti($_.sbs, ($_.barlen * 6) + 18, $get($_.encs, 11)); //#10717
        } else { //#10725
            $puti($_.sbs, ($_.barlen * 6) + 6, $get($_.encs, $_.checksum1)); //#10719
            if ($_.includecheckintext) { //#10723
                $put($_.txt, $_.barlen, $a([$geti($_.barchars, $_.checksum1, 1), $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#10721
            } else { //#10723
                $put($_.txt, $_.barlen, $a(["", $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#10723
            } //#10723
            $puti($_.sbs, ($_.barlen * 6) + 12, $get($_.encs, 11)); //#10725
        } //#10725
    } else { //#10728
        $puti($_.sbs, ($_.barlen * 6) + 6, $get($_.encs, 11)); //#10728
    } //#10728
    $k[$j++] = Infinity; //#10732
    $k[$j++] = Infinity; //#10734
    var _3A = $_.sbs; //#10734
    for (var _3B = 0, _3C = _3A.length; _3B < _3C; _3B++) { //#10734
        $k[$j++] = $get(_3A, _3B) - 48; //#10734
    } //#10734
    var _3E = $a(); //#10734
    $k[$j++] = Infinity; //#10735
    for (var _3G = 0, _3H = ~~(($_.sbs.length + 1) / 2); _3G < _3H; _3G++) { //#10735
        $k[$j++] = $_.height; //#10735
    } //#10735
    var _3J = $a(); //#10735
    $k[$j++] = Infinity; //#10736
    for (var _3L = 0, _3M = ~~(($_.sbs.length + 1) / 2); _3L < _3M; _3L++) { //#10736
        $k[$j++] = 0; //#10736
    } //#10736
    var _3N = $a(); //#10736
    $k[$j++] = 'ren'; //#10739
    $k[$j++] = bwipp_renlinear; //#10739
    $k[$j++] = 'sbs'; //#10739
    $k[$j++] = _3E; //#10739
    $k[$j++] = 'bhs'; //#10739
    $k[$j++] = _3J; //#10739
    $k[$j++] = 'bbs'; //#10739
    $k[$j++] = _3N; //#10739
    if ($_.includetext) { //#10739
        $k[$j++] = 'txt'; //#10738
        $k[$j++] = $_.txt; //#10738
    } //#10738
    $k[$j++] = 'opt'; //#10740
    $k[$j++] = $_.options; //#10740
    var _3R = $d(); //#10740
    $k[$j++] = _3R; //#10743
    if (!$_.dontdraw) { //#10743
        bwipp_renlinear(); //#10743
    } //#10743
    $_ = Object.getPrototypeOf($_); //#10745
    $_ = Object.getPrototypeOf($_); //#10747
} //bwipp_code11
function bwipp_bc412() {
    $_ = Object.create($_); //#10777
    $_.dontdraw = false; //#10780
    $_.includecheck = false; //#10781
    $_.validatecheck = false; //#10782
    $_.includetext = false; //#10783
    $_.includecheckintext = false; //#10784
    $_.includestartstop = false; //#10785
    $_.semi = false; //#10786
    $_.textfont = "OCR-B"; //#10787
    $_.textsize = 10; //#10788
    $_.textyoffset = -8; //#10789
    $_.height = 1; //#10790
    $k[$j++] = $_; //#10792
    bwipp_processoptions(); //#10792
    $_.options = $k[--$j]; //#10792
    $_.barcode = $k[--$j]; //#10793
    if ($eq($_.barcode, "")) { //#10797
        $k[$j++] = 'bwipp.bc412emptyData#10796'; //#10796
        $k[$j++] = "The data must not be empty"; //#10796
        bwipp_raiseerror(); //#10796
    } //#10796
    if ($_.semi) { //#10802
        $_.includestartstop = true; //#10801
    } //#10801
    bwipp_loadctx(bwipp_bc412) //#10804
    if (!bwipp_bc412.__10811__) { //#10811
        $_ = Object.create($_); //#10811
        $_.barchars = "0R9GLVHA8EZ4NTS1J2Q6C7DYKBUIX3FWP5M"; //#10808
        $_.charvals = new Map; //#10809
        for (var _4 = 0; _4 <= 34; _4 += 1) { //#10810
            $put($_.charvals, $geti($_.barchars, _4, 1), _4); //#10810
        } //#10810
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_bc412.$ctx[id] = $_[id]); //#10810
        bwipp_bc412.__10811__ = 1; //#10810
        $_ = Object.getPrototypeOf($_); //#10810
    } //#10810
    for (var _B = 0, _A = $_.barcode.length - 1; _B <= _A; _B += 1) { //#10818
        var _F = $get($_.charvals, $geti($_.barcode, _B, 1)) !== undefined; //#10815
        if (!_F) { //#10817
            $k[$j++] = 'bwipp.bc412badCharacter#10816'; //#10816
            $k[$j++] = "BC412 must contain only digits and capital letters except O"; //#10816
            bwipp_raiseerror(); //#10816
        } //#10816
    } //#10816
    if ($_.semi) { //#10874
        if ($_.validatecheck) { //#10828
            if (($_.barcode.length < 8) || ($_.barcode.length > 19)) { //#10825
                $k[$j++] = 'bwipp.bc412semivalidateBadLength#10824'; //#10824
                $k[$j++] = "BC412 semi with check digit must be 8 to 19 characters long"; //#10824
                bwipp_raiseerror(); //#10824
            } //#10824
        } else { //#10828
            if (($_.barcode.length < 7) || ($_.barcode.length > 18)) { //#10829
                $k[$j++] = 'bwipp.bc412semiBadLength#10828'; //#10828
                $k[$j++] = "BC412 semi must be 7 to 18 characters long"; //#10828
                bwipp_raiseerror(); //#10828
            } //#10828
        } //#10828
        $_.barlen = $_.barcode.length; //#10832
        if (!$_.validatecheck) { //#10840
            $_.barlen = $_.barlen + 1; //#10834
            $_.sbarcode = $s($_.barlen); //#10835
            $put($_.sbarcode, 0, $get($_.barcode, 0)); //#10836
            $put($_.sbarcode, 1, 48); //#10837
            $puti($_.sbarcode, 2, $geti($_.barcode, 1, $_.barlen - 2)); //#10838
            $_.barcode = $_.sbarcode; //#10839
        } //#10839
        $_.sumodd = 0; //#10841
        $_.sumeven = 0; //#10841
        for (var _c = 0, _b = $_.barlen - 1; _c <= _b; _c += 1) { //#10850
            $_.i = _c; //#10843
            $k[$j++] = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#10849
            if (($_.i % 2) == 0) { //#10848
                $_.sumodd = $f($k[--$j] + $_.sumodd); //#10846
            } else { //#10848
                $_.sumeven = $f($k[--$j] + $_.sumeven); //#10848
            } //#10848
        } //#10848
        $_.checksum = ($f(($_.sumodd % 35) + (($_.sumeven % 35) * 2))) % 35; //#10851
        if ($_.validatecheck) { //#10858
            if ($_.checksum != 0) { //#10855
                $k[$j++] = 'bwipp.bc412semiBadCheckDigit#10854'; //#10854
                $k[$j++] = "Incorrect BC412 semi check digit provided"; //#10854
                bwipp_raiseerror(); //#10854
            } //#10854
        } else { //#10858
            $_.checksum = ($_.checksum * 17) % 35; //#10857
            $put($_.barcode, 1, $get($_.barchars, $_.checksum)); //#10858
        } //#10858
    } else { //#10874
        $k[$j++] = 'barlen'; //#10861
        $k[$j++] = $_.barcode.length; //#10861
        if ($_.validatecheck) { //#10861
            var _y = $k[--$j]; //#10861
            $k[$j++] = $f(_y - 1); //#10861
        } //#10861
        var _z = $k[--$j]; //#10861
        $_[$k[--$j]] = _z; //#10861
        $_.checksum = 0; //#10863
        for (var _13 = 0, _12 = $_.barlen - 1; _13 <= _12; _13 += 1) { //#10867
            $_.checksum = $f($get($_.charvals, $geti($_.barcode, _13, 1)) + $_.checksum); //#10866
        } //#10866
        $_.checksum = $_.checksum % 35; //#10868
        if ($_.validatecheck) { //#10875
            if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#10872
                $k[$j++] = 'bwipp.bc412badCheckDigit#10871'; //#10871
                $k[$j++] = "Incorrect BC412 check digit provided"; //#10871
                bwipp_raiseerror(); //#10871
            } //#10871
            $_.barcode = $geti($_.barcode, 0, $_.barlen); //#10873
            $_.includecheck = true; //#10874
        } //#10874
    } //#10874
    if (!bwipp_bc412.__10890__) { //#10890
        $_ = Object.create($_); //#10890
        $_.encs = $a(["11111115", "13111212", "11131113", "12111213", "12121311", "13131111", "12111312", "11131212", "11121411", "11151111", "15111111", "11111511", "12131211", "13121112", "13111311", "11111214", "12121113", "11111313", "13111113", "11121213", "11141112", "11121312", "11141211", "14121111", "12121212", "11131311", "13121211", "12111411", "14111211", "11111412", "12111114", "14111112", "12141111", "11121114", "12131112", "12", "111"]); //#10889
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_bc412.$ctx[id] = $_[id]); //#10889
        bwipp_bc412.__10890__ = 1; //#10889
        $_ = Object.getPrototypeOf($_); //#10889
    } //#10889
    $_.sbs = $s((($_.barlen + 1) * 8) + 5); //#10892
    if ($_.includecheck) { //#10896
        $_.txt = $a($_.barlen + 1); //#10894
    } else { //#10896
        $_.txt = $a($_.barlen); //#10896
    } //#10896
    if ($_.includestartstop) { //#10906
        $puti($_.sbs, 0, $get($_.encs, 35)); //#10901
        $_.pos = 2; //#10902
        $_.txtpos = 3; //#10903
    } else { //#10906
        $_.pos = 0; //#10905
        $_.txtpos = 0; //#10906
    } //#10906
    for (var _1Z = 0, _1Y = $_.barlen - 1; _1Z <= _1Y; _1Z += 1) { //#10915
        $_.i = _1Z; //#10910
        $_.indx = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#10911
        $puti($_.sbs, $_.pos, $get($_.encs, $_.indx)); //#10912
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ($_.i * 12) + $_.txtpos, $_.textyoffset, $_.textfont, $_.textsize])); //#10913
        $_.pos = $_.pos + 8; //#10914
    } //#10914
    if ($_.includecheck) { //#10926
        $puti($_.sbs, $_.pos, $get($_.encs, $_.checksum)); //#10919
        if ($_.includecheckintext) { //#10923
            $put($_.txt, $_.barlen, $a([$geti($_.barchars, $_.checksum, 1), ($_.barlen * 12) + $_.txtpos, $_.textyoffset, $_.textfont, $_.textsize])); //#10921
        } else { //#10923
            $put($_.txt, $_.barlen, $a(["", ($_.barlen * 12) + $_.txtpos, $_.textyoffset, $_.textfont, $_.textsize])); //#10923
        } //#10923
        $_.pos = $_.pos + 8; //#10925
    } //#10925
    if ($_.includestartstop) { //#10932
        $puti($_.sbs, $_.pos, $get($_.encs, 36)); //#10930
        $_.pos = $_.pos + 3; //#10931
    } //#10931
    $_.sbs = $geti($_.sbs, 0, $_.pos); //#10935
    $k[$j++] = Infinity; //#10936
    $k[$j++] = Infinity; //#10938
    var _2W = $_.sbs; //#10938
    for (var _2X = 0, _2Y = _2W.length; _2X < _2Y; _2X++) { //#10938
        $k[$j++] = $f($get(_2W, _2X) - 48); //#10938
    } //#10938
    var _2a = $a(); //#10938
    $k[$j++] = Infinity; //#10939
    for (var _2c = 0, _2d = ~~(($_.sbs.length + 1) / 2); _2c < _2d; _2c++) { //#10939
        $k[$j++] = $_.height; //#10939
    } //#10939
    var _2f = $a(); //#10939
    $k[$j++] = Infinity; //#10940
    for (var _2h = 0, _2i = ~~(($_.sbs.length + 1) / 2); _2h < _2i; _2h++) { //#10940
        $k[$j++] = 0; //#10940
    } //#10940
    var _2j = $a(); //#10940
    $k[$j++] = 'ren'; //#10943
    $k[$j++] = bwipp_renlinear; //#10943
    $k[$j++] = 'sbs'; //#10943
    $k[$j++] = _2a; //#10943
    $k[$j++] = 'bhs'; //#10943
    $k[$j++] = _2f; //#10943
    $k[$j++] = 'bbs'; //#10943
    $k[$j++] = _2j; //#10943
    if ($_.includetext) { //#10943
        $k[$j++] = 'txt'; //#10942
        $k[$j++] = $_.txt; //#10942
    } //#10942
    $k[$j++] = 'opt'; //#10944
    $k[$j++] = $_.options; //#10944
    var _2n = $d(); //#10944
    $k[$j++] = _2n; //#10947
    if (!$_.dontdraw) { //#10947
        bwipp_renlinear(); //#10947
    } //#10947
    $_ = Object.getPrototypeOf($_); //#10949
    $_ = Object.getPrototypeOf($_); //#10951
} //bwipp_bc412
function bwipp_rationalizedCodabar() {
    $_ = Object.create($_); //#10981
    $_.dontdraw = false; //#10984
    $_.altstartstop = false; //#10985
    $_.includecheck = false; //#10986
    $_.validatecheck = false; //#10987
    $_.includetext = false; //#10988
    $_.includecheckintext = false; //#10989
    $_.textfont = "OCR-B"; //#10990
    $_.textsize = 10; //#10991
    $_.textyoffset = -8; //#10992
    $_.height = 1; //#10993
    $k[$j++] = $_; //#10995
    bwipp_processoptions(); //#10995
    $_.options = $k[--$j]; //#10995
    $_.barcode = $k[--$j]; //#10996
    if (($_.barcode.length < 2) || (($_.barcode.length < 3) && $_.validatecheck)) { //#11000
        $k[$j++] = 'bwipp.rationalizedCodabarBadLength#10999'; //#10999
        $k[$j++] = "Codabar must be at least 2 characters in length excluding any check digit"; //#10999
        bwipp_raiseerror(); //#10999
    } //#10999
    bwipp_loadctx(bwipp_rationalizedCodabar) //#11002
    if (!bwipp_rationalizedCodabar.__11016__) { //#11016
        $_ = Object.create($_); //#11016
        $_.encs = $a(["11111331", "11113311", "11131131", "33111111", "11311311", "31111311", "13111131", "13113111", "13311111", "31131111", "11133111", "11331111", "31113131", "31311131", "31313111", "11313131", "11331311", "13131131", "11131331", "11133311"]); //#11011
        $_.barcharsnormal = "0123456789-$:/.+ABCD"; //#11014
        $_.barcharsalt = "0123456789-$:/.+TN*E"; //#11015
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_rationalizedCodabar.$ctx[id] = $_[id]); //#11015
        bwipp_rationalizedCodabar.__11016__ = 1; //#11015
        $_ = Object.getPrototypeOf($_); //#11015
    } //#11015
    var _8 = $_.altstartstop ? $_.barcharsalt : $_.barcharsnormal; //#11018
    $_.barchars = _8; //#11018
    $_.charvals = new Map; //#11020
    for (var _9 = 0; _9 <= 19; _9 += 1) { //#11021
        $put($_.charvals, $geti($_.barchars, _9, 1), _9); //#11021
    } //#11021
    $_.bodyvals = new Map; //#11022
    for (var _D = 0; _D <= 15; _D += 1) { //#11023
        $put($_.bodyvals, $geti($_.barchars, _D, 1), _D); //#11023
    } //#11023
    $_.ssvals = new Map; //#11024
    for (var _H = 16; _H <= 19; _H += 1) { //#11025
        $put($_.ssvals, $geti($_.barchars, _H, 1), _H); //#11025
    } //#11025
    var _O = $get($_.ssvals, $geti($_.barcode, 0, 1)) !== undefined; //#11028
    var _T = $get($_.ssvals, $geti($_.barcode, $_.barcode.length - 1, 1)) !== undefined; //#11029
    if ((!_O) || (!_T)) { //#11035
        if ($_.altstartstop) { //#11033
            $k[$j++] = 'bwipp.rationalizedCodabarBadAltStartStop#11031'; //#11031
            $k[$j++] = "Codabar start and stop characters must be one of E N T or *"; //#11031
            bwipp_raiseerror(); //#11031
        } else { //#11033
            $k[$j++] = 'bwipp.rationalizedCodabarBadStartStop#11033'; //#11033
            $k[$j++] = "Codabar start and stop characters must be one of A B C or D"; //#11033
            bwipp_raiseerror(); //#11033
        } //#11033
    } //#11033
    for (var _X = 1, _W = $_.barcode.length - 2; _X <= _W; _X += 1) { //#11040
        var _b = $get($_.bodyvals, $geti($_.barcode, _X, 1)) !== undefined; //#11037
        if (!_b) { //#11039
            $k[$j++] = 'bwipp.rationalizedCodabarBadCharacter#11038'; //#11038
            $k[$j++] = "Codabar body must contain only digits and symbols - $ : / . +"; //#11038
            bwipp_raiseerror(); //#11038
        } //#11038
    } //#11038
    $k[$j++] = 'barlen'; //#11042
    $k[$j++] = $_.barcode.length; //#11042
    if ($_.validatecheck) { //#11042
        var _e = $k[--$j]; //#11042
        $k[$j++] = $f(_e - 1); //#11042
    } //#11042
    var _f = $k[--$j]; //#11042
    $_[$k[--$j]] = _f; //#11042
    $_.checksum = 0; //#11044
    for (var _j = 0, _i = $f($_.barlen - 2); _j <= _i; _j += 1) { //#11048
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _j, 1)) + $_.checksum); //#11047
    } //#11047
    var _r = $geti($_.barcode, $_.barcode.length - 1, 1); //#11049
    $_.checksum = $f($get($_.charvals, _r) + $_.checksum); //#11050
    $_.checksum = ($f(16 - ($_.checksum % 16))) % 16; //#11051
    if ($_.validatecheck) { //#11061
        if ($get($_.barcode, $f($_.barlen - 1)) != $get($_.barchars, $_.checksum)) { //#11055
            $k[$j++] = 'bwipp.rationalizedCodabarBadCheckDigit#11054'; //#11054
            $k[$j++] = "Incorrect Codabar check digit provided"; //#11054
            bwipp_raiseerror(); //#11054
        } //#11054
        var _14 = $s($_.barlen); //#11056
        $puti(_14, 0, $geti($_.barcode, 0, $f($_.barlen - 1))); //#11057
        $puti(_14, $f($_.barlen - 1), $geti($_.barcode, $_.barlen, 1)); //#11058
        $_.barcode = _14; //#11059
        $_.includecheck = true; //#11060
    } //#11060
    $k[$j++] = 'sbs'; //#11063
    $k[$j++] = $_.barlen; //#11063
    if ($_.includecheck) { //#11063
        var _1E = $k[--$j]; //#11063
        $k[$j++] = $f(_1E + 1); //#11063
    } //#11063
    var _1G = $s($k[--$j] * 8); //#11063
    $_[$k[--$j]] = _1G; //#11063
    $k[$j++] = 'txt'; //#11064
    $k[$j++] = $_.barlen; //#11064
    if ($_.includecheck) { //#11064
        var _1K = $k[--$j]; //#11064
        $k[$j++] = $f(_1K + 1); //#11064
    } //#11064
    var _1M = $a($k[--$j]); //#11064
    $_[$k[--$j]] = _1M; //#11064
    $_.xpos = 0; //#11066
    for (var _1Q = 0, _1P = $f($_.barlen - 2); _1Q <= _1P; _1Q += 1) { //#11076
        $_.i = _1Q; //#11068
        $_.indx = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#11069
        $_.enc = $get($_.encs, $_.indx); //#11070
        $puti($_.sbs, $_.i * 8, $_.enc); //#11071
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#11072
        for (var _1m = 0; _1m <= 7; _1m += 1) { //#11075
            $_.xpos = $f($f($get($_.enc, _1m) - 48) + $_.xpos); //#11074
        } //#11074
    } //#11074
    if ($_.includecheck) { //#11100
        $puti($_.sbs, $f(($_.barlen * 8) - 8), $get($_.encs, $_.checksum)); //#11081
        if ($_.includecheckintext) { //#11085
            $put($_.txt, $f($_.barlen - 1), $a([$geti($_.barchars, $_.checksum, 1), $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#11083
        } else { //#11085
            $put($_.txt, $f($_.barlen - 1), $a([" ", $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#11085
        } //#11085
        for (var _2E = 0; _2E <= 7; _2E += 1) { //#11089
            $_.xpos = $f($f($get($get($_.encs, $_.checksum), _2E) - 48) + $_.xpos); //#11088
        } //#11088
        $_.indx = $get($_.charvals, $geti($_.barcode, $f($_.barlen - 1), 1)); //#11091
        $_.enc = $get($_.encs, $_.indx); //#11092
        $puti($_.sbs, $_.barlen * 8, $_.enc); //#11093
        $put($_.txt, $_.barlen, $a([$geti($_.barcode, $f($_.barlen - 1), 1), $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#11094
    } else { //#11100
        $_.indx = $get($_.charvals, $geti($_.barcode, $f($_.barlen - 1), 1)); //#11097
        $_.enc = $get($_.encs, $_.indx); //#11098
        $puti($_.sbs, $f(($_.barlen * 8) - 8), $_.enc); //#11099
        $put($_.txt, $f($_.barlen - 1), $a([$geti($_.barcode, $f($_.barlen - 1), 1), $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#11100
    } //#11100
    $k[$j++] = Infinity; //#11104
    $k[$j++] = Infinity; //#11106
    $forall($_.sbs, function() { //#11106
        var _31 = $k[--$j]; //#11106
        $k[$j++] = $f(_31 - 48); //#11106
    }); //#11106
    var _32 = $a(); //#11106
    $k[$j++] = Infinity; //#11107
    for (var _34 = 0, _35 = ~~(($_.sbs.length + 1) / 2); _34 < _35; _34++) { //#11107
        $k[$j++] = $_.height; //#11107
    } //#11107
    var _37 = $a(); //#11107
    $k[$j++] = Infinity; //#11108
    for (var _39 = 0, _3A = ~~(($_.sbs.length + 1) / 2); _39 < _3A; _39++) { //#11108
        $k[$j++] = 0; //#11108
    } //#11108
    var _3B = $a(); //#11108
    $k[$j++] = 'ren'; //#11111
    $k[$j++] = bwipp_renlinear; //#11111
    $k[$j++] = 'sbs'; //#11111
    $k[$j++] = _32; //#11111
    $k[$j++] = 'bhs'; //#11111
    $k[$j++] = _37; //#11111
    $k[$j++] = 'bbs'; //#11111
    $k[$j++] = _3B; //#11111
    if ($_.includetext) { //#11111
        $k[$j++] = 'txt'; //#11110
        $k[$j++] = $_.txt; //#11110
    } //#11110
    $k[$j++] = 'opt'; //#11112
    $k[$j++] = $_.options; //#11112
    var _3F = $d(); //#11112
    $k[$j++] = _3F; //#11115
    if (!$_.dontdraw) { //#11115
        bwipp_renlinear(); //#11115
    } //#11115
    $_ = Object.getPrototypeOf($_); //#11117
    $_ = Object.getPrototypeOf($_); //#11119
} //bwipp_rationalizedCodabar
function bwipp_onecode() {
    $_ = Object.create($_); //#11149
    $_.dontdraw = false; //#11152
    $_.height = 0.15; //#11153
    $k[$j++] = $_; //#11155
    bwipp_processoptions(); //#11155
    $_.options = $k[--$j]; //#11155
    $_.barcode = $k[--$j]; //#11156
    bwipp_loadctx(bwipp_onecode) //#11158
    $_.barlen = $_.barcode.length; //#11160
    $forall($_.barcode, function() { //#11166
        var _4 = $k[--$j]; //#11163
        if ((_4 < 48) || (_4 > 57)) { //#11165
            $k[$j++] = 'bwipp.onecodeBadCharacter#11164'; //#11164
            $k[$j++] = "The data must contain only digits"; //#11164
            bwipp_raiseerror(); //#11164
        } //#11164
    }); //#11164
    if (((($_.barlen != 20) && ($_.barlen != 25)) && ($_.barlen != 29)) && ($_.barlen != 31)) { //#11170
        $k[$j++] = 'bwipp.onecodeInvalidLength#11169'; //#11169
        $k[$j++] = "The data must be 20, 25, 29 or 31 digits"; //#11169
        bwipp_raiseerror(); //#11169
    } //#11169
    $k[$j++] = Infinity; //#11173
    var _B = $eq($geti($_.barcode, 5, 1), "9") ? 14 : 11; //#11176
    $k[$j++] = 2; //#11179
    $k[$j++] = 2; //#11179
    $k[$j++] = 5; //#11179
    $k[$j++] = 5; //#11179
    $k[$j++] = _B; //#11179
    $k[$j++] = _B; //#11179
    $k[$j++] = 20; //#11179
    $k[$j++] = 20; //#11179
    $k[$j++] = 25; //#11179
    $k[$j++] = 25; //#11179
    $k[$j++] = 29; //#11179
    $k[$j++] = 29; //#11179
    $_.txtdict = $d(); //#11180
    $_.txt = $a($_.barlen + 6); //#11181
    $_.spacecnt = 0; //#11182
    for (var _H = 0, _G = $_.barlen - 1; _H <= _G; _H += 1) { //#11190
        $_.i = _H; //#11184
        var _K = $get($_.txtdict, $_.i) !== undefined; //#11185
        if (_K) { //#11188
            $put($_.txt, $_.i + $_.spacecnt, $a([" ", 0, 0, "", 0])); //#11186
            $_.spacecnt = $_.spacecnt + 1; //#11187
        } //#11187
        $put($_.txt, $_.i + $_.spacecnt, $a([$geti($_.barcode, $_.i, 1), 0, 0, "", 0])); //#11189
    } //#11189
    $_.txt = $geti($_.txt, 0, $_.barcode.length + $_.spacecnt); //#11191
    $_.normalize = function() {
        $_.base = $k[--$j]; //#11194
        $_.num = $k[--$j]; //#11195
        for (var _e = $_.num.length - 1; _e >= 1; _e -= 1) { //#11200
            $_.i = _e; //#11197
            var _f = $_.num; //#11198
            var _g = $_.i; //#11198
            $put(_f, _g - 1, $f($get(_f, _g - 1) + (~~($get($_.num, $_.i) / $_.base)))); //#11198
            $put($_.num, $_.i, $get($_.num, $_.i) % $_.base); //#11199
        } //#11199
        for (;;) { //#11206
            if ($lt($get($_.num, 0), $_.base)) { //#11202
                break; //#11202
            } //#11202
            $k[$j++] = Infinity; //#11203
            $k[$j++] = 0; //#11203
            $aload($_.num); //#11203
            $_.num = $a(); //#11203
            $put($_.num, 0, $f($get($_.num, 0) + (~~($get($_.num, 1) / $_.base)))); //#11204
            $put($_.num, 1, $get($_.num, 1) % $_.base); //#11205
        } //#11205
        $k[$j++] = Infinity; //#11208
        $_.i = true; //#11208
        var _17 = $_.num; //#11208
        for (var _18 = 0, _19 = _17.length; _18 < _19; _18++) { //#11208
            var _1A = $get(_17, _18); //#11208
            $k[$j++] = _1A; //#11208
            if ((_1A == 0) && $_.i) { //#11208
                $j--; //#11208
            } else { //#11208
                $_.i = false; //#11208
            } //#11208
        } //#11208
        $_.num = $a(); //#11208
        if ($_.num.length == 0) { //#11209
            $_.num = $a([0]); //#11209
        } //#11209
        $k[$j++] = $_.num; //#11210
    }; //#11210
    $_.bigadd = function() {
        var _1G = $k[--$j]; //#11214
        var _1H = $k[--$j]; //#11214
        $_.offset = Math.abs(_1G.length - _1H.length); //#11215
        if (_1G.length < _1H.length) { //#11216
            var _ = _1G; //#11216
            _1G = _1H; //#11216
            _1H = _; //#11216
        } //#11216
        $_.a = _1G; //#11217
        $_.b = _1H; //#11217
        for (var _1K = 0, _1J = $_.b.length - 1; _1K <= _1J; _1K += 1) { //#11220
            var _1L = $_.a; //#11219
            var _1M = $_.offset; //#11219
            $put(_1L, _1K + _1M, $f($get(_1L, _1K + _1M) + $get($_.b, _1K))); //#11219
        } //#11219
        $k[$j++] = $_.a; //#11221
    }; //#11221
    if (!bwipp_onecode.__11232__) { //#11232
        $_ = Object.create($_); //#11232
        var _1V = new Map([
            [20, $a([0])],
            [25, $a([1])],
            [29, $a([1, 0, 0, 0, 0, 1])],
            [31, $a([1, 0, 0, 0, 1, 0, 0, 0, 0, 1])]
        ]); //#11230
        $_.startvals = _1V; //#11231
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_onecode.$ctx[id] = $_[id]); //#11231
        bwipp_onecode.__11232__ = 1; //#11231
        $_ = Object.getPrototypeOf($_); //#11231
    } //#11231
    $k[$j++] = 'binval'; //#11234
    $k[$j++] = $get($_.startvals, $_.barlen); //#11234
    $k[$j++] = Infinity; //#11234
    var _1c = $geti($_.barcode, 20, $_.barlen - 20); //#11234
    for (var _1d = 0, _1e = _1c.length; _1d < _1e; _1d++) { //#11234
        $k[$j++] = $f($get(_1c, _1d) - 48); //#11234
    } //#11234
    var _1g = $a(); //#11234
    $k[$j++] = _1g; //#11234
    $_.bigadd(); //#11234
    var _1h = $k[--$j]; //#11234
    $_[$k[--$j]] = _1h; //#11234
    $k[$j++] = Infinity; //#11235
    $aload($_.binval); //#11235
    $k[$j++] = $f($get($_.barcode, 0) - 48); //#11235
    $_.binval = $a(); //#11235
    $k[$j++] = Infinity; //#11236
    var _1n = $_.binval; //#11236
    for (var _1o = 0, _1p = _1n.length; _1o < _1p; _1o++) { //#11236
        $k[$j++] = $get(_1n, _1o) * 5; //#11236
    } //#11236
    var _1r = $a(); //#11236
    $k[$j++] = 'binval'; //#11236
    $k[$j++] = _1r; //#11236
    $k[$j++] = $a([$f($get($_.barcode, 1) - 48)]); //#11236
    $_.bigadd(); //#11236
    $k[$j++] = 10; //#11236
    $_.normalize(); //#11236
    var _1v = $k[--$j]; //#11236
    $_[$k[--$j]] = _1v; //#11236
    $k[$j++] = Infinity; //#11237
    $aload($_.binval); //#11237
    var _1z = $geti($_.barcode, 2, 18); //#11237
    for (var _20 = 0, _21 = _1z.length; _20 < _21; _20++) { //#11237
        $k[$j++] = $f($get(_1z, _20) - 48); //#11237
    } //#11237
    $_.binval = $a(); //#11237
    $_.bytes = $a(13); //#11240
    var _25 = $_.binval; //#11241
    $_.bintmp = $arrcpy($a(_25.length), _25); //#11241
    for (var _28 = 12; _28 >= 0; _28 -= 1) { //#11251
        $_.i = _28; //#11243
        for (var _2B = 0, _2A = $_.bintmp.length - 2; _2B <= _2A; _2B += 1) { //#11248
            $_.j = _2B; //#11245
            var _2C = $_.bintmp; //#11246
            var _2D = $_.j; //#11246
            $put(_2C, _2D + 1, $f($get(_2C, _2D + 1) + (($get($_.bintmp, $_.j) % 256) * 10))); //#11246
            $put($_.bintmp, $_.j, ~~($get($_.bintmp, $_.j) / 256)); //#11247
        } //#11247
        $put($_.bytes, $_.i, $get($_.bintmp, $_.bintmp.length - 1) % 256); //#11249
        var _2S = $_.bintmp; //#11250
        var _2T = $_.bintmp; //#11250
        $put(_2S, _2T.length - 1, ~~($get(_2S, _2T.length - 1) / 256)); //#11250
    } //#11250
    $_.fcs = 2047; //#11254
    $_.dat = $get($_.bytes, 0) << 5; //#11255
    for (var _2X = 0, _2Y = 6; _2X < _2Y; _2X++) { //#11264
        if ((($_.fcs ^ $_.dat) & 1024) != 0) { //#11260
            $_.fcs = ($_.fcs << 1) ^ 3893; //#11258
        } else { //#11260
            $_.fcs = $_.fcs << 1; //#11260
        } //#11260
        $_.fcs = $_.fcs & 2047; //#11262
        $_.dat = $_.dat << 1; //#11263
    } //#11263
    for (var _2f = 1; _2f <= 12; _2f += 1) { //#11276
        $_.dat = $get($_.bytes, _2f) << 3; //#11266
        for (var _2i = 0, _2j = 8; _2i < _2j; _2i++) { //#11275
            if ((($_.fcs ^ $_.dat) & 1024) != 0) { //#11271
                $_.fcs = ($_.fcs << 1) ^ 3893; //#11269
            } else { //#11271
                $_.fcs = $_.fcs << 1; //#11271
            } //#11271
            $_.fcs = $_.fcs & 2047; //#11273
            $_.dat = $_.dat << 1; //#11274
        } //#11274
    } //#11274
    $_.codewords = $a(10); //#11279
    for (var _2r = 9; _2r >= 0; _2r -= 1) { //#11290
        $_.i = _2r; //#11281
        var _2t = ($_.i == 9) ? 636 : 1365; //#11282
        $_.b = _2t; //#11282
        for (var _2w = 0, _2v = $_.binval.length - 2; _2w <= _2v; _2w += 1) { //#11287
            $_.j = _2w; //#11284
            var _2x = $_.binval; //#11285
            var _2y = $_.j; //#11285
            $put(_2x, _2y + 1, $f($get(_2x, _2y + 1) + (($get($_.binval, $_.j) % $_.b) * 10))); //#11285
            $put($_.binval, $_.j, ~~($get($_.binval, $_.j) / $_.b)); //#11286
        } //#11286
        $put($_.codewords, $_.i, $get($_.binval, $_.binval.length - 1) % $_.b); //#11288
        var _3G = $_.binval; //#11289
        var _3H = $_.binval; //#11289
        $put(_3G, _3H.length - 1, ~~($get(_3G, _3H.length - 1) / $_.b)); //#11289
    } //#11289
    $put($_.codewords, 9, $get($_.codewords, 9) * 2); //#11293
    if (($_.fcs & 1024) != 0) { //#11296
        $put($_.codewords, 0, $f($get($_.codewords, 0) + 659)); //#11295
    } //#11295
    if (!bwipp_onecode.__11397__) { //#11397
        $_ = Object.create($_); //#11397
        $_.tab513 = $a([31, 7936, 47, 7808, 55, 7552, 59, 7040, 61, 6016, 62, 3968, 79, 7744, 87, 7488, 91, 6976, 93, 5952, 94, 3904, 103, 7360, 107, 6848, 109, 5824, 110, 3776, 115, 6592, 117, 5568, 118, 3520, 121, 5056, 122, 3008, 124, 1984, 143, 7712, 151, 7456, 155, 6944, 157, 5920, 158, 3872, 167, 7328, 171, 6816, 173, 5792, 174, 3744, 179, 6560, 181, 5536, 182, 3488, 185, 5024, 186, 2976, 188, 1952, 199, 7264, 203, 6752, 205, 5728, 206, 3680, 211, 6496, 213, 5472, 214, 3424, 217, 4960, 218, 2912, 220, 1888, 227, 6368, 229, 5344, 230, 3296, 233, 4832, 234, 2784, 236, 1760, 241, 4576, 242, 2528, 244, 1504, 248, 992, 271, 7696, 279, 7440, 283, 6928, 285, 5904, 286, 3856, 295, 7312, 299, 6800, 301, 5776, 302, 3728, 307, 6544, 309, 5520, 310, 3472, 313, 5008, 314, 2960, 316, 1936, 327, 7248, 331, 6736, 333, 5712, 334, 3664, 339, 6480, 341, 5456, 342, 3408, 345, 4944, 346, 2896, 348, 1872, 355, 6352, 357, 5328, 358, 3280, 361, 4816, 362, 2768, 364, 1744, 369, 4560, 370, 2512, 372, 1488, 376, 976, 391, 7216, 395, 6704, 397, 5680, 398, 3632, 403, 6448, 405, 5424, 406, 3376, 409, 4912, 410, 2864, 412, 1840, 419, 6320, 421, 5296, 422, 3248, 425, 4784, 426, 2736, 428, 1712, 433, 4528, 434, 2480, 436, 1456, 440, 944, 451, 6256, 453, 5232, 454, 3184, 457, 4720, 458, 2672, 460, 1648, 465, 4464, 466, 2416, 468, 1392, 472, 880, 481, 4336, 482, 2288, 484, 1264, 488, 752, 527, 7688, 535, 7432, 539, 6920, 541, 5896, 542, 3848, 551, 7304, 555, 6792, 557, 5768, 558, 3720, 563, 6536, 565, 5512, 566, 3464, 569, 5000, 570, 2952, 572, 1928, 583, 7240, 587, 6728, 589, 5704, 590, 3656, 595, 6472, 597, 5448, 598, 3400, 601, 4936, 602, 2888, 604, 1864, 611, 6344, 613, 5320, 614, 3272, 617, 4808, 618, 2760, 620, 1736, 625, 4552, 626, 2504, 628, 1480, 632, 968, 647, 7208, 651, 6696, 653, 5672, 654, 3624, 659, 6440, 661, 5416, 662, 3368, 665, 4904, 666, 2856, 668, 1832, 675, 6312, 677, 5288, 678, 3240, 681, 4776, 682, 2728, 684, 1704, 689, 4520, 690, 2472, 692, 1448, 696, 936, 707, 6248, 709, 5224, 710, 3176, 713, 4712, 714, 2664, 716, 1640, 721, 4456, 722, 2408, 724, 1384, 728, 872, 737, 4328, 738, 2280, 740, 1256, 775, 7192, 779, 6680, 781, 5656, 782, 3608, 787, 6424, 789, 5400, 790, 3352, 793, 4888, 794, 2840, 796, 1816, 803, 6296, 805, 5272, 806, 3224, 809, 4760, 810, 2712, 812, 1688, 817, 4504, 818, 2456, 820, 1432, 824, 920, 835, 6232, 837, 5208, 838, 3160, 841, 4696, 842, 2648, 844, 1624, 849, 4440, 850, 2392, 852, 1368, 865, 4312, 866, 2264, 868, 1240, 899, 6200, 901, 5176, 902, 3128, 905, 4664, 906, 2616, 908, 1592, 913, 4408, 914, 2360, 916, 1336, 929, 4280, 930, 2232, 932, 1208, 961, 4216, 962, 2168, 964, 1144, 1039, 7684, 1047, 7428, 1051, 6916, 1053, 5892, 1054, 3844, 1063, 7300, 1067, 6788, 1069, 5764, 1070, 3716, 1075, 6532, 1077, 5508, 1078, 3460, 1081, 4996, 1082, 2948, 1084, 1924, 1095, 7236, 1099, 6724, 1101, 5700, 1102, 3652, 1107, 6468, 1109, 5444, 1110, 3396, 1113, 4932, 1114, 2884, 1116, 1860, 1123, 6340, 1125, 5316, 1126, 3268, 1129, 4804, 1130, 2756, 1132, 1732, 1137, 4548, 1138, 2500, 1140, 1476, 1159, 7204, 1163, 6692, 1165, 5668, 1166, 3620, 1171, 6436, 1173, 5412, 1174, 3364, 1177, 4900, 1178, 2852, 1180, 1828, 1187, 6308, 1189, 5284, 1190, 3236, 1193, 4772, 1194, 2724, 1196, 1700, 1201, 4516, 1202, 2468, 1204, 1444, 1219, 6244, 1221, 5220, 1222, 3172, 1225, 4708, 1226, 2660, 1228, 1636, 1233, 4452, 1234, 2404, 1236, 1380, 1249, 4324, 1250, 2276, 1287, 7188, 1291, 6676, 1293, 5652, 1294, 3604, 1299, 6420, 1301, 5396, 1302, 3348, 1305, 4884, 1306, 2836, 1308, 1812, 1315, 6292, 1317, 5268, 1318, 3220, 1321, 4756, 1322, 2708, 1324, 1684, 1329, 4500, 1330, 2452, 1332, 1428, 1347, 6228, 1349, 5204, 1350, 3156, 1353, 4692, 1354, 2644, 1356, 1620, 1361, 4436, 1362, 2388, 1377, 4308, 1378, 2260, 1411, 6196, 1413, 5172, 1414, 3124, 1417, 4660, 1418, 2612, 1420, 1588, 1425, 4404, 1426, 2356, 1441, 4276, 1442, 2228, 1473, 4212, 1474, 2164, 1543, 7180, 1547, 6668, 1549, 5644, 1550, 3596, 1555, 6412, 1557, 5388, 1558, 3340, 1561, 4876, 1562, 2828, 1564, 1804, 1571, 6284, 1573, 5260, 1574, 3212, 1577, 4748, 1578, 2700, 1580, 1676, 1585, 4492, 1586, 2444, 1603, 6220, 1605, 5196, 1606, 3148, 1609, 4684, 1610, 2636, 1617, 4428, 1618, 2380, 1633, 4300, 1634, 2252, 1667, 6188, 1669, 5164, 1670, 3116, 1673, 4652, 1674, 2604, 1681, 4396, 1682, 2348, 1697, 4268, 1698, 2220, 1729, 4204, 1730, 2156, 1795, 6172, 1797, 5148, 1798, 3100, 1801, 4636, 1802, 2588, 1809, 4380, 1810, 2332, 1825, 4252, 1826, 2204, 1857, 4188, 1858, 2140, 1921, 4156, 1922, 2108, 2063, 7682, 2071, 7426, 2075, 6914, 2077, 5890, 2078, 3842, 2087, 7298, 2091, 6786, 2093, 5762, 2094, 3714, 2099, 6530, 2101, 5506, 2102, 3458, 2105, 4994, 2106, 2946, 2119, 7234, 2123, 6722, 2125, 5698, 2126, 3650, 2131, 6466, 2133, 5442, 2134, 3394, 2137, 4930, 2138, 2882, 2147, 6338, 2149, 5314, 2150, 3266, 2153, 4802, 2154, 2754, 2161, 4546, 2162, 2498, 2183, 7202, 2187, 6690, 2189, 5666, 2190, 3618, 2195, 6434, 2197, 5410, 2198, 3362, 2201, 4898, 2202, 2850, 2211, 6306, 2213, 5282, 2214, 3234, 2217, 4770, 2218, 2722, 2225, 4514, 2226, 2466, 2243, 6242, 2245, 5218, 2246, 3170, 2249, 4706, 2250, 2658, 2257, 4450, 2258, 2402, 2273, 4322, 2311, 7186, 2315, 6674, 2317, 5650, 2318, 3602, 2323, 6418, 2325, 5394, 2326, 3346, 2329, 4882, 2330, 2834, 2339, 6290, 2341, 5266, 2342, 3218, 2345, 4754, 2346, 2706, 2353, 4498, 2354, 2450, 2371, 6226, 2373, 5202, 2374, 3154, 2377, 4690, 2378, 2642, 2385, 4434, 2401, 4306, 2435, 6194, 2437, 5170, 2438, 3122, 2441, 4658, 2442, 2610, 2449, 4402, 2465, 4274, 2497, 4210, 2567, 7178, 2571, 6666, 2573, 5642, 2574, 3594, 2579, 6410, 2581, 5386, 2582, 3338, 2585, 4874, 2586, 2826, 2595, 6282, 2597, 5258, 2598, 3210, 2601, 4746, 2602, 2698, 2609, 4490, 2627, 6218, 2629, 5194, 2630, 3146, 2633, 4682, 2641, 4426, 2657, 4298, 2691, 6186, 2693, 5162, 2694, 3114, 2697, 4650, 2705, 4394, 2721, 4266, 2753, 4202, 2819, 6170, 2821, 5146, 2822, 3098, 2825, 4634, 2833, 4378, 2849, 4250, 2881, 4186, 2945, 4154, 3079, 7174, 3083, 6662, 3085, 5638, 3086, 3590, 3091, 6406, 3093, 5382, 3094, 3334, 3097, 4870, 3107, 6278, 3109, 5254, 3110, 3206, 3113, 4742, 3121, 4486, 3139, 6214, 3141, 5190, 3145, 4678, 3153, 4422, 3169, 4294, 3203, 6182, 3205, 5158, 3209, 4646, 3217, 4390, 3233, 4262, 3265, 4198, 3331, 6166, 3333, 5142, 3337, 4630, 3345, 4374, 3361, 4246, 3393, 4182, 3457, 4150, 3587, 6158, 3589, 5134, 3593, 4622, 3601, 4366, 3617, 4238, 3649, 4174, 3713, 4142, 3841, 4126, 4111, 7681, 4119, 7425, 4123, 6913, 4125, 5889, 4135, 7297, 4139, 6785, 4141, 5761, 4147, 6529, 4149, 5505, 4153, 4993, 4167, 7233, 4171, 6721, 4173, 5697, 4179, 6465, 4181, 5441, 4185, 4929, 4195, 6337, 4197, 5313, 4201, 4801, 4209, 4545, 4231, 7201, 4235, 6689, 4237, 5665, 4243, 6433, 4245, 5409, 4249, 4897, 4259, 6305, 4261, 5281, 4265, 4769, 4273, 4513, 4291, 6241, 4293, 5217, 4297, 4705, 4305, 4449, 4359, 7185, 4363, 6673, 4365, 5649, 4371, 6417, 4373, 5393, 4377, 4881, 4387, 6289, 4389, 5265, 4393, 4753, 4401, 4497, 4419, 6225, 4421, 5201, 4425, 4689, 4483, 6193, 4485, 5169, 4489, 4657, 4615, 7177, 4619, 6665, 4621, 5641, 4627, 6409, 4629, 5385, 4633, 4873, 4643, 6281, 4645, 5257, 4649, 4745, 4675, 6217, 4677, 5193, 4739, 6185, 4741, 5161, 4867, 6169, 4869, 5145, 5127, 7173, 5131, 6661, 5133, 5637, 5139, 6405, 5141, 5381, 5155, 6277, 5157, 5253, 5187, 6213, 5251, 6181, 5379, 6165, 5635, 6157, 6151, 7171, 6155, 6659, 6163, 6403, 6179, 6275, 6211, 5189, 4681, 4433, 4321, 3142, 2634, 2386, 2274, 1612, 1364, 1252, 856, 744, 496]); //#11387
        $_.tab213 = $a([3, 6144, 5, 5120, 6, 3072, 9, 4608, 10, 2560, 12, 1536, 17, 4352, 18, 2304, 20, 1280, 24, 768, 33, 4224, 34, 2176, 36, 1152, 40, 640, 48, 384, 65, 4160, 66, 2112, 68, 1088, 72, 576, 80, 320, 96, 192, 129, 4128, 130, 2080, 132, 1056, 136, 544, 144, 288, 257, 4112, 258, 2064, 260, 1040, 264, 528, 513, 4104, 514, 2056, 516, 1032, 1025, 4100, 1026, 2052, 2049, 4098, 4097, 2050, 1028, 520, 272, 160]); //#11396
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_onecode.$ctx[id] = $_[id]); //#11396
        bwipp_onecode.__11397__ = 1; //#11396
        $_ = Object.getPrototypeOf($_); //#11396
    } //#11396
    $_.chars = $a(10); //#11399
    for (var _3V = 0; _3V <= 9; _3V += 1) { //#11408
        $_.i = _3V; //#11401
        var _3Y = $get($_.codewords, $_.i); //#11402
        $k[$j++] = _3Y; //#11406
        if (_3Y <= 1286) { //#11405
            var _3b = $get($_.tab513, $k[--$j]); //#11403
            $k[$j++] = _3b; //#11403
        } else { //#11405
            var _3e = $get($_.tab213, $f($k[--$j] - 1287)); //#11405
            $k[$j++] = _3e; //#11405
        } //#11405
        $put($_.chars, $_.i, $k[--$j]); //#11407
    } //#11407
    for (var _3i = 9; _3i >= 0; _3i -= 1) { //#11415
        $_.i = _3i; //#11411
        if (((~~Math.pow(2, $_.i)) & $_.fcs) != 0) { //#11414
            $put($_.chars, $_.i, $get($_.chars, $_.i) ^ 8191); //#11413
        } //#11413
    } //#11413
    if (!bwipp_onecode.__11434__) { //#11434
        $_ = Object.create($_); //#11434
        $_.barmap = $a([7, 2, 4, 3, 1, 10, 0, 0, 9, 12, 2, 8, 5, 5, 6, 11, 8, 9, 3, 1, 0, 1, 5, 12, 2, 5, 1, 8, 4, 4, 9, 11, 6, 3, 8, 10, 3, 9, 7, 6, 5, 11, 1, 4, 8, 5, 2, 12, 9, 10, 0, 2, 7, 1, 6, 7, 3, 6, 4, 9, 0, 3, 8, 6, 6, 4, 2, 7, 1, 1, 9, 9, 7, 10, 5, 2, 4, 0, 3, 8, 6, 2, 0, 4, 8, 11, 1, 0, 9, 8, 3, 12, 2, 6, 7, 7, 5, 1, 4, 10, 1, 12, 6, 9, 7, 3, 8, 0, 5, 8, 9, 7, 4, 6, 2, 10, 3, 4, 0, 5, 8, 4, 5, 7, 7, 11, 1, 9, 6, 0, 9, 6, 0, 6, 4, 8, 2, 1, 3, 2, 5, 9, 8, 12, 4, 11, 6, 1, 9, 5, 7, 4, 3, 3, 1, 2, 0, 7, 2, 0, 1, 3, 4, 1, 6, 10, 3, 5, 8, 7, 9, 4, 2, 11, 5, 6, 0, 8, 7, 12, 4, 2, 8, 1, 5, 10, 3, 0, 9, 3, 0, 9, 6, 5, 2, 4, 7, 8, 1, 7, 5, 0, 4, 5, 2, 3, 0, 10, 6, 12, 9, 2, 3, 11, 1, 6, 8, 8, 7, 9, 5, 4, 0, 11, 1, 5, 2, 2, 9, 1, 4, 12, 8, 3, 6, 6, 7, 0, 3, 7, 4, 7, 7, 5, 0, 12, 1, 11, 2, 9, 9, 0, 6, 8, 5, 3, 3, 10, 8, 2]); //#11433
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_onecode.$ctx[id] = $_[id]); //#11433
        bwipp_onecode.__11434__ = 1; //#11433
        $_ = Object.getPrototypeOf($_); //#11433
    } //#11433
    $_.bbs = $a(65); //#11436
    $_.bhs = $a(65); //#11437
    for (var _3u = 0; _3u <= 64; _3u += 1) { //#11458
        $_.i = _3u; //#11439
        $_.dec = ($get($_.chars, $get($_.barmap, $_.i * 4)) & (~~Math.pow(2, $get($_.barmap, ($_.i * 4) + 1)))) != 0; //#11440
        $_.asc = ($get($_.chars, $get($_.barmap, ($_.i * 4) + 2)) & (~~Math.pow(2, $get($_.barmap, ($_.i * 4) + 3)))) != 0; //#11441
        if ((!$_.dec) && (!$_.asc)) { //#11445
            $put($_.bbs, $_.i, (3 * $_.height) / 8); //#11443
            $put($_.bhs, $_.i, (2 * $_.height) / 8); //#11444
        } //#11444
        if ((!$_.dec) && $_.asc) { //#11449
            $put($_.bbs, $_.i, (3 * $_.height) / 8); //#11447
            $put($_.bhs, $_.i, (5 * $_.height) / 8); //#11448
        } //#11448
        if ($_.dec && (!$_.asc)) { //#11453
            $put($_.bbs, $_.i, (0 * $_.height) / 8); //#11451
            $put($_.bhs, $_.i, (5 * $_.height) / 8); //#11452
        } //#11452
        if ($_.dec && $_.asc) { //#11457
            $put($_.bbs, $_.i, (0 * $_.height) / 8); //#11455
            $put($_.bhs, $_.i, (8 * $_.height) / 8); //#11456
        } //#11456
    } //#11456
    $k[$j++] = Infinity; //#11461
    var _4h = $_.bbs; //#11463
    var _4i = $_.bhs; //#11464
    $k[$j++] = Infinity; //#11465
    for (var _4k = 0, _4l = $_.bhs.length - 1; _4k < _4l; _4k++) { //#11465
        $k[$j++] = 1.44; //#11465
        $k[$j++] = 1.872; //#11465
    } //#11465
    $k[$j++] = 1.44; //#11465
    var _4m = $a(); //#11465
    $k[$j++] = 'ren'; //#11471
    $k[$j++] = bwipp_renlinear; //#11471
    $k[$j++] = 'bbs'; //#11471
    $k[$j++] = _4h; //#11471
    $k[$j++] = 'bhs'; //#11471
    $k[$j++] = _4i; //#11471
    $k[$j++] = 'sbs'; //#11471
    $k[$j++] = _4m; //#11471
    $k[$j++] = 'txt'; //#11471
    $k[$j++] = $_.txt; //#11471
    $k[$j++] = 'textxalign'; //#11471
    $k[$j++] = "left"; //#11471
    $k[$j++] = 'textfont'; //#11471
    $k[$j++] = "OCR-B"; //#11471
    $k[$j++] = 'textyoffset'; //#11471
    $k[$j++] = 1; //#11471
    $k[$j++] = 'textxoffset'; //#11471
    $k[$j++] = -0.3; //#11471
    $k[$j++] = 'opt'; //#11471
    $k[$j++] = $_.options; //#11471
    var _4p = $d(); //#11471
    $k[$j++] = _4p; //#11474
    if (!$_.dontdraw) { //#11474
        bwipp_renlinear(); //#11474
    } //#11474
    $_ = Object.getPrototypeOf($_); //#11476
    $_ = Object.getPrototypeOf($_); //#11478
} //bwipp_onecode
function bwipp_postnet() {
    $_ = Object.create($_); //#11508
    $_.dontdraw = false; //#11511
    $_.includetext = false; //#11512
    $_.validatecheck = false; //#11513
    $_.includecheckintext = false; //#11514
    $_.textfont = "OCR-B"; //#11515
    $_.textsize = 10; //#11516
    $_.textyoffset = -8; //#11517
    $_.height = 0.125; //#11518
    $k[$j++] = $_; //#11520
    bwipp_processoptions(); //#11520
    $_.options = $k[--$j]; //#11520
    $_.barcode = $k[--$j]; //#11521
    bwipp_loadctx(bwipp_postnet) //#11523
    $k[$j++] = 'barlen'; //#11525
    $k[$j++] = $_.barcode.length; //#11525
    if ($_.validatecheck) { //#11525
        var _4 = $k[--$j]; //#11525
        $k[$j++] = $f(_4 - 1); //#11525
    } //#11525
    var _5 = $k[--$j]; //#11525
    $_[$k[--$j]] = _5; //#11525
    if ((($_.barlen != 5) && ($_.barlen != 9)) && ($_.barlen != 11)) { //#11530
        $k[$j++] = 'bwipp.postnetBadLength#11529'; //#11529
        $k[$j++] = "USPS POSTNET must be 5, 9 or 11 digits excluding check digit"; //#11529
        bwipp_raiseerror(); //#11529
    } //#11529
    $forall($_.barcode, function() { //#11535
        var _B = $k[--$j]; //#11532
        if ((_B < 48) || (_B > 57)) { //#11534
            $k[$j++] = 'bwipp.postnetBadCharacter#11533'; //#11533
            $k[$j++] = "USPS POSTNET must contain only digits"; //#11533
            bwipp_raiseerror(); //#11533
        } //#11533
    }); //#11533
    if (!bwipp_postnet.__11547__) { //#11547
        $_ = Object.create($_); //#11547
        $_.barchars = "0123456789"; //#11539
        $_.encs = $a(["55222", "22255", "22525", "22552", "25225", "25252", "25522", "52225", "52252", "52522", "5", "5"]); //#11546
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_postnet.$ctx[id] = $_[id]); //#11546
        bwipp_postnet.__11547__ = 1; //#11546
        $_ = Object.getPrototypeOf($_); //#11546
    } //#11546
    $_.checksum = 0; //#11549
    for (var _G = 0, _F = $f($_.barlen - 1); _G <= _F; _G += 1) { //#11553
        $_.i = _G; //#11551
        $_.checksum = $f($_.checksum + $f($get($_.barcode, $_.i) - 48)); //#11552
    } //#11552
    $_.checksum = ($f(10 - ($_.checksum % 10))) % 10; //#11554
    if ($_.validatecheck) { //#11560
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#11558
            $k[$j++] = 'bwipp.postnetBadCheckDigit#11557'; //#11557
            $k[$j++] = "Incorrect USPS POSTNET check digit provided"; //#11557
            bwipp_raiseerror(); //#11557
        } //#11557
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#11559
    } //#11559
    $_.bhs = $a($f(($_.barlen * 5) + 7)); //#11562
    $_.txt = $a($f($_.barlen + 1)); //#11563
    $_.enc = $get($_.encs, 10); //#11566
    $_.heights = $a($_.enc.length); //#11567
    for (var _g = 0, _f = $_.enc.length - 1; _g <= _f; _g += 1) { //#11571
        $_.j = _g; //#11569
        $put($_.heights, $_.j, ($cvi($geti($_.enc, $_.j, 1)) * $_.height) / 5); //#11570
    } //#11570
    $puti($_.bhs, 0, $_.heights); //#11572
    for (var _r = 0, _q = $f($_.barlen - 1); _r <= _q; _r += 1) { //#11584
        $_.i = _r; //#11575
        $_.enc = $get($_.encs, $f($get($_.barcode, $_.i) - 48)); //#11576
        $_.heights = $a($_.enc.length); //#11577
        for (var _11 = 0, _10 = $_.enc.length - 1; _11 <= _10; _11 += 1) { //#11581
            $_.j = _11; //#11579
            $put($_.heights, $_.j, ($cvi($geti($_.enc, $_.j, 1)) * $_.height) / 5); //#11580
        } //#11580
        $puti($_.bhs, ($_.i * 5) + 1, $_.heights); //#11582
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), (($_.i * 5) + 1) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#11583
    } //#11583
    $_.enc = $get($_.encs, $_.checksum); //#11587
    $_.heights = $a($_.enc.length); //#11588
    for (var _1S = 0, _1R = $_.enc.length - 1; _1S <= _1R; _1S += 1) { //#11592
        $_.j = _1S; //#11590
        $put($_.heights, $_.j, ($cvi($geti($_.enc, $_.j, 1)) * $_.height) / 5); //#11591
    } //#11591
    $puti($_.bhs, $f(($_.barlen * 5) + 1), $_.heights); //#11593
    if ($_.includecheckintext) { //#11598
        $put($_.txt, $_.barlen, $a([$geti($_.barchars, $_.checksum, 1), ($f(($_.barlen * 5) + 1)) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#11596
    } else { //#11598
        $put($_.txt, $_.barlen, $a([" ", (($f(($_.barlen * 5) + 1)) * 72) / 25, $_.textyoffset, $_.textfont, $_.textsize])); //#11598
    } //#11598
    $_.enc = $get($_.encs, 11); //#11602
    $_.heights = $a($_.enc.length); //#11603
    for (var _20 = 0, _1z = $_.enc.length - 1; _20 <= _1z; _20 += 1) { //#11607
        $_.j = _20; //#11605
        $put($_.heights, $_.j, ($cvi($geti($_.enc, $_.j, 1)) * $_.height) / 5); //#11606
    } //#11606
    $puti($_.bhs, $f(($_.barlen * 5) + 6), $_.heights); //#11608
    $k[$j++] = Infinity; //#11611
    var _2A = $_.bhs; //#11613
    $k[$j++] = Infinity; //#11614
    for (var _2C = 0, _2D = $_.bhs.length; _2C < _2D; _2C++) { //#11614
        $k[$j++] = 0; //#11614
    } //#11614
    var _2E = $a(); //#11614
    $k[$j++] = Infinity; //#11615
    for (var _2G = 0, _2H = $_.bhs.length - 1; _2G < _2H; _2G++) { //#11615
        $k[$j++] = 1.44; //#11615
        $k[$j++] = 1.872; //#11615
    } //#11615
    $k[$j++] = 1.44; //#11615
    var _2I = $a(); //#11615
    $k[$j++] = 'ren'; //#11618
    $k[$j++] = bwipp_renlinear; //#11618
    $k[$j++] = 'bhs'; //#11618
    $k[$j++] = _2A; //#11618
    $k[$j++] = 'bbs'; //#11618
    $k[$j++] = _2E; //#11618
    $k[$j++] = 'sbs'; //#11618
    $k[$j++] = _2I; //#11618
    if ($_.includetext) { //#11618
        $k[$j++] = 'txt'; //#11617
        $k[$j++] = $_.txt; //#11617
    } //#11617
    $k[$j++] = 'opt'; //#11619
    $k[$j++] = $_.options; //#11619
    var _2M = $d(); //#11619
    $k[$j++] = _2M; //#11622
    if (!$_.dontdraw) { //#11622
        bwipp_renlinear(); //#11622
    } //#11622
    $_ = Object.getPrototypeOf($_); //#11624
    $_ = Object.getPrototypeOf($_); //#11626
} //bwipp_postnet
function bwipp_planet() {
    $_ = Object.create($_); //#11656
    $_.dontdraw = false; //#11659
    $_.includetext = false; //#11660
    $_.validatecheck = false; //#11661
    $_.includecheckintext = false; //#11662
    $_.textfont = "OCR-B"; //#11663
    $_.textsize = 10; //#11664
    $_.textyoffset = -8; //#11665
    $_.height = 0.125; //#11666
    $k[$j++] = $_; //#11668
    bwipp_processoptions(); //#11668
    $_.options = $k[--$j]; //#11668
    $_.barcode = $k[--$j]; //#11669
    bwipp_loadctx(bwipp_planet) //#11671
    $k[$j++] = 'barlen'; //#11673
    $k[$j++] = $_.barcode.length; //#11673
    if ($_.validatecheck) { //#11673
        var _4 = $k[--$j]; //#11673
        $k[$j++] = $f(_4 - 1); //#11673
    } //#11673
    var _5 = $k[--$j]; //#11673
    $_[$k[--$j]] = _5; //#11673
    if (($_.barlen != 11) && ($_.barlen != 13)) { //#11678
        $k[$j++] = 'bwipp.planetBadLength#11677'; //#11677
        $k[$j++] = "USPS PLANET must be 11 or 13 digits excluding check digit"; //#11677
        bwipp_raiseerror(); //#11677
    } //#11677
    $forall($_.barcode, function() { //#11683
        var _A = $k[--$j]; //#11680
        if ((_A < 48) || (_A > 57)) { //#11682
            $k[$j++] = 'bwipp.planetBadCharacter#11681'; //#11681
            $k[$j++] = "USPS PLANET must contain only digits"; //#11681
            bwipp_raiseerror(); //#11681
        } //#11681
    }); //#11681
    if (!bwipp_planet.__11695__) { //#11695
        $_ = Object.create($_); //#11695
        $_.barchars = "0123456789"; //#11687
        $_.encs = $a(["22555", "55522", "55252", "55225", "52552", "52525", "52255", "25552", "25525", "25255", "5", "5"]); //#11694
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_planet.$ctx[id] = $_[id]); //#11694
        bwipp_planet.__11695__ = 1; //#11694
        $_ = Object.getPrototypeOf($_); //#11694
    } //#11694
    $_.checksum = 0; //#11698
    for (var _F = 0, _E = $f($_.barlen - 1); _F <= _E; _F += 1) { //#11702
        $_.i = _F; //#11700
        $_.checksum = $f($_.checksum + $f($get($_.barcode, $_.i) - 48)); //#11701
    } //#11701
    $_.checksum = ($f(10 - ($_.checksum % 10))) % 10; //#11703
    if ($_.validatecheck) { //#11709
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#11707
            $k[$j++] = 'bwipp.planetBadCheckDigit#11706'; //#11706
            $k[$j++] = "Incorrect USPS PLANET check digit provided"; //#11706
            bwipp_raiseerror(); //#11706
        } //#11706
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#11708
    } //#11708
    $_.bhs = $a($f(($_.barlen * 5) + 7)); //#11711
    $_.txt = $a($f($_.barlen + 1)); //#11712
    $_.enc = $get($_.encs, 10); //#11715
    $_.heights = $a($_.enc.length); //#11716
    for (var _f = 0, _e = $_.enc.length - 1; _f <= _e; _f += 1) { //#11720
        $_.j = _f; //#11718
        $put($_.heights, $_.j, ($cvi($geti($_.enc, $_.j, 1)) * $_.height) / 5); //#11719
    } //#11719
    $puti($_.bhs, 0, $_.heights); //#11721
    for (var _q = 0, _p = $f($_.barlen - 1); _q <= _p; _q += 1) { //#11733
        $_.i = _q; //#11724
        $_.enc = $get($_.encs, $f($get($_.barcode, $_.i) - 48)); //#11725
        $_.heights = $a($_.enc.length); //#11726
        for (var _10 = 0, _z = $_.enc.length - 1; _10 <= _z; _10 += 1) { //#11730
            $_.j = _10; //#11728
            $put($_.heights, $_.j, ($cvi($geti($_.enc, $_.j, 1)) * $_.height) / 5); //#11729
        } //#11729
        $puti($_.bhs, ($_.i * 5) + 1, $_.heights); //#11731
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), (($_.i * 5) + 1) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#11732
    } //#11732
    $_.enc = $get($_.encs, $_.checksum); //#11736
    $_.heights = $a($_.enc.length); //#11737
    for (var _1R = 0, _1Q = $_.enc.length - 1; _1R <= _1Q; _1R += 1) { //#11741
        $_.j = _1R; //#11739
        $put($_.heights, $_.j, ($cvi($geti($_.enc, $_.j, 1)) * $_.height) / 5); //#11740
    } //#11740
    $puti($_.bhs, $f(($_.barlen * 5) + 1), $_.heights); //#11742
    if ($_.includecheckintext) { //#11747
        $put($_.txt, $_.barlen, $a([$geti($_.barchars, $_.checksum, 1), ($f(($_.barlen * 5) + 1)) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#11745
    } else { //#11747
        $put($_.txt, $_.barlen, $a([" ", (($f(($_.barlen * 5) + 1)) * 72) / 25, $_.textyoffset, $_.textfont, $_.textsize])); //#11747
    } //#11747
    $_.enc = $get($_.encs, 11); //#11751
    $_.heights = $a($_.enc.length); //#11752
    for (var _1z = 0, _1y = $_.enc.length - 1; _1z <= _1y; _1z += 1) { //#11756
        $_.j = _1z; //#11754
        $put($_.heights, $_.j, ($cvi($geti($_.enc, $_.j, 1)) * $_.height) / 5); //#11755
    } //#11755
    $puti($_.bhs, $f(($_.barlen * 5) + 6), $_.heights); //#11757
    $k[$j++] = Infinity; //#11760
    var _29 = $_.bhs; //#11762
    $k[$j++] = Infinity; //#11763
    for (var _2B = 0, _2C = $_.bhs.length; _2B < _2C; _2B++) { //#11763
        $k[$j++] = 0; //#11763
    } //#11763
    var _2D = $a(); //#11763
    $k[$j++] = Infinity; //#11764
    for (var _2F = 0, _2G = $_.bhs.length - 1; _2F < _2G; _2F++) { //#11764
        $k[$j++] = 1.44; //#11764
        $k[$j++] = 1.872; //#11764
    } //#11764
    $k[$j++] = 1.44; //#11764
    var _2H = $a(); //#11764
    $k[$j++] = 'ren'; //#11767
    $k[$j++] = bwipp_renlinear; //#11767
    $k[$j++] = 'bhs'; //#11767
    $k[$j++] = _29; //#11767
    $k[$j++] = 'bbs'; //#11767
    $k[$j++] = _2D; //#11767
    $k[$j++] = 'sbs'; //#11767
    $k[$j++] = _2H; //#11767
    if ($_.includetext) { //#11767
        $k[$j++] = 'txt'; //#11766
        $k[$j++] = $_.txt; //#11766
    } //#11766
    $k[$j++] = 'opt'; //#11768
    $k[$j++] = $_.options; //#11768
    var _2L = $d(); //#11768
    $k[$j++] = _2L; //#11771
    if (!$_.dontdraw) { //#11771
        bwipp_renlinear(); //#11771
    } //#11771
    $_ = Object.getPrototypeOf($_); //#11773
    $_ = Object.getPrototypeOf($_); //#11775
} //bwipp_planet
function bwipp_royalmail() {
    $_ = Object.create($_); //#11805
    $_.dontdraw = false; //#11808
    $_.includetext = false; //#11809
    $_.validatecheck = false; //#11810
    $_.includecheckintext = false; //#11811
    $_.textfont = "OCR-B"; //#11812
    $_.textsize = 10; //#11813
    $_.textyoffset = -8; //#11814
    $_.height = 0.175; //#11815
    $k[$j++] = $_; //#11817
    bwipp_processoptions(); //#11817
    $_.options = $k[--$j]; //#11817
    $_.barcode = $k[--$j]; //#11818
    if ($eq($_.barcode, "")) { //#11822
        $k[$j++] = 'bwipp.royalmailEmptyData#11821'; //#11821
        $k[$j++] = "The data must not be empty"; //#11821
        bwipp_raiseerror(); //#11821
    } //#11821
    bwipp_loadctx(bwipp_royalmail) //#11824
    if (!bwipp_royalmail.__11842__) { //#11842
        $_ = Object.create($_); //#11842
        $_.barchars = "ZUVWXY501234B6789AHCDEFGNIJKLMTOPQRS"; //#11828
        $_.charvals = new Map; //#11829
        for (var _3 = 0; _3 <= 35; _3 += 1) { //#11830
            $put($_.charvals, $geti($_.barchars, _3, 1), _3); //#11830
        } //#11830
        $_.encs = $a(["3300", "2211", "2301", "2310", "3201", "3210", "1122", "0033", "0123", "0132", "1023", "1032", "1302", "0213", "0303", "0312", "1203", "1212", "1320", "0231", "0321", "0330", "1221", "1230", "3102", "2013", "2103", "2112", "3003", "3012", "3120", "2031", "2121", "2130", "3021", "3030", "2", "3"]); //#11841
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_royalmail.$ctx[id] = $_[id]); //#11841
        bwipp_royalmail.__11842__ = 1; //#11841
        $_ = Object.getPrototypeOf($_); //#11841
    } //#11841
    for (var _B = 0, _A = $_.barcode.length - 1; _B <= _A; _B += 1) { //#11849
        var _F = $get($_.charvals, $geti($_.barcode, _B, 1)) !== undefined; //#11846
        if (!_F) { //#11848
            $k[$j++] = 'bwipp.royalmailBadCharacter#11847'; //#11847
            $k[$j++] = "RM4SCC must contain only capital letters and digits"; //#11847
            bwipp_raiseerror(); //#11847
        } //#11847
    } //#11847
    $k[$j++] = 'barlen'; //#11851
    $k[$j++] = $_.barcode.length; //#11851
    if ($_.validatecheck) { //#11851
        var _I = $k[--$j]; //#11851
        $k[$j++] = $f(_I - 1); //#11851
    } //#11851
    var _J = $k[--$j]; //#11851
    $_[$k[--$j]] = _J; //#11851
    $_.checksumrow = 0; //#11853
    $_.checksumcol = 0; //#11854
    for (var _N = 0, _M = $f($_.barlen - 1); _N <= _M; _N += 1) { //#11860
        $_.i = _N; //#11856
        $_.indx = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#11857
        $_.checksumrow = $_.checksumrow + (~~($_.indx / 6)); //#11858
        $_.checksumcol = $f($_.checksumcol + ($_.indx % 6)); //#11859
    } //#11859
    $_.checksum = $f((($_.checksumrow % 6) * 6) + ($_.checksumcol % 6)); //#11861
    if ($_.validatecheck) { //#11867
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#11865
            $k[$j++] = 'bwipp.royalmailBadCheckDigit#11864'; //#11864
            $k[$j++] = "Incorrect RM4SCC check digit provided"; //#11864
            bwipp_raiseerror(); //#11864
        } //#11864
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#11866
    } //#11866
    $_.encstr = $s($f(($_.barlen * 4) + 6)); //#11869
    $_.txt = $a($f($_.barlen + 1)); //#11870
    $puti($_.encstr, 0, $get($_.encs, 36)); //#11873
    for (var _s = 0, _r = $f($_.barlen - 1); _s <= _r; _s += 1) { //#11880
        $_.i = _s; //#11876
        $_.indx = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#11877
        $puti($_.encstr, ($_.i * 4) + 1, $get($_.encs, $_.indx)); //#11878
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), (($_.i * 4) + 1) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#11879
    } //#11879
    $puti($_.encstr, $f(($_.barlen * 4) + 1), $get($_.encs, $_.checksum)); //#11883
    if ($_.includecheckintext) { //#11887
        $put($_.txt, $_.barlen, $a([$geti($_.barchars, $_.checksum, 1), ($f(($_.barlen * 4) + 1)) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#11885
    } else { //#11887
        $put($_.txt, $_.barlen, $a([" ", ($f(($_.barlen * 4) + 1)) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#11887
    } //#11887
    $puti($_.encstr, $f(($_.barlen * 4) + 5), $get($_.encs, 37)); //#11891
    $_.bbs = $a($_.encstr.length); //#11893
    $_.bhs = $a($_.encstr.length); //#11894
    for (var _1k = 0, _1j = $_.encstr.length - 1; _1k <= _1j; _1k += 1) { //#11914
        $_.i = _1k; //#11896
        $_.enc = $geti($_.encstr, $_.i, 1); //#11897
        if ($eq($_.enc, "0")) { //#11901
            $put($_.bbs, $_.i, (3 * $_.height) / 8); //#11899
            $put($_.bhs, $_.i, (2 * $_.height) / 8); //#11900
        } //#11900
        if ($eq($_.enc, "1")) { //#11905
            $put($_.bbs, $_.i, (0 * $_.height) / 8); //#11903
            $put($_.bhs, $_.i, (5 * $_.height) / 8); //#11904
        } //#11904
        if ($eq($_.enc, "2")) { //#11909
            $put($_.bbs, $_.i, (3 * $_.height) / 8); //#11907
            $put($_.bhs, $_.i, (5 * $_.height) / 8); //#11908
        } //#11908
        if ($eq($_.enc, "3")) { //#11913
            $put($_.bbs, $_.i, (0 * $_.height) / 8); //#11911
            $put($_.bhs, $_.i, (8 * $_.height) / 8); //#11912
        } //#11912
    } //#11912
    $k[$j++] = Infinity; //#11917
    var _2G = $_.bbs; //#11919
    var _2H = $_.bhs; //#11920
    $k[$j++] = Infinity; //#11921
    for (var _2J = 0, _2K = $_.bhs.length - 1; _2J < _2K; _2J++) { //#11921
        $k[$j++] = 1.44; //#11921
        $k[$j++] = 1.872; //#11921
    } //#11921
    $k[$j++] = 1.44; //#11921
    var _2L = $a(); //#11921
    $k[$j++] = 'ren'; //#11924
    $k[$j++] = bwipp_renlinear; //#11924
    $k[$j++] = 'bbs'; //#11924
    $k[$j++] = _2G; //#11924
    $k[$j++] = 'bhs'; //#11924
    $k[$j++] = _2H; //#11924
    $k[$j++] = 'sbs'; //#11924
    $k[$j++] = _2L; //#11924
    if ($_.includetext) { //#11924
        $k[$j++] = 'txt'; //#11923
        $k[$j++] = $_.txt; //#11923
    } //#11923
    $k[$j++] = 'opt'; //#11925
    $k[$j++] = $_.options; //#11925
    var _2P = $d(); //#11925
    $k[$j++] = _2P; //#11928
    if (!$_.dontdraw) { //#11928
        bwipp_renlinear(); //#11928
    } //#11928
    $_ = Object.getPrototypeOf($_); //#11930
    $_ = Object.getPrototypeOf($_); //#11932
} //bwipp_royalmail
function bwipp_auspost() {
    $_ = Object.create($_); //#11962
    $_.dontdraw = false; //#11965
    $_.includetext = false; //#11966
    $_.textfont = "OCR-B"; //#11967
    $_.textsize = 10; //#11968
    $_.textyoffset = -8; //#11969
    $_.height = 0.175; //#11970
    $_.custinfoenc = "character"; //#11971
    $k[$j++] = $_; //#11973
    bwipp_processoptions(); //#11973
    $_.options = $k[--$j]; //#11973
    $_.barcode = $k[--$j]; //#11974
    if ($ne($_.custinfoenc, "character") && $ne($_.custinfoenc, "numeric")) { //#11978
        $k[$j++] = 'bwipp.auspostBadCustinfoEncoding#11977'; //#11977
        $k[$j++] = "Customer information encoding must be either character or numeric"; //#11977
        bwipp_raiseerror(); //#11977
    } //#11977
    bwipp_loadctx(bwipp_auspost) //#11980
    if (!bwipp_auspost.__12003__) { //#12003
        $_ = Object.create($_); //#12003
        $_.encs = $a(["000", "001", "002", "010", "011", "012", "020", "021", "022", "100", "101", "102", "110", "111", "112", "120", "121", "122", "200", "201", "202", "210", "211", "212", "220", "221", "222", "300", "301", "302", "310", "311", "312", "320", "321", "322", "023", "030", "031", "032", "033", "103", "113", "123", "130", "131", "132", "133", "203", "213", "223", "230", "231", "232", "233", "303", "313", "323", "330", "331", "332", "333", "003", "013", "00", "01", "02", "10", "11", "12", "20", "21", "22", "30", "13", "3"]); //#11995
        $_.barchars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz #"; //#11998
        var _5 = new Map([
            ["11", 37],
            ["45", 37],
            ["59", 52],
            ["62", 67]
        ]); //#12001
        $_.fcclen = _5; //#12001
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_auspost.$ctx[id] = $_[id]); //#12001
        bwipp_auspost.__12003__ = 1; //#12001
        $_ = Object.getPrototypeOf($_); //#12001
    } //#12001
    $_.barlen = $_.barcode.length; //#12005
    if ($_.barlen < 10) { //#12008
        $k[$j++] = 'bwipp.auspostTooShort#12007'; //#12007
        $k[$j++] = "The data length must be at least 10"; //#12007
        bwipp_raiseerror(); //#12007
    } //#12007
    $_.txt = $a($_.barlen - 2); //#12010
    $k[$j++] = $_.fcclen; //#12012
    if ($_.barlen >= 2) { //#12012
        $k[$j++] = $geti($_.barcode, 0, 2); //#12012
    } else { //#12012
        $k[$j++] = ""; //#12012
    } //#12012
    var _F = $k[--$j]; //#12013
    var _G = $k[--$j]; //#12013
    var _H = $get(_G, _F) !== undefined; //#12013
    $k[$j++] = _G; //#12015
    $k[$j++] = _F; //#12015
    if (!_H) { //#12015
        $j -= 2; //#12014
        $k[$j++] = 'bwipp.auspostBadFCC#12014'; //#12014
        $k[$j++] = "Must begin with an FCC, either 11, 45, 59 or 62"; //#12014
        bwipp_raiseerror(); //#12014
    } //#12014
    var _I = $k[--$j]; //#12016
    $_.encstr = $s($get($k[--$j], _I)); //#12016
    $k[$j++] = true; //#12023
    for (var _M = 0, _N = 1; _M < _N; _M++) { //#12023
        if ($_.barlen < 10) { //#12021
            $j--; //#12021
            $k[$j++] = false; //#12021
            break; //#12021
        } //#12021
        var _Q = $geti($_.barcode, 2, 8); //#12022
        for (var _R = 0, _S = _Q.length; _R < _S; _R++) { //#12022
            var _T = $get(_Q, _R); //#12022
            if ((_T < 48) || (_T > 57)) { //#12022
                $j--; //#12022
                $k[$j++] = false; //#12022
                break; //#12022
            } //#12022
        } //#12022
    } //#12022
    if ($nt($k[--$j])) { //#12026
        $k[$j++] = 'bwipp.auspostIncompleteDPID#12025'; //#12025
        $k[$j++] = "The DPID must be 8 digits"; //#12025
        bwipp_raiseerror(); //#12025
    } //#12025
    var _X = $eq($_.custinfoenc, "numeric") ? 2 : 3; //#12029
    if ((($_.barlen - 10) * _X) > (($_.encstr.length - 22) - 14)) { //#12032
        $k[$j++] = 'bwipp.auspostTooLong#12031'; //#12031
        $k[$j++] = "The message is too long"; //#12031
        bwipp_raiseerror(); //#12031
    } //#12031
    $puti($_.encstr, 0, $get($_.encs, 74)); //#12035
    for (var _c = 0; _c <= 1; _c += 1) { //#12042
        $_.i = _c; //#12039
        $puti($_.encstr, ($_.i * 2) + 2, $get($_.encs, $cvi($geti($_.barcode, $_.i, 1)) + 64)); //#12041
    } //#12041
    for (var _k = 2; _k <= 9; _k += 1) { //#12050
        $_.i = _k; //#12046
        $puti($_.encstr, ($_.i * 2) + 2, $get($_.encs, $cvi($geti($_.barcode, $_.i, 1)) + 64)); //#12048
        $put($_.txt, $_.i - 2, $a([$geti($_.barcode, $_.i, 1), ((($_.i - 2) * 2) + 6) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#12049
    } //#12049
    if ($eq($_.custinfoenc, "numeric")) { //#12078
        for (var _15 = 0, _14 = $_.barlen - 11; _15 <= _14; _15 += 1) { //#12063
            $_.i = _15; //#12055
            var _19 = $get($_.barcode, $_.i + 10); //#12056
            $k[$j++] = $_.encs; //#12059
            $k[$j++] = _19; //#12059
            if ((_19 < 48) || (_19 > 57)) { //#12059
                $k[$j++] = 'bwipp.auspostInvalidCustinfoDigit#12058'; //#12058
                $k[$j++] = "The customer information data contains a non-digit character"; //#12058
                bwipp_raiseerror(); //#12058
            } //#12058
            var _1A = $k[--$j]; //#12060
            $puti($_.encstr, ($_.i * 2) + 22, $get($k[--$j], $f($f(_1A - 48) + 64))); //#12061
            $put($_.txt, $_.i + 8, $a([$geti($_.barcode, $_.i + 10, 1), (($_.i * 2) + 22) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#12062
        } //#12062
        $_.ciflen = ($_.barlen - 10) * 2; //#12064
    } else { //#12078
        for (var _1S = 0, _1R = $_.barlen - 11; _1S <= _1R; _1S += 1) { //#12077
            $_.i = _1S; //#12067
            $search($_.barchars, $geti($_.barcode, $_.i + 10, 1)); //#12068
            if ($nt($k[--$j])) { //#12071
                $j--; //#12070
                $k[$j++] = 'bwipp.auspostInvalidCustinfoCharacter#12070'; //#12070
                $k[$j++] = "The customer information contains an invalid character"; //#12070
                bwipp_raiseerror(); //#12070
            } //#12070
            $_.indx = $k[--$j].length; //#12072
            $j -= 2; //#12073
            $_.enc = $get($_.encs, $_.indx); //#12074
            $puti($_.encstr, ($_.i * 3) + 22, $_.enc); //#12075
            $put($_.txt, $_.i + 8, $a([$geti($_.barcode, $_.i + 10, 1), (($_.i * 3) + 22) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#12076
        } //#12076
        $_.ciflen = ($_.barlen - 10) * 3; //#12078
    } //#12078
    for (var _1t = 22 + $_.ciflen, _1s = $_.encstr.length - 14; _1t <= _1s; _1t += 1) { //#12084
        $puti($_.encstr, _1t, $get($_.encs, 75)); //#12083
    } //#12083
    if (!bwipp_auspost.__12107__) { //#12107
        $_ = Object.create($_); //#12107
        $_.rstable = $a(64 * 64); //#12088
        $k[$j++] = $_.rstable; //#12089
        $k[$j++] = 0; //#12089
        $k[$j++] = Infinity; //#12089
        for (var _1z = 0, _20 = 64; _1z < _20; _1z++) { //#12089
            $k[$j++] = 0; //#12089
        } //#12089
        var _21 = $a(); //#12089
        var _22 = $k[--$j]; //#12089
        $puti($k[--$j], _22, _21); //#12089
        $k[$j++] = $_.rstable; //#12090
        $k[$j++] = 64; //#12090
        $k[$j++] = Infinity; //#12090
        for (var _25 = 0; _25 <= 63; _25 += 1) { //#12090
            $k[$j++] = _25; //#12090
        } //#12090
        var _26 = $a(); //#12090
        var _27 = $k[--$j]; //#12090
        $puti($k[--$j], _27, _26); //#12090
        $_.prev = 1; //#12091
        for (var _29 = 0, _2A = 64; _29 < _2A; _29++) { //#12106
            $_.next = $_.prev << 1; //#12093
            if (($_.next & 64) != 0) { //#12096
                $_.next = $_.next ^ 67; //#12095
            } //#12095
            for (var _2E = 0; _2E <= 63; _2E += 1) { //#12104
                $_.j = _2E; //#12098
                $_.nextcell = function() {
                    $k[$j++] = $_.rstable; //#12099
                    $k[$j++] = (64 * $_.next) + $_.j; //#12099
                }; //#12099
                $_.nextcell(); //#12100
                var _2M = $k[--$j]; //#12100
                $put($k[--$j], _2M, $get($_.rstable, (64 * $_.prev) + $_.j) << 1); //#12100
                $_.nextcell(); //#12101
                var _2O = $k[--$j]; //#12101
                if (($get($k[--$j], _2O) & 64) != 0) { //#12103
                    $_.nextcell(); //#12102
                    $_.nextcell(); //#12102
                    var _2R = $k[--$j]; //#12102
                    var _2T = $get($k[--$j], _2R); //#12102
                    var _2U = $k[--$j]; //#12102
                    $put($k[--$j], _2U, _2T ^ 67); //#12102
                } //#12102
            } //#12102
            $_.prev = $_.next; //#12105
        } //#12105
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_auspost.$ctx[id] = $_[id]); //#12105
        bwipp_auspost.__12107__ = 1; //#12105
        $_ = Object.getPrototypeOf($_); //#12105
    } //#12105
    $_.rscodes = $a((~~(($_.encstr.length - 16) / 3)) + 4); //#12110
    $k[$j++] = $_.rscodes; //#12111
    $k[$j++] = 0; //#12111
    $k[$j++] = Infinity; //#12111
    for (var _2b = 0, _2c = 4; _2b < _2c; _2b++) { //#12111
        $k[$j++] = 0; //#12111
    } //#12111
    var _2d = $a(); //#12111
    var _2e = $k[--$j]; //#12111
    $puti($k[--$j], _2e, _2d); //#12111
    for (var _2i = 2, _2h = $_.encstr.length - 16; _2i <= _2h; _2i += 3) { //#12119
        $_.i = _2i; //#12113
        $put($_.rscodes, ($_.rscodes.length - (~~(($_.i - 2) / 3))) - 1, (($cvi($geti($_.encstr, $_.i, 1)) * 16) + ($cvi($geti($_.encstr, $_.i + 1, 1)) * 4)) + $cvi($geti($_.encstr, $_.i + 2, 1))); //#12118
    } //#12118
    for (var _2w = $_.rscodes.length - 5; _2w >= 0; _2w -= 1) { //#12128
        $_.i = _2w; //#12121
        for (var _2x = 0; _2x <= 4; _2x += 1) { //#12127
            $_.j = _2x; //#12123
            $put($_.rscodes, $_.i + $_.j, $xo($get($_.rscodes, $_.i + $_.j), $get($_.rstable, $f((64 * $get($a([48, 17, 29, 30, 1]), $_.j)) + $get($_.rscodes, $_.i + 4))))); //#12126
        } //#12126
    } //#12126
    $_.checkcode = $strcpy($s(12), "000000000000"); //#12129
    for (var _3F = 0; _3F <= 3; _3F += 1) { //#12134
        $_.i = _3F; //#12131
        $_.enc = $cvrs($s(3), $get($_.rscodes, 3 - $_.i), 4); //#12132
        $puti($_.checkcode, ($_.i * 3) + (3 - $_.enc.length), $_.enc); //#12133
    } //#12133
    $puti($_.encstr, $_.encstr.length - 14, $_.checkcode); //#12137
    $puti($_.encstr, $_.encstr.length - 2, $get($_.encs, 74)); //#12138
    $_.bbs = $a($_.encstr.length); //#12140
    $_.bhs = $a($_.encstr.length); //#12141
    for (var _3c = 0, _3b = $_.encstr.length - 1; _3c <= _3b; _3c += 1) { //#12161
        $_.i = _3c; //#12143
        $_.enc = $geti($_.encstr, $_.i, 1); //#12144
        if ($eq($_.enc, "0")) { //#12148
            $put($_.bbs, $_.i, (0 * $_.height) / 8); //#12146
            $put($_.bhs, $_.i, (8 * $_.height) / 8); //#12147
        } //#12147
        if ($eq($_.enc, "1")) { //#12152
            $put($_.bbs, $_.i, (3 * $_.height) / 8); //#12150
            $put($_.bhs, $_.i, (5 * $_.height) / 8); //#12151
        } //#12151
        if ($eq($_.enc, "2")) { //#12156
            $put($_.bbs, $_.i, (0 * $_.height) / 8); //#12154
            $put($_.bhs, $_.i, (5 * $_.height) / 8); //#12155
        } //#12155
        if ($eq($_.enc, "3")) { //#12160
            $put($_.bbs, $_.i, (3 * $_.height) / 8); //#12158
            $put($_.bhs, $_.i, (2 * $_.height) / 8); //#12159
        } //#12159
    } //#12159
    $k[$j++] = Infinity; //#12164
    var _48 = $_.bbs; //#12166
    var _49 = $_.bhs; //#12167
    $k[$j++] = Infinity; //#12168
    for (var _4B = 0, _4C = $_.bhs.length - 1; _4B < _4C; _4B++) { //#12168
        $k[$j++] = 1.44; //#12168
        $k[$j++] = 1.872; //#12168
    } //#12168
    $k[$j++] = 1.44; //#12168
    var _4D = $a(); //#12168
    $k[$j++] = 'ren'; //#12171
    $k[$j++] = bwipp_renlinear; //#12171
    $k[$j++] = 'bbs'; //#12171
    $k[$j++] = _48; //#12171
    $k[$j++] = 'bhs'; //#12171
    $k[$j++] = _49; //#12171
    $k[$j++] = 'sbs'; //#12171
    $k[$j++] = _4D; //#12171
    if ($_.includetext) { //#12171
        $k[$j++] = 'txt'; //#12170
        $k[$j++] = $_.txt; //#12170
    } //#12170
    $k[$j++] = 'opt'; //#12172
    $k[$j++] = $_.options; //#12172
    var _4H = $d(); //#12172
    $k[$j++] = _4H; //#12175
    if (!$_.dontdraw) { //#12175
        bwipp_renlinear(); //#12175
    } //#12175
    $_ = Object.getPrototypeOf($_); //#12177
    $_ = Object.getPrototypeOf($_); //#12179
} //bwipp_auspost
function bwipp_kix() {
    $_ = Object.create($_); //#12209
    $_.dontdraw = false; //#12212
    $_.includetext = false; //#12213
    $_.textfont = "OCR-B"; //#12214
    $_.textsize = 10; //#12215
    $_.textyoffset = -8; //#12216
    $_.height = 0.175; //#12217
    $k[$j++] = $_; //#12219
    bwipp_processoptions(); //#12219
    $_.options = $k[--$j]; //#12219
    $_.barcode = $k[--$j]; //#12220
    if ($eq($_.barcode, "")) { //#12224
        $k[$j++] = 'bwipp.kixEmptyData#12223'; //#12223
        $k[$j++] = "The data must not be empty"; //#12223
        bwipp_raiseerror(); //#12223
    } //#12223
    bwipp_loadctx(bwipp_kix) //#12226
    if (!bwipp_kix.__12243__) { //#12243
        $_ = Object.create($_); //#12243
        $_.encs = $a(["0033", "0123", "0132", "1023", "1032", "1122", "0213", "0303", "0312", "1203", "1212", "1302", "0231", "0321", "0330", "1221", "1230", "1320", "2013", "2103", "2112", "3003", "3012", "3102", "2031", "2121", "2130", "3021", "3030", "3120", "2211", "2301", "2310", "3201", "3210", "3300"]); //#12237
        $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"; //#12240
        $_.charvals = new Map; //#12241
        for (var _4 = 0; _4 <= 35; _4 += 1) { //#12242
            $put($_.charvals, $geti($_.barchars, _4, 1), _4); //#12242
        } //#12242
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_kix.$ctx[id] = $_[id]); //#12242
        bwipp_kix.__12243__ = 1; //#12242
        $_ = Object.getPrototypeOf($_); //#12242
    } //#12242
    for (var _B = 0, _A = $_.barcode.length - 1; _B <= _A; _B += 1) { //#12250
        var _F = $get($_.charvals, $geti($_.barcode, _B, 1)) !== undefined; //#12247
        if (!_F) { //#12249
            $k[$j++] = 'bwipp.kixBadCharacter#12248'; //#12248
            $k[$j++] = "KIX must contain only capital letters and digits"; //#12248
            bwipp_raiseerror(); //#12248
        } //#12248
    } //#12248
    $_.barlen = $_.barcode.length; //#12252
    $_.encstr = $s($_.barlen * 4); //#12253
    $_.txt = $a($_.barlen); //#12254
    for (var _N = 0, _M = $_.barlen - 1; _N <= _M; _N += 1) { //#12261
        $_.i = _N; //#12257
        $_.indx = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#12258
        $puti($_.encstr, $_.i * 4, $get($_.encs, $_.indx)); //#12259
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ($_.i * 4) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#12260
    } //#12260
    $_.bbs = $a($_.encstr.length); //#12263
    $_.bhs = $a($_.encstr.length); //#12264
    for (var _o = 0, _n = $_.encstr.length - 1; _o <= _n; _o += 1) { //#12284
        $_.i = _o; //#12266
        $_.enc = $geti($_.encstr, $_.i, 1); //#12267
        if ($eq($_.enc, "0")) { //#12271
            $put($_.bbs, $_.i, (3 * $_.height) / 8); //#12269
            $put($_.bhs, $_.i, (2 * $_.height) / 8); //#12270
        } //#12270
        if ($eq($_.enc, "1")) { //#12275
            $put($_.bbs, $_.i, (0 * $_.height) / 8); //#12273
            $put($_.bhs, $_.i, (5 * $_.height) / 8); //#12274
        } //#12274
        if ($eq($_.enc, "2")) { //#12279
            $put($_.bbs, $_.i, (3 * $_.height) / 8); //#12277
            $put($_.bhs, $_.i, (5 * $_.height) / 8); //#12278
        } //#12278
        if ($eq($_.enc, "3")) { //#12283
            $put($_.bbs, $_.i, (0 * $_.height) / 8); //#12281
            $put($_.bhs, $_.i, (8 * $_.height) / 8); //#12282
        } //#12282
    } //#12282
    $k[$j++] = Infinity; //#12287
    var _1K = $_.bbs; //#12289
    var _1L = $_.bhs; //#12290
    $k[$j++] = Infinity; //#12291
    for (var _1N = 0, _1O = $_.bhs.length - 1; _1N < _1O; _1N++) { //#12291
        $k[$j++] = 1.44; //#12291
        $k[$j++] = 1.872; //#12291
    } //#12291
    $k[$j++] = 1.44; //#12291
    var _1P = $a(); //#12291
    $k[$j++] = 'ren'; //#12294
    $k[$j++] = bwipp_renlinear; //#12294
    $k[$j++] = 'bbs'; //#12294
    $k[$j++] = _1K; //#12294
    $k[$j++] = 'bhs'; //#12294
    $k[$j++] = _1L; //#12294
    $k[$j++] = 'sbs'; //#12294
    $k[$j++] = _1P; //#12294
    if ($_.includetext) { //#12294
        $k[$j++] = 'txt'; //#12293
        $k[$j++] = $_.txt; //#12293
    } //#12293
    $k[$j++] = 'opt'; //#12295
    $k[$j++] = $_.options; //#12295
    var _1T = $d(); //#12295
    $k[$j++] = _1T; //#12298
    if (!$_.dontdraw) { //#12298
        bwipp_renlinear(); //#12298
    } //#12298
    $_ = Object.getPrototypeOf($_); //#12300
    $_ = Object.getPrototypeOf($_); //#12302
} //bwipp_kix
function bwipp_japanpost() {
    $_ = Object.create($_); //#12332
    $_.dontdraw = false; //#12335
    $_.includetext = false; //#12336
    $_.includecheckintext = false; //#12337
    $_.textfont = "OCR-B"; //#12338
    $_.textsize = 10; //#12339
    $_.textyoffset = -8; //#12340
    $_.height = 0.175; //#12341
    $k[$j++] = $_; //#12343
    bwipp_processoptions(); //#12343
    $_.options = $k[--$j]; //#12343
    $_.barcode = $k[--$j]; //#12344
    if ($eq($_.barcode, "")) { //#12348
        $k[$j++] = 'bwipp.japanpostEmptyData#12347'; //#12347
        $k[$j++] = "The data must not be empty"; //#12347
        bwipp_raiseerror(); //#12347
    } //#12347
    bwipp_loadctx(bwipp_japanpost) //#12350
    $forall($_.barcode, function() { //#12359
        var _4 = $k[--$j]; //#12354
        if (!(((_4 >= 48) && (_4 <= 57)) || (((_4 >= 65) && (_4 <= 90)) || (_4 == 45)))) { //#12358
            $k[$j++] = 'bwipp.japanpostBadCharacter#12357'; //#12357
            $k[$j++] = "Japan Post must contain only digits, capital letters and the dash symbol"; //#12357
            bwipp_raiseerror(); //#12357
        } //#12357
    }); //#12357
    if (!bwipp_japanpost.__12371__) { //#12371
        $_ = Object.create($_); //#12371
        $_.encs = $a(["300", "330", "312", "132", "321", "303", "123", "231", "213", "033", "030", "120", "102", "210", "012", "201", "021", "003", "333", "31", "13"]); //#12367
        $_.barchars = "0123456789-ABCDEFGHIJKLMNOPQRSTUVWXYZ"; //#12370
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_japanpost.$ctx[id] = $_[id]); //#12370
        bwipp_japanpost.__12371__ = 1; //#12370
        $_ = Object.getPrototypeOf($_); //#12370
    } //#12370
    $_.barlen = $_.barcode.length; //#12373
    $_.encstr = $s(((20 + 1) * 3) + 4); //#12375
    $_.digits = $a(20); //#12376
    $_.txt = $a($_.barlen + 1); //#12377
    $puti($_.encstr, 0, $get($_.encs, 19)); //#12380
    $_.checksum = 0; //#12382
    $_.j = 0; //#12383
    $_.i = 0; //#12383
    $k[$j++] = true; //#12418
    for (var _H = 0, _G = $_.barlen - 1; _H <= _G; _H += 1) { //#12418
        $_.i = _H; //#12386
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#12387
        $j--; //#12388
        $_.indx = $k[--$j].length; //#12389
        $j -= 2; //#12390
        if (($_.indx >= 11) && ($_.indx < 37)) { //#12401
            if ($_.j > 18) { //#12392
                $j--; //#12392
                $k[$j++] = false; //#12392
                break; //#12392
            } //#12392
            $_.digit = (~~(($_.indx - 1) / 10)) + 10; //#12396
            $puti($_.encstr, ($_.j * 3) + 2, $get($_.encs, $_.digit)); //#12397
            $_.checksum = $_.checksum + $_.digit; //#12398
            $put($_.digits, $_.j, $_.digit); //#12399
            $_.j = $_.j + 1; //#12400
        } //#12400
        if ($_.j > 19) { //#12402
            $j--; //#12402
            $k[$j++] = false; //#12402
            break; //#12402
        } //#12402
        $_.digit = 0; //#12403
        if ($_.indx == 37) { //#12406
            $_.digit = 14; //#12405
        } //#12405
        if (($_.indx >= 11) && ($_.indx < 37)) { //#12409
            $_.digit = ($_.indx - 1) % 10; //#12408
        } //#12408
        if ($_.indx < 11) { //#12412
            $_.digit = $_.indx; //#12411
        } //#12411
        $puti($_.encstr, ($_.j * 3) + 2, $get($_.encs, $_.digit)); //#12413
        $_.checksum = $_.checksum + $_.digit; //#12414
        $put($_.digits, $_.j, $_.digit); //#12415
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), (($_.j * 3) + 2) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#12416
        $_.j = $_.j + 1; //#12417
    } //#12417
    if ($nt($k[--$j])) { //#12422
        $k[$j++] = 'bwipp.japanpostTooLong#12421'; //#12421
        $k[$j++] = "The input is too long"; //#12421
        bwipp_raiseerror(); //#12421
    } //#12421
    for (var _17 = $_.j, _16 = 20 - 1; _17 <= _16; _17 += 1) { //#12430
        $_.k = _17; //#12426
        $puti($_.encstr, ($_.k * 3) + 2, $get($_.encs, 14)); //#12427
        $_.checksum = $_.checksum + 14; //#12428
        $put($_.digits, $_.k, 14); //#12429
    } //#12429
    $_.checksum = 19 - ($_.checksum % 19); //#12433
    $puti($_.encstr, 2 + (20 * 3), $get($_.encs, $_.checksum)); //#12434
    $puti($_.encstr, 2 + (21 * 3), $get($_.encs, 20)); //#12437
    $_.checkdigit = " "; //#12438
    if ($_.includecheckintext) { //#12441
        $_.checkdigit = $geti($_.barchars, $_.checksum, 1); //#12440
    } //#12440
    $put($_.txt, $_.i + 1, $a([$_.checkdigit, ((20 * 3) + 2) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#12442
    $puti($_.encstr, ((20 + 1) * 3) + 2, $get($_.encs, 20)); //#12445
    $_.bbs = $a((21 * 3) + 4); //#12447
    $_.bhs = $a($_.bbs.length); //#12448
    for (var _1g = 0, _1f = $_.bbs.length - 1; _1g <= _1f; _1g += 1) { //#12472
        $_.i = _1g; //#12450
        $_.enc = $geti($_.encstr, $_.i, 1); //#12451
        $_.bunit = 0; //#12452
        $_.hunit = 0; //#12453
        if ($eq($_.enc, "0")) { //#12457
            $_.bunit = 3; //#12455
            $_.hunit = 2; //#12456
        } //#12456
        if ($eq($_.enc, "1")) { //#12461
            $_.bunit = 0; //#12459
            $_.hunit = 5; //#12460
        } //#12460
        if ($eq($_.enc, "2")) { //#12465
            $_.bunit = 3; //#12463
            $_.hunit = 5; //#12464
        } //#12464
        if ($eq($_.enc, "3")) { //#12469
            $_.bunit = 0; //#12467
            $_.hunit = 8; //#12468
        } //#12468
        $put($_.bbs, $_.i, ($_.bunit * $_.height) / 8); //#12470
        $put($_.bhs, $_.i, ($_.hunit * $_.height) / 8); //#12471
    } //#12471
    $k[$j++] = Infinity; //#12475
    var _1w = $_.bbs; //#12477
    var _1x = $_.bhs; //#12478
    $k[$j++] = Infinity; //#12479
    for (var _1z = 0, _20 = $_.bhs.length - 1; _1z < _20; _1z++) { //#12479
        $k[$j++] = 1.44; //#12479
        $k[$j++] = 1.872; //#12479
    } //#12479
    $k[$j++] = 1.44; //#12479
    var _21 = $a(); //#12479
    $k[$j++] = 'ren'; //#12482
    $k[$j++] = bwipp_renlinear; //#12482
    $k[$j++] = 'bbs'; //#12482
    $k[$j++] = _1w; //#12482
    $k[$j++] = 'bhs'; //#12482
    $k[$j++] = _1x; //#12482
    $k[$j++] = 'sbs'; //#12482
    $k[$j++] = _21; //#12482
    if ($_.includetext) { //#12482
        $k[$j++] = 'txt'; //#12481
        $k[$j++] = $_.txt; //#12481
    } //#12481
    $k[$j++] = 'opt'; //#12483
    $k[$j++] = $_.options; //#12483
    var _25 = $d(); //#12483
    $k[$j++] = _25; //#12486
    if (!$_.dontdraw) { //#12486
        bwipp_renlinear(); //#12486
    } //#12486
    $_ = Object.getPrototypeOf($_); //#12488
    $_ = Object.getPrototypeOf($_); //#12490
} //bwipp_japanpost
function bwipp_msi() {
    $_ = Object.create($_); //#12520
    $_.dontdraw = false; //#12523
    $_.includecheck = false; //#12524
    $_.includetext = false; //#12525
    $_.includecheckintext = false; //#12526
    $_.checktype = "unset"; //#12527
    $_.badmod11 = false; //#12528
    $_.textfont = "OCR-B"; //#12529
    $_.textsize = 10; //#12530
    $_.textyoffset = -8; //#12531
    $_.height = 1; //#12532
    $k[$j++] = $_; //#12534
    bwipp_processoptions(); //#12534
    $_.options = $k[--$j]; //#12534
    $_.barcode = $k[--$j]; //#12535
    if ($ne($_.checktype, "unset") && (!$_.includecheck)) { //#12539
        $k[$j++] = 'bwipp.msiCheckTypeWithoutCheck#12538'; //#12538
        $k[$j++] = "checktype requires includecheck"; //#12538
        bwipp_raiseerror(); //#12538
    } //#12538
    if ($_.badmod11 && ((($ne($_.checktype, "mod11") && $ne($_.checktype, "ncrmod11")) && $ne($_.checktype, "mod1110")) && $ne($_.checktype, "ncrmod1110"))) { //#12543
        $k[$j++] = 'bwipp.msiBadMod11Mismatch#12542'; //#12542
        $k[$j++] = "badmod11 requires checktype with mod11"; //#12542
        bwipp_raiseerror(); //#12542
    } //#12542
    if ($eq($_.checktype, "unset")) { //#12545
        $_.checktype = "mod10"; //#12545
    } //#12545
    bwipp_loadctx(bwipp_msi) //#12547
    $forall($_.barcode, function() { //#12554
        var _B = $k[--$j]; //#12551
        if ((_B < 48) || (_B > 57)) { //#12553
            $k[$j++] = 'bwipp.msiBadCharacter#12552'; //#12552
            $k[$j++] = "MSI must contain only digits"; //#12552
            bwipp_raiseerror(); //#12552
        } //#12552
    }); //#12552
    if (!bwipp_msi.__12566__) { //#12566
        $_ = Object.create($_); //#12566
        $_.encs = $a(["12121212", "12121221", "12122112", "12122121", "12211212", "12211221", "12212112", "12212121", "21121212", "21121221", "21", "121"]); //#12562
        $_.barchars = "0123456789"; //#12565
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_msi.$ctx[id] = $_[id]); //#12565
        bwipp_msi.__12566__ = 1; //#12565
        $_ = Object.getPrototypeOf($_); //#12565
    } //#12565
    $_.barlen = $_.barcode.length; //#12568
    $_.txtlen = $_.barlen; //#12569
    $_.mod10 = function() {
        $_.code = $k[--$j]; //#12572
        $k[$j++] = 0; //#12573
        $k[$j++] = 0; //#12573
        $forall($_.code, function() { //#12573
            var _I = $k[--$j]; //#12573
            var _J = $k[--$j]; //#12573
            var _K = $k[--$j]; //#12573
            $k[$j++] = $f($f(_I - 48) + (_J * 10)); //#12573
            $k[$j++] = _K; //#12573
        }); //#12573
        $j--; //#12573
        var _L = $k[--$j]; //#12573
        $k[$j++] = _L * 2; //#12574
        $k[$j++] = 0; //#12574
        for (;;) { //#12574
            var _M = $k[--$j]; //#12574
            var _N = $k[--$j]; //#12574
            var _O = ~~(_N / 10); //#12574
            $k[$j++] = $f(_M + (_N % 10)); //#12574
            $k[$j++] = _O; //#12574
            if (_O == 0) { //#12574
                $j--; //#12574
                break; //#12574
            } //#12574
            var _P = $k[--$j]; //#12574
            var _Q = $k[--$j]; //#12574
            $k[$j++] = _P; //#12574
            $k[$j++] = _Q; //#12574
        } //#12574
        $k[$j++] = 0; //#12575
        $k[$j++] = 0; //#12575
        $forall($_.code, function() { //#12575
            var _S = $k[--$j]; //#12575
            var _T = $k[--$j]; //#12575
            var _U = $k[--$j]; //#12575
            $k[$j++] = $f(_T + $f(_S - 48)); //#12575
            $k[$j++] = _U; //#12575
        }); //#12575
        var _V = $k[--$j]; //#12575
        var _W = $k[--$j]; //#12575
        $k[$j++] = _V; //#12575
        $k[$j++] = _W; //#12575
        $j--; //#12575
        var _X = $k[--$j]; //#12575
        var _a = $s($_.code.length + 1); //#12577
        $puti(_a, 0, $_.code); //#12577
        $put(_a, $_.code.length, $f((($f(10 - ($f($k[--$j] + _X) % 10))) % 10) + 48)); //#12577
        $k[$j++] = _a; //#12577
    }; //#12577
    $_.mod11 = function() {
        $_.code = $k[--$j]; //#12581
        $k[$j++] = $_.code.length - 1; //#12582
        $forall($_.code, function() { //#12582
            var _g = $k[--$j]; //#12582
            var _h = $k[--$j]; //#12582
            $k[$j++] = $f(_g - 48); //#12582
            $k[$j++] = $f((_h % 6) + 2); //#12582
            $k[$j++] = $f(_h - 1); //#12582
        }); //#12582
        $j--; //#12582
        $k[$j++] = 0; //#12583
        for (var _j = 0, _k = $_.code.length; _j < _k; _j++) { //#12583
            var _l = $k[--$j]; //#12583
            var _m = $k[--$j]; //#12583
            var _n = $k[--$j]; //#12583
            $k[$j++] = $f(_l + (_n * _m)); //#12583
        } //#12583
        var _p = ($f(11 - ($k[--$j] % 11))) % 11; //#12585
        $k[$j++] = _p; //#12593
        if (_p == 10) { //#12592
            if ($_.badmod11) { //#12589
                $j--; //#12587
                var _s = $s($_.code.length + 2); //#12587
                $puti(_s, 0, $_.code); //#12587
                $puti(_s, $_.code.length, "10"); //#12587
                $k[$j++] = _s; //#12587
            } else { //#12589
                $j--; //#12589
                $k[$j++] = 'bwipp.msiBadMod11NotSpecified#12589'; //#12589
                $k[$j++] = "mod11 check digit is 10 but badmod11 not specified"; //#12589
                bwipp_raiseerror(); //#12589
            } //#12589
        } else { //#12592
            var _w = $s($_.code.length + 1); //#12592
            $puti(_w, 0, $_.code); //#12592
            $put(_w, $_.code.length, $f($k[--$j] + 48)); //#12592
            $k[$j++] = _w; //#12592
        } //#12592
    }; //#12592
    $_.ncrmod11 = function() {
        $_.code = $k[--$j]; //#12597
        $k[$j++] = $_.code.length - 1; //#12598
        $forall($_.code, function() { //#12598
            var _13 = $k[--$j]; //#12598
            var _14 = $k[--$j]; //#12598
            $k[$j++] = $f(_13 - 48); //#12598
            $k[$j++] = $f((_14 % 8) + 2); //#12598
            $k[$j++] = $f(_14 - 1); //#12598
        }); //#12598
        $j--; //#12598
        $k[$j++] = 0; //#12599
        for (var _16 = 0, _17 = $_.code.length; _16 < _17; _16++) { //#12599
            var _18 = $k[--$j]; //#12599
            var _19 = $k[--$j]; //#12599
            var _1A = $k[--$j]; //#12599
            $k[$j++] = $f(_18 + (_1A * _19)); //#12599
        } //#12599
        var _1C = ($f(11 - ($k[--$j] % 11))) % 11; //#12601
        $k[$j++] = _1C; //#12609
        if (_1C == 10) { //#12608
            if ($_.badmod11) { //#12605
                $j--; //#12603
                var _1F = $s($_.code.length + 2); //#12603
                $puti(_1F, 0, $_.code); //#12603
                $puti(_1F, $_.code.length, "10"); //#12603
                $k[$j++] = _1F; //#12603
            } else { //#12605
                $j--; //#12605
                $k[$j++] = 'bwipp.msiBadMod11NotSpecified#12605'; //#12605
                $k[$j++] = "mod11 check digit is 10 but badmod11 not specified"; //#12605
                bwipp_raiseerror(); //#12605
            } //#12605
        } else { //#12608
            var _1J = $s($_.code.length + 1); //#12608
            $puti(_1J, 0, $_.code); //#12608
            $put(_1J, $_.code.length, $f($k[--$j] + 48)); //#12608
            $k[$j++] = _1J; //#12608
        } //#12608
    }; //#12608
    if (!bwipp_msi.__12621__) { //#12621
        $_ = Object.create($_); //#12621
        var _1N = new Map([
            ["mod10", function() {
                $_.mod10(); //#12614
            }],
            ["mod1010", function() {
                $_.mod10(); //#12615
                $_.mod10(); //#12615
            }],
            ["mod11", function() {
                $_.mod11(); //#12616
            }],
            ["ncrmod11", function() {
                $_.ncrmod11(); //#12617
            }],
            ["mod1110", function() {
                $_.mod11(); //#12618
                $_.mod10(); //#12618
            }],
            ["ncrmod1110", function() {
                $_.ncrmod11(); //#12619
                $_.mod10(); //#12619
            }]
        ]); //#12619
        $_.checkfunc = _1N; //#12620
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_msi.$ctx[id] = $_[id]); //#12620
        bwipp_msi.__12621__ = 1; //#12620
        $_ = Object.getPrototypeOf($_); //#12620
    } //#12620
    if ($_.includecheck) { //#12631
        var _1Q = $_.checkfunc; //#12625
        var _1R = $_.checktype; //#12625
        var _1S = $get(_1Q, _1R) !== undefined; //#12625
        $k[$j++] = _1Q; //#12627
        $k[$j++] = _1R; //#12627
        if (!_1S) { //#12627
            $j -= 2; //#12626
            $k[$j++] = 'bwipp.msiBadCharacter#12626'; //#12626
            $k[$j++] = "MSI checktype must be mod10, mod1010, mod11, ncrmod11, mod1110 or ncrmod1110"; //#12626
            bwipp_raiseerror(); //#12626
        } //#12626
        var _1T = $k[--$j]; //#12628
        var _1V = $get($k[--$j], _1T); //#12628
        $k[$j++] = $_.barcode; //#12628
        if (_1V() === true) {
            return true;
        } //#12628
        $_.barcode = $k[--$j]; //#12628
        $_.barlen = $_.barcode.length; //#12629
        if ($_.includecheckintext) { //#12630
            $_.txtlen = $_.barlen; //#12630
        } //#12630
    } //#12630
    $_.sbs = $s(($_.barlen * 8) + 5); //#12633
    $_.txt = $a($_.barlen); //#12634
    $puti($_.sbs, 0, $get($_.encs, 10)); //#12637
    for (var _1k = 0, _1j = $_.barlen - 1; _1k <= _1j; _1k += 1) { //#12649
        $_.i = _1k; //#12640
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#12642
        $j--; //#12643
        $_.indx = $k[--$j].length; //#12644
        $j -= 2; //#12645
        $_.enc = $get($_.encs, $_.indx); //#12646
        $puti($_.sbs, ($_.i * 8) + 2, $_.enc); //#12647
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ($_.i * 12) + 3, $_.textyoffset, $_.textfont, $_.textsize])); //#12648
    } //#12648
    $puti($_.sbs, ($_.barlen * 8) + 2, $get($_.encs, 11)); //#12652
    $k[$j++] = Infinity; //#12655
    $k[$j++] = Infinity; //#12657
    var _2A = $_.sbs; //#12657
    for (var _2B = 0, _2C = _2A.length; _2B < _2C; _2B++) { //#12657
        $k[$j++] = $get(_2A, _2B) - 48; //#12657
    } //#12657
    var _2E = $a(); //#12657
    $k[$j++] = Infinity; //#12658
    for (var _2G = 0, _2H = ~~(($_.sbs.length + 1) / 2); _2G < _2H; _2G++) { //#12658
        $k[$j++] = $_.height; //#12658
    } //#12658
    var _2J = $a(); //#12658
    $k[$j++] = Infinity; //#12659
    for (var _2L = 0, _2M = ~~(($_.sbs.length + 1) / 2); _2L < _2M; _2L++) { //#12659
        $k[$j++] = 0; //#12659
    } //#12659
    var _2N = $a(); //#12659
    $k[$j++] = 'ren'; //#12662
    $k[$j++] = bwipp_renlinear; //#12662
    $k[$j++] = 'sbs'; //#12662
    $k[$j++] = _2E; //#12662
    $k[$j++] = 'bhs'; //#12662
    $k[$j++] = _2J; //#12662
    $k[$j++] = 'bbs'; //#12662
    $k[$j++] = _2N; //#12662
    if ($_.includetext) { //#12662
        $k[$j++] = 'txt'; //#12661
        $k[$j++] = $geti($_.txt, 0, $_.txtlen); //#12661
    } //#12661
    $k[$j++] = 'opt'; //#12663
    $k[$j++] = $_.options; //#12663
    var _2T = $d(); //#12663
    $k[$j++] = _2T; //#12666
    if (!$_.dontdraw) { //#12666
        bwipp_renlinear(); //#12666
    } //#12666
    $_ = Object.getPrototypeOf($_); //#12668
    $_ = Object.getPrototypeOf($_); //#12670
} //bwipp_msi
function bwipp_plessey() {
    $_ = Object.create($_); //#12700
    $_.dontdraw = false; //#12703
    $_.includetext = false; //#12704
    $_.validatecheck = false; //#12705
    $_.includecheckintext = false; //#12706
    $_.unidirectional = false; //#12707
    $_.textfont = "OCR-B"; //#12708
    $_.textsize = 10; //#12709
    $_.textyoffset = -8; //#12710
    $_.height = 1; //#12711
    $k[$j++] = $_; //#12713
    bwipp_processoptions(); //#12713
    $_.options = $k[--$j]; //#12713
    $_.barcode = $k[--$j]; //#12714
    if ($eq($_.barcode, "")) { //#12718
        $k[$j++] = 'bwipp.plesseyEmptyData#12717'; //#12717
        $k[$j++] = "The data must not be empty"; //#12717
        bwipp_raiseerror(); //#12717
    } //#12717
    bwipp_loadctx(bwipp_plessey) //#12720
    if (!bwipp_plessey.__12736__) { //#12736
        $_ = Object.create($_); //#12736
        $_.barchars = "0123456789ABCDEF"; //#12724
        $_.charvals = new Map; //#12725
        for (var _3 = 0; _3 <= 15; _3 += 1) { //#12726
            $put($_.charvals, $geti($_.barchars, _3, 1), _3); //#12726
        } //#12726
        $_.encs = $a(["14141414", "32141414", "14321414", "32321414", "14143214", "32143214", "14323214", "32323214", "14141432", "32141432", "14321432", "32321432", "14143232", "32143232", "14323232", "32323232", "32321432", "541412323", "323"]); //#12735
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_plessey.$ctx[id] = $_[id]); //#12735
        bwipp_plessey.__12736__ = 1; //#12735
        $_ = Object.getPrototypeOf($_); //#12735
    } //#12735
    for (var _B = 0, _A = $_.barcode.length - 1; _B <= _A; _B += 1) { //#12743
        var _F = $get($_.charvals, $geti($_.barcode, _B, 1)) !== undefined; //#12740
        if (!_F) { //#12742
            $k[$j++] = 'bwipp.plesseyBadCharacter#12741'; //#12741
            $k[$j++] = "Plessey must contain only digits and letters A B C D E F"; //#12741
            bwipp_raiseerror(); //#12741
        } //#12741
    } //#12741
    $k[$j++] = 'barlen'; //#12745
    $k[$j++] = $_.barcode.length; //#12745
    if ($_.validatecheck) { //#12745
        var _I = $k[--$j]; //#12745
        $k[$j++] = $f(_I - 2); //#12745
    } //#12745
    var _J = $k[--$j]; //#12745
    $_[$k[--$j]] = _J; //#12745
    $_.checkbits = $a($f(($_.barlen * 4) + 8)); //#12748
    $puti($_.checkbits, $_.barlen * 4, $a([0, 0, 0, 0, 0, 0, 0, 0])); //#12749
    for (var _S = 0, _R = $f($_.barlen - 1); _S <= _R; _S += 1) { //#12759
        $_.i = _S; //#12751
        $_.indx = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#12752
        $puti($_.checkbits, $_.i * 4, $a([$_.indx & 1, ($_.indx >>> 1) & 1, ($_.indx >>> 2) & 1, $_.indx >>> 3])); //#12758
    } //#12758
    $_.checksalt = $a([1, 1, 1, 1, 0, 1, 0, 0, 1]); //#12760
    for (var _i = 0, _h = $f(($_.barlen * 4) - 1); _i <= _h; _i += 1) { //#12769
        $_.i = _i; //#12762
        if ($get($_.checkbits, $_.i) == 1) { //#12768
            for (var _m = 0; _m <= 8; _m += 1) { //#12767
                $_.j = _m; //#12765
                $put($_.checkbits, $_.i + $_.j, $xo($get($_.checkbits, $_.i + $_.j), $get($_.checksalt, $_.j))); //#12766
            } //#12766
        } //#12766
    } //#12766
    $_.checkval = 0; //#12770
    for (var _x = 0; _x <= 7; _x += 1) { //#12774
        $_.i = _x; //#12772
        $_.checkval = $f($_.checkval + ((~~Math.pow(2, $_.i)) * $get($_.checkbits, $f(($_.barlen * 4) + $_.i)))); //#12773
    } //#12773
    $_.checksum1 = $_.checkval & 15; //#12775
    $_.checksum2 = $_.checkval >>> 4; //#12776
    if ($_.validatecheck) { //#12783
        if (($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum1)) || ($get($_.barcode, $f($_.barlen + 1)) != $get($_.barchars, $_.checksum2))) { //#12781
            $k[$j++] = 'bwipp.plesseyBadCheckDigits#12780'; //#12780
            $k[$j++] = "Incorrect Plessey check digits provided"; //#12780
            bwipp_raiseerror(); //#12780
        } //#12780
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#12782
    } //#12782
    var _1O = $_.unidirectional ? 27 : 33; //#12785
    $_.sbs = $s($f(($_.barlen * 8) + _1O)); //#12785
    $_.txt = $a($f($_.barlen + 2)); //#12786
    $puti($_.sbs, 0, $get($_.encs, 16)); //#12789
    for (var _1X = 0, _1W = $f($_.barlen - 1); _1X <= _1W; _1X += 1) { //#12796
        $_.i = _1X; //#12792
        $_.indx = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#12793
        $puti($_.sbs, ($_.i * 8) + 8, $get($_.encs, $_.indx)); //#12794
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ($_.i * 20) + 20, $_.textyoffset, $_.textfont, $_.textsize])); //#12795
    } //#12795
    $puti($_.sbs, $f(($_.barlen * 8) + 8), $get($_.encs, $_.checksum1)); //#12799
    $puti($_.sbs, $f(($_.barlen * 8) + 16), $get($_.encs, $_.checksum2)); //#12800
    if ($_.includecheckintext) { //#12806
        $put($_.txt, $_.barlen, $a([$geti($_.barchars, $_.checksum1, 1), $f(($_.barlen * 20) + 20), $_.textyoffset, $_.textfont, $_.textsize])); //#12802
        $put($_.txt, $f($_.barlen + 1), $a([$geti($_.barchars, $_.checksum2, 1), $f(($f($_.barlen + 1) * 20) + 20), $_.textyoffset, $_.textfont, $_.textsize])); //#12803
    } else { //#12806
        $put($_.txt, $_.barlen, $a([" ", $f(($_.barlen * 20) + 20), $_.textyoffset, $_.textfont, $_.textsize])); //#12805
        $put($_.txt, $f($_.barlen + 1), $a([" ", $f(($f($_.barlen + 1) * 20) + 20), $_.textyoffset, $_.textfont, $_.textsize])); //#12806
    } //#12806
    var _2f = $_.unidirectional ? 18 : 17; //#12810
    $puti($_.sbs, $f(($_.barlen * 8) + 24), $get($_.encs, _2f)); //#12810
    $k[$j++] = Infinity; //#12813
    $k[$j++] = Infinity; //#12815
    var _2h = $_.sbs; //#12815
    for (var _2i = 0, _2j = _2h.length; _2i < _2j; _2i++) { //#12815
        $k[$j++] = $get(_2h, _2i) - 48; //#12815
    } //#12815
    var _2l = $a(); //#12815
    $k[$j++] = Infinity; //#12816
    for (var _2n = 0, _2o = ~~(($_.sbs.length + 1) / 2); _2n < _2o; _2n++) { //#12816
        $k[$j++] = $_.height; //#12816
    } //#12816
    var _2q = $a(); //#12816
    $k[$j++] = Infinity; //#12817
    for (var _2s = 0, _2t = ~~(($_.sbs.length + 1) / 2); _2s < _2t; _2s++) { //#12817
        $k[$j++] = 0; //#12817
    } //#12817
    var _2u = $a(); //#12817
    $k[$j++] = 'ren'; //#12820
    $k[$j++] = bwipp_renlinear; //#12820
    $k[$j++] = 'sbs'; //#12820
    $k[$j++] = _2l; //#12820
    $k[$j++] = 'bhs'; //#12820
    $k[$j++] = _2q; //#12820
    $k[$j++] = 'bbs'; //#12820
    $k[$j++] = _2u; //#12820
    if ($_.includetext) { //#12820
        $k[$j++] = 'txt'; //#12819
        $k[$j++] = $_.txt; //#12819
    } //#12819
    $k[$j++] = 'opt'; //#12821
    $k[$j++] = $_.options; //#12821
    var _2y = $d(); //#12821
    $k[$j++] = _2y; //#12824
    if (!$_.dontdraw) { //#12824
        bwipp_renlinear(); //#12824
    } //#12824
    $_ = Object.getPrototypeOf($_); //#12826
    $_ = Object.getPrototypeOf($_); //#12828
} //bwipp_plessey
function bwipp_telepen() {
    $_ = Object.create($_); //#12859
    $_.numeric = false; //#12862
    $_.dontdraw = false; //#12863
    $_.includetext = false; //#12864
    $_.textfont = "OCR-B"; //#12865
    $_.textsize = 10; //#12866
    $_.textyoffset = -8; //#12867
    $_.height = 1; //#12868
    $_.parse = false; //#12869
    $k[$j++] = $_; //#12871
    bwipp_processoptions(); //#12871
    $_.options = $k[--$j]; //#12871
    $_.barcode = $k[--$j]; //#12872
    bwipp_loadctx(bwipp_telepen) //#12874
    var _3 = new Map([
        ["parse", $_.parse],
        ["parseonly", true],
        ["parsefnc", false]
    ]); //#12880
    $_.fncvals = _3; //#12881
    $k[$j++] = 'barcode'; //#12882
    $k[$j++] = $_.barcode; //#12882
    $k[$j++] = $_.fncvals; //#12882
    bwipp_parseinput(); //#12882
    var _6 = $k[--$j]; //#12882
    $_[$k[--$j]] = _6; //#12882
    $_.barlen = $_.barcode.length; //#12883
    delete $_.options["parse"]; //#12884
    if ($_.numeric && (($_.barlen % 2) != 0)) { //#12888
        $k[$j++] = 'bwipp.telepenNumericOddLength#12887'; //#12887
        $k[$j++] = "Telepen Numeric must have an even length"; //#12887
        bwipp_raiseerror(); //#12887
    } //#12887
    if (!bwipp_telepen.__12926__) { //#12926
        $_ = Object.create($_); //#12926
        $_.encs = $a(["31313131", "1131313111", "33313111", "1111313131", "3111313111", "11333131", "13133131", "111111313111", "31333111", "1131113131", "33113131", "1111333111", "3111113131", "1113133111", "1311133111", "111111113131", "3131113111", "11313331", "333331", "111131113111", "31113331", "1133113111", "1313113111", "1111113331", "31131331", "113111113111", "3311113111", "1111131331", "311111113111", "1113111331", "1311111331", "11111111113111", "31313311", "1131311131", "33311131", "1111313311", "3111311131", "11333311", "13133311", "111111311131", "31331131", "1131113311", "33113311", "1111331131", "3111113311", "1113131131", "1311131131", "111111113311", "3131111131", "1131131311", "33131311", "111131111131", "3111131311", "1133111131", "1313111131", "111111131311", "3113111311", "113111111131", "3311111131", "111113111311", "311111111131", "111311111311", "131111111311", "11111111111131", "3131311111", "11313133", "333133", "111131311111", "31113133", "1133311111", "1313311111", "1111113133", "313333", "113111311111", "3311311111", "11113333", "311111311111", "11131333", "13111333", "11111111311111", "31311133", "1131331111", "33331111", "1111311133", "3111331111", "11331133", "13131133", "111111331111", "3113131111", "1131111133", "33111133", "111113131111", "3111111133", "111311131111", "131111131111", "111111111133", "31311313", "113131111111", "3331111111", "1111311313", "311131111111", "11331313", "13131313", "11111131111111", "3133111111", "1131111313", "33111313", "111133111111", "3111111313", "111313111111", "131113111111", "111111111313", "313111111111", "1131131113", "33131113", "11113111111111", "3111131113", "113311111111", "131311111111", "111111131113", "3113111113", "11311111111111", "331111111111", "111113111113", "31111111111111", "111311111113", "131111111113", "1111111111111111"]); //#12925
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_telepen.$ctx[id] = $_[id]); //#12925
        bwipp_telepen.__12926__ = 1; //#12925
        $_ = Object.getPrototypeOf($_); //#12925
    } //#12925
    $_.sbs = $s(($_.barlen * 16) + 48); //#12928
    $_.txt = $a($_.barlen); //#12929
    $_.enc = $get($_.encs, 95); //#12932
    $puti($_.sbs, 0, $_.enc); //#12933
    $_.l = $_.enc.length; //#12934
    $_.checksum = 0; //#12936
    $_.i = 0; //#12937
    $_.j = 0; //#12937
    for (;;) { //#12980
        if ($_.i == $_.barlen) { //#12939
            break; //#12939
        } //#12939
        if ($_.numeric) { //#12973
            if ($get($_.barcode, $_.i) > 16) { //#12961
                $_.np = $geti($_.barcode, $_.i, 2); //#12942
                var _X = $get($_.np, 0); //#12943
                var _Z = $get($_.np, 1); //#12944
                if (((_X < 48) || (_X > 57)) || (((_Z < 48) || (_Z > 57)) && (!(_Z == 88)))) { //#12950
                    $k[$j++] = -1; //#12946
                } else { //#12950
                    var _e = $f($get($_.np, 1) - 48); //#12949
                    $k[$j++] = $f($get($_.np, 0) - 48); //#12949
                    $k[$j++] = _e; //#12949
                    if (_e != 40) { //#12949
                        var _f = $k[--$j]; //#12949
                        var _g = $k[--$j]; //#12949
                        $k[$j++] = $f(($f(_f + (_g * 10))) + 10); //#12949
                    } else { //#12949
                        $j--; //#12949
                    } //#12949
                    var _h = $k[--$j]; //#12950
                    $k[$j++] = $f(_h + 17); //#12950
                } //#12950
                var _i = $k[--$j]; //#12952
                $k[$j++] = _i; //#12954
                if (_i == -1) { //#12954
                    $k[$j++] = 'bwipp.telepenInvalidNumericCharacter#12953'; //#12953
                    $k[$j++] = "Telepen Numeric may contain only digits, or X in even positions"; //#12953
                    bwipp_raiseerror(); //#12953
                } //#12953
                $_.indx = $k[--$j]; //#12955
                $put($_.txt, $_.j, $a([$_.np, ($_.j * 16) + 16, $_.textyoffset, $_.textfont, $_.textsize])); //#12956
                $_.i = $_.i + 2; //#12957
            } else { //#12961
                $_.indx = $get($_.barcode, $_.i); //#12959
                $put($_.txt, $_.j, $a([" ", ($_.j * 16) + 16, $_.textyoffset, $_.textfont, $_.textsize])); //#12960
                $_.i = $_.i + 1; //#12961
            } //#12961
        } else { //#12973
            $_.indx = $get($_.barcode, $_.i); //#12964
            if ($_.indx > 127) { //#12967
                $k[$j++] = 'bwipp.telepenInvalidAlphaCharacter#12966'; //#12966
                $k[$j++] = "Telepen Alpha characters must have ordinal values 0 to 127"; //#12966
                bwipp_raiseerror(); //#12966
            } //#12966
            if (($_.indx >= 32) && ($_.indx <= 126)) { //#12971
                $put($_.txt, $_.j, $a([$geti($_.barcode, $_.i, 1), ($_.j * 16) + 16, $_.textyoffset, $_.textfont, $_.textsize])); //#12969
            } else { //#12971
                $put($_.txt, $_.j, $a([" ", ($_.j * 16) + 16, $_.textyoffset, $_.textfont, $_.textsize])); //#12971
            } //#12971
            $_.i = $_.i + 1; //#12973
        } //#12973
        $_.checksum = $f($_.checksum + $_.indx); //#12975
        $_.enc = $get($_.encs, $_.indx); //#12976
        $puti($_.sbs, $_.l, $_.enc); //#12977
        $_.l = $_.l + $_.enc.length; //#12978
        $_.j = $_.j + 1; //#12979
    } //#12979
    $_.checksum = ($f(127 - ($_.checksum % 127))) % 127; //#12983
    $_.enc = $get($_.encs, $_.checksum); //#12984
    $puti($_.sbs, $_.l, $_.enc); //#12985
    $_.l = $_.l + $_.enc.length; //#12986
    $_.enc = $get($_.encs, 122); //#12989
    $puti($_.sbs, $_.l, $_.enc); //#12990
    $_.l = $_.l + $_.enc.length; //#12991
    $_.sbs = $geti($_.sbs, 0, $_.l); //#12994
    $_.txt = $geti($_.txt, 0, $_.j); //#12995
    $k[$j++] = Infinity; //#12998
    $k[$j++] = Infinity; //#13000
    var _1z = $_.sbs; //#13000
    for (var _20 = 0, _21 = _1z.length; _20 < _21; _20++) { //#13000
        $k[$j++] = $f($get(_1z, _20) - 48); //#13000
    } //#13000
    var _23 = $a(); //#13000
    $k[$j++] = Infinity; //#13001
    for (var _25 = 0, _26 = ~~(($_.sbs.length + 1) / 2); _25 < _26; _25++) { //#13001
        $k[$j++] = $_.height; //#13001
    } //#13001
    var _28 = $a(); //#13001
    $k[$j++] = Infinity; //#13002
    for (var _2A = 0, _2B = ~~(($_.sbs.length + 1) / 2); _2A < _2B; _2A++) { //#13002
        $k[$j++] = 0; //#13002
    } //#13002
    var _2C = $a(); //#13002
    $k[$j++] = 'ren'; //#13005
    $k[$j++] = bwipp_renlinear; //#13005
    $k[$j++] = 'sbs'; //#13005
    $k[$j++] = _23; //#13005
    $k[$j++] = 'bhs'; //#13005
    $k[$j++] = _28; //#13005
    $k[$j++] = 'bbs'; //#13005
    $k[$j++] = _2C; //#13005
    if ($_.includetext) { //#13005
        $k[$j++] = 'txt'; //#13004
        $k[$j++] = $_.txt; //#13004
    } //#13004
    $k[$j++] = 'opt'; //#13006
    $k[$j++] = $_.options; //#13006
    var _2G = $d(); //#13006
    $k[$j++] = _2G; //#13009
    if (!$_.dontdraw) { //#13009
        bwipp_renlinear(); //#13009
    } //#13009
    $_ = Object.getPrototypeOf($_); //#13011
    $_ = Object.getPrototypeOf($_); //#13013
} //bwipp_telepen
function bwipp_telepennumeric() {
    $_ = Object.create($_); //#13042
    $_.dontdraw = false; //#13045
    $k[$j++] = $_; //#13047
    bwipp_processoptions(); //#13047
    $_.options = $k[--$j]; //#13047
    $_.barcode = $k[--$j]; //#13048
    $put($_.options, "dontdraw", true); //#13051
    $put($_.options, "numeric", true); //#13052
    $k[$j++] = 'args'; //#13054
    $k[$j++] = $_.barcode; //#13054
    $k[$j++] = $_.options; //#13054
    bwipp_telepen(); //#13054
    var _6 = $k[--$j]; //#13054
    $_[$k[--$j]] = _6; //#13054
    $put($_.args, "opt", $_.options); //#13056
    $k[$j++] = $_.args; //#13059
    if (!$_.dontdraw) { //#13059
        bwipp_renlinear(); //#13059
    } //#13059
    $_ = Object.getPrototypeOf($_); //#13061
} //bwipp_telepennumeric
function bwipp_posicode() {
    $_ = Object.create($_); //#13092
    $_.dontdraw = false; //#13095
    $_.includetext = false; //#13096
    $_.textfont = "OCR-B"; //#13097
    $_.textsize = 10; //#13098
    $_.textxoffset = 0; //#13099
    $_.textyoffset = -8; //#13100
    $_.height = 1; //#13101
    $_.encoding = "auto"; //#13102
    $_.version = "a"; //#13103
    $_.checkoffset = 0; //#13104
    $_.raw = false; //#13105
    $_.parse = false; //#13106
    $_.parsefnc = false; //#13107
    $k[$j++] = $_; //#13109
    bwipp_processoptions(); //#13109
    $_.options = $k[--$j]; //#13109
    var _1 = $k[--$j]; //#13110
    $_.barcode = _1; //#13110
    bwipp_loadctx(bwipp_posicode) //#13112
    if (!bwipp_posicode.__13155__) { //#13155
        $_ = Object.create($_); //#13155
        $_.la0 = -1; //#13116
        $_.la1 = -2; //#13116
        $_.la2 = -3; //#13116
        $_.sf0 = -4; //#13117
        $_.sf1 = -5; //#13117
        $_.sf2 = -6; //#13117
        $_.fn1 = -7; //#13118
        $_.fn2 = -8; //#13118
        $_.fn3 = -9; //#13118
        $_.fn4 = -10; //#13118
        $_.charmapsnormal = $a([$a(["0", "^", "'"]), $a(["1", ";", 27]), $a(["2", "<", 28]), $a(["3", "=", 29]), $a(["4", ">", 30]), $a(["5", "?", 31]), $a(["6", "@", "!"]), $a(["7", "[", "\""]), $a(["8", 92, "#"]), $a(["9", "]", "&"]), $a(["A", "a", 1]), $a(["B", "b", 2]), $a(["C", "c", 3]), $a(["D", "d", 4]), $a(["E", "e", 5]), $a(["F", "f", 6]), $a(["G", "g", 7]), $a(["H", "h", 8]), $a(["I", "i", 9]), $a(["J", "j", 10]), $a(["K", "k", 11]), $a(["L", "l", 12]), $a(["M", "m", 13]), $a(["N", "n", 14]), $a(["O", "o", 15]), $a(["P", "p", 16]), $a(["Q", "q", 17]), $a(["R", "r", 18]), $a(["S", "s", 19]), $a(["T", "t", 20]), $a(["U", "u", 21]), $a(["V", "v", 22]), $a(["W", "w", 23]), $a(["X", "x", 24]), $a(["Y", "y", 25]), $a(["Z", "z", 26]), $a(["-", "_", 40]), $a([".", "`", 41]), $a([" ", 127, 0]), $a(["$", "{", "*"]), $a(["/", "|", ","]), $a(["+", "}", ":"]), $a(["%", "~", $_.fn1]), $a([$_.la1, $_.la0, $_.fn2]), $a([$_.sf1, $_.sf0, $_.fn3]), $a([$_.sf2, $_.sf2, $_.fn4])]); //#13139
        var _13 = $a(["6", -98, -98]); //#13143
        $_.chapmapslimited = $a([$a(["0", -98, -98]), $a(["1", -98, -98]), $a(["2", -98, -98]), $a(["3", -98, -98]), $a(["4", -98, -98]), $a(["5", -98, -98]), _13, $a(["7", -98, -98]), $a(["8", -98, -98]), $a(["9", -98, -98]), $a(["A", -98, -98]), $a(["B", -98, -98]), $a(["C", -98, -98]), $a(["D", -98, -98]), $a(["E", -98, -98]), $a(["F", -98, -98]), $a(["G", -98, -98]), $a(["H", -98, -98]), $a(["I", -98, -98]), $a(["J", -98, -98]), $a(["K", -98, -98]), $a(["L", -98, -98]), $a(["M", -98, -98]), $a(["N", -98, -98]), $a(["O", -98, -98]), $a(["P", -98, -98]), $a(["Q", -98, -98]), $a(["R", -98, -98]), $a(["S", -98, -98]), $a(["T", -98, -98]), $a(["U", -98, -98]), $a(["V", -98, -98]), $a(["W", -98, -98]), $a(["X", -98, -98]), $a(["Y", -98, -98]), $a(["Z", -98, -98]), $a(["-", -98, -98]), $a([".", -98, -98])]); //#13154
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_posicode.$ctx[id] = $_[id]); //#13154
        bwipp_posicode.__13155__ = 1; //#13154
        $_ = Object.getPrototypeOf($_); //#13154
    } //#13154
    if ((($ne($_.version, "a") && $ne($_.version, "b")) && $ne($_.version, "limiteda")) && $ne($_.version, "limitedb")) { //#13159
        $k[$j++] = 'bwipp.posicodeInvalidVersion#13158'; //#13158
        $k[$j++] = "The version must be either a, b, limiteda or limitedb"; //#13158
        bwipp_raiseerror(); //#13158
    } //#13158
    $k[$j++] = 'charmaps'; //#13161
    if ($eq($_.version, "a") || $eq($_.version, "b")) { //#13161
        $k[$j++] = $_.charmapsnormal; //#13161
    } else { //#13161
        $k[$j++] = $_.chapmapslimited; //#13161
    } //#13161
    var _1j = $k[--$j]; //#13161
    $_[$k[--$j]] = _1j; //#13161
    var _1l = $_.charmaps; //#13165
    var _1m = $_.charmaps; //#13165
    var _1n = $_.charmaps; //#13165
    $_.charvals = $a([new Map, new Map, new Map]); //#13166
    for (var _1r = 0, _1q = $_.charmaps.length - 1; _1r <= _1q; _1r += 1) { //#13175
        $_.i = _1r; //#13168
        $_.encs = $get($_.charmaps, $_.i); //#13169
        for (var _1v = 0; _1v <= 2; _1v += 1) { //#13174
            $_.j = _1v; //#13171
            var _1y = $get($_.encs, $_.j); //#13172
            $k[$j++] = _1y; //#13172
            if ($eq($type(_1y), 'stringtype')) { //#13172
                var _21 = $get($k[--$j], 0); //#13172
                $k[$j++] = _21; //#13172
            } //#13172
            $put($get($_.charvals, $_.j), $k[--$j], $_.i); //#13173
        } //#13173
    } //#13173
    $_.set0 = $get($_.charvals, 0); //#13176
    $_.set1 = $get($_.charvals, 1); //#13177
    $_.set2 = $get($_.charvals, 2); //#13178
    if ($eq($_.version, "limiteda") || $eq($_.version, "limitedb")) { //#13187
        for (var _2H = 0, _2G = $_.barcode.length - 1; _2H <= _2G; _2H += 1) { //#13186
            var _2M = $get($_.set0, $get($geti($_.barcode, _2H, 1), 0)) !== undefined; //#13183
            if (!_2M) { //#13185
                $k[$j++] = 'bwipp.posicodeBadCharacter#13184'; //#13184
                $k[$j++] = "Posicode limited must contain only digits, capital letters, and the symbols - and ."; //#13184
                bwipp_raiseerror(); //#13184
            } //#13184
        } //#13184
    } //#13184
    if ($_.raw) { //#13189
        $_.encoding = "raw"; //#13189
    } //#13189
    if ($eq($_.encoding, "raw")) { //#13203
        $_.cws = $a($_.barcode.length); //#13192
        $_.i = 0; //#13193
        $_.j = 0; //#13193
        for (;;) { //#13200
            if ($_.i == $_.barcode.length) { //#13195
                break; //#13195
            } //#13195
            $_.cw = $cvi($geti($_.barcode, $_.i + 1, 3)); //#13196
            $put($_.cws, $_.j, $_.cw); //#13197
            $_.i = $_.i + 4; //#13198
            $_.j = $_.j + 1; //#13199
        } //#13199
        $_.cws = $geti($_.cws, 0, $_.j); //#13201
        $_.text = ""; //#13202
    } //#13202
    if ($eq($_.encoding, "auto")) { //#13318
        var _2k = new Map([
            ["parse", $_.parse],
            ["parsefnc", $_.parsefnc],
            ["FNC1", $_.fn1],
            ["FNC2", $_.fn2],
            ["FNC3", $_.fn3]
        ]); //#13213
        $_.fncvals = _2k; //#13215
        $k[$j++] = 'msg'; //#13216
        $k[$j++] = $_.barcode; //#13216
        $k[$j++] = $_.fncvals; //#13216
        bwipp_parseinput(); //#13216
        var _2n = $k[--$j]; //#13216
        $_[$k[--$j]] = _2n; //#13216
        $_.msglen = $_.msg.length; //#13217
        $_.text = $s($_.msglen); //#13219
        for (var _2u = 0, _2t = $_.msglen - 1; _2u <= _2t; _2u += 1) { //#13223
            $_.i = _2u; //#13221
            var _2z = $get($_.msg, $_.i); //#13222
            $k[$j++] = $_.text; //#13222
            $k[$j++] = $_.i; //#13222
            $k[$j++] = _2z; //#13222
            if (_2z < 0) { //#13222
                $j--; //#13222
                $k[$j++] = 32; //#13222
            } //#13222
            var _30 = $k[--$j]; //#13222
            var _31 = $k[--$j]; //#13222
            $put($k[--$j], _31, _30); //#13222
        } //#13222
        $k[$j++] = Infinity; //#13226
        for (var _34 = 0, _35 = $_.msglen; _34 < _35; _34++) { //#13226
            $k[$j++] = 0; //#13226
        } //#13226
        $k[$j++] = 0; //#13226
        $_.numSA = $a(); //#13226
        $k[$j++] = Infinity; //#13227
        for (var _38 = 0, _39 = $_.msglen; _38 < _39; _38++) { //#13227
            $k[$j++] = 0; //#13227
        } //#13227
        $k[$j++] = 0; //#13227
        $_.numEA = $a(); //#13227
        for (var _3C = $_.msglen - 1; _3C >= 0; _3C -= 1) { //#13237
            $_.i = _3C; //#13229
            if ($get($_.msg, $_.i) >= 0) { //#13236
                if ($get($_.msg, $_.i) >= 128) { //#13234
                    $put($_.numEA, $_.i, $f($get($_.numEA, $_.i + 1) + 1)); //#13232
                } else { //#13234
                    $put($_.numSA, $_.i, $f($get($_.numSA, $_.i + 1) + 1)); //#13234
                } //#13234
            } //#13234
        } //#13234
        $_.ea = false; //#13240
        $_.msgtmp = $a([]); //#13240
        for (var _3W = 0, _3V = $_.msglen - 1; _3W <= _3V; _3W += 1) { //#13255
            $_.i = _3W; //#13242
            $_.c = $get($_.msg, $_.i); //#13243
            if ((!$xo($_.ea, $_.c < 128)) && ($_.c >= 0)) { //#13253
                if ($_.ea) { //#13245
                    $k[$j++] = $_.numSA; //#13245
                } else { //#13245
                    $k[$j++] = $_.numEA; //#13245
                } //#13245
                var _3i = $get($k[--$j], $_.i); //#13245
                var _3l = ($f(_3i + $_.i) == $_.msglen) ? 3 : 5; //#13246
                if (_3i < _3l) { //#13251
                    $k[$j++] = Infinity; //#13248
                    $aload($_.msgtmp); //#13248
                    $k[$j++] = $_.fn4; //#13248
                    $_.msgtmp = $a(); //#13248
                } else { //#13251
                    $k[$j++] = Infinity; //#13250
                    $aload($_.msgtmp); //#13250
                    $k[$j++] = $_.fn4; //#13250
                    $k[$j++] = $_.fn4; //#13250
                    $_.msgtmp = $a(); //#13250
                    $_.ea = !$_.ea; //#13251
                } //#13251
            } //#13251
            $k[$j++] = Infinity; //#13254
            $aload($_.msgtmp); //#13254
            if ($_.c >= 0) { //#13254
                $k[$j++] = $_.c & 127; //#13254
            } else { //#13254
                $k[$j++] = $_.c; //#13254
            } //#13254
            $_.msgtmp = $a(); //#13254
        } //#13254
        $_.msg = $_.msgtmp; //#13256
        $_.msglen = $_.msg.length; //#13257
        $_.enc = function() {
            var _41 = $k[--$j]; //#13261
            $put($_.cws, $_.j, $get(_41, $k[--$j])); //#13261
            $_.j = $_.j + 1; //#13262
        }; //#13262
        $_.cws = $a($_.msglen * 2); //#13265
        $_.i = 0; //#13266
        $_.j = 0; //#13266
        $_.cset = "set0"; //#13266
        for (;;) { //#13316
            if ($_.i == $_.msglen) { //#13268
                break; //#13268
            } //#13268
            for (;;) { //#13314
                $_.char1 = $get($_.msg, $_.i); //#13273
                $k[$j++] = 'char2'; //#13274
                if (($_.i + 1) < $_.msglen) { //#13274
                    $k[$j++] = $get($_.msg, $_.i + 1); //#13274
                } else { //#13274
                    $k[$j++] = -99; //#13274
                } //#13274
                var _4J = $k[--$j]; //#13274
                $_[$k[--$j]] = _4J; //#13274
                var _4O = $get($_[$_.cset], $_.char1) !== undefined; //#13277
                if (_4O) { //#13281
                    $k[$j++] = $_.char1; //#13278
                    $k[$j++] = $_[$_.cset]; //#13278
                    $_.enc(); //#13278
                    $_.i = $_.i + 1; //#13279
                    break; //#13280
                } //#13280
                var _4V = $get($_.set2, $_.char1) !== undefined; //#13284
                if (_4V) { //#13289
                    $k[$j++] = $_.sf2; //#13285
                    $k[$j++] = $_[$_.cset]; //#13285
                    $_.enc(); //#13285
                    $k[$j++] = $_.char1; //#13286
                    $k[$j++] = $_.set2; //#13286
                    $_.enc(); //#13286
                    $_.i = $_.i + 1; //#13287
                    break; //#13288
                } //#13288
                var _4f = $get($_[$_.cset], $_.char2) !== undefined; //#13292
                if (!_4f) { //#13310
                    if ($eq($_.cset, "set0")) { //#13298
                        $k[$j++] = $_.la1; //#13294
                        $k[$j++] = $_[$_.cset]; //#13294
                        $_.enc(); //#13294
                        $_.cset = "set1"; //#13295
                    } else { //#13298
                        $k[$j++] = $_.la0; //#13297
                        $k[$j++] = $_[$_.cset]; //#13297
                        $_.enc(); //#13297
                        $_.cset = "set0"; //#13298
                    } //#13298
                    break; //#13300
                } else { //#13310
                    if ($eq($_.cset, "set0")) { //#13307
                        $k[$j++] = $_.sf1; //#13303
                        $k[$j++] = $_[$_.cset]; //#13303
                        $_.enc(); //#13303
                        $k[$j++] = $_.char1; //#13304
                        $k[$j++] = $_.set1; //#13304
                        $_.enc(); //#13304
                    } else { //#13307
                        $k[$j++] = $_.sf0; //#13306
                        $k[$j++] = $_[$_.cset]; //#13306
                        $_.enc(); //#13306
                        $k[$j++] = $_.char1; //#13307
                        $k[$j++] = $_.set0; //#13307
                        $_.enc(); //#13307
                    } //#13307
                    $_.i = $_.i + 1; //#13309
                    break; //#13310
                } //#13310
                break; //#13313
            } //#13313
        } //#13313
        $_.cws = $geti($_.cws, 0, $_.j); //#13317
    } //#13317
    if (!bwipp_posicode.__13368__) { //#13368
        $_ = Object.create($_); //#13368
        var _56 = new Map([
            ["a", $a(["141112", "131212", "121312", "111412", "131113", "121213", "111313", "121114", "111214", "111115", "181111", "171211", "161311", "151411", "141511", "131611", "121711", "111811", "171112", "161212", "151312", "141412", "131512", "121612", "111712", "161113", "151213", "141313", "131413", "121513", "111613", "151114", "141214", "131314", "121414", "111514", "141115", "131215", "121315", "111415", "131116", "121216", "111316", "121117", "111217", "111118", "1<111112", "111111111;1"])],
            ["b", $a(["151213", "141313", "131413", "121513", "141214", "131314", "121414", "131215", "121315", "121216", "191212", "181312", "171412", "161512", "151612", "141712", "131812", "121912", "181213", "171313", "161413", "151513", "141613", "131713", "121813", "171214", "161314", "151414", "141514", "131614", "121714", "161215", "151315", "141415", "131515", "121615", "151216", "141316", "131416", "121516", "141217", "131317", "121417", "131218", "121318", "121219", "1<121312", "121212121<1"])],
            ["limiteda", $a(["111411", "111312", "111213", "111114", "121311", "121212", "121113", "141111", "131211", "131112", "171111", "161211", "151311", "141411", "131511", "121611", "111711", "161112", "151212", "141312", "131412", "121512", "111612", "151113", "141213", "131313", "121413", "111513", "141114", "131214", "121314", "111414", "131115", "121215", "111315", "121116", "111216", "111117", "151111", "1"])],
            ["limitedb", $a(["121512", "121413", "121314", "121215", "131412", "131313", "131214", "151212", "141312", "141213", "181212", "171312", "161412", "151512", "141612", "131712", "121812", "171213", "161313", "151413", "141513", "131613", "121713", "161214", "151314", "141414", "131514", "121614", "151215", "141315", "131415", "121515", "141216", "131316", "121416", "131217", "121317", "121218", "141212", "1"])]
        ]); //#13365
        $_.encmaps = _56; //#13367
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_posicode.$ctx[id] = $_[id]); //#13367
        bwipp_posicode.__13368__ = 1; //#13367
        $_ = Object.getPrototypeOf($_); //#13367
    } //#13367
    $_.encs = $get($_.encmaps, $_.version); //#13369
    if (!bwipp_posicode.__13379__) { //#13379
        $_ = Object.create($_); //#13379
        $_.c2w = $a([$a([495, 330, 210, 126, 70, 35, 15, 5]), $a([165, 120, 84, 56, 35, 20, 10, 4]), $a([45, 36, 28, 21, 15, 10, 6, 3]), $a([9, 8, 7, 6, 5, 4, 3, 2]), $a([1, 1, 1, 1, 1, 1, 1, 1])]); //#13378
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_posicode.$ctx[id] = $_[id]); //#13378
        bwipp_posicode.__13379__ = 1; //#13378
        $_ = Object.getPrototypeOf($_); //#13378
    } //#13378
    $_.v = 0; //#13380
    var _5I = $_.cws; //#13381
    for (var _5J = 0, _5K = _5I.length; _5J < _5K; _5J++) { //#13390
        $_.cw = $get(_5I, _5J); //#13382
        for (var _5M = 0, _5N = 6; _5M < _5N; _5M++) { //#13389
            if ((($_.cw ^ $_.v) & 1) != 0) { //#13386
                $_.v = $_.v ^ 7682; //#13385
            } //#13385
            $_.v = $_.v >>> 1; //#13387
            $_.cw = $_.cw >>> 1; //#13388
        } //#13388
    } //#13388
    $_.v = $_.v + $_.checkoffset; //#13391
    if ($eq($_.version, "limiteda") || $eq($_.version, "limitedb")) { //#13399
        $_.v = $_.v & 1023; //#13394
        if (($_.v > 824) && ($_.v < 853)) { //#13397
            $_.v = $_.v + 292; //#13396
        } //#13396
    } else { //#13399
        $_.v = ($_.v & 1023) + 45; //#13399
    } //#13399
    $_.d = $a([2, 2, 2, 2, 2, 2]); //#13402
    $_.r = 0; //#13403
    $_.c = 0; //#13403
    $_.w = 0; //#13403
    $_.sum = 0; //#13403
    for (;;) { //#13422
        if ($_.sum == $_.v) { //#13405
            break; //#13405
        } //#13405
        $_.t = $f($_.sum + $get($get($_.c2w, $_.r), $_.c)); //#13406
        if ($_.t == $_.v) { //#13411
            $_.w = $_.w + 1; //#13408
            $put($_.d, $_.r, $_.w + 2); //#13409
            $_.sum = $_.t; //#13410
        } //#13410
        if ($_.t > $_.v) { //#13416
            $put($_.d, $_.r, $_.w + 2); //#13413
            $_.r = $_.r + 1; //#13414
            $_.w = 0; //#13415
        } //#13415
        if ($_.t < $_.v) { //#13421
            $_.c = $_.c + 1; //#13418
            $_.w = $_.w + 1; //#13419
            $_.sum = $_.t; //#13420
        } //#13420
    } //#13420
    $k[$j++] = 20; //#13423
    for (var _63 = 0; _63 <= 4; _63 += 1) { //#13423
        var _66 = $k[--$j]; //#13423
        $k[$j++] = $f(_66 - $get($_.d, _63)); //#13423
    } //#13423
    $put($_.d, 5, $k[--$j]); //#13424
    if ($eq($_.version, "b") || $eq($_.version, "limitedb")) { //#13427
        $k[$j++] = Infinity; //#13426
        var _6B = $_.d; //#13426
        for (var _6C = 0, _6D = _6B.length; _6C < _6D; _6C++) { //#13426
            $k[$j++] = $f($get(_6B, _6C) + 1); //#13426
        } //#13426
        $_.d = $a(); //#13426
    } //#13426
    $_.cbs = $strcpy($s(12), "111111111111"); //#13428
    for (var _6I = 5; _6I >= 0; _6I -= 1) { //#13432
        $_.i = _6I; //#13430
        $put($_.cbs, ((5 - $_.i) * 2) + 1, $f($get($_.d, $_.i) + 47)); //#13431
    } //#13431
    $_.sbs = $s(($_.cws.length * 6) + 31); //#13435
    var _6S = $get($_.encs, $_.encs.length - 2); //#13436
    $puti($_.sbs, 0, _6S); //#13437
    $_.j = _6S.length; //#13438
    for (var _6W = 0, _6V = $_.cws.length - 1; _6W <= _6V; _6W += 1) { //#13443
        $_.i = _6W; //#13440
        $puti($_.sbs, $_.j, $get($_.encs, $get($_.cws, $_.i))); //#13441
        $_.j = $_.j + 6; //#13442
    } //#13442
    $puti($_.sbs, $_.j, $_.cbs); //#13444
    $_.j = $_.j + 12; //#13445
    var _6l = $get($_.encs, $_.encs.length - 1); //#13446
    $puti($_.sbs, $_.j, _6l); //#13447
    $_.j = _6l.length + $_.j; //#13448
    $_.sbs = $geti($_.sbs, 0, $_.j); //#13449
    $k[$j++] = Infinity; //#13452
    $k[$j++] = Infinity; //#13454
    var _6s = $_.sbs; //#13454
    for (var _6t = 0, _6u = _6s.length; _6t < _6u; _6t++) { //#13454
        $k[$j++] = $f($get(_6s, _6t) - 48); //#13454
    } //#13454
    var _6w = $a(); //#13454
    $k[$j++] = Infinity; //#13455
    for (var _6y = 0, _6z = ~~(($_.sbs.length + 1) / 2); _6y < _6z; _6y++) { //#13455
        $k[$j++] = $_.height; //#13455
    } //#13455
    var _71 = $a(); //#13455
    $k[$j++] = Infinity; //#13456
    for (var _73 = 0, _74 = ~~(($_.sbs.length + 1) / 2); _73 < _74; _73++) { //#13456
        $k[$j++] = 0; //#13456
    } //#13456
    var _75 = $a(); //#13456
    var _7D = new Map([
        ["a", 0],
        ["b", 0],
        ["limiteda", 12],
        ["limitedb", 13]
    ]); //#13459
    var _7G = new Map([
        ["a", 0],
        ["b", 0],
        ["limiteda", 12],
        ["limitedb", 13]
    ]); //#13460
    $k[$j++] = 'ren'; //#13461
    $k[$j++] = bwipp_renlinear; //#13461
    $k[$j++] = 'sbs'; //#13461
    $k[$j++] = _6w; //#13461
    $k[$j++] = 'bhs'; //#13461
    $k[$j++] = _71; //#13461
    $k[$j++] = 'bbs'; //#13461
    $k[$j++] = _75; //#13461
    $k[$j++] = 'txt'; //#13461
    $k[$j++] = $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])]); //#13461
    $k[$j++] = 'textxalign'; //#13461
    $k[$j++] = "center"; //#13461
    $k[$j++] = 'borderleft'; //#13461
    $k[$j++] = $get(_7D, $_.version); //#13461
    $k[$j++] = 'borderright'; //#13461
    $k[$j++] = $get(_7G, $_.version); //#13461
    $k[$j++] = 'opt'; //#13461
    $k[$j++] = $_.options; //#13461
    var _7K = $d(); //#13461
    $k[$j++] = _7K; //#13464
    if (!$_.dontdraw) { //#13464
        bwipp_renlinear(); //#13464
    } //#13464
    $_ = Object.getPrototypeOf($_); //#13466
    $_ = Object.getPrototypeOf($_); //#13468
} //bwipp_posicode
function bwipp_codablockf() {
    $_ = Object.create($_); //#13499
    $_.dontdraw = false; //#13502
    $_.rows = -1; //#13503
    $_.columns = 8; //#13504
    $_.rowheight = 10; //#13505
    $_.sepheight = 1; //#13506
    $_.parse = false; //#13507
    $_.parsefnc = false; //#13508
    $k[$j++] = $_; //#13510
    bwipp_processoptions(); //#13510
    $_.options = $k[--$j]; //#13510
    $_.barcode = $k[--$j]; //#13511
    if (($_.columns < 4) || ($_.columns > 62)) { //#13515
        $k[$j++] = 'bwipp.codablockfBadColumns#13514'; //#13514
        $k[$j++] = "Codablock F must have 4 to 62 columns"; //#13514
        bwipp_raiseerror(); //#13514
    } //#13514
    if (($_.rows != -1) && (($_.rows < 2) || ($_.rows > 44))) { //#13519
        $k[$j++] = 'bwipp.codablockfBadRows#13518'; //#13518
        $k[$j++] = "Codablock F must have 2 to 44 rows"; //#13518
        bwipp_raiseerror(); //#13518
    } //#13518
    if ($_.rowheight < 8) { //#13523
        $k[$j++] = 'bwipp.codablockfBadRowHeight#13522'; //#13522
        $k[$j++] = "Codablock F must have rowheight of at least 8"; //#13522
        bwipp_raiseerror(); //#13522
    } //#13522
    if ($_.sepheight < 1) { //#13527
        $k[$j++] = 'bwipp.codablockfBadSepHeight#13526'; //#13526
        $k[$j++] = "Codablock F must have sepheight of at least 1"; //#13526
        bwipp_raiseerror(); //#13526
    } //#13526
    bwipp_loadctx(bwipp_codablockf) //#13529
    $k[$j++] = 'c'; //#13531
    if (($_.columns >= 4) && ($_.columns <= 62)) { //#13531
        $k[$j++] = $_.columns; //#13531
    } else { //#13531
        $k[$j++] = 8; //#13531
    } //#13531
    var _C = $k[--$j]; //#13531
    $_[$k[--$j]] = _C; //#13531
    $k[$j++] = 'rows'; //#13532
    if (($_.rows >= 2) && ($_.rows <= 44)) { //#13532
        $k[$j++] = $_.rows; //#13532
    } else { //#13532
        $k[$j++] = -1; //#13532
    } //#13532
    var _H = $k[--$j]; //#13532
    $_[$k[--$j]] = _H; //#13532
    $_.swa = -1; //#13535
    $_.swb = -2; //#13535
    $_.swc = -3; //#13535
    $_.sft = -4; //#13535
    $_.fn1 = -5; //#13536
    $_.fn2 = -6; //#13536
    $_.fn3 = -7; //#13536
    $_.fn4 = -8; //#13536
    $_.sta = -9; //#13537
    $_.stp = -10; //#13537
    var _N = new Map([
        ["parse", $_.parse],
        ["parsefnc", $_.parsefnc],
        ["FNC1", $_.fn1],
        ["FNC3", $_.fn3]
    ]); //#13545
    $_.fncvals = _N; //#13547
    $k[$j++] = 'msg'; //#13548
    $k[$j++] = $_.barcode; //#13548
    $k[$j++] = $_.fncvals; //#13548
    bwipp_parseinput(); //#13548
    var _Q = $k[--$j]; //#13548
    $_[$k[--$j]] = _Q; //#13548
    $_.msglen = $_.msg.length; //#13549
    $_.msgtmp = $a([]); //#13552
    var _U = $_.msg; //#13553
    for (var _V = 0, _W = _U.length; _V < _W; _V++) { //#13556
        $_.char = $get(_U, _V); //#13554
        $k[$j++] = Infinity; //#13555
        $aload($_.msgtmp); //#13555
        if ($_.char < 128) { //#13555
            $k[$j++] = $_.char; //#13555
        } else { //#13555
            $k[$j++] = $_.fn4; //#13555
            $k[$j++] = $_.char & 127; //#13555
        } //#13555
        $_.msgtmp = $a(); //#13555
    } //#13555
    $_.kmsg = $_.msg; //#13557
    $_.msg = $_.msgtmp; //#13558
    $_.msglen = $_.msg.length; //#13559
    if (!bwipp_codablockf.__13616__) { //#13616
        $_ = Object.create($_); //#13616
        $_.charmaps = $a([$a([32, 32, "00"]), $a(["!", "!", "01"]), $a(["\"", "\"", "02"]), $a(["#", "#", "03"]), $a(["$", "$", "04"]), $a(["%", "%", "05"]), $a(["&", "&", "06"]), $a(["'", "'", "07"]), $a([40, 40, "08"]), $a([41, 41, "09"]), $a(["*", "*", "10"]), $a(["+", "+", "11"]), $a([",", ",", "12"]), $a(["-", "-", "13"]), $a([".", ".", "14"]), $a(["/", "/", "15"]), $a(["0", "0", "16"]), $a(["1", "1", "17"]), $a(["2", "2", "18"]), $a(["3", "3", "19"]), $a(["4", "4", "20"]), $a(["5", "5", "21"]), $a(["6", "6", "22"]), $a(["7", "7", "23"]), $a(["8", "8", "24"]), $a(["9", "9", "25"]), $a([":", ":", "26"]), $a([";", ";", "27"]), $a(["<", "<", "28"]), $a(["=", "=", "29"]), $a([">", ">", "30"]), $a(["?", "?", "31"]), $a(["@", "@", "32"]), $a(["A", "A", "33"]), $a(["B", "B", "34"]), $a(["C", "C", "35"]), $a(["D", "D", "36"]), $a(["E", "E", "37"]), $a(["F", "F", "38"]), $a(["G", "G", "39"]), $a(["H", "H", "40"]), $a(["I", "I", "41"]), $a(["J", "J", "42"]), $a(["K", "K", "43"]), $a(["L", "L", "44"]), $a(["M", "M", "45"]), $a(["N", "N", "46"]), $a(["O", "O", "47"]), $a(["P", "P", "48"]), $a(["Q", "Q", "49"]), $a(["R", "R", "50"]), $a(["S", "S", "51"]), $a(["T", "T", "52"]), $a(["U", "U", "53"]), $a(["V", "V", "54"]), $a(["W", "W", "55"]), $a(["X", "X", "56"]), $a(["Y", "Y", "57"]), $a(["Z", "Z", "58"]), $a(["[", "[", "59"]), $a([92, 92, "60"]), $a(["]", "]", "61"]), $a(["^", "^", "62"]), $a(["_", "_", "63"]), $a([0, "`", "64"]), $a([1, "a", "65"]), $a([2, "b", "66"]), $a([3, "c", "67"]), $a([4, "d", "68"]), $a([5, "e", "69"]), $a([6, "f", "70"]), $a([7, "g", "71"]), $a([8, "h", "72"]), $a([9, "i", "73"]), $a([10, "j", "74"]), $a([11, "k", "75"]), $a([12, "l", "76"]), $a([13, "m", "77"]), $a([14, "n", "78"]), $a([15, "o", "79"]), $a([16, "p", "80"]), $a([17, "q", "81"]), $a([18, "r", "82"]), $a([19, "s", "83"]), $a([20, "t", "84"]), $a([21, "u", "85"]), $a([22, "v", "86"]), $a([23, "w", "87"]), $a([24, "x", "88"]), $a([25, "y", "89"]), $a([26, "z", "90"]), $a([27, "{", "91"]), $a([28, "|", "92"]), $a([29, "}", "93"]), $a([30, "~", "94"]), $a([31, 127, "95"]), $a([$_.fn3, $_.fn3, "96"]), $a([$_.fn2, $_.fn2, "97"]), $a([$_.sft, $_.sft, "98"]), $a([$_.swc, $_.swc, "99"]), $a([$_.swb, $_.fn4, $_.swb]), $a([$_.fn4, $_.swa, $_.swa]), $a([$_.fn1, $_.fn1, $_.fn1]), $a([$_.sta, $_.sta, $_.sta]), $a([$_.stp, $_.stp, $_.stp])]); //#13600
        $_.charvals = $a([new Map, new Map, new Map]); //#13603
        for (var _2p = 0, _2o = $_.charmaps.length - 1; _2p <= _2o; _2p += 1) { //#13612
            $_.i = _2p; //#13605
            $_.encs = $get($_.charmaps, $_.i); //#13606
            for (var _2t = 0; _2t <= 2; _2t += 1) { //#13611
                $_.j = _2t; //#13608
                var _2w = $get($_.encs, $_.j); //#13609
                $k[$j++] = _2w; //#13609
                if ($eq($type(_2w), 'stringtype')) { //#13609
                    var _2z = $get($k[--$j], 0); //#13609
                    $k[$j++] = _2z; //#13609
                } //#13609
                $put($get($_.charvals, $_.j), $k[--$j], $_.i); //#13610
            } //#13610
        } //#13610
        $_.seta = $get($_.charvals, 0); //#13613
        $_.setb = $get($_.charvals, 1); //#13614
        $_.setc = $get($_.charvals, 2); //#13615
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_codablockf.$ctx[id] = $_[id]); //#13615
        bwipp_codablockf.__13616__ = 1; //#13615
        $_ = Object.getPrototypeOf($_); //#13615
    } //#13615
    $_.numsscr = function() {
        $_.n = 0; //#13620
        $_.s = 0; //#13620
        $_.p = $k[--$j]; //#13621
        for (;;) { //#13632
            if ($_.p >= $_.msglen) { //#13622
                break; //#13622
            } //#13622
            var _3H = $get($_.msg, $_.p); //#13623
            var _3J = $get($_.setc, _3H) !== undefined; //#13624
            $k[$j++] = _3H; //#13624
            if (!_3J) { //#13624
                $j--; //#13624
                break; //#13624
            } //#13624
            if ($k[--$j] == $_.fn1) { //#13628
                if (($_.s % 2) == 0) { //#13627
                    $_.s = $_.s + 1; //#13627
                } else { //#13627
                    break; //#13627
                } //#13627
            } //#13627
            $_.n = $_.n + 1; //#13629
            $_.s = $_.s + 1; //#13630
            $_.p = $f($_.p + 1); //#13631
        } //#13631
        $k[$j++] = $_.n; //#13633
        $k[$j++] = $_.s; //#13633
    }; //#13633
    $_.enca = function() {
        $put($_.cws, $_.j, $get($_.seta, $k[--$j])); //#13638
        $_.j = $_.j + 1; //#13639
    }; //#13639
    $_.encb = function() {
        $put($_.cws, $_.j, $get($_.setb, $k[--$j])); //#13642
        $_.j = $_.j + 1; //#13643
    }; //#13643
    $_.encc = function() {
        var _3f = $k[--$j]; //#13646
        $k[$j++] = _3f; //#13650
        if ($ne($type(_3f), 'arraytype')) { //#13649
            var _3j = $get($_.setc, $k[--$j]); //#13647
            $k[$j++] = _3j; //#13647
        } else { //#13649
            $aload($k[--$j]); //#13649
            var _3l = $k[--$j]; //#13649
            var _3m = $k[--$j]; //#13649
            $k[$j++] = $f($f(_3l - 48) + ($f(_3m - 48) * 10)); //#13649
        } //#13649
        $put($_.cws, $_.j, $k[--$j]); //#13651
        $_.j = $_.j + 1; //#13652
    }; //#13652
    $_.anotb = function() {
        var _3r = $k[--$j]; //#13656
        var _3t = $get($_.seta, _3r) !== undefined; //#13656
        var _3v = $get($_.setb, _3r) !== undefined; //#13656
        $k[$j++] = _3t && (!_3v); //#13656
    }; //#13656
    $_.bnota = function() {
        var _3w = $k[--$j]; //#13657
        var _3y = $get($_.setb, _3w) !== undefined; //#13657
        var _40 = $get($_.seta, _3w) !== undefined; //#13657
        $k[$j++] = _3y && (!_40); //#13657
    }; //#13657
    $k[$j++] = Infinity; //#13660
    for (var _42 = 0, _43 = $_.msg.length; _42 < _43; _42++) { //#13660
        $k[$j++] = 0; //#13660
    } //#13660
    $k[$j++] = 9999; //#13660
    $_.nextanotb = $a(); //#13660
    $k[$j++] = Infinity; //#13661
    for (var _46 = 0, _47 = $_.msg.length; _46 < _47; _46++) { //#13661
        $k[$j++] = 0; //#13661
    } //#13661
    $k[$j++] = 9999; //#13661
    $_.nextbnota = $a(); //#13661
    for (var _4A = $_.msg.length - 1; _4A >= 0; _4A -= 1) { //#13674
        $_.i = _4A; //#13663
        $k[$j++] = $get($_.msg, $_.i); //#13664
        $_.anotb(); //#13664
        if ($k[--$j]) { //#13667
            $put($_.nextanotb, $_.i, 0); //#13665
        } else { //#13667
            $put($_.nextanotb, $_.i, $f($get($_.nextanotb, $_.i + 1) + 1)); //#13667
        } //#13667
        $k[$j++] = $get($_.msg, $_.i); //#13669
        $_.bnota(); //#13669
        if ($k[--$j]) { //#13672
            $put($_.nextbnota, $_.i, 0); //#13670
        } else { //#13672
            $put($_.nextbnota, $_.i, $f($get($_.nextbnota, $_.i + 1) + 1)); //#13672
        } //#13672
    } //#13672
    $_.abeforeb = function() {
        var _4X = $k[--$j]; //#13677
        $k[$j++] = $lt($get($_.nextanotb, _4X), $get($_.nextbnota, _4X)); //#13677
    }; //#13677
    $_.bbeforea = function() {
        var _4c = $k[--$j]; //#13678
        $k[$j++] = $lt($get($_.nextbnota, _4c), $get($_.nextanotb, _4c)); //#13678
    }; //#13678
    $_.padrow = function() {
        for (var _4i = 0, _4j = $k[--$j]; _4i < _4j; _4i++) { //#13688
            for (;;) { //#13687
                if ($eq($_.cset, "seta")) { //#13684
                    $k[$j++] = $_.swc; //#13684
                    $_.enca(); //#13684
                    $_.cset = "setc"; //#13684
                    break; //#13684
                } //#13684
                if ($eq($_.cset, "setb")) { //#13685
                    $k[$j++] = $_.swc; //#13685
                    $_.encb(); //#13685
                    $_.cset = "setc"; //#13685
                    break; //#13685
                } //#13685
                if ($eq($_.cset, "setc")) { //#13686
                    $k[$j++] = $_.swb; //#13686
                    $_.encc(); //#13686
                    $_.cset = "setb"; //#13686
                    break; //#13686
                } //#13686
            } //#13686
        } //#13686
    }; //#13686
    $_.encafitsrow = function() {
        if (($_.rem <= 2) && ($get($_.msg, $_.i) == $_.fn4)) { //#13703
            var _4z = ($_.rem == 2) && ($get($_.msg, $_.i + 1) <= 95); //#13695
            $k[$j++] = _4z; //#13699
            if (_4z) { //#13699
                $k[$j++] = $_.fn4; //#13696
                $_.enca(); //#13696
                $k[$j++] = $get($_.msg, $_.i + 1); //#13697
                $_.enca(); //#13697
                $_.i = $_.i + 2; //#13698
            } //#13698
        } else { //#13703
            $k[$j++] = $get($_.msg, $_.i); //#13701
            $_.enca(); //#13701
            $_.i = $_.i + 1; //#13702
            $k[$j++] = true; //#13703
        } //#13703
    }; //#13703
    $_.encbfitsrow = function() {
        if (($_.rem <= 2) && ($get($_.msg, $_.i) == $_.fn4)) { //#13719
            var _5I = ($_.rem == 2) && ($get($_.msg, $_.i + 1) >= 32); //#13711
            $k[$j++] = _5I; //#13715
            if (_5I) { //#13715
                $k[$j++] = $_.fn4; //#13712
                $_.encb(); //#13712
                $k[$j++] = $get($_.msg, $_.i + 1); //#13713
                $_.encb(); //#13713
                $_.i = $_.i + 2; //#13714
            } //#13714
        } else { //#13719
            $k[$j++] = $get($_.msg, $_.i); //#13717
            $_.encb(); //#13717
            $_.i = $_.i + 1; //#13718
            $k[$j++] = true; //#13719
        } //#13719
    }; //#13719
    $_.cws = $a($f($_.c + 5) * 44); //#13724
    $_.i = 0; //#13726
    $_.j = 0; //#13726
    $_.r = 1; //#13726
    $_.lastrow = false; //#13727
    for (;;) { //#13894
        if ($_.lastrow) { //#13729
            break; //#13729
        } //#13729
        if ($_.r > 44) { //#13733
            $k[$j++] = 'bwipp.codablockfTooBig#13732'; //#13732
            $k[$j++] = "Maximum length exceeded"; //#13732
            bwipp_raiseerror(); //#13732
        } //#13732
        $k[$j++] = $_.sta; //#13736
        $_.enca(); //#13736
        if ($_.i < $_.msglen) { //#13737
            $k[$j++] = $_.i; //#13737
            $_.numsscr(); //#13737
        } else { //#13737
            $k[$j++] = -1; //#13737
            $k[$j++] = -1; //#13737
        } //#13737
        $_.nums = $k[--$j]; //#13737
        $_.nchars = $k[--$j]; //#13737
        for (;;) { //#13757
            if ($_.msglen == 0) { //#13743
                $k[$j++] = $_.swb; //#13740
                $_.enca(); //#13740
                $_.cset = "setb"; //#13741
                break; //#13742
            } //#13742
            if ($_.nums >= 2) { //#13748
                $k[$j++] = $_.swc; //#13745
                $_.enca(); //#13745
                $_.cset = "setc"; //#13746
                break; //#13747
            } //#13747
            $k[$j++] = $_.i; //#13749
            $_.abeforeb(); //#13749
            if ($k[--$j]) { //#13753
                $k[$j++] = $_.sft; //#13750
                $_.enca(); //#13750
                $_.cset = "seta"; //#13751
                break; //#13752
            } //#13752
            $k[$j++] = $_.swb; //#13754
            $_.enca(); //#13754
            $_.cset = "setb"; //#13755
            break; //#13756
        } //#13756
        $_.j = $_.j + 1; //#13758
        $_.endofrow = false; //#13761
        for (;;) { //#13879
            $_.rem = $f($f($_.c + 3) - ($_.j % $f($_.c + 5))); //#13762
            if (($_.i == $_.msglen) || $_.endofrow) { //#13764
                break; //#13764
            } //#13764
            $k[$j++] = $_.i; //#13766
            $_.numsscr(); //#13766
            $_.nums = $k[--$j]; //#13766
            $_.nchars = $k[--$j]; //#13766
            $k[$j++] = 'remnums'; //#13767
            if ($_.nums > ($_.rem * 2)) { //#13767
                $k[$j++] = $_.rem * 2; //#13767
            } else { //#13767
                $k[$j++] = $_.nums; //#13767
            } //#13767
            var _5y = $k[--$j]; //#13767
            $_[$k[--$j]] = _5y; //#13767
            for (;;) { //#13877
                if ((($eq($_.cset, "seta") || $eq($_.cset, "setb")) && ($_.remnums >= 4)) && ($get($_.msg, $_.i) != $_.fn1)) { //#13805
                    if ((($_.remnums % 2) == 0) && ($_.rem >= 3)) { //#13787
                        $k[$j++] = $_.swc; //#13775
                        if ($eq($_.cset, "seta")) { //#13775
                            $_.enca(); //#13775
                        } else { //#13775
                            $_.encb(); //#13775
                        } //#13775
                        $_.cset = "setc"; //#13776
                        for (var _6B = 0, _6C = 2; _6B < _6C; _6B++) { //#13785
                            if ($get($_.msg, $_.i) == $_.fn1) { //#13783
                                $k[$j++] = $_.fn1; //#13779
                                $_.encc(); //#13779
                                $_.i = $_.i + 1; //#13780
                            } else { //#13783
                                $k[$j++] = $geti($_.msg, $_.i, 2); //#13782
                                $_.encc(); //#13782
                                $_.i = $_.i + 2; //#13783
                            } //#13783
                        } //#13783
                        break; //#13786
                    } //#13786
                    if ((($_.remnums % 2) != 0) && ($_.rem >= 4)) { //#13804
                        $k[$j++] = $get($_.msg, $_.i); //#13790
                        if ($eq($_.cset, "seta")) { //#13790
                            $_.enca(); //#13790
                        } else { //#13790
                            $_.encb(); //#13790
                        } //#13790
                        $_.i = $_.i + 1; //#13791
                        $k[$j++] = $_.swc; //#13792
                        if ($eq($_.cset, "seta")) { //#13792
                            $_.enca(); //#13792
                        } else { //#13792
                            $_.encb(); //#13792
                        } //#13792
                        $_.cset = "setc"; //#13793
                        for (var _6W = 0, _6X = 2; _6W < _6X; _6W++) { //#13802
                            if ($get($_.msg, $_.i) == $_.fn1) { //#13800
                                $k[$j++] = $_.fn1; //#13796
                                $_.encc(); //#13796
                                $_.i = $_.i + 1; //#13797
                            } else { //#13800
                                $k[$j++] = $geti($_.msg, $_.i, 2); //#13799
                                $_.encc(); //#13799
                                $_.i = $_.i + 2; //#13800
                            } //#13800
                        } //#13800
                        break; //#13803
                    } //#13803
                } //#13803
                $k[$j++] = $eq($_.cset, "setb"); //#13806
                $k[$j++] = $get($_.msg, $_.i); //#13806
                $_.anotb(); //#13806
                var _6m = $k[--$j]; //#13806
                var _6n = $k[--$j]; //#13806
                if ((_6n && _6m) && ($_.rem >= 2)) { //#13821
                    if ($_.i < ($_.msglen - 1)) { //#13815
                        $k[$j++] = $_.i + 1; //#13809
                        $_.bbeforea(); //#13809
                        if ($k[--$j]) { //#13814
                            $k[$j++] = $_.sft; //#13810
                            $_.encb(); //#13810
                            $k[$j++] = $get($_.msg, $_.i); //#13811
                            $_.enca(); //#13811
                            $_.i = $_.i + 1; //#13812
                            break; //#13813
                        } //#13813
                    } //#13813
                    $k[$j++] = $_.swa; //#13816
                    $_.encb(); //#13816
                    $_.cset = "seta"; //#13817
                    $k[$j++] = $get($_.msg, $_.i); //#13818
                    $_.enca(); //#13818
                    $_.i = $_.i + 1; //#13819
                    break; //#13820
                } //#13820
                $k[$j++] = $eq($_.cset, "seta"); //#13822
                $k[$j++] = $get($_.msg, $_.i); //#13822
                $_.bnota(); //#13822
                var _77 = $k[--$j]; //#13822
                var _78 = $k[--$j]; //#13822
                if ((_78 && _77) && ($_.rem >= 2)) { //#13837
                    if ($_.i < ($_.msglen - 1)) { //#13831
                        $k[$j++] = $_.i + 1; //#13825
                        $_.abeforeb(); //#13825
                        if ($k[--$j]) { //#13830
                            $k[$j++] = $_.sft; //#13826
                            $_.enca(); //#13826
                            $k[$j++] = $get($_.msg, $_.i); //#13827
                            $_.encb(); //#13827
                            $_.i = $_.i + 1; //#13828
                            break; //#13829
                        } //#13829
                    } //#13829
                    $k[$j++] = $_.swb; //#13832
                    $_.enca(); //#13832
                    $_.cset = "setb"; //#13833
                    $k[$j++] = $get($_.msg, $_.i); //#13834
                    $_.encb(); //#13834
                    $_.i = $_.i + 1; //#13835
                    break; //#13836
                } //#13836
                if (($eq($_.cset, "setc") && ($_.remnums < 2)) && ($_.rem >= 2)) { //#13850
                    $_.rem = $f($_.rem - 1); //#13840
                    $k[$j++] = $_.i; //#13841
                    $_.abeforeb(); //#13841
                    if ($k[--$j]) { //#13848
                        $k[$j++] = $_.swa; //#13842
                        $_.encc(); //#13842
                        $_.cset = "seta"; //#13843
                        $_.encafitsrow(); //#13844
                        if ($k[--$j]) { //#13844
                            break; //#13844
                        } //#13844
                    } else { //#13848
                        $k[$j++] = $_.swb; //#13846
                        $_.encc(); //#13846
                        $_.cset = "setb"; //#13847
                        $_.encbfitsrow(); //#13848
                        if ($k[--$j]) { //#13848
                            break; //#13848
                        } //#13848
                    } //#13848
                } //#13848
                var _7d = $get($_.seta, $get($_.msg, $_.i)) !== undefined; //#13853
                if (($eq($_.cset, "seta") && _7d) && ($_.rem >= 1)) { //#13856
                    $_.encafitsrow(); //#13855
                    if ($k[--$j]) { //#13855
                        break; //#13855
                    } //#13855
                } //#13855
                var _7l = $get($_.setb, $get($_.msg, $_.i)) !== undefined; //#13857
                if (($eq($_.cset, "setb") && _7l) && ($_.rem >= 1)) { //#13860
                    $_.encbfitsrow(); //#13859
                    if ($k[--$j]) { //#13859
                        break; //#13859
                    } //#13859
                } //#13859
                if (($eq($_.cset, "setc") && ($_.remnums >= 2)) && ($_.rem >= 1)) { //#13871
                    if ($get($_.msg, $_.i) == $_.fn1) { //#13868
                        $k[$j++] = $_.fn1; //#13864
                        $_.encc(); //#13864
                        $_.i = $_.i + 1; //#13865
                    } else { //#13868
                        $k[$j++] = $geti($_.msg, $_.i, 2); //#13867
                        $_.encc(); //#13867
                        $_.i = $_.i + 2; //#13868
                    } //#13868
                    break; //#13870
                } //#13870
                $_.endofrow = true; //#13874
                break; //#13875
            } //#13875
        } //#13875
        if ((((($_.r >= $_.rows) || ($_.rows == -1)) && ($_.r > 1)) && ($_.i == $_.msglen)) && ($_.rem >= 2)) { //#13891
            $k[$j++] = $f($_.rem - 2); //#13883
            $_.padrow(); //#13883
            $_.j = $_.j + 3; //#13884
            $k[$j++] = $_.stp; //#13885
            $_.enca(); //#13885
            $_.lastrow = true; //#13886
        } else { //#13891
            $k[$j++] = $_.rem; //#13888
            $_.padrow(); //#13888
            $_.j = $_.j + 1; //#13889
            $k[$j++] = $_.stp; //#13890
            $_.enca(); //#13890
            $_.r = $_.r + 1; //#13891
        } //#13891
    } //#13891
    $_.cws = $geti($_.cws, 0, $_.j); //#13895
    if (!bwipp_codablockf.__13905__) { //#13905
        $_ = Object.create($_); //#13905
        $k[$j++] = Infinity; //#13899
        for (var _8I = 64; _8I <= 95; _8I += 1) { //#13900
            $k[$j++] = _8I; //#13900
        } //#13900
        for (var _8J = 0; _8J <= 15; _8J += 1) { //#13901
            $k[$j++] = _8J; //#13901
        } //#13901
        for (var _8K = 26; _8K <= 63; _8K += 1) { //#13902
            $k[$j++] = _8K; //#13902
        } //#13902
        $_.abmap = $a(); //#13902
        $k[$j++] = Infinity; //#13904
        for (var _8M = 0; _8M <= 85; _8M += 1) { //#13904
            $k[$j++] = _8M; //#13904
        } //#13904
        $_.cmap = $a(); //#13904
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_codablockf.$ctx[id] = $_[id]); //#13904
        bwipp_codablockf.__13905__ = 1; //#13904
        $_ = Object.getPrototypeOf($_); //#13904
    } //#13904
    $_.chkmsg = $a($_.kmsg.length); //#13908
    $_.j = 0; //#13909
    for (var _8T = 0, _8S = $_.kmsg.length - 1; _8T <= _8S; _8T += 1) { //#13915
        $_.i = _8T; //#13911
        $_.char = $get($_.kmsg, $_.i); //#13912
        if ($_.char >= 0) { //#13913
            $put($_.chkmsg, $_.j, $_.char); //#13913
            $_.j = $_.j + 1; //#13913
        } //#13913
        if (($_.char == $_.fn1) && ($_.i != 0)) { //#13914
            $put($_.chkmsg, $_.j, 29); //#13914
            $_.j = $_.j + 1; //#13914
        } //#13914
    } //#13914
    $_.t1 = 0; //#13916
    $_.t2 = 0; //#13916
    $_.k1 = 0; //#13916
    $_.k2 = 0; //#13916
    for (var _8k = 0, _8j = $_.j - 1; _8k <= _8j; _8k += 1) { //#13923
        $_.i = _8k; //#13918
        $_.t1 = ($get($_.chkmsg, $_.i) * $_.i) % 86; //#13919
        $_.t2 = $f($_.t1 + $get($_.chkmsg, $_.i)) % 86; //#13920
        $_.k1 = $f($_.k1 + $_.t2) % 86; //#13921
        $_.k2 = $f($_.k2 + $_.t1) % 86; //#13922
    } //#13922
    $k[$j++] = $_.cws; //#13924
    $k[$j++] = $_.cws.length - 4; //#13924
    if ($ne($_.cset, "setc")) { //#13924
        $k[$j++] = $_.abmap; //#13924
    } else { //#13924
        $k[$j++] = $_.cmap; //#13924
    } //#13924
    var _94 = $get($k[--$j], $_.k1); //#13924
    var _95 = $k[--$j]; //#13924
    $put($k[--$j], _95, _94); //#13924
    $k[$j++] = $_.cws; //#13925
    $k[$j++] = $_.cws.length - 3; //#13925
    if ($ne($_.cset, "setc")) { //#13925
        $k[$j++] = $_.abmap; //#13925
    } else { //#13925
        $k[$j++] = $_.cmap; //#13925
    } //#13925
    var _9E = $get($k[--$j], $_.k2); //#13925
    var _9F = $k[--$j]; //#13925
    $put($k[--$j], _9F, _9E); //#13925
    var _9H = $_.cws; //#13928
    $k[$j++] = _9H; //#13928
    $k[$j++] = 2; //#13928
    if ($get(_9H, 2 - 1) != 99) { //#13928
        $k[$j++] = $_.abmap; //#13928
    } else { //#13928
        $k[$j++] = $_.cmap; //#13928
    } //#13928
    var _9N = $get($k[--$j], $_.r - 2); //#13928
    var _9O = $k[--$j]; //#13928
    $put($k[--$j], _9O, _9N); //#13928
    for (var _9S = 1, _9R = $_.r - 1; _9S <= _9R; _9S += 1) { //#13932
        $_.i = _9S; //#13930
        var _9T = $_.cws; //#13931
        var _9U = $_.i; //#13931
        var _9V = $_.c; //#13931
        $k[$j++] = _9T; //#13931
        $k[$j++] = $f((_9U * $f(_9V + 5)) + 2); //#13931
        if ($get(_9T, $f(($f((_9U * $f(_9V + 5)) + 2)) - 1)) != 99) { //#13931
            $k[$j++] = $_.abmap; //#13931
        } else { //#13931
            $k[$j++] = $_.cmap; //#13931
        } //#13931
        var _9b = $get($k[--$j], $_.i + 42); //#13931
        var _9c = $k[--$j]; //#13931
        $put($k[--$j], _9c, _9b); //#13931
    } //#13931
    for (var _9g = 0, _9f = $_.r - 1; _9g <= _9f; _9g += 1) { //#13943
        $_.rcws = $geti($_.cws, _9g * $f($_.c + 5), $f($_.c + 4)); //#13936
        $_.csum = $get($_.rcws, 0); //#13937
        for (var _9p = 1, _9o = $_.rcws.length - 2; _9p <= _9o; _9p += 1) { //#13941
            $_.i = _9p; //#13939
            $_.csum = $f($_.csum + ($get($_.rcws, $_.i) * $_.i)); //#13940
        } //#13940
        $put($_.rcws, $_.rcws.length - 1, $_.csum % 103); //#13942
    } //#13942
    var _9z = $get($_.options, 'debugcws') !== undefined; //#13945
    if (_9z) { //#13945
        $k[$j++] = 'bwipp.debugcws#13945'; //#13945
        $k[$j++] = $_.cws; //#13945
        bwipp_raiseerror(); //#13945
    } //#13945
    if (!bwipp_codablockf.__13966__) { //#13966
        $_ = Object.create($_); //#13966
        $_.encs = $a(["212222", "222122", "222221", "121223", "121322", "131222", "122213", "122312", "132212", "221213", "221312", "231212", "112232", "122132", "122231", "113222", "123122", "123221", "223211", "221132", "221231", "213212", "223112", "312131", "311222", "321122", "321221", "312212", "322112", "322211", "212123", "212321", "232121", "111323", "131123", "131321", "112313", "132113", "132311", "211313", "231113", "231311", "112133", "112331", "132131", "113123", "113321", "133121", "313121", "211331", "231131", "213113", "213311", "213131", "311123", "311321", "331121", "312113", "312311", "332111", "314111", "221411", "431111", "111224", "111422", "121124", "121421", "141122", "141221", "112214", "112412", "122114", "122411", "142112", "142211", "241211", "221114", "413111", "241112", "134111", "111242", "121142", "121241", "114212", "124112", "124211", "411212", "421112", "421211", "212141", "214121", "412121", "111143", "111341", "131141", "114113", "114311", "411113", "411311", "113141", "114131", "311141", "411131", "211412", "2331112"]); //#13965
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_codablockf.$ctx[id] = $_[id]); //#13965
        bwipp_codablockf.__13966__ = 1; //#13965
        $_ = Object.getPrototypeOf($_); //#13965
    } //#13965
    $_.rowbits = $a($_.r); //#13969
    for (var _A7 = 0, _A6 = $_.r - 1; _A7 <= _A6; _A7 += 1) { //#13981
        $_.i = _A7; //#13971
        $k[$j++] = Infinity; //#13972
        var _AC = $geti($_.cws, $_.i * $f($_.c + 5), $f($_.c + 5)); //#13973
        for (var _AD = 0, _AE = _AC.length; _AD < _AE; _AD++) { //#13975
            $forall($get($_.encs, $get(_AC, _AD)), function() { //#13974
                var _AI = $k[--$j]; //#13974
                $k[$j++] = $f(_AI - 48); //#13974
            }); //#13974
        } //#13974
        $_.sbs = $a(); //#13974
        $k[$j++] = Infinity; //#13977
        var _AK = $_.sbs; //#13978
        $k[$j++] = 0; //#13978
        for (var _AL = 0, _AM = _AK.length; _AL < _AM; _AL++) { //#13978
            var _AO = $k[--$j]; //#13978
            var _AP = (_AO == 1) ? 0 : 1; //#13978
            $k[$j++] = _AO; //#13978
            for (var _AQ = 0, _AR = $get(_AK, _AL); _AQ < _AR; _AQ++) { //#13978
                $k[$j++] = _AP //#13978
            } //#13978
        } //#13978
        $astore($a($counttomark() - 1)); //#13979
        var _AU = $k[--$j]; //#13979
        var _AV = $k[--$j]; //#13979
        $k[$j++] = _AU; //#13979
        $k[$j++] = _AV; //#13979
        $j--; //#13979
        var _AW = $k[--$j]; //#13979
        var _AX = $k[--$j]; //#13979
        $k[$j++] = _AW; //#13979
        $k[$j++] = _AX; //#13979
        $j--; //#13979
        $put($_.rowbits, $_.i, $k[--$j]); //#13980
    } //#13980
    $_.symwid = $f(($_.c * 11) + 57); //#13984
    $k[$j++] = Infinity; //#13985
    for (var _Ae = 0, _Af = $_.symwid * $_.sepheight; _Ae < _Af; _Ae++) { //#13986
        $k[$j++] = 1; //#13986
    } //#13986
    for (var _Ai = 0, _Ah = $_.r - 2; _Ai <= _Ah; _Ai += 1) { //#13995
        $_.i = _Ai; //#13988
        for (var _Ak = 0, _Al = $_.rowheight; _Ak < _Al; _Ak++) { //#13989
            $aload($get($_.rowbits, $_.i)); //#13989
        } //#13989
        for (var _Aq = 0, _Ar = $_.sepheight; _Aq < _Ar; _Aq++) { //#13994
            $k[$j++] = 1; //#13992
            $k[$j++] = 1; //#13992
            $k[$j++] = 0; //#13992
            $k[$j++] = 1; //#13992
            $k[$j++] = 0; //#13992
            $k[$j++] = 0; //#13992
            $k[$j++] = 0; //#13992
            $k[$j++] = 0; //#13992
            $k[$j++] = 1; //#13992
            $k[$j++] = 0; //#13992
            $k[$j++] = 0; //#13992
            for (var _At = 0, _Au = $f($_.symwid - 24); _At < _Au; _At++) { //#13992
                $k[$j++] = 1; //#13992
            } //#13992
            $k[$j++] = 1; //#13993
            $k[$j++] = 1; //#13993
            $k[$j++] = 0; //#13993
            $k[$j++] = 0; //#13993
            $k[$j++] = 0; //#13993
            $k[$j++] = 1; //#13993
            $k[$j++] = 1; //#13993
            $k[$j++] = 1; //#13993
            $k[$j++] = 0; //#13993
            $k[$j++] = 1; //#13993
            $k[$j++] = 0; //#13993
            $k[$j++] = 1; //#13993
            $k[$j++] = 1; //#13993
        } //#13993
    } //#13993
    for (var _Aw = 0, _Ax = $_.rowheight; _Aw < _Ax; _Aw++) { //#13996
        $aload($get($_.rowbits, $_.r - 1)); //#13996
    } //#13996
    for (var _B3 = 0, _B4 = $_.symwid * $_.sepheight; _B3 < _B4; _B3++) { //#13997
        $k[$j++] = 1; //#13997
    } //#13997
    $_.pixs = $a(); //#13997
    var _BE = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $_.pixs],
        ["pixx", $_.symwid],
        ["pixy", ~~($_.pixs.length / $_.symwid)],
        ["height", (~~($_.pixs.length / $_.symwid)) / 72],
        ["width", $_.symwid / 72],
        ["opt", $_.options]
    ]); //#14008
    $k[$j++] = _BE; //#14011
    if (!$_.dontdraw) { //#14011
        bwipp_renmatrix(); //#14011
    } //#14011
    $_ = Object.getPrototypeOf($_); //#14013
    $_ = Object.getPrototypeOf($_); //#14015
} //bwipp_codablockf
function bwipp_code16k() {
    $_ = Object.create($_); //#14046
    $_.dontdraw = false; //#14049
    $_.sam = -1; //#14050
    $_.rows = 0; //#14051
    $_.rowheight = 8; //#14052
    $_.sepheight = 1; //#14053
    $_.raw = false; //#14054
    $_.parse = false; //#14055
    $_.parsefnc = false; //#14056
    $k[$j++] = $_; //#14058
    bwipp_processoptions(); //#14058
    $_.options = $k[--$j]; //#14058
    $_.barcode = $k[--$j]; //#14059
    if (($_.rows != 0) && (($_.rows < 2) || ($_.rows > 16))) { //#14063
        $k[$j++] = 'bwipp.code16kBadRows#14062'; //#14062
        $k[$j++] = "Code 16K must have 2 to 16 rows"; //#14062
        bwipp_raiseerror(); //#14062
    } //#14062
    if ($_.rowheight < 8) { //#14067
        $k[$j++] = 'bwipp.code16kBadRowHeight#14066'; //#14066
        $k[$j++] = "Code 16K must have rowheight of at least 8"; //#14066
        bwipp_raiseerror(); //#14066
    } //#14066
    if ($_.sepheight < 1) { //#14071
        $k[$j++] = 'bwipp.code16kBadSepHeight#14070'; //#14070
        $k[$j++] = "Code 16K must have sepheight of at least 1"; //#14070
        bwipp_raiseerror(); //#14070
    } //#14070
    if ($_.sam != -1) { //#14083
        $k[$j++] = true; //#14079
        for (var _8 = 0, _9 = 1; _8 < _9; _8++) { //#14079
            var _A = $_.sam; //#14076
            if ((_A < 12) || (_A > 99)) { //#14076
                $j--; //#14076
                $k[$j++] = false; //#14076
                break; //#14076
            } //#14076
            if (($_.sam % 10) < 2) { //#14077
                $j--; //#14077
                $k[$j++] = false; //#14077
                break; //#14077
            } //#14077
            if ((~~($_.sam / 10)) > ($_.sam % 10)) { //#14078
                $j--; //#14078
                $k[$j++] = false; //#14078
                break; //#14078
            } //#14078
        } //#14078
        if ($nt($k[--$j])) { //#14082
            $k[$j++] = 'bwipp.code16kBadSAM#14081'; //#14081
            $k[$j++] = "SAM must be formatted as \"NM\" for Nth of M symbols, from 2 to 9 symbols"; //#14081
            bwipp_raiseerror(); //#14081
        } //#14081
    } //#14081
    bwipp_loadctx(bwipp_code16k) //#14085
    if ($_.sam != -1) { //#14087
        $_.rows = 16; //#14087
    } //#14087
    if (!bwipp_code16k.__14152__) { //#14152
        $_ = Object.create($_); //#14152
        $_.swa = -1; //#14091
        $_.swb = -2; //#14091
        $_.swc = -3; //#14091
        $_.sa1 = -4; //#14092
        $_.sb1 = -5; //#14092
        $_.sc1 = -6; //#14092
        $_.sa2 = -7; //#14093
        $_.sb2 = -8; //#14093
        $_.sc2 = -9; //#14093
        $_.pad = -10; //#14094
        $_.sb3 = -11; //#14094
        $_.sc3 = -12; //#14094
        $_.fn1 = -13; //#14095
        $_.fn2 = -14; //#14095
        $_.fn3 = -15; //#14095
        $_.fn4 = -16; //#14095
        $_.charmaps = $a([$a([32, 32, "00"]), $a(["!", "!", "01"]), $a(["\"", "\"", "02"]), $a(["#", "#", "03"]), $a(["$", "$", "04"]), $a(["%", "%", "05"]), $a(["&", "&", "06"]), $a(["'", "'", "07"]), $a([40, 40, "08"]), $a([41, 41, "09"]), $a(["*", "*", "10"]), $a(["+", "+", "11"]), $a([",", ",", "12"]), $a(["-", "-", "13"]), $a([".", ".", "14"]), $a(["/", "/", "15"]), $a(["0", "0", "16"]), $a(["1", "1", "17"]), $a(["2", "2", "18"]), $a(["3", "3", "19"]), $a(["4", "4", "20"]), $a(["5", "5", "21"]), $a(["6", "6", "22"]), $a(["7", "7", "23"]), $a(["8", "8", "24"]), $a(["9", "9", "25"]), $a([":", ":", "26"]), $a([";", ";", "27"]), $a(["<", "<", "28"]), $a(["=", "=", "29"]), $a([">", ">", "30"]), $a(["?", "?", "31"]), $a(["@", "@", "32"]), $a(["A", "A", "33"]), $a(["B", "B", "34"]), $a(["C", "C", "35"]), $a(["D", "D", "36"]), $a(["E", "E", "37"]), $a(["F", "F", "38"]), $a(["G", "G", "39"]), $a(["H", "H", "40"]), $a(["I", "I", "41"]), $a(["J", "J", "42"]), $a(["K", "K", "43"]), $a(["L", "L", "44"]), $a(["M", "M", "45"]), $a(["N", "N", "46"]), $a(["O", "O", "47"]), $a(["P", "P", "48"]), $a(["Q", "Q", "49"]), $a(["R", "R", "50"]), $a(["S", "S", "51"]), $a(["T", "T", "52"]), $a(["U", "U", "53"]), $a(["V", "V", "54"]), $a(["W", "W", "55"]), $a(["X", "X", "56"]), $a(["Y", "Y", "57"]), $a(["Z", "Z", "58"]), $a(["[", "[", "59"]), $a([92, 92, "60"]), $a(["]", "]", "61"]), $a(["^", "^", "62"]), $a(["_", "_", "63"]), $a([0, "`", "64"]), $a([1, "a", "65"]), $a([2, "b", "66"]), $a([3, "c", "67"]), $a([4, "d", "68"]), $a([5, "e", "69"]), $a([6, "f", "70"]), $a([7, "g", "71"]), $a([8, "h", "72"]), $a([9, "i", "73"]), $a([10, "j", "74"]), $a([11, "k", "75"]), $a([12, "l", "76"]), $a([13, "m", "77"]), $a([14, "n", "78"]), $a([15, "o", "79"]), $a([16, "p", "80"]), $a([17, "q", "81"]), $a([18, "r", "82"]), $a([19, "s", "83"]), $a([20, "t", "84"]), $a([21, "u", "85"]), $a([22, "v", "86"]), $a([23, "w", "87"]), $a([24, "x", "88"]), $a([25, "y", "89"]), $a([26, "z", "90"]), $a([27, "{", "91"]), $a([28, "|", "92"]), $a([29, "}", "93"]), $a([30, "~", "94"]), $a([31, 127, "95"]), $a([$_.fn3, $_.fn3, "96"]), $a([$_.fn2, $_.fn2, "97"]), $a([$_.sb1, $_.sa1, "98"]), $a([$_.swc, $_.swc, "99"]), $a([$_.swb, $_.fn4, $_.swb]), $a([$_.fn4, $_.swa, $_.swa]), $a([$_.fn1, $_.fn1, $_.fn1]), $a([$_.pad, $_.pad, $_.pad]), $a([$_.sb2, $_.sa2, $_.sb1]), $a([$_.sc2, $_.sc2, $_.sb2]), $a([$_.sc3, $_.sc3, $_.sb3])]); //#14136
        $_.charvals = $a([new Map, new Map, new Map]); //#14139
        for (var _2W = 0, _2V = $_.charmaps.length - 1; _2W <= _2V; _2W += 1) { //#14148
            $_.i = _2W; //#14141
            $_.encs = $get($_.charmaps, $_.i); //#14142
            for (var _2a = 0; _2a <= 2; _2a += 1) { //#14147
                $_.j = _2a; //#14144
                var _2d = $get($_.encs, $_.j); //#14145
                $k[$j++] = _2d; //#14145
                if ($eq($type(_2d), 'stringtype')) { //#14145
                    var _2g = $get($k[--$j], 0); //#14145
                    $k[$j++] = _2g; //#14145
                } //#14145
                $put($get($_.charvals, $_.j), $k[--$j], $_.i); //#14146
            } //#14146
        } //#14146
        $_.seta = $get($_.charvals, 0); //#14149
        $_.setb = $get($_.charvals, 1); //#14150
        $_.setc = $get($_.charvals, 2); //#14151
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code16k.$ctx[id] = $_[id]); //#14151
        bwipp_code16k.__14152__ = 1; //#14151
        $_ = Object.getPrototypeOf($_); //#14151
    } //#14151
    if ($_.raw) { //#14622
        $_.cws = $a($_.barcode.length); //#14156
        $_.i = 0; //#14157
        $_.j = 0; //#14157
        for (;;) { //#14168
            if ($_.i >= ($_.barcode.length - 3)) { //#14159
                break; //#14159
            } //#14159
            if ($get($_.barcode, $_.i) != 94) { //#14160
                break; //#14160
            } //#14160
            var _33 = $geti($_.barcode, $_.i + 1, 3); //#14161
            $k[$j++] = _33; //#14163
            $k[$j++] = false; //#14163
            for (var _34 = 0, _35 = _33.length; _34 < _35; _34++) { //#14163
                var _36 = $get(_33, _34); //#14163
                if ((_36 < 48) || (_36 > 57)) { //#14162
                    $j--; //#14162
                    $k[$j++] = true; //#14162
                } //#14162
            } //#14162
            if ($k[--$j]) { //#14163
                $j--; //#14163
                break; //#14163
            } //#14163
            $_.cw = $cvi($k[--$j]); //#14164
            $put($_.cws, $_.j, $_.cw); //#14165
            $_.i = $_.i + 4; //#14166
            $_.j = $_.j + 1; //#14167
        } //#14167
        if ($_.i != $_.barcode.length) { //#14171
            $k[$j++] = 'bwipp.code16kBadRawFormat#14170'; //#14170
            $k[$j++] = "raw data must be formatted as ^NNN"; //#14170
            bwipp_raiseerror(); //#14170
        } //#14170
        $_.cws = $geti($_.cws, 0, $_.j); //#14172
    } else { //#14622
        var _3O = new Map([
            ["parse", $_.parse],
            ["parsefnc", $_.parsefnc],
            ["eci", true],
            ["FNC1", $_.fn1],
            ["FNC2", $_.fn2],
            ["FNC3", $_.fn3]
        ]); //#14183
        $_.fncvals = _3O; //#14185
        $k[$j++] = 'msg'; //#14186
        $k[$j++] = $_.barcode; //#14186
        $k[$j++] = $_.fncvals; //#14186
        bwipp_parseinput(); //#14186
        var _3R = $k[--$j]; //#14186
        $_[$k[--$j]] = _3R; //#14186
        $_.msglen = $_.msg.length; //#14187
        $k[$j++] = Infinity; //#14190
        for (var _3V = 0, _3W = $_.msglen; _3V < _3W; _3V++) { //#14190
            $k[$j++] = 0; //#14190
        } //#14190
        $k[$j++] = 0; //#14190
        $_.numSA = $a(); //#14190
        $k[$j++] = Infinity; //#14191
        for (var _3Z = 0, _3a = $_.msglen; _3Z < _3a; _3Z++) { //#14191
            $k[$j++] = 0; //#14191
        } //#14191
        $k[$j++] = 0; //#14191
        $_.numEA = $a(); //#14191
        for (var _3d = $_.msglen - 1; _3d >= 0; _3d -= 1) { //#14201
            $_.i = _3d; //#14193
            if ($get($_.msg, $_.i) >= 0) { //#14200
                if ($get($_.msg, $_.i) >= 128) { //#14198
                    $put($_.numEA, $_.i, $f($get($_.numEA, $_.i + 1) + 1)); //#14196
                } else { //#14198
                    $put($_.numSA, $_.i, $f($get($_.numSA, $_.i + 1) + 1)); //#14198
                } //#14198
            } //#14198
        } //#14198
        $_.ea = false; //#14204
        $_.msgtmp = $a([]); //#14204
        for (var _3x = 0, _3w = $_.msglen - 1; _3x <= _3w; _3x += 1) { //#14219
            $_.i = _3x; //#14206
            $_.c = $get($_.msg, $_.i); //#14207
            if ((!$xo($_.ea, $_.c < 128)) && ($_.c >= 0)) { //#14217
                if ($_.ea) { //#14209
                    $k[$j++] = $_.numSA; //#14209
                } else { //#14209
                    $k[$j++] = $_.numEA; //#14209
                } //#14209
                var _49 = $get($k[--$j], $_.i); //#14209
                var _4C = ($f(_49 + $_.i) == $_.msglen) ? 3 : 5; //#14210
                if (_49 < _4C) { //#14215
                    $k[$j++] = Infinity; //#14212
                    $aload($_.msgtmp); //#14212
                    $k[$j++] = $_.fn4; //#14212
                    $_.msgtmp = $a(); //#14212
                } else { //#14215
                    $k[$j++] = Infinity; //#14214
                    $aload($_.msgtmp); //#14214
                    $k[$j++] = $_.fn4; //#14214
                    $k[$j++] = $_.fn4; //#14214
                    $_.msgtmp = $a(); //#14214
                    $_.ea = !$_.ea; //#14215
                } //#14215
            } //#14215
            $k[$j++] = Infinity; //#14218
            $aload($_.msgtmp); //#14218
            if ($_.c >= 0) { //#14218
                $k[$j++] = $_.c & 127; //#14218
            } else { //#14218
                $k[$j++] = $_.c; //#14218
            } //#14218
            $_.msgtmp = $a(); //#14218
        } //#14218
        $_.msg = $_.msgtmp; //#14220
        $_.msglen = $_.msg.length; //#14221
        $_.numsscr = function() {
            $_.n = 0; //#14225
            $_.s = 0; //#14225
            $_.p = $k[--$j]; //#14226
            for (;;) { //#14237
                if ($_.p >= $_.msglen) { //#14227
                    break; //#14227
                } //#14227
                var _4X = $get($_.msg, $_.p); //#14228
                var _4Z = $get($_.setc, _4X) !== undefined; //#14229
                $k[$j++] = _4X; //#14229
                if (!_4Z) { //#14229
                    $j--; //#14229
                    break; //#14229
                } //#14229
                if ($k[--$j] == $_.fn1) { //#14233
                    if (($_.s % 2) == 0) { //#14232
                        $_.s = $_.s + 1; //#14232
                    } else { //#14232
                        break; //#14232
                    } //#14232
                } //#14232
                $_.n = $_.n + 1; //#14234
                $_.s = $_.s + 1; //#14235
                $_.p = $f($_.p + 1); //#14236
            } //#14236
            $k[$j++] = $_.n; //#14238
            $k[$j++] = $_.s; //#14238
        }; //#14238
        $_.enca = function() {
            $put($_.cws, $_.j, $get($_.seta, $k[--$j])); //#14243
            $_.j = $_.j + 1; //#14244
        }; //#14244
        $_.encb = function() {
            $put($_.cws, $_.j, $get($_.setb, $k[--$j])); //#14247
            $_.j = $_.j + 1; //#14248
        }; //#14248
        $_.encc = function() {
            var _4v = $k[--$j]; //#14251
            $k[$j++] = _4v; //#14255
            if ($ne($type(_4v), 'arraytype')) { //#14254
                var _4z = $get($_.setc, $k[--$j]); //#14252
                $k[$j++] = _4z; //#14252
            } else { //#14254
                $aload($k[--$j]); //#14254
                var _51 = $k[--$j]; //#14254
                var _52 = $k[--$j]; //#14254
                $k[$j++] = $f($f(_51 - 48) + ($f(_52 - 48) * 10)); //#14254
            } //#14254
            $put($_.cws, $_.j, $k[--$j]); //#14256
            $_.j = $_.j + 1; //#14257
        }; //#14257
        $_.anotb = function() {
            var _57 = $k[--$j]; //#14261
            var _59 = $get($_.seta, _57) !== undefined; //#14261
            var _5B = $get($_.setb, _57) !== undefined; //#14261
            $k[$j++] = _59 && (!_5B); //#14261
        }; //#14261
        $_.bnota = function() {
            var _5C = $k[--$j]; //#14262
            var _5E = $get($_.setb, _5C) !== undefined; //#14262
            var _5G = $get($_.seta, _5C) !== undefined; //#14262
            $k[$j++] = _5E && (!_5G); //#14262
        }; //#14262
        $k[$j++] = Infinity; //#14265
        for (var _5I = 0, _5J = $_.msg.length; _5I < _5J; _5I++) { //#14265
            $k[$j++] = 0; //#14265
        } //#14265
        $k[$j++] = 9999; //#14265
        $_.nextanotb = $a(); //#14265
        $k[$j++] = Infinity; //#14266
        for (var _5M = 0, _5N = $_.msg.length; _5M < _5N; _5M++) { //#14266
            $k[$j++] = 0; //#14266
        } //#14266
        $k[$j++] = 9999; //#14266
        $_.nextbnota = $a(); //#14266
        for (var _5Q = $_.msg.length - 1; _5Q >= 0; _5Q -= 1) { //#14279
            $_.i = _5Q; //#14268
            $k[$j++] = $get($_.msg, $_.i); //#14269
            $_.anotb(); //#14269
            if ($k[--$j]) { //#14272
                $put($_.nextanotb, $_.i, 0); //#14270
            } else { //#14272
                $put($_.nextanotb, $_.i, $f($get($_.nextanotb, $_.i + 1) + 1)); //#14272
            } //#14272
            $k[$j++] = $get($_.msg, $_.i); //#14274
            $_.bnota(); //#14274
            if ($k[--$j]) { //#14277
                $put($_.nextbnota, $_.i, 0); //#14275
            } else { //#14277
                $put($_.nextbnota, $_.i, $f($get($_.nextbnota, $_.i + 1) + 1)); //#14277
            } //#14277
        } //#14277
        $_.abeforeb = function() {
            var _5n = $k[--$j]; //#14282
            $k[$j++] = $lt($get($_.nextanotb, _5n), $get($_.nextbnota, _5n)); //#14282
        }; //#14282
        $_.bbeforea = function() {
            var _5s = $k[--$j]; //#14283
            $k[$j++] = $lt($get($_.nextbnota, _5s), $get($_.nextanotb, _5s)); //#14283
        }; //#14283
        $_.cws = $a(($_.barcode.length * 2) + 3); //#14285
        $_.i = 0; //#14288
        $_.j = 0; //#14288
        for (;;) { //#14378
            if ($_.sam != -1) { //#14299
                $put($_.cws, 0, (~~($_.sam / 10)) - 1); //#14293
                $put($_.cws, 1, ($_.sam % 10) - 1); //#14294
                $_.j = 2; //#14295
                $_.cset = "setb"; //#14296
                $_.mode = 7; //#14297
                break; //#14298
            } //#14298
            if ($_.msglen == 0) { //#14305
                $_.cset = "setb"; //#14302
                $_.mode = 1; //#14303
                break; //#14304
            } //#14304
            if ($_.msglen >= 2) { //#14314
                $k[$j++] = $get($_.msg, 0) == $_.fn1; //#14308
                $k[$j++] = 1; //#14308
                $_.numsscr(); //#14308
                var _69 = $k[--$j]; //#14308
                var _6A = $k[--$j]; //#14308
                $k[$j++] = _69; //#14308
                $k[$j++] = _6A; //#14308
                $j--; //#14308
                var _6B = $k[--$j]; //#14308
                var _6C = $k[--$j]; //#14308
                if (_6C && (_6B >= 2)) { //#14313
                    $_.cset = "setc"; //#14309
                    $_.mode = 4; //#14310
                    $_.i = 1; //#14311
                    break; //#14312
                } //#14312
            } //#14312
            if ($get($_.msg, 0) == $_.fn1) { //#14321
                $_.cset = "setb"; //#14317
                $_.mode = 3; //#14318
                $_.i = 1; //#14319
                break; //#14320
            } //#14320
            if ($_.msglen >= 2) { //#14367
                $k[$j++] = 0; //#14324
                $_.numsscr(); //#14324
                var _6H = $k[--$j]; //#14324
                var _6I = $k[--$j]; //#14324
                $k[$j++] = _6H; //#14324
                $k[$j++] = _6I; //#14324
                $j--; //#14324
                var _6J = $k[--$j]; //#14324
                if ((_6J >= 2) && ((_6J % 2) == 0)) { //#14328
                    $_.cset = "setc"; //#14325
                    $_.mode = 2; //#14326
                    break; //#14327
                } //#14327
                $k[$j++] = 0; //#14330
                $_.numsscr(); //#14330
                var _6K = $k[--$j]; //#14330
                var _6L = $k[--$j]; //#14330
                $k[$j++] = _6K; //#14330
                $k[$j++] = _6L; //#14330
                $j--; //#14330
                var _6M = $k[--$j]; //#14330
                if ((_6M >= 3) && ((_6M % 2) == 1)) { //#14336
                    $k[$j++] = $get($_.msg, 0); //#14331
                    $_.encb(); //#14331
                    $_.cset = "setc"; //#14332
                    $_.mode = 5; //#14333
                    $_.i = 1; //#14334
                    break; //#14335
                } //#14335
                var _6S = $get($_.setb, $get($_.msg, 0)) !== undefined; //#14338
                $k[$j++] = _6S; //#14339
                $k[$j++] = 1; //#14339
                $_.numsscr(); //#14339
                var _6T = $k[--$j]; //#14339
                var _6U = $k[--$j]; //#14339
                $k[$j++] = _6T; //#14339
                $k[$j++] = _6U; //#14339
                $j--; //#14339
                var _6V = $k[--$j]; //#14339
                var _6W = $k[--$j]; //#14339
                if (_6W && ((_6V >= 2) && ((_6V % 2) == 0))) { //#14345
                    $k[$j++] = $get($_.msg, 0); //#14340
                    $_.encb(); //#14340
                    $_.cset = "setc"; //#14341
                    $_.mode = 5; //#14342
                    $_.i = 1; //#14343
                    break; //#14344
                } //#14344
                var _6c = $get($_.setb, $get($_.msg, 0)) !== undefined; //#14347
                $k[$j++] = _6c; //#14348
                $k[$j++] = 1; //#14348
                $_.numsscr(); //#14348
                var _6d = $k[--$j]; //#14348
                var _6e = $k[--$j]; //#14348
                $k[$j++] = _6d; //#14348
                $k[$j++] = _6e; //#14348
                $j--; //#14348
                var _6f = $k[--$j]; //#14348
                var _6g = $k[--$j]; //#14348
                if (_6g && ((_6f >= 3) && ((_6f % 2) == 1))) { //#14355
                    $k[$j++] = $get($_.msg, 0); //#14349
                    $_.encb(); //#14349
                    $k[$j++] = $get($_.msg, 1); //#14350
                    $_.encb(); //#14350
                    $_.cset = "setc"; //#14351
                    $_.mode = 6; //#14352
                    $_.i = 2; //#14353
                    break; //#14354
                } //#14354
                var _6o = $get($_.setb, $get($_.msg, 0)) !== undefined; //#14357
                var _6s = $get($_.setb, $get($_.msg, 1)) !== undefined; //#14358
                $k[$j++] = _6o && _6s; //#14359
                $k[$j++] = 2; //#14359
                $_.numsscr(); //#14359
                var _6t = $k[--$j]; //#14359
                var _6u = $k[--$j]; //#14359
                $k[$j++] = _6t; //#14359
                $k[$j++] = _6u; //#14359
                $j--; //#14359
                var _6v = $k[--$j]; //#14359
                var _6w = $k[--$j]; //#14359
                if (_6w && ((_6v >= 2) && ((_6v % 2) == 0))) { //#14366
                    $k[$j++] = $get($_.msg, 0); //#14360
                    $_.encb(); //#14360
                    $k[$j++] = $get($_.msg, 1); //#14361
                    $_.encb(); //#14361
                    $_.cset = "setc"; //#14362
                    $_.mode = 6; //#14363
                    $_.i = 2; //#14364
                    break; //#14365
                } //#14365
            } //#14365
            $k[$j++] = 0; //#14369
            $_.abeforeb(); //#14369
            if ($k[--$j]) { //#14373
                $_.cset = "seta"; //#14370
                $_.mode = 0; //#14371
                break; //#14372
            } //#14372
            $_.cset = "setb"; //#14375
            $_.mode = 1; //#14376
            break; //#14377
        } //#14377
        for (;;) { //#14621
            if ($_.i == $_.msglen) { //#14381
                break; //#14381
            } //#14381
            $k[$j++] = $_.i; //#14383
            $_.numsscr(); //#14383
            $_.nums = $k[--$j]; //#14383
            $_.nchars = $k[--$j]; //#14383
            for (;;) { //#14619
                if ($eq($_.cset, "seta")) { //#14460
                    if ($_.i < ($_.msglen - 1)) { //#14397
                        $k[$j++] = $get($_.msg, $_.i); //#14390
                        $_.bnota(); //#14390
                        $k[$j++] = $_.i + 1; //#14391
                        $_.abeforeb(); //#14391
                        var _7E = $k[--$j]; //#14391
                        var _7F = $k[--$j]; //#14391
                        if ((_7F && _7E)) { //#14396
                            $k[$j++] = $_.sb1; //#14392
                            $_.enca(); //#14392
                            $k[$j++] = $get($_.msg, $_.i); //#14393
                            $_.encb(); //#14393
                            $_.i = $_.i + 1; //#14394
                            break; //#14395
                        } //#14395
                    } //#14395
                    if ($_.i < ($_.msglen - 2)) { //#14409
                        $k[$j++] = $get($_.msg, $_.i); //#14400
                        $_.bnota(); //#14400
                        $k[$j++] = $get($_.msg, $_.i + 1); //#14401
                        $_.bnota(); //#14401
                        var _7T = $k[--$j]; //#14401
                        var _7U = $k[--$j]; //#14401
                        $k[$j++] = $an(_7U, _7T); //#14402
                        $k[$j++] = $_.i + 2; //#14402
                        $_.abeforeb(); //#14402
                        var _7W = $k[--$j]; //#14402
                        var _7X = $k[--$j]; //#14402
                        if ((_7X && _7W)) { //#14408
                            $k[$j++] = $_.sb2; //#14403
                            $_.enca(); //#14403
                            $k[$j++] = $get($_.msg, $_.i); //#14404
                            $_.encb(); //#14404
                            $k[$j++] = $get($_.msg, $_.i + 1); //#14405
                            $_.encb(); //#14405
                            $_.i = $_.i + 2; //#14406
                            break; //#14407
                        } //#14407
                    } //#14407
                    $k[$j++] = $get($_.msg, $_.i); //#14411
                    $_.bnota(); //#14411
                    if ($k[--$j]) { //#14415
                        $k[$j++] = $_.swb; //#14412
                        $_.enca(); //#14412
                        $_.cset = "setb"; //#14413
                        break; //#14414
                    } //#14414
                    if ($_.i < ($_.msglen - 4)) { //#14432
                        var _7s = $get($_.seta, $get($_.msg, $_.i + 4)) !== undefined; //#14419
                        if (($_.nums == 4) && _7s) { //#14431
                            $k[$j++] = $_.sc2; //#14420
                            $_.enca(); //#14420
                            for (var _7u = 0, _7v = 2; _7u < _7v; _7u++) { //#14429
                                if ($get($_.msg, $_.i) == $_.fn1) { //#14427
                                    $k[$j++] = $_.fn1; //#14423
                                    $_.encc(); //#14423
                                    $_.i = $_.i + 1; //#14424
                                } else { //#14427
                                    $k[$j++] = $geti($_.msg, $_.i, 2); //#14426
                                    $_.encc(); //#14426
                                    $_.i = $_.i + 2; //#14427
                                } //#14427
                            } //#14427
                            break; //#14430
                        } //#14430
                    } //#14430
                    if ($_.i < ($_.msglen - 6)) { //#14449
                        var _8D = $get($_.seta, $get($_.msg, $_.i + 6)) !== undefined; //#14436
                        if (($_.nums == 6) && _8D) { //#14448
                            $k[$j++] = $_.sc3; //#14437
                            $_.enca(); //#14437
                            for (var _8F = 0, _8G = 3; _8F < _8G; _8F++) { //#14446
                                if ($get($_.msg, $_.i) == $_.fn1) { //#14444
                                    $k[$j++] = $_.fn1; //#14440
                                    $_.encc(); //#14440
                                    $_.i = $_.i + 1; //#14441
                                } else { //#14444
                                    $k[$j++] = $geti($_.msg, $_.i, 2); //#14443
                                    $_.encc(); //#14443
                                    $_.i = $_.i + 2; //#14444
                                } //#14444
                            } //#14444
                            break; //#14447
                        } //#14447
                    } //#14447
                    if (($_.nums >= 4) && (($_.nums % 2) == 0)) { //#14455
                        $k[$j++] = $_.swc; //#14452
                        $_.enca(); //#14452
                        $_.cset = "setc"; //#14453
                        break; //#14454
                    } //#14454
                    $k[$j++] = $get($_.msg, $_.i); //#14457
                    $_.enca(); //#14457
                    $_.i = $_.i + 1; //#14458
                    break; //#14459
                } //#14459
                if ($eq($_.cset, "setb")) { //#14534
                    if ($_.i < ($_.msglen - 1)) { //#14471
                        $k[$j++] = $get($_.msg, $_.i); //#14464
                        $_.anotb(); //#14464
                        $k[$j++] = $_.i + 1; //#14465
                        $_.bbeforea(); //#14465
                        var _8f = $k[--$j]; //#14465
                        var _8g = $k[--$j]; //#14465
                        if ((_8g && _8f)) { //#14470
                            $k[$j++] = $_.sa1; //#14466
                            $_.encb(); //#14466
                            $k[$j++] = $get($_.msg, $_.i); //#14467
                            $_.enca(); //#14467
                            $_.i = $_.i + 1; //#14468
                            break; //#14469
                        } //#14469
                    } //#14469
                    if ($_.i < ($_.msglen - 2)) { //#14483
                        $k[$j++] = $get($_.msg, $_.i); //#14474
                        $_.anotb(); //#14474
                        $k[$j++] = $get($_.msg, $_.i + 1); //#14475
                        $_.anotb(); //#14475
                        var _8u = $k[--$j]; //#14475
                        var _8v = $k[--$j]; //#14475
                        $k[$j++] = $an(_8v, _8u); //#14476
                        $k[$j++] = $_.i + 2; //#14476
                        $_.bbeforea(); //#14476
                        var _8x = $k[--$j]; //#14476
                        var _8y = $k[--$j]; //#14476
                        if ((_8y && _8x)) { //#14482
                            $k[$j++] = $_.sa2; //#14477
                            $_.encb(); //#14477
                            $k[$j++] = $get($_.msg, $_.i); //#14478
                            $_.enca(); //#14478
                            $k[$j++] = $get($_.msg, $_.i + 1); //#14479
                            $_.enca(); //#14479
                            $_.i = $_.i + 2; //#14480
                            break; //#14481
                        } //#14481
                    } //#14481
                    $k[$j++] = $get($_.msg, $_.i); //#14485
                    $_.anotb(); //#14485
                    if ($k[--$j]) { //#14489
                        $k[$j++] = $_.swa; //#14486
                        $_.encb(); //#14486
                        $_.cset = "seta"; //#14487
                        break; //#14488
                    } //#14488
                    if ($_.i < ($_.msglen - 4)) { //#14506
                        var _9J = $get($_.setb, $get($_.msg, $_.i + 4)) !== undefined; //#14493
                        if (($_.nums == 4) && _9J) { //#14505
                            $k[$j++] = $_.sc2; //#14494
                            $_.encb(); //#14494
                            for (var _9L = 0, _9M = 2; _9L < _9M; _9L++) { //#14503
                                if ($get($_.msg, $_.i) == $_.fn1) { //#14501
                                    $k[$j++] = $_.fn1; //#14497
                                    $_.encc(); //#14497
                                    $_.i = $_.i + 1; //#14498
                                } else { //#14501
                                    $k[$j++] = $geti($_.msg, $_.i, 2); //#14500
                                    $_.encc(); //#14500
                                    $_.i = $_.i + 2; //#14501
                                } //#14501
                            } //#14501
                            break; //#14504
                        } //#14504
                    } //#14504
                    if ($_.i < ($_.msglen - 6)) { //#14523
                        var _9e = $get($_.setb, $get($_.msg, $_.i + 6)) !== undefined; //#14510
                        if (($_.nums == 6) && _9e) { //#14522
                            $k[$j++] = $_.sc3; //#14511
                            $_.encb(); //#14511
                            for (var _9g = 0, _9h = 3; _9g < _9h; _9g++) { //#14520
                                if ($get($_.msg, $_.i) == $_.fn1) { //#14518
                                    $k[$j++] = $_.fn1; //#14514
                                    $_.encc(); //#14514
                                    $_.i = $_.i + 1; //#14515
                                } else { //#14518
                                    $k[$j++] = $geti($_.msg, $_.i, 2); //#14517
                                    $_.encc(); //#14517
                                    $_.i = $_.i + 2; //#14518
                                } //#14518
                            } //#14518
                            break; //#14521
                        } //#14521
                    } //#14521
                    if (($_.nums >= 4) && (($_.nums % 2) == 0)) { //#14529
                        $k[$j++] = $_.swc; //#14526
                        $_.encb(); //#14526
                        $_.cset = "setc"; //#14527
                        break; //#14528
                    } //#14528
                    $k[$j++] = $get($_.msg, $_.i); //#14531
                    $_.encb(); //#14531
                    $_.i = $_.i + 1; //#14532
                    break; //#14533
                } //#14533
                if ($eq($_.cset, "setc")) { //#14617
                    if ($_.nums >= 2) { //#14546
                        if ($get($_.msg, $_.i) == $_.fn1) { //#14543
                            $k[$j++] = $_.fn1; //#14539
                            $_.encc(); //#14539
                            $_.i = $_.i + 1; //#14540
                        } else { //#14543
                            $k[$j++] = $geti($_.msg, $_.i, 2); //#14542
                            $_.encc(); //#14542
                            $_.i = $_.i + 2; //#14543
                        } //#14543
                        break; //#14545
                    } //#14545
                    if ($_.i < ($_.msglen - 1)) { //#14556
                        var _AH = $get($_.setb, $get($_.msg, $_.i)) !== undefined; //#14549
                        $k[$j++] = _AH; //#14550
                        $k[$j++] = $_.i + 1; //#14550
                        $_.numsscr(); //#14550
                        var _AJ = $k[--$j]; //#14550
                        var _AK = $k[--$j]; //#14550
                        $k[$j++] = _AJ; //#14550
                        $k[$j++] = _AK; //#14550
                        $j--; //#14550
                        var _AL = $k[--$j]; //#14550
                        var _AM = $k[--$j]; //#14550
                        if (_AM && ((_AL >= 2) && ((_AL % 2) == 0))) { //#14555
                            $k[$j++] = $_.sb1; //#14551
                            $_.encc(); //#14551
                            $k[$j++] = $get($_.msg, $_.i); //#14552
                            $_.encb(); //#14552
                            $_.i = $_.i + 1; //#14553
                            break; //#14554
                        } //#14554
                    } //#14554
                    if ($_.i < ($_.msglen - 1)) { //#14567
                        var _AY = $get($_.setb, $get($_.msg, $_.i)) !== undefined; //#14559
                        $k[$j++] = _AY; //#14560
                        $k[$j++] = $_.i + 1; //#14560
                        $_.numsscr(); //#14560
                        var _Aa = $k[--$j]; //#14560
                        var _Ab = $k[--$j]; //#14560
                        $k[$j++] = _Aa; //#14560
                        $k[$j++] = _Ab; //#14560
                        $j--; //#14560
                        var _Ac = $k[--$j]; //#14560
                        var _Ad = $k[--$j]; //#14560
                        if (_Ad && ((_Ac >= 3) && ((_Ac % 2) == 1))) { //#14566
                            $k[$j++] = $_.sb2; //#14561
                            $_.encc(); //#14561
                            $k[$j++] = $get($_.msg, $_.i); //#14562
                            $_.encb(); //#14562
                            $k[$j++] = $get($_.msg, $_.i + 1); //#14563
                            $_.encb(); //#14563
                            $_.i = $_.i + 2; //#14564
                            break; //#14565
                        } //#14565
                    } //#14565
                    if ($_.i < ($_.msglen - 2)) { //#14579
                        var _As = $get($_.setb, $get($_.msg, $_.i)) !== undefined; //#14570
                        var _Ax = $get($_.setb, $get($_.msg, $_.i + 1)) !== undefined; //#14571
                        $k[$j++] = _As && _Ax; //#14572
                        $k[$j++] = $_.i + 2; //#14572
                        $_.numsscr(); //#14572
                        var _Az = $k[--$j]; //#14572
                        var _B0 = $k[--$j]; //#14572
                        $k[$j++] = _Az; //#14572
                        $k[$j++] = _B0; //#14572
                        $j--; //#14572
                        var _B1 = $k[--$j]; //#14572
                        var _B2 = $k[--$j]; //#14572
                        if (_B2 && ((_B1 >= 2) && ((_B1 % 2) == 0))) { //#14578
                            $k[$j++] = $_.sb2; //#14573
                            $_.encc(); //#14573
                            $k[$j++] = $get($_.msg, $_.i); //#14574
                            $_.encb(); //#14574
                            $k[$j++] = $get($_.msg, $_.i + 1); //#14575
                            $_.encb(); //#14575
                            $_.i = $_.i + 2; //#14576
                            break; //#14577
                        } //#14577
                    } //#14577
                    if ($_.i < ($_.msglen - 3)) { //#14592
                        var _BH = $get($_.setb, $get($_.msg, $_.i)) !== undefined; //#14582
                        var _BM = $get($_.setb, $get($_.msg, $_.i + 1)) !== undefined; //#14583
                        $k[$j++] = _BH && _BM; //#14584
                        $k[$j++] = $_.i + 2; //#14584
                        $_.numsscr(); //#14584
                        var _BO = $k[--$j]; //#14584
                        var _BP = $k[--$j]; //#14584
                        $k[$j++] = _BO; //#14584
                        $k[$j++] = _BP; //#14584
                        $j--; //#14584
                        var _BQ = $k[--$j]; //#14584
                        var _BR = $k[--$j]; //#14584
                        if (_BR && ((_BQ >= 3) && ((_BQ % 2) == 1))) { //#14591
                            $k[$j++] = $_.sb3; //#14585
                            $_.encc(); //#14585
                            $k[$j++] = $get($_.msg, $_.i); //#14586
                            $_.encb(); //#14586
                            $k[$j++] = $get($_.msg, $_.i + 1); //#14587
                            $_.encb(); //#14587
                            $k[$j++] = $get($_.msg, $_.i + 2); //#14588
                            $_.encb(); //#14588
                            $_.i = $_.i + 3; //#14589
                            break; //#14590
                        } //#14590
                    } //#14590
                    if ($_.i < ($_.msglen - 3)) { //#14606
                        var _Bj = $get($_.setb, $get($_.msg, $_.i)) !== undefined; //#14595
                        var _Bo = $get($_.setb, $get($_.msg, $_.i + 1)) !== undefined; //#14596
                        var _Bt = $get($_.setb, $get($_.msg, $_.i + 2)) !== undefined; //#14597
                        $k[$j++] = (_Bj && _Bo) && _Bt; //#14598
                        $k[$j++] = $_.i + 3; //#14598
                        $_.numsscr(); //#14598
                        var _Bv = $k[--$j]; //#14598
                        var _Bw = $k[--$j]; //#14598
                        $k[$j++] = _Bv; //#14598
                        $k[$j++] = _Bw; //#14598
                        $j--; //#14598
                        var _Bx = $k[--$j]; //#14598
                        var _By = $k[--$j]; //#14598
                        if (_By && ((_Bx >= 2) && ((_Bx % 2) == 0))) { //#14605
                            $k[$j++] = $_.sb3; //#14599
                            $_.encc(); //#14599
                            $k[$j++] = $get($_.msg, $_.i); //#14600
                            $_.encb(); //#14600
                            $k[$j++] = $get($_.msg, $_.i + 1); //#14601
                            $_.encb(); //#14601
                            $k[$j++] = $get($_.msg, $_.i + 2); //#14602
                            $_.encb(); //#14602
                            $_.i = $_.i + 3; //#14603
                            break; //#14604
                        } //#14604
                    } //#14604
                    $k[$j++] = $_.i; //#14608
                    $_.abeforeb(); //#14608
                    if ($k[--$j]) { //#14612
                        $k[$j++] = $_.swa; //#14609
                        $_.encc(); //#14609
                        $_.cset = "seta"; //#14610
                        break; //#14611
                    } //#14611
                    $k[$j++] = $_.swb; //#14614
                    $_.encc(); //#14614
                    $_.cset = "setb"; //#14615
                    break; //#14616
                } //#14616
                break; //#14618
            } //#14618
        } //#14618
        $_.cws = $geti($_.cws, 0, $_.j); //#14622
    } //#14622
    if (!bwipp_code16k.__14645__) { //#14645
        $_ = Object.create($_); //#14645
        $_.metrics = $a([$a([2, 7]), $a([3, 12]), $a([4, 17]), $a([5, 22]), $a([6, 27]), $a([7, 32]), $a([8, 37]), $a([9, 42]), $a([10, 47]), $a([11, 52]), $a([12, 57]), $a([13, 62]), $a([14, 67]), $a([15, 72]), $a([16, 77])]); //#14644
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code16k.$ctx[id] = $_[id]); //#14644
        bwipp_code16k.__14645__ = 1; //#14644
        $_ = Object.getPrototypeOf($_); //#14644
    } //#14644
    $_.urows = $_.rows; //#14648
    var _CZ = $_.metrics; //#14649
    for (var _Ca = 0, _Cb = _CZ.length; _Ca < _Cb; _Ca++) { //#14657
        $_.m = $get(_CZ, _Ca); //#14650
        $_.r = $get($_.m, 0); //#14651
        $_.dcws = $get($_.m, 1); //#14652
        $_.okay = true; //#14653
        if (($_.urows != 0) && ($_.urows != $_.r)) { //#14654
            $_.okay = false; //#14654
        } //#14654
        if ($_.cws.length > $_.dcws) { //#14655
            $_.okay = false; //#14655
        } //#14655
        if ($_.okay) { //#14656
            break; //#14656
        } //#14656
    } //#14656
    if (!$_.okay) { //#14661
        $k[$j++] = 'bwipp.code16kNoValidSymbol#14660'; //#14660
        $k[$j++] = "Maximum length exceeded or data too large for given options"; //#14660
        bwipp_raiseerror(); //#14660
    } //#14660
    $k[$j++] = Infinity; //#14664
    $aload($_.cws); //#14664
    for (var _Cr = 0, _Cs = $f($_.dcws - $_.cws.length); _Cr < _Cs; _Cr++) { //#14664
        $k[$j++] = 103; //#14664
    } //#14664
    $_.cws = $a(); //#14664
    $k[$j++] = Infinity; //#14667
    $k[$j++] = $f(($f($_.r - 2) * 7) + $_.mode); //#14667
    $aload($_.cws); //#14667
    $_.cws = $a(); //#14667
    $k[$j++] = 0; //#14670
    for (var _D0 = 0, _Cz = $_.dcws; _D0 <= _Cz; _D0 += 1) { //#14670
        var _D3 = $k[--$j]; //#14670
        $k[$j++] = $f(_D3 + ((_D0 + 2) * $get($_.cws, _D0))); //#14670
    } //#14670
    $_.c1 = $k[--$j] % 107; //#14671
    $k[$j++] = 0; //#14672
    for (var _D7 = 0, _D6 = $_.dcws; _D7 <= _D6; _D7 += 1) { //#14672
        var _DA = $k[--$j]; //#14672
        $k[$j++] = $f(_DA + ((_D7 + 1) * $get($_.cws, _D7))); //#14672
    } //#14672
    $_.c2 = ($f($k[--$j] + ($_.c1 * $f($_.dcws + 2)))) % 107; //#14673
    $k[$j++] = Infinity; //#14674
    $aload($_.cws); //#14674
    $k[$j++] = $_.c1; //#14674
    $k[$j++] = $_.c2; //#14674
    $_.cws = $a(); //#14674
    var _DJ = $get($_.options, 'debugcws') !== undefined; //#14676
    if (_DJ) { //#14676
        $k[$j++] = 'bwipp.debugcws#14676'; //#14676
        $k[$j++] = $_.cws; //#14676
        bwipp_raiseerror(); //#14676
    } //#14676
    if (!bwipp_code16k.__14712__) { //#14712
        $_ = Object.create($_); //#14712
        $_.encs = $a(["212222", "222122", "222221", "121223", "121322", "131222", "122213", "122312", "132212", "221213", "221312", "231212", "112232", "122132", "122231", "113222", "123122", "123221", "223211", "221132", "221231", "213212", "223112", "312131", "311222", "321122", "321221", "312212", "322112", "322211", "212123", "212321", "232121", "111323", "131123", "131321", "112313", "132113", "132311", "211313", "231113", "231311", "112133", "112331", "132131", "113123", "113321", "133121", "313121", "211331", "231131", "213113", "213311", "213131", "311123", "311321", "331121", "312113", "312311", "332111", "314111", "221411", "431111", "111224", "111422", "121124", "121421", "141122", "141221", "112214", "112412", "122114", "122411", "142112", "142211", "241211", "221114", "413111", "241112", "134111", "111242", "121142", "121241", "114212", "124112", "124211", "411212", "421112", "421211", "212141", "214121", "412121", "111143", "111341", "131141", "114113", "114311", "411113", "411311", "113141", "114131", "311141", "411131", "211412", "211214", "211232", "211133"]); //#14697
        $_.startencs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "3112", "3211", "2221", "2122", "1411", "1132", "1231", "1114", "3112"]); //#14703
        $_.stopencsodd = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "3112", "1132", "1231", "1114", "3112", "3211", "2221", "2122", "1411"]); //#14707
        $_.stopencseven = $a(["2122", "1411", "1132", "1231", "1114", "3112", "1132", "1231", "1114", "3112", "3211", "2221", "2122", "1411", "3211", "2221"]); //#14711
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code16k.$ctx[id] = $_[id]); //#14711
        bwipp_code16k.__14712__ = 1; //#14711
        $_ = Object.getPrototypeOf($_); //#14711
    } //#14711
    if (($_.sam == -1) || (((~~($_.sam / 10)) % 2) == 1)) { //#14717
        $_.stopencs = $_.stopencsodd; //#14715
    } else { //#14717
        $_.stopencs = $_.stopencseven; //#14717
    } //#14717
    $_.rowbits = $a($_.r); //#14721
    for (var _DY = 0, _DX = $f($_.r - 1); _DY <= _DX; _DY += 1) { //#14738
        $_.i = _DY; //#14723
        $k[$j++] = Infinity; //#14724
        $k[$j++] = 10; //#14726
        $forall($get($_.startencs, $_.i), function() { //#14726
            var _Dc = $k[--$j]; //#14726
            $k[$j++] = $f(_Dc - 48); //#14726
        }); //#14726
        var _Df = $geti($_.cws, $_.i * 5, 5); //#14728
        $k[$j++] = 1; //#14730
        for (var _Dg = 0, _Dh = _Df.length; _Dg < _Dh; _Dg++) { //#14730
            $forall($get($_.encs, $get(_Df, _Dg)), function() { //#14729
                var _Dl = $k[--$j]; //#14729
                $k[$j++] = $f(_Dl - 48); //#14729
            }); //#14729
        } //#14729
        $forall($get($_.stopencs, $_.i), function() { //#14731
            var _Dp = $k[--$j]; //#14731
            $k[$j++] = $f(_Dp - 48); //#14731
        }); //#14731
        $k[$j++] = 1; //#14732
        $_.sbs = $a(); //#14732
        $k[$j++] = Infinity; //#14734
        var _Dr = $_.sbs; //#14735
        $k[$j++] = 1; //#14735
        for (var _Ds = 0, _Dt = _Dr.length; _Ds < _Dt; _Ds++) { //#14735
            var _Dv = $k[--$j]; //#14735
            var _Dw = (_Dv == 0) ? 1 : 0; //#14735
            $k[$j++] = _Dv; //#14735
            for (var _Dx = 0, _Dy = $get(_Dr, _Ds); _Dx < _Dy; _Dx++) { //#14735
                $k[$j++] = _Dw //#14735
            } //#14735
        } //#14735
        $astore($a($counttomark() - 1)); //#14736
        var _E1 = $k[--$j]; //#14736
        var _E2 = $k[--$j]; //#14736
        $k[$j++] = _E1; //#14736
        $k[$j++] = _E2; //#14736
        $j--; //#14736
        var _E3 = $k[--$j]; //#14736
        var _E4 = $k[--$j]; //#14736
        $k[$j++] = _E3; //#14736
        $k[$j++] = _E4; //#14736
        $j--; //#14736
        $put($_.rowbits, $_.i, $k[--$j]); //#14737
    } //#14737
    $k[$j++] = Infinity; //#14741
    for (var _E9 = 0, _EA = 81 * $_.sepheight; _E9 < _EA; _E9++) { //#14742
        $k[$j++] = 1; //#14742
    } //#14742
    for (var _ED = 0, _EC = $f($_.r - 2); _ED <= _EC; _ED += 1) { //#14747
        $_.i = _ED; //#14744
        for (var _EF = 0, _EG = $_.rowheight; _EF < _EG; _EF++) { //#14745
            $aload($get($_.rowbits, $_.i)); //#14745
        } //#14745
        for (var _EL = 0, _EM = $_.sepheight; _EL < _EM; _EL++) { //#14746
            for (var _EN = 0, _EO = 10; _EN < _EO; _EN++) { //#14746
                $k[$j++] = 0; //#14746
            } //#14746
            for (var _EP = 0, _EQ = 70; _EP < _EQ; _EP++) { //#14746
                $k[$j++] = 1; //#14746
            } //#14746
            $k[$j++] = 0; //#14746
        } //#14746
    } //#14746
    for (var _ES = 0, _ET = $_.rowheight; _ES < _ET; _ES++) { //#14748
        $aload($get($_.rowbits, $f($_.r - 1))); //#14748
    } //#14748
    for (var _EY = 0, _EZ = 81 * $_.sepheight; _EY < _EZ; _EY++) { //#14749
        $k[$j++] = 1; //#14749
    } //#14749
    $_.pixs = $a(); //#14749
    var _Ef = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $_.pixs],
        ["pixx", 81],
        ["pixy", ~~($_.pixs.length / 81)],
        ["height", (~~($_.pixs.length / 81)) / 72],
        ["width", 81 / 72],
        ["opt", $_.options]
    ]); //#14760
    $k[$j++] = _Ef; //#14763
    if (!$_.dontdraw) { //#14763
        bwipp_renmatrix(); //#14763
    } //#14763
    $_ = Object.getPrototypeOf($_); //#14765
    $_ = Object.getPrototypeOf($_); //#14767
} //bwipp_code16k
function bwipp_code49() {
    $_ = Object.create($_); //#14798
    $_.dontdraw = false; //#14801
    $_.sam = -1; //#14802
    $_.append = false; //#14803
    $_.rows = 0; //#14804
    $_.rowheight = 8; //#14805
    $_.sepheight = 1; //#14806
    $_.parse = false; //#14807
    $_.parsefnc = false; //#14808
    $k[$j++] = $_; //#14810
    bwipp_processoptions(); //#14810
    $_.options = $k[--$j]; //#14810
    $_.barcode = $k[--$j]; //#14811
    if (($_.rows != 0) && (($_.rows < 2) || ($_.rows > 8))) { //#14815
        $k[$j++] = 'bwipp.code49badRows#14814'; //#14814
        $k[$j++] = "Code 49 must have 2 to 8 rows"; //#14814
        bwipp_raiseerror(); //#14814
    } //#14814
    if ($_.rowheight < 8) { //#14819
        $k[$j++] = 'bwipp.code49badRowHeight#14818'; //#14818
        $k[$j++] = "Code 49 must have rowheight of at least 8"; //#14818
        bwipp_raiseerror(); //#14818
    } //#14818
    if ($_.sepheight < 1) { //#14823
        $k[$j++] = 'bwipp.code49badSepHeight#14822'; //#14822
        $k[$j++] = "Code 49 must have sepheight of at least 1"; //#14822
        bwipp_raiseerror(); //#14822
    } //#14822
    if ($_.append && ($_.sam != -1)) { //#14827
        $k[$j++] = 'bwipp.code49samAndAppend#14826'; //#14826
        $k[$j++] = "sam and append cannot be specified together"; //#14826
        bwipp_raiseerror(); //#14826
    } //#14826
    if ($_.sam != -1) { //#14839
        $k[$j++] = true; //#14835
        for (var _A = 0, _B = 1; _A < _B; _A++) { //#14835
            var _C = $_.sam; //#14832
            if ((_C < 12) || (_C > 99)) { //#14832
                $j--; //#14832
                $k[$j++] = false; //#14832
                break; //#14832
            } //#14832
            if (($_.sam % 10) < 2) { //#14833
                $j--; //#14833
                $k[$j++] = false; //#14833
                break; //#14833
            } //#14833
            if ((~~($_.sam / 10)) > ($_.sam % 10)) { //#14834
                $j--; //#14834
                $k[$j++] = false; //#14834
                break; //#14834
            } //#14834
        } //#14834
        if ($nt($k[--$j])) { //#14838
            $k[$j++] = 'bwipp.code49badSAM#14837'; //#14837
            $k[$j++] = "SAM must be formatted as \"NM\" for Nth of M symbols, from 2 to 9 symbols"; //#14837
            bwipp_raiseerror(); //#14837
        } //#14837
    } //#14837
    bwipp_loadctx(bwipp_code49) //#14841
    if (!bwipp_code49.__14845__) { //#14845
        $_ = Object.create($_); //#14845
        $_.s1 = -1; //#14844
        $_.s2 = -2; //#14844
        $_.fn1 = -3; //#14844
        $_.fn2 = -4; //#14844
        $_.fn3 = -5; //#14844
        $_.ns = -6; //#14844
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code49.$ctx[id] = $_[id]); //#14844
        bwipp_code49.__14845__ = 1; //#14844
        $_ = Object.getPrototypeOf($_); //#14844
    } //#14844
    var _N = new Map([
        ["parse", $_.parse],
        ["parsefnc", $_.parsefnc],
        ["FNC1", $_.fn1],
        ["FNC2", $_.fn2],
        ["FNC3", $_.fn3]
    ]); //#14853
    $_.fncvals = _N; //#14854
    $k[$j++] = 'msg'; //#14855
    $k[$j++] = $_.barcode; //#14855
    $k[$j++] = $_.fncvals; //#14855
    bwipp_parseinput(); //#14855
    var _Q = $k[--$j]; //#14855
    $_[$k[--$j]] = _Q; //#14855
    $_.msglen = $_.msg.length; //#14856
    $forall($_.msg, function() { //#14862
        if ($k[--$j] > 127) { //#14861
            $k[$j++] = 'bwipp.code49badCharacter#14860'; //#14860
            $k[$j++] = "Code 49 can only support ASCII characters with values 0 to 127"; //#14860
            bwipp_raiseerror(); //#14860
        } //#14860
    }); //#14860
    if (!bwipp_code49.__14904__) { //#14904
        $_ = Object.create($_); //#14904
        $_.charmap = $a(["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "-", ".", " ", "$", "/", "+", "%", $_.s1, $_.s2, $_.fn1, $_.fn2, $_.fn3, $_.ns]); //#14872
        $_.charvals = new Map; //#14875
        for (var _c = 0; _c <= 48; _c += 1) { //#14881
            $_.i = _c; //#14877
            var _f = $get($_.charmap, $_.i); //#14878
            $k[$j++] = _f; //#14879
            if ($eq($type(_f), 'stringtype')) { //#14879
                var _i = $get($k[--$j], 0); //#14879
                $k[$j++] = _i; //#14879
            } //#14879
            $put($_.charvals, $k[--$j], $_.i); //#14880
        } //#14880
        $_.combos = $a(["1 ", "1A", "1B", "1C", "1D", "1E", "1F", "1G", "1H", "1I", "1J", "1K", "1L", "1M", "1N", "1O", "1P", "1Q", "1R", "1S", "1T", "1U", "1V", "1W", "1X", "1Y", "1Z", "11", "12", "13", "14", "15", "  ", "16", "17", "18", " $", " %", "19", "10", "1-", "1.", "1$", " +", "1/", " -", " .", " /", " 0", " 1", " 2", " 3", " 4", " 5", " 6", " 7", " 8", " 9", "1+", "21", "22", "23", "24", "25", "26", " A", " B", " C", " D", " E", " F", " G", " H", " I", " J", " K", " L", " M", " N", " O", " P", " Q", " R", " S", " T", " U", " V", " W", " X", " Y", " Z", "27", "28", "29", "20", "2-", "2.", "2A", "2B", "2C", "2D", "2E", "2F", "2G", "2H", "2I", "2J", "2K", "2L", "2M", "2N", "2O", "2P", "2Q", "2R", "2S", "2T", "2U", "2V", "2W", "2X", "2Y", "2Z", "2$", "2/", "2+", "2%", "2 "]); //#14893
        for (var _n = 0; _n <= 127; _n += 1) { //#14903
            $_.i = _n; //#14895
            var _q = $get($_.combos, $_.i); //#14896
            $_.c1 = $get(_q, 0); //#14896
            $_.c2 = $get(_q, 1); //#14896
            if ($_.c1 == 49) { //#14899
                $put($_.charvals, $_.i, $a([$get($_.charvals, $_.s1), $get($_.charvals, $_.c2)])); //#14898
            } //#14898
            if ($_.c1 == 50) { //#14902
                $put($_.charvals, $_.i, $a([$get($_.charvals, $_.s2), $get($_.charvals, $_.c2)])); //#14901
            } //#14901
        } //#14901
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code49.$ctx[id] = $_[id]); //#14901
        bwipp_code49.__14904__ = 1; //#14901
        $_ = Object.getPrototypeOf($_); //#14901
    } //#14901
    $_.encodealpha = function() {
        var _1G = $get($_.charvals, $k[--$j]); //#14907
        $k[$j++] = _1G; //#14908
        if ($ne($type(_1G), 'arraytype')) { //#14908
            $astore($a(1)); //#14908
        } //#14908
        var _1J = $k[--$j]; //#14909
        $puti($_.cws, $_.j, _1J); //#14909
        $_.j = _1J.length + $_.j; //#14910
    }; //#14910
    $_.base48 = function() {
        var _1N = $k[--$j]; //#14914
        $k[$j++] = 0; //#14914
        $forall(_1N, function() { //#14914
            var _1O = $k[--$j]; //#14914
            var _1P = $k[--$j]; //#14914
            $k[$j++] = $f($f(_1O - 48) + (_1P * 10)); //#14914
        }); //#14914
        $k[$j++] = Infinity; //#14915
        var _1Q = $k[--$j]; //#14915
        var _1R = $k[--$j]; //#14915
        var _1S = $k[--$j]; //#14915
        $k[$j++] = _1Q; //#14915
        $k[$j++] = _1R; //#14915
        for (var _1T = 0, _1U = $f(_1S - 1); _1T < _1U; _1T++) { //#14915
            var _1V = $k[--$j]; //#14915
            $k[$j++] = _1V % 48; //#14915
            $k[$j++] = ~~(_1V / 48); //#14915
        } //#14915
        var _1W = $a(); //#14915
        $k[$j++] = _1W; //#14916
        $k[$j++] = Infinity; //#14916
        var _1X = $k[--$j]; //#14916
        var _1Y = $k[--$j]; //#14916
        $k[$j++] = _1X; //#14916
        $k[$j++] = _1Y; //#14916
        for (var _1Z = _1Y.length - 1; _1Z >= 0; _1Z -= 1) { //#14916
            var _1a = $k[--$j]; //#14916
            $k[$j++] = $get(_1a, _1Z); //#14916
            $k[$j++] = _1a; //#14916
        } //#14916
        $j--; //#14916
        var _1c = $a(); //#14916
        $puti($_.cws, $_.j, _1c); //#14917
        $_.j = _1c.length + $_.j; //#14918
    }; //#14918
    $_.encodenumeric = function() {
        $_.nums = $k[--$j]; //#14922
        var _1i = $_.nums.length; //#14923
        var _1j = _1i % 5; //#14923
        $k[$j++] = 'pre'; //#14923
        $k[$j++] = _1i; //#14923
        $k[$j++] = _1j; //#14923
        if (_1j != 2) { //#14923
            var _1k = $k[--$j]; //#14923
            var _1l = $k[--$j]; //#14923
            $k[$j++] = $f(_1l - _1k); //#14923
        } else { //#14923
            var _1m = $k[--$j]; //#14923
            var _1n = $k[--$j]; //#14923
            $k[$j++] = $f($f(_1n - _1m) - 5); //#14923
        } //#14923
        var _1o = $k[--$j]; //#14923
        $_[$k[--$j]] = _1o; //#14923
        for (var _1s = 0, _1r = $f($_.pre - 1); _1s <= _1r; _1s += 5) { //#14924
            $k[$j++] = 3; //#14924
            $k[$j++] = $geti($_.nums, _1s, 5); //#14924
            $_.base48(); //#14924
        } //#14924
        $_.nums = $geti($_.nums, $_.pre, $f($_.nums.length - $_.pre)); //#14925
        var _21 = $_.nums.length; //#14927
        $k[$j++] = _21; //#14927
        if (_21 == 1) { //#14927
            $k[$j++] = $get($_.nums, $_.i); //#14927
            $_.encodealpha(); //#14927
        } //#14927
        var _25 = $k[--$j]; //#14928
        $k[$j++] = _25; //#14928
        if (_25 == 3) { //#14928
            $k[$j++] = 2; //#14928
            $k[$j++] = $_.nums; //#14928
            $_.base48(); //#14928
        } //#14928
        var _27 = $k[--$j]; //#14929
        $k[$j++] = _27; //#14929
        if (_27 == 4) { //#14929
            $k[$j++] = 3; //#14929
            $k[$j++] = Infinity; //#14929
            $k[$j++] = 49; //#14929
            $k[$j++] = 48; //#14929
            $aload($_.nums); //#14929
            var _29 = $a(); //#14929
            $k[$j++] = _29; //#14929
            $_.base48(); //#14929
        } //#14929
        if ($k[--$j] == 7) { //#14933
            $k[$j++] = 3; //#14931
            $k[$j++] = Infinity; //#14931
            $k[$j++] = 49; //#14931
            $k[$j++] = 48; //#14931
            $aload($geti($_.nums, 0, 4)); //#14931
            var _2D = $a(); //#14931
            $k[$j++] = _2D; //#14931
            $_.base48(); //#14931
            $k[$j++] = 2; //#14932
            $k[$j++] = $geti($_.nums, 4, 3); //#14932
            $_.base48(); //#14932
        } //#14932
    }; //#14932
    $k[$j++] = Infinity; //#14937
    for (var _2H = 0, _2I = $_.msglen; _2H < _2I; _2H++) { //#14937
        $k[$j++] = 0; //#14937
    } //#14937
    $k[$j++] = 0; //#14937
    $_.numericruns = $a(); //#14937
    for (var _2L = $_.msglen - 1; _2L >= 0; _2L -= 1) { //#14946
        $_.i = _2L; //#14939
        var _2O = $get($_.msg, $_.i); //#14940
        if ((_2O >= 48) && (_2O <= 57)) { //#14944
            $put($_.numericruns, $_.i, $f($get($_.numericruns, $_.i + 1) + 1)); //#14942
        } else { //#14944
            $put($_.numericruns, $_.i, 0); //#14944
        } //#14944
    } //#14944
    $_.cws = $a(($_.msglen * 2) + 1); //#14948
    if (!bwipp_code49.__14961__) { //#14961
        $_ = Object.create($_); //#14961
        $_.samval = $a([12, 22, 13, 23, 33, 14, 24, 34, 44, 15, 25, 35, 45, 55, 16, 26, 36, 46, 56, 66, 17, 27, 37, 47, 57, 67, 77, 18, 28, 38, 48, 58, 68, 78, 88, 19, 29, 39, 49, 59, 69, 79, 89, 99]); //#14960
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code49.$ctx[id] = $_[id]); //#14960
        bwipp_code49.__14961__ = 1; //#14960
        $_ = Object.getPrototypeOf($_); //#14960
    } //#14960
    for (;;) { //#14997
        if ($_.append) { //#14970
            $_.mode = 1; //#14966
            $_.method = "alpha"; //#14967
            $_.i = 0; //#14968
            $_.j = 0; //#14968
            break; //#14969
        } //#14969
        if ($_.sam != -1) { //#14977
            $_.mode = 3; //#14972
            $k[$j++] = $_.cws; //#14973
            $k[$j++] = 0; //#14973
            for (var _2d = 0; _2d <= 43; _2d += 1) { //#14973
                $k[$j++] = _2d; //#14973
                if ($get($_.samval, _2d) != $_.sam) { //#14973
                    $j--; //#14973
                } //#14973
            } //#14973
            var _2h = $k[--$j]; //#14973
            var _2i = $k[--$j]; //#14973
            $put($k[--$j], _2i, $f(_2h + 1)); //#14973
            $_.method = "alpha"; //#14974
            $_.i = 0; //#14975
            $_.j = 1; //#14975
            break; //#14976
        } //#14976
        if ($get($_.numericruns, 0) >= 5) { //#14982
            $_.mode = 2; //#14979
            $_.method = "numeric"; //#14980
            $_.i = 0; //#14980
            $_.j = 0; //#14980
            break; //#14981
        } //#14981
        var _2p = $get($_.charvals, $get($_.msg, 0)); //#14983
        $k[$j++] = _2p; //#14990
        if ($ne($type(_2p), 'arraytype')) { //#14990
            $j--; //#14985
            $_.mode = 0; //#14986
            $_.method = "alpha"; //#14987
            $_.i = 0; //#14988
            $_.j = 0; //#14988
            break; //#14989
        } //#14989
        var _2t = ($get($k[--$j], 0) == 43) ? 4 : 5; //#14992
        $_.mode = _2t; //#14992
        $put($_.cws, 0, $get($get($_.charvals, $get($_.msg, 0)), 1)); //#14993
        $_.method = "alpha"; //#14994
        $_.i = 1; //#14995
        $_.j = 1; //#14995
        break; //#14996
    } //#14996
    for (;;) { //#15024
        if ($_.i == $_.msglen) { //#15001
            break; //#15001
        } //#15001
        for (;;) { //#15023
            if ($eq($_.method, "alpha")) { //#15012
                if ($get($_.numericruns, $_.i) >= 5) { //#15008
                    $k[$j++] = $_.ns; //#15005
                    $_.encodealpha(); //#15005
                    $_.method = "numeric"; //#15006
                    break; //#15007
                } //#15007
                $k[$j++] = $get($_.msg, $_.i); //#15009
                $_.encodealpha(); //#15009
                $_.i = $_.i + 1; //#15010
                break; //#15011
            } //#15011
            if ($eq($_.method, "numeric")) { //#15022
                if ($get($_.numericruns, $_.i) < 5) { //#15018
                    $k[$j++] = $_.ns; //#15015
                    $_.encodealpha(); //#15015
                    $_.method = "alpha"; //#15016
                    break; //#15017
                } //#15017
                $k[$j++] = $geti($_.msg, $_.i, $get($_.numericruns, $_.i)); //#15019
                $_.encodenumeric(); //#15019
                $_.i = $f($_.i + $get($_.numericruns, $_.i)); //#15020
                break; //#15021
            } //#15021
        } //#15021
    } //#15021
    $_.cws = $geti($_.cws, 0, $_.j); //#15025
    if (!bwipp_code49.__15039__) { //#15039
        $_ = Object.create($_); //#15039
        $_.metrics = $a([$a([2, 9]), $a([3, 16]), $a([4, 23]), $a([5, 30]), $a([6, 37]), $a([7, 42]), $a([8, 49])]); //#15038
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code49.$ctx[id] = $_[id]); //#15038
        bwipp_code49.__15039__ = 1; //#15038
        $_ = Object.getPrototypeOf($_); //#15038
    } //#15038
    $_.urows = $_.rows; //#15042
    var _3d = $_.metrics; //#15043
    for (var _3e = 0, _3f = _3d.length; _3e < _3f; _3e++) { //#15051
        $_.m = $get(_3d, _3e); //#15044
        $_.r = $get($_.m, 0); //#15045
        $_.dcws = $get($_.m, 1); //#15046
        $_.okay = true; //#15047
        if (($_.urows != 0) && ($_.urows != $_.r)) { //#15048
            $_.okay = false; //#15048
        } //#15048
        if ($_.cws.length > $_.dcws) { //#15049
            $_.okay = false; //#15049
        } //#15049
        if ($_.okay) { //#15050
            break; //#15050
        } //#15050
    } //#15050
    if (!$_.okay) { //#15055
        $k[$j++] = 'bwipp.code49noValidSymbol#15054'; //#15054
        $k[$j++] = "Maximum length exceeded"; //#15054
        bwipp_raiseerror(); //#15054
    } //#15054
    $k[$j++] = Infinity; //#15058
    $aload($_.cws); //#15058
    for (var _3v = 0, _3w = $f($_.dcws - $_.cws.length); _3v < _3w; _3v++) { //#15058
        $k[$j++] = 48; //#15058
    } //#15058
    $_.cws = $a(); //#15058
    $_.ccs = $a($_.r * 8); //#15061
    $_.j = 0; //#15062
    for (var _42 = 0, _41 = $f($_.r - 2); _42 <= _41; _42 += 1) { //#15069
        $_.i = _42; //#15064
        $_.cc = $geti($_.cws, $_.j, 7); //#15065
        $puti($_.ccs, $_.i * 8, $_.cc); //#15066
        var _4B = $_.cc; //#15067
        $k[$j++] = $_.ccs; //#15067
        $k[$j++] = ($_.i * 8) + 7; //#15067
        $k[$j++] = 0; //#15067
        for (var _4C = 0, _4D = _4B.length; _4C < _4D; _4C++) { //#15067
            var _4F = $k[--$j]; //#15067
            $k[$j++] = $f(_4F + $get(_4B, _4C)); //#15067
        } //#15067
        var _4G = $k[--$j]; //#15067
        var _4H = $k[--$j]; //#15067
        $put($k[--$j], _4H, _4G % 49); //#15067
        $_.j = $_.j + 7; //#15068
    } //#15068
    if ($_.j < $_.dcws) { //#15072
        $puti($_.ccs, $_.ccs.length - 8, $geti($_.cws, $_.j, $f($_.dcws - $_.j))); //#15071
    } //#15071
    $_.cr7 = $f(($f($_.r - 2) * 7) + $_.mode); //#15075
    $put($_.ccs, $_.ccs.length - 2, $_.cr7); //#15076
    if (!bwipp_code49.__15085__) { //#15085
        $_ = Object.create($_); //#15085
        var _4Y = $a([1, 9, 31, 26, 2, 12, 17, 23, 37, 18, 22, 6, 27, 44, 15, 43, 39, 11, 13, 5, 41, 33, 36, 8, 4, 32, 3, 19, 40, 25, 29, 10, 24, 30]); //#15081
        $k[$j++] = _4Y; //#15082
        $k[$j++] = _4Y; //#15082
        $k[$j++] = Infinity; //#15082
        var _4Z = $k[--$j]; //#15082
        var _4b = $geti($k[--$j], 0, 32); //#15082
        $k[$j++] = _4Z; //#15082
        $k[$j++] = 20; //#15082
        $aload(_4b); //#15082
        $_.weightx = $a(); //#15082
        var _4d = $k[--$j]; //#15083
        $k[$j++] = _4d; //#15083
        $k[$j++] = _4d; //#15083
        $k[$j++] = Infinity; //#15083
        var _4e = $k[--$j]; //#15083
        var _4g = $geti($k[--$j], 1, 32); //#15083
        $k[$j++] = _4e; //#15083
        $k[$j++] = 16; //#15083
        $aload(_4g); //#15083
        $_.weighty = $a(); //#15083
        $k[$j++] = Infinity; //#15084
        var _4i = $k[--$j]; //#15084
        var _4k = $geti($k[--$j], 2, 32); //#15084
        $k[$j++] = _4i; //#15084
        $k[$j++] = 38; //#15084
        $aload(_4k); //#15084
        $_.weightz = $a(); //#15084
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code49.$ctx[id] = $_[id]); //#15084
        bwipp_code49.__15085__ = 1; //#15084
        $_ = Object.getPrototypeOf($_); //#15084
    } //#15084
    $_.calccheck = function() {
        $_.weights = $k[--$j]; //#15087
        $_.score = 0; //#15088
        for (var _4q = 0, _4p = (~~(($f($_.r - 1) * 8) / 2)) - 1; _4q <= _4p; _4q += 1) { //#15093
            $_.i = _4q; //#15090
            $_.score = $f((($f(($get($_.ccs, $_.i * 2) * 49) + $get($_.ccs, ($_.i * 2) + 1))) * $get($_.weights, $_.i + 1)) + $_.score); //#15092
        } //#15092
        $k[$j++] = $_.score; //#15094
    }; //#15094
    $_.lastrow = $geti($_.ccs, $_.ccs.length - 8, 8); //#15096
    if ($_.r >= 7) { //#15103
        $k[$j++] = $_.cr7 * $get($_.weightz, 0); //#15100
        $k[$j++] = $_.weightz; //#15100
        $_.calccheck(); //#15100
        var _5A = $k[--$j]; //#15100
        var _5C = $f($k[--$j] + _5A) % 2401; //#15101
        $k[$j++] = ~~(_5C / 49); //#15101
        $k[$j++] = _5C % 49; //#15101
        $astore($a(2)); //#15101
        $puti($_.lastrow, 0, $k[--$j]); //#15102
    } //#15102
    $_.wr1 = $f(($get($_.lastrow, 0) * 49) + $get($_.lastrow, 1)); //#15104
    $k[$j++] = $_.cr7 * $get($_.weighty, 0); //#15107
    $k[$j++] = $_.weighty; //#15107
    $_.calccheck(); //#15107
    var _5O = $k[--$j]; //#15107
    var _5U = ($f($f($k[--$j] + _5O) + ($_.wr1 * $get($_.weighty, $f(($_.r * 4) - 3))))) % 2401; //#15109
    $_.wr2 = _5U; //#15109
    $k[$j++] = ~~(_5U / 49); //#15110
    $k[$j++] = _5U % 49; //#15110
    $astore($a(2)); //#15110
    $puti($_.lastrow, 2, $k[--$j]); //#15111
    $k[$j++] = $_.cr7 * $get($_.weightx, 0); //#15114
    $k[$j++] = $_.weightx; //#15114
    $_.calccheck(); //#15114
    var _5c = $k[--$j]; //#15114
    var _5m = ($f(($f($f($k[--$j] + _5c) + ($_.wr1 * $get($_.weightx, $f(($_.r * 4) - 3))))) + ($_.wr2 * $get($_.weightx, $f(($_.r * 4) - 2))))) % 2401; //#15118
    $k[$j++] = ~~(_5m / 49); //#15118
    $k[$j++] = _5m % 49; //#15118
    $astore($a(2)); //#15118
    $puti($_.lastrow, 4, $k[--$j]); //#15119
    var _5s = $geti($_.ccs, $_.ccs.length - 8, 7); //#15122
    $k[$j++] = 0; //#15122
    for (var _5t = 0, _5u = _5s.length; _5t < _5u; _5t++) { //#15122
        var _5w = $k[--$j]; //#15122
        $k[$j++] = $f(_5w + $get(_5s, _5t)); //#15122
    } //#15122
    $put($_.ccs, $_.ccs.length - 1, $k[--$j] % 49); //#15123
    var _61 = $get($_.options, 'debugcws') !== undefined; //#15125
    if (_61) { //#15125
        $k[$j++] = 'bwipp.debugcws#15125'; //#15125
        $k[$j++] = $_.ccs; //#15125
        bwipp_raiseerror(); //#15125
    } //#15125
    if (!bwipp_code49.__15823__) { //#15823
        $_ = Object.create($_); //#15823
        $_.patterns = $a([$a(["11521132", "25112131", "14212132", "25121221", "14221222", "12412132", "23321221", "12421222", "21521221", "15112222", "15121312", "13312222", "24221311", "13321312", "11512222", "22421311", "11521312", "25112311", "14212312", "23312311", "12412312", "21512311", "16121131", "14321131", "12521131", "15212131", "15221221", "13412131", "13421221", "11612131", "16112221", "16121311", "14312221", "14321311", "12512221", "12521311", "15212311", "13412311", "11612311", "11131135", "31131133", "51131131", "21122134", "41122132", "21131224", "41131222", "11113135", "31113133", "51113131", "11122225", "31122223", "51122221", "11131315", "31131313", "51131311", "21113224", "41113222", "21122314", "41122312", "11113315", "31113313", "51113311", "12131134", "32131132", "21231133", "41231131", "22122133", "42122131", "11222134", "22131223", "42131221", "11231224", "31231222", "12113134", "32113132", "12122224", "32122222", "12131314", "32131312", "21231313", "41231311", "22113223", "42113221", "11213224", "22122313", "42122311", "11222314", "31222312", "12113314", "32113312", "21213313", "41213311", "13131133", "33131131", "22231132", "11331133", "31331131", "23122132", "12222133", "23131222", "12231223", "32231221", "21331222", "13113133", "33113131", "13122223", "33122221", "11313133", "13131313", "33131311", "11322223", "22231312", "11331313", "31331311", "23113222", "12213223", "23122312", "12222313", "32222311", "21322312", "13113313", "33113311", "22213312", "11313313", "31313311", "14131132", "23231131", "12331132", "21431131", "24122131", "13222132", "24131221", "13231222", "11422132", "22331221", "11431222", "14113132", "14122222", "12313132", "14131312", "12322222", "23231311", "12331312", "21431311", "24113221", "13213222", "24122311", "13222312", "11413222", "22322311", "11422312", "14113312", "23213311", "12313312", "21413311", "15131131", "13331131", "14222131", "14231221", "12422131", "12431221", "15113131", "15122221", "13313131", "15131311", "13322221", "11513131", "13331311", "11522221", "14213221", "14222311", "12413221", "12422311", "15113311", "13313311", "11513311", "11141134", "31141132", "21132133", "41132131", "21141223", "41141221", "11123134", "31123132", "11132224", "31132222", "11141314", "31141312", "21114133", "41114131", "21123223", "41123221", "21132313", "41132311", "11114224", "31114222", "11123314", "31123312", "21114313", "41114311", "12141133", "32141131", "21241132", "22132132", "11232133", "22141222", "11241223", "31241221", "12123133", "32123131", "12132223", "32132221", "12141313", "32141311", "21241312", "22114132", "11214133", "22123222", "11223223", "22132312", "11232313", "31232311", "12114223", "32114221", "12123313", "32123311", "21223312", "22114312", "11214313", "31214311", "13141132", "22241131", "11341132", "23132131", "12232132", "23141221", "12241222", "21341221", "13123132", "13132222", "11323132", "13141312", "11332222", "22241311", "11341312", "23114131", "12214132", "23123221", "12223222", "23132311", "12232312", "21332311", "13114222", "13123312", "11314222", "22223311", "11323312", "23114311", "12214312", "21314311", "14141131", "12341131", "13232131", "13241221", "11432131", "14123131", "14132221", "12323131", "14141311", "12332221", "12341311", "13214131", "13223221", "11414131", "13232311", "11423221", "11432311", "14114221", "14123311", "12314221", "12323311", "13214311", "11414311", "11151133", "31151131", "21142132", "21151222", "11133133", "31133131", "11142223", "31142221", "11151313", "31151311", "21124132", "21133222", "21142312", "11115133", "31115131", "11124223", "31124221", "11133313", "31133311", "21115222", "21124312", "12151132", "21251131", "22142131", "11242132", "22151221", "11251222", "12133132", "12142222", "12151312", "21251311", "22124131", "11224132", "22133221", "11233222", "22142311", "11242312", "12115132", "12124222", "12133312", "21233311", "22115221", "11215222", "22124311", "11224312", "13151131", "12242131", "12251221", "13133131", "13142221", "11333131", "13151311", "11342221", "12224131", "12233221", "12242311", "13115131", "13124221", "11315131", "13133311", "11324221", "11333311", "12215221", "12224311", "11161132", "21152131", "21161221", "11143132", "11152222", "11161312", "21134131", "21143221", "21152311", "11125132", "11134222", "11143312", "21116131", "21125221", "21134311", "12161131", "11252131", "12143131", "12152221", "12161311", "11234131", "11243221", "11252311", "12125131", "12134221", "12143311", "11216131", "11225221", "11234311", "11111236", "31111234", "51111232", "21111325", "41111323", "61111321", "11111416", "31111414", "51111412", "31211143", "51211141", "12111235", "32111233", "52111231", "21211234", "41211232", "22111324", "42111322", "11211325", "31211323", "51211321", "12111415", "32111413", "52111411", "21211414", "41211412", "12211144", "32211142", "21311143", "41311141", "13111234", "33111232", "22211233", "42211231", "11311234", "31311232", "23111323", "43111321", "12211324", "32211322", "21311323", "41311321", "13111414", "33111412", "22211413", "42211411", "11311414", "31311412", "13211143", "33211141", "22311142", "11411143", "31411141", "14111233", "34111231", "23211232", "12311233", "32311231", "21411232", "24111322", "13211323", "33211321", "22311322", "11411323", "31411321", "14111413", "34111411", "23211412", "12311413", "32311411", "21411412", "14211142", "23311141", "12411142", "21511141", "15111232", "24211231", "13311232", "22411231", "11511232", "25111321", "14211322", "23311321", "12411322", "21511321", "15111412", "24211411", "13311412", "22411411", "11511412", "15211141", "13411141", "11611141", "16111231", "14311231", "12511231", "15211321", "13411321", "11611321", "16111411", "14311411", "12511411", "21121144", "41121142", "11112145", "31112143", "51112141", "11121235", "31121233", "51121231", "21112234", "41112232", "21121324", "41121322", "11112325", "31112323", "51112321", "11121415", "31121413", "51121411", "21112414", "41112412", "22121143", "42121141", "11221144", "31221142", "12112144", "32112142", "12121234", "32121232", "21221233", "41221231", "22112233", "42112231", "11212234", "22121323", "42121321", "11221324", "31221322", "12112324", "32112322", "12121414", "32121412", "21221413", "41221411", "22112413", "42112411", "11212414", "31212412", "23121142", "12221143", "32221141", "21321142", "13112143", "33112141", "13121233", "33121231", "11312143", "22221232", "11321233", "31321231", "23112232", "12212233", "23121322", "12221323", "32221321", "21321322", "13112323", "33112321", "13121413", "33121411", "11312323", "22221412", "11321413", "31321411", "23112412", "12212413", "32212411", "21312412", "24121141", "13221142", "22321141", "11421142", "14112142", "14121232", "12312142", "23221231", "12321232", "21421231", "24112231", "13212232", "24121321", "13221322", "11412232", "22321321", "11421322", "14112322", "14121412", "12312322", "23221411", "12321412", "21421411", "24112411", "13212412", "22312411", "11412412", "14221141", "12421141", "15112141", "15121231", "13312141", "13321231", "11512141", "11521231", "14212231", "14221321", "12412231", "12421321", "15112321", "15121411", "13312321", "13321411", "11512321", "11521411", "14212411", "12412411", "21131143", "41131141", "11122144", "31122142", "11131234", "31131232", "21113143", "41113141", "21122233", "41122231", "21131323", "41131321", "11113234", "31113232", "11122324", "31122322", "11131414", "31131412", "21113323", "41113321", "21122413", "41122411", "11113414", "31113412", "22131142", "11231143", "31231141", "12122143", "32122141", "12131233", "32131231", "21231232", "22113142", "11213143", "22122232", "11222233", "22131322", "11231323", "31231321", "12113233", "32113231", "12122323", "32122321", "12131413", "32131411", "21231412", "22113322", "11213323", "22122412", "11222413", "31222411", "12113413", "32113411", "21213412", "23131141", "12231142", "21331141", "13122142", "13131232", "11322142", "22231231", "11331232", "23113141", "12213142", "23122231", "12222232", "23131321", "12231322", "21331321", "13113232", "13122322", "11313232", "13131412", "11322322", "22231411", "11331412", "23113321", "12213322", "23122411", "12222412", "21322411", "13113412", "22213411", "11313412", "13231141", "11431141", "14122141", "14131231", "12322141", "12331231", "13213141", "13222231", "11413141", "13231321", "11422231", "11431321", "14113231", "14122321", "12313231", "14131411", "12322321", "12331411", "13213321", "13222411", "11413321", "11422411", "14113411", "12313411", "21141142", "11132143", "31132141", "11141233", "31141231", "21123142", "21132232", "21141322", "11114143", "31114141", "11123233", "31123231", "11132323", "31132321", "11141413", "31141411", "21114232", "21123322", "21132412", "11114323", "31114321", "11123413", "31123411", "22141141", "11241142", "12132142", "12141232", "21241231", "22123141", "11223142", "22132231", "11232232", "22141321", "11241322", "12114142", "12123232", "12132322", "12141412", "21241411", "22114231", "11214232", "22123321", "11223322", "22132411", "11232412", "12114322", "12123412", "21223411", "12241141", "13132141", "13141231", "11332141", "11341231", "12223141", "12232231", "12241321", "13114141", "13123231", "11314141", "13132321", "11323231", "13141411", "11332321", "11341411", "12214231", "12223321", "12232411", "13114321", "13123411", "11314321", "11323411", "21151141", "11142142", "11151232", "21133141", "21142231", "21151321", "11124142", "11133232", "11142322", "11151412", "21115141", "21124231", "21133321", "21142411", "11115232", "11124322", "11133412", "11251141", "12142141", "12151231", "11233141", "11242231", "11251321", "12124141", "12133231", "12142321", "12151411", "11215141", "11224231", "11233321", "11242411", "12115231", "12124321", "12133411", "11152141", "11161231", "11134141", "11143231", "11152321", "11161411", "11116141", "11125231", "11134321", "11143411", "21111244", "41111242", "11111335", "31111333", "51111331", "21111424", "41111422", "11111515", "31111513", "51111511", "21211153", "41211151", "22111243", "42111241", "11211244", "31211242", "12111334", "32111332", "21211333", "41211331", "22111423", "42111421", "11211424", "31211422", "12111514", "32111512", "21211513", "41211511", "22211152", "11311153", "31311151", "23111242", "12211243", "32211241", "21311242", "13111333", "33111331", "22211332", "11311333", "31311331", "23111422", "12211423", "32211421", "21311422", "13111513", "33111511", "22211512", "11311513", "31311511", "23211151", "12311152", "21411151", "24111241", "13211242", "22311241", "11411242", "14111332", "23211331", "12311332", "21411331", "24111421", "13211422", "22311421", "11411422", "14111512", "23211511", "12311512", "21411511", "13311151", "11511151", "14211241", "12411241", "15111331", "13311331", "11511331", "14211421", "12411421", "15111511", "13311511", "11511511", "31121152", "21112153", "41112151", "21121243", "41121241", "11112244", "31112242", "11121334", "31121332", "21112333", "41112331", "21121423", "41121421", "11112424", "31112422", "11121514", "31121512", "21112513", "41112511", "12121153", "32121151", "21221152", "22112152", "11212153", "22121242", "11221243", "31221241", "12112243", "32112241", "12121333", "32121331", "21221332", "22112332", "11212333", "22121422", "11221423", "31221421", "12112423", "32112421", "12121513", "32121511", "21221512", "22112512", "11212513", "31212511", "13121152", "22221151", "11321152", "23112151", "12212152", "23121241", "12221242", "21321241", "13112242", "13121332", "11312242", "22221331", "11321332", "23112331", "12212332", "23121421", "12221422", "21321421", "13112422", "13121512", "11312422", "22221511", "11321512", "23112511", "12212512", "21312511", "14121151", "12321151", "13212151", "13221241", "11412151", "11421241", "14112241", "14121331", "12312241", "12321331", "13212331", "13221421", "11412331", "11421421", "14112421", "14121511", "12312421", "12321511", "13212511", "11412511", "11131153", "31131151", "21122152", "21131242", "11113153", "31113151", "11122243", "31122241", "11131333", "31131331", "21113242", "21122332", "21131422", "11113333", "31113331", "11122423", "31122421", "11131513", "31131511", "21113422", "21122512", "12131152", "21231151", "22122151", "11222152", "22131241", "11231242", "12113152", "12122242", "12131332", "21231331", "22113241", "11213242", "22122331", "11222332", "22131421", "11231422", "12113332", "12122422", "12131512", "21231511", "22113421", "11213422", "22122511", "11222512", "13131151", "11331151", "12222151", "12231241", "13113151", "13122241", "11313151", "13131331", "11322241", "11331331", "12213241", "12222331", "12231421", "13113331", "13122421", "11313331", "13131511", "11322421", "11331511", "12213421", "12222511", "11141152", "21132151", "21141241", "11123152", "11132242", "11141332", "21114151", "21123241", "21132331", "21141421", "11114242", "11123332", "11132422", "11141512", "21114331", "21123421", "21132511", "12141151", "11232151", "11241241", "12123151", "12132241", "12141331", "11214151", "11223241", "11232331", "11241421", "12114241", "12123331", "12132421", "12141511", "11214331", "11223421", "11232511", "11151151", "11133151", "11142241", "11151331", "11115151", "11124241", "11133331", "11142421", "11151511", "11111254", "31111252", "21111343", "41111341", "11111434", "31111432", "21111523", "41111521", "11111614", "31111612", "31211161", "12111253", "32111251", "21211252", "22111342", "11211343", "31211341", "12111433", "32111431", "21211432", "22111522", "11211523", "31211521", "12111613", "32111611", "21211612", "12211162", "21311161", "13111252", "22211251", "11311252", "23111341", "12211342", "21311341", "13111432", "22211431", "11311432", "23111521", "12211522", "21311521", "13111612", "22211611", "11311612", "13211161", "11411161", "14111251", "12311251", "13211341", "11411341", "14111431", "12311431", "13211521", "11411521", "14111611", "12311611", "21121162", "11112163", "31112161", "11121253", "31121251", "21112252", "21121342", "11112343", "31112341", "11121433", "31121431", "21112432", "21121522", "11112523", "31112521", "11121613", "31121611", "22121161", "11221162", "12112162", "12121252", "21221251", "22112251", "11212252", "22121341", "11221342", "12112342", "12121432", "21221431", "22112431", "11212432", "22121521", "11221522", "12112522", "12121612", "21221611", "12221161", "13112161", "13121251", "11312161", "11321251", "32121115", "52121113", "21221116", "41221114", "61221112", "22112116", "42112114", "31212115", "51212113", "13121116", "33121114", "22221115", "42221113", "11321116", "31321114", "51321112", "23112115", "43112113", "12212116", "32212114", "52212112", "21312115", "41312113", "61312111", "14121115", "34121113", "23221114", "43221112", "12321115", "32321113", "52321111", "21421114", "41421112", "24112114", "13212115", "33212113", "22312114", "42312112", "11412115", "31412113", "51412111", "15121114", "24221113", "13321114", "33321112", "22421113", "42421111", "11521114", "31521112", "25112113", "14212114", "34212112", "23312113", "43312111", "12412114", "32412112", "21512113", "41512111", "16121113", "25221112", "14321113", "34321111", "23421112", "12521113", "32521111", "15212113", "24312112", "13412113", "33412111", "22512112", "11612113", "31612111", "31131115", "51131113", "21122116", "41122114", "61122112", "31113115", "51113113", "12131116", "32131114", "52131112", "21231115", "41231113", "61231111", "22122115", "42122113", "11222116", "31222114", "51222112", "12113116", "32113114", "52113112", "21213115", "41213113", "61213111", "13131115", "33131113", "22231114", "42231112", "11331115", "31331113", "51331111", "23122114", "43122112", "12222115", "32222113", "52222111", "21322114", "41322112", "13113115", "33113113", "22213114", "42213112", "11313115", "31313113", "51313111", "14131114", "34131112", "23231113", "43231111", "12331114", "32331112", "21431113", "41431111", "24122113", "13222114", "33222112", "22322113", "42322111", "11422114", "31422112", "14113114", "34113112", "23213113", "43213111", "12313114", "32313112", "21413113", "41413111", "15131113", "24231112", "13331113", "33331111", "22431112", "25122112", "14222113", "34222111", "23322112", "12422113", "32422111", "21522112", "15113113", "24213112", "13313113", "33313111", "22413112", "11513113", "31513111", "16131112", "25231111", "14331112", "23431111", "15222112", "24322111", "13422112", "22522111", "16113112", "25213111", "14313112", "23413111", "12513112", "21613111", "11141116", "31141114", "51141112", "21132115", "41132113", "61132111", "11123116", "31123114", "51123112", "21114115", "41114113", "61114111", "12141115", "32141113", "52141111", "21241114", "41241112", "22132114", "42132112", "11232115", "31232113", "51232111", "12123115", "32123113", "52123111", "21223114", "41223112", "22114114", "42114112", "11214115", "31214113", "51214111", "13141114", "33141112", "22241113", "42241111", "11341114", "31341112", "23132113", "43132111", "12232114", "32232112", "21332113", "41332111", "13123114", "33123112", "22223113", "42223111", "11323114", "31323112", "23114113", "43114111", "12214114", "32214112", "21314113", "41314111", "14141113", "34141111", "23241112", "12341113", "32341111", "24132112", "13232113", "33232111", "22332112", "11432113", "31432111", "14123113", "34123111", "23223112", "12323113", "32323111", "21423112", "24114112", "13214113", "33214111", "22314112", "11414113", "31414111", "15141112", "24241111", "13341112", "25132111", "14232112", "23332111", "12432112", "15123112", "24223111", "13323112", "22423111", "11523112", "25114111", "14214112", "23314111", "12414112", "21514111", "16141111", "14341111", "15232111", "13432111", "16123111", "14323111", "12523111", "15214111", "13414111", "11614111", "11151115", "31151113", "51151111", "21142114", "41142112", "11133115", "31133113", "51133111", "21124114", "41124112", "11115115", "31115113", "51115111", "12151114", "32151112", "21251113", "41251111", "22142113", "42142111", "11242114", "31242112", "12133114", "32133112", "21233113", "41233111", "22124113", "42124111", "11224114", "31224112", "12115114", "32115112", "21215113", "41215111", "13151113", "33151111", "22251112", "23142112", "12242113", "32242111", "21342112", "13133113", "33133111", "22233112", "11333113", "31333111", "23124112", "12224113", "32224111", "21324112", "13115113", "33115111", "22215112", "11315113", "31315111", "14151112", "23251111", "24142111", "13242112", "22342111", "14133112", "23233111", "12333112", "21433111", "24124111", "13224112", "22324111", "11424112", "14115112", "23215111", "12315112", "21415111", "15151111", "14242111", "15133111", "13333111", "14224111", "12424111", "15115111", "13315111", "11515111", "11161114", "31161112", "21152113", "41152111", "11143114", "31143112", "21134113", "41134111", "11125114", "31125112", "21116113", "41116111", "12161113", "32161111", "22152112", "11252113", "31252111", "12143113", "32143111", "21243112", "22134112", "11234113", "31234111", "12125113", "32125111", "21225112", "22116112", "11216113", "31216111", "13161112", "23152111", "12252112", "13143112", "22243111", "11343112", "23134111", "12234112", "21334111", "13125112", "22225111", "11325112", "23116111", "12216112", "21316111", "14161111", "13252111", "14143111", "12343111", "13234111", "11434111", "14125111", "12325111", "13216111", "11416111", "31111216", "51111214", "31211125", "51211123", "32111215", "52111213", "21211216", "41211214", "61211212", "12211126", "32211124", "52211122", "21311125", "41311123", "61311121", "13111216", "33111214", "22211215", "42211213", "11311216", "31311214", "51311212", "13211125", "33211123", "22311124", "42311122", "11411125", "31411123", "51411121", "14111215", "34111213", "23211214", "43211212", "12311215", "32311213", "52311211", "21411214", "41411212", "14211124", "34211122", "23311123", "43311121", "12411124", "32411122", "21511123", "41511121", "15111214", "24211213", "13311214", "33311212", "22411213", "42411211", "11511214", "31511212", "15211123", "24311122", "13411123", "33411121", "22511122", "11611123", "31611121", "16111213", "25211212", "14311213", "34311211", "23411212", "12511213", "32511211", "21611212", "21121126", "41121124", "61121122", "31112125", "51112123", "31121215", "51121213", "21112216", "41112214", "61112212", "22121125", "42121123", "11221126", "31221124", "51221122", "12112126", "32112124", "52112122", "12121216", "32121214", "52121212", "21221215", "41221213", "61221211", "22112215", "42112213", "11212216", "31212214", "51212212", "23121124", "43121122", "12221125", "32221123", "52221121", "21321124", "41321122", "13112125", "33112123", "13121215", "33121213", "11312125", "22221214", "42221212", "11321215", "31321213", "51321211", "23112214", "43112212", "12212215", "32212213", "52212211", "21312214", "41312212", "24121123", "13221124", "33221122", "22321123", "42321121", "11421124", "31421122", "14112124", "34112122", "14121214", "34121212", "12312124", "23221213", "43221211", "12321214", "32321212", "21421213", "41421211", "24112213", "13212214", "33212212", "22312213", "42312211", "11412214", "31412212", "25121122", "14221123", "34221121", "23321122", "12421123", "32421121", "21521122", "15112123", "15121213", "13312123", "24221212", "13321213", "33321211", "11512123", "22421212", "11521213", "31521211", "25112212", "14212213", "34212211", "23312212", "12412213", "32412211", "21512212", "15221122", "24321121", "13421122", "22521121", "16112122", "16121212", "14312122", "25221211", "14321212", "12512122", "23421211", "12521212", "15212212", "24312211", "13412212", "22512211", "11612212", "21131125", "41131123", "61131121", "11122126", "31122124", "51122122", "11131216", "31131214", "51131212", "21113125", "41113123", "61113121", "21122215", "41122213", "61122211", "11113216", "31113214", "51113212", "22131124", "42131122", "11231125", "31231123", "51231121", "12122125", "32122123", "52122121", "12131215", "32131213", "52131211", "21231214", "41231212", "22113124", "42113122", "11213125", "22122214", "42122212", "11222215", "31222213", "51222211", "12113215", "32113213", "52113211", "21213214", "41213212", "23131123", "43131121", "12231124", "32231122", "21331123", "41331121", "13122124", "33122122", "13131214", "33131212", "11322124", "22231213", "42231211", "11331214", "31331212", "23113123", "43113121", "12213124", "23122213", "43122211", "12222214", "32222212", "21322213", "41322211", "13113214", "33113212", "22213213", "42213211", "11313214", "31313212", "24131122", "13231123", "33231121", "22331122", "11431123", "31431121", "14122123", "34122121", "14131213", "34131211", "12322123", "23231212", "12331213", "32331211", "21431212", "24113122", "13213123", "24122212", "13222213", "33222211", "11413123", "22322212", "11422213", "31422211", "14113213", "34113211", "23213212", "12313213", "32313211", "21413212", "25131121", "14231122", "23331121", "12431122", "15122122", "15131212", "13322122", "24231211", "13331212", "11522122", "22431211", "25113121", "14213122", "25122211", "14222212", "12413122", "23322211", "12422212", "21522211", "15113212", "24213211", "13313212", "22413211", "11513212", "15231121", "13431121", "16122121", "16131211", "14322121", "14331211", "12522121", "15213121", "15222211", "13413121", "13422211", "11613121", "16113211", "14313211", "12513211", "21141124", "41141122", "11132125", "31132123", "51132121", "11141215", "31141213", "51141211", "21123124", "41123122", "21132214", "41132212", "11114125", "31114123", "51114121", "11123215", "31123213", "51123211", "21114214", "41114212", "22141123", "42141121", "11241124", "31241122", "12132124", "32132122", "12141214", "32141212", "21241213", "41241211", "22123123", "42123121", "11223124", "22132213", "42132211", "11232214", "31232212", "12114124", "32114122", "12123214", "32123212", "21223213", "41223211", "22114213", "42114211", "11214214", "31214212", "23141122", "12241123", "32241121", "21341122", "13132123", "33132121", "13141213", "33141211", "11332123", "22241212", "11341213", "31341211", "23123122", "12223123", "23132212", "12232213", "32232211", "21332212", "13114123", "33114121", "13123213", "33123211", "11314123", "22223212", "11323213", "31323211", "23114212", "12214213", "32214211", "21314212", "24141121", "13241122", "22341121", "14132122", "14141212", "12332122", "23241211", "12341212", "24123121", "13223122", "24132211", "13232212", "11423122", "22332211", "11432212", "14114122", "14123212", "12314122", "23223211", "12323212", "21423211", "24114211", "13214212", "22314211", "11414212", "14241121", "15132121", "15141211", "13332121", "13341211", "14223121", "14232211", "12423121", "12432211", "15114121", "15123211", "13314121", "13323211", "11514121", "11523211", "14214211", "12414211", "21151123", "41151121", "11142124", "31142122", "11151214", "31151212", "21133123", "41133121", "21142213", "41142211", "11124124", "31124122", "11133214", "31133212", "21115123", "41115121", "21124213", "41124211", "11115214", "31115212", "22151122", "11251123", "31251121", "12142123", "32142121", "12151213", "32151211", "21251212", "22133122", "11233123", "22142212", "11242213", "31242211", "12124123", "32124121", "12133213", "32133211", "21233212", "22115122", "11215123", "22124212", "11224213", "31224211", "12115213", "32115211", "21215212", "23151121", "12251122", "13142122", "13151212", "11342122", "22251211", "23133121", "12233122", "23142211", "12242212", "21342211", "13124122", "13133212", "11324122", "22233211", "11333212", "23115121", "12215122", "23124211", "12224212", "21324211", "13115212", "22215211", "11315212", "13251121", "14142121", "14151211", "12342121", "13233121", "13242211", "11433121", "14124121", "14133211", "12324121", "12333211", "13215121", "13224211", "11415121", "11424211", "14115211", "12315211", "21161122", "11152123", "31152121", "11161213", "31161211", "21143122", "21152212", "11134123", "31134121", "11143213", "31143211", "21125122", "21134212", "11116123", "31116121", "11125213", "31125211", "22161121", "12152122", "12161212", "22143121", "11243122", "22152211", "11252212", "12134122", "12143212", "21243211", "22125121", "11225122", "22134211", "11234212", "12116122", "12125212", "21225211", "13152121", "13161211", "12243121", "12252211", "13134121", "13143211", "11334121", "11343211", "12225121", "12234211", "13116121", "13125211", "11316121", "11325211", "21111226", "41111224", "61111222", "31111315", "51111313", "21211135", "41211133", "61211131", "22111225", "42111223", "11211226", "31211224", "51211222", "12111316", "32111314", "52111312", "21211315", "41211313", "61211311", "22211134", "42211132", "11311135", "31311133", "51311131", "23111224", "43111222", "12211225", "32211223", "52211221", "21311224", "41311222", "13111315", "33111313", "22211314", "42211312", "11311315", "31311313", "51311311", "23211133", "43211131", "12311134", "32311132", "21411133", "41411131", "24111223", "13211224", "33211222", "22311223", "42311221", "11411224", "31411222", "14111314", "34111312", "23211313", "43211311", "12311314", "32311312", "21411313", "41411311", "24211132", "13311133", "33311131", "22411132", "11511133", "31511131", "25111222", "14211223", "34211221", "23311222", "12411223", "32411221", "21511222", "15111313", "24211312", "13311313", "33311311", "22411312", "11511313", "31511311", "25211131", "14311132", "23411131", "12511132", "21611131", "15211222", "24311221", "13411222", "22511221", "11611222", "16111312", "25211311", "14311312", "23411311", "12511312", "21611311", "31121134", "51121132", "21112135", "41112133", "61112131", "21121225", "41121223", "61121221", "11112226", "31112224", "51112222", "11121316", "31121314", "51121312", "21112315", "41112313", "61112311", "12121135", "32121133", "52121131", "21221134", "41221132", "22112134", "42112132", "11212135", "22121224", "42121222", "11221225", "31221223", "51221221", "12112225", "32112223", "52112221", "12121315", "32121313", "52121311", "21221314", "41221312", "22112314", "42112312", "11212315", "31212313", "51212311", "13121134", "33121132", "22221133", "42221131", "11321134", "31321132", "23112133", "43112131", "12212134", "23121223", "43121221", "12221224", "32221222", "21321223", "41321221", "13112224", "33112222", "13121314", "33121312", "11312224", "22221313", "42221311", "11321314", "31321312", "23112313", "43112311", "12212314", "32212312", "21312313", "41312311", "14121133", "34121131", "23221132", "12321133", "32321131", "21421132", "24112132", "13212133", "24121222", "13221223", "33221221", "11412133", "22321222", "11421223", "31421221", "14112223", "34112221", "14121313", "34121311", "12312223", "23221312", "12321313", "32321311", "21421312", "24112312", "13212313", "33212311", "22312312", "11412313", "31412311", "15121132", "24221131", "13321132", "22421131"]), $a(["22121116", "42121114", "31221115", "51221113", "32112115", "52112113", "21212116", "41212114", "61212112", "23121115", "43121113", "12221116", "32221114", "52221112", "21321115", "41321113", "61321111", "13112116", "33112114", "22212115", "42212113", "11312116", "31312114", "51312112", "24121114", "13221115", "33221113", "22321114", "42321112", "11421115", "31421113", "51421111", "14112115", "34112113", "23212114", "43212112", "12312115", "32312113", "52312111", "21412114", "41412112", "25121113", "14221114", "34221112", "23321113", "43321111", "12421114", "32421112", "21521113", "41521111", "15112114", "24212113", "13312114", "33312112", "22412113", "42412111", "11512114", "31512112", "15221113", "24321112", "13421113", "33421111", "22521112", "16112113", "25212112", "14312113", "34312111", "23412112", "12512113", "32512111", "21612112", "21131116", "41131114", "61131112", "31122115", "51122113", "21113116", "41113114", "61113112", "22131115", "42131113", "11231116", "31231114", "51231112", "12122116", "32122114", "52122112", "21222115", "41222113", "61222111", "22113115", "42113113", "11213116", "31213114", "51213112", "23131114", "43131112", "12231115", "32231113", "52231111", "21331114", "41331112", "13122115", "33122113", "22222114", "42222112", "11322115", "31322113", "51322111", "23113114", "43113112", "12213115", "32213113", "52213111", "21313114", "41313112", "24131113", "13231114", "33231112", "22331113", "42331111", "11431114", "31431112", "14122114", "34122112", "23222113", "43222111", "12322114", "32322112", "21422113", "41422111", "24113113", "13213114", "33213112", "22313113", "42313111", "11413114", "31413112", "25131112", "14231113", "34231111", "23331112", "12431113", "32431111", "15122113", "24222112", "13322113", "33322111", "22422112", "11522113", "31522111", "25113112", "14213113", "34213111", "23313112", "12413113", "32413111", "21513112", "15231112", "24331111", "13431112", "16122112", "25222111", "14322112", "23422111", "12522112", "15213112", "24313111", "13413112", "22513111", "11613112", "21141115", "41141113", "61141111", "11132116", "31132114", "51132112", "21123115", "41123113", "61123111", "11114116", "31114114", "51114112", "22141114", "42141112", "11241115", "31241113", "51241111", "12132115", "32132113", "52132111", "21232114", "41232112", "22123114", "42123112", "11223115", "31223113", "51223111", "12114115", "32114113", "52114111", "21214114", "41214112", "23141113", "43141111", "12241114", "32241112", "21341113", "41341111", "13132114", "33132112", "22232113", "42232111", "11332114", "31332112", "23123113", "43123111", "12223114", "32223112", "21323113", "41323111", "13114114", "33114112", "22214113", "42214111", "11314114", "31314112", "24141112", "13241113", "33241111", "22341112", "14132113", "34132111", "23232112", "12332113", "32332111", "21432112", "24123112", "13223113", "33223111", "22323112", "11423113", "31423111", "14114113", "34114111", "23214112", "12314113", "32314111", "21414112", "25141111", "14241112", "23341111", "15132112", "24232111", "13332112", "22432111", "25123111", "14223112", "23323111", "12423112", "21523111", "15114112", "24214111", "13314112", "22414111", "11514112", "15241111", "16132111", "14332111", "15223111", "13423111", "16114111", "14314111", "12514111", "21151114", "41151112", "11142115", "31142113", "51142111", "21133114", "41133112", "11124115", "31124113", "51124111", "21115114", "41115112", "22151113", "42151111", "11251114", "31251112", "12142114", "32142112", "21242113", "41242111", "22133113", "42133111", "11233114", "31233112", "12124114", "32124112", "21224113", "41224111", "22115113", "42115111", "11215114", "31215112", "23151112", "12251113", "32251111", "13142113", "33142111", "22242112", "11342113", "31342111", "23133112", "12233113", "32233111", "21333112", "13124113", "33124111", "22224112", "11324113", "31324111", "23115112", "12215113", "32215111", "21315112", "24151111", "13251112", "14142112", "23242111", "12342112", "24133111", "13233112", "22333111", "11433112", "14124112", "23224111", "12324112", "21424111", "24115111", "13215112", "22315111", "11415112", "14251111", "15142111", "13342111", "14233111", "12433111", "15124111", "13324111", "11524111", "14215111", "12415111", "21161113", "41161111", "11152114", "31152112", "21143113", "41143111", "11134114", "31134112", "21125113", "41125111", "11116114", "31116112", "22161112", "12152113", "32152111", "21252112", "22143112", "11243113", "31243111", "12134113", "32134111", "21234112", "22125112", "11225113", "31225111", "12116113", "32116111", "21216112", "23161111", "13152112", "22252111", "23143111", "12243112", "21343111", "13134112", "22234111", "11334112", "23125111", "12225112", "21325111", "13116112", "22216111", "11316112", "14152111", "13243111", "14134111", "12334111", "13225111", "11425111", "14116111", "12316111", "41111215", "61111213", "21211126", "41211124", "61211122", "22111216", "42111214", "31211215", "51211213", "22211125", "42211123", "11311126", "31311124", "51311122", "23111215", "43111213", "12211216", "32211214", "52211212", "21311215", "41311213", "61311211", "23211124", "43211122", "12311125", "32311123", "52311121", "21411124", "41411122", "24111214", "13211215", "33211213", "22311214", "42311212", "11411215", "31411213", "51411211", "24211123", "13311124", "33311122", "22411123", "42411121", "11511124", "31511122", "25111213", "14211214", "34211212", "23311213", "43311211", "12411214", "32411212", "21511213", "41511211", "25211122", "14311123", "34311121", "23411122", "12511123", "32511121", "21611122", "15211213", "24311212", "13411213", "33411211", "22511212", "11611213", "31611211", "31121125", "51121123", "21112126", "41112124", "61112122", "21121216", "41121214", "61121212", "31112215", "51112213", "12121126", "32121124", "52121122", "21221125", "41221123", "61221121", "22112125", "42112123", "11212126", "22121215", "42121213", "11221216", "31221214", "51221212", "12112216", "32112214", "52112212", "21212215", "41212213", "61212211", "13121125", "33121123", "22221124", "42221122", "11321125", "31321123", "51321121", "23112124", "43112122", "12212125", "23121214", "43121212", "12221215", "32221213", "52221211", "21321214", "41321212", "13112215", "33112213", "22212214", "42212212", "11312215", "31312213", "51312211", "14121124", "34121122", "23221123", "43221121", "12321124", "32321122", "21421123", "41421121", "24112123", "13212124", "24121213", "13221214", "33221212", "11412124", "22321213", "42321211", "11421214", "31421212", "14112214", "34112212", "23212213", "43212211", "12312214", "32312212", "21412213", "41412211", "15121123", "24221122", "13321123", "33321121", "22421122", "11521123", "31521121", "25112122", "14212123", "25121212", "14221213", "34221211", "12412123", "23321212", "12421213", "32421211", "21521212", "15112213", "24212212", "13312213", "33312211", "22412212", "11512213", "31512211", "16121122", "25221121", "14321122", "23421121", "12521122", "15212122", "15221212", "13412122", "24321211", "13421212", "11612122", "22521211", "16112212", "25212211", "14312212", "23412211", "12512212", "21612211", "11131126", "31131124", "51131122", "21122125", "41122123", "61122121", "21131215", "41131213", "61131211", "11113126", "31113124", "51113122", "11122216", "31122214", "51122212", "21113215", "41113213", "61113211", "12131125", "32131123", "52131121", "21231124", "41231122", "22122124", "42122122", "11222125", "22131214", "42131212", "11231215", "31231213", "51231211", "12113125", "32113123", "52113121", "12122215", "32122213", "52122211", "21222214", "41222212", "22113214", "42113212", "11213215", "31213213", "51213211", "13131124", "33131122", "22231123", "42231121", "11331124", "31331122", "23122123", "43122121", "12222124", "23131213", "43131211", "12231214", "32231212", "21331213", "41331211", "13113124", "33113122", "13122214", "33122212", "11313124", "22222213", "42222211", "11322214", "31322212", "23113213", "43113211", "12213214", "32213212", "21313213", "41313211", "14131123", "34131121", "23231122", "12331123", "32331121", "21431122", "24122122", "13222123", "24131212", "13231213", "33231211", "11422123", "22331212", "11431213", "31431211", "14113123", "34113121", "14122213", "34122211", "12313123", "23222212", "12322213", "32322211", "21422212", "24113212", "13213213", "33213211", "22313212", "11413213", "31413211", "15131122", "24231121", "13331122", "22431121", "25122121", "14222122", "25131211", "14231212", "12422122", "23331211", "12431212", "15113122", "15122212", "13313122", "24222211", "13322212", "11513122", "22422211", "11522212", "25113211", "14213212", "23313211", "12413212", "21513211", "16131121", "14331121", "15222121", "15231211", "13422121", "13431211", "16113121", "16122211", "14313121", "14322211", "12513121", "12522211", "15213211", "13413211", "11613211", "11141125", "31141123", "51141121", "21132124", "41132122", "21141214", "41141212", "11123125", "31123123", "51123121", "11132215", "31132213", "51132211", "21114124", "41114122", "21123214", "41123212", "11114215", "31114213", "51114211", "12141124", "32141122", "21241123", "41241121", "22132123", "42132121", "11232124", "22141213", "42141211", "11241214", "31241212", "12123124", "32123122", "12132214", "32132212", "21232213", "41232211", "22114123", "42114121", "11214124", "22123213", "42123211", "11223214", "31223212", "12114214", "32114212", "21214213", "41214211", "13141123", "33141121", "22241122", "11341123", "31341121", "23132122", "12232123", "23141212", "12241213", "32241211", "21341212", "13123123", "33123121", "13132213", "33132211", "11323123", "22232212", "11332213", "31332211", "23114122", "12214123", "23123212", "12223213", "32223211", "21323212", "13114213", "33114211", "22214212", "11314213", "31314211", "14141122", "23241121", "12341122", "24132121", "13232122", "24141211", "13241212", "11432122", "22341211", "14123122", "14132212", "12323122", "23232211", "12332212", "21432211", "24114121", "13214122", "24123211", "13223212", "11414122", "22323211", "11423212", "14114212", "23214211", "12314212", "21414211", "15141121", "13341121", "14232121", "14241211", "12432121", "15123121", "15132211", "13323121", "13332211", "11523121", "14214121", "14223211", "12414121", "12423211", "15114211", "13314211", "11514211", "11151124", "31151122", "21142123", "41142121", "21151213", "41151211", "11133124", "31133122", "11142214", "31142212", "21124123", "41124121", "21133213", "41133211", "11115124", "31115122", "11124214", "31124212", "21115213", "41115211", "12151123", "32151121", "21251122", "22142122", "11242123", "22151212", "11251213", "31251211", "12133123", "32133121", "12142213", "32142211", "21242212", "22124122", "11224123", "22133212", "11233213", "31233211", "12115123", "32115121", "12124213", "32124211", "21224212", "22115212", "11215213", "31215211", "13151122", "22251121", "23142121", "12242122", "23151211", "12251212", "13133122", "13142212", "11333122", "22242211", "11342212", "23124121", "12224122", "23133211", "12233212", "21333211", "13115122", "13124212", "11315122", "22224211", "11324212", "23115211", "12215212", "21315211", "14151121", "13242121", "13251211", "14133121", "14142211", "12333121", "12342211", "13224121", "13233211", "11424121", "11433211", "14115121", "14124211", "12315121", "12324211", "13215211", "11415211", "11161123", "31161121", "21152122", "21161212", "11143123", "31143121", "11152213", "31152211", "21134122", "21143212", "11125123", "31125121", "11134213", "31134211", "21116122", "21125212", "12161122", "22152121", "11252122", "22161211", "12143122", "12152212", "21252211", "22134121", "11234122", "22143211", "11243212", "12125122", "12134212", "21234211", "22116121", "11216122", "22125211", "11225212", "13161121", "12252121", "13143121", "13152211", "11343121", "12234121", "12243211", "13125121", "13134211", "11325121", "11334211", "12216121", "12225211", "31111225", "51111223", "21111316", "41111314", "61111312", "31211134", "51211132", "12111226", "32111224", "52111222", "21211225", "41211223", "61211221", "22111315", "42111313", "11211316", "31211314", "51211312", "12211135", "32211133", "52211131", "21311134", "41311132", "13111225", "33111223", "22211224", "42211222", "11311225", "31311223", "51311221", "23111314", "43111312", "12211315", "32211313", "52211311", "21311314", "41311312", "13211134", "33211132", "22311133", "42311131", "11411134", "31411132", "14111224", "34111222", "23211223", "43211221", "12311224", "32311222", "21411223", "41411221", "24111313", "13211314", "33211312", "22311313", "42311311", "11411314", "31411312", "14211133", "34211131", "23311132", "12411133", "32411131", "21511132", "15111223", "24211222", "13311223", "33311221", "22411222", "11511223", "31511221", "25111312", "14211313", "34211311", "23311312", "12411313", "32411311", "21511312", "15211132", "24311131", "13411132", "22511131", "11611132", "16111222", "25211221", "14311222", "23411221", "12511222", "21611221", "15211312", "24311311", "13411312", "22511311", "11611312", "21121135", "41121133", "61121131", "11112136", "31112134", "51112132", "11121226", "31121224", "51121222", "21112225", "41112223", "61112221", "21121315", "41121313", "61121311", "11112316", "31112314", "51112312", "22121134", "42121132", "11221135", "31221133", "51221131", "12112135", "32112133", "52112131", "12121225", "32121223", "52121221", "21221224", "41221222", "22112224", "42112222", "11212225", "22121314", "42121312", "11221315", "31221313", "51221311", "12112315", "32112313", "52112311", "21212314", "41212312", "23121133", "43121131", "12221134", "32221132", "21321133", "41321131", "13112134", "33112132", "13121224", "33121222", "11312134", "22221223", "42221221", "11321224", "31321222", "23112223", "43112221", "12212224", "23121313", "43121311", "12221314", "32221312", "21321313", "41321311", "13112314", "33112312", "22212313", "42212311", "11312314", "31312312", "24121132", "13221133", "33221131", "22321132", "11421133", "31421131", "14112133", "34112131", "14121223", "34121221", "12312133", "23221222", "12321223", "32321221", "21421222", "24112222", "13212223", "24121312", "13221313", "33221311", "11412223", "22321312", "11421313", "31421311", "14112313", "34112311", "23212312", "12312313", "32312311", "21412312", "25121131", "14221132", "23321131", "12421132", "21521131", "15112132", "15121222", "13312132", "24221221", "13321222", "11512132", "22421221", "11521222", "25112221", "14212222", "25121311", "14221312", "12412222", "23321311", "12421312", "21521311", "15112312", "24212311", "13312312", "22412311", "11512312", "15221131", "13421131", "16112131", "16121221", "14312131", "14321221", "12512131", "12521221", "15212221", "15221311", "13412221", "13421311", "11612221", "16112311", "14312311", "12512311", "21131134", "41131132", "11122135", "31122133", "51122131", "11131225", "31131223", "51131221", "21113134", "41113132", "21122224", "41122222", "21131314", "41131312", "11113225", "31113223", "51113221", "11122315", "31122313", "51122311", "21113314", "41113312", "22131133", "42131131", "11231134", "31231132", "12122134", "32122132", "12131224", "32131222", "21231223", "41231221", "22113133", "42113131", "11213134", "22122223", "42122221", "11222224", "22131313", "42131311", "11231314", "31231312", "12113224", "32113222", "12122314", "32122312", "21222313", "41222311", "22113313", "42113311", "11213314", "31213312", "23131132", "12231133", "32231131", "21331132", "13122133", "33122131", "13131223", "33131221", "11322133", "22231222", "11331223", "31331221", "23113132", "12213133", "23122222", "12222223", "23131312", "12231313", "32231311", "21331312", "13113223", "33113221", "13122313", "33122311", "11313223", "22222312", "11322313", "31322311", "23113312", "12213313", "32213311", "21313312", "24131131", "13231132", "22331131", "11431132", "14122132", "14131222", "12322132", "23231221", "12331222", "21431221", "24113131", "13213132", "24122221", "13222222", "24131311", "11413132", "13231312", "11422222", "22331311", "11431312", "14113222", "14122312", "12313222", "23222311", "12322312", "21422311", "24113311", "13213312", "22313311", "11413312", "14231131", "12431131", "15122131", "15131221", "13322131", "13331221", "11522131", "14213131", "14222221", "12413131", "14231311", "12422221", "12431311", "15113221", "15122311", "13313221", "13322311", "11513221", "11522311", "14213311", "12413311", "21141133", "41141131", "11132134", "31132132", "11141224", "31141222", "21123133", "41123131", "21132223", "41132221", "21141313", "41141311", "11114134", "31114132", "11123224", "31123222", "11132314", "31132312", "21114223", "41114221", "21123313", "41123311", "11114314", "31114312", "22141132", "11241133", "31241131", "12132133", "32132131", "12141223", "32141221", "21241222", "22123132", "11223133", "22132222", "11232223", "22141312", "11241313", "31241311", "12114133", "32114131", "12123223", "32123221", "12132313", "32132311", "21232312", "22114222", "11214223", "22123312", "11223313", "31223311", "12114313", "32114311", "21214312", "23141131", "12241132", "21341131", "13132132", "13141222", "11332132", "22241221", "11341222", "23123131", "12223132", "23132221", "12232222", "23141311", "12241312", "21341311", "13114132", "13123222", "11314132", "13132312", "11323222", "22232311", "11332312", "23114221", "12214222", "23123311", "12223312", "21323311", "13114312", "22214311", "11314312", "13241131", "14132131", "14141221", "12332131", "12341221", "13223131", "13232221", "11423131", "13241311", "11432221", "14114131", "14123221", "12314131", "14132311", "12323221", "12332311", "13214221", "13223311", "11414221", "11423311", "14114311", "12314311", "21151132", "11142133", "31142131", "11151223", "31151221", "21133132", "21142222", "21151312", "11124133", "31124131", "11133223", "31133221", "11142313", "31142311", "21115132", "21124222", "21133312", "11115223", "31115221", "11124313", "31124311", "22151131", "11251132", "12142132", "12151222", "21251221", "22133131", "11233132", "22142221", "11242222", "22151311", "11251312", "12124132", "12133222", "12142312", "21242311", "22115131", "11215132", "22124221", "11224222", "22133311", "11233312", "12115222", "12124312", "21224311", "12251131", "13142131", "13151221", "11342131", "12233131", "12242221", "12251311", "13124131", "13133221", "11324131", "13142311", "11333221", "11342311", "12215131", "12224221", "12233311", "13115221", "13124311", "11315221", "11324311", "21161131", "11152132", "11161222", "21143131", "21152221", "21161311", "11134132", "11143222", "11152312", "21125131", "21134221", "21143311", "11116132", "11125222", "11134312", "12152131", "12161221", "11243131", "11252221", "12134131", "12143221", "12152311", "11225131", "11234221", "11243311", "12116131", "12125221", "12134311", "21111235", "41111233", "61111231", "11111326", "31111324", "51111322", "21111415", "41111413", "61111411", "21211144", "41211142", "22111234", "42111232", "11211235", "31211233", "51211231", "12111325", "32111323", "52111321", "21211324", "41211322", "22111414", "42111412", "11211415", "31211413", "51211411", "22211143", "42211141", "11311144", "31311142", "23111233", "43111231", "12211234", "32211232", "21311233", "41311231", "13111324", "33111322", "22211323", "42211321", "11311324", "31311322", "23111413", "43111411", "12211414", "32211412", "21311413", "41311411", "23211142", "12311143", "32311141", "21411142", "24111232", "13211233", "33211231", "22311232", "11411233", "31411231", "14111323", "34111321", "23211322", "12311323", "32311321", "21411322", "24111412", "13211413", "33211411", "22311412", "11411413", "31411411", "24211141", "13311142", "22411141", "11511142", "25111231", "14211232", "23311231", "12411232", "21511231", "15111322", "24211321", "13311322", "22411321", "11511322", "25111411", "14211412", "23311411", "12411412", "21511411", "14311141", "12511141", "15211231", "13411231", "11611231", "16111321", "14311321", "12511321", "15211411", "13411411", "11611411", "31121143", "51121141", "21112144", "41112142", "21121234", "41121232", "11112235", "31112233", "51112231", "11121325", "31121323", "51121321", "21112324", "41112322", "21121414", "41121412", "11112415", "31112413", "51112411", "12121144", "32121142", "21221143", "41221141", "22112143", "42112141", "11212144", "22121233", "42121231", "11221234", "31221232", "12112234", "32112232", "12121324", "32121322", "21221323", "41221321", "22112323", "42112321", "11212324", "22121413", "42121411", "11221414", "31221412", "12112414", "32112412", "21212413", "41212411", "13121143", "33121141", "22221142", "11321143", "31321141", "23112142", "12212143", "23121232", "12221233", "32221231", "21321232", "13112233", "33112231", "13121323", "33121321", "11312233", "22221322", "11321323", "31321321", "23112322", "12212323", "23121412", "12221413", "32221411", "21321412", "13112413", "33112411", "22212412", "11312413", "31312411", "14121142", "23221141", "12321142", "21421141", "24112141", "13212142", "24121231", "13221232", "11412142", "22321231", "11421232", "14112232", "14121322", "12312232", "23221321", "12321322", "21421321", "24112321", "13212322", "24121411", "13221412", "11412322", "22321411", "11421412", "14112412", "23212411", "12312412", "21412411", "15121141", "13321141", "11521141", "14212141", "14221231", "12412141", "12421231", "15112231", "15121321", "13312231", "13321321", "11512231", "11521321", "14212321", "14221411", "12412321", "12421411", "15112411", "13312411", "11512411", "11131144", "31131142", "21122143", "41122141", "21131233", "41131231", "11113144", "31113142", "11122234", "31122232", "11131324", "31131322", "21113233", "41113231", "21122323", "41122321", "21131413", "41131411", "11113324", "31113322", "11122414", "31122412", "21113413", "41113411", "12131143", "32131141", "21231142", "22122142", "11222143", "22131232", "11231233", "31231231", "12113143", "32113141", "12122233", "32122231", "12131323", "32131321", "21231322", "22113232", "11213233", "22122322", "11222323", "22131412", "11231413", "31231411", "12113323", "32113321", "12122413", "32122411", "21222412", "22113412", "11213413", "31213411", "13131142", "22231141", "11331142", "23122141", "12222142", "23131231", "12231232", "21331231", "13113142", "13122232", "11313142", "13131322", "11322232", "22231321", "11331322", "23113231", "12213232", "23122321", "12222322", "23131411", "12231412", "21331411", "13113322", "13122412", "11313322", "22222411", "11322412", "23113411", "12213412", "21313411", "14131141", "12331141", "13222141", "13231231", "11422141", "11431231", "14113141", "14122231", "12313141", "14131321", "12322231", "12331321", "13213231", "13222321", "11413231", "13231411", "11422321", "11431411", "14113321", "14122411", "12313321", "12322411", "13213411", "11413411", "11141143", "31141141", "21132142", "21141232", "11123143", "31123141", "11132233", "31132231", "11141323", "31141321", "21114142", "21123232", "21132322", "21141412", "11114233", "31114231", "11123323", "31123321", "11132413", "31132411", "21114322", "21123412", "12141142", "21241141", "22132141", "11232142", "22141231", "11241232", "12123142", "12132232", "12141322", "21241321", "22114141", "11214142", "22123231", "11223232", "22132321", "11232322", "22141411", "11241412", "12114232", "12123322", "12132412", "21232411", "22114321", "11214322", "22123411", "11223412", "13141141", "11341141", "12232141", "12241231", "13123141", "13132231", "11323141", "13141321", "11332231", "11341321", "12214141", "12223231", "12232321", "12241411", "13114231", "13123321", "11314231", "13132411", "11323321", "11332411", "12214321", "12223411", "11151142", "21142141", "21151231", "11133142", "11142232", "11151322", "21124141", "21133231", "21142321", "21151411", "11115142", "11124232", "11133322", "11142412", "21115231", "21124321", "21133411", "12151141", "11242141", "11251231", "12133141", "12142231", "12151321", "11224141", "11233231", "11242321", "11251411", "12115141", "12124231", "12133321", "12142411", "11215231", "11224321", "11233411", "11161141", "11143141", "11152231", "11161321", "11125141", "11134231", "11143321", "11152411", "11111245", "31111243", "51111241", "21111334", "41111332", "11111425", "31111423", "51111421", "21111514", "41111512", "31211152", "12111244", "32111242", "21211243", "41211241", "22111333", "42111331", "11211334", "31211332", "12111424", "32111422", "21211423", "41211421", "22111513", "42111511", "11211514", "31211512", "12211153", "32211151", "21311152", "13111243", "33111241", "22211242", "11311243", "31311241", "23111332", "12211333", "32211331", "21311332", "13111423", "33111421", "22211422", "11311423", "31311421", "23111512", "12211513", "32211511", "21311512", "13211152", "22311151", "11411152", "14111242", "23211241", "12311242", "21411241", "24111331", "13211332", "22311331", "11411332", "14111422", "23211421", "12311422", "21411421", "24111511", "13211512", "22311511", "11411512", "14211151", "12411151", "15111241", "13311241", "11511241", "14211331", "12411331", "15111421", "13311421", "11511421", "14211511", "12411511", "21121153", "41121151", "11112154", "31112152", "11121244", "31121242", "21112243", "41112241", "21121333", "41121331", "11112334", "31112332", "11121424", "31121422", "21112423", "41112421", "21121513", "41121511", "11112514", "31112512", "22121152", "11221153", "31221151", "12112153", "32112151", "12121243", "32121241", "21221242", "22112242", "11212243", "22121332", "11221333", "31221331", "12112333", "32112331", "12121423", "32121421", "21221422", "22112422", "11212423", "22121512", "11221513", "31221511", "12112513", "32112511", "21212512", "23121151", "12221152", "21321151", "13112152", "13121242", "11312152", "22221241", "11321242", "23112241", "12212242", "23121331", "12221332", "21321331", "13112332", "13121422", "11312332", "22221421", "11321422", "23112421", "12212422", "23121511", "12221512", "21321511", "13112512", "22212511", "11312512", "13221151", "11421151", "14112151", "14121241", "12312151", "12321241", "13212241", "13221331", "11412241", "11421331", "14112331", "14121421", "12312331", "12321421", "13212421", "13221511", "11412421", "11421511", "14112511", "12312511", "21131152", "11122153", "31122151", "11131243", "31131241", "21113152", "21122242", "21131332", "11113243", "31113241", "11122333", "31122331", "11131423", "31131421", "21113332", "21122422", "21131512", "11113423", "31113421", "11122513", "31122511", "22131151", "11231152", "12122152", "12131242", "21231241", "22113151", "11213152", "22122241", "11222242", "22131331", "11231332", "12113242", "12122332", "12131422", "21231421", "22113331", "11213332", "22122421", "11222422", "22131511", "11231512", "12113422", "12122512", "21222511", "12231151", "13122151", "13131241", "11322151", "11331241", "12213151", "12222241", "12231331", "13113241", "13122331", "11313241", "13131421", "11322331", "11331421", "12213331", "12222421", "12231511", "13113421", "13122511", "11313421", "11322511", "21141151", "11132152", "11141242", "21123151", "21132241", "21141331", "11114152", "11123242", "11132332", "11141422", "21114241", "21123331", "21132421", "21141511", "11114332", "11123422", "11132512", "11241151", "12132151", "12141241", "11223151", "11232241", "11241331", "12114151", "12123241", "12132331", "12141421", "11214241", "11223331", "11232421", "11241511", "12114331", "12123421", "12132511", "11142151", "11151241", "11124151", "11133241", "11142331", "11151421", "11115241", "11124331", "11133421", "11142511", "21111253", "41111251", "11111344", "31111342", "21111433", "41111431", "11111524", "31111522", "21111613", "41111611", "21211162", "22111252", "11211253", "31211251", "12111343", "32111341", "21211342", "22111432", "11211433", "31211431", "12111523", "32111521", "21211522", "22111612", "11211613", "31211611", "22211161", "11311162", "23111251", "12211252", "21311251", "13111342", "22211341", "11311342", "23111431", "12211432", "21311431", "13111522", "22211521", "11311522", "23111611", "12211612", "21311611", "12311161", "13211251", "11411251", "14111341", "12311341", "13211431", "11411431", "14111521", "12311521", "13211611", "11411611", "31121161", "21112162", "21121252", "11112253", "31112251", "11121343", "31121341", "21112342", "21121432", "11112433", "31112431", "11121523", "31121521", "21112522", "21121612", "12121162", "21221161", "22112161", "11212162", "22121251", "11221252", "12112252", "12121342", "21221341", "22112341", "11212342", "22121431", "11221432", "12112432", "12121522", "21221521", "22112521", "11212522", "22121611", "11221612", "13121161", "11321161", "12212161", "12221251", "13112251", "13121341", "11312251", "11321341", "12212341", "12221431", "13112431", "13121521", "11312431", "11321521", "12212521", "12221611", "11131162", "21122161", "21131251", "11113162"])]); //#15818
        $_.parity = $a(["1001", "0101", "1100", "0011", "1010", "0110", "1111", "0000"]); //#15822
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code49.$ctx[id] = $_[id]); //#15822
        bwipp_code49.__15823__ = 1; //#15822
        $_ = Object.getPrototypeOf($_); //#15822
    } //#15822
    $_.rowbits = $a($_.r); //#15826
    for (var _6C = 0, _6B = $f($_.r - 1); _6C <= _6B; _6C += 1) { //#15846
        $_.i = _6C; //#15828
        $k[$j++] = 'p'; //#15829
        if ($_.i != $f($_.r - 1)) { //#15829
            $k[$j++] = $get($_.parity, $_.i); //#15829
        } else { //#15829
            $k[$j++] = "0000"; //#15829
        } //#15829
        var _6I = $k[--$j]; //#15829
        $_[$k[--$j]] = _6I; //#15829
        $_.ccrow = $geti($_.ccs, $_.i * 8, 8); //#15830
        $k[$j++] = Infinity; //#15831
        for (var _6N = 0; _6N <= 7; _6N += 2) { //#15832
            $aload($geti($_.ccrow, _6N, 2)); //#15832
            var _6Q = $k[--$j]; //#15832
            var _6R = $k[--$j]; //#15832
            $k[$j++] = $f(_6Q + (_6R * 49)); //#15832
        } //#15832
        $_.scrow = $a(); //#15832
        $k[$j++] = Infinity; //#15834
        $k[$j++] = 10; //#15839
        $k[$j++] = 1; //#15839
        $k[$j++] = 1; //#15839
        for (var _6T = 0; _6T <= 3; _6T += 1) { //#15839
            $_.j = _6T; //#15837
            $forall($get($get($_.patterns, $f($get($_.p, $_.j) - 48)), $get($_.scrow, $_.j)), function() { //#15838
                var _6d = $k[--$j]; //#15838
                $k[$j++] = $f(_6d - 48); //#15838
            }); //#15838
        } //#15838
        $k[$j++] = 4; //#15840
        $k[$j++] = 1; //#15840
        $_.sbs = $a(); //#15840
        $k[$j++] = Infinity; //#15842
        var _6f = $_.sbs; //#15843
        $k[$j++] = 1; //#15843
        for (var _6g = 0, _6h = _6f.length; _6g < _6h; _6g++) { //#15843
            var _6j = $k[--$j]; //#15843
            var _6k = (_6j == 0) ? 1 : 0; //#15843
            $k[$j++] = _6j; //#15843
            for (var _6l = 0, _6m = $get(_6f, _6g); _6l < _6m; _6l++) { //#15843
                $k[$j++] = _6k //#15843
            } //#15843
        } //#15843
        $astore($a($counttomark() - 1)); //#15844
        var _6p = $k[--$j]; //#15844
        var _6q = $k[--$j]; //#15844
        $k[$j++] = _6p; //#15844
        $k[$j++] = _6q; //#15844
        $j--; //#15844
        var _6r = $k[--$j]; //#15844
        var _6s = $k[--$j]; //#15844
        $k[$j++] = _6r; //#15844
        $k[$j++] = _6s; //#15844
        $j--; //#15844
        $put($_.rowbits, $_.i, $k[--$j]); //#15845
    } //#15845
    $k[$j++] = Infinity; //#15849
    for (var _6x = 0, _6y = 81 * $_.sepheight; _6x < _6y; _6x++) { //#15850
        $k[$j++] = 1; //#15850
    } //#15850
    for (var _71 = 0, _70 = $f($_.r - 2); _71 <= _70; _71 += 1) { //#15855
        $_.i = _71; //#15852
        for (var _73 = 0, _74 = $_.rowheight; _73 < _74; _73++) { //#15853
            $aload($get($_.rowbits, $_.i)); //#15853
        } //#15853
        for (var _79 = 0, _7A = $_.sepheight; _79 < _7A; _79++) { //#15854
            for (var _7B = 0, _7C = 10; _7B < _7C; _7B++) { //#15854
                $k[$j++] = 0; //#15854
            } //#15854
            for (var _7D = 0, _7E = 70; _7D < _7E; _7D++) { //#15854
                $k[$j++] = 1; //#15854
            } //#15854
            $k[$j++] = 0; //#15854
        } //#15854
    } //#15854
    for (var _7G = 0, _7H = $_.rowheight; _7G < _7H; _7G++) { //#15856
        $aload($get($_.rowbits, $f($_.r - 1))); //#15856
    } //#15856
    for (var _7M = 0, _7N = 81 * $_.sepheight; _7M < _7N; _7M++) { //#15857
        $k[$j++] = 1; //#15857
    } //#15857
    $_.pixs = $a(); //#15857
    var _7T = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $_.pixs],
        ["pixx", 81],
        ["pixy", ~~($_.pixs.length / 81)],
        ["height", (~~($_.pixs.length / 81)) / 72],
        ["width", 81 / 72],
        ["opt", $_.options]
    ]); //#15868
    $k[$j++] = _7T; //#15871
    if (!$_.dontdraw) { //#15871
        bwipp_renmatrix(); //#15871
    } //#15871
    $_ = Object.getPrototypeOf($_); //#15873
    $_ = Object.getPrototypeOf($_); //#15875
} //bwipp_code49
function bwipp_flattermarken() {
    $_ = Object.create($_); //#16169
    $_.dontdraw = false; //#16172
    $_.includetext = false; //#16173
    $_.textfont = "OCR-B"; //#16174
    $_.textsize = 10; //#16175
    $_.textyoffset = -8; //#16176
    $_.height = 0.3; //#16177
    $k[$j++] = $_; //#16179
    bwipp_processoptions(); //#16179
    $_.options = $k[--$j]; //#16179
    $_.barcode = $k[--$j]; //#16180
    bwipp_loadctx(bwipp_flattermarken) //#16182
    $forall($_.barcode, function() { //#16189
        var _3 = $k[--$j]; //#16186
        if ((_3 < 48) || (_3 > 57)) { //#16188
            $k[$j++] = 'bwipp.flattermarkenBadCharacter#16187'; //#16187
            $k[$j++] = "Flattermarken must contain only digits"; //#16187
            bwipp_raiseerror(); //#16187
        } //#16187
    }); //#16187
    if (!bwipp_flattermarken.__16200__) { //#16200
        $_ = Object.create($_); //#16200
        $_.encs = $a(["0018", "0117", "0216", "0315", "0414", "0513", "0612", "0711", "0810", "0900"]); //#16196
        $_.barchars = "1234567890"; //#16199
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_flattermarken.$ctx[id] = $_[id]); //#16199
        bwipp_flattermarken.__16200__ = 1; //#16199
        $_ = Object.getPrototypeOf($_); //#16199
    } //#16199
    $_.barlen = $_.barcode.length; //#16202
    $_.sbs = $s($_.barlen * 4); //#16204
    $_.txt = $a($_.barlen); //#16205
    for (var _D = 0, _C = $_.barlen - 1; _D <= _C; _D += 1) { //#16217
        $_.i = _D; //#16208
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#16210
        $j--; //#16211
        $_.indx = $k[--$j].length; //#16212
        $j -= 2; //#16213
        $_.enc = $get($_.encs, $_.indx); //#16214
        $puti($_.sbs, $_.i * 4, $_.enc); //#16215
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), $_.i * 9, $_.textyoffset, $_.textfont, $_.textsize])); //#16216
    } //#16216
    $k[$j++] = Infinity; //#16220
    $k[$j++] = Infinity; //#16222
    var _Z = $_.sbs; //#16222
    for (var _a = 0, _b = _Z.length; _a < _b; _a++) { //#16222
        $k[$j++] = $get(_Z, _a) - 48; //#16222
    } //#16222
    var _d = $a(); //#16222
    $k[$j++] = Infinity; //#16223
    for (var _f = 0, _g = ~~(($_.sbs.length + 1) / 2); _f < _g; _f++) { //#16223
        $k[$j++] = $_.height; //#16223
    } //#16223
    var _i = $a(); //#16223
    $k[$j++] = Infinity; //#16224
    for (var _k = 0, _l = ~~(($_.sbs.length + 1) / 2); _k < _l; _k++) { //#16224
        $k[$j++] = 0; //#16224
    } //#16224
    var _m = $a(); //#16224
    $k[$j++] = 'ren'; //#16226
    $k[$j++] = bwipp_renlinear; //#16226
    $k[$j++] = 'sbs'; //#16226
    $k[$j++] = _d; //#16226
    $k[$j++] = 'bhs'; //#16226
    $k[$j++] = _i; //#16226
    $k[$j++] = 'bbs'; //#16226
    $k[$j++] = _m; //#16226
    $k[$j++] = 'txt'; //#16226
    $k[$j++] = $_.txt; //#16226
    $k[$j++] = 'opt'; //#16226
    $k[$j++] = $_.options; //#16226
    var _p = $d(); //#16226
    $k[$j++] = _p; //#16229
    if (!$_.dontdraw) { //#16229
        bwipp_renlinear(); //#16229
    } //#16229
    $_ = Object.getPrototypeOf($_); //#16231
    $_ = Object.getPrototypeOf($_); //#16233
} //bwipp_flattermarken
function bwipp_raw() {
    $_ = Object.create($_); //#16261
    $_.dontdraw = false; //#16264
    $_.height = 1; //#16265
    $k[$j++] = $_; //#16267
    bwipp_processoptions(); //#16267
    $_.options = $k[--$j]; //#16267
    $_.barcode = $k[--$j]; //#16268
    $forall($_.barcode, function() { //#16275
        var _3 = $k[--$j]; //#16272
        if ((_3 < 49) || (_3 > 57)) { //#16274
            $k[$j++] = 'bwipp.rawBadCharacter#16273'; //#16273
            $k[$j++] = "Raw must contain only digits 1 to 9"; //#16273
            bwipp_raiseerror(); //#16273
        } //#16273
    }); //#16273
    $k[$j++] = Infinity; //#16278
    $k[$j++] = Infinity; //#16280
    $forall($_.barcode, function() { //#16280
        var _5 = $k[--$j]; //#16280
        $k[$j++] = $f(_5 - 48); //#16280
    }); //#16280
    var _6 = $a(); //#16280
    $k[$j++] = Infinity; //#16281
    for (var _8 = 0, _9 = ~~(($_.barcode.length + 1) / 2); _8 < _9; _8++) { //#16281
        $k[$j++] = $_.height; //#16281
    } //#16281
    var _B = $a(); //#16281
    $k[$j++] = Infinity; //#16282
    for (var _D = 0, _E = ~~(($_.barcode.length + 1) / 2); _D < _E; _D++) { //#16282
        $k[$j++] = 0; //#16282
    } //#16282
    var _F = $a(); //#16282
    $k[$j++] = 'ren'; //#16283
    $k[$j++] = bwipp_renlinear; //#16283
    $k[$j++] = 'sbs'; //#16283
    $k[$j++] = _6; //#16283
    $k[$j++] = 'bhs'; //#16283
    $k[$j++] = _B; //#16283
    $k[$j++] = 'bbs'; //#16283
    $k[$j++] = _F; //#16283
    $k[$j++] = 'opt'; //#16283
    $k[$j++] = $_.options; //#16283
    var _H = $d(); //#16283
    $k[$j++] = _H; //#16286
    if (!$_.dontdraw) { //#16286
        bwipp_renlinear(); //#16286
    } //#16286
    $_ = Object.getPrototypeOf($_); //#16288
} //bwipp_raw
function bwipp_daft() {
    $_ = Object.create($_); //#16316
    $_.dontdraw = false; //#16319
    $_.height = 0.175; //#16320
    $k[$j++] = $_; //#16322
    bwipp_processoptions(); //#16322
    $_.options = $k[--$j]; //#16322
    $_.barcode = $k[--$j]; //#16323
    if ($eq($_.barcode, "")) { //#16327
        $k[$j++] = 'bwipp.daftEmptyData#16326'; //#16326
        $k[$j++] = "The data must not be empty"; //#16326
        bwipp_raiseerror(); //#16326
    } //#16326
    $forall($_.barcode, function() { //#16333
        var _4 = $k[--$j]; //#16330
        if ((_4 != 68) && ((_4 != 65) && ((_4 != 70) && (_4 != 84)))) { //#16332
            $k[$j++] = 'bwipp.daftBadCharacter#16331'; //#16331
            $k[$j++] = "DAFT must contain only characters D, A, F and T"; //#16331
            bwipp_raiseerror(); //#16331
        } //#16331
    }); //#16331
    $_.barlen = $_.barcode.length; //#16335
    $_.bbs = $a($_.barlen); //#16337
    $_.bhs = $a($_.barlen); //#16338
    for (var _C = 0, _B = $_.barlen - 1; _C <= _B; _C += 1) { //#16358
        $_.i = _C; //#16340
        $_.enc = $geti($_.barcode, $_.i, 1); //#16341
        if ($eq($_.enc, "D")) { //#16345
            $put($_.bbs, $_.i, (0 * $_.height) / 8); //#16343
            $put($_.bhs, $_.i, (5 * $_.height) / 8); //#16344
        } //#16344
        if ($eq($_.enc, "A")) { //#16349
            $put($_.bbs, $_.i, (3 * $_.height) / 8); //#16347
            $put($_.bhs, $_.i, (5 * $_.height) / 8); //#16348
        } //#16348
        if ($eq($_.enc, "F")) { //#16353
            $put($_.bbs, $_.i, (0 * $_.height) / 8); //#16351
            $put($_.bhs, $_.i, (8 * $_.height) / 8); //#16352
        } //#16352
        if ($eq($_.enc, "T")) { //#16357
            $put($_.bbs, $_.i, (3 * $_.height) / 8); //#16355
            $put($_.bhs, $_.i, (2 * $_.height) / 8); //#16356
        } //#16356
    } //#16356
    $k[$j++] = Infinity; //#16361
    var _i = $_.bbs; //#16363
    var _j = $_.bhs; //#16364
    $k[$j++] = Infinity; //#16365
    for (var _l = 0, _m = $_.bhs.length - 1; _l < _m; _l++) { //#16365
        $k[$j++] = 1.44; //#16365
        $k[$j++] = 1.872; //#16365
    } //#16365
    $k[$j++] = 1.44; //#16365
    var _n = $a(); //#16365
    $k[$j++] = 'ren'; //#16366
    $k[$j++] = bwipp_renlinear; //#16366
    $k[$j++] = 'bbs'; //#16366
    $k[$j++] = _i; //#16366
    $k[$j++] = 'bhs'; //#16366
    $k[$j++] = _j; //#16366
    $k[$j++] = 'sbs'; //#16366
    $k[$j++] = _n; //#16366
    $k[$j++] = 'opt'; //#16366
    $k[$j++] = $_.options; //#16366
    var _p = $d(); //#16366
    $k[$j++] = _p; //#16369
    if (!$_.dontdraw) { //#16369
        bwipp_renlinear(); //#16369
    } //#16369
    $_ = Object.getPrototypeOf($_); //#16371
} //bwipp_daft
function bwipp_symbol() {
    $_ = Object.create($_); //#16399
    $_.dontdraw = false; //#16402
    $k[$j++] = $_; //#16404
    bwipp_processoptions(); //#16404
    $_.options = $k[--$j]; //#16404
    $_.barcode = $k[--$j]; //#16405
    var _H = new Map([
        ["fima", function() {
            $_.sbs = $a([2.25, 2.25, 2.25, 11.25, 2.25, 11.25, 2.25, 2.25, 2.25]); //#16409
            $_.bhs = $a([0.625, 0.625, 0.625, 0.625, 0.625]); //#16410
            $_.bbs = $a([0, 0, 0, 0, 0]); //#16411
        }],
        ["fimb", function() {
            $_.sbs = $a([2.25, 6.75, 2.25, 2.25, 2.25, 6.25, 2.25, 2.25, 2.25, 6.75, 2.25]); //#16414
            $_.bhs = $a([0.625, 0.625, 0.625, 0.625, 0.625, 0.625]); //#16415
            $_.bbs = $a([0, 0, 0, 0, 0, 0]); //#16416
        }],
        ["fimc", function() {
            $_.sbs = $a([2.25, 2.25, 2.25, 6.75, 2.25, 6.75, 2.25, 6.75, 2.25, 2.25, 2.25]); //#16419
            $_.bhs = $a([0.625, 0.625, 0.625, 0.625, 0.625, 0.625]); //#16420
            $_.bbs = $a([0, 0, 0, 0, 0, 0]); //#16421
        }],
        ["fimd", function() {
            $_.sbs = $a([2.25, 2.25, 2.25, 2.25, 2.25, 6.75, 2.25, 6.75, 2.25, 2.25, 2.25, 2.25, 2.25]); //#16424
            $_.bhs = $a([0.625, 0.625, 0.625, 0.625, 0.625, 0.625, 0.625]); //#16425
            $_.bbs = $a([0, 0, 0, 0, 0, 0, 0]); //#16426
        }],
        ["fime", function() {
            $_.sbs = $a([2.25, 6.75, 2.25, 15.75, 2.25, 6.75, 2.25]); //#16429
            $_.bhs = $a([0.625, 0.625, 0.625, 0.625, 0.625, 0.625, 0.625]); //#16430
            $_.bbs = $a([0, 0, 0, 0, 0, 0, 0]); //#16431
        }]
    ]); //#16431
    $_.symbols = _H; //#16433
    var _K = $get($_.symbols, $_.barcode) !== undefined; //#16436
    if (!_K) { //#16438
        $k[$j++] = 'bwipp.symbolUnknownSymbol#16437'; //#16437
        $k[$j++] = "Unknown symbol name provided"; //#16437
        bwipp_raiseerror(); //#16437
    } //#16437
    if ($get($_.symbols, $_.barcode)() === true) {
        return true;
    } //#16440
    var _S = new Map([
        ["ren", bwipp_renlinear],
        ["sbs", $_.sbs],
        ["bhs", $_.bhs],
        ["bbs", $_.bbs],
        ["opt", $_.options]
    ]); //#16448
    $k[$j++] = _S; //#16451
    if (!$_.dontdraw) { //#16451
        bwipp_renlinear(); //#16451
    } //#16451
    $_ = Object.getPrototypeOf($_); //#16453
} //bwipp_symbol
function bwipp_pdf417() {
    $_ = Object.create($_); //#16484
    $_.dontdraw = false; //#16487
    $_.compact = false; //#16488
    $_.eclevel = -1; //#16489
    $_.columns = 0; //#16490
    $_.rows = 0; //#16491
    $_.rowmult = 3; //#16492
    $_.ccc = false; //#16493
    $_.raw = false; //#16494
    $_.parse = false; //#16495
    $_.parsefnc = false; //#16496
    $k[$j++] = $_; //#16498
    bwipp_processoptions(); //#16498
    $_.options = $k[--$j]; //#16498
    $_.barcode = $k[--$j]; //#16499
    if ($eq($_.barcode, "")) { //#16503
        $k[$j++] = 'bwipp.pdf417emptyData#16502'; //#16502
        $k[$j++] = "The data must not be empty"; //#16502
        bwipp_raiseerror(); //#16502
    } //#16502
    if (($_.eclevel != -1) && (($_.eclevel < 0) || ($_.eclevel > 8))) { //#16507
        $k[$j++] = 'bwipp.pdf417InvalidErrorCorrectionLevel#16506'; //#16506
        $k[$j++] = "Valid error correction levels are 0 to 8"; //#16506
        bwipp_raiseerror(); //#16506
    } //#16506
    if ($_.ccc && $_.raw) { //#16511
        $k[$j++] = 'bwipp.pdf417cccAndRaw#16510'; //#16510
        $k[$j++] = "Cannot combine ccc and raw"; //#16510
        bwipp_raiseerror(); //#16510
    } //#16510
    if ($_.ccc && $_.compact) { //#16515
        $k[$j++] = 'bwipp.pdf417cccAndCompact#16514'; //#16514
        $k[$j++] = "Cannot combine ccc and compact"; //#16514
        bwipp_raiseerror(); //#16514
    } //#16514
    if (($_.rows != 0) && (($_.rows < 3) || ($_.rows > 90))) { //#16519
        $k[$j++] = 'bwipp.pdf417invalidRows#16518'; //#16518
        $k[$j++] = "There must be between 3 and 90 rows"; //#16518
        bwipp_raiseerror(); //#16518
    } //#16518
    if (($_.columns != 0) && (($_.columns < 1) || ($_.columns > 30))) { //#16523
        $k[$j++] = 'bwipp.pdf417invalidColumns#16522'; //#16522
        $k[$j++] = "There must be between 1 and 30 columns"; //#16522
        bwipp_raiseerror(); //#16522
    } //#16522
    if ($_.rowmult <= 0) { //#16527
        $k[$j++] = 'bwipp.pdf417badRowMult#16526'; //#16526
        $k[$j++] = "The row multiplier must be greater than zero"; //#16526
        bwipp_raiseerror(); //#16526
    } //#16526
    bwipp_loadctx(bwipp_pdf417) //#16529
    if (!bwipp_pdf417.__16620__) { //#16620
        $_ = Object.create($_); //#16620
        $_.T = 0; //#16533
        $_.N = 1; //#16533
        $_.B = 2; //#16533
        $_.A = 0; //#16534
        $_.L = 1; //#16534
        $_.M = 2; //#16534
        $_.P = 3; //#16534
        $_.tl = -1; //#16537
        $_.nl = -2; //#16537
        $_.bl = -3; //#16537
        $_.bl6 = -4; //#16537
        $_.bs = -5; //#16537
        $_.al = -6; //#16540
        $_.ll = -7; //#16540
        $_.ml = -8; //#16540
        $_.pl = -9; //#16540
        $_.as = -10; //#16540
        $_.ps = -11; //#16540
        $_.charmaps = $a([$a(["A", "a", "0", ";"]), $a(["B", "b", "1", "<"]), $a(["C", "c", "2", ">"]), $a(["D", "d", "3", "@"]), $a(["E", "e", "4", "["]), $a(["F", "f", "5", 92]), $a(["G", "g", "6", "]"]), $a(["H", "h", "7", "_"]), $a(["I", "i", "8", "`"]), $a(["J", "j", "9", "~"]), $a(["K", "k", "&", "!"]), $a(["L", "l", 13, 13]), $a(["M", "m", 9, 9]), $a(["N", "n", ",", ","]), $a(["O", "o", ":", ":"]), $a(["P", "p", "#", 10]), $a(["Q", "q", "-", "-"]), $a(["R", "r", ".", "."]), $a(["S", "s", "$", "$"]), $a(["T", "t", "/", "/"]), $a(["U", "u", "+", "\""]), $a(["V", "v", "%", "|"]), $a(["W", "w", "*", "*"]), $a(["X", "x", "=", 40]), $a(["Y", "y", "^", 41]), $a(["Z", "z", $_.pl, "?"]), $a([" ", " ", " ", "{"]), $a([$_.ll, $_.as, $_.ll, "}"]), $a([$_.ml, $_.ml, $_.al, "'"]), $a([$_.ps, $_.ps, $_.ps, $_.al])]); //#16575
        $_.charvals = $a([new Map, new Map, new Map, new Map]); //#16578
        $_.alltext = new Map; //#16579
        for (var _10 = 0, _z = $_.charmaps.length - 1; _10 <= _z; _10 += 1) { //#16589
            $_.i = _10; //#16581
            $_.encs = $get($_.charmaps, $_.i); //#16582
            for (var _14 = 0; _14 <= 3; _14 += 1) { //#16588
                $_.j = _14; //#16584
                var _17 = $get($_.encs, $_.j); //#16585
                $k[$j++] = _17; //#16585
                if ($eq($type(_17), 'stringtype')) { //#16585
                    var _1A = $get($k[--$j], 0); //#16585
                    $k[$j++] = _1A; //#16585
                } //#16585
                var _1B = $k[--$j]; //#16586
                $put($get($_.charvals, $_.j), _1B, $_.i); //#16586
                $put($_.alltext, _1B, -1); //#16587
            } //#16587
        } //#16587
        $_.e = 10000; //#16591
        $_.latlen = $a([$a([0, 1, 1, 2]), $a([2, 0, 1, 2]), $a([1, 1, 0, 1]), $a([1, 2, 2, 0])]); //#16599
        $_.latseq = $a([$a([$a([]), $a([$_.ll]), $a([$_.ml]), $a([$_.ml, $_.pl])]), $a([$a([$_.ml, $_.al]), $a([]), $a([$_.ml]), $a([$_.ml, $_.pl])]), $a([$a([$_.al]), $a([$_.ll]), $a([]), $a([$_.pl])]), $a([$a([$_.al]), $a([$_.al, $_.ll]), $a([$_.al, $_.ml]), $a([])])]); //#16607
        $_.shftlen = $a([$a([$_.e, $_.e, $_.e, 1]), $a([1, $_.e, $_.e, 1]), $a([$_.e, $_.e, $_.e, 1]), $a([$_.e, $_.e, $_.e, $_.e])]); //#16615
        $k[$j++] = Infinity; //#16617
        $k[$j++] = $_.tl; //#16618
        $k[$j++] = 900; //#16618
        $k[$j++] = $_.bl; //#16618
        $k[$j++] = 901; //#16618
        $k[$j++] = $_.bl6; //#16618
        $k[$j++] = 924; //#16618
        $k[$j++] = $_.nl; //#16618
        $k[$j++] = 902; //#16618
        $k[$j++] = $_.bs; //#16618
        $k[$j++] = 913; //#16618
        $_.latchcws = $d(); //#16619
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_pdf417.$ctx[id] = $_[id]); //#16619
        bwipp_pdf417.__16620__ = 1; //#16619
        $_ = Object.getPrototypeOf($_); //#16619
    } //#16619
    if ($_.raw) { //#16641
        $_.datcws = $a($_.barcode.length); //#16624
        $_.i = 0; //#16625
        $_.j = 0; //#16625
        for (;;) { //#16636
            if ($_.i >= ($_.barcode.length - 3)) { //#16627
                break; //#16627
            } //#16627
            if ($get($_.barcode, $_.i) != 94) { //#16628
                break; //#16628
            } //#16628
            var _2W = $geti($_.barcode, $_.i + 1, 3); //#16629
            $k[$j++] = _2W; //#16631
            $k[$j++] = false; //#16631
            for (var _2X = 0, _2Y = _2W.length; _2X < _2Y; _2X++) { //#16631
                var _2Z = $get(_2W, _2X); //#16631
                if ((_2Z < 48) || (_2Z > 57)) { //#16630
                    $j--; //#16630
                    $k[$j++] = true; //#16630
                } //#16630
            } //#16630
            if ($k[--$j]) { //#16631
                $j--; //#16631
                break; //#16631
            } //#16631
            $_.cw = $cvi($k[--$j]); //#16632
            $put($_.datcws, $_.j, $_.cw); //#16633
            $_.i = $_.i + 4; //#16634
            $_.j = $_.j + 1; //#16635
        } //#16635
        if ($_.i != $_.barcode.length) { //#16639
            $k[$j++] = 'bwipp.pdf417badRawFormat#16638'; //#16638
            $k[$j++] = "raw data must be formatted as ^NNN"; //#16638
            bwipp_raiseerror(); //#16638
        } //#16638
        $_.datcws = $geti($_.datcws, 0, $_.j); //#16640
    } //#16640
    $_.encb = function() {
        $_.in = $k[--$j]; //#16644
        $_.inlen = $_.in.length; //#16645
        $_.out = $a(((~~($_.inlen / 6)) * 5) + ($_.inlen % 6)); //#16646
        for (var _2t = 0, _2s = (~~($_.inlen / 6)) - 1; _2t <= _2s; _2t += 1) { //#16669
            $_.k = _2t; //#16648
            $k[$j++] = Infinity; //#16649
            $aload($geti($_.in, $_.k * 6, 3)); //#16649
            $_.msbs = $a(); //#16649
            $k[$j++] = Infinity; //#16650
            $aload($_.msbs); //#16651
            var _2z = $k[--$j]; //#16651
            var _30 = $k[--$j]; //#16651
            var _31 = $k[--$j]; //#16651
            $k[$j++] = $f(($f(_2z + (_30 * 256))) + (_31 * 65536)); //#16652
            for (var _32 = 0, _33 = 3; _32 < _33; _32++) { //#16652
                var _34 = $k[--$j]; //#16652
                $k[$j++] = _34 % 900; //#16652
                $k[$j++] = ~~(_34 / 900); //#16652
            } //#16652
            $_.mscs = $a(); //#16652
            $k[$j++] = Infinity; //#16654
            $aload($geti($_.in, ($_.k * 6) + 3, 3)); //#16654
            $_.lsbs = $a(); //#16654
            $k[$j++] = Infinity; //#16655
            $aload($_.lsbs); //#16656
            var _3B = $k[--$j]; //#16656
            var _3C = $k[--$j]; //#16656
            var _3D = $k[--$j]; //#16656
            $k[$j++] = $f(($f(_3B + (_3C * 256))) + (_3D * 65536)); //#16657
            for (var _3E = 0, _3F = 3; _3E < _3F; _3E++) { //#16657
                var _3G = $k[--$j]; //#16657
                $k[$j++] = _3G % 900; //#16657
                $k[$j++] = ~~(_3G / 900); //#16657
            } //#16657
            $_.lscs = $a(); //#16657
            var _3J = $get($_.lscs, 0); //#16659
            var _3L = $get($_.mscs, 0); //#16659
            $put($_.out, ($_.k * 5) + 4, ($f(_3J + (_3L * 316))) % 900); //#16660
            var _3P = $get($_.lscs, 1); //#16661
            var _3R = $get($_.mscs, 0); //#16661
            var _3T = $get($_.mscs, 1); //#16661
            $put($_.out, ($_.k * 5) + 3, ($f(($f(($f((~~(($f(_3J + (_3L * 316))) / 900)) + _3P)) + (_3R * 641))) + (_3T * 316))) % 900); //#16662
            var _3X = $get($_.lscs, 2); //#16663
            var _3Z = $get($_.mscs, 0); //#16663
            var _3b = $get($_.mscs, 1); //#16663
            var _3d = $get($_.mscs, 2); //#16663
            $put($_.out, ($_.k * 5) + 2, ($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_3J + (_3L * 316))) / 900)) + _3P)) + (_3R * 641))) + (_3T * 316))) / 900)) + _3X)) + (_3Z * 20))) + (_3b * 641))) + (_3d * 316))) % 900); //#16664
            var _3h = $get($_.lscs, 3); //#16665
            var _3j = $get($_.mscs, 1); //#16665
            var _3l = $get($_.mscs, 2); //#16665
            $put($_.out, ($_.k * 5) + 1, ($f(($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_3J + (_3L * 316))) / 900)) + _3P)) + (_3R * 641))) + (_3T * 316))) / 900)) + _3X)) + (_3Z * 20))) + (_3b * 641))) + (_3d * 316))) / 900)) + _3h)) + (_3j * 20))) + (_3l * 641))) % 900); //#16666
            $put($_.out, $_.k * 5, ($f((~~(($f(($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_3J + (_3L * 316))) / 900)) + _3P)) + (_3R * 641))) + (_3T * 316))) / 900)) + _3X)) + (_3Z * 20))) + (_3b * 641))) + (_3d * 316))) / 900)) + _3h)) + (_3j * 20))) + (_3l * 641))) / 900)) + ($get($_.mscs, 2) * 20))) % 900); //#16668
        } //#16668
        $_.rem = $_.inlen % 6; //#16670
        if ($_.rem != 0) { //#16675
            $k[$j++] = $_.out; //#16673
            $k[$j++] = $_.out.length - $_.rem; //#16673
            $k[$j++] = Infinity; //#16673
            $aload($geti($_.in, $_.inlen - $_.rem, $_.rem)); //#16673
            var _42 = $a(); //#16673
            var _43 = $k[--$j]; //#16674
            $puti($k[--$j], _43, _42); //#16674
        } //#16674
        $k[$j++] = $_.out; //#16676
    }; //#16676
    if ($_.ccc) { //#16685
        $_.barlen = $_.barcode.length; //#16680
        $_.datcws = $a((((~~($_.barlen / 6)) * 5) + ($_.barlen % 6)) + 2); //#16681
        $put($_.datcws, 0, 920); //#16682
        var _4E = (($_.barlen % 6) == 0) ? 924 : 901; //#16683
        $put($_.datcws, 1, _4E); //#16683
        $k[$j++] = $_.datcws; //#16684
        $k[$j++] = 2; //#16684
        $k[$j++] = Infinity; //#16684
        $forall($_.barcode); //#16684
        var _4H = $a(); //#16684
        $k[$j++] = _4H; //#16684
        $_.encb(); //#16684
        var _4I = $k[--$j]; //#16684
        var _4J = $k[--$j]; //#16684
        $puti($k[--$j], _4J, _4I); //#16684
    } //#16684
    if ((!$_.raw) && (!$_.ccc)) { //#17036
        var _4P = new Map([
            ["parse", $_.parse],
            ["parsefnc", $_.parsefnc],
            ["eci", true]
        ]); //#16693
        $_.fncvals = _4P; //#16695
        $k[$j++] = 'msg'; //#16696
        $k[$j++] = $_.barcode; //#16696
        $k[$j++] = $_.fncvals; //#16696
        bwipp_parseinput(); //#16696
        var _4S = $k[--$j]; //#16696
        $_[$k[--$j]] = _4S; //#16696
        $_.msglen = $_.msg.length; //#16697
        $k[$j++] = Infinity; //#16700
        for (var _4W = 0, _4X = $_.msglen; _4W < _4X; _4W++) { //#16700
            $k[$j++] = 0; //#16700
        } //#16700
        $k[$j++] = 0; //#16700
        $_.numdigits = $a(); //#16700
        $k[$j++] = Infinity; //#16701
        for (var _4a = 0, _4b = $_.msglen; _4a < _4b; _4a++) { //#16701
            $k[$j++] = 0; //#16701
        } //#16701
        $k[$j++] = 0; //#16701
        $_.numtext = $a(); //#16701
        $k[$j++] = Infinity; //#16702
        for (var _4e = 0, _4f = $_.msglen; _4e < _4f; _4e++) { //#16702
            $k[$j++] = 0; //#16702
        } //#16702
        $k[$j++] = 0; //#16702
        $_.numbytes = $a(); //#16702
        $k[$j++] = Infinity; //#16703
        for (var _4i = 0, _4j = $_.msglen; _4i < _4j; _4i++) { //#16703
            $k[$j++] = 0; //#16703
        } //#16703
        $k[$j++] = 0; //#16703
        $_.iseci = $a(); //#16703
        for (var _4m = $_.msglen - 1; _4m >= 0; _4m -= 1) { //#16716
            $_.i = _4m; //#16705
            var _4p = $get($_.msg, $_.i); //#16706
            if ((_4p >= 48) && (_4p <= 57)) { //#16708
                $put($_.numdigits, $_.i, $f($get($_.numdigits, $_.i + 1) + 1)); //#16707
            } //#16707
            var _4z = $get($_.alltext, $get($_.msg, $_.i)) !== undefined; //#16709
            if (_4z && ($get($_.numdigits, $_.i) < 13)) { //#16711
                $put($_.numtext, $_.i, $f($get($_.numtext, $_.i + 1) + 1)); //#16710
            } //#16710
            if ((($get($_.msg, $_.i) >= 0) && ($get($_.numtext, $_.i) < 5)) && ($get($_.numdigits, $_.i) < 13)) { //#16714
                $put($_.numbytes, $_.i, $f($get($_.numbytes, $_.i + 1) + 1)); //#16713
            } //#16713
            $put($_.iseci, $_.i, $get($_.msg, $_.i) <= -1000000); //#16715
        } //#16715
        $_.numdigits = $geti($_.numdigits, 0, $_.msglen); //#16717
        $_.numtext = $geti($_.numtext, 0, $_.msglen); //#16718
        $_.numbytes = $geti($_.numbytes, 0, $_.msglen); //#16719
        $_.seq = $a([]); //#16721
        $_.seqlen = 0; //#16721
        $_.state = $_.T; //#16721
        $_.p = 0; //#16721
        for (;;) { //#16775
            if ($_.p == $_.msglen) { //#16722
                break; //#16722
            } //#16722
            if ($get($_.iseci, $_.p)) { //#16773
                $_.eci = $get($_.msg, $_.p); //#16724
                $k[$j++] = Infinity; //#16725
                $aload($_.seq); //#16726
                $k[$j++] = $a([$_.eci]); //#16727
                $_.seq = $a(); //#16727
                $_.p = $_.p + 1; //#16729
                $k[$j++] = 'seqlen'; //#16730
                $k[$j++] = $_.seqlen; //#16730
                if ($_.eci <= -1810900) { //#16730
                    $k[$j++] = 2; //#16730
                } else { //#16730
                    var _5s = ($_.eci <= -1000900) ? 3 : 2; //#16730
                    $k[$j++] = _5s; //#16730
                } //#16730
                var _5t = $k[--$j]; //#16730
                var _5u = $k[--$j]; //#16730
                $_[$k[--$j]] = $f(_5u + _5t); //#16730
            } else { //#16773
                $_.n = $get($_.numdigits, $_.p); //#16732
                if (($_.n >= 13) || (($_.n == $_.msglen) && ($_.n >= 8))) { //#16773
                    $k[$j++] = Infinity; //#16734
                    $aload($_.seq); //#16735
                    $k[$j++] = $_.nl; //#16737
                    $k[$j++] = Infinity; //#16737
                    $aload($geti($_.msg, $_.p, $_.n)); //#16737
                    var _69 = $a(); //#16737
                    $k[$j++] = _69; //#16737
                    $_.seq = $a(); //#16737
                    $_.state = $_.N; //#16739
                    $_.p = $f($_.p + $_.n); //#16740
                    $_.seqlen = $f(($_.seqlen + 1) + $_.n); //#16741
                } else { //#16773
                    $_.t = $get($_.numtext, $_.p); //#16743
                    if ($_.t >= 5) { //#16773
                        $k[$j++] = Infinity; //#16745
                        $aload($_.seq); //#16746
                        if ($_.state != $_.T) { //#16749
                            $k[$j++] = $_.tl; //#16748
                        } //#16748
                        $k[$j++] = Infinity; //#16750
                        $aload($geti($_.msg, $_.p, $_.t)); //#16750
                        var _6S = $a(); //#16750
                        $k[$j++] = _6S; //#16750
                        $_.seq = $a(); //#16750
                        $_.state = $_.T; //#16752
                        $_.p = $f($_.p + $_.t); //#16753
                        $_.seqlen = $f($f($_.seqlen + 1) + $_.t); //#16754
                    } else { //#16773
                        $_.b = $get($_.numbytes, $_.p); //#16756
                        if (($_.b == 1) && ($_.state == $_.T)) { //#16773
                            $k[$j++] = Infinity; //#16758
                            $aload($_.seq); //#16759
                            $k[$j++] = $_.bs; //#16761
                            $k[$j++] = $a([$get($_.msg, $_.p)]); //#16761
                            $_.seq = $a(); //#16761
                            $_.p = $f($_.p + $_.b); //#16763
                            $_.seqlen = $f($_.seqlen + 2); //#16764
                        } else { //#16773
                            $k[$j++] = Infinity; //#16766
                            $aload($_.seq); //#16767
                            var _6r = (($_.b % 6) != 0) ? $_.bl : $_.bl6; //#16768
                            $k[$j++] = _6r; //#16769
                            $k[$j++] = Infinity; //#16769
                            $aload($geti($_.msg, $_.p, $_.b)); //#16769
                            var _6w = $a(); //#16769
                            $k[$j++] = _6w; //#16769
                            $_.seq = $a(); //#16769
                            $_.state = $_.B; //#16771
                            $_.p = $f($_.p + $_.b); //#16772
                            $_.seqlen = $f($f($_.seqlen + 1) + $_.b); //#16773
                        } //#16773
                    } //#16773
                } //#16773
            } //#16773
        } //#16773
        $_.enca = function() {
            var _77 = $get($get($_.charvals, $_.A), $k[--$j]); //#16778
            $k[$j++] = _77; //#16778
        }; //#16778
        $_.encl = function() {
            var _7C = $get($get($_.charvals, $_.L), $k[--$j]); //#16779
            $k[$j++] = _7C; //#16779
        }; //#16779
        $_.encm = function() {
            var _7H = $get($get($_.charvals, $_.M), $k[--$j]); //#16780
            $k[$j++] = _7H; //#16780
        }; //#16780
        $_.encp = function() {
            var _7M = $get($get($_.charvals, $_.P), $k[--$j]); //#16781
            $k[$j++] = _7M; //#16781
        }; //#16781
        $_.textencfuncs = $a(['enca', 'encl', 'encm', 'encp']); //#16782
        $_.addtotext = function() {
            $put($_.text, $_.l, $k[--$j]); //#16785
            $_.l = $_.l + 1; //#16786
        }; //#16786
        $_.enct = function() {
            $_.in = $k[--$j]; //#16790
            $_.curlen = $a([$_.e, $_.e, $_.e, $_.e]); //#16792
            $put($_.curlen, $_.submode, 0); //#16793
            $_.curseq = $a([$a([]), $a([]), $a([]), $a([])]); //#16794
            $forall($_.in, function() { //#16864
                $_.char = $k[--$j]; //#16799
                for (;;) { //#16820
                    $_.imp = false; //#16803
                    var _7l = $a([$_.A, $_.L, $_.M, $_.P]); //#16804
                    for (var _7m = 0, _7n = _7l.length; _7m < _7n; _7m++) { //#16818
                        $_.x = $get(_7l, _7m); //#16805
                        var _7t = $a([$_.A, $_.L, $_.M, $_.P]); //#16806
                        for (var _7u = 0, _7v = _7t.length; _7u < _7v; _7u++) { //#16817
                            $_.y = $get(_7t, _7u); //#16807
                            $_.cost = $f($get($_.curlen, $_.x) + $get($get($_.latlen, $_.x), $_.y)); //#16808
                            if ($_.cost < $get($_.curlen, $_.y)) { //#16816
                                $put($_.curlen, $_.y, $_.cost); //#16810
                                $k[$j++] = $_.curseq; //#16813
                                $k[$j++] = $_.y; //#16813
                                $k[$j++] = Infinity; //#16811
                                $aload($get($_.curseq, $_.x)); //#16812
                                $aload($get($get($_.latseq, $_.x), $_.y)); //#16813
                                var _8M = $a(); //#16813
                                var _8N = $k[--$j]; //#16814
                                $put($k[--$j], _8N, _8M); //#16814
                                $_.imp = true; //#16815
                            } //#16815
                        } //#16815
                    } //#16815
                    if (!$_.imp) { //#16819
                        break; //#16819
                    } //#16819
                } //#16819
                $_.nxtlen = $a([$_.e, $_.e, $_.e, $_.e]); //#16823
                $_.nxtseq = $a(4); //#16824
                var _8a = $a([$_.A, $_.L, $_.M, $_.P]); //#16826
                for (var _8b = 0, _8c = _8a.length; _8b < _8c; _8b++) { //#16859
                    $_.x = $get(_8a, _8b); //#16827
                    for (;;) { //#16857
                        var _8i = $get($get($_.charvals, $_.x), $_.char) !== undefined; //#16831
                        if (!_8i) { //#16831
                            break; //#16831
                        } //#16831
                        $_.cost = $f($get($_.curlen, $_.x) + 1); //#16834
                        if ($_.cost < $get($_.nxtlen, $_.x)) { //#16838
                            $put($_.nxtlen, $_.x, $_.cost); //#16836
                            $k[$j++] = $_.nxtseq; //#16837
                            $k[$j++] = $_.x; //#16837
                            $k[$j++] = Infinity; //#16837
                            $aload($get($_.curseq, $_.x)); //#16837
                            $k[$j++] = $_.char; //#16837
                            var _8z = $a(); //#16837
                            var _90 = $k[--$j]; //#16837
                            $put($k[--$j], _90, _8z); //#16837
                        } //#16837
                        var _96 = $a([$_.A, $_.L, $_.M, $_.P]); //#16841
                        for (var _97 = 0, _98 = _96.length; _97 < _98; _97++) { //#16854
                            $_.y = $get(_96, _97); //#16842
                            if ($ne($_.x, $_.y)) { //#16853
                                $_.cost = $f($f($get($_.curlen, $_.y) + $get($get($_.shftlen, $_.y), $_.x)) + 1); //#16844
                                if ($_.cost < $get($_.nxtlen, $_.y)) { //#16852
                                    $put($_.nxtlen, $_.y, $_.cost); //#16846
                                    $k[$j++] = $_.nxtseq; //#16850
                                    $k[$j++] = $_.y; //#16850
                                    $k[$j++] = Infinity; //#16847
                                    $aload($get($_.curseq, $_.y)); //#16848
                                    var _9Y = ($_.x == $_.A) ? $_.as : $_.ps; //#16849
                                    $k[$j++] = _9Y; //#16850
                                    $k[$j++] = $_.char; //#16850
                                    var _9a = $a(); //#16850
                                    var _9b = $k[--$j]; //#16851
                                    $put($k[--$j], _9b, _9a); //#16851
                                } //#16851
                            } //#16851
                        } //#16851
                        break; //#16856
                    } //#16856
                } //#16856
                $_.curlen = $_.nxtlen; //#16861
                $_.curseq = $_.nxtseq; //#16862
            }); //#16862
            $_.minseq = $_.e; //#16867
            var _9k = $a([$_.A, $_.L, $_.M, $_.P]); //#16868
            for (var _9l = 0, _9m = _9k.length; _9l < _9m; _9l++) { //#16874
                $_.k = $get(_9k, _9l); //#16869
                if ($get($_.curlen, $_.k) < $_.minseq) { //#16873
                    $_.minseq = $get($_.curlen, $_.k); //#16871
                    $_.txtseq = $get($_.curseq, $_.k); //#16872
                } //#16872
            } //#16872
            $_.text = $a($_.minseq); //#16877
            $_.k = 0; //#16878
            $_.l = 0; //#16878
            for (;;) { //#16898
                if ($_.k >= $_.txtseq.length) { //#16879
                    break; //#16879
                } //#16879
                $_.char = $get($_.txtseq, $_.k); //#16881
                $k[$j++] = $_.char; //#16884
                if ($_[$get($_.textencfuncs, $_.submode)]() === true) {
                    break;
                } //#16884
                $_.addtotext(); //#16884
                $_.k = $_.k + 1; //#16885
                if (($_.char == $_.as) || ($_.char == $_.ps)) { //#16891
                    $k[$j++] = $get($_.txtseq, $_.k); //#16889
                    if ($_.char == $_.as) { //#16889
                        $_.enca(); //#16889
                    } else { //#16889
                        $_.encp(); //#16889
                    } //#16889
                    $_.addtotext(); //#16889
                    $_.k = $_.k + 1; //#16890
                } //#16890
                if ($_.char == $_.al) { //#16894
                    $_.submode = $_.A; //#16894
                } //#16894
                if ($_.char == $_.ll) { //#16895
                    $_.submode = $_.L; //#16895
                } //#16895
                if ($_.char == $_.ml) { //#16896
                    $_.submode = $_.M; //#16896
                } //#16896
                if ($_.char == $_.pl) { //#16897
                    $_.submode = $_.P; //#16897
                } //#16897
            } //#16897
            if (($_.text.length % 2) == 1) { //#16945
                if ($_.submode == $_.P) { //#16941
                    $k[$j++] = 'pad'; //#16902
                    $k[$j++] = $_.al; //#16902
                    $_.encp(); //#16902
                    var _Ab = $k[--$j]; //#16902
                    $_[$k[--$j]] = _Ab; //#16902
                    $_.submode = $_.A; //#16903
                } else { //#16941
                    $_.nextecitext = false; //#16906
                    for (var _Ah = $_.i + 1, _Ag = $_.seq.length - 1; _Ah <= _Ag; _Ah += 1) { //#16913
                        $_.ti = _Ah; //#16909
                        if ($ne($type($get($_.seq, $_.ti)), 'arraytype')) { //#16910
                            $_.nextecitext = false; //#16910
                            break; //#16910
                        } //#16910
                        if ($get($get($_.seq, $_.ti), 0) > -1000000) { //#16911
                            break; //#16911
                        } //#16911
                        $_.nextecitext = true; //#16912
                    } //#16912
                    if ($_.nextecitext) { //#16941
                        if ($_.submode == $_.A) { //#16938
                            var _B0 = $get($get($_.charvals, $_.L), $get($get($_.seq, $_.ti), 0)) !== undefined; //#16916
                            if (_B0) { //#16921
                                $k[$j++] = 'pad'; //#16917
                                $k[$j++] = $_.ll; //#16917
                                $_.enca(); //#16917
                                var _B2 = $k[--$j]; //#16917
                                $_[$k[--$j]] = _B2; //#16917
                                $_.submode = $_.L; //#16918
                            } else { //#16921
                                $k[$j++] = 'pad'; //#16920
                                $k[$j++] = $_.ml; //#16920
                                $_.enca(); //#16920
                                var _B6 = $k[--$j]; //#16920
                                $_[$k[--$j]] = _B6; //#16920
                                $_.submode = $_.M; //#16921
                            } //#16921
                        } else { //#16938
                            if ($_.submode == $_.M) { //#16938
                                var _BI = $get($get($_.charvals, $_.L), $get($get($_.seq, $_.ti), 0)) !== undefined; //#16925
                                if (_BI) { //#16934
                                    $k[$j++] = 'pad'; //#16926
                                    $k[$j++] = $_.ll; //#16926
                                    $_.encm(); //#16926
                                    var _BK = $k[--$j]; //#16926
                                    $_[$k[--$j]] = _BK; //#16926
                                    $_.submode = $_.L; //#16927
                                } else { //#16934
                                    var _BU = $get($get($_.charvals, $_.P), $get($get($_.seq, $_.ti), 0)) !== undefined; //#16929
                                    if (_BU) { //#16934
                                        $k[$j++] = 'pad'; //#16930
                                        $k[$j++] = $_.pl; //#16930
                                        $_.encm(); //#16930
                                        var _BW = $k[--$j]; //#16930
                                        $_[$k[--$j]] = _BW; //#16930
                                        $_.submode = $_.P; //#16931
                                    } else { //#16934
                                        $k[$j++] = 'pad'; //#16933
                                        $k[$j++] = $_.al; //#16933
                                        $_.encm(); //#16933
                                        var _Ba = $k[--$j]; //#16933
                                        $_[$k[--$j]] = _Ba; //#16933
                                        $_.submode = $_.A; //#16934
                                    } //#16934
                                } //#16934
                            } else { //#16938
                                $k[$j++] = 'pad'; //#16937
                                $k[$j++] = $_.ml; //#16937
                                $_.encl(); //#16937
                                var _Be = $k[--$j]; //#16937
                                $_[$k[--$j]] = _Be; //#16937
                                $_.submode = $_.M; //#16938
                            } //#16938
                        } //#16938
                    } else { //#16941
                        $k[$j++] = 'pad'; //#16941
                        $k[$j++] = $_.ps; //#16941
                        if ($_[$get($_.textencfuncs, $_.submode)]() === true) {
                            return true;
                        } //#16941
                        var _Bm = $k[--$j]; //#16941
                        $_[$k[--$j]] = _Bm; //#16941
                    } //#16941
                } //#16941
                $k[$j++] = Infinity; //#16944
                $aload($_.text); //#16944
                $k[$j++] = $_.pad; //#16944
                $_.text = $a(); //#16944
            } //#16944
            $_.out = $a(~~($_.text.length / 2)); //#16947
            for (var _Bv = 0, _Bu = $_.out.length - 1; _Bv <= _Bu; _Bv += 1) { //#16951
                $_.k = _Bv; //#16949
                $put($_.out, $_.k, $f(($get($_.text, $_.k * 2) * 30) + $get($_.text, ($_.k * 2) + 1))); //#16950
            } //#16950
            $k[$j++] = $_.out; //#16953
        }; //#16953
        $_.encn = function() {
            $_.in = $k[--$j]; //#16958
            $_.out = $a([]); //#16959
            for (var _C9 = 0, _C8 = $_.in.length - 1; _C9 <= _C8; _C9 += 44) { //#16987
                $_.k = _C9; //#16961
                $k[$j++] = Infinity; //#16962
                var _CE = $_.in.length - $_.k; //#16963
                $k[$j++] = 1; //#16963
                $k[$j++] = $_.in; //#16963
                $k[$j++] = $_.k; //#16963
                $k[$j++] = _CE; //#16963
                if (_CE > 44) { //#16963
                    $j--; //#16963
                    $k[$j++] = 44; //#16963
                } //#16963
                var _CF = $k[--$j]; //#16963
                var _CG = $k[--$j]; //#16963
                var _CI = $geti($k[--$j], _CG, _CF); //#16963
                for (var _CJ = 0, _CK = _CI.length; _CJ < _CK; _CJ++) { //#16964
                    $k[$j++] = $f($get(_CI, _CJ) - 48); //#16964
                } //#16964
                $_.gmod = $a(); //#16964
                $_.cwn = $a([]); //#16966
                for (;;) { //#16985
                    $_.dv = 900; //#16967
                    $_.gmul = $a([]); //#16968
                    $_.val = 0; //#16968
                    for (;;) { //#16980
                        if ($_.gmod.length == 0) { //#16969
                            break; //#16969
                        } //#16969
                        $_.val = $f(($_.val * 10) + $get($_.gmod, 0)); //#16970
                        $_.gmod = $geti($_.gmod, 1, $_.gmod.length - 1); //#16971
                        if ($_.val < $_.dv) { //#16977
                            if ($_.gmul.length != 0) { //#16975
                                $k[$j++] = Infinity; //#16974
                                $aload($_.gmul); //#16974
                                $k[$j++] = 0; //#16974
                                $_.gmul = $a(); //#16974
                            } //#16974
                        } else { //#16977
                            $k[$j++] = Infinity; //#16977
                            $aload($_.gmul); //#16977
                            $k[$j++] = ~~($_.val / $_.dv); //#16977
                            $_.gmul = $a(); //#16977
                        } //#16977
                        $_.val = $_.val % $_.dv; //#16979
                    } //#16979
                    $_.dv = $_.val; //#16981
                    $k[$j++] = Infinity; //#16982
                    $k[$j++] = $_.dv; //#16982
                    $aload($_.cwn); //#16982
                    $_.cwn = $a(); //#16982
                    $_.gmod = $_.gmul; //#16983
                    if ($_.gmul.length == 0) { //#16984
                        break; //#16984
                    } //#16984
                } //#16984
                $k[$j++] = Infinity; //#16986
                $aload($_.out); //#16986
                $aload($_.cwn); //#16986
                $_.out = $a(); //#16986
            } //#16986
            $k[$j++] = $_.out; //#16988
        }; //#16988
        $_.ence = function() {
            var _Ct = $f((-$get($k[--$j], 0)) - 1000000); //#16993
            $k[$j++] = _Ct; //#17001
            if (_Ct <= 899) { //#17000
                var _Cu = $k[--$j]; //#16994
                $k[$j++] = 927; //#16994
                $k[$j++] = _Cu; //#16994
                $astore($a(2)); //#16994
            } else { //#17000
                var _Cw = $k[--$j]; //#16995
                $k[$j++] = _Cw; //#17001
                if (_Cw <= 810899) { //#17000
                    var _Cx = $k[--$j]; //#16996
                    $k[$j++] = 926; //#16996
                    $k[$j++] = (~~(_Cx / 900)) - 1; //#16996
                    $k[$j++] = _Cx % 900; //#16996
                    $astore($a(3)); //#16996
                } else { //#17000
                    var _Cz = $k[--$j]; //#16997
                    $k[$j++] = _Cz; //#17001
                    if (_Cz <= 811799) { //#17000
                        var _D0 = $k[--$j]; //#16998
                        $k[$j++] = 925; //#16998
                        $k[$j++] = $f(_D0 - 810900); //#16998
                        $astore($a(2)); //#16998
                    } else { //#17000
                        $k[$j++] = 'bwipp.pdf417badECI#17000'; //#17000
                        $k[$j++] = "PDF417 supports ECIs 000000 to 811799"; //#17000
                        bwipp_raiseerror(); //#17000
                    } //#17000
                } //#17000
            } //#17000
        }; //#17000
        $_.encfuncs = $a(['enct', 'encn', 'encb']); //#17004
        $_.addtocws = function() {
            var _D3 = $k[--$j]; //#17007
            $puti($_.datcws, $_.j, _D3); //#17007
            $_.j = _D3.length + $_.j; //#17008
        }; //#17008
        $_.state = $_.T; //#17012
        $_.submode = $_.A; //#17012
        $_.datcws = $a($_.seqlen); //#17013
        $_.i = 0; //#17014
        $_.j = 0; //#17014
        for (;;) { //#17034
            if ($_.i >= $_.seq.length) { //#17015
                break; //#17015
            } //#17015
            $_.chars = $get($_.seq, $_.i); //#17016
            if ($eq($type($_.chars), 'arraytype')) { //#17030
                if ($get($_.chars, 0) <= -1000000) { //#17021
                    $k[$j++] = $_.chars; //#17019
                    $_.ence(); //#17019
                    $_.addtocws(); //#17019
                } else { //#17021
                    $k[$j++] = $_.chars; //#17021
                    if ($_[$get($_.encfuncs, $_.state)]() === true) {
                        break;
                    } //#17021
                    $_.addtocws(); //#17021
                } //#17021
            } else { //#17030
                $k[$j++] = $a([$get($_.latchcws, $_.chars)]); //#17024
                $_.addtocws(); //#17024
                if ($_.chars == $_.tl) { //#17025
                    $_.state = $_.T; //#17025
                    $_.submode = $_.A; //#17025
                } //#17025
                if ($_.chars == $_.nl) { //#17026
                    $_.state = $_.N; //#17026
                } //#17026
                if (($_.chars == $_.bl) || ($_.chars == $_.bl6)) { //#17027
                    $_.state = $_.B; //#17027
                } //#17027
                if ($_.chars == $_.bs) { //#17031
                    $_.i = $_.i + 1; //#17029
                    $k[$j++] = $get($_.seq, $_.i); //#17030
                    $_.encb(); //#17030
                    $_.addtocws(); //#17030
                } //#17030
            } //#17030
            $_.i = $_.i + 1; //#17033
        } //#17033
        $_.datcws = $geti($_.datcws, 0, $_.j); //#17035
    } //#17035
    $_.m = $_.datcws.length; //#17039
    if ($_.eclevel == -1) { //#17045
        if ($_.m <= 40) { //#17041
            $_.eclevel = 2; //#17041
        } //#17041
        if (($_.m >= 41) && ($_.m <= 160)) { //#17042
            $_.eclevel = 3; //#17042
        } //#17042
        if (($_.m >= 161) && ($_.m <= 320)) { //#17043
            $_.eclevel = 4; //#17043
        } //#17043
        if ($_.m >= 321) { //#17044
            $_.eclevel = 5; //#17044
        } //#17044
    } //#17044
    $_.maxeclevel = (~~((Math.log((928 - 1) - $_.m)) / Math.log(2))) - 1; //#17048
    if ($_.eclevel > $_.maxeclevel) { //#17049
        $_.eclevel = $_.maxeclevel; //#17049
    } //#17049
    $_.k = ~~Math.pow(2, $_.eclevel + 1); //#17050
    if ($_.columns == 0) { //#17053
        $_.columns = ~~(Math.round(Math.sqrt(($_.m + $_.k) / 3))); //#17053
    } //#17053
    $k[$j++] = 'c'; //#17054
    if ($_.columns >= 1) { //#17054
        $k[$j++] = $_.columns; //#17054
    } else { //#17054
        $k[$j++] = 1; //#17054
    } //#17054
    var _E8 = $k[--$j]; //#17054
    $_[$k[--$j]] = _E8; //#17054
    $_.r = ~~(Math.ceil((($_.m + $_.k) + 1) / $_.columns)); //#17057
    if (($_.r < $_.rows) && ($_.rows <= 90)) { //#17058
        $_.r = $_.rows; //#17058
    } //#17058
    if ($_.r < 3) { //#17059
        $_.r = 3; //#17059
    } //#17059
    if ($_.r > 90) { //#17064
        $k[$j++] = 'bwipp.pdf417insufficientCapacity#17063'; //#17063
        $k[$j++] = "Insufficient capacity in the symbol"; //#17063
        bwipp_raiseerror(); //#17063
    } //#17063
    var _EJ = $_.c; //#17067
    var _EK = $_.r; //#17067
    var _EL = $_.m; //#17067
    var _EM = 8; //#17067
    var _EN = (~~((Math.log($f(($f((_EJ * _EK) - 1)) - _EL))) / Math.log(2))) - 1; //#17067
    if (((~~((Math.log($f(($f((_EJ * _EK) - 1)) - _EL))) / Math.log(2))) - 1) > 8) { //#17067
        var _ = _EM; //#17067
        _EM = _EN; //#17067
        _EN = _; //#17067
    } //#17067
    $_.maxeclevel = _EN; //#17067
    if ($_.maxeclevel > $_.eclevel) { //#17071
        $_.eclevel = $_.maxeclevel; //#17069
        $_.k = ~~Math.pow(2, $_.eclevel + 1); //#17070
    } //#17070
    $_.n = $f(($_.c * $_.r) - $_.k); //#17074
    $_.cws = $a($f(($_.c * $_.r) + 1)); //#17075
    $put($_.cws, 0, $_.n); //#17076
    $puti($_.cws, 1, $_.datcws); //#17077
    $k[$j++] = $_.cws; //#17078
    $k[$j++] = $_.m + 1; //#17078
    $k[$j++] = Infinity; //#17078
    for (var _Eg = 0, _Eh = $f($f($_.n - $_.m) - 1); _Eg < _Eh; _Eg++) { //#17078
        $k[$j++] = 900; //#17078
    } //#17078
    var _Ei = $a(); //#17078
    var _Ej = $k[--$j]; //#17078
    $puti($k[--$j], _Ej, _Ei); //#17078
    $k[$j++] = $_.cws; //#17079
    $k[$j++] = $_.n; //#17079
    $k[$j++] = Infinity; //#17079
    for (var _Eo = 0, _Ep = $_.k; _Eo < _Ep; _Eo++) { //#17079
        $k[$j++] = 0; //#17079
    } //#17079
    $k[$j++] = 0; //#17079
    var _Eq = $a(); //#17079
    var _Er = $k[--$j]; //#17079
    $puti($k[--$j], _Er, _Eq); //#17079
    if (!bwipp_pdf417.__17086__) { //#17086
        $_ = Object.create($_); //#17086
        $k[$j++] = Infinity; //#17083
        $k[$j++] = 1; //#17083
        for (var _Et = 0, _Eu = 928; _Et < _Eu; _Et++) { //#17083
            var _Ev = $k[--$j]; //#17083
            $k[$j++] = _Ev; //#17083
            $k[$j++] = (_Ev * 3) % 929; //#17083
        } //#17083
        $_.rsalog = $a(); //#17083
        $_.rslog = $a(929); //#17084
        for (var _Ey = 1; _Ey <= 928; _Ey += 1) { //#17085
            $put($_.rslog, $get($_.rsalog, _Ey), _Ey); //#17085
        } //#17085
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_pdf417.$ctx[id] = $_[id]); //#17085
        bwipp_pdf417.__17086__ = 1; //#17085
        $_ = Object.getPrototypeOf($_); //#17085
    } //#17085
    $_.rsprod = function() {
        var _F3 = $k[--$j]; //#17090
        var _F4 = $k[--$j]; //#17090
        $k[$j++] = _F4; //#17094
        $k[$j++] = _F3; //#17094
        if ((_F3 != 0) && (_F4 != 0)) { //#17093
            var _F7 = $get($_.rslog, $k[--$j]); //#17091
            var _FC = $get($_.rsalog, $f(_F7 + $get($_.rslog, $k[--$j])) % 928); //#17091
            $k[$j++] = _FC; //#17091
        } else { //#17093
            $j -= 2; //#17093
            $k[$j++] = 0; //#17093
        } //#17093
    }; //#17093
    $k[$j++] = Infinity; //#17098
    $k[$j++] = 1; //#17098
    for (var _FE = 0, _FF = $_.k; _FE < _FF; _FE++) { //#17098
        $k[$j++] = 0; //#17098
    } //#17098
    $_.coeffs = $a(); //#17098
    for (var _FJ = 1, _FI = $_.k; _FJ <= _FI; _FJ += 1) { //#17107
        $_.i = _FJ; //#17100
        $put($_.coeffs, $_.i, $get($_.coeffs, $_.i - 1)); //#17101
        for (var _FQ = $_.i - 1; _FQ >= 1; _FQ -= 1) { //#17105
            $_.j = _FQ; //#17103
            $k[$j++] = $_.coeffs; //#17104
            $k[$j++] = $_.j; //#17104
            $k[$j++] = $get($_.coeffs, $_.j - 1); //#17104
            $k[$j++] = $get($_.coeffs, $_.j); //#17104
            $k[$j++] = $get($_.rsalog, $_.i); //#17104
            $_.rsprod(); //#17104
            var _Fc = $k[--$j]; //#17104
            var _Fd = $k[--$j]; //#17104
            var _Fe = $k[--$j]; //#17104
            $put($k[--$j], _Fe, $f(_Fd + _Fc) % 929); //#17104
        } //#17104
        $k[$j++] = $_.coeffs; //#17106
        $k[$j++] = 0; //#17106
        $k[$j++] = $get($_.coeffs, 0); //#17106
        $k[$j++] = $get($_.rsalog, $_.i); //#17106
        $_.rsprod(); //#17106
        var _Fm = $k[--$j]; //#17106
        var _Fn = $k[--$j]; //#17106
        $put($k[--$j], _Fn, _Fm); //#17106
    } //#17106
    $_.coeffs = $geti($_.coeffs, 0, $_.coeffs.length - 1); //#17108
    for (var _Ft = $_.coeffs.length - 1; _Ft >= 0; _Ft -= 2) { //#17109
        var _Fu = $_.coeffs; //#17109
        $put(_Fu, _Ft, $f(929 - $get(_Fu, _Ft))); //#17109
    } //#17109
    for (var _Fy = 0, _Fx = $f($_.n - 1); _Fy <= _Fx; _Fy += 1) { //#17118
        $_.t = $f($get($_.cws, _Fy) + $get($_.cws, $_.n)) % 929; //#17113
        for (var _G6 = 0, _G5 = $_.k - 1; _G6 <= _G5; _G6 += 1) { //#17117
            $_.j = _G6; //#17115
            $put($_.cws, $f($_.n + $_.j), ($f($get($_.cws, $f($f($_.n + $_.j) + 1)) + ($f(929 - (($_.t * $get($_.coeffs, ($_.k - $_.j) - 1)) % 929))))) % 929); //#17116
        } //#17116
    } //#17116
    for (var _GN = $_.n, _GM = $f($_.n + $_.k); _GN <= _GM; _GN += 1) { //#17119
        $put($_.cws, _GN, $f(929 - $get($_.cws, _GN)) % 929); //#17119
    } //#17119
    $_.cws = $geti($_.cws, 0, $_.cws.length - 1); //#17122
    var _GV = $get($_.options, 'debugcws') !== undefined; //#17124
    if (_GV) { //#17124
        $k[$j++] = 'bwipp.debugcws#17124'; //#17124
        $k[$j++] = $_.cws; //#17124
        bwipp_raiseerror(); //#17124
    } //#17124
    if (!bwipp_pdf417.__17368__) { //#17368
        $_ = Object.create($_); //#17368
        $_.clusters = $a([$a([120256, 125680, 128380, 120032, 125560, 128318, 108736, 119920, 108640, 86080, 108592, 86048, 110016, 120560, 125820, 109792, 120440, 125758, 88256, 109680, 88160, 89536, 110320, 120700, 89312, 110200, 120638, 89200, 110140, 89840, 110460, 89720, 110398, 89980, 128506, 119520, 125304, 128190, 107712, 119408, 125244, 107616, 119352, 84032, 107568, 119324, 84000, 107544, 83984, 108256, 119672, 125374, 85184, 108144, 119612, 85088, 108088, 119582, 85040, 108060, 85728, 108408, 119742, 85616, 108348, 85560, 108318, 85880, 108478, 85820, 85790, 107200, 119152, 125116, 107104, 119096, 125086, 83008, 107056, 119068, 82976, 107032, 82960, 82952, 83648, 107376, 119228, 83552, 107320, 119198, 83504, 107292, 83480, 83468, 83824, 107452, 83768, 107422, 83740, 83900, 106848, 118968, 125022, 82496, 106800, 118940, 82464, 106776, 118926, 82448, 106764, 82440, 106758, 82784, 106936, 119006, 82736, 106908, 82712, 106894, 82700, 82694, 106974, 82830, 82240, 106672, 118876, 82208, 106648, 118862, 82192, 106636, 82184, 106630, 82180, 82352, 82328, 82316, 82080, 118830, 106572, 106566, 82050, 117472, 124280, 127678, 103616, 117360, 124220, 103520, 117304, 124190, 75840, 103472, 75808, 104160, 117624, 124350, 76992, 104048, 117564, 76896, 103992, 76848, 76824, 77536, 104312, 117694, 77424, 104252, 77368, 77340, 77688, 104382, 77628, 77758, 121536, 126320, 128700, 121440, 126264, 128670, 111680, 121392, 126236, 111648, 121368, 126222, 111632, 121356, 103104, 117104, 124092, 112320, 103008, 117048, 124062, 112224, 121656, 126366, 93248, 74784, 102936, 117006, 93216, 112152, 93200, 75456, 103280, 117180, 93888, 75360, 103224, 117150, 93792, 112440, 121758, 93744, 75288, 93720, 75632, 103356, 94064, 75576, 103326, 94008, 112542, 93980, 75708, 94140, 75678, 94110, 121184, 126136, 128606, 111168, 121136, 126108, 111136, 121112, 126094, 111120, 121100, 111112, 111108, 102752, 116920, 123998, 111456, 102704, 116892, 91712, 74272, 121244, 116878, 91680, 74256, 102668, 91664, 111372, 102662, 74244, 74592, 102840, 116958, 92000, 74544, 102812, 91952, 111516, 102798, 91928, 74508, 74502, 74680, 102878, 92088, 74652, 92060, 74638, 92046, 92126, 110912, 121008, 126044, 110880, 120984, 126030, 110864, 120972, 110856, 120966, 110852, 110850, 74048, 102576, 116828, 90944, 74016, 102552, 116814, 90912, 111000, 121038, 90896, 73992, 102534, 90888, 110982, 90884, 74160, 102620, 91056, 74136, 102606, 91032, 111054, 91020, 74118, 91014, 91100, 91086, 110752, 120920, 125998, 110736, 120908, 110728, 120902, 110724, 110722, 73888, 102488, 116782, 90528, 73872, 102476, 90512, 110796, 102470, 90504, 73860, 90500, 73858, 73944, 90584, 90572, 90566, 120876, 120870, 110658, 102444, 73800, 90312, 90308, 90306, 101056, 116080, 123580, 100960, 116024, 70720, 100912, 115996, 70688, 100888, 70672, 70664, 71360, 101232, 116156, 71264, 101176, 116126, 71216, 101148, 71192, 71180, 71536, 101308, 71480, 101278, 71452, 71612, 71582, 118112, 124600, 127838, 105024, 118064, 124572, 104992, 118040, 124558, 104976, 118028, 104968, 118022, 100704, 115896, 123486, 105312, 100656, 115868, 79424, 70176, 118172, 115854, 79392, 105240, 100620, 79376, 70152, 79368, 70496, 100792, 115934, 79712, 70448, 118238, 79664, 105372, 100750, 79640, 70412, 79628, 70584, 100830, 79800, 70556, 79772, 70542, 70622, 79838, 122176, 126640, 128860, 122144, 126616, 128846, 122128, 126604, 122120, 126598, 122116, 104768, 117936, 124508, 113472, 104736, 126684, 124494, 113440, 122264, 126670, 113424, 104712, 117894, 113416, 122246, 104706, 69952, 100528, 115804, 78656, 69920, 100504, 115790, 96064, 78624, 104856, 117966, 96032, 113560, 122318, 100486, 96016, 78600, 104838, 96008, 69890, 70064, 100572, 78768, 70040, 100558, 96176, 78744, 104910, 96152, 113614, 70022, 78726, 70108, 78812, 70094, 96220, 78798, 122016, 126552, 128814, 122000, 126540, 121992, 126534, 121988, 121986, 104608, 117848, 124462, 113056, 104592, 126574, 113040, 122060, 117830, 113032, 104580, 113028, 104578, 113026, 69792, 100440, 115758, 78240, 69776, 100428, 95136, 78224, 104652, 100422, 95120, 113100, 69764, 95112, 78212, 69762, 78210, 69848, 100462, 78296, 69836, 95192, 78284, 69830, 95180, 78278, 69870, 95214, 121936, 126508, 121928, 126502, 121924, 121922, 104528, 117804, 112848, 104520, 117798, 112840, 121958, 112836, 104514, 112834, 69712, 100396, 78032, 69704, 100390, 94672, 78024, 104550, 94664, 112870, 69698, 94660, 78018, 94658, 78060, 94700, 94694, 126486, 121890, 117782, 104484, 104482, 69672, 77928, 94440, 69666, 77922, 99680, 68160, 99632, 68128, 99608, 115342, 68112, 99596, 68104, 99590, 68448, 99768, 115422, 68400, 99740, 68376, 99726, 68364, 68358, 68536, 99806, 68508, 68494, 68574, 101696, 116400, 123740, 101664, 116376, 101648, 116364, 101640, 116358, 101636, 67904, 99504, 115292, 72512, 67872, 116444, 115278, 72480, 101784, 116430, 72464, 67848, 99462, 72456, 101766, 67842, 68016, 99548, 72624, 67992, 99534, 72600, 101838, 72588, 67974, 68060, 72668, 68046, 72654, 118432, 124760, 127918, 118416, 124748, 118408, 124742, 118404, 118402, 101536, 116312, 105888, 101520, 116300, 105872, 118476, 116294, 105864, 101508, 105860, 101506, 105858, 67744, 99416, 72096, 67728, 116334, 80800, 72080, 101580, 99398, 80784, 105932, 67716, 80776, 72068, 67714, 72066, 67800, 99438, 72152, 67788, 80856, 72140, 67782, 80844, 72134, 67822, 72174, 80878, 126800, 128940, 126792, 128934, 126788, 126786, 118352, 124716, 122576, 126828, 124710, 122568, 126822, 122564, 118338, 122562, 101456, 116268, 105680, 101448, 116262, 114128, 105672, 118374, 114120, 122598, 101442, 114116, 105666, 114114, 67664, 99372, 71888, 67656, 99366, 80336, 71880, 101478, 97232, 80328, 105702, 67650, 97224, 114150, 71874, 97220, 67692, 71916, 67686, 80364, 71910, 97260, 80358, 97254, 126760, 128918, 126756, 126754, 118312, 124694, 122472, 126774, 122468, 118306, 122466, 101416, 116246, 105576, 101412, 113896, 105572, 101410, 113892, 105570, 113890, 67624, 99350, 71784, 101430, 80104, 71780, 67618, 96744, 80100, 71778, 96740, 80098, 96738, 71798, 96758, 126738, 122420, 122418, 105524, 113780, 113778, 71732, 79988, 96500, 96498, 66880, 66848, 98968, 66832, 66824, 66820, 66992, 66968, 66956, 66950, 67036, 67022, 100000, 99984, 115532, 99976, 115526, 99972, 99970, 66720, 98904, 69024, 100056, 98892, 69008, 100044, 69000, 100038, 68996, 66690, 68994, 66776, 98926, 69080, 100078, 69068, 66758, 69062, 66798, 69102, 116560, 116552, 116548, 116546, 99920, 102096, 116588, 115494, 102088, 116582, 102084, 99906, 102082, 66640, 68816, 66632, 98854, 73168, 68808, 66628, 73160, 68804, 66626, 73156, 68802, 66668, 68844, 66662, 73196, 68838, 73190, 124840, 124836, 124834, 116520, 118632, 124854, 118628, 116514, 118626, 99880, 115478, 101992, 116534, 106216, 101988, 99874, 106212, 101986, 106210, 66600, 98838, 68712, 99894, 72936, 68708, 66594, 81384, 72932, 68706, 81380, 72930, 66614, 68726, 72950, 81398, 128980, 128978, 124820, 126900, 124818, 126898, 116500, 118580, 116498, 122740, 118578, 122738, 99860, 101940, 99858, 106100, 101938, 114420]), $a([128352, 129720, 125504, 128304, 129692, 125472, 128280, 129678, 125456, 128268, 125448, 128262, 125444, 125792, 128440, 129758, 120384, 125744, 128412, 120352, 125720, 128398, 120336, 125708, 120328, 125702, 120324, 120672, 125880, 128478, 110144, 120624, 125852, 110112, 120600, 125838, 110096, 120588, 110088, 120582, 110084, 110432, 120760, 125918, 89664, 110384, 120732, 89632, 110360, 120718, 89616, 110348, 89608, 110342, 89952, 110520, 120798, 89904, 110492, 89880, 110478, 89868, 90040, 110558, 90012, 89998, 125248, 128176, 129628, 125216, 128152, 129614, 125200, 128140, 125192, 128134, 125188, 125186, 119616, 125360, 128220, 119584, 125336, 128206, 119568, 125324, 119560, 125318, 119556, 119554, 108352, 119728, 125404, 108320, 119704, 125390, 108304, 119692, 108296, 119686, 108292, 108290, 85824, 108464, 119772, 85792, 108440, 119758, 85776, 108428, 85768, 108422, 85764, 85936, 108508, 85912, 108494, 85900, 85894, 85980, 85966, 125088, 128088, 129582, 125072, 128076, 125064, 128070, 125060, 125058, 119200, 125144, 128110, 119184, 125132, 119176, 125126, 119172, 119170, 107424, 119256, 125166, 107408, 119244, 107400, 119238, 107396, 107394, 83872, 107480, 119278, 83856, 107468, 83848, 107462, 83844, 83842, 83928, 107502, 83916, 83910, 83950, 125008, 128044, 125000, 128038, 124996, 124994, 118992, 125036, 118984, 125030, 118980, 118978, 106960, 119020, 106952, 119014, 106948, 106946, 82896, 106988, 82888, 106982, 82884, 82882, 82924, 82918, 124968, 128022, 124964, 124962, 118888, 124982, 118884, 118882, 106728, 118902, 106724, 106722, 82408, 106742, 82404, 82402, 124948, 124946, 118836, 118834, 106612, 106610, 124224, 127664, 129372, 124192, 127640, 129358, 124176, 127628, 124168, 127622, 124164, 124162, 117568, 124336, 127708, 117536, 124312, 127694, 117520, 124300, 117512, 124294, 117508, 117506, 104256, 117680, 124380, 104224, 117656, 124366, 104208, 117644, 104200, 117638, 104196, 104194, 77632, 104368, 117724, 77600, 104344, 117710, 77584, 104332, 77576, 104326, 77572, 77744, 104412, 77720, 104398, 77708, 77702, 77788, 77774, 128672, 129880, 93168, 128656, 129868, 92664, 128648, 129862, 92412, 128644, 128642, 124064, 127576, 129326, 126368, 124048, 129902, 126352, 128716, 127558, 126344, 124036, 126340, 124034, 126338, 117152, 124120, 127598, 121760, 117136, 124108, 121744, 126412, 124102, 121736, 117124, 121732, 117122, 121730, 103328, 117208, 124142, 112544, 103312, 117196, 112528, 121804, 117190, 112520, 103300, 112516, 103298, 112514, 75680, 103384, 117230, 94112, 75664, 103372, 94096, 112588, 103366, 94088, 75652, 94084, 75650, 75736, 103406, 94168, 75724, 94156, 75718, 94150, 75758, 128592, 129836, 91640, 128584, 129830, 91388, 128580, 91262, 128578, 123984, 127532, 126160, 123976, 127526, 126152, 128614, 126148, 123970, 126146, 116944, 124012, 121296, 116936, 124006, 121288, 126182, 121284, 116930, 121282, 102864, 116972, 111568, 102856, 116966, 111560, 121318, 111556, 102850, 111554, 74704, 102892, 92112, 74696, 102886, 92104, 111590, 92100, 74690, 92098, 74732, 92140, 74726, 92134, 128552, 129814, 90876, 128548, 90750, 128546, 123944, 127510, 126056, 128566, 126052, 123938, 126050, 116840, 123958, 121064, 116836, 121060, 116834, 121058, 102632, 116854, 111080, 121078, 111076, 102626, 111074, 74216, 102646, 91112, 74212, 91108, 74210, 91106, 74230, 91126, 128532, 90494, 128530, 123924, 126004, 123922, 126002, 116788, 120948, 116786, 120946, 102516, 110836, 102514, 110834, 73972, 90612, 73970, 90610, 128522, 123914, 125978, 116762, 120890, 102458, 110714, 123552, 127320, 129198, 123536, 127308, 123528, 127302, 123524, 123522, 116128, 123608, 127342, 116112, 123596, 116104, 123590, 116100, 116098, 101280, 116184, 123630, 101264, 116172, 101256, 116166, 101252, 101250, 71584, 101336, 116206, 71568, 101324, 71560, 101318, 71556, 71554, 71640, 101358, 71628, 71622, 71662, 127824, 129452, 79352, 127816, 129446, 79100, 127812, 78974, 127810, 123472, 127276, 124624, 123464, 127270, 124616, 127846, 124612, 123458, 124610, 115920, 123500, 118224, 115912, 123494, 118216, 124646, 118212, 115906, 118210, 100816, 115948, 105424, 100808, 115942, 105416, 118246, 105412, 100802, 105410, 70608, 100844, 79824, 70600, 100838, 79816, 105446, 79812, 70594, 79810, 70636, 79852, 70630, 79846, 129960, 95728, 113404, 129956, 95480, 113278, 129954, 95356, 95294, 127784, 129430, 78588, 128872, 129974, 95996, 78462, 128868, 127778, 95870, 128866, 123432, 127254, 124520, 123428, 126696, 128886, 123426, 126692, 124514, 126690, 115816, 123446, 117992, 115812, 122344, 117988, 115810, 122340, 117986, 122338, 100584, 115830, 104936, 100580, 113640, 104932, 100578, 113636, 104930, 113634, 70120, 100598, 78824, 70116, 96232, 78820, 70114, 96228, 78818, 96226, 70134, 78838, 129940, 94968, 113022, 129938, 94844, 94782, 127764, 78206, 128820, 127762, 95102, 128818, 123412, 124468, 123410, 126580, 124466, 126578, 115764, 117876, 115762, 122100, 117874, 122098, 100468, 104692, 100466, 113140, 104690, 113138, 69876, 78324, 69874, 95220, 78322, 95218, 129930, 94588, 94526, 127754, 128794, 123402, 124442, 126522, 115738, 117818, 121978, 100410, 104570, 112890, 69754, 78074, 94714, 94398, 123216, 127148, 123208, 127142, 123204, 123202, 115408, 123244, 115400, 123238, 115396, 115394, 99792, 115436, 99784, 115430, 99780, 99778, 68560, 99820, 68552, 99814, 68548, 68546, 68588, 68582, 127400, 129238, 72444, 127396, 72318, 127394, 123176, 127126, 123752, 123172, 123748, 123170, 123746, 115304, 123190, 116456, 115300, 116452, 115298, 116450, 99560, 115318, 101864, 99556, 101860, 99554, 101858, 68072, 99574, 72680, 68068, 72676, 68066, 72674, 68086, 72694, 129492, 80632, 105854, 129490, 80508, 80446, 127380, 72062, 127924, 127378, 80766, 127922, 123156, 123700, 123154, 124788, 123698, 124786, 115252, 116340, 115250, 118516, 116338, 118514, 99444, 101620, 99442, 105972, 101618, 105970, 67828, 72180, 67826, 80884, 72178, 80882, 97008, 114044, 96888, 113982, 96828, 96798, 129482, 80252, 130010, 97148, 80190, 97086, 127370, 127898, 128954, 123146, 123674, 124730, 126842, 115226, 116282, 118394, 122618, 99386, 101498, 105722, 114170, 67706, 71930, 80378, 96632, 113854, 96572, 96542, 80062, 96702, 96444, 96414, 96350, 123048, 123044, 123042, 115048, 123062, 115044, 115042, 99048, 115062, 99044, 99042, 67048, 99062, 67044, 67042, 67062, 127188, 68990, 127186, 123028, 123316, 123026, 123314, 114996, 115572, 114994, 115570, 98932, 100084, 98930, 100082, 66804, 69108, 66802, 69106, 129258, 73084, 73022, 127178, 127450, 123018, 123290, 123834, 114970, 115514, 116602, 98874, 99962, 102138, 66682, 68858, 73210, 81272, 106174, 81212, 81182, 72894, 81342, 97648, 114364, 97592, 114334, 97564, 97550, 81084, 97724, 81054, 97694, 97464, 114270, 97436, 97422, 80990, 97502, 97372, 97358, 97326, 114868, 114866, 98676, 98674, 66292, 66290, 123098, 114842, 115130, 98618, 99194, 66170, 67322, 69310, 73404, 73374, 81592, 106334, 81564, 81550, 73310, 81630, 97968, 114524, 97944, 114510, 97932, 97926, 81500, 98012, 81486, 97998, 97880, 114478, 97868, 97862, 81454, 97902, 97836, 97830, 69470, 73564, 73550, 81752, 106414, 81740, 81734, 73518, 81774, 81708, 81702]), $a([109536, 120312, 86976, 109040, 120060, 86496, 108792, 119934, 86256, 108668, 86136, 129744, 89056, 110072, 129736, 88560, 109820, 129732, 88312, 109694, 129730, 88188, 128464, 129772, 89592, 128456, 129766, 89340, 128452, 89214, 128450, 125904, 128492, 125896, 128486, 125892, 125890, 120784, 125932, 120776, 125926, 120772, 120770, 110544, 120812, 110536, 120806, 110532, 84928, 108016, 119548, 84448, 107768, 119422, 84208, 107644, 84088, 107582, 84028, 129640, 85488, 108284, 129636, 85240, 108158, 129634, 85116, 85054, 128232, 129654, 85756, 128228, 85630, 128226, 125416, 128246, 125412, 125410, 119784, 125430, 119780, 119778, 108520, 119798, 108516, 108514, 83424, 107256, 119166, 83184, 107132, 83064, 107070, 83004, 82974, 129588, 83704, 107390, 129586, 83580, 83518, 128116, 83838, 128114, 125172, 125170, 119284, 119282, 107508, 107506, 82672, 106876, 82552, 106814, 82492, 82462, 129562, 82812, 82750, 128058, 125050, 119034, 82296, 106686, 82236, 82206, 82366, 82108, 82078, 76736, 103920, 117500, 76256, 103672, 117374, 76016, 103548, 75896, 103486, 75836, 129384, 77296, 104188, 129380, 77048, 104062, 129378, 76924, 76862, 127720, 129398, 77564, 127716, 77438, 127714, 124392, 127734, 124388, 124386, 117736, 124406, 117732, 117730, 104424, 117750, 104420, 104418, 112096, 121592, 126334, 92608, 111856, 121468, 92384, 111736, 121406, 92272, 111676, 92216, 111646, 92188, 75232, 103160, 117118, 93664, 74992, 103036, 93424, 112252, 102974, 93304, 74812, 93244, 74782, 93214, 129332, 75512, 103294, 129908, 129330, 93944, 75388, 129906, 93820, 75326, 93758, 127604, 75646, 128756, 127602, 94078, 128754, 124148, 126452, 124146, 126450, 117236, 121844, 117234, 121842, 103412, 103410, 91584, 111344, 121212, 91360, 111224, 121150, 91248, 111164, 91192, 111134, 91164, 91150, 74480, 102780, 91888, 74360, 102718, 91768, 111422, 91708, 74270, 91678, 129306, 74620, 129850, 92028, 74558, 91966, 127546, 128634, 124026, 126202, 116986, 121338, 102906, 90848, 110968, 121022, 90736, 110908, 90680, 110878, 90652, 90638, 74104, 102590, 91000, 74044, 90940, 74014, 90910, 74174, 91070, 90480, 110780, 90424, 110750, 90396, 90382, 73916, 90556, 73886, 90526, 90296, 110686, 90268, 90254, 73822, 90334, 90204, 90190, 71136, 101112, 116094, 70896, 100988, 70776, 100926, 70716, 70686, 129204, 71416, 101246, 129202, 71292, 71230, 127348, 71550, 127346, 123636, 123634, 116212, 116210, 101364, 101362, 79296, 105200, 118140, 79072, 105080, 118078, 78960, 105020, 78904, 104990, 78876, 78862, 70384, 100732, 79600, 70264, 100670, 79480, 105278, 79420, 70174, 79390, 129178, 70524, 129466, 79740, 70462, 79678, 127290, 127866, 123514, 124666, 115962, 118266, 100858, 113376, 122232, 126654, 95424, 113264, 122172, 95328, 113208, 122142, 95280, 113180, 95256, 113166, 95244, 78560, 104824, 117950, 95968, 78448, 104764, 95856, 113468, 104734, 95800, 78364, 95772, 78350, 95758, 70008, 100542, 78712, 69948, 96120, 78652, 69918, 96060, 78622, 96030, 70078, 78782, 96190, 94912, 113008, 122044, 94816, 112952, 122014, 94768, 112924, 94744, 112910, 94732, 94726, 78192, 104636, 95088, 78136, 104606, 95032, 113054, 95004, 78094, 94990, 69820, 78268, 69790, 95164, 78238, 95134, 94560, 112824, 121950, 94512, 112796, 94488, 112782, 94476, 94470, 78008, 104542, 94648, 77980, 94620, 77966, 94606, 69726, 78046, 94686, 94384, 112732, 94360, 112718, 94348, 94342, 77916, 94428, 77902, 94414, 94296, 112686, 94284, 94278, 77870, 94318, 94252, 94246, 68336, 99708, 68216, 99646, 68156, 68126, 68476, 68414, 127162, 123258, 115450, 99834, 72416, 101752, 116414, 72304, 101692, 72248, 101662, 72220, 72206, 67960, 99518, 72568, 67900, 72508, 67870, 72478, 68030, 72638, 80576, 105840, 118460, 80480, 105784, 118430, 80432, 105756, 80408, 105742, 80396, 80390, 72048, 101564, 80752, 71992, 101534, 80696, 71964, 80668, 71950, 80654, 67772, 72124, 67742, 80828, 72094, 80798, 114016, 122552, 126814, 96832, 113968, 122524, 96800, 113944, 122510, 96784, 113932, 96776, 113926, 96772, 80224, 105656, 118366, 97120, 80176, 105628, 97072, 114076, 105614, 97048, 80140, 97036, 80134, 97030, 71864, 101470, 80312, 71836, 97208, 80284, 71822, 97180, 80270, 97166, 67678, 71902, 80350, 97246, 96576, 113840, 122460, 96544, 113816, 122446, 96528, 113804, 96520, 113798, 96516, 96514, 80048, 105564, 96688, 80024, 105550, 96664, 113870, 96652, 80006, 96646, 71772, 80092, 71758, 96732, 80078, 96718, 96416, 113752, 122414, 96400, 113740, 96392, 113734, 96388, 96386, 79960, 105518, 96472, 79948, 96460, 79942, 96454, 71726, 79982, 96494, 96336, 113708, 96328, 113702, 96324, 96322, 79916, 96364, 79910, 96358, 96296, 113686, 96292, 96290, 79894, 96310, 66936, 99006, 66876, 66846, 67006, 68976, 100028, 68920, 99998, 68892, 68878, 66748, 69052, 66718, 69022, 73056, 102072, 116574, 73008, 102044, 72984, 102030, 72972, 72966, 68792, 99934, 73144, 68764, 73116, 68750, 73102, 66654, 68830, 73182, 81216, 106160, 118620, 81184, 106136, 118606, 81168, 106124, 81160, 106118, 81156, 81154, 72880, 101980, 81328, 72856, 101966, 81304, 106190, 81292, 72838, 81286, 68700, 72924, 68686, 81372, 72910, 81358, 114336, 122712, 126894, 114320, 122700, 114312, 122694, 114308, 114306, 81056, 106072, 118574, 97696, 81040, 106060, 97680, 114380, 106054, 97672, 81028, 97668, 81026, 97666, 72792, 101934, 81112, 72780, 97752, 81100, 72774, 97740, 81094, 97734, 68654, 72814, 81134, 97774, 114256, 122668, 114248, 122662, 114244, 114242, 80976, 106028, 97488, 80968, 106022, 97480, 114278, 97476, 80962, 97474, 72748, 81004, 72742, 97516, 80998, 97510, 114216, 122646, 114212, 114210, 80936, 106006, 97384, 80932, 97380, 80930, 97378, 72726, 80950, 97398, 114196, 114194, 80916, 97332, 80914, 97330, 66236, 66206, 67256, 99166, 67228, 67214, 66142, 67294, 69296, 100188, 69272, 100174, 69260, 69254, 67164, 69340, 67150, 69326, 73376, 102232, 116654, 73360, 102220, 73352, 102214, 73348, 73346, 69208, 100142, 73432, 102254, 73420, 69190, 73414, 67118, 69230, 73454, 106320, 118700, 106312, 118694, 106308, 106306, 73296, 102188, 81616, 106348, 102182, 81608, 73284, 81604, 73282, 81602, 69164, 73324, 69158, 81644, 73318, 81638, 122792, 126934, 122788, 122786, 106280, 118678, 114536, 106276, 114532, 106274, 114530, 73256, 102166, 81512, 73252, 98024, 81508, 73250, 98020, 81506, 98018, 69142, 73270, 81526, 98038, 122772, 122770, 106260, 114484, 106258, 114482, 73236, 81460, 73234, 97908, 81458, 97906, 122762, 106250, 114458, 73226, 81434, 97850, 66396, 66382, 67416, 99246, 67404, 67398, 66350, 67438, 69456, 100268, 69448, 100262, 69444, 69442, 67372, 69484, 67366, 69478, 102312, 116694, 102308, 102306, 69416, 100246, 73576, 102326, 73572, 69410, 73570, 67350, 69430, 73590, 118740, 118738, 102292, 106420, 102290, 106418, 69396, 73524, 69394, 81780, 73522, 81778, 118730, 102282, 106394, 69386, 73498, 81722, 66476, 66470, 67496, 99286, 67492, 67490, 66454, 67510, 100308, 100306, 67476, 69556, 67474, 69554, 116714])]); //#17367
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_pdf417.$ctx[id] = $_[id]); //#17367
        bwipp_pdf417.__17368__ = 1; //#17367
        $_ = Object.getPrototypeOf($_); //#17367
    } //#17367
    $_.cwtobits = function() {
        var _Ge = $get($_.clusters, $k[--$j]); //#17372
        $_.v = $get(_Ge, $k[--$j]); //#17372
        $k[$j++] = Infinity; //#17373
        for (var _Gh = 0, _Gi = 17; _Gh < _Gi; _Gh++) { //#17373
            $k[$j++] = 0; //#17373
        } //#17373
        var _Gl = $cvrs($s(17), $_.v, 2); //#17373
        for (var _Gm = 0, _Gn = _Gl.length; _Gm < _Gn; _Gm++) { //#17373
            $k[$j++] = $get(_Gl, _Gm) - 48; //#17373
        } //#17373
        var _Gp = $a(); //#17373
        $k[$j++] = $geti(_Gp, _Gp.length - 17, 17); //#17374
    }; //#17374
    if ($_.compact) { //#17381
        $_.rwid = $f(($f(($f((17 * $_.c) + 17)) + 17)) + 1); //#17379
    } else { //#17381
        $_.rwid = $f(($f(($f(($f((17 * $_.c) + 17)) + 17)) + 17)) + 18); //#17381
    } //#17381
    $_.pixs = $a(($_.rwid * $_.r) * $_.rowmult); //#17383
    for (var _H0 = 0, _Gz = $_.r - 1; _H0 <= _Gz; _H0 += 1) { //#17416
        $_.i = _H0; //#17386
        if (($_.i % 3) == 0) { //#17391
            $_.lcw = ((~~($_.i / 3)) * 30) + (~~(($_.r - 1) / 3)); //#17389
            $_.rcw = $f(($f(((~~($_.i / 3)) * 30) + $_.c)) - 1); //#17390
        } //#17390
        if (($_.i % 3) == 1) { //#17395
            $_.lcw = (((~~($_.i / 3)) * 30) + ($_.eclevel * 3)) + (($_.r - 1) % 3); //#17393
            $_.rcw = ((~~($_.i / 3)) * 30) + (~~(($_.r - 1) / 3)); //#17394
        } //#17394
        if (($_.i % 3) == 2) { //#17399
            $_.lcw = $f(($f(((~~($_.i / 3)) * 30) + $_.c)) - 1); //#17397
            $_.rcw = (((~~($_.i / 3)) * 30) + ($_.eclevel * 3)) + (($_.r - 1) % 3); //#17398
        } //#17398
        $k[$j++] = Infinity; //#17401
        $k[$j++] = 1; //#17403
        $k[$j++] = 1; //#17403
        $k[$j++] = 1; //#17403
        $k[$j++] = 1; //#17403
        $k[$j++] = 1; //#17403
        $k[$j++] = 1; //#17403
        $k[$j++] = 1; //#17403
        $k[$j++] = 1; //#17403
        $k[$j++] = 0; //#17403
        $k[$j++] = 1; //#17403
        $k[$j++] = 0; //#17403
        $k[$j++] = 1; //#17403
        $k[$j++] = 0; //#17403
        $k[$j++] = 1; //#17403
        $k[$j++] = 0; //#17403
        $k[$j++] = 0; //#17403
        $k[$j++] = 0; //#17403
        $k[$j++] = $_.lcw; //#17403
        $k[$j++] = $_.i % 3; //#17403
        $_.cwtobits(); //#17403
        $aload($k[--$j]); //#17403
        var _HP = $geti($_.cws, $_.c * $_.i, $_.c); //#17404
        for (var _HQ = 0, _HR = _HP.length; _HQ < _HR; _HQ++) { //#17404
            $k[$j++] = $get(_HP, _HQ); //#17404
            $k[$j++] = $_.i % 3; //#17404
            $_.cwtobits(); //#17404
            $aload($k[--$j]); //#17404
        } //#17404
        if ($_.compact) { //#17409
            $k[$j++] = 1; //#17406
        } else { //#17409
            $k[$j++] = $_.rcw; //#17408
            $k[$j++] = $_.i % 3; //#17408
            $_.cwtobits(); //#17408
            $aload($k[--$j]); //#17408
            $k[$j++] = 1; //#17409
            $k[$j++] = 1; //#17409
            $k[$j++] = 1; //#17409
            $k[$j++] = 1; //#17409
            $k[$j++] = 1; //#17409
            $k[$j++] = 1; //#17409
            $k[$j++] = 1; //#17409
            $k[$j++] = 0; //#17409
            $k[$j++] = 1; //#17409
            $k[$j++] = 0; //#17409
            $k[$j++] = 0; //#17409
            $k[$j++] = 0; //#17409
            $k[$j++] = 1; //#17409
            $k[$j++] = 0; //#17409
            $k[$j++] = 1; //#17409
            $k[$j++] = 0; //#17409
            $k[$j++] = 0; //#17409
            $k[$j++] = 1; //#17409
        } //#17409
        var _HZ = $a(); //#17409
        $k[$j++] = _HZ; //#17414
        for (var _Hc = 0, _Hb = $_.rowmult - 1; _Hc <= _Hb; _Hc += 1) { //#17414
            var _Hh = $k[--$j]; //#17413
            $puti($_.pixs, (_Hc + ($_.i * $_.rowmult)) * $_.rwid, _Hh); //#17413
            $k[$j++] = _Hh; //#17413
        } //#17413
        $j--; //#17415
    } //#17415
    var _Hq = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $_.pixs],
        ["pixx", $_.rwid],
        ["pixy", $_.r * $_.rowmult],
        ["height", ($_.r * $_.rowmult) / 72],
        ["width", $_.rwid / 72],
        ["borderleft", 2],
        ["borderright", 2],
        ["bordertop", 2],
        ["borderbottom", 2],
        ["opt", $_.options]
    ]); //#17430
    $k[$j++] = _Hq; //#17433
    if (!$_.dontdraw) { //#17433
        bwipp_renmatrix(); //#17433
    } //#17433
    $_ = Object.getPrototypeOf($_); //#17435
    $_ = Object.getPrototypeOf($_); //#17437
} //bwipp_pdf417
function bwipp_pdf417compact() {
    $_ = Object.create($_); //#17466
    $_.dontdraw = false; //#17469
    $k[$j++] = $_; //#17471
    bwipp_processoptions(); //#17471
    $_.options = $k[--$j]; //#17471
    $_.barcode = $k[--$j]; //#17472
    $put($_.options, "dontdraw", true); //#17475
    $put($_.options, "compact", true); //#17476
    $k[$j++] = 'args'; //#17478
    $k[$j++] = $_.barcode; //#17478
    $k[$j++] = $_.options; //#17478
    bwipp_pdf417(); //#17478
    var _6 = $k[--$j]; //#17478
    $_[$k[--$j]] = _6; //#17478
    $put($_.args, "opt", $_.options); //#17480
    $k[$j++] = $_.args; //#17483
    if (!$_.dontdraw) { //#17483
        bwipp_renmatrix(); //#17483
    } //#17483
    $_ = Object.getPrototypeOf($_); //#17485
} //bwipp_pdf417compact
function bwipp_micropdf417() {
    $_ = Object.create($_); //#17516
    $_.dontdraw = false; //#17519
    $_.version = "unset"; //#17520
    $_.columns = 0; //#17521
    $_.rows = 0; //#17522
    $_.rowmult = 2; //#17523
    $_.cca = false; //#17524
    $_.ccb = false; //#17525
    $_.raw = false; //#17526
    $_.parse = false; //#17527
    $_.parsefnc = false; //#17528
    $k[$j++] = $_; //#17530
    bwipp_processoptions(); //#17530
    $_.options = $k[--$j]; //#17530
    $_.barcode = $k[--$j]; //#17531
    if ($eq($_.barcode, "")) { //#17535
        $k[$j++] = 'bwipp.micropdf417emptyData#17534'; //#17534
        $k[$j++] = "The data must not be empty"; //#17534
        bwipp_raiseerror(); //#17534
    } //#17534
    if ($_.rowmult <= 0) { //#17539
        $k[$j++] = 'bwipp.micropdf417badRowMult#17538'; //#17538
        $k[$j++] = "The row multiplier must be greater than zero"; //#17538
        bwipp_raiseerror(); //#17538
    } //#17538
    if (($_.cca && $_.ccb) || (($_.cca && $_.raw) || ($_.ccb && $_.raw))) { //#17543
        $k[$j++] = 'bwipp.micropdf417ccaAndCcb#17542'; //#17542
        $k[$j++] = "Cannot combine cca, ccb and raw"; //#17542
        bwipp_raiseerror(); //#17542
    } //#17542
    if ($ne($_.version, "unset")) { //#17564
        $search($_.version, "x"); //#17547
        if ($k[--$j]) { //#17562
            var _D = $k[--$j]; //#17548
            var _E = $k[--$j]; //#17548
            $k[$j++] = _D; //#17548
            $k[$j++] = _E; //#17548
            $j--; //#17548
            var _F = $k[--$j]; //#17549
            var _G = $k[--$j]; //#17549
            $k[$j++] = _G; //#17549
            $k[$j++] = _F; //#17549
            $k[$j++] = _G; //#17549
            $k[$j++] = _F; //#17549
            $astore($a(2)); //#17549
            $forall($k[--$j], function() { //#17558
                var _J = $k[--$j]; //#17551
                $k[$j++] = _J; //#17551
                $k[$j++] = true; //#17551
                if (_J.length == 0) { //#17551
                    $j--; //#17551
                    $k[$j++] = false; //#17551
                } //#17551
                var _K = $k[--$j]; //#17552
                var _L = $k[--$j]; //#17552
                $k[$j++] = _K; //#17554
                $forall(_L, function() { //#17554
                    var _M = $k[--$j]; //#17553
                    if ((_M < 48) || (_M > 57)) { //#17553
                        $j--; //#17553
                        $k[$j++] = false; //#17553
                    } //#17553
                }); //#17553
                if ($nt($k[--$j])) { //#17557
                    $k[$j++] = 'bwipp.micropdf417BadVersionBadRowOrColumn#17556'; //#17556
                    $k[$j++] = "version must be formatted as RxC"; //#17556
                    bwipp_raiseerror(); //#17556
                } //#17556
            }); //#17556
            $_.rows = $cvi($k[--$j]); //#17559
            $_.columns = $cvi($k[--$j]); //#17560
        } else { //#17562
            $j--; //#17562
            $k[$j++] = 'bwipp.micropdf417badVersionFormat#17562'; //#17562
            $k[$j++] = "version must be formatted as RxC"; //#17562
            bwipp_raiseerror(); //#17562
        } //#17562
    } //#17562
    bwipp_loadctx(bwipp_micropdf417) //#17566
    if (!bwipp_micropdf417.__17656__) { //#17656
        $_ = Object.create($_); //#17656
        $_.T = 0; //#17570
        $_.N = 1; //#17570
        $_.B = 2; //#17570
        $_.A = 0; //#17571
        $_.L = 1; //#17571
        $_.M = 2; //#17571
        $_.P = 3; //#17571
        $_.tl = -1; //#17574
        $_.nl = -2; //#17574
        $_.bl = -3; //#17574
        $_.bl6 = -4; //#17574
        $_.bs = -5; //#17574
        $_.al = -6; //#17577
        $_.ll = -7; //#17577
        $_.ml = -8; //#17577
        $_.pl = -9; //#17577
        $_.as = -10; //#17577
        $_.ps = -11; //#17577
        $_.m05 = -12; //#17580
        $_.m06 = -13; //#17580
        $_.charmaps = $a([$a(["A", "a", "0", ";"]), $a(["B", "b", "1", "<"]), $a(["C", "c", "2", ">"]), $a(["D", "d", "3", "@"]), $a(["E", "e", "4", "["]), $a(["F", "f", "5", 92]), $a(["G", "g", "6", "]"]), $a(["H", "h", "7", "_"]), $a(["I", "i", "8", "`"]), $a(["J", "j", "9", "~"]), $a(["K", "k", "&", "!"]), $a(["L", "l", 13, 13]), $a(["M", "m", 9, 9]), $a(["N", "n", ",", ","]), $a(["O", "o", ":", ":"]), $a(["P", "p", "#", 10]), $a(["Q", "q", "-", "-"]), $a(["R", "r", ".", "."]), $a(["S", "s", "$", "$"]), $a(["T", "t", "/", "/"]), $a(["U", "u", "+", "\""]), $a(["V", "v", "%", "|"]), $a(["W", "w", "*", "*"]), $a(["X", "x", "=", 40]), $a(["Y", "y", "^", 41]), $a(["Z", "z", $_.pl, "?"]), $a([" ", " ", " ", "{"]), $a([$_.ll, $_.as, $_.ll, "}"]), $a([$_.ml, $_.ml, $_.al, "'"]), $a([$_.ps, $_.ps, $_.ps, $_.al])]); //#17615
        $_.charvals = $a([new Map, new Map, new Map, new Map]); //#17618
        $_.alltext = new Map; //#17619
        for (var _19 = 0, _18 = $_.charmaps.length - 1; _19 <= _18; _19 += 1) { //#17629
            $_.i = _19; //#17621
            $_.encs = $get($_.charmaps, $_.i); //#17622
            for (var _1D = 0; _1D <= 3; _1D += 1) { //#17628
                $_.j = _1D; //#17624
                var _1G = $get($_.encs, $_.j); //#17625
                $k[$j++] = _1G; //#17625
                if ($eq($type(_1G), 'stringtype')) { //#17625
                    var _1J = $get($k[--$j], 0); //#17625
                    $k[$j++] = _1J; //#17625
                } //#17625
                var _1K = $k[--$j]; //#17626
                $put($get($_.charvals, $_.j), _1K, $_.i); //#17626
                $put($_.alltext, _1K, -1); //#17627
            } //#17627
        } //#17627
        $_.e = 10000; //#17631
        $_.latlen = $a([$a([0, 1, 1, 2]), $a([2, 0, 1, 2]), $a([1, 1, 0, 1]), $a([1, 2, 2, 0])]); //#17639
        $_.latseq = $a([$a([$a([]), $a([$_.ll]), $a([$_.ml]), $a([$_.ml, $_.pl])]), $a([$a([$_.ml, $_.al]), $a([]), $a([$_.ml]), $a([$_.ml, $_.pl])]), $a([$a([$_.al]), $a([$_.ll]), $a([]), $a([$_.pl])]), $a([$a([$_.al]), $a([$_.al, $_.ll]), $a([$_.al, $_.ml]), $a([])])]); //#17647
        $_.shftlen = $a([$a([$_.e, $_.e, $_.e, 1]), $a([1, $_.e, $_.e, 1]), $a([$_.e, $_.e, $_.e, 1]), $a([$_.e, $_.e, $_.e, $_.e])]); //#17655
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_micropdf417.$ctx[id] = $_[id]); //#17655
        bwipp_micropdf417.__17656__ = 1; //#17655
        $_ = Object.getPrototypeOf($_); //#17655
    } //#17655
    if ($_.raw || $_.cca) { //#17677
        $_.datcws = $a($_.barcode.length); //#17660
        $_.i = 0; //#17661
        $_.j = 0; //#17661
        for (;;) { //#17672
            if ($_.i >= ($_.barcode.length - 3)) { //#17663
                break; //#17663
            } //#17663
            if ($get($_.barcode, $_.i) != 94) { //#17664
                break; //#17664
            } //#17664
            var _2a = $geti($_.barcode, $_.i + 1, 3); //#17665
            $k[$j++] = _2a; //#17667
            $k[$j++] = false; //#17667
            for (var _2b = 0, _2c = _2a.length; _2b < _2c; _2b++) { //#17667
                var _2d = $get(_2a, _2b); //#17667
                if ((_2d < 48) || (_2d > 57)) { //#17666
                    $j--; //#17666
                    $k[$j++] = true; //#17666
                } //#17666
            } //#17666
            if ($k[--$j]) { //#17667
                $j--; //#17667
                break; //#17667
            } //#17667
            $_.cw = $cvi($k[--$j]); //#17668
            $put($_.datcws, $_.j, $_.cw); //#17669
            $_.i = $_.i + 4; //#17670
            $_.j = $_.j + 1; //#17671
        } //#17671
        if ($_.i != $_.barcode.length) { //#17675
            $k[$j++] = 'bwipp.micropdf417badCcaRawFormat#17674'; //#17674
            $k[$j++] = "cca and raw data must be formatted as ^NNN"; //#17674
            bwipp_raiseerror(); //#17674
        } //#17674
        $_.datcws = $geti($_.datcws, 0, $_.j); //#17676
    } //#17676
    $_.encb = function() {
        $_.in = $k[--$j]; //#17680
        $_.inlen = $_.in.length; //#17681
        $_.out = $a(((~~($_.inlen / 6)) * 5) + ($_.inlen % 6)); //#17682
        for (var _2x = 0, _2w = (~~($_.inlen / 6)) - 1; _2x <= _2w; _2x += 1) { //#17705
            $_.k = _2x; //#17684
            $k[$j++] = Infinity; //#17685
            $aload($geti($_.in, $_.k * 6, 3)); //#17685
            $_.msbs = $a(); //#17685
            $k[$j++] = Infinity; //#17686
            $aload($_.msbs); //#17687
            var _33 = $k[--$j]; //#17687
            var _34 = $k[--$j]; //#17687
            var _35 = $k[--$j]; //#17687
            $k[$j++] = $f(($f(_33 + (_34 * 256))) + (_35 * 65536)); //#17688
            for (var _36 = 0, _37 = 3; _36 < _37; _36++) { //#17688
                var _38 = $k[--$j]; //#17688
                $k[$j++] = _38 % 900; //#17688
                $k[$j++] = ~~(_38 / 900); //#17688
            } //#17688
            $_.mscs = $a(); //#17688
            $k[$j++] = Infinity; //#17690
            $aload($geti($_.in, ($_.k * 6) + 3, 3)); //#17690
            $_.lsbs = $a(); //#17690
            $k[$j++] = Infinity; //#17691
            $aload($_.lsbs); //#17692
            var _3F = $k[--$j]; //#17692
            var _3G = $k[--$j]; //#17692
            var _3H = $k[--$j]; //#17692
            $k[$j++] = $f(($f(_3F + (_3G * 256))) + (_3H * 65536)); //#17693
            for (var _3I = 0, _3J = 3; _3I < _3J; _3I++) { //#17693
                var _3K = $k[--$j]; //#17693
                $k[$j++] = _3K % 900; //#17693
                $k[$j++] = ~~(_3K / 900); //#17693
            } //#17693
            $_.lscs = $a(); //#17693
            var _3N = $get($_.lscs, 0); //#17695
            var _3P = $get($_.mscs, 0); //#17695
            $put($_.out, ($_.k * 5) + 4, ($f(_3N + (_3P * 316))) % 900); //#17696
            var _3T = $get($_.lscs, 1); //#17697
            var _3V = $get($_.mscs, 0); //#17697
            var _3X = $get($_.mscs, 1); //#17697
            $put($_.out, ($_.k * 5) + 3, ($f(($f(($f((~~(($f(_3N + (_3P * 316))) / 900)) + _3T)) + (_3V * 641))) + (_3X * 316))) % 900); //#17698
            var _3b = $get($_.lscs, 2); //#17699
            var _3d = $get($_.mscs, 0); //#17699
            var _3f = $get($_.mscs, 1); //#17699
            var _3h = $get($_.mscs, 2); //#17699
            $put($_.out, ($_.k * 5) + 2, ($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_3N + (_3P * 316))) / 900)) + _3T)) + (_3V * 641))) + (_3X * 316))) / 900)) + _3b)) + (_3d * 20))) + (_3f * 641))) + (_3h * 316))) % 900); //#17700
            var _3l = $get($_.lscs, 3); //#17701
            var _3n = $get($_.mscs, 1); //#17701
            var _3p = $get($_.mscs, 2); //#17701
            $put($_.out, ($_.k * 5) + 1, ($f(($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_3N + (_3P * 316))) / 900)) + _3T)) + (_3V * 641))) + (_3X * 316))) / 900)) + _3b)) + (_3d * 20))) + (_3f * 641))) + (_3h * 316))) / 900)) + _3l)) + (_3n * 20))) + (_3p * 641))) % 900); //#17702
            $put($_.out, $_.k * 5, ($f((~~(($f(($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_3N + (_3P * 316))) / 900)) + _3T)) + (_3V * 641))) + (_3X * 316))) / 900)) + _3b)) + (_3d * 20))) + (_3f * 641))) + (_3h * 316))) / 900)) + _3l)) + (_3n * 20))) + (_3p * 641))) / 900)) + ($get($_.mscs, 2) * 20))) % 900); //#17704
        } //#17704
        $_.rem = $_.inlen % 6; //#17706
        if ($_.rem != 0) { //#17711
            $k[$j++] = $_.out; //#17709
            $k[$j++] = $_.out.length - $_.rem; //#17709
            $k[$j++] = Infinity; //#17709
            $aload($geti($_.in, $_.inlen - $_.rem, $_.rem)); //#17709
            var _46 = $a(); //#17709
            var _47 = $k[--$j]; //#17710
            $puti($k[--$j], _47, _46); //#17710
        } //#17710
        $k[$j++] = $_.out; //#17712
    }; //#17712
    if ($_.ccb) { //#17721
        $_.barlen = $_.barcode.length; //#17716
        $_.datcws = $a((((~~($_.barlen / 6)) * 5) + ($_.barlen % 6)) + 2); //#17717
        $put($_.datcws, 0, 920); //#17718
        var _4I = (($_.barlen % 6) == 0) ? 924 : 901; //#17719
        $put($_.datcws, 1, _4I); //#17719
        $k[$j++] = $_.datcws; //#17720
        $k[$j++] = 2; //#17720
        $k[$j++] = Infinity; //#17720
        $forall($_.barcode); //#17720
        var _4L = $a(); //#17720
        $k[$j++] = _4L; //#17720
        $_.encb(); //#17720
        var _4M = $k[--$j]; //#17720
        var _4N = $k[--$j]; //#17720
        $puti($k[--$j], _4N, _4M); //#17720
    } //#17720
    if (((!$_.raw) && (!$_.cca)) && (!$_.ccb)) { //#18122
        var _4U = new Map([
            ["parse", $_.parse],
            ["parsefnc", $_.parsefnc],
            ["eci", true]
        ]); //#17732
        $_.fncvals = _4U; //#17733
        $k[$j++] = 'msg'; //#17734
        $k[$j++] = $_.barcode; //#17734
        $k[$j++] = $_.fncvals; //#17734
        bwipp_parseinput(); //#17734
        var _4X = $k[--$j]; //#17734
        $_[$k[--$j]] = _4X; //#17734
        $_.msglen = $_.msg.length; //#17735
        if ($_.msglen >= 9) { //#17753
            $aload($geti($_.msg, 0, 7)); //#17739
            var _4d = $k[--$j]; //#17740
            var _4e = $k[--$j]; //#17740
            $k[$j++] = _4d == 29; //#17740
            $k[$j++] = _4e; //#17740
            $j--; //#17740
            var _4f = $k[--$j]; //#17740
            var _4g = $k[--$j]; //#17740
            var _4h = $k[--$j]; //#17740
            var _4i = $k[--$j]; //#17741
            var _4j = $k[--$j]; //#17741
            var _4k = $k[--$j]; //#17741
            if (((((_4f && (_4g == 48)) && (_4h == 30)) && (_4i == 62)) && (_4j == 41)) && (_4k == 91)) { //#17752
                $aload($geti($_.msg, $_.msglen - 2, 2)); //#17742
                var _4o = $k[--$j]; //#17743
                var _4p = $k[--$j]; //#17743
                if ((_4o == 4) && (_4p == 30)) { //#17751
                    if ($get($_.msg, 5) == 53) { //#17748
                        $k[$j++] = Infinity; //#17745
                        $k[$j++] = $_.m05; //#17745
                        $aload($geti($_.msg, 7, $_.msg.length - 9)); //#17745
                        $_.msg = $a(); //#17745
                    } else { //#17748
                        if ($get($_.msg, 5) == 54) { //#17749
                            $k[$j++] = Infinity; //#17748
                            $k[$j++] = $_.m06; //#17748
                            $aload($geti($_.msg, 7, $_.msg.length - 9)); //#17748
                            $_.msg = $a(); //#17748
                        } //#17748
                    } //#17748
                } //#17748
            } //#17748
        } //#17748
        $_.msglen = $_.msg.length; //#17754
        $k[$j++] = Infinity; //#17757
        for (var _56 = 0, _57 = $_.msglen; _56 < _57; _56++) { //#17757
            $k[$j++] = 0; //#17757
        } //#17757
        $k[$j++] = 0; //#17757
        $_.numdigits = $a(); //#17757
        $k[$j++] = Infinity; //#17758
        for (var _5A = 0, _5B = $_.msglen; _5A < _5B; _5A++) { //#17758
            $k[$j++] = 0; //#17758
        } //#17758
        $k[$j++] = 0; //#17758
        $_.numtext = $a(); //#17758
        $k[$j++] = Infinity; //#17759
        for (var _5E = 0, _5F = $_.msglen; _5E < _5F; _5E++) { //#17759
            $k[$j++] = 0; //#17759
        } //#17759
        $k[$j++] = 0; //#17759
        $_.numbytes = $a(); //#17759
        $k[$j++] = Infinity; //#17760
        for (var _5I = 0, _5J = $_.msglen; _5I < _5J; _5I++) { //#17760
            $k[$j++] = 0; //#17760
        } //#17760
        $_.iseci = $a(); //#17760
        for (var _5M = $_.msglen - 1; _5M >= 0; _5M -= 1) { //#17773
            $_.i = _5M; //#17762
            var _5P = $get($_.msg, $_.i); //#17763
            if ((_5P >= 48) && (_5P <= 57)) { //#17765
                $put($_.numdigits, $_.i, $f($get($_.numdigits, $_.i + 1) + 1)); //#17764
            } //#17764
            var _5Z = $get($_.alltext, $get($_.msg, $_.i)) !== undefined; //#17766
            if (_5Z && ($get($_.numdigits, $_.i) < 13)) { //#17768
                $put($_.numtext, $_.i, $f($get($_.numtext, $_.i + 1) + 1)); //#17767
            } //#17767
            if ((($get($_.msg, $_.i) >= 0) && ($get($_.numtext, $_.i) < 5)) && ($get($_.numdigits, $_.i) < 13)) { //#17771
                $put($_.numbytes, $_.i, $f($get($_.numbytes, $_.i + 1) + 1)); //#17770
            } //#17770
            $put($_.iseci, $_.i, $get($_.msg, $_.i) <= -1000000); //#17772
        } //#17772
        $_.numdigits = $geti($_.numdigits, 0, $_.msglen); //#17774
        $_.numtext = $geti($_.numtext, 0, $_.msglen); //#17775
        $_.numbytes = $geti($_.numbytes, 0, $_.msglen); //#17776
        $_.seq = $a([]); //#17778
        $_.seqlen = 0; //#17778
        $_.state = $_.B; //#17778
        $_.p = 0; //#17778
        for (;;) { //#17840
            if ($_.p == $_.msglen) { //#17779
                break; //#17779
            } //#17779
            var _6H = $get($_.msg, $_.p); //#17780
            if (($_.p == 0) && ((_6H == $_.m05) || (_6H == $_.m06))) { //#17838
                $k[$j++] = Infinity; //#17781
                $aload($_.seq); //#17782
                var _6P = ($get($_.msg, $_.p) == $_.m05) ? $_.m05 : $_.m06; //#17783
                $k[$j++] = _6P; //#17783
                $_.seq = $a(); //#17783
                $_.p = $_.p + 1; //#17785
                $_.seqlen = $_.seqlen + 1; //#17786
            } else { //#17838
                if ($get($_.iseci, $_.p)) { //#17838
                    $_.eci = $get($_.msg, $_.p); //#17789
                    $k[$j++] = Infinity; //#17790
                    $aload($_.seq); //#17791
                    $k[$j++] = $a([$_.eci]); //#17792
                    $_.seq = $a(); //#17792
                    $_.p = $_.p + 1; //#17794
                    $k[$j++] = 'seqlen'; //#17795
                    $k[$j++] = $_.seqlen; //#17795
                    if ($_.eci <= -1810900) { //#17795
                        $k[$j++] = 2; //#17795
                    } else { //#17795
                        var _6h = ($_.eci <= -1000900) ? 3 : 2; //#17795
                        $k[$j++] = _6h; //#17795
                    } //#17795
                    var _6i = $k[--$j]; //#17795
                    var _6j = $k[--$j]; //#17795
                    $_[$k[--$j]] = $f(_6j + _6i); //#17795
                } else { //#17838
                    $_.n = $get($_.numdigits, $_.p); //#17797
                    if (($_.n >= 13) || (($_.n == $_.msglen) && ($_.n >= 8))) { //#17838
                        $k[$j++] = Infinity; //#17799
                        $aload($_.seq); //#17800
                        $k[$j++] = $_.nl; //#17802
                        $k[$j++] = Infinity; //#17802
                        $aload($geti($_.msg, $_.p, $_.n)); //#17802
                        var _6y = $a(); //#17802
                        $k[$j++] = _6y; //#17802
                        $_.seq = $a(); //#17802
                        $_.state = $_.N; //#17804
                        $_.p = $f($_.p + $_.n); //#17805
                        $_.seqlen = $f(($_.seqlen + 1) + $_.n); //#17806
                    } else { //#17838
                        $_.t = $get($_.numtext, $_.p); //#17808
                        if ($_.t >= 5) { //#17838
                            $k[$j++] = Infinity; //#17810
                            $aload($_.seq); //#17811
                            if ($_.state != $_.T) { //#17814
                                $k[$j++] = $_.tl; //#17813
                            } //#17813
                            $k[$j++] = Infinity; //#17815
                            $aload($geti($_.msg, $_.p, $_.t)); //#17815
                            var _7H = $a(); //#17815
                            $k[$j++] = _7H; //#17815
                            $_.seq = $a(); //#17815
                            $_.state = $_.T; //#17817
                            $_.p = $f($_.p + $_.t); //#17818
                            $_.seqlen = $f($f($_.seqlen + 1) + $_.t); //#17819
                        } else { //#17838
                            $_.b = $get($_.numbytes, $_.p); //#17821
                            if (($_.b == 1) && ($_.state == $_.T)) { //#17838
                                $k[$j++] = Infinity; //#17823
                                $aload($_.seq); //#17824
                                $k[$j++] = $_.bs; //#17826
                                $k[$j++] = $a([$get($_.msg, $_.p)]); //#17826
                                $_.seq = $a(); //#17826
                                $_.p = $f($_.p + $_.b); //#17828
                                $_.seqlen = $f($_.seqlen + 2); //#17829
                            } else { //#17838
                                $k[$j++] = Infinity; //#17831
                                $aload($_.seq); //#17832
                                var _7g = (($_.b % 6) != 0) ? $_.bl : $_.bl6; //#17833
                                $k[$j++] = _7g; //#17834
                                $k[$j++] = Infinity; //#17834
                                $aload($geti($_.msg, $_.p, $_.b)); //#17834
                                var _7l = $a(); //#17834
                                $k[$j++] = _7l; //#17834
                                $_.seq = $a(); //#17834
                                $_.state = $_.B; //#17836
                                $_.p = $f($_.p + $_.b); //#17837
                                $_.seqlen = $f($f($_.seqlen + 1) + $_.b); //#17838
                            } //#17838
                        } //#17838
                    } //#17838
                } //#17838
            } //#17838
        } //#17838
        $k[$j++] = Infinity; //#17842
        $k[$j++] = $_.tl; //#17843
        $k[$j++] = 900; //#17843
        $k[$j++] = $_.bl; //#17843
        $k[$j++] = 901; //#17843
        $k[$j++] = $_.bl6; //#17843
        $k[$j++] = 924; //#17843
        $k[$j++] = $_.nl; //#17843
        $k[$j++] = 902; //#17843
        $k[$j++] = $_.bs; //#17843
        $k[$j++] = 913; //#17843
        $k[$j++] = $_.m05; //#17843
        $k[$j++] = 916; //#17843
        $k[$j++] = $_.m06; //#17843
        $k[$j++] = 917; //#17843
        $_.latchcws = $d(); //#17844
        $_.enca = function() {
            var _84 = $get($get($_.charvals, $_.A), $k[--$j]); //#17847
            $k[$j++] = _84; //#17847
        }; //#17847
        $_.encl = function() {
            var _89 = $get($get($_.charvals, $_.L), $k[--$j]); //#17848
            $k[$j++] = _89; //#17848
        }; //#17848
        $_.encm = function() {
            var _8E = $get($get($_.charvals, $_.M), $k[--$j]); //#17849
            $k[$j++] = _8E; //#17849
        }; //#17849
        $_.encp = function() {
            var _8J = $get($get($_.charvals, $_.P), $k[--$j]); //#17850
            $k[$j++] = _8J; //#17850
        }; //#17850
        $_.textencfuncs = $a(['enca', 'encl', 'encm', 'encp']); //#17851
        $_.addtotext = function() {
            $put($_.text, $_.l, $k[--$j]); //#17854
            $_.l = $_.l + 1; //#17855
        }; //#17855
        $_.enct = function() {
            $_.in = $k[--$j]; //#17860
            $_.curlen = $a([$_.e, $_.e, $_.e, $_.e]); //#17862
            $put($_.curlen, $_.submode, 0); //#17863
            $_.curseq = $a([$a([]), $a([]), $a([]), $a([])]); //#17864
            $forall($_.in, function() { //#17934
                $_.char = $k[--$j]; //#17869
                for (;;) { //#17890
                    $_.imp = false; //#17873
                    var _8i = $a([$_.A, $_.L, $_.M, $_.P]); //#17874
                    for (var _8j = 0, _8k = _8i.length; _8j < _8k; _8j++) { //#17888
                        $_.x = $get(_8i, _8j); //#17875
                        var _8q = $a([$_.A, $_.L, $_.M, $_.P]); //#17876
                        for (var _8r = 0, _8s = _8q.length; _8r < _8s; _8r++) { //#17887
                            $_.y = $get(_8q, _8r); //#17877
                            $_.cost = $f($get($_.curlen, $_.x) + $get($get($_.latlen, $_.x), $_.y)); //#17878
                            if ($_.cost < $get($_.curlen, $_.y)) { //#17886
                                $put($_.curlen, $_.y, $_.cost); //#17880
                                $k[$j++] = $_.curseq; //#17883
                                $k[$j++] = $_.y; //#17883
                                $k[$j++] = Infinity; //#17881
                                $aload($get($_.curseq, $_.x)); //#17882
                                $aload($get($get($_.latseq, $_.x), $_.y)); //#17883
                                var _9J = $a(); //#17883
                                var _9K = $k[--$j]; //#17884
                                $put($k[--$j], _9K, _9J); //#17884
                                $_.imp = true; //#17885
                            } //#17885
                        } //#17885
                    } //#17885
                    if (!$_.imp) { //#17889
                        break; //#17889
                    } //#17889
                } //#17889
                $_.nxtlen = $a([$_.e, $_.e, $_.e, $_.e]); //#17893
                $_.nxtseq = $a(4); //#17894
                var _9X = $a([$_.A, $_.L, $_.M, $_.P]); //#17896
                for (var _9Y = 0, _9Z = _9X.length; _9Y < _9Z; _9Y++) { //#17929
                    $_.x = $get(_9X, _9Y); //#17897
                    for (;;) { //#17927
                        var _9f = $get($get($_.charvals, $_.x), $_.char) !== undefined; //#17901
                        if (!_9f) { //#17901
                            break; //#17901
                        } //#17901
                        $_.cost = $f($get($_.curlen, $_.x) + 1); //#17904
                        if ($_.cost < $get($_.nxtlen, $_.x)) { //#17908
                            $put($_.nxtlen, $_.x, $_.cost); //#17906
                            $k[$j++] = $_.nxtseq; //#17907
                            $k[$j++] = $_.x; //#17907
                            $k[$j++] = Infinity; //#17907
                            $aload($get($_.curseq, $_.x)); //#17907
                            $k[$j++] = $_.char; //#17907
                            var _9w = $a(); //#17907
                            var _9x = $k[--$j]; //#17907
                            $put($k[--$j], _9x, _9w); //#17907
                        } //#17907
                        var _A3 = $a([$_.A, $_.L, $_.M, $_.P]); //#17911
                        for (var _A4 = 0, _A5 = _A3.length; _A4 < _A5; _A4++) { //#17924
                            $_.y = $get(_A3, _A4); //#17912
                            if ($ne($_.x, $_.y)) { //#17923
                                $_.cost = $f($f($get($_.curlen, $_.y) + $get($get($_.shftlen, $_.y), $_.x)) + 1); //#17914
                                if ($_.cost < $get($_.nxtlen, $_.y)) { //#17922
                                    $put($_.nxtlen, $_.y, $_.cost); //#17916
                                    $k[$j++] = $_.nxtseq; //#17920
                                    $k[$j++] = $_.y; //#17920
                                    $k[$j++] = Infinity; //#17917
                                    $aload($get($_.curseq, $_.y)); //#17918
                                    var _AV = ($_.x == $_.A) ? $_.as : $_.ps; //#17919
                                    $k[$j++] = _AV; //#17920
                                    $k[$j++] = $_.char; //#17920
                                    var _AX = $a(); //#17920
                                    var _AY = $k[--$j]; //#17921
                                    $put($k[--$j], _AY, _AX); //#17921
                                } //#17921
                            } //#17921
                        } //#17921
                        break; //#17926
                    } //#17926
                } //#17926
                $_.curlen = $_.nxtlen; //#17931
                $_.curseq = $_.nxtseq; //#17932
            }); //#17932
            $_.minseq = $_.e; //#17937
            var _Ah = $a([$_.A, $_.L, $_.M, $_.P]); //#17938
            for (var _Ai = 0, _Aj = _Ah.length; _Ai < _Aj; _Ai++) { //#17944
                $_.k = $get(_Ah, _Ai); //#17939
                if ($get($_.curlen, $_.k) < $_.minseq) { //#17943
                    $_.minseq = $get($_.curlen, $_.k); //#17941
                    $_.txtseq = $get($_.curseq, $_.k); //#17942
                } //#17942
            } //#17942
            $_.text = $a($_.minseq); //#17947
            $_.k = 0; //#17948
            $_.l = 0; //#17948
            for (;;) { //#17968
                if ($_.k >= $_.txtseq.length) { //#17949
                    break; //#17949
                } //#17949
                $_.char = $get($_.txtseq, $_.k); //#17951
                $k[$j++] = $_.char; //#17954
                if ($_[$get($_.textencfuncs, $_.submode)]() === true) {
                    break;
                } //#17954
                $_.addtotext(); //#17954
                $_.k = $_.k + 1; //#17955
                if (($_.char == $_.as) || ($_.char == $_.ps)) { //#17961
                    $k[$j++] = $get($_.txtseq, $_.k); //#17959
                    if ($_.char == $_.as) { //#17959
                        $_.enca(); //#17959
                    } else { //#17959
                        $_.encp(); //#17959
                    } //#17959
                    $_.addtotext(); //#17959
                    $_.k = $_.k + 1; //#17960
                } //#17960
                if ($_.char == $_.al) { //#17964
                    $_.submode = $_.A; //#17964
                } //#17964
                if ($_.char == $_.ll) { //#17965
                    $_.submode = $_.L; //#17965
                } //#17965
                if ($_.char == $_.ml) { //#17966
                    $_.submode = $_.M; //#17966
                } //#17966
                if ($_.char == $_.pl) { //#17967
                    $_.submode = $_.P; //#17967
                } //#17967
            } //#17967
            if (($_.text.length % 2) == 1) { //#18015
                if ($_.submode == $_.P) { //#18011
                    $k[$j++] = 'pad'; //#17972
                    $k[$j++] = $_.al; //#17972
                    $_.encp(); //#17972
                    var _BY = $k[--$j]; //#17972
                    $_[$k[--$j]] = _BY; //#17972
                    $_.submode = $_.A; //#17973
                } else { //#18011
                    $_.nextecitext = false; //#17976
                    for (var _Be = $_.i + 1, _Bd = $_.seq.length - 1; _Be <= _Bd; _Be += 1) { //#17983
                        $_.ti = _Be; //#17979
                        if ($ne($type($get($_.seq, $_.ti)), 'arraytype')) { //#17980
                            $_.nextecitext = false; //#17980
                            break; //#17980
                        } //#17980
                        if ($get($get($_.seq, $_.ti), 0) > -1000000) { //#17981
                            break; //#17981
                        } //#17981
                        $_.nextecitext = true; //#17982
                    } //#17982
                    if ($_.nextecitext) { //#18011
                        if ($_.submode == $_.A) { //#18008
                            var _Bx = $get($get($_.charvals, $_.L), $get($get($_.seq, $_.ti), 0)) !== undefined; //#17986
                            if (_Bx) { //#17991
                                $k[$j++] = 'pad'; //#17987
                                $k[$j++] = $_.ll; //#17987
                                $_.enca(); //#17987
                                var _Bz = $k[--$j]; //#17987
                                $_[$k[--$j]] = _Bz; //#17987
                                $_.submode = $_.L; //#17988
                            } else { //#17991
                                $k[$j++] = 'pad'; //#17990
                                $k[$j++] = $_.ml; //#17990
                                $_.enca(); //#17990
                                var _C3 = $k[--$j]; //#17990
                                $_[$k[--$j]] = _C3; //#17990
                                $_.submode = $_.M; //#17991
                            } //#17991
                        } else { //#18008
                            if ($_.submode == $_.M) { //#18008
                                var _CF = $get($get($_.charvals, $_.L), $get($get($_.seq, $_.ti), 0)) !== undefined; //#17995
                                if (_CF) { //#18004
                                    $k[$j++] = 'pad'; //#17996
                                    $k[$j++] = $_.ll; //#17996
                                    $_.encm(); //#17996
                                    var _CH = $k[--$j]; //#17996
                                    $_[$k[--$j]] = _CH; //#17996
                                    $_.submode = $_.L; //#17997
                                } else { //#18004
                                    var _CR = $get($get($_.charvals, $_.P), $get($get($_.seq, $_.ti), 0)) !== undefined; //#17999
                                    if (_CR) { //#18004
                                        $k[$j++] = 'pad'; //#18000
                                        $k[$j++] = $_.pl; //#18000
                                        $_.encm(); //#18000
                                        var _CT = $k[--$j]; //#18000
                                        $_[$k[--$j]] = _CT; //#18000
                                        $_.submode = $_.P; //#18001
                                    } else { //#18004
                                        $k[$j++] = 'pad'; //#18003
                                        $k[$j++] = $_.al; //#18003
                                        $_.encm(); //#18003
                                        var _CX = $k[--$j]; //#18003
                                        $_[$k[--$j]] = _CX; //#18003
                                        $_.submode = $_.A; //#18004
                                    } //#18004
                                } //#18004
                            } else { //#18008
                                $k[$j++] = 'pad'; //#18007
                                $k[$j++] = $_.ml; //#18007
                                $_.encl(); //#18007
                                var _Cb = $k[--$j]; //#18007
                                $_[$k[--$j]] = _Cb; //#18007
                                $_.submode = $_.M; //#18008
                            } //#18008
                        } //#18008
                    } else { //#18011
                        $k[$j++] = 'pad'; //#18011
                        $k[$j++] = $_.ps; //#18011
                        if ($_[$get($_.textencfuncs, $_.submode)]() === true) {
                            return true;
                        } //#18011
                        var _Cj = $k[--$j]; //#18011
                        $_[$k[--$j]] = _Cj; //#18011
                    } //#18011
                } //#18011
                $k[$j++] = Infinity; //#18014
                $aload($_.text); //#18014
                $k[$j++] = $_.pad; //#18014
                $_.text = $a(); //#18014
            } //#18014
            $_.out = $a(~~($_.text.length / 2)); //#18017
            for (var _Cs = 0, _Cr = $_.out.length - 1; _Cs <= _Cr; _Cs += 1) { //#18021
                $_.k = _Cs; //#18019
                $put($_.out, $_.k, $f(($get($_.text, $_.k * 2) * 30) + $get($_.text, ($_.k * 2) + 1))); //#18020
            } //#18020
            $k[$j++] = $_.out; //#18023
        }; //#18023
        $_.encn = function() {
            $_.in = $k[--$j]; //#18028
            $_.out = $a([]); //#18029
            for (var _D6 = 0, _D5 = $_.in.length - 1; _D6 <= _D5; _D6 += 44) { //#18057
                $_.k = _D6; //#18031
                $k[$j++] = Infinity; //#18032
                var _DB = $_.in.length - $_.k; //#18033
                $k[$j++] = 1; //#18033
                $k[$j++] = $_.in; //#18033
                $k[$j++] = $_.k; //#18033
                $k[$j++] = _DB; //#18033
                if (_DB > 44) { //#18033
                    $j--; //#18033
                    $k[$j++] = 44; //#18033
                } //#18033
                var _DC = $k[--$j]; //#18033
                var _DD = $k[--$j]; //#18033
                var _DF = $geti($k[--$j], _DD, _DC); //#18033
                for (var _DG = 0, _DH = _DF.length; _DG < _DH; _DG++) { //#18034
                    $k[$j++] = $f($get(_DF, _DG) - 48); //#18034
                } //#18034
                $_.gmod = $a(); //#18034
                $_.cwn = $a([]); //#18036
                for (;;) { //#18055
                    $_.dv = 900; //#18037
                    $_.gmul = $a([]); //#18038
                    $_.val = 0; //#18038
                    for (;;) { //#18050
                        if ($_.gmod.length == 0) { //#18039
                            break; //#18039
                        } //#18039
                        $_.val = $f(($_.val * 10) + $get($_.gmod, 0)); //#18040
                        $_.gmod = $geti($_.gmod, 1, $_.gmod.length - 1); //#18041
                        if ($_.val < $_.dv) { //#18047
                            if ($_.gmul.length != 0) { //#18045
                                $k[$j++] = Infinity; //#18044
                                $aload($_.gmul); //#18044
                                $k[$j++] = 0; //#18044
                                $_.gmul = $a(); //#18044
                            } //#18044
                        } else { //#18047
                            $k[$j++] = Infinity; //#18047
                            $aload($_.gmul); //#18047
                            $k[$j++] = ~~($_.val / $_.dv); //#18047
                            $_.gmul = $a(); //#18047
                        } //#18047
                        $_.val = $_.val % $_.dv; //#18049
                    } //#18049
                    $_.dv = $_.val; //#18051
                    $k[$j++] = Infinity; //#18052
                    $k[$j++] = $_.dv; //#18052
                    $aload($_.cwn); //#18052
                    $_.cwn = $a(); //#18052
                    $_.gmod = $_.gmul; //#18053
                    if ($_.gmul.length == 0) { //#18054
                        break; //#18054
                    } //#18054
                } //#18054
                $k[$j++] = Infinity; //#18056
                $aload($_.out); //#18056
                $aload($_.cwn); //#18056
                $_.out = $a(); //#18056
            } //#18056
            $k[$j++] = $_.out; //#18058
        }; //#18058
        $_.ence = function() {
            var _Dq = $f((-$get($k[--$j], 0)) - 1000000); //#18063
            $k[$j++] = _Dq; //#18071
            if (_Dq <= 899) { //#18070
                var _Dr = $k[--$j]; //#18064
                $k[$j++] = 927; //#18064
                $k[$j++] = _Dr; //#18064
                $astore($a(2)); //#18064
            } else { //#18070
                var _Dt = $k[--$j]; //#18065
                $k[$j++] = _Dt; //#18071
                if (_Dt <= 810899) { //#18070
                    var _Du = $k[--$j]; //#18066
                    $k[$j++] = 926; //#18066
                    $k[$j++] = (~~(_Du / 900)) - 1; //#18066
                    $k[$j++] = _Du % 900; //#18066
                    $astore($a(3)); //#18066
                } else { //#18070
                    var _Dw = $k[--$j]; //#18067
                    $k[$j++] = _Dw; //#18071
                    if (_Dw <= 811799) { //#18070
                        var _Dx = $k[--$j]; //#18068
                        $k[$j++] = 925; //#18068
                        $k[$j++] = $f(_Dx - 810900); //#18068
                        $astore($a(2)); //#18068
                    } else { //#18070
                        $k[$j++] = 'bwipp.pdf417badECI#18070'; //#18070
                        $k[$j++] = "PDF417 supports ECIs 000000 to 811799"; //#18070
                        bwipp_raiseerror(); //#18070
                    } //#18070
                } //#18070
            } //#18070
        }; //#18070
        $_.encfuncs = $a(['enct', 'encn', 'encb']); //#18074
        $_.addtocws = function() {
            var _E0 = $k[--$j]; //#18077
            $puti($_.datcws, $_.j, _E0); //#18077
            $_.j = _E0.length + $_.j; //#18078
        }; //#18078
        $_.datcws = $a($_.seqlen); //#18083
        $_.i = 0; //#18084
        $_.j = 0; //#18084
        for (;;) { //#18120
            if ($_.i >= $_.seq.length) { //#18085
                break; //#18085
            } //#18085
            $_.chars = $get($_.seq, $_.i); //#18086
            if ($eq($type($_.chars), 'arraytype')) { //#18116
                if ($get($_.chars, 0) <= -1000000) { //#18091
                    $k[$j++] = $_.chars; //#18089
                    $_.ence(); //#18089
                    $_.addtocws(); //#18089
                } else { //#18091
                    $k[$j++] = $_.chars; //#18091
                    if ($_[$get($_.encfuncs, $_.state)]() === true) {
                        break;
                    } //#18091
                    $_.addtocws(); //#18091
                } //#18091
            } else { //#18116
                $k[$j++] = $a([$get($_.latchcws, $_.chars)]); //#18094
                $_.addtocws(); //#18094
                if ($_.chars == $_.tl) { //#18095
                    $_.state = $_.T; //#18095
                    $_.submode = $_.A; //#18095
                } //#18095
                if ($_.chars == $_.nl) { //#18096
                    $_.state = $_.N; //#18096
                } //#18096
                if (($_.chars == $_.bl) || ($_.chars == $_.bl6)) { //#18097
                    $_.state = $_.B; //#18097
                } //#18097
                if ($_.chars == $_.bs) { //#18101
                    $_.i = $_.i + 1; //#18099
                    $k[$j++] = $get($_.seq, $_.i); //#18100
                    $_.encb(); //#18100
                    $_.addtocws(); //#18100
                } //#18100
                if ($_.chars == $_.m05) { //#18109
                    if (($_.i + 1) < $_.seq.length) { //#18107
                        if ($get($_.seq, $_.i + 1) == $_.nl) { //#18106
                            $_.i = $_.i + 1; //#18105
                        } //#18105
                    } //#18105
                    $_.state = $_.N; //#18108
                } //#18108
                if ($_.chars == $_.m06) { //#18117
                    if (($_.i + 1) < $_.seq.length) { //#18115
                        if ($get($_.seq, $_.i + 1) == $_.tl) { //#18114
                            $_.i = $_.i + 1; //#18113
                        } //#18113
                    } //#18113
                    $_.state = $_.T; //#18116
                    $_.submode = $_.M; //#18116
                } //#18116
            } //#18116
            $_.i = $_.i + 1; //#18119
        } //#18119
        $_.datcws = $geti($_.datcws, 0, $_.j); //#18121
    } //#18121
    if (!bwipp_micropdf417.__18185__) { //#18185
        $_ = Object.create($_); //#18185
        $_.ccametrics = $a([$a([2, 5, 4, 39, 0, 19]), $a([2, 6, 4, 1, 0, 33]), $a([2, 7, 5, 32, 0, 12]), $a([2, 8, 5, 8, 0, 40]), $a([2, 9, 6, 14, 0, 46]), $a([2, 10, 6, 43, 0, 23]), $a([2, 12, 7, 20, 0, 52]), $a([3, 4, 4, 11, 43, 23]), $a([3, 5, 5, 1, 33, 13]), $a([3, 6, 6, 5, 37, 17]), $a([3, 7, 7, 15, 47, 27]), $a([3, 8, 7, 21, 1, 33]), $a([4, 3, 4, 40, 20, 52]), $a([4, 4, 5, 43, 23, 3]), $a([4, 5, 6, 46, 26, 6]), $a([4, 6, 7, 34, 14, 46]), $a([4, 7, 8, 29, 9, 41])]); //#18145
        $_.nonccametrics = $a([$a([1, 11, 7, 1, 0, 9]), $a([1, 14, 7, 8, 0, 8]), $a([1, 17, 7, 36, 0, 36]), $a([1, 20, 8, 19, 0, 19]), $a([1, 24, 8, 9, 0, 17]), $a([1, 28, 8, 25, 0, 33]), $a([2, 8, 8, 1, 0, 1]), $a([2, 11, 9, 1, 0, 9]), $a([2, 14, 9, 8, 0, 8]), $a([2, 17, 10, 36, 0, 36]), $a([2, 20, 11, 19, 0, 19]), $a([2, 23, 13, 9, 0, 17]), $a([2, 26, 15, 27, 0, 35]), $a([3, 6, 12, 1, 1, 1]), $a([3, 8, 14, 7, 7, 7]), $a([3, 10, 16, 15, 15, 15]), $a([3, 12, 18, 25, 25, 25]), $a([3, 15, 21, 37, 37, 37]), $a([3, 20, 26, 1, 17, 33]), $a([3, 26, 32, 1, 9, 17]), $a([3, 32, 38, 21, 29, 37]), $a([3, 38, 44, 15, 31, 47]), $a([3, 44, 50, 1, 25, 49]), $a([4, 4, 8, 47, 19, 43]), $a([4, 6, 12, 1, 1, 1]), $a([4, 8, 14, 7, 7, 7]), $a([4, 10, 16, 15, 15, 15]), $a([4, 12, 18, 25, 25, 25]), $a([4, 15, 21, 37, 37, 37]), $a([4, 20, 26, 1, 17, 33]), $a([4, 26, 32, 1, 9, 17]), $a([4, 32, 38, 21, 29, 37]), $a([4, 38, 44, 15, 31, 47]), $a([4, 44, 50, 1, 25, 49])]); //#18184
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_micropdf417.$ctx[id] = $_[id]); //#18184
        bwipp_micropdf417.__18185__ = 1; //#18184
        $_ = Object.getPrototypeOf($_); //#18184
    } //#18184
    $k[$j++] = 'metrics'; //#18187
    if ($_.cca) { //#18187
        $k[$j++] = $_.ccametrics; //#18187
    } else { //#18187
        $k[$j++] = $_.nonccametrics; //#18187
    } //#18187
    var _G1 = $k[--$j]; //#18187
    $_[$k[--$j]] = _G1; //#18187
    $_.urows = $_.rows; //#18190
    $_.ucols = $_.columns; //#18191
    $forall($_.metrics, function() { //#18206
        $_.m = $k[--$j]; //#18193
        $_.c = $get($_.m, 0); //#18194
        $_.r = $get($_.m, 1); //#18195
        $_.k = $get($_.m, 2); //#18196
        $_.rapl = $get($_.m, 3); //#18197
        $_.rapc = $get($_.m, 4); //#18198
        $_.rapr = $get($_.m, 5); //#18199
        $_.ncws = $f(($_.r * $_.c) - $_.k); //#18200
        $_.okay = true; //#18201
        if ($_.datcws.length > $_.ncws) { //#18202
            $_.okay = false; //#18202
        } //#18202
        if (($_.urows != 0) && ($_.urows != $_.r)) { //#18203
            $_.okay = false; //#18203
        } //#18203
        if (($_.ucols != 0) && ($_.ucols != $_.c)) { //#18204
            $_.okay = false; //#18204
        } //#18204
        if ($_.okay) { //#18205
            return true; //#18205
        } //#18205
    }); //#18205
    if (!$_.okay) { //#18210
        $k[$j++] = 'bwipp.micropdf417noValidSymbol#18209'; //#18209
        $k[$j++] = "Maximum length exceeded or invalid size"; //#18209
        bwipp_raiseerror(); //#18209
    } //#18209
    $_.m = $_.datcws.length; //#18213
    $_.n = $f(($_.c * $_.r) - $_.k); //#18214
    $_.cws = $a($f(($_.c * $_.r) + 1)); //#18215
    $puti($_.cws, 0, $_.datcws); //#18216
    $k[$j++] = $_.cws; //#18217
    $k[$j++] = $_.m; //#18217
    $k[$j++] = Infinity; //#18217
    for (var _Gj = 0, _Gk = $f($_.n - $_.m); _Gj < _Gk; _Gj++) { //#18217
        $k[$j++] = 900; //#18217
    } //#18217
    var _Gl = $a(); //#18217
    var _Gm = $k[--$j]; //#18217
    $puti($k[--$j], _Gm, _Gl); //#18217
    $k[$j++] = $_.cws; //#18218
    $k[$j++] = $_.n; //#18218
    $k[$j++] = Infinity; //#18218
    for (var _Gr = 0, _Gs = $_.k; _Gr < _Gs; _Gr++) { //#18218
        $k[$j++] = 0; //#18218
    } //#18218
    $k[$j++] = 0; //#18218
    var _Gt = $a(); //#18218
    var _Gu = $k[--$j]; //#18218
    $puti($k[--$j], _Gu, _Gt); //#18218
    if (!bwipp_micropdf417.__18225__) { //#18225
        $_ = Object.create($_); //#18225
        $k[$j++] = Infinity; //#18222
        $k[$j++] = 1; //#18222
        for (var _Gw = 0, _Gx = 928; _Gw < _Gx; _Gw++) { //#18222
            var _Gy = $k[--$j]; //#18222
            $k[$j++] = _Gy; //#18222
            $k[$j++] = (_Gy * 3) % 929; //#18222
        } //#18222
        $_.rsalog = $a(); //#18222
        $_.rslog = $a(929); //#18223
        for (var _H1 = 1; _H1 <= 928; _H1 += 1) { //#18224
            $put($_.rslog, $get($_.rsalog, _H1), _H1); //#18224
        } //#18224
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_micropdf417.$ctx[id] = $_[id]); //#18224
        bwipp_micropdf417.__18225__ = 1; //#18224
        $_ = Object.getPrototypeOf($_); //#18224
    } //#18224
    $_.rsprod = function() {
        var _H6 = $k[--$j]; //#18229
        var _H7 = $k[--$j]; //#18229
        $k[$j++] = _H7; //#18233
        $k[$j++] = _H6; //#18233
        if ((_H6 != 0) && (_H7 != 0)) { //#18232
            var _HA = $get($_.rslog, $k[--$j]); //#18230
            var _HF = $get($_.rsalog, $f(_HA + $get($_.rslog, $k[--$j])) % 928); //#18230
            $k[$j++] = _HF; //#18230
        } else { //#18232
            $j -= 2; //#18232
            $k[$j++] = 0; //#18232
        } //#18232
    }; //#18232
    $k[$j++] = Infinity; //#18237
    $k[$j++] = 1; //#18237
    for (var _HH = 0, _HI = $_.k; _HH < _HI; _HH++) { //#18237
        $k[$j++] = 0; //#18237
    } //#18237
    $_.coeffs = $a(); //#18237
    for (var _HM = 1, _HL = $_.k; _HM <= _HL; _HM += 1) { //#18246
        $_.i = _HM; //#18239
        $put($_.coeffs, $_.i, $get($_.coeffs, $_.i - 1)); //#18240
        for (var _HT = $_.i - 1; _HT >= 1; _HT -= 1) { //#18244
            $_.j = _HT; //#18242
            $k[$j++] = $_.coeffs; //#18243
            $k[$j++] = $_.j; //#18243
            $k[$j++] = $get($_.coeffs, $_.j - 1); //#18243
            $k[$j++] = $get($_.coeffs, $_.j); //#18243
            $k[$j++] = $get($_.rsalog, $_.i); //#18243
            $_.rsprod(); //#18243
            var _Hf = $k[--$j]; //#18243
            var _Hg = $k[--$j]; //#18243
            var _Hh = $k[--$j]; //#18243
            $put($k[--$j], _Hh, $f(_Hg + _Hf) % 929); //#18243
        } //#18243
        $k[$j++] = $_.coeffs; //#18245
        $k[$j++] = 0; //#18245
        $k[$j++] = $get($_.coeffs, 0); //#18245
        $k[$j++] = $get($_.rsalog, $_.i); //#18245
        $_.rsprod(); //#18245
        var _Hp = $k[--$j]; //#18245
        var _Hq = $k[--$j]; //#18245
        $put($k[--$j], _Hq, _Hp); //#18245
    } //#18245
    $_.coeffs = $geti($_.coeffs, 0, $_.coeffs.length - 1); //#18247
    for (var _Hw = $_.coeffs.length - 1; _Hw >= 0; _Hw -= 2) { //#18248
        var _Hx = $_.coeffs; //#18248
        $put(_Hx, _Hw, $f(929 - $get(_Hx, _Hw))); //#18248
    } //#18248
    for (var _I1 = 0, _I0 = $f($_.n - 1); _I1 <= _I0; _I1 += 1) { //#18257
        $_.t = $f($get($_.cws, _I1) + $get($_.cws, $_.n)) % 929; //#18252
        for (var _I9 = 0, _I8 = $f($_.k - 1); _I9 <= _I8; _I9 += 1) { //#18256
            $_.j = _I9; //#18254
            $put($_.cws, $f($_.n + $_.j), ($f($get($_.cws, $f($f($_.n + $_.j) + 1)) + ($f(929 - (($_.t * $get($_.coeffs, $f($f($_.k - $_.j) - 1))) % 929))))) % 929); //#18255
        } //#18255
    } //#18255
    for (var _IQ = $_.n, _IP = $f($_.n + $_.k); _IQ <= _IP; _IQ += 1) { //#18258
        $put($_.cws, _IQ, $f(929 - $get($_.cws, _IQ)) % 929); //#18258
    } //#18258
    $_.cws = $geti($_.cws, 0, $_.cws.length - 1); //#18261
    var _IY = $get($_.options, 'debugcws') !== undefined; //#18263
    if (_IY) { //#18263
        $k[$j++] = 'bwipp.debugcws#18263'; //#18263
        $k[$j++] = $_.cws; //#18263
        bwipp_raiseerror(); //#18263
    } //#18263
    if (!bwipp_micropdf417.__18522__) { //#18522
        $_ = Object.create($_); //#18522
        $_.clusters = $a([$a([120256, 125680, 128380, 120032, 125560, 128318, 108736, 119920, 108640, 86080, 108592, 86048, 110016, 120560, 125820, 109792, 120440, 125758, 88256, 109680, 88160, 89536, 110320, 120700, 89312, 110200, 120638, 89200, 110140, 89840, 110460, 89720, 110398, 89980, 128506, 119520, 125304, 128190, 107712, 119408, 125244, 107616, 119352, 84032, 107568, 119324, 84000, 107544, 83984, 108256, 119672, 125374, 85184, 108144, 119612, 85088, 108088, 119582, 85040, 108060, 85728, 108408, 119742, 85616, 108348, 85560, 108318, 85880, 108478, 85820, 85790, 107200, 119152, 125116, 107104, 119096, 125086, 83008, 107056, 119068, 82976, 107032, 82960, 82952, 83648, 107376, 119228, 83552, 107320, 119198, 83504, 107292, 83480, 83468, 83824, 107452, 83768, 107422, 83740, 83900, 106848, 118968, 125022, 82496, 106800, 118940, 82464, 106776, 118926, 82448, 106764, 82440, 106758, 82784, 106936, 119006, 82736, 106908, 82712, 106894, 82700, 82694, 106974, 82830, 82240, 106672, 118876, 82208, 106648, 118862, 82192, 106636, 82184, 106630, 82180, 82352, 82328, 82316, 82080, 118830, 106572, 106566, 82050, 117472, 124280, 127678, 103616, 117360, 124220, 103520, 117304, 124190, 75840, 103472, 75808, 104160, 117624, 124350, 76992, 104048, 117564, 76896, 103992, 76848, 76824, 77536, 104312, 117694, 77424, 104252, 77368, 77340, 77688, 104382, 77628, 77758, 121536, 126320, 128700, 121440, 126264, 128670, 111680, 121392, 126236, 111648, 121368, 126222, 111632, 121356, 103104, 117104, 124092, 112320, 103008, 117048, 124062, 112224, 121656, 126366, 93248, 74784, 102936, 117006, 93216, 112152, 93200, 75456, 103280, 117180, 93888, 75360, 103224, 117150, 93792, 112440, 121758, 93744, 75288, 93720, 75632, 103356, 94064, 75576, 103326, 94008, 112542, 93980, 75708, 94140, 75678, 94110, 121184, 126136, 128606, 111168, 121136, 126108, 111136, 121112, 126094, 111120, 121100, 111112, 111108, 102752, 116920, 123998, 111456, 102704, 116892, 91712, 74272, 121244, 116878, 91680, 74256, 102668, 91664, 111372, 102662, 74244, 74592, 102840, 116958, 92000, 74544, 102812, 91952, 111516, 102798, 91928, 74508, 74502, 74680, 102878, 92088, 74652, 92060, 74638, 92046, 92126, 110912, 121008, 126044, 110880, 120984, 126030, 110864, 120972, 110856, 120966, 110852, 110850, 74048, 102576, 116828, 90944, 74016, 102552, 116814, 90912, 111000, 121038, 90896, 73992, 102534, 90888, 110982, 90884, 74160, 102620, 91056, 74136, 102606, 91032, 111054, 91020, 74118, 91014, 91100, 91086, 110752, 120920, 125998, 110736, 120908, 110728, 120902, 110724, 110722, 73888, 102488, 116782, 90528, 73872, 102476, 90512, 110796, 102470, 90504, 73860, 90500, 73858, 73944, 90584, 90572, 90566, 120876, 120870, 110658, 102444, 73800, 90312, 90308, 90306, 101056, 116080, 123580, 100960, 116024, 70720, 100912, 115996, 70688, 100888, 70672, 70664, 71360, 101232, 116156, 71264, 101176, 116126, 71216, 101148, 71192, 71180, 71536, 101308, 71480, 101278, 71452, 71612, 71582, 118112, 124600, 127838, 105024, 118064, 124572, 104992, 118040, 124558, 104976, 118028, 104968, 118022, 100704, 115896, 123486, 105312, 100656, 115868, 79424, 70176, 118172, 115854, 79392, 105240, 100620, 79376, 70152, 79368, 70496, 100792, 115934, 79712, 70448, 118238, 79664, 105372, 100750, 79640, 70412, 79628, 70584, 100830, 79800, 70556, 79772, 70542, 70622, 79838, 122176, 126640, 128860, 122144, 126616, 128846, 122128, 126604, 122120, 126598, 122116, 104768, 117936, 124508, 113472, 104736, 126684, 124494, 113440, 122264, 126670, 113424, 104712, 117894, 113416, 122246, 104706, 69952, 100528, 115804, 78656, 69920, 100504, 115790, 96064, 78624, 104856, 117966, 96032, 113560, 122318, 100486, 96016, 78600, 104838, 96008, 69890, 70064, 100572, 78768, 70040, 100558, 96176, 78744, 104910, 96152, 113614, 70022, 78726, 70108, 78812, 70094, 96220, 78798, 122016, 126552, 128814, 122000, 126540, 121992, 126534, 121988, 121986, 104608, 117848, 124462, 113056, 104592, 126574, 113040, 122060, 117830, 113032, 104580, 113028, 104578, 113026, 69792, 100440, 115758, 78240, 69776, 100428, 95136, 78224, 104652, 100422, 95120, 113100, 69764, 95112, 78212, 69762, 78210, 69848, 100462, 78296, 69836, 95192, 78284, 69830, 95180, 78278, 69870, 95214, 121936, 126508, 121928, 126502, 121924, 121922, 104528, 117804, 112848, 104520, 117798, 112840, 121958, 112836, 104514, 112834, 69712, 100396, 78032, 69704, 100390, 94672, 78024, 104550, 94664, 112870, 69698, 94660, 78018, 94658, 78060, 94700, 94694, 126486, 121890, 117782, 104484, 104482, 69672, 77928, 94440, 69666, 77922, 99680, 68160, 99632, 68128, 99608, 115342, 68112, 99596, 68104, 99590, 68448, 99768, 115422, 68400, 99740, 68376, 99726, 68364, 68358, 68536, 99806, 68508, 68494, 68574, 101696, 116400, 123740, 101664, 116376, 101648, 116364, 101640, 116358, 101636, 67904, 99504, 115292, 72512, 67872, 116444, 115278, 72480, 101784, 116430, 72464, 67848, 99462, 72456, 101766, 67842, 68016, 99548, 72624, 67992, 99534, 72600, 101838, 72588, 67974, 68060, 72668, 68046, 72654, 118432, 124760, 127918, 118416, 124748, 118408, 124742, 118404, 118402, 101536, 116312, 105888, 101520, 116300, 105872, 118476, 116294, 105864, 101508, 105860, 101506, 105858, 67744, 99416, 72096, 67728, 116334, 80800, 72080, 101580, 99398, 80784, 105932, 67716, 80776, 72068, 67714, 72066, 67800, 99438, 72152, 67788, 80856, 72140, 67782, 80844, 72134, 67822, 72174, 80878, 126800, 128940, 126792, 128934, 126788, 126786, 118352, 124716, 122576, 126828, 124710, 122568, 126822, 122564, 118338, 122562, 101456, 116268, 105680, 101448, 116262, 114128, 105672, 118374, 114120, 122598, 101442, 114116, 105666, 114114, 67664, 99372, 71888, 67656, 99366, 80336, 71880, 101478, 97232, 80328, 105702, 67650, 97224, 114150, 71874, 97220, 67692, 71916, 67686, 80364, 71910, 97260, 80358, 97254, 126760, 128918, 126756, 126754, 118312, 124694, 122472, 126774, 122468, 118306, 122466, 101416, 116246, 105576, 101412, 113896, 105572, 101410, 113892, 105570, 113890, 67624, 99350, 71784, 101430, 80104, 71780, 67618, 96744, 80100, 71778, 96740, 80098, 96738, 71798, 96758, 126738, 122420, 122418, 105524, 113780, 113778, 71732, 79988, 96500, 96498, 66880, 66848, 98968, 66832, 66824, 66820, 66992, 66968, 66956, 66950, 67036, 67022, 100000, 99984, 115532, 99976, 115526, 99972, 99970, 66720, 98904, 69024, 100056, 98892, 69008, 100044, 69000, 100038, 68996, 66690, 68994, 66776, 98926, 69080, 100078, 69068, 66758, 69062, 66798, 69102, 116560, 116552, 116548, 116546, 99920, 102096, 116588, 115494, 102088, 116582, 102084, 99906, 102082, 66640, 68816, 66632, 98854, 73168, 68808, 66628, 73160, 68804, 66626, 73156, 68802, 66668, 68844, 66662, 73196, 68838, 73190, 124840, 124836, 124834, 116520, 118632, 124854, 118628, 116514, 118626, 99880, 115478, 101992, 116534, 106216, 101988, 99874, 106212, 101986, 106210, 66600, 98838, 68712, 99894, 72936, 68708, 66594, 81384, 72932, 68706, 81380, 72930, 66614, 68726, 72950, 81398, 128980, 128978, 124820, 126900, 124818, 126898, 116500, 118580, 116498, 122740, 118578, 122738, 99860, 101940, 99858, 106100, 101938, 114420]), $a([128352, 129720, 125504, 128304, 129692, 125472, 128280, 129678, 125456, 128268, 125448, 128262, 125444, 125792, 128440, 129758, 120384, 125744, 128412, 120352, 125720, 128398, 120336, 125708, 120328, 125702, 120324, 120672, 125880, 128478, 110144, 120624, 125852, 110112, 120600, 125838, 110096, 120588, 110088, 120582, 110084, 110432, 120760, 125918, 89664, 110384, 120732, 89632, 110360, 120718, 89616, 110348, 89608, 110342, 89952, 110520, 120798, 89904, 110492, 89880, 110478, 89868, 90040, 110558, 90012, 89998, 125248, 128176, 129628, 125216, 128152, 129614, 125200, 128140, 125192, 128134, 125188, 125186, 119616, 125360, 128220, 119584, 125336, 128206, 119568, 125324, 119560, 125318, 119556, 119554, 108352, 119728, 125404, 108320, 119704, 125390, 108304, 119692, 108296, 119686, 108292, 108290, 85824, 108464, 119772, 85792, 108440, 119758, 85776, 108428, 85768, 108422, 85764, 85936, 108508, 85912, 108494, 85900, 85894, 85980, 85966, 125088, 128088, 129582, 125072, 128076, 125064, 128070, 125060, 125058, 119200, 125144, 128110, 119184, 125132, 119176, 125126, 119172, 119170, 107424, 119256, 125166, 107408, 119244, 107400, 119238, 107396, 107394, 83872, 107480, 119278, 83856, 107468, 83848, 107462, 83844, 83842, 83928, 107502, 83916, 83910, 83950, 125008, 128044, 125000, 128038, 124996, 124994, 118992, 125036, 118984, 125030, 118980, 118978, 106960, 119020, 106952, 119014, 106948, 106946, 82896, 106988, 82888, 106982, 82884, 82882, 82924, 82918, 124968, 128022, 124964, 124962, 118888, 124982, 118884, 118882, 106728, 118902, 106724, 106722, 82408, 106742, 82404, 82402, 124948, 124946, 118836, 118834, 106612, 106610, 124224, 127664, 129372, 124192, 127640, 129358, 124176, 127628, 124168, 127622, 124164, 124162, 117568, 124336, 127708, 117536, 124312, 127694, 117520, 124300, 117512, 124294, 117508, 117506, 104256, 117680, 124380, 104224, 117656, 124366, 104208, 117644, 104200, 117638, 104196, 104194, 77632, 104368, 117724, 77600, 104344, 117710, 77584, 104332, 77576, 104326, 77572, 77744, 104412, 77720, 104398, 77708, 77702, 77788, 77774, 128672, 129880, 93168, 128656, 129868, 92664, 128648, 129862, 92412, 128644, 128642, 124064, 127576, 129326, 126368, 124048, 129902, 126352, 128716, 127558, 126344, 124036, 126340, 124034, 126338, 117152, 124120, 127598, 121760, 117136, 124108, 121744, 126412, 124102, 121736, 117124, 121732, 117122, 121730, 103328, 117208, 124142, 112544, 103312, 117196, 112528, 121804, 117190, 112520, 103300, 112516, 103298, 112514, 75680, 103384, 117230, 94112, 75664, 103372, 94096, 112588, 103366, 94088, 75652, 94084, 75650, 75736, 103406, 94168, 75724, 94156, 75718, 94150, 75758, 128592, 129836, 91640, 128584, 129830, 91388, 128580, 91262, 128578, 123984, 127532, 126160, 123976, 127526, 126152, 128614, 126148, 123970, 126146, 116944, 124012, 121296, 116936, 124006, 121288, 126182, 121284, 116930, 121282, 102864, 116972, 111568, 102856, 116966, 111560, 121318, 111556, 102850, 111554, 74704, 102892, 92112, 74696, 102886, 92104, 111590, 92100, 74690, 92098, 74732, 92140, 74726, 92134, 128552, 129814, 90876, 128548, 90750, 128546, 123944, 127510, 126056, 128566, 126052, 123938, 126050, 116840, 123958, 121064, 116836, 121060, 116834, 121058, 102632, 116854, 111080, 121078, 111076, 102626, 111074, 74216, 102646, 91112, 74212, 91108, 74210, 91106, 74230, 91126, 128532, 90494, 128530, 123924, 126004, 123922, 126002, 116788, 120948, 116786, 120946, 102516, 110836, 102514, 110834, 73972, 90612, 73970, 90610, 128522, 123914, 125978, 116762, 120890, 102458, 110714, 123552, 127320, 129198, 123536, 127308, 123528, 127302, 123524, 123522, 116128, 123608, 127342, 116112, 123596, 116104, 123590, 116100, 116098, 101280, 116184, 123630, 101264, 116172, 101256, 116166, 101252, 101250, 71584, 101336, 116206, 71568, 101324, 71560, 101318, 71556, 71554, 71640, 101358, 71628, 71622, 71662, 127824, 129452, 79352, 127816, 129446, 79100, 127812, 78974, 127810, 123472, 127276, 124624, 123464, 127270, 124616, 127846, 124612, 123458, 124610, 115920, 123500, 118224, 115912, 123494, 118216, 124646, 118212, 115906, 118210, 100816, 115948, 105424, 100808, 115942, 105416, 118246, 105412, 100802, 105410, 70608, 100844, 79824, 70600, 100838, 79816, 105446, 79812, 70594, 79810, 70636, 79852, 70630, 79846, 129960, 95728, 113404, 129956, 95480, 113278, 129954, 95356, 95294, 127784, 129430, 78588, 128872, 129974, 95996, 78462, 128868, 127778, 95870, 128866, 123432, 127254, 124520, 123428, 126696, 128886, 123426, 126692, 124514, 126690, 115816, 123446, 117992, 115812, 122344, 117988, 115810, 122340, 117986, 122338, 100584, 115830, 104936, 100580, 113640, 104932, 100578, 113636, 104930, 113634, 70120, 100598, 78824, 70116, 96232, 78820, 70114, 96228, 78818, 96226, 70134, 78838, 129940, 94968, 113022, 129938, 94844, 94782, 127764, 78206, 128820, 127762, 95102, 128818, 123412, 124468, 123410, 126580, 124466, 126578, 115764, 117876, 115762, 122100, 117874, 122098, 100468, 104692, 100466, 113140, 104690, 113138, 69876, 78324, 69874, 95220, 78322, 95218, 129930, 94588, 94526, 127754, 128794, 123402, 124442, 126522, 115738, 117818, 121978, 100410, 104570, 112890, 69754, 78074, 94714, 94398, 123216, 127148, 123208, 127142, 123204, 123202, 115408, 123244, 115400, 123238, 115396, 115394, 99792, 115436, 99784, 115430, 99780, 99778, 68560, 99820, 68552, 99814, 68548, 68546, 68588, 68582, 127400, 129238, 72444, 127396, 72318, 127394, 123176, 127126, 123752, 123172, 123748, 123170, 123746, 115304, 123190, 116456, 115300, 116452, 115298, 116450, 99560, 115318, 101864, 99556, 101860, 99554, 101858, 68072, 99574, 72680, 68068, 72676, 68066, 72674, 68086, 72694, 129492, 80632, 105854, 129490, 80508, 80446, 127380, 72062, 127924, 127378, 80766, 127922, 123156, 123700, 123154, 124788, 123698, 124786, 115252, 116340, 115250, 118516, 116338, 118514, 99444, 101620, 99442, 105972, 101618, 105970, 67828, 72180, 67826, 80884, 72178, 80882, 97008, 114044, 96888, 113982, 96828, 96798, 129482, 80252, 130010, 97148, 80190, 97086, 127370, 127898, 128954, 123146, 123674, 124730, 126842, 115226, 116282, 118394, 122618, 99386, 101498, 105722, 114170, 67706, 71930, 80378, 96632, 113854, 96572, 96542, 80062, 96702, 96444, 96414, 96350, 123048, 123044, 123042, 115048, 123062, 115044, 115042, 99048, 115062, 99044, 99042, 67048, 99062, 67044, 67042, 67062, 127188, 68990, 127186, 123028, 123316, 123026, 123314, 114996, 115572, 114994, 115570, 98932, 100084, 98930, 100082, 66804, 69108, 66802, 69106, 129258, 73084, 73022, 127178, 127450, 123018, 123290, 123834, 114970, 115514, 116602, 98874, 99962, 102138, 66682, 68858, 73210, 81272, 106174, 81212, 81182, 72894, 81342, 97648, 114364, 97592, 114334, 97564, 97550, 81084, 97724, 81054, 97694, 97464, 114270, 97436, 97422, 80990, 97502, 97372, 97358, 97326, 114868, 114866, 98676, 98674, 66292, 66290, 123098, 114842, 115130, 98618, 99194, 66170, 67322, 69310, 73404, 73374, 81592, 106334, 81564, 81550, 73310, 81630, 97968, 114524, 97944, 114510, 97932, 97926, 81500, 98012, 81486, 97998, 97880, 114478, 97868, 97862, 81454, 97902, 97836, 97830, 69470, 73564, 73550, 81752, 106414, 81740, 81734, 73518, 81774, 81708, 81702]), $a([109536, 120312, 86976, 109040, 120060, 86496, 108792, 119934, 86256, 108668, 86136, 129744, 89056, 110072, 129736, 88560, 109820, 129732, 88312, 109694, 129730, 88188, 128464, 129772, 89592, 128456, 129766, 89340, 128452, 89214, 128450, 125904, 128492, 125896, 128486, 125892, 125890, 120784, 125932, 120776, 125926, 120772, 120770, 110544, 120812, 110536, 120806, 110532, 84928, 108016, 119548, 84448, 107768, 119422, 84208, 107644, 84088, 107582, 84028, 129640, 85488, 108284, 129636, 85240, 108158, 129634, 85116, 85054, 128232, 129654, 85756, 128228, 85630, 128226, 125416, 128246, 125412, 125410, 119784, 125430, 119780, 119778, 108520, 119798, 108516, 108514, 83424, 107256, 119166, 83184, 107132, 83064, 107070, 83004, 82974, 129588, 83704, 107390, 129586, 83580, 83518, 128116, 83838, 128114, 125172, 125170, 119284, 119282, 107508, 107506, 82672, 106876, 82552, 106814, 82492, 82462, 129562, 82812, 82750, 128058, 125050, 119034, 82296, 106686, 82236, 82206, 82366, 82108, 82078, 76736, 103920, 117500, 76256, 103672, 117374, 76016, 103548, 75896, 103486, 75836, 129384, 77296, 104188, 129380, 77048, 104062, 129378, 76924, 76862, 127720, 129398, 77564, 127716, 77438, 127714, 124392, 127734, 124388, 124386, 117736, 124406, 117732, 117730, 104424, 117750, 104420, 104418, 112096, 121592, 126334, 92608, 111856, 121468, 92384, 111736, 121406, 92272, 111676, 92216, 111646, 92188, 75232, 103160, 117118, 93664, 74992, 103036, 93424, 112252, 102974, 93304, 74812, 93244, 74782, 93214, 129332, 75512, 103294, 129908, 129330, 93944, 75388, 129906, 93820, 75326, 93758, 127604, 75646, 128756, 127602, 94078, 128754, 124148, 126452, 124146, 126450, 117236, 121844, 117234, 121842, 103412, 103410, 91584, 111344, 121212, 91360, 111224, 121150, 91248, 111164, 91192, 111134, 91164, 91150, 74480, 102780, 91888, 74360, 102718, 91768, 111422, 91708, 74270, 91678, 129306, 74620, 129850, 92028, 74558, 91966, 127546, 128634, 124026, 126202, 116986, 121338, 102906, 90848, 110968, 121022, 90736, 110908, 90680, 110878, 90652, 90638, 74104, 102590, 91000, 74044, 90940, 74014, 90910, 74174, 91070, 90480, 110780, 90424, 110750, 90396, 90382, 73916, 90556, 73886, 90526, 90296, 110686, 90268, 90254, 73822, 90334, 90204, 90190, 71136, 101112, 116094, 70896, 100988, 70776, 100926, 70716, 70686, 129204, 71416, 101246, 129202, 71292, 71230, 127348, 71550, 127346, 123636, 123634, 116212, 116210, 101364, 101362, 79296, 105200, 118140, 79072, 105080, 118078, 78960, 105020, 78904, 104990, 78876, 78862, 70384, 100732, 79600, 70264, 100670, 79480, 105278, 79420, 70174, 79390, 129178, 70524, 129466, 79740, 70462, 79678, 127290, 127866, 123514, 124666, 115962, 118266, 100858, 113376, 122232, 126654, 95424, 113264, 122172, 95328, 113208, 122142, 95280, 113180, 95256, 113166, 95244, 78560, 104824, 117950, 95968, 78448, 104764, 95856, 113468, 104734, 95800, 78364, 95772, 78350, 95758, 70008, 100542, 78712, 69948, 96120, 78652, 69918, 96060, 78622, 96030, 70078, 78782, 96190, 94912, 113008, 122044, 94816, 112952, 122014, 94768, 112924, 94744, 112910, 94732, 94726, 78192, 104636, 95088, 78136, 104606, 95032, 113054, 95004, 78094, 94990, 69820, 78268, 69790, 95164, 78238, 95134, 94560, 112824, 121950, 94512, 112796, 94488, 112782, 94476, 94470, 78008, 104542, 94648, 77980, 94620, 77966, 94606, 69726, 78046, 94686, 94384, 112732, 94360, 112718, 94348, 94342, 77916, 94428, 77902, 94414, 94296, 112686, 94284, 94278, 77870, 94318, 94252, 94246, 68336, 99708, 68216, 99646, 68156, 68126, 68476, 68414, 127162, 123258, 115450, 99834, 72416, 101752, 116414, 72304, 101692, 72248, 101662, 72220, 72206, 67960, 99518, 72568, 67900, 72508, 67870, 72478, 68030, 72638, 80576, 105840, 118460, 80480, 105784, 118430, 80432, 105756, 80408, 105742, 80396, 80390, 72048, 101564, 80752, 71992, 101534, 80696, 71964, 80668, 71950, 80654, 67772, 72124, 67742, 80828, 72094, 80798, 114016, 122552, 126814, 96832, 113968, 122524, 96800, 113944, 122510, 96784, 113932, 96776, 113926, 96772, 80224, 105656, 118366, 97120, 80176, 105628, 97072, 114076, 105614, 97048, 80140, 97036, 80134, 97030, 71864, 101470, 80312, 71836, 97208, 80284, 71822, 97180, 80270, 97166, 67678, 71902, 80350, 97246, 96576, 113840, 122460, 96544, 113816, 122446, 96528, 113804, 96520, 113798, 96516, 96514, 80048, 105564, 96688, 80024, 105550, 96664, 113870, 96652, 80006, 96646, 71772, 80092, 71758, 96732, 80078, 96718, 96416, 113752, 122414, 96400, 113740, 96392, 113734, 96388, 96386, 79960, 105518, 96472, 79948, 96460, 79942, 96454, 71726, 79982, 96494, 96336, 113708, 96328, 113702, 96324, 96322, 79916, 96364, 79910, 96358, 96296, 113686, 96292, 96290, 79894, 96310, 66936, 99006, 66876, 66846, 67006, 68976, 100028, 68920, 99998, 68892, 68878, 66748, 69052, 66718, 69022, 73056, 102072, 116574, 73008, 102044, 72984, 102030, 72972, 72966, 68792, 99934, 73144, 68764, 73116, 68750, 73102, 66654, 68830, 73182, 81216, 106160, 118620, 81184, 106136, 118606, 81168, 106124, 81160, 106118, 81156, 81154, 72880, 101980, 81328, 72856, 101966, 81304, 106190, 81292, 72838, 81286, 68700, 72924, 68686, 81372, 72910, 81358, 114336, 122712, 126894, 114320, 122700, 114312, 122694, 114308, 114306, 81056, 106072, 118574, 97696, 81040, 106060, 97680, 114380, 106054, 97672, 81028, 97668, 81026, 97666, 72792, 101934, 81112, 72780, 97752, 81100, 72774, 97740, 81094, 97734, 68654, 72814, 81134, 97774, 114256, 122668, 114248, 122662, 114244, 114242, 80976, 106028, 97488, 80968, 106022, 97480, 114278, 97476, 80962, 97474, 72748, 81004, 72742, 97516, 80998, 97510, 114216, 122646, 114212, 114210, 80936, 106006, 97384, 80932, 97380, 80930, 97378, 72726, 80950, 97398, 114196, 114194, 80916, 97332, 80914, 97330, 66236, 66206, 67256, 99166, 67228, 67214, 66142, 67294, 69296, 100188, 69272, 100174, 69260, 69254, 67164, 69340, 67150, 69326, 73376, 102232, 116654, 73360, 102220, 73352, 102214, 73348, 73346, 69208, 100142, 73432, 102254, 73420, 69190, 73414, 67118, 69230, 73454, 106320, 118700, 106312, 118694, 106308, 106306, 73296, 102188, 81616, 106348, 102182, 81608, 73284, 81604, 73282, 81602, 69164, 73324, 69158, 81644, 73318, 81638, 122792, 126934, 122788, 122786, 106280, 118678, 114536, 106276, 114532, 106274, 114530, 73256, 102166, 81512, 73252, 98024, 81508, 73250, 98020, 81506, 98018, 69142, 73270, 81526, 98038, 122772, 122770, 106260, 114484, 106258, 114482, 73236, 81460, 73234, 97908, 81458, 97906, 122762, 106250, 114458, 73226, 81434, 97850, 66396, 66382, 67416, 99246, 67404, 67398, 66350, 67438, 69456, 100268, 69448, 100262, 69444, 69442, 67372, 69484, 67366, 69478, 102312, 116694, 102308, 102306, 69416, 100246, 73576, 102326, 73572, 69410, 73570, 67350, 69430, 73590, 118740, 118738, 102292, 106420, 102290, 106418, 69396, 73524, 69394, 81780, 73522, 81778, 118730, 102282, 106394, 69386, 73498, 81722, 66476, 66470, 67496, 99286, 67492, 67490, 66454, 67510, 100308, 100306, 67476, 69556, 67474, 69554, 116714])]); //#18506
        $_.raps = $a([$a([802, 930, 946, 818, 882, 890, 826, 954, 922, 986, 970, 906, 778, 794, 786, 914, 978, 982, 980, 916, 948, 932, 934, 942, 940, 936, 808, 812, 814, 806, 822, 950, 918, 790, 788, 820, 884, 868, 870, 878, 876, 872, 840, 856, 860, 862, 846, 844, 836, 838, 834, 866]), $a([718, 590, 622, 558, 550, 566, 534, 530, 538, 570, 562, 546, 610, 626, 634, 762, 754, 758, 630, 628, 612, 614, 582, 578, 706, 738, 742, 740, 748, 620, 556, 552, 616, 744, 712, 716, 708, 710, 646, 654, 652, 668, 664, 696, 688, 656, 720, 592, 600, 604, 732, 734])]); //#18521
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_micropdf417.$ctx[id] = $_[id]); //#18521
        bwipp_micropdf417.__18522__ = 1; //#18521
        $_ = Object.getPrototypeOf($_); //#18521
    } //#18521
    $_.cwtobits = function() {
        var _Ik = $get($_.clusters, $k[--$j]); //#18526
        $_.v = $get(_Ik, $k[--$j]); //#18526
        $k[$j++] = Infinity; //#18527
        for (var _In = 0, _Io = 17; _In < _Io; _In++) { //#18527
            $k[$j++] = 0; //#18527
        } //#18527
        var _Ir = $cvrs($s(17), $_.v, 2); //#18527
        for (var _Is = 0, _It = _Ir.length; _Is < _It; _Is++) { //#18527
            $k[$j++] = $get(_Ir, _Is) - 48; //#18527
        } //#18527
        var _Iv = $a(); //#18527
        $k[$j++] = $geti(_Iv, _Iv.length - 17, 17); //#18528
    }; //#18528
    $_.raptobits = function() {
        var _Iz = $get($_.raps, $k[--$j]); //#18533
        $_.v = $get(_Iz, $k[--$j]); //#18533
        $k[$j++] = Infinity; //#18534
        for (var _J2 = 0, _J3 = 10; _J2 < _J3; _J2++) { //#18534
            $k[$j++] = 0; //#18534
        } //#18534
        var _J6 = $cvrs($s(10), $_.v, 2); //#18534
        for (var _J7 = 0, _J8 = _J6.length; _J7 < _J8; _J7++) { //#18534
            $k[$j++] = $get(_J6, _J7) - 48; //#18534
        } //#18534
        var _JA = $a(); //#18534
        $k[$j++] = $geti(_JA, _JA.length - 10, 10); //#18535
    }; //#18535
    $_.rwid = $get($a([38, 55, 82, 99]), $f($_.c - 1)); //#18539
    if (($_.c == 3) && $_.cca) { //#18540
        $_.rwid = 72; //#18540
    } //#18540
    $_.pixs = $a(($_.rwid * $_.r) * $_.rowmult); //#18541
    for (var _JN = 0, _JM = $f($_.r - 1); _JN <= _JM; _JN += 1) { //#18583
        $_.i = _JN; //#18544
        $_.clst = ($f($f($_.i + $_.rapl) - 1)) % 3; //#18545
        $k[$j++] = Infinity; //#18546
        if ($_.c == 1) { //#18551
            $k[$j++] = ($f($f($_.i + $_.rapl) - 1)) % 52; //#18548
            $k[$j++] = 0; //#18548
            $_.raptobits(); //#18548
            $aload($k[--$j]); //#18548
            $k[$j++] = $get($_.cws, $_.i); //#18549
            $k[$j++] = $_.clst; //#18549
            $_.cwtobits(); //#18549
            $aload($k[--$j]); //#18549
            $k[$j++] = ($f($f($_.i + $_.rapr) - 1)) % 52; //#18550
            $k[$j++] = 0; //#18550
            $_.raptobits(); //#18550
            $aload($k[--$j]); //#18550
        } //#18550
        if ($_.c == 2) { //#18557
            $k[$j++] = ($f($f($_.i + $_.rapl) - 1)) % 52; //#18553
            $k[$j++] = 0; //#18553
            $_.raptobits(); //#18553
            $aload($k[--$j]); //#18553
            $k[$j++] = $get($_.cws, $_.i * 2); //#18554
            $k[$j++] = $_.clst; //#18554
            $_.cwtobits(); //#18554
            $aload($k[--$j]); //#18554
            $k[$j++] = $get($_.cws, ($_.i * 2) + 1); //#18555
            $k[$j++] = $_.clst; //#18555
            $_.cwtobits(); //#18555
            $aload($k[--$j]); //#18555
            $k[$j++] = ($f($f($_.i + $_.rapr) - 1)) % 52; //#18556
            $k[$j++] = 0; //#18556
            $_.raptobits(); //#18556
            $aload($k[--$j]); //#18556
        } //#18556
        if ($_.c == 3) { //#18567
            if (!$_.cca) { //#18561
                $k[$j++] = ($f($f($_.i + $_.rapl) - 1)) % 52; //#18560
                $k[$j++] = 0; //#18560
                $_.raptobits(); //#18560
                $aload($k[--$j]); //#18560
            } //#18560
            $k[$j++] = $get($_.cws, $_.i * 3); //#18562
            $k[$j++] = $_.clst; //#18562
            $_.cwtobits(); //#18562
            $aload($k[--$j]); //#18562
            $k[$j++] = ($f($f($_.i + $_.rapc) - 1)) % 52; //#18563
            $k[$j++] = 1; //#18563
            $_.raptobits(); //#18563
            $aload($k[--$j]); //#18563
            $k[$j++] = $get($_.cws, ($_.i * 3) + 1); //#18564
            $k[$j++] = $_.clst; //#18564
            $_.cwtobits(); //#18564
            $aload($k[--$j]); //#18564
            $k[$j++] = $get($_.cws, ($_.i * 3) + 2); //#18565
            $k[$j++] = $_.clst; //#18565
            $_.cwtobits(); //#18565
            $aload($k[--$j]); //#18565
            $k[$j++] = ($f($f($_.i + $_.rapr) - 1)) % 52; //#18566
            $k[$j++] = 0; //#18566
            $_.raptobits(); //#18566
            $aload($k[--$j]); //#18566
        } //#18566
        if ($_.c == 4) { //#18576
            $k[$j++] = ($f($f($_.i + $_.rapl) - 1)) % 52; //#18569
            $k[$j++] = 0; //#18569
            $_.raptobits(); //#18569
            $aload($k[--$j]); //#18569
            $k[$j++] = $get($_.cws, $_.i * 4); //#18570
            $k[$j++] = $_.clst; //#18570
            $_.cwtobits(); //#18570
            $aload($k[--$j]); //#18570
            $k[$j++] = $get($_.cws, ($_.i * 4) + 1); //#18571
            $k[$j++] = $_.clst; //#18571
            $_.cwtobits(); //#18571
            $aload($k[--$j]); //#18571
            $k[$j++] = ($f($f($_.i + $_.rapc) - 1)) % 52; //#18572
            $k[$j++] = 1; //#18572
            $_.raptobits(); //#18572
            $aload($k[--$j]); //#18572
            $k[$j++] = $get($_.cws, ($_.i * 4) + 2); //#18573
            $k[$j++] = $_.clst; //#18573
            $_.cwtobits(); //#18573
            $aload($k[--$j]); //#18573
            $k[$j++] = $get($_.cws, ($_.i * 4) + 3); //#18574
            $k[$j++] = $_.clst; //#18574
            $_.cwtobits(); //#18574
            $aload($k[--$j]); //#18574
            $k[$j++] = ($f($f($_.i + $_.rapr) - 1)) % 52; //#18575
            $k[$j++] = 0; //#18575
            $_.raptobits(); //#18575
            $aload($k[--$j]); //#18575
        } //#18575
        $k[$j++] = 1; //#18577
        var _Kn = $a(); //#18577
        $k[$j++] = _Kn; //#18581
        for (var _Kq = 0, _Kp = $_.rowmult - 1; _Kq <= _Kp; _Kq += 1) { //#18581
            var _Kv = $k[--$j]; //#18580
            $puti($_.pixs, (_Kq + ($_.i * $_.rowmult)) * $_.rwid, _Kv); //#18580
            $k[$j++] = _Kv; //#18580
        } //#18580
        $j--; //#18582
    } //#18582
    var _L4 = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $_.pixs],
        ["pixx", $_.rwid],
        ["pixy", $_.r * $_.rowmult],
        ["height", ($_.r * $_.rowmult) / 72],
        ["width", $_.rwid / 72],
        ["borderleft", 1],
        ["borderright", 1],
        ["bordertop", 1],
        ["borderbottom", 1],
        ["opt", $_.options]
    ]); //#18597
    $k[$j++] = _L4; //#18600
    if (!$_.dontdraw) { //#18600
        bwipp_renmatrix(); //#18600
    } //#18600
    $_ = Object.getPrototypeOf($_); //#18602
    $_ = Object.getPrototypeOf($_); //#18604
} //bwipp_micropdf417
function bwipp_datamatrix() {
    $_ = Object.create($_); //#18635
    $_.dontdraw = false; //#18638
    $_.columns = 0; //#18639
    $_.rows = 0; //#18640
    $_.format = "unset"; //#18641
    $_.version = "unset"; //#18642
    $_.parse = false; //#18643
    $_.parsefnc = false; //#18644
    $_.c40headerlength = -1; //#18645
    $_.raw = false; //#18646
    $_.dmre = false; //#18647
    $k[$j++] = $_; //#18649
    bwipp_processoptions(); //#18649
    $_.options = $k[--$j]; //#18649
    $_.barcode = $k[--$j]; //#18650
    if ($eq($_.barcode, "")) { //#18654
        $k[$j++] = 'bwipp.datamatrixEmptyData#18653'; //#18653
        $k[$j++] = "The data must not be empty"; //#18653
        bwipp_raiseerror(); //#18653
    } //#18653
    if ($ne($_.version, "unset") && (($_.rows != 0) || ($_.columns != 0))) { //#18658
        $k[$j++] = 'bwipp.datamatrixVersionRowsCols#18657'; //#18657
        $k[$j++] = "rows and columns must not be given if version is specified"; //#18657
        bwipp_raiseerror(); //#18657
    } //#18657
    if ($ne($_.version, "unset")) { //#18682
        $search($_.version, "x"); //#18662
        if ($k[--$j]) { //#18678
            var _9 = $k[--$j]; //#18663
            var _A = $k[--$j]; //#18663
            $k[$j++] = _9; //#18663
            $k[$j++] = _A; //#18663
            $j--; //#18663
            var _B = $k[--$j]; //#18664
            var _C = $k[--$j]; //#18664
            $k[$j++] = _C; //#18664
            $k[$j++] = _B; //#18664
            $k[$j++] = _C; //#18664
            $k[$j++] = _B; //#18664
            $astore($a(2)); //#18664
            $forall($k[--$j], function() { //#18673
                var _F = $k[--$j]; //#18666
                $k[$j++] = _F; //#18666
                $k[$j++] = true; //#18666
                if (_F.length == 0) { //#18666
                    $j--; //#18666
                    $k[$j++] = false; //#18666
                } //#18666
                var _G = $k[--$j]; //#18667
                var _H = $k[--$j]; //#18667
                $k[$j++] = _G; //#18669
                $forall(_H, function() { //#18669
                    var _I = $k[--$j]; //#18668
                    if ((_I < 48) || (_I > 57)) { //#18668
                        $j--; //#18668
                        $k[$j++] = false; //#18668
                    } //#18668
                }); //#18668
                if ($nt($k[--$j])) { //#18672
                    $k[$j++] = 'bwipp.datamatrixVersionBadRowOrColumn#18671'; //#18671
                    $k[$j++] = "version must be formatted as RxC"; //#18671
                    bwipp_raiseerror(); //#18671
                } //#18671
            }); //#18671
            $_.rows = $cvi($k[--$j]); //#18674
            $_.columns = $cvi($k[--$j]); //#18675
            $k[$j++] = 'format'; //#18676
            if ($_.rows == $_.columns) { //#18676
                $k[$j++] = "square"; //#18676
            } else { //#18676
                $k[$j++] = "rectangle"; //#18676
            } //#18676
            var _O = $k[--$j]; //#18676
            $_[$k[--$j]] = _O; //#18676
        } else { //#18678
            $j--; //#18678
            $k[$j++] = 'bwipp.datamatrixVersionFormat#18678'; //#18678
            $k[$j++] = "version must be formatted as RxC"; //#18678
            bwipp_raiseerror(); //#18678
        } //#18678
    } else { //#18682
        if ($eq($_.format, "unset")) { //#18683
            $k[$j++] = 'format'; //#18682
            if ($_.dmre) { //#18682
                $k[$j++] = "rectangle"; //#18682
            } else { //#18682
                $k[$j++] = "square"; //#18682
            } //#18682
            var _S = $k[--$j]; //#18682
            $_[$k[--$j]] = _S; //#18682
        } //#18682
    } //#18682
    if ($ne($_.format, "square") && $ne($_.format, "rectangle")) { //#18688
        $k[$j++] = 'bwipp.datamatrixInvalidFormat#18687'; //#18687
        $k[$j++] = "The format must be either square or rectangle"; //#18687
        bwipp_raiseerror(); //#18687
    } //#18687
    bwipp_loadctx(bwipp_datamatrix) //#18690
    if (!bwipp_datamatrix.__18747__) { //#18747
        $_ = Object.create($_); //#18747
        var _18 = $a([16, 64, 1, 4, 36, 1, 1]); //#18736
        $_.metrics = $a([$a([10, 10, 1, 1, 5, 1, 0]), $a([12, 12, 1, 1, 7, 1, 0]), $a([14, 14, 1, 1, 10, 1, 0]), $a([16, 16, 1, 1, 12, 1, 0]), $a([18, 18, 1, 1, 14, 1, 0]), $a([20, 20, 1, 1, 18, 1, 0]), $a([22, 22, 1, 1, 20, 1, 0]), $a([24, 24, 1, 1, 24, 1, 0]), $a([26, 26, 1, 1, 28, 1, 0]), $a([32, 32, 2, 2, 36, 1, 0]), $a([36, 36, 2, 2, 42, 1, 0]), $a([40, 40, 2, 2, 48, 1, 0]), $a([44, 44, 2, 2, 56, 1, 0]), $a([48, 48, 2, 2, 68, 1, 0]), $a([52, 52, 2, 2, 84, 2, 0]), $a([64, 64, 4, 4, 112, 2, 0]), $a([72, 72, 4, 4, 144, 4, 0]), $a([80, 80, 4, 4, 192, 4, 0]), $a([88, 88, 4, 4, 224, 4, 0]), $a([96, 96, 4, 4, 272, 4, 0]), $a([104, 104, 4, 4, 336, 6, 0]), $a([120, 120, 6, 6, 408, 6, 0]), $a([132, 132, 6, 6, 496, 8, 0]), $a([144, 144, 6, 6, 620, 10, 0]), $a([8, 18, 1, 1, 7, 1, 0]), $a([8, 32, 1, 2, 11, 1, 0]), $a([8, 48, 1, 2, 15, 1, 1]), $a([8, 64, 1, 4, 18, 1, 1]), $a([8, 80, 1, 4, 22, 1, 1]), $a([8, 96, 1, 4, 28, 1, 1]), $a([8, 120, 1, 6, 32, 1, 1]), $a([8, 144, 1, 6, 36, 1, 1]), $a([12, 26, 1, 1, 14, 1, 0]), $a([12, 36, 1, 2, 18, 1, 0]), $a([12, 64, 1, 4, 27, 1, 1]), $a([12, 88, 1, 4, 36, 1, 1]), $a([16, 36, 1, 2, 24, 1, 0]), $a([16, 48, 1, 2, 28, 1, 0]), _18, $a([20, 36, 1, 2, 28, 1, 1]), $a([20, 44, 1, 2, 34, 1, 1]), $a([20, 64, 1, 4, 42, 1, 1]), $a([22, 48, 1, 2, 38, 1, 1]), $a([24, 48, 1, 2, 41, 1, 1]), $a([24, 64, 1, 4, 46, 1, 1]), $a([26, 40, 1, 2, 38, 1, 1]), $a([26, 48, 1, 2, 42, 1, 1]), $a([26, 64, 1, 4, 50, 1, 1])]); //#18746
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_datamatrix.$ctx[id] = $_[id]); //#18746
        bwipp_datamatrix.__18747__ = 1; //#18746
        $_ = Object.getPrototypeOf($_); //#18746
    } //#18746
    $_.urows = $_.rows; //#18750
    $_.ucols = $_.columns; //#18751
    $_.fullcws = $a([]); //#18752
    var _1N = $_.metrics; //#18753
    for (var _1O = 0, _1P = _1N.length; _1O < _1P; _1O++) { //#18772
        $_.m = $get(_1N, _1O); //#18754
        $_.rows = $get($_.m, 0); //#18755
        $_.cols = $get($_.m, 1); //#18756
        $_.regh = $get($_.m, 2); //#18757
        $_.regv = $get($_.m, 3); //#18758
        $_.rscw = $get($_.m, 4); //#18759
        $_.rsbl = $get($_.m, 5); //#18760
        $_.doly = $get($_.m, 6); //#18761
        $_.mrows = $f($_.rows - (2 * $_.regh)); //#18762
        $_.mcols = $f($_.cols - (2 * $_.regv)); //#18763
        $_.ncws = $f((~~(($_.mrows * $_.mcols) / 8)) - $_.rscw); //#18764
        $_.okay = true; //#18765
        if (($_.urows != 0) && ($_.urows != $_.rows)) { //#18766
            $_.okay = false; //#18766
        } //#18766
        if (($_.ucols != 0) && ($_.ucols != $_.cols)) { //#18767
            $_.okay = false; //#18767
        } //#18767
        if ($eq($_.format, "square") && $ne($_.rows, $_.cols)) { //#18768
            $_.okay = false; //#18768
        } //#18768
        if ($eq($_.format, "rectangle") && $eq($_.rows, $_.cols)) { //#18769
            $_.okay = false; //#18769
        } //#18769
        if ((!$_.dmre) && ($_.doly == 1)) { //#18770
            $_.okay = false; //#18770
        } //#18770
        if ($_.okay) { //#18771
            $k[$j++] = Infinity; //#18771
            $aload($_.fullcws); //#18771
            $k[$j++] = $_.ncws; //#18771
            $_.fullcws = $a(); //#18771
        } //#18771
    } //#18771
    $k[$j++] = Infinity; //#18773
    for (var _24 = 0, _25 = 1558; _24 < _25; _24++) { //#18773
        $k[$j++] = 10000; //#18773
    } //#18773
    $_.numremcws = $a(); //#18773
    var _27 = $_.fullcws; //#18774
    for (var _28 = 0, _29 = _27.length; _28 < _29; _28++) { //#18774
        $put($_.numremcws, $f($get(_27, _28) - 1), 1); //#18774
    } //#18774
    for (var _2C = 1556; _2C >= 0; _2C -= 1) { //#18780
        $_.i = _2C; //#18776
        if ($get($_.numremcws, $_.i) != 1) { //#18779
            $put($_.numremcws, $_.i, $f($get($_.numremcws, $_.i + 1) + 1)); //#18778
        } //#18778
    } //#18778
    if (!bwipp_datamatrix.__18893__) { //#18893
        $_ = Object.create($_); //#18893
        $_.fnc1 = -1; //#18784
        $_.prog = -2; //#18784
        $_.m05 = -3; //#18784
        $_.m06 = -4; //#18784
        $_.lC = -5; //#18785
        $_.lB = -6; //#18785
        $_.lX = -7; //#18785
        $_.lT = -8; //#18785
        $_.lE = -9; //#18785
        $_.unl = -10; //#18785
        $_.sapp = -11; //#18786
        $_.usft = -12; //#18786
        $_.sft1 = -13; //#18786
        $_.sft2 = -14; //#18786
        $_.sft3 = -15; //#18786
        $_.eci = -16; //#18786
        $_.pad = -17; //#18786
        $_.unlcw = 254; //#18787
        $k[$j++] = Infinity; //#18789
        for (var _2L = 0; _2L <= 128; _2L += 1) { //#18790
            $k[$j++] = _2L; //#18790
            $k[$j++] = _2L + 1; //#18790
        } //#18790
        $k[$j++] = $_.pad; //#18795
        $k[$j++] = 129; //#18795
        for (var _2N = 0; _2N <= 99; _2N += 1) { //#18795
            var _2P = $cvrs($s(2), _2N, 10); //#18793
            var _2R = $strcpy($s(2), "00"); //#18793
            $puti(_2R, 2 - _2P.length, _2P); //#18793
            $k[$j++] = _2R; //#18794
            $k[$j++] = _2N + 130; //#18794
        } //#18794
        var _2e = $a([$_.lC, $_.lB, $_.fnc1, $_.sapp, $_.prog, $_.usft, $_.m05, $_.m06, $_.lX, $_.lT, $_.lE, $_.eci]); //#18796
        $k[$j++] = 229; //#18796
        for (var _2f = 0, _2g = _2e.length; _2f < _2g; _2f++) { //#18796
            var _2j = $f($k[--$j] + 1); //#18796
            $k[$j++] = $get(_2e, _2f); //#18796
            $k[$j++] = _2j; //#18796
            $k[$j++] = _2j; //#18796
        } //#18796
        $j--; //#18796
        $_.Avals = $d(); //#18797
        $k[$j++] = Infinity; //#18798
        var _2l = $_.Avals; //#18799
        for (var _2q = _2l.size, _2p = _2l.keys(), _2o = 0; _2o < _2q; _2o++) { //#18799
            var _2m = _2p.next().value; //#18799
            $k[$j++] = _2m; //#18799
            $k[$j++] = _2l.get(_2m); //#18799
            $k[$j++] = Infinity; //#18799
            var _2r = $k[--$j]; //#18799
            var _2s = $k[--$j]; //#18799
            $k[$j++] = _2r; //#18799
            $k[$j++] = _2s; //#18799
            var _2t = $a(); //#18799
            $k[$j++] = _2t; //#18799
        } //#18799
        $_.Avals = $d(); //#18800
        $k[$j++] = Infinity; //#18802
        $k[$j++] = $_.sft1; //#18807
        $k[$j++] = 0; //#18807
        $k[$j++] = $_.sft2; //#18807
        $k[$j++] = 1; //#18807
        $k[$j++] = $_.sft3; //#18807
        $k[$j++] = 2; //#18807
        $k[$j++] = 32; //#18807
        $k[$j++] = 3; //#18807
        for (var _2y = 48; _2y <= 57; _2y += 1) { //#18807
            $k[$j++] = _2y; //#18807
            $k[$j++] = _2y - 44; //#18807
        } //#18807
        for (var _2z = 65; _2z <= 90; _2z += 1) { //#18808
            $k[$j++] = _2z; //#18808
            $k[$j++] = _2z - 51; //#18808
        } //#18808
        $_.CNvals = $d(); //#18809
        $k[$j++] = Infinity; //#18810
        for (var _31 = 0; _31 <= 31; _31 += 1) { //#18810
            $k[$j++] = _31; //#18810
            $k[$j++] = _31; //#18810
        } //#18810
        $_.C1vals = $d(); //#18810
        $k[$j++] = Infinity; //#18811
        for (var _33 = 33; _33 <= 47; _33 += 1) { //#18812
            $k[$j++] = _33; //#18812
            $k[$j++] = _33 - 33; //#18812
        } //#18812
        for (var _34 = 58; _34 <= 64; _34 += 1) { //#18813
            $k[$j++] = _34; //#18813
            $k[$j++] = _34 - 43; //#18813
        } //#18813
        for (var _35 = 91; _35 <= 95; _35 += 1) { //#18814
            $k[$j++] = _35; //#18814
            $k[$j++] = _35 - 69; //#18814
        } //#18814
        $k[$j++] = $_.fnc1; //#18816
        $k[$j++] = 27; //#18816
        $k[$j++] = $_.usft; //#18816
        $k[$j++] = 30; //#18816
        $_.C2vals = $d(); //#18817
        $k[$j++] = Infinity; //#18818
        for (var _39 = 96; _39 <= 127; _39 += 1) { //#18818
            $k[$j++] = _39; //#18818
            $k[$j++] = _39 - 96; //#18818
        } //#18818
        $_.C3vals = $d(); //#18818
        $k[$j++] = Infinity; //#18819
        var _3B = $_.CNvals; //#18820
        for (var _3G = _3B.size, _3F = _3B.keys(), _3E = 0; _3E < _3G; _3E++) { //#18820
            var _3C = _3F.next().value; //#18820
            $k[$j++] = _3C; //#18820
            $k[$j++] = _3B.get(_3C); //#18820
            $k[$j++] = Infinity; //#18820
            var _3H = $k[--$j]; //#18820
            var _3I = $k[--$j]; //#18820
            $k[$j++] = _3H; //#18820
            $k[$j++] = _3I; //#18820
            var _3J = $a(); //#18820
            $k[$j++] = _3J; //#18820
        } //#18820
        var _3K = $_.C1vals; //#18821
        for (var _3P = _3K.size, _3O = _3K.keys(), _3N = 0; _3N < _3P; _3N++) { //#18821
            var _3L = _3O.next().value; //#18821
            $k[$j++] = _3L; //#18821
            $k[$j++] = _3K.get(_3L); //#18821
            $k[$j++] = Infinity; //#18821
            var _3Q = $k[--$j]; //#18821
            var _3R = $k[--$j]; //#18821
            $k[$j++] = _3Q; //#18821
            $k[$j++] = $get($_.CNvals, $_.sft1); //#18821
            $k[$j++] = _3R; //#18821
            var _3V = $a(); //#18821
            $k[$j++] = _3V; //#18821
        } //#18821
        var _3W = $_.C2vals; //#18822
        for (var _3b = _3W.size, _3a = _3W.keys(), _3Z = 0; _3Z < _3b; _3Z++) { //#18822
            var _3X = _3a.next().value; //#18822
            $k[$j++] = _3X; //#18822
            $k[$j++] = _3W.get(_3X); //#18822
            $k[$j++] = Infinity; //#18822
            var _3c = $k[--$j]; //#18822
            var _3d = $k[--$j]; //#18822
            $k[$j++] = _3c; //#18822
            $k[$j++] = $get($_.CNvals, $_.sft2); //#18822
            $k[$j++] = _3d; //#18822
            var _3h = $a(); //#18822
            $k[$j++] = _3h; //#18822
        } //#18822
        var _3i = $_.C3vals; //#18823
        for (var _3n = _3i.size, _3m = _3i.keys(), _3l = 0; _3l < _3n; _3l++) { //#18823
            var _3j = _3m.next().value; //#18823
            $k[$j++] = _3j; //#18823
            $k[$j++] = _3i.get(_3j); //#18823
            $k[$j++] = Infinity; //#18823
            var _3o = $k[--$j]; //#18823
            var _3p = $k[--$j]; //#18823
            $k[$j++] = _3o; //#18823
            $k[$j++] = $get($_.CNvals, $_.sft3); //#18823
            $k[$j++] = _3p; //#18823
            var _3t = $a(); //#18823
            $k[$j++] = _3t; //#18823
        } //#18823
        $_.Cvals = $d(); //#18824
        $k[$j++] = Infinity; //#18826
        $k[$j++] = $_.sft1; //#18831
        $k[$j++] = 0; //#18831
        $k[$j++] = $_.sft2; //#18831
        $k[$j++] = 1; //#18831
        $k[$j++] = $_.sft3; //#18831
        $k[$j++] = 2; //#18831
        $k[$j++] = 32; //#18831
        $k[$j++] = 3; //#18831
        for (var _3y = 48; _3y <= 57; _3y += 1) { //#18831
            $k[$j++] = _3y; //#18831
            $k[$j++] = _3y - 44; //#18831
        } //#18831
        for (var _3z = 97; _3z <= 122; _3z += 1) { //#18832
            $k[$j++] = _3z; //#18832
            $k[$j++] = _3z - 83; //#18832
        } //#18832
        $_.TNvals = $d(); //#18833
        $k[$j++] = Infinity; //#18834
        for (var _41 = 0; _41 <= 31; _41 += 1) { //#18834
            $k[$j++] = _41; //#18834
            $k[$j++] = _41; //#18834
        } //#18834
        $_.T1vals = $d(); //#18834
        $k[$j++] = Infinity; //#18835
        for (var _43 = 33; _43 <= 47; _43 += 1) { //#18836
            $k[$j++] = _43; //#18836
            $k[$j++] = _43 - 33; //#18836
        } //#18836
        for (var _44 = 58; _44 <= 64; _44 += 1) { //#18837
            $k[$j++] = _44; //#18837
            $k[$j++] = _44 - 43; //#18837
        } //#18837
        for (var _45 = 91; _45 <= 95; _45 += 1) { //#18838
            $k[$j++] = _45; //#18838
            $k[$j++] = _45 - 69; //#18838
        } //#18838
        $k[$j++] = $_.fnc1; //#18840
        $k[$j++] = 27; //#18840
        $k[$j++] = $_.usft; //#18840
        $k[$j++] = 30; //#18840
        $_.T2vals = $d(); //#18841
        $k[$j++] = Infinity; //#18842
        $k[$j++] = 96; //#18844
        $k[$j++] = 0; //#18844
        for (var _49 = 65; _49 <= 90; _49 += 1) { //#18844
            $k[$j++] = _49; //#18844
            $k[$j++] = _49 - 64; //#18844
        } //#18844
        for (var _4A = 123; _4A <= 127; _4A += 1) { //#18845
            $k[$j++] = _4A; //#18845
            $k[$j++] = _4A - 96; //#18845
        } //#18845
        $_.T3vals = $d(); //#18846
        $k[$j++] = Infinity; //#18847
        var _4C = $_.TNvals; //#18848
        for (var _4H = _4C.size, _4G = _4C.keys(), _4F = 0; _4F < _4H; _4F++) { //#18848
            var _4D = _4G.next().value; //#18848
            $k[$j++] = _4D; //#18848
            $k[$j++] = _4C.get(_4D); //#18848
            $k[$j++] = Infinity; //#18848
            var _4I = $k[--$j]; //#18848
            var _4J = $k[--$j]; //#18848
            $k[$j++] = _4I; //#18848
            $k[$j++] = _4J; //#18848
            var _4K = $a(); //#18848
            $k[$j++] = _4K; //#18848
        } //#18848
        var _4L = $_.T1vals; //#18849
        for (var _4Q = _4L.size, _4P = _4L.keys(), _4O = 0; _4O < _4Q; _4O++) { //#18849
            var _4M = _4P.next().value; //#18849
            $k[$j++] = _4M; //#18849
            $k[$j++] = _4L.get(_4M); //#18849
            $k[$j++] = Infinity; //#18849
            var _4R = $k[--$j]; //#18849
            var _4S = $k[--$j]; //#18849
            $k[$j++] = _4R; //#18849
            $k[$j++] = $get($_.TNvals, $_.sft1); //#18849
            $k[$j++] = _4S; //#18849
            var _4W = $a(); //#18849
            $k[$j++] = _4W; //#18849
        } //#18849
        var _4X = $_.T2vals; //#18850
        for (var _4c = _4X.size, _4b = _4X.keys(), _4a = 0; _4a < _4c; _4a++) { //#18850
            var _4Y = _4b.next().value; //#18850
            $k[$j++] = _4Y; //#18850
            $k[$j++] = _4X.get(_4Y); //#18850
            $k[$j++] = Infinity; //#18850
            var _4d = $k[--$j]; //#18850
            var _4e = $k[--$j]; //#18850
            $k[$j++] = _4d; //#18850
            $k[$j++] = $get($_.TNvals, $_.sft2); //#18850
            $k[$j++] = _4e; //#18850
            var _4i = $a(); //#18850
            $k[$j++] = _4i; //#18850
        } //#18850
        var _4j = $_.T3vals; //#18851
        for (var _4o = _4j.size, _4n = _4j.keys(), _4m = 0; _4m < _4o; _4m++) { //#18851
            var _4k = _4n.next().value; //#18851
            $k[$j++] = _4k; //#18851
            $k[$j++] = _4j.get(_4k); //#18851
            $k[$j++] = Infinity; //#18851
            var _4p = $k[--$j]; //#18851
            var _4q = $k[--$j]; //#18851
            $k[$j++] = _4p; //#18851
            $k[$j++] = $get($_.TNvals, $_.sft3); //#18851
            $k[$j++] = _4q; //#18851
            var _4u = $a(); //#18851
            $k[$j++] = _4u; //#18851
        } //#18851
        $_.Tvals = $d(); //#18852
        for (var _4w = 128; _4w <= 255; _4w += 1) { //#18860
            $_.i = _4w; //#18856
            $k[$j++] = $_.Avals; //#18857
            $k[$j++] = $_.i; //#18857
            $k[$j++] = Infinity; //#18857
            $aload($get($_.Avals, $_.usft)); //#18857
            $aload($get($_.Avals, $_.i - 128)); //#18857
            var _55 = $a(); //#18857
            var _56 = $k[--$j]; //#18857
            $put($k[--$j], _56, _55); //#18857
            $k[$j++] = $_.Cvals; //#18858
            $k[$j++] = $_.i; //#18858
            $k[$j++] = Infinity; //#18858
            $aload($get($_.Cvals, $_.usft)); //#18858
            $aload($get($_.Cvals, $_.i - 128)); //#18858
            var _5G = $a(); //#18858
            var _5H = $k[--$j]; //#18858
            $put($k[--$j], _5H, _5G); //#18858
            $k[$j++] = $_.Tvals; //#18859
            $k[$j++] = $_.i; //#18859
            $k[$j++] = Infinity; //#18859
            $aload($get($_.Tvals, $_.usft)); //#18859
            $aload($get($_.Tvals, $_.i - 128)); //#18859
            var _5R = $a(); //#18859
            var _5S = $k[--$j]; //#18859
            $put($k[--$j], _5S, _5R); //#18859
        } //#18859
        $k[$j++] = Infinity; //#18862
        $k[$j++] = 13; //#18867
        $k[$j++] = 0; //#18867
        $k[$j++] = 42; //#18867
        $k[$j++] = 1; //#18867
        $k[$j++] = 62; //#18867
        $k[$j++] = 2; //#18867
        $k[$j++] = 32; //#18867
        $k[$j++] = 3; //#18867
        for (var _5U = 48; _5U <= 57; _5U += 1) { //#18867
            $k[$j++] = _5U; //#18867
            $k[$j++] = _5U - 44; //#18867
        } //#18867
        for (var _5V = 65; _5V <= 90; _5V += 1) { //#18868
            $k[$j++] = _5V; //#18868
            $k[$j++] = _5V - 51; //#18868
        } //#18868
        $_.Xvals = $d(); //#18869
        $k[$j++] = Infinity; //#18870
        var _5X = $_.Xvals; //#18871
        for (var _5c = _5X.size, _5b = _5X.keys(), _5a = 0; _5a < _5c; _5a++) { //#18871
            var _5Y = _5b.next().value; //#18871
            $k[$j++] = _5Y; //#18871
            $k[$j++] = _5X.get(_5Y); //#18871
            $k[$j++] = Infinity; //#18871
            var _5d = $k[--$j]; //#18871
            var _5e = $k[--$j]; //#18871
            $k[$j++] = _5d; //#18871
            $k[$j++] = _5e; //#18871
            var _5f = $a(); //#18871
            $k[$j++] = _5f; //#18871
        } //#18871
        $_.Xvals = $d(); //#18872
        $k[$j++] = Infinity; //#18874
        for (var _5h = 64; _5h <= 94; _5h += 1) { //#18875
            $k[$j++] = _5h; //#18875
            $k[$j++] = _5h - 64; //#18875
        } //#18875
        $k[$j++] = $_.unl; //#18877
        $k[$j++] = 31; //#18877
        for (var _5j = 32; _5j <= 63; _5j += 1) { //#18877
            $k[$j++] = _5j; //#18877
            $k[$j++] = _5j; //#18877
        } //#18877
        $_.Evals = $d(); //#18878
        $k[$j++] = Infinity; //#18879
        var _5l = $_.Evals; //#18880
        for (var _5q = _5l.size, _5p = _5l.keys(), _5o = 0; _5o < _5q; _5o++) { //#18880
            var _5m = _5p.next().value; //#18880
            $k[$j++] = _5m; //#18880
            $k[$j++] = _5l.get(_5m); //#18880
            $k[$j++] = Infinity; //#18880
            var _5r = $k[--$j]; //#18880
            var _5s = $k[--$j]; //#18880
            $k[$j++] = _5r; //#18880
            $k[$j++] = _5s; //#18880
            var _5t = $a(); //#18880
            $k[$j++] = _5t; //#18880
        } //#18880
        $_.Evals = $d(); //#18881
        $k[$j++] = Infinity; //#18883
        for (var _5v = 0; _5v <= 255; _5v += 1) { //#18884
            $k[$j++] = _5v; //#18884
            $k[$j++] = _5v; //#18884
        } //#18884
        $_.Bvals = $d(); //#18885
        $k[$j++] = Infinity; //#18886
        var _5x = $_.Bvals; //#18887
        for (var _62 = _5x.size, _61 = _5x.keys(), _60 = 0; _60 < _62; _60++) { //#18887
            var _5y = _61.next().value; //#18887
            $k[$j++] = _5y; //#18887
            $k[$j++] = _5x.get(_5y); //#18887
            $k[$j++] = Infinity; //#18887
            var _63 = $k[--$j]; //#18887
            var _64 = $k[--$j]; //#18887
            $k[$j++] = _63; //#18887
            $k[$j++] = _64; //#18887
            var _65 = $a(); //#18887
            $k[$j++] = _65; //#18887
        } //#18887
        $_.Bvals = $d(); //#18888
        $_.encvals = $a([$_.Avals, $_.Cvals, $_.Tvals, $_.Xvals, $_.Evals, $_.Bvals]); //#18890
        $_.A = 0; //#18892
        $_.C = 1; //#18892
        $_.T = 2; //#18892
        $_.X = 3; //#18892
        $_.E = 4; //#18892
        $_.B = 5; //#18892
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_datamatrix.$ctx[id] = $_[id]); //#18892
        bwipp_datamatrix.__18893__ = 1; //#18892
        $_ = Object.getPrototypeOf($_); //#18892
    } //#18892
    if ($_.raw) { //#19297
        $_.cws = $a($_.barcode.length); //#18897
        $_.i = 0; //#18898
        $_.j = 0; //#18898
        for (;;) { //#18905
            if ($_.i == $_.barcode.length) { //#18900
                break; //#18900
            } //#18900
            $_.cw = $cvi($geti($_.barcode, $_.i + 1, 3)); //#18901
            $put($_.cws, $_.j, $_.cw); //#18902
            $_.i = $_.i + 4; //#18903
            $_.j = $_.j + 1; //#18904
        } //#18904
        $_.cws = $geti($_.cws, 0, $_.j); //#18906
    } else { //#19297
        var _6Z = new Map([
            ["parse", $_.parse],
            ["parsefnc", $_.parsefnc],
            ["eci", true],
            ["FNC1", $_.fnc1],
            ["PROG", $_.prog]
        ]); //#18916
        $_.fncvals = _6Z; //#18919
        $k[$j++] = 'msg'; //#18920
        $k[$j++] = $_.barcode; //#18920
        $k[$j++] = $_.fncvals; //#18920
        bwipp_parseinput(); //#18920
        var _6c = $k[--$j]; //#18920
        $_[$k[--$j]] = _6c; //#18920
        $_.msglen = $_.msg.length; //#18921
        if ($_.msglen >= 9) { //#18939
            $aload($geti($_.msg, 0, 7)); //#18925
            var _6i = $k[--$j]; //#18926
            var _6j = $k[--$j]; //#18926
            $k[$j++] = _6i == 29; //#18926
            $k[$j++] = _6j; //#18926
            $j--; //#18926
            var _6k = $k[--$j]; //#18926
            var _6l = $k[--$j]; //#18926
            var _6m = $k[--$j]; //#18926
            var _6n = $k[--$j]; //#18927
            var _6o = $k[--$j]; //#18927
            var _6p = $k[--$j]; //#18927
            if (((((_6k && (_6l == 48)) && (_6m == 30)) && (_6n == 62)) && (_6o == 41)) && (_6p == 91)) { //#18938
                $aload($geti($_.msg, $_.msglen - 2, 2)); //#18928
                var _6t = $k[--$j]; //#18929
                var _6u = $k[--$j]; //#18929
                if ((_6t == 4) && (_6u == 30)) { //#18937
                    if ($get($_.msg, 5) == 53) { //#18934
                        $k[$j++] = Infinity; //#18931
                        $k[$j++] = $_.m05; //#18931
                        $aload($geti($_.msg, 7, $_.msg.length - 9)); //#18931
                        $_.msg = $a(); //#18931
                    } else { //#18934
                        if ($get($_.msg, 5) == 54) { //#18935
                            $k[$j++] = Infinity; //#18934
                            $k[$j++] = $_.m06; //#18934
                            $aload($geti($_.msg, 7, $_.msg.length - 9)); //#18934
                            $_.msg = $a(); //#18934
                        } //#18934
                    } //#18934
                } //#18934
            } //#18934
        } //#18934
        $_.msglen = $_.msg.length; //#18940
        $k[$j++] = Infinity; //#18942
        for (var _7B = 0, _7C = $_.msglen; _7B < _7C; _7B++) { //#18942
            $k[$j++] = 0; //#18942
        } //#18942
        $k[$j++] = 0; //#18942
        $_.numD = $a(); //#18942
        $k[$j++] = Infinity; //#18943
        for (var _7F = 0, _7G = $_.msglen; _7F < _7G; _7F++) { //#18943
            $k[$j++] = 0; //#18943
        } //#18943
        $k[$j++] = 9999; //#18943
        $_.nextXterm = $a(); //#18943
        $k[$j++] = Infinity; //#18944
        for (var _7J = 0, _7K = $_.msglen; _7J < _7K; _7J++) { //#18944
            $k[$j++] = 0; //#18944
        } //#18944
        $k[$j++] = 9999; //#18944
        $_.nextNonX = $a(); //#18944
        $k[$j++] = Infinity; //#18945
        for (var _7N = 0, _7O = $_.msglen; _7N < _7O; _7N++) { //#18945
            $k[$j++] = false; //#18945
        } //#18945
        $k[$j++] = false; //#18945
        $_.isECI = $a(); //#18945
        for (var _7R = $_.msglen - 1; _7R >= 0; _7R -= 1) { //#18963
            $_.i = _7R; //#18947
            $_.barchar = $get($_.msg, $_.i); //#18948
            if (($_.barchar >= 48) && ($_.barchar <= 57)) { //#18951
                $put($_.numD, $_.i, $f($get($_.numD, $_.i + 1) + 1)); //#18950
            } //#18950
            if ((($_.barchar == 13) || ($_.barchar == 42)) || ($_.barchar == 62)) { //#18955
                $put($_.nextXterm, $_.i, 0); //#18953
            } else { //#18955
                $put($_.nextXterm, $_.i, $f($get($_.nextXterm, $_.i + 1) + 1)); //#18955
            } //#18955
            var _7o = $get($_.Xvals, $_.barchar) !== undefined; //#18957
            if (!_7o) { //#18960
                $put($_.nextNonX, $_.i, 0); //#18958
            } else { //#18960
                $put($_.nextNonX, $_.i, $f($get($_.nextNonX, $_.i + 1) + 1)); //#18960
            } //#18960
            $put($_.isECI, $_.i, $_.barchar <= -1000000); //#18962
        } //#18962
        $k[$j++] = Infinity; //#18964
        var _7z = $_.nextXterm; //#18964
        for (var _80 = 0, _81 = _7z.length; _80 < _81; _80++) { //#18964
            var _82 = $get(_7z, _80); //#18964
            $k[$j++] = _82; //#18964
            if (_82 > 10000) { //#18964
                $j--; //#18964
                $k[$j++] = 10000; //#18964
            } //#18964
        } //#18964
        $_.nextXterm = $a(); //#18964
        $k[$j++] = Infinity; //#18965
        var _84 = $_.nextNonX; //#18965
        for (var _85 = 0, _86 = _84.length; _85 < _86; _85++) { //#18965
            var _87 = $get(_84, _85); //#18965
            $k[$j++] = _87; //#18965
            if (_87 > 10000) { //#18965
                $j--; //#18965
                $k[$j++] = 10000; //#18965
            } //#18965
        } //#18965
        $_.nextNonX = $a(); //#18965
        $_.isD = function() {
            $k[$j++] = ($_.char >= 48) && ($_.char <= 57); //#18967
        }; //#18967
        $_.isC = function() {
            var _8D = $get($_.CNvals, $_.char) !== undefined; //#18968
            $k[$j++] = _8D; //#18968
        }; //#18968
        $_.isT = function() {
            var _8G = $get($_.TNvals, $_.char) !== undefined; //#18969
            $k[$j++] = _8G; //#18969
        }; //#18969
        $_.isX = function() {
            var _8J = $get($_.Xvals, $_.char) !== undefined; //#18970
            $k[$j++] = _8J; //#18970
        }; //#18970
        $_.isE = function() {
            var _8M = $get($_.Evals, $_.char) !== undefined; //#18971
            $k[$j++] = _8M; //#18971
        }; //#18971
        $_.isEA = function() {
            $k[$j++] = $_.char > 127; //#18972
        }; //#18972
        $_.isFN = function() {
            $k[$j++] = $_.char < 0; //#18973
        }; //#18973
        $_.XtermFirst = function() {
            var _8P = $k[--$j]; //#18974
            $k[$j++] = $lt($get($_.nextXterm, _8P), $get($_.nextNonX, _8P)); //#18974
        }; //#18974
        $_.lookup = function() {
            $_.ac = 1; //#18978
            $_.cc = 2; //#18978
            $_.tc = 2; //#18978
            $_.xc = 2; //#18978
            $_.ec = 2; //#18978
            $_.bc = 2.25; //#18978
            if ($_.mode == $_.A) { //#18979
                $_.ac = 0; //#18979
                $_.cc = 1; //#18979
                $_.tc = 1; //#18979
                $_.xc = 1; //#18979
                $_.ec = 1; //#18979
                $_.bc = 1.25; //#18979
            } //#18979
            if ($_.mode == $_.C) { //#18980
                $_.cc = 0; //#18980
            } //#18980
            if ($_.mode == $_.T) { //#18981
                $_.tc = 0; //#18981
            } //#18981
            if ($_.mode == $_.X) { //#18982
                $_.xc = 0; //#18982
            } //#18982
            if ($_.mode == $_.E) { //#18983
                $_.ec = 0; //#18983
            } //#18983
            if ($_.mode == $_.B) { //#18984
                $_.bc = 0; //#18984
            } //#18984
            for (var _8g = 0, _8h = 1; _8g < _8h; _8g++) { //#19019
                if ($get($_.isECI, $_.i)) { //#18986
                    $k[$j++] = $_.A; //#18986
                    break; //#18986
                } //#18986
                if (($_.c40headerlength != -1) && ($_.i < $_.c40headerlength)) { //#18987
                    $k[$j++] = $_.C; //#18987
                    break; //#18987
                } //#18987
                $_.k = 0; //#18988
                for (;;) { //#19018
                    if (($_.i + $_.k) == $_.msglen) { //#18997
                        var _8t = $a(['ac', 'cc', 'tc', 'xc', 'ec', 'bc']); //#18990
                        for (var _8u = 0, _8v = _8t.length; _8u < _8v; _8u++) { //#18990
                            var _8w = $get(_8t, _8u); //#18990
                            $_[_8w] = Math.ceil($_[_8w]); //#18990
                        } //#18990
                        var _93 = $a([$_.cc, $_.tc, $_.xc, $_.ec, $_.bc]); //#18991
                        $k[$j++] = true; //#18991
                        for (var _94 = 0, _95 = _93.length; _94 < _95; _94++) { //#18991
                            var _98 = $k[--$j]; //#18991
                            $k[$j++] = _98 && ($_.ac <= $get(_93, _94)); //#18991
                        } //#18991
                        if ($k[--$j]) { //#18991
                            $k[$j++] = $_.A; //#18991
                            break; //#18991
                        } //#18991
                        var _9G = $a([$_.ac, $_.cc, $_.tc, $_.xc, $_.ec]); //#18992
                        $k[$j++] = true; //#18992
                        for (var _9H = 0, _9I = _9G.length; _9H < _9I; _9H++) { //#18992
                            var _9L = $k[--$j]; //#18992
                            $k[$j++] = _9L && ($_.bc < $get(_9G, _9H)); //#18992
                        } //#18992
                        if ($k[--$j]) { //#18992
                            $k[$j++] = $_.B; //#18992
                            break; //#18992
                        } //#18992
                        var _9T = $a([$_.ac, $_.cc, $_.tc, $_.xc, $_.bc]); //#18993
                        $k[$j++] = true; //#18993
                        for (var _9U = 0, _9V = _9T.length; _9U < _9V; _9U++) { //#18993
                            var _9Y = $k[--$j]; //#18993
                            $k[$j++] = _9Y && ($_.ec < $get(_9T, _9U)); //#18993
                        } //#18993
                        if ($k[--$j]) { //#18993
                            $k[$j++] = $_.E; //#18993
                            break; //#18993
                        } //#18993
                        var _9g = $a([$_.ac, $_.cc, $_.xc, $_.ec, $_.bc]); //#18994
                        $k[$j++] = true; //#18994
                        for (var _9h = 0, _9i = _9g.length; _9h < _9i; _9h++) { //#18994
                            var _9l = $k[--$j]; //#18994
                            $k[$j++] = _9l && ($_.tc < $get(_9g, _9h)); //#18994
                        } //#18994
                        if ($k[--$j]) { //#18994
                            $k[$j++] = $_.T; //#18994
                            break; //#18994
                        } //#18994
                        var _9t = $a([$_.ac, $_.cc, $_.tc, $_.ec, $_.bc]); //#18995
                        $k[$j++] = true; //#18995
                        for (var _9u = 0, _9v = _9t.length; _9u < _9v; _9u++) { //#18995
                            var _9y = $k[--$j]; //#18995
                            $k[$j++] = _9y && ($_.xc < $get(_9t, _9u)); //#18995
                        } //#18995
                        if ($k[--$j]) { //#18995
                            $k[$j++] = $_.X; //#18995
                            break; //#18995
                        } //#18995
                        $k[$j++] = $_.C; //#18996
                        break; //#18996
                    } //#18996
                    $_.char = $get($_.msg, $_.i + $_.k); //#18998
                    $k[$j++] = 'ac'; //#18999
                    $k[$j++] = $_.ac; //#18999
                    $_.isD(); //#18999
                    if ($k[--$j]) { //#18999
                        var _A8 = $k[--$j]; //#18999
                        $k[$j++] = $f(_A8 + (1 / 2)); //#18999
                    } else { //#18999
                        $_.isEA(); //#18999
                        if ($k[--$j]) { //#18999
                            var _AA = $k[--$j]; //#18999
                            $k[$j++] = Math.ceil(_AA) + 2; //#18999
                        } else { //#18999
                            var _AB = $k[--$j]; //#18999
                            $k[$j++] = Math.ceil(_AB) + 1; //#18999
                        } //#18999
                    } //#18999
                    var _AC = $k[--$j]; //#18999
                    $_[$k[--$j]] = _AC; //#18999
                    $k[$j++] = 'cc'; //#19000
                    $k[$j++] = $_.cc; //#19000
                    $_.isC(); //#19000
                    if ($k[--$j]) { //#19000
                        var _AG = $k[--$j]; //#19000
                        $k[$j++] = $f(_AG + 0.6666667); //#19000
                    } else { //#19000
                        $_.isEA(); //#19000
                        if ($k[--$j]) { //#19000
                            var _AI = $k[--$j]; //#19000
                            $k[$j++] = $f(_AI + 2.6666667); //#19000
                        } else { //#19000
                            var _AJ = $k[--$j]; //#19000
                            $k[$j++] = $f(_AJ + 1.3333334); //#19000
                        } //#19000
                    } //#19000
                    var _AK = $k[--$j]; //#19000
                    $_[$k[--$j]] = _AK; //#19000
                    $k[$j++] = 'tc'; //#19001
                    $k[$j++] = $_.tc; //#19001
                    $_.isT(); //#19001
                    if ($k[--$j]) { //#19001
                        var _AO = $k[--$j]; //#19001
                        $k[$j++] = $f(_AO + 0.6666667); //#19001
                    } else { //#19001
                        $_.isEA(); //#19001
                        if ($k[--$j]) { //#19001
                            var _AQ = $k[--$j]; //#19001
                            $k[$j++] = $f(_AQ + 2.6666667); //#19001
                        } else { //#19001
                            var _AR = $k[--$j]; //#19001
                            $k[$j++] = $f(_AR + 1.3333334); //#19001
                        } //#19001
                    } //#19001
                    var _AS = $k[--$j]; //#19001
                    $_[$k[--$j]] = _AS; //#19001
                    $k[$j++] = 'xc'; //#19002
                    $k[$j++] = $_.xc; //#19002
                    $_.isX(); //#19002
                    if ($k[--$j]) { //#19002
                        var _AW = $k[--$j]; //#19002
                        $k[$j++] = $f(_AW + 0.6666667); //#19002
                    } else { //#19002
                        $_.isEA(); //#19002
                        if ($k[--$j]) { //#19002
                            var _AY = $k[--$j]; //#19002
                            $k[$j++] = $f(_AY + 4.3333334); //#19002
                        } else { //#19002
                            var _AZ = $k[--$j]; //#19002
                            $k[$j++] = $f(_AZ + 3.3333334); //#19002
                        } //#19002
                    } //#19002
                    var _Aa = $k[--$j]; //#19002
                    $_[$k[--$j]] = _Aa; //#19002
                    $k[$j++] = 'ec'; //#19003
                    $k[$j++] = $_.ec; //#19003
                    $_.isE(); //#19003
                    if ($k[--$j]) { //#19003
                        var _Ae = $k[--$j]; //#19003
                        $k[$j++] = $f(_Ae + (3 / 4)); //#19003
                    } else { //#19003
                        $_.isEA(); //#19003
                        if ($k[--$j]) { //#19003
                            var _Ag = $k[--$j]; //#19003
                            $k[$j++] = $f(_Ag + (17 / 4)); //#19003
                        } else { //#19003
                            var _Ah = $k[--$j]; //#19003
                            $k[$j++] = $f(_Ah + (13 / 4)); //#19003
                        } //#19003
                    } //#19003
                    var _Ai = $k[--$j]; //#19003
                    $_[$k[--$j]] = _Ai; //#19003
                    $k[$j++] = 'bc'; //#19004
                    $k[$j++] = $_.bc; //#19004
                    $_.isFN(); //#19004
                    if ($k[--$j]) { //#19004
                        var _Am = $k[--$j]; //#19004
                        $k[$j++] = $f(_Am + 4); //#19004
                    } else { //#19004
                        var _An = $k[--$j]; //#19004
                        $k[$j++] = $f(_An + 1); //#19004
                    } //#19004
                    var _Ao = $k[--$j]; //#19004
                    $_[$k[--$j]] = _Ao; //#19004
                    if ($_.k >= 4) { //#19016
                        var _Aw = $a([$_.cc, $_.tc, $_.xc, $_.ec, $_.bc]); //#19006
                        $k[$j++] = true; //#19006
                        for (var _Ax = 0, _Ay = _Aw.length; _Ax < _Ay; _Ax++) { //#19006
                            var _B1 = $k[--$j]; //#19006
                            $k[$j++] = _B1 && (($_.ac + 1) <= $get(_Aw, _Ax)); //#19006
                        } //#19006
                        if ($k[--$j]) { //#19006
                            $k[$j++] = $_.A; //#19006
                            break; //#19006
                        } //#19006
                        if (($_.bc + 1) <= $_.ac) { //#19007
                            $k[$j++] = $_.B; //#19007
                            break; //#19007
                        } //#19007
                        var _BB = $a([$_.cc, $_.tc, $_.xc, $_.ec]); //#19008
                        $k[$j++] = true; //#19008
                        for (var _BC = 0, _BD = _BB.length; _BC < _BD; _BC++) { //#19008
                            var _BG = $k[--$j]; //#19008
                            $k[$j++] = _BG && (($_.bc + 1) < $get(_BB, _BC)); //#19008
                        } //#19008
                        if ($k[--$j]) { //#19008
                            $k[$j++] = $_.B; //#19008
                            break; //#19008
                        } //#19008
                        var _BO = $a([$_.ac, $_.cc, $_.tc, $_.xc, $_.bc]); //#19009
                        $k[$j++] = true; //#19009
                        for (var _BP = 0, _BQ = _BO.length; _BP < _BQ; _BP++) { //#19009
                            var _BT = $k[--$j]; //#19009
                            $k[$j++] = _BT && (($_.ec + 1) < $get(_BO, _BP)); //#19009
                        } //#19009
                        if ($k[--$j]) { //#19009
                            $k[$j++] = $_.E; //#19009
                            break; //#19009
                        } //#19009
                        var _Bb = $a([$_.ac, $_.cc, $_.xc, $_.ec, $_.bc]); //#19010
                        $k[$j++] = true; //#19010
                        for (var _Bc = 0, _Bd = _Bb.length; _Bc < _Bd; _Bc++) { //#19010
                            var _Bg = $k[--$j]; //#19010
                            $k[$j++] = _Bg && (($_.tc + 1) < $get(_Bb, _Bc)); //#19010
                        } //#19010
                        if ($k[--$j]) { //#19010
                            $k[$j++] = $_.T; //#19010
                            break; //#19010
                        } //#19010
                        var _Bo = $a([$_.ac, $_.cc, $_.tc, $_.ec, $_.bc]); //#19011
                        $k[$j++] = true; //#19011
                        for (var _Bp = 0, _Bq = _Bo.length; _Bp < _Bq; _Bp++) { //#19011
                            var _Bt = $k[--$j]; //#19011
                            $k[$j++] = _Bt && (($_.xc + 1) < $get(_Bo, _Bp)); //#19011
                        } //#19011
                        if ($k[--$j]) { //#19011
                            $k[$j++] = $_.X; //#19011
                            break; //#19011
                        } //#19011
                        var _C0 = $a([$_.ac, $_.tc, $_.ec, $_.bc]); //#19012
                        $k[$j++] = true; //#19012
                        for (var _C1 = 0, _C2 = _C0.length; _C1 < _C2; _C1++) { //#19012
                            var _C5 = $k[--$j]; //#19012
                            $k[$j++] = _C5 && (($_.cc + 1) < $get(_C0, _C1)); //#19012
                        } //#19012
                        if ($k[--$j]) { //#19015
                            if ($_.cc < $_.xc) { //#19013
                                $k[$j++] = $_.C; //#19013
                                break; //#19013
                            } //#19013
                            if ($_.cc == $_.xc) { //#19014
                                $k[$j++] = ($_.i + $_.k) + 1; //#19014
                                $_.XtermFirst(); //#19014
                                if ($k[--$j]) { //#19014
                                    $k[$j++] = $_.X; //#19014
                                    break; //#19014
                                } else { //#19014
                                    $k[$j++] = $_.C; //#19014
                                    break; //#19014
                                } //#19014
                            } //#19014
                        } //#19014
                    } //#19014
                    $_.k = $_.k + 1; //#19017
                } //#19017
            } //#19017
        }; //#19017
        $_.addtocws = function() {
            var _CI = $k[--$j]; //#19023
            $puti($_.cws, $_.j, _CI); //#19023
            $_.j = _CI.length + $_.j; //#19024
        }; //#19024
        $_.ECItocws = function() {
            var _CN = $f((-$k[--$j]) - 1000000); //#19029
            $k[$j++] = _CN; //#19043
            if (_CN <= 126) { //#19042
                var _CO = $k[--$j]; //#19030
                $k[$j++] = $f(_CO + 1); //#19031
                $astore($a(1)); //#19031
            } else { //#19042
                var _CQ = $k[--$j]; //#19032
                $k[$j++] = _CQ; //#19043
                if (_CQ <= 16382) { //#19042
                    var _CS = $f($k[--$j] - 127); //#19034
                    $k[$j++] = (~~(_CS / 254)) + 128; //#19036
                    $k[$j++] = $f((_CS % 254) + 1); //#19036
                    $astore($a(2)); //#19036
                } else { //#19042
                    var _CV = $f($k[--$j] - 16383); //#19039
                    $k[$j++] = (~~(_CV / 64516)) + 192; //#19042
                    $k[$j++] = ((~~(_CV / 254)) % 254) + 1; //#19042
                    $k[$j++] = $f((_CV % 254) + 1); //#19042
                    $astore($a(3)); //#19042
                } //#19042
            } //#19042
        }; //#19042
        $_.encA = function() {
            for (var _CX = 0, _CY = 1; _CX < _CY; _CX++) { //#19068
                if ($get($_.isECI, $_.i)) { //#19053
                    $k[$j++] = $get($_.Avals, $_.eci); //#19049
                    $_.addtocws(); //#19049
                    $k[$j++] = $get($_.msg, $_.i); //#19050
                    $_.ECItocws(); //#19050
                    $_.addtocws(); //#19050
                    $_.i = $_.i + 1; //#19051
                    break; //#19052
                } //#19052
                if ($get($_.numD, $_.i) >= 2) { //#19058
                    var _Cm = $s(2); //#19055
                    $put(_Cm, 0, $get($_.msg, $_.i)); //#19055
                    $put(_Cm, 1, $get($_.msg, $_.i + 1)); //#19055
                    $k[$j++] = $get($_.Avals, _Cm); //#19055
                    $_.addtocws(); //#19055
                    $_.i = $_.i + 2; //#19056
                    break; //#19057
                } //#19057
                $k[$j++] = 'newmode'; //#19059
                $_.lookup(); //#19059
                var _Cw = $k[--$j]; //#19059
                $_[$k[--$j]] = _Cw; //#19059
                if ($_.newmode != $_.mode) { //#19064
                    $k[$j++] = $get($_.Avals, $get($a([-1, $_.lC, $_.lT, $_.lX, $_.lE, $_.lB]), $_.newmode)); //#19061
                    $_.addtocws(); //#19061
                    $_.mode = $_.newmode; //#19062
                    break; //#19063
                } //#19063
                $k[$j++] = $get($_.Avals, $get($_.msg, $_.i)); //#19065
                $_.addtocws(); //#19065
                $_.i = $_.i + 1; //#19066
                break; //#19067
            } //#19067
        }; //#19067
        $_.CTXvalstocws = function() {
            $_.in = $k[--$j]; //#19072
            $k[$j++] = Infinity; //#19073
            for (var _DK = 0, _DJ = $_.in.length - 1; _DK <= _DJ; _DK += 3) { //#19077
                var _DM = $geti($_.in, _DK, 3); //#19075
                $k[$j++] = 0; //#19075
                for (var _DN = 0, _DO = _DM.length; _DN < _DO; _DN++) { //#19075
                    var _DQ = $k[--$j]; //#19075
                    $k[$j++] = $f(_DQ + $get(_DM, _DN)) * 40; //#19075
                } //#19075
                var _DS = (~~($k[--$j] / 40)) + 1; //#19076
                $k[$j++] = ~~(_DS / 256); //#19076
                $k[$j++] = _DS % 256; //#19076
            } //#19076
            $astore($a($counttomark())); //#19078
            var _DV = $k[--$j]; //#19078
            var _DW = $k[--$j]; //#19078
            $k[$j++] = _DV; //#19078
            $k[$j++] = _DW; //#19078
            $j--; //#19078
        }; //#19078
        $_.encCTX = function() {
            $_.p = 0; //#19082
            $_.ctxvals = $a(2500); //#19083
            $_.done = false; //#19084
            for (;;) { //#19163
                if ($_.i == $_.msglen) { //#19088
                    break; //#19088
                } //#19088
                var _Dg = $get($get($_.encvals, $_.mode), $get($_.msg, $_.i)) !== undefined; //#19089
                if (!_Dg) { //#19089
                    break; //#19089
                } //#19089
                if (($_.p % 3) == 0) { //#19158
                    if ($_.p > 0) { //#19103
                        $k[$j++] = 'newmode'; //#19092
                        $_.lookup(); //#19092
                        var _Dj = $k[--$j]; //#19092
                        $_[$k[--$j]] = _Dj; //#19092
                        if ($ne($_.newmode, $_.mode)) { //#19102
                            $k[$j++] = $geti($_.ctxvals, 0, $_.p); //#19094
                            $_.CTXvalstocws(); //#19094
                            $_.addtocws(); //#19094
                            $k[$j++] = $a([$_.unlcw]); //#19095
                            $_.addtocws(); //#19095
                            if ($_.newmode != $_.A) { //#19098
                                $k[$j++] = $get($_.Avals, $get($a([-1, $_.lC, $_.lT, $_.lX, $_.lE, $_.lB]), $_.newmode)); //#19097
                                $_.addtocws(); //#19097
                            } //#19097
                            $_.mode = $_.newmode; //#19099
                            $_.done = true; //#19100
                            break; //#19101
                        } //#19101
                    } //#19101
                    if (($_.msglen - $_.i) <= 3) { //#19157
                        $_.remcws = $get($_.numremcws, $_.j + ((~~($_.p / 3)) * 2)); //#19105
                        $k[$j++] = Infinity; //#19106
                        var _EF = $geti($_.msg, $_.i, $_.msglen - $_.i); //#19107
                        for (var _EG = 0, _EH = _EF.length; _EG < _EH; _EG++) { //#19113
                            var _EI = $get(_EF, _EG); //#19113
                            var _EM = $get($get($_.encvals, $_.mode), _EI) !== undefined; //#19108
                            $k[$j++] = _EI; //#19112
                            if (_EM) { //#19111
                                $aload($get($get($_.encvals, $_.mode), $k[--$j])); //#19109
                            } else { //#19111
                                $j--; //#19111
                                $k[$j++] = -1; //#19111
                                $k[$j++] = -1; //#19111
                                $k[$j++] = -1; //#19111
                                $k[$j++] = -1; //#19111
                            } //#19111
                        } //#19111
                        $_.remvals = $a(); //#19111
                        if (($_.remcws == 2) && ($_.remvals.length == 3)) { //#19125
                            $k[$j++] = Infinity; //#19117
                            $aload($geti($_.ctxvals, 0, $_.p)); //#19118
                            $aload($_.remvals); //#19119
                            var _EZ = $a(); //#19119
                            $k[$j++] = _EZ; //#19120
                            $_.CTXvalstocws(); //#19120
                            $_.addtocws(); //#19120
                            $_.mode = $_.A; //#19121
                            $_.i = $_.msglen; //#19122
                            $_.done = true; //#19123
                            break; //#19124
                        } //#19124
                        if ((($_.remcws == 2) && ($_.remvals.length == 2)) && ($_.mode != $_.X)) { //#19137
                            $k[$j++] = Infinity; //#19128
                            $aload($geti($_.ctxvals, 0, $_.p)); //#19129
                            $aload($_.remvals); //#19130
                            $aload($get($get($_.encvals, $_.mode), $_.sft1)); //#19131
                            var _Ep = $a(); //#19131
                            $k[$j++] = _Ep; //#19132
                            $_.CTXvalstocws(); //#19132
                            $_.addtocws(); //#19132
                            $_.mode = $_.A; //#19133
                            $_.i = $_.msglen; //#19134
                            $_.done = true; //#19135
                            break; //#19136
                        } //#19136
                        if (($_.remcws == 2) && ($_.remvals.length == 1)) { //#19147
                            $k[$j++] = $geti($_.ctxvals, 0, $_.p); //#19140
                            $_.CTXvalstocws(); //#19140
                            $_.addtocws(); //#19140
                            $k[$j++] = $a([$_.unlcw]); //#19141
                            $_.addtocws(); //#19141
                            $k[$j++] = $get($_.Avals, $get($_.msg, $_.i)); //#19142
                            $_.addtocws(); //#19142
                            $_.mode = $_.A; //#19143
                            $_.i = $_.msglen; //#19144
                            $_.done = true; //#19145
                            break; //#19146
                        } //#19146
                        if (($_.remcws == 1) && ($_.remvals.length == 1)) { //#19156
                            $k[$j++] = $geti($_.ctxvals, 0, $_.p); //#19150
                            $_.CTXvalstocws(); //#19150
                            $_.addtocws(); //#19150
                            $k[$j++] = $get($_.Avals, $get($_.msg, $_.i)); //#19151
                            $_.addtocws(); //#19151
                            $_.mode = $_.A; //#19152
                            $_.i = $_.msglen; //#19153
                            $_.done = true; //#19154
                            break; //#19155
                        } //#19155
                    } //#19155
                } //#19155
                var _FO = $get($get($_.encvals, $_.mode), $get($_.msg, $_.i)); //#19159
                $puti($_.ctxvals, $_.p, _FO); //#19160
                $_.p = _FO.length + $_.p; //#19161
                $_.i = $_.i + 1; //#19162
            } //#19162
            if (!$_.done) { //#19187
                for (;;) { //#19171
                    if (($_.p % 3) == 0) { //#19168
                        break; //#19168
                    } //#19168
                    $_.i = $_.i - 1; //#19169
                    $_.p = $_.p - $get($get($_.encvals, $_.mode), $get($_.msg, $_.i)).length; //#19170
                } //#19170
                $k[$j++] = Infinity; //#19172
                $aload($geti($_.ctxvals, 0, $_.p)); //#19173
                var _Fh = $a(); //#19173
                $k[$j++] = _Fh; //#19174
                $_.CTXvalstocws(); //#19174
                $_.addtocws(); //#19174
                $k[$j++] = $a([$_.unlcw]); //#19175
                $_.addtocws(); //#19175
                $_.mode = $_.A; //#19176
                if (($_.i != $_.msglen) && $nt($get($_.isECI, $_.i))) { //#19186
                    if ($get($_.numD, $_.i) >= 2) { //#19184
                        var _Ft = $s(2); //#19180
                        $put(_Ft, 0, $get($_.msg, $_.i)); //#19180
                        $put(_Ft, 1, $get($_.msg, $_.i + 1)); //#19180
                        $k[$j++] = $get($_.Avals, _Ft); //#19180
                        $_.addtocws(); //#19180
                        $_.i = $_.i + 2; //#19181
                    } else { //#19184
                        $k[$j++] = $get($_.Avals, $get($_.msg, $_.i)); //#19183
                        $_.addtocws(); //#19183
                        $_.i = $_.i + 1; //#19184
                    } //#19184
                } //#19184
            } //#19184
        }; //#19184
        $_.Evalstocws = function() {
            $_.in = $k[--$j]; //#19192
            $_.inlen = $_.in.length; //#19193
            $_.outlen = ~~(Math.ceil(($_.in.length / 4) * 3)); //#19194
            $k[$j++] = Infinity; //#19195
            $aload($_.in); //#19195
            $k[$j++] = 0; //#19195
            $k[$j++] = 0; //#19195
            $k[$j++] = 0; //#19195
            $_.in = $a(); //#19195
            $k[$j++] = Infinity; //#19196
            for (var _GG = 0, _GF = $_.inlen - 1; _GG <= _GF; _GG += 4) { //#19202
                var _GI = $geti($_.in, _GG, 4); //#19198
                $k[$j++] = 0; //#19198
                for (var _GJ = 0, _GK = _GI.length; _GJ < _GK; _GJ++) { //#19198
                    var _GM = $k[--$j]; //#19198
                    $k[$j++] = $or(_GM, $get(_GI, _GJ)) << 6; //#19198
                } //#19198
                var _GO = $k[--$j] >>> 6; //#19199
                $k[$j++] = (_GO >>> 16) & 255; //#19201
                $k[$j++] = (_GO >>> 8) & 255; //#19201
                $k[$j++] = _GO & 255; //#19201
            } //#19201
            $astore($a($counttomark())); //#19203
            var _GR = $k[--$j]; //#19203
            var _GS = $k[--$j]; //#19203
            $k[$j++] = _GR; //#19203
            $k[$j++] = _GS; //#19203
            $j--; //#19203
            var _GV = $geti($k[--$j], 0, $_.outlen); //#19204
            $k[$j++] = _GV; //#19204
        }; //#19204
        $_.encE = function() {
            $_.p = 0; //#19208
            $_.edifactvals = $a(2100); //#19209
            for (;;) { //#19238
                if ($_.i == $_.msglen) { //#19213
                    break; //#19213
                } //#19213
                var _Gd = $get($_.Evals, $get($_.msg, $_.i)) !== undefined; //#19214
                if (!_Gd) { //#19214
                    break; //#19214
                } //#19214
                if (($_.p % 4) == 0) { //#19233
                    if (($_.msglen - $_.i) <= 2) { //#19231
                        $_.remcws = $get($_.numremcws, $_.j + ((~~($_.p / 4)) * 3)); //#19217
                        $k[$j++] = Infinity; //#19218
                        var _Gp = $geti($_.msg, $_.i, $_.msglen - $_.i); //#19219
                        for (var _Gq = 0, _Gr = _Gp.length; _Gq < _Gr; _Gq++) { //#19221
                            $aload($get($_.Avals, $get(_Gp, _Gq))); //#19220
                        } //#19220
                        $_.remvals = $a(); //#19220
                        if ((($_.remcws == 1) || ($_.remcws == 2)) && ($_.remvals.length <= $_.remcws)) { //#19230
                            $k[$j++] = $geti($_.edifactvals, 0, $_.p); //#19225
                            $_.Evalstocws(); //#19225
                            $_.addtocws(); //#19225
                            $k[$j++] = $_.remvals; //#19226
                            $_.addtocws(); //#19226
                            $_.mode = $_.A; //#19227
                            $_.i = $_.msglen; //#19228
                            break; //#19229
                        } //#19229
                    } //#19229
                    $_.lookup(); //#19232
                    if ($k[--$j] != $_.mode) { //#19232
                        break; //#19232
                    } //#19232
                } //#19232
                var _HC = $get($_.Evals, $get($_.msg, $_.i)); //#19234
                $puti($_.edifactvals, $_.p, _HC); //#19235
                $_.p = _HC.length + $_.p; //#19236
                $_.i = $_.i + 1; //#19237
            } //#19237
            if ($_.mode != $_.A) { //#19260
                $_.remcws = $f($get($_.numremcws, ($_.j + ((~~($_.p / 4)) * 3)) - 1) - 1); //#19242
                if (((($_.p % 4) != 0) || ($_.i != $_.msglen)) || ($_.remcws >= 3)) { //#19247
                    var _HT = $get($_.Evals, $_.unl); //#19244
                    $puti($_.edifactvals, $_.p, _HT); //#19245
                    $_.p = _HT.length + $_.p; //#19246
                } //#19246
                $k[$j++] = $geti($_.edifactvals, 0, $_.p); //#19248
                $_.Evalstocws(); //#19248
                $_.addtocws(); //#19248
                $_.mode = $_.A; //#19249
                if (($_.i != $_.msglen) && $nt($get($_.isECI, $_.i))) { //#19259
                    if ($get($_.numD, $_.i) >= 2) { //#19257
                        var _Hj = $s(2); //#19253
                        $put(_Hj, 0, $get($_.msg, $_.i)); //#19253
                        $put(_Hj, 1, $get($_.msg, $_.i + 1)); //#19253
                        $k[$j++] = $get($_.Avals, _Hj); //#19253
                        $_.addtocws(); //#19253
                        $_.i = $_.i + 2; //#19254
                    } else { //#19257
                        $k[$j++] = $get($_.Avals, $get($_.msg, $_.i)); //#19256
                        $_.addtocws(); //#19256
                        $_.i = $_.i + 1; //#19257
                    } //#19257
                } //#19257
            } //#19257
        }; //#19257
        $_.encB = function() {
            $_.p = 0; //#19265
            $_.bvals = $a(1558); //#19265
            for (;;) { //#19271
                if ($_.i == $_.msglen) { //#19266
                    break; //#19266
                } //#19266
                $_.lookup(); //#19267
                if ($k[--$j] != $_.mode) { //#19267
                    break; //#19267
                } //#19267
                $put($_.bvals, $_.p, $get($_.msg, $_.i)); //#19268
                $_.p = $_.p + 1; //#19269
                $_.i = $_.i + 1; //#19270
            } //#19270
            $_.remcws = $f($get($_.numremcws, $_.j + $_.p) - 1); //#19272
            $k[$j++] = Infinity; //#19273
            if (($_.remcws == 0) && ($_.i == $_.msglen)) { //#19277
                $k[$j++] = 0; //#19275
            } else { //#19277
                if ($_.p < 250) { //#19277
                    $k[$j++] = $_.p; //#19277
                } else { //#19277
                    $k[$j++] = (~~($_.p / 250)) + 249; //#19277
                    $k[$j++] = $_.p % 250; //#19277
                } //#19277
            } //#19277
            $aload($geti($_.bvals, 0, $_.p)); //#19279
            $_.bvals = $a(); //#19279
            for (var _IS = 0, _IR = $_.bvals.length - 1; _IS <= _IR; _IS += 1) { //#19286
                $_.p = _IS; //#19282
                var _IY = $f(((((($_.j + $_.p) + 1) * 149) % 255) + 1) + $get($_.bvals, $_.p)); //#19284
                $k[$j++] = _IY; //#19284
                if (_IY >= 256) { //#19284
                    var _IZ = $k[--$j]; //#19284
                    $k[$j++] = $f(_IZ - 256); //#19284
                } //#19284
                $put($_.bvals, $_.p, $k[--$j]); //#19285
            } //#19285
            $k[$j++] = $_.bvals; //#19287
            $_.addtocws(); //#19287
            $_.mode = $_.A; //#19288
        }; //#19288
        $_.cws = $a(1558); //#19292
        $_.mode = $_.A; //#19293
        $_.i = 0; //#19293
        $_.j = 0; //#19293
        for (;;) { //#19296
            if ($_.i >= $_.msglen) { //#19294
                break; //#19294
            } //#19294
            if ($_[$get($a(['encA', 'encCTX', 'encCTX', 'encCTX', 'encE', 'encB']), $_.mode)]() === true) {
                break;
            } //#19295
        } //#19295
        $_.cws = $geti($_.cws, 0, $_.j); //#19297
    } //#19297
    $_.datlen = $_.cws.length; //#19302
    $_.remcws = $f($get($_.numremcws, $_.j - 1) - 1); //#19303
    if ($_.remcws > 0) { //#19312
        $k[$j++] = Infinity; //#19305
        $aload($_.cws); //#19305
        for (var _Ix = 0, _Iy = $_.remcws; _Ix < _Iy; _Ix++) { //#19305
            $k[$j++] = 129; //#19305
        } //#19305
        $_.cws = $a(); //#19305
        for (var _J4 = $_.datlen + 1, _J3 = $f($f($_.datlen + $_.remcws) - 1); _J4 <= _J3; _J4 += 1) { //#19311
            $_.i = _J4; //#19307
            var _J6 = (((($_.i + 1) * 149) % 253) + 1) + 129; //#19309
            $k[$j++] = _J6; //#19309
            if (_J6 > 254) { //#19309
                var _J7 = $k[--$j]; //#19309
                $k[$j++] = $f(_J7 - 254); //#19309
            } //#19309
            $put($_.cws, $_.i, $k[--$j]); //#19310
        } //#19310
    } //#19310
    var _JC = $get($_.options, 'debugcws') !== undefined; //#19314
    if (_JC) { //#19314
        $k[$j++] = 'bwipp.debugcws#19314'; //#19314
        $k[$j++] = $_.cws; //#19314
        bwipp_raiseerror(); //#19314
    } //#19314
    var _JE = $_.metrics; //#19317
    for (var _JF = 0, _JG = _JE.length; _JF < _JG; _JF++) { //#19339
        $_.m = $get(_JE, _JF); //#19318
        $_.rows = $get($_.m, 0); //#19319
        $_.cols = $get($_.m, 1); //#19320
        $_.regh = $get($_.m, 2); //#19321
        $_.regv = $get($_.m, 3); //#19322
        $_.rscw = $get($_.m, 4); //#19323
        $_.rsbl = $get($_.m, 5); //#19324
        $_.doly = $get($_.m, 6); //#19325
        $_.mrows = $f($_.rows - (2 * $_.regh)); //#19326
        $_.mcols = $f($_.cols - (2 * $_.regv)); //#19327
        $_.rrows = ~~($_.mrows / $_.regh); //#19328
        $_.rcols = ~~($_.mcols / $_.regv); //#19329
        $_.ncws = $f((~~(($_.mrows * $_.mcols) / 8)) - $_.rscw); //#19330
        $_.okay = true; //#19331
        if ($_.cws.length != $_.ncws) { //#19332
            $_.okay = false; //#19332
        } //#19332
        if (($_.urows != 0) && ($_.urows != $_.rows)) { //#19333
            $_.okay = false; //#19333
        } //#19333
        if (($_.ucols != 0) && ($_.ucols != $_.cols)) { //#19334
            $_.okay = false; //#19334
        } //#19334
        if ($eq($_.format, "square") && $ne($_.rows, $_.cols)) { //#19335
            $_.okay = false; //#19335
        } //#19335
        if ($eq($_.format, "rectangle") && $eq($_.rows, $_.cols)) { //#19336
            $_.okay = false; //#19336
        } //#19336
        if ((!$_.dmre) && ($_.doly == 1)) { //#19337
            $_.okay = false; //#19337
        } //#19337
        if ($_.okay) { //#19338
            break; //#19338
        } //#19338
    } //#19338
    if (!$_.okay) { //#19343
        $k[$j++] = 'bwipp.datamatrixNoValidSymbol#19342'; //#19342
        $k[$j++] = "Maximum length exceeded or invalid size"; //#19342
        bwipp_raiseerror(); //#19342
    } //#19342
    $_.cwbs = $a($_.rsbl); //#19346
    $_.ecbs = $a($_.rsbl); //#19347
    for (var _K5 = 0, _K4 = $f($_.rsbl - 1); _K5 <= _K4; _K5 += 1) { //#19362
        $_.i = _K5; //#19349
        if ($_.cws.length != 1558) { //#19353
            $_.cwbsize = ~~($_.cws.length / $_.rsbl); //#19351
        } else { //#19353
            if ($_.i <= 7) { //#19353
                $_.cwbsize = 156; //#19353
            } else { //#19353
                $_.cwbsize = 155; //#19353
            } //#19353
        } //#19353
        $_.cwb = $a($_.cwbsize); //#19355
        for (var _KE = 0, _KD = $_.cwbsize - 1; _KE <= _KD; _KE += 1) { //#19359
            $_.j = _KE; //#19357
            $put($_.cwb, $_.j, $get($_.cws, $f(($_.j * $_.rsbl) + $_.i))); //#19358
        } //#19358
        $put($_.cwbs, $_.i, $_.cwb); //#19360
        $k[$j++] = $_.ecbs; //#19361
        $k[$j++] = $_.i; //#19361
        $k[$j++] = Infinity; //#19361
        for (var _KT = 0, _KU = ~~($_.rscw / $_.rsbl); _KT < _KU; _KT++) { //#19361
            $k[$j++] = 0; //#19361
        } //#19361
        var _KV = $a(); //#19361
        var _KW = $k[--$j]; //#19361
        $put($k[--$j], _KW, _KV); //#19361
    } //#19361
    if (!bwipp_datamatrix.__19369__) { //#19369
        $_ = Object.create($_); //#19369
        $k[$j++] = Infinity; //#19366
        $k[$j++] = 1; //#19366
        for (var _KY = 0, _KZ = 255; _KY < _KZ; _KY++) { //#19366
            var _Ka = $k[--$j]; //#19366
            var _Kb = _Ka * 2; //#19366
            $k[$j++] = _Ka; //#19366
            $k[$j++] = _Kb; //#19366
            if (_Kb >= 256) { //#19366
                var _Kc = $k[--$j]; //#19366
                $k[$j++] = _Kc ^ 301; //#19366
            } //#19366
        } //#19366
        $_.rsalog = $a(); //#19366
        $_.rslog = $a(256); //#19367
        for (var _Kf = 1; _Kf <= 255; _Kf += 1) { //#19368
            $put($_.rslog, $get($_.rsalog, _Kf), _Kf); //#19368
        } //#19368
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_datamatrix.$ctx[id] = $_[id]); //#19368
        bwipp_datamatrix.__19369__ = 1; //#19368
        $_ = Object.getPrototypeOf($_); //#19368
    } //#19368
    $_.rsprod = function() {
        var _Kk = $k[--$j]; //#19373
        var _Kl = $k[--$j]; //#19373
        $k[$j++] = _Kl; //#19377
        $k[$j++] = _Kk; //#19377
        if ((_Kk != 0) && (_Kl != 0)) { //#19376
            var _Ko = $get($_.rslog, $k[--$j]); //#19374
            var _Kt = $get($_.rsalog, $f(_Ko + $get($_.rslog, $k[--$j])) % 255); //#19374
            $k[$j++] = _Kt; //#19374
        } else { //#19376
            $j -= 2; //#19376
            $k[$j++] = 0; //#19376
        } //#19376
    }; //#19376
    $k[$j++] = Infinity; //#19381
    $k[$j++] = 1; //#19381
    for (var _Kw = 0, _Kx = ~~($_.rscw / $_.rsbl); _Kw < _Kx; _Kw++) { //#19381
        $k[$j++] = 0; //#19381
    } //#19381
    $_.coeffs = $a(); //#19381
    for (var _L2 = 1, _L1 = ~~($_.rscw / $_.rsbl); _L2 <= _L1; _L2 += 1) { //#19390
        $_.i = _L2; //#19383
        $put($_.coeffs, $_.i, $get($_.coeffs, $_.i - 1)); //#19384
        for (var _L9 = $_.i - 1; _L9 >= 1; _L9 -= 1) { //#19388
            $_.j = _L9; //#19386
            $k[$j++] = $_.coeffs; //#19387
            $k[$j++] = $_.j; //#19387
            $k[$j++] = $get($_.coeffs, $_.j - 1); //#19387
            $k[$j++] = $get($_.coeffs, $_.j); //#19387
            $k[$j++] = $get($_.rsalog, $_.i); //#19387
            $_.rsprod(); //#19387
            var _LL = $k[--$j]; //#19387
            var _LM = $k[--$j]; //#19387
            var _LN = $k[--$j]; //#19387
            $put($k[--$j], _LN, $xo(_LM, _LL)); //#19387
        } //#19387
        $k[$j++] = $_.coeffs; //#19389
        $k[$j++] = 0; //#19389
        $k[$j++] = $get($_.coeffs, 0); //#19389
        $k[$j++] = $get($_.rsalog, $_.i); //#19389
        $_.rsprod(); //#19389
        var _LV = $k[--$j]; //#19389
        var _LW = $k[--$j]; //#19389
        $put($k[--$j], _LW, _LV); //#19389
    } //#19389
    $_.coeffs = $geti($_.coeffs, 0, $_.coeffs.length - 1); //#19391
    for (var _Ld = 0, _Lc = $_.cwbs.length - 1; _Ld <= _Lc; _Ld += 1) { //#19407
        $_.i = _Ld; //#19395
        $_.cwb = $get($_.cwbs, $_.i); //#19396
        $_.ecb = $get($_.ecbs, $_.i); //#19397
        for (var _Lm = 0, _Ll = $_.cwb.length - 1; _Lm <= _Ll; _Lm += 1) { //#19406
            $_.t = $xo($get($_.cwb, _Lm), $get($_.ecb, 0)); //#19399
            for (var _Ls = $_.ecb.length - 1; _Ls >= 0; _Ls -= 1) { //#19405
                $_.j = _Ls; //#19401
                $_.p = ($_.ecb.length - $_.j) - 1; //#19402
                $k[$j++] = $_.ecb; //#19403
                $k[$j++] = $_.p; //#19403
                $k[$j++] = $_.t; //#19403
                $k[$j++] = $get($_.coeffs, $_.j); //#19403
                $_.rsprod(); //#19403
                var _M1 = $k[--$j]; //#19403
                var _M2 = $k[--$j]; //#19403
                $put($k[--$j], _M2, _M1); //#19403
                if ($_.j > 0) { //#19404
                    $put($_.ecb, $_.p, $xo($get($_.ecb, $_.p + 1), $get($_.ecb, $_.p))); //#19404
                } //#19404
            } //#19404
        } //#19404
    } //#19404
    if ($_.ncws == 1558) { //#19412
        $k[$j++] = Infinity; //#19411
        var _MF = $geti($_.ecbs, 8, 2); //#19411
        for (var _MG = 0, _MH = _MF.length; _MG < _MH; _MG++) { //#19411
            $k[$j++] = $get(_MF, _MG); //#19411
        } //#19411
        var _MK = $geti($_.ecbs, 0, 8); //#19411
        for (var _ML = 0, _MM = _MK.length; _ML < _MM; _ML++) { //#19411
            $k[$j++] = $get(_MK, _ML); //#19411
        } //#19411
        $_.ecbs = $a(); //#19411
    } //#19411
    $k[$j++] = Infinity; //#19415
    var _MP = $_.cws; //#19415
    for (var _MQ = 0, _MR = _MP.length; _MQ < _MR; _MQ++) { //#19415
        $k[$j++] = $get(_MP, _MQ); //#19415
    } //#19415
    for (var _MU = 0, _MV = $_.rscw; _MU < _MV; _MU++) { //#19415
        $k[$j++] = 0; //#19415
    } //#19415
    $_.cws = $a(); //#19415
    for (var _MZ = 0, _MY = $f($_.rscw - 1); _MZ <= _MY; _MZ += 1) { //#19419
        $_.i = _MZ; //#19417
        $put($_.cws, $f($_.ncws + $_.i), $get($get($_.ecbs, $_.i % $_.rsbl), ~~($_.i / $_.rsbl))); //#19418
    } //#19418
    $_.module = function() {
        var _Mk = $k[--$j]; //#19424
        var _Ml = $k[--$j]; //#19424
        var _Mm = $k[--$j]; //#19424
        var _Mp = $strcpy($s(8), "00000000"); //#19425
        var _Mr = $cvrs($s(8), $k[--$j], 2); //#19425
        $puti(_Mp, 8 - _Mr.length, _Mr); //#19426
        $k[$j++] = _Mm; //#19427
        $k[$j++] = _Ml; //#19427
        $k[$j++] = _Mk; //#19427
        $k[$j++] = _Mp; //#19427
        for (var _Ms = 7; _Ms >= 0; _Ms -= 1) { //#19427
            var _Mt = $k[--$j]; //#19427
            $k[$j++] = $f($get(_Mt, _Ms) - 48); //#19427
            $k[$j++] = _Mt; //#19427
        } //#19427
        $j--; //#19427
        var _Mv = $k[--$j]; //#19428
        var _Mw = $k[--$j]; //#19428
        var _Mx = $k[--$j]; //#19428
        var _My = $k[--$j]; //#19428
        var _Mz = $k[--$j]; //#19428
        var _N0 = $k[--$j]; //#19428
        var _N1 = $k[--$j]; //#19428
        var _N2 = $k[--$j]; //#19428
        var _N3 = $k[--$j]; //#19428
        var _N4 = $k[--$j]; //#19428
        var _N5 = $k[--$j]; //#19428
        $k[$j++] = _N2; //#19445
        $k[$j++] = _N1; //#19445
        $k[$j++] = _N0; //#19445
        $k[$j++] = _Mz; //#19445
        $k[$j++] = _My; //#19445
        $k[$j++] = _Mx; //#19445
        $k[$j++] = _Mw; //#19445
        $k[$j++] = _Mv; //#19445
        $k[$j++] = _N5; //#19445
        $k[$j++] = _N4; //#19445
        $forall(_N3, function() { //#19445
            if ($k[--$j]() === true) {
                return true;
            } //#19431
            var _N7 = $k[--$j]; //#19432
            var _N8 = $k[--$j]; //#19432
            $k[$j++] = _N8; //#19435
            $k[$j++] = _N7; //#19435
            if (_N8 < 0) { //#19435
                var _N9 = $k[--$j]; //#19433
                var _NA = $k[--$j]; //#19433
                $k[$j++] = $f(_NA + $_.mrows); //#19434
                $k[$j++] = $f(_N9 + ($f(4 - ($f($_.mrows + 4) % 8)))); //#19434
            } //#19434
            var _ND = $k[--$j]; //#19436
            $k[$j++] = _ND; //#19439
            if (_ND < 0) { //#19439
                var _NF = $k[--$j]; //#19437
                var _NG = $k[--$j]; //#19437
                $k[$j++] = $f(_NG + ($f(4 - ($f($_.mcols + 4) % 8)))); //#19438
                $k[$j++] = $f(_NF + $_.mcols); //#19438
            } //#19438
            var _NI = $k[--$j]; //#19440
            var _NJ = $k[--$j]; //#19440
            $k[$j++] = _NJ; //#19442
            $k[$j++] = _NI; //#19442
            if (_NJ >= $_.mrows) { //#19442
                var _NL = $k[--$j]; //#19441
                var _NM = $k[--$j]; //#19441
                $k[$j++] = $f(_NM - $_.mrows); //#19441
                $k[$j++] = _NL; //#19441
            } //#19441
            var _NO = $k[--$j]; //#19443
            var _NP = $k[--$j]; //#19443
            var _NS = $k[--$j]; //#19444
            var _NT = $k[--$j]; //#19444
            $put($_.mmat, $f(_NO + (_NP * $_.mcols)), $k[--$j]); //#19444
            $k[$j++] = _NT; //#19444
            $k[$j++] = _NS; //#19444
        }); //#19444
    }; //#19444
    var _Nl = $a([function() {
        var _NV = $k[--$j]; //#19450
        var _NW = $k[--$j]; //#19450
        $k[$j++] = _NW; //#19450
        $k[$j++] = _NV; //#19450
        $k[$j++] = $f(_NW - 2); //#19450
        $k[$j++] = $f(_NV - 2); //#19450
    }, function() {
        var _NX = $k[--$j]; //#19450
        var _NY = $k[--$j]; //#19450
        $k[$j++] = _NY; //#19450
        $k[$j++] = _NX; //#19450
        $k[$j++] = $f(_NY - 2); //#19450
        $k[$j++] = $f(_NX - 1); //#19450
    }, function() {
        var _NZ = $k[--$j]; //#19451
        var _Na = $k[--$j]; //#19451
        $k[$j++] = _Na; //#19451
        $k[$j++] = _NZ; //#19451
        $k[$j++] = $f(_Na - 1); //#19451
        $k[$j++] = $f(_NZ - 2); //#19451
    }, function() {
        var _Nb = $k[--$j]; //#19451
        var _Nc = $k[--$j]; //#19451
        $k[$j++] = _Nc; //#19451
        $k[$j++] = _Nb; //#19451
        $k[$j++] = $f(_Nc - 1); //#19451
        $k[$j++] = $f(_Nb - 1); //#19451
    }, function() {
        var _Nd = $k[--$j]; //#19452
        var _Ne = $k[--$j]; //#19452
        $k[$j++] = _Ne; //#19452
        $k[$j++] = _Nd; //#19452
        $k[$j++] = $f(_Ne - 1); //#19452
        $k[$j++] = _Nd; //#19452
    }, function() {
        var _Nf = $k[--$j]; //#19452
        var _Ng = $k[--$j]; //#19452
        $k[$j++] = _Ng; //#19452
        $k[$j++] = _Nf; //#19452
        $k[$j++] = _Ng; //#19452
        $k[$j++] = $f(_Nf - 2); //#19452
    }, function() {
        var _Nh = $k[--$j]; //#19453
        var _Ni = $k[--$j]; //#19453
        $k[$j++] = _Ni; //#19453
        $k[$j++] = _Nh; //#19453
        $k[$j++] = _Ni; //#19453
        $k[$j++] = $f(_Nh - 1); //#19453
    }, function() {
        var _Nj = $k[--$j]; //#19453
        var _Nk = $k[--$j]; //#19453
        $k[$j++] = _Nk; //#19453
        $k[$j++] = _Nj; //#19453
        $k[$j++] = _Nk; //#19453
        $k[$j++] = _Nj; //#19453
    }]); //#19453
    $_.dmn = _Nl; //#19454
    var _Nu = $a([function() {
        $k[$j++] = $f($_.mrows - 1); //#19457
        $k[$j++] = 0; //#19457
    }, function() {
        $k[$j++] = $f($_.mrows - 1); //#19457
        $k[$j++] = 1; //#19457
    }, function() {
        $k[$j++] = $f($_.mrows - 1); //#19458
        $k[$j++] = 2; //#19458
    }, function() {
        $k[$j++] = 0; //#19458
        $k[$j++] = $f($_.mcols - 2); //#19458
    }, function() {
        $k[$j++] = 0; //#19459
        $k[$j++] = $f($_.mcols - 1); //#19459
    }, function() {
        $k[$j++] = 1; //#19459
        $k[$j++] = $f($_.mcols - 1); //#19459
    }, function() {
        $k[$j++] = 2; //#19460
        $k[$j++] = $f($_.mcols - 1); //#19460
    }, function() {
        $k[$j++] = 3; //#19460
        $k[$j++] = $f($_.mcols - 1); //#19460
    }]); //#19460
    $_.dmc1 = _Nu; //#19461
    var _O3 = $a([function() {
        $k[$j++] = $f($_.mrows - 3); //#19464
        $k[$j++] = 0; //#19464
    }, function() {
        $k[$j++] = $f($_.mrows - 2); //#19464
        $k[$j++] = 0; //#19464
    }, function() {
        $k[$j++] = $f($_.mrows - 1); //#19465
        $k[$j++] = 0; //#19465
    }, function() {
        $k[$j++] = 0; //#19465
        $k[$j++] = $f($_.mcols - 4); //#19465
    }, function() {
        $k[$j++] = 0; //#19466
        $k[$j++] = $f($_.mcols - 3); //#19466
    }, function() {
        $k[$j++] = 0; //#19466
        $k[$j++] = $f($_.mcols - 2); //#19466
    }, function() {
        $k[$j++] = 0; //#19467
        $k[$j++] = $f($_.mcols - 1); //#19467
    }, function() {
        $k[$j++] = 1; //#19467
        $k[$j++] = $f($_.mcols - 1); //#19467
    }]); //#19467
    $_.dmc2 = _O3; //#19468
    var _OC = $a([function() {
        $k[$j++] = $f($_.mrows - 3); //#19471
        $k[$j++] = 0; //#19471
    }, function() {
        $k[$j++] = $f($_.mrows - 2); //#19471
        $k[$j++] = 0; //#19471
    }, function() {
        $k[$j++] = $f($_.mrows - 1); //#19472
        $k[$j++] = 0; //#19472
    }, function() {
        $k[$j++] = 0; //#19472
        $k[$j++] = $f($_.mcols - 2); //#19472
    }, function() {
        $k[$j++] = 0; //#19473
        $k[$j++] = $f($_.mcols - 1); //#19473
    }, function() {
        $k[$j++] = 1; //#19473
        $k[$j++] = $f($_.mcols - 1); //#19473
    }, function() {
        $k[$j++] = 2; //#19474
        $k[$j++] = $f($_.mcols - 1); //#19474
    }, function() {
        $k[$j++] = 3; //#19474
        $k[$j++] = $f($_.mcols - 1); //#19474
    }]); //#19474
    $_.dmc3 = _OC; //#19475
    var _OM = $a([function() {
        $k[$j++] = $f($_.mrows - 1); //#19478
        $k[$j++] = 0; //#19478
    }, function() {
        $k[$j++] = $f($_.mrows - 1); //#19478
        $k[$j++] = $f($_.mcols - 1); //#19478
    }, function() {
        $k[$j++] = 0; //#19479
        $k[$j++] = $f($_.mcols - 3); //#19479
    }, function() {
        $k[$j++] = 0; //#19479
        $k[$j++] = $f($_.mcols - 2); //#19479
    }, function() {
        $k[$j++] = 0; //#19480
        $k[$j++] = $f($_.mcols - 1); //#19480
    }, function() {
        $k[$j++] = 1; //#19480
        $k[$j++] = $f($_.mcols - 3); //#19480
    }, function() {
        $k[$j++] = 1; //#19481
        $k[$j++] = $f($_.mcols - 2); //#19481
    }, function() {
        $k[$j++] = 1; //#19481
        $k[$j++] = $f($_.mcols - 1); //#19481
    }]); //#19481
    $_.dmc4 = _OM; //#19482
    $k[$j++] = Infinity; //#19484
    for (var _OP = 0, _OQ = $_.mrows * $_.mcols; _OP < _OQ; _OP++) { //#19484
        $k[$j++] = -1; //#19484
    } //#19484
    $_.mmat = $a(); //#19484
    for (var _OT = $_.cws.length - 1; _OT >= 0; _OT -= 1) { //#19485
        $k[$j++] = $get($_.cws, _OT); //#19485
    } //#19485
    $k[$j++] = 4; //#19525
    $k[$j++] = 0; //#19525
    for (;;) { //#19525
        var _OW = $k[--$j]; //#19488
        var _OX = $k[--$j]; //#19488
        $k[$j++] = _OX; //#19490
        $k[$j++] = _OW; //#19490
        if ((_OW == 0) && (_OX == $_.mrows)) { //#19490
            $k[$j++] = $_.dmc1; //#19489
            $_.module(); //#19489
        } //#19489
        var _Oa = $k[--$j]; //#19491
        var _Ob = $k[--$j]; //#19491
        $k[$j++] = _Ob; //#19493
        $k[$j++] = _Oa; //#19493
        if (((_Oa == 0) && (_Ob == $f($_.mrows - 2))) && (($_.mcols % 4) != 0)) { //#19493
            $k[$j++] = $_.dmc2; //#19492
            $_.module(); //#19492
        } //#19492
        var _Of = $k[--$j]; //#19494
        var _Og = $k[--$j]; //#19494
        $k[$j++] = _Og; //#19496
        $k[$j++] = _Of; //#19496
        if (((_Of == 0) && (_Og == $f($_.mrows - 2))) && (($_.mcols % 8) == 4)) { //#19496
            $k[$j++] = $_.dmc3; //#19495
            $_.module(); //#19495
        } //#19495
        var _Ok = $k[--$j]; //#19497
        var _Ol = $k[--$j]; //#19497
        $k[$j++] = _Ol; //#19499
        $k[$j++] = _Ok; //#19499
        if (((_Ok == 2) && (_Ol == $f($_.mrows + 4))) && (($_.mcols % 8) == 0)) { //#19499
            $k[$j++] = $_.dmc4; //#19498
            $_.module(); //#19498
        } //#19498
        for (;;) { //#19509
            var _Op = $k[--$j]; //#19502
            var _Oq = $k[--$j]; //#19502
            $k[$j++] = _Oq; //#19506
            $k[$j++] = _Op; //#19506
            if ((_Op >= 0) && (_Oq < $_.mrows)) { //#19506
                var _Os = $k[--$j]; //#19503
                var _Ot = $k[--$j]; //#19503
                $k[$j++] = _Ot; //#19505
                $k[$j++] = _Os; //#19505
                if ($get($_.mmat, $f(_Os + (_Ot * $_.mcols))) == -1) { //#19505
                    $k[$j++] = $_.dmn; //#19504
                    $_.module(); //#19504
                } //#19504
            } //#19504
            var _Oy = $k[--$j]; //#19507
            var _Oz = $k[--$j]; //#19507
            $k[$j++] = $f(_Oz - 2); //#19508
            $k[$j++] = $f(_Oy + 2); //#19508
            if (!(($f(_Oy + 2) < $_.mcols) && ($f(_Oz - 2) >= 0))) { //#19508
                break; //#19508
            } //#19508
        } //#19508
        var _P1 = $k[--$j]; //#19510
        var _P2 = $k[--$j]; //#19510
        $k[$j++] = $f(_P2 + 1); //#19520
        $k[$j++] = $f(_P1 + 3); //#19520
        for (;;) { //#19520
            var _P3 = $k[--$j]; //#19513
            var _P4 = $k[--$j]; //#19513
            $k[$j++] = _P4; //#19517
            $k[$j++] = _P3; //#19517
            if ((_P3 < $_.mcols) && (_P4 >= 0)) { //#19517
                var _P6 = $k[--$j]; //#19514
                var _P7 = $k[--$j]; //#19514
                $k[$j++] = _P7; //#19516
                $k[$j++] = _P6; //#19516
                if ($get($_.mmat, $f(_P6 + (_P7 * $_.mcols))) == -1) { //#19516
                    $k[$j++] = $_.dmn; //#19515
                    $_.module(); //#19515
                } //#19515
            } //#19515
            var _PC = $k[--$j]; //#19518
            var _PD = $k[--$j]; //#19518
            $k[$j++] = $f(_PD + 2); //#19519
            $k[$j++] = $f(_PC - 2); //#19519
            if (!(($f(_PC - 2) >= 0) && ($f(_PD + 2) < $_.mrows))) { //#19519
                break; //#19519
            } //#19519
        } //#19519
        var _PF = $k[--$j]; //#19521
        var _PG = $k[--$j]; //#19521
        $k[$j++] = $f(_PG + 3); //#19523
        $k[$j++] = $f(_PF + 1); //#19523
        if (!(($f(_PF + 1) < $_.mcols) || ($f(_PG + 3) < $_.mrows))) { //#19523
            $j -= 2; //#19523
            break; //#19523
        } //#19523
    } //#19523
    if ($get($_.mmat, $f(($_.mrows * $_.mcols) - 1)) == -1) { //#19531
        $puti($_.mmat, $f(($_.mrows * $f($_.mcols - 1)) - 2), $a([1, 0])); //#19529
        $puti($_.mmat, $f(($_.mrows * $_.mcols) - 2), $a([0, 1])); //#19530
    } //#19530
    $_.pixs = $a($_.rows * $_.cols); //#19534
    $_.cwpos = 0; //#19535
    for (var _Pa = 0, _PZ = $f($_.rows - 1); _Pa <= _PZ; _Pa += 1) { //#19551
        $_.i = _Pa; //#19537
        if (($_.i % ($_.rrows + 2)) == 0) { //#19538
            $k[$j++] = $_.pixs; //#19538
            $k[$j++] = $_.i * $_.cols; //#19538
            $k[$j++] = Infinity; //#19538
            for (var _Ph = 0, _Pi = ~~($_.cols / 2); _Ph < _Pi; _Ph++) { //#19538
                $k[$j++] = 1; //#19538
                $k[$j++] = 0; //#19538
            } //#19538
            var _Pj = $a(); //#19538
            var _Pk = $k[--$j]; //#19538
            $puti($k[--$j], _Pk, _Pj); //#19538
        } //#19538
        if (($_.i % ($_.rrows + 2)) == ($_.rrows + 1)) { //#19539
            $k[$j++] = $_.pixs; //#19539
            $k[$j++] = $_.i * $_.cols; //#19539
            $k[$j++] = Infinity; //#19539
            for (var _Pt = 0, _Pu = $_.cols; _Pt < _Pu; _Pt++) { //#19539
                $k[$j++] = 1; //#19539
            } //#19539
            var _Pv = $a(); //#19539
            var _Pw = $k[--$j]; //#19539
            $puti($k[--$j], _Pw, _Pv); //#19539
        } //#19539
        if ((($_.i % ($_.rrows + 2)) != 0) && (($_.i % ($_.rrows + 2)) != ($_.rrows + 1))) { //#19550
            for (var _Q5 = 0, _Q4 = $f($_.cols - 1); _Q5 <= _Q4; _Q5 += 1) { //#19549
                $_.j = _Q5; //#19542
                if (($_.j % ($_.rcols + 2)) == 0) { //#19543
                    $put($_.pixs, $f(($_.i * $_.cols) + $_.j), 1); //#19543
                } //#19543
                if (($_.j % ($_.rcols + 2)) == ($_.rcols + 1)) { //#19544
                    $put($_.pixs, $f(($_.i * $_.cols) + $_.j), $_.i % 2); //#19544
                } //#19544
                if ((($_.j % ($_.rcols + 2)) != 0) && (($_.j % ($_.rcols + 2)) != ($_.rcols + 1))) { //#19548
                    $put($_.pixs, $f(($_.i * $_.cols) + $_.j), $get($_.mmat, $_.cwpos)); //#19546
                    $_.cwpos = $_.cwpos + 1; //#19547
                } //#19547
            } //#19547
        } //#19547
    } //#19547
    var _Qd = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $_.pixs],
        ["pixx", $_.cols],
        ["pixy", $_.rows],
        ["height", ($_.rows * 2) / 72],
        ["width", ($_.cols * 2) / 72],
        ["borderleft", 1],
        ["borderright", 1],
        ["bordertop", 1],
        ["borderbottom", 1],
        ["opt", $_.options]
    ]); //#19565
    $k[$j++] = _Qd; //#19568
    if (!$_.dontdraw) { //#19568
        bwipp_renmatrix(); //#19568
    } //#19568
    $_ = Object.getPrototypeOf($_); //#19570
    $_ = Object.getPrototypeOf($_); //#19572
} //bwipp_datamatrix
function bwipp_datamatrixrectangular() {
    $_ = Object.create($_); //#19601
    $_.dontdraw = false; //#19604
    $k[$j++] = $_; //#19606
    bwipp_processoptions(); //#19606
    $_.options = $k[--$j]; //#19606
    $_.barcode = $k[--$j]; //#19607
    $put($_.options, "dontdraw", true); //#19610
    $put($_.options, "format", "rectangle"); //#19611
    $k[$j++] = 'args'; //#19613
    $k[$j++] = $_.barcode; //#19613
    $k[$j++] = $_.options; //#19613
    bwipp_datamatrix(); //#19613
    var _6 = $k[--$j]; //#19613
    $_[$k[--$j]] = _6; //#19613
    $put($_.args, "opt", $_.options); //#19615
    $k[$j++] = $_.args; //#19618
    if (!$_.dontdraw) { //#19618
        bwipp_renmatrix(); //#19618
    } //#19618
    $_ = Object.getPrototypeOf($_); //#19620
} //bwipp_datamatrixrectangular
function bwipp_datamatrixrectangularextension() {
    $_ = Object.create($_); //#19649
    $_.dontdraw = false; //#19652
    $k[$j++] = $_; //#19654
    bwipp_processoptions(); //#19654
    $_.options = $k[--$j]; //#19654
    $_.barcode = $k[--$j]; //#19655
    $put($_.options, "dontdraw", true); //#19658
    $put($_.options, "dmre", true); //#19659
    $k[$j++] = 'args'; //#19661
    $k[$j++] = $_.barcode; //#19661
    $k[$j++] = $_.options; //#19661
    bwipp_datamatrix(); //#19661
    var _6 = $k[--$j]; //#19661
    $_[$k[--$j]] = _6; //#19661
    $put($_.args, "opt", $_.options); //#19663
    $k[$j++] = $_.args; //#19666
    if (!$_.dontdraw) { //#19666
        bwipp_renmatrix(); //#19666
    } //#19666
    $_ = Object.getPrototypeOf($_); //#19668
} //bwipp_datamatrixrectangularextension
function bwipp_mailmark() {
    $_ = Object.create($_); //#19698
    $_.type = "unset"; //#19701
    $_.parse = false; //#19702
    $_.dontdraw = false; //#19703
    $k[$j++] = $_; //#19705
    bwipp_processoptions(); //#19705
    $_.options = $k[--$j]; //#19705
    $_.barcode = $k[--$j]; //#19706
    var _3 = new Map([
        ["parse", $_.parse],
        ["parseonly", true],
        ["parsefnc", false]
    ]); //#19712
    $_.fncvals = _3; //#19713
    $k[$j++] = 'barcode'; //#19714
    $k[$j++] = $_.barcode; //#19714
    $k[$j++] = $_.fncvals; //#19714
    bwipp_parseinput(); //#19714
    var _6 = $k[--$j]; //#19714
    $_[$k[--$j]] = _6; //#19714
    $_.barlen = $_.barcode.length; //#19715
    delete $_.options["parse"]; //#19716
    var _A = $_['type']; //#19719
    if ($ne(_A, "7") && ($ne(_A, "9") && $ne(_A, "29"))) { //#19721
        $k[$j++] = 'bwipp.mailmarkBadType#19720'; //#19720
        $k[$j++] = "Royal Mail Mailmark type must be 7, 9 or 29"; //#19720
        bwipp_raiseerror(); //#19720
    } //#19720
    var _B = new Map([
        ["7", "24x24"],
        ["9", "32x32"],
        ["29", "16x48"]
    ]); //#19725
    $_.version = $get(_B, $_['type']); //#19726
    var _E = new Map([
        ["7", "square"],
        ["9", "square"],
        ["29", "rectangle"]
    ]); //#19731
    $_.format = $get(_E, $_['type']); //#19732
    if ($_.barcode.length < 45) { //#19737
        $k[$j++] = 'bwipp.mailmarkBadLength#19736'; //#19736
        $k[$j++] = "Royal Mail Mailmark must contain at least 45 characters of Mailmark formatted data, including any required space padding"; //#19736
        bwipp_raiseerror(); //#19736
    } //#19736
    if ($ne($geti($_.barcode, 0, 4), "JGB ")) { //#19740
        $k[$j++] = 'bwipp.mailmarkBadIndicator#19739'; //#19739
        $k[$j++] = "Royal Mail Mailmark must begin with JGB<space> identifier"; //#19739
        bwipp_raiseerror(); //#19739
    } //#19739
    $put($_.options, "dontdraw", true); //#19743
    $put($_.options, "version", $_.version); //#19744
    $put($_.options, "format", $_.format); //#19745
    $put($_.options, "c40headerlength", 45); //#19746
    $k[$j++] = 'args'; //#19747
    $k[$j++] = $_.barcode; //#19747
    $k[$j++] = $_.options; //#19747
    bwipp_datamatrix(); //#19747
    var _S = $k[--$j]; //#19747
    $_[$k[--$j]] = _S; //#19747
    $put($_.args, "opt", $_.options); //#19749
    $k[$j++] = $_.args; //#19752
    if (!$_.dontdraw) { //#19752
        bwipp_renmatrix(); //#19752
    } //#19752
    $_ = Object.getPrototypeOf($_); //#19754
} //bwipp_mailmark
function bwipp_qrcode() {
    $_ = Object.create($_); //#19785
    $_.dontdraw = false; //#19788
    $_.format = "unset"; //#19789
    $_.version = "unset"; //#19790
    $_.eclevel = "unset"; //#19791
    $_.parse = false; //#19792
    $_.parsefnc = false; //#19793
    $_.mask = -1; //#19794
    $k[$j++] = $_; //#19796
    bwipp_processoptions(); //#19796
    $_.options = $k[--$j]; //#19796
    $_.barcode = $k[--$j]; //#19797
    bwipp_loadctx(bwipp_qrcode) //#19799
    if ($eq($_.barcode, "")) { //#19803
        $k[$j++] = 'bwipp.qrcodeEmptyData#19802'; //#19802
        $k[$j++] = "The data must not be empty"; //#19802
        bwipp_raiseerror(); //#19802
    } //#19802
    if ($ne($_.version, "unset")) { //#19814
        if ($eq($_.format, "unset")) { //#19812
            $k[$j++] = "full"; //#19809
            if ($eq($geti($_.version, 0, 1), "M")) { //#19809
                $j--; //#19809
                $k[$j++] = "micro"; //#19809
            } //#19809
            if ($eq($geti($_.version, 0, 1), "R")) { //#19810
                $j--; //#19810
                $k[$j++] = "rmqr"; //#19810
            } //#19810
            $_.format = $k[--$j]; //#19811
        } //#19811
    } else { //#19814
        if ($eq($_.format, "unset")) { //#19814
            $_.format = "full"; //#19814
        } //#19814
    } //#19814
    if ($ne($_.format, "full") && ($ne($_.format, "micro") && $ne($_.format, "rmqr"))) { //#19819
        $k[$j++] = 'bwipp.qrcodeInvalidFormat#19818'; //#19818
        $k[$j++] = "The format must be either full, micro or rmqr"; //#19818
        bwipp_raiseerror(); //#19818
    } //#19818
    if ($eq($_.format, "rmqr") && $eq($_.version, "unset")) { //#19823
        $k[$j++] = 'bwipp.qrcodeRMQRwithoutVersion#19822'; //#19822
        $k[$j++] = "A version must be provided for RMQR"; //#19822
        bwipp_raiseerror(); //#19822
    } //#19822
    if ($eq($_.eclevel, "unset")) { //#19826
        $k[$j++] = 'eclevel'; //#19826
        if ($ne($_.format, "micro")) { //#19826
            $k[$j++] = "M"; //#19826
        } else { //#19826
            $k[$j++] = "L"; //#19826
        } //#19826
        var _I = $k[--$j]; //#19826
        $_[$k[--$j]] = _I; //#19826
    } //#19826
    if ($ne($_.eclevel, "L") && ($ne($_.eclevel, "M") && ($ne($_.eclevel, "Q") && $ne($_.eclevel, "H")))) { //#19830
        $k[$j++] = 'bwipp.qrcodeInvalidEClevel#19829'; //#19829
        $k[$j++] = "Error correction level must be either L, M, Q, or H"; //#19829
        bwipp_raiseerror(); //#19829
    } //#19829
    if (($_.mask != -1) && $eq($_.format, "rmqr")) { //#19834
        $k[$j++] = 'bwipp.qrcodeRMQRmask#19833'; //#19833
        $k[$j++] = "A mask cannot be supplied for RMQR"; //#19833
        bwipp_raiseerror(); //#19833
    } //#19833
    if ($_.mask != -1) { //#19840
        var _U = $eq($_.format, "full") ? 8 : 4; //#19837
        if (($_.mask < 1) || ($_.mask > _U)) { //#19839
            $k[$j++] = 'bwipp.qrcodeBadMask#19838'; //#19838
            $k[$j++] = "An invalid mask was supplied"; //#19838
            bwipp_raiseerror(); //#19838
        } //#19838
    } //#19838
    $_.fn1 = -1; //#19843
    var _Y = new Map([
        ["parse", $_.parse],
        ["parsefnc", $_.parsefnc],
        ["eci", true],
        ["FNC1", $_.fn1]
    ]); //#19848
    $_.fncvals = _Y; //#19849
    $k[$j++] = 'msg'; //#19850
    $k[$j++] = $_.barcode; //#19850
    $k[$j++] = $_.fncvals; //#19850
    bwipp_parseinput(); //#19850
    var _b = $k[--$j]; //#19850
    $_[$k[--$j]] = _b; //#19850
    $_.msglen = $_.msg.length; //#19851
    $_.fnc1first = false; //#19854
    if ($_.msglen > 0) { //#19861
        if ($get($_.msg, 0) == $_.fn1) { //#19860
            $_.fnc1first = true; //#19857
            $k[$j++] = Infinity; //#19858
            var _k = $geti($_.msg, 1, $_.msglen - 1); //#19858
            for (var _l = 0, _m = _k.length; _l < _m; _l++) { //#19858
                var _n = $get(_k, _l); //#19858
                $k[$j++] = _n; //#19858
                if (_n == 37) { //#19858
                    var _o = $k[--$j]; //#19858
                    $k[$j++] = _o; //#19858
                    $k[$j++] = _o; //#19858
                } //#19858
            } //#19858
            $_.msg = $a(); //#19858
            $_.msglen = $_.msg.length; //#19859
        } //#19859
    } //#19859
    if (!bwipp_qrcode.__19982__) { //#19982
        $_ = Object.create($_); //#19982
        var _r = $a(['v1to9', 'v10to26', 'v27to40', 'vM1', 'vM2', 'vM3', 'vM4', 'vR7x43', 'vR7x59', 'vR7x77', 'vR7x99', 'vR7x139', 'vR9x43', 'vR9x59', 'vR9x77', 'vR9x99', 'vR9x139', 'vR11x27', 'vR11x43', 'vR11x59', 'vR11x77', 'vR11x99', 'vR11x139', 'vR13x27', 'vR13x43', 'vR13x59', 'vR13x77', 'vR13x99', 'vR13x139', 'vR15x43', 'vR15x59', 'vR15x77', 'vR15x99', 'vR15x139', 'vR17x43', 'vR17x59', 'vR17x77', 'vR17x99', 'vR17x139']); //#19874
        $k[$j++] = 0; //#19875
        for (var _s = 0, _t = _r.length; _s < _t; _s++) { //#19875
            var _v = $k[--$j]; //#19875
            $_[$get(_r, _s)] = _v; //#19875
            $k[$j++] = $f(_v + 1); //#19875
        } //#19875
        $j--; //#19875
        $_.N = 0; //#19881
        $_.A = 1; //#19881
        $_.B = 2; //#19881
        $_.K = 3; //#19881
        $_.E = 4; //#19881
        $k[$j++] = Infinity; //#19883
        $k[$j++] = Infinity; //#19884
        for (var _w = 48; _w <= 57; _w += 1) { //#19885
            $k[$j++] = _w; //#19885
        } //#19885
        var _x = $a(); //#19885
        for (var _y = 0, _z = _x.length; _y < _z; _y++) { //#19886
            $k[$j++] = $get(_x, _y); //#19886
            $k[$j++] = -1; //#19886
        } //#19886
        $_.Nexcl = $d(); //#19887
        $k[$j++] = Infinity; //#19889
        $k[$j++] = Infinity; //#19890
        $k[$j++] = 32; //#19892
        $k[$j++] = 36; //#19892
        $k[$j++] = 37; //#19892
        $k[$j++] = 42; //#19892
        $k[$j++] = 43; //#19892
        $k[$j++] = 45; //#19892
        $k[$j++] = 46; //#19892
        $k[$j++] = 47; //#19892
        $k[$j++] = 58; //#19892
        for (var _12 = 65; _12 <= 90; _12 += 1) { //#19892
            $k[$j++] = _12; //#19892
        } //#19892
        $k[$j++] = $_.fn1; //#19893
        var _14 = $a(); //#19893
        for (var _15 = 0, _16 = _14.length; _15 < _16; _15++) { //#19894
            $k[$j++] = $get(_14, _15); //#19894
            $k[$j++] = -1; //#19894
        } //#19894
        $_.Aexcl = $d(); //#19895
        $k[$j++] = Infinity; //#19899
        $k[$j++] = Infinity; //#19900
        for (var _19 = 129; _19 <= 159; _19 += 1) { //#19901
            $k[$j++] = _19; //#19901
        } //#19901
        for (var _1A = 224; _1A <= 235; _1A += 1) { //#19902
            $k[$j++] = _1A; //#19902
        } //#19902
        var _1B = $a(); //#19902
        for (var _1C = 0, _1D = _1B.length; _1C < _1D; _1C++) { //#19903
            $k[$j++] = $get(_1B, _1C); //#19903
            $k[$j++] = -1; //#19903
        } //#19903
        $_.Kexcl = $d(); //#19904
        $k[$j++] = Infinity; //#19906
        $k[$j++] = $a(["0001", "0010", "0100", "1000", "0111"]); //#19917
        $k[$j++] = $a(["0001", "0010", "0100", "1000", "0111"]); //#19917
        $k[$j++] = $a(["0001", "0010", "0100", "1000", "0111"]); //#19917
        $k[$j++] = $a(["", -1, -1, -1, -1]); //#19917
        $k[$j++] = $a(["0", "1", -1, -1, -1]); //#19917
        $k[$j++] = $a(["00", "01", "10", "11", -1]); //#19917
        $k[$j++] = $a(["000", "001", "010", "011", -1]); //#19917
        for (var _1N = 0, _1O = 32; _1N < _1O; _1N++) { //#19917
            $k[$j++] = $a(["001", "010", "011", "100", "111"]); //#19916
        } //#19916
        $_.mids = $a(); //#19916
        $_.cclens = $a([$a([10, 9, 8, 8]), $a([12, 11, 16, 10]), $a([14, 13, 16, 12]), $a([3, -1, -1, -1]), $a([4, 3, -1, -1]), $a([5, 4, 4, 3]), $a([6, 5, 5, 4]), $a([4, 3, 3, 2]), $a([5, 5, 4, 3]), $a([6, 5, 5, 4]), $a([7, 6, 5, 5]), $a([7, 6, 6, 5]), $a([5, 5, 4, 3]), $a([6, 5, 5, 4]), $a([7, 6, 5, 5]), $a([7, 6, 6, 5]), $a([8, 7, 6, 6]), $a([4, 4, 3, 2]), $a([6, 5, 5, 4]), $a([7, 6, 5, 5]), $a([7, 6, 6, 5]), $a([8, 7, 6, 6]), $a([8, 7, 7, 6]), $a([5, 5, 4, 3]), $a([6, 6, 5, 5]), $a([7, 6, 6, 5]), $a([7, 7, 6, 6]), $a([8, 7, 7, 6]), $a([8, 8, 7, 7]), $a([7, 6, 6, 5]), $a([7, 7, 6, 5]), $a([8, 7, 7, 6]), $a([8, 7, 7, 6]), $a([9, 8, 7, 7]), $a([7, 6, 6, 5]), $a([8, 7, 6, 6]), $a([8, 7, 7, 6]), $a([8, 8, 7, 6]), $a([9, 8, 8, 7])]); //#19960
        $k[$j++] = Infinity; //#19962
        for (var _25 = 0, _26 = 3; _25 < _26; _25++) { //#19965
            $k[$j++] = 4; //#19964
        } //#19964
        $k[$j++] = 3; //#19972
        $k[$j++] = 5; //#19972
        $k[$j++] = 7; //#19972
        $k[$j++] = 9; //#19972
        for (var _27 = 0, _28 = 32; _27 < _28; _27++) { //#19972
            $k[$j++] = 3; //#19971
        } //#19971
        $_.termlens = $a(); //#19971
        $_.padstrs = $a(["11101100", "00010001"]); //#19975
        $_.charmap = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:"; //#19978
        $_.charvals = new Map; //#19979
        for (var _2B = 0; _2B <= 44; _2B += 1) { //#19980
            $put($_.charvals, $get($_.charmap, _2B), _2B); //#19980
        } //#19980
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_qrcode.$ctx[id] = $_[id]); //#19980
        bwipp_qrcode.__19982__ = 1; //#19980
        $_ = Object.getPrototypeOf($_); //#19980
    } //#19980
    $_.tobin = function() {
        var _2H = $s($k[--$j]); //#19986
        $k[$j++] = _2H; //#19986
        for (var _2J = 0, _2I = _2H.length - 1; _2J <= _2I; _2J += 1) { //#19986
            var _2K = $k[--$j]; //#19986
            $put(_2K, _2J, 48); //#19986
            $k[$j++] = _2K; //#19986
        } //#19986
        var _2L = $k[--$j]; //#19987
        var _2O = $cvrs($s(_2L.length), $k[--$j], 2); //#19987
        $puti(_2L, _2L.length - _2O.length, _2O); //#19987
        $k[$j++] = _2L; //#19987
    }; //#19987
    $_.encA = function() {
        $_.in = $k[--$j]; //#19991
        if ($_.fnc1first) { //#19994
            $k[$j++] = Infinity; //#19993
            $forall($_.in, function() { //#19993
                var _2S = $k[--$j]; //#19993
                $k[$j++] = _2S; //#19993
                if (_2S == $_.fn1) { //#19993
                    $j--; //#19993
                    $k[$j++] = 37; //#19993
                } //#19993
            }); //#19993
            $_.in = $a(); //#19993
        } //#19993
        $_.out = $s((~~(($_.in.length * 11) / 2)) + 1); //#19995
        $_.k = 0; //#19996
        $_.m = 0; //#19996
        for (;;) { //#20007
            if ($_.k == $_.in.length) { //#19997
                break; //#19997
            } //#19997
            if ($_.k < ($_.in.length - 1)) { //#20003
                $k[$j++] = $f(($get($_.charvals, $get($_.in, $_.k)) * 45) + $get($_.charvals, $get($_.in, $_.k + 1))); //#19999
                $k[$j++] = 11; //#19999
                $_.tobin(); //#19999
                $_.k = $_.k + 2; //#20000
            } else { //#20003
                $k[$j++] = $get($_.charvals, $get($_.in, $_.k)); //#20002
                $k[$j++] = 6; //#20002
                $_.tobin(); //#20002
                $_.k = $_.k + 1; //#20003
            } //#20003
            var _2s = $k[--$j]; //#20005
            $puti($_.out, $_.m, _2s); //#20005
            $_.m = _2s.length + $_.m; //#20006
        } //#20006
        $k[$j++] = $geti($_.out, 0, $_.m); //#20008
    }; //#20008
    $_.encN = function() {
        $_.in = $k[--$j]; //#20012
        $_.out = $s((~~(($_.in.length * 10) / 3)) + 1); //#20013
        $_.k = 0; //#20014
        $_.m = 0; //#20014
        for (;;) { //#20030
            if ($_.k == $_.in.length) { //#20015
                break; //#20015
            } //#20015
            if ($_.k < ($_.in.length - 2)) { //#20025
                var _38 = $geti($_.in, $_.k, 3); //#20017
                $k[$j++] = 0; //#20017
                for (var _39 = 0, _3A = _38.length; _39 < _3A; _39++) { //#20017
                    var _3C = $k[--$j]; //#20017
                    $k[$j++] = $f($get(_38, _39) + ($f((_3C * 10) - 48))); //#20017
                } //#20017
                $k[$j++] = 10; //#20017
                $_.tobin(); //#20017
                $_.k = $_.k + 3; //#20018
            } else { //#20025
                if ($_.k == ($_.in.length - 2)) { //#20025
                    var _3I = $geti($_.in, $_.k, 2); //#20021
                    $k[$j++] = 0; //#20021
                    for (var _3J = 0, _3K = _3I.length; _3J < _3K; _3J++) { //#20021
                        var _3M = $k[--$j]; //#20021
                        $k[$j++] = $f($get(_3I, _3J) + ($f((_3M * 10) - 48))); //#20021
                    } //#20021
                    $k[$j++] = 7; //#20021
                    $_.tobin(); //#20021
                    $_.k = $_.k + 2; //#20022
                } else { //#20025
                    var _3Q = $geti($_.in, $_.k, 1); //#20024
                    $k[$j++] = 0; //#20024
                    for (var _3R = 0, _3S = _3Q.length; _3R < _3S; _3R++) { //#20024
                        var _3U = $k[--$j]; //#20024
                        $k[$j++] = $f($get(_3Q, _3R) + ($f((_3U * 10) - 48))); //#20024
                    } //#20024
                    $k[$j++] = 4; //#20024
                    $_.tobin(); //#20024
                    $_.k = $_.k + 1; //#20025
                } //#20025
            } //#20025
            var _3W = $k[--$j]; //#20028
            $puti($_.out, $_.m, _3W); //#20028
            $_.m = _3W.length + $_.m; //#20029
        } //#20029
        $k[$j++] = $geti($_.out, 0, $_.m); //#20031
    }; //#20031
    $_.encB = function() {
        $_.in = $k[--$j]; //#20035
        if ($_.fnc1first) { //#20038
            $k[$j++] = Infinity; //#20037
            $forall($_.in, function() { //#20037
                var _3g = $k[--$j]; //#20037
                $k[$j++] = _3g; //#20037
                if (_3g == $_.fn1) { //#20037
                    $j--; //#20037
                    $k[$j++] = 29; //#20037
                } //#20037
            }); //#20037
            $_.in = $a(); //#20037
        } //#20037
        $_.out = $s($_.in.length * 8); //#20039
        for (var _3n = 0, _3m = $_.in.length - 1; _3n <= _3m; _3n += 1) { //#20044
            $_.k = _3n; //#20041
            $k[$j++] = $cvi($get($_.in, $_.k)); //#20042
            $k[$j++] = 8; //#20042
            $_.tobin(); //#20042
            $puti($_.out, $_.k * 8, $k[--$j]); //#20043
        } //#20043
        $k[$j++] = $_.out; //#20045
    }; //#20045
    $_.encK = function() {
        $_.in = $k[--$j]; //#20049
        $_.out = $s((~~($_.in.length / 2)) * 13); //#20050
        $_.k = 0; //#20051
        $_.m = 0; //#20051
        for (;;) { //#20059
            if ($_.k == $_.in.length) { //#20052
                break; //#20052
            } //#20052
            var _46 = $f(($get($_.in, $_.k) * 256) + $get($_.in, $_.k + 1)); //#20054
            $k[$j++] = _46; //#20054
            if (_46 < 57408) { //#20054
                $k[$j++] = 33088; //#20054
            } else { //#20054
                $k[$j++] = 49472; //#20054
            } //#20054
            var _47 = $k[--$j]; //#20054
            var _49 = $f($k[--$j] - _47); //#20055
            $k[$j++] = $f(((_49 >>> 8) * 192) + (_49 & 255)); //#20056
            $k[$j++] = 13; //#20056
            $_.tobin(); //#20056
            var _4A = $k[--$j]; //#20056
            $puti($_.out, $_.m, _4A); //#20056
            $_.m = _4A.length + $_.m; //#20057
            $_.k = $_.k + 2; //#20058
        } //#20058
        $k[$j++] = $_.out; //#20060
    }; //#20060
    $_.encE = function() {
        var _4I = $f((-$get($k[--$j], 0)) - 1000000); //#20065
        $k[$j++] = _4I; //#20071
        if (_4I <= 127) { //#20070
            $k[$j++] = 8; //#20066
            $_.tobin(); //#20066
        } else { //#20070
            var _4J = $k[--$j]; //#20067
            $k[$j++] = _4J; //#20071
            if (_4J <= 16383) { //#20070
                var _4K = $k[--$j]; //#20068
                $k[$j++] = $f(_4K + 32768); //#20068
                $k[$j++] = 16; //#20068
                $_.tobin(); //#20068
            } else { //#20070
                var _4L = $k[--$j]; //#20070
                $k[$j++] = $f(_4L + 12582912); //#20070
                $k[$j++] = 24; //#20070
                $_.tobin(); //#20070
            } //#20070
        } //#20070
    }; //#20070
    $_.encfuncs = $a(['encN', 'encA', 'encB', 'encK', 'encE']); //#20074
    $_.addtobits = function() {
        var _4N = $k[--$j]; //#20077
        $puti($_.bits, $_.j, _4N); //#20077
        $_.j = _4N.length + $_.j; //#20078
    }; //#20078
    $k[$j++] = Infinity; //#20081
    for (var _4S = 0, _4T = $_.msglen; _4S < _4T; _4S++) { //#20081
        $k[$j++] = 0; //#20081
    } //#20081
    $k[$j++] = 0; //#20081
    $_.numNs = $a(); //#20081
    $k[$j++] = Infinity; //#20082
    for (var _4W = 0, _4X = $_.msglen; _4W < _4X; _4W++) { //#20082
        $k[$j++] = 0; //#20082
    } //#20082
    $k[$j++] = 0; //#20082
    $_.numAs = $a(); //#20082
    $k[$j++] = Infinity; //#20083
    for (var _4a = 0, _4b = $_.msglen; _4a < _4b; _4a++) { //#20083
        $k[$j++] = 0; //#20083
    } //#20083
    $k[$j++] = 0; //#20083
    $_.numAorNs = $a(); //#20083
    $k[$j++] = Infinity; //#20084
    for (var _4e = 0, _4f = $_.msglen; _4e < _4f; _4e++) { //#20084
        $k[$j++] = 0; //#20084
    } //#20084
    $k[$j++] = 0; //#20084
    $_.numBs = $a(); //#20084
    $k[$j++] = Infinity; //#20085
    for (var _4i = 0, _4j = $_.msglen; _4i < _4j; _4i++) { //#20085
        $k[$j++] = 0; //#20085
    } //#20085
    $k[$j++] = 0; //#20085
    $_.numKs = $a(); //#20085
    $k[$j++] = Infinity; //#20086
    for (var _4m = 0, _4n = $_.msglen; _4m < _4n; _4m++) { //#20086
        $k[$j++] = 0; //#20086
    } //#20086
    $k[$j++] = 9999; //#20086
    $_.nextNs = $a(); //#20086
    $k[$j++] = Infinity; //#20087
    for (var _4q = 0, _4r = $_.msglen; _4q < _4r; _4q++) { //#20087
        $k[$j++] = 0; //#20087
    } //#20087
    $k[$j++] = 9999; //#20087
    $_.nextBs = $a(); //#20087
    $k[$j++] = Infinity; //#20088
    for (var _4u = 0, _4v = $_.msglen; _4u < _4v; _4u++) { //#20088
        $k[$j++] = 0; //#20088
    } //#20088
    $k[$j++] = 9999; //#20088
    $_.nextAs = $a(); //#20088
    $k[$j++] = Infinity; //#20089
    for (var _4y = 0, _4z = $_.msglen; _4y < _4z; _4y++) { //#20089
        $k[$j++] = 0; //#20089
    } //#20089
    $k[$j++] = 9999; //#20089
    $_.nextKs = $a(); //#20089
    $_.isECI = $a($_.msglen); //#20090
    for (var _54 = $_.msglen - 1; _54 >= 0; _54 -= 1) { //#20120
        $_.i = _54; //#20092
        $_.barchar = $get($_.msg, $_.i); //#20093
        var _5A = $get($_.Kexcl, $_.barchar) !== undefined; //#20094
        if (_5A) { //#20103
            $k[$j++] = 'sjis'; //#20095
            if (($_.i + 1) < $_.msglen) { //#20095
                $k[$j++] = $f(($_.barchar * 256) + $get($_.msg, $_.i + 1)); //#20095
            } else { //#20095
                $k[$j++] = 0; //#20095
            } //#20095
            var _5H = $k[--$j]; //#20095
            $_[$k[--$j]] = _5H; //#20095
            if ((($_.sjis >= 33088) && ($_.sjis <= 40956)) || (($_.sjis >= 57408) && ($_.sjis <= 60351))) { //#20100
                $put($_.nextKs, $_.i, 0); //#20097
                $put($_.numKs, $_.i, $f($get($_.numKs, $_.i + 2) + 1)); //#20098
            } else { //#20100
                $put($_.nextKs, $_.i, $f($get($_.nextKs, $_.i + 1) + 1)); //#20100
            } //#20100
        } else { //#20103
            $put($_.nextKs, $_.i, $f($get($_.nextKs, $_.i + 1) + 1)); //#20103
        } //#20103
        var _5g = $get($_.Nexcl, $_.barchar) !== undefined; //#20105
        if (_5g) { //#20110
            $put($_.nextNs, $_.i, 0); //#20106
            $put($_.numNs, $_.i, $f($get($_.numNs, $_.i + 1) + 1)); //#20107
            $put($_.numAorNs, $_.i, $f($get($_.numAorNs, $_.i + 1) + 1)); //#20108
        } else { //#20110
            $put($_.nextNs, $_.i, $f($get($_.nextNs, $_.i + 1) + 1)); //#20110
        } //#20110
        var _60 = $get($_.Aexcl, $_.barchar) !== undefined; //#20112
        if (_60) { //#20117
            $put($_.nextAs, $_.i, 0); //#20113
            $put($_.numAs, $_.i, $f($get($_.numAs, $_.i + 1) + 1)); //#20114
            $put($_.numAorNs, $_.i, $f($get($_.numAorNs, $_.i + 1) + 1)); //#20115
        } else { //#20117
            $put($_.nextAs, $_.i, $f($get($_.nextAs, $_.i + 1) + 1)); //#20117
        } //#20117
        $put($_.isECI, $_.i, $_.barchar <= -1000000); //#20119
    } //#20119
    for (var _6N = 0, _6M = $_.msglen - 1; _6N <= _6M; _6N += 1) { //#20127
        $_.i = _6N; //#20122
        if ($get($_.numKs, $_.i) > 0) { //#20126
            $put($_.numKs, $_.i + 1, 0); //#20124
            $put($_.nextKs, $_.i + 1, $f($get($_.nextKs, $_.i + 1) + 1)); //#20125
        } //#20125
    } //#20125
    for (var _6Z = $_.msglen - 1; _6Z >= 0; _6Z -= 1) { //#20136
        $_.i = _6Z; //#20129
        if ((($f($get($_.numNs, $_.i) + $f($get($_.numAs, $_.i) + $get($_.numKs, $_.i)))) == 0) && $nt($get($_.isECI, $_.i))) { //#20134
            $put($_.nextBs, $_.i, 0); //#20131
            $put($_.numBs, $_.i, $f($get($_.numBs, $_.i + 1) + 1)); //#20132
        } else { //#20134
            $put($_.nextBs, $_.i, $f($get($_.nextBs, $_.i + 1) + 1)); //#20134
        } //#20134
    } //#20134
    $_.KbeforeB = function() {
        var _71 = $get($k[--$j], $_.ver); //#20138
        $k[$j++] = $ge($_.numK, _71) && ($get($_.nextBs, $f(($_.numK * 2) + $_.i)) == 0); //#20138
    }; //#20138
    $_.KbeforeA = function() {
        var _79 = $get($k[--$j], $_.ver); //#20139
        $k[$j++] = $ge($_.numK, _79) && ($get($_.nextAs, $f(($_.numK * 2) + $_.i)) == 0); //#20139
    }; //#20139
    $_.KbeforeN = function() {
        var _7H = $get($k[--$j], $_.ver); //#20140
        $k[$j++] = $ge($_.numK, _7H) && ($get($_.nextNs, $f(($_.numK * 2) + $_.i)) == 0); //#20140
    }; //#20140
    $_.KbeforeE = function() {
        var _7P = $get($k[--$j], $_.ver); //#20141
        $k[$j++] = $ge($_.numK, _7P) && (($f(($_.numK * 2) + $_.i)) == $_.msglen); //#20141
    }; //#20141
    $_.AbeforeK = function() {
        var _7W = $get($k[--$j], $_.ver); //#20142
        $k[$j++] = $ge($_.numA, _7W) && ($get($_.nextKs, $f($_.numA + $_.i)) == 0); //#20142
    }; //#20142
    $_.AbeforeB = function() {
        var _7e = $get($k[--$j], $_.ver); //#20143
        $k[$j++] = $ge($_.numA, _7e) && ($get($_.nextBs, $f($_.numA + $_.i)) == 0); //#20143
    }; //#20143
    $_.AbeforeN = function() {
        var _7m = $get($k[--$j], $_.ver); //#20144
        $k[$j++] = $ge($_.numA, _7m) && ($get($_.nextNs, $f($_.numA + $_.i)) == 0); //#20144
    }; //#20144
    $_.AbeforeE = function() {
        var _7u = $get($k[--$j], $_.ver); //#20145
        $k[$j++] = $ge($_.numA, _7u) && ($f($_.numA + $_.i) == $_.msglen); //#20145
    }; //#20145
    $_.NbeforeK = function() {
        var _81 = $get($k[--$j], $_.ver); //#20146
        $k[$j++] = $ge($_.numN, _81) && ($get($_.nextKs, $f($_.numN + $_.i)) == 0); //#20146
    }; //#20146
    $_.NbeforeB = function() {
        var _89 = $get($k[--$j], $_.ver); //#20147
        $k[$j++] = $ge($_.numN, _89) && ($get($_.nextBs, $f($_.numN + $_.i)) == 0); //#20147
    }; //#20147
    $_.NbeforeA = function() {
        var _8H = $get($k[--$j], $_.ver); //#20148
        $k[$j++] = $ge($_.numN, _8H) && ($get($_.nextAs, $f($_.numN + $_.i)) == 0); //#20148
    }; //#20148
    $_.NbeforeE = function() {
        var _8P = $get($k[--$j], $_.ver); //#20149
        $k[$j++] = $ge($_.numN, _8P) && ($f($_.numN + $_.i) == $_.msglen); //#20149
    }; //#20149
    $_.AorNbeforeB = function() {
        var _8W = $get($k[--$j], $_.ver); //#20150
        $k[$j++] = $ge($_.numAorN, _8W) && ($get($_.nextBs, $f($_.numAorN + $_.i)) == 0); //#20150
    }; //#20150
    $_.AorNbeforeE = function() {
        var _8e = $get($k[--$j], $_.ver); //#20151
        $k[$j++] = $ge($_.numAorN, _8e) && ($f($_.numAorN + $_.i) == $_.msglen); //#20151
    }; //#20151
    $_.nextNslt = function() {
        if ($get($_.nextNs, $_.i) >= $_.msglen) { //#20153
            $j--; //#20153
            $k[$j++] = true; //#20153
        } else { //#20153
            var _8u = $get($k[--$j], $_.ver); //#20153
            $k[$j++] = $lt($get($_.numNs, $f($get($_.nextNs, $_.i) + $_.i)), _8u); //#20153
        } //#20153
    }; //#20153
    if (!bwipp_qrcode.__20183__) { //#20183
        $_ = Object.create($_); //#20183
        $k[$j++] = Infinity; //#20163
        $k[$j++] = "full"; //#20167
        $k[$j++] = Infinity; //#20164
        for (var _8v = 0; _8v <= 9; _8v += 1) { //#20165
            $k[$j++] = $cvrs($s(2), _8v, 10); //#20165
            $k[$j++] = $_.v1to9; //#20165
        } //#20165
        for (var _8z = 10; _8z <= 26; _8z += 1) { //#20166
            $k[$j++] = $cvrs($s(2), _8z, 10); //#20166
            $k[$j++] = $_.v10to26; //#20166
        } //#20166
        for (var _93 = 27; _93 <= 40; _93 += 1) { //#20167
            $k[$j++] = $cvrs($s(2), _93, 10); //#20167
            $k[$j++] = $_.v27to40; //#20167
        } //#20167
        var _97 = $d(); //#20167
        var _9C = new Map([
            ["M1", $_.vM1],
            ["M2", $_.vM2],
            ["M3", $_.vM3],
            ["M4", $_.vM4]
        ]); //#20170
        var _9j = new Map([
            ["R7x43", $_.vR7x43],
            ["R7x59", $_.vR7x59],
            ["R7x77", $_.vR7x77],
            ["R7x99", $_.vR7x99],
            ["R7x139", $_.vR7x139],
            ["R9x43", $_.vR9x43],
            ["R9x59", $_.vR9x59],
            ["R9x77", $_.vR9x77],
            ["R9x99", $_.vR9x99],
            ["R9x139", $_.vR9x139],
            ["R11x27", $_.vR11x27],
            ["R11x43", $_.vR11x43],
            ["R11x59", $_.vR11x59],
            ["R11x77", $_.vR11x77],
            ["R11x99", $_.vR11x99],
            ["R11x139", $_.vR11x139],
            ["R13x27", $_.vR13x27],
            ["R13x43", $_.vR13x43],
            ["R13x59", $_.vR13x59],
            ["R13x77", $_.vR13x77],
            ["R13x99", $_.vR13x99],
            ["R13x139", $_.vR13x139],
            ["R15x43", $_.vR15x43],
            ["R15x59", $_.vR15x59],
            ["R15x77", $_.vR15x77],
            ["R15x99", $_.vR15x99],
            ["R15x139", $_.vR15x139],
            ["R17x43", $_.vR17x43],
            ["R17x59", $_.vR17x59],
            ["R17x77", $_.vR17x77],
            ["R17x99", $_.vR17x99],
            ["R17x139", $_.vR17x139]
        ]); //#20178
        $k[$j++] = _97; //#20178
        $k[$j++] = "micro"; //#20178
        $k[$j++] = _9C; //#20178
        $k[$j++] = "rmqr"; //#20178
        $k[$j++] = _9j; //#20178
        $_.versetmap = $d(); //#20180
        $_.versetfull = $a([$_.v1to9, $_.v10to26, $_.v27to40]); //#20181
        $_.versetmicro = $a([$_.vM1, $_.vM2, $_.vM3, $_.vM4]); //#20182
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_qrcode.$ctx[id] = $_[id]); //#20182
        bwipp_qrcode.__20183__ = 1; //#20182
        $_ = Object.getPrototypeOf($_); //#20182
    } //#20182
    if ($ne($_.version, "unset")) { //#20201
        var _9y = $get($_.versetmap, $_.format); //#20186
        var _9z = $_.version; //#20186
        var _A0 = $get(_9y, _9z) !== undefined; //#20186
        $k[$j++] = _9y; //#20196
        $k[$j++] = _9z; //#20196
        if (!_A0) { //#20196
            $j -= 2; //#20187
            if ($eq($_.format, "full")) { //#20194
                $k[$j++] = 'bwipp.qrcodeInvalidFullVersion#20189'; //#20189
                $k[$j++] = "Valid versions for QR Code symbols are 1 to 40"; //#20189
                bwipp_raiseerror(); //#20189
            } else { //#20194
                if ($eq($_.format, "micro")) { //#20194
                    $k[$j++] = 'bwipp.qrcodeInvalidMicroVersion#20192'; //#20192
                    $k[$j++] = "Valid versions for Micro QR Code symbols are M1 to M4"; //#20192
                    bwipp_raiseerror(); //#20192
                } else { //#20194
                    $k[$j++] = 'bwipp.qrcodeInvalidRMQRversion#20194'; //#20194
                    $k[$j++] = "Invalid version for an RMQR symbol"; //#20194
                    bwipp_raiseerror(); //#20194
                } //#20194
            } //#20194
        } //#20194
        var _A3 = $k[--$j]; //#20197
        var _A5 = $get($k[--$j], _A3); //#20197
        $k[$j++] = _A5; //#20197
        $k[$j++] = Infinity; //#20197
        var _A6 = $k[--$j]; //#20197
        var _A7 = $k[--$j]; //#20197
        $k[$j++] = _A6; //#20197
        $k[$j++] = _A7; //#20197
        $_.verset = $a(); //#20197
    } else { //#20201
        if ($eq($_.format, "full")) { //#20200
            $_.verset = $_.versetfull; //#20200
        } //#20200
        if ($eq($_.format, "micro")) { //#20201
            $_.verset = $_.versetmicro; //#20201
        } //#20201
    } //#20201
    $k[$j++] = Infinity; //#20206
    for (var _AD = 0, _AE = 39; _AD < _AE; _AD++) { //#20206
        $k[$j++] = -1; //#20206
    } //#20206
    $_.msgbits = $a(); //#20206
    $_.e = 10000; //#20207
    if (!bwipp_qrcode.__20237__) { //#20237
        $_ = Object.create($_); //#20237
        $_.mode0forceKB = $a([1, 1, 1, $_.e, $_.e, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]); //#20213
        $_.mode0forceA = $a([1, 1, 1, $_.e, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]); //#20214
        $_.mode0forceN = $a([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]); //#20215
        $_.mode0NbeforeB = $a([4, 4, 5, $_.e, $_.e, 2, 3, 2, 2, 3, 3, 3, 2, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]); //#20217
        $_.modeBKbeforeB = $a([9, 12, 13, $_.e, $_.e, 4, 6, 4, 5, 6, 6, 6, 5, 6, 6, 6, 7, 4, 6, 6, 6, 7, 7, 5, 6, 6, 7, 7, 7, 6, 6, 7, 7, 7, 6, 7, 7, 7, 8]); //#20219
        $_.modeBKbeforeA = $a([8, 10, 11, $_.e, $_.e, 4, 5, 4, 5, 5, 6, 6, 5, 5, 6, 6, 6, 4, 5, 6, 6, 6, 6, 5, 6, 6, 6, 6, 7, 6, 6, 6, 6, 7, 6, 6, 6, 7, 7]); //#20220
        $_.modeBKbeforeN = $a([8, 9, 11, $_.e, $_.e, 3, 5, 3, 4, 5, 5, 5, 4, 5, 5, 5, 6, 3, 5, 5, 5, 6, 6, 4, 5, 5, 6, 6, 6, 5, 5, 6, 6, 7, 5, 6, 6, 6, 7]); //#20221
        $_.modeBKbeforeE = $a([5, 5, 6, $_.e, $_.e, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 2, 3, 3, 3, 4, 4, 3, 3, 3, 4, 4, 4, 3, 3, 4, 4, 4, 3, 4, 4, 4, 4]); //#20222
        $_.modeBAbeforeK = $a([11, 12, 14, $_.e, $_.e, 5, 7, 5, 6, 7, 8, 8, 6, 7, 8, 8, 8, 6, 7, 8, 8, 8, 8, 6, 8, 8, 8, 8, 9, 8, 8, 8, 8, 9, 8, 8, 8, 9, 9]); //#20224
        $_.modeBAbeforeB = $a([11, 15, 16, $_.e, $_.e, 6, 7, 6, 7, 7, 8, 8, 7, 7, 8, 8, 8, 6, 7, 8, 8, 8, 9, 7, 8, 8, 8, 9, 9, 8, 8, 9, 9, 9, 8, 8, 9, 9, 10]); //#20225
        $_.modeBAbeforeN = $a([12, 13, 15, $_.e, $_.e, 6, 8, 6, 7, 8, 8, 8, 7, 8, 8, 8, 9, 6, 8, 8, 8, 9, 9, 7, 8, 8, 9, 9, 10, 8, 9, 9, 9, 10, 8, 9, 9, 10, 10]); //#20226
        $_.modeBAbeforeE = $a([6, 7, 8, $_.e, $_.e, 3, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 5, 5, 4, 4, 4, 5, 5, 5, 4, 5, 5, 5, 5, 4, 5, 5, 5, 5]); //#20227
        $_.modeBNbeforeK = $a([6, 7, 8, $_.e, $_.e, 3, 4, 3, 4, 4, 5, 5, 4, 4, 5, 5, 5, 3, 4, 5, 5, 5, 5, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]); //#20229
        $_.modeBNbeforeB = $a([6, 8, 9, $_.e, $_.e, 3, 4, 3, 4, 4, 5, 5, 4, 4, 5, 5, 5, 3, 4, 5, 5, 5, 5, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6]); //#20230
        $_.modeBNbeforeA = $a([6, 7, 8, $_.e, $_.e, 3, 4, 3, 4, 4, 5, 5, 4, 4, 5, 5, 5, 4, 4, 5, 5, 5, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 6]); //#20231
        $_.modeBNbeforeE = $a([3, 4, 4, $_.e, $_.e, 2, 3, 2, 2, 3, 3, 3, 2, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]); //#20232
        $_.modeANbeforeA = $a([13, 15, 17, $_.e, 5, 7, 9, 7, 8, 9, 9, 9, 8, 9, 9, 9, 11, 7, 9, 9, 9, 11, 11, 8, 9, 9, 10, 11, 11, 9, 10, 11, 11, 11, 9, 11, 11, 11, 11]); //#20234
        $_.modeANbeforeB = $a([13, 17, 18, $_.e, $_.e, 7, 9, 7, 8, 9, 9, 9, 8, 9, 9, 9, 10, 7, 9, 9, 9, 10, 11, 8, 9, 9, 9, 11, 11, 9, 9, 11, 11, 11, 9, 10, 11, 11, 11]); //#20235
        $_.modeANbeforeE = $a([7, 8, 9, $_.e, 3, 4, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6, 4, 5, 5, 5, 6, 6, 5, 5, 5, 5, 6, 6, 5, 5, 6, 6, 6, 5, 6, 6, 6, 6]); //#20236
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_qrcode.$ctx[id] = $_[id]); //#20236
        bwipp_qrcode.__20237__ = 1; //#20236
        $_ = Object.getPrototypeOf($_); //#20236
    } //#20236
    var _B7 = $_.verset; //#20239
    for (var _B8 = 0, _B9 = _B7.length; _B8 < _B9; _B8++) { //#20371
        $_.ver = $get(_B7, _B8); //#20240
        $_.mode = -1; //#20243
        $_.seq = $a([]); //#20243
        $_.i = 0; //#20243
        for (;;) { //#20340
            if ($_.i >= $_.msglen) { //#20244
                break; //#20244
            } //#20244
            $_.numK = $get($_.numKs, $_.i); //#20245
            $_.numB = $get($_.numBs, $_.i); //#20246
            $_.numA = $get($_.numAs, $_.i); //#20247
            $_.numN = $get($_.numNs, $_.i); //#20248
            $_.numAorN = $get($_.numAorNs, $_.i); //#20249
            $_.eci = $get($_.isECI, $_.i); //#20250
            if ($eq($_.ver, $_.vM1) && ($_.numA >= 1)) { //#20251
                $_.seq = -1; //#20251
                break; //#20251
            } //#20251
            if ($eq($_.ver, $_.vM1) && ($_.numB >= 1)) { //#20252
                $_.seq = -1; //#20252
                break; //#20252
            } //#20252
            if ($eq($_.ver, $_.vM1) && ($_.numK >= 1)) { //#20253
                $_.seq = -1; //#20253
                break; //#20253
            } //#20253
            if ($eq($_.ver, $_.vM1) && $_.eci) { //#20254
                $_.seq = -1; //#20254
                break; //#20254
            } //#20254
            if ($eq($_.ver, $_.vM2) && ($_.numB >= 1)) { //#20255
                $_.seq = -1; //#20255
                break; //#20255
            } //#20255
            if ($eq($_.ver, $_.vM2) && ($_.numK >= 1)) { //#20256
                $_.seq = -1; //#20256
                break; //#20256
            } //#20256
            if ($eq($_.ver, $_.vM2) && $_.eci) { //#20257
                $_.seq = -1; //#20257
                break; //#20257
            } //#20257
            if ($eq($_.ver, $_.vM3) && $_.eci) { //#20258
                $_.seq = -1; //#20258
                break; //#20258
            } //#20258
            if ($eq($_.ver, $_.vM4) && $_.eci) { //#20259
                $_.seq = -1; //#20259
                break; //#20259
            } //#20259
            for (;;) { //#20320
                if ($_.eci) { //#20263
                    $k[$j++] = $_.E; //#20262
                    break; //#20262
                } //#20262
                if ($_.mode == -1) { //#20278
                    $k[$j++] = $_.mode0forceKB; //#20265
                    $_.KbeforeA(); //#20265
                    if ($k[--$j]) { //#20265
                        $k[$j++] = $_.K; //#20265
                        break; //#20265
                    } //#20265
                    $k[$j++] = $_.mode0forceKB; //#20266
                    $_.KbeforeN(); //#20266
                    if ($k[--$j]) { //#20266
                        $k[$j++] = $_.K; //#20266
                        break; //#20266
                    } //#20266
                    $k[$j++] = $_.modeBKbeforeE; //#20267
                    $_.KbeforeB(); //#20267
                    if ($k[--$j]) { //#20267
                        $k[$j++] = $_.K; //#20267
                        break; //#20267
                    } //#20267
                    $k[$j++] = $_.mode0forceKB; //#20268
                    $_.KbeforeE(); //#20268
                    if ($k[--$j]) { //#20268
                        $k[$j++] = $_.K; //#20268
                        break; //#20268
                    } //#20268
                    if ($_.numK >= 1) { //#20269
                        $k[$j++] = $_.B; //#20269
                        break; //#20269
                    } //#20269
                    $k[$j++] = $_.mode0NbeforeB; //#20270
                    $_.NbeforeB(); //#20270
                    if ($k[--$j]) { //#20270
                        $k[$j++] = $_.N; //#20270
                        break; //#20270
                    } //#20270
                    $k[$j++] = $_.mode0forceKB; //#20271
                    $_.NbeforeB(); //#20271
                    if ($k[--$j]) { //#20271
                        $k[$j++] = $_.B; //#20271
                        break; //#20271
                    } //#20271
                    $k[$j++] = $_.modeANbeforeE; //#20272
                    $_.NbeforeA(); //#20272
                    if ($k[--$j]) { //#20272
                        $k[$j++] = $_.N; //#20272
                        break; //#20272
                    } //#20272
                    $k[$j++] = $_.mode0forceN; //#20273
                    $_.NbeforeE(); //#20273
                    if ($k[--$j]) { //#20273
                        $k[$j++] = $_.N; //#20273
                        break; //#20273
                    } //#20273
                    $k[$j++] = $_.modeBAbeforeE; //#20274
                    $_.AbeforeK(); //#20274
                    if ($k[--$j]) { //#20274
                        $k[$j++] = $_.A; //#20274
                        break; //#20274
                    } //#20274
                    $k[$j++] = $_.modeBAbeforeE; //#20275
                    $_.AorNbeforeB(); //#20275
                    if ($k[--$j]) { //#20275
                        $k[$j++] = $_.A; //#20275
                        break; //#20275
                    } //#20275
                    $k[$j++] = $_.mode0forceA; //#20276
                    $_.AorNbeforeE(); //#20276
                    if ($k[--$j]) { //#20276
                        $k[$j++] = $_.A; //#20276
                        break; //#20276
                    } //#20276
                    $k[$j++] = $_.B; //#20277
                    break; //#20277
                } //#20277
                if ($_.mode == $_.B) { //#20296
                    $k[$j++] = $_.modeBKbeforeB; //#20280
                    $_.KbeforeB(); //#20280
                    if ($k[--$j]) { //#20280
                        $k[$j++] = $_.K; //#20280
                        break; //#20280
                    } //#20280
                    $k[$j++] = $_.modeBKbeforeA; //#20281
                    $_.KbeforeA(); //#20281
                    if ($k[--$j]) { //#20281
                        $k[$j++] = $_.K; //#20281
                        break; //#20281
                    } //#20281
                    $k[$j++] = $_.modeBKbeforeN; //#20282
                    $_.KbeforeN(); //#20282
                    if ($k[--$j]) { //#20282
                        $k[$j++] = $_.K; //#20282
                        break; //#20282
                    } //#20282
                    $k[$j++] = $_.modeBKbeforeE; //#20283
                    $_.KbeforeE(); //#20283
                    if ($k[--$j]) { //#20283
                        $k[$j++] = $_.K; //#20283
                        break; //#20283
                    } //#20283
                    $k[$j++] = $_.modeBAbeforeK; //#20284
                    $_.AbeforeK(); //#20284
                    if ($k[--$j]) { //#20284
                        $k[$j++] = $_.A; //#20284
                        break; //#20284
                    } //#20284
                    $k[$j++] = $_.modeBAbeforeB; //#20285
                    $_.AbeforeB(); //#20285
                    if ($k[--$j]) { //#20285
                        $k[$j++] = $_.A; //#20285
                        break; //#20285
                    } //#20285
                    $k[$j++] = $_.modeBAbeforeN; //#20286
                    $_.AbeforeN(); //#20286
                    if ($k[--$j]) { //#20286
                        $k[$j++] = $_.A; //#20286
                        break; //#20286
                    } //#20286
                    $k[$j++] = $_.modeBAbeforeE; //#20287
                    $_.AbeforeE(); //#20287
                    if ($k[--$j]) { //#20287
                        $k[$j++] = $_.A; //#20287
                        break; //#20287
                    } //#20287
                    $k[$j++] = $_.modeBNbeforeK; //#20288
                    $_.NbeforeK(); //#20288
                    if ($k[--$j]) { //#20288
                        $k[$j++] = $_.N; //#20288
                        break; //#20288
                    } //#20288
                    $k[$j++] = $_.modeBNbeforeB; //#20289
                    $_.NbeforeB(); //#20289
                    if ($k[--$j]) { //#20289
                        $k[$j++] = $_.N; //#20289
                        break; //#20289
                    } //#20289
                    $k[$j++] = $_.modeBNbeforeA; //#20290
                    $_.NbeforeA(); //#20290
                    if ($k[--$j]) { //#20290
                        $k[$j++] = $_.N; //#20290
                        break; //#20290
                    } //#20290
                    $k[$j++] = $_.modeBNbeforeE; //#20291
                    $_.NbeforeE(); //#20291
                    if ($k[--$j]) { //#20291
                        $k[$j++] = $_.N; //#20291
                        break; //#20291
                    } //#20291
                    $k[$j++] = $_.modeBAbeforeE; //#20292
                    $_.AorNbeforeE(); //#20292
                    var _DH = $k[--$j]; //#20292
                    if (_DH && $le($_.numAorN, $get($_.modeBAbeforeN, $_.ver))) { //#20294
                        $k[$j++] = $_.modeBNbeforeA; //#20293
                        $_.nextNslt(); //#20293
                        if ($k[--$j]) { //#20293
                            $k[$j++] = $_.A; //#20293
                            break; //#20293
                        } //#20293
                    } //#20293
                    $k[$j++] = $_.B; //#20295
                    break; //#20295
                } //#20295
                if ($_.mode == $_.A) { //#20305
                    if ($_.numK >= 1) { //#20298
                        $k[$j++] = $_.K; //#20298
                        break; //#20298
                    } //#20298
                    if ($_.numB >= 1) { //#20299
                        $k[$j++] = $_.B; //#20299
                        break; //#20299
                    } //#20299
                    $k[$j++] = $_.modeANbeforeA; //#20300
                    $_.NbeforeA(); //#20300
                    if ($k[--$j]) { //#20300
                        $k[$j++] = $_.N; //#20300
                        break; //#20300
                    } //#20300
                    $k[$j++] = $_.modeANbeforeB; //#20301
                    $_.NbeforeB(); //#20301
                    if ($k[--$j]) { //#20301
                        $k[$j++] = $_.N; //#20301
                        break; //#20301
                    } //#20301
                    $k[$j++] = $_.modeANbeforeE; //#20302
                    $_.NbeforeE(); //#20302
                    if ($k[--$j]) { //#20302
                        $k[$j++] = $_.N; //#20302
                        break; //#20302
                    } //#20302
                    if (($_.numA >= 1) || ($_.numN >= 1)) { //#20303
                        $k[$j++] = $_.A; //#20303
                        break; //#20303
                    } //#20303
                    $k[$j++] = $_.B; //#20304
                    break; //#20304
                } //#20304
                if ($_.mode == $_.N) { //#20312
                    if ($_.numK >= 1) { //#20307
                        $k[$j++] = $_.K; //#20307
                        break; //#20307
                    } //#20307
                    if ($_.numB >= 1) { //#20308
                        $k[$j++] = $_.B; //#20308
                        break; //#20308
                    } //#20308
                    if ($_.numA >= 1) { //#20309
                        $k[$j++] = $_.A; //#20309
                        break; //#20309
                    } //#20309
                    if ($_.numN >= 1) { //#20310
                        $k[$j++] = $_.N; //#20310
                        break; //#20310
                    } //#20310
                    $k[$j++] = $_.B; //#20311
                    break; //#20311
                } //#20311
                if ($_.mode == $_.K) { //#20319
                    if ($_.numB >= 1) { //#20314
                        $k[$j++] = $_.B; //#20314
                        break; //#20314
                    } //#20314
                    if ($_.numA >= 1) { //#20315
                        $k[$j++] = $_.A; //#20315
                        break; //#20315
                    } //#20315
                    if ($_.numN >= 1) { //#20316
                        $k[$j++] = $_.N; //#20316
                        break; //#20316
                    } //#20316
                    if ($_.numK >= 1) { //#20317
                        $k[$j++] = $_.K; //#20317
                        break; //#20317
                    } //#20317
                    $k[$j++] = $_.B; //#20318
                    break; //#20318
                } //#20318
            } //#20318
            var _E1 = $k[--$j]; //#20321
            $k[$j++] = _E1; //#20321
            if ((_E1 == $_.K) && $_.fnc1first) { //#20321
                $j--; //#20321
                $k[$j++] = $_.B; //#20321
            } //#20321
            var _E5 = $k[--$j]; //#20322
            $k[$j++] = _E5; //#20338
            if (_E5 == $_.mode) { //#20337
                $j--; //#20323
                var _EB = ($_.mode == $_.K) ? 2 : 1; //#20324
                $_.dat = $geti($_.msg, $_.i, _EB); //#20324
                $k[$j++] = Infinity; //#20325
                $aload($_.seq); //#20326
                $k[$j++] = Infinity; //#20327
                var _EE = $k[--$j]; //#20327
                var _EF = $k[--$j]; //#20327
                $k[$j++] = _EE; //#20327
                $aload(_EF); //#20327
                $aload($_.dat); //#20327
                var _EH = $a(); //#20327
                $k[$j++] = _EH; //#20327
                $_.seq = $a(); //#20327
            } else { //#20337
                $_.mode = $k[--$j]; //#20330
                if ($_.mode == $_.K) { //#20331
                    $k[$j++] = $_.K; //#20331
                    $k[$j++] = $geti($_.msg, $_.i, $_.numK * 2); //#20331
                } //#20331
                if ($_.mode == $_.B) { //#20332
                    $k[$j++] = $_.B; //#20332
                    $k[$j++] = $geti($_.msg, $_.i, $_.numB); //#20332
                } //#20332
                if ($_.mode == $_.A) { //#20333
                    $k[$j++] = $_.A; //#20333
                    $k[$j++] = $geti($_.msg, $_.i, $_.numA); //#20333
                } //#20333
                if ($_.mode == $_.N) { //#20334
                    $k[$j++] = $_.N; //#20334
                    $k[$j++] = $geti($_.msg, $_.i, $_.numN); //#20334
                } //#20334
                if ($_.mode == $_.E) { //#20335
                    $_.mode = -1; //#20335
                    $k[$j++] = $_.E; //#20335
                    $k[$j++] = $geti($_.msg, $_.i, 1); //#20335
                } //#20335
                $_.dat = $k[--$j]; //#20336
                $_.sw = $k[--$j]; //#20336
                $k[$j++] = Infinity; //#20337
                $aload($_.seq); //#20337
                $k[$j++] = $_.sw; //#20337
                $k[$j++] = $_.dat; //#20337
                $_.seq = $a(); //#20337
            } //#20337
            $_.i = $_.i + $_.dat.length; //#20339
        } //#20339
        for (;;) { //#20370
            if ($_.seq == -1) { //#20344
                break; //#20344
            } //#20344
            $_.bits = $s(23648); //#20345
            $_.j = 0; //#20346
            if ($_.fnc1first) { //#20349
                if ($lt($_.ver, $_.vR7x43)) { //#20348
                    $k[$j++] = "0101"; //#20348
                } else { //#20348
                    $k[$j++] = "101"; //#20348
                } //#20348
                $_.addtobits(); //#20348
            } //#20348
            $_.abort = false; //#20350
            for (var _F7 = 0, _F6 = $_.seq.length - 1; _F7 <= _F6; _F7 += 2) { //#20365
                $_.i = _F7; //#20352
                $_.mode = $get($_.seq, $_.i); //#20353
                $k[$j++] = $get($get($_.mids, $_.ver), $_.mode); //#20354
                $_.addtobits(); //#20354
                $_.chars = $get($_.seq, $_.i + 1); //#20355
                $k[$j++] = 'charslen'; //#20356
                $k[$j++] = $_.chars.length; //#20356
                if ($_.mode == $_.K) { //#20356
                    var _FM = $k[--$j]; //#20356
                    $k[$j++] = ~~(_FM / 2); //#20356
                } //#20356
                var _FN = $k[--$j]; //#20356
                $_[$k[--$j]] = _FN; //#20356
                if ($_.mode != $_.E) { //#20363
                    $_.cclen = $get($get($_.cclens, $_.ver), $_.mode); //#20358
                    if ($_.charslen >= (~~Math.pow(2, $_.cclen))) { //#20361
                        $_.abort = true; //#20360
                        break; //#20360
                    } //#20360
                    $k[$j++] = $_.charslen; //#20362
                    $k[$j++] = $_.cclen; //#20362
                    $_.tobin(); //#20362
                    $_.addtobits(); //#20362
                } //#20362
                $k[$j++] = $_.chars; //#20364
                if ($_[$get($_.encfuncs, $_.mode)]() === true) {
                    break;
                } //#20364
                $_.addtobits(); //#20364
            } //#20364
            if ($_.abort) { //#20366
                break; //#20366
            } //#20366
            $_.bits = $geti($_.bits, 0, $_.j); //#20367
            $put($_.msgbits, $_.ver, $_.bits); //#20368
            break; //#20369
        } //#20369
    } //#20369
    if (!bwipp_qrcode.__20455__) { //#20455
        $_ = Object.create($_); //#20455
        $_.metrics = $a([$a(["micro", "M1", $_.vM1, 11, 11, 98, 99, 36, $a([2, 99, 99, 99]), $a([1, 0, -1, -1, -1, -1, -1, -1])]), $a(["micro", "M2", $_.vM2, 13, 13, 98, 99, 80, $a([5, 6, 99, 99]), $a([1, 0, 1, 0, -1, -1, -1, -1])]), $a(["micro", "M3", $_.vM3, 15, 15, 98, 99, 132, $a([6, 8, 99, 99]), $a([1, 0, 1, 0, -1, -1, -1, -1])]), $a(["micro", "M4", $_.vM4, 17, 17, 98, 99, 192, $a([8, 10, 14, 99]), $a([1, 0, 1, 0, 1, 0, -1, -1])]), $a(["full", "1", $_.v1to9, 21, 21, 98, 99, 208, $a([7, 10, 13, 17]), $a([1, 0, 1, 0, 1, 0, 1, 0])]), $a(["full", "2", $_.v1to9, 25, 25, 18, 99, 359, $a([10, 16, 22, 28]), $a([1, 0, 1, 0, 1, 0, 1, 0])]), $a(["full", "3", $_.v1to9, 29, 29, 22, 99, 567, $a([15, 26, 36, 44]), $a([1, 0, 1, 0, 2, 0, 2, 0])]), $a(["full", "4", $_.v1to9, 33, 33, 26, 99, 807, $a([20, 36, 52, 64]), $a([1, 0, 2, 0, 2, 0, 4, 0])]), $a(["full", "5", $_.v1to9, 37, 37, 30, 99, 1079, $a([26, 48, 72, 88]), $a([1, 0, 2, 0, 2, 2, 2, 2])]), $a(["full", "6", $_.v1to9, 41, 41, 34, 99, 1383, $a([36, 64, 96, 112]), $a([2, 0, 4, 0, 4, 0, 4, 0])]), $a(["full", "7", $_.v1to9, 45, 45, 22, 38, 1568, $a([40, 72, 108, 130]), $a([2, 0, 4, 0, 2, 4, 4, 1])]), $a(["full", "8", $_.v1to9, 49, 49, 24, 42, 1936, $a([48, 88, 132, 156]), $a([2, 0, 2, 2, 4, 2, 4, 2])]), $a(["full", "9", $_.v1to9, 53, 53, 26, 46, 2336, $a([60, 110, 160, 192]), $a([2, 0, 3, 2, 4, 4, 4, 4])]), $a(["full", "10", $_.v10to26, 57, 57, 28, 50, 2768, $a([72, 130, 192, 224]), $a([2, 2, 4, 1, 6, 2, 6, 2])]), $a(["full", "11", $_.v10to26, 61, 61, 30, 54, 3232, $a([80, 150, 224, 264]), $a([4, 0, 1, 4, 4, 4, 3, 8])]), $a(["full", "12", $_.v10to26, 65, 65, 32, 58, 3728, $a([96, 176, 260, 308]), $a([2, 2, 6, 2, 4, 6, 7, 4])]), $a(["full", "13", $_.v10to26, 69, 69, 34, 62, 4256, $a([104, 198, 288, 352]), $a([4, 0, 8, 1, 8, 4, 12, 4])]), $a(["full", "14", $_.v10to26, 73, 73, 26, 46, 4651, $a([120, 216, 320, 384]), $a([3, 1, 4, 5, 11, 5, 11, 5])]), $a(["full", "15", $_.v10to26, 77, 77, 26, 48, 5243, $a([132, 240, 360, 432]), $a([5, 1, 5, 5, 5, 7, 11, 7])]), $a(["full", "16", $_.v10to26, 81, 81, 26, 50, 5867, $a([144, 280, 408, 480]), $a([5, 1, 7, 3, 15, 2, 3, 13])]), $a(["full", "17", $_.v10to26, 85, 85, 30, 54, 6523, $a([168, 308, 448, 532]), $a([1, 5, 10, 1, 1, 15, 2, 17])]), $a(["full", "18", $_.v10to26, 89, 89, 30, 56, 7211, $a([180, 338, 504, 588]), $a([5, 1, 9, 4, 17, 1, 2, 19])]), $a(["full", "19", $_.v10to26, 93, 93, 30, 58, 7931, $a([196, 364, 546, 650]), $a([3, 4, 3, 11, 17, 4, 9, 16])]), $a(["full", "20", $_.v10to26, 97, 97, 34, 62, 8683, $a([224, 416, 600, 700]), $a([3, 5, 3, 13, 15, 5, 15, 10])]), $a(["full", "21", $_.v10to26, 101, 101, 28, 50, 9252, $a([224, 442, 644, 750]), $a([4, 4, 17, 0, 17, 6, 19, 6])]), $a(["full", "22", $_.v10to26, 105, 105, 26, 50, 10068, $a([252, 476, 690, 816]), $a([2, 7, 17, 0, 7, 16, 34, 0])]), $a(["full", "23", $_.v10to26, 109, 109, 30, 54, 10916, $a([270, 504, 750, 900]), $a([4, 5, 4, 14, 11, 14, 16, 14])]), $a(["full", "24", $_.v10to26, 113, 113, 28, 54, 11796, $a([300, 560, 810, 960]), $a([6, 4, 6, 14, 11, 16, 30, 2])]), $a(["full", "25", $_.v10to26, 117, 117, 32, 58, 12708, $a([312, 588, 870, 1050]), $a([8, 4, 8, 13, 7, 22, 22, 13])]), $a(["full", "26", $_.v10to26, 121, 121, 30, 58, 13652, $a([336, 644, 952, 1110]), $a([10, 2, 19, 4, 28, 6, 33, 4])]), $a(["full", "27", $_.v27to40, 125, 125, 34, 62, 14628, $a([360, 700, 1020, 1200]), $a([8, 4, 22, 3, 8, 26, 12, 28])]), $a(["full", "28", $_.v27to40, 129, 129, 26, 50, 15371, $a([390, 728, 1050, 1260]), $a([3, 10, 3, 23, 4, 31, 11, 31])]), $a(["full", "29", $_.v27to40, 133, 133, 30, 54, 16411, $a([420, 784, 1140, 1350]), $a([7, 7, 21, 7, 1, 37, 19, 26])]), $a(["full", "30", $_.v27to40, 137, 137, 26, 52, 17483, $a([450, 812, 1200, 1440]), $a([5, 10, 19, 10, 15, 25, 23, 25])]), $a(["full", "31", $_.v27to40, 141, 141, 30, 56, 18587, $a([480, 868, 1290, 1530]), $a([13, 3, 2, 29, 42, 1, 23, 28])]), $a(["full", "32", $_.v27to40, 145, 145, 34, 60, 19723, $a([510, 924, 1350, 1620]), $a([17, 0, 10, 23, 10, 35, 19, 35])]), $a(["full", "33", $_.v27to40, 149, 149, 30, 58, 20891, $a([540, 980, 1440, 1710]), $a([17, 1, 14, 21, 29, 19, 11, 46])]), $a(["full", "34", $_.v27to40, 153, 153, 34, 62, 22091, $a([570, 1036, 1530, 1800]), $a([13, 6, 14, 23, 44, 7, 59, 1])]), $a(["full", "35", $_.v27to40, 157, 157, 30, 54, 23008, $a([570, 1064, 1590, 1890]), $a([12, 7, 12, 26, 39, 14, 22, 41])]), $a(["full", "36", $_.v27to40, 161, 161, 24, 50, 24272, $a([600, 1120, 1680, 1980]), $a([6, 14, 6, 34, 46, 10, 2, 64])]), $a(["full", "37", $_.v27to40, 165, 165, 28, 54, 25568, $a([630, 1204, 1770, 2100]), $a([17, 4, 29, 14, 49, 10, 24, 46])]), $a(["full", "38", $_.v27to40, 169, 169, 32, 58, 26896, $a([660, 1260, 1860, 2220]), $a([4, 18, 13, 32, 48, 14, 42, 32])]), $a(["full", "39", $_.v27to40, 173, 173, 26, 54, 28256, $a([720, 1316, 1950, 2310]), $a([20, 4, 40, 7, 43, 22, 10, 67])]), $a(["full", "40", $_.v27to40, 177, 177, 30, 58, 29648, $a([750, 1372, 2040, 2430]), $a([19, 6, 18, 31, 34, 34, 20, 61])]), $a(["rmqr", "R7x43", $_.vR7x43, 7, 43, 22, 99, 104, $a([99, 7, 99, 10]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R7x59", $_.vR7x59, 7, 59, 20, 40, 171, $a([99, 9, 99, 14]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R7x77", $_.vR7x77, 7, 77, 26, 52, 261, $a([99, 12, 99, 22]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R7x99", $_.vR7x99, 7, 99, 24, 50, 358, $a([99, 16, 99, 30]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R7x139", $_.vR7x139, 7, 139, 28, 56, 545, $a([99, 24, 99, 44]), $a([-1, -1, 1, 0, -1, -1, 2, 0])]), $a(["rmqr", "R9x43", $_.vR9x43, 9, 43, 22, 99, 170, $a([99, 9, 99, 14]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R9x59", $_.vR9x59, 9, 59, 20, 40, 267, $a([99, 12, 99, 22]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R9x77", $_.vR9x77, 9, 77, 26, 52, 393, $a([99, 18, 99, 32]), $a([-1, -1, 1, 0, -1, -1, 1, 1])]), $a(["rmqr", "R9x99", $_.vR9x99, 9, 99, 24, 50, 532, $a([99, 24, 99, 44]), $a([-1, -1, 1, 0, -1, -1, 2, 0])]), $a(["rmqr", "R9x139", $_.vR9x139, 9, 139, 28, 56, 797, $a([99, 36, 99, 66]), $a([-1, -1, 1, 1, -1, -1, 3, 0])]), $a(["rmqr", "R11x27", $_.vR11x27, 11, 27, 98, 99, 122, $a([99, 8, 99, 10]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R11x43", $_.vR11x43, 11, 43, 22, 99, 249, $a([99, 12, 99, 20]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R11x59", $_.vR11x59, 11, 59, 20, 40, 376, $a([99, 16, 99, 32]), $a([-1, -1, 1, 0, -1, -1, 1, 1])]), $a(["rmqr", "R11x77", $_.vR11x77, 11, 77, 26, 52, 538, $a([99, 24, 99, 44]), $a([-1, -1, 1, 0, -1, -1, 1, 1])]), $a(["rmqr", "R11x99", $_.vR11x99, 11, 99, 24, 50, 719, $a([99, 32, 99, 60]), $a([-1, -1, 1, 1, -1, -1, 1, 1])]), $a(["rmqr", "R11x139", $_.vR11x139, 11, 139, 28, 56, 1062, $a([99, 48, 99, 90]), $a([-1, -1, 2, 0, -1, -1, 3, 0])]), $a(["rmqr", "R13x27", $_.vR13x27, 13, 27, 98, 99, 172, $a([99, 9, 99, 14]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R13x43", $_.vR13x43, 13, 43, 22, 99, 329, $a([99, 14, 99, 28]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R13x59", $_.vR13x59, 13, 59, 20, 40, 486, $a([99, 22, 99, 40]), $a([-1, -1, 1, 0, -1, -1, 2, 0])]), $a(["rmqr", "R13x77", $_.vR13x77, 13, 77, 26, 52, 684, $a([99, 32, 99, 56]), $a([-1, -1, 1, 1, -1, -1, 1, 1])]), $a(["rmqr", "R13x99", $_.vR13x99, 13, 99, 24, 50, 907, $a([99, 40, 99, 78]), $a([-1, -1, 1, 1, -1, -1, 1, 2])]), $a(["rmqr", "R13x139", $_.vR13x139, 13, 139, 28, 56, 1328, $a([99, 60, 99, 112]), $a([-1, -1, 2, 1, -1, -1, 2, 2])]), $a(["rmqr", "R15x43", $_.vR15x43, 15, 43, 22, 99, 409, $a([99, 18, 99, 36]), $a([-1, -1, 1, 0, -1, -1, 1, 1])]), $a(["rmqr", "R15x59", $_.vR15x59, 15, 59, 20, 40, 596, $a([99, 26, 99, 48]), $a([-1, -1, 1, 0, -1, -1, 2, 0])]), $a(["rmqr", "R15x77", $_.vR15x77, 15, 77, 26, 52, 830, $a([99, 36, 99, 72]), $a([-1, -1, 1, 1, -1, -1, 2, 1])]), $a(["rmqr", "R15x99", $_.vR15x99, 15, 99, 24, 50, 1095, $a([99, 48, 99, 88]), $a([-1, -1, 2, 0, -1, -1, 4, 0])]), $a(["rmqr", "R15x139", $_.vR15x139, 15, 139, 28, 56, 1594, $a([99, 72, 99, 130]), $a([-1, -1, 2, 1, -1, -1, 1, 4])]), $a(["rmqr", "R17x43", $_.vR17x43, 17, 43, 22, 99, 489, $a([99, 22, 99, 40]), $a([-1, -1, 1, 0, -1, -1, 1, 1])]), $a(["rmqr", "R17x59", $_.vR17x59, 17, 59, 20, 40, 706, $a([99, 32, 99, 60]), $a([-1, -1, 2, 0, -1, -1, 2, 0])]), $a(["rmqr", "R17x77", $_.vR17x77, 17, 77, 26, 52, 976, $a([99, 44, 99, 84]), $a([-1, -1, 2, 0, -1, -1, 1, 2])]), $a(["rmqr", "R17x99", $_.vR17x99, 17, 99, 24, 50, 1283, $a([99, 60, 99, 104]), $a([-1, -1, 2, 1, -1, -1, 4, 0])]), $a(["rmqr", "R17x139", $_.vR17x139, 17, 139, 28, 56, 1860, $a([99, 80, 99, 156]), $a([-1, -1, 4, 0, -1, -1, 2, 4])])]); //#20454
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_qrcode.$ctx[id] = $_[id]); //#20454
        bwipp_qrcode.__20455__ = 1; //#20454
        $_ = Object.getPrototypeOf($_); //#20454
    } //#20454
    $k[$j++] = 'eclval'; //#20457
    $search("LMQH", $_.eclevel); //#20457
    $j--; //#20457
    var _Kj = $k[--$j]; //#20457
    var _Kk = $k[--$j]; //#20457
    $k[$j++] = _Kj.length; //#20457
    $k[$j++] = _Kk; //#20457
    $j--; //#20457
    var _Kl = $k[--$j]; //#20457
    var _Km = $k[--$j]; //#20457
    $k[$j++] = _Kl; //#20457
    $k[$j++] = _Km; //#20457
    $j--; //#20457
    var _Kn = $k[--$j]; //#20457
    $_[$k[--$j]] = _Kn; //#20457
    for (var _Kr = 0, _Kq = $_.metrics.length - 1; _Kr <= _Kq; _Kr += 1) { //#20496
        $_.i = _Kr; //#20459
        $_.m = $get($_.metrics, $_.i); //#20460
        $_.frmt = $get($_.m, 0); //#20461
        $_.vers = $get($_.m, 1); //#20462
        $_.vergrp = $get($_.m, 2); //#20463
        $_.verind = $_.i - 44; //#20464
        $_.rows = $get($_.m, 3); //#20465
        $_.cols = $get($_.m, 4); //#20466
        $_.asp2 = $get($_.m, 5); //#20467
        $_.asp3 = $get($_.m, 6); //#20468
        $_.nmod = $get($_.m, 7); //#20469
        $_.ncws = ~~($_.nmod / 8); //#20470
        $_.rbit = $_.nmod % 8; //#20471
        $_.lc4b = false; //#20472
        if ($eq($_.vers, "M1") || $eq($_.vers, "M3")) { //#20477
            $_.ncws = $_.ncws + 1; //#20474
            $_.rbit = 0; //#20475
            $_.lc4b = true; //#20476
        } //#20476
        $_.ecws = $get($get($_.m, 8), $_.eclval); //#20478
        $_.dcws = $f($_.ncws - $_.ecws); //#20479
        var _LP = $_.lc4b ? 4 : 0; //#20480
        $_.dmod = $f(($_.dcws * 8) - _LP); //#20480
        $_.ecb1 = $get($get($_.m, 9), $_.eclval * 2); //#20481
        $_.ecb2 = $get($get($_.m, 9), $f(($_.eclval * 2) + 1)); //#20482
        $_.okay = true; //#20483
        if ($ne($_.format, $_.frmt)) { //#20484
            $_.okay = false; //#20484
        } //#20484
        if ($eq($_.frmt, "micro") && $_.fnc1first) { //#20485
            $_.okay = false; //#20485
        } //#20485
        if ($ne($_.version, "unset") && $ne($_.version, $_.vers)) { //#20486
            $_.okay = false; //#20486
        } //#20486
        if (($_.ecb1 == -1) || ($_.ecb2 == -1)) { //#20487
            $_.okay = false; //#20487
        } //#20487
        $_.verbits = $get($_.msgbits, $_.vergrp); //#20488
        if ($_.verbits == -1) { //#20492
            $_.okay = false; //#20490
        } else { //#20492
            if ($_.verbits.length > $_.dmod) { //#20492
                $_.okay = false; //#20492
            } //#20492
        } //#20492
        $_.term = $geti("000000000", 0, $get($_.termlens, $_.vergrp)); //#20494
        if ($_.okay) { //#20495
            break; //#20495
        } //#20495
    } //#20495
    if (!$_.okay) { //#20500
        $k[$j++] = 'bwipp.qrcodeNoValidSymbol#20499'; //#20499
        $k[$j++] = "Maximum length exceeded or invalid content"; //#20499
        bwipp_raiseerror(); //#20499
    } //#20499
    $_.format = $_.frmt; //#20502
    $_.version = $_.vers; //#20503
    $_.msgbits = $_.verbits; //#20504
    $_.dcpb = ~~($_.dcws / $f($_.ecb1 + $_.ecb2)); //#20505
    $_.ecpb = (~~($_.ncws / $f($_.ecb1 + $_.ecb2))) - $_.dcpb; //#20506
    var _M3 = $_.term; //#20509
    var _M4 = $_.dmod; //#20509
    var _M5 = $_.msgbits; //#20509
    var _M6 = $_.term; //#20509
    var _M7 = _M6.length; //#20509
    var _M8 = $f(_M4 - _M5.length); //#20509
    if ($f(_M4 - _M5.length) > _M6.length) { //#20509
        var _ = _M7; //#20509
        _M7 = _M8; //#20509
        _M8 = _; //#20509
    } //#20509
    $_.term = $geti(_M3, 0, _M8); //#20509
    var _MC = $s($_.msgbits.length + $_.term.length); //#20510
    $puti(_MC, 0, $_.msgbits); //#20511
    $puti(_MC, $_.msgbits.length, $_.term); //#20512
    $_.msgbits = _MC; //#20513
    $_.pad = $s($_.dmod); //#20516
    for (var _MK = 0, _MJ = $_.pad.length - 1; _MK <= _MJ; _MK += 1) { //#20517
        $put($_.pad, _MK, 48); //#20517
    } //#20517
    $puti($_.pad, 0, $_.msgbits); //#20518
    $_.padnum = 0; //#20519
    var _MR = $_.lc4b ? 5 : 1; //#20520
    for (var _MT = ~~(Math.ceil($_.msgbits.length / 8) * 8), _MS = $f($_.dmod - _MR); _MT <= _MS; _MT += 8) { //#20523
        $puti($_.pad, _MT, $get($_.padstrs, $_.padnum)); //#20521
        $_.padnum = ($_.padnum + 1) % 2; //#20522
    } //#20522
    $_.cws = $a($_.dcws); //#20526
    for (var _Md = 0, _Mc = $_.cws.length - 1; _Md <= _Mc; _Md += 1) { //#20538
        $_.c = _Md; //#20528
        $_.bpcw = 8; //#20529
        if ($_.lc4b && ($_.c == ($_.cws.length - 1))) { //#20530
            $_.bpcw = 4; //#20530
        } //#20530
        $_.cwb = $geti($_.pad, $_.c * 8, $_.bpcw); //#20531
        $_.cw = 0; //#20532
        for (var _Mn = 0, _Mm = $_.bpcw - 1; _Mn <= _Mm; _Mn += 1) { //#20536
            $_.i = _Mn; //#20534
            $_.cw = $f($_.cw + ((~~(Math.pow(2, ($_.bpcw - $_.i) - 1))) * $f($get($_.cwb, $_.i) - 48))); //#20535
        } //#20535
        $put($_.cws, $_.c, $_.cw); //#20537
    } //#20537
    if ($_.lc4b) { //#20541
        var _My = $_.cws; //#20541
        var _Mz = $_.cws; //#20541
        $put(_My, _Mz.length - 1, $get(_My, _Mz.length - 1) << 4); //#20541
    } //#20541
    var _N2 = $get($_.options, 'debugcws') !== undefined; //#20543
    if (_N2) { //#20543
        $k[$j++] = 'bwipp.debugcws#20543'; //#20543
        $k[$j++] = $_.cws; //#20543
        bwipp_raiseerror(); //#20543
    } //#20543
    if (!bwipp_qrcode.__20550__) { //#20550
        $_ = Object.create($_); //#20550
        $k[$j++] = Infinity; //#20547
        $k[$j++] = 1; //#20547
        for (var _N4 = 0, _N5 = 255; _N4 < _N5; _N4++) { //#20547
            var _N6 = $k[--$j]; //#20547
            var _N7 = _N6 * 2; //#20547
            $k[$j++] = _N6; //#20547
            $k[$j++] = _N7; //#20547
            if (_N7 >= 256) { //#20547
                var _N8 = $k[--$j]; //#20547
                $k[$j++] = _N8 ^ 285; //#20547
            } //#20547
        } //#20547
        $_.rsalog = $a(); //#20547
        $_.rslog = $a(256); //#20548
        for (var _NB = 1; _NB <= 255; _NB += 1) { //#20549
            $put($_.rslog, $get($_.rsalog, _NB), _NB); //#20549
        } //#20549
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_qrcode.$ctx[id] = $_[id]); //#20549
        bwipp_qrcode.__20550__ = 1; //#20549
        $_ = Object.getPrototypeOf($_); //#20549
    } //#20549
    $_.rsprod = function() {
        var _NG = $k[--$j]; //#20554
        var _NH = $k[--$j]; //#20554
        $k[$j++] = _NH; //#20558
        $k[$j++] = _NG; //#20558
        if ((_NG != 0) && (_NH != 0)) { //#20557
            var _NK = $get($_.rslog, $k[--$j]); //#20555
            var _NP = $get($_.rsalog, $f(_NK + $get($_.rslog, $k[--$j])) % 255); //#20555
            $k[$j++] = _NP; //#20555
        } else { //#20557
            $j -= 2; //#20557
            $k[$j++] = 0; //#20557
        } //#20557
    }; //#20557
    $k[$j++] = Infinity; //#20562
    $k[$j++] = 1; //#20562
    for (var _NR = 0, _NS = $_.ecpb; _NR < _NS; _NR++) { //#20562
        $k[$j++] = 0; //#20562
    } //#20562
    $_.coeffs = $a(); //#20562
    for (var _NW = 0, _NV = $_.ecpb - 1; _NW <= _NV; _NW += 1) { //#20571
        $_.i = _NW; //#20564
        $put($_.coeffs, $_.i + 1, $get($_.coeffs, $_.i)); //#20565
        for (var _Nd = $_.i; _Nd >= 1; _Nd -= 1) { //#20569
            $_.j = _Nd; //#20567
            $k[$j++] = $_.coeffs; //#20568
            $k[$j++] = $_.j; //#20568
            $k[$j++] = $get($_.coeffs, $_.j - 1); //#20568
            $k[$j++] = $get($_.coeffs, $_.j); //#20568
            $k[$j++] = $get($_.rsalog, $_.i); //#20568
            $_.rsprod(); //#20568
            var _Np = $k[--$j]; //#20568
            var _Nq = $k[--$j]; //#20568
            var _Nr = $k[--$j]; //#20568
            $put($k[--$j], _Nr, $xo(_Nq, _Np)); //#20568
        } //#20568
        $k[$j++] = $_.coeffs; //#20570
        $k[$j++] = 0; //#20570
        $k[$j++] = $get($_.coeffs, 0); //#20570
        $k[$j++] = $get($_.rsalog, $_.i); //#20570
        $_.rsprod(); //#20570
        var _Nz = $k[--$j]; //#20570
        var _O0 = $k[--$j]; //#20570
        $put($k[--$j], _O0, _Nz); //#20570
    } //#20570
    $_.coeffs = $geti($_.coeffs, 0, $_.coeffs.length - 1); //#20572
    $_.rscodes = function() {
        $_.rscws = $k[--$j]; //#20576
        $_.rsnd = $_.rscws.length; //#20577
        $k[$j++] = Infinity; //#20578
        $forall($_.rscws); //#20578
        for (var _O9 = 0, _OA = $_.ecpb; _O9 < _OA; _O9++) { //#20578
            $k[$j++] = 0; //#20578
        } //#20578
        $_.rscws = $a(); //#20578
        for (var _OE = 0, _OD = $_.rsnd - 1; _OE <= _OD; _OE += 1) { //#20586
            $_.m = _OE; //#20580
            $_.k = $get($_.rscws, $_.m); //#20581
            for (var _OK = 0, _OJ = $_.ecpb - 1; _OK <= _OJ; _OK += 1) { //#20585
                $_.j = _OK; //#20583
                $k[$j++] = $_.rscws; //#20584
                $k[$j++] = ($_.m + $_.j) + 1; //#20584
                $k[$j++] = $get($_.coeffs, ($_.ecpb - $_.j) - 1); //#20584
                $k[$j++] = $_.k; //#20584
                $_.rsprod(); //#20584
                var _OX = $k[--$j]; //#20584
                var _OY = $k[--$j]; //#20584
                $put($k[--$j], _OY, $xo(_OX, $get($_.rscws, ($_.m + $_.j) + 1))); //#20584
            } //#20584
        } //#20584
        $k[$j++] = $geti($_.rscws, $_.rsnd, $_.ecpb); //#20587
    }; //#20587
    $_.dcwsb = $a($f($_.ecb1 + $_.ecb2)); //#20591
    $_.ecwsb = $a($f($_.ecb1 + $_.ecb2)); //#20592
    for (var _Om = 0, _Ol = $f($_.ecb1 - 1); _Om <= _Ol; _Om += 1) { //#20597
        $_.i = _Om; //#20594
        $put($_.dcwsb, $_.i, $geti($_.cws, $_.i * $_.dcpb, $_.dcpb)); //#20595
        $k[$j++] = $_.ecwsb; //#20596
        $k[$j++] = $_.i; //#20596
        $k[$j++] = $get($_.dcwsb, $_.i); //#20596
        $_.rscodes(); //#20596
        var _Oz = $k[--$j]; //#20596
        var _P0 = $k[--$j]; //#20596
        $put($k[--$j], _P0, _Oz); //#20596
    } //#20596
    for (var _P4 = 0, _P3 = $f($_.ecb2 - 1); _P4 <= _P3; _P4 += 1) { //#20602
        $_.i = _P4; //#20599
        $put($_.dcwsb, $f($_.ecb1 + $_.i), $geti($_.cws, $f(($_.ecb1 * $_.dcpb) + ($_.i * ($_.dcpb + 1))), $_.dcpb + 1)); //#20600
        $k[$j++] = $_.ecwsb; //#20601
        $k[$j++] = $f($_.ecb1 + $_.i); //#20601
        $k[$j++] = $get($_.dcwsb, $f($_.ecb1 + $_.i)); //#20601
        $_.rscodes(); //#20601
        var _PM = $k[--$j]; //#20601
        var _PN = $k[--$j]; //#20601
        $put($k[--$j], _PN, _PM); //#20601
    } //#20601
    $_.cws = $a($_.ncws); //#20605
    $_.cw = 0; //#20606
    for (var _PT = 0, _PS = $_.dcpb; _PT <= _PS; _PT += 1) { //#20616
        $_.i = _PT; //#20608
        for (var _PX = 0, _PW = $f($f($_.ecb1 + $_.ecb2) - 1); _PX <= _PW; _PX += 1) { //#20615
            $_.j = _PX; //#20610
            if ($_.i < $get($_.dcwsb, $_.j).length) { //#20614
                $put($_.cws, $_.cw, $get($get($_.dcwsb, $_.j), $_.i)); //#20612
                $_.cw = $_.cw + 1; //#20613
            } //#20613
        } //#20613
    } //#20613
    for (var _Pm = 0, _Pl = $_.ecpb - 1; _Pm <= _Pl; _Pm += 1) { //#20624
        $_.i = _Pm; //#20618
        for (var _Pq = 0, _Pp = $f($f($_.ecb1 + $_.ecb2) - 1); _Pq <= _Pp; _Pq += 1) { //#20623
            $_.j = _Pq; //#20620
            $put($_.cws, $_.cw, $get($get($_.ecwsb, $_.j), $_.i)); //#20621
            $_.cw = $_.cw + 1; //#20622
        } //#20622
    } //#20622
    if ($_.rbit > 0) { //#20632
        $_.pad = $a($_.cws.length + 1); //#20628
        $puti($_.pad, 0, $_.cws); //#20629
        $put($_.pad, $_.pad.length - 1, 0); //#20630
        $_.cws = $_.pad; //#20631
    } //#20631
    if ($_.lc4b) { //#20643
        var _Q8 = $_.cws; //#20636
        var _Q9 = $_.dcws; //#20636
        $put(_Q8, $f(_Q9 - 1), $get(_Q8, $f(_Q9 - 1)) >>> 4); //#20636
        for (var _QE = $f($_.dcws - 1), _QD = $_.ncws - 2; _QE <= _QD; _QE += 1) { //#20641
            $_.i = _QE; //#20638
            $put($_.cws, $_.i, ($get($_.cws, $_.i) & 15) << 4); //#20639
            $put($_.cws, $_.i, (($get($_.cws, $_.i + 1) >>> 4) & 15) | $get($_.cws, $_.i)); //#20640
        } //#20640
        $put($_.cws, $_.ncws - 1, ($get($_.cws, $_.ncws - 1) & 15) << 4); //#20642
    } //#20642
    var _QY = $get($_.options, 'debugecc') !== undefined; //#20645
    if (_QY) { //#20645
        $k[$j++] = 'bwipp.debugecc#20645'; //#20645
        $k[$j++] = $_.cws; //#20645
        bwipp_raiseerror(); //#20645
    } //#20645
    $k[$j++] = Infinity; //#20648
    for (var _Qc = 0, _Qd = $_.rows * $_.cols; _Qc < _Qd; _Qc++) { //#20648
        $k[$j++] = -1; //#20648
    } //#20648
    $_.pixs = $a(); //#20648
    $_.qmv = function() {
        var _Qg = $k[--$j]; //#20649
        var _Qh = $k[--$j]; //#20649
        $k[$j++] = $f(_Qh + (_Qg * $_.cols)); //#20649
    }; //#20649
    if ($eq($_.format, "full")) { //#20658
        for (var _Ql = 8, _Qk = $f($_.cols - 9); _Ql <= _Qk; _Ql += 1) { //#20657
            $_.i = _Ql; //#20654
            $k[$j++] = $_.pixs; //#20655
            $k[$j++] = $_.i; //#20655
            $k[$j++] = 6; //#20655
            $_.qmv(); //#20655
            var _Qp = $k[--$j]; //#20655
            $put($k[--$j], _Qp, ($_.i + 1) % 2); //#20655
            $k[$j++] = $_.pixs; //#20656
            $k[$j++] = 6; //#20656
            $k[$j++] = $_.i; //#20656
            $_.qmv(); //#20656
            var _Qu = $k[--$j]; //#20656
            $put($k[--$j], _Qu, ($_.i + 1) % 2); //#20656
        } //#20656
    } //#20656
    if ($eq($_.format, "micro")) { //#20665
        for (var _Qz = 8, _Qy = $f($_.cols - 1); _Qz <= _Qy; _Qz += 1) { //#20664
            $_.i = _Qz; //#20661
            $k[$j++] = $_.pixs; //#20662
            $k[$j++] = $_.i; //#20662
            $k[$j++] = 0; //#20662
            $_.qmv(); //#20662
            var _R3 = $k[--$j]; //#20662
            $put($k[--$j], _R3, ($_.i + 1) % 2); //#20662
            $k[$j++] = $_.pixs; //#20663
            $k[$j++] = 0; //#20663
            $k[$j++] = $_.i; //#20663
            $_.qmv(); //#20663
            var _R8 = $k[--$j]; //#20663
            $put($k[--$j], _R8, ($_.i + 1) % 2); //#20663
        } //#20663
    } //#20663
    if ($eq($_.format, "rmqr")) { //#20684
        for (var _RD = 3, _RC = $f($_.cols - 4); _RD <= _RC; _RD += 1) { //#20671
            $_.i = _RD; //#20668
            $k[$j++] = $_.pixs; //#20669
            $k[$j++] = $_.i; //#20669
            $k[$j++] = 0; //#20669
            $_.qmv(); //#20669
            var _RH = $k[--$j]; //#20669
            $put($k[--$j], _RH, ($_.i + 1) % 2); //#20669
            $k[$j++] = $_.pixs; //#20670
            $k[$j++] = $_.i; //#20670
            $k[$j++] = $f($_.rows - 1); //#20670
            $_.qmv(); //#20670
            var _RN = $k[--$j]; //#20670
            $put($k[--$j], _RN, ($_.i + 1) % 2); //#20670
        } //#20670
        for (var _RR = 3, _RQ = $f($_.rows - 4); _RR <= _RQ; _RR += 1) { //#20676
            $_.i = _RR; //#20673
            $k[$j++] = $_.pixs; //#20674
            $k[$j++] = 0; //#20674
            $k[$j++] = $_.i; //#20674
            $_.qmv(); //#20674
            var _RV = $k[--$j]; //#20674
            $put($k[--$j], _RV, ($_.i + 1) % 2); //#20674
            $k[$j++] = $_.pixs; //#20675
            $k[$j++] = $f($_.cols - 1); //#20675
            $k[$j++] = $_.i; //#20675
            $_.qmv(); //#20675
            var _Rb = $k[--$j]; //#20675
            $put($k[--$j], _Rb, ($_.i + 1) % 2); //#20675
        } //#20675
        for (var _Ri = $f($_.asp2 - 1), _Rj = $f($_.asp3 - $_.asp2), _Rh = $f($_.cols - 13); _Rj < 0 ? _Ri >= _Rh : _Ri <= _Rh; _Ri += _Rj) { //#20683
            $_.i = _Ri; //#20678
            for (var _Rm = 3, _Rl = $f($_.rows - 4); _Rm <= _Rl; _Rm += 1) { //#20682
                $_.j = _Rm; //#20680
                $k[$j++] = $_.pixs; //#20681
                $k[$j++] = $_.i; //#20681
                $k[$j++] = $_.j; //#20681
                $_.qmv(); //#20681
                var _Rr = $k[--$j]; //#20681
                $put($k[--$j], _Rr, ($_.j + 1) % 2); //#20681
            } //#20681
        } //#20681
    } //#20681
    if (!bwipp_qrcode.__20734__) { //#20734
        $_ = Object.create($_); //#20734
        $_.fpat = $a([$a([1, 1, 1, 1, 1, 1, 1, 0]), $a([1, 0, 0, 0, 0, 0, 1, 0]), $a([1, 0, 1, 1, 1, 0, 1, 0]), $a([1, 0, 1, 1, 1, 0, 1, 0]), $a([1, 0, 1, 1, 1, 0, 1, 0]), $a([1, 0, 0, 0, 0, 0, 1, 0]), $a([1, 1, 1, 1, 1, 1, 1, 0]), $a([0, 0, 0, 0, 0, 0, 0, 0])]); //#20697
        $_.fsubpat = $a([$a([1, 1, 1, 1, 1, 9, 9, 9]), $a([1, 0, 0, 0, 1, 9, 9, 9]), $a([1, 0, 1, 0, 1, 9, 9, 9]), $a([1, 0, 0, 0, 1, 9, 9, 9]), $a([1, 1, 1, 1, 1, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9])]); //#20707
        $_.fcorpat = $a([$a([1, 1, 1, 9, 9, 9, 9, 9]), $a([1, 0, 9, 9, 9, 9, 9, 9]), $a([1, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9])]); //#20717
        $_.fnullpat = $a([$a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9])]); //#20727
        var _Si = new Map([
            ["full", $a([$_.fpat, $_.fpat, $_.fpat, $_.fnullpat])],
            ["micro", $a([$_.fpat, $_.fnullpat, $_.fnullpat, $_.fnullpat])],
            ["rmqr", $a([$_.fpat, $_.fcorpat, $_.fcorpat, $_.fsubpat])]
        ]); //#20732
        $_.fpatmap = _Si; //#20733
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_qrcode.$ctx[id] = $_[id]); //#20733
        bwipp_qrcode.__20734__ = 1; //#20733
        $_ = Object.getPrototypeOf($_); //#20733
    } //#20733
    $_.fpats = $get($_.fpatmap, $_.format); //#20735
    for (var _Sn = 0; _Sn <= 7; _Sn += 1) { //#20749
        $_.y = _Sn; //#20737
        for (var _So = 0; _So <= 7; _So += 1) { //#20748
            $_.x = _So; //#20739
            $_.fpb0 = $get($get($get($_.fpats, 0), $_.y), $_.x); //#20740
            $_.fpb1 = $get($get($get($_.fpats, 1), $_.y), $_.x); //#20741
            $_.fpb2 = $get($get($get($_.fpats, 2), $_.y), $_.x); //#20742
            $_.fpb3 = $get($get($get($_.fpats, 3), $_.y), $_.x); //#20743
            if (($_.fpb0 != 9) && ($_.y < $_.rows)) { //#20744
                $k[$j++] = $_.pixs; //#20744
                $k[$j++] = $_.x; //#20744
                $k[$j++] = $_.y; //#20744
                $_.qmv(); //#20744
                var _TK = $k[--$j]; //#20744
                $put($k[--$j], _TK, $_.fpb0); //#20744
            } //#20744
            if ($_.fpb1 != 9) { //#20745
                $k[$j++] = $_.pixs; //#20745
                $k[$j++] = $f($f($_.cols - $_.x) - 1); //#20745
                $k[$j++] = $_.y; //#20745
                $_.qmv(); //#20745
                var _TS = $k[--$j]; //#20745
                $put($k[--$j], _TS, $_.fpb1); //#20745
            } //#20745
            if ($_.fpb2 != 9) { //#20746
                $k[$j++] = $_.pixs; //#20746
                $k[$j++] = $_.x; //#20746
                $k[$j++] = $f($f($_.rows - $_.y) - 1); //#20746
                $_.qmv(); //#20746
                var _Ta = $k[--$j]; //#20746
                $put($k[--$j], _Ta, $_.fpb2); //#20746
            } //#20746
            if ($_.fpb3 != 9) { //#20747
                $k[$j++] = $_.pixs; //#20747
                $k[$j++] = $f($f($_.cols - $_.x) - 1); //#20747
                $k[$j++] = $f($f($_.rows - $_.y) - 1); //#20747
                $_.qmv(); //#20747
                var _Tj = $k[--$j]; //#20747
                $put($k[--$j], _Tj, $_.fpb3); //#20747
            } //#20747
        } //#20747
    } //#20747
    if (!bwipp_qrcode.__20767__) { //#20767
        $_ = Object.create($_); //#20767
        $_.algnpatfull = $a([$a([1, 1, 1, 1, 1]), $a([1, 0, 0, 0, 1]), $a([1, 0, 1, 0, 1]), $a([1, 0, 0, 0, 1]), $a([1, 1, 1, 1, 1])]); //#20759
        $_.algnpatrmqr = $a([$a([1, 1, 1, 9, 9]), $a([1, 0, 1, 9, 9]), $a([1, 1, 1, 9, 9]), $a([9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9])]); //#20766
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_qrcode.$ctx[id] = $_[id]); //#20766
        bwipp_qrcode.__20767__ = 1; //#20766
        $_ = Object.getPrototypeOf($_); //#20766
    } //#20766
    $_.putalgnpat = function() {
        $_.py = $k[--$j]; //#20770
        $_.px = $k[--$j]; //#20771
        for (var _U0 = 0; _U0 <= 4; _U0 += 1) { //#20781
            $_.pb = _U0; //#20773
            for (var _U1 = 0; _U1 <= 4; _U1 += 1) { //#20780
                $_.pa = _U1; //#20775
                $_.algnb = $get($get($_.algnpat, $_.pb), $_.pa); //#20776
                if ($_.algnb != 9) { //#20779
                    $k[$j++] = $_.pixs; //#20778
                    $k[$j++] = $f($_.px + $_.pa); //#20778
                    $k[$j++] = $f($_.py + $_.pb); //#20778
                    $_.qmv(); //#20778
                    var _UE = $k[--$j]; //#20778
                    $put($k[--$j], _UE, $_.algnb); //#20778
                } //#20778
            } //#20778
        } //#20778
    }; //#20778
    if ($eq($_.format, "full")) { //#20797
        $_.algnpat = $_.algnpatfull; //#20784
        for (var _UN = $f($_.asp2 - 2), _UO = $f($_.asp3 - $_.asp2), _UM = $f($_.cols - 13); _UO < 0 ? _UN >= _UM : _UN <= _UM; _UN += _UO) { //#20789
            $_.i = _UN; //#20786
            $k[$j++] = $_.i; //#20787
            $k[$j++] = 4; //#20787
            $_.putalgnpat(); //#20787
            $k[$j++] = 4; //#20788
            $k[$j++] = $_.i; //#20788
            $_.putalgnpat(); //#20788
        } //#20788
        for (var _UW = $f($_.asp2 - 2), _UX = $f($_.asp3 - $_.asp2), _UV = $f($_.cols - 9); _UX < 0 ? _UW >= _UV : _UW <= _UV; _UW += _UX) { //#20796
            $_.x = _UW; //#20791
            for (var _Ud = $f($_.asp2 - 2), _Ue = $f($_.asp3 - $_.asp2), _Uc = $f($_.rows - 9); _Ue < 0 ? _Ud >= _Uc : _Ud <= _Uc; _Ud += _Ue) { //#20795
                $_.y = _Ud; //#20793
                $k[$j++] = $_.x; //#20794
                $k[$j++] = $_.y; //#20794
                $_.putalgnpat(); //#20794
            } //#20794
        } //#20794
    } //#20794
    if ($eq($_.format, "rmqr")) { //#20805
        $_.algnpat = $_.algnpatrmqr; //#20799
        for (var _Uo = $f($_.asp2 - 2), _Up = $f($_.asp3 - $_.asp2), _Un = $f($_.cols - 13); _Up < 0 ? _Uo >= _Un : _Uo <= _Un; _Uo += _Up) { //#20804
            $_.i = _Uo; //#20801
            $k[$j++] = $_.i; //#20802
            $k[$j++] = 0; //#20802
            $_.putalgnpat(); //#20802
            $k[$j++] = $_.i; //#20803
            $k[$j++] = $f($_.rows - 3); //#20803
            $_.putalgnpat(); //#20803
        } //#20803
    } //#20803
    if (!bwipp_qrcode.__20814__) { //#20814
        $_ = Object.create($_); //#20814
        $_.formatmapmicro = $a([$a([$a([1, 8])]), $a([$a([2, 8])]), $a([$a([3, 8])]), $a([$a([4, 8])]), $a([$a([5, 8])]), $a([$a([6, 8])]), $a([$a([7, 8])]), $a([$a([8, 8])]), $a([$a([8, 7])]), $a([$a([8, 6])]), $a([$a([8, 5])]), $a([$a([8, 4])]), $a([$a([8, 3])]), $a([$a([8, 2])]), $a([$a([8, 1])])]); //#20813
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_qrcode.$ctx[id] = $_[id]); //#20813
        bwipp_qrcode.__20814__ = 1; //#20813
        $_ = Object.getPrototypeOf($_); //#20813
    } //#20813
    var _Xs = new Map([
        ["full", $a([$a([$a([0, 8]), $a([8, $f($_.cols - 1)])]), $a([$a([1, 8]), $a([8, $f($_.cols - 2)])]), $a([$a([2, 8]), $a([8, $f($_.cols - 3)])]), $a([$a([3, 8]), $a([8, $f($_.cols - 4)])]), $a([$a([4, 8]), $a([8, $f($_.cols - 5)])]), $a([$a([5, 8]), $a([8, $f($_.cols - 6)])]), $a([$a([7, 8]), $a([8, $f($_.cols - 7)])]), $a([$a([8, 8]), $a([$f($_.cols - 8), 8])]), $a([$a([8, 7]), $a([$f($_.cols - 7), 8])]), $a([$a([8, 5]), $a([$f($_.cols - 6), 8])]), $a([$a([8, 4]), $a([$f($_.cols - 5), 8])]), $a([$a([8, 3]), $a([$f($_.cols - 4), 8])]), $a([$a([8, 2]), $a([$f($_.cols - 3), 8])]), $a([$a([8, 1]), $a([$f($_.cols - 2), 8])]), $a([$a([8, 0]), $a([$f($_.cols - 1), 8])])])],
        ["micro", $_.formatmapmicro],
        ["rmqr", $a([$a([$a([11, 3]), $a([$f($_.cols - 3), $f($_.rows - 6)])]), $a([$a([11, 2]), $a([$f($_.cols - 4), $f($_.rows - 6)])]), $a([$a([11, 1]), $a([$f($_.cols - 5), $f($_.rows - 6)])]), $a([$a([10, 5]), $a([$f($_.cols - 6), $f($_.rows - 2)])]), $a([$a([10, 4]), $a([$f($_.cols - 6), $f($_.rows - 3)])]), $a([$a([10, 3]), $a([$f($_.cols - 6), $f($_.rows - 4)])]), $a([$a([10, 2]), $a([$f($_.cols - 6), $f($_.rows - 5)])]), $a([$a([10, 1]), $a([$f($_.cols - 6), $f($_.rows - 6)])]), $a([$a([9, 5]), $a([$f($_.cols - 7), $f($_.rows - 2)])]), $a([$a([9, 4]), $a([$f($_.cols - 7), $f($_.rows - 3)])]), $a([$a([9, 3]), $a([$f($_.cols - 7), $f($_.rows - 4)])]), $a([$a([9, 2]), $a([$f($_.cols - 7), $f($_.rows - 5)])]), $a([$a([9, 1]), $a([$f($_.cols - 7), $f($_.rows - 6)])]), $a([$a([8, 5]), $a([$f($_.cols - 8), $f($_.rows - 2)])]), $a([$a([8, 4]), $a([$f($_.cols - 8), $f($_.rows - 3)])]), $a([$a([8, 3]), $a([$f($_.cols - 8), $f($_.rows - 4)])]), $a([$a([8, 2]), $a([$f($_.cols - 8), $f($_.rows - 5)])]), $a([$a([8, 1]), $a([$f($_.cols - 8), $f($_.rows - 6)])])])]
    ]); //#20830
    $_.formatmap = $get(_Xs, $_.format); //#20832
    $forall($_.formatmap, function() { //#20835
        $forall($k[--$j], function() { //#20834
            $forall($k[--$j]); //#20834
            $_.qmv(); //#20834
            $put($_.pixs, $k[--$j], 1); //#20834
        }); //#20834
    }); //#20834
    if ($eq($_.format, "full") && ($_.cols >= 45)) { //#20851
        $_.versionmap = $a([$a([$a([$f($_.cols - 9), 5]), $a([5, $f($_.cols - 9)])]), $a([$a([$f($_.cols - 10), 5]), $a([5, $f($_.cols - 10)])]), $a([$a([$f($_.cols - 11), 5]), $a([5, $f($_.cols - 11)])]), $a([$a([$f($_.cols - 9), 4]), $a([4, $f($_.cols - 9)])]), $a([$a([$f($_.cols - 10), 4]), $a([4, $f($_.cols - 10)])]), $a([$a([$f($_.cols - 11), 4]), $a([4, $f($_.cols - 11)])]), $a([$a([$f($_.cols - 9), 3]), $a([3, $f($_.cols - 9)])]), $a([$a([$f($_.cols - 10), 3]), $a([3, $f($_.cols - 10)])]), $a([$a([$f($_.cols - 11), 3]), $a([3, $f($_.cols - 11)])]), $a([$a([$f($_.cols - 9), 2]), $a([2, $f($_.cols - 9)])]), $a([$a([$f($_.cols - 10), 2]), $a([2, $f($_.cols - 10)])]), $a([$a([$f($_.cols - 11), 2]), $a([2, $f($_.cols - 11)])]), $a([$a([$f($_.cols - 9), 1]), $a([1, $f($_.cols - 9)])]), $a([$a([$f($_.cols - 10), 1]), $a([1, $f($_.cols - 10)])]), $a([$a([$f($_.cols - 11), 1]), $a([1, $f($_.cols - 11)])]), $a([$a([$f($_.cols - 9), 0]), $a([0, $f($_.cols - 9)])]), $a([$a([$f($_.cols - 10), 0]), $a([0, $f($_.cols - 10)])]), $a([$a([$f($_.cols - 11), 0]), $a([0, $f($_.cols - 11)])])]); //#20849
    } else { //#20851
        $_.versionmap = $a([]); //#20851
    } //#20851
    var _ZW = $_.versionmap; //#20853
    for (var _ZX = 0, _ZY = _ZW.length; _ZX < _ZY; _ZX++) { //#20855
        $forall($get(_ZW, _ZX), function() { //#20854
            $forall($k[--$j]); //#20854
            $_.qmv(); //#20854
            $put($_.pixs, $k[--$j], 0); //#20854
        }); //#20854
    } //#20854
    if ($eq($_.format, "full")) { //#20860
        $k[$j++] = $_.pixs; //#20859
        $k[$j++] = 8; //#20859
        $k[$j++] = $f($_.rows - 8); //#20859
        $_.qmv(); //#20859
        var _Zg = $k[--$j]; //#20859
        $put($k[--$j], _Zg, 0); //#20859
    } //#20859
    var _a0 = $a([function() {
        var _Zi = $k[--$j]; //#20865
        var _Zj = $k[--$j]; //#20865
        $k[$j++] = $f(_Zj + _Zi) % 2; //#20865
    }, function() {
        var _Zk = $k[--$j]; //#20866
        var _Zl = $k[--$j]; //#20866
        $k[$j++] = _Zk; //#20866
        $k[$j++] = _Zl; //#20866
        $j--; //#20866
        var _Zm = $k[--$j]; //#20866
        $k[$j++] = _Zm % 2; //#20866
    }, function() {
        $j--; //#20867
        var _Zn = $k[--$j]; //#20867
        $k[$j++] = _Zn % 3; //#20867
    }, function() {
        var _Zo = $k[--$j]; //#20868
        var _Zp = $k[--$j]; //#20868
        $k[$j++] = $f(_Zp + _Zo) % 3; //#20868
    }, function() {
        var _Zq = $k[--$j]; //#20869
        var _Zr = $k[--$j]; //#20869
        $k[$j++] = ((~~(_Zq / 2)) + (~~(_Zr / 3))) % 2; //#20869
    }, function() {
        var _Zs = $k[--$j]; //#20870
        var _Zu = $k[--$j] * _Zs; //#20870
        $k[$j++] = $f((_Zu % 2) + (_Zu % 3)); //#20870
    }, function() {
        var _Zv = $k[--$j]; //#20871
        var _Zx = $k[--$j] * _Zv; //#20871
        $k[$j++] = ($f((_Zx % 2) + (_Zx % 3))) % 2; //#20871
    }, function() {
        var _Zy = $k[--$j]; //#20872
        var _Zz = $k[--$j]; //#20872
        $k[$j++] = ($f(((_Zz * _Zy) % 3) + ($f(_Zz + _Zy) % 2))) % 2; //#20872
    }]); //#20872
    var _aB = $a([function() {
        var _a1 = $k[--$j]; //#20875
        var _a2 = $k[--$j]; //#20875
        $k[$j++] = _a1; //#20875
        $k[$j++] = _a2; //#20875
        $j--; //#20875
        var _a3 = $k[--$j]; //#20875
        $k[$j++] = _a3 % 2; //#20875
    }, function() {
        var _a4 = $k[--$j]; //#20876
        var _a5 = $k[--$j]; //#20876
        $k[$j++] = ((~~(_a4 / 2)) + (~~(_a5 / 3))) % 2; //#20876
    }, function() {
        var _a6 = $k[--$j]; //#20877
        var _a8 = $k[--$j] * _a6; //#20877
        $k[$j++] = ($f((_a8 % 2) + (_a8 % 3))) % 2; //#20877
    }, function() {
        var _a9 = $k[--$j]; //#20878
        var _aA = $k[--$j]; //#20878
        $k[$j++] = ($f(((_aA * _a9) % 3) + ($f(_aA + _a9) % 2))) % 2; //#20878
    }]); //#20878
    var _aE = $a([function() {
        var _aC = $k[--$j]; //#20881
        var _aD = $k[--$j]; //#20881
        $k[$j++] = ((~~(_aC / 2)) + (~~(_aD / 3))) % 2; //#20881
    }]); //#20881
    var _aF = new Map([
        ["full", _a0],
        ["micro", _aB],
        ["rmqr", _aE]
    ]); //#20881
    $_.maskfuncs = $get(_aF, $_.format); //#20883
    if ($_.mask != -1) { //#20887
        $_.maskfuncs = $a([$get($_.maskfuncs, $_.mask - 1)]); //#20885
        $_.bestmaskval = $_.mask - 1; //#20886
    } //#20886
    $_.masks = $a($_.maskfuncs.length); //#20888
    for (var _aS = 0, _aR = $_.masks.length - 1; _aS <= _aR; _aS += 1) { //#20902
        $_.m = _aS; //#20890
        $_.mask = $a($_.rows * $_.cols); //#20891
        for (var _aY = 0, _aX = $f($_.rows - 1); _aY <= _aX; _aY += 1) { //#20900
            $_.j = _aY; //#20893
            for (var _ab = 0, _aa = $f($_.cols - 1); _ab <= _aa; _ab += 1) { //#20899
                $_.i = _ab; //#20895
                $k[$j++] = $_.i; //#20896
                $k[$j++] = $_.j; //#20896
                if ($get($_.maskfuncs, $_.m)() === true) {
                    break;
                } //#20896
                var _ah = $k[--$j]; //#20896
                $k[$j++] = _ah == 0; //#20897
                $k[$j++] = $_.pixs; //#20897
                $k[$j++] = $_.i; //#20897
                $k[$j++] = $_.j; //#20897
                $_.qmv(); //#20897
                var _al = $k[--$j]; //#20897
                var _an = $get($k[--$j], _al); //#20897
                var _ao = $k[--$j]; //#20897
                var _ap = (_ao && (_an == -1)) ? 1 : 0; //#20897
                $k[$j++] = _ap; //#20898
                $k[$j++] = $_.mask; //#20898
                $k[$j++] = $_.i; //#20898
                $k[$j++] = $_.j; //#20898
                $_.qmv(); //#20898
                var _at = $k[--$j]; //#20898
                var _au = $k[--$j]; //#20898
                $put(_au, _at, $k[--$j]); //#20898
            } //#20898
        } //#20898
        $put($_.masks, $_.m, $_.mask); //#20901
    } //#20901
    var _b1 = $ne($_.format, "rmqr") ? 1 : 2; //#20905
    $_.posx = $f($_.cols - _b1); //#20905
    $_.posy = $f($_.rows - 1); //#20906
    $_.dir = -1; //#20907
    $_.col = 1; //#20908
    $_.num = 0; //#20909
    for (;;) { //#20932
        if ($_.posx < 0) { //#20911
            break; //#20911
        } //#20911
        $k[$j++] = $_.pixs; //#20912
        $k[$j++] = $_.posx; //#20912
        $k[$j++] = $_.posy; //#20912
        $_.qmv(); //#20912
        var _b7 = $k[--$j]; //#20912
        if ($get($k[--$j], _b7) == -1) { //#20916
            var _bC = $get($_.cws, ~~($_.num / 8)); //#20913
            var _bE = -(7 - ($_.num % 8)); //#20913
            $k[$j++] = ((_bE < 0 ? _bC >>> -_bE : _bC << _bE)) & 1; //#20914
            $k[$j++] = $_.pixs; //#20914
            $k[$j++] = $_.posx; //#20914
            $k[$j++] = $_.posy; //#20914
            $_.qmv(); //#20914
            var _bI = $k[--$j]; //#20914
            var _bJ = $k[--$j]; //#20914
            $put(_bJ, _bI, $k[--$j]); //#20914
            $_.num = $_.num + 1; //#20915
        } //#20915
        if ($_.col == 1) { //#20929
            $_.col = 0; //#20918
            $_.posx = $f($_.posx - 1); //#20919
        } else { //#20929
            $_.col = 1; //#20921
            $_.posx = $f($_.posx + 1); //#20922
            $_.posy = $f($_.posy + $_.dir); //#20923
            if (($_.posy < 0) || ($_.posy >= $_.rows)) { //#20930
                $_.dir = $_.dir * -1; //#20925
                $_.posy = $f($_.posy + $_.dir); //#20926
                $_.posx = $f($_.posx - 2); //#20927
                if ($eq($_.format, "full") && ($_.posx == 6)) { //#20929
                    $_.posx = $f($_.posx - 1); //#20929
                } //#20929
            } //#20929
        } //#20929
    } //#20929
    $_.evalfulln1n3 = function() {
        $_.scrle = $k[--$j]; //#20936
        $k[$j++] = 'scr1'; //#20938
        $k[$j++] = 0; //#20938
        $forall($_.scrle, function() { //#20938
            var _bd = $k[--$j]; //#20938
            $k[$j++] = _bd; //#20938
            if (_bd >= 5) { //#20938
                var _be = $k[--$j]; //#20938
                var _bg = $f($f($k[--$j] + _be) - 2); //#20938
                $k[$j++] = _bg; //#20938
                $k[$j++] = _bg; //#20938
            } //#20938
            $j--; //#20938
        }); //#20938
        var _bh = $k[--$j]; //#20938
        $_[$k[--$j]] = _bh; //#20938
        $_.scr3 = 0; //#20940
        for (var _bl = 3, _bk = $_.scrle.length - 3; _bl <= _bk; _bl += 2) { //#20955
            $_.j = _bl; //#20942
            if (($get($_.scrle, $_.j) % 3) == 0) { //#20954
                $_.fact = ~~($get($_.scrle, $_.j) / 3); //#20944
                var _bu = $geti($_.scrle, $_.j - 2, 5); //#20945
                for (var _bv = 0, _bw = _bu.length; _bv < _bw; _bv++) { //#20945
                    $k[$j++] = $get(_bu, _bv) == $_.fact; //#20945
                } //#20945
                var _bz = $k[--$j]; //#20945
                var _c0 = $k[--$j]; //#20945
                var _c1 = $k[--$j]; //#20945
                $k[$j++] = $an(_c0, _bz); //#20945
                $k[$j++] = _c1; //#20945
                $j--; //#20945
                var _c2 = $k[--$j]; //#20945
                var _c3 = $k[--$j]; //#20945
                var _c4 = $k[--$j]; //#20945
                if (_c4 && (_c3 && _c2)) { //#20953
                    if (($_.j == 3) || (($_.j + 4) >= $_.scrle.length)) { //#20950
                        $_.scr3 = $_.scr3 + 40; //#20947
                    } else { //#20950
                        if (($get($_.scrle, $_.j - 3) >= 4) || ($get($_.scrle, $_.j + 3) >= 4)) { //#20951
                            $_.scr3 = $_.scr3 + 40; //#20950
                        } //#20950
                    } //#20950
                } //#20950
            } //#20950
        } //#20950
        $k[$j++] = $_.scr1; //#20956
        $k[$j++] = $_.scr3; //#20956
    }; //#20956
    $_.evalfull = function() {
        $_.sym = $k[--$j]; //#20961
        $_.n1 = 0; //#20963
        $_.n2 = 0; //#20963
        $_.n3 = 0; //#20963
        $_.rle = $a($f($_.cols + 1)); //#20964
        $_.lastpairs = $a($_.cols); //#20965
        $_.thispairs = $a($_.cols); //#20966
        $_.colsadd1 = $f($_.cols + 1); //#20967
        for (var _cS = 0, _cR = $f($_.cols - 1); _cS <= _cR; _cS += 1) { //#21006
            $_.i = _cS; //#20969
            $k[$j++] = Infinity; //#20972
            var _cU = $_.cols; //#20973
            $k[$j++] = 0; //#20975
            $k[$j++] = 0; //#20975
            for (var _cW = $_.i, _cX = _cU, _cV = $f((_cU * _cU) - 1); _cX < 0 ? _cW >= _cV : _cW <= _cV; _cW += _cX) { //#20975
                var _cZ = $get($_.sym, _cW); //#20974
                var _ca = $k[--$j]; //#20974
                $k[$j++] = _cZ; //#20974
                if ($eq(_ca, _cZ)) { //#20974
                    var _cb = $k[--$j]; //#20974
                    var _cc = $k[--$j]; //#20974
                    $k[$j++] = $f(_cc + 1); //#20974
                    $k[$j++] = _cb; //#20974
                } else { //#20974
                    var _cd = $k[--$j]; //#20974
                    $k[$j++] = 1; //#20974
                    $k[$j++] = _cd; //#20974
                } //#20974
            } //#20974
            $j--; //#20976
            var _cf = $counttomark() + 2; //#20977
            $astore($geti($_.rle, 0, _cf - 2)); //#20977
            $_.evalfulln1n3(); //#20978
            $_.n3 = $f($k[--$j] + $_.n3); //#20978
            $_.n1 = $f($k[--$j] + $_.n1); //#20978
            $j--; //#20979
            $_.symrow = $geti($_.sym, $_.i * $_.cols, $_.cols); //#20982
            $k[$j++] = Infinity; //#20983
            var _cq = $_.symrow; //#20984
            $k[$j++] = 0; //#20986
            $k[$j++] = 0; //#20986
            for (var _cr = 0, _cs = _cq.length; _cr < _cs; _cr++) { //#20986
                var _ct = $get(_cq, _cr); //#20986
                var _cu = $k[--$j]; //#20985
                $k[$j++] = _ct; //#20985
                if ($eq(_cu, _ct)) { //#20985
                    var _cv = $k[--$j]; //#20985
                    var _cw = $k[--$j]; //#20985
                    $k[$j++] = $f(_cw + 1); //#20985
                    $k[$j++] = _cv; //#20985
                } else { //#20985
                    var _cx = $k[--$j]; //#20985
                    $k[$j++] = 1; //#20985
                    $k[$j++] = _cx; //#20985
                } //#20985
            } //#20985
            $j--; //#20987
            var _cz = $counttomark() + 2; //#20988
            $astore($geti($_.rle, 0, _cz - 2)); //#20988
            $_.evalfulln1n3(); //#20989
            $_.n3 = $f($k[--$j] + $_.n3); //#20989
            $_.n1 = $f($k[--$j] + $_.n1); //#20989
            $j--; //#20990
            var _d5 = $_.thispairs; //#20993
            $_.thispairs = $_.lastpairs; //#20993
            $_.lastpairs = _d5; //#20993
            var _d9 = ($get($_.symrow, 0) == 1) ? 0 : 1; //#20994
            var _dA = $_.symrow; //#20995
            $k[$j++] = _d9; //#20995
            for (var _dB = 0, _dC = _dA.length; _dB < _dC; _dB++) { //#20995
                var _dD = $get(_dA, _dB); //#20995
                var _dE = $k[--$j]; //#20995
                $k[$j++] = $f(_dE + _dD); //#20995
                $k[$j++] = _dD; //#20995
            } //#20995
            $j--; //#20996
            $astore($_.thispairs); //#20997
            $j--; //#20997
            if ($_.i > 0) { //#21004
                $k[$j++] = Infinity; //#20999
                $aload($_.lastpairs); //#21000
                $aload($_.thispairs); //#21000
                $k[$j++] = $_.n2; //#21001
                for (var _dL = 0, _dM = $_.cols; _dL < _dM; _dL++) { //#21001
                    var _dN = $k[--$j]; //#21001
                    var _dO = $k[--$j]; //#21001
                    $k[$j++] = _dN; //#21001
                    $k[$j++] = _dO; //#21001
                    var _dQ = $k[$j - 1 - $_.colsadd1]; //#21001
                    if (($f($k[--$j] + _dQ) & 3) == 0) { //#21001
                        var _dS = $k[--$j]; //#21001
                        $k[$j++] = $f(_dS + 3); //#21001
                    } //#21001
                } //#21001
                $_.n2 = $k[--$j]; //#21002
                $cleartomark(); //#21003
            } //#21003
        } //#21003
        $k[$j++] = 'dark'; //#21009
        $k[$j++] = 0; //#21009
        $forall($_.sym, function() { //#21009
            var _dV = $k[--$j]; //#21009
            var _dW = $k[--$j]; //#21009
            $k[$j++] = $f(_dW + _dV); //#21009
        }); //#21009
        var _dX = $k[--$j]; //#21009
        $_[$k[--$j]] = _dX; //#21009
        var _da = $_.cols; //#21010
        $_.n4 = (~~((Math.abs($f((($_.dark * 100) / (_da * _da)) - 50))) / 5)) * 10; //#21010
        $k[$j++] = $f(($f($f($_.n1 + $_.n2) + $_.n3)) + $_.n4); //#21012
    }; //#21012
    $_.evalmicro = function() {
        $_.sym = $k[--$j]; //#21017
        $_.dkrhs = 0; //#21018
        $_.dkbot = 0; //#21018
        for (var _di = 1, _dh = $f($_.cols - 1); _di <= _dh; _di += 1) { //#21023
            $_.i = _di; //#21020
            $k[$j++] = 'dkrhs'; //#21021
            $k[$j++] = $_.dkrhs; //#21021
            $k[$j++] = $_.sym; //#21021
            $k[$j++] = $f($_.cols - 1); //#21021
            $k[$j++] = $_.i; //#21021
            $_.qmv(); //#21021
            var _dn = $k[--$j]; //#21021
            var _dp = $get($k[--$j], _dn); //#21021
            var _dq = $k[--$j]; //#21021
            $_[$k[--$j]] = $f(_dq + _dp); //#21021
            $k[$j++] = 'dkbot'; //#21022
            $k[$j++] = $_.dkbot; //#21022
            $k[$j++] = $_.sym; //#21022
            $k[$j++] = $_.i; //#21022
            $k[$j++] = $f($_.cols - 1); //#21022
            $_.qmv(); //#21022
            var _dw = $k[--$j]; //#21022
            var _dy = $get($k[--$j], _dw); //#21022
            var _dz = $k[--$j]; //#21022
            $_[$k[--$j]] = $f(_dz + _dy); //#21022
        } //#21022
        if ($_.dkrhs <= $_.dkbot) { //#21027
            $k[$j++] = -(($_.dkrhs * 16) + $_.dkbot); //#21025
        } else { //#21027
            $k[$j++] = -(($_.dkbot * 16) + $_.dkrhs); //#21027
        } //#21027
    }; //#21027
    $_.bestscore = 999999999; //#21032
    for (var _e9 = 0, _e8 = $_.masks.length - 1; _e9 <= _e8; _e9 += 1) { //#21054
        $_.m = _e9; //#21034
        $_.masksym = $a($_.rows * $_.cols); //#21035
        for (var _eG = 0, _eF = $f(($_.rows * $_.cols) - 1); _eG <= _eF; _eG += 1) { //#21039
            $_.i = _eG; //#21037
            $put($_.masksym, $_.i, $xo($get($_.pixs, $_.i), $get($get($_.masks, $_.m), $_.i))); //#21038
        } //#21038
        if ($_.masks.length != 1) { //#21052
            if ($eq($_.format, "full")) { //#21044
                $k[$j++] = $_.masksym; //#21042
                $_.evalfull(); //#21042
                $_.score = $k[--$j]; //#21042
            } else { //#21044
                $k[$j++] = $_.masksym; //#21044
                $_.evalmicro(); //#21044
                $_.score = $k[--$j]; //#21044
            } //#21044
            if ($_.score < $_.bestscore) { //#21050
                $_.bestsym = $_.masksym; //#21047
                $_.bestmaskval = $_.m; //#21048
                $_.bestscore = $_.score; //#21049
            } //#21049
        } else { //#21052
            $_.bestsym = $_.masksym; //#21052
        } //#21052
    } //#21052
    $_.pixs = $_.bestsym; //#21055
    if ($eq($_.format, "full")) { //#21060
        $k[$j++] = $_.pixs; //#21059
        $k[$j++] = 8; //#21059
        $k[$j++] = $f($_.cols - 8); //#21059
        $_.qmv(); //#21059
        var _eh = $k[--$j]; //#21059
        $put($k[--$j], _eh, 1); //#21059
    } //#21059
    if (!bwipp_qrcode.__21096__) { //#21096
        $_ = Object.create($_); //#21096
        $_.fmtvalsfull = $a([21522, 20773, 24188, 23371, 17913, 16590, 20375, 19104, 30660, 29427, 32170, 30877, 26159, 25368, 27713, 26998, 5769, 5054, 7399, 6608, 1890, 597, 3340, 2107, 13663, 12392, 16177, 14854, 9396, 8579, 11994, 11245]); //#21069
        $_.fmtvalsmicro = $a([17477, 16754, 20011, 19228, 21934, 20633, 24512, 23287, 26515, 25252, 28157, 26826, 30328, 29519, 31766, 31009, 1758, 1001, 3248, 2439, 5941, 4610, 7515, 6252, 9480, 8255, 12134, 10833, 13539, 12756, 16013, 15290]); //#21075
        $_.fmtvalsrmqr1 = $a([129714, 124311, 121821, 115960, 112748, 108361, 104707, 99878, 98062, 90155, 89697, 82244, 81360, 74485, 72895, 66458, 61898, 61167, 53413, 53120, 45844, 44081, 37499, 36190, 29814, 27475, 21785, 19004, 13992, 10637, 6087, 2274, 258919, 257090, 250376, 249133, 242105, 241308, 233686, 233459, 227035, 223742, 219060, 215185, 209925, 207648, 202090, 199247, 194591, 190266, 186736, 181845, 178881, 173540, 170926, 165003, 163235, 156294, 154828, 148457, 147325, 139352, 138770, 131383]); //#21085
        $_.fmtvalsrmqr2 = $a([133755, 136542, 142100, 144433, 149669, 153472, 158154, 161519, 167879, 168162, 175784, 176525, 183577, 184892, 191606, 193363, 196867, 204326, 204908, 212809, 213981, 220408, 221874, 228759, 230591, 236442, 239056, 244469, 247393, 252228, 255758, 260139, 942, 7307, 8897, 15844, 16752, 24149, 24607, 32570, 34322, 39223, 42877, 47192, 50380, 56297, 58787, 64134, 67798, 71667, 76217, 79516, 84488, 87341, 93031, 95298, 101738, 102991, 109573, 111392, 118708, 118929, 126683, 127486]); //#21095
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_qrcode.$ctx[id] = $_[id]); //#21095
        bwipp_qrcode.__21096__ = 1; //#21095
        $_ = Object.getPrototypeOf($_); //#21095
    } //#21095
    if ($eq($_.format, "full")) { //#21106
        $k[$j++] = 'ecid'; //#21098
        $search("MLHQ", $_.eclevel); //#21098
        $j--; //#21098
        var _eq = $k[--$j]; //#21098
        var _er = $k[--$j]; //#21098
        $k[$j++] = _eq.length; //#21098
        $k[$j++] = _er; //#21098
        $j--; //#21098
        var _es = $k[--$j]; //#21098
        var _et = $k[--$j]; //#21098
        $k[$j++] = _es; //#21098
        $k[$j++] = _et; //#21098
        $j--; //#21098
        var _eu = $k[--$j]; //#21098
        $_[$k[--$j]] = _eu; //#21098
        $_.fmtval = $get($_.fmtvalsfull, ($_.ecid << 3) + $_.bestmaskval); //#21099
        for (var _f2 = 0, _f1 = $_.formatmap.length - 1; _f2 <= _f1; _f2 += 1) { //#21105
            $_.i = _f2; //#21101
            $forall($get($_.formatmap, $_.i), function() { //#21104
                var _f7 = $k[--$j]; //#21103
                $k[$j++] = $_.pixs; //#21103
                $aload(_f7); //#21103
                $_.qmv(); //#21103
                var _f8 = $_.fmtval; //#21103
                var _fA = -(14 - $_.i); //#21103
                var _fB = $k[--$j]; //#21103
                $put($k[--$j], _fB, ((_fA < 0 ? _f8 >>> -_fA : _f8 << _fA)) & 1); //#21103
            }); //#21103
        } //#21103
    } //#21103
    if ($eq($_.format, "micro")) { //#21114
        $_.symid = $get($get($a([$a([0]), $a([1, 2]), $a([3, 4]), $a([5, 6, 7])]), ~~($f($_.cols - 11) / 2)), $_.eclval); //#21108
        $_.fmtval = $get($_.fmtvalsmicro, ($_.symid << 2) + $_.bestmaskval); //#21109
        for (var _fT = 0, _fS = $_.formatmap.length - 1; _fT <= _fS; _fT += 1) { //#21113
            $_.i = _fT; //#21111
            $k[$j++] = $_.pixs; //#21112
            $aload($get($get($_.formatmap, $_.i), 0)); //#21112
            $_.qmv(); //#21112
            var _fZ = $_.fmtval; //#21112
            var _fb = -(14 - $_.i); //#21112
            var _fc = $k[--$j]; //#21112
            $put($k[--$j], _fc, ((_fb < 0 ? _fZ >>> -_fb : _fZ << _fb)) & 1); //#21112
        } //#21112
    } //#21112
    if ($eq($_.format, "rmqr")) { //#21124
        $k[$j++] = 'fmtvalu'; //#21116
        $search("MH", $_.eclevel); //#21116
        $j--; //#21116
        var _fg = $k[--$j]; //#21116
        var _fh = $k[--$j]; //#21116
        $k[$j++] = _fg.length; //#21116
        $k[$j++] = _fh; //#21116
        $j--; //#21116
        var _fi = $k[--$j]; //#21116
        var _fj = $k[--$j]; //#21116
        $k[$j++] = _fi; //#21116
        $k[$j++] = _fj; //#21116
        $j--; //#21116
        var _fk = $k[--$j]; //#21116
        $_[$k[--$j]] = (_fk << 5) + $_.verind; //#21116
        $_.fmtval1 = $get($_.fmtvalsrmqr1, $_.fmtvalu); //#21117
        $_.fmtval2 = $get($_.fmtvalsrmqr2, $_.fmtvalu); //#21118
        for (var _fv = 0, _fu = $_.formatmap.length - 1; _fv <= _fu; _fv += 1) { //#21123
            $_.i = _fv; //#21120
            $k[$j++] = $_.pixs; //#21121
            $aload($get($get($_.formatmap, $_.i), 0)); //#21121
            $_.qmv(); //#21121
            var _g1 = $_.fmtval1; //#21121
            var _g3 = -(17 - $_.i); //#21121
            var _g4 = $k[--$j]; //#21121
            $put($k[--$j], _g4, ((_g3 < 0 ? _g1 >>> -_g3 : _g1 << _g3)) & 1); //#21121
            $k[$j++] = $_.pixs; //#21122
            $aload($get($get($_.formatmap, $_.i), 1)); //#21122
            $_.qmv(); //#21122
            var _gB = $_.fmtval2; //#21122
            var _gD = -(17 - $_.i); //#21122
            var _gE = $k[--$j]; //#21122
            $put($k[--$j], _gE, ((_gD < 0 ? _gB >>> -_gD : _gB << _gD)) & 1); //#21122
        } //#21122
    } //#21122
    if (!bwipp_qrcode.__21135__) { //#21135
        $_ = Object.create($_); //#21135
        $_.vervals = $a([31892, 34236, 39577, 42195, 48118, 51042, 55367, 58893, 63784, 68472, 70749, 76311, 79154, 84390, 87683, 92361, 96236, 102084, 102881, 110507, 110734, 117786, 119615, 126325, 127568, 133589, 136944, 141498, 145311, 150283, 152622, 158308, 161089, 167017]); //#21134
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_qrcode.$ctx[id] = $_[id]); //#21134
        bwipp_qrcode.__21135__ = 1; //#21134
        $_ = Object.getPrototypeOf($_); //#21134
    } //#21134
    if ($eq($_.format, "full") && ($_.cols >= 45)) { //#21144
        $_.verval = $get($_.vervals, (~~($f($_.cols - 17) / 4)) - 7); //#21137
        for (var _gP = 0, _gO = $_.versionmap.length - 1; _gP <= _gO; _gP += 1) { //#21143
            $_.i = _gP; //#21139
            $forall($get($_.versionmap, $_.i), function() { //#21142
                var _gU = $k[--$j]; //#21141
                $k[$j++] = $_.pixs; //#21141
                $forall(_gU); //#21141
                $_.qmv(); //#21141
                var _gV = $_.verval; //#21141
                var _gX = -(17 - $_.i); //#21141
                var _gY = $k[--$j]; //#21141
                $put($k[--$j], _gY, ((_gX < 0 ? _gV >>> -_gX : _gV << _gX)) & 1); //#21141
            }); //#21141
        } //#21141
    } //#21141
    $k[$j++] = Infinity; //#21147
    $k[$j++] = 'ren'; //#21154
    $k[$j++] = bwipp_renmatrix; //#21154
    $k[$j++] = 'pixs'; //#21154
    $k[$j++] = $_.pixs; //#21154
    $k[$j++] = 'pixx'; //#21154
    $k[$j++] = $_.cols; //#21154
    $k[$j++] = 'pixy'; //#21154
    $k[$j++] = $_.rows; //#21154
    $k[$j++] = 'height'; //#21154
    $k[$j++] = ($_.rows * 2) / 72; //#21154
    $k[$j++] = 'width'; //#21154
    $k[$j++] = ($_.cols * 2) / 72; //#21154
    $k[$j++] = 'borderleft'; //#21154
    if ($eq($_.format, "full")) { //#21154
        $k[$j++] = 4; //#21154
    } else { //#21154
        $k[$j++] = 2; //#21154
    } //#21154
    $k[$j++] = 'borderright'; //#21155
    if ($eq($_.format, "full")) { //#21155
        $k[$j++] = 4; //#21155
    } else { //#21155
        $k[$j++] = 2; //#21155
    } //#21155
    $k[$j++] = 'bordertop'; //#21156
    if ($eq($_.format, "full")) { //#21156
        $k[$j++] = 4; //#21156
    } else { //#21156
        $k[$j++] = 2; //#21156
    } //#21156
    $k[$j++] = 'borderbottom'; //#21157
    if ($eq($_.format, "full")) { //#21157
        $k[$j++] = 4; //#21157
    } else { //#21157
        $k[$j++] = 2; //#21157
    } //#21157
    $k[$j++] = 'opt'; //#21158
    $k[$j++] = $_.options; //#21158
    var _gk = $d(); //#21158
    $k[$j++] = _gk; //#21161
    if (!$_.dontdraw) { //#21161
        bwipp_renmatrix(); //#21161
    } //#21161
    $_ = Object.getPrototypeOf($_); //#21163
    $_ = Object.getPrototypeOf($_); //#21165
} //bwipp_qrcode
function bwipp_swissqrcode() {
    $_ = Object.create($_); //#21195
    $_.dontdraw = false; //#21198
    $_.parse = false; //#21199
    $k[$j++] = $_; //#21201
    bwipp_processoptions(); //#21201
    $_.options = $k[--$j]; //#21201
    $_.barcode = $k[--$j]; //#21202
    var _3 = new Map([
        ["parse", $_.parse],
        ["parseonly", true],
        ["parsefnc", false]
    ]); //#21208
    $_.fncvals = _3; //#21209
    $k[$j++] = 'barcode'; //#21210
    $k[$j++] = $_.barcode; //#21210
    $k[$j++] = $_.fncvals; //#21210
    bwipp_parseinput(); //#21210
    var _6 = $k[--$j]; //#21210
    $_[$k[--$j]] = _6; //#21210
    $_.barlen = $_.barcode.length; //#21211
    delete $_.options["parse"]; //#21212
    if ($_.barcode.length > 997) { //#21217
        $k[$j++] = 'bwipp.swissqrcodeBadLength#21216'; //#21216
        $k[$j++] = "Swiss QR Code input must not exceed 997 digits"; //#21216
        bwipp_raiseerror(); //#21216
    } //#21216
    $put($_.options, "dontdraw", true); //#21220
    $k[$j++] = 'args'; //#21221
    $k[$j++] = $_.barcode; //#21221
    $k[$j++] = $_.options; //#21221
    bwipp_qrcode(); //#21221
    var _E = $k[--$j]; //#21221
    $_[$k[--$j]] = _E; //#21221
    $put($_.args, "opt", $_.options); //#21223
    $k[$j++] = $_.args; //#21292
    if (!$_.dontdraw) { //#21292
        $$.save(); //#21237
        var _K = $$.currpos(); //#21238
        $$.translate(_K.x, _K.y); //#21238
        var _L = 72 / 25.4; //#21239
        $$.scale(_L, _L); //#21239
        $$.save(); //#21242
        $$.newpath(); //#21243
        $$.moveto(0, 0); //#21244
        $$.lineto(46, 0); //#21245
        $$.lineto(46, 46); //#21246
        $$.lineto(0, 46); //#21247
        $$.closepath(); //#21248
        $$.moveto(19.5, 19.5); //#21249
        $$.lineto(19.5, 26.5); //#21250
        $$.lineto(26.5, 26.5); //#21251
        $$.lineto(26.5, 19.5); //#21252
        $$.closepath(); //#21253
        $$.clip(); //#21254
        $$.save(); //#21257
        $$.moveto(0, 0); //#21258
        var _O = (46 / $get($_.args, "pixx")) / 2; //#21259
        $$.scale(_O, _O); //#21259
        bwipp_renmatrix(); //#21260
        $$.restore(); //#21261
        $$.restore(); //#21263
        $$.translate(19.5, 19.5); //#21266
        var _P = 7 / 83; //#21267
        $$.scale(_P, _P); //#21267
        $$.newpath(); //#21269
        $$.moveto(6, 6); //#21270
        $$.lineto(6, 77); //#21271
        $$.lineto(77, 77); //#21272
        $$.lineto(77, 6); //#21273
        $$.closepath(); //#21274
        $$.moveto(49, 18); //#21275
        $$.lineto(49, 34); //#21276
        $$.lineto(65, 34); //#21277
        $$.lineto(65, 49); //#21278
        $$.lineto(49, 49); //#21279
        $$.lineto(49, 65); //#21280
        $$.lineto(34, 65); //#21281
        $$.lineto(34, 49); //#21282
        $$.lineto(18, 49); //#21283
        $$.lineto(18, 34); //#21284
        $$.lineto(34, 34); //#21285
        $$.lineto(34, 18); //#21286
        $$.closepath(); //#21287
        $$.setrgbcolor(0, 0, 0); //#21288
        $$.fill(); //#21288
        $$.restore(); //#21290
    } //#21290
    $_ = Object.getPrototypeOf($_); //#21294
} //bwipp_swissqrcode
function bwipp_microqrcode() {
    $_ = Object.create($_); //#21323
    $_.dontdraw = false; //#21326
    $k[$j++] = $_; //#21328
    bwipp_processoptions(); //#21328
    $_.options = $k[--$j]; //#21328
    $_.barcode = $k[--$j]; //#21329
    $put($_.options, "dontdraw", true); //#21332
    $put($_.options, "format", "micro"); //#21333
    $k[$j++] = 'args'; //#21335
    $k[$j++] = $_.barcode; //#21335
    $k[$j++] = $_.options; //#21335
    bwipp_qrcode(); //#21335
    var _6 = $k[--$j]; //#21335
    $_[$k[--$j]] = _6; //#21335
    $put($_.args, "opt", $_.options); //#21337
    $k[$j++] = $_.args; //#21340
    if (!$_.dontdraw) { //#21340
        bwipp_renmatrix(); //#21340
    } //#21340
    $_ = Object.getPrototypeOf($_); //#21342
} //bwipp_microqrcode
function bwipp_rectangularmicroqrcode() {
    $_ = Object.create($_); //#21371
    $_.dontdraw = false; //#21374
    $k[$j++] = $_; //#21376
    bwipp_processoptions(); //#21376
    $_.options = $k[--$j]; //#21376
    $_.barcode = $k[--$j]; //#21377
    $put($_.options, "dontdraw", true); //#21380
    $put($_.options, "format", "rmqr"); //#21381
    $k[$j++] = 'args'; //#21383
    $k[$j++] = $_.barcode; //#21383
    $k[$j++] = $_.options; //#21383
    bwipp_qrcode(); //#21383
    var _6 = $k[--$j]; //#21383
    $_[$k[--$j]] = _6; //#21383
    $put($_.args, "opt", $_.options); //#21385
    $k[$j++] = $_.args; //#21388
    if (!$_.dontdraw) { //#21388
        bwipp_renmatrix(); //#21388
    } //#21388
    $_ = Object.getPrototypeOf($_); //#21390
} //bwipp_rectangularmicroqrcode
function bwipp_maxicode() {
    $_ = Object.create($_); //#21421
    $_.dontdraw = false; //#21424
    $_.mode = -1; //#21425
    $_.sam = -1; //#21426
    $_.parse = false; //#21427
    $_.parsefnc = false; //#21428
    $k[$j++] = $_; //#21430
    bwipp_processoptions(); //#21430
    $_.options = $k[--$j]; //#21430
    $_.barcode = $k[--$j]; //#21431
    if ($eq($_.barcode, "")) { //#21435
        $k[$j++] = 'bwipp.maxicodeEmptyData#21434'; //#21434
        $k[$j++] = "The data must not be empty"; //#21434
        bwipp_raiseerror(); //#21434
    } //#21434
    if (($_.mode != -1) && (($_.mode < 2) || ($_.mode > 6))) { //#21439
        $k[$j++] = 'bwipp.maxicodeBadMode#21438'; //#21438
        $k[$j++] = "Mode must be 2 to 6"; //#21438
        bwipp_raiseerror(); //#21438
    } //#21438
    if ($_.sam != -1) { //#21451
        $k[$j++] = true; //#21447
        for (var _7 = 0, _8 = 1; _7 < _8; _7++) { //#21447
            var _9 = $_.sam; //#21444
            if ((_9 < 12) || (_9 > 88)) { //#21444
                $j--; //#21444
                $k[$j++] = false; //#21444
                break; //#21444
            } //#21444
            var _B = $_.sam % 10; //#21445
            if ((_B < 2) || (_B > 8)) { //#21445
                $j--; //#21445
                $k[$j++] = false; //#21445
                break; //#21445
            } //#21445
            if ((~~($_.sam / 10)) > ($_.sam % 10)) { //#21446
                $j--; //#21446
                $k[$j++] = false; //#21446
                break; //#21446
            } //#21446
        } //#21446
        if ($nt($k[--$j])) { //#21450
            $k[$j++] = 'bwipp.maxicodeBadSAM#21449'; //#21449
            $k[$j++] = "SAM must be formatted as \"NM\" for Nth of M symbols, from 2 to 8 symbols"; //#21449
            bwipp_raiseerror(); //#21449
        } //#21449
    } //#21449
    bwipp_loadctx(bwipp_maxicode) //#21453
    var _H = new Map([
        ["parse", $_.parse],
        ["parsefnc", $_.parsefnc],
        ["eci", true]
    ]); //#21459
    $_.fncvals = _H; //#21461
    $k[$j++] = 'msg'; //#21462
    $k[$j++] = $_.barcode; //#21462
    $k[$j++] = $_.fncvals; //#21462
    bwipp_parseinput(); //#21462
    var _K = $k[--$j]; //#21462
    $_[$k[--$j]] = _K; //#21462
    $_.msglen = $_.msg.length; //#21463
    if (($_.mode == 2) || ($_.mode == 3)) { //#21551
        $_.barcode = $s($_.msglen); //#21469
        for (var _T = 0, _S = $_.msglen - 1; _T <= _S; _T += 1) { //#21475
            $_.i = _T; //#21471
            if ($get($_.msg, $_.i) > 0) { //#21474
                $put($_.barcode, $_.i, $get($_.msg, $_.i)); //#21473
            } //#21473
        } //#21473
        $_.barlen = $_.barcode.length; //#21476
        $_.fid = ""; //#21479
        if ($_.barlen >= 7) { //#21485
            if ($eq($geti($_.barcode, 0, 7), "\x5b\x29\x3e\x1e\x30\x31\x1d")) { //#21484
                $_.fid = $geti($_.barcode, 0, 9); //#21482
                $_.barcode = $geti($_.barcode, 9, $_.barlen - 9); //#21483
            } //#21483
        } //#21483
        $search($_.barcode, "\x1d"); //#21489
        if ($k[--$j]) { //#21511
            $_.pcode = $k[--$j]; //#21490
            $j--; //#21490
            if ($_.mode == 2) { //#21506
                $k[$j++] = true; //#21496
                for (var _p = 0, _q = 1; _p < _q; _p++) { //#21496
                    if ($_.pcode.length > 9) { //#21494
                        $j--; //#21494
                        $k[$j++] = false; //#21494
                        break; //#21494
                    } //#21494
                    $forall($_.pcode, function() { //#21495
                        var _t = $k[--$j]; //#21495
                        if ((_t < 48) || (_t > 57)) { //#21495
                            $j--; //#21495
                            $k[$j++] = false; //#21495
                            return true; //#21495
                        } //#21495
                    }); //#21495
                } //#21495
                if ($nt($k[--$j])) { //#21499
                    $j--; //#21498
                    $k[$j++] = 'bwipp.maxicodeBadMode2PostCode#21498'; //#21498
                    $k[$j++] = "A mode 2 postcode must not exceed 9 digits"; //#21498
                    bwipp_raiseerror(); //#21498
                } //#21498
            } else { //#21506
                $forall($_.pcode, function() { //#21508
                    var _w = $k[--$j]; //#21502
                    if (!((_w == 32) || (((_w >= 34) && (_w <= 58)) || ((_w >= 65) && (_w <= 90))))) { //#21507
                        $j--; //#21506
                        $k[$j++] = 'bwipp.maxicodeBadMode3PostCode#21506'; //#21506
                        $k[$j++] = "A mode 3 postcode must not exceed 6 characters"; //#21506
                        bwipp_raiseerror(); //#21506
                    } //#21506
                }); //#21506
            } //#21506
        } else { //#21511
            $j--; //#21511
            $k[$j++] = 'bwipp.maxicodeExpectedPostCode#21511'; //#21511
            $k[$j++] = "Expected postcode followed by group separator character"; //#21511
            bwipp_raiseerror(); //#21511
        } //#21511
        $search($k[--$j], "\x1d"); //#21513
        if ($k[--$j]) { //#21524
            $_.ccode = $k[--$j]; //#21514
            $j--; //#21514
            $k[$j++] = true; //#21519
            for (var _10 = 0, _11 = 1; _10 < _11; _10++) { //#21519
                if ($_.ccode.length != 3) { //#21517
                    $j--; //#21517
                    $k[$j++] = false; //#21517
                    break; //#21517
                } //#21517
                $forall($_.ccode, function() { //#21518
                    var _14 = $k[--$j]; //#21518
                    if ((_14 < 48) || (_14 > 57)) { //#21518
                        $j--; //#21518
                        $k[$j++] = false; //#21518
                        return true; //#21518
                    } //#21518
                }); //#21518
            } //#21518
            if ($nt($k[--$j])) { //#21522
                $j--; //#21521
                $k[$j++] = 'bwipp.maxicodeBadCountryCode#21521'; //#21521
                $k[$j++] = "Country code must be three digits"; //#21521
                bwipp_raiseerror(); //#21521
            } //#21521
        } else { //#21524
            $j--; //#21524
            $k[$j++] = 'bwipp.maxicodeExpectedCountryCode#21524'; //#21524
            $k[$j++] = "Expected country code followed by group separator character"; //#21524
            bwipp_raiseerror(); //#21524
        } //#21524
        $search($k[--$j], "\x1d"); //#21526
        if ($k[--$j]) { //#21537
            $_.scode = $k[--$j]; //#21527
            $j--; //#21527
            $k[$j++] = true; //#21532
            for (var _19 = 0, _1A = 1; _19 < _1A; _19++) { //#21532
                if ($_.scode.length != 3) { //#21530
                    $j--; //#21530
                    $k[$j++] = false; //#21530
                    break; //#21530
                } //#21530
                $forall($_.scode, function() { //#21531
                    var _1D = $k[--$j]; //#21531
                    if ((_1D < 48) || (_1D > 57)) { //#21531
                        $j--; //#21531
                        $k[$j++] = false; //#21531
                        return true; //#21531
                    } //#21531
                }); //#21531
            } //#21531
            if ($nt($k[--$j])) { //#21535
                $j--; //#21534
                $k[$j++] = 'bwipp.maxicodeBadServiceClass#21534'; //#21534
                $k[$j++] = "Service class must be three digits"; //#21534
                bwipp_raiseerror(); //#21534
            } //#21534
        } else { //#21537
            $j--; //#21537
            $k[$j++] = 'bwipp.maxicodeExpectedServiceClass#21537'; //#21537
            $k[$j++] = "Expected service class followed by group separator character"; //#21537
            bwipp_raiseerror(); //#21537
        } //#21537
        $_.barcode = $k[--$j]; //#21539
        var _1I = $s($_.barcode.length + $_.fid.length); //#21542
        $puti(_1I, 0, $_.fid); //#21543
        $puti(_1I, $_.fid.length, $_.barcode); //#21544
        $_.barcode = _1I; //#21545
        $_.barlen = $_.barcode.length; //#21546
        $k[$j++] = Infinity; //#21548
        var _1N = $_.barcode; //#21548
        for (var _1O = 0, _1P = _1N.length; _1O < _1P; _1O++) { //#21548
            $k[$j++] = $get(_1N, _1O); //#21548
        } //#21548
        $_.msg = $a(); //#21548
        $_.msglen = $_.msg.length; //#21549
    } //#21549
    if (!bwipp_maxicode.__21647__) { //#21647
        $_ = Object.create($_); //#21647
        $_.eci = -1; //#21555
        $_.pad = -2; //#21555
        $_.ns = -3; //#21555
        $_.la = -4; //#21556
        $_.lb = -5; //#21556
        $_.sa = -6; //#21557
        $_.sb = -7; //#21557
        $_.sc = -8; //#21557
        $_.sd = -9; //#21557
        $_.se = -10; //#21557
        $_.sa2 = -11; //#21558
        $_.sa3 = -12; //#21558
        $_.lkc = -13; //#21559
        $_.lkd = -14; //#21559
        $_.lke = -15; //#21559
        $_.pd2 = -16; //#21560
        $_.pd3 = -17; //#21560
        $_.charmaps = $a([$a([13, "`", 192, 224, 0]), $a(["A", "a", 193, 225, 1]), $a(["B", "b", 194, 226, 2]), $a(["C", "c", 195, 227, 3]), $a(["D", "d", 196, 228, 4]), $a(["E", "e", 197, 229, 5]), $a(["F", "f", 198, 230, 6]), $a(["G", "g", 199, 231, 7]), $a(["H", "h", 200, 232, 8]), $a(["I", "i", 201, 233, 9]), $a(["J", "j", 202, 234, 10]), $a(["K", "k", 203, 235, 11]), $a(["L", "l", 204, 236, 12]), $a(["M", "m", 205, 237, 13]), $a(["N", "n", 206, 238, 14]), $a(["O", "o", 207, 239, 15]), $a(["P", "p", 208, 240, 16]), $a(["Q", "q", 209, 241, 17]), $a(["R", "r", 210, 242, 18]), $a(["S", "s", 211, 243, 19]), $a(["T", "t", 212, 244, 20]), $a(["U", "u", 213, 245, 21]), $a(["V", "v", 214, 246, 22]), $a(["W", "w", 215, 247, 23]), $a(["X", "x", 216, 248, 24]), $a(["Y", "y", 217, 249, 25]), $a(["Z", "z", 218, 250, 26]), $a([$_.eci, $_.eci, $_.eci, $_.eci, $_.eci]), $a([28, 28, 28, 28, $_.pad]), $a([29, 29, 29, 29, $_.pad]), $a([30, 30, 30, 30, 27]), $a([$_.ns, $_.ns, $_.ns, $_.ns, $_.ns]), $a([" ", "{", 219, 251, 28]), $a([$_.pad, $_.pad, 220, 252, 29]), $a(["\"", "}", 221, 253, 30]), $a(["#", "~", 222, 254, 31]), $a(["$", 127, 223, 255, 159]), $a(["%", ";", 170, 161, 160]), $a(["&", "<", 172, 168, 162]), $a(["'", "=", 177, 171, 163]), $a([40, ">", 178, 175, 164]), $a([41, "?", 179, 176, 165]), $a(["*", "[", 181, 180, 166]), $a(["+", 92, 185, 183, 167]), $a([",", "]", 186, 184, 169]), $a(["-", "^", 188, 187, 173]), $a([".", "_", 189, 191, 174]), $a(["/", " ", 190, 138, 182]), $a(["0", ",", 128, 139, 149]), $a(["1", ".", 129, 140, 150]), $a(["2", "/", 130, 141, 151]), $a(["3", ":", 131, 142, 152]), $a(["4", "@", 132, 143, 153]), $a(["5", "!", 133, 144, 154]), $a(["6", "|", 134, 145, 155]), $a(["7", $_.pd2, 135, 146, 156]), $a(["8", $_.sa2, 136, 147, 157]), $a(["9", $_.sa3, 137, 148, 158]), $a([":", $_.pd3, $_.la, $_.la, $_.la]), $a([$_.sb, $_.sa, " ", " ", " "]), $a([$_.sc, $_.sc, $_.lkc, $_.sc, $_.sc]), $a([$_.sd, $_.sd, $_.sd, $_.lkd, $_.sd]), $a([$_.se, $_.se, $_.se, $_.se, $_.lke]), $a([$_.lb, $_.la, $_.lb, $_.lb, $_.lb])]); //#21629
        $_.charvals = $a([new Map, new Map, new Map, new Map, new Map]); //#21632
        for (var _3G = 0, _3F = $_.charmaps.length - 1; _3G <= _3F; _3G += 1) { //#21641
            $_.i = _3G; //#21634
            $_.encs = $get($_.charmaps, $_.i); //#21635
            for (var _3K = 0; _3K <= 4; _3K += 1) { //#21640
                $_.j = _3K; //#21637
                var _3N = $get($_.encs, $_.j); //#21638
                $k[$j++] = _3N; //#21638
                if ($eq($type(_3N), 'stringtype')) { //#21638
                    var _3Q = $get($k[--$j], 0); //#21638
                    $k[$j++] = _3Q; //#21638
                } //#21638
                $put($get($_.charvals, $_.j), $k[--$j], $_.i); //#21639
            } //#21639
        } //#21639
        $_.seta = $get($_.charvals, 0); //#21642
        $_.setb = $get($_.charvals, 1); //#21643
        $_.setc = $get($_.charvals, 2); //#21644
        $_.setd = $get($_.charvals, 3); //#21645
        $_.sete = $get($_.charvals, 4); //#21646
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_maxicode.$ctx[id] = $_[id]); //#21646
        bwipp_maxicode.__21647__ = 1; //#21646
        $_ = Object.getPrototypeOf($_); //#21646
    } //#21646
    $k[$j++] = Infinity; //#21650
    for (var _3i = 0, _3j = $_.msglen + 1; _3i < _3j; _3i++) { //#21650
        $k[$j++] = 0; //#21650
    } //#21650
    $_.nseq = $a(); //#21650
    for (var _3m = $_.msglen - 1; _3m >= 0; _3m -= 1) { //#21658
        $_.i = _3m; //#21652
        var _3p = $get($_.msg, $_.i); //#21653
        if ((_3p >= 48) && (_3p <= 57)) { //#21656
            $put($_.nseq, $_.i, $f($get($_.nseq, $_.i + 1) + 1)); //#21654
        } else { //#21656
            $put($_.nseq, $_.i, 0); //#21656
        } //#21656
    } //#21656
    $_.nseq = $geti($_.nseq, 0, $_.msglen); //#21659
    $_.prefixinset = function() {
        $k[$j++] = 0; //#21666
        for (;;) { //#21666
            var _40 = $k[--$j]; //#21664
            var _41 = $k[--$j]; //#21664
            $k[$j++] = _41; //#21664
            $k[$j++] = _40; //#21664
            if (_40 >= _41.length) { //#21664
                break; //#21664
            } //#21664
            var _42 = $k[--$j]; //#21665
            var _43 = $k[--$j]; //#21665
            var _45 = $k[--$j]; //#21665
            var _46 = $get(_45, $get(_43, _42)) !== undefined; //#21665
            $k[$j++] = _45; //#21665
            $k[$j++] = _43; //#21665
            $k[$j++] = _42; //#21665
            if (_46) { //#21665
                var _47 = $k[--$j]; //#21665
                $k[$j++] = $f(_47 + 1); //#21665
            } else { //#21665
                break; //#21665
            } //#21665
        } //#21665
        var _48 = $k[--$j]; //#21667
        var _49 = $k[--$j]; //#21667
        $k[$j++] = _48; //#21667
        $k[$j++] = _49; //#21667
        $j--; //#21667
        var _4A = $k[--$j]; //#21667
        var _4B = $k[--$j]; //#21667
        $k[$j++] = _4A; //#21667
        $k[$j++] = _4B; //#21667
        $j--; //#21667
    }; //#21667
    $_.enc = function() {
        var _4C = $k[--$j]; //#21671
        $put($_.out, $_.j, $get(_4C, $k[--$j])); //#21671
        $_.j = $_.j + 1; //#21672
    }; //#21672
    $_.out = $a(144); //#21675
    $_.i = 0; //#21676
    $_.j = 0; //#21676
    $_.cset = "seta"; //#21676
    for (;;) { //#21828
        if ($_.i == $_.msglen) { //#21685
            if ($ne($_.cset, "seta") && $ne($_.cset, "setb")) { //#21683
                $k[$j++] = $_.la; //#21681
                $k[$j++] = $_[$_.cset]; //#21681
                $_.enc(); //#21681
                $_.cset = "seta"; //#21682
            } //#21682
            break; //#21684
        } //#21684
        for (;;) { //#21827
            if ($get($_.msg, $_.i) <= -1000000) { //#21714
                $k[$j++] = $_.eci; //#21689
                $k[$j++] = $_[$_.cset]; //#21689
                $_.enc(); //#21689
                var _4Z = $f((-$get($_.msg, $_.i)) - 1000000); //#21691
                $k[$j++] = _4Z; //#21709
                if (_4Z <= 31) { //#21708
                    var _4a = $k[--$j]; //#21692
                    $k[$j++] = _4a & 63; //#21693
                    $astore($a(1)); //#21693
                } else { //#21708
                    var _4c = $k[--$j]; //#21694
                    $k[$j++] = _4c; //#21709
                    if (_4c <= 1023) { //#21708
                        var _4d = $k[--$j]; //#21695
                        $k[$j++] = ((_4d >>> 6) & 31) | 32; //#21697
                        $k[$j++] = _4d & 63; //#21697
                        $astore($a(2)); //#21697
                    } else { //#21708
                        var _4f = $k[--$j]; //#21698
                        $k[$j++] = _4f; //#21709
                        if (_4f <= 32767) { //#21708
                            var _4g = $k[--$j]; //#21699
                            $k[$j++] = ((_4g >>> 12) & 47) | 48; //#21702
                            $k[$j++] = (_4g >>> 6) & 63; //#21702
                            $k[$j++] = _4g & 63; //#21702
                            $astore($a(3)); //#21702
                        } else { //#21708
                            var _4i = $k[--$j]; //#21704
                            $k[$j++] = ((_4i >>> 18) & 55) | 56; //#21708
                            $k[$j++] = (_4i >>> 12) & 63; //#21708
                            $k[$j++] = (_4i >>> 6) & 63; //#21708
                            $k[$j++] = _4i & 63; //#21708
                            $astore($a(4)); //#21708
                        } //#21708
                    } //#21708
                } //#21708
                var _4k = $k[--$j]; //#21710
                $puti($_.out, $_.j, _4k); //#21710
                $_.j = _4k.length + $_.j; //#21711
                $_.i = $_.i + 1; //#21712
                break; //#21713
            } //#21713
            if ($get($_.nseq, $_.i) >= 9) { //#21725
                var _4u = $geti($_.msg, $_.i, 9); //#21718
                $k[$j++] = 0; //#21718
                for (var _4v = 0, _4w = _4u.length; _4v < _4w; _4v++) { //#21718
                    var _4y = $k[--$j]; //#21718
                    $k[$j++] = ($f(_4y + $f($get(_4u, _4v) - 48))) * 10; //#21718
                } //#21718
                var _4z = $k[--$j]; //#21718
                $k[$j++] = ~~(_4z / 10); //#21719
                for (var _50 = 0, _51 = 4; _50 < _51; _50++) { //#21719
                    var _52 = $k[--$j]; //#21719
                    $k[$j++] = _52 & 63; //#21719
                    $k[$j++] = _52 >>> 6; //#21719
                } //#21719
                $k[$j++] = $get($_[$_.cset], $_.ns); //#21720
                for (var _57 = 0; _57 <= 10; _57 += 2) { //#21720
                    var _58 = $k[$j - 1 - _57]; //#21720
                    $k[$j++] = _58; //#21720
                } //#21720
                $astore($a(6)); //#21720
                var _5A = $k[--$j]; //#21720
                var _5B = $k[--$j]; //#21720
                var _5C = $k[--$j]; //#21720
                var _5D = $k[--$j]; //#21720
                var _5E = $k[--$j]; //#21720
                var _5F = $k[--$j]; //#21720
                var _5G = $k[--$j]; //#21720
                $k[$j++] = _5A; //#21720
                $k[$j++] = _5G; //#21720
                $k[$j++] = _5F; //#21720
                $k[$j++] = _5E; //#21720
                $k[$j++] = _5D; //#21720
                $k[$j++] = _5C; //#21720
                $k[$j++] = _5B; //#21720
                for (var _5H = 0, _5I = 6; _5H < _5I; _5H++) { //#21720
                    $j--; //#21720
                } //#21720
                $puti($_.out, $_.j, $k[--$j]); //#21721
                $_.i = $_.i + 9; //#21722
                $_.j = $_.j + 6; //#21723
                break; //#21724
            } //#21724
            $_.char1 = $get($_.msg, $_.i); //#21728
            $k[$j++] = 'char2'; //#21729
            if (($_.i + 1) < $_.msglen) { //#21729
                $k[$j++] = $get($_.msg, $_.i + 1); //#21729
            } else { //#21729
                $k[$j++] = -99; //#21729
            } //#21729
            var _5W = $k[--$j]; //#21729
            $_[$k[--$j]] = _5W; //#21729
            $k[$j++] = 'char3'; //#21730
            if (($_.i + 2) < $_.msglen) { //#21730
                $k[$j++] = $get($_.msg, $_.i + 2); //#21730
            } else { //#21730
                $k[$j++] = -99; //#21730
            } //#21730
            var _5d = $k[--$j]; //#21730
            $_[$k[--$j]] = _5d; //#21730
            var _5i = $get($_[$_.cset], $_.char1) !== undefined; //#21733
            if (_5i) { //#21737
                $k[$j++] = $_.char1; //#21734
                $k[$j++] = $_[$_.cset]; //#21734
                $_.enc(); //#21734
                $_.i = $_.i + 1; //#21735
                break; //#21736
            } //#21736
            var _5q = $get($_.setb, $_.char1) !== undefined; //#21740
            if ($eq($_.cset, "seta") && _5q) { //#21750
                var _5t = $get($_.setb, $_.char2) !== undefined; //#21741
                if (_5t) { //#21747
                    $k[$j++] = $_.lb; //#21742
                    $k[$j++] = $_.seta; //#21742
                    $_.enc(); //#21742
                    $_.cset = "setb"; //#21743
                } else { //#21747
                    $k[$j++] = $_.sb; //#21745
                    $k[$j++] = $_.seta; //#21745
                    $_.enc(); //#21745
                    $k[$j++] = $_.char1; //#21746
                    $k[$j++] = $_.setb; //#21746
                    $_.enc(); //#21746
                    $_.i = $_.i + 1; //#21747
                } //#21747
                break; //#21749
            } //#21749
            var _64 = $get($_.seta, $_.char1) !== undefined; //#21753
            if ($eq($_.cset, "setb") && _64) { //#21778
                var _65 = $_.seta; //#21754
                var _66 = $_.msg; //#21754
                var _67 = $_.i; //#21754
                var _68 = $_.msglen; //#21754
                var _69 = $_.i; //#21754
                var _6A = _68 - _69; //#21754
                var _6B = 4; //#21754
                if (4 > (_68 - _69)) { //#21754
                    var _ = _6A; //#21754
                    _6A = _6B; //#21754
                    _6B = _; //#21754
                } //#21754
                $k[$j++] = 'p'; //#21754
                $k[$j++] = _65; //#21754
                $k[$j++] = $geti(_66, _67, _6B); //#21754
                $_.prefixinset(); //#21754
                var _6D = $k[--$j]; //#21754
                $_[$k[--$j]] = _6D; //#21754
                if ($_.p == 1) { //#21759
                    $k[$j++] = $_.sa; //#21756
                    $k[$j++] = $_.setb; //#21756
                    $_.enc(); //#21756
                    $k[$j++] = $_.char1; //#21757
                    $k[$j++] = $_.seta; //#21757
                    $_.enc(); //#21757
                    $_.i = $_.i + 1; //#21758
                } //#21758
                if ($_.p == 2) { //#21765
                    $k[$j++] = $_.sa2; //#21761
                    $k[$j++] = $_.setb; //#21761
                    $_.enc(); //#21761
                    $k[$j++] = $_.char1; //#21762
                    $k[$j++] = $_.seta; //#21762
                    $_.enc(); //#21762
                    $k[$j++] = $_.char2; //#21763
                    $k[$j++] = $_.seta; //#21763
                    $_.enc(); //#21763
                    $_.i = $_.i + 2; //#21764
                } //#21764
                if ($_.p == 3) { //#21772
                    $k[$j++] = $_.sa3; //#21767
                    $k[$j++] = $_.setb; //#21767
                    $_.enc(); //#21767
                    $k[$j++] = $_.char1; //#21768
                    $k[$j++] = $_.seta; //#21768
                    $_.enc(); //#21768
                    $k[$j++] = $_.char2; //#21769
                    $k[$j++] = $_.seta; //#21769
                    $_.enc(); //#21769
                    $k[$j++] = $_.char3; //#21770
                    $k[$j++] = $_.seta; //#21770
                    $_.enc(); //#21770
                    $_.i = $_.i + 3; //#21771
                } //#21771
                if ($_.p >= 4) { //#21776
                    $k[$j++] = $_.la; //#21774
                    $k[$j++] = $_.setb; //#21774
                    $_.enc(); //#21774
                    $_.cset = "seta"; //#21775
                } //#21775
                break; //#21777
            } //#21777
            var _6i = $get($_.seta, $_.char1) !== undefined; //#21781
            if (_6i) { //#21785
                $k[$j++] = $_.la; //#21782
                $k[$j++] = $_[$_.cset]; //#21782
                $_.enc(); //#21782
                $_.cset = "seta"; //#21783
                break; //#21784
            } //#21784
            var _6o = $get($_.setb, $_.char1) !== undefined; //#21786
            if (_6o) { //#21790
                $k[$j++] = $_.lb; //#21787
                $k[$j++] = $_[$_.cset]; //#21787
                $_.enc(); //#21787
                $_.cset = "setb"; //#21788
                break; //#21789
            } //#21789
            var _6u = $get($_.setc, $_.char1) !== undefined; //#21793
            if (_6u) { //#21793
                $_.setx = "setc"; //#21793
                $_.sx = $_.sc; //#21793
                $_.lkx = $_.lkc; //#21793
            } //#21793
            var _6z = $get($_.setd, $_.char1) !== undefined; //#21794
            if (_6z) { //#21794
                $_.setx = "setd"; //#21794
                $_.sx = $_.sd; //#21794
                $_.lkx = $_.lkd; //#21794
            } //#21794
            var _74 = $get($_.sete, $_.char1) !== undefined; //#21795
            if (_74) { //#21795
                $_.setx = "sete"; //#21795
                $_.sx = $_.se; //#21795
                $_.lkx = $_.lke; //#21795
            } //#21795
            var _78 = $_[$_.setx]; //#21798
            var _79 = $_.msg; //#21798
            var _7A = $_.i; //#21798
            var _7B = $_.msglen; //#21798
            var _7C = $_.i; //#21798
            var _7D = _7B - _7C; //#21798
            var _7E = 4; //#21798
            if (4 > (_7B - _7C)) { //#21798
                var _ = _7D; //#21798
                _7D = _7E; //#21798
                _7E = _; //#21798
            } //#21798
            $k[$j++] = 'p'; //#21798
            $k[$j++] = _78; //#21798
            $k[$j++] = $geti(_79, _7A, _7E); //#21798
            $_.prefixinset(); //#21798
            var _7G = $k[--$j]; //#21798
            $_[$k[--$j]] = _7G; //#21798
            if ($_.p == 1) { //#21803
                $k[$j++] = $_.sx; //#21800
                $k[$j++] = $_[$_.cset]; //#21800
                $_.enc(); //#21800
                $k[$j++] = $_.char1; //#21801
                $k[$j++] = $_[$_.setx]; //#21801
                $_.enc(); //#21801
                $_.i = $_.i + 1; //#21802
            } //#21802
            if ($_.p == 2) { //#21810
                $k[$j++] = $_.sx; //#21805
                $k[$j++] = $_[$_.cset]; //#21805
                $_.enc(); //#21805
                $k[$j++] = $_.char1; //#21806
                $k[$j++] = $_[$_.setx]; //#21806
                $_.enc(); //#21806
                $k[$j++] = $_.sx; //#21807
                $k[$j++] = $_[$_.cset]; //#21807
                $_.enc(); //#21807
                $k[$j++] = $_.char2; //#21808
                $k[$j++] = $_[$_.setx]; //#21808
                $_.enc(); //#21808
                $_.i = $_.i + 2; //#21809
            } //#21809
            if ($_.p == 3) { //#21819
                $k[$j++] = $_.sx; //#21812
                $k[$j++] = $_[$_.cset]; //#21812
                $_.enc(); //#21812
                $k[$j++] = $_.char1; //#21813
                $k[$j++] = $_[$_.setx]; //#21813
                $_.enc(); //#21813
                $k[$j++] = $_.sx; //#21814
                $k[$j++] = $_[$_.cset]; //#21814
                $_.enc(); //#21814
                $k[$j++] = $_.char2; //#21815
                $k[$j++] = $_[$_.setx]; //#21815
                $_.enc(); //#21815
                $k[$j++] = $_.sx; //#21816
                $k[$j++] = $_[$_.cset]; //#21816
                $_.enc(); //#21816
                $k[$j++] = $_.char3; //#21817
                $k[$j++] = $_[$_.setx]; //#21817
                $_.enc(); //#21817
                $_.i = $_.i + 3; //#21818
            } //#21818
            if ($_.p >= 4) { //#21824
                $k[$j++] = $_.sx; //#21821
                $k[$j++] = $_[$_.cset]; //#21821
                $_.enc(); //#21821
                $k[$j++] = $_.lkx; //#21822
                $k[$j++] = $_[$_.setx]; //#21822
                $_.enc(); //#21822
                $_.cset = $_.setx; //#21823
            } //#21823
            break; //#21826
        } //#21826
    } //#21826
    $_.encmsg = $geti($_.out, 0, $_.j); //#21829
    $_.padval = $get($_[$_.cset], $_.pad); //#21830
    $k[$j++] = 'sami'; //#21833
    if ($_.sam != -1) { //#21833
        $k[$j++] = $a([$get($_.seta, $_.pad), (((~~($_.sam / 10)) - 1) * 8) + (($_.sam % 10) - 1)]); //#21833
    } else { //#21833
        $k[$j++] = $a([]); //#21833
    } //#21833
    var _8L = $k[--$j]; //#21833
    $_[$k[--$j]] = _8L; //#21833
    $k[$j++] = Infinity; //#21834
    $aload($_.sami); //#21834
    $aload($_.encmsg); //#21834
    $_.encmsg = $a(); //#21834
    if (($_.mode == 2) || ($_.mode == 3)) { //#21893
        if ($_.encmsg.length > 84) { //#21841
            $k[$j++] = 'bwipp.maxicodeMode23TooLong#21840'; //#21840
            $k[$j++] = "The secondary message is too long"; //#21840
            bwipp_raiseerror(); //#21840
        } //#21840
        var _8U = $strcpy($s(4), "0000"); //#21844
        var _8X = $cvrs($s(4), ~~$_.mode, 2); //#21844
        $puti(_8U, 4 - _8X.length, _8X); //#21844
        $_.mdb = _8U; //#21844
        var _8Z = $strcpy($s(10), "0000000000"); //#21845
        var _8c = $cvrs($s(10), $cvi($_.ccode), 2); //#21845
        $puti(_8Z, 10 - _8c.length, _8c); //#21845
        $_.ccb = _8Z; //#21845
        var _8e = $strcpy($s(10), "0000000000"); //#21846
        var _8h = $cvrs($s(10), $cvi($_.scode), 2); //#21846
        $puti(_8e, 10 - _8h.length, _8h); //#21846
        $_.scb = _8e; //#21846
        $_.pcb = $strcpy($s(36), "000000000000000000000000000000000000"); //#21847
        if ($_.mode == 2) { //#21860
            var _8o = $cvrs($s(6), $_.pcode.length, 2); //#21850
            $puti($_.pcb, 6 - _8o.length, _8o); //#21850
            var _8s = $cvrs($s(30), $cvi($_.pcode), 2); //#21851
            $puti($_.pcb, 36 - _8s.length, _8s); //#21851
        } else { //#21860
            $k[$j++] = Infinity; //#21854
            var _8u = $strcpy($s(6), "      "); //#21855
            $k[$j++] = _8u; //#21855
            $k[$j++] = _8u; //#21855
            $k[$j++] = 0; //#21855
            if ($_.pcode.length > 6) { //#21855
                $k[$j++] = $geti($_.pcode, 0, 6); //#21855
            } else { //#21855
                $k[$j++] = $_.pcode; //#21855
            } //#21855
            var _8z = $k[--$j]; //#21855
            var _90 = $k[--$j]; //#21855
            $puti($k[--$j], _90, _8z); //#21855
            $forall($k[--$j], function() { //#21856
                var _95 = $get($_.seta, $k[--$j]); //#21856
                $k[$j++] = _95; //#21856
            }); //#21856
            $_.pccw = $a(); //#21856
            for (var _97 = 0; _97 <= 5; _97 += 1) { //#21861
                $_.i = _97; //#21859
                var _9D = $cvrs($s(6), $get($_.pccw, $_.i), 2); //#21860
                $puti($_.pcb, ((6 * $_.i) + 6) - _9D.length, _9D); //#21860
            } //#21860
        } //#21860
        $_.scm = $s(60); //#21865
        $puti($_.scm, 2, $_.mdb); //#21866
        $puti($_.scm, 38, $geti($_.pcb, 0, 4)); //#21867
        $puti($_.scm, 30, $geti($_.pcb, 4, 6)); //#21868
        $puti($_.scm, 24, $geti($_.pcb, 10, 6)); //#21869
        $puti($_.scm, 18, $geti($_.pcb, 16, 6)); //#21870
        $puti($_.scm, 12, $geti($_.pcb, 22, 6)); //#21871
        $puti($_.scm, 6, $geti($_.pcb, 28, 6)); //#21872
        $puti($_.scm, 0, $geti($_.pcb, 34, 2)); //#21873
        $puti($_.scm, 52, $geti($_.ccb, 0, 2)); //#21874
        $puti($_.scm, 42, $geti($_.ccb, 2, 6)); //#21875
        $puti($_.scm, 36, $geti($_.ccb, 8, 2)); //#21876
        $puti($_.scm, 54, $geti($_.scb, 0, 6)); //#21877
        $puti($_.scm, 48, $geti($_.scb, 6, 4)); //#21878
        $_.pri = $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]); //#21881
        for (var _9t = 0; _9t <= 59; _9t += 1) { //#21887
            $_.i = _9t; //#21883
            $_.ps = ~~($_.i / 6); //#21884
            $_.ep = (~~(Math.pow(2, 5 - ($_.i % 6)))) * ($get($_.scm, $_.i) - 48); //#21885
            $put($_.pri, $_.ps, $f($get($_.pri, $_.ps) + $_.ep)); //#21886
        } //#21886
        $k[$j++] = Infinity; //#21890
        for (var _A5 = 0, _A6 = 84; _A5 < _A6; _A5++) { //#21890
            $k[$j++] = $_.padval; //#21890
        } //#21890
        $_.sec = $a(); //#21890
        $puti($_.sec, 0, $_.encmsg); //#21891
    } //#21891
    if (((($_.mode == 4) || ($_.mode == 5)) || ($_.mode == 6)) || ($_.mode == -1)) { //#21914
        if ($_.mode == -1) { //#21901
            var _AH = ($_.encmsg.length <= 77) ? 5 : 4; //#21900
            $_.mode = _AH; //#21900
        } //#21900
        $k[$j++] = Infinity; //#21903
        var _AJ = ($_.mode == 5) ? 78 : 94; //#21903
        for (var _AK = 0, _AL = _AJ; _AK < _AL; _AK++) { //#21903
            $k[$j++] = $_.padval; //#21903
        } //#21903
        $_.cws = $a(); //#21903
        if ($_.encmsg.length > ($_.cws.length - 1)) { //#21906
            $k[$j++] = 'bwipp.maxicodeMode56TooLong#21905'; //#21905
            $k[$j++] = "The message is too long"; //#21905
            bwipp_raiseerror(); //#21905
        } //#21905
        $put($_.cws, 0, $_.mode); //#21907
        $puti($_.cws, 1, $_.encmsg); //#21908
        $_.pri = $geti($_.cws, 0, 10); //#21911
        $_.sec = $geti($_.cws, 10, $_.cws.length - 10); //#21912
    } //#21912
    if (!bwipp_maxicode.__21921__) { //#21921
        $_ = Object.create($_); //#21921
        $k[$j++] = Infinity; //#21918
        $k[$j++] = 1; //#21918
        for (var _AZ = 0, _Aa = 63; _AZ < _Aa; _AZ++) { //#21918
            var _Ab = $k[--$j]; //#21918
            var _Ac = _Ab * 2; //#21918
            $k[$j++] = _Ab; //#21918
            $k[$j++] = _Ac; //#21918
            if (_Ac >= 64) { //#21918
                var _Ad = $k[--$j]; //#21918
                $k[$j++] = _Ad ^ 67; //#21918
            } //#21918
        } //#21918
        $_.rsalog = $a(); //#21918
        $_.rslog = $a(64); //#21919
        for (var _Ag = 1; _Ag <= 63; _Ag += 1) { //#21920
            $put($_.rslog, $get($_.rsalog, _Ag), _Ag); //#21920
        } //#21920
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_maxicode.$ctx[id] = $_[id]); //#21920
        bwipp_maxicode.__21921__ = 1; //#21920
        $_ = Object.getPrototypeOf($_); //#21920
    } //#21920
    $_.rsprod = function() {
        var _Al = $k[--$j]; //#21925
        var _Am = $k[--$j]; //#21925
        $k[$j++] = _Am; //#21929
        $k[$j++] = _Al; //#21929
        if ((_Al != 0) && (_Am != 0)) { //#21928
            var _Ap = $get($_.rslog, $k[--$j]); //#21926
            var _Au = $get($_.rsalog, $f(_Ap + $get($_.rslog, $k[--$j])) % 63); //#21926
            $k[$j++] = _Au; //#21926
        } else { //#21928
            $j -= 2; //#21928
            $k[$j++] = 0; //#21928
        } //#21928
    }; //#21928
    $_.rscodes = function() {
        $_.rsnum = $k[--$j]; //#21935
        $_.cwb = $k[--$j]; //#21936
        $k[$j++] = Infinity; //#21939
        $k[$j++] = 1; //#21939
        for (var _Ay = 0, _Az = $_.rsnum; _Ay < _Az; _Ay++) { //#21939
            $k[$j++] = 0; //#21939
        } //#21939
        $_.coeffs = $a(); //#21939
        for (var _B3 = 1, _B2 = $_.rsnum; _B3 <= _B2; _B3 += 1) { //#21948
            $_.i = _B3; //#21941
            $put($_.coeffs, $_.i, $get($_.coeffs, $_.i - 1)); //#21942
            for (var _BA = $_.i - 1; _BA >= 1; _BA -= 1) { //#21946
                $_.j = _BA; //#21944
                $k[$j++] = $_.coeffs; //#21945
                $k[$j++] = $_.j; //#21945
                $k[$j++] = $get($_.coeffs, $_.j - 1); //#21945
                $k[$j++] = $get($_.coeffs, $_.j); //#21945
                $k[$j++] = $get($_.rsalog, $_.i); //#21945
                $_.rsprod(); //#21945
                var _BM = $k[--$j]; //#21945
                var _BN = $k[--$j]; //#21945
                var _BO = $k[--$j]; //#21945
                $put($k[--$j], _BO, $xo(_BN, _BM)); //#21945
            } //#21945
            $k[$j++] = $_.coeffs; //#21947
            $k[$j++] = 0; //#21947
            $k[$j++] = $get($_.coeffs, 0); //#21947
            $k[$j++] = $get($_.rsalog, $_.i); //#21947
            $_.rsprod(); //#21947
            var _BW = $k[--$j]; //#21947
            var _BX = $k[--$j]; //#21947
            $put($k[--$j], _BX, _BW); //#21947
        } //#21947
        $_.coeffs = $geti($_.coeffs, 0, $_.coeffs.length - 1); //#21949
        $k[$j++] = Infinity; //#21952
        for (var _Bd = 0, _Be = $_.rsnum; _Bd < _Be; _Bd++) { //#21952
            $k[$j++] = 0; //#21952
        } //#21952
        $_.ecb = $a(); //#21952
        for (var _Bi = 0, _Bh = $_.cwb.length - 1; _Bi <= _Bh; _Bi += 1) { //#21961
            $_.t = $xo($get($_.cwb, _Bi), $get($_.ecb, 0)); //#21954
            for (var _Bo = $_.ecb.length - 1; _Bo >= 0; _Bo -= 1) { //#21960
                $_.i = _Bo; //#21956
                $_.p = ($_.ecb.length - $_.i) - 1; //#21957
                $k[$j++] = $_.ecb; //#21958
                $k[$j++] = $_.p; //#21958
                $k[$j++] = $_.t; //#21958
                $k[$j++] = $get($_.coeffs, $_.i); //#21958
                $_.rsprod(); //#21958
                var _Bx = $k[--$j]; //#21958
                var _By = $k[--$j]; //#21958
                $put($k[--$j], _By, _Bx); //#21958
                if ($_.i > 0) { //#21959
                    $put($_.ecb, $_.p, $xo($get($_.ecb, $_.p + 1), $get($_.ecb, $_.p))); //#21959
                } //#21959
            } //#21959
        } //#21959
        $k[$j++] = $_.ecb; //#21963
    }; //#21963
    $k[$j++] = Infinity; //#21968
    for (var _CC = 0, _CB = $_.sec.length - 1; _CC <= _CB; _CC += 2) { //#21968
        $k[$j++] = $get($_.sec, _CC); //#21968
    } //#21968
    $_.seco = $a(); //#21968
    $k[$j++] = Infinity; //#21969
    for (var _CI = 1, _CH = $_.sec.length - 1; _CI <= _CH; _CI += 2) { //#21969
        $k[$j++] = $get($_.sec, _CI); //#21969
    } //#21969
    $_.sece = $a(); //#21969
    var _CN = ($_.sec.length == 84) ? 20 : 28; //#21972
    $_.scodes = _CN; //#21972
    $k[$j++] = 'secochk'; //#21973
    $k[$j++] = $_.seco; //#21973
    $k[$j++] = $_.scodes; //#21973
    $_.rscodes(); //#21973
    var _CQ = $k[--$j]; //#21973
    $_[$k[--$j]] = _CQ; //#21973
    $k[$j++] = 'secechk'; //#21974
    $k[$j++] = $_.sece; //#21974
    $k[$j++] = $_.scodes; //#21974
    $_.rscodes(); //#21974
    var _CU = $k[--$j]; //#21974
    $_[$k[--$j]] = _CU; //#21974
    $k[$j++] = Infinity; //#21977
    for (var _CY = 0, _CX = $_.scodes - 1; _CY <= _CX; _CY += 1) { //#21977
        $k[$j++] = $get($_.secochk, _CY); //#21977
        $k[$j++] = $get($_.secechk, _CY); //#21977
    } //#21977
    $_.secchk = $a(); //#21977
    $k[$j++] = Infinity; //#21980
    $aload($_.pri); //#21981
    $k[$j++] = $_.pri; //#21982
    $k[$j++] = 10; //#21982
    $_.rscodes(); //#21982
    $aload($k[--$j]); //#21982
    $aload($_.sec); //#21983
    $aload($_.secchk); //#21984
    $_.codewords = $a(); //#21984
    $k[$j++] = Infinity; //#21988
    for (var _Ck = 0, _Cl = 864; _Ck < _Cl; _Ck++) { //#21988
        $k[$j++] = 0; //#21988
    } //#21988
    $_.mods = $a(); //#21988
    for (var _Cn = 0; _Cn <= 143; _Cn += 1) { //#21993
        $_.i = _Cn; //#21990
        $k[$j++] = Infinity; //#21991
        var _Cs = $cvrs($s(6), $get($_.codewords, $_.i), 2); //#21991
        for (var _Ct = 0, _Cu = _Cs.length; _Ct < _Cu; _Ct++) { //#21991
            $k[$j++] = $get(_Cs, _Ct) - 48; //#21991
        } //#21991
        $_.cw = $a(); //#21991
        $puti($_.mods, (6 * $_.i) + (6 - $_.cw.length), $_.cw); //#21992
    } //#21992
    if (!bwipp_maxicode.__22043__) { //#22043
        $_ = Object.create($_); //#22043
        $_.modmap = $a([469, 529, 286, 316, 347, 346, 673, 672, 703, 702, 647, 676, 283, 282, 313, 312, 370, 610, 618, 379, 378, 409, 408, 439, 705, 704, 559, 589, 588, 619, 458, 518, 640, 701, 675, 674, 285, 284, 315, 314, 310, 340, 531, 289, 288, 319, 349, 348, 456, 486, 517, 516, 471, 470, 369, 368, 399, 398, 429, 428, 549, 548, 579, 578, 609, 608, 649, 648, 679, 678, 709, 708, 639, 638, 669, 668, 699, 698, 279, 278, 309, 308, 339, 338, 381, 380, 411, 410, 441, 440, 561, 560, 591, 590, 621, 620, 547, 546, 577, 576, 607, 606, 367, 366, 397, 396, 427, 426, 291, 290, 321, 320, 351, 350, 651, 650, 681, 680, 711, 710, 1, 0, 31, 30, 61, 60, 3, 2, 33, 32, 63, 62, 5, 4, 35, 34, 65, 64, 7, 6, 37, 36, 67, 66, 9, 8, 39, 38, 69, 68, 11, 10, 41, 40, 71, 70, 13, 12, 43, 42, 73, 72, 15, 14, 45, 44, 75, 74, 17, 16, 47, 46, 77, 76, 19, 18, 49, 48, 79, 78, 21, 20, 51, 50, 81, 80, 23, 22, 53, 52, 83, 82, 25, 24, 55, 54, 85, 84, 27, 26, 57, 56, 87, 86, 117, 116, 147, 146, 177, 176, 115, 114, 145, 144, 175, 174, 113, 112, 143, 142, 173, 172, 111, 110, 141, 140, 171, 170, 109, 108, 139, 138, 169, 168, 107, 106, 137, 136, 167, 166, 105, 104, 135, 134, 165, 164, 103, 102, 133, 132, 163, 162, 101, 100, 131, 130, 161, 160, 99, 98, 129, 128, 159, 158, 97, 96, 127, 126, 157, 156, 95, 94, 125, 124, 155, 154, 93, 92, 123, 122, 153, 152, 91, 90, 121, 120, 151, 150, 181, 180, 211, 210, 241, 240, 183, 182, 213, 212, 243, 242, 185, 184, 215, 214, 245, 244, 187, 186, 217, 216, 247, 246, 189, 188, 219, 218, 249, 248, 191, 190, 221, 220, 251, 250, 193, 192, 223, 222, 253, 252, 195, 194, 225, 224, 255, 254, 197, 196, 227, 226, 257, 256, 199, 198, 229, 228, 259, 258, 201, 200, 231, 230, 261, 260, 203, 202, 233, 232, 263, 262, 205, 204, 235, 234, 265, 264, 207, 206, 237, 236, 267, 266, 297, 296, 327, 326, 357, 356, 295, 294, 325, 324, 355, 354, 293, 292, 323, 322, 353, 352, 277, 276, 307, 306, 337, 336, 275, 274, 305, 304, 335, 334, 273, 272, 303, 302, 333, 332, 271, 270, 301, 300, 331, 330, 361, 360, 391, 390, 421, 420, 363, 362, 393, 392, 423, 422, 365, 364, 395, 394, 425, 424, 383, 382, 413, 412, 443, 442, 385, 384, 415, 414, 445, 444, 387, 386, 417, 416, 447, 446, 477, 476, 507, 506, 537, 536, 475, 474, 505, 504, 535, 534, 473, 472, 503, 502, 533, 532, 455, 454, 485, 484, 515, 514, 453, 452, 483, 482, 513, 512, 451, 450, 481, 480, 511, 510, 541, 540, 571, 570, 601, 600, 543, 542, 573, 572, 603, 602, 545, 544, 575, 574, 605, 604, 563, 562, 593, 592, 623, 622, 565, 564, 595, 594, 625, 624, 567, 566, 597, 596, 627, 626, 657, 656, 687, 686, 717, 716, 655, 654, 685, 684, 715, 714, 653, 652, 683, 682, 713, 712, 637, 636, 667, 666, 697, 696, 635, 634, 665, 664, 695, 694, 633, 632, 663, 662, 693, 692, 631, 630, 661, 660, 691, 690, 721, 720, 751, 750, 781, 780, 723, 722, 753, 752, 783, 782, 725, 724, 755, 754, 785, 784, 727, 726, 757, 756, 787, 786, 729, 728, 759, 758, 789, 788, 731, 730, 761, 760, 791, 790, 733, 732, 763, 762, 793, 792, 735, 734, 765, 764, 795, 794, 737, 736, 767, 766, 797, 796, 739, 738, 769, 768, 799, 798, 741, 740, 771, 770, 801, 800, 743, 742, 773, 772, 803, 802, 745, 744, 775, 774, 805, 804, 747, 746, 777, 776, 807, 806, 837, 836, 867, 866, 897, 896, 835, 834, 865, 864, 895, 894, 833, 832, 863, 862, 893, 892, 831, 830, 861, 860, 891, 890, 829, 828, 859, 858, 889, 888, 827, 826, 857, 856, 887, 886, 825, 824, 855, 854, 885, 884, 823, 822, 853, 852, 883, 882, 821, 820, 851, 850, 881, 880, 819, 818, 849, 848, 879, 878, 817, 816, 847, 846, 877, 876, 815, 814, 845, 844, 875, 874, 813, 812, 843, 842, 873, 872, 811, 810, 841, 840, 871, 870, 901, 900, 931, 930, 961, 960, 903, 902, 933, 932, 963, 962, 905, 904, 935, 934, 965, 964, 907, 906, 937, 936, 967, 966, 909, 908, 939, 938, 969, 968, 911, 910, 941, 940, 971, 970, 913, 912, 943, 942, 973, 972, 915, 914, 945, 944, 975, 974, 917, 916, 947, 946, 977, 976, 919, 918, 949, 948, 979, 978, 921, 920, 951, 950, 981, 980, 923, 922, 953, 952, 983, 982, 925, 924, 955, 954, 985, 984, 927, 926, 957, 956, 987, 986, 58, 89, 88, 118, 149, 148, 178, 209, 208, 238, 269, 268, 298, 329, 328, 358, 389, 388, 418, 449, 448, 478, 509, 508, 538, 569, 568, 598, 629, 628, 658, 689, 688, 718, 749, 748, 778, 809, 808, 838, 869, 868, 898, 929, 928, 958, 989, 988]); //#22042
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_maxicode.$ctx[id] = $_[id]); //#22042
        bwipp_maxicode.__22043__ = 1; //#22042
        $_ = Object.getPrototypeOf($_); //#22042
    } //#22042
    $_.pixs = $a(864); //#22046
    $_.j = 0; //#22047
    for (var _D6 = 0, _D5 = $_.mods.length - 1; _D6 <= _D5; _D6 += 1) { //#22054
        $_.i = _D6; //#22049
        if ($get($_.mods, $_.i) == 1) { //#22053
            $put($_.pixs, $_.j, $get($_.modmap, $_.i)); //#22051
            $_.j = $_.j + 1; //#22052
        } //#22052
    } //#22052
    $k[$j++] = Infinity; //#22055
    $aload($geti($_.pixs, 0, $_.j)); //#22055
    $k[$j++] = 28; //#22055
    $k[$j++] = 29; //#22055
    $k[$j++] = 280; //#22055
    $k[$j++] = 281; //#22055
    $k[$j++] = 311; //#22055
    $k[$j++] = 457; //#22055
    $k[$j++] = 488; //#22055
    $k[$j++] = 500; //#22055
    $k[$j++] = 530; //#22055
    $k[$j++] = 670; //#22055
    $k[$j++] = 700; //#22055
    $k[$j++] = 677; //#22055
    $k[$j++] = 707; //#22055
    $_.pixs = $a(); //#22055
    var _DM = new Map([
        ["ren", bwipp_renmaximatrix],
        ["pixs", $_.pixs],
        ["borderleft", 1],
        ["borderright", 1],
        ["bordertop", 1],
        ["borderbottom", 1],
        ["opt", $_.options]
    ]); //#22065
    $k[$j++] = _DM; //#22068
    if (!$_.dontdraw) { //#22068
        bwipp_renmaximatrix(); //#22068
    } //#22068
    $_ = Object.getPrototypeOf($_); //#22070
    $_ = Object.getPrototypeOf($_); //#22072
} //bwipp_maxicode
function bwipp_azteccode() {
    $_ = Object.create($_); //#22103
    $_.dontdraw = false; //#22106
    $_.format = "full"; //#22107
    $_.readerinit = false; //#22108
    $_.layers = -1; //#22109
    $_.eclevel = 23; //#22110
    $_.ecaddchars = 3; //#22111
    $_.raw = false; //#22112
    $_.parse = false; //#22113
    $_.parsefnc = false; //#22114
    $k[$j++] = $_; //#22116
    bwipp_processoptions(); //#22116
    $_.options = $k[--$j]; //#22116
    $_.barcode = $k[--$j]; //#22117
    bwipp_loadctx(bwipp_azteccode) //#22119
    if ($eq($_.barcode, "")) { //#22123
        $k[$j++] = 'bwipp.aztecEmptyData#22122'; //#22122
        $k[$j++] = "The data must not be empty"; //#22122
        bwipp_raiseerror(); //#22122
    } //#22122
    if (($_.eclevel < 5) || ($_.eclevel > 95)) { //#22127
        $k[$j++] = 'bwipp.aztecInvalidEClevel#22126'; //#22126
        $k[$j++] = "The EC percentage must be from 5 to 95"; //#22126
        bwipp_raiseerror(); //#22126
    } //#22126
    if ($_.ecaddchars < 3) { //#22131
        $k[$j++] = 'bwipp.aztecInvalidECaddChars#22130'; //#22130
        $k[$j++] = "The number of additional EC codewords must be 3 or more"; //#22130
        bwipp_raiseerror(); //#22130
    } //#22130
    if ($ne($_.format, "full") && ($ne($_.format, "compact") && $ne($_.format, "rune"))) { //#22135
        $k[$j++] = 'bwipp.aztecInvalidFormat#22134'; //#22134
        $k[$j++] = "The format must be either full, compact or rune"; //#22134
        bwipp_raiseerror(); //#22134
    } //#22134
    if ($eq($_.format, "full")) { //#22144
        if ($_.readerinit && (($_.layers < 1) || ($_.layers > 22))) { //#22140
            $k[$j++] = 'bwipp.aztecFullInitInvalidLayers#22139'; //#22139
            $k[$j++] = "Full-range symbols for reader programming must specify from 1 to 22 layers"; //#22139
            bwipp_raiseerror(); //#22139
        } //#22139
        if (($_.layers != -1) && (($_.layers < 1) || ($_.layers > 32))) { //#22143
            $k[$j++] = 'bwipp.aztecFullInvalidLayers#22142'; //#22142
            $k[$j++] = "Layers for full-range symbols must be from 1 to 32"; //#22142
            bwipp_raiseerror(); //#22142
        } //#22142
    } //#22142
    if ($eq($_.format, "compact")) { //#22156
        if ($_.readerinit) { //#22152
            if (($_.layers != -1) && ($_.layers != 1)) { //#22150
                $k[$j++] = 'bwipp.aztecCompactInitInvalidLayers#22149'; //#22149
                $k[$j++] = "Compact symbols for reader programming must have 1 layer"; //#22149
                bwipp_raiseerror(); //#22149
            } //#22149
            $_.layers = 1; //#22151
        } //#22151
        if (($_.layers != -1) && (($_.layers < 1) || ($_.layers > 4))) { //#22155
            $k[$j++] = 'bwipp.aztecCompactInvalidLayers#22154'; //#22154
            $k[$j++] = "Layers for compact symbols must be from 1 to 4"; //#22154
            bwipp_raiseerror(); //#22154
        } //#22154
    } //#22154
    if ($eq($_.format, "rune")) { //#22176
        if ($_.layers != -1) { //#22161
            $k[$j++] = 'bwipp.aztecRuneInvalidLayers#22160'; //#22160
            $k[$j++] = "It is not valid to specify layers for runes"; //#22160
            bwipp_raiseerror(); //#22160
        } //#22160
        if ($_.readerinit) { //#22164
            $k[$j++] = 'bwipp.aztecRuneReaderInit#22163'; //#22163
            $k[$j++] = "Reader initialisation is not compactible with Aztec Runes"; //#22163
            bwipp_raiseerror(); //#22163
        } //#22163
        if ($_.barcode.length == 0) { //#22167
            $k[$j++] = 'bwipp.aztecRuneNotNumeric#22166'; //#22166
            $k[$j++] = "Aztec runes must be numeric"; //#22166
            bwipp_raiseerror(); //#22166
        } //#22166
        $forall($_.barcode, function() { //#22172
            var _S = $k[--$j]; //#22169
            if ((_S < 48) || (_S > 57)) { //#22171
                $k[$j++] = 'bwipp.aztecRuneNotNumeric#22170'; //#22170
                $k[$j++] = "Aztec runes must be numeric"; //#22170
                bwipp_raiseerror(); //#22170
            } //#22170
        }); //#22170
        var _U = $cvi($_.barcode); //#22173
        if ((_U < 0) || (_U > 255)) { //#22175
            $k[$j++] = 'bwipp.aztecRuneInvalid#22174'; //#22174
            $k[$j++] = "Aztec runes must be 0 to 255"; //#22174
            bwipp_raiseerror(); //#22174
        } //#22174
    } //#22174
    $_.fn1 = -1; //#22179
    var _Y = new Map([
        ["parse", $_.parse],
        ["parsefnc", $_.parsefnc],
        ["eci", true],
        ["FNC1", $_.fn1]
    ]); //#22184
    $_.fncvals = _Y; //#22185
    $k[$j++] = 'msg'; //#22186
    $k[$j++] = $_.barcode; //#22186
    $k[$j++] = $_.fncvals; //#22186
    bwipp_parseinput(); //#22186
    var _b = $k[--$j]; //#22186
    $_[$k[--$j]] = _b; //#22186
    $_.msglen = $_.msg.length; //#22187
    if (!bwipp_azteccode.__22287__) { //#22287
        $_ = Object.create($_); //#22287
        $_.U = 0; //#22191
        $_.L = 1; //#22191
        $_.M = 2; //#22191
        $_.P = 3; //#22191
        $_.D = 4; //#22191
        $_.B = 5; //#22191
        $_.lu = -2; //#22194
        $_.ll = -3; //#22194
        $_.lm = -4; //#22194
        $_.lp = -5; //#22195
        $_.ld = -6; //#22195
        $_.su = -7; //#22195
        $_.sp = -8; //#22196
        $_.sb = -9; //#22196
        $_.fl = -10; //#22196
        $_.p2 = -11; //#22197
        $_.p3 = -12; //#22197
        $_.p4 = -13; //#22197
        $_.p5 = -14; //#22197
        $_.charmaps = $a([$a([$_.sp, $_.sp, $_.sp, $_.fl, $_.sp]), $a([32, 32, 32, 13, 32]), $a(["A", "a", 1, $_.p2, "0"]), $a(["B", "b", 2, $_.p3, "1"]), $a(["C", "c", 3, $_.p4, "2"]), $a(["D", "d", 4, $_.p5, "3"]), $a(["E", "e", 5, "!", "4"]), $a(["F", "f", 6, "\"", "5"]), $a(["G", "g", 7, "#", "6"]), $a(["H", "h", 8, "$", "7"]), $a(["I", "i", 9, "%", "8"]), $a(["J", "j", 10, "&", "9"]), $a(["K", "k", 11, "'", ","]), $a(["L", "l", 12, 40, "."]), $a(["M", "m", 13, 41, $_.lu]), $a(["N", "n", 27, "*", $_.su]), $a(["O", "o", 28, "+", -99]), $a(["P", "p", 29, ",", -99]), $a(["Q", "q", 30, "-", -99]), $a(["R", "r", 31, ".", -99]), $a(["S", "s", "@", "/", -99]), $a(["T", "t", 92, ":", -99]), $a(["U", "u", "^", ";", -99]), $a(["V", "v", "_", "<", -99]), $a(["W", "w", "`", "=", -99]), $a(["X", "x", "|", ">", -99]), $a(["Y", "y", "~", "?", -99]), $a(["Z", "z", 127, "[", -99]), $a([$_.ll, $_.su, $_.ll, "]", -99]), $a([$_.lm, $_.lm, $_.lu, "{", -99]), $a([$_.ld, $_.ld, $_.lp, "}", -99]), $a([$_.sb, $_.sb, $_.sb, $_.lu, -99])]); //#22234
        $_.charvals = $a([new Map, new Map, new Map, new Map, new Map]); //#22237
        for (var _1c = 0, _1b = $_.charmaps.length - 1; _1c <= _1b; _1c += 1) { //#22246
            $_.i = _1c; //#22239
            $_.encs = $get($_.charmaps, $_.i); //#22240
            for (var _1g = 0; _1g <= 4; _1g += 1) { //#22245
                $_.j = _1g; //#22242
                var _1j = $get($_.encs, $_.j); //#22243
                $k[$j++] = _1j; //#22243
                if ($eq($type(_1j), 'stringtype')) { //#22243
                    var _1m = $get($k[--$j], 0); //#22243
                    $k[$j++] = _1m; //#22243
                } //#22243
                $put($get($_.charvals, $_.j), $k[--$j], $_.i); //#22244
            } //#22244
        } //#22244
        var _1w = new Map([
            ["\x0d\x0a", $_.p2],
            [". ", $_.p3],
            [", ", $_.p4],
            [": ", $_.p5]
        ]); //#22253
        $_.pcomp = _1w; //#22254
        $_.e = 1000000; //#22256
        var _22 = $a([0, 0, 0, 0, 0, 0]); //#22265
        $_.latlen = $a([$a([0, 5, 5, 10, 5, 10]), $a([9, 0, 5, 10, 5, 10]), $a([5, 5, 0, 5, 10, 10]), $a([5, 10, 10, 0, 10, 15]), $a([4, 9, 9, 14, 0, 14]), _22]); //#22266
        $_.latseq = $a([$a([$a([]), $a([$_.ll]), $a([$_.lm]), $a([$_.lm, $_.lp]), $a([$_.ld]), $a([$_.sb])]), $a([$a([$_.ld, $_.lu]), $a([]), $a([$_.lm]), $a([$_.lm, $_.lp]), $a([$_.ld]), $a([$_.sb])]), $a([$a([$_.lu]), $a([$_.ll]), $a([]), $a([$_.lp]), $a([$_.lu, $_.ld]), $a([$_.sb])]), $a([$a([$_.lu]), $a([$_.lu, $_.ll]), $a([$_.lu, $_.lm]), $a([]), $a([$_.lu, $_.ld]), $a([$_.lu, $_.sb])]), $a([$a([$_.lu]), $a([$_.lu, $_.ll]), $a([$_.lu, $_.lm]), $a([$_.lu, $_.lm, $_.lp]), $a([]), $a([$_.lu, $_.sb])]), $a([$a([$_.lu]), $a([$_.ll]), $a([$_.lm]), $a([]), $a([]), $a([])])]); //#22276
        $_.shftlen = $a([$a([$_.e, $_.e, $_.e, 5, $_.e]), $a([5, $_.e, $_.e, 5, $_.e]), $a([$_.e, $_.e, $_.e, 5, $_.e]), $a([$_.e, $_.e, $_.e, $_.e, $_.e]), $a([4, $_.e, $_.e, 4, $_.e])]); //#22285
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_azteccode.$ctx[id] = $_[id]); //#22285
        bwipp_azteccode.__22287__ = 1; //#22285
        $_ = Object.getPrototypeOf($_); //#22285
    } //#22285
    $_.msgbits = ""; //#22290
    if ($ne($_.format, "rune") && $_.raw) { //#22291
        $_.msgbits = $_.barcode; //#22291
    } //#22291
    if ($ne($_.format, "rune") && (!$_.raw)) { //#22582
        $_.charsize = function() {
            var _3v = $k[--$j]; //#22295
            $k[$j++] = _3v; //#22306
            if (_3v >= 0) { //#22304
                $j--; //#22297
                var _3y = $get($a([5, 5, 5, 5, 4, 8]), $k[--$j]); //#22297
                $k[$j++] = _3y; //#22297
            } else { //#22304
                var _3z = $k[--$j]; //#22299
                var _40 = $k[--$j]; //#22299
                $k[$j++] = _3z; //#22299
                $k[$j++] = _40; //#22299
                $j--; //#22299
                var _41 = $k[--$j]; //#22300
                $k[$j++] = _41; //#22305
                if (_41 == $_.fn1) { //#22304
                    $j--; //#22301
                    $k[$j++] = 8; //#22301
                } else { //#22304
                    var _44 = $f((-$k[--$j]) - 1000000); //#22303
                    $k[$j++] = _44; //#22303
                    if (_44 == 0) { //#22303
                        $j--; //#22303
                        $k[$j++] = 1; //#22303
                    } //#22303
                    var _45 = $k[--$j]; //#22304
                    $k[$j++] = (((~~(Math.log(_45) / Math.log(10))) + 1) * 4) + 8; //#22304
                } //#22304
            } //#22304
        }; //#22304
        $_.curlen = $a([0, $_.e, $_.e, $_.e, $_.e, $_.e]); //#22310
        $_.curseq = $a([$a([]), $a([]), $a([]), $a([]), $a([]), $a([])]); //#22311
        $_.backto = $_.U; //#22313
        $_.lastchar = ""; //#22314
        $forall($_.msg, function() { //#22466
            $_.char = $k[--$j]; //#22319
            for (;;) { //#22345
                $_.imp = false; //#22323
                var _4S = $a([$_.U, $_.L, $_.M, $_.P, $_.D, $_.B]); //#22324
                for (var _4T = 0, _4U = _4S.length; _4T < _4U; _4T++) { //#22343
                    $_.x = $get(_4S, _4T); //#22325
                    var _4c = $a([$_.U, $_.L, $_.M, $_.P, $_.D, $_.B]); //#22326
                    for (var _4d = 0, _4e = _4c.length; _4d < _4e; _4d++) { //#22342
                        $_.y = $get(_4c, _4d); //#22327
                        if (($_.x != $_.B) || ($_.y == $_.backto)) { //#22341
                            $_.cost = $f($get($_.curlen, $_.x) + $get($get($_.latlen, $_.x), $_.y)); //#22329
                            if ($_.cost < $get($_.curlen, $_.y)) { //#22340
                                $put($_.curlen, $_.y, $_.cost); //#22331
                                $k[$j++] = $_.curseq; //#22334
                                $k[$j++] = $_.y; //#22334
                                $k[$j++] = Infinity; //#22332
                                $aload($get($_.curseq, $_.x)); //#22333
                                $aload($get($get($_.latseq, $_.x), $_.y)); //#22334
                                var _59 = $a(); //#22334
                                var _5A = $k[--$j]; //#22335
                                $put($k[--$j], _5A, _59); //#22335
                                if ($_.y == $_.B) { //#22338
                                    $k[$j++] = 'backto'; //#22337
                                    if (($_.x == $_.P) || ($_.x == $_.D)) { //#22337
                                        $k[$j++] = $_.U; //#22337
                                    } else { //#22337
                                        $k[$j++] = $_.x; //#22337
                                    } //#22337
                                    var _5K = $k[--$j]; //#22337
                                    $_[$k[--$j]] = _5K; //#22337
                                } //#22337
                                $_.imp = true; //#22339
                            } //#22339
                        } //#22339
                    } //#22339
                } //#22339
                if (!$_.imp) { //#22344
                    break; //#22344
                } //#22344
            } //#22344
            $_.nxtlen = $a([$_.e, $_.e, $_.e, $_.e, $_.e, $_.e]); //#22348
            $_.nxtseq = $a(6); //#22349
            var _5b = $a([$_.U, $_.L, $_.M, $_.P, $_.D, $_.B]); //#22351
            for (var _5c = 0, _5d = _5b.length; _5c < _5d; _5c++) { //#22390
                $_.x = $get(_5b, _5c); //#22352
                for (;;) { //#22388
                    if ($_.char >= 0) { //#22360
                        if ($_.x != $_.B) { //#22358
                            var _5m = $get($get($_.charvals, $_.x), $_.char) !== undefined; //#22358
                            if (!_5m) { //#22358
                                break; //#22358
                            } //#22358
                        } //#22358
                    } else { //#22360
                        if ($_.x != $_.P) { //#22360
                            break; //#22360
                        } //#22360
                    } //#22360
                    $k[$j++] = 'cost'; //#22364
                    $k[$j++] = $get($_.curlen, $_.x); //#22364
                    $k[$j++] = $_.x; //#22364
                    $k[$j++] = $_.char; //#22364
                    $_.charsize(); //#22364
                    var _5u = $k[--$j]; //#22364
                    var _5v = $k[--$j]; //#22364
                    $_[$k[--$j]] = $f(_5v + _5u); //#22364
                    if ($_.cost < $get($_.nxtlen, $_.x)) { //#22368
                        $put($_.nxtlen, $_.x, $_.cost); //#22366
                        $k[$j++] = $_.nxtseq; //#22367
                        $k[$j++] = $_.x; //#22367
                        $k[$j++] = Infinity; //#22367
                        $aload($get($_.curseq, $_.x)); //#22367
                        $k[$j++] = $_.char; //#22367
                        var _6A = $a(); //#22367
                        var _6B = $k[--$j]; //#22367
                        $put($k[--$j], _6B, _6A); //#22367
                    } //#22367
                    if ($_.x == $_.B) { //#22371
                        break; //#22371
                    } //#22371
                    var _6K = $a([$_.U, $_.L, $_.M, $_.P, $_.D]); //#22372
                    for (var _6L = 0, _6M = _6K.length; _6L < _6M; _6L++) { //#22385
                        $_.y = $get(_6K, _6L); //#22373
                        if ($ne($_.x, $_.y)) { //#22384
                            $k[$j++] = 'cost'; //#22375
                            $k[$j++] = $f($get($_.curlen, $_.y) + $get($get($_.shftlen, $_.y), $_.x)); //#22375
                            $k[$j++] = $_.x; //#22375
                            $k[$j++] = $_.char; //#22375
                            $_.charsize(); //#22375
                            var _6a = $k[--$j]; //#22375
                            var _6b = $k[--$j]; //#22375
                            $_[$k[--$j]] = $f(_6b + _6a); //#22375
                            if ($_.cost < $get($_.nxtlen, $_.y)) { //#22383
                                $put($_.nxtlen, $_.y, $_.cost); //#22377
                                $k[$j++] = $_.nxtseq; //#22381
                                $k[$j++] = $_.y; //#22381
                                $k[$j++] = Infinity; //#22378
                                $aload($get($_.curseq, $_.y)); //#22379
                                var _6r = ($_.x == $_.U) ? $_.su : $_.sp; //#22380
                                $k[$j++] = _6r; //#22381
                                $k[$j++] = $_.char; //#22381
                                var _6t = $a(); //#22381
                                var _6u = $k[--$j]; //#22382
                                $put($k[--$j], _6u, _6t); //#22382
                            } //#22382
                        } //#22382
                    } //#22382
                    break; //#22387
                } //#22387
            } //#22387
            if ($ne($_.lastchar, "") && ($_.char >= 0)) { //#22451
                var _6y = $s(2); //#22394
                $put(_6y, 0, $_.lastchar); //#22394
                $put(_6y, 1, $_.char); //#22394
                $_.pchars = _6y; //#22394
                var _73 = $get($_.pcomp, $_.pchars) !== undefined; //#22395
                if (_73) { //#22450
                    var _79 = $a([$_.U, $_.L, $_.M, $_.P, $_.D]); //#22396
                    for (var _7A = 0, _7B = _79.length; _7A < _7B; _7A++) { //#22449
                        $_.i = $get(_79, _7A); //#22397
                        $_.inP = true; //#22398
                        if ($_.i == $_.M) { //#22403
                            if ($_.lastchar == 13) { //#22400
                                $_.inP = false; //#22400
                            } //#22400
                        } else { //#22403
                            if ($_.i == $_.D) { //#22404
                                if (($_.lastchar == 44) || ($_.lastchar == 46)) { //#22403
                                    $_.inP = false; //#22403
                                } //#22403
                            } //#22403
                        } //#22403
                        if ($_.inP && $lt($get($_.curlen, $_.i), $get($_.nxtlen, $_.i))) { //#22448
                            $_.curseqi = $get($_.curseq, $_.i); //#22407
                            $_.lastld = false; //#22408
                            $_.lastsp = false; //#22409
                            $_.lastidx = -1; //#22410
                            for (var _7V = $_.curseqi.length - 1; _7V >= 0; _7V -= 1) { //#22431
                                $_.idx = _7V; //#22412
                                $_.ch = $get($_.curseqi, $_.idx); //#22413
                                if ($_.lastidx == -1) { //#22428
                                    if ($eq($_.ch, $_.lastchar)) { //#22420
                                        $_.lastidx = $_.idx; //#22416
                                        if ($_.idx > 0) { //#22419
                                            if ($get($_.curseqi, $_.idx - 1) == $_.sp) { //#22418
                                                $_.lastsp = true; //#22418
                                            } //#22418
                                        } //#22418
                                    } //#22418
                                } else { //#22428
                                    if (($_.ch < 0) && ($_.ch >= $_.ld)) { //#22429
                                        if ($_.i == $_.P) { //#22426
                                            if ($_.ch == $_.ld) { //#22424
                                                $_.lastld = true; //#22424
                                            } //#22424
                                        } else { //#22426
                                            if ($_.ch != $_.lp) { //#22426
                                                $_.inP = $_.lastsp; //#22426
                                            } //#22426
                                        } //#22426
                                        break; //#22428
                                    } //#22428
                                } //#22428
                            } //#22428
                            if ($_.inP && ($_.lastidx >= 0)) { //#22447
                                $put($_.nxtlen, $_.i, $get($_.curlen, $_.i)); //#22433
                                if ($_.lastidx < ($_.curseqi.length - 1)) { //#22445
                                    if ($_.i == $_.P) { //#22442
                                        if ($_.lastld) { //#22436
                                            $put($_.nxtlen, $_.i, $f($get($_.nxtlen, $_.i) + 1)); //#22436
                                        } //#22436
                                        $k[$j++] = $_.nxtseq; //#22438
                                        $k[$j++] = $_.i; //#22438
                                        $k[$j++] = Infinity; //#22438
                                        $aload($_.curseqi); //#22438
                                        $r($_.curseqi.length - $_.lastidx, -1); //#22438
                                        $j--; //#22438
                                        $k[$j++] = $get($_.pcomp, $_.pchars); //#22438
                                        var _8H = $a(); //#22438
                                        var _8I = $k[--$j]; //#22438
                                        $put($k[--$j], _8I, _8H); //#22438
                                    } else { //#22442
                                        $k[$j++] = $_.nxtseq; //#22441
                                        $k[$j++] = $_.i; //#22441
                                        $k[$j++] = Infinity; //#22441
                                        $aload($_.curseqi); //#22441
                                        var _8N = $a(); //#22441
                                        var _8O = $k[--$j]; //#22441
                                        $put($k[--$j], _8O, _8N); //#22441
                                        $put($get($_.nxtseq, $_.i), $_.lastidx, $get($_.pcomp, $_.pchars)); //#22442
                                    } //#22442
                                } else { //#22445
                                    $k[$j++] = $_.nxtseq; //#22445
                                    $k[$j++] = $_.i; //#22445
                                    $k[$j++] = Infinity; //#22445
                                    $aload($_.curseqi); //#22445
                                    $j--; //#22445
                                    $k[$j++] = $get($_.pcomp, $_.pchars); //#22445
                                    var _8d = $a(); //#22445
                                    var _8e = $k[--$j]; //#22445
                                    $put($k[--$j], _8e, _8d); //#22445
                                } //#22445
                            } //#22445
                        } //#22445
                    } //#22445
                } //#22445
            } //#22445
            if ($ne($get($_.nxtseq, $_.B), null)) { //#22460
                $_.numbytes = 0; //#22455
                $forall($get($_.nxtseq, $_.B), function() { //#22458
                    if ($k[--$j] == $_.sb) { //#22457
                        $k[$j++] = 0; //#22457
                    } else { //#22457
                        $k[$j++] = $_.numbytes + 1; //#22457
                    } //#22457
                    $_.numbytes = $k[--$j]; //#22457
                }); //#22457
                if ($_.numbytes == 32) { //#22459
                    $put($_.nxtlen, $_.B, $f($get($_.nxtlen, $_.B) + 11)); //#22459
                } //#22459
            } //#22459
            $_.curlen = $_.nxtlen; //#22462
            $_.curseq = $_.nxtseq; //#22463
            $k[$j++] = 'lastchar'; //#22464
            if ($_.char >= 0) { //#22464
                $k[$j++] = $_.char; //#22464
            } else { //#22464
                $k[$j++] = ""; //#22464
            } //#22464
            var _90 = $k[--$j]; //#22464
            $_[$k[--$j]] = _90; //#22464
        }); //#22464
        $_.minseq = $_.e; //#22469
        var _99 = $a([$_.U, $_.L, $_.M, $_.P, $_.D, $_.B]); //#22470
        for (var _9A = 0, _9B = _99.length; _9A < _9B; _9A++) { //#22476
            $_.i = $get(_99, _9A); //#22471
            if ($get($_.curlen, $_.i) < $_.minseq) { //#22475
                $_.minseq = $get($_.curlen, $_.i); //#22473
                $_.seq = $get($_.curseq, $_.i); //#22474
            } //#22474
        } //#22474
        $_.tobin = function() {
            var _9O = $s($k[--$j]); //#22480
            $k[$j++] = _9O; //#22480
            for (var _9Q = 0, _9P = _9O.length - 1; _9Q <= _9P; _9Q += 1) { //#22480
                var _9R = $k[--$j]; //#22480
                $put(_9R, _9Q, 48); //#22480
                $k[$j++] = _9R; //#22480
            } //#22480
            var _9S = $k[--$j]; //#22481
            var _9V = $cvrs($s(_9S.length), $k[--$j], 2); //#22481
            $puti(_9S, _9S.length - _9V.length, _9V); //#22481
            $k[$j++] = _9S; //#22481
        }; //#22481
        $_.encu = function() {
            var _9a = $get($get($_.charvals, $_.U), $k[--$j]); //#22484
            $k[$j++] = _9a; //#22484
            $k[$j++] = 5; //#22484
            $_.tobin(); //#22484
        }; //#22484
        $_.encl = function() {
            var _9f = $get($get($_.charvals, $_.L), $k[--$j]); //#22485
            $k[$j++] = _9f; //#22485
            $k[$j++] = 5; //#22485
            $_.tobin(); //#22485
        }; //#22485
        $_.encm = function() {
            var _9k = $get($get($_.charvals, $_.M), $k[--$j]); //#22486
            $k[$j++] = _9k; //#22486
            $k[$j++] = 5; //#22486
            $_.tobin(); //#22486
        }; //#22486
        $_.encd = function() {
            var _9p = $get($get($_.charvals, $_.D), $k[--$j]); //#22487
            $k[$j++] = _9p; //#22487
            $k[$j++] = 4; //#22487
            $_.tobin(); //#22487
        }; //#22487
        $_.encp = function() {
            var _9q = $k[--$j]; //#22490
            $k[$j++] = _9q; //#22507
            if (_9q == $_.fn1) { //#22506
                $j--; //#22491
                $k[$j++] = "00000000"; //#22491
            } else { //#22506
                var _9s = $k[--$j]; //#22493
                $k[$j++] = _9s; //#22507
                if (_9s <= -1000000) { //#22506
                    var _9u = $f((-$k[--$j]) - 1000000); //#22494
                    $k[$j++] = _9u; //#22494
                    $k[$j++] = _9u; //#22494
                    if (_9u == 0) { //#22494
                        $j--; //#22494
                        $k[$j++] = 1; //#22494
                    } //#22494
                    var _9w = ~~(Math.log($k[--$j]) / Math.log(10)); //#22496
                    var _9x = $s(((_9w + 1) * 4) + 8); //#22496
                    $puti(_9x, 0, "00000"); //#22497
                    $k[$j++] = _9w; //#22498
                    $k[$j++] = _9x; //#22498
                    $k[$j++] = _9x; //#22498
                    $k[$j++] = _9w + 1; //#22498
                    $k[$j++] = 3; //#22498
                    $_.tobin(); //#22498
                    var _9y = $k[--$j]; //#22498
                    $puti($k[--$j], 5, _9y); //#22498
                    var _A0 = $k[--$j]; //#22499
                    var _A1 = $k[--$j]; //#22499
                    var _A2 = $k[--$j]; //#22499
                    $k[$j++] = _A0; //#22503
                    $k[$j++] = _A2; //#22503
                    for (var _A3 = _A1; _A3 >= 0; _A3 -= 1) { //#22503
                        var _A4 = $k[--$j]; //#22500
                        var _A5 = $k[--$j]; //#22501
                        $k[$j++] = _A5; //#22502
                        $k[$j++] = ~~(_A4 / 10); //#22502
                        $k[$j++] = _A5; //#22502
                        $k[$j++] = (_A3 * 4) + 8; //#22502
                        $k[$j++] = $f((_A4 % 10) + 2); //#22502
                        $k[$j++] = 4; //#22502
                        $_.tobin(); //#22502
                        var _A6 = $k[--$j]; //#22502
                        var _A7 = $k[--$j]; //#22502
                        $puti($k[--$j], _A7, _A6); //#22502
                    } //#22502
                    $j--; //#22504
                } else { //#22506
                    var _AD = $get($get($_.charvals, $_.P), $k[--$j]); //#22506
                    $k[$j++] = _AD; //#22506
                    $k[$j++] = 5; //#22506
                    $_.tobin(); //#22506
                } //#22506
            } //#22506
        }; //#22506
        $_.encfuncs = $a(['encu', 'encl', 'encm', 'encp', 'encd']); //#22510
        $_.addtomsgbits = function() {
            $_.v = $k[--$j]; //#22513
            $puti($_.msgbits, $_.j, $_.v); //#22514
            $_.j = $_.j + $_.v.length; //#22515
        }; //#22515
        $_.state = $_.U; //#22519
        $_.msgbits = $s($_.minseq); //#22520
        $_.i = 0; //#22521
        $_.j = 0; //#22521
        for (;;) { //#22580
            if ($_.i >= $_.seq.length) { //#22522
                break; //#22522
            } //#22522
            if ($_.state != $_.B) { //#22575
                $_.char = $get($_.seq, $_.i); //#22526
                $k[$j++] = $_.char; //#22529
                if ($_[$get($_.encfuncs, $_.state)]() === true) {
                    break;
                } //#22529
                $_.addtomsgbits(); //#22529
                $_.i = $_.i + 1; //#22530
                if (($_.char == $_.su) || ($_.char == $_.sp)) { //#22536
                    $k[$j++] = $get($_.seq, $_.i); //#22534
                    if ($_.char == $_.su) { //#22534
                        $_.encu(); //#22534
                    } else { //#22534
                        $_.encp(); //#22534
                    } //#22534
                    $_.addtomsgbits(); //#22534
                    $_.i = $_.i + 1; //#22535
                } //#22535
                if ($_.char == $_.lu) { //#22539
                    $_.state = $_.U; //#22539
                } //#22539
                if ($_.char == $_.ll) { //#22540
                    $_.state = $_.L; //#22540
                } //#22540
                if ($_.char == $_.lm) { //#22541
                    $_.state = $_.M; //#22541
                } //#22541
                if ($_.char == $_.lp) { //#22542
                    $_.state = $_.P; //#22542
                } //#22542
                if ($_.char == $_.ld) { //#22543
                    $_.state = $_.D; //#22543
                } //#22543
                if ($_.char == $_.sb) { //#22544
                    $_.state = $_.B; //#22544
                } //#22544
            } else { //#22575
                $_.numbytes = 0; //#22549
                for (;;) { //#22553
                    if (($_.i + $_.numbytes) >= $_.seq.length) { //#22550
                        break; //#22550
                    } //#22550
                    if ($get($_.seq, $_.i + $_.numbytes) < 0) { //#22551
                        break; //#22551
                    } //#22551
                    $_.numbytes = $_.numbytes + 1; //#22552
                } //#22552
                if ($_.numbytes <= 31) { //#22560
                    $k[$j++] = $_.numbytes; //#22557
                    $k[$j++] = 5; //#22557
                    $_.tobin(); //#22557
                    $_.addtomsgbits(); //#22557
                } else { //#22560
                    $k[$j++] = 0; //#22559
                    $k[$j++] = 5; //#22559
                    $_.tobin(); //#22559
                    $_.addtomsgbits(); //#22559
                    $k[$j++] = $_.numbytes - 31; //#22560
                    $k[$j++] = 11; //#22560
                    $_.tobin(); //#22560
                    $_.addtomsgbits(); //#22560
                } //#22560
                for (var _BF = 0, _BG = $_.numbytes; _BF < _BG; _BF++) { //#22567
                    $k[$j++] = $get($_.seq, $_.i); //#22565
                    $k[$j++] = 8; //#22565
                    $_.tobin(); //#22565
                    $_.addtomsgbits(); //#22565
                    $_.i = $_.i + 1; //#22566
                } //#22566
                if ($_.i < $_.seq.length) { //#22576
                    $_.char = $get($_.seq, $_.i); //#22571
                    $_.i = $_.i + 1; //#22572
                    if ($_.char == $_.lu) { //#22573
                        $_.state = $_.U; //#22573
                    } //#22573
                    if ($_.char == $_.ll) { //#22574
                        $_.state = $_.L; //#22574
                    } //#22574
                    if ($_.char == $_.lm) { //#22575
                        $_.state = $_.M; //#22575
                    } //#22575
                } //#22575
            } //#22575
        } //#22575
    } //#22575
    if (!bwipp_azteccode.__22601__) { //#22601
        $_ = Object.create($_); //#22601
        $_.metrics = $a([$a(["rune", 0, 0, 0, 6]), $a(["compact", 1, 1, 17, 6]), $a(["full", 1, 1, 21, 6]), $a(["compact", 2, 0, 40, 6]), $a(["full", 2, 1, 48, 6]), $a(["compact", 3, 0, 51, 8]), $a(["full", 3, 1, 60, 8]), $a(["compact", 4, 0, 76, 8]), $a(["full", 4, 1, 88, 8]), $a(["full", 5, 1, 120, 8]), $a(["full", 6, 1, 156, 8]), $a(["full", 7, 1, 196, 8]), $a(["full", 8, 1, 240, 8]), $a(["full", 9, 1, 230, 10]), $a(["full", 10, 1, 272, 10]), $a(["full", 11, 1, 316, 10]), $a(["full", 12, 1, 364, 10]), $a(["full", 13, 1, 416, 10]), $a(["full", 14, 1, 470, 10]), $a(["full", 15, 1, 528, 10]), $a(["full", 16, 1, 588, 10]), $a(["full", 17, 1, 652, 10]), $a(["full", 18, 1, 720, 10]), $a(["full", 19, 1, 790, 10]), $a(["full", 20, 1, 864, 10]), $a(["full", 21, 1, 940, 10]), $a(["full", 22, 1, 1020, 10]), $a(["full", 23, 0, 920, 12]), $a(["full", 24, 0, 992, 12]), $a(["full", 25, 0, 1066, 12]), $a(["full", 26, 0, 1144, 12]), $a(["full", 27, 0, 1224, 12]), $a(["full", 28, 0, 1306, 12]), $a(["full", 29, 0, 1392, 12]), $a(["full", 30, 0, 1480, 12]), $a(["full", 31, 0, 1570, 12]), $a(["full", 32, 0, 1664, 12])]); //#22600
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_azteccode.$ctx[id] = $_[id]); //#22600
        bwipp_azteccode.__22601__ = 1; //#22600
        $_ = Object.getPrototypeOf($_); //#22600
    } //#22600
    var _CD = $_.metrics; //#22603
    for (var _CE = 0, _CF = _CD.length; _CE < _CF; _CE++) { //#22619
        $_.m = $get(_CD, _CE); //#22604
        $_.frmt = $get($_.m, 0); //#22605
        $_.mlyr = $get($_.m, 1); //#22606
        $_.icap = $get($_.m, 2); //#22607
        $_.ncws = $get($_.m, 3); //#22608
        $_.bpcw = $get($_.m, 4); //#22609
        $_.numecw = ~~(Math.ceil($f((($_.ncws * $_.eclevel) / 100) + $_.ecaddchars))); //#22610
        if ($_.msgbits.length == 0) { //#22611
            $_.numecw = 0; //#22611
        } //#22611
        $_.numdcw = $f($_.ncws - $_.numecw); //#22612
        $_.okay = true; //#22613
        if ($ne($_.format, $_.frmt)) { //#22614
            $_.okay = false; //#22614
        } //#22614
        if ($_.readerinit && ($_.icap != 1)) { //#22615
            $_.okay = false; //#22615
        } //#22615
        if (($_.layers != -1) && ($_.layers != $_.mlyr)) { //#22616
            $_.okay = false; //#22616
        } //#22616
        if ((~~Math.ceil($_.msgbits.length / $_.bpcw)) > $_.numdcw) { //#22617
            $_.okay = false; //#22617
        } //#22617
        if ($_.okay) { //#22618
            break; //#22618
        } //#22618
    } //#22618
    if (!$_.okay) { //#22623
        $k[$j++] = 'bwipp.azteccodeNoValidSymbol#22622'; //#22622
        $k[$j++] = "Maximum length exceeded"; //#22622
        bwipp_raiseerror(); //#22622
    } //#22622
    $_.layers = $_.mlyr; //#22625
    $_.allzero = function() {
        var _Ck = $k[--$j]; //#22628
        $k[$j++] = $eq(_Ck, $geti("000000000000", 0, _Ck.length)); //#22628
    }; //#22628
    $_.allones = function() {
        var _Cm = $k[--$j]; //#22629
        $k[$j++] = $eq(_Cm, $geti("111111111111", 0, _Cm.length)); //#22629
    }; //#22629
    $_.cws = $a($_.ncws); //#22630
    $_.m = 0; //#22631
    $_.c = 0; //#22631
    for (;;) { //#22658
        if ($_.msgbits.length <= $_.m) { //#22633
            break; //#22633
        } //#22633
        if (($_.msgbits.length - $_.m) >= $_.bpcw) { //#22647
            $_.cwb = $geti($_.msgbits, $_.m, $f($_.bpcw - 1)); //#22635
            $_.cwf = $geti($_.msgbits, $f($f($_.m + $_.bpcw) - 1), 1); //#22636
            $k[$j++] = $_.cwb; //#22637
            $_.allzero(); //#22637
            if ($k[--$j]) { //#22637
                $_.cwf = "1"; //#22637
                $_.m = $_.m - 1; //#22637
            } //#22637
            $k[$j++] = $_.cwb; //#22638
            $_.allones(); //#22638
            if ($k[--$j]) { //#22638
                $_.cwf = "0"; //#22638
                $_.m = $_.m - 1; //#22638
            } //#22638
            var _D9 = $s(12); //#22640
            $puti(_D9, 0, $_.cwb); //#22640
            $puti(_D9, $f($_.bpcw - 1), $_.cwf); //#22641
            $_.cwb = $geti(_D9, 0, $_.bpcw); //#22643
        } else { //#22647
            $_.cwb = $geti($_.msgbits, $_.m, $_.msgbits.length - $_.m); //#22645
            var _DL = $strcpy($s(12), "111111111111"); //#22646
            $puti(_DL, 0, $_.cwb); //#22646
            $_.cwb = $geti(_DL, 0, $_.bpcw); //#22646
            $k[$j++] = $_.cwb; //#22647
            $_.allones(); //#22647
            if ($k[--$j]) { //#22647
                $puti($_.cwb, $_.cwb.length - 1, "0"); //#22647
            } //#22647
        } //#22647
        $_.cw = 0; //#22650
        for (var _DV = 0, _DU = $f($_.bpcw - 1); _DV <= _DU; _DV += 1) { //#22654
            $_.i = _DV; //#22652
            $_.cw = $f($_.cw + ((~~(Math.pow(2, $f($f($_.bpcw - $_.i) - 1)))) * $f($get($_.cwb, $_.i) - 48))); //#22653
        } //#22653
        $put($_.cws, $_.c, $_.cw); //#22655
        $_.m = $f($_.m + $_.bpcw); //#22656
        $_.c = $_.c + 1; //#22657
    } //#22657
    $_.cws = $geti($_.cws, 0, $_.c); //#22659
    var _Dm = $get($_.options, 'debugcws') !== undefined; //#22661
    if (_Dm) { //#22661
        $k[$j++] = 'bwipp.debugcws#22661'; //#22661
        $k[$j++] = $_.cws; //#22661
        bwipp_raiseerror(); //#22661
    } //#22661
    $_.rscodes = function() {
        $_.rspm = $k[--$j]; //#22666
        $_.rsgf = $k[--$j]; //#22667
        $_.rsnc = $k[--$j]; //#22668
        $_.rscws = $k[--$j]; //#22669
        $k[$j++] = Infinity; //#22672
        $k[$j++] = 1; //#22672
        for (var _Dt = 0, _Du = $f($_.rsgf - 1); _Dt < _Du; _Dt++) { //#22672
            var _Dv = $k[--$j]; //#22672
            var _Dw = _Dv * 2; //#22672
            $k[$j++] = _Dv; //#22672
            $k[$j++] = _Dw; //#22672
            if (_Dw >= $_.rsgf) { //#22672
                var _Dz = $k[--$j]; //#22672
                $k[$j++] = $xo(_Dz, $_.rspm); //#22672
            } //#22672
        } //#22672
        $_.rsalog = $a(); //#22672
        $_.rslog = $a($_.rsgf); //#22673
        for (var _E5 = 1, _E4 = $f($_.rsgf - 1); _E5 <= _E4; _E5 += 1) { //#22674
            $put($_.rslog, $get($_.rsalog, _E5), _E5); //#22674
        } //#22674
        $_.rsprod = function() {
            var _E9 = $k[--$j]; //#22678
            var _EA = $k[--$j]; //#22678
            $k[$j++] = _EA; //#22682
            $k[$j++] = _E9; //#22682
            if ((_E9 != 0) && (_EA != 0)) { //#22681
                var _ED = $get($_.rslog, $k[--$j]); //#22679
                var _EJ = $get($_.rsalog, $f(_ED + $get($_.rslog, $k[--$j])) % $f($_.rsgf - 1)); //#22679
                $k[$j++] = _EJ; //#22679
            } else { //#22681
                $j -= 2; //#22681
                $k[$j++] = 0; //#22681
            } //#22681
        }; //#22681
        $k[$j++] = Infinity; //#22686
        $k[$j++] = 1; //#22686
        for (var _EL = 0, _EM = $_.rsnc; _EL < _EM; _EL++) { //#22686
            $k[$j++] = 0; //#22686
        } //#22686
        $_.coeffs = $a(); //#22686
        for (var _EQ = 1, _EP = $_.rsnc; _EQ <= _EP; _EQ += 1) { //#22695
            $_.i = _EQ; //#22688
            $put($_.coeffs, $_.i, $get($_.coeffs, $_.i - 1)); //#22689
            for (var _EX = $_.i - 1; _EX >= 1; _EX -= 1) { //#22693
                $_.j = _EX; //#22691
                $k[$j++] = $_.coeffs; //#22692
                $k[$j++] = $_.j; //#22692
                $k[$j++] = $get($_.coeffs, $_.j - 1); //#22692
                $k[$j++] = $get($_.coeffs, $_.j); //#22692
                $k[$j++] = $get($_.rsalog, $_.i); //#22692
                $_.rsprod(); //#22692
                var _Ej = $k[--$j]; //#22692
                var _Ek = $k[--$j]; //#22692
                var _El = $k[--$j]; //#22692
                $put($k[--$j], _El, $xo(_Ek, _Ej)); //#22692
            } //#22692
            $k[$j++] = $_.coeffs; //#22694
            $k[$j++] = 0; //#22694
            $k[$j++] = $get($_.coeffs, 0); //#22694
            $k[$j++] = $get($_.rsalog, $_.i); //#22694
            $_.rsprod(); //#22694
            var _Et = $k[--$j]; //#22694
            var _Eu = $k[--$j]; //#22694
            $put($k[--$j], _Eu, _Et); //#22694
        } //#22694
        $_.nd = $_.rscws.length; //#22698
        $k[$j++] = Infinity; //#22699
        $forall($_.rscws); //#22699
        for (var _Ez = 0, _F0 = $_.rsnc; _Ez < _F0; _Ez++) { //#22699
            $k[$j++] = 0; //#22699
        } //#22699
        $k[$j++] = 0; //#22699
        $_.rscws = $a(); //#22699
        for (var _F4 = 0, _F3 = $_.nd - 1; _F4 <= _F3; _F4 += 1) { //#22706
            $_.k = $xo($get($_.rscws, _F4), $get($_.rscws, $_.nd)); //#22701
            for (var _FC = 0, _FB = $f($_.rsnc - 1); _FC <= _FB; _FC += 1) { //#22705
                $_.j = _FC; //#22703
                $k[$j++] = $_.rscws; //#22704
                $k[$j++] = $_.nd + $_.j; //#22704
                $k[$j++] = $get($_.rscws, ($_.nd + $_.j) + 1); //#22704
                $k[$j++] = $_.k; //#22704
                $k[$j++] = $get($_.coeffs, $f($f($_.rsnc - $_.j) - 1)); //#22704
                $_.rsprod(); //#22704
                var _FP = $k[--$j]; //#22704
                var _FQ = $k[--$j]; //#22704
                var _FR = $k[--$j]; //#22704
                $put($k[--$j], _FR, $xo(_FQ, _FP)); //#22704
            } //#22704
        } //#22704
        $k[$j++] = $geti($_.rscws, 0, $_.rscws.length - 1); //#22709
    }; //#22709
    if ($eq($_.format, "full")) { //#22724
        $_.mode = ($f($_.layers - 1) << 11) + ($_.cws.length - 1); //#22715
        if ($_.readerinit) { //#22716
            $_.mode = $_.mode | 1024; //#22716
        } //#22716
        $_.mode = $a([($_.mode & 61440) >>> 12, ($_.mode & 3840) >>> 8, ($_.mode & 240) >>> 4, $_.mode & 15]); //#22722
        $k[$j++] = 'mode'; //#22723
        $k[$j++] = $_.mode; //#22723
        $k[$j++] = 6; //#22723
        $k[$j++] = 16; //#22723
        $k[$j++] = 19; //#22723
        $_.rscodes(); //#22723
        var _Fh = $k[--$j]; //#22723
        $_[$k[--$j]] = _Fh; //#22723
    } //#22723
    if ($eq($_.format, "compact")) { //#22733
        $_.mode = ($f($_.layers - 1) << 6) + ($_.cws.length - 1); //#22726
        if ($_.readerinit) { //#22727
            $_.mode = $_.mode | 32; //#22727
        } //#22727
        $_.mode = $a([($_.mode & 240) >>> 4, $_.mode & 15]); //#22731
        $k[$j++] = 'mode'; //#22732
        $k[$j++] = $_.mode; //#22732
        $k[$j++] = 5; //#22732
        $k[$j++] = 16; //#22732
        $k[$j++] = 19; //#22732
        $_.rscodes(); //#22732
        var _Fs = $k[--$j]; //#22732
        $_[$k[--$j]] = _Fs; //#22732
    } //#22732
    if ($eq($_.format, "rune")) { //#22742
        $_.mode = $cvi($_.barcode); //#22735
        $_.mode = $a([($_.mode & 240) >>> 4, $_.mode & 15]); //#22739
        $k[$j++] = 'mode'; //#22740
        $k[$j++] = $_.mode; //#22740
        $k[$j++] = 5; //#22740
        $k[$j++] = 16; //#22740
        $k[$j++] = 19; //#22740
        $_.rscodes(); //#22740
        var _G0 = $k[--$j]; //#22740
        $_[$k[--$j]] = _G0; //#22740
        $k[$j++] = Infinity; //#22741
        var _G2 = $_.mode; //#22741
        for (var _G3 = 0, _G4 = _G2.length; _G3 < _G4; _G3++) { //#22741
            $k[$j++] = $get(_G2, _G3) ^ 10; //#22741
        } //#22741
        $_.mode = $a(); //#22741
    } //#22741
    $_.modebits = $s($_.mode.length * 4); //#22743
    for (var _GB = 0, _GA = $_.modebits.length - 1; _GB <= _GA; _GB += 1) { //#22744
        $puti($_.modebits, _GB, "0"); //#22744
    } //#22744
    for (var _GF = 0, _GE = $_.mode.length - 1; _GF <= _GE; _GF += 1) { //#22748
        $_.i = _GF; //#22746
        var _GL = $cvrs($s(4), $get($_.mode, $_.i), 2); //#22747
        $puti($_.modebits, (4 - _GL.length) + (4 * $_.i), _GL); //#22747
    } //#22747
    if (!bwipp_azteccode.__22762__) { //#22762
        $_ = Object.create($_); //#22762
        $_.rsparams = $a([$a([]), $a([]), $a([]), $a([]), $a([]), $a([]), $a([64, 67]), $a([]), $a([256, 301]), $a([]), $a([1024, 1033]), $a([]), $a([4096, 4201])]); //#22761
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_azteccode.$ctx[id] = $_[id]); //#22761
        bwipp_azteccode.__22762__ = 1; //#22761
        $_ = Object.getPrototypeOf($_); //#22761
    } //#22761
    $k[$j++] = 'cws'; //#22763
    $k[$j++] = $_.cws; //#22763
    $k[$j++] = $f($_.ncws - $_.cws.length); //#22763
    $forall($get($_.rsparams, $_.bpcw)); //#22763
    $_.rscodes(); //#22763
    var _Gi = $k[--$j]; //#22763
    $_[$k[--$j]] = _Gi; //#22763
    if ($eq($_.format, "full")) { //#22767
        $_.databits = $s($f((($_.layers * $_.layers) * 16) + ($_.layers * 112))); //#22765
    } else { //#22767
        $_.databits = $s($f((($_.layers * $_.layers) * 16) + ($_.layers * 88))); //#22767
    } //#22767
    for (var _Gv = 0, _Gu = $_.databits.length - 1; _Gv <= _Gu; _Gv += 1) { //#22769
        $puti($_.databits, _Gv, "0"); //#22769
    } //#22769
    for (var _Gz = 0, _Gy = $f($_.ncws - 1); _Gz <= _Gy; _Gz += 1) { //#22775
        $_.i = _Gz; //#22771
        var _H6 = $cvrs($s($_.bpcw), $get($_.cws, $_.i), 2); //#22772
        $puti($_.databits, $f(($f($f($_.bpcw - _H6.length) + ($_.bpcw * $_.i))) + ($f($_.databits.length - ($_.ncws * $_.bpcw)))), _H6); //#22774
    } //#22774
    $_.cmv = function() {
        var _HE = $k[--$j]; //#22778
        var _HF = $k[--$j]; //#22778
        $k[$j++] = $f(($f(_HF - (_HE * $_.size))) + $_.mid); //#22778
    }; //#22778
    $_.lmv = function() {
        $_.lbit = $k[--$j]; //#22782
        $_.llyr = $k[--$j]; //#22783
        $_.lwid = $f($_.fw + ($_.llyr * 4)); //#22784
        $_.ldir = ~~((~~($_.lbit / 2)) / $_.lwid); //#22785
        if ($_.ldir == 0) { //#22790
            $k[$j++] = $f(((-(~~($f($_.lwid - 1) / 2))) + 1) + ((~~($_.lbit / 2)) % $_.lwid)); //#22789
            $k[$j++] = $f(($f((~~(($_.fw - 1) / 2)) + ($_.llyr * 2))) + ($_.lbit % 2)); //#22789
            $_.cmv(); //#22789
        } //#22789
        if ($_.ldir == 1) { //#22795
            $k[$j++] = $f(($f((~~($_.fw / 2)) + ($_.llyr * 2))) + ($_.lbit % 2)); //#22794
            $k[$j++] = $f(((~~($f($_.lwid - 1) / 2)) - 1) - ((~~($_.lbit / 2)) % $_.lwid)); //#22794
            $_.cmv(); //#22794
        } //#22794
        if ($_.ldir == 2) { //#22800
            $k[$j++] = -($f(((-(~~($_.lwid / 2))) + 1) + ((~~($_.lbit / 2)) % $_.lwid))); //#22799
            $k[$j++] = -($f(($f((~~($_.fw / 2)) + ($_.llyr * 2))) + ($_.lbit % 2))); //#22799
            $_.cmv(); //#22799
        } //#22799
        if ($_.ldir == 3) { //#22805
            $k[$j++] = -($f(($f((~~(($_.fw - 1) / 2)) + ($_.llyr * 2))) + ($_.lbit % 2))); //#22804
            $k[$j++] = -($f(((~~($_.lwid / 2)) - 1) - ((~~($_.lbit / 2)) % $_.lwid))); //#22804
            $_.cmv(); //#22804
        } //#22804
    }; //#22804
    if ($eq($_.format, "full")) { //#22810
        $_.fw = 12; //#22810
    } else { //#22810
        $_.fw = 9; //#22810
    } //#22810
    $_.size = $f(($f($_.fw + ($_.layers * 4))) + 2); //#22811
    $k[$j++] = Infinity; //#22812
    for (var _Hu = 0, _Hv = $_.size * $_.size; _Hu < _Hv; _Hu++) { //#22812
        $k[$j++] = -1; //#22812
    } //#22812
    $_.pixs = $a(); //#22812
    $_.mid = $f(((~~($f($_.size - 1) / 2)) * $_.size) + (~~($f($_.size - 1) / 2))); //#22813
    $_.i = 0; //#22816
    for (var _I2 = 1, _I1 = $_.layers; _I2 <= _I1; _I2 += 1) { //#22824
        $_.layer = _I2; //#22818
        for (var _I6 = 0, _I5 = (($_.fw + ($_.layer * 4)) * 8) - 1; _I6 <= _I5; _I6 += 1) { //#22823
            $_.pos = _I6; //#22820
            $k[$j++] = $_.pixs; //#22821
            $k[$j++] = $_.layer; //#22821
            $k[$j++] = $_.pos; //#22821
            $_.lmv(); //#22821
            var _IE = $k[--$j]; //#22821
            $put($k[--$j], _IE, $get($_.databits, ($_.databits.length - $_.i) - 1) - 48); //#22821
            $_.i = $_.i + 1; //#22822
        } //#22822
    } //#22822
    if ($eq($_.format, "full")) { //#22851
        $_.fw = 13; //#22828
        $_.size = $f(($f(($f($_.fw + ($_.layers * 4))) + 2)) + ((~~($f(($f($_.layers + 10.5) / 7.5) - 1))) * 2)); //#22829
        $_.mid = ~~(($_.size * $_.size) / 2); //#22830
        $k[$j++] = Infinity; //#22831
        for (var _IP = 0, _IQ = $_.size * $_.size; _IP < _IQ; _IP++) { //#22831
            $k[$j++] = -2; //#22831
        } //#22831
        $_.npixs = $a(); //#22831
        for (var _IU = 0, _IT = ~~($_.size / 2); _IU <= _IT; _IU += 16) { //#22841
            $_.i = _IU; //#22833
            for (var _IX = 0, _IW = $f($_.size - 1); _IX <= _IW; _IX += 1) { //#22840
                $_.j = _IX; //#22835
                $k[$j++] = $_.npixs; //#22836
                $k[$j++] = (-(~~($_.size / 2))) + $_.j; //#22836
                $k[$j++] = $_.i; //#22836
                $_.cmv(); //#22836
                var _Ig = $k[--$j]; //#22836
                $puti($k[--$j], _Ig, $a([((((~~($_.size / 2)) + $_.j) + $_.i) + 1) % 2])); //#22836
                $k[$j++] = $_.npixs; //#22837
                $k[$j++] = (-(~~($_.size / 2))) + $_.j; //#22837
                $k[$j++] = -$_.i; //#22837
                $_.cmv(); //#22837
                var _Iq = $k[--$j]; //#22837
                $puti($k[--$j], _Iq, $a([((((~~($_.size / 2)) + $_.j) + $_.i) + 1) % 2])); //#22837
                $k[$j++] = $_.npixs; //#22838
                $k[$j++] = $_.i; //#22838
                $k[$j++] = (-(~~($_.size / 2))) + $_.j; //#22838
                $_.cmv(); //#22838
                var _J0 = $k[--$j]; //#22838
                $puti($k[--$j], _J0, $a([((((~~($_.size / 2)) + $_.j) + $_.i) + 1) % 2])); //#22838
                $k[$j++] = $_.npixs; //#22839
                $k[$j++] = -$_.i; //#22839
                $k[$j++] = (-(~~($_.size / 2))) + $_.j; //#22839
                $_.cmv(); //#22839
                var _JA = $k[--$j]; //#22839
                $puti($k[--$j], _JA, $a([((((~~($_.size / 2)) + $_.j) + $_.i) + 1) % 2])); //#22839
            } //#22839
        } //#22839
        $_.j = 0; //#22842
        for (var _JE = 0, _JD = $_.npixs.length - 1; _JE <= _JD; _JE += 1) { //#22849
            $_.i = _JE; //#22844
            if ($get($_.npixs, $_.i) == -2) { //#22848
                $put($_.npixs, $_.i, $get($_.pixs, $_.j)); //#22846
                $_.j = $_.j + 1; //#22847
            } //#22847
        } //#22847
        $_.pixs = $_.npixs; //#22850
    } //#22850
    $_.fw = ~~($_.fw / 2); //#22854
    for (var _JT = -$_.fw, _JS = $_.fw; _JT <= _JS; _JT += 1) { //#22863
        $_.i = _JT; //#22856
        for (var _JX = -$_.fw, _JW = $_.fw; _JX <= _JW; _JX += 1) { //#22862
            $_.j = _JX; //#22858
            $k[$j++] = $_.pixs; //#22859
            $k[$j++] = $_.i; //#22859
            $k[$j++] = $_.j; //#22859
            $_.cmv(); //#22859
            if (Math.abs($_.i) > Math.abs($_.j)) { //#22860
                $k[$j++] = Math.abs($_.i); //#22860
            } else { //#22860
                $k[$j++] = Math.abs($_.j); //#22860
            } //#22860
            var _Jf = $k[--$j]; //#22860
            var _Jg = $k[--$j]; //#22861
            $put($k[--$j], _Jg, $f(_Jf + 1) % 2); //#22861
        } //#22861
    } //#22861
    var _KI = $a([$a([-($_.fw + 1), $_.fw, 1]), $a([-($_.fw + 1), $_.fw + 1, 1]), $a([-$_.fw, $_.fw + 1, 1]), $a([$_.fw + 1, $_.fw + 1, 1]), $a([$_.fw + 1, $_.fw, 1]), $a([$_.fw + 1, -$_.fw, 1]), $a([$_.fw, $_.fw + 1, 0]), $a([$_.fw + 1, -($_.fw + 1), 0]), $a([$_.fw, -($_.fw + 1), 0]), $a([-$_.fw, -($_.fw + 1), 0]), $a([-($_.fw + 1), -($_.fw + 1), 0]), $a([-($_.fw + 1), -$_.fw, 0])]); //#22871
    for (var _KJ = 0, _KK = _KI.length; _KJ < _KK; _KJ++) { //#22872
        $k[$j++] = $_.pixs; //#22872
        $forall($get(_KI, _KJ)); //#22872
        var _KN = $k[--$j]; //#22872
        var _KO = $k[--$j]; //#22872
        var _KP = $k[--$j]; //#22872
        $k[$j++] = _KN; //#22872
        $k[$j++] = _KP; //#22872
        $k[$j++] = _KO; //#22872
        $_.cmv(); //#22872
        var _KQ = $k[--$j]; //#22872
        var _KR = $k[--$j]; //#22872
        $put($k[--$j], _KQ, _KR); //#22872
    } //#22872
    if (!bwipp_azteccode.__22888__) { //#22888
        $_ = Object.create($_); //#22888
        $_.modemapfull = $a([$a([-5, 7]), $a([-4, 7]), $a([-3, 7]), $a([-2, 7]), $a([-1, 7]), $a([1, 7]), $a([2, 7]), $a([3, 7]), $a([4, 7]), $a([5, 7]), $a([7, 5]), $a([7, 4]), $a([7, 3]), $a([7, 2]), $a([7, 1]), $a([7, -1]), $a([7, -2]), $a([7, -3]), $a([7, -4]), $a([7, -5]), $a([5, -7]), $a([4, -7]), $a([3, -7]), $a([2, -7]), $a([1, -7]), $a([-1, -7]), $a([-2, -7]), $a([-3, -7]), $a([-4, -7]), $a([-5, -7]), $a([-7, -5]), $a([-7, -4]), $a([-7, -3]), $a([-7, -2]), $a([-7, -1]), $a([-7, 1]), $a([-7, 2]), $a([-7, 3]), $a([-7, 4]), $a([-7, 5])]); //#22881
        $_.modemapcompact = $a([$a([-3, 5]), $a([-2, 5]), $a([-1, 5]), $a([0, 5]), $a([1, 5]), $a([2, 5]), $a([3, 5]), $a([5, 3]), $a([5, 2]), $a([5, 1]), $a([5, 0]), $a([5, -1]), $a([5, -2]), $a([5, -3]), $a([3, -5]), $a([2, -5]), $a([1, -5]), $a([0, -5]), $a([-1, -5]), $a([-2, -5]), $a([-3, -5]), $a([-5, -3]), $a([-5, -2]), $a([-5, -1]), $a([-5, 0]), $a([-5, 1]), $a([-5, 2]), $a([-5, 3])]); //#22887
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_azteccode.$ctx[id] = $_[id]); //#22887
        bwipp_azteccode.__22888__ = 1; //#22887
        $_ = Object.getPrototypeOf($_); //#22887
    } //#22887
    $k[$j++] = 'modemap'; //#22889
    if ($eq($_.format, "full")) { //#22889
        $k[$j++] = $_.modemapfull; //#22889
    } else { //#22889
        $k[$j++] = $_.modemapcompact; //#22889
    } //#22889
    var _Lf = $k[--$j]; //#22889
    $_[$k[--$j]] = _Lf; //#22889
    for (var _Lj = 0, _Li = $_.modemap.length - 1; _Lj <= _Li; _Lj += 1) { //#22893
        $_.i = _Lj; //#22891
        $k[$j++] = $_.pixs; //#22892
        $forall($get($_.modemap, $_.i)); //#22892
        $_.cmv(); //#22892
        var _Lr = $k[--$j]; //#22892
        $put($k[--$j], _Lr, $get($_.modebits, $_.i) - 48); //#22892
    } //#22892
    var _Lz = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $_.pixs],
        ["pixx", $_.size],
        ["pixy", $_.size],
        ["height", ($_.size * 2) / 72],
        ["width", ($_.size * 2) / 72],
        ["opt", $_.options]
    ]); //#22902
    $k[$j++] = _Lz; //#22905
    if (!$_.dontdraw) { //#22905
        bwipp_renmatrix(); //#22905
    } //#22905
    $_ = Object.getPrototypeOf($_); //#22907
    $_ = Object.getPrototypeOf($_); //#22909
} //bwipp_azteccode
function bwipp_azteccodecompact() {
    $_ = Object.create($_); //#22938
    $_.dontdraw = false; //#22941
    $k[$j++] = $_; //#22943
    bwipp_processoptions(); //#22943
    $_.options = $k[--$j]; //#22943
    $_.barcode = $k[--$j]; //#22944
    $put($_.options, "dontdraw", true); //#22947
    $put($_.options, "format", "compact"); //#22948
    $k[$j++] = 'args'; //#22950
    $k[$j++] = $_.barcode; //#22950
    $k[$j++] = $_.options; //#22950
    bwipp_azteccode(); //#22950
    var _6 = $k[--$j]; //#22950
    $_[$k[--$j]] = _6; //#22950
    $put($_.args, "opt", $_.options); //#22952
    $k[$j++] = $_.args; //#22955
    if (!$_.dontdraw) { //#22955
        bwipp_renmatrix(); //#22955
    } //#22955
    $_ = Object.getPrototypeOf($_); //#22957
} //bwipp_azteccodecompact
function bwipp_aztecrune() {
    $_ = Object.create($_); //#22986
    $_.dontdraw = false; //#22989
    $k[$j++] = $_; //#22991
    bwipp_processoptions(); //#22991
    $_.options = $k[--$j]; //#22991
    $_.barcode = $k[--$j]; //#22992
    $put($_.options, "dontdraw", true); //#22995
    $put($_.options, "format", "rune"); //#22996
    $k[$j++] = 'args'; //#22998
    $k[$j++] = $_.barcode; //#22998
    $k[$j++] = $_.options; //#22998
    bwipp_azteccode(); //#22998
    var _6 = $k[--$j]; //#22998
    $_[$k[--$j]] = _6; //#22998
    $put($_.args, "opt", $_.options); //#23000
    $k[$j++] = $_.args; //#23003
    if (!$_.dontdraw) { //#23003
        bwipp_renmatrix(); //#23003
    } //#23003
    $_ = Object.getPrototypeOf($_); //#23005
} //bwipp_aztecrune
function bwipp_codeone() {
    $_ = Object.create($_); //#23036
    $_.dontdraw = false; //#23039
    $_.version = "unset"; //#23040
    $_.parse = false; //#23041
    $_.parsefnc = false; //#23042
    $k[$j++] = $_; //#23044
    bwipp_processoptions(); //#23044
    $_.options = $k[--$j]; //#23044
    $_.barcode = $k[--$j]; //#23045
    var _2 = $a(["unset", "T-16", "T-32", "T-48", "S-10", "S-20", "S-30", "A", "B", "C", "D", "E", "F", "G", "H"]); //#23047
    $k[$j++] = false; //#23048
    for (var _3 = 0, _4 = _2.length; _3 < _4; _3++) { //#23048
        var _7 = $k[--$j]; //#23048
        $k[$j++] = _7 || $eq($get(_2, _3), $_.version); //#23048
    } //#23048
    if ($nt($k[--$j])) { //#23050
        $k[$j++] = 'bwipp.codeoneBadVersion#23049'; //#23049
        $k[$j++] = "version must be A to H, T-16, T-32, T-48, S-10, S-20 or S-30"; //#23049
        bwipp_raiseerror(); //#23049
    } //#23049
    bwipp_loadctx(bwipp_codeone) //#23052
    $_.stype = $eq($geti($_.version, 0, 1), "S"); //#23054
    $_.ttype = $eq($geti($_.version, 0, 1), "T"); //#23055
    if (!bwipp_codeone.__23213__) { //#23213
        $_ = Object.create($_); //#23213
        $_.stypevals = $a(["1", "1010", "1100100", "1111101000", "10011100010000", "11000011010100000", "11110100001001000000", "100110001001011010000000", "101111101011110000100000000", "111011100110101100101000000000", "1001010100000010111110010000000000", "1011101001000011101101110100000000000", "1110100011010100101001010001000000000000", "10010001100001001110011100101010000000000000", "10110101111001100010000011110100100000000000000", "11100011010111111010100100110001101000000000000000", "100011100001101111001001101111110000010000000000000000", "101100011010001010111100001011101100010100000000000000000"]); //#23077
        $_.stypemetrics = $a([$a(["S-10", 8, 11, 10, 4, 4, 1, 99, 99, 99]), $a(["S-20", 8, 21, 20, 8, 8, 1, 99, 99, 99]), $a(["S-30", 8, 31, 30, 12, 12, 1, 99, 99, 99])]); //#23085
        $_.nonstypemetrics = $a([$a(["A", 16, 18, 16, 10, 10, 1, 4, 99, 6]), $a(["B", 22, 22, 20, 19, 16, 1, 4, 99, 8]), $a(["C", 28, 32, 28, 44, 26, 1, 4, 22, 11]), $a(["D", 40, 42, 36, 91, 44, 1, 4, 16, 16]), $a(["E", 52, 54, 48, 182, 70, 1, 4, 22, 22]), $a(["F", 70, 76, 68, 370, 140, 2, 4, 22, 31]), $a(["G", 104, 98, 88, 732, 280, 4, 6, 21, 47]), $a(["H", 148, 134, 120, 1480, 560, 8, 6, 20, 69]), $a(["T-16", 16, 17, 16, 10, 10, 1, 99, 99, 99]), $a(["T-32", 16, 33, 32, 24, 16, 1, 99, 99, 99]), $a(["T-48", 16, 49, 48, 38, 22, 1, 99, 99, 99])]); //#23101
        $_.fnc1 = -1; //#23104
        $_.fnc3 = -2; //#23104
        $_.lC = -5; //#23105
        $_.lB = -6; //#23105
        $_.lX = -7; //#23105
        $_.lT = -8; //#23105
        $_.lD = -9; //#23105
        $_.unl = -10; //#23105
        $_.fnc2 = -11; //#23106
        $_.fnc4 = -12; //#23106
        $_.sft1 = -13; //#23106
        $_.sft2 = -14; //#23106
        $_.sft3 = -15; //#23106
        $_.eci = -16; //#23106
        $_.pad = -17; //#23106
        $_.fnc1lD = -18; //#23106
        $_.unlcw = 255; //#23107
        $k[$j++] = Infinity; //#23109
        for (var _U = 0; _U <= 128; _U += 1) { //#23110
            $k[$j++] = _U; //#23110
            $k[$j++] = _U + 1; //#23110
        } //#23110
        $k[$j++] = $_.pad; //#23115
        $k[$j++] = 129; //#23115
        for (var _W = 0; _W <= 99; _W += 1) { //#23115
            var _Y = $cvrs($s(2), _W, 10); //#23113
            var _a = $strcpy($s(2), "00"); //#23113
            $puti(_a, 2 - _Y.length, _Y); //#23113
            $k[$j++] = _a; //#23114
            $k[$j++] = _W + 130; //#23114
        } //#23114
        var _i = $a([$_.lC, $_.lB, $_.fnc1, $_.fnc2, $_.fnc3, $_.fnc4, $_.fnc1lD]); //#23116
        $k[$j++] = 229; //#23116
        for (var _j = 0, _k = _i.length; _j < _k; _j++) { //#23116
            var _n = $f($k[--$j] + 1); //#23116
            $k[$j++] = $get(_i, _j); //#23116
            $k[$j++] = _n; //#23116
            $k[$j++] = _n; //#23116
        } //#23116
        $j--; //#23116
        $k[$j++] = $_.lX; //#23118
        $k[$j++] = 238; //#23118
        $k[$j++] = $_.lT; //#23118
        $k[$j++] = 239; //#23118
        $_.Avals = $d(); //#23120
        $k[$j++] = Infinity; //#23121
        var _r = $_.Avals; //#23122
        for (var _w = _r.size, _v = _r.keys(), _u = 0; _u < _w; _u++) { //#23122
            var _s = _v.next().value; //#23122
            $k[$j++] = _s; //#23122
            $k[$j++] = _r.get(_s); //#23122
            $k[$j++] = Infinity; //#23122
            var _x = $k[--$j]; //#23122
            var _y = $k[--$j]; //#23122
            $k[$j++] = _x; //#23122
            $k[$j++] = _y; //#23122
            var _z = $a(); //#23122
            $k[$j++] = _z; //#23122
        } //#23122
        $_.Avals = $d(); //#23123
        $k[$j++] = Infinity; //#23125
        $k[$j++] = $_.sft1; //#23130
        $k[$j++] = 0; //#23130
        $k[$j++] = $_.sft2; //#23130
        $k[$j++] = 1; //#23130
        $k[$j++] = $_.sft3; //#23130
        $k[$j++] = 2; //#23130
        $k[$j++] = 32; //#23130
        $k[$j++] = 3; //#23130
        for (var _14 = 48; _14 <= 57; _14 += 1) { //#23130
            $k[$j++] = _14; //#23130
            $k[$j++] = _14 - 44; //#23130
        } //#23130
        for (var _15 = 65; _15 <= 90; _15 += 1) { //#23131
            $k[$j++] = _15; //#23131
            $k[$j++] = _15 - 51; //#23131
        } //#23131
        $_.CNvals = $d(); //#23132
        $k[$j++] = Infinity; //#23133
        for (var _17 = 0; _17 <= 31; _17 += 1) { //#23133
            $k[$j++] = _17; //#23133
            $k[$j++] = _17; //#23133
        } //#23133
        $_.C1vals = $d(); //#23133
        $k[$j++] = Infinity; //#23134
        for (var _19 = 33; _19 <= 47; _19 += 1) { //#23135
            $k[$j++] = _19; //#23135
            $k[$j++] = _19 - 33; //#23135
        } //#23135
        for (var _1A = 58; _1A <= 64; _1A += 1) { //#23136
            $k[$j++] = _1A; //#23136
            $k[$j++] = _1A - 43; //#23136
        } //#23136
        for (var _1B = 91; _1B <= 95; _1B += 1) { //#23137
            $k[$j++] = _1B; //#23137
            $k[$j++] = _1B - 69; //#23137
        } //#23137
        $k[$j++] = $_.fnc1; //#23142
        $k[$j++] = 27; //#23142
        $k[$j++] = $_.fnc2; //#23142
        $k[$j++] = 28; //#23142
        $k[$j++] = $_.fnc3; //#23142
        $k[$j++] = 29; //#23142
        $k[$j++] = $_.fnc4; //#23142
        $k[$j++] = 30; //#23142
        $k[$j++] = $_.pad; //#23142
        $k[$j++] = 31; //#23142
        $_.C2vals = $d(); //#23143
        $k[$j++] = Infinity; //#23144
        for (var _1I = 96; _1I <= 127; _1I += 1) { //#23144
            $k[$j++] = _1I; //#23144
            $k[$j++] = _1I - 96; //#23144
        } //#23144
        $_.C3vals = $d(); //#23144
        $k[$j++] = Infinity; //#23145
        var _1K = $_.CNvals; //#23146
        for (var _1P = _1K.size, _1O = _1K.keys(), _1N = 0; _1N < _1P; _1N++) { //#23146
            var _1L = _1O.next().value; //#23146
            $k[$j++] = _1L; //#23146
            $k[$j++] = _1K.get(_1L); //#23146
            $k[$j++] = Infinity; //#23146
            var _1Q = $k[--$j]; //#23146
            var _1R = $k[--$j]; //#23146
            $k[$j++] = _1Q; //#23146
            $k[$j++] = _1R; //#23146
            var _1S = $a(); //#23146
            $k[$j++] = _1S; //#23146
        } //#23146
        var _1T = $_.C1vals; //#23147
        for (var _1Y = _1T.size, _1X = _1T.keys(), _1W = 0; _1W < _1Y; _1W++) { //#23147
            var _1U = _1X.next().value; //#23147
            $k[$j++] = _1U; //#23147
            $k[$j++] = _1T.get(_1U); //#23147
            $k[$j++] = Infinity; //#23147
            var _1Z = $k[--$j]; //#23147
            var _1a = $k[--$j]; //#23147
            $k[$j++] = _1Z; //#23147
            $k[$j++] = $get($_.CNvals, $_.sft1); //#23147
            $k[$j++] = _1a; //#23147
            var _1e = $a(); //#23147
            $k[$j++] = _1e; //#23147
        } //#23147
        var _1f = $_.C2vals; //#23148
        for (var _1k = _1f.size, _1j = _1f.keys(), _1i = 0; _1i < _1k; _1i++) { //#23148
            var _1g = _1j.next().value; //#23148
            $k[$j++] = _1g; //#23148
            $k[$j++] = _1f.get(_1g); //#23148
            $k[$j++] = Infinity; //#23148
            var _1l = $k[--$j]; //#23148
            var _1m = $k[--$j]; //#23148
            $k[$j++] = _1l; //#23148
            $k[$j++] = $get($_.CNvals, $_.sft2); //#23148
            $k[$j++] = _1m; //#23148
            var _1q = $a(); //#23148
            $k[$j++] = _1q; //#23148
        } //#23148
        var _1r = $_.C3vals; //#23149
        for (var _1w = _1r.size, _1v = _1r.keys(), _1u = 0; _1u < _1w; _1u++) { //#23149
            var _1s = _1v.next().value; //#23149
            $k[$j++] = _1s; //#23149
            $k[$j++] = _1r.get(_1s); //#23149
            $k[$j++] = Infinity; //#23149
            var _1x = $k[--$j]; //#23149
            var _1y = $k[--$j]; //#23149
            $k[$j++] = _1x; //#23149
            $k[$j++] = $get($_.CNvals, $_.sft3); //#23149
            $k[$j++] = _1y; //#23149
            var _22 = $a(); //#23149
            $k[$j++] = _22; //#23149
        } //#23149
        $_.Cvals = $d(); //#23150
        $k[$j++] = Infinity; //#23152
        $k[$j++] = $_.sft1; //#23157
        $k[$j++] = 0; //#23157
        $k[$j++] = $_.sft2; //#23157
        $k[$j++] = 1; //#23157
        $k[$j++] = $_.sft3; //#23157
        $k[$j++] = 2; //#23157
        $k[$j++] = 32; //#23157
        $k[$j++] = 3; //#23157
        for (var _27 = 48; _27 <= 57; _27 += 1) { //#23157
            $k[$j++] = _27; //#23157
            $k[$j++] = _27 - 44; //#23157
        } //#23157
        for (var _28 = 97; _28 <= 122; _28 += 1) { //#23158
            $k[$j++] = _28; //#23158
            $k[$j++] = _28 - 83; //#23158
        } //#23158
        $_.TNvals = $d(); //#23159
        $k[$j++] = Infinity; //#23160
        for (var _2A = 0; _2A <= 31; _2A += 1) { //#23160
            $k[$j++] = _2A; //#23160
            $k[$j++] = _2A; //#23160
        } //#23160
        $_.T1vals = $d(); //#23160
        $k[$j++] = Infinity; //#23161
        for (var _2C = 33; _2C <= 47; _2C += 1) { //#23162
            $k[$j++] = _2C; //#23162
            $k[$j++] = _2C - 33; //#23162
        } //#23162
        for (var _2D = 58; _2D <= 64; _2D += 1) { //#23163
            $k[$j++] = _2D; //#23163
            $k[$j++] = _2D - 43; //#23163
        } //#23163
        for (var _2E = 91; _2E <= 95; _2E += 1) { //#23164
            $k[$j++] = _2E; //#23164
            $k[$j++] = _2E - 69; //#23164
        } //#23164
        $k[$j++] = $_.fnc1; //#23169
        $k[$j++] = 27; //#23169
        $k[$j++] = $_.fnc2; //#23169
        $k[$j++] = 28; //#23169
        $k[$j++] = $_.fnc3; //#23169
        $k[$j++] = 29; //#23169
        $k[$j++] = $_.fnc4; //#23169
        $k[$j++] = 30; //#23169
        $k[$j++] = $_.pad; //#23169
        $k[$j++] = 31; //#23169
        $_.T2vals = $d(); //#23170
        $k[$j++] = Infinity; //#23171
        $k[$j++] = 96; //#23173
        $k[$j++] = 0; //#23173
        for (var _2L = 65; _2L <= 90; _2L += 1) { //#23173
            $k[$j++] = _2L; //#23173
            $k[$j++] = _2L - 64; //#23173
        } //#23173
        for (var _2M = 123; _2M <= 127; _2M += 1) { //#23174
            $k[$j++] = _2M; //#23174
            $k[$j++] = _2M - 96; //#23174
        } //#23174
        $_.T3vals = $d(); //#23175
        $k[$j++] = Infinity; //#23176
        var _2O = $_.TNvals; //#23177
        for (var _2T = _2O.size, _2S = _2O.keys(), _2R = 0; _2R < _2T; _2R++) { //#23177
            var _2P = _2S.next().value; //#23177
            $k[$j++] = _2P; //#23177
            $k[$j++] = _2O.get(_2P); //#23177
            $k[$j++] = Infinity; //#23177
            var _2U = $k[--$j]; //#23177
            var _2V = $k[--$j]; //#23177
            $k[$j++] = _2U; //#23177
            $k[$j++] = _2V; //#23177
            var _2W = $a(); //#23177
            $k[$j++] = _2W; //#23177
        } //#23177
        var _2X = $_.T1vals; //#23178
        for (var _2c = _2X.size, _2b = _2X.keys(), _2a = 0; _2a < _2c; _2a++) { //#23178
            var _2Y = _2b.next().value; //#23178
            $k[$j++] = _2Y; //#23178
            $k[$j++] = _2X.get(_2Y); //#23178
            $k[$j++] = Infinity; //#23178
            var _2d = $k[--$j]; //#23178
            var _2e = $k[--$j]; //#23178
            $k[$j++] = _2d; //#23178
            $k[$j++] = $get($_.TNvals, $_.sft1); //#23178
            $k[$j++] = _2e; //#23178
            var _2i = $a(); //#23178
            $k[$j++] = _2i; //#23178
        } //#23178
        var _2j = $_.T2vals; //#23179
        for (var _2o = _2j.size, _2n = _2j.keys(), _2m = 0; _2m < _2o; _2m++) { //#23179
            var _2k = _2n.next().value; //#23179
            $k[$j++] = _2k; //#23179
            $k[$j++] = _2j.get(_2k); //#23179
            $k[$j++] = Infinity; //#23179
            var _2p = $k[--$j]; //#23179
            var _2q = $k[--$j]; //#23179
            $k[$j++] = _2p; //#23179
            $k[$j++] = $get($_.TNvals, $_.sft2); //#23179
            $k[$j++] = _2q; //#23179
            var _2u = $a(); //#23179
            $k[$j++] = _2u; //#23179
        } //#23179
        var _2v = $_.T3vals; //#23180
        for (var _30 = _2v.size, _2z = _2v.keys(), _2y = 0; _2y < _30; _2y++) { //#23180
            var _2w = _2z.next().value; //#23180
            $k[$j++] = _2w; //#23180
            $k[$j++] = _2v.get(_2w); //#23180
            $k[$j++] = Infinity; //#23180
            var _31 = $k[--$j]; //#23180
            var _32 = $k[--$j]; //#23180
            $k[$j++] = _31; //#23180
            $k[$j++] = $get($_.TNvals, $_.sft3); //#23180
            $k[$j++] = _32; //#23180
            var _36 = $a(); //#23180
            $k[$j++] = _36; //#23180
        } //#23180
        $_.Tvals = $d(); //#23181
        for (var _38 = 128; _38 <= 255; _38 += 1) { //#23189
            $_.i = _38; //#23185
            $k[$j++] = $_.Avals; //#23186
            $k[$j++] = $_.i; //#23186
            $k[$j++] = Infinity; //#23186
            $aload($get($_.Avals, $_.fnc4)); //#23186
            $aload($get($_.Avals, $_.i - 128)); //#23186
            var _3H = $a(); //#23186
            var _3I = $k[--$j]; //#23186
            $put($k[--$j], _3I, _3H); //#23186
            $k[$j++] = $_.Cvals; //#23187
            $k[$j++] = $_.i; //#23187
            $k[$j++] = Infinity; //#23187
            $aload($get($_.Cvals, $_.fnc4)); //#23187
            $aload($get($_.Cvals, $_.i - 128)); //#23187
            var _3S = $a(); //#23187
            var _3T = $k[--$j]; //#23187
            $put($k[--$j], _3T, _3S); //#23187
            $k[$j++] = $_.Tvals; //#23188
            $k[$j++] = $_.i; //#23188
            $k[$j++] = Infinity; //#23188
            $aload($get($_.Tvals, $_.fnc4)); //#23188
            $aload($get($_.Tvals, $_.i - 128)); //#23188
            var _3d = $a(); //#23188
            var _3e = $k[--$j]; //#23188
            $put($k[--$j], _3e, _3d); //#23188
        } //#23188
        $k[$j++] = Infinity; //#23191
        $k[$j++] = 13; //#23196
        $k[$j++] = 0; //#23196
        $k[$j++] = 42; //#23196
        $k[$j++] = 1; //#23196
        $k[$j++] = 62; //#23196
        $k[$j++] = 2; //#23196
        $k[$j++] = 32; //#23196
        $k[$j++] = 3; //#23196
        for (var _3g = 48; _3g <= 57; _3g += 1) { //#23196
            $k[$j++] = _3g; //#23196
            $k[$j++] = _3g - 44; //#23196
        } //#23196
        for (var _3h = 65; _3h <= 90; _3h += 1) { //#23197
            $k[$j++] = _3h; //#23197
            $k[$j++] = _3h - 51; //#23197
        } //#23197
        $_.Xvals = $d(); //#23198
        $k[$j++] = Infinity; //#23199
        var _3j = $_.Xvals; //#23200
        for (var _3o = _3j.size, _3n = _3j.keys(), _3m = 0; _3m < _3o; _3m++) { //#23200
            var _3k = _3n.next().value; //#23200
            $k[$j++] = _3k; //#23200
            $k[$j++] = _3j.get(_3k); //#23200
            $k[$j++] = Infinity; //#23200
            var _3p = $k[--$j]; //#23200
            var _3q = $k[--$j]; //#23200
            $k[$j++] = _3p; //#23200
            $k[$j++] = _3q; //#23200
            var _3r = $a(); //#23200
            $k[$j++] = _3r; //#23200
        } //#23200
        $_.Xvals = $d(); //#23201
        $k[$j++] = Infinity; //#23203
        for (var _3t = 0; _3t <= 255; _3t += 1) { //#23204
            $k[$j++] = _3t; //#23204
            $k[$j++] = _3t; //#23204
        } //#23204
        $_.Bvals = $d(); //#23205
        $k[$j++] = Infinity; //#23206
        var _3v = $_.Bvals; //#23207
        for (var _40 = _3v.size, _3z = _3v.keys(), _3y = 0; _3y < _40; _3y++) { //#23207
            var _3w = _3z.next().value; //#23207
            $k[$j++] = _3w; //#23207
            $k[$j++] = _3v.get(_3w); //#23207
            $k[$j++] = Infinity; //#23207
            var _41 = $k[--$j]; //#23207
            var _42 = $k[--$j]; //#23207
            $k[$j++] = _41; //#23207
            $k[$j++] = _42; //#23207
            var _43 = $a(); //#23207
            $k[$j++] = _43; //#23207
        } //#23207
        $_.Bvals = $d(); //#23208
        $_.encvals = $a([$_.Avals, $_.Cvals, $_.Tvals, $_.Xvals, -1, $_.Bvals]); //#23210
        $_.A = 0; //#23212
        $_.C = 1; //#23212
        $_.T = 2; //#23212
        $_.X = 3; //#23212
        $_.D = 4; //#23212
        $_.B = 5; //#23212
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_codeone.$ctx[id] = $_[id]); //#23212
        bwipp_codeone.__23213__ = 1; //#23212
        $_ = Object.getPrototypeOf($_); //#23212
    } //#23212
    if ($_.stype) { //#23711
        $forall($_.barcode, function() { //#23221
            var _4E = $k[--$j]; //#23218
            if ((_4E < 48) || (_4E > 57)) { //#23220
                $k[$j++] = 'bwipp.codeoneStypeNonDigit#23219'; //#23219
                $k[$j++] = "S-Type symbols can only contain digits"; //#23219
                bwipp_raiseerror(); //#23219
            } //#23219
        }); //#23219
        $_.barlen = $_.barcode.length; //#23223
        if ($_.barlen > 18) { //#23226
            $k[$j++] = 'bwipp.codeoneStypeTooLong#23225'; //#23225
            $k[$j++] = "Maximum length exceeded"; //#23225
            bwipp_raiseerror(); //#23225
        } //#23225
        $_.normalize = function() {
            $_.base = $k[--$j]; //#23229
            $_.num = $k[--$j]; //#23230
            for (var _4K = $_.num.length - 1; _4K >= 1; _4K -= 1) { //#23235
                $_.i = _4K; //#23232
                var _4L = $_.num; //#23233
                var _4M = $_.i; //#23233
                $put(_4L, _4M - 1, $f($get(_4L, _4M - 1) + (~~($get($_.num, $_.i) / $_.base)))); //#23233
                $put($_.num, $_.i, $get($_.num, $_.i) % $_.base); //#23234
            } //#23234
            for (;;) { //#23241
                if ($lt($get($_.num, 0), $_.base)) { //#23237
                    break; //#23237
                } //#23237
                $k[$j++] = Infinity; //#23238
                $k[$j++] = 0; //#23238
                $forall($_.num); //#23238
                $_.num = $a(); //#23238
                $put($_.num, 0, $f($get($_.num, 0) + (~~($get($_.num, 1) / $_.base)))); //#23239
                $put($_.num, 1, $get($_.num, 1) % $_.base); //#23240
            } //#23240
            $k[$j++] = Infinity; //#23243
            $_.i = true; //#23243
            var _4n = $_.num; //#23243
            for (var _4o = 0, _4p = _4n.length; _4o < _4p; _4o++) { //#23243
                var _4q = $get(_4n, _4o); //#23243
                $k[$j++] = _4q; //#23243
                if ((_4q == 0) && $_.i) { //#23243
                    $j--; //#23243
                } else { //#23243
                    $_.i = false; //#23243
                } //#23243
            } //#23243
            $_.num = $a(); //#23243
            if ($_.num.length == 0) { //#23244
                $_.num = $a([0]); //#23244
            } //#23244
            $k[$j++] = $_.num; //#23245
        }; //#23245
        $_.bigadd = function() {
            var _4w = $k[--$j]; //#23249
            var _4x = $k[--$j]; //#23249
            $_.offset = Math.abs(_4w.length - _4x.length); //#23250
            if (_4w.length < _4x.length) { //#23251
                var _ = _4w; //#23251
                _4w = _4x; //#23251
                _4x = _; //#23251
            } //#23251
            $_.a = _4w; //#23252
            $_.b = _4x; //#23252
            for (var _50 = 0, _4z = $_.b.length - 1; _50 <= _4z; _50 += 1) { //#23255
                var _51 = $_.a; //#23254
                var _52 = $_.offset; //#23254
                $put(_51, _50 + _52, $f($get(_51, _50 + _52) + $get($_.b, _50))); //#23254
            } //#23254
            $k[$j++] = $_.a; //#23256
        }; //#23256
        $_.barlen = $_.barcode.length; //#23259
        $_.v = $a([1]); //#23262
        for (var _5B = 0, _5A = $_.barlen - 1; _5B <= _5A; _5B += 1) { //#23267
            $_.i = _5B; //#23264
            $k[$j++] = Infinity; //#23265
            $forall($get($_.stypevals, $_.i), function() { //#23265
                var _5F = $k[--$j]; //#23265
                $k[$j++] = $f(_5F - 48) * $f($get($_.barcode, ($_.barlen - $_.i) - 1) - 48); //#23265
            }); //#23265
            var _5K = $a(); //#23265
            $k[$j++] = _5K; //#23266
            $k[$j++] = $_.v; //#23266
            $_.bigadd(); //#23266
            $_.v = $k[--$j]; //#23266
        } //#23266
        $k[$j++] = 'v'; //#23268
        $k[$j++] = $_.v; //#23268
        $k[$j++] = 2; //#23268
        $_.normalize(); //#23268
        var _5O = $k[--$j]; //#23268
        $_[$k[--$j]] = _5O; //#23268
        $k[$j++] = Infinity; //#23271
        for (var _5R = 0, _5S = (5 - ($_.v.length % 5)) % 5; _5R < _5S; _5R++) { //#23271
            $k[$j++] = 0; //#23271
        } //#23271
        $aload($_.v); //#23271
        $_.v = $a(); //#23271
        $_.cws = $a(~~($_.v.length / 5)); //#23272
        for (var _5Z = 0, _5Y = $_.cws.length - 1; _5Z <= _5Y; _5Z += 1) { //#23278
            $_.i = _5Z; //#23274
            var _5c = $geti($_.v, $_.i * 5, 5); //#23275
            $k[$j++] = 0; //#23276
            for (var _5d = 0, _5e = _5c.length; _5d < _5e; _5d++) { //#23276
                var _5g = $k[--$j]; //#23276
                $k[$j++] = $f(_5g + $get(_5c, _5d)) * 2; //#23276
            } //#23276
            $put($_.cws, $_.i, ~~($k[--$j] / 2)); //#23277
        } //#23277
        $_.metrics = $_.stypemetrics; //#23280
    } else { //#23711
        var _5p = new Map([
            ["parse", $_.parse],
            ["parsefnc", $_.parsefnc],
            ["eci", true],
            ["FNC1", $_.fnc1],
            ["FNC3", $_.fnc3]
        ]); //#23290
        $_.fncvals = _5p; //#23291
        $k[$j++] = 'msg'; //#23292
        $k[$j++] = $_.barcode; //#23292
        $k[$j++] = $_.fncvals; //#23292
        bwipp_parseinput(); //#23292
        var _5s = $k[--$j]; //#23292
        $_[$k[--$j]] = _5s; //#23292
        $_.msglen = $_.msg.length; //#23293
        $_.eciesc = 92; //#23296
        var _5v = $_.msg; //#23297
        $k[$j++] = 'numecis'; //#23297
        $k[$j++] = 0; //#23297
        for (var _5w = 0, _5x = _5v.length; _5w < _5x; _5w++) { //#23297
            if ($get(_5v, _5w) <= -1000000) { //#23297
                var _5z = $k[--$j]; //#23297
                $k[$j++] = $f(_5z + 1); //#23297
            } //#23297
        } //#23297
        var _60 = $k[--$j]; //#23297
        $_[$k[--$j]] = _60; //#23297
        if ($_.numecis > 0) { //#23324
            $_.msgtmp = $a($f(($f(($_.msg.length * 2) + ($_.numecis * 6))) + 2)); //#23299
            $put($_.msgtmp, 0, $_.pad); //#23300
            $put($_.msgtmp, 1, $_.eciesc); //#23301
            $_.j = 2; //#23302
            for (var _6C = 0, _6B = $_.msg.length - 1; _6C <= _6B; _6C += 1) { //#23321
                var _6E = $get($_.msg, _6C); //#23304
                $k[$j++] = _6E; //#23320
                if (_6E <= -1000000) { //#23318
                    var _6I = $geti($cvrs($s(7), -$k[--$j], 10), 1, 6); //#23306
                    for (var _6J = 0, _6K = _6I.length; _6J < _6K; _6J++) { //#23306
                        $k[$j++] = $get(_6I, _6J); //#23306
                    } //#23306
                    $astore($a(6)); //#23306
                    $puti($_.msgtmp, $_.j + 1, $k[--$j]); //#23307
                    $put($_.msgtmp, $_.j, $_.eciesc); //#23308
                    $_.j = $_.j + 7; //#23309
                } else { //#23318
                    var _6U = $k[--$j]; //#23311
                    $k[$j++] = _6U; //#23319
                    if (_6U != $_.eciesc) { //#23318
                        $put($_.msgtmp, $_.j, $k[--$j]); //#23312
                        $_.j = $_.j + 1; //#23313
                    } else { //#23318
                        $j--; //#23315
                        $put($_.msgtmp, $_.j, $_.eciesc); //#23316
                        $put($_.msgtmp, $_.j + 1, $_.eciesc); //#23317
                        $_.j = $_.j + 2; //#23318
                    } //#23318
                } //#23318
            } //#23318
            $_.msg = $geti($_.msgtmp, 0, $_.j); //#23322
            $_.msglen = $_.msg.length; //#23323
        } //#23323
        $_.metrics = $_.nonstypemetrics; //#23326
        $_.fullcws = $a([]); //#23329
        var _6n = $_.metrics; //#23330
        for (var _6o = 0, _6p = _6n.length; _6o < _6p; _6o++) { //#23341
            $_.m = $get(_6n, _6o); //#23331
            $_.vers = $get($_.m, 0); //#23332
            $_.dcws = $get($_.m, 4); //#23333
            $_.okay = true; //#23334
            if ($eq($_.version, "unset")) { //#23338
                if ($_.vers.length != 1) { //#23336
                    $_.okay = false; //#23336
                } //#23336
            } else { //#23338
                if ($ne($_.version, $_.vers)) { //#23338
                    $_.okay = false; //#23338
                } //#23338
            } //#23338
            if ($_.okay) { //#23340
                $k[$j++] = Infinity; //#23340
                $aload($_.fullcws); //#23340
                $k[$j++] = $_.dcws; //#23340
                $_.fullcws = $a(); //#23340
            } //#23340
        } //#23340
        $k[$j++] = Infinity; //#23342
        for (var _73 = 0, _74 = 1480; _73 < _74; _73++) { //#23342
            $k[$j++] = 10000; //#23342
        } //#23342
        $_.numremcws = $a(); //#23342
        var _76 = $_.fullcws; //#23343
        for (var _77 = 0, _78 = _76.length; _77 < _78; _77++) { //#23343
            $put($_.numremcws, $f($get(_76, _77) - 1), 1); //#23343
        } //#23343
        for (var _7B = 1478; _7B >= 0; _7B -= 1) { //#23349
            $_.i = _7B; //#23345
            if ($get($_.numremcws, $_.i) != 1) { //#23348
                $put($_.numremcws, $_.i, $f($get($_.numremcws, $_.i + 1) + 1)); //#23347
            } //#23347
        } //#23347
        $k[$j++] = Infinity; //#23351
        for (var _7L = 0, _7M = $_.msglen; _7L < _7M; _7L++) { //#23351
            $k[$j++] = 0; //#23351
        } //#23351
        $k[$j++] = 0; //#23351
        $_.numD = $a(); //#23351
        $k[$j++] = Infinity; //#23352
        for (var _7P = 0, _7Q = $_.msglen; _7P < _7Q; _7P++) { //#23352
            $k[$j++] = 0; //#23352
        } //#23352
        $k[$j++] = 9999; //#23352
        $_.nextXterm = $a(); //#23352
        $k[$j++] = Infinity; //#23353
        for (var _7T = 0, _7U = $_.msglen; _7T < _7U; _7T++) { //#23353
            $k[$j++] = 0; //#23353
        } //#23353
        $k[$j++] = 9999; //#23353
        $_.nextNonX = $a(); //#23353
        for (var _7X = $_.msglen - 1; _7X >= 0; _7X -= 1) { //#23370
            $_.i = _7X; //#23355
            $_.barchar = $get($_.msg, $_.i); //#23356
            if (($_.barchar >= 48) && ($_.barchar <= 57)) { //#23359
                $put($_.numD, $_.i, $f($get($_.numD, $_.i + 1) + 1)); //#23358
            } //#23358
            if ((($_.barchar == 13) || ($_.barchar == 42)) || ($_.barchar == 62)) { //#23363
                $put($_.nextXterm, $_.i, 0); //#23361
            } else { //#23363
                $put($_.nextXterm, $_.i, $f($get($_.nextXterm, $_.i + 1) + 1)); //#23363
            } //#23363
            var _7u = $get($_.Xvals, $_.barchar) !== undefined; //#23365
            if (!_7u) { //#23368
                $put($_.nextNonX, $_.i, 0); //#23366
            } else { //#23368
                $put($_.nextNonX, $_.i, $f($get($_.nextNonX, $_.i + 1) + 1)); //#23368
            } //#23368
        } //#23368
        $k[$j++] = Infinity; //#23371
        var _82 = $_.nextXterm; //#23371
        for (var _83 = 0, _84 = _82.length; _83 < _84; _83++) { //#23371
            var _85 = $get(_82, _83); //#23371
            $k[$j++] = _85; //#23371
            if (_85 > 10000) { //#23371
                $j--; //#23371
                $k[$j++] = 10000; //#23371
            } //#23371
        } //#23371
        $_.nextXterm = $a(); //#23371
        $k[$j++] = Infinity; //#23372
        var _87 = $_.nextNonX; //#23372
        for (var _88 = 0, _89 = _87.length; _88 < _89; _88++) { //#23372
            var _8A = $get(_87, _88); //#23372
            $k[$j++] = _8A; //#23372
            if (_8A > 10000) { //#23372
                $j--; //#23372
                $k[$j++] = 10000; //#23372
            } //#23372
        } //#23372
        $_.nextNonX = $a(); //#23372
        $_.isD = function() {
            $k[$j++] = ($_.char >= 48) && ($_.char <= 57); //#23374
        }; //#23374
        $_.isC = function() {
            var _8G = $get($_.CNvals, $_.char) !== undefined; //#23375
            $k[$j++] = _8G; //#23375
        }; //#23375
        $_.isT = function() {
            var _8J = $get($_.TNvals, $_.char) !== undefined; //#23376
            $k[$j++] = _8J; //#23376
        }; //#23376
        $_.isX = function() {
            var _8M = $get($_.Xvals, $_.char) !== undefined; //#23377
            $k[$j++] = _8M; //#23377
        }; //#23377
        $_.isEA = function() {
            $k[$j++] = $_.char > 127; //#23378
        }; //#23378
        $_.isFN = function() {
            $k[$j++] = $_.char < 0; //#23379
        }; //#23379
        $_.XtermFirst = function() {
            var _8P = $k[--$j]; //#23380
            $k[$j++] = $lt($get($_.nextXterm, _8P), $get($_.nextNonX, _8P)); //#23380
        }; //#23380
        $_.lookup = function() {
            $_.ac = 1; //#23383
            $_.cc = 2; //#23383
            $_.tc = 2; //#23383
            $_.xc = 2; //#23383
            $_.bc = 3; //#23383
            if ($_.mode == $_.A) { //#23384
                $_.ac = 0; //#23384
                $_.cc = 1; //#23384
                $_.tc = 1; //#23384
                $_.xc = 1; //#23384
                $_.bc = 2; //#23384
            } //#23384
            if ($_.mode == $_.C) { //#23385
                $_.cc = 0; //#23385
            } //#23385
            if ($_.mode == $_.T) { //#23386
                $_.tc = 0; //#23386
            } //#23386
            if ($_.mode == $_.X) { //#23387
                $_.xc = 0; //#23387
            } //#23387
            if ($_.mode == $_.B) { //#23388
                $_.bc = 0; //#23388
            } //#23388
            for (var _8e = 0, _8f = 1; _8e < _8f; _8e++) { //#23416
                $_.k = 0; //#23390
                for (;;) { //#23415
                    if (($_.i + $_.k) == $_.msglen) { //#23397
                        var _8n = $a([$_.ac, $_.cc, $_.tc, $_.xc]); //#23392
                        $k[$j++] = true; //#23392
                        for (var _8o = 0, _8p = _8n.length; _8o < _8p; _8o++) { //#23392
                            var _8s = $k[--$j]; //#23392
                            $k[$j++] = _8s && ($_.bc <= Math.ceil($get(_8n, _8o))); //#23392
                        } //#23392
                        if ($k[--$j]) { //#23392
                            $k[$j++] = $_.B; //#23392
                            break; //#23392
                        } //#23392
                        var _8z = $a([$_.cc, $_.tc, $_.xc, $_.bc]); //#23393
                        $k[$j++] = true; //#23393
                        for (var _90 = 0, _91 = _8z.length; _90 < _91; _90++) { //#23393
                            var _94 = $k[--$j]; //#23393
                            $k[$j++] = _94 && ($_.ac <= Math.ceil($get(_8z, _90))); //#23393
                        } //#23393
                        if ($k[--$j]) { //#23393
                            $k[$j++] = $_.A; //#23393
                            break; //#23393
                        } //#23393
                        var _99 = $a([$_.tc, $_.xc]); //#23394
                        $k[$j++] = true; //#23394
                        for (var _9A = 0, _9B = _99.length; _9A < _9B; _9A++) { //#23394
                            var _9E = $k[--$j]; //#23394
                            $k[$j++] = _9E && (Math.ceil($_.cc) <= Math.ceil($get(_99, _9A))); //#23394
                        } //#23394
                        if ($k[--$j]) { //#23394
                            $k[$j++] = $_.C; //#23394
                            break; //#23394
                        } //#23394
                        var _9I = $a([$_.xc]); //#23395
                        $k[$j++] = true; //#23395
                        for (var _9J = 0, _9K = _9I.length; _9J < _9K; _9J++) { //#23395
                            var _9N = $k[--$j]; //#23395
                            $k[$j++] = _9N && (Math.ceil($_.tc) <= Math.ceil($get(_9I, _9J))); //#23395
                        } //#23395
                        if ($k[--$j]) { //#23395
                            $k[$j++] = $_.T; //#23395
                            break; //#23395
                        } //#23395
                        $k[$j++] = $_.X; //#23396
                        break; //#23396
                    } //#23396
                    $_.char = $get($_.msg, $_.i + $_.k); //#23398
                    $k[$j++] = 'ac'; //#23399
                    $k[$j++] = $_.ac; //#23399
                    $_.isD(); //#23399
                    if ($k[--$j]) { //#23399
                        var _9X = $k[--$j]; //#23399
                        $k[$j++] = $f(_9X + (1 / 2)); //#23399
                    } else { //#23399
                        $_.isEA(); //#23399
                        if ($k[--$j]) { //#23399
                            var _9Z = $k[--$j]; //#23399
                            $k[$j++] = Math.ceil(_9Z) + 2; //#23399
                        } else { //#23399
                            var _9a = $k[--$j]; //#23399
                            $k[$j++] = Math.ceil(_9a) + 1; //#23399
                        } //#23399
                    } //#23399
                    var _9b = $k[--$j]; //#23399
                    $_[$k[--$j]] = _9b; //#23399
                    $k[$j++] = 'cc'; //#23400
                    $k[$j++] = $_.cc; //#23400
                    $_.isC(); //#23400
                    if ($k[--$j]) { //#23400
                        var _9f = $k[--$j]; //#23400
                        $k[$j++] = $f(_9f + 0.6666667); //#23400
                    } else { //#23400
                        $_.isEA(); //#23400
                        if ($k[--$j]) { //#23400
                            var _9h = $k[--$j]; //#23400
                            $k[$j++] = $f(_9h + 2.6666667); //#23400
                        } else { //#23400
                            var _9i = $k[--$j]; //#23400
                            $k[$j++] = $f(_9i + 1.3333334); //#23400
                        } //#23400
                    } //#23400
                    var _9j = $k[--$j]; //#23400
                    $_[$k[--$j]] = _9j; //#23400
                    $k[$j++] = 'tc'; //#23401
                    $k[$j++] = $_.tc; //#23401
                    $_.isT(); //#23401
                    if ($k[--$j]) { //#23401
                        var _9n = $k[--$j]; //#23401
                        $k[$j++] = $f(_9n + 0.6666667); //#23401
                    } else { //#23401
                        $_.isEA(); //#23401
                        if ($k[--$j]) { //#23401
                            var _9p = $k[--$j]; //#23401
                            $k[$j++] = $f(_9p + 2.6666667); //#23401
                        } else { //#23401
                            var _9q = $k[--$j]; //#23401
                            $k[$j++] = $f(_9q + 1.3333334); //#23401
                        } //#23401
                    } //#23401
                    var _9r = $k[--$j]; //#23401
                    $_[$k[--$j]] = _9r; //#23401
                    $k[$j++] = 'xc'; //#23402
                    $k[$j++] = $_.xc; //#23402
                    $_.isX(); //#23402
                    if ($k[--$j]) { //#23402
                        var _9v = $k[--$j]; //#23402
                        $k[$j++] = $f(_9v + 0.6666667); //#23402
                    } else { //#23402
                        $_.isEA(); //#23402
                        if ($k[--$j]) { //#23402
                            var _9x = $k[--$j]; //#23402
                            $k[$j++] = $f(_9x + 4.3333334); //#23402
                        } else { //#23402
                            var _9y = $k[--$j]; //#23402
                            $k[$j++] = $f(_9y + 3.3333334); //#23402
                        } //#23402
                    } //#23402
                    var _9z = $k[--$j]; //#23402
                    $_[$k[--$j]] = _9z; //#23402
                    $k[$j++] = 'bc'; //#23403
                    $k[$j++] = $_.bc; //#23403
                    $_.isFN(); //#23403
                    if ($k[--$j]) { //#23403
                        var _A3 = $k[--$j]; //#23403
                        $k[$j++] = $f(_A3 + 3); //#23403
                    } else { //#23403
                        var _A4 = $k[--$j]; //#23403
                        $k[$j++] = $f(_A4 + 1); //#23403
                    } //#23403
                    var _A5 = $k[--$j]; //#23403
                    $_[$k[--$j]] = _A5; //#23403
                    if ($_.k >= 3) { //#23413
                        var _AC = $a([$_.ac, $_.cc, $_.tc, $_.xc]); //#23405
                        $k[$j++] = true; //#23405
                        for (var _AD = 0, _AE = _AC.length; _AD < _AE; _AD++) { //#23405
                            var _AH = $k[--$j]; //#23405
                            $k[$j++] = _AH && (($_.bc + 1) <= Math.ceil($get(_AC, _AD))); //#23405
                        } //#23405
                        if ($k[--$j]) { //#23405
                            $k[$j++] = $_.B; //#23405
                            break; //#23405
                        } //#23405
                        var _AO = $a([$_.cc, $_.tc, $_.xc, $_.bc]); //#23406
                        $k[$j++] = true; //#23406
                        for (var _AP = 0, _AQ = _AO.length; _AP < _AQ; _AP++) { //#23406
                            var _AT = $k[--$j]; //#23406
                            $k[$j++] = _AT && (($_.ac + 1) <= Math.ceil($get(_AO, _AP))); //#23406
                        } //#23406
                        if ($k[--$j]) { //#23406
                            $k[$j++] = $_.A; //#23406
                            break; //#23406
                        } //#23406
                        var _Aa = $a([$_.ac, $_.cc, $_.xc, $_.bc]); //#23407
                        $k[$j++] = true; //#23407
                        for (var _Ab = 0, _Ac = _Aa.length; _Ab < _Ac; _Ab++) { //#23407
                            var _Af = $k[--$j]; //#23407
                            $k[$j++] = _Af && ((Math.ceil($_.tc) + 1) <= Math.ceil($get(_Aa, _Ab))); //#23407
                        } //#23407
                        if ($k[--$j]) { //#23407
                            $k[$j++] = $_.T; //#23407
                            break; //#23407
                        } //#23407
                        var _Ak = $a([$_.ac, $_.tc]); //#23408
                        $k[$j++] = true; //#23408
                        for (var _Al = 0, _Am = _Ak.length; _Al < _Am; _Al++) { //#23408
                            var _Ap = $k[--$j]; //#23408
                            $k[$j++] = _Ap && ((Math.ceil($_.cc) + 1) <= Math.ceil($get(_Ak, _Al))); //#23408
                        } //#23408
                        if ($k[--$j]) { //#23411
                            if (Math.ceil($_.cc) < Math.ceil($_.xc)) { //#23409
                                $k[$j++] = $_.C; //#23409
                                break; //#23409
                            } //#23409
                            if ($_.cc == $_.xc) { //#23410
                                $k[$j++] = ($_.i + $_.k) + 1; //#23410
                                $_.XtermFirst(); //#23410
                                if ($k[--$j]) { //#23410
                                    $k[$j++] = $_.X; //#23410
                                    break; //#23410
                                } else { //#23410
                                    $k[$j++] = $_.C; //#23410
                                    break; //#23410
                                } //#23410
                            } //#23410
                        } //#23410
                        var _B5 = $a([$_.ac, $_.cc, $_.tc, $_.bc]); //#23412
                        $k[$j++] = true; //#23412
                        for (var _B6 = 0, _B7 = _B5.length; _B6 < _B7; _B6++) { //#23412
                            var _BA = $k[--$j]; //#23412
                            $k[$j++] = _BA && ((Math.ceil($_.xc) + 1) <= Math.ceil($get(_B5, _B6))); //#23412
                        } //#23412
                        if ($k[--$j]) { //#23412
                            $k[$j++] = $_.X; //#23412
                            break; //#23412
                        } //#23412
                    } //#23412
                    $_.k = $_.k + 1; //#23414
                } //#23414
            } //#23414
        }; //#23414
        $_.addtocws = function() {
            var _BE = $k[--$j]; //#23420
            $k[$j++] = _BE; //#23422
            if ((_BE.length + $_.j) > 1480) { //#23422
                $j--; //#23421
                $k[$j++] = 'bwipp.codeoneTooLong#23421'; //#23421
                $k[$j++] = "Maximum length exceeded"; //#23421
                bwipp_raiseerror(); //#23421
            } //#23421
            var _BG = $k[--$j]; //#23423
            $puti($_.cws, $_.j, _BG); //#23423
            $_.j = _BG.length + $_.j; //#23424
        }; //#23424
        $_.tobin = function() {
            var _BL = $s($k[--$j]); //#23428
            $k[$j++] = _BL; //#23428
            for (var _BN = 0, _BM = _BL.length - 1; _BN <= _BM; _BN += 1) { //#23428
                var _BO = $k[--$j]; //#23428
                $put(_BO, _BN, 48); //#23428
                $k[$j++] = _BO; //#23428
            } //#23428
            var _BP = $k[--$j]; //#23429
            var _BS = $cvrs($s(_BP.length), $k[--$j], 2); //#23429
            $puti(_BP, _BP.length - _BS.length, _BS); //#23429
            $k[$j++] = _BP; //#23430
            $k[$j++] = Infinity; //#23430
            var _BT = $k[--$j]; //#23430
            var _BU = $k[--$j]; //#23430
            $k[$j++] = _BT; //#23430
            $forall(_BU, function() { //#23430
                var _BV = $k[--$j]; //#23430
                $k[$j++] = $f(_BV - 48); //#23430
            }); //#23430
            var _BW = $a(); //#23430
            $k[$j++] = _BW; //#23430
        }; //#23430
        $_.encA = function() {
            for (var _BX = 0, _BY = 1; _BX < _BY; _BX++) { //#23475
                if ($get($_.numD, $_.i) >= 21) { //#23439
                    $_.Dbits = $a([1, 1, 1, 1]); //#23436
                    $_.mode = $_.D; //#23437
                    break; //#23438
                } //#23438
                var _Bg = $get($_.numD, $_.i); //#23440
                if ((_Bg >= 13) && ($f(_Bg + $_.i) == $_.msglen)) { //#23444
                    $_.Dbits = $a([1, 1, 1, 1]); //#23441
                    $_.mode = $_.D; //#23442
                    break; //#23443
                } //#23443
                if ($get($_.numD, $_.i) >= 2) { //#23449
                    var _Bo = $s(2); //#23446
                    $put(_Bo, 0, $get($_.msg, $_.i)); //#23446
                    $put(_Bo, 1, $get($_.msg, $_.i + 1)); //#23446
                    $k[$j++] = $get($_.Avals, _Bo); //#23446
                    $_.addtocws(); //#23446
                    $_.i = $_.i + 2; //#23447
                    break; //#23448
                } //#23448
                if ($get($_.msg, $_.i) == $_.fnc1) { //#23465
                    if ($get($_.numD, $_.i + 1) >= 15) { //#23457
                        $k[$j++] = $get($_.Avals, $_.fnc1lD); //#23452
                        $_.addtocws(); //#23452
                        $_.i = $_.i + 1; //#23453
                        $_.Dbits = $a([]); //#23454
                        $_.mode = $_.D; //#23455
                        break; //#23456
                    } //#23456
                    var _CD = $get($_.numD, $_.i + 1); //#23458
                    if ((_CD >= 7) && (($f($f(_CD + $_.i) + 1)) == $_.msglen)) { //#23464
                        $k[$j++] = $get($_.Avals, $_.fnc1lD); //#23459
                        $_.addtocws(); //#23459
                        $_.i = $_.i + 1; //#23460
                        $_.Dbits = $a([]); //#23461
                        $_.mode = $_.D; //#23462
                        break; //#23463
                    } //#23463
                } //#23463
                $k[$j++] = 'newmode'; //#23466
                $_.lookup(); //#23466
                var _CM = $k[--$j]; //#23466
                $_[$k[--$j]] = _CM; //#23466
                if ($_.newmode != $_.mode) { //#23471
                    $k[$j++] = $get($_.Avals, $get($a([-1, $_.lC, $_.lT, $_.lX, $_.lD, $_.lB]), $_.newmode)); //#23468
                    $_.addtocws(); //#23468
                    $_.mode = $_.newmode; //#23469
                    break; //#23470
                } //#23470
                $k[$j++] = $get($_.Avals, $get($_.msg, $_.i)); //#23472
                $_.addtocws(); //#23472
                $_.i = $_.i + 1; //#23473
                break; //#23474
            } //#23474
        }; //#23474
        $_.CTXvalstocws = function() {
            $_.in = $k[--$j]; //#23479
            $k[$j++] = Infinity; //#23480
            for (var _Ck = 0, _Cj = $_.in.length - 1; _Ck <= _Cj; _Ck += 3) { //#23484
                var _Cm = $geti($_.in, _Ck, 3); //#23482
                $k[$j++] = 0; //#23482
                for (var _Cn = 0, _Co = _Cm.length; _Cn < _Co; _Cn++) { //#23482
                    var _Cq = $k[--$j]; //#23482
                    $k[$j++] = $f(_Cq + $get(_Cm, _Cn)) * 40; //#23482
                } //#23482
                var _Cs = (~~($k[--$j] / 40)) + 1; //#23483
                $k[$j++] = ~~(_Cs / 256); //#23483
                $k[$j++] = _Cs % 256; //#23483
            } //#23483
            $astore($a($counttomark())); //#23485
            var _Cv = $k[--$j]; //#23485
            var _Cw = $k[--$j]; //#23485
            $k[$j++] = _Cv; //#23485
            $k[$j++] = _Cw; //#23485
            $j--; //#23485
        }; //#23485
        $_.encCTX = function() {
            $_.p = 0; //#23489
            $_.ctxvals = $a(2220); //#23490
            for (;;) { //#23587
                if ($_.i == $_.msglen) { //#23494
                    break; //#23494
                } //#23494
                if (($_.p % 3) == 0) { //#23582
                    if ($get($_.numD, $_.i) >= 12) { //#23501
                        $k[$j++] = $geti($_.ctxvals, 0, $_.p); //#23497
                        $_.CTXvalstocws(); //#23497
                        $_.addtocws(); //#23497
                        $k[$j++] = $a([$_.unlcw]); //#23498
                        $_.addtocws(); //#23498
                        $_.mode = $_.A; //#23499
                        break; //#23500
                    } //#23500
                    var _DC = $get($_.numD, $_.i); //#23502
                    if ((_DC >= 8) && ($f(_DC + $_.i) == $_.msglen)) { //#23507
                        $k[$j++] = $geti($_.ctxvals, 0, $_.p); //#23503
                        $_.CTXvalstocws(); //#23503
                        $_.addtocws(); //#23503
                        $k[$j++] = $a([$_.unlcw]); //#23504
                        $_.addtocws(); //#23504
                        $_.mode = $_.A; //#23505
                        break; //#23506
                    } //#23506
                    if ($_.mode == $_.X) { //#23529
                        var _DR = $get($_.Xvals, $get($_.msg, $_.i)) !== undefined; //#23509
                        if (!_DR) { //#23517
                            $k[$j++] = $geti($_.ctxvals, 0, $_.p); //#23510
                            $_.CTXvalstocws(); //#23510
                            $_.addtocws(); //#23510
                            if (($get($_.numremcws, $_.j) != 1) || ($get($_.msg, $_.i) > 127)) { //#23514
                                $k[$j++] = $a([$_.unlcw]); //#23513
                                $_.addtocws(); //#23513
                            } //#23513
                            $_.mode = $_.A; //#23515
                            break; //#23516
                        } //#23516
                        if (($_.i + 1) < $_.msglen) { //#23523
                            var _Dk = $get($_.Xvals, $get($_.msg, $_.i + 1)) !== undefined; //#23519
                            if (!_Dk) { //#23519
                                break; //#23519
                            } //#23519
                            if (($_.i + 2) < $_.msglen) { //#23522
                                var _Dr = $get($_.Xvals, $get($_.msg, $_.i + 2)) !== undefined; //#23521
                                if (!_Dr) { //#23521
                                    break; //#23521
                                } //#23521
                            } //#23521
                        } //#23521
                    } else { //#23529
                        $_.lookup(); //#23525
                        if ($k[--$j] != $_.mode) { //#23530
                            $k[$j++] = $geti($_.ctxvals, 0, $_.p); //#23526
                            $_.CTXvalstocws(); //#23526
                            $_.addtocws(); //#23526
                            $k[$j++] = $a([$_.unlcw]); //#23527
                            $_.addtocws(); //#23527
                            $_.mode = $_.A; //#23528
                            break; //#23529
                        } //#23529
                    } //#23529
                    if (($_.msglen - $_.i) <= 3) { //#23581
                        $_.remcws = $get($_.numremcws, $_.j + ((~~($_.p / 3)) * 2)); //#23533
                        $k[$j++] = Infinity; //#23534
                        var _EA = $geti($_.msg, $_.i, $_.msglen - $_.i); //#23535
                        for (var _EB = 0, _EC = _EA.length; _EB < _EC; _EB++) { //#23541
                            var _ED = $get(_EA, _EB); //#23541
                            var _EH = $get($get($_.encvals, $_.mode), _ED) !== undefined; //#23536
                            $k[$j++] = _ED; //#23540
                            if (_EH) { //#23539
                                $aload($get($get($_.encvals, $_.mode), $k[--$j])); //#23537
                            } else { //#23539
                                $j--; //#23539
                                $k[$j++] = -1; //#23539
                                $k[$j++] = -1; //#23539
                                $k[$j++] = -1; //#23539
                                $k[$j++] = -1; //#23539
                            } //#23539
                        } //#23539
                        $_.remvals = $a(); //#23539
                        if (($_.remcws == 2) && ($_.remvals.length == 3)) { //#23552
                            $k[$j++] = Infinity; //#23545
                            $aload($geti($_.ctxvals, 0, $_.p)); //#23546
                            $aload($_.remvals); //#23547
                            var _EU = $a(); //#23547
                            $k[$j++] = _EU; //#23548
                            $_.CTXvalstocws(); //#23548
                            $_.addtocws(); //#23548
                            $_.mode = $_.A; //#23549
                            $_.i = $_.msglen; //#23550
                            break; //#23551
                        } //#23551
                        if ((($_.remcws == 2) && ($_.remvals.length == 2)) && ($_.mode != $_.X)) { //#23563
                            $k[$j++] = Infinity; //#23555
                            $aload($geti($_.ctxvals, 0, $_.p)); //#23556
                            $aload($_.remvals); //#23557
                            $aload($get($get($_.encvals, $_.mode), $_.sft1)); //#23558
                            var _Ek = $a(); //#23558
                            $k[$j++] = _Ek; //#23559
                            $_.CTXvalstocws(); //#23559
                            $_.addtocws(); //#23559
                            $_.mode = $_.A; //#23560
                            $_.i = $_.msglen; //#23561
                            break; //#23562
                        } //#23562
                        if (($_.remcws == 2) && ($_.remvals.length == 1)) { //#23572
                            $k[$j++] = $geti($_.ctxvals, 0, $_.p); //#23566
                            $_.CTXvalstocws(); //#23566
                            $_.addtocws(); //#23566
                            $k[$j++] = $a([$_.unlcw]); //#23567
                            $_.addtocws(); //#23567
                            $k[$j++] = $get($_.Avals, $get($_.msg, $_.i)); //#23568
                            $_.addtocws(); //#23568
                            $_.mode = $_.A; //#23569
                            $_.i = $_.msglen; //#23570
                            break; //#23571
                        } //#23571
                        if (($_.remcws == 1) && ($_.remvals.length == 1)) { //#23580
                            $k[$j++] = $geti($_.ctxvals, 0, $_.p); //#23575
                            $_.CTXvalstocws(); //#23575
                            $_.addtocws(); //#23575
                            $k[$j++] = $get($_.Avals, $get($_.msg, $_.i)); //#23576
                            $_.addtocws(); //#23576
                            $_.mode = $_.A; //#23577
                            $_.i = $_.msglen; //#23578
                            break; //#23579
                        } //#23579
                    } //#23579
                } //#23579
                var _FJ = $get($get($_.encvals, $_.mode), $get($_.msg, $_.i)); //#23583
                $puti($_.ctxvals, $_.p, _FJ); //#23584
                $_.p = _FJ.length + $_.p; //#23585
                $_.i = $_.i + 1; //#23586
            } //#23586
            if ($_.mode != $_.A) { //#23611
                for (;;) { //#23595
                    if (($_.p % 3) == 0) { //#23592
                        break; //#23592
                    } //#23592
                    $_.i = $_.i - 1; //#23593
                    $_.p = $_.p - $get($get($_.encvals, $_.mode), $get($_.msg, $_.i)).length; //#23594
                } //#23594
                $k[$j++] = Infinity; //#23596
                $aload($geti($_.ctxvals, 0, $_.p)); //#23597
                var _Fd = $a(); //#23597
                $k[$j++] = _Fd; //#23598
                $_.CTXvalstocws(); //#23598
                $_.addtocws(); //#23598
                $k[$j++] = $a([$_.unlcw]); //#23599
                $_.addtocws(); //#23599
                $_.mode = $_.A; //#23600
                if ($_.i != $_.msglen) { //#23610
                    if ($get($_.numD, $_.i) >= 2) { //#23608
                        var _Fm = $s(2); //#23604
                        $put(_Fm, 0, $get($_.msg, $_.i)); //#23604
                        $put(_Fm, 1, $get($_.msg, $_.i + 1)); //#23604
                        $k[$j++] = $get($_.Avals, _Fm); //#23604
                        $_.addtocws(); //#23604
                        $_.i = $_.i + 2; //#23605
                    } else { //#23608
                        $k[$j++] = $get($_.Avals, $get($_.msg, $_.i)); //#23607
                        $_.addtocws(); //#23607
                        $_.i = $_.i + 1; //#23608
                    } //#23608
                } //#23608
            } //#23608
        }; //#23608
        $_.encD = function() {
            for (;;) { //#23672
                if ($get($_.numD, $_.i) < 3) { //#23662
                    $_.Drem = (8 - ($_.Dbits.length % 8)) % 8; //#23621
                    $_.remcws = $get($_.numremcws, $_.j + (~~($_.Dbits.length / 8))); //#23622
                    if (((($f($get($_.numremcws, ($_.j + (~~($_.Dbits.length / 8))) - 1) - 1) == 0) && ($_.Drem == 0)) || (($_.remcws == 1) && ($_.Drem != 0))) && ($_.i == $_.msglen)) { //#23631
                        if (($_.Drem == 4) || ($_.Drem == 6)) { //#23628
                            $k[$j++] = Infinity; //#23628
                            $aload($_.Dbits); //#23628
                            $k[$j++] = 1; //#23628
                            $k[$j++] = 1; //#23628
                            $k[$j++] = 1; //#23628
                            $k[$j++] = 1; //#23628
                            $_.Dbits = $a(); //#23628
                        } //#23628
                        if (($_.Drem == 2) || ($_.Drem == 6)) { //#23629
                            $k[$j++] = Infinity; //#23629
                            $aload($_.Dbits); //#23629
                            $k[$j++] = 0; //#23629
                            $k[$j++] = 1; //#23629
                            $_.Dbits = $a(); //#23629
                        } //#23629
                        break; //#23630
                    } //#23630
                    if ((((($_.i == ($_.msglen - 1)) && ($get($_.numD, $_.i) == 1)) || (($_.i == ($_.msglen - 2)) && ($get($_.numD, $_.i) == 2))) && ($_.remcws == 1)) && ($_.Drem == 0)) { //#23636
                        break; //#23636
                    } //#23636
                    if (!(((($_.i == ($_.msglen - 1)) && ($get($_.numD, $_.i) == 1)) && ($_.remcws == 1)) && (($_.Drem == 4) || ($_.Drem == 6)))) { //#23643
                        $k[$j++] = Infinity; //#23641
                        $aload($_.Dbits); //#23641
                        $k[$j++] = 1; //#23641
                        $k[$j++] = 1; //#23641
                        $k[$j++] = 1; //#23641
                        $k[$j++] = 1; //#23641
                        $k[$j++] = 1; //#23641
                        $k[$j++] = 1; //#23641
                        $_.Dbits = $a(); //#23641
                        $_.Drem = (8 - ($_.Dbits.length % 8)) % 8; //#23642
                    } //#23642
                    if (($_.Drem == 4) || ($_.Drem == 6)) { //#23654
                        if ($get($_.numD, $_.i) >= 1) { //#23651
                            $k[$j++] = Infinity; //#23648
                            $aload($_.Dbits); //#23648
                            $k[$j++] = $f($f($get($_.msg, $_.i) - 48) + 1); //#23648
                            $k[$j++] = 4; //#23648
                            $_.tobin(); //#23648
                            $aload($k[--$j]); //#23648
                            $_.Dbits = $a(); //#23648
                            $_.i = $_.i + 1; //#23649
                        } else { //#23651
                            $k[$j++] = Infinity; //#23651
                            $aload($_.Dbits); //#23651
                            $k[$j++] = 1; //#23651
                            $k[$j++] = 1; //#23651
                            $k[$j++] = 1; //#23651
                            $k[$j++] = 1; //#23651
                            $_.Dbits = $a(); //#23651
                        } //#23651
                        $_.Drem = $_.Drem - 4; //#23653
                    } //#23653
                    if ($_.Drem == 2) { //#23658
                        $k[$j++] = Infinity; //#23656
                        $aload($_.Dbits); //#23656
                        $k[$j++] = 0; //#23656
                        $k[$j++] = 1; //#23656
                        $_.Dbits = $a(); //#23656
                        $_.Drem = 0; //#23657
                    } //#23657
                    break; //#23660
                } //#23660
                $k[$j++] = Infinity; //#23665
                $aload($_.Dbits); //#23666
                var _H9 = $geti($_.msg, $_.i, 3); //#23667
                $k[$j++] = 0; //#23667
                for (var _HA = 0, _HB = _H9.length; _HA < _HB; _HA++) { //#23667
                    var _HD = $k[--$j]; //#23667
                    $k[$j++] = ($f(_HD + $f($get(_H9, _HA) - 48))) * 10; //#23667
                } //#23667
                var _HE = $k[--$j]; //#23667
                $k[$j++] = (~~(_HE / 10)) + 1; //#23668
                $k[$j++] = 10; //#23668
                $_.tobin(); //#23668
                $aload($k[--$j]); //#23668
                $_.Dbits = $a(); //#23668
                $_.i = $_.i + 3; //#23670
            } //#23670
            $k[$j++] = Infinity; //#23674
            for (var _HK = 0, _HJ = $_.Dbits.length - 1; _HK <= _HJ; _HK += 8) { //#23677
                var _HM = $geti($_.Dbits, _HK, 8); //#23676
                $k[$j++] = 0; //#23676
                for (var _HN = 0, _HO = _HM.length; _HN < _HO; _HN++) { //#23676
                    var _HQ = $k[--$j]; //#23676
                    $k[$j++] = $f(_HQ + $get(_HM, _HN)) * 2; //#23676
                } //#23676
                var _HR = $k[--$j]; //#23676
                $k[$j++] = ~~(_HR / 2); //#23676
            } //#23676
            $astore($a($counttomark())); //#23678
            var _HU = $k[--$j]; //#23678
            var _HV = $k[--$j]; //#23678
            $k[$j++] = _HU; //#23678
            $k[$j++] = _HV; //#23678
            $j--; //#23678
            $_.addtocws(); //#23678
            $_.mode = $_.A; //#23679
        }; //#23679
        $_.encB = function() {
            $_.p = 0; //#23684
            $_.bvals = $a(1480); //#23684
            for (;;) { //#23691
                if ($_.i == $_.msglen) { //#23685
                    break; //#23685
                } //#23685
                if ($get($_.msg, $_.i) < 0) { //#23686
                    break; //#23686
                } //#23686
                $_.lookup(); //#23687
                if ($k[--$j] != $_.mode) { //#23687
                    break; //#23687
                } //#23687
                $put($_.bvals, $_.p, $get($_.msg, $_.i)); //#23688
                $_.p = $_.p + 1; //#23689
                $_.i = $_.i + 1; //#23690
            } //#23690
            $_.remcws = $f($get($_.numremcws, $_.j + $_.p) - 1); //#23692
            $k[$j++] = Infinity; //#23693
            if (($_.remcws == 0) && ($_.i == $_.msglen)) { //#23697
                $k[$j++] = 0; //#23695
            } else { //#23697
                if ($_.p < 250) { //#23697
                    $k[$j++] = $_.p; //#23697
                } else { //#23697
                    $k[$j++] = (~~($_.p / 250)) + 249; //#23697
                    $k[$j++] = $_.p % 250; //#23697
                } //#23697
            } //#23697
            $aload($geti($_.bvals, 0, $_.p)); //#23699
            $_.bvals = $a(); //#23699
            $k[$j++] = $_.bvals; //#23701
            $_.addtocws(); //#23701
            $_.mode = $_.A; //#23702
        }; //#23702
        $_.cws = $a(1480); //#23706
        $_.mode = $_.A; //#23707
        $_.i = 0; //#23707
        $_.j = 0; //#23707
        for (;;) { //#23710
            if ($_.i >= $_.msglen) { //#23708
                break; //#23708
            } //#23708
            if ($_[$get($a(['encA', 'encCTX', 'encCTX', 'encCTX', 'encD', 'encB']), $_.mode)]() === true) {
                break;
            } //#23709
        } //#23709
        $_.cws = $geti($_.cws, 0, $_.j); //#23711
    } //#23711
    var _IE = $_.metrics; //#23716
    for (var _IF = 0, _IG = _IE.length; _IF < _IG; _IF++) { //#23734
        $_.m = $get(_IE, _IF); //#23717
        $_.vers = $get($_.m, 0); //#23718
        $_.rows = $get($_.m, 1); //#23719
        $_.cols = $get($_.m, 2); //#23720
        $_.dcol = $get($_.m, 3); //#23721
        $_.dcws = $get($_.m, 4); //#23722
        $_.rscw = $get($_.m, 5); //#23723
        $_.rsbl = $get($_.m, 6); //#23724
        $_.riso = $get($_.m, 7); //#23725
        $_.risi = $get($_.m, 8); //#23726
        $_.risl = $get($_.m, 9); //#23727
        $_.dcpb = ~~($_.dcws / $_.rsbl); //#23728
        $_.ecpb = ~~($_.rscw / $_.rsbl); //#23729
        $_.okay = true; //#23730
        if ($ne($_.version, "unset") && $ne($_.version, $_.vers)) { //#23731
            $_.okay = false; //#23731
        } //#23731
        if ($_.cws.length > $_.dcws) { //#23732
            $_.okay = false; //#23732
        } //#23732
        if ($_.okay) { //#23733
            break; //#23733
        } //#23733
    } //#23733
    if (!$_.okay) { //#23738
        $k[$j++] = 'bwipp.codeoneNoValidSymbol#23737'; //#23737
        $k[$j++] = "Maximum length exceeded"; //#23737
        bwipp_raiseerror(); //#23737
    } //#23737
    if (!$_.stype) { //#23744
        $k[$j++] = Infinity; //#23742
        $aload($_.cws); //#23742
        for (var _Ir = 0, _Is = $f($_.dcws - $_.cws.length); _Ir < _Is; _Ir++) { //#23742
            $k[$j++] = 129; //#23742
        } //#23742
        $_.cws = $a(); //#23742
    } else { //#23744
        $k[$j++] = Infinity; //#23744
        for (var _Iw = 0, _Ix = $f($_.dcws - $_.cws.length); _Iw < _Ix; _Iw++) { //#23744
            $k[$j++] = 0; //#23744
        } //#23744
        $aload($_.cws); //#23744
        $_.cws = $a(); //#23744
    } //#23744
    var _J1 = $get($_.options, 'debugcws') !== undefined; //#23747
    if (_J1) { //#23747
        $k[$j++] = 'bwipp.debugcws#23747'; //#23747
        $k[$j++] = $_.cws; //#23747
        bwipp_raiseerror(); //#23747
    } //#23747
    $_.cwbs = $a($_.rsbl); //#23750
    $_.ecbs = $a($_.rsbl); //#23751
    for (var _J9 = 0, _J8 = $f($_.rsbl - 1); _J9 <= _J8; _J9 += 1) { //#23760
        $_.i = _J9; //#23753
        $_.cwb = $a($_.dcpb); //#23754
        for (var _JE = 0, _JD = $_.dcpb - 1; _JE <= _JD; _JE += 1) { //#23758
            $_.j = _JE; //#23756
            $put($_.cwb, $_.j, $get($_.cws, $f(($_.j * $_.rsbl) + $_.i))); //#23757
        } //#23757
        $put($_.cwbs, $_.i, $_.cwb); //#23759
    } //#23759
    var _JQ = $_.stype ? 32 : 256; //#23763
    $_.gf = _JQ; //#23763
    $_['gf-1'] = $_.gf - 1; //#23764
    var _JT = $_.stype ? 37 : 301; //#23765
    $_.pm = _JT; //#23765
    $k[$j++] = Infinity; //#23766
    $k[$j++] = 1; //#23766
    for (var _JV = 0, _JW = $_["gf-1"]; _JV < _JW; _JV++) { //#23766
        var _JX = $k[--$j]; //#23766
        var _JY = _JX * 2; //#23766
        $k[$j++] = _JX; //#23766
        $k[$j++] = _JY; //#23766
        if (_JY >= $_.gf) { //#23766
            var _Jb = $k[--$j]; //#23766
            $k[$j++] = _Jb ^ $_.pm; //#23766
        } //#23766
    } //#23766
    $_.rsalog = $a(); //#23766
    $_.rslog = $a($_.gf); //#23767
    for (var _Jh = 1, _Jg = $_["gf-1"]; _Jh <= _Jg; _Jh += 1) { //#23768
        $put($_.rslog, $get($_.rsalog, _Jh), _Jh); //#23768
    } //#23768
    $_.rsprod = function() {
        var _Jl = $k[--$j]; //#23770
        var _Jm = $k[--$j]; //#23770
        $k[$j++] = _Jm; //#23774
        $k[$j++] = _Jl; //#23774
        if ((_Jl != 0) && (_Jm != 0)) { //#23773
            var _Jp = $get($_.rslog, $k[--$j]); //#23771
            var _Jv = $get($_.rsalog, $f(_Jp + $get($_.rslog, $k[--$j])) % $_["gf-1"]); //#23771
            $k[$j++] = _Jv; //#23771
        } else { //#23773
            $j -= 2; //#23773
            $k[$j++] = 0; //#23773
        } //#23773
    }; //#23773
    $k[$j++] = Infinity; //#23778
    $k[$j++] = 1; //#23778
    for (var _Jx = 0, _Jy = $_.ecpb; _Jx < _Jy; _Jx++) { //#23778
        $k[$j++] = 0; //#23778
    } //#23778
    $_.coeffs = $a(); //#23778
    for (var _K2 = 0, _K1 = $_.ecpb - 1; _K2 <= _K1; _K2 += 1) { //#23787
        $_.i = _K2; //#23780
        $put($_.coeffs, $_.i + 1, $get($_.coeffs, $_.i)); //#23781
        for (var _K9 = $_.i; _K9 >= 1; _K9 -= 1) { //#23785
            $_.j = _K9; //#23783
            $k[$j++] = $_.coeffs; //#23784
            $k[$j++] = $_.j; //#23784
            $k[$j++] = $get($_.coeffs, $_.j - 1); //#23784
            $k[$j++] = $get($_.coeffs, $_.j); //#23784
            $k[$j++] = $get($_.rsalog, $_.i); //#23784
            $_.rsprod(); //#23784
            var _KL = $k[--$j]; //#23784
            var _KM = $k[--$j]; //#23784
            var _KN = $k[--$j]; //#23784
            $put($k[--$j], _KN, $xo(_KM, _KL)); //#23784
        } //#23784
        $k[$j++] = $_.coeffs; //#23786
        $k[$j++] = 0; //#23786
        $k[$j++] = $get($_.coeffs, 0); //#23786
        $k[$j++] = $get($_.rsalog, $_.i); //#23786
        $_.rsprod(); //#23786
        var _KV = $k[--$j]; //#23786
        var _KW = $k[--$j]; //#23786
        $put($k[--$j], _KW, _KV); //#23786
    } //#23786
    $_.coeffs = $geti($_.coeffs, 0, $_.coeffs.length - 1); //#23788
    for (var _Kd = 0, _Kc = $_.cwbs.length - 1; _Kd <= _Kc; _Kd += 1) { //#23803
        $_.i = _Kd; //#23792
        $k[$j++] = Infinity; //#23793
        $aload($get($_.cwbs, $_.i)); //#23793
        for (var _Ki = 0, _Kj = $_.ecpb; _Ki < _Kj; _Ki++) { //#23793
            $k[$j++] = 0; //#23793
        } //#23793
        $_.rscws = $a(); //#23793
        for (var _Kn = 0, _Km = $_.dcpb - 1; _Kn <= _Km; _Kn += 1) { //#23801
            $_.m = _Kn; //#23795
            $_.k = $get($_.rscws, $_.m); //#23796
            for (var _Kt = 0, _Ks = $_.ecpb - 1; _Kt <= _Ks; _Kt += 1) { //#23800
                $_.j = _Kt; //#23798
                $k[$j++] = $_.rscws; //#23799
                $k[$j++] = ($_.m + $_.j) + 1; //#23799
                $k[$j++] = $get($_.coeffs, ($_.ecpb - $_.j) - 1); //#23799
                $k[$j++] = $_.k; //#23799
                $_.rsprod(); //#23799
                var _L6 = $k[--$j]; //#23799
                var _L7 = $k[--$j]; //#23799
                $put($k[--$j], _L7, $xo(_L6, $get($_.rscws, ($_.m + $_.j) + 1))); //#23799
            } //#23799
        } //#23799
        $put($_.ecbs, $_.i, $geti($_.rscws, $_.dcpb, $_.ecpb)); //#23802
    } //#23802
    $k[$j++] = Infinity; //#23806
    $aload($_.cws); //#23806
    for (var _LH = 0, _LI = $_.rscw; _LH < _LI; _LH++) { //#23806
        $k[$j++] = 0; //#23806
    } //#23806
    $_.cws = $a(); //#23806
    for (var _LM = 0, _LL = $f($_.rscw - 1); _LM <= _LL; _LM += 1) { //#23810
        $_.i = _LM; //#23808
        $put($_.cws, $f($_.dcws + $_.i), $get($get($_.ecbs, $_.i % $_.rsbl), ~~($_.i / $_.rsbl))); //#23809
    } //#23809
    var _La = $_.stype ? 5 : 8; //#23813
    $_.mmat = $a($f($_.dcws + $_.rscw) * _La); //#23813
    $_.r = 0; //#23814
    $_.c = 0; //#23814
    var _Ld = $_.stype ? 2 : 1; //#23815
    for (var _Lg = 0, _Lh = _Ld, _Lf = $_.cws.length - 1; _Lh < 0 ? _Lg >= _Lf : _Lg <= _Lf; _Lg += _Lh) { //#23836
        $_.i = _Lg; //#23816
        if (!$_.stype) { //#23830
            var _Lk = $strcpy($s(8), "00000000"); //#23818
            var _Lp = $cvrs($s(8), $get($_.cws, $_.i), 2); //#23818
            $puti(_Lk, 8 - _Lp.length, _Lp); //#23819
            $k[$j++] = _Lk; //#23819
            $k[$j++] = Infinity; //#23819
            var _Lq = $k[--$j]; //#23819
            var _Lr = $k[--$j]; //#23819
            $k[$j++] = _Lq; //#23819
            $forall(_Lr, function() { //#23819
                var _Ls = $k[--$j]; //#23819
                $k[$j++] = $f(_Ls - 48); //#23819
            }); //#23819
            var _Lt = $a(); //#23819
            $_.top = $geti(_Lt, 0, 4); //#23820
            $_.bot = $geti(_Lt, 4, 4); //#23821
        } else { //#23830
            var _Lx = $strcpy($s(5), "00000"); //#23823
            var _M2 = $cvrs($s(5), $get($_.cws, $_.i), 2); //#23823
            $puti(_Lx, 5 - _M2.length, _M2); //#23824
            $k[$j++] = _Lx; //#23824
            $k[$j++] = Infinity; //#23824
            var _M3 = $k[--$j]; //#23824
            var _M4 = $k[--$j]; //#23824
            $k[$j++] = _M3; //#23824
            $forall(_M4, function() { //#23824
                var _M5 = $k[--$j]; //#23824
                $k[$j++] = $f(_M5 - 48); //#23824
            }); //#23824
            $_.c1 = $a(); //#23825
            var _M8 = $strcpy($s(5), "00000"); //#23826
            var _MD = $cvrs($s(5), $get($_.cws, $_.i + 1), 2); //#23826
            $puti(_M8, 5 - _MD.length, _MD); //#23827
            $k[$j++] = _M8; //#23827
            $k[$j++] = Infinity; //#23827
            var _ME = $k[--$j]; //#23827
            var _MF = $k[--$j]; //#23827
            $k[$j++] = _ME; //#23827
            $forall(_MF, function() { //#23827
                var _MG = $k[--$j]; //#23827
                $k[$j++] = $f(_MG - 48); //#23827
            }); //#23827
            $_.c2 = $a(); //#23828
            $k[$j++] = Infinity; //#23829
            $aload($geti($_.c1, 0, 3)); //#23829
            $aload($geti($_.c2, 0, 2)); //#23829
            $_.top = $a(); //#23829
            $k[$j++] = Infinity; //#23830
            $aload($geti($_.c1, 3, 2)); //#23830
            $aload($geti($_.c2, 2, 3)); //#23830
            $_.bot = $a(); //#23830
        } //#23830
        $puti($_.mmat, $f(($_.r * $_.dcol) + $_.c), $_.top); //#23832
        $puti($_.mmat, $f((($_.r + 1) * $_.dcol) + $_.c), $_.bot); //#23833
        $_.c = $_.c + $_.top.length; //#23834
        if ($_.c == $_.dcol) { //#23835
            $_.c = 0; //#23835
            $_.r = $_.r + 2; //#23835
        } //#23835
    } //#23835
    $_.mmv = function() {
        var _Mi = $k[--$j]; //#23839
        var _Mj = $k[--$j]; //#23839
        $k[$j++] = $f(_Mj + (_Mi * $_.cols)); //#23839
    }; //#23839
    $k[$j++] = Infinity; //#23840
    for (var _Mm = 0, _Mn = $_.rows * $_.cols; _Mm < _Mn; _Mm++) { //#23840
        $k[$j++] = -1; //#23840
    } //#23840
    $_.pixs = $a(); //#23840
    var _NJ = $a([function() {
        for (var _Mq = 0, _Mr = $_.cols; _Mq < _Mr; _Mq++) { //#23844
            $k[$j++] = 0; //#23844
        } //#23844
    }, function() {
        for (var _Mt = 0, _Mu = $_.cols; _Mt < _Mu; _Mt++) { //#23845
            $k[$j++] = 1; //#23845
        } //#23845
    }, function() {
        $k[$j++] = 0; //#23846
        for (var _Mw = 0, _Mx = $f($_.cols - 2); _Mw < _Mx; _Mw++) { //#23846
            $k[$j++] = 1; //#23846
        } //#23846
        $k[$j++] = 0; //#23846
    }, function() {
        $k[$j++] = 0; //#23847
        $k[$j++] = 1; //#23847
        for (var _Mz = 0, _N0 = $f($_.cols - 4); _Mz < _N0; _Mz++) { //#23847
            $k[$j++] = 0; //#23847
        } //#23847
        $k[$j++] = 1; //#23847
        $k[$j++] = 0; //#23847
    }, function() {
        for (var _N2 = 0, _N3 = ~~($f($_.cols - 1) / 2); _N2 < _N3; _N2++) { //#23848
            $k[$j++] = -1; //#23848
        } //#23848
        $k[$j++] = 1; //#23848
        for (var _N5 = 0, _N6 = ~~($f($_.cols - 1) / 2); _N5 < _N6; _N5++) { //#23848
            $k[$j++] = -1; //#23848
        } //#23848
    }, function() {
        for (var _N8 = 0, _N9 = ~~($f($_.cols - 1) / 2); _N8 < _N9; _N8++) { //#23849
            $k[$j++] = -1; //#23849
        } //#23849
        $k[$j++] = 0; //#23849
        for (var _NB = 0, _NC = ~~($f($_.cols - 1) / 2); _NB < _NC; _NB++) { //#23849
            $k[$j++] = -1; //#23849
        } //#23849
    }, function() {
        $k[$j++] = 1; //#23850
        for (var _NE = 0, _NF = $f($_.cols - 2); _NE < _NF; _NE++) { //#23850
            $k[$j++] = 0; //#23850
        } //#23850
        $k[$j++] = 1; //#23850
    }, function() {
        $k[$j++] = 1; //#23851
        $k[$j++] = 0; //#23851
        for (var _NH = 0, _NI = $f($_.cols - 4); _NH < _NI; _NH++) { //#23851
            $k[$j++] = 1; //#23851
        } //#23851
        $k[$j++] = 0; //#23851
        $k[$j++] = 1; //#23851
    }]); //#23851
    $_.artifact = _NJ; //#23852
    if (!bwipp_codeone.__23866__) { //#23866
        $_ = Object.create($_); //#23866
        var _NK = new Map([
            ["A", "121343"],
            ["B", "12134343"],
            ["C", "12121343"],
            ["D", "1213434343"],
            ["E", "1212134343"],
            ["F", "1212121343"],
            ["G", "121213434343"],
            ["H", "121212134343"],
            ["S", "56661278"],
            ["T", "5666666666127878"]
        ]); //#23864
        $_.cpatmap = _NK; //#23865
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_codeone.$ctx[id] = $_[id]); //#23865
        bwipp_codeone.__23866__ = 1; //#23865
        $_ = Object.getPrototypeOf($_); //#23865
    } //#23865
    $_.cpat = $get($_.cpatmap, $geti($_.vers, 0, 1)); //#23867
    $k[$j++] = $_.pixs; //#23868
    $k[$j++] = 0; //#23868
    $k[$j++] = ~~($f($_.rows - $_.cpat.length) / 2); //#23868
    $_.mmv(); //#23868
    $k[$j++] = Infinity; //#23869
    $forall($_.cpat, function() { //#23869
        if ($get($_.artifact, $f($k[--$j] - 49))() === true) {
            return true;
        } //#23869
    }); //#23869
    var _NX = $a(); //#23869
    var _NY = $k[--$j]; //#23869
    $puti($k[--$j], _NY, _NX); //#23869
    for (var _Nc = 0, _Nb = $f($_.risl - 1); _Nc <= _Nb; _Nc += 1) { //#23884
        $_.i = _Nc; //#23873
        for (var _Nh = $_.riso, _Ni = $_.risi, _Ng = $f($_.cols - 1); _Ni < 0 ? _Nh >= _Ng : _Nh <= _Ng; _Nh += _Ni) { //#23883
            $_.j = _Nh; //#23875
            var _Nk = (($_.i % 12) == 0) ? 1 : 0; //#23876
            var _Nl = $a([1, _Nk]); //#23876
            $k[$j++] = _Nl; //#23877
            $k[$j++] = _Nl; //#23877
            $k[$j++] = $_.pixs; //#23877
            $k[$j++] = $_.j; //#23877
            $k[$j++] = $_.i; //#23877
            $_.mmv(); //#23877
            var _Np = $k[--$j]; //#23878
            var _Nq = $k[--$j]; //#23878
            $puti(_Nq, _Np, $k[--$j]); //#23878
            if ($_.i != $f($_.risl - 1)) { //#23882
                $k[$j++] = $_.pixs; //#23880
                $k[$j++] = $f($f($_.cols - $_.j) - 2); //#23880
                $k[$j++] = $f($f($_.rows - $_.i) - 1); //#23880
                $_.mmv(); //#23880
                var _Nz = $k[--$j]; //#23881
                var _O0 = $k[--$j]; //#23881
                $puti(_O0, _Nz, $k[--$j]); //#23881
            } else { //#23882
                $j--; //#23882
            } //#23882
        } //#23882
    } //#23882
    if (!bwipp_codeone.__23904__) { //#23904
        $_ = Object.create($_); //#23904
        var _Of = new Map([
            ["A", $a([$a([12, 5])])],
            ["B", $a([$a([16, 7])])],
            ["C", $a([$a([26, 12])])],
            ["D", $a([])],
            ["E", $a([$a([26, 23])])],
            ["F", $a([$a([26, 32]), $a([70, 32]), $a([26, 34]), $a([70, 34])])],
            ["G", $a([$a([27, 48]), $a([69, 48])])],
            ["H", $a([$a([26, 70]), $a([66, 70]), $a([106, 70]), $a([26, 72]), $a([66, 72]), $a([106, 72])])],
            ["S-10", $a([])],
            ["S-20", $a([$a([10, 4])])],
            ["S-30", $a([$a([15, 4]), $a([15, 6])])],
            ["T-16", $a([$a([8, 10])])],
            ["T-32", $a([$a([16, 10]), $a([16, 12])])],
            ["T-48", $a([$a([24, 10]), $a([24, 12]), $a([24, 14])])]
        ]); //#23902
        $_.blackdotmap = _Of; //#23903
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_codeone.$ctx[id] = $_[id]); //#23903
        bwipp_codeone.__23904__ = 1; //#23903
        $_ = Object.getPrototypeOf($_); //#23903
    } //#23903
    $forall($get($_.blackdotmap, $_.vers), function() { //#23905
        var _Ol = $k[--$j]; //#23905
        $k[$j++] = $_.pixs; //#23905
        $aload(_Ol); //#23905
        $_.mmv(); //#23905
        var _Om = $k[--$j]; //#23905
        $put($k[--$j], _Om, 1); //#23905
    }); //#23905
    $_.j = 0; //#23908
    for (var _Oq = 0, _Op = $_.pixs.length - 1; _Oq <= _Op; _Oq += 1) { //#23915
        $_.i = _Oq; //#23910
        if ($get($_.pixs, $_.i) == -1) { //#23914
            $put($_.pixs, $_.i, $get($_.mmat, $_.j)); //#23912
            $_.j = $_.j + 1; //#23913
        } //#23913
    } //#23913
    $k[$j++] = Infinity; //#23918
    $k[$j++] = 'ren'; //#23930
    $k[$j++] = bwipp_renmatrix; //#23930
    $k[$j++] = 'pixs'; //#23930
    $k[$j++] = $_.pixs; //#23930
    $k[$j++] = 'pixx'; //#23930
    $k[$j++] = $_.cols; //#23930
    $k[$j++] = 'pixy'; //#23930
    $k[$j++] = $_.rows; //#23930
    $k[$j++] = 'height'; //#23930
    $k[$j++] = ($_.rows / 72) * 2; //#23930
    $k[$j++] = 'width'; //#23930
    $k[$j++] = ($_.cols / 72) * 2; //#23930
    if ($_.stype || $_.ttype) { //#23930
        $k[$j++] = 'borderleft'; //#23929
        $k[$j++] = 1; //#23929
        $k[$j++] = 'borderright'; //#23929
        $k[$j++] = 1; //#23929
        $k[$j++] = 'bordertop'; //#23929
        $k[$j++] = 0; //#23929
        $k[$j++] = 'borderbottom'; //#23929
        $k[$j++] = 1; //#23929
    } //#23929
    $k[$j++] = 'opt'; //#23931
    $k[$j++] = $_.options; //#23931
    var _P8 = $d(); //#23931
    $k[$j++] = _P8; //#23934
    if (!$_.dontdraw) { //#23934
        bwipp_renmatrix(); //#23934
    } //#23934
    $_ = Object.getPrototypeOf($_); //#23936
    $_ = Object.getPrototypeOf($_); //#23938
} //bwipp_codeone
function bwipp_hanxin() {
    $_ = Object.create($_); //#23969
    $_.dontdraw = false; //#23972
    $_.version = "unset"; //#23973
    $_.eclevel = "L2"; //#23974
    $_.parse = false; //#23975
    $_.parsefnc = false; //#23976
    $_.mask = -1; //#23977
    $k[$j++] = $_; //#23979
    bwipp_processoptions(); //#23979
    $_.options = $k[--$j]; //#23979
    $_.barcode = $k[--$j]; //#23980
    if ($eq($_.barcode, "")) { //#23984
        $k[$j++] = 'bwipp.hanxinEmptyData#23983'; //#23983
        $k[$j++] = "The data must not be empty"; //#23983
        bwipp_raiseerror(); //#23983
    } //#23983
    if ($ne($_.version, "unset")) { //#23996
        var _5 = $_.version.length; //#23987
        var _6 = (_5 >= 1) && (_5 <= 2); //#23987
        $k[$j++] = _6; //#23992
        if (_6) { //#23992
            $j--; //#23988
            var _7 = $_.version; //#23989
            $k[$j++] = true; //#23989
            for (var _8 = 0, _9 = _7.length; _8 < _9; _8++) { //#23989
                var _A = $get(_7, _8); //#23989
                if ((_A < 48) || (_A > 57)) { //#23989
                    $j--; //#23989
                    $k[$j++] = false; //#23989
                } //#23989
            } //#23989
            var _B = $k[--$j]; //#23989
            $k[$j++] = _B; //#23991
            if (_B) { //#23991
                $j--; //#23990
                var _D = $cvi($_.version); //#23990
                $k[$j++] = (_D >= 1) && (_D <= 84); //#23990
            } //#23990
        } //#23990
        if ($nt($k[--$j])) { //#23995
            $k[$j++] = 'bwipp.hanxinInvalidVersion#23994'; //#23994
            $k[$j++] = "Valid versions are 1 to 84"; //#23994
            bwipp_raiseerror(); //#23994
        } //#23994
    } //#23994
    var _G = $_.eclevel.length == 2; //#23998
    $k[$j++] = _G; //#24002
    if (_G) { //#24002
        $j--; //#23999
        $k[$j++] = $geti($_.eclevel, 0, 1); //#24001
        if ($eq("L", "L")) { //#24001
            $j--; //#24000
            var _L = $get($_.eclevel, 1) - 48; //#24000
            $k[$j++] = (_L >= 1) && (_L <= 4); //#24000
        } //#24000
    } //#24000
    if ($nt($k[--$j])) { //#24005
        $k[$j++] = 'bwipp.hanxinInvalidErrorCorrectionLevel#24004'; //#24004
        $k[$j++] = "Valid error correction levels are L1 to L4"; //#24004
        bwipp_raiseerror(); //#24004
    } //#24004
    if ($_.mask != -1) { //#24011
        if (($_.mask < 1) || ($_.mask > 4)) { //#24010
            $k[$j++] = 'bwipp.hanxinInvalidErrorCorrectionLevel#24009'; //#24009
            $k[$j++] = "The valid masks are 1 to 4"; //#24009
            bwipp_raiseerror(); //#24009
        } //#24009
    } //#24009
    bwipp_loadctx(bwipp_hanxin) //#24013
    var _S = new Map([
        ["parse", $_.parse],
        ["parsefnc", $_.parsefnc]
    ]); //#24018
    $_.fncvals = _S; //#24020
    $k[$j++] = 'msg'; //#24021
    $k[$j++] = $_.barcode; //#24021
    $k[$j++] = $_.fncvals; //#24021
    bwipp_parseinput(); //#24021
    var _V = $k[--$j]; //#24021
    $_[$k[--$j]] = _V; //#24021
    $_.msglen = $_.msg.length; //#24022
    $_.tobin = function() {
        var _Z = $s($k[--$j]); //#24025
        $k[$j++] = _Z; //#24025
        for (var _b = 0, _a = _Z.length - 1; _b <= _a; _b += 1) { //#24025
            var _c = $k[--$j]; //#24025
            $put(_c, _b, 48); //#24025
            $k[$j++] = _c; //#24025
        } //#24025
        var _d = $k[--$j]; //#24026
        var _g = $cvrs($s(_d.length), $k[--$j], 2); //#24026
        $puti(_d, _d.length - _g.length, _g); //#24027
        $k[$j++] = _d; //#24027
    }; //#24027
    $_.bits = $s((4 + 13) + ($_.msglen * 8)); //#24031
    $puti($_.bits, 0, "0011"); //#24032
    $k[$j++] = $_.bits; //#24033
    $k[$j++] = 4; //#24033
    $k[$j++] = $_.msglen; //#24033
    $k[$j++] = 13; //#24033
    $_.tobin(); //#24033
    var _m = $k[--$j]; //#24033
    var _n = $k[--$j]; //#24033
    $puti($k[--$j], _n, _m); //#24033
    for (var _r = 0, _q = $_.msglen - 1; _r <= _q; _r += 1) { //#24037
        $_.i = _r; //#24035
        $k[$j++] = $_.bits; //#24036
        $k[$j++] = 17 + ($_.i * 8); //#24036
        $k[$j++] = $get($_.msg, $_.i); //#24036
        $k[$j++] = 8; //#24036
        $_.tobin(); //#24036
        var _x = $k[--$j]; //#24036
        var _y = $k[--$j]; //#24036
        $puti($k[--$j], _y, _x); //#24036
    } //#24036
    if (!bwipp_hanxin.__24380__) { //#24380
        $_ = Object.create($_); //#24380
        var _24 = $a([0, -1, -1]); //#24063
        $_.metrics = $a([$a(["1", 23, -1, 0, 205, $a([1, 21, 4]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 17, 8]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 13, 12]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 9, 16]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["2", 25, -1, 0, 301, $a([1, 31, 6]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 25, 12]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 19, 18]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 15, 22]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["3", 27, -1, 0, 405, $a([1, 42, 8]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 34, 16]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 26, 24]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 20, 30]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["4", 29, 14, 1, 439, $a([1, 46, 8]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 38, 16]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 30, 24]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 22, 32]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["5", 31, 16, 1, 555, $a([1, 57, 12]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 49, 20]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 37, 32]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 14, 20]), $a([1, 13, 22]), $a([0, -1, -1])]), $a(["6", 33, 16, 1, 675, $a([1, 70, 14]), _24, $a([0, -1, -1]), $a([1, 58, 26]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 24, 20]), $a([1, 22, 18]), $a([0, -1, -1]), $a([1, 16, 24]), $a([1, 18, 26]), $a([0, -1, -1])]), $a(["7", 35, 17, 1, 805, $a([1, 84, 16]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 70, 30]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 26, 22]), $a([1, 28, 24]), $a([0, -1, -1]), $a([2, 14, 20]), $a([1, 12, 20]), $a([0, -1, -1])]), $a(["8", 37, 18, 1, 943, $a([1, 99, 18]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 40, 18]), $a([1, 41, 18]), $a([0, -1, -1]), $a([1, 31, 26]), $a([1, 32, 28]), $a([0, -1, -1]), $a([2, 16, 24]), $a([1, 15, 22]), $a([0, -1, -1])]), $a(["9", 39, 19, 1, 1089, $a([1, 114, 22]), $a([0, -1, -1]), $a([0, -1, -1]), $a([2, 48, 20]), $a([0, -1, -1]), $a([0, -1, -1]), $a([2, 24, 20]), $a([1, 26, 22]), $a([0, -1, -1]), $a([2, 18, 28]), $a([1, 18, 26]), $a([0, -1, -1])]), $a(["10", 41, 20, 1, 1243, $a([1, 131, 24]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 52, 22]), $a([1, 57, 24]), $a([0, -1, -1]), $a([2, 27, 24]), $a([1, 29, 24]), $a([0, -1, -1]), $a([2, 21, 32]), $a([1, 19, 30]), $a([0, -1, -1])]), $a(["11", 43, 14, 2, 1289, $a([1, 135, 26]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 56, 24]), $a([1, 57, 24]), $a([0, -1, -1]), $a([2, 28, 24]), $a([1, 31, 26]), $a([0, -1, -1]), $a([2, 22, 32]), $a([1, 21, 32]), $a([0, -1, -1])]), $a(["12", 45, 15, 2, 1455, $a([1, 153, 28]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 62, 26]), $a([1, 65, 28]), $a([0, -1, -1]), $a([2, 32, 28]), $a([1, 33, 28]), $a([0, -1, -1]), $a([3, 17, 26]), $a([1, 22, 30]), $a([0, -1, -1])]), $a(["13", 47, 16, 2, 1629, $a([1, 86, 16]), $a([1, 85, 16]), $a([0, -1, -1]), $a([1, 71, 30]), $a([1, 72, 30]), $a([0, -1, -1]), $a([2, 37, 32]), $a([1, 35, 30]), $a([0, -1, -1]), $a([3, 20, 30]), $a([1, 21, 32]), $a([0, -1, -1])]), $a(["14", 49, 16, 2, 1805, $a([1, 94, 18]), $a([1, 95, 18]), $a([0, -1, -1]), $a([2, 51, 22]), $a([1, 55, 24]), $a([0, -1, -1]), $a([3, 30, 26]), $a([1, 31, 26]), $a([0, -1, -1]), $a([4, 18, 28]), $a([1, 17, 24]), $a([0, -1, -1])]), $a(["15", 51, 17, 2, 1995, $a([1, 104, 20]), $a([1, 105, 20]), $a([0, -1, -1]), $a([2, 57, 24]), $a([1, 61, 26]), $a([0, -1, -1]), $a([3, 33, 28]), $a([1, 36, 30]), $a([0, -1, -1]), $a([4, 20, 30]), $a([1, 19, 30]), $a([0, -1, -1])]), $a(["16", 53, 17, 2, 2187, $a([1, 115, 22]), $a([1, 114, 22]), $a([0, -1, -1]), $a([2, 65, 28]), $a([1, 61, 26]), $a([0, -1, -1]), $a([3, 38, 32]), $a([1, 33, 30]), $a([0, -1, -1]), $a([5, 19, 28]), $a([1, 14, 24]), $a([0, -1, -1])]), $a(["17", 55, 18, 2, 2393, $a([1, 126, 24]), $a([1, 125, 24]), $a([0, -1, -1]), $a([2, 70, 30]), $a([1, 69, 30]), $a([0, -1, -1]), $a([4, 33, 28]), $a([1, 29, 26]), $a([0, -1, -1]), $a([5, 20, 30]), $a([1, 19, 30]), $a([0, -1, -1])]), $a(["18", 57, 19, 2, 2607, $a([1, 136, 26]), $a([1, 137, 26]), $a([0, -1, -1]), $a([3, 56, 24]), $a([1, 59, 26]), $a([0, -1, -1]), $a([5, 35, 30]), $a([0, -1, -1]), $a([0, -1, -1]), $a([6, 18, 28]), $a([1, 21, 28]), $a([0, -1, -1])]), $a(["19", 59, 20, 2, 2829, $a([1, 148, 28]), $a([1, 149, 28]), $a([0, -1, -1]), $a([3, 61, 26]), $a([1, 64, 28]), $a([0, -1, -1]), $a([7, 24, 20]), $a([1, 23, 22]), $a([0, -1, -1]), $a([6, 20, 30]), $a([1, 21, 32]), $a([0, -1, -1])]), $a(["20", 61, 20, 2, 3053, $a([3, 107, 20]), $a([0, -1, -1]), $a([0, -1, -1]), $a([3, 65, 28]), $a([1, 72, 30]), $a([0, -1, -1]), $a([7, 26, 22]), $a([1, 23, 22]), $a([0, -1, -1]), $a([7, 19, 28]), $a([1, 20, 32]), $a([0, -1, -1])]), $a(["21", 63, 21, 2, 3291, $a([3, 115, 22]), $a([0, -1, -1]), $a([0, -1, -1]), $a([4, 56, 24]), $a([1, 63, 28]), $a([0, -1, -1]), $a([7, 28, 24]), $a([1, 25, 22]), $a([0, -1, -1]), $a([8, 18, 28]), $a([1, 21, 22]), $a([0, -1, -1])]), $a(["22", 65, 16, 3, 3383, $a([2, 116, 22]), $a([1, 122, 24]), $a([0, -1, -1]), $a([4, 56, 24]), $a([1, 72, 30]), $a([0, -1, -1]), $a([7, 28, 24]), $a([1, 32, 26]), $a([0, -1, -1]), $a([8, 18, 28]), $a([1, 24, 30]), $a([0, -1, -1])]), $a(["23", 67, 17, 3, 3631, $a([3, 127, 24]), $a([0, -1, -1]), $a([0, -1, -1]), $a([5, 51, 22]), $a([1, 62, 26]), $a([0, -1, -1]), $a([7, 30, 26]), $a([1, 35, 26]), $a([0, -1, -1]), $a([8, 20, 30]), $a([1, 21, 32]), $a([0, -1, -1])]), $a(["24", 69, 17, 3, 3887, $a([2, 135, 26]), $a([1, 137, 26]), $a([0, -1, -1]), $a([5, 56, 24]), $a([1, 59, 26]), $a([0, -1, -1]), $a([7, 33, 28]), $a([1, 30, 28]), $a([0, -1, -1]), $a([11, 16, 24]), $a([1, 19, 26]), $a([0, -1, -1])]), $a(["25", 71, 18, 3, 4151, $a([3, 105, 20]), $a([1, 121, 22]), $a([0, -1, -1]), $a([5, 61, 26]), $a([1, 57, 26]), $a([0, -1, -1]), $a([9, 28, 24]), $a([1, 28, 22]), $a([0, -1, -1]), $a([10, 19, 28]), $a([1, 18, 30]), $a([0, -1, -1])]), $a(["26", 73, 18, 3, 4423, $a([2, 157, 30]), $a([1, 150, 28]), $a([0, -1, -1]), $a([5, 65, 28]), $a([1, 61, 26]), $a([0, -1, -1]), $a([8, 33, 28]), $a([1, 34, 30]), $a([0, -1, -1]), $a([10, 19, 28]), $a([2, 15, 26]), $a([0, -1, -1])]), $a(["27", 75, 19, 3, 4703, $a([3, 126, 24]), $a([1, 115, 22]), $a([0, -1, -1]), $a([7, 51, 22]), $a([1, 54, 22]), $a([0, -1, -1]), $a([8, 35, 30]), $a([1, 37, 30]), $a([0, -1, -1]), $a([15, 15, 22]), $a([1, 10, 22]), $a([0, -1, -1])]), $a(["28", 77, 19, 3, 4991, $a([4, 105, 20]), $a([1, 103, 20]), $a([0, -1, -1]), $a([7, 56, 24]), $a([1, 45, 18]), $a([0, -1, -1]), $a([10, 31, 26]), $a([1, 27, 26]), $a([0, -1, -1]), $a([10, 17, 26]), $a([3, 20, 28]), $a([1, 21, 28])]), $a(["29", 79, 20, 3, 5287, $a([3, 139, 26]), $a([1, 137, 28]), $a([0, -1, -1]), $a([6, 66, 28]), $a([1, 66, 30]), $a([0, -1, -1]), $a([9, 36, 30]), $a([1, 34, 32]), $a([0, -1, -1]), $a([13, 19, 28]), $a([1, 17, 32]), $a([0, -1, -1])]), $a(["30", 81, 20, 3, 5591, $a([6, 84, 16]), $a([1, 82, 16]), $a([0, -1, -1]), $a([6, 70, 30]), $a([1, 68, 30]), $a([0, -1, -1]), $a([7, 35, 30]), $a([3, 33, 28]), $a([1, 32, 28]), $a([13, 20, 30]), $a([1, 20, 28]), $a([0, -1, -1])]), $a(["31", 83, 21, 3, 5903, $a([5, 105, 20]), $a([1, 94, 18]), $a([0, -1, -1]), $a([6, 74, 32]), $a([1, 71, 30]), $a([0, -1, -1]), $a([11, 33, 28]), $a([1, 34, 32]), $a([0, -1, -1]), $a([13, 19, 28]), $a([3, 16, 26]), $a([0, -1, -1])]), $a(["32", 85, 17, 4, 6033, $a([4, 127, 24]), $a([1, 126, 24]), $a([0, -1, -1]), $a([7, 66, 28]), $a([1, 66, 30]), $a([0, -1, -1]), $a([12, 30, 24]), $a([1, 24, 28]), $a([1, 24, 30]), $a([15, 19, 28]), $a([1, 17, 32]), $a([0, -1, -1])]), $a(["33", 87, 17, 4, 6353, $a([7, 84, 16]), $a([1, 78, 16]), $a([0, -1, -1]), $a([7, 70, 30]), $a([1, 66, 28]), $a([0, -1, -1]), $a([12, 33, 28]), $a([1, 32, 30]), $a([0, -1, -1]), $a([14, 21, 32]), $a([1, 24, 28]), $a([0, -1, -1])]), $a(["34", 89, 18, 4, 6689, $a([5, 117, 22]), $a([1, 117, 24]), $a([0, -1, -1]), $a([8, 66, 28]), $a([1, 58, 26]), $a([0, -1, -1]), $a([11, 38, 32]), $a([1, 34, 32]), $a([0, -1, -1]), $a([15, 20, 30]), $a([2, 17, 26]), $a([0, -1, -1])]), $a(["35", 91, 18, 4, 7025, $a([4, 148, 28]), $a([1, 146, 28]), $a([0, -1, -1]), $a([8, 68, 30]), $a([1, 70, 24]), $a([0, -1, -1]), $a([10, 36, 32]), $a([3, 38, 28]), $a([0, -1, -1]), $a([16, 19, 28]), $a([3, 16, 26]), $a([0, -1, -1])]), $a(["36", 93, 19, 4, 7377, $a([4, 126, 24]), $a([2, 135, 26]), $a([0, -1, -1]), $a([8, 70, 28]), $a([2, 43, 26]), $a([0, -1, -1]), $a([13, 32, 28]), $a([2, 41, 30]), $a([0, -1, -1]), $a([17, 19, 28]), $a([3, 15, 26]), $a([0, -1, -1])]), $a(["37", 95, 19, 4, 7729, $a([5, 136, 26]), $a([1, 132, 24]), $a([0, -1, -1]), $a([5, 67, 30]), $a([4, 68, 28]), $a([1, 69, 28]), $a([14, 35, 30]), $a([1, 32, 24]), $a([0, -1, -1]), $a([18, 18, 26]), $a([3, 16, 28]), $a([1, 14, 28])]), $a(["38", 97, 19, 4, 8089, $a([3, 142, 26]), $a([3, 141, 28]), $a([0, -1, -1]), $a([8, 70, 30]), $a([1, 73, 32]), $a([1, 74, 32]), $a([12, 34, 30]), $a([3, 34, 26]), $a([1, 35, 28]), $a([18, 21, 32]), $a([1, 27, 30]), $a([0, -1, -1])]), $a(["39", 99, 20, 4, 8465, $a([5, 116, 22]), $a([2, 103, 20]), $a([1, 102, 20]), $a([9, 74, 32]), $a([1, 74, 30]), $a([0, -1, -1]), $a([14, 34, 28]), $a([2, 32, 32]), $a([1, 32, 30]), $a([19, 21, 32]), $a([1, 25, 26]), $a([0, -1, -1])]), $a(["40", 101, 20, 4, 8841, $a([7, 116, 22]), $a([1, 117, 22]), $a([0, -1, -1]), $a([11, 65, 28]), $a([1, 58, 24]), $a([0, -1, -1]), $a([15, 38, 32]), $a([1, 27, 28]), $a([0, -1, -1]), $a([20, 20, 30]), $a([1, 20, 32]), $a([1, 21, 32])]), $a(["41", 103, 17, 5, 9009, $a([6, 136, 26]), $a([1, 130, 24]), $a([0, -1, -1]), $a([11, 66, 28]), $a([1, 62, 30]), $a([0, -1, -1]), $a([14, 34, 28]), $a([3, 34, 32]), $a([1, 30, 30]), $a([18, 20, 30]), $a([3, 20, 28]), $a([2, 15, 26])]), $a(["42", 105, 17, 5, 9401, $a([5, 105, 20]), $a([2, 115, 22]), $a([2, 116, 22]), $a([10, 75, 32]), $a([1, 73, 32]), $a([0, -1, -1]), $a([16, 38, 32]), $a([1, 27, 28]), $a([0, -1, -1]), $a([22, 19, 28]), $a([2, 16, 30]), $a([1, 19, 30])]), $a(["43", 107, 18, 5, 9799, $a([6, 147, 28]), $a([1, 146, 28]), $a([0, -1, -1]), $a([11, 66, 28]), $a([2, 65, 30]), $a([0, -1, -1]), $a([18, 33, 28]), $a([2, 33, 30]), $a([0, -1, -1]), $a([22, 21, 32]), $a([1, 28, 30]), $a([0, -1, -1])]), $a(["44", 109, 18, 5, 10207, $a([6, 116, 22]), $a([3, 125, 24]), $a([0, -1, -1]), $a([11, 75, 32]), $a([1, 68, 30]), $a([0, -1, -1]), $a([13, 35, 28]), $a([6, 34, 32]), $a([1, 30, 30]), $a([23, 21, 32]), $a([1, 26, 30]), $a([0, -1, -1])]), $a(["45", 111, 18, 5, 10623, $a([7, 105, 20]), $a([4, 95, 18]), $a([0, -1, -1]), $a([12, 67, 28]), $a([1, 63, 30]), $a([1, 62, 32]), $a([21, 31, 26]), $a([2, 33, 32]), $a([0, -1, -1]), $a([23, 21, 32]), $a([2, 24, 30]), $a([0, -1, -1])]), $a(["46", 113, 19, 5, 11045, $a([10, 116, 22]), $a([0, -1, -1]), $a([0, -1, -1]), $a([12, 74, 32]), $a([1, 78, 30]), $a([0, -1, -1]), $a([18, 37, 32]), $a([1, 39, 30]), $a([1, 41, 28]), $a([25, 21, 32]), $a([1, 27, 28]), $a([0, -1, -1])]), $a(["47", 115, 19, 5, 11477, $a([5, 126, 24]), $a([4, 115, 22]), $a([1, 114, 22]), $a([12, 67, 28]), $a([2, 66, 32]), $a([1, 68, 30]), $a([21, 35, 30]), $a([1, 39, 30]), $a([0, -1, -1]), $a([26, 21, 32]), $a([1, 28, 28]), $a([0, -1, -1])]), $a(["48", 117, 19, 5, 11917, $a([9, 126, 24]), $a([1, 117, 22]), $a([0, -1, -1]), $a([13, 75, 32]), $a([1, 68, 30]), $a([0, -1, -1]), $a([20, 35, 30]), $a([3, 35, 28]), $a([0, -1, -1]), $a([27, 21, 32]), $a([1, 28, 30]), $a([0, -1, -1])]), $a(["49", 119, 17, 6, 12111, $a([9, 126, 24]), $a([1, 137, 26]), $a([0, -1, -1]), $a([13, 71, 30]), $a([2, 68, 32]), $a([0, -1, -1]), $a([20, 37, 32]), $a([1, 39, 28]), $a([1, 38, 28]), $a([24, 20, 32]), $a([5, 25, 28]), $a([0, -1, -1])]), $a(["50", 121, 17, 6, 12559, $a([8, 147, 28]), $a([1, 141, 28]), $a([0, -1, -1]), $a([10, 73, 32]), $a([4, 74, 30]), $a([1, 73, 30]), $a([16, 36, 32]), $a([6, 39, 30]), $a([1, 37, 30]), $a([27, 21, 32]), $a([3, 20, 26]), $a([0, -1, -1])]), $a(["51", 123, 18, 6, 13025, $a([9, 137, 26]), $a([1, 135, 26]), $a([0, -1, -1]), $a([12, 70, 30]), $a([4, 75, 32]), $a([0, -1, -1]), $a([24, 35, 30]), $a([1, 40, 28]), $a([0, -1, -1]), $a([23, 20, 32]), $a([8, 24, 30]), $a([0, -1, -1])]), $a(["52", 125, 18, 6, 13489, $a([14, 95, 18]), $a([1, 86, 18]), $a([0, -1, -1]), $a([13, 73, 32]), $a([3, 77, 30]), $a([0, -1, -1]), $a([24, 35, 30]), $a([2, 35, 28]), $a([0, -1, -1]), $a([26, 21, 32]), $a([5, 21, 30]), $a([1, 23, 30])]), $a(["53", 127, 18, 6, 13961, $a([9, 147, 28]), $a([1, 142, 28]), $a([0, -1, -1]), $a([10, 73, 30]), $a([6, 70, 32]), $a([1, 71, 32]), $a([25, 35, 30]), $a([2, 34, 26]), $a([0, -1, -1]), $a([29, 21, 32]), $a([4, 22, 30]), $a([0, -1, -1])]), $a(["54", 129, 18, 6, 14441, $a([11, 126, 24]), $a([1, 131, 24]), $a([0, -1, -1]), $a([16, 74, 32]), $a([1, 79, 30]), $a([0, -1, -1]), $a([25, 38, 32]), $a([1, 25, 30]), $a([0, -1, -1]), $a([33, 21, 32]), $a([1, 28, 28]), $a([0, -1, -1])]), $a(["55", 131, 19, 6, 14939, $a([14, 105, 20]), $a([1, 99, 18]), $a([0, -1, -1]), $a([19, 65, 28]), $a([1, 72, 28]), $a([0, -1, -1]), $a([24, 37, 32]), $a([2, 40, 30]), $a([1, 41, 30]), $a([31, 21, 32]), $a([4, 24, 32]), $a([0, -1, -1])]), $a(["56", 133, 19, 6, 15435, $a([10, 147, 28]), $a([1, 151, 28]), $a([0, -1, -1]), $a([15, 71, 30]), $a([3, 71, 32]), $a([1, 73, 32]), $a([24, 37, 32]), $a([3, 38, 30]), $a([1, 39, 30]), $a([36, 19, 30]), $a([3, 29, 26]), $a([0, -1, -1])]), $a(["57", 135, 19, 6, 15939, $a([15, 105, 20]), $a([1, 99, 18]), $a([0, -1, -1]), $a([19, 70, 30]), $a([1, 64, 28]), $a([0, -1, -1]), $a([27, 38, 32]), $a([2, 25, 26]), $a([0, -1, -1]), $a([38, 20, 30]), $a([2, 18, 28]), $a([0, -1, -1])]), $a(["58", 137, 17, 7, 16171, $a([14, 105, 20]), $a([1, 113, 22]), $a([1, 114, 22]), $a([17, 67, 30]), $a([3, 92, 32]), $a([0, -1, -1]), $a([30, 35, 30]), $a([1, 41, 30]), $a([0, -1, -1]), $a([36, 21, 32]), $a([1, 26, 30]), $a([1, 27, 30])]), $a(["59", 139, 17, 7, 16691, $a([11, 146, 28]), $a([1, 146, 26]), $a([0, -1, -1]), $a([20, 70, 30]), $a([1, 60, 26]), $a([0, -1, -1]), $a([29, 38, 32]), $a([1, 24, 32]), $a([0, -1, -1]), $a([40, 20, 30]), $a([2, 17, 26]), $a([0, -1, -1])]), $a(["60", 141, 18, 7, 17215, $a([3, 137, 26]), $a([1, 136, 26]), $a([10, 126, 24]), $a([22, 65, 28]), $a([1, 75, 30]), $a([0, -1, -1]), $a([30, 37, 32]), $a([1, 51, 30]), $a([0, -1, -1]), $a([42, 20, 30]), $a([1, 21, 30]), $a([0, -1, -1])]), $a(["61", 143, 18, 7, 17751, $a([12, 126, 24]), $a([2, 118, 22]), $a([1, 116, 22]), $a([19, 74, 32]), $a([1, 74, 30]), $a([1, 72, 28]), $a([30, 38, 32]), $a([2, 29, 30]), $a([0, -1, -1]), $a([39, 20, 32]), $a([2, 37, 26]), $a([1, 38, 26])]), $a(["62", 145, 18, 7, 18295, $a([12, 126, 24]), $a([3, 136, 26]), $a([0, -1, -1]), $a([21, 70, 30]), $a([2, 65, 28]), $a([0, -1, -1]), $a([34, 35, 30]), $a([1, 44, 32]), $a([0, -1, -1]), $a([42, 20, 30]), $a([2, 19, 28]), $a([2, 18, 28])]), $a(["63", 147, 18, 7, 18847, $a([12, 126, 24]), $a([3, 117, 22]), $a([1, 116, 22]), $a([25, 61, 26]), $a([2, 62, 28]), $a([0, -1, -1]), $a([34, 35, 30]), $a([1, 40, 32]), $a([1, 41, 32]), $a([45, 20, 30]), $a([1, 20, 32]), $a([1, 21, 32])]), $a(["64", 149, 19, 7, 19403, $a([15, 105, 20]), $a([2, 115, 22]), $a([2, 116, 22]), $a([25, 65, 28]), $a([1, 72, 28]), $a([0, -1, -1]), $a([18, 35, 30]), $a([17, 37, 32]), $a([1, 50, 32]), $a([42, 20, 30]), $a([6, 19, 28]), $a([1, 15, 28])]), $a(["65", 151, 19, 7, 19971, $a([19, 105, 20]), $a([1, 101, 20]), $a([0, -1, -1]), $a([33, 51, 22]), $a([1, 65, 22]), $a([0, -1, -1]), $a([40, 33, 28]), $a([1, 28, 28]), $a([0, -1, -1]), $a([49, 20, 30]), $a([1, 18, 28]), $a([0, -1, -1])]), $a(["66", 153, 17, 8, 20229, $a([18, 105, 20]), $a([2, 117, 22]), $a([0, -1, -1]), $a([26, 65, 28]), $a([1, 80, 30]), $a([0, -1, -1]), $a([35, 35, 30]), $a([3, 35, 28]), $a([1, 36, 28]), $a([52, 18, 28]), $a([2, 38, 30]), $a([0, -1, -1])]), $a(["67", 155, 17, 8, 20805, $a([26, 84, 16]), $a([0, -1, -1]), $a([0, -1, -1]), $a([26, 70, 30]), $a([0, -1, -1]), $a([0, -1, -1]), $a([45, 31, 26]), $a([1, 9, 26]), $a([0, -1, -1]), $a([52, 20, 30]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["68", 157, 17, 8, 21389, $a([16, 126, 24]), $a([1, 114, 22]), $a([1, 115, 22]), $a([23, 70, 30]), $a([3, 65, 28]), $a([1, 66, 28]), $a([40, 35, 30]), $a([1, 43, 30]), $a([0, -1, -1]), $a([46, 20, 30]), $a([7, 19, 28]), $a([1, 16, 28])]), $a(["69", 159, 18, 8, 21993, $a([19, 116, 22]), $a([1, 105, 22]), $a([0, -1, -1]), $a([20, 70, 30]), $a([7, 66, 28]), $a([1, 63, 28]), $a([40, 35, 30]), $a([1, 42, 32]), $a([1, 43, 32]), $a([54, 20, 30]), $a([1, 19, 30]), $a([0, -1, -1])]), $a(["70", 161, 18, 8, 22593, $a([17, 126, 24]), $a([2, 115, 22]), $a([0, -1, -1]), $a([24, 70, 30]), $a([4, 74, 32]), $a([0, -1, -1]), $a([48, 31, 26]), $a([2, 18, 26]), $a([0, -1, -1]), $a([54, 19, 28]), $a([6, 15, 26]), $a([1, 14, 26])]), $a(["71", 163, 18, 8, 23201, $a([29, 84, 16]), $a([0, -1, -1]), $a([0, -1, -1]), $a([29, 70, 30]), $a([0, -1, -1]), $a([0, -1, -1]), $a([6, 34, 30]), $a([3, 36, 30]), $a([38, 33, 28]), $a([58, 20, 30]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["72", 165, 18, 8, 23817, $a([16, 147, 28]), $a([1, 149, 28]), $a([0, -1, -1]), $a([31, 66, 28]), $a([1, 37, 26]), $a([0, -1, -1]), $a([48, 33, 28]), $a([1, 23, 26]), $a([0, -1, -1]), $a([53, 20, 30]), $a([6, 19, 28]), $a([1, 17, 28])]), $a(["73", 167, 19, 8, 24453, $a([20, 115, 22]), $a([2, 134, 24]), $a([0, -1, -1]), $a([29, 66, 28]), $a([2, 56, 26]), $a([2, 57, 26]), $a([45, 36, 30]), $a([2, 15, 28]), $a([0, -1, -1]), $a([59, 20, 30]), $a([2, 21, 32]), $a([0, -1, -1])]), $a(["74", 169, 19, 8, 25085, $a([17, 147, 28]), $a([1, 134, 26]), $a([0, -1, -1]), $a([26, 70, 30]), $a([5, 75, 32]), $a([0, -1, -1]), $a([47, 35, 30]), $a([1, 48, 32]), $a([0, -1, -1]), $a([64, 18, 28]), $a([2, 33, 30]), $a([1, 35, 30])]), $a(["75", 171, 17, 9, 25373, $a([22, 115, 22]), $a([1, 133, 24]), $a([0, -1, -1]), $a([33, 65, 28]), $a([1, 74, 28]), $a([0, -1, -1]), $a([43, 36, 30]), $a([5, 27, 28]), $a([1, 30, 28]), $a([57, 20, 30]), $a([5, 21, 32]), $a([1, 24, 32])]), $a(["76", 173, 17, 9, 26021, $a([18, 136, 26]), $a([2, 142, 26]), $a([0, -1, -1]), $a([33, 66, 28]), $a([2, 49, 26]), $a([0, -1, -1]), $a([48, 35, 30]), $a([2, 38, 28]), $a([0, -1, -1]), $a([64, 20, 30]), $a([1, 20, 32]), $a([0, -1, -1])]), $a(["77", 175, 17, 9, 26677, $a([19, 126, 24]), $a([2, 135, 26]), $a([1, 136, 26]), $a([32, 66, 28]), $a([2, 55, 26]), $a([2, 56, 26]), $a([49, 36, 30]), $a([2, 18, 32]), $a([0, -1, -1]), $a([65, 18, 28]), $a([5, 27, 30]), $a([1, 29, 30])]), $a(["78", 177, 18, 9, 27335, $a([20, 137, 26]), $a([1, 130, 26]), $a([0, -1, -1]), $a([30, 75, 32]), $a([2, 71, 32]), $a([0, -1, -1]), $a([46, 35, 30]), $a([6, 39, 32]), $a([0, -1, -1]), $a([3, 12, 30]), $a([70, 19, 28]), $a([0, -1, -1])]), $a(["79", 179, 18, 9, 28007, $a([20, 147, 28]), $a([0, -1, -1]), $a([0, -1, -1]), $a([35, 70, 30]), $a([0, -1, -1]), $a([0, -1, -1]), $a([49, 35, 30]), $a([5, 35, 28]), $a([0, -1, -1]), $a([70, 20, 30]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["80", 181, 18, 9, 28687, $a([21, 136, 26]), $a([1, 155, 28]), $a([0, -1, -1]), $a([34, 70, 30]), $a([1, 64, 28]), $a([1, 65, 28]), $a([54, 35, 30]), $a([1, 45, 30]), $a([0, -1, -1]), $a([68, 20, 30]), $a([3, 18, 28]), $a([1, 19, 28])]), $a(["81", 183, 18, 9, 29375, $a([19, 126, 24]), $a([5, 115, 22]), $a([1, 114, 22]), $a([33, 70, 30]), $a([3, 65, 28]), $a([1, 64, 28]), $a([52, 35, 30]), $a([3, 41, 32]), $a([1, 40, 32]), $a([67, 20, 30]), $a([5, 21, 32]), $a([1, 24, 32])]), $a(["82", 185, 18, 9, 30071, $a([2, 150, 28]), $a([21, 136, 26]), $a([0, -1, -1]), $a([32, 70, 30]), $a([6, 65, 28]), $a([0, -1, -1]), $a([52, 38, 32]), $a([2, 27, 32]), $a([0, -1, -1]), $a([73, 20, 30]), $a([2, 22, 32]), $a([0, -1, -1])]), $a(["83", 187, 17, 10, 30387, $a([21, 126, 24]), $a([4, 136, 26]), $a([0, -1, -1]), $a([30, 74, 32]), $a([6, 73, 30]), $a([0, -1, -1]), $a([54, 35, 30]), $a([4, 40, 32]), $a([0, -1, -1]), $a([75, 20, 30]), $a([1, 20, 28]), $a([0, -1, -1])]), $a(["84", 189, 17, 10, 31091, $a([30, 105, 20]), $a([1, 114, 22]), $a([0, -1, -1]), $a([3, 45, 22]), $a([55, 47, 20]), $a([0, -1, -1]), $a([2, 26, 26]), $a([62, 33, 28]), $a([0, -1, -1]), $a([79, 18, 28]), $a([4, 33, 30]), $a([0, -1, -1])])]); //#24379
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_hanxin.$ctx[id] = $_[id]); //#24379
        bwipp_hanxin.__24380__ = 1; //#24379
        $_ = Object.getPrototypeOf($_); //#24379
    } //#24379
    $_.eclval = $get($_.eclevel, 1) - 49; //#24382
    var _Ig = $_.metrics; //#24383
    for (var _Ih = 0, _Ii = _Ig.length; _Ih < _Ii; _Ih++) { //#24401
        $_.m = $get(_Ig, _Ih); //#24384
        $_.vers = $get($_.m, 0); //#24385
        $_.size = $get($_.m, 1); //#24386
        $_.alnk = $get($_.m, 2); //#24387
        $_.alnn = $get($_.m, 3); //#24388
        $_.alnr = $f($_.size - ($_.alnk * $_.alnn)); //#24389
        $_.nmod = $get($_.m, 4); //#24390
        $_.ncws = ~~($_.nmod / 8); //#24391
        $_.rbit = $_.nmod % 8; //#24392
        $_.ecbs = $geti($_.m, 5 + ($_.eclval * 3), 3); //#24393
        var _J2 = $_.ecbs; //#24394
        $k[$j++] = 'ecws'; //#24394
        $k[$j++] = 0; //#24394
        for (var _J3 = 0, _J4 = _J2.length; _J3 < _J4; _J3++) { //#24394
            var _J5 = $get(_J2, _J3); //#24394
            var _J8 = $k[--$j]; //#24394
            $k[$j++] = $f(_J8 + ($get(_J5, 0) * $get(_J5, 2))); //#24394
        } //#24394
        var _J9 = $k[--$j]; //#24394
        $_[$k[--$j]] = _J9; //#24394
        $_.dcws = $f($_.ncws - $_.ecws); //#24395
        $_.dmod = $_.dcws * 8; //#24396
        $_.okay = true; //#24397
        if ($ne($_.version, "unset") && $ne($_.version, $_.vers)) { //#24398
            $_.okay = false; //#24398
        } //#24398
        if ($_.bits.length > $_.dmod) { //#24399
            $_.okay = false; //#24399
        } //#24399
        if ($_.okay) { //#24400
            break; //#24400
        } //#24400
    } //#24400
    if (!$_.okay) { //#24405
        $k[$j++] = 'bwipp.hanxinNoValidSymbol#24404'; //#24404
        $k[$j++] = "Maximum length exceeded or invalid content"; //#24404
        bwipp_raiseerror(); //#24404
    } //#24404
    $_.version = $_.vers; //#24407
    $_.msgbits = $_.bits; //#24408
    $_.e1nb = $get($get($_.ecbs, 0), 0); //#24409
    $_.e2nb = $get($get($_.ecbs, 1), 0); //#24409
    $_.e3nb = $get($get($_.ecbs, 2), 0); //#24409
    $_.e1dcws = $get($get($_.ecbs, 0), 1); //#24410
    $_.e2dcws = $get($get($_.ecbs, 1), 1); //#24410
    $_.e3dcws = $get($get($_.ecbs, 2), 1); //#24410
    $_.e1ecws = $get($get($_.ecbs, 0), 2); //#24411
    $_.e2ecws = $get($get($_.ecbs, 1), 2); //#24411
    $_.e3ecws = $get($get($_.ecbs, 2), 2); //#24411
    $_.pad = $s($_.dmod); //#24414
    for (var _Js = 0, _Jr = $_.pad.length - 1; _Js <= _Jr; _Js += 1) { //#24415
        $put($_.pad, _Js, 48); //#24415
    } //#24415
    $puti($_.pad, 0, $_.msgbits); //#24416
    $_.cws = $a($_.dcws); //#24419
    for (var _K0 = 0, _Jz = $_.cws.length - 1; _K0 <= _Jz; _K0 += 1) { //#24429
        $_.c = _K0; //#24421
        $_.cwb = $geti($_.pad, $_.c * 8, 8); //#24422
        $_.cw = 0; //#24423
        for (var _K4 = 0; _K4 <= 7; _K4 += 1) { //#24427
            $_.i = _K4; //#24425
            $_.cw = $f($_.cw + ((~~(Math.pow(2, (8 - $_.i) - 1))) * $f($get($_.cwb, $_.i) - 48))); //#24426
        } //#24426
        $put($_.cws, $_.c, $_.cw); //#24428
    } //#24428
    $_.rscodes = function() {
        $_.rspm = $k[--$j]; //#24433
        $_.rsgf = $k[--$j]; //#24434
        $_.rsnc = $k[--$j]; //#24435
        $_.rscws = $k[--$j]; //#24436
        $k[$j++] = Infinity; //#24439
        $k[$j++] = 1; //#24439
        for (var _KI = 0, _KJ = $f($_.rsgf - 1); _KI < _KJ; _KI++) { //#24439
            var _KK = $k[--$j]; //#24439
            var _KL = _KK * 2; //#24439
            $k[$j++] = _KK; //#24439
            $k[$j++] = _KL; //#24439
            if (_KL >= $_.rsgf) { //#24439
                var _KO = $k[--$j]; //#24439
                $k[$j++] = $xo(_KO, $_.rspm); //#24439
            } //#24439
        } //#24439
        $_.rsalog = $a(); //#24439
        $_.rslog = $a($_.rsgf); //#24440
        for (var _KU = 1, _KT = $f($_.rsgf - 1); _KU <= _KT; _KU += 1) { //#24441
            $put($_.rslog, $get($_.rsalog, _KU), _KU); //#24441
        } //#24441
        $_.rsprod = function() {
            var _KY = $k[--$j]; //#24445
            var _KZ = $k[--$j]; //#24445
            $k[$j++] = _KZ; //#24449
            $k[$j++] = _KY; //#24449
            if ((_KY != 0) && (_KZ != 0)) { //#24448
                var _Kc = $get($_.rslog, $k[--$j]); //#24446
                var _Ki = $get($_.rsalog, $f(_Kc + $get($_.rslog, $k[--$j])) % $f($_.rsgf - 1)); //#24446
                $k[$j++] = _Ki; //#24446
            } else { //#24448
                $j -= 2; //#24448
                $k[$j++] = 0; //#24448
            } //#24448
        }; //#24448
        $k[$j++] = Infinity; //#24453
        $k[$j++] = 1; //#24453
        for (var _Kk = 0, _Kl = $_.rsnc; _Kk < _Kl; _Kk++) { //#24453
            $k[$j++] = 0; //#24453
        } //#24453
        $_.coeffs = $a(); //#24453
        for (var _Kp = 1, _Ko = $_.rsnc; _Kp <= _Ko; _Kp += 1) { //#24462
            $_.i = _Kp; //#24455
            $put($_.coeffs, $_.i, $get($_.coeffs, $_.i - 1)); //#24456
            for (var _Kw = $_.i - 1; _Kw >= 1; _Kw -= 1) { //#24460
                $_.j = _Kw; //#24458
                $k[$j++] = $_.coeffs; //#24459
                $k[$j++] = $_.j; //#24459
                $k[$j++] = $get($_.coeffs, $_.j - 1); //#24459
                $k[$j++] = $get($_.coeffs, $_.j); //#24459
                $k[$j++] = $get($_.rsalog, $_.i); //#24459
                $_.rsprod(); //#24459
                var _L8 = $k[--$j]; //#24459
                var _L9 = $k[--$j]; //#24459
                var _LA = $k[--$j]; //#24459
                $put($k[--$j], _LA, $xo(_L9, _L8)); //#24459
            } //#24459
            $k[$j++] = $_.coeffs; //#24461
            $k[$j++] = 0; //#24461
            $k[$j++] = $get($_.coeffs, 0); //#24461
            $k[$j++] = $get($_.rsalog, $_.i); //#24461
            $_.rsprod(); //#24461
            var _LI = $k[--$j]; //#24461
            var _LJ = $k[--$j]; //#24461
            $put($k[--$j], _LJ, _LI); //#24461
        } //#24461
        $_.nd = $_.rscws.length; //#24465
        $k[$j++] = Infinity; //#24466
        $forall($_.rscws); //#24466
        for (var _LO = 0, _LP = $_.rsnc; _LO < _LP; _LO++) { //#24466
            $k[$j++] = 0; //#24466
        } //#24466
        $k[$j++] = 0; //#24466
        $_.rscws = $a(); //#24466
        for (var _LT = 0, _LS = $_.nd - 1; _LT <= _LS; _LT += 1) { //#24473
            $_.k = $xo($get($_.rscws, _LT), $get($_.rscws, $_.nd)); //#24468
            for (var _Lb = 0, _La = $f($_.rsnc - 1); _Lb <= _La; _Lb += 1) { //#24472
                $_.j = _Lb; //#24470
                $k[$j++] = $_.rscws; //#24471
                $k[$j++] = $_.nd + $_.j; //#24471
                $k[$j++] = $get($_.rscws, ($_.nd + $_.j) + 1); //#24471
                $k[$j++] = $_.k; //#24471
                $k[$j++] = $get($_.coeffs, $f($f($_.rsnc - $_.j) - 1)); //#24471
                $_.rsprod(); //#24471
                var _Lo = $k[--$j]; //#24471
                var _Lp = $k[--$j]; //#24471
                var _Lq = $k[--$j]; //#24471
                $put($k[--$j], _Lq, $xo(_Lp, _Lo)); //#24471
            } //#24471
        } //#24471
        $k[$j++] = $geti($_.rscws, 0, $_.rscws.length - 1); //#24476
    }; //#24476
    $_.dcwsb = $a($f($f($_.e1nb + $_.e2nb) + $_.e3nb)); //#24481
    $_.ecwsb = $a($_.dcwsb.length); //#24482
    $_.in = 0; //#24483
    $_.out = 0; //#24483
    for (var _M2 = 0, _M3 = $_.e1nb; _M2 < _M3; _M2++) { //#24489
        $k[$j++] = $geti($_.cws, $_.in, $_.e1dcws); //#24485
        $k[$j++] = $_.e1ecws; //#24485
        $k[$j++] = 256; //#24485
        $k[$j++] = 355; //#24485
        $_.rscodes(); //#24485
        var _M9 = $k[--$j]; //#24486
        $put($_.dcwsb, $_.out, $geti(_M9, 0, $_.e1dcws)); //#24486
        $put($_.ecwsb, $_.out, $geti(_M9, $_.e1dcws, $_.e1ecws)); //#24487
        $_.in = $f($_.in + $_.e1dcws); //#24488
        $_.out = $_.out + 1; //#24488
    } //#24488
    for (var _MN = 0, _MO = $_.e2nb; _MN < _MO; _MN++) { //#24495
        $k[$j++] = $geti($_.cws, $_.in, $_.e2dcws); //#24491
        $k[$j++] = $_.e2ecws; //#24491
        $k[$j++] = 256; //#24491
        $k[$j++] = 355; //#24491
        $_.rscodes(); //#24491
        var _MU = $k[--$j]; //#24492
        $put($_.dcwsb, $_.out, $geti(_MU, 0, $_.e2dcws)); //#24492
        $put($_.ecwsb, $_.out, $geti(_MU, $_.e2dcws, $_.e2ecws)); //#24493
        $_.in = $f($_.in + $_.e2dcws); //#24494
        $_.out = $_.out + 1; //#24494
    } //#24494
    for (var _Mi = 0, _Mj = $_.e3nb; _Mi < _Mj; _Mi++) { //#24501
        $k[$j++] = $geti($_.cws, $_.in, $_.e3dcws); //#24497
        $k[$j++] = $_.e3ecws; //#24497
        $k[$j++] = 256; //#24497
        $k[$j++] = 355; //#24497
        $_.rscodes(); //#24497
        var _Mp = $k[--$j]; //#24498
        $put($_.dcwsb, $_.out, $geti(_Mp, 0, $_.e3dcws)); //#24498
        $put($_.ecwsb, $_.out, $geti(_Mp, $_.e3dcws, $_.e3ecws)); //#24499
        $_.in = $f($_.in + $_.e3dcws); //#24500
        $_.out = $_.out + 1; //#24500
    } //#24500
    $_.cws = $a($_.ncws); //#24504
    $_.cw = 0; //#24505
    for (var _N6 = 0, _N5 = $_.dcwsb.length - 1; _N6 <= _N5; _N6 += 1) { //#24510
        $_.i = _N6; //#24507
        var _N9 = $get($_.dcwsb, $_.i); //#24508
        $puti($_.cws, $_.cw, _N9); //#24508
        $_.cw = _N9.length + $_.cw; //#24508
        var _NF = $get($_.ecwsb, $_.i); //#24509
        $puti($_.cws, $_.cw, _NF); //#24509
        $_.cw = _NF.length + $_.cw; //#24509
    } //#24509
    $k[$j++] = Infinity; //#24513
    var _NJ = $_.ncws; //#24514
    var _NK = 12; //#24514
    var _NL = _NJ - 1; //#24514
    if ((_NJ - 1) > 12) { //#24514
        var _ = _NK; //#24514
        _NK = _NL; //#24514
        _NL = _; //#24514
    } //#24514
    for (var _NN = 0, _NM = _NL; _NN <= _NM; _NN += 1) { //#24516
        for (var _NQ = _NN, _NP = $_.ncws - 1; _NQ <= _NP; _NQ += 13) { //#24515
            $k[$j++] = _NQ; //#24515
            if (_NQ < $_.ncws) { //#24515
                var _NU = $get($_.cws, $k[--$j]); //#24515
                $k[$j++] = _NU; //#24515
            } else { //#24515
                $j--; //#24515
            } //#24515
        } //#24515
    } //#24515
    $_.cws = $a(); //#24515
    if ($_.rbit > 0) { //#24525
        $_.pad = $a($_.cws.length + 1); //#24521
        $puti($_.pad, 0, $_.cws); //#24522
        $put($_.pad, $_.pad.length - 1, 0); //#24523
        $_.cws = $_.pad; //#24524
    } //#24524
    $k[$j++] = Infinity; //#24528
    for (var _Ng = 0, _Nh = $_.size * $_.size; _Ng < _Nh; _Ng++) { //#24528
        $k[$j++] = -1; //#24528
    } //#24528
    $_.pixs = $a(); //#24528
    $_.qmv = function() {
        var _Nk = $k[--$j]; //#24529
        var _Nl = $k[--$j]; //#24529
        $k[$j++] = $f(_Nl + (_Nk * $_.size)); //#24529
    }; //#24529
    if ($_.alnn != 0) { //#24588
        $_.trmv = function() {
            var _No = $k[--$j]; //#24533
            var _Nq = $k[--$j]; //#24533
            $k[$j++] = $f(($f(($f((_No * $_.size) + $_.size)) - 1)) - _Nq); //#24533
        }; //#24533
        $_.aplot = function() {
            var _Nr = $k[--$j]; //#24535
            var _Ns = $k[--$j]; //#24535
            var _Nt = $k[--$j]; //#24535
            $k[$j++] = _Nr; //#24535
            $k[$j++] = _Nt; //#24535
            $k[$j++] = _Ns; //#24535
            $k[$j++] = _Nr; //#24535
            $k[$j++] = _Ns; //#24535
            $k[$j++] = _Nt; //#24535
            $_.trmv(); //#24535
            var _Nv = $k[--$j]; //#24535
            $put($_.pixs, _Nv, $k[--$j]); //#24535
            $_.trmv(); //#24536
            var _Ny = $k[--$j]; //#24536
            $put($_.pixs, _Ny, $k[--$j]); //#24536
        }; //#24536
        $_.i = 0; //#24538
        $_.stag = 0; //#24538
        for (;;) { //#24560
            if ($_.i >= $_.size) { //#24539
                break; //#24539
            } //#24539
            for (var _O4 = 0, _O3 = $f($_.size - 1); _O4 <= _O3; _O4 += 1) { //#24553
                $_.j = _O4; //#24541
                if ($f($_.j + $_.alnr) < $_.size) { //#24547
                    $k[$j++] = (((((~~($_.j / $_.alnk)) + $_.stag) % 2) == 0) && (!(($_.i == 0) && ($_.j < $_.alnk)))) || (($_.j % $_.alnk) == 0); //#24545
                } else { //#24547
                    $k[$j++] = ($f($_.alnn + $_.stag) % 2) == 0; //#24547
                } //#24547
                if ($k[--$j]) { //#24552
                    $k[$j++] = $_.j; //#24550
                    $k[$j++] = $_.i; //#24550
                    $k[$j++] = 1; //#24550
                    $_.aplot(); //#24550
                    var _OL = $_.j; //#24551
                    var _OM = $_.i; //#24551
                    $k[$j++] = _OL + 1; //#24551
                    $k[$j++] = _OM + 1; //#24551
                    if (((_OM + 1) < $_.size) && ((_OL + 1) < $_.size)) { //#24551
                        $k[$j++] = 0; //#24551
                        $_.aplot(); //#24551
                    } else { //#24551
                        $j -= 2; //#24551
                    } //#24551
                } //#24551
            } //#24551
            if ($f($_.i + $_.alnr) == $_.size) { //#24557
                $_.i = $f($f($_.i + $_.alnr) - 1); //#24555
            } else { //#24557
                $_.i = $f($_.i + $_.alnk); //#24557
            } //#24557
            $_.stag = 1 - $_.stag; //#24559
        } //#24559
        for (var _Ob = $_.alnk, _Oc = $_.alnk, _Oa = $f($_.size - 2); _Oc < 0 ? _Ob >= _Oa : _Ob <= _Oa; _Ob += _Oc) { //#24587
            $_.i = _Ob; //#24562
            if (((~~($_.i / $_.alnk)) % 2) != 0) { //#24574
                $k[$j++] = $_.pixs; //#24564
                $k[$j++] = 0; //#24564
                $k[$j++] = $_.i - 1; //#24564
                $_.trmv(); //#24564
                var _Oh = $k[--$j]; //#24564
                $put($k[--$j], _Oh, 0); //#24564
                $k[$j++] = $_.pixs; //#24565
                $k[$j++] = 0; //#24565
                $k[$j++] = $_.i + 1; //#24565
                $_.trmv(); //#24565
                var _Ol = $k[--$j]; //#24565
                $put($k[--$j], _Ol, 0); //#24565
                $k[$j++] = $_.pixs; //#24566
                $k[$j++] = 1; //#24566
                $k[$j++] = $_.i - 1; //#24566
                $_.trmv(); //#24566
                var _Op = $k[--$j]; //#24566
                $put($k[--$j], _Op, 0); //#24566
                $k[$j++] = $_.pixs; //#24567
                $k[$j++] = 1; //#24567
                $k[$j++] = $_.i; //#24567
                $_.trmv(); //#24567
                var _Ot = $k[--$j]; //#24567
                $put($k[--$j], _Ot, 0); //#24567
                $k[$j++] = $_.pixs; //#24568
                $k[$j++] = 1; //#24568
                $k[$j++] = $_.i + 1; //#24568
                $_.trmv(); //#24568
                var _Ox = $k[--$j]; //#24568
                $put($k[--$j], _Ox, 0); //#24568
                $k[$j++] = $_.pixs; //#24569
                $k[$j++] = $_.i - 1; //#24569
                $k[$j++] = 0; //#24569
                $_.trmv(); //#24569
                var _P1 = $k[--$j]; //#24569
                $put($k[--$j], _P1, 0); //#24569
                $k[$j++] = $_.pixs; //#24570
                $k[$j++] = $_.i + 1; //#24570
                $k[$j++] = 0; //#24570
                $_.trmv(); //#24570
                var _P5 = $k[--$j]; //#24570
                $put($k[--$j], _P5, 0); //#24570
                $k[$j++] = $_.pixs; //#24571
                $k[$j++] = $_.i - 1; //#24571
                $k[$j++] = 1; //#24571
                $_.trmv(); //#24571
                var _P9 = $k[--$j]; //#24571
                $put($k[--$j], _P9, 0); //#24571
                $k[$j++] = $_.pixs; //#24572
                $k[$j++] = $_.i; //#24572
                $k[$j++] = 1; //#24572
                $_.trmv(); //#24572
                var _PD = $k[--$j]; //#24572
                $put($k[--$j], _PD, 0); //#24572
                $k[$j++] = $_.pixs; //#24573
                $k[$j++] = $_.i + 1; //#24573
                $k[$j++] = 1; //#24573
                $_.trmv(); //#24573
                var _PH = $k[--$j]; //#24573
                $put($k[--$j], _PH, 0); //#24573
            } //#24573
            $k[$j++] = $_.pixs; //#24575
            $k[$j++] = $f($_.size - 1); //#24575
            $k[$j++] = $_.i - 1; //#24575
            $_.trmv(); //#24575
            var _PM = $k[--$j]; //#24575
            if ($get($k[--$j], _PM) != 1) { //#24586
                $k[$j++] = $_.pixs; //#24576
                $k[$j++] = $f($_.size - 1); //#24576
                $k[$j++] = $_.i - 1; //#24576
                $_.trmv(); //#24576
                var _PS = $k[--$j]; //#24576
                $put($k[--$j], _PS, 0); //#24576
                $k[$j++] = $_.pixs; //#24577
                $k[$j++] = $f($_.size - 2); //#24577
                $k[$j++] = $_.i - 1; //#24577
                $_.trmv(); //#24577
                var _PX = $k[--$j]; //#24577
                $put($k[--$j], _PX, 0); //#24577
                $k[$j++] = $_.pixs; //#24578
                $k[$j++] = $f($_.size - 2); //#24578
                $k[$j++] = $_.i; //#24578
                $_.trmv(); //#24578
                var _Pc = $k[--$j]; //#24578
                $put($k[--$j], _Pc, 0); //#24578
                $k[$j++] = $_.pixs; //#24579
                $k[$j++] = $f($_.size - 2); //#24579
                $k[$j++] = $_.i + 1; //#24579
                $_.trmv(); //#24579
                var _Ph = $k[--$j]; //#24579
                $put($k[--$j], _Ph, 0); //#24579
                $k[$j++] = $_.pixs; //#24580
                $k[$j++] = $f($_.size - 1); //#24580
                $k[$j++] = $_.i + 1; //#24580
                $_.trmv(); //#24580
                var _Pm = $k[--$j]; //#24580
                $put($k[--$j], _Pm, 0); //#24580
                $k[$j++] = $_.pixs; //#24581
                $k[$j++] = $_.i - 1; //#24581
                $k[$j++] = $f($_.size - 1); //#24581
                $_.trmv(); //#24581
                var _Pr = $k[--$j]; //#24581
                $put($k[--$j], _Pr, 0); //#24581
                $k[$j++] = $_.pixs; //#24582
                $k[$j++] = $_.i - 1; //#24582
                $k[$j++] = $f($_.size - 2); //#24582
                $_.trmv(); //#24582
                var _Pw = $k[--$j]; //#24582
                $put($k[--$j], _Pw, 0); //#24582
                $k[$j++] = $_.pixs; //#24583
                $k[$j++] = $_.i; //#24583
                $k[$j++] = $f($_.size - 2); //#24583
                $_.trmv(); //#24583
                var _Q1 = $k[--$j]; //#24583
                $put($k[--$j], _Q1, 0); //#24583
                $k[$j++] = $_.pixs; //#24584
                $k[$j++] = $_.i + 1; //#24584
                $k[$j++] = $f($_.size - 2); //#24584
                $_.trmv(); //#24584
                var _Q6 = $k[--$j]; //#24584
                $put($k[--$j], _Q6, 0); //#24584
                $k[$j++] = $_.pixs; //#24585
                $k[$j++] = $_.i + 1; //#24585
                $k[$j++] = $f($_.size - 1); //#24585
                $_.trmv(); //#24585
                var _QB = $k[--$j]; //#24585
                $put($k[--$j], _QB, 0); //#24585
            } //#24585
        } //#24585
    } //#24585
    if (!bwipp_hanxin.__24612__) { //#24612
        $_ = Object.create($_); //#24612
        $_.fpat = $a([$a([1, 1, 1, 1, 1, 1, 1, 0]), $a([1, 0, 0, 0, 0, 0, 0, 0]), $a([1, 0, 1, 1, 1, 1, 1, 0]), $a([1, 0, 1, 0, 0, 0, 0, 0]), $a([1, 0, 1, 0, 1, 1, 1, 0]), $a([1, 0, 1, 0, 1, 1, 1, 0]), $a([1, 0, 1, 0, 1, 1, 1, 0]), $a([0, 0, 0, 0, 0, 0, 0, 0])]); //#24601
        $_.fpat2 = $a([$a([1, 1, 1, 0, 1, 0, 1, 0]), $a([1, 1, 1, 0, 1, 0, 1, 0]), $a([1, 1, 1, 0, 1, 0, 1, 0]), $a([0, 0, 0, 0, 1, 0, 1, 0]), $a([1, 1, 1, 1, 1, 0, 1, 0]), $a([0, 0, 0, 0, 0, 0, 1, 0]), $a([1, 1, 1, 1, 1, 1, 1, 0]), $a([0, 0, 0, 0, 0, 0, 0, 0])]); //#24611
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_hanxin.$ctx[id] = $_[id]); //#24611
        bwipp_hanxin.__24612__ = 1; //#24611
        $_ = Object.getPrototypeOf($_); //#24611
    } //#24611
    for (var _QY = 0, _QX = $_.fpat.length - 1; _QY <= _QX; _QY += 1) { //#24624
        $_.y = _QY; //#24614
        for (var _Qc = 0, _Qb = $get($_.fpat, 0).length - 1; _Qc <= _Qb; _Qc += 1) { //#24623
            $_.x = _Qc; //#24616
            $_.fpb = $get($get($_.fpat, $_.y), $_.x); //#24617
            $_.fpb2 = $get($get($_.fpat2, $_.y), $_.x); //#24618
            $k[$j++] = $_.pixs; //#24619
            $k[$j++] = $_.x; //#24619
            $k[$j++] = $_.y; //#24619
            $_.qmv(); //#24619
            var _Qr = $k[--$j]; //#24619
            $put($k[--$j], _Qr, $_.fpb); //#24619
            $k[$j++] = $_.pixs; //#24620
            $k[$j++] = $f($f($_.size - $_.x) - 1); //#24620
            $k[$j++] = $_.y; //#24620
            $_.qmv(); //#24620
            var _Qy = $k[--$j]; //#24620
            $put($k[--$j], _Qy, $_.fpb); //#24620
            $k[$j++] = $_.pixs; //#24621
            $k[$j++] = $f($f($_.size - $_.x) - 1); //#24621
            $k[$j++] = $f($f($_.size - $_.y) - 1); //#24621
            $_.qmv(); //#24621
            var _R6 = $k[--$j]; //#24621
            $put($k[--$j], _R6, $_.fpb); //#24621
            $k[$j++] = $_.pixs; //#24622
            $k[$j++] = $_.x; //#24622
            $k[$j++] = $f($f($_.size - $_.y) - 1); //#24622
            $_.qmv(); //#24622
            var _RD = $k[--$j]; //#24622
            $put($k[--$j], _RD, $_.fpb2); //#24622
        } //#24622
    } //#24622
    $_.functionmap = $a([$a([$a([0, 8]), $a([$f($_.size - 1), $f($_.size - 9)])]), $a([$a([1, 8]), $a([$f($_.size - 2), $f($_.size - 9)])]), $a([$a([2, 8]), $a([$f($_.size - 3), $f($_.size - 9)])]), $a([$a([3, 8]), $a([$f($_.size - 4), $f($_.size - 9)])]), $a([$a([4, 8]), $a([$f($_.size - 5), $f($_.size - 9)])]), $a([$a([5, 8]), $a([$f($_.size - 6), $f($_.size - 9)])]), $a([$a([6, 8]), $a([$f($_.size - 7), $f($_.size - 9)])]), $a([$a([7, 8]), $a([$f($_.size - 8), $f($_.size - 9)])]), $a([$a([8, 8]), $a([$f($_.size - 9), $f($_.size - 9)])]), $a([$a([8, 7]), $a([$f($_.size - 9), $f($_.size - 8)])]), $a([$a([8, 6]), $a([$f($_.size - 9), $f($_.size - 7)])]), $a([$a([8, 5]), $a([$f($_.size - 9), $f($_.size - 6)])]), $a([$a([8, 4]), $a([$f($_.size - 9), $f($_.size - 5)])]), $a([$a([8, 3]), $a([$f($_.size - 9), $f($_.size - 4)])]), $a([$a([8, 2]), $a([$f($_.size - 9), $f($_.size - 3)])]), $a([$a([8, 1]), $a([$f($_.size - 9), $f($_.size - 2)])]), $a([$a([8, 0]), $a([$f($_.size - 9), $f($_.size - 1)])]), $a([$a([$f($_.size - 9), 0]), $a([8, $f($_.size - 1)])]), $a([$a([$f($_.size - 9), 1]), $a([8, $f($_.size - 2)])]), $a([$a([$f($_.size - 9), 2]), $a([8, $f($_.size - 3)])]), $a([$a([$f($_.size - 9), 3]), $a([8, $f($_.size - 4)])]), $a([$a([$f($_.size - 9), 4]), $a([8, $f($_.size - 5)])]), $a([$a([$f($_.size - 9), 5]), $a([8, $f($_.size - 6)])]), $a([$a([$f($_.size - 9), 6]), $a([8, $f($_.size - 7)])]), $a([$a([$f($_.size - 9), 7]), $a([8, $f($_.size - 8)])]), $a([$a([$f($_.size - 9), 8]), $a([8, $f($_.size - 9)])]), $a([$a([$f($_.size - 8), 8]), $a([7, $f($_.size - 9)])]), $a([$a([$f($_.size - 7), 8]), $a([6, $f($_.size - 9)])]), $a([$a([$f($_.size - 6), 8]), $a([5, $f($_.size - 9)])]), $a([$a([$f($_.size - 5), 8]), $a([4, $f($_.size - 9)])]), $a([$a([$f($_.size - 4), 8]), $a([3, $f($_.size - 9)])]), $a([$a([$f($_.size - 3), 8]), $a([2, $f($_.size - 9)])]), $a([$a([$f($_.size - 2), 8]), $a([1, $f($_.size - 9)])]), $a([$a([$f($_.size - 1), 8]), $a([0, $f($_.size - 9)])])]); //#24646
    var _U0 = $_.functionmap; //#24647
    for (var _U1 = 0, _U2 = _U0.length; _U1 < _U2; _U1++) { //#24649
        $forall($get(_U0, _U1), function() { //#24648
            $forall($k[--$j]); //#24648
            $_.qmv(); //#24648
            $put($_.pixs, $k[--$j], 0); //#24648
        }); //#24648
    } //#24648
    var _UD = $a([function() {
        $j -= 2; //#24652
        $k[$j++] = 1; //#24652
    }, function() {
        var _U7 = $k[--$j]; //#24653
        var _U8 = $k[--$j]; //#24653
        $k[$j++] = $f(_U8 + _U7) % 2; //#24653
    }, function() {
        var _U9 = $k[--$j]; //#24654
        var _UA = $k[--$j]; //#24654
        $k[$j++] = ($f(($f(_U9 + _UA) % 3) + (_UA % 3))) % 2; //#24654
    }, function() {
        var _UB = $k[--$j]; //#24655
        var _UC = $k[--$j]; //#24655
        $k[$j++] = ($f((_UC % _UB) + ($f((_UB % _UC) + ($f((_UB % 3) + (_UC % 3))))))) % 2; //#24656
    }]); //#24656
    $_.maskfuncs = _UD; //#24657
    if ($_.mask != -1) { //#24661
        $_.maskfuncs = $a([$get($_.maskfuncs, $_.mask - 1)]); //#24659
        $_.bestmaskval = $_.mask - 1; //#24660
    } //#24660
    $_.masks = $a($_.maskfuncs.length); //#24662
    for (var _UO = 0, _UN = $_.masks.length - 1; _UO <= _UN; _UO += 1) { //#24676
        $_.m = _UO; //#24664
        $_.mask = $a($_.size * $_.size); //#24665
        for (var _UU = 0, _UT = $f($_.size - 1); _UU <= _UT; _UU += 1) { //#24674
            $_.j = _UU; //#24667
            for (var _UX = 0, _UW = $f($_.size - 1); _UX <= _UW; _UX += 1) { //#24673
                $_.i = _UX; //#24669
                $k[$j++] = $_.i + 1; //#24670
                $k[$j++] = $_.j + 1; //#24670
                if ($get($_.maskfuncs, $_.m)() === true) {
                    break;
                } //#24670
                var _Ud = $k[--$j]; //#24670
                $k[$j++] = _Ud == 0; //#24671
                $k[$j++] = $_.pixs; //#24671
                $k[$j++] = $_.i; //#24671
                $k[$j++] = $_.j; //#24671
                $_.qmv(); //#24671
                var _Uh = $k[--$j]; //#24671
                var _Uj = $get($k[--$j], _Uh); //#24671
                var _Uk = $k[--$j]; //#24671
                var _Ul = (_Uk && (_Uj == -1)) ? 1 : 0; //#24671
                $k[$j++] = _Ul; //#24672
                $k[$j++] = $_.mask; //#24672
                $k[$j++] = $_.i; //#24672
                $k[$j++] = $_.j; //#24672
                $_.qmv(); //#24672
                var _Up = $k[--$j]; //#24672
                var _Uq = $k[--$j]; //#24672
                $put(_Uq, _Up, $k[--$j]); //#24672
            } //#24672
        } //#24672
        $put($_.masks, $_.m, $_.mask); //#24675
    } //#24675
    $_.posx = 0; //#24679
    $_.posy = 0; //#24680
    $_.num = 0; //#24681
    for (;;) { //#24691
        if ($_.posy == $_.size) { //#24683
            break; //#24683
        } //#24683
        $k[$j++] = $_.pixs; //#24684
        $k[$j++] = $_.posx; //#24684
        $k[$j++] = $_.posy; //#24684
        $_.qmv(); //#24684
        var _V0 = $k[--$j]; //#24684
        if ($get($k[--$j], _V0) == -1) { //#24688
            var _V5 = $get($_.cws, ~~($_.num / 8)); //#24685
            var _V7 = -(7 - ($_.num % 8)); //#24685
            $k[$j++] = ((_V7 < 0 ? _V5 >>> -_V7 : _V5 << _V7)) & 1; //#24686
            $k[$j++] = $_.pixs; //#24686
            $k[$j++] = $_.posx; //#24686
            $k[$j++] = $_.posy; //#24686
            $_.qmv(); //#24686
            var _VB = $k[--$j]; //#24686
            var _VC = $k[--$j]; //#24686
            $put(_VC, _VB, $k[--$j]); //#24686
            $_.num = $_.num + 1; //#24687
        } //#24687
        $_.posx = $_.posx + 1; //#24689
        if ($_.posx == $_.size) { //#24690
            $_.posx = 0; //#24690
            $_.posy = $_.posy + 1; //#24690
        } //#24690
    } //#24690
    $_.evalfulln1n3 = function() {
        $_.scrle = $k[--$j]; //#24695
        $k[$j++] = 'scr1'; //#24697
        $k[$j++] = 0; //#24697
        $forall($_.scrle, function() { //#24697
            var _VL = $k[--$j]; //#24697
            $k[$j++] = _VL; //#24697
            if (_VL >= 3) { //#24697
                var _VM = $k[--$j]; //#24697
                var _VO = $f($k[--$j] + (_VM * 4)); //#24697
                $k[$j++] = _VO; //#24697
                $k[$j++] = _VO; //#24697
            } //#24697
            $j--; //#24697
        }); //#24697
        var _VP = $k[--$j]; //#24697
        $_[$k[--$j]] = _VP; //#24697
        $_.scr3 = 0; //#24698
        for (var _VT = 5, _VS = $_.scrle.length - 1; _VT <= _VS; _VT += 2) { //#24714
            $_.j = _VT; //#24701
            if (($get($_.scrle, $_.j) % 3) == 0) { //#24713
                $_.fact = ~~($get($_.scrle, $_.j) / 3); //#24703
                var _Vc = $geti($_.scrle, $_.j - 4, 4); //#24704
                for (var _Vd = 0, _Ve = _Vc.length; _Vd < _Ve; _Vd++) { //#24704
                    $k[$j++] = $get(_Vc, _Vd) == $_.fact; //#24704
                } //#24704
                var _Vh = $k[--$j]; //#24704
                var _Vi = $k[--$j]; //#24704
                var _Vj = $k[--$j]; //#24704
                var _Vk = $k[--$j]; //#24704
                if (_Vk && (_Vj && (_Vi && _Vh))) { //#24712
                    if (($_.j == 5) || (($_.j + 2) >= $_.scrle.length)) { //#24709
                        $_.scr3 = $_.scr3 + 50; //#24706
                    } else { //#24709
                        if (($get($_.scrle, $_.j - 5) >= 3) || ($get($_.scrle, $_.j + 1) >= 3)) { //#24710
                            $_.scr3 = $_.scr3 + 50; //#24709
                        } //#24709
                    } //#24709
                } //#24709
            } //#24709
        } //#24709
        for (var _Vy = 1, _Vx = $_.scrle.length - 5; _Vy <= _Vx; _Vy += 2) { //#24730
            $_.j = _Vy; //#24717
            if (($get($_.scrle, $_.j) % 3) == 0) { //#24729
                $_.fact = ~~($get($_.scrle, $_.j) / 3); //#24719
                var _W7 = $geti($_.scrle, $_.j + 1, 4); //#24720
                for (var _W8 = 0, _W9 = _W7.length; _W8 < _W9; _W8++) { //#24720
                    $k[$j++] = $get(_W7, _W8) == $_.fact; //#24720
                } //#24720
                var _WC = $k[--$j]; //#24720
                var _WD = $k[--$j]; //#24720
                var _WE = $k[--$j]; //#24720
                var _WF = $k[--$j]; //#24720
                if (_WF && (_WE && (_WD && _WC))) { //#24728
                    if (($_.j == 1) || (($_.j + 6) >= $_.scrle.length)) { //#24725
                        $_.scr3 = $_.scr3 + 50; //#24722
                    } else { //#24725
                        if (($get($_.scrle, $_.j - 1) >= 3) || ($get($_.scrle, $_.j + 5) >= 3)) { //#24726
                            $_.scr3 = $_.scr3 + 50; //#24725
                        } //#24725
                    } //#24725
                } //#24725
            } //#24725
        } //#24725
        $k[$j++] = $_.scr1; //#24731
        $k[$j++] = $_.scr3; //#24731
    }; //#24731
    $_.evalfull = function() {
        $_.sym = $k[--$j]; //#24736
        $_.n1 = 0; //#24738
        $_.n3 = 0; //#24738
        $_.rle = $a($f($_.size + 1)); //#24739
        $_.lastpairs = $a($_.size); //#24740
        $_.thispairs = $a($_.size); //#24741
        $_.sizeadd1 = $f($_.size + 1); //#24742
        for (var _Wd = 0, _Wc = $f($_.size - 1); _Wd <= _Wc; _Wd += 1) { //#24767
            $_.i = _Wd; //#24744
            $k[$j++] = Infinity; //#24747
            var _Wf = $_.size; //#24748
            $k[$j++] = 0; //#24750
            $k[$j++] = 0; //#24750
            for (var _Wh = $_.i, _Wi = _Wf, _Wg = $f((_Wf * _Wf) - 1); _Wi < 0 ? _Wh >= _Wg : _Wh <= _Wg; _Wh += _Wi) { //#24750
                var _Wk = $get($_.sym, _Wh); //#24749
                var _Wl = $k[--$j]; //#24749
                $k[$j++] = _Wk; //#24749
                if ($eq(_Wl, _Wk)) { //#24749
                    var _Wm = $k[--$j]; //#24749
                    var _Wn = $k[--$j]; //#24749
                    $k[$j++] = $f(_Wn + 1); //#24749
                    $k[$j++] = _Wm; //#24749
                } else { //#24749
                    var _Wo = $k[--$j]; //#24749
                    $k[$j++] = 1; //#24749
                    $k[$j++] = _Wo; //#24749
                } //#24749
            } //#24749
            $j--; //#24751
            var _Wq = $counttomark() + 2; //#24752
            $astore($geti($_.rle, 0, _Wq - 2)); //#24752
            $_.evalfulln1n3(); //#24753
            $_.n3 = $f($k[--$j] + $_.n3); //#24753
            $_.n1 = $f($k[--$j] + $_.n1); //#24753
            $j--; //#24754
            $_.symrow = $geti($_.sym, $_.i * $_.size, $_.size); //#24757
            $k[$j++] = Infinity; //#24758
            var _X1 = $_.symrow; //#24759
            $k[$j++] = 0; //#24761
            $k[$j++] = 0; //#24761
            for (var _X2 = 0, _X3 = _X1.length; _X2 < _X3; _X2++) { //#24761
                var _X4 = $get(_X1, _X2); //#24761
                var _X5 = $k[--$j]; //#24760
                $k[$j++] = _X4; //#24760
                if ($eq(_X5, _X4)) { //#24760
                    var _X6 = $k[--$j]; //#24760
                    var _X7 = $k[--$j]; //#24760
                    $k[$j++] = $f(_X7 + 1); //#24760
                    $k[$j++] = _X6; //#24760
                } else { //#24760
                    var _X8 = $k[--$j]; //#24760
                    $k[$j++] = 1; //#24760
                    $k[$j++] = _X8; //#24760
                } //#24760
            } //#24760
            $j--; //#24762
            var _XA = $counttomark() + 2; //#24763
            $astore($geti($_.rle, 0, _XA - 2)); //#24763
            $_.evalfulln1n3(); //#24764
            $_.n3 = $f($k[--$j] + $_.n3); //#24764
            $_.n1 = $f($k[--$j] + $_.n1); //#24764
            $j--; //#24765
        } //#24765
        $k[$j++] = $f($_.n1 + $_.n3); //#24769
    }; //#24769
    $_.bestscore = 999999999; //#24773
    for (var _XK = 0, _XJ = $_.masks.length - 1; _XK <= _XJ; _XK += 1) { //#24791
        $_.m = _XK; //#24775
        $_.masksym = $a($_.size * $_.size); //#24776
        for (var _XR = 0, _XQ = $f(($_.size * $_.size) - 1); _XR <= _XQ; _XR += 1) { //#24780
            $_.i = _XR; //#24778
            $put($_.masksym, $_.i, $xo($get($_.pixs, $_.i), $get($get($_.masks, $_.m), $_.i))); //#24779
        } //#24779
        if ($_.masks.length != 1) { //#24789
            $k[$j++] = $_.masksym; //#24782
            $_.evalfull(); //#24782
            $_.score = $k[--$j]; //#24782
            if ($_.score < $_.bestscore) { //#24787
                $_.bestsym = $_.masksym; //#24784
                $_.bestmaskval = $_.m; //#24785
                $_.bestscore = $_.score; //#24786
            } //#24786
        } else { //#24789
            $_.bestsym = $_.masksym; //#24789
        } //#24789
    } //#24789
    $_.pixs = $_.bestsym; //#24792
    $_.funval = (((((~~($f($_.size - 21) / 2)) + 20) * 4) + $_.eclval) * 4) + $_.bestmaskval; //#24795
    $k[$j++] = $a([($_.funval & 3840) >>> 8, ($_.funval & 240) >>> 4, $_.funval & 15]); //#24799
    $k[$j++] = 4; //#24799
    $k[$j++] = 16; //#24799
    $k[$j++] = 19; //#24799
    $_.rscodes(); //#24799
    $_.funvals = $k[--$j]; //#24799
    $k[$j++] = Infinity; //#24800
    $forall($_.funvals, function() { //#24803
        $k[$j++] = 4; //#24802
        $_.tobin(); //#24802
        $forall($k[--$j], function() { //#24802
            var _Xw = $k[--$j]; //#24802
            $k[$j++] = $f(_Xw - 48); //#24802
        }); //#24802
    }); //#24802
    $k[$j++] = 0; //#24804
    $k[$j++] = 1; //#24804
    $k[$j++] = 0; //#24804
    $k[$j++] = 1; //#24804
    $k[$j++] = 0; //#24804
    $k[$j++] = 1; //#24804
    $_.funbits = $a(); //#24804
    for (var _Y0 = 0, _Xz = $_.functionmap.length - 1; _Y0 <= _Xz; _Y0 += 1) { //#24811
        $_.i = _Y0; //#24807
        $forall($get($_.functionmap, $_.i), function() { //#24810
            var _Y5 = $k[--$j]; //#24809
            $k[$j++] = $_.pixs; //#24809
            $aload(_Y5); //#24809
            $_.qmv(); //#24809
            var _Y9 = $k[--$j]; //#24809
            $put($k[--$j], _Y9, $get($_.funbits, $_.i)); //#24809
        }); //#24809
    } //#24809
    var _YH = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $_.pixs],
        ["pixx", $_.size],
        ["pixy", $_.size],
        ["height", ($_.size * 2) / 72],
        ["width", ($_.size * 2) / 72],
        ["borderleft", 3],
        ["borderright", 3],
        ["bordertop", 3],
        ["borderbottom", 3],
        ["opt", $_.options]
    ]); //#24825
    $k[$j++] = _YH; //#24828
    if (!$_.dontdraw) { //#24828
        bwipp_renmatrix(); //#24828
    } //#24828
    $_ = Object.getPrototypeOf($_); //#24830
    $_ = Object.getPrototypeOf($_); //#24832
} //bwipp_hanxin
function bwipp_dotcode() {
    $_ = Object.create($_); //#24863
    $_.dontdraw = false; //#24866
    $_.rows = -1; //#24867
    $_.columns = -1; //#24868
    $_.ratio = -1; //#24869
    $_.parse = false; //#24870
    $_.parsefnc = false; //#24871
    $_.raw = false; //#24872
    $_.fast = false; //#24873
    $_.mask = -1; //#24874
    $k[$j++] = $_; //#24876
    bwipp_processoptions(); //#24876
    $_.options = $k[--$j]; //#24876
    $_.barcode = $k[--$j]; //#24877
    if ($_.rows != -1) { //#24883
        if ($_.rows < 5) { //#24882
            $k[$j++] = 'bwipp.dotcodeBadRows#24881'; //#24881
            $k[$j++] = "There must be at least 5 rows"; //#24881
            bwipp_raiseerror(); //#24881
        } //#24881
    } //#24881
    if ($_.columns != -1) { //#24889
        if ($_.columns < 5) { //#24888
            $k[$j++] = 'bwipp.dotcodeBadColumns#24887'; //#24887
            $k[$j++] = "There must be at least 5 columns"; //#24887
            bwipp_raiseerror(); //#24887
        } //#24887
    } //#24887
    if ((($_.rows != -1) && ($_.columns != -1)) && ((($_.rows + $_.columns) % 2) != 1)) { //#24893
        $k[$j++] = 'bwipp.dotcodeRowsColumnsBadParity#24892'; //#24892
        $k[$j++] = "Sum of rows and columns must be odd"; //#24892
        bwipp_raiseerror(); //#24892
    } //#24892
    if ((($_.ratio == -1) && ($_.rows == -1)) && ($_.columns == -1)) { //#24898
        $_.ratio = 3 / 2; //#24897
    } //#24897
    if ($_.ratio != -1) { //#24903
        if ($_.ratio <= 0) { //#24902
            $k[$j++] = 'bwipp.dotcodeRatio#24901'; //#24901
            $k[$j++] = "The ratio must be greater than 0"; //#24901
            bwipp_raiseerror(); //#24901
        } //#24901
    } //#24901
    if ($_.mask != -1) { //#24909
        if (($_.mask < 0) || ($_.mask > 3)) { //#24908
            $k[$j++] = 'bwipp.dotcodeBadMask#24907'; //#24907
            $k[$j++] = "Valid mask values are 0 to 3"; //#24907
            bwipp_raiseerror(); //#24907
        } //#24907
    } //#24907
    bwipp_loadctx(bwipp_dotcode) //#24911
    if (!bwipp_dotcode.__24924__) { //#24924
        $_ = Object.create($_); //#24924
        $_.laa = -1; //#24915
        $_.lab = -2; //#24915
        $_.lac = -3; //#24915
        $_.bin = -4; //#24915
        $_.sfa = -5; //#24916
        $_.sfb = -6; //#24916
        $_.sb2 = -7; //#24916
        $_.sb3 = -8; //#24916
        $_.sb4 = -9; //#24917
        $_.sb5 = -10; //#24917
        $_.sb6 = -11; //#24917
        $_.sfc = -12; //#24917
        $_.sc2 = -13; //#24918
        $_.sc3 = -14; //#24918
        $_.sc4 = -15; //#24918
        $_.sc5 = -16; //#24918
        $_.sc6 = -17; //#24919
        $_.sc7 = -18; //#24919
        $_.bsa = -19; //#24919
        $_.bsb = -20; //#24919
        $_.tma = -21; //#24920
        $_.tmb = -22; //#24920
        $_.tmc = -23; //#24920
        $_.tms = -24; //#24920
        $_.fn1 = -25; //#24921
        $_.fn2 = -26; //#24921
        $_.fn3 = -27; //#24921
        $_.crl = -28; //#24921
        $_.aim = -29; //#24922
        $_.m05 = -30; //#24922
        $_.m06 = -31; //#24922
        $_.m12 = -32; //#24922
        $_.mac = -33; //#24923
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_dotcode.$ctx[id] = $_[id]); //#24923
        bwipp_dotcode.__24924__ = 1; //#24923
        $_ = Object.getPrototypeOf($_); //#24923
    } //#24923
    var _N = new Map([
        ["parse", $_.parse],
        ["parsefnc", $_.parsefnc],
        ["eci", true],
        ["FNC1", $_.fn1],
        ["FNC3", $_.fn3]
    ]); //#24933
    $_.fncvals = _N; //#24934
    $k[$j++] = 'msg'; //#24935
    $k[$j++] = $_.barcode; //#24935
    $k[$j++] = $_.fncvals; //#24935
    bwipp_parseinput(); //#24935
    var _Q = $k[--$j]; //#24935
    $_[$k[--$j]] = _Q; //#24935
    $_.msglen = $_.msg.length; //#24936
    var _T = $_.msg; //#24939
    $k[$j++] = 'numecis'; //#24939
    $k[$j++] = 0; //#24939
    for (var _U = 0, _V = _T.length; _U < _V; _U++) { //#24939
        if ($get(_T, _U) <= -1000000) { //#24939
            var _X = $k[--$j]; //#24939
            $k[$j++] = $f(_X + 1); //#24939
        } //#24939
    } //#24939
    var _Y = $k[--$j]; //#24939
    $_[$k[--$j]] = _Y; //#24939
    $_.msgtmp = $a($f($_.msg.length + ($_.numecis * 6))); //#24940
    $_.j = 0; //#24941
    for (var _f = 0, _e = $_.msg.length - 1; _f <= _e; _f += 1) { //#24952
        var _h = $get($_.msg, _f); //#24943
        $k[$j++] = _h; //#24951
        if (_h <= -1000000) { //#24950
            var _l = $geti($cvrs($s(7), -$k[--$j], 10), 1, 6); //#24944
            for (var _m = 0, _n = _l.length; _m < _n; _m++) { //#24944
                $k[$j++] = $get(_l, _m); //#24944
            } //#24944
            $astore($a(6)); //#24944
            $puti($_.msgtmp, $_.j + 1, $k[--$j]); //#24945
            $put($_.msgtmp, $_.j, $_.fn2); //#24946
            $_.j = $_.j + 7; //#24947
        } else { //#24950
            $put($_.msgtmp, $_.j, $k[--$j]); //#24949
            $_.j = $_.j + 1; //#24950
        } //#24950
    } //#24950
    $_.msg = $_.msgtmp; //#24953
    $_.msglen = $_.msg.length; //#24954
    if (!bwipp_dotcode.__25023__) { //#25023
        $_ = Object.create($_); //#25023
        $_.charmaps = $a([$a([32, 32, "00"]), $a(["!", "!", "01"]), $a(["\"", "\"", "02"]), $a(["#", "#", "03"]), $a(["$", "$", "04"]), $a(["%", "%", "05"]), $a(["&", "&", "06"]), $a(["'", "'", "07"]), $a([40, 40, "08"]), $a([41, 41, "09"]), $a(["*", "*", "10"]), $a(["+", "+", "11"]), $a([",", ",", "12"]), $a(["-", "-", "13"]), $a([".", ".", "14"]), $a(["/", "/", "15"]), $a(["0", "0", "16"]), $a(["1", "1", "17"]), $a(["2", "2", "18"]), $a(["3", "3", "19"]), $a(["4", "4", "20"]), $a(["5", "5", "21"]), $a(["6", "6", "22"]), $a(["7", "7", "23"]), $a(["8", "8", "24"]), $a(["9", "9", "25"]), $a([":", ":", "26"]), $a([";", ";", "27"]), $a(["<", "<", "28"]), $a(["=", "=", "29"]), $a([">", ">", "30"]), $a(["?", "?", "31"]), $a(["@", "@", "32"]), $a(["A", "A", "33"]), $a(["B", "B", "34"]), $a(["C", "C", "35"]), $a(["D", "D", "36"]), $a(["E", "E", "37"]), $a(["F", "F", "38"]), $a(["G", "G", "39"]), $a(["H", "H", "40"]), $a(["I", "I", "41"]), $a(["J", "J", "42"]), $a(["K", "K", "43"]), $a(["L", "L", "44"]), $a(["M", "M", "45"]), $a(["N", "N", "46"]), $a(["O", "O", "47"]), $a(["P", "P", "48"]), $a(["Q", "Q", "49"]), $a(["R", "R", "50"]), $a(["S", "S", "51"]), $a(["T", "T", "52"]), $a(["U", "U", "53"]), $a(["V", "V", "54"]), $a(["W", "W", "55"]), $a(["X", "X", "56"]), $a(["Y", "Y", "57"]), $a(["Z", "Z", "58"]), $a(["[", "[", "59"]), $a([92, 92, "60"]), $a(["]", "]", "61"]), $a(["^", "^", "62"]), $a(["_", "_", "63"]), $a([0, "`", "64"]), $a([1, "a", "65"]), $a([2, "b", "66"]), $a([3, "c", "67"]), $a([4, "d", "68"]), $a([5, "e", "69"]), $a([6, "f", "70"]), $a([7, "g", "71"]), $a([8, "h", "72"]), $a([9, "i", "73"]), $a([10, "j", "74"]), $a([11, "k", "75"]), $a([12, "l", "76"]), $a([13, "m", "77"]), $a([14, "n", "78"]), $a([15, "o", "79"]), $a([16, "p", "80"]), $a([17, "q", "81"]), $a([18, "r", "82"]), $a([19, "s", "83"]), $a([20, "t", "84"]), $a([21, "u", "85"]), $a([22, "v", "86"]), $a([23, "w", "87"]), $a([24, "x", "88"]), $a([25, "y", "89"]), $a([26, "z", "90"]), $a([27, "{", "91"]), $a([28, "|", "92"]), $a([29, "}", "93"]), $a([30, "~", "94"]), $a([31, 127, "95"]), $a([$_.sfb, $_.crl, "96"]), $a([$_.sb2, 9, "97"]), $a([$_.sb3, 28, "98"]), $a([$_.sb4, 29, "99"]), $a([$_.sb5, 30, $_.aim]), $a([$_.sb6, $_.sfa, $_.laa]), $a([$_.lab, $_.laa, $_.sfb]), $a([$_.sc2, $_.sc2, $_.sb2]), $a([$_.sc3, $_.sc3, $_.sb3]), $a([$_.sc4, $_.sc4, $_.sb4]), $a([$_.lac, $_.lac, $_.lab]), $a([$_.fn1, $_.fn1, $_.fn1]), $a([$_.fn2, $_.fn2, $_.fn2]), $a([$_.fn3, $_.fn3, $_.fn3]), $a([$_.bsa, $_.bsa, $_.bsa]), $a([$_.bsb, $_.bsb, $_.bsb]), $a([$_.bin, $_.bin, $_.bin])]); //#24998
        $_.charvals = $a([new Map, new Map, new Map]); //#25001
        for (var _3d = 0, _3c = $_.charmaps.length - 1; _3d <= _3c; _3d += 1) { //#25010
            $_.i = _3d; //#25003
            $_.encs = $get($_.charmaps, $_.i); //#25004
            for (var _3h = 0; _3h <= 2; _3h += 1) { //#25009
                $_.j = _3h; //#25006
                var _3k = $get($_.encs, $_.j); //#25007
                $k[$j++] = _3k; //#25007
                if ($eq($type(_3k), 'stringtype')) { //#25007
                    var _3n = $get($k[--$j], 0); //#25007
                    $k[$j++] = _3n; //#25007
                } //#25007
                $put($get($_.charvals, $_.j), $k[--$j], $_.i); //#25008
            } //#25008
        } //#25008
        $_.Avals = $get($_.charvals, 0); //#25011
        $_.Bvals = $get($_.charvals, 1); //#25012
        $put($_.Bvals, $_.m05, 97); //#25013
        $put($_.Bvals, $_.m06, 98); //#25014
        $put($_.Bvals, $_.m12, 99); //#25015
        $put($_.Bvals, $_.mac, 100); //#25016
        $_.Cvals = $get($_.charvals, 2); //#25017
        $k[$j++] = Infinity; //#25018
        var _4H = $a([$_.sc2, $_.sc3, $_.sc4, $_.sc5, $_.sc6, $_.sc7, $_.tma, $_.tmb, $_.tmc, $_.tms]); //#25019
        $k[$j++] = 102; //#25019
        for (var _4I = 0, _4J = _4H.length; _4I < _4J; _4I++) { //#25019
            var _4M = $f($k[--$j] + 1); //#25019
            $k[$j++] = $get(_4H, _4I); //#25019
            $k[$j++] = _4M; //#25019
            $k[$j++] = _4M; //#25019
        } //#25019
        $j--; //#25019
        $_.BINvals = $d(); //#25020
        $_.A = 0; //#25022
        $_.B = 1; //#25022
        $_.C = 2; //#25022
        $_.BIN = 3; //#25022
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_dotcode.$ctx[id] = $_[id]); //#25022
        bwipp_dotcode.__25023__ = 1; //#25022
        $_ = Object.getPrototypeOf($_); //#25022
    } //#25022
    $k[$j++] = Infinity; //#25026
    for (var _4Q = 0, _4R = $_.msglen + 1; _4Q < _4R; _4Q++) { //#25026
        $k[$j++] = 0; //#25026
    } //#25026
    $_.nDigits = $a(); //#25026
    $k[$j++] = Infinity; //#25027
    for (var _4U = 0, _4V = $_.msglen + 1; _4U < _4V; _4U++) { //#25027
        $k[$j++] = false; //#25027
    } //#25027
    $_.SeventeenTen = $a(); //#25027
    $k[$j++] = Infinity; //#25028
    for (var _4Y = 0, _4Z = $_.msglen + 1; _4Y < _4Z; _4Y++) { //#25028
        $k[$j++] = false; //#25028
    } //#25028
    $_.ECI = $a(); //#25028
    $k[$j++] = Infinity; //#25029
    for (var _4c = 0, _4d = $_.msglen + 1; _4c < _4d; _4c++) { //#25029
        $k[$j++] = false; //#25029
    } //#25029
    $_.DatumA = $a(); //#25029
    $k[$j++] = Infinity; //#25030
    for (var _4g = 0, _4h = $_.msglen + 1; _4g < _4h; _4g++) { //#25030
        $k[$j++] = false; //#25030
    } //#25030
    $_.DatumB = $a(); //#25030
    $k[$j++] = Infinity; //#25031
    for (var _4k = 0, _4l = $_.msglen + 1; _4k < _4l; _4k++) { //#25031
        $k[$j++] = false; //#25031
    } //#25031
    $_.DatumC = $a(); //#25031
    $k[$j++] = Infinity; //#25032
    for (var _4o = 0, _4p = $_.msglen + 8; _4o < _4p; _4o++) { //#25032
        $k[$j++] = false; //#25032
    } //#25032
    $_.Binary = $a(); //#25032
    $k[$j++] = Infinity; //#25033
    for (var _4s = 0, _4t = $_.msglen + 1; _4s < _4t; _4s++) { //#25033
        $k[$j++] = 0; //#25033
    } //#25033
    $_.AheadC = $a(); //#25033
    $k[$j++] = Infinity; //#25034
    for (var _4w = 0, _4x = $_.msglen + 1; _4w < _4x; _4w++) { //#25034
        $k[$j++] = 0; //#25034
    } //#25034
    $_.TryC = $a(); //#25034
    $k[$j++] = Infinity; //#25035
    for (var _50 = 0, _51 = $_.msglen + 1; _50 < _51; _50++) { //#25035
        $k[$j++] = 0; //#25035
    } //#25035
    $_.AheadA = $a(); //#25035
    $k[$j++] = Infinity; //#25036
    for (var _54 = 0, _55 = $_.msglen + 1; _54 < _55; _54++) { //#25036
        $k[$j++] = 0; //#25036
    } //#25036
    $_.AheadB = $a(); //#25036
    $k[$j++] = Infinity; //#25037
    for (var _58 = 0, _59 = $_.msglen + 1; _58 < _59; _58++) { //#25037
        $k[$j++] = 0; //#25037
    } //#25037
    $_.UntilEndSeg = $a(); //#25037
    for (var _5C = $_.msglen - 1; _5C >= 0; _5C -= 1) { //#25092
        $_.i = _5C; //#25039
        $_.barchar = $get($_.msg, $_.i); //#25040
        if (($_.barchar >= 48) && ($_.barchar <= 57)) { //#25043
            $put($_.nDigits, $_.i, $f($get($_.nDigits, $_.i + 1) + 1)); //#25042
        } //#25042
        var _5P = $get($_.Avals, $_.barchar) !== undefined; //#25044
        if (_5P) { //#25044
            $put($_.DatumA, $_.i, true); //#25044
        } //#25044
        var _5U = $get($_.Bvals, $_.barchar) !== undefined; //#25045
        if (_5U) { //#25045
            $put($_.DatumB, $_.i, true); //#25045
        } //#25045
        $_.CRLF = false; //#25046
        if (($_.barchar == 13) && ($_.i < ($_.msglen - 1))) { //#25049
            if ($get($_.msg, $_.i + 1) == 10) { //#25048
                $_.CRLF = true; //#25048
            } //#25048
        } //#25048
        if ($_.CRLF) { //#25050
            $put($_.DatumB, $_.i, true); //#25050
        } //#25050
        if ($get($_.nDigits, $_.i) >= 2) { //#25051
            $put($_.DatumC, $_.i, true); //#25051
        } //#25051
        if ($_.barchar < 0) { //#25052
            $put($_.DatumC, $_.i, true); //#25052
        } //#25052
        if ($_.barchar >= 128) { //#25053
            $put($_.Binary, $_.i, true); //#25053
        } //#25053
        if ($get($_.nDigits, $_.i) >= 10) { //#25067
            $k[$j++] = Infinity; //#25055
            $aload($geti($_.msg, $_.i, 10)); //#25056
            for (var _5x = 0, _5y = 1; _5x < _5y; _5x++) { //#25064
                if ($k[--$j] != 48) { //#25058
                    $k[$j++] = false; //#25058
                    break; //#25058
                } //#25058
                if ($k[--$j] != 49) { //#25059
                    $k[$j++] = false; //#25059
                    break; //#25059
                } //#25059
                $j -= 6; //#25060
                if ($k[--$j] != 55) { //#25061
                    $k[$j++] = false; //#25061
                    break; //#25061
                } //#25061
                if ($k[--$j] != 49) { //#25062
                    $k[$j++] = false; //#25062
                    break; //#25062
                } //#25062
                $k[$j++] = true; //#25063
            } //#25063
            $put($_.SeventeenTen, $_.i, $k[--$j]); //#25065
            $cleartomark(); //#25066
        } //#25066
        if (($get($_.nDigits, $_.i + 1) >= 6) && ($get($_.msg, $_.i) == $_.fn2)) { //#25070
            $put($_.ECI, $_.i, true); //#25069
        } //#25069
        if (($_.barchar < 0) && ($_.barchar != $_.fn3)) { //#25077
            $put($_.AheadC, $_.i, $f($get($_.AheadC, $_.i + 1) + 1)); //#25072
        } else { //#25077
            if ($get($_.nDigits, $_.i) <= 1) { //#25077
                $put($_.AheadC, $_.i, 0); //#25075
            } else { //#25077
                $put($_.AheadC, $_.i, $f($get($_.AheadC, $_.i + 2) + 1)); //#25077
            } //#25077
        } //#25077
        if (($get($_.nDigits, $_.i) > 0) && $gt($get($_.AheadC, $_.i), $get($_.AheadC, $_.i + 1))) { //#25082
            $put($_.TryC, $_.i, $get($_.AheadC, $_.i)); //#25081
        } //#25081
        if (($get($_.DatumA, $_.i) && ($get($_.TryC, $_.i) < 2)) && ($_.barchar != $_.fn3)) { //#25085
            $put($_.AheadA, $_.i, $f($get($_.AheadA, $_.i + 1) + 1)); //#25084
        } //#25084
        if (($get($_.DatumB, $_.i) && ($get($_.TryC, $_.i) < 2)) && ($_.barchar != $_.fn3)) { //#25088
            $k[$j++] = $_.AheadB; //#25087
            $k[$j++] = $_.i; //#25087
            $k[$j++] = $_.AheadB; //#25087
            $k[$j++] = $_.i + 1; //#25087
            if ($_.CRLF) { //#25087
                var _7B = $k[--$j]; //#25087
                $k[$j++] = $f(_7B + 1); //#25087
            } //#25087
            var _7C = $k[--$j]; //#25087
            var _7E = $get($k[--$j], _7C); //#25087
            var _7F = $k[--$j]; //#25087
            $put($k[--$j], _7F, $f(_7E + 1)); //#25087
        } //#25087
        if ($_.barchar != $_.fn3) { //#25091
            $put($_.UntilEndSeg, $_.i, $f($get($_.UntilEndSeg, $_.i + 1) + 1)); //#25090
        } //#25090
    } //#25090
    $_.addtocws = function() {
        var _7O = $k[--$j]; //#25095
        $puti($_.cws, $_.j, _7O); //#25095
        $_.j = _7O.length + $_.j; //#25096
    }; //#25096
    $_.base259to103 = function() {
        $_.in = $k[--$j]; //#25101
        $_.inlen = $_.in.length; //#25102
        $k[$j++] = Infinity; //#25103
        for (var _7V = 0, _7W = 5 - $_.inlen; _7V < _7W; _7V++) { //#25103
            $k[$j++] = 0; //#25103
        } //#25103
        $aload($_.in); //#25103
        $_.in = $a(); //#25103
        $_.out = $a(6); //#25104
        $k[$j++] = Infinity; //#25105
        $aload($geti($_.in, 0, 2)); //#25105
        $_.msbs = $a(); //#25105
        $k[$j++] = Infinity; //#25106
        $aload($_.msbs); //#25107
        var _7e = $k[--$j]; //#25107
        var _7f = $k[--$j]; //#25107
        $k[$j++] = $f(_7e + (_7f * 259)); //#25108
        for (var _7g = 0, _7h = 2; _7g < _7h; _7g++) { //#25108
            var _7i = $k[--$j]; //#25108
            $k[$j++] = _7i % 103; //#25108
            $k[$j++] = ~~(_7i / 103); //#25108
        } //#25108
        $_.mscs = $a(); //#25108
        $k[$j++] = Infinity; //#25110
        $aload($geti($_.in, 2, 3)); //#25110
        $_.lsbs = $a(); //#25110
        $k[$j++] = Infinity; //#25111
        $aload($_.lsbs); //#25112
        var _7o = $k[--$j]; //#25112
        var _7p = $k[--$j]; //#25112
        var _7q = $k[--$j]; //#25112
        $k[$j++] = $f(($f(_7o + (_7p * 259))) + (_7q * 67081)); //#25113
        for (var _7r = 0, _7s = 3; _7r < _7s; _7r++) { //#25113
            var _7t = $k[--$j]; //#25113
            $k[$j++] = _7t % 103; //#25113
            $k[$j++] = ~~(_7t / 103); //#25113
        } //#25113
        $_.lscs = $a(); //#25113
        var _7w = $get($_.lscs, 0); //#25115
        var _7y = $get($_.mscs, 0); //#25115
        $put($_.out, 5, ($f(_7w + (_7y * 42))) % 103); //#25116
        var _81 = $get($_.lscs, 1); //#25117
        var _83 = $get($_.mscs, 0); //#25117
        var _85 = $get($_.mscs, 1); //#25117
        $put($_.out, 4, ($f(($f(($f((~~(($f(_7w + (_7y * 42))) / 103)) + _81)) + (_83 * 68))) + (_85 * 42))) % 103); //#25118
        var _88 = $get($_.lscs, 2); //#25119
        var _8A = $get($_.mscs, 0); //#25119
        var _8C = $get($_.mscs, 1); //#25119
        var _8E = $get($_.mscs, 2); //#25119
        $put($_.out, 3, ($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_7w + (_7y * 42))) / 103)) + _81)) + (_83 * 68))) + (_85 * 42))) / 103)) + _88)) + (_8A * 92))) + (_8C * 68))) + (_8E * 42))) % 103); //#25120
        var _8H = $get($_.lscs, 3); //#25121
        var _8J = $get($_.mscs, 0); //#25121
        var _8L = $get($_.mscs, 1); //#25121
        var _8N = $get($_.mscs, 2); //#25121
        $put($_.out, 2, ($f(($f(($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_7w + (_7y * 42))) / 103)) + _81)) + (_83 * 68))) + (_85 * 42))) / 103)) + _88)) + (_8A * 92))) + (_8C * 68))) + (_8E * 42))) / 103)) + _8H)) + (_8J * 15))) + (_8L * 92))) + (_8N * 68))) % 103); //#25122
        var _8Q = $get($_.mscs, 1); //#25123
        var _8S = $get($_.mscs, 2); //#25123
        $put($_.out, 1, ($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_7w + (_7y * 42))) / 103)) + _81)) + (_83 * 68))) + (_85 * 42))) / 103)) + _88)) + (_8A * 92))) + (_8C * 68))) + (_8E * 42))) / 103)) + _8H)) + (_8J * 15))) + (_8L * 92))) + (_8N * 68))) / 103)) + (_8Q * 15))) + (_8S * 92))) % 103); //#25124
        $put($_.out, 0, ($f((~~(($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_7w + (_7y * 42))) / 103)) + _81)) + (_83 * 68))) + (_85 * 42))) / 103)) + _88)) + (_8A * 92))) + (_8C * 68))) + (_8E * 42))) / 103)) + _8H)) + (_8J * 15))) + (_8L * 92))) + (_8N * 68))) / 103)) + (_8Q * 15))) + (_8S * 92))) / 103)) + ($get($_.mscs, 2) * 15))) % 103); //#25126
        $k[$j++] = $geti($_.out, (6 - $_.inlen) - 1, $_.inlen + 1); //#25127
    }; //#25127
    $_.finaliseBIN = function() {
        if ($_.bpos != 0) { //#25134
            $k[$j++] = $geti($_.bvals, 0, $_.bpos); //#25132
            $_.base259to103(); //#25132
            $aload($k[--$j]); //#25132
            $_.bpos = 0; //#25133
        } //#25133
    }; //#25133
    $_.addtobin = function() {
        $put($_.bvals, $_.bpos, $k[--$j]); //#25138
        $_.bpos = $_.bpos + 1; //#25139
        if ($_.bpos == 5) { //#25140
            $_.finaliseBIN(); //#25140
        } //#25140
    }; //#25140
    $_.ECIabc = function() {
        var _8n = $geti($_.msg, $_.i + 1, 6); //#25144
        $k[$j++] = 0; //#25144
        for (var _8o = 0, _8p = _8n.length; _8o < _8p; _8o++) { //#25144
            var _8r = $k[--$j]; //#25144
            $k[$j++] = ($f(_8r + $f($get(_8n, _8o) - 48))) * 10; //#25144
        } //#25144
        var _8t = ~~($k[--$j] / 10); //#25145
        $k[$j++] = _8t; //#25149
        if (_8t >= 40) { //#25149
            var _8v = $f($k[--$j] - 40); //#25147
            var _8w = _8v % 12769; //#25148
            $k[$j++] = (~~(_8v / 12769)) + 40; //#25148
            $k[$j++] = ~~(_8w / 113); //#25148
            $k[$j++] = _8w % 113; //#25148
        } //#25148
    }; //#25148
    $_.ECIbin = function() {
        $k[$j++] = Infinity; //#25153
        var _8z = $geti($_.msg, $_.i + 1, 6); //#25154
        $k[$j++] = 0; //#25154
        for (var _90 = 0, _91 = _8z.length; _90 < _91; _90++) { //#25154
            var _93 = $k[--$j]; //#25154
            $k[$j++] = ($f(_93 + $f($get(_8z, _90) - 48))) * 10; //#25154
        } //#25154
        var _95 = ~~($k[--$j] / 10); //#25155
        $k[$j++] = _95; //#25163
        if (_95 >= 65536) { //#25161
            var _96 = $k[--$j]; //#25156
            var _97 = _96 % 65536; //#25156
            $k[$j++] = 258; //#25156
            $k[$j++] = ~~(_96 / 65536); //#25156
            $k[$j++] = ~~(_97 / 256); //#25156
            $k[$j++] = _97 % 256; //#25156
        } else { //#25161
            var _98 = $k[--$j]; //#25158
            $k[$j++] = _98; //#25162
            if (_98 >= 256) { //#25161
                var _99 = $k[--$j]; //#25159
                $k[$j++] = 257; //#25159
                $k[$j++] = ~~(_99 / 256); //#25159
                $k[$j++] = _99 % 256; //#25159
            } else { //#25161
                var _9A = $k[--$j]; //#25161
                $k[$j++] = 256; //#25161
                $k[$j++] = _9A; //#25161
            } //#25161
        } //#25161
        var _9B = $a(); //#25161
        for (var _9C = 0, _9D = _9B.length; _9C < _9D; _9C++) { //#25166
            $k[$j++] = $get(_9B, _9C); //#25165
            $_.addtobin(); //#25165
        } //#25165
    }; //#25165
    $_.encC = function() {
        for (var _9F = 0, _9G = 1; _9F < _9G; _9F++) { //#25290
            if ($_.i == $_.segstart) { //#25203
                for (var _9J = 0, _9K = 1; _9J < _9K; _9J++) { //#25188
                    if ($_.i > $f($_.segend - 7)) { //#25173
                        $k[$j++] = 0; //#25173
                        break; //#25173
                    } //#25173
                    if ($get($_.msg, $_.segstart) != 91) { //#25174
                        $k[$j++] = 0; //#25174
                        break; //#25174
                    } //#25174
                    if ($get($_.msg, $_.segstart + 1) != 41) { //#25175
                        $k[$j++] = 0; //#25175
                        break; //#25175
                    } //#25175
                    if ($get($_.msg, $_.segstart + 2) != 62) { //#25176
                        $k[$j++] = 0; //#25176
                        break; //#25176
                    } //#25176
                    if ($get($_.msg, $_.segstart + 3) != 30) { //#25177
                        $k[$j++] = 0; //#25177
                        break; //#25177
                    } //#25177
                    var _9b = $get($_.msg, $_.segstart + 4); //#25178
                    if ((_9b < 48) || (_9b > 57)) { //#25178
                        $k[$j++] = 0; //#25178
                        break; //#25178
                    } //#25178
                    var _9e = $get($_.msg, $_.segstart + 5); //#25179
                    if ((_9e < 48) || (_9e > 57)) { //#25179
                        $k[$j++] = 0; //#25179
                        break; //#25179
                    } //#25179
                    if ($get($_.msg, $f($_.segend - 1)) != 4) { //#25180
                        $k[$j++] = 0; //#25180
                        break; //#25180
                    } //#25180
                    var _9o = $f(($f($get($_.msg, $_.segstart + 4) - 48) * 10) + $f($get($_.msg, $_.segstart + 5) - 48)); //#25182
                    $k[$j++] = _9o; //#25182
                    if ((_9o != 5) && ((_9o != 6) && (_9o != 12))) { //#25182
                        $j--; //#25182
                        $k[$j++] = $_.mac; //#25182
                        break; //#25182
                    } //#25182
                    if ($get($_.msg, $_.segstart + 6) != 29) { //#25183
                        $j--; //#25183
                        $k[$j++] = 0; //#25183
                        break; //#25183
                    } //#25183
                    if ($get($_.msg, $f($_.segend - 2)) != 30) { //#25184
                        $j--; //#25184
                        $k[$j++] = 0; //#25184
                        break; //#25184
                    } //#25184
                    var _9w = $k[--$j]; //#25185
                    $k[$j++] = _9w; //#25185
                    if (_9w == 5) { //#25185
                        $j--; //#25185
                        $k[$j++] = $_.m05; //#25185
                        break; //#25185
                    } //#25185
                    if ($k[--$j] == 6) { //#25186
                        $k[$j++] = $_.m06; //#25186
                        break; //#25186
                    } //#25186
                    $k[$j++] = $_.m12; //#25187
                    break; //#25187
                } //#25187
                $_.inmac = $k[--$j]; //#25189
                if ($_.inmac != 0) { //#25202
                    $k[$j++] = $a([$get($_.Cvals, $_.lab)]); //#25191
                    $_.addtocws(); //#25191
                    $_.mode = $_.B; //#25192
                    $k[$j++] = $a([$get($_.Bvals, $_.inmac)]); //#25193
                    $_.addtocws(); //#25193
                    if ($_.inmac == $_.mac) { //#25199
                        $k[$j++] = $a([$get($_.Bvals, $get($_.msg, $_.segstart + 4))]); //#25195
                        $_.addtocws(); //#25195
                        $k[$j++] = $a([$get($_.Bvals, $get($_.msg, $_.segstart + 5))]); //#25196
                        $_.addtocws(); //#25196
                        $_.i = $_.i + 6; //#25197
                    } else { //#25199
                        $_.i = $_.i + 7; //#25199
                    } //#25199
                    break; //#25201
                } //#25201
            } //#25201
            if ($_.i == $_.segstart) { //#25214
                if ($get($_.nDigits, $_.i) >= 2) { //#25209
                    $k[$j++] = $a([$get($_.Cvals, $_.fn1)]); //#25208
                    $_.addtocws(); //#25208
                } //#25208
                if (($get($_.msg, $_.i) == $_.fn1) && ($get($_.nDigits, $_.i + 1) >= 2)) { //#25213
                    $_.i = $_.i + 1; //#25212
                } //#25212
            } //#25212
            if ($get($_.SeventeenTen, $_.i)) { //#25224
                $k[$j++] = $a([$get($_.Cvals, $_.aim), $f(($f($get($_.msg, $_.i + 2) - 48) * 10) + $f($get($_.msg, $_.i + 3) - 48)), $f(($f($get($_.msg, $_.i + 4) - 48) * 10) + $f($get($_.msg, $_.i + 5) - 48)), $f(($f($get($_.msg, $_.i + 6) - 48) * 10) + $f($get($_.msg, $_.i + 7) - 48))]); //#25221
                $_.addtocws(); //#25221
                $_.i = $_.i + 10; //#25222
                break; //#25223
            } //#25223
            if ($get($_.DatumC, $_.i)) { //#25246
                var _BE = $get($_.msg, $_.i); //#25226
                if ((_BE == $_.fn1) || ((_BE == $_.fn2) || (_BE == $_.fn3))) { //#25242
                    $k[$j++] = $a([$get($_.Cvals, $get($_.msg, $_.i))]); //#25227
                    $_.addtocws(); //#25227
                    if ($get($_.ECI, $_.i)) { //#25232
                        $k[$j++] = Infinity; //#25229
                        $_.ECIabc(); //#25229
                        var _BR = $a(); //#25229
                        $k[$j++] = _BR; //#25229
                        $_.addtocws(); //#25229
                        $_.i = $_.i + 7; //#25230
                        break; //#25231
                    } //#25231
                    if (($get($_.msg, $_.i) == $_.fn3) && ($_.segstart != $_.i)) { //#25239
                        $_.i = $_.i + 1; //#25234
                        $_.inmac = 0; //#25235
                        $_.segstart = $_.i; //#25236
                        $_.segend = $f($_.i + $get($_.UntilEndSeg, $_.i)); //#25237
                        break; //#25238
                    } //#25238
                    $_.i = $_.i + 1; //#25240
                    break; //#25241
                } //#25241
                $k[$j++] = $a([$f(($f($get($_.msg, $_.i) - 48) * 10) + $f($get($_.msg, $_.i + 1) - 48))]); //#25243
                $_.addtocws(); //#25243
                $_.i = $_.i + 2; //#25244
                break; //#25245
            } //#25245
            if ($get($_.Binary, $_.i)) { //#25260
                if ($get($_.nDigits, $_.i + 1) > 0) { //#25256
                    if ($get($_.msg, $_.i) < 160) { //#25252
                        $k[$j++] = $a([$get($_.Cvals, $_.bsa), $get($_.Avals, $f($get($_.msg, $_.i) - 128))]); //#25250
                        $_.addtocws(); //#25250
                    } else { //#25252
                        $k[$j++] = $a([$get($_.Cvals, $_.bsb), $get($_.Bvals, $f($get($_.msg, $_.i) - 128))]); //#25252
                        $_.addtocws(); //#25252
                    } //#25252
                    $_.i = $_.i + 1; //#25254
                    break; //#25255
                } //#25255
                $k[$j++] = $a([$get($_.Cvals, $_.bin)]); //#25257
                $_.addtocws(); //#25257
                $_.mode = $_.BIN; //#25258
                break; //#25259
            } //#25259
            $_.m = $get($_.AheadA, $_.i); //#25261
            $_.n = $get($_.AheadB, $_.i); //#25261
            if ($gt($_.m, $_.n)) { //#25266
                $k[$j++] = $a([$get($_.Cvals, $_.laa)]); //#25263
                $_.addtocws(); //#25263
                $_.mode = $_.A; //#25264
                break; //#25265
            } //#25265
            if ($_.i == $_.segstart) { //#25273
                var _Cc = $get($_.msg, $_.i); //#25268
                if ((_Cc == 9) || ((_Cc == 28) || ((_Cc == 29) || (_Cc == 30)))) { //#25272
                    $k[$j++] = $a([$get($_.Cvals, $_.laa)]); //#25269
                    $_.addtocws(); //#25269
                    $_.mode = $_.A; //#25270
                    break; //#25271
                } //#25271
            } //#25271
            if ($_.n > 4) { //#25278
                $k[$j++] = $a([$get($_.Cvals, $_.lab)]); //#25275
                $_.addtocws(); //#25275
                $_.mode = $_.B; //#25276
                break; //#25277
            } //#25277
            $k[$j++] = $a([$get($_.Cvals, $get($a([$_.sfb, $_.sb2, $_.sb3, $_.sb4]), $f($_.n - 1)))]); //#25279
            $_.addtocws(); //#25279
            for (var _Cz = 0, _D0 = $_.n; _Cz < _D0; _Cz++) { //#25288
                if ($get($_.msg, $_.i) == 13) { //#25286
                    $k[$j++] = $a([$get($_.Bvals, $_.crl)]); //#25282
                    $_.addtocws(); //#25282
                    $_.i = $_.i + 2; //#25283
                } else { //#25286
                    $k[$j++] = $a([$get($_.Bvals, $get($_.msg, $_.i))]); //#25285
                    $_.addtocws(); //#25285
                    $_.i = $_.i + 1; //#25286
                } //#25286
            } //#25286
            break; //#25289
        } //#25289
    }; //#25289
    $_.encB = function() {
        for (var _DG = 0, _DH = 1; _DG < _DH; _DG++) { //#25366
            $_.n = $get($_.TryC, $_.i); //#25295
            if ($_.n >= 2) { //#25313
                if ($_.n > 4) { //#25301
                    $k[$j++] = $a([$get($_.Bvals, $_.lac)]); //#25298
                    $_.addtocws(); //#25298
                    $_.mode = $_.C; //#25299
                    break; //#25300
                } //#25300
                $k[$j++] = $a([$get($_.Bvals, $get($a([$_.sfc, $_.sc2, $_.sc3, $_.sc4]), $f($_.n - 1)))]); //#25302
                $_.addtocws(); //#25302
                for (var _Dd = 0, _De = $_.n; _Dd < _De; _Dd++) { //#25311
                    if ($get($_.msg, $_.i) < 0) { //#25309
                        $k[$j++] = $a([$get($_.Cvals, $get($_.msg, $_.i))]); //#25305
                        $_.addtocws(); //#25305
                        $_.i = $_.i + 1; //#25306
                    } else { //#25309
                        $k[$j++] = $a([$f(($f($get($_.msg, $_.i) - 48) * 10) + $f($get($_.msg, $_.i + 1) - 48))]); //#25308
                        $_.addtocws(); //#25308
                        $_.i = $_.i + 2; //#25309
                    } //#25309
                } //#25309
                break; //#25312
            } //#25312
            if ($get($_.DatumB, $_.i)) { //#25343
                var _E2 = $get($_.msg, $_.i); //#25315
                if ((_E2 == $_.fn1) || ((_E2 == $_.fn2) || (_E2 == $_.fn3))) { //#25332
                    $k[$j++] = $a([$get($_.Bvals, $get($_.msg, $_.i))]); //#25316
                    $_.addtocws(); //#25316
                    if ($get($_.ECI, $_.i)) { //#25321
                        $k[$j++] = Infinity; //#25318
                        $_.ECIabc(); //#25318
                        var _EF = $a(); //#25318
                        $k[$j++] = _EF; //#25318
                        $_.addtocws(); //#25318
                        $_.i = $_.i + 7; //#25319
                        break; //#25320
                    } //#25320
                    if (($get($_.msg, $_.i) == $_.fn3) && ($_.i != $_.segstart)) { //#25329
                        $_.i = $_.i + 1; //#25323
                        $_.mode = $_.C; //#25324
                        $_.inmac = 0; //#25325
                        $_.segstart = $_.i; //#25326
                        $_.segend = $f($_.i + $get($_.UntilEndSeg, $_.i)); //#25327
                        break; //#25328
                    } //#25328
                    $_.i = $_.i + 1; //#25330
                    break; //#25331
                } //#25331
                if (($get($_.msg, $_.i) == 13) && ($_.i < ($_.msglen - 1))) { //#25339
                    if ($get($_.msg, $_.i + 1) == 10) { //#25338
                        $k[$j++] = $a([$get($_.Bvals, $_.crl)]); //#25335
                        $_.addtocws(); //#25335
                        $_.i = $_.i + 2; //#25336
                        break; //#25337
                    } //#25337
                } //#25337
                $k[$j++] = $a([$get($_.Bvals, $get($_.msg, $_.i))]); //#25340
                $_.addtocws(); //#25340
                $_.i = $_.i + 1; //#25341
                break; //#25342
            } //#25342
            if ($get($_.Binary, $_.i)) { //#25357
                if ($get($_.DatumB, $_.i + 1)) { //#25353
                    if ($get($_.msg, $_.i) < 160) { //#25349
                        $k[$j++] = $a([$get($_.Bvals, $_.bsa), $get($_.Avals, $f($get($_.msg, $_.i) - 128))]); //#25347
                        $_.addtocws(); //#25347
                    } else { //#25349
                        $k[$j++] = $a([$get($_.Bvals, $_.bsb), $get($_.Bvals, $f($get($_.msg, $_.i) - 128))]); //#25349
                        $_.addtocws(); //#25349
                    } //#25349
                    $_.i = $_.i + 1; //#25351
                    break; //#25352
                } //#25352
                $k[$j++] = $a([$get($_.Bvals, $_.bin)]); //#25354
                $_.addtocws(); //#25354
                $_.mode = $_.BIN; //#25355
                break; //#25356
            } //#25356
            if ($get($_.AheadA, $_.i) == 1) { //#25362
                $k[$j++] = $a([$get($_.Bvals, $_.sfa), $get($_.Avals, $get($_.msg, $_.i))]); //#25359
                $_.addtocws(); //#25359
                $_.i = $_.i + 1; //#25360
                break; //#25361
            } //#25361
            $k[$j++] = $a([$get($_.Bvals, $_.laa)]); //#25363
            $_.addtocws(); //#25363
            $_.mode = $_.A; //#25364
            break; //#25365
        } //#25365
    }; //#25365
    $_.encA = function() {
        for (var _Fe = 0, _Ff = 1; _Fe < _Ff; _Fe++) { //#25444
            $_.n = $get($_.TryC, $_.i); //#25371
            if ($_.n >= 2) { //#25389
                if ($_.n > 4) { //#25377
                    $k[$j++] = $a([$get($_.Avals, $_.lac)]); //#25374
                    $_.addtocws(); //#25374
                    $_.mode = $_.C; //#25375
                    break; //#25376
                } //#25376
                $k[$j++] = $a([$get($_.Avals, $get($a([$_.sfc, $_.sc2, $_.sc3, $_.sc4]), $f($_.n - 1)))]); //#25378
                $_.addtocws(); //#25378
                for (var _G1 = 0, _G2 = $_.n; _G1 < _G2; _G1++) { //#25387
                    if ($get($_.msg, $_.i) < 0) { //#25385
                        $k[$j++] = $a([$get($_.Cvals, $get($_.msg, $_.i))]); //#25381
                        $_.addtocws(); //#25381
                        $_.i = $_.i + 1; //#25382
                    } else { //#25385
                        $k[$j++] = $a([$f(($f($get($_.msg, $_.i) - 48) * 10) + $f($get($_.msg, $_.i + 1) - 48))]); //#25384
                        $_.addtocws(); //#25384
                        $_.i = $_.i + 2; //#25385
                    } //#25385
                } //#25385
                break; //#25388
            } //#25388
            if ($get($_.DatumA, $_.i)) { //#25412
                var _GQ = $get($_.msg, $_.i); //#25391
                if ((_GQ == $_.fn1) || ((_GQ == $_.fn2) || (_GQ == $_.fn3))) { //#25408
                    $k[$j++] = $a([$get($_.Avals, $get($_.msg, $_.i))]); //#25392
                    $_.addtocws(); //#25392
                    if ($get($_.ECI, $_.i)) { //#25397
                        $k[$j++] = Infinity; //#25394
                        $_.ECIabc(); //#25394
                        var _Gd = $a(); //#25394
                        $k[$j++] = _Gd; //#25394
                        $_.addtocws(); //#25394
                        $_.i = $_.i + 7; //#25395
                        break; //#25396
                    } //#25396
                    if (($get($_.msg, $_.i) == $_.fn3) && ($_.i != $_.segstart)) { //#25405
                        $_.i = $_.i + 1; //#25399
                        $_.mode = $_.C; //#25400
                        $_.inmac = 0; //#25401
                        $_.segstart = $_.i; //#25402
                        $_.segend = $f($_.i + $get($_.UntilEndSeg, $_.i)); //#25403
                        break; //#25404
                    } //#25404
                    $_.i = $_.i + 1; //#25406
                    break; //#25407
                } //#25407
                $k[$j++] = $a([$get($_.Avals, $get($_.msg, $_.i))]); //#25409
                $_.addtocws(); //#25409
                $_.i = $_.i + 1; //#25410
                break; //#25411
            } //#25411
            if ($get($_.Binary, $_.i)) { //#25426
                if ($get($_.DatumA, $_.i + 1)) { //#25422
                    if ($get($_.msg, $_.i) < 160) { //#25418
                        $k[$j++] = $a([$get($_.Avals, $_.bsa), $get($_.Avals, $f($get($_.msg, $_.i) - 128))]); //#25416
                        $_.addtocws(); //#25416
                    } else { //#25418
                        $k[$j++] = $a([$get($_.Avals, $_.bsb), $get($_.Bvals, $f($get($_.msg, $_.i) - 128))]); //#25418
                        $_.addtocws(); //#25418
                    } //#25418
                    $_.i = $_.i + 1; //#25420
                    break; //#25421
                } //#25421
                $k[$j++] = $a([$get($_.Avals, $_.bin)]); //#25423
                $_.addtocws(); //#25423
                $_.mode = $_.BIN; //#25424
                break; //#25425
            } //#25425
            $_.n = $get($_.AheadB, $_.i); //#25427
            if ($_.n > 6) { //#25432
                $k[$j++] = $a([$get($_.Avals, $_.lab)]); //#25429
                $_.addtocws(); //#25429
                $_.mode = $_.B; //#25430
                break; //#25431
            } //#25431
            $k[$j++] = $a([$get($_.Avals, $get($a([$_.sfb, $_.sb2, $_.sb3, $_.sb4, $_.sb5, $_.sb6]), $f($_.n - 1)))]); //#25433
            $_.addtocws(); //#25433
            for (var _Ht = 0, _Hu = $_.n; _Ht < _Hu; _Ht++) { //#25442
                if ($get($_.msg, $_.i) == 13) { //#25440
                    $k[$j++] = $a([$get($_.Bvals, $_.crl)]); //#25436
                    $_.addtocws(); //#25436
                    $_.i = $_.i + 2; //#25437
                } else { //#25440
                    $k[$j++] = $a([$get($_.Bvals, $get($_.msg, $_.i))]); //#25439
                    $_.addtocws(); //#25439
                    $_.i = $_.i + 1; //#25440
                } //#25440
            } //#25440
            break; //#25443
        } //#25443
    }; //#25443
    $_.encBIN = function() {
        for (var _IA = 0, _IB = 1; _IA < _IB; _IA++) { //#25506
            $_.n = $get($_.TryC, $_.i); //#25449
            if ($_.n >= 2) { //#25468
                $k[$j++] = Infinity; //#25451
                $_.finaliseBIN(); //#25451
                var _IG = $a(); //#25451
                $k[$j++] = _IG; //#25451
                $_.addtocws(); //#25451
                if ($_.n > 7) { //#25456
                    $k[$j++] = $a([$get($_.BINvals, $_.tmc)]); //#25453
                    $_.addtocws(); //#25453
                    $_.mode = $_.C; //#25454
                    break; //#25455
                } //#25455
                $k[$j++] = $a([$get($_.BINvals, $get($a([$_.sc2, $_.sc3, $_.sc4, $_.sc5, $_.sc6, $_.sc7]), $f($_.n - 2)))]); //#25457
                $_.addtocws(); //#25457
                for (var _Ia = 0, _Ib = $_.n; _Ia < _Ib; _Ia++) { //#25466
                    if ($get($_.msg, $_.i) < 0) { //#25464
                        $k[$j++] = $a([$get($_.Cvals, $get($_.msg, $_.i))]); //#25460
                        $_.addtocws(); //#25460
                        $_.i = $_.i + 1; //#25461
                    } else { //#25464
                        $k[$j++] = $a([$f(($f($get($_.msg, $_.i) - 48) * 10) + $f($get($_.msg, $_.i + 1) - 48))]); //#25463
                        $_.addtocws(); //#25463
                        $_.i = $_.i + 2; //#25464
                    } //#25464
                } //#25464
                break; //#25467
            } //#25467
            if (($get($_.ECI, $_.i) && $get($_.Binary, $_.i + 7))) { //#25474
                $k[$j++] = Infinity; //#25470
                $_.ECIbin(); //#25470
                var _J0 = $a(); //#25470
                $k[$j++] = _J0; //#25470
                $_.addtocws(); //#25470
                $_.i = $_.i + 7; //#25471
                if ($_.i == $_.msglen) { //#25472
                    $k[$j++] = Infinity; //#25472
                    $_.finaliseBIN(); //#25472
                    var _J4 = $a(); //#25472
                    $k[$j++] = _J4; //#25472
                    $_.addtocws(); //#25472
                } //#25472
                break; //#25473
            } //#25473
            if ($get($_.msg, $_.i) >= 0) { //#25484
                if (((($get($_.Binary, $_.i) || $get($_.Binary, $_.i + 1)) || $get($_.Binary, $_.i + 2)) || $get($_.Binary, $_.i + 3)) || ($get($_.ECI, $_.i + 1) && $get($_.Binary, $_.i + 8))) { //#25483
                    $k[$j++] = Infinity; //#25479
                    $k[$j++] = $get($_.msg, $_.i); //#25479
                    $_.addtobin(); //#25479
                    var _JT = $a(); //#25479
                    $k[$j++] = _JT; //#25479
                    $_.addtocws(); //#25479
                    $_.i = $_.i + 1; //#25480
                    if ($_.i == $_.msglen) { //#25481
                        $k[$j++] = Infinity; //#25481
                        $_.finaliseBIN(); //#25481
                        var _JX = $a(); //#25481
                        $k[$j++] = _JX; //#25481
                        $_.addtocws(); //#25481
                    } //#25481
                    break; //#25482
                } //#25482
            } //#25482
            $k[$j++] = Infinity; //#25485
            $_.finaliseBIN(); //#25485
            var _JY = $a(); //#25485
            $k[$j++] = _JY; //#25485
            $_.addtocws(); //#25485
            if ($_.i != ($_.msglen - 1)) { //#25504
                if (($get($_.msg, $_.i) == $_.fn3) && ($_.i != $_.segstart)) { //#25495
                    $k[$j++] = $a([$get($_.BINvals, $_.tms)]); //#25488
                    $_.addtocws(); //#25488
                    $_.i = $_.i + 1; //#25489
                    $_.mode = $_.C; //#25490
                    $_.inmac = 0; //#25491
                    $_.segstart = $_.i; //#25492
                    $_.segend = $f($_.i + $get($_.UntilEndSeg, $_.i)); //#25493
                    break; //#25494
                } //#25494
                if ($gt($get($_.AheadA, $_.i), $get($_.AheadB, $_.i))) { //#25501
                    $k[$j++] = $a([$get($_.BINvals, $_.tma)]); //#25497
                    $_.addtocws(); //#25497
                    $_.mode = $_.A; //#25498
                } else { //#25501
                    $k[$j++] = $a([$get($_.BINvals, $_.tmb)]); //#25500
                    $_.addtocws(); //#25500
                    $_.mode = $_.B; //#25501
                } //#25501
                break; //#25503
            } //#25503
            break; //#25505
        } //#25505
    }; //#25505
    $_.cws = $a(($_.msglen * 2) + 1); //#25509
    $_.mode = $_.C; //#25510
    $_.bvals = $a(5); //#25511
    $_.bpos = 0; //#25511
    $_.inmac = 0; //#25512
    $_.segstart = 0; //#25512
    $_.segend = $get($_.UntilEndSeg, 0); //#25512
    $_.i = 0; //#25513
    $_.j = 0; //#25513
    for (;;) { //#25526
        if ($_.i >= $_.msglen) { //#25514
            break; //#25514
        } //#25514
        if ($_.inmac != 0) { //#25524
            if (($_.inmac != $_.mac) && ($_.i == $f($_.segend - 2))) { //#25519
                $_.i = $_.i + 2; //#25517
                if ($_.i >= $_.msglen) { //#25518
                    break; //#25518
                } //#25518
            } //#25518
            if (($_.inmac == $_.mac) && ($_.i == $f($_.segend - 1))) { //#25523
                $_.i = $_.i + 1; //#25521
                if ($_.i >= $_.msglen) { //#25522
                    break; //#25522
                } //#25522
            } //#25522
        } //#25522
        if ($_[$get($a(['encA', 'encB', 'encC', 'encBIN']), $_.mode)]() === true) {
            break;
        } //#25525
    } //#25525
    $_.cws = $geti($_.cws, 0, $_.j); //#25527
    $_.nd = $_.cws.length; //#25530
    $_.minarea = (((($_.nd + 3) + (~~($_.nd / 2))) * 9) + 2) * 2; //#25531
    if ($_.ratio != -1) { //#25559
        $_.hgt = Math.sqrt($_.minarea / $_.ratio); //#25533
        $_.wid = Math.sqrt($_.minarea * $_.ratio); //#25534
        $_.h = ~~$_.hgt; //#25535
        $_.w = ~~$_.wid; //#25535
        if ((($_.h + $_.w) % 2) == 1) { //#25549
            if (($_.h * $_.w) < $_.minarea) { //#25537
                $_.h = $_.h + 1; //#25537
                $_.w = $_.w + 1; //#25537
            } //#25537
        } else { //#25549
            if (($_.hgt * $_.w) < ($_.wid * $_.h)) { //#25549
                $_.w = $_.w + 1; //#25540
                if (($_.h * $_.w) < $_.minarea) { //#25544
                    $_.w = $_.w - 1; //#25542
                    $_.h = $_.h + 1; //#25542
                    if (($_.h * $_.w) < $_.minarea) { //#25543
                        $_.w = $_.w + 2; //#25543
                    } //#25543
                } //#25543
            } else { //#25549
                $_.h = $_.h + 1; //#25546
                if (($_.h * $_.w) < $_.minarea) { //#25550
                    $_.h = $_.h - 1; //#25548
                    $_.w = $_.w + 1; //#25548
                    if (($_.h * $_.w) < $_.minarea) { //#25549
                        $_.h = $_.h + 2; //#25549
                    } //#25549
                } //#25549
            } //#25549
        } //#25549
        $_.rows = $_.h; //#25553
        $_.columns = $_.w; //#25553
    } else { //#25559
        if ($_.columns == -1) { //#25557
            var _LN = ~~((($_.minarea + $_.rows) - 1) / $_.rows); //#25556
            $k[$j++] = 'columns'; //#25556
            $k[$j++] = _LN; //#25556
            if (((_LN + $_.rows) % 2) == 0) { //#25556
                var _LP = $k[--$j]; //#25556
                $k[$j++] = $f(_LP + 1); //#25556
            } //#25556
            var _LQ = $k[--$j]; //#25556
            $_[$k[--$j]] = _LQ; //#25556
        } //#25556
        if ($_.rows == -1) { //#25560
            var _LW = ~~((($_.minarea + $_.columns) - 1) / $_.columns); //#25559
            $k[$j++] = 'rows'; //#25559
            $k[$j++] = _LW; //#25559
            if (((_LW + $_.columns) % 2) == 0) { //#25559
                var _LY = $k[--$j]; //#25559
                $k[$j++] = $f(_LY + 1); //#25559
            } //#25559
            var _LZ = $k[--$j]; //#25559
            $_[$k[--$j]] = _LZ; //#25559
        } //#25559
    } //#25559
    $_.ndots = ~~(($_.rows * $_.columns) / 2); //#25564
    for (;;) { //#25568
        var _Le = $_.nd + 1; //#25566
        if ((((_Le + ((~~(_Le / 2)) + 3)) * 9) + 2) > $_.ndots) { //#25566
            break; //#25566
        } //#25566
        $_.nd = $_.nd + 1; //#25567
    } //#25567
    $_.nc = (~~($_.nd / 2)) + 3; //#25569
    $_.nw = $_.nd + $_.nc; //#25570
    $_.rembits = $_.ndots - (($_.nw * 9) + 2); //#25571
    if ($_.nd > $_.cws.length) { //#25578
        $k[$j++] = Infinity; //#25573
        $aload($_.cws); //#25574
        var _Lr = ($_.mode == $_.BIN) ? 109 : 106; //#25575
        $k[$j++] = _Lr; //#25576
        for (var _Lu = 0, _Lv = ($_.nd - $_.cws.length) - 1; _Lu < _Lv; _Lu++) { //#25576
            $k[$j++] = 106; //#25576
        } //#25576
        $_.cws = $a(); //#25576
    } //#25577
    var _Ly = $get($_.options, 'debugcws') !== undefined; //#25580
    if (_Ly) { //#25580
        $k[$j++] = 'bwipp.debugcws#25580'; //#25580
        $k[$j++] = $_.cws; //#25580
        bwipp_raiseerror(); //#25580
    } //#25580
    if (($_.nw * 9) > ($_.ndots - 2)) { //#25585
        $k[$j++] = 'bwipp.dotcodeTooLong#25584'; //#25584
        $k[$j++] = "Maximum length exceeded"; //#25584
        bwipp_raiseerror(); //#25584
    } //#25584
    if (!bwipp_dotcode.__25614__) { //#25614
        $_ = Object.create($_); //#25614
        $_.encs = $a
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_dotcode.$ctx[id] = $_[id]); //#25613
        bwipp_dotcode.__25614__ = 1; //#25613
        $_ = Object.getPrototypeOf($_); //#25613
    } //#25613
    if (($_.rows % 2) == 0) { //#25634
        $_.sixedges = $a([$a([$_.columns - 1, $_.rows - 2]), $a([0, $_.rows - 2]), $a([$_.columns - 2, $_.rows - 1]), $a([1, $_.rows - 1]), $a([$_.columns - 1, 0]), $a([0, 0])]); //#25625
    } else { //#25634
        $_.sixedges = $a([$a([$_.columns - 2, 0]), $a([$_.columns - 2, $_.rows - 1]), $a([$_.columns - 1, 1]), $a([$_.columns - 1, $_.rows - 2]), $a([0, 0]), $a([0, $_.rows - 1])]); //#25634
    } //#25634
    $_.dmv = function() {
        var _MY = $k[--$j]; //#25637
        var _MZ = $k[--$j]; //#25637
        $k[$j++] = $f(_MZ + (_MY * $_.columns)); //#25637
    }; //#25637
    $_.outline = $a($_.rows * $_.columns); //#25640
    for (var _Mf = 0, _Me = $_.rows - 1; _Mf <= _Me; _Mf += 1) { //#25647
        $_.y = _Mf; //#25642
        for (var _Mi = 0, _Mh = $_.columns - 1; _Mi <= _Mh; _Mi += 1) { //#25646
            $_.x = _Mi; //#25644
            $k[$j++] = $_.outline; //#25645
            $k[$j++] = $_.x; //#25645
            $k[$j++] = $_.y; //#25645
            $_.dmv(); //#25645
            var _Mo = $k[--$j]; //#25645
            $put($k[--$j], _Mo, (($_.x + $_.y) % 2) - 1); //#25645
        } //#25645
    } //#25645
    var _Mq = $_.sixedges; //#25648
    for (var _Mr = 0, _Ms = _Mq.length; _Mr < _Ms; _Mr++) { //#25650
        $k[$j++] = $_.outline; //#25649
        $aload($get(_Mq, _Mr)); //#25649
        $_.dmv(); //#25649
        var _Mv = $k[--$j]; //#25649
        $put($k[--$j], _Mv, 1); //#25649
    } //#25649
    $_.clearcol = function() {
        $_.x = $k[--$j]; //#25653
        $k[$j++] = true; //#25657
        for (var _N1 = $_.x & 1, _N0 = $_.rows - 1; _N1 <= _N0; _N1 += 2) { //#25657
            $k[$j++] = $_.x; //#25656
            $k[$j++] = _N1; //#25656
            $_.dmv(); //#25656
            if ($get($_.sym, $k[--$j]) == 1) { //#25656
                $j--; //#25656
                $k[$j++] = false; //#25656
                break; //#25656
            } //#25656
        } //#25656
    }; //#25656
    $_.clearrow = function() {
        $_.y = $k[--$j]; //#25661
        $k[$j++] = true; //#25665
        for (var _NA = $_.y & 1, _N9 = $_.columns - 1; _NA <= _N9; _NA += 2) { //#25665
            $k[$j++] = _NA; //#25664
            $k[$j++] = $_.y; //#25664
            $_.dmv(); //#25664
            if ($get($_.sym, $k[--$j]) == 1) { //#25664
                $j--; //#25664
                $k[$j++] = false; //#25664
                break; //#25664
            } //#25664
        } //#25664
    }; //#25664
    $_.evalsymbol = function() {
        $_.sym = $k[--$j]; //#25670
        $_.worst = 9999999; //#25673
        var _NK = $a([$a(['x', 0]), $a(['x', 1]), $a(['y', 0]), $a(['y', 1])]); //#25674
        for (var _NL = 0, _NM = _NK.length; _NL < _NM; _NL++) { //#25692
            $aload($get(_NK, _NL)); //#25675
            $_.fl = $k[--$j]; //#25675
            $_.dir = $k[--$j]; //#25675
            $_.sum = 0; //#25676
            $_.first = -1; //#25676
            $_.last = -1; //#25676
            var _NR = $eq($_.dir, 'x') ? $_.columns : $_.rows; //#25677
            for (var _NT = 0, _NS = _NR - 1; _NT <= _NS; _NT += 1) { //#25688
                $_[$_.dir] = _NT; //#25678
                var _NV = $_.sym; //#25679
                var _NX = $_[$_.dir]; //#25680
                var _NZ = $eq($_.dir, 'x') ? $_.rows : $_.columns; //#25681
                var _Nc = (_NZ - 1) * $_.fl; //#25682
                if ($eq($_.dir, 'y')) { //#25682
                    var _ = _Nc; //#25682
                    _Nc = _NX; //#25682
                    _NX = _; //#25682
                } //#25682
                $k[$j++] = _NV; //#25683
                $k[$j++] = _NX; //#25683
                $k[$j++] = _Nc; //#25683
                $_.dmv(); //#25683
                var _Nd = $k[--$j]; //#25683
                if ($get($k[--$j], _Nd) == 1) { //#25687
                    if ($_.first == -1) { //#25684
                        $_.first = $_[$_.dir]; //#25684
                    } //#25684
                    $_.last = $_[$_.dir]; //#25685
                    $_.sum = $_.sum + 1; //#25686
                } //#25686
            } //#25686
            var _Nq = $eq($_.dir, 'x') ? $_.rows : $_.columns; //#25690
            var _Nr = ($f($f($_.sum + $_.last) - $_.first)) * _Nq; //#25691
            $k[$j++] = _Nr; //#25691
            if (_Nr < $_.worst) { //#25691
                $_.worst = $k[--$j]; //#25691
            } else { //#25691
                $j--; //#25691
            } //#25691
        } //#25691
        $_.pen = 0; //#25694
        if ((($_.rows % 2) == 1) || ($_.rows <= 12)) { //#25712
            $_.sum = 0; //#25700
            $_.p = 0; //#25700
            for (var _Ny = 1, _Nx = $_.columns - 2; _Ny <= _Nx; _Ny += 1) { //#25710
                $k[$j++] = _Ny; //#25702
                $_.clearcol(); //#25702
                if ($k[--$j]) { //#25708
                    $_.sum = $_.sum + 1; //#25703
                    $k[$j++] = 'p'; //#25704
                    if ($_.sum == 1) { //#25704
                        $k[$j++] = $_.rows; //#25704
                    } else { //#25704
                        $k[$j++] = $_.p * $_.rows; //#25704
                    } //#25704
                    var _O5 = $k[--$j]; //#25704
                    $_[$k[--$j]] = _O5; //#25704
                } else { //#25708
                    $_.sum = 0; //#25706
                    $_.pen = $_.pen + $_.p; //#25707
                    $_.p = 0; //#25708
                } //#25708
            } //#25708
            $_.pen = $_.pen + $_.p; //#25711
        } //#25711
        if ((($_.rows % 2) == 0) || ($_.columns <= 12)) { //#25730
            $_.sum = 0; //#25718
            $_.p = 0; //#25718
            for (var _OF = 1, _OE = $_.rows - 2; _OF <= _OE; _OF += 1) { //#25728
                $k[$j++] = _OF; //#25720
                $_.clearrow(); //#25720
                if ($k[--$j]) { //#25726
                    $_.sum = $_.sum + 1; //#25721
                    $k[$j++] = 'p'; //#25722
                    if ($_.sum == 1) { //#25722
                        $k[$j++] = $_.columns; //#25722
                    } else { //#25722
                        $k[$j++] = $_.p * $_.columns; //#25722
                    } //#25722
                    var _OM = $k[--$j]; //#25722
                    $_[$k[--$j]] = _OM; //#25722
                } else { //#25726
                    $_.sum = 0; //#25724
                    $_.pen = $_.pen + $_.p; //#25725
                    $_.p = 0; //#25726
                } //#25726
            } //#25726
            $_.pen = $_.pen + $_.p; //#25729
        } //#25729
        $k[$j++] = Infinity; //#25733
        for (var _OT = 0, _OU = ($_.columns + 4) * 2; _OT < _OU; _OT++) { //#25734
            $k[$j++] = 0; //#25734
        } //#25734
        for (var _OY = 0, _OZ = $_.columns, _OX = $_.sym.length - 1; _OZ < 0 ? _OY >= _OX : _OY <= _OX; _OY += _OZ) { //#25739
            $k[$j++] = 0; //#25737
            $k[$j++] = 0; //#25737
            $aload($geti($_.sym, _OY, $_.columns)); //#25737
            $k[$j++] = 0; //#25738
            $k[$j++] = 0; //#25738
        } //#25738
        for (var _Oe = 0, _Of = ($_.columns + 4) * 2; _Oe < _Of; _Oe++) { //#25740
            $k[$j++] = 0; //#25740
        } //#25740
        $_.symp = $a(); //#25740
        $_.columns = $_.columns + 4; //#25744
        $_.rows = $_.rows + 4; //#25745
        $_.sum = 0; //#25746
        for (var _Ol = 2, _Ok = $_.rows - 3; _Ol <= _Ok; _Ol += 1) { //#25764
            $_.y = _Ol; //#25748
            for (var _Op = ($_.y & 1) + 2, _Oo = $_.columns - 3; _Op <= _Oo; _Op += 2) { //#25763
                $_.x = _Op; //#25750
                for (var _Oq = 0, _Or = 1; _Oq < _Or; _Oq++) { //#25762
                    $k[$j++] = $_.symp; //#25752
                    $k[$j++] = $_.x - 1; //#25752
                    $k[$j++] = $_.y - 1; //#25752
                    $_.dmv(); //#25752
                    var _Ov = $k[--$j]; //#25752
                    if ($get($k[--$j], _Ov) == 1) { //#25752
                        break; //#25752
                    } //#25752
                    $k[$j++] = $_.symp; //#25753
                    $k[$j++] = $_.x + 1; //#25753
                    $k[$j++] = $_.y - 1; //#25753
                    $_.dmv(); //#25753
                    var _P1 = $k[--$j]; //#25753
                    if ($get($k[--$j], _P1) == 1) { //#25753
                        break; //#25753
                    } //#25753
                    $k[$j++] = $_.symp; //#25754
                    $k[$j++] = $_.x - 1; //#25754
                    $k[$j++] = $_.y + 1; //#25754
                    $_.dmv(); //#25754
                    var _P7 = $k[--$j]; //#25754
                    if ($get($k[--$j], _P7) == 1) { //#25754
                        break; //#25754
                    } //#25754
                    $k[$j++] = $_.symp; //#25755
                    $k[$j++] = $_.x + 1; //#25755
                    $k[$j++] = $_.y + 1; //#25755
                    $_.dmv(); //#25755
                    var _PD = $k[--$j]; //#25755
                    if ($get($k[--$j], _PD) == 1) { //#25755
                        break; //#25755
                    } //#25755
                    $k[$j++] = $_.symp; //#25756
                    $k[$j++] = $_.x; //#25756
                    $k[$j++] = $_.y; //#25756
                    $_.dmv(); //#25756
                    var _PJ = $k[--$j]; //#25756
                    if ($get($k[--$j], _PJ) == 0) { //#25756
                        $_.sum = $_.sum + 1; //#25756
                        break; //#25756
                    } //#25756
                    $k[$j++] = $_.symp; //#25757
                    $k[$j++] = $_.x - 2; //#25757
                    $k[$j++] = $_.y; //#25757
                    $_.dmv(); //#25757
                    var _PQ = $k[--$j]; //#25757
                    if ($get($k[--$j], _PQ) == 1) { //#25757
                        break; //#25757
                    } //#25757
                    $k[$j++] = $_.symp; //#25758
                    $k[$j++] = $_.x; //#25758
                    $k[$j++] = $_.y - 2; //#25758
                    $_.dmv(); //#25758
                    var _PW = $k[--$j]; //#25758
                    if ($get($k[--$j], _PW) == 1) { //#25758
                        break; //#25758
                    } //#25758
                    $k[$j++] = $_.symp; //#25759
                    $k[$j++] = $_.x + 2; //#25759
                    $k[$j++] = $_.y; //#25759
                    $_.dmv(); //#25759
                    var _Pc = $k[--$j]; //#25759
                    if ($get($k[--$j], _Pc) == 1) { //#25759
                        break; //#25759
                    } //#25759
                    $k[$j++] = $_.symp; //#25760
                    $k[$j++] = $_.x; //#25760
                    $k[$j++] = $_.y + 2; //#25760
                    $_.dmv(); //#25760
                    var _Pi = $k[--$j]; //#25760
                    if ($get($k[--$j], _Pi) == 1) { //#25760
                        break; //#25760
                    } //#25760
                    $_.sum = $_.sum + 1; //#25761
                } //#25761
            } //#25761
        } //#25761
        $_.columns = $_.columns - 4; //#25765
        $_.rows = $_.rows - 4; //#25766
        if ($_.worst == 0) { //#25771
            $k[$j++] = -99999; //#25769
        } else { //#25771
            $k[$j++] = $f(($f($_.worst - ($_.sum * $_.sum))) - $_.pen); //#25771
        } //#25771
    }; //#25771
    if (!bwipp_dotcode.__25779__) { //#25779
        $_ = Object.create($_); //#25779
        $k[$j++] = Infinity; //#25778
        $k[$j++] = 1; //#25778
        for (var _Pt = 0, _Pu = 112; _Pt < _Pu; _Pt++) { //#25778
            var _Pv = $k[--$j]; //#25778
            $k[$j++] = _Pv; //#25778
            $k[$j++] = (_Pv * 3) % 113; //#25778
        } //#25778
        $_.rsalog = $a(); //#25778
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_dotcode.$ctx[id] = $_[id]); //#25778
        bwipp_dotcode.__25779__ = 1; //#25778
        $_ = Object.getPrototypeOf($_); //#25778
    } //#25778
    $_.step = (~~($_.nw / 112)) + 1; //#25780
    $_.offset = function() {
        var _Q0 = $k[--$j]; //#25781
        $k[$j++] = $f((_Q0 * $_.step) + $_.start); //#25781
    }; //#25781
    $_.bestscore = -99999999; //#25789
    $k[$j++] = 'masks'; //#25794
    if ($_.mask != -1) { //#25793
        $k[$j++] = $a([$_.mask]); //#25791
    } else { //#25793
        if ($_.fast) { //#25793
            $k[$j++] = $a([3, 2, 1, 0]); //#25793
        } else { //#25793
            $k[$j++] = $a([0, 1, 2, 3]); //#25793
        } //#25793
    } //#25793
    var _Q8 = $k[--$j]; //#25794
    $_[$k[--$j]] = _Q8; //#25794
    $_.litmasks = $a(4); //#25795
    $forall($_.masks, function() { //#25897
        $_.mask = $k[--$j]; //#25798
        $k[$j++] = Infinity; //#25801
        var _QH = $_.cws; //#25803
        $k[$j++] = $_.mask; //#25803
        $k[$j++] = $get($a([0, 3, 7, 17]), $_.mask); //#25803
        $k[$j++] = 0; //#25803
        for (var _QI = 0, _QJ = _QH.length; _QI < _QJ; _QI++) { //#25803
            var _QL = $k[--$j]; //#25803
            var _QM = $k[--$j]; //#25803
            $k[$j++] = $f($get(_QH, _QI) + _QL) % 113; //#25803
            $k[$j++] = _QM; //#25803
            $k[$j++] = $f(_QL + _QM); //#25803
        } //#25803
        $j -= 2; //#25803
        for (var _QO = 0, _QP = $_.nc; _QO < _QP; _QO++) { //#25804
            $k[$j++] = 0; //#25804
        } //#25804
        $_.rscws = $a(); //#25804
        for (var _QT = 0, _QS = $_.step - 1; _QT <= _QS; _QT += 1) { //#25828
            $_.start = _QT; //#25807
            $_.ND = ~~((((($_.nd + 1) - $_.start) + $_.step) - 1) / $_.step); //#25808
            $_.NW = ~~((((($_.nw + 1) - $_.start) + $_.step) - 1) / $_.step); //#25809
            $_.NC = $_.NW - $_.ND; //#25810
            $k[$j++] = Infinity; //#25811
            $k[$j++] = 1; //#25811
            for (var _Qf = 0, _Qg = $_.NC; _Qf < _Qg; _Qf++) { //#25811
                $k[$j++] = 0; //#25811
            } //#25811
            $_.coeffs = $a(); //#25811
            for (var _Qk = 1, _Qj = $_.NC; _Qk <= _Qj; _Qk += 1) { //#25818
                $_.i = _Qk; //#25813
                for (var _Qm = $_.NC; _Qm >= 1; _Qm -= 1) { //#25817
                    $_.j = _Qm; //#25815
                    $put($_.coeffs, $_.j, ($f($f($get($_.coeffs, $_.j) + 113) - (($get($_.rsalog, $_.i) * $get($_.coeffs, $_.j - 1)) % 113))) % 113); //#25816
                } //#25816
            } //#25816
            for (var _R0 = 0, _Qz = $_.ND - 1; _R0 <= _Qz; _R0 += 1) { //#25826
                $k[$j++] = 't'; //#25820
                $k[$j++] = $_.rscws; //#25820
                $k[$j++] = _R0; //#25820
                $_.offset(); //#25820
                var _R2 = $k[--$j]; //#25820
                var _R4 = $get($k[--$j], _R2); //#25820
                $k[$j++] = _R4; //#25820
                $k[$j++] = $_.rscws; //#25820
                $k[$j++] = $_.ND; //#25820
                $_.offset(); //#25820
                var _R7 = $k[--$j]; //#25820
                var _R9 = $get($k[--$j], _R7); //#25820
                var _RA = $k[--$j]; //#25820
                $_[$k[--$j]] = $f(_RA + _R9) % 113; //#25820
                for (var _RE = 0, _RD = $_.NC - 2; _RE <= _RD; _RE += 1) { //#25824
                    $_.j = _RE; //#25822
                    $k[$j++] = $_.rscws; //#25823
                    $k[$j++] = $_.ND + $_.j; //#25823
                    $_.offset(); //#25823
                    $k[$j++] = $_.rscws; //#25823
                    $k[$j++] = ($_.ND + $_.j) + 1; //#25823
                    $_.offset(); //#25823
                    var _RL = $k[--$j]; //#25823
                    var _RN = $get($k[--$j], _RL); //#25823
                    var _RS = $k[--$j]; //#25823
                    $put($k[--$j], _RS, ($f($f(_RN + 113) - (($_.t * $get($_.coeffs, $_.j + 1)) % 113))) % 113); //#25823
                } //#25823
                $k[$j++] = $_.rscws; //#25825
                $k[$j++] = ($_.ND + $_.NC) - 1; //#25825
                $_.offset(); //#25825
                var _Rb = $k[--$j]; //#25825
                $put($k[--$j], _Rb, ($f(113 - (($_.t * $get($_.coeffs, $_.NC)) % 113))) % 113); //#25825
            } //#25825
            for (var _Rg = $_.ND, _Rf = $_.NW - 1; _Rg <= _Rf; _Rg += 1) { //#25827
                $k[$j++] = _Rg; //#25827
                $k[$j++] = $_.rscws; //#25827
                $k[$j++] = _Rg; //#25827
                $_.offset(); //#25827
                var _Rj = $k[--$j]; //#25827
                var _Rk = $k[--$j]; //#25827
                var _Rl = $k[--$j]; //#25827
                $k[$j++] = _Rk; //#25827
                $k[$j++] = _Rj; //#25827
                $k[$j++] = 113; //#25827
                $k[$j++] = $_.rscws; //#25827
                $k[$j++] = _Rl; //#25827
                $_.offset(); //#25827
                var _Rm = $k[--$j]; //#25827
                var _Ro = $get($k[--$j], _Rm); //#25827
                var _Rp = $k[--$j]; //#25827
                var _Rq = $k[--$j]; //#25827
                $put($k[--$j], _Rq, $f(_Rp - _Ro) % 113); //#25827
            } //#25827
        } //#25827
        $_.bits = $s($_.ndots); //#25831
        $puti($_.bits, 0, $get($a(["00", "01", "10", "11"]), $_.mask)); //#25832
        for (var _S0 = 1, _Rz = $_.nw; _S0 <= _Rz; _S0 += 1) { //#25836
            $_.i = _S0; //#25834
            $puti($_.bits, (($_.i - 1) * 9) + 2, $get($_.encs, $get($_.rscws, $_.i))); //#25835
        } //#25835
        if ($_.rembits > 0) { //#25839
            $puti($_.bits, ($_.nw * 9) + 2, $geti("11111111111111111", 0, $_.rembits)); //#25838
        } //#25838
        var _SD = $_.outline; //#25842
        $_.pixs = $arrcpy($a(_SD.length), _SD); //#25842
        $_.posx = 0; //#25843
        $k[$j++] = 'posy'; //#25844
        if (($_.rows % 2) == 0) { //#25844
            $k[$j++] = 0; //#25844
        } else { //#25844
            $k[$j++] = $_.rows - 1; //#25844
        } //#25844
        var _SI = $k[--$j]; //#25844
        $_[$k[--$j]] = _SI; //#25844
        var _SM = $geti($_.bits, 0, $_.bits.length - 6); //#25845
        for (var _SN = 0, _SO = _SM.length; _SN < _SO; _SN++) { //#25863
            $k[$j++] = $get(_SM, _SN); //#25861
            for (;;) { //#25861
                $k[$j++] = $_.pixs; //#25847
                $k[$j++] = $_.posx; //#25847
                $k[$j++] = $_.posy; //#25847
                $_.dmv(); //#25847
                var _ST = $k[--$j]; //#25847
                if ($get($k[--$j], _ST) == -1) { //#25847
                    break; //#25847
                } //#25847
                if (($_.rows % 2) == 0) { //#25858
                    $_.posy = $_.posy + 1; //#25849
                    if ($_.posy == $_.rows) { //#25853
                        $_.posy = 0; //#25851
                        $_.posx = $_.posx + 1; //#25852
                    } //#25852
                } else { //#25858
                    $_.posx = $_.posx + 1; //#25855
                    if ($_.posx == $_.columns) { //#25859
                        $_.posx = 0; //#25857
                        $_.posy = $_.posy - 1; //#25858
                    } //#25858
                } //#25858
            } //#25858
            $k[$j++] = $_.pixs; //#25862
            $k[$j++] = $_.posx; //#25862
            $k[$j++] = $_.posy; //#25862
            $_.dmv(); //#25862
            var _Si = $k[--$j]; //#25862
            var _Sj = $k[--$j]; //#25862
            $put(_Sj, _Si, $f($k[--$j] - 48)); //#25862
        } //#25862
        for (var _Sl = 0; _Sl <= 5; _Sl += 1) { //#25868
            $_.i = _Sl; //#25865
            $k[$j++] = $_.pixs; //#25866
            $aload($get($_.sixedges, $_.i)); //#25866
            $_.dmv(); //#25866
            var _Su = $k[--$j]; //#25867
            $put($k[--$j], _Su, $get($_.bits, ($_.bits.length - 6) + $_.i) - 48); //#25867
        } //#25867
        $k[$j++] = 'score'; //#25871
        $k[$j++] = $_.pixs; //#25871
        $_.evalsymbol(); //#25871
        var _Sx = $k[--$j]; //#25871
        $_[$k[--$j]] = _Sx; //#25871
        if ($_.score > $_.bestscore) { //#25876
            $_.bestsym = $_.pixs; //#25873
            $_.bestscore = $_.score; //#25874
            if ($_.fast && ($_.bestscore > (~~(($_.rows * $_.columns) / 2)))) { //#25875
                return true; //#25875
            } //#25875
        } //#25875
        var _T7 = $_.pixs; //#25879
        $_.litmask = $arrcpy($a(_T7.length), _T7); //#25879
        for (var _TA = 0; _TA <= 5; _TA += 1) { //#25884
            $_.i = _TA; //#25881
            $k[$j++] = $_.litmask; //#25882
            $aload($get($_.sixedges, $_.i)); //#25882
            $_.dmv(); //#25882
            var _TF = $k[--$j]; //#25883
            $put($k[--$j], _TF, 1); //#25883
        } //#25883
        $put($_.litmasks, $_.mask, $_.litmask); //#25885
        if ($_.fast) { //#25895
            $k[$j++] = 'score'; //#25889
            $k[$j++] = $_.litmask; //#25889
            $_.evalsymbol(); //#25889
            var _TM = $k[--$j]; //#25889
            $_[$k[--$j]] = _TM; //#25889
            if ($gt($_.score, $_.bestscore)) { //#25894
                $_.bestsym = $_.litmask; //#25891
                $_.bestscore = $_.score; //#25892
                if ($_.bestscore > (~~(($_.rows * $_.columns) / 2))) { //#25893
                    return true; //#25893
                } //#25893
            } //#25893
        } //#25893
    }); //#25893
    $_.pixs = $_.bestsym; //#25898
    if ((!$_.fast) && ($_.bestscore <= (~~(($_.rows * $_.columns) / 2)))) { //#25912
        $_.bestscore = -99999999; //#25902
        $forall($_.masks, function() { //#25910
            $_.litmask = $get($_.litmasks, $k[--$j]); //#25904
            $k[$j++] = 'score'; //#25905
            $k[$j++] = $_.litmask; //#25905
            $_.evalsymbol(); //#25905
            var _Tf = $k[--$j]; //#25905
            $_[$k[--$j]] = _Tf; //#25905
            if ($_.score > $_.bestscore) { //#25909
                $_.bestsym = $_.litmask; //#25907
                $_.bestscore = $_.score; //#25908
            } //#25908
        }); //#25908
        $_.pixs = $_.bestsym; //#25911
    } //#25911
    var _Ts = new Map([
        ["ren", bwipp_renmatrix],
        ["dotty", true],
        ["pixs", $_.pixs],
        ["pixx", $_.columns],
        ["pixy", $_.rows],
        ["height", ($_.rows * 2) / 72],
        ["width", ($_.columns * 2) / 72],
        ["borderleft", 3],
        ["borderright", 3],
        ["bordertop", 3],
        ["borderbottom", 3],
        ["opt", $_.options]
    ]); //#25927
    $k[$j++] = _Ts; //#25930
    if (!$_.dontdraw) { //#25930
        bwipp_renmatrix(); //#25930
    } //#25930
    $_ = Object.getPrototypeOf($_); //#25932
    $_ = Object.getPrototypeOf($_); //#25934
} //bwipp_dotcode
function bwipp_ultracode() {
    $_ = Object.create($_); //#25965
    $_.dontdraw = false; //#25968
    $_.eclevel = "EC2"; //#25969
    $_.parse = false; //#25970
    $_.parsefnc = false; //#25971
    $_.start = 257; //#25972
    $_.link1 = 0; //#25973
    $_.raw = false; //#25974
    $_.rev = 2; //#25975
    $k[$j++] = $_; //#25977
    bwipp_processoptions(); //#25977
    $_.options = $k[--$j]; //#25977
    $_.barcode = $k[--$j]; //#25978
    var _2 = $_.rev; //#25980
    if ((_2 != 1) && (_2 != 2)) { //#25982
        $k[$j++] = 'bwipp.ultracodeInvalidRevision#25981'; //#25981
        $k[$j++] = "Valid revisions are 1 and 2"; //#25981
        bwipp_raiseerror(); //#25981
    } //#25981
    var _4 = $_.eclevel.length == 3; //#25984
    $k[$j++] = _4; //#25988
    if (_4) { //#25988
        $j--; //#25985
        $k[$j++] = $geti($_.eclevel, 0, 2); //#25987
        if ($eq("EC", "EC")) { //#25987
            $j--; //#25986
            var _9 = $get($_.eclevel, 2) - 48; //#25986
            var _B = ($_.rev == 2) ? 1 : 0; //#25986
            $k[$j++] = (_9 >= _B) && (_9 <= 5); //#25986
        } //#25986
    } //#25986
    if ($nt($k[--$j])) { //#25991
        $k[$j++] = 'bwipp.ultracodeInvalidErrorCorrectionLevel#25990'; //#25990
        $k[$j++] = "Valid error correction levels are EC1 to EC5, and EC0 for legacy revision 1"; //#25990
        bwipp_raiseerror(); //#25990
    } //#25990
    bwipp_loadctx(bwipp_ultracode) //#25993
    if ($_.raw) { //#26030
        $_.dcws = $a($_.barcode.length); //#25997
        $_.i = 0; //#25998
        $_.j = 0; //#25998
        for (;;) { //#26005
            if ($_.i == $_.barcode.length) { //#26000
                break; //#26000
            } //#26000
            $_.cw = $cvi($geti($_.barcode, $_.i + 1, 3)); //#26001
            $put($_.dcws, $_.j, $_.cw); //#26002
            $_.i = $_.i + 4; //#26003
            $_.j = $_.j + 1; //#26004
        } //#26004
        $_.dcws = $geti($_.dcws, 0, $_.j); //#26006
    } else { //#26030
        $_.fn1 = -1; //#26011
        $_.fn3 = -2; //#26011
        var _X = new Map([
            ["parse", $_.parse],
            ["parsefnc", $_.parsefnc],
            ["FNC1", $_.fn1],
            ["FNC3", $_.fn3]
        ]); //#26016
        $_.fncvals = _X; //#26017
        $k[$j++] = 'msg'; //#26018
        $k[$j++] = $_.barcode; //#26018
        $k[$j++] = $_.fncvals; //#26018
        bwipp_parseinput(); //#26018
        var _a = $k[--$j]; //#26018
        $_[$k[--$j]] = _a; //#26018
        $_.msglen = $_.msg.length; //#26019
        $_.scr = $a([]); //#26021
        $_.scp = $a([]); //#26022
        $k[$j++] = Infinity; //#26023
        $aload($_.scr); //#26024
        $aload($_.scp); //#26025
        $forall($_.msg, function() { //#26029
            var _i = $k[--$j]; //#26027
            $k[$j++] = _i; //#26027
            if (_i == $_.fn1) { //#26027
                $j--; //#26027
                $k[$j++] = 268; //#26027
            } //#26027
            var _k = $k[--$j]; //#26028
            $k[$j++] = _k; //#26028
            if (_k == $_.fn3) { //#26028
                $j--; //#26028
                $k[$j++] = 269; //#26028
            } //#26028
        }); //#26028
        $_.dcws = $a(); //#26028
    } //#26030
    var _o = $get($_.options, 'debugcws') !== undefined; //#26034
    if (_o) { //#26034
        $k[$j++] = 'bwipp.debugcws#26034'; //#26034
        $k[$j++] = $_.dcws; //#26034
        bwipp_raiseerror(); //#26034
    } //#26034
    $_.mcc = $_.dcws.length + 3; //#26036
    $_.eclval = $get($_.eclevel, 2) - 48; //#26038
    if ($_.eclval != 0) { //#26042
        $k[$j++] = 'qcc'; //#26040
        $k[$j++] = $get($a([0, 1, 2, 4, 6, 8]), $_.eclval); //#26040
        $k[$j++] = ~~($_.mcc / 25); //#26040
        if (($_.mcc % 25) != 0) { //#26040
            var _z = $k[--$j]; //#26040
            $k[$j++] = $f(_z + 1); //#26040
        } //#26040
        var _10 = $k[--$j]; //#26040
        var _11 = $k[--$j]; //#26040
        $_[$k[--$j]] = $f((_11 * _10) + 5); //#26040
    } else { //#26042
        $_.qcc = 3; //#26042
    } //#26042
    $_.acc = ($_.qcc - 3) + (78 * $_.link1); //#26044
    $_.tcc = $_.mcc + $_.qcc; //#26045
    if (!bwipp_ultracode.__26056__) { //#26056
        $_ = Object.create($_); //#26056
        $_.metrics = $a([$a([2, 7, 37, 5]), $a([3, 36, 84, 13]), $a([4, 85, 161, 22]), $a([5, 142, 282, 29])]); //#26055
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_ultracode.$ctx[id] = $_[id]); //#26055
        bwipp_ultracode.__26056__ = 1; //#26055
        $_ = Object.getPrototypeOf($_); //#26055
    } //#26055
    var _1D = $_.metrics; //#26058
    for (var _1E = 0, _1F = _1D.length; _1E < _1F; _1E++) { //#26067
        $_.m = $get(_1D, _1E); //#26059
        $_.rows = $get($_.m, 0); //#26060
        $_.minc = $get($_.m, 1); //#26061
        $_.maxc = $get($_.m, 2); //#26062
        $_.mcol = $get($_.m, 3); //#26063
        $_.okay = true; //#26064
        if (($_.tcc < $_.minc) || ($_.tcc > $_.maxc)) { //#26065
            $_.okay = false; //#26065
        } //#26065
        if ($_.okay) { //#26066
            break; //#26066
        } //#26066
    } //#26066
    if (!$_.okay) { //#26071
        $k[$j++] = 'bwipp.ultracodeNoValidSymbol#26070'; //#26070
        $k[$j++] = "Maximum length exceeded or invalid content"; //#26070
        bwipp_raiseerror(); //#26070
    } //#26070
    for (var _1W = $_.mcol; _1W <= 61; _1W += 1) { //#26085
        $_.columns = _1W; //#26075
        $k[$j++] = $_.columns; //#26077
        if ($_.columns >= 15) { //#26077
            var _1Z = $k[--$j]; //#26077
            $k[$j++] = $f(_1Z - 1); //#26077
        } //#26077
        if ($_.columns >= 31) { //#26078
            var _1b = $k[--$j]; //#26078
            $k[$j++] = $f(_1b - 1); //#26078
        } //#26078
        if ($_.columns >= 47) { //#26079
            var _1d = $k[--$j]; //#26079
            $k[$j++] = $f(_1d - 1); //#26079
        } //#26079
        var _1h = $f(($f(($k[--$j] * $_.rows) - 3)) - $_.tcc); //#26080
        $k[$j++] = _1h; //#26083
        if (_1h >= 0) { //#26083
            $_.pads = $k[--$j]; //#26081
            break; //#26082
        } //#26082
        $j--; //#26084
    } //#26084
    $_.dcc = $f($_.columns - $_.mcol); //#26086
    $k[$j++] = Infinity; //#26089
    $k[$j++] = $_.start; //#26093
    $k[$j++] = $_.mcc; //#26093
    $k[$j++] = $_.acc; //#26093
    $aload($_.dcws); //#26093
    for (var _1q = 0, _1r = $_.qcc; _1q < _1r; _1q++) { //#26094
        $k[$j++] = 0; //#26094
    } //#26094
    $k[$j++] = 0; //#26095
    $_.rsseq = $a(); //#26095
    if (!bwipp_ultracode.__26103__) { //#26103
        $_ = Object.create($_); //#26103
        $k[$j++] = Infinity; //#26100
        $k[$j++] = 1; //#26100
        for (var _1t = 0, _1u = 282; _1t < _1u; _1t++) { //#26100
            var _1v = $k[--$j]; //#26100
            $k[$j++] = _1v; //#26100
            $k[$j++] = (_1v * 3) % 283; //#26100
        } //#26100
        $_.rsalog = $a(); //#26100
        $_.rslog = $a(283); //#26101
        for (var _1y = 1; _1y <= 282; _1y += 1) { //#26102
            $put($_.rslog, $get($_.rsalog, _1y), _1y); //#26102
        } //#26102
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_ultracode.$ctx[id] = $_[id]); //#26102
        bwipp_ultracode.__26103__ = 1; //#26102
        $_ = Object.getPrototypeOf($_); //#26102
    } //#26102
    $_.rsprod = function() {
        var _23 = $k[--$j]; //#26107
        var _24 = $k[--$j]; //#26107
        $k[$j++] = _24; //#26111
        $k[$j++] = _23; //#26111
        if ((_23 != 0) && (_24 != 0)) { //#26110
            var _27 = $get($_.rslog, $k[--$j]); //#26108
            var _2C = $get($_.rsalog, $f(_27 + $get($_.rslog, $k[--$j])) % 282); //#26108
            $k[$j++] = _2C; //#26108
        } else { //#26110
            $j -= 2; //#26110
            $k[$j++] = 0; //#26110
        } //#26110
    }; //#26110
    $_.n = $_.mcc; //#26115
    $_.k = $_.qcc; //#26115
    $k[$j++] = Infinity; //#26116
    $k[$j++] = 1; //#26116
    for (var _2G = 0, _2H = $_.k; _2G < _2H; _2G++) { //#26116
        $k[$j++] = 0; //#26116
    } //#26116
    $_.coeffs = $a(); //#26116
    for (var _2L = 1, _2K = $_.k; _2L <= _2K; _2L += 1) { //#26125
        $_.i = _2L; //#26118
        $put($_.coeffs, $_.i, $get($_.coeffs, $_.i - 1)); //#26119
        for (var _2S = $_.i - 1; _2S >= 1; _2S -= 1) { //#26123
            $_.j = _2S; //#26121
            $k[$j++] = $_.coeffs; //#26122
            $k[$j++] = $_.j; //#26122
            $k[$j++] = $get($_.coeffs, $_.j - 1); //#26122
            $k[$j++] = $get($_.coeffs, $_.j); //#26122
            $k[$j++] = $get($_.rsalog, $_.i); //#26122
            $_.rsprod(); //#26122
            var _2e = $k[--$j]; //#26122
            var _2f = $k[--$j]; //#26122
            var _2g = $k[--$j]; //#26122
            $put($k[--$j], _2g, $f(_2f + _2e) % 283); //#26122
        } //#26122
        $k[$j++] = $_.coeffs; //#26124
        $k[$j++] = 0; //#26124
        $k[$j++] = $get($_.coeffs, 0); //#26124
        $k[$j++] = $get($_.rsalog, $_.i); //#26124
        $_.rsprod(); //#26124
        var _2o = $k[--$j]; //#26124
        var _2p = $k[--$j]; //#26124
        $put($k[--$j], _2p, _2o); //#26124
    } //#26124
    $_.coeffs = $geti($_.coeffs, 0, $_.coeffs.length - 1); //#26126
    for (var _2v = $_.coeffs.length - 1; _2v >= 0; _2v -= 2) { //#26127
        var _2w = $_.coeffs; //#26127
        $put(_2w, _2v, $f(283 - $get(_2w, _2v))); //#26127
    } //#26127
    for (var _30 = 0, _2z = $_.n - 1; _30 <= _2z; _30 += 1) { //#26136
        $_.t = $f($get($_.rsseq, _30) + $get($_.rsseq, $_.n)) % 283; //#26131
        for (var _38 = 0, _37 = $_.k - 1; _38 <= _37; _38 += 1) { //#26135
            $_.j = _38; //#26133
            $put($_.rsseq, $_.n + $_.j, ($f($get($_.rsseq, ($_.n + $_.j) + 1) + ($f(283 - (($_.t * $get($_.coeffs, ($_.k - $_.j) - 1)) % 283))))) % 283); //#26134
        } //#26134
    } //#26134
    for (var _3P = $_.n, _3O = $_.n + $_.k; _3P <= _3O; _3P += 1) { //#26137
        $put($_.rsseq, _3P, $f(283 - $get($_.rsseq, _3P)) % 283); //#26137
    } //#26137
    $_.ecws = $geti($_.rsseq, $_.n, $_.k); //#26138
    var _3Y = $get($_.options, 'debugecc') !== undefined; //#26140
    if (_3Y) { //#26140
        $k[$j++] = 'bwipp.debugecc#26140'; //#26140
        $k[$j++] = $_.ecws; //#26140
        bwipp_raiseerror(); //#26140
    } //#26140
    if (!bwipp_ultracode.__26199__) { //#26199
        $_ = Object.create($_); //#26199
        $_.tiles = $a([13135, 13136, 13153, 13156, 13163, 13165, 13513, 13515, 13516, 13531, 13535, 13536, 13561, 13563, 13565, 13613, 13615, 13616, 13631, 13635, 13636, 13651, 13653, 13656, 15135, 15136, 15153, 15163, 15165, 15313, 15315, 15316, 15351, 15353, 15356, 15361, 15363, 15365, 15613, 15615, 15616, 15631, 15635, 15636, 15651, 15653, 15656, 16135, 16136, 16153, 16156, 16165, 16313, 16315, 16316, 16351, 16353, 16356, 16361, 16363, 16365, 16513, 16515, 16516, 16531, 16535, 16536, 16561, 16563, 16565, 31315, 31316, 31351, 31356, 31361, 31365, 31513, 31515, 31516, 31531, 31535, 31536, 31561, 31563, 31565, 31613, 31615, 31631, 31635, 31636, 31651, 31653, 31656, 35131, 35135, 35136, 35151, 35153, 35156, 35161, 35163, 35165, 35315, 35316, 35351, 35356, 35361, 35365, 35613, 35615, 35616, 35631, 35635, 35636, 35651, 35653, 35656, 36131, 36135, 36136, 36151, 36153, 36156, 36163, 36165, 36315, 36316, 36351, 36356, 36361, 36365, 36513, 36515, 36516, 36531, 36535, 36536, 36561, 36563, 36565, 51313, 51315, 51316, 51351, 51353, 51356, 51361, 51363, 51365, 51513, 51516, 51531, 51536, 51561, 51563, 51613, 51615, 51616, 51631, 51635, 51636, 51651, 51653, 51656, 53131, 53135, 53136, 53151, 53153, 53156, 53161, 53163, 53165, 53513, 53516, 53531, 53536, 53561, 53563, 53613, 53615, 53616, 53631, 53635, 53636, 53651, 53653, 53656, 56131, 56135, 56136, 56151, 56153, 56156, 56161, 56163, 56165, 56313, 56315, 56316, 56351, 56353, 56356, 56361, 56363, 56365, 56513, 56516, 56531, 56536, 56561, 56563, 61313, 61315, 61316, 61351, 61353, 61356, 61361, 61363, 61365, 61513, 61515, 61516, 61531, 61535, 61536, 61561, 61563, 61565, 61615, 61631, 61635, 61651, 61653, 63131, 63135, 63136, 63151, 63153, 63156, 63161, 63163, 63165, 63513, 63515, 63516, 63531, 63535, 63536, 63561, 63563, 63565, 63613, 63615, 63631, 63635, 63651, 63653, 65131, 65135, 65136, 65151, 65153, 65156, 65161, 65163, 65165, 65313, 65315, 65316, 65351, 65353, 65356, 65361, 65363, 65365, 65613, 65615, 65631, 65635, 65651, 65653, 56565, 51515]); //#26173
        $_.dccurev1 = $a([51363, 51563, 51653, 53153, 53163, 53513, 53563, 53613, 53653, 56153, 56163, 56313, 56353, 56363, 56513, 56563, 51316, 51356, 51536, 51616, 53156, 53516, 53536, 53616, 53636, 53656, 56136, 56156, 56316, 56356, 56516, 56536]); //#26180
        $_.dcclrev1 = $a([61351, 61361, 61531, 61561, 61631, 61651, 63131, 63151, 63161, 63531, 63561, 63631, 65131, 65161, 65351, 65631, 31351, 31361, 31531, 31561, 31631, 31651, 35131, 35151, 35161, 35361, 35631, 35651, 36131, 36151, 36351, 36531]); //#26186
        $_.dccurev2 = $a([15316, 16316, 13516, 16516, 13616, 15616, 13136, 15136, 16136, 13536, 16536, 13636, 13156, 16156, 15356, 13656, 15313, 16313, 13513, 16513, 13613, 15613, 13153, 15153, 16153, 16353, 13653, 15653, 13163, 15163, 15363, 13563]); //#26192
        $_.dcclrev2 = $a([36315, 36515, 35615, 35135, 36135, 31535, 36535, 31635, 35635, 35165, 36165, 31365, 35365, 36365, 31565, 36565, 61315, 65315, 63515, 61615, 65135, 61535, 63535, 61635, 63635, 65635, 63165, 65165, 61365, 65365, 61565, 63565]); //#26198
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_ultracode.$ctx[id] = $_[id]); //#26198
        bwipp_ultracode.__26199__ = 1; //#26198
        $_ = Object.getPrototypeOf($_); //#26198
    } //#26198
    $k[$j++] = 'dccu'; //#26201
    if ($_.rev == 1) { //#26201
        $k[$j++] = $_.dccurev1; //#26201
    } else { //#26201
        $k[$j++] = $_.dccurev2; //#26201
    } //#26201
    var _3j = $k[--$j]; //#26201
    $_[$k[--$j]] = _3j; //#26201
    $k[$j++] = 'dccl'; //#26202
    if ($_.rev == 1) { //#26202
        $k[$j++] = $_.dcclrev1; //#26202
    } else { //#26202
        $k[$j++] = $_.dcclrev2; //#26202
    } //#26202
    var _3o = $k[--$j]; //#26202
    $_[$k[--$j]] = _3o; //#26202
    $_.rows = $f(($_.rows * 6) + 1); //#26205
    $_.columns = $_.columns + 6; //#26206
    $k[$j++] = Infinity; //#26207
    for (var _3u = 0, _3v = $_.rows * $_.columns; _3u < _3v; _3u++) { //#26207
        $k[$j++] = -1; //#26207
    } //#26207
    $_.pixs = $a(); //#26207
    $_.qmv = function() {
        var _3y = $k[--$j]; //#26208
        var _3z = $k[--$j]; //#26208
        $k[$j++] = $f(_3z + (_3y * $_.columns)); //#26208
    }; //#26208
    for (var _42 = 0, _41 = $_.columns - 1; _42 <= _41; _42 += 1) { //#26217
        $_.i = _42; //#26210
        for (var _45 = 0, _44 = $f($_.rows - 1); _45 <= _44; _45 += 6) { //#26214
            $_.j = _45; //#26212
            if ($_.i >= 5) { //#26213
                $k[$j++] = $_.pixs; //#26213
                $k[$j++] = $_.i; //#26213
                $k[$j++] = $_.j; //#26213
                $_.qmv(); //#26213
                var _4B = $k[--$j]; //#26213
                $put($k[--$j], _4B, ($_.i % 2) * 9); //#26213
            } //#26213
        } //#26213
        $k[$j++] = $_.pixs; //#26215
        $k[$j++] = $_.i; //#26215
        $k[$j++] = 0; //#26215
        $_.qmv(); //#26215
        var _4F = $k[--$j]; //#26215
        $put($k[--$j], _4F, 9); //#26215
        $k[$j++] = $_.pixs; //#26216
        $k[$j++] = $_.i; //#26216
        $k[$j++] = $f($_.rows - 1); //#26216
        $_.qmv(); //#26216
        var _4K = $k[--$j]; //#26216
        $put($k[--$j], _4K, 9); //#26216
    } //#26216
    for (var _4O = 1, _4N = $f($_.rows - 2); _4O <= _4N; _4O += 1) { //#26230
        $_.i = _4O; //#26219
        for (var _4R = 3, _4Q = $_.columns - 1; _4R <= _4Q; _4R += 16) { //#26223
            $_.j = _4R; //#26221
            $k[$j++] = $_.pixs; //#26222
            $k[$j++] = $_.j; //#26222
            $k[$j++] = $_.i; //#26222
            $_.qmv(); //#26222
            var _4W = $k[--$j]; //#26222
            $put($k[--$j], _4W, (1 - ($_.i % 2)) * 9); //#26222
        } //#26222
        $k[$j++] = $_.pixs; //#26224
        $k[$j++] = 0; //#26224
        $k[$j++] = $_.i; //#26224
        $_.qmv(); //#26224
        var _4a = $k[--$j]; //#26224
        $put($k[--$j], _4a, 9); //#26224
        $k[$j++] = $_.pixs; //#26225
        $k[$j++] = 1; //#26225
        $k[$j++] = $_.i; //#26225
        $_.qmv(); //#26225
        var _4f = $k[--$j]; //#26225
        $put($k[--$j], _4f, (1 - ($_.i % 2)) * 9); //#26225
        $k[$j++] = $_.pixs; //#26226
        $k[$j++] = 2; //#26226
        $k[$j++] = $_.i; //#26226
        $_.qmv(); //#26226
        var _4j = $k[--$j]; //#26226
        $put($k[--$j], _4j, 0); //#26226
        $k[$j++] = $_.pixs; //#26227
        $k[$j++] = 3; //#26227
        $k[$j++] = $_.i; //#26227
        $_.qmv(); //#26227
        var _4n = $k[--$j]; //#26227
        $put($k[--$j], _4n, 9); //#26227
        $k[$j++] = $_.pixs; //#26228
        $k[$j++] = 4; //#26228
        $k[$j++] = $_.i; //#26228
        $_.qmv(); //#26228
        var _4r = $k[--$j]; //#26228
        $put($k[--$j], _4r, 0); //#26228
        $k[$j++] = $_.pixs; //#26229
        $k[$j++] = $_.columns - 1; //#26229
        $k[$j++] = $_.i; //#26229
        $_.qmv(); //#26229
        var _4w = $k[--$j]; //#26229
        $put($k[--$j], _4w, 9); //#26229
    } //#26229
    $_.i = (~~($_.rows / 2)) - 5; //#26233
    $k[$j++] = Infinity; //#26234
    var _53 = $cvrs($s(5), $get($_.dccu, $_.dcc), 10); //#26235
    for (var _54 = 0, _55 = _53.length; _54 < _55; _54++) { //#26235
        $k[$j++] = $get(_53, _54) - 48; //#26235
    } //#26235
    var _5B = $cvrs($s(5), $get($_.dccl, $_.dcc), 10); //#26237
    $k[$j++] = 0; //#26237
    for (var _5C = 0, _5D = _5B.length; _5C < _5D; _5C++) { //#26237
        $k[$j++] = $get(_5B, _5C) - 48; //#26237
    } //#26237
    var _5F = $a(); //#26237
    for (var _5G = 0, _5H = _5F.length; _5G < _5H; _5G++) { //#26241
        $k[$j++] = $get(_5F, _5G); //#26239
        $k[$j++] = $_.pixs; //#26239
        $k[$j++] = 2; //#26239
        $k[$j++] = $_.i; //#26239
        $_.qmv(); //#26239
        var _5L = $k[--$j]; //#26239
        var _5M = $k[--$j]; //#26239
        $put(_5M, _5L, $k[--$j]); //#26239
        $_.i = $_.i + 1; //#26240
    } //#26240
    $k[$j++] = Infinity; //#26244
    $k[$j++] = $_.start; //#26247
    $k[$j++] = $_.mcc; //#26247
    $aload($_.ecws); //#26247
    $k[$j++] = $_.tcc; //#26251
    $k[$j++] = 283; //#26251
    $k[$j++] = $_.acc; //#26251
    $aload($_.dcws); //#26251
    for (var _5W = 0, _5X = $_.pads; _5W < _5X; _5W++) { //#26252
        $k[$j++] = 284; //#26252
    } //#26252
    $k[$j++] = $_.qcc; //#26253
    $_.tileseq = $a(); //#26253
    $_.x = 5; //#26256
    $_.y = 1; //#26256
    var _5a = $_.tileseq; //#26257
    for (var _5b = 0, _5c = _5a.length; _5b < _5c; _5b++) { //#26270
        var _5h = $cvrs($s(5), $get($_.tiles, $get(_5a, _5b)), 10); //#26258
        for (var _5i = 0, _5j = _5h.length; _5i < _5j; _5i++) { //#26261
            $k[$j++] = $get(_5h, _5i); //#26259
            $k[$j++] = $_.pixs; //#26259
            $k[$j++] = $_.x; //#26259
            $k[$j++] = $_.y; //#26259
            $_.qmv(); //#26259
            var _5o = $k[--$j]; //#26259
            var _5p = $k[--$j]; //#26259
            $put(_5p, _5o, $f($k[--$j] - 48)); //#26259
            $_.y = $_.y + 1; //#26260
        } //#26260
        if ($_.y != $f($_.rows - 1)) { //#26267
            $_.y = $_.y + 1; //#26263
        } else { //#26267
            $_.x = $_.x + 1; //#26265
            $_.y = 1; //#26265
            $k[$j++] = $_.pixs; //#26266
            $k[$j++] = $_.x; //#26266
            $k[$j++] = $_.y; //#26266
            $_.qmv(); //#26266
            var _5z = $k[--$j]; //#26266
            if ($get($k[--$j], _5z) != -1) { //#26268
                $_.x = $_.x + 1; //#26267
            } //#26267
        } //#26267
    } //#26267
    if (!bwipp_ultracode.__26281__) { //#26281
        $_ = Object.create($_); //#26281
        var _63 = new Map([
            [0, "FFFFFF"],
            [9, "000000"],
            [1, "00FFFF"],
            [3, "FF00FF"],
            [5, "FFFF00"],
            [6, "00FF00"]
        ]); //#26279
        $_.colormap = _63; //#26280
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_ultracode.$ctx[id] = $_[id]); //#26280
        bwipp_ultracode.__26281__ = 1; //#26280
        $_ = Object.getPrototypeOf($_); //#26280
    } //#26280
    var _6C = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $_.pixs],
        ["pixx", $_.columns],
        ["pixy", $_.rows],
        ["height", ($_.rows / 72) * 2],
        ["width", ($_.columns / 72) * 2],
        ["colormap", $_.colormap],
        ["borderleft", 1],
        ["borderright", 1],
        ["bordertop", 1],
        ["borderbottom", 1],
        ["opt", $_.options]
    ]); //#26296
    $k[$j++] = _6C; //#26299
    if (!$_.dontdraw) { //#26299
        bwipp_renmatrix(); //#26299
    } //#26299
    $_ = Object.getPrototypeOf($_); //#26301
    $_ = Object.getPrototypeOf($_); //#26303
} //bwipp_ultracode
function bwipp_jabcode() {
    $_ = Object.create($_); //#26332
    $_.dontdraw = false; //#26335
    $_.rows = -1; //#26336
    $_.columns = -1; //#26337
    $_.slave = false; //#26338
    $_.colors = 16; //#26339
    $_.eclevel = 6; //#26340
    $_.raw = false; //#26341
    $_.parse = false; //#26342
    $_.parsefnc = false; //#26343
    $_.mask = -1; //#26344
    $k[$j++] = $_; //#26346
    bwipp_processoptions(); //#26346
    $_.options = $k[--$j]; //#26346
    $_.barcode = $k[--$j]; //#26347
    $_.databpm = ~~(Math.round(Math.log($_.colors) / Math.log(2))); //#26349
    var _3 = $_.colors; //#26350
    $k[$j++] = 'metabpm'; //#26350
    $k[$j++] = _3; //#26350
    if (_3 > 8) { //#26350
        $j--; //#26350
        $k[$j++] = 8; //#26350
    } //#26350
    var _4 = $k[--$j]; //#26350
    $_[$k[--$j]] = ~~(Math.round(Math.log(_4) / Math.log(2))); //#26350
    $_.fn1 = -1; //#26353
    var _9 = new Map([
        ["parse", $_.parse],
        ["parsefnc", $_.parsefnc],
        ["FNC1", $_.fn1]
    ]); //#26357
    $_.fncvals = _9; //#26358
    $k[$j++] = 'msg'; //#26359
    $k[$j++] = $_.barcode; //#26359
    $k[$j++] = $_.fncvals; //#26359
    bwipp_parseinput(); //#26359
    var _C = $k[--$j]; //#26359
    $_[$k[--$j]] = _C; //#26359
    $_.msglen = $_.msg.length; //#26360
    $_.addtobits = function() {
        var _F = $k[--$j]; //#26381
        $puti($_.bits, $_.j, _F); //#26381
        $_.j = _F.length + $_.j; //#26382
    }; //#26382
    $_.tofixedbits = function() {
        var _K = $strcpy($s(13), "0000000000000"); //#26386
        var _L = $k[--$j]; //#26386
        var _O = $cvrs($s(13), $k[--$j], 2); //#26386
        $puti(_K, $f(_L - _O.length), _O); //#26387
        $k[$j++] = $geti(_K, 0, _L); //#26388
    }; //#26388
    var _R = ($_.msglen <= 15) ? 4 : 17; //#26392
    $_.bits = $s(((7 + _R) + ($_.msglen * 8)) + 12); //#26392
    $_.j = 0; //#26393
    $k[$j++] = 31; //#26394
    $k[$j++] = 5; //#26394
    $_.tofixedbits(); //#26394
    $_.addtobits(); //#26394
    $k[$j++] = "00"; //#26395
    $_.addtobits(); //#26395
    if ($_.msglen <= 15) { //#26400
        $k[$j++] = $_.msglen; //#26397
        $k[$j++] = 4; //#26397
        $_.tofixedbits(); //#26397
        $_.addtobits(); //#26397
    } else { //#26400
        $k[$j++] = "0000"; //#26399
        $_.addtobits(); //#26399
        $k[$j++] = $_.msglen - 16; //#26400
        $k[$j++] = 13; //#26400
        $_.tofixedbits(); //#26400
        $_.addtobits(); //#26400
    } //#26400
    for (var _Z = 0, _Y = $_.msglen - 1; _Z <= _Y; _Z += 1) { //#26404
        $k[$j++] = $get($_.msg, _Z); //#26403
        $k[$j++] = 8; //#26403
        $_.tofixedbits(); //#26403
        $_.addtobits(); //#26403
    } //#26403
    $k[$j++] = 28; //#26405
    $k[$j++] = 5; //#26405
    $_.tofixedbits(); //#26405
    $_.addtobits(); //#26405
    $k[$j++] = 31; //#26406
    $k[$j++] = 5; //#26406
    $_.tofixedbits(); //#26406
    $_.addtobits(); //#26406
    $k[$j++] = "11"; //#26407
    $_.addtobits(); //#26407
    $_.diffside = 21; //#26410
    $_.sameshape = false; //#26411
    $_.sameecc = false; //#26412
    $_.hasslaves = false; //#26413
    $_.metrics = function() {
        $_.mc = $k[--$j]; //#26417
        $_.mr = $k[--$j]; //#26417
        var _e = $_.mc; //#26418
        var _f = $_.mr; //#26418
        var _g = $_.mc; //#26419
        var _h = $_.mr; //#26419
        var _i = $_.colors; //#26421
        var _j = 64; //#26421
        if (64 > _i) { //#26421
            var _ = _i; //#26421
            _i = _j; //#26421
            _j = _; //#26421
        } //#26421
        var _l = $_.slave ? 7 : 17; //#26422
        $k[$j++] = _e * _f; //#26450
        $k[$j++] = ((((~~($f(_g - 25) / 16)) + 2) * ((~~($f(_h - 25) / 16)) + 2)) - 4) * 7; //#26450
        $k[$j++] = _j * 2; //#26450
        $k[$j++] = _l * 4; //#26450
        if (!$_.slave) { //#26449
            var _p = $eq($_.mr, $_.mc) ? 0 : 1; //#26426
            $_.metass = _p; //#26426
            var _q = $_.mr; //#26427
            var _r = $_.mc; //#26427
            if ($lt(_q, _r)) { //#26427
                var _ = _r; //#26427
                _r = _q; //#26427
                _q = _; //#26427
            } //#26427
            $_.metavf = $get($a([0, 1, 2, 2, 3, 3, 3, 3]), ~~($f(_q - 21) / 16)); //#26428
            $k[$j++] = 'metavlen'; //#26429
            if ($_.metass == 0) { //#26429
                $k[$j++] = $a([2, 2, 3, 4]); //#26429
            } else { //#26429
                $k[$j++] = $a([4, 6, 8, 10]); //#26429
            } //#26429
            var _z = $get($k[--$j], $_.metavf); //#26429
            $_[$k[--$j]] = _z; //#26429
            $_.metaelen = $f(($_.metavf * 2) + 10); //#26430
            $k[$j++] = $f($f(7 + $_.metavlen) + $_.metaelen); //#26433
            if ($_.hasslaves) { //#26433
                var _15 = $k[--$j]; //#26433
                $k[$j++] = $f(_15 + 4); //#26433
            } //#26433
            var _18 = ~~(Math.ceil(($k[--$j] * 2) / $_.metabpm)); //#26436
            $_.nummetabits = $f((_18 * $_.metabpm) + 6); //#26436
            $k[$j++] = _18 + 6; //#26437
        } else { //#26449
            $k[$j++] = 3; //#26440
            if (!$_.sameshape) { //#26440
                var _1B = $k[--$j]; //#26440
                $k[$j++] = $f(_1B + 5); //#26440
            } //#26440
            if ($_.hasslaves) { //#26441
                var _1D = $k[--$j]; //#26441
                $k[$j++] = $f(_1D + 3); //#26441
            } //#26441
            if (!$_.sameecc) { //#26446
                var _1F = $_.mr; //#26443
                var _1G = $_.mc; //#26443
                if ($lt(_1F, _1G)) { //#26443
                    var _ = _1G; //#26443
                    _1G = _1F; //#26443
                    _1F = _; //#26443
                } //#26443
                var _1J = $k[--$j]; //#26445
                $k[$j++] = $f(_1J + $get($a([10, 12, 14, 14, 16, 16, 16, 16]), ~~($f(_1F - 21) / 16))); //#26445
            } //#26445
            var _1M = ~~(Math.ceil(($k[--$j] * 2) / $_.metabpm)); //#26449
            $_.nummetabits = _1M * $_.metabpm; //#26449
            $k[$j++] = _1M; //#26449
        } //#26449
        var _1O = $k[--$j]; //#26452
        $_.nummetamodules = _1O; //#26452
        var _1P = $k[--$j]; //#26453
        var _1Q = $k[--$j]; //#26453
        var _1R = $k[--$j]; //#26453
        $_.numdatamodules = $f($k[--$j] - ($f(_1R + ($f(_1Q + $f(_1P + _1O)))))); //#26453
        $_.numdatabits = $_.numdatamodules * $_.databpm; //#26454
    }; //#26454
    $_.coderate = $get($a([0.67, 0.63, 0.57, 0.55, 0.5, 0.43, 0.34, 0.25, 0.2, 0.17, 0.14]), $_.eclevel); //#26458
    $_.grosslen = ~~Math.ceil($_.bits.length / $_.coderate); //#26459
    $_.snapsize = function() {
        var _1b = (~~Math.ceil($k[--$j])) - 18; //#26460
        $k[$j++] = _1b; //#26460
        if (_1b < 0) { //#26460
            $j--; //#26460
            $k[$j++] = 0; //#26460
        } //#26460
        var _1c = $k[--$j]; //#26460
        $k[$j++] = ((~~(_1c / 4)) * 4) + 21; //#26460
    }; //#26460
    if (($_.rows == -1) && ($_.columns == -1)) { //#26489
        $k[$j++] = 'size'; //#26463
        $k[$j++] = Math.sqrt($_.grosslen); //#26463
        $_.snapsize(); //#26463
        var _1g = $k[--$j]; //#26463
        $_[$k[--$j]] = _1g; //#26463
        for (;;) { //#26468
            $k[$j++] = $_.size; //#26465
            $k[$j++] = $_.size; //#26465
            $_.metrics(); //#26465
            if ($_.grosslen <= $_.numdatabits) { //#26466
                break; //#26466
            } //#26466
            $_.size = $f($_.size + 4); //#26467
        } //#26467
        $_.rows = $_.size; //#26469
        $_.columns = $_.size; //#26470
    } else { //#26489
        if (($_.columns == -1) && ($_.rows != -1)) { //#26479
            $k[$j++] = 'columns'; //#26473
            $k[$j++] = $_.grosslen / $_.rows; //#26473
            $_.snapsize(); //#26473
            var _1t = $k[--$j]; //#26473
            $_[$k[--$j]] = _1t; //#26473
            for (;;) { //#26478
                $k[$j++] = $_.rows; //#26475
                $k[$j++] = $_.columns; //#26475
                $_.metrics(); //#26475
                if ($_.grosslen <= $_.numdatabits) { //#26476
                    break; //#26476
                } //#26476
                $_.columns = $f($_.columns + 4); //#26477
            } //#26477
        } //#26477
        if (($_.rows == -1) && ($_.columns != -1)) { //#26487
            $k[$j++] = 'rows'; //#26481
            $k[$j++] = $_.grosslen / $_.columns; //#26481
            $_.snapsize(); //#26481
            var _24 = $k[--$j]; //#26481
            $_[$k[--$j]] = _24; //#26481
            for (;;) { //#26486
                $k[$j++] = $_.rows; //#26483
                $k[$j++] = $_.columns; //#26483
                $_.metrics(); //#26483
                if ($_.grosslen <= $_.numdatabits) { //#26484
                    break; //#26484
                } //#26484
                $_.rows = $f($_.rows + 4); //#26485
            } //#26485
        } //#26485
        if (($_.rows != -1) && ($_.columns != -1)) { //#26490
            $k[$j++] = $_.rows; //#26489
            $k[$j++] = $_.columns; //#26489
            $_.metrics(); //#26489
        } //#26489
    } //#26489
    $_.C = $_.numdatabits; //#26492
    $_.cols = $_.columns; //#26493
    if (($_.rows > 145) || ($_.cols > 145)) { //#26498
        $k[$j++] = 'bwipp.jabcodeNoValidSymbol#26497'; //#26497
        $k[$j++] = "Maximum length exceeded or invalid content"; //#26497
        bwipp_raiseerror(); //#26497
    } //#26497
    $_.min = $_.C; //#26501
    for (var _2K = 3; _2K <= 8; _2K += 1) { //#26513
        $_.i = _2K; //#26503
        for (var _2M = $_.i + 1; _2M <= 9; _2M += 1) { //#26512
            $_.j = _2M; //#26505
            $_.dist = (((~~($_.C / $_.j)) * $_.j) - ((~~($_.C / $_.j)) * $_.i)) - $_.bits.length; //#26506
            if (($_.dist < $_.min) && ($_.dist >= 0)) { //#26511
                $_.datawc = $_.i; //#26508
                $_.datawr = $_.j; //#26509
                $_.min = $_.dist; //#26510
            } //#26510
        } //#26510
    } //#26510
    $_.tmpbits = $s(((~~($_.C / $_.datawr)) * $_.datawr) - ((~~($_.C / $_.datawr)) * $_.datawc)); //#26516
    $puti($_.tmpbits, 0, $_.bits); //#26517
    for (var _2m = $_.bits.length, _2l = $_.tmpbits.length - 1; _2m <= _2l; _2m += 1) { //#26521
        var _2o = $get($_.tmpbits, _2m - 1); //#26519
        $k[$j++] = _2m; //#26519
        $k[$j++] = _2o; //#26519
        if ((_2o % 2) == 0) { //#26519
            var _2p = $k[--$j]; //#26519
            $k[$j++] = $f(_2p + 1); //#26519
        } else { //#26519
            var _2q = $k[--$j]; //#26519
            $k[$j++] = $f(_2q - 1); //#26519
        } //#26519
        var _2s = $k[--$j]; //#26520
        $put($_.tmpbits, $k[--$j], _2s); //#26520
    } //#26520
    $_.bits = $_.tmpbits; //#26522
    $_.m0 = 22609 + 1; //#26526
    $_.m1 = 62509 - 65536; //#26526
    $_.m2 = 19605; //#26526
    $_.m3 = 32557; //#26526
    $_.lcg64_temper = function() {
        $_.p00 = $_.m0 * $_.s0; //#26532
        $_.p01 = $_.m0 * $_.s1; //#26532
        $_.p02 = $_.m0 * $_.s2; //#26532
        $_.p03 = $_.m0 * $_.s3; //#26532
        $_.p10 = $_.m1 * $_.s0; //#26533
        $_.p11 = $_.m1 * $_.s1; //#26533
        $_.p12 = $_.m1 * $_.s2; //#26533
        $_.p13 = $_.m1 * $_.s3; //#26533
        $_.p20 = $_.m2 * $_.s0; //#26534
        $_.p21 = $_.m2 * $_.s1; //#26534
        $_.p22 = $_.m2 * $_.s2; //#26534
        $_.p23 = $_.m2 * $_.s3; //#26534
        $_.p30 = $_.m3 * $_.s0; //#26535
        $_.p31 = $_.m3 * $_.s1; //#26535
        $_.p32 = $_.m3 * $_.s2; //#26535
        $_.p33 = $_.m3 * $_.s3; //#26535
        $_.s3 = ($_.p33 % 65536) + 1; //#26537
        $_.s2 = (($_.p32 % 65536) + (~~($_.p33 / 65536))) + ($_.p23 % 65536); //#26539
        $_.s1 = ((($_.p31 % 65536) + (~~($_.p32 / 65536))) + (($_.p22 % 65536) + (~~($_.p23 / 65536)))) + ($_.p13 % 65536); //#26542
        $_.s0 = (((($_.p30 % 65536) + (~~($_.p31 / 65536))) + (($_.p21 % 65536) + (~~($_.p22 / 65536)))) + (($_.p12 % 65536) + (~~($_.p13 / 65536)))) + ($_.p03 % 65536); //#26546
        $_.s3 = $_.s3 + 65536; //#26549
        $_.s2 = $_.s2 + 65535; //#26550
        $_.s1 = $_.s1 + 65535; //#26551
        $_.s0 = $_.s0 + 65535; //#26552
        $_.s2 = (~~($_.s3 / 65536)) + $_.s2; //#26555
        $_.s3 = $_.s3 % 65536; //#26555
        $_.s1 = (~~($_.s2 / 65536)) + $_.s1; //#26556
        $_.s2 = $_.s2 % 65536; //#26556
        $_.s0 = (~~($_.s1 / 65536)) + $_.s0; //#26557
        $_.s1 = $_.s1 % 65536; //#26557
        $_.s0 = $_.s0 % 65536; //#26558
        var _3x = (((($_.s0 - 32768) * 65536) + $_.s1) ^ 2147483648) & 4294967295; //#26563
        var _3y = _3x ^ (_3x >>> 11); //#26564
        var _3z = _3y ^ ((_3y << 7) & -1658038656); //#26565
        var _40 = (_3z ^ ((_3z << 15) & -272236544)) & 4294967295; //#26567
        $k[$j++] = _40 ^ (_40 >>> 18); //#26567
    }; //#26567
    $_.createMatrixA = function() {
        $k[$j++] = 'nb_pcb'; //#26573
        if ($_.wr < 4) { //#26573
            $k[$j++] = ~~($_.Pg_sub_block / 2); //#26573
        } else { //#26573
            $k[$j++] = (~~($_.Pg_sub_block / $_.wr)) * $_.wc; //#26573
        } //#26573
        var _46 = $k[--$j]; //#26573
        $_[$k[--$j]] = _46; //#26573
        $_.offset = ~~Math.ceil($_.Pg_sub_block / 32); //#26574
        $_.effwidth = $_.offset * 32; //#26575
        $_.matrixA = $a($_.offset * $_.nb_pcb); //#26576
        for (var _4G = 0, _4F = ($_.offset * $_.nb_pcb) - 1; _4G <= _4F; _4G += 1) { //#26577
            $put($_.matrixA, _4G, 0); //#26577
        } //#26577
        $_.permutation = $a($_.Pg_sub_block); //#26578
        for (var _4M = 0, _4L = $_.Pg_sub_block - 1; _4M <= _4L; _4M += 1) { //#26579
            $put($_.permutation, _4M, _4M); //#26579
        } //#26579
        for (var _4R = 0, _4Q = (~~($_.Pg_sub_block / $_.wr)) - 1; _4R <= _4Q; _4R += 1) { //#26588
            $_.i = _4R; //#26582
            for (var _4U = 0, _4T = $f($_.wr - 1); _4U <= _4T; _4U += 1) { //#26587
                $_.j = _4U; //#26584
                var _4V = $_.matrixA; //#26585
                var _4W = $_.i; //#26585
                var _4X = $_.effwidth; //#26585
                var _4Y = $_.wr; //#26585
                var _4Z = $_.j; //#26585
                var _4f = $f(31 - (($f(($_.i * $f($_.effwidth + $_.wr)) + $_.j)) % 32)); //#26586
                $put(_4V, ~~(($f((_4W * $f(_4X + _4Y)) + _4Z)) / 32), $get(_4V, ~~(($f((_4W * $f(_4X + _4Y)) + _4Z)) / 32)) | ((_4f < 0 ? 1 >>> -_4f : 1 << _4f))); //#26586
            } //#26586
        } //#26586
        $_.s0 = 0; //#26591
        $_.s1 = 0; //#26591
        $_.s2 = 11; //#26591
        $_.s3 = 64569; //#26591
        for (var _4i = 1, _4h = $f($_.wc - 1); _4i <= _4h; _4i += 1) { //#26614
            $_.i = _4i; //#26593
            $_.off_index = (~~($_.Pg_sub_block / $_.wr)) * $_.i; //#26594
            for (var _4o = 0, _4n = $_.Pg_sub_block - 1; _4o <= _4n; _4o += 1) { //#26613
                $_.j = _4o; //#26596
                $_.lcg64_temper(); //#26597
                var _4p = $k[--$j]; //#26598
                $k[$j++] = _4p; //#26598
                if (_4p < 0) { //#26598
                    var _4q = $k[--$j]; //#26598
                    $k[$j++] = $f((_4q ^ 2147483648) + 2147483648); //#26598
                } //#26598
                $_.pos = ~~(($k[--$j] / 4294967296) * ($_.Pg_sub_block - $_.j)); //#26600
                for (var _4x = 0, _4w = (~~($_.Pg_sub_block / $_.wr)) - 1; _4x <= _4w; _4x += 1) { //#26609
                    $_.k = _4x; //#26602
                    var _4y = $_.matrixA; //#26603
                    var _4z = $_.off_index; //#26603
                    var _50 = $_.k; //#26603
                    var _51 = $_.offset; //#26603
                    var _52 = $_.j; //#26603
                    var _5A = $get($_.matrixA, (~~($get($_.permutation, $_.pos) / 32)) + ($_.k * $_.offset)); //#26605
                    var _5E = -($f(31 - ($get($_.permutation, $_.pos) % 32))); //#26606
                    var _5G = 31 - ($_.j % 32); //#26607
                    $put(_4y, ((_4z + _50) * _51) + (~~(_52 / 32)), $get(_4y, ((_4z + _50) * _51) + (~~(_52 / 32))) | ((_5G < 0 ? (((_5E < 0 ? _5A >>> -_5E : _5A << _5E)) & 1) >>> -_5G : (((_5E < 0 ? _5A >>> -_5E : _5A << _5E)) & 1) << _5G))); //#26608
                } //#26608
                var _5J = $_.permutation; //#26610
                var _5K = $_.Pg_sub_block; //#26610
                var _5L = $_.j; //#26610
                $put(_5J, (_5K - 1) - _5L, $get($_.permutation, $_.pos)); //#26612
                $put($_.permutation, $_.pos, $get(_5J, (_5K - 1) - _5L)); //#26612
            } //#26612
        } //#26612
    }; //#26612
    $_.createMetadataMatrixA = function() {
        $_.nb_pcb = ~~($_.Pg_sub_block / 2); //#26620
        $_.offset = ~~Math.ceil($_.Pg_sub_block / 32); //#26621
        $_.matrixA = $a($_.offset * $_.nb_pcb); //#26622
        for (var _5Y = 0, _5X = ($_.offset * $_.nb_pcb) - 1; _5Y <= _5X; _5Y += 1) { //#26623
            $put($_.matrixA, _5Y, 0); //#26623
        } //#26623
        $_.permutation = $a($_.Pg_sub_block); //#26624
        for (var _5e = 0, _5d = $_.Pg_sub_block - 1; _5e <= _5d; _5e += 1) { //#26625
            $put($_.permutation, _5e, _5e); //#26625
        } //#26625
        $_.s0 = 0; //#26628
        $_.s1 = 0; //#26628
        $_.s2 = 0; //#26628
        $_.s3 = 38545; //#26628
        $_.nb_once = ~~((~~($f((($_.nb_pcb / $_.wc) * $_.Pg_sub_block) + 3))) / $_.nb_pcb); //#26629
        for (var _5m = 0, _5l = $_.nb_pcb - 1; _5m <= _5l; _5m += 1) { //#26644
            $_.i = _5m; //#26631
            for (var _5p = 0, _5o = $_.nb_once - 1; _5p <= _5o; _5p += 1) { //#26643
                $_.j = _5p; //#26633
                $_.lcg64_temper(); //#26634
                var _5q = $k[--$j]; //#26635
                $k[$j++] = _5q; //#26635
                if (_5q < 0) { //#26635
                    var _5r = $k[--$j]; //#26635
                    $k[$j++] = $f((_5r ^ 2147483648) + 2147483648); //#26635
                } //#26635
                $_.pos = ~~(($k[--$j] / 4294967296) * ($_.Pg_sub_block - $_.j)); //#26637
                var _5v = $_.matrixA; //#26638
                var _5w = $_.i; //#26638
                var _5x = $_.offset; //#26638
                var _60 = $get($_.permutation, $_.pos); //#26638
                var _65 = $f(31 - ($get($_.permutation, $_.pos) % 32)); //#26639
                $put(_5v, (_5w * _5x) + (~~(_60 / 32)), $get(_5v, (_5w * _5x) + (~~(_60 / 32))) | ((_65 < 0 ? 1 >>> -_65 : 1 << _65))); //#26639
                var _68 = $_.permutation; //#26640
                var _69 = $_.Pg_sub_block; //#26640
                var _6A = $_.j; //#26640
                $put(_68, (_69 - 1) - _6A, $get($_.permutation, $_.pos)); //#26642
                $put($_.permutation, $_.pos, $get(_68, (_69 - 1) - _6A)); //#26642
            } //#26642
        } //#26642
    }; //#26642
    $_.GaussJordan = function() {
        $k[$j++] = 'nb_pcb'; //#26650
        if ($_.wr < 4) { //#26650
            $k[$j++] = ~~($_.Pg_sub_block / 2); //#26650
        } else { //#26650
            $k[$j++] = (~~($_.Pg_sub_block / $_.wr)) * $_.wc; //#26650
        } //#26650
        var _6K = $k[--$j]; //#26650
        $_[$k[--$j]] = _6K; //#26650
        $_.offset = ~~Math.ceil($_.Pg_sub_block / 32); //#26651
        var _6N = $_.matrixA; //#26652
        $_.matrixH = $arrcpy($a(_6N.length), _6N); //#26652
        $k[$j++] = Infinity; //#26653
        for (var _6R = 0, _6S = $_.Pg_sub_block; _6R < _6S; _6R++) { //#26653
            $k[$j++] = 0; //#26653
        } //#26653
        $_.column_arrangement = $a(); //#26653
        $k[$j++] = Infinity; //#26654
        for (var _6V = 0, _6W = $_.Pg_sub_block; _6V < _6W; _6V++) { //#26654
            $k[$j++] = false; //#26654
        } //#26654
        $_.processed_column = $a(); //#26654
        $k[$j++] = Infinity; //#26655
        for (var _6Z = 0, _6a = $_.nb_pcb; _6Z < _6a; _6Z++) { //#26655
            $k[$j++] = 0; //#26655
        } //#26655
        $_.zero_lines_nb = $a(); //#26655
        $k[$j++] = Infinity; //#26656
        for (var _6d = 0, _6e = $_.Pg_sub_block * 2; _6d < _6e; _6d++) { //#26656
            $k[$j++] = 0; //#26656
        } //#26656
        $_.swap_col = $a(); //#26656
        $_.zero_lines = 0; //#26657
        $_.loop0 = 0; //#26659
        for (var _6i = 0, _6h = $_.nb_pcb - 1; _6i <= _6h; _6i += 1) { //#26697
            $_.i = _6i; //#26661
            $_.pivot_column = $_.Pg_sub_block + 1; //#26662
            for (var _6m = 0, _6l = $_.Pg_sub_block - 1; _6m <= _6l; _6m += 1) { //#26670
                $_.j = _6m; //#26664
                var _6r = $get($_.matrixH, ~~(((($_.offset * 32) * $_.i) + $_.j) / 32)); //#26665
                var _6v = -(31 - (((($_.offset * 32) * $_.i) + $_.j) % 32)); //#26666
                if ((((_6v < 0 ? _6r >>> -_6v : _6r << _6v)) & 1) == 1) { //#26669
                    $_.pivot_column = $_.j; //#26667
                    break; //#26668
                } //#26668
            } //#26668
            if ($_.pivot_column < $_.Pg_sub_block) { //#26695
                $put($_.processed_column, $_.pivot_column, true); //#26672
                $put($_.column_arrangement, $_.pivot_column, $_.i); //#26673
                if ($_.pivot_column >= $_.nb_pcb) { //#26677
                    $put($_.swap_col, $_.loop0 * 2, $_.pivot_column); //#26675
                    $_.loop0 = $_.loop0 + 1; //#26676
                } //#26676
                $_.off_index = ~~($_.pivot_column / 32); //#26678
                $_.off_index1 = $_.pivot_column % 32; //#26679
                for (var _7E = 0, _7D = $_.nb_pcb - 1; _7E <= _7D; _7E += 1) { //#26692
                    $_.j = _7E; //#26681
                    if ($_.i != $_.j) { //#26691
                        var _7L = $get($_.matrixH, $_.off_index + ($_.j * $_.offset)); //#26683
                        var _7N = -(31 - $_.off_index1); //#26684
                        if ((((_7N < 0 ? _7L >>> -_7N : _7L << _7N)) & 1) == 1) { //#26690
                            for (var _7Q = 0, _7P = $_.offset - 1; _7Q <= _7P; _7Q += 1) { //#26689
                                $_.k = _7Q; //#26686
                                var _7R = $_.matrixH; //#26687
                                var _7S = $_.offset; //#26687
                                var _7T = $_.j; //#26687
                                var _7U = $_.k; //#26687
                                $put(_7R, (_7S * _7T) + _7U, $xo($get(_7R, (_7S * _7T) + _7U), $get($_.matrixH, ($_.offset * $_.i) + $_.k))); //#26688
                            } //#26688
                        } //#26688
                    } //#26688
                } //#26688
            } else { //#26695
                $put($_.zero_lines_nb, $_.zero_lines, $_.i); //#26694
                $_.zero_lines = $_.zero_lines + 1; //#26695
            } //#26695
        } //#26695
        $_.matrix_rank = $_.nb_pcb - $_.zero_lines; //#26699
        $_.loop2 = 0; //#26700
        for (var _7k = $_.matrix_rank, _7j = $_.nb_pcb - 1; _7k <= _7j; _7k += 1) { //#26720
            $_.i = _7k; //#26702
            if ($get($_.column_arrangement, $_.i) > 0) { //#26719
                for (var _7q = 0, _7p = $_.nb_pcb - 1; _7q <= _7p; _7q += 1) { //#26718
                    $_.j = _7q; //#26705
                    if ($nt($get($_.processed_column, $_.j))) { //#26717
                        $put($_.column_arrangement, $_.j, $get($_.column_arrangement, $_.i)); //#26707
                        $put($_.column_arrangement, $_.i, 0); //#26708
                        $put($_.processed_column, $_.j, true); //#26709
                        $put($_.processed_column, $_.i, false); //#26710
                        $put($_.swap_col, $_.loop0 * 2, $_.i); //#26711
                        $put($_.swap_col, ($_.loop0 * 2) + 1, $_.j); //#26712
                        $put($_.column_arrangement, $_.i, $_.j); //#26713
                        $_.loop0 = $_.loop0 + 1; //#26714
                        $_.loop2 = $_.loop2 + 1; //#26715
                        break; //#26716
                    } //#26716
                } //#26716
            } //#26716
        } //#26716
        $_.loop1 = 0; //#26722
        for (var _8I = 0, _8H = $_.nb_pcb - 1; _8I <= _8H; _8I += 1) { //#26731
            $_.kl = _8I; //#26724
            if ($nt($get($_.processed_column, $_.kl)) && ($_.loop1 < ($_.loop0 - $_.loop2))) { //#26730
                $put($_.column_arrangement, $_.kl, $get($_.column_arrangement, $get($_.swap_col, $_.loop1 * 2))); //#26726
                $put($_.processed_column, $_.kl, true); //#26727
                $put($_.swap_col, ($_.loop1 * 2) + 1, $_.kl); //#26728
                $_.loop1 = $_.loop1 + 1; //#26729
            } //#26729
        } //#26729
        $_.loop1 = 0; //#26733
        for (var _8e = 0, _8d = $_.nb_pcb - 1; _8e <= _8d; _8e += 1) { //#26740
            $_.kl = _8e; //#26735
            if ($nt($get($_.processed_column, $_.kl))) { //#26739
                $put($_.column_arrangement, $_.kl, $get($_.zero_lines_nb, $_.loop1)); //#26737
                $_.loop1 = $_.loop1 + 1; //#26738
            } //#26738
        } //#26738
        for (var _8q = 0, _8p = $_.nb_pcb - 1; _8q <= _8p; _8q += 1) { //#26749
            $_.i = _8q; //#26743
            for (var _8t = 0, _8s = $_.offset - 1; _8t <= _8s; _8t += 1) { //#26748
                $_.j = _8t; //#26745
                $put($_.matrixA, ($_.i * $_.offset) + $_.j, $get($_.matrixH, $f(($get($_.column_arrangement, $_.i) * $_.offset) + $_.j))); //#26747
            } //#26747
        } //#26747
        $_.tmp = 0; //#26751
        for (var _97 = 0, _96 = $_.loop0 - 1; _97 <= _96; _97 += 1) { //#26773
            $_.i = _97; //#26753
            for (var _9A = 0, _99 = $_.nb_pcb - 1; _9A <= _99; _9A += 1) { //#26772
                $_.j = _9A; //#26755
                var _9H = $get($_.matrixA, (~~($get($_.swap_col, $_.i * 2) / 32)) + ($_.j * $_.offset)); //#26756
                var _9L = -($f(31 - ($get($_.swap_col, $_.i * 2) % 32))); //#26757
                $_.tmp = (((-(((_9L < 0 ? _9H >>> -_9L : _9H << _9L)) & 1)) ^ $_.tmp) & 1) ^ $_.tmp; //#26758
                var _9O = $_.matrixA; //#26759
                var _9R = $get($_.swap_col, $_.i * 2); //#26759
                var _9S = $_.j; //#26759
                var _9T = $_.offset; //#26759
                var _9b = $get($_.matrixA, (~~($get($_.swap_col, ($_.i * 2) + 1) / 32)) + ($_.j * $_.offset)); //#26761
                var _9f = -($f(31 - ($get($_.swap_col, ($_.i * 2) + 1) % 32))); //#26762
                var _9q = $f(31 - ($get($_.swap_col, $_.i * 2) % 32)); //#26764
                $put(_9O, (~~(_9R / 32)) + (_9S * _9T), $get(_9O, (~~(_9R / 32)) + (_9S * _9T)) ^ (((-(((_9f < 0 ? _9b >>> -_9f : _9b << _9f)) & 1)) ^ $get($_.matrixA, (~~($get($_.swap_col, $_.i * 2) / 32)) + ($_.j * $_.offset))) & ((_9q < 0 ? 1 >>> -_9q : 1 << _9q)))); //#26765
                var _9r = $_.matrixA; //#26766
                var _9u = $get($_.swap_col, ($_.i * 2) + 1); //#26766
                var _9v = $_.j; //#26766
                var _9w = $_.offset; //#26766
                var _A9 = $f(31 - ($get($_.swap_col, ($_.i * 2) + 1) % 32)); //#26770
                $put(_9r, (~~(_9u / 32)) + (_9v * _9w), $get(_9r, (~~(_9u / 32)) + (_9v * _9w)) ^ (((-($_.tmp & 1)) ^ $get($_.matrixA, (~~($get($_.swap_col, ($_.i * 2) + 1) / 32)) + ($_.j * $_.offset))) & ((_A9 < 0 ? 1 >>> -_A9 : 1 << _A9)))); //#26771
            } //#26771
        } //#26771
    }; //#26771
    $_.createGeneratorMatrix = function() {
        $_.pn = $_.Pg_sub_block - $_.matrix_rank; //#26779
        $_.offset = ~~Math.ceil($_.pn / 32); //#26780
        $_.effwidth = $_.offset * 32; //#26781
        $_.offset_cap = ~~Math.ceil($_.Pg_sub_block / 32); //#26782
        $_.G = $a($_.offset * $_.Pg_sub_block); //#26783
        for (var _AL = 0, _AK = ($_.offset * $_.Pg_sub_block) - 1; _AL <= _AK; _AL += 1) { //#26786
            $put($_.G, _AL, 0); //#26785
        } //#26785
        for (var _AP = 0, _AO = $_.pn - 1; _AP <= _AO; _AP += 1) { //#26791
            $_.i = _AP; //#26788
            var _AQ = $_.G; //#26789
            var _AR = $_.Pg_sub_block; //#26789
            var _AS = $_.pn; //#26789
            var _AT = $_.i; //#26789
            var _AU = $_.offset; //#26789
            var _AV = $_.i; //#26789
            var _AY = 31 - ($_.i % 32); //#26790
            $put(_AQ, (((_AR - _AS) + _AT) * _AU) + (~~(_AV / 32)), $get(_AQ, (((_AR - _AS) + _AT) * _AU) + (~~(_AV / 32))) | ((_AY < 0 ? 1 >>> -_AY : 1 << _AY))); //#26790
        } //#26790
        $_.matrix_index = $_.Pg_sub_block - $_.pn; //#26792
        $_.loop0 = 0; //#26793
        for (var _Af = 0, _Ae = (($_.Pg_sub_block - $_.pn) * $_.effwidth) - 1; _Af <= _Ae; _Af += 1) { //#26810
            $_.i = _Af; //#26795
            if ($_.matrix_index >= $_.Pg_sub_block) { //#26799
                $_.loop0 = $_.loop0 + 1; //#26797
                $_.matrix_index = $_.Pg_sub_block - $_.pn; //#26798
            } //#26798
            if (($_.i % $_.effwidth) < $_.pn) { //#26809
                var _Ao = $_.G; //#26801
                var _Ap = $_.i; //#26801
                var _Av = $get($_.matrixA, (~~($_.matrix_index / 32)) + ($_.offset_cap * $_.loop0)); //#26803
                var _Ax = -(31 - ($_.matrix_index % 32)); //#26804
                var _B2 = 31 - ($_.i % 32); //#26806
                $put(_Ao, ~~(_Ap / 32), $get(_Ao, ~~(_Ap / 32)) ^ (((-(((_Ax < 0 ? _Av >>> -_Ax : _Av << _Ax)) & 1)) ^ $get($_.G, ~~($_.i / 32))) & ((_B2 < 0 ? 1 >>> -_B2 : 1 << _B2)))); //#26807
                $_.matrix_index = $_.matrix_index + 1; //#26808
            } //#26808
        } //#26808
    }; //#26808
    $_.ldpc = function() {
        $_.wr = $k[--$j]; //#26816
        $_.wc = $k[--$j]; //#26817
        $k[$j++] = Infinity; //#26818
        var _B6 = $k[--$j]; //#26818
        var _B7 = $k[--$j]; //#26818
        $k[$j++] = _B6; //#26818
        $forall(_B7, function() { //#26818
            var _B8 = $k[--$j]; //#26818
            $k[$j++] = $f(_B8 - 48); //#26818
        }); //#26818
        $_.data = $a(); //#26818
        $_.Pn = $_.data.length; //#26820
        if ($_.wr != -1) { //#26835
            $_.Pg = ~~((Math.ceil((Math.ceil(($_.Pn * $_.wr) / $f($_.wr - $_.wc))) / $_.wr)) * $_.wr); //#26822
            $_.nb_sub_blocks = (~~($_.Pg / 2700)) + 1; //#26823
            $_.Pg_sub_block = (~~((~~($_.Pg / $_.nb_sub_blocks)) / $_.wr)) * $_.wr; //#26824
            $_.Pn_sub_block = ~~(($_.Pg_sub_block * $f($_.wr - $_.wc)) / $_.wr); //#26825
            $_.nb_sub_blocks = ~~($_.Pg / $_.Pg_sub_block); //#26826
            $k[$j++] = 'encoding_iterations'; //#26827
            $k[$j++] = ~~($_.Pg / $_.Pg_sub_block); //#26827
            if (($_.Pn_sub_block * $_.nb_sub_blocks) < $_.Pn) { //#26827
                var _BY = $k[--$j]; //#26827
                $k[$j++] = $f(_BY - 1); //#26827
            } //#26827
            var _BZ = $k[--$j]; //#26827
            $_[$k[--$j]] = _BZ; //#26827
            $_.createMatrixA(); //#26828
        } else { //#26835
            $_.Pg = $_.Pn * 2; //#26830
            $_.nb_sub_blocks = 1; //#26831
            $_.Pg_sub_block = $_.Pg; //#26832
            $_.Pn_sub_block = $_.Pn; //#26833
            $_.encoding_iterations = 1; //#26834
            $_.createMetadataMatrixA(); //#26835
        } //#26835
        $_.GaussJordan(); //#26837
        $_.createGeneratorMatrix(); //#26838
        $_.ecc_encoded_data = $a($_.Pg); //#26840
        $_.offset = ~~(Math.ceil(($_.Pg_sub_block - $_.matrix_rank) / 32)); //#26842
        for (var _Bk = 0, _Bj = $_.encoding_iterations - 1; _Bk <= _Bj; _Bk += 1) { //#26858
            $_.iter = _Bk; //#26844
            for (var _Bn = 0, _Bm = $_.Pg_sub_block - 1; _Bn <= _Bm; _Bn += 1) { //#26857
                $_.i = _Bn; //#26846
                $_.temp = 0; //#26847
                $_.loop0 = 0; //#26848
                $_.offset_index = $_.offset * $_.i; //#26849
                for (var _Bv = $_.iter * $_.Pn_sub_block, _Bu = (($_.iter + 1) * $_.Pn_sub_block) - 1; _Bv <= _Bu; _Bv += 1) { //#26855
                    var _C1 = $get($_.G, $_.offset_index + (~~($_.loop0 / 32))); //#26852
                    var _C3 = -(31 - ($_.loop0 % 32)); //#26852
                    $_.temp = ($get($_.data, _Bv) & (((_C3 < 0 ? _C1 >>> -_C3 : _C1 << _C3)) & 1)) ^ $_.temp; //#26853
                    $_.loop0 = $_.loop0 + 1; //#26854
                } //#26854
                $put($_.ecc_encoded_data, $_.i + ($_.iter * $_.Pg_sub_block), $_.temp); //#26856
            } //#26856
        } //#26856
        if ($_.encoding_iterations != $_.nb_sub_blocks) { //#26882
            $_.start = $_.encoding_iterations * $_.Pn_sub_block; //#26861
            $_.last_index = $_.encoding_iterations * $_.Pg_sub_block; //#26862
            $_.Pg_sub_block = $_.Pg - ($_.encoding_iterations * $_.Pg_sub_block); //#26863
            $_.Pn_sub_block = ~~(($_.Pg_sub_block * $f($_.wr - $_.wc)) / $_.wr); //#26864
            $_.createMatrixA(); //#26865
            $_.GaussJordan(); //#26866
            $_.createGeneratorMatrix(); //#26867
            $_.offset = ~~(Math.ceil(($_.Pg_sub_block - $_.matrix_rank) / 32)); //#26868
            for (var _CS = 0, _CR = $_.Pg_sub_block - 1; _CS <= _CR; _CS += 1) { //#26881
                $_.i = _CS; //#26870
                $_.temp = 0; //#26871
                $_.loop0 = 0; //#26872
                $_.offset_index = $_.offset * $_.i; //#26873
                for (var _CY = $_.start, _CX = $_.Pn - 1; _CY <= _CX; _CY += 1) { //#26879
                    var _Ce = $get($_.G, $_.offset_index + (~~($_.loop0 / 32))); //#26876
                    var _Cg = -(31 - ($_.loop0 % 32)); //#26876
                    $_.temp = ($get($_.data, _CY) & (((_Cg < 0 ? _Ce >>> -_Cg : _Ce << _Cg)) & 1)) ^ $_.temp; //#26877
                    $_.loop0 = $_.loop0 + 1; //#26878
                } //#26878
                $put($_.ecc_encoded_data, $_.i + $_.last_index, $_.temp); //#26880
            } //#26880
        } //#26880
        $_.out = $s($_.Pg); //#26884
        for (var _Cr = 0, _Cq = $_.Pg - 1; _Cr <= _Cq; _Cr += 1) { //#26888
            $put($_.out, _Cr, $f($get($_.ecc_encoded_data, _Cr) + 48)); //#26887
        } //#26887
        $k[$j++] = $_.out; //#26889
    }; //#26889
    $k[$j++] = 'bits'; //#26894
    $k[$j++] = $_.bits; //#26894
    $k[$j++] = $_.datawc; //#26894
    $k[$j++] = $_.datawr; //#26894
    $_.ldpc(); //#26894
    var _Cz = $k[--$j]; //#26894
    $_[$k[--$j]] = _Cz; //#26894
    $_.s0 = 0; //#26897
    $_.s1 = 0; //#26897
    $_.s2 = 3; //#26897
    $_.s3 = 30151; //#26897
    for (var _D2 = $_.bits.length - 1; _D2 >= 1; _D2 -= 1) { //#26907
        $_.l = _D2; //#26899
        $_.lcg64_temper(); //#26900
        var _D3 = $k[--$j]; //#26901
        $k[$j++] = _D3; //#26901
        if (_D3 < 0) { //#26901
            var _D4 = $k[--$j]; //#26901
            $k[$j++] = $f((_D4 ^ 2147483648) + 2147483648); //#26901
        } //#26901
        $_.r = ~~(($k[--$j] / 4294967296) * ($_.l + 1)); //#26903
        $put($_.bits, $_.l, $get($_.bits, $_.r)); //#26905
        $put($_.bits, $_.r, $get($_.bits, $_.l)); //#26906
    } //#26906
    $_.tmpbits = $s($_.C); //#26910
    $puti($_.tmpbits, 0, $_.bits); //#26911
    $_.j = $_.bits.length; //#26912
    for (var _DO = 0, _DP = ~~(($f($f($_.C - $_.j) + 1)) / 2); _DO < _DP; _DO++) { //#26917
        $put($_.tmpbits, $_.j, 48); //#26914
        if (($_.j + 1) < $_.C) { //#26915
            $put($_.tmpbits, $_.j + 1, 49); //#26915
        } //#26915
        $_.j = $_.j + 2; //#26916
    } //#26916
    $_.bits = $_.tmpbits; //#26918
    if ($_.colors == 4) { //#26983
        $_.bi = 0; //#26922
        $_.gi = 1; //#26922
        $_.mi = 2; //#26922
        $_.yi = 3; //#26922
        $_.ki = 4; //#26923
        $_.wi = 5; //#26923
        $k[$j++] = Infinity; //#26924
        $k[$j++] = $_.bi; //#26926
        $k[$j++] = "0000FF"; //#26926
        $k[$j++] = $_.gi; //#26926
        $k[$j++] = "00FF00"; //#26926
        $k[$j++] = $_.mi; //#26926
        $k[$j++] = "FF00FF"; //#26926
        $k[$j++] = $_.yi; //#26926
        $k[$j++] = "FFFF00"; //#26926
        $k[$j++] = $_.ki; //#26926
        $k[$j++] = "000000"; //#26926
        $k[$j++] = $_.wi; //#26926
        $k[$j++] = "FFFFFF"; //#26926
        $_.palette = $d(); //#26927
        $_.metacolorindex = $a([$_.bi, $_.gi, $_.mi, $_.yi]); //#26928
        $_.palettelayout = $a([$_.bi, $_.gi, $_.mi, $_.yi]); //#26929
    } else { //#26983
        var _Dw = new Map([
            [8, $a([2, 2, 2])],
            [16, $a([4, 2, 2])],
            [32, $a([4, 4, 2])],
            [64, $a([4, 4, 4])],
            [128, $a([8, 4, 4])],
            [256, $a([8, 8, 4])]
        ]); //#26938
        $_.rgbres = $get(_Dw, $_.colors); //#26939
        $k[$j++] = 'rvals'; //#26941
        $k[$j++] = $get($_.rgbres, 0); //#26941
        $k[$j++] = Infinity; //#26941
        var _E1 = $k[--$j]; //#26941
        var _E3 = $f($k[--$j] - 1); //#26941
        $k[$j++] = _E1; //#26941
        $k[$j++] = _E3; //#26941
        for (var _E5 = 0, _E4 = _E3; _E5 <= _E4; _E5 += 1) { //#26941
            var _E6 = $k[--$j]; //#26941
            $k[$j++] = ~~(Math.round(_E5 * (255 / _E6))); //#26941
            $k[$j++] = _E6; //#26941
        } //#26941
        $j--; //#26941
        var _E7 = $a(); //#26941
        $_[$k[--$j]] = _E7; //#26941
        $k[$j++] = 'gvals'; //#26942
        $k[$j++] = $get($_.rgbres, 1); //#26942
        $k[$j++] = Infinity; //#26942
        var _EB = $k[--$j]; //#26942
        var _ED = $f($k[--$j] - 1); //#26942
        $k[$j++] = _EB; //#26942
        $k[$j++] = _ED; //#26942
        for (var _EF = 0, _EE = _ED; _EF <= _EE; _EF += 1) { //#26942
            var _EG = $k[--$j]; //#26942
            $k[$j++] = ~~(Math.round(_EF * (255 / _EG))); //#26942
            $k[$j++] = _EG; //#26942
        } //#26942
        $j--; //#26942
        var _EH = $a(); //#26942
        $_[$k[--$j]] = _EH; //#26942
        $k[$j++] = 'bvals'; //#26943
        $k[$j++] = $get($_.rgbres, 2); //#26943
        $k[$j++] = Infinity; //#26943
        var _EL = $k[--$j]; //#26943
        var _EN = $f($k[--$j] - 1); //#26943
        $k[$j++] = _EL; //#26943
        $k[$j++] = _EN; //#26943
        for (var _EP = 0, _EO = _EN; _EP <= _EO; _EP += 1) { //#26943
            var _EQ = $k[--$j]; //#26943
            $k[$j++] = ~~(Math.round(_EP * (255 / _EQ))); //#26943
            $k[$j++] = _EQ; //#26943
        } //#26943
        $j--; //#26943
        var _ER = $a(); //#26943
        $_[$k[--$j]] = _ER; //#26943
        var _ET = $_.colors; //#26945
        $_.palette = new Map; //#26945
        var _EU = $_.colors; //#26946
        var _EV = 64; //#26946
        if (64 > _EU) { //#26946
            var _ = _EU; //#26946
            _EU = _EV; //#26946
            _EV = _; //#26946
        } //#26946
        $_.palettelayout = $a(_EV); //#26946
        $_.i = 0; //#26947
        $_.j = 8; //#26947
        $forall($_.rvals, function() { //#26981
            $_.r = $k[--$j]; //#26949
            $forall($_.gvals, function() { //#26980
                $_.g = $k[--$j]; //#26951
                $forall($_.bvals, function() { //#26979
                    $_.b = $k[--$j]; //#26953
                    var _Eh = $strcpy($s(6), "000000"); //#26955
                    var _Ej = $cvrs($s(6), (($_.r << 16) | ($_.g << 8)) | $_.b, 16); //#26955
                    $puti(_Eh, 6 - _Ej.length, _Ej); //#26955
                    $k[$j++] = _Eh; //#26957
                    $k[$j++] = false; //#26957
                    if ($eq(_Eh, "000000")) { //#26957
                        $_.ki = $_.i; //#26957
                        $j--; //#26957
                        $k[$j++] = true; //#26957
                    } //#26957
                    var _El = $k[--$j]; //#26958
                    var _Em = $k[--$j]; //#26958
                    $k[$j++] = _Em; //#26958
                    $k[$j++] = _El; //#26958
                    if ($eq(_Em, "0000FF")) { //#26958
                        $_.bi = $_.i; //#26958
                        $j--; //#26958
                        $k[$j++] = true; //#26958
                    } //#26958
                    var _Eo = $k[--$j]; //#26959
                    var _Ep = $k[--$j]; //#26959
                    $k[$j++] = _Ep; //#26959
                    $k[$j++] = _Eo; //#26959
                    if ($eq(_Ep, "00FF00")) { //#26959
                        $_.gi = $_.i; //#26959
                        $j--; //#26959
                        $k[$j++] = true; //#26959
                    } //#26959
                    var _Er = $k[--$j]; //#26960
                    var _Es = $k[--$j]; //#26960
                    $k[$j++] = _Es; //#26960
                    $k[$j++] = _Er; //#26960
                    if ($eq(_Es, "00FFFF")) { //#26960
                        $_.ci = $_.i; //#26960
                        $j--; //#26960
                        $k[$j++] = true; //#26960
                    } //#26960
                    var _Eu = $k[--$j]; //#26961
                    var _Ev = $k[--$j]; //#26961
                    $k[$j++] = _Ev; //#26961
                    $k[$j++] = _Eu; //#26961
                    if ($eq(_Ev, "FF0000")) { //#26961
                        $_.ri = $_.i; //#26961
                        $j--; //#26961
                        $k[$j++] = true; //#26961
                    } //#26961
                    var _Ex = $k[--$j]; //#26962
                    var _Ey = $k[--$j]; //#26962
                    $k[$j++] = _Ey; //#26962
                    $k[$j++] = _Ex; //#26962
                    if ($eq(_Ey, "FF00FF")) { //#26962
                        $_.mi = $_.i; //#26962
                        $j--; //#26962
                        $k[$j++] = true; //#26962
                    } //#26962
                    var _F0 = $k[--$j]; //#26963
                    var _F1 = $k[--$j]; //#26963
                    $k[$j++] = _F1; //#26963
                    $k[$j++] = _F0; //#26963
                    if ($eq(_F1, "FFFF00")) { //#26963
                        $_.yi = $_.i; //#26963
                        $j--; //#26963
                        $k[$j++] = true; //#26963
                    } //#26963
                    var _F3 = $k[--$j]; //#26964
                    var _F4 = $k[--$j]; //#26964
                    $k[$j++] = _F4; //#26964
                    $k[$j++] = _F3; //#26964
                    if ($eq(_F4, "FFFFFF")) { //#26964
                        $_.wi = $_.i; //#26964
                        $j--; //#26964
                        $k[$j++] = true; //#26964
                    } //#26964
                    if ($nt($k[--$j])) { //#26976
                        if (($_.colors <= 64) || ((($_.colors == 128) && (((($_.r == 0) || ($_.r == 73)) || ($_.r == 182)) || ($_.r == 255))) || ((($_.colors == 256) && (((($_.r == 0) || ($_.r == 73)) || ($_.r == 182)) || ($_.r == 255))) && (((($_.g == 0) || ($_.g == 73)) || ($_.g == 182)) || ($_.g == 255))))) { //#26975
                            $put($_.palettelayout, $_.j, $_.i); //#26973
                            $_.j = $_.j + 1; //#26974
                        } //#26974
                    } //#26974
                    $put($_.palette, $_.i, $k[--$j]); //#26977
                    $_.i = $_.i + 1; //#26978
                }); //#26978
            }); //#26978
        }); //#26978
        $puti($_.palettelayout, 0, $a([$_.ki, $_.bi, $_.gi, $_.ci, $_.ri, $_.mi, $_.yi, $_.wi])); //#26982
        $_.metacolorindex = $a([$_.ki, $_.bi, $_.gi, $_.ci, $_.ri, $_.mi, $_.yi, $_.wi]); //#26983
    } //#26983
    $k[$j++] = Infinity; //#26987
    for (var _Fp = 0, _Fq = $_.rows * $_.cols; _Fp < _Fq; _Fp++) { //#26987
        $k[$j++] = -1; //#26987
    } //#26987
    $_.pixs = $a(); //#26987
    $_.jmv = function() {
        var _Ft = $k[--$j]; //#26988
        var _Fu = $k[--$j]; //#26988
        $k[$j++] = $f(_Fu + (_Ft * $_.cols)); //#26988
    }; //#26988
    if (!$_.slave) { //#27018
        $_.fpat = $a([$a([1, 1, 1, 0, 0]), $a([1, 2, 2, 0, 0]), $a([1, 2, 1, 2, 1]), $a([0, 0, 2, 2, 1]), $a([0, 0, 1, 1, 1])]); //#26998
        $_.fmap = $a([$a([-1, $_.bi, $_.yi]), $a([-1, $_.yi, $_.bi]), $a([-1, $_.gi, $_.mi]), $a([-1, $_.mi, $_.gi])]); //#27004
    } else { //#27018
        $_.fpat = $a([$a([0, 0, 0, 0, 0]), $a([0, 2, 2, 0, 0]), $a([0, 2, 1, 2, 0]), $a([0, 0, 2, 2, 0]), $a([0, 0, 0, 0, 0])]); //#27012
        $_.fmap = $a([$a([-1, $_.ki, $_.wi]), $a([-1, $_.ki, $_.wi]), $a([-1, $_.ki, $_.wi]), $a([-1, $_.ki, $_.wi])]); //#27018
    } //#27018
    for (var _GY = 0; _GY <= 4; _GY += 1) { //#27030
        $_.y = _GY; //#27021
        for (var _GZ = 0; _GZ <= 4; _GZ += 1) { //#27029
            $_.x = _GZ; //#27023
            $_.fpb = $get($get($_.fpat, $_.y), $_.x); //#27024
            $k[$j++] = $_.pixs; //#27025
            $k[$j++] = $_.x + 1; //#27025
            $k[$j++] = $_.y + 1; //#27025
            $_.jmv(); //#27025
            var _Gm = $k[--$j]; //#27025
            $put($k[--$j], _Gm, $get($get($_.fmap, 0), $_.fpb)); //#27025
            $k[$j++] = $_.pixs; //#27026
            $k[$j++] = $_.x + 1; //#27026
            $k[$j++] = $f($f($_.rows - $_.y) - 2); //#27026
            $_.jmv(); //#27026
            var _Gw = $k[--$j]; //#27026
            $put($k[--$j], _Gw, $get($get($_.fmap, 1), $_.fpb)); //#27026
            $k[$j++] = $_.pixs; //#27027
            $k[$j++] = $f($f($_.x + $_.cols) - 6); //#27027
            $k[$j++] = $_.y + 1; //#27027
            $_.jmv(); //#27027
            var _H6 = $k[--$j]; //#27027
            $put($k[--$j], _H6, $get($get($_.fmap, 2), $_.fpb)); //#27027
            $k[$j++] = $_.pixs; //#27028
            $k[$j++] = $f($f($_.x + $_.cols) - 6); //#27028
            $k[$j++] = $f($f($_.rows - $_.y) - 2); //#27028
            $_.jmv(); //#27028
            var _HH = $k[--$j]; //#27028
            $put($k[--$j], _HH, $get($get($_.fmap, 3), $_.fpb)); //#27028
        } //#27028
    } //#27028
    $_.algnpat0 = $a([$a([$_.ki, $_.ki, -1]), $a([$_.ki, $_.wi, $_.ki]), $a([-1, $_.ki, $_.ki])]); //#27037
    $_.algnpat1 = $a([$a([-1, $_.ki, $_.ki]), $a([$_.ki, $_.wi, $_.ki]), $a([$_.ki, $_.ki, -1])]); //#27042
    $_.num = (~~Math.round($_.cols / 16)) - 1; //#27043
    $_.algnrpos = $a([3, 17]); //#27044
    if ($_.num > 0) { //#27047
        $k[$j++] = Infinity; //#27046
        for (var _Hk = 0, _Hj = $_.num; _Hk <= _Hj; _Hk += 1) { //#27046
            $k[$j++] = (~~(_Hk * ($f($_.cols - 7) / $_.num))) + 3; //#27046
        } //#27046
        $_.algnrpos = $a(); //#27046
    } //#27046
    $_.num = (~~Math.round($_.rows / 16)) - 1; //#27048
    $_.algncpos = $a([3, 17]); //#27049
    if ($_.num > 0) { //#27052
        $k[$j++] = Infinity; //#27051
        for (var _Ht = 0, _Hs = $_.num; _Ht <= _Hs; _Ht += 1) { //#27051
            $k[$j++] = (~~(_Ht * ($f($_.rows - 7) / $_.num))) + 3; //#27051
        } //#27051
        $_.algncpos = $a(); //#27051
    } //#27051
    $_.putalgnpat = function() {
        $_.pp = $k[--$j]; //#27054
        $_.py = $k[--$j]; //#27055
        $_.px = $k[--$j]; //#27056
        for (var _I0 = 0; _I0 <= 2; _I0 += 1) { //#27063
            $_.pb = _I0; //#27058
            for (var _I1 = 0; _I1 <= 2; _I1 += 1) { //#27062
                $_.pa = _I1; //#27060
                $k[$j++] = $_.pixs; //#27061
                $k[$j++] = $f($_.px + $_.pa); //#27061
                $k[$j++] = $f($_.py + $_.pb); //#27061
                $_.jmv(); //#27061
                var _IC = $k[--$j]; //#27061
                $put($k[--$j], _IC, $get($get($_.pp, $_.pb), $_.pa)); //#27061
            } //#27061
        } //#27061
    }; //#27061
    for (var _IG = 0, _IF = $_.algncpos.length - 1; _IG <= _IF; _IG += 1) { //#27075
        $_.j = _IG; //#27066
        $_.y = $get($_.algncpos, $_.j); //#27067
        for (var _IM = 0, _IL = $_.algnrpos.length - 1; _IM <= _IL; _IM += 1) { //#27074
            $_.i = _IM; //#27069
            $_.x = $get($_.algnrpos, $_.i); //#27070
            $k[$j++] = $_.pixs; //#27071
            $k[$j++] = $_.x; //#27071
            $k[$j++] = $_.y; //#27071
            $_.jmv(); //#27071
            var _IT = $k[--$j]; //#27071
            if ($get($k[--$j], _IT) == -1) { //#27073
                $k[$j++] = $f($_.x - 1); //#27072
                $k[$j++] = $f($_.y - 1); //#27072
                if ((($_.i + $_.j) % 2) == 0) { //#27072
                    $k[$j++] = $_.algnpat0; //#27072
                } else { //#27072
                    $k[$j++] = $_.algnpat1; //#27072
                } //#27072
                $_.putalgnpat(); //#27072
            } //#27072
        } //#27072
    } //#27072
    if (!$_.slave) { //#27127
        var _JL = $a([$a([6, 1]), $a([6, 2]), $a([6, 3]), $a([6, 4]), $a([6, 5]), $a([6, 6]), $a([5, 6]), $a([4, 6]), $a([3, 6]), $a([2, 6]), $a([1, 6]), $a([7, 1]), $a([7, 2]), $a([7, 3]), $a([7, 4]), $a([7, 5]), $a([7, 6]), $a([7, 7]), $a([6, 7]), $a([5, 7]), $a([4, 7]), $a([3, 7]), $a([2, 7]), $a([1, 7]), $a([8, 1]), $a([8, 2]), $a([8, 3]), $a([8, 4]), $a([8, 5]), $a([8, 6]), $a([8, 7]), $a([8, 8]), $a([7, 8]), $a([6, 8]), $a([5, 8]), $a([4, 8]), $a([3, 8]), $a([2, 8]), $a([1, 8]), $a([9, 1]), $a([9, 2]), $a([9, 3]), $a([9, 4]), $a([9, 5])]); //#27086
        for (var _JM = 0, _JN = _JL.length; _JM < _JN; _JM++) { //#27090
            $aload($get(_JL, _JM)); //#27088
            $_.y = $k[--$j]; //#27088
            $_.x = $k[--$j]; //#27088
            $k[$j++] = $a([$_.x, $_.y]); //#27089
            $k[$j++] = $a([-$_.x, $_.y]); //#27089
            $k[$j++] = $a([-$_.x, -$_.y]); //#27089
            $k[$j++] = $a([$_.x, -$_.y]); //#27089
        } //#27089
        $astore($a(176)); //#27091
        $_.metadatamap = $k[--$j]; //#27091
        $_.palettemap1 = $a([$a([4, 1]), $a([4, 2]), $a([5, 1]), $a([5, 2]), $a([2, 4]), $a([2, 5]), $a([1, 4]), $a([1, 5]), $a([-2, 1]), $a([-2, 2]), $a([-1, 1]), $a([-1, 2]), $a([-4, 4]), $a([-4, 5]), $a([-5, 4]), $a([-5, 5])]); //#27096
        $_.palettemap2 = $a([$a([-4, -5]), $a([-4, -4]), $a([-5, -5]), $a([-5, -4]), $a([-2, -2]), $a([-2, -1]), $a([-1, -2]), $a([-1, -1]), $a([2, -5]), $a([2, -4]), $a([1, -5]), $a([1, -4]), $a([4, -2]), $a([4, -1]), $a([5, -2]), $a([5, -1])]); //#27101
    } else { //#27127
        $k[$j++] = Infinity; //#27107
        for (var _KD = 1; _KD <= 19; _KD += 1) { //#27111
            $_.i = _KD; //#27109
            $k[$j++] = $a([0, $_.i]); //#27110
            $k[$j++] = $a([1, $_.i]); //#27110
        } //#27110
        for (var _KI = 5; _KI <= 12; _KI += 1) { //#27115
            $_.i = _KI; //#27113
            $k[$j++] = $a([2, $_.i]); //#27114
            $k[$j++] = $a([3, $_.i]); //#27114
        } //#27114
        $_.metadatamap = $a(); //#27114
        $k[$j++] = Infinity; //#27118
        for (var _KO = 5; _KO <= 12; _KO += 1) { //#27119
            $k[$j++] = _KO; //#27119
            $k[$j++] = Infinity; //#27119
            var _KP = $k[--$j]; //#27119
            var _KQ = $k[--$j]; //#27119
            $k[$j++] = _KP; //#27119
            $k[$j++] = 4; //#27119
            $k[$j++] = _KQ; //#27119
            var _KR = $a(); //#27119
            $k[$j++] = _KR; //#27119
        } //#27119
        for (var _KS = 12; _KS >= 5; _KS -= 1) { //#27120
            $k[$j++] = _KS; //#27120
            $k[$j++] = Infinity; //#27120
            var _KT = $k[--$j]; //#27120
            var _KU = $k[--$j]; //#27120
            $k[$j++] = _KT; //#27120
            $k[$j++] = 5; //#27120
            $k[$j++] = _KU; //#27120
            var _KV = $a(); //#27120
            $k[$j++] = _KV; //#27120
        } //#27120
        for (var _KW = 5; _KW <= 12; _KW += 1) { //#27121
            $k[$j++] = _KW; //#27121
            $k[$j++] = Infinity; //#27121
            var _KX = $k[--$j]; //#27121
            var _KY = $k[--$j]; //#27121
            $k[$j++] = _KX; //#27121
            $k[$j++] = 6; //#27121
            $k[$j++] = _KY; //#27121
            var _KZ = $a(); //#27121
            $k[$j++] = _KZ; //#27121
        } //#27121
        for (var _Ka = 12; _Ka >= 5; _Ka -= 1) { //#27122
            $k[$j++] = _Ka; //#27122
            $k[$j++] = Infinity; //#27122
            var _Kb = $k[--$j]; //#27122
            var _Kc = $k[--$j]; //#27122
            $k[$j++] = _Kb; //#27122
            $k[$j++] = 7; //#27122
            $k[$j++] = _Kc; //#27122
            var _Kd = $a(); //#27122
            $k[$j++] = _Kd; //#27122
        } //#27122
        $_.palettemap1 = $a(); //#27122
        $k[$j++] = Infinity; //#27125
        var _Kf = $_.palettemap1; //#27126
        for (var _Kg = 0, _Kh = _Kf.length; _Kg < _Kh; _Kg++) { //#27126
            $k[$j++] = $get(_Kf, _Kg); //#27126
            $k[$j++] = Infinity; //#27126
            var _Kj = $k[--$j]; //#27126
            var _Kk = $k[--$j]; //#27126
            $k[$j++] = _Kj; //#27126
            $aload(_Kk); //#27126
            var _Kl = $k[--$j]; //#27126
            var _Km = $k[--$j]; //#27126
            $k[$j++] = -_Km; //#27126
            $k[$j++] = -_Kl; //#27126
            var _Kn = $a(); //#27126
            $k[$j++] = _Kn; //#27126
        } //#27126
        $_.palettemap2 = $a(); //#27126
    } //#27127
    var _Kp = $_.metadatamap; //#27132
    for (var _Kq = 0, _Kr = _Kp.length; _Kq < _Kr; _Kq++) { //#27136
        var _Ks = $get(_Kp, _Kq); //#27136
        var _Kt = $get(_Ks, 0); //#27133
        $k[$j++] = _Ks; //#27133
        $k[$j++] = _Kt; //#27133
        if (_Kt < 0) { //#27133
            var _Kv = $k[--$j]; //#27133
            var _Kw = $k[--$j]; //#27133
            $put(_Kw, 0, $f($f(_Kv + $_.cols) - 1)); //#27133
            $k[$j++] = _Kw; //#27133
        } else { //#27133
            $j--; //#27133
        } //#27133
        var _Kx = $k[--$j]; //#27134
        var _Ky = $get(_Kx, 1); //#27134
        $k[$j++] = _Kx; //#27134
        $k[$j++] = _Ky; //#27134
        if (_Ky < 0) { //#27134
            var _L0 = $k[--$j]; //#27134
            var _L1 = $k[--$j]; //#27134
            $put(_L1, 1, $f($f(_L0 + $_.rows) - 1)); //#27134
            $k[$j++] = _L1; //#27134
        } else { //#27134
            $j--; //#27134
        } //#27134
        $j--; //#27135
    } //#27135
    var _L2 = $_.palettemap1; //#27137
    for (var _L3 = 0, _L4 = _L2.length; _L3 < _L4; _L3++) { //#27141
        var _L5 = $get(_L2, _L3); //#27141
        var _L6 = $get(_L5, 0); //#27138
        $k[$j++] = _L5; //#27138
        $k[$j++] = _L6; //#27138
        if (_L6 < 0) { //#27138
            var _L8 = $k[--$j]; //#27138
            var _L9 = $k[--$j]; //#27138
            $put(_L9, 0, $f($f(_L8 + $_.cols) - 1)); //#27138
            $k[$j++] = _L9; //#27138
        } else { //#27138
            $j--; //#27138
        } //#27138
        var _LA = $k[--$j]; //#27139
        var _LB = $get(_LA, 1); //#27139
        $k[$j++] = _LA; //#27139
        $k[$j++] = _LB; //#27139
        if (_LB < 0) { //#27139
            var _LD = $k[--$j]; //#27139
            var _LE = $k[--$j]; //#27139
            $put(_LE, 1, $f($f(_LD + $_.rows) - 1)); //#27139
            $k[$j++] = _LE; //#27139
        } else { //#27139
            $j--; //#27139
        } //#27139
        $j--; //#27140
    } //#27140
    var _LF = $_.palettemap2; //#27142
    for (var _LG = 0, _LH = _LF.length; _LG < _LH; _LG++) { //#27146
        var _LI = $get(_LF, _LG); //#27146
        var _LJ = $get(_LI, 0); //#27143
        $k[$j++] = _LI; //#27143
        $k[$j++] = _LJ; //#27143
        if (_LJ < 0) { //#27143
            var _LL = $k[--$j]; //#27143
            var _LM = $k[--$j]; //#27143
            $put(_LM, 0, $f($f(_LL + $_.cols) - 1)); //#27143
            $k[$j++] = _LM; //#27143
        } else { //#27143
            $j--; //#27143
        } //#27143
        var _LN = $k[--$j]; //#27144
        var _LO = $get(_LN, 1); //#27144
        $k[$j++] = _LN; //#27144
        $k[$j++] = _LO; //#27144
        if (_LO < 0) { //#27144
            var _LQ = $k[--$j]; //#27144
            var _LR = $k[--$j]; //#27144
            $put(_LR, 1, $f($f(_LQ + $_.rows) - 1)); //#27144
            $k[$j++] = _LR; //#27144
        } else { //#27144
            $j--; //#27144
        } //#27144
        $j--; //#27145
    } //#27145
    for (var _LU = 0, _LT = $f($_.nummetamodules - 1); _LU <= _LT; _LU += 1) { //#27151
        $k[$j++] = $_.pixs; //#27150
        $aload($get($_.metadatamap, _LU)); //#27150
        $_.jmv(); //#27150
        var _LY = $k[--$j]; //#27150
        $put($k[--$j], _LY, 0); //#27150
    } //#27150
    if (!$_.slave) { //#27164
        var _Lb = $_.colors; //#27156
        var _Lc = 16; //#27156
        if (16 > _Lb) { //#27156
            var _ = _Lb; //#27156
            _Lb = _Lc; //#27156
            _Lc = _; //#27156
        } //#27156
        for (var _Le = 0, _Ld = _Lc - 1; _Le <= _Ld; _Le += 1) { //#27161
            $_.i = _Le; //#27157
            var _Lh = $get($_.palettelayout, $_.i); //#27158
            $k[$j++] = _Lh; //#27159
            $k[$j++] = $_.pixs; //#27159
            $k[$j++] = _Lh; //#27159
            $aload($get($_.palettemap1, $_.i)); //#27159
            $_.jmv(); //#27159
            var _Lm = $k[--$j]; //#27159
            var _Ln = $k[--$j]; //#27159
            $put($k[--$j], _Lm, _Ln); //#27159
            var _Lq = $k[--$j]; //#27160
            $k[$j++] = $_.pixs; //#27160
            $k[$j++] = _Lq; //#27160
            $aload($get($_.palettemap2, $_.i)); //#27160
            $_.jmv(); //#27160
            var _Lu = $k[--$j]; //#27160
            var _Lv = $k[--$j]; //#27160
            $put($k[--$j], _Lu, _Lv); //#27160
        } //#27160
        $_.i = 16; //#27162
    } else { //#27164
        $_.i = 0; //#27164
    } //#27164
    $_.j = $_.nummetamodules; //#27168
    for (var _M1 = $_.i, _M0 = $_.palettelayout.length - 1; _M1 <= _M0; _M1 += 2) { //#27178
        $_.i = _M1; //#27170
        var _M4 = $get($_.palettelayout, $_.i); //#27171
        $k[$j++] = _M4; //#27172
        $k[$j++] = $_.pixs; //#27172
        $k[$j++] = _M4; //#27172
        $aload($get($_.metadatamap, $_.j)); //#27172
        $_.jmv(); //#27172
        var _M9 = $k[--$j]; //#27172
        var _MA = $k[--$j]; //#27172
        $put($k[--$j], _M9, _MA); //#27172
        var _MD = $k[--$j]; //#27173
        $k[$j++] = $_.pixs; //#27173
        $k[$j++] = _MD; //#27173
        $aload($get($_.metadatamap, $f($_.j + 2))); //#27173
        $_.jmv(); //#27173
        var _MH = $k[--$j]; //#27173
        var _MI = $k[--$j]; //#27173
        $put($k[--$j], _MH, _MI); //#27173
        var _MM = $get($_.palettelayout, $_.i + 1); //#27174
        $k[$j++] = _MM; //#27175
        $k[$j++] = $_.pixs; //#27175
        $k[$j++] = _MM; //#27175
        $aload($get($_.metadatamap, $f($_.j + 1))); //#27175
        $_.jmv(); //#27175
        var _MR = $k[--$j]; //#27175
        var _MS = $k[--$j]; //#27175
        $put($k[--$j], _MR, _MS); //#27175
        var _MV = $k[--$j]; //#27176
        $k[$j++] = $_.pixs; //#27176
        $k[$j++] = _MV; //#27176
        $aload($get($_.metadatamap, $f($_.j + 3))); //#27176
        $_.jmv(); //#27176
        var _MZ = $k[--$j]; //#27176
        var _Ma = $k[--$j]; //#27176
        $put($k[--$j], _MZ, _Ma); //#27176
        $_.j = $f($_.j + 4); //#27177
    } //#27177
    var _N2 = $a([function() {
        var _Md = $k[--$j]; //#27182
        var _Me = $k[--$j]; //#27182
        $k[$j++] = $f(_Me + _Md) % $_.colors; //#27182
    }, function() {
        $j--; //#27183
        var _Mh = $k[--$j]; //#27183
        $k[$j++] = _Mh % $_.colors; //#27183
    }, function() {
        var _Mi = $k[--$j]; //#27184
        var _Mj = $k[--$j]; //#27184
        $k[$j++] = _Mi; //#27184
        $k[$j++] = _Mj; //#27184
        $j--; //#27184
        var _Ml = $k[--$j]; //#27184
        $k[$j++] = _Ml % $_.colors; //#27184
    }, function() {
        var _Mm = $k[--$j]; //#27185
        var _Mn = $k[--$j]; //#27185
        $k[$j++] = ((~~(_Mm / 3)) + (~~(_Mn / 2))) % $_.colors; //#27185
    }, function() {
        var _Mp = $k[--$j]; //#27186
        var _Mq = $k[--$j]; //#27186
        $k[$j++] = ((~~(_Mp / 2)) + (~~(_Mq / 3))) % $_.colors; //#27186
    }, function() {
        var _Ms = $k[--$j]; //#27187
        var _Mu = $f($k[--$j] + _Ms); //#27187
        $k[$j++] = ((~~(_Mu / 2)) + (~~(_Mu / 3))) % $_.colors; //#27187
    }, function() {
        var _Mw = $k[--$j]; //#27188
        var _Mx = $k[--$j]; //#27188
        $k[$j++] = ($f(((_Mw * (_Mx * _Mx)) % 7) + ((($f(_Mw + (_Mx * _Mx))) * 2) % 19))) % $_.colors; //#27188
    }, function() {
        var _Mz = $k[--$j]; //#27189
        var _N0 = $k[--$j]; //#27189
        $k[$j++] = ($f(((_N0 * (_Mz * _Mz)) % 5) + (($f((_Mz * _Mz) + (_N0 * 2))) % 13))) % $_.colors; //#27189
    }]); //#27189
    $_.maskfuncs = _N2; //#27190
    if ($_.mask != -1) { //#27194
        $_.maskfuncs = $a([$get($_.maskfuncs, $_.mask)]); //#27192
        $_.bestmaskval = $_.mask; //#27193
    } //#27193
    $_.masks = $a($_.maskfuncs.length); //#27195
    for (var _ND = 0, _NC = $_.masks.length - 1; _ND <= _NC; _ND += 1) { //#27208
        $_.m = _ND; //#27197
        $_.mask = $a($_.rows * $_.cols); //#27198
        for (var _NJ = 0, _NI = $f($_.rows - 1); _NJ <= _NI; _NJ += 1) { //#27206
            $_.j = _NJ; //#27200
            for (var _NM = 0, _NL = $f($_.cols - 1); _NM <= _NL; _NM += 1) { //#27205
                $_.i = _NM; //#27202
                $k[$j++] = $_.pixs; //#27203
                $k[$j++] = $_.i; //#27203
                $k[$j++] = $_.j; //#27203
                $_.jmv(); //#27203
                var _NQ = $k[--$j]; //#27203
                if ($get($k[--$j], _NQ) == -1) { //#27203
                    $k[$j++] = $_.i; //#27203
                    $k[$j++] = $_.j; //#27203
                    if ($get($_.maskfuncs, $_.m)() === true) {
                        break;
                    } //#27203
                } else { //#27203
                    $k[$j++] = 0; //#27203
                } //#27203
                $k[$j++] = $_.mask; //#27204
                $k[$j++] = $_.i; //#27204
                $k[$j++] = $_.j; //#27204
                $_.jmv(); //#27204
                var _Nb = $k[--$j]; //#27204
                var _Nc = $k[--$j]; //#27204
                $put(_Nc, _Nb, $k[--$j]); //#27204
            } //#27204
        } //#27204
        $put($_.masks, $_.m, $_.mask); //#27207
    } //#27207
    $_.posx = 0; //#27211
    $_.posy = 0; //#27211
    $_.i = 0; //#27212
    for (;;) { //#27222
        if ($_.posx == $_.cols) { //#27214
            break; //#27214
        } //#27214
        $k[$j++] = $_.pixs; //#27215
        $k[$j++] = $_.posx; //#27215
        $k[$j++] = $_.posy; //#27215
        $_.jmv(); //#27215
        var _Nm = $k[--$j]; //#27215
        if ($get($k[--$j], _Nm) == -1) { //#27219
            var _Ns = $geti($_.bits, $_.i, $_.databpm); //#27216
            $k[$j++] = 0; //#27216
            for (var _Nt = 0, _Nu = _Ns.length; _Nt < _Nu; _Nt++) { //#27216
                var _Nw = $k[--$j]; //#27216
                $k[$j++] = ($f(_Nw + $f($get(_Ns, _Nt) - 48))) * 2; //#27216
            } //#27216
            var _Nx = $k[--$j]; //#27216
            $k[$j++] = ~~(_Nx / 2); //#27217
            $k[$j++] = $_.pixs; //#27217
            $k[$j++] = $_.posx; //#27217
            $k[$j++] = $_.posy; //#27217
            $_.jmv(); //#27217
            var _O1 = $k[--$j]; //#27217
            var _O2 = $k[--$j]; //#27217
            $put(_O2, _O1, $k[--$j]); //#27217
            $_.i = $_.i + $_.databpm; //#27218
        } //#27218
        $_.posy = $_.posy + 1; //#27220
        if ($_.posy == $_.rows) { //#27221
            $_.posy = 0; //#27221
            $_.posx = $_.posx + 1; //#27221
        } //#27221
    } //#27221
    $_.evalrle = function() {
        $_.scrle = $k[--$j]; //#27226
        $_.scr1 = 0; //#27227
        $_.scr3 = 0; //#27227
        for (var _OD = 0, _OC = $_.scrle.length - 2; _OD <= _OC; _OD += 2) { //#27249
            $_.j = _OD; //#27229
            if ($get($_.scrle, $_.j + 1) != -1) { //#27248
                var _OJ = $get($_.scrle, $_.j); //#27232
                $k[$j++] = _OJ; //#27232
                if (_OJ >= 5) { //#27232
                    $_.scr1 = $f($f($k[--$j] - 2) + $_.scr1); //#27232
                } else { //#27232
                    $j--; //#27232
                } //#27232
                if (($_.j >= 4) && ($_.j <= ($_.scrle.length - 5))) { //#27247
                    var _OR = $geti($_.scrle, $_.j - 4, 10); //#27235
                    $k[$j++] = _OR; //#27236
                    for (var _OS = 0, _OT = _OR.length; _OS < _OT; _OS++) { //#27236
                        $k[$j++] = $get(_OR, _OS) == 1; //#27236
                    } //#27236
                    $j--; //#27236
                    for (var _OV = 0, _OW = 4; _OV < _OW; _OV++) { //#27236
                        var _OX = $k[--$j]; //#27236
                        var _OY = $k[--$j]; //#27236
                        $k[$j++] = _OX; //#27236
                        $k[$j++] = _OY; //#27236
                        $j--; //#27236
                        var _OZ = $k[--$j]; //#27236
                        var _Oa = $k[--$j]; //#27236
                        $k[$j++] = $an(_Oa, _OZ); //#27236
                    } //#27236
                    if ($k[--$j]) { //#27246
                        $k[$j++] = Infinity; //#27237
                        var _Oc = $k[--$j]; //#27237
                        var _Od = $k[--$j]; //#27237
                        $k[$j++] = _Oc; //#27237
                        $aload(_Od); //#27237
                        var _Oe = $k[--$j]; //#27238
                        var _Of = $k[--$j]; //#27238
                        var _Og = $k[--$j]; //#27238
                        var _Oh = $k[--$j]; //#27238
                        var _Oi = $k[--$j]; //#27238
                        var _Oj = $k[--$j]; //#27238
                        var _Ok = $k[--$j]; //#27238
                        var _Ol = $k[--$j]; //#27238
                        var _Om = $k[--$j]; //#27238
                        $k[$j++] = _Om; //#27244
                        $k[$j++] = _Ol; //#27244
                        $k[$j++] = _Ok; //#27244
                        $k[$j++] = _Oj; //#27244
                        $k[$j++] = _Oi; //#27244
                        $k[$j++] = _Oh; //#27244
                        $k[$j++] = _Og; //#27244
                        $k[$j++] = _Of; //#27244
                        $k[$j++] = _Oe; //#27244
                        if (($eq(_Om, _Oi) && $eq(_Om, _Oe)) && $eq(_Ok, _Og)) { //#27244
                            var _On = $k[--$j]; //#27240
                            var _Oo = $k[--$j]; //#27240
                            var _Op = $k[--$j]; //#27240
                            $_.c4 = _Op; //#27240
                            $_.c5 = _On; //#27240
                            $k[$j++] = _Op; //#27243
                            $k[$j++] = _Oo; //#27243
                            if ((($_.c4 == $_.bi) && ($_.c5 == $_.yi)) || ((($_.c4 == $_.yi) && ($_.c5 == $_.bi)) || ((($_.c4 == $_.gi) && ($_.c5 == $_.mi)) || (($_.c4 == $_.mi) && ($_.c5 == $_.gi))))) { //#27243
                                $_.scr3 = $_.scr3 + 100; //#27243
                            } //#27243
                        } //#27243
                        $cleartomark(); //#27245
                    } else { //#27246
                        $j--; //#27246
                    } //#27246
                } //#27246
            } //#27246
        } //#27246
        $k[$j++] = $_.scr1; //#27250
        $k[$j++] = $_.scr3; //#27250
    }; //#27250
    $_.evalmask = function() {
        $_.sym = $k[--$j]; //#27254
        $_.n1 = 0; //#27256
        $_.n2 = 0; //#27256
        $_.n3 = 0; //#27256
        var _PA = $_.rows; //#27257
        var _PB = $_.cols; //#27257
        if (_PA < _PB) { //#27257
            var _ = _PB; //#27257
            _PB = _PA; //#27257
            _PA = _; //#27257
        } //#27257
        $_.rle = $a($f((_PA * 2) + 2)); //#27257
        $_.lastpairs = $a($_.cols); //#27258
        $_.thispairs = $a($_.cols); //#27259
        for (var _PJ = 0, _PI = $f($_.cols - 1); _PJ <= _PI; _PJ += 1) { //#27271
            $_.i = _PJ; //#27263
            $k[$j++] = Infinity; //#27264
            $k[$j++] = 0; //#27267
            $k[$j++] = -1; //#27267
            for (var _PP = $_.i, _PQ = $_.cols, _PO = $f(($_.rows * $_.cols) - 1); _PQ < 0 ? _PP >= _PO : _PP <= _PO; _PP += _PQ) { //#27267
                var _PS = $get($_.sym, _PP); //#27266
                var _PT = $k[--$j]; //#27266
                $k[$j++] = _PT; //#27266
                $k[$j++] = _PS; //#27266
                if ($eq(_PT, _PS)) { //#27266
                    $j--; //#27266
                    var _PU = $k[--$j]; //#27266
                    var _PV = $k[--$j]; //#27266
                    $k[$j++] = $f(_PV + 1); //#27266
                    $k[$j++] = _PU; //#27266
                } else { //#27266
                    var _PW = $k[--$j]; //#27266
                    $k[$j++] = 1; //#27266
                    $k[$j++] = _PW; //#27266
                } //#27266
            } //#27266
            var _PY = $counttomark() + 2; //#27268
            $astore($geti($_.rle, 0, _PY - 2)); //#27268
            $_.evalrle(); //#27269
            $_.n3 = $f($k[--$j] + $_.n3); //#27269
            $_.n1 = $f($k[--$j] + $_.n1); //#27269
            $j--; //#27270
        } //#27270
        for (var _Pg = 0, _Pf = $f($_.rows - 1); _Pg <= _Pf; _Pg += 1) { //#27298
            $_.i = _Pg; //#27274
            $_.symrow = $geti($_.sym, $_.i * $_.cols, $_.cols); //#27277
            $k[$j++] = Infinity; //#27278
            var _Pm = $_.symrow; //#27279
            $k[$j++] = 0; //#27281
            $k[$j++] = -1; //#27281
            for (var _Pn = 0, _Po = _Pm.length; _Pn < _Po; _Pn++) { //#27281
                var _Pp = $get(_Pm, _Pn); //#27281
                var _Pq = $k[--$j]; //#27280
                $k[$j++] = _Pq; //#27280
                $k[$j++] = _Pp; //#27280
                if ($eq(_Pq, _Pp)) { //#27280
                    $j--; //#27280
                    var _Pr = $k[--$j]; //#27280
                    var _Ps = $k[--$j]; //#27280
                    $k[$j++] = $f(_Ps + 1); //#27280
                    $k[$j++] = _Pr; //#27280
                } else { //#27280
                    var _Pt = $k[--$j]; //#27280
                    $k[$j++] = 1; //#27280
                    $k[$j++] = _Pt; //#27280
                } //#27280
            } //#27280
            var _Pv = $counttomark() + 2; //#27282
            $astore($geti($_.rle, 0, _Pv - 2)); //#27282
            $_.evalrle(); //#27283
            $_.n3 = $f($k[--$j] + $_.n3); //#27283
            $_.n1 = $f($k[--$j] + $_.n1); //#27283
            $j--; //#27284
            var _Q1 = $_.thispairs; //#27287
            $_.thispairs = $_.lastpairs; //#27287
            $_.lastpairs = _Q1; //#27287
            var _Q3 = $_.symrow; //#27288
            $k[$j++] = -1; //#27288
            for (var _Q4 = 0, _Q5 = _Q3.length; _Q4 < _Q5; _Q4++) { //#27288
                var _Q6 = $get(_Q3, _Q4); //#27288
                var _Q7 = $k[--$j]; //#27288
                $k[$j++] = _Q6; //#27288
                $k[$j++] = _Q7; //#27288
                if ($ne(_Q6, _Q7)) { //#27288
                    $j--; //#27288
                    var _Q8 = $k[--$j]; //#27288
                    $k[$j++] = -1; //#27288
                    $k[$j++] = _Q8; //#27288
                } //#27288
            } //#27288
            $j--; //#27289
            $astore($_.thispairs); //#27290
            $j--; //#27290
            if ($_.i > 0) { //#27297
                $k[$j++] = Infinity; //#27292
                $aload($_.lastpairs); //#27293
                $aload($_.thispairs); //#27293
                $k[$j++] = $_.n2; //#27294
                for (var _QF = 0, _QG = $_.cols; _QF < _QG; _QF++) { //#27294
                    var _QH = $k[--$j]; //#27294
                    var _QI = $k[--$j]; //#27294
                    $k[$j++] = _QH; //#27294
                    $k[$j++] = _QI; //#27294
                    if (_QI != -1) { //#27294
                        var _QK = $k[$j - 1 - $f($_.cols + 1)]; //#27294
                        if ($eq($k[--$j], _QK)) { //#27294
                            var _QM = $k[--$j]; //#27294
                            $k[$j++] = $f(_QM + 3); //#27294
                        } //#27294
                    } else { //#27294
                        $j--; //#27294
                    } //#27294
                } //#27294
                $_.n2 = $k[--$j]; //#27295
                $cleartomark(); //#27296
            } //#27296
        } //#27296
        $k[$j++] = $f($f($_.n1 + $_.n2) + $_.n3); //#27300
    }; //#27300
    $_.bestscore = 999999999; //#27304
    for (var _QT = 0, _QS = $_.masks.length - 1; _QT <= _QS; _QT += 1) { //#27322
        $_.m = _QT; //#27306
        $_.masksym = $a($_.rows * $_.cols); //#27307
        for (var _Qa = 0, _QZ = $f(($_.rows * $_.cols) - 1); _Qa <= _QZ; _Qa += 1) { //#27311
            $_.i = _Qa; //#27309
            $put($_.masksym, $_.i, $xo($get($_.pixs, $_.i), $get($get($_.masks, $_.m), $_.i))); //#27310
        } //#27310
        if ($_.masks.length != 1) { //#27320
            $k[$j++] = $_.masksym; //#27313
            $_.evalmask(); //#27313
            $_.score = $k[--$j]; //#27313
            if ($_.score < $_.bestscore) { //#27318
                $_.bestsym = $_.masksym; //#27315
                $_.bestmaskval = $_.m; //#27316
                $_.bestscore = $_.score; //#27317
            } //#27317
        } else { //#27320
            $_.bestsym = $_.masksym; //#27320
        } //#27320
    } //#27320
    $_.pixs = $_.bestsym; //#27323
    $_.metamask = $_.bestmaskval; //#27324
    $_.addtometapart = function() {
        var _Qw = $k[--$j]; //#27328
        $puti($_.metapart, $_.p, _Qw); //#27328
        $_.p = _Qw.length + $_.p; //#27329
    }; //#27329
    $_.addtometabits = function() {
        var _R0 = $k[--$j]; //#27333
        $puti($_.metabits, $_.q, _R0); //#27333
        $_.q = _R0.length + $_.q; //#27334
    }; //#27334
    $_.metapart = $s(40); //#27337
    $_.metabits = $s($_.nummetabits); //#27338
    $_.p = 0; //#27339
    $_.q = 0; //#27339
    if (!$_.slave) { //#27394
        $k[$j++] = (~~(Math.round(Math.log($_.colors) / Math.log(2)))) - 1; //#27344
        $k[$j++] = 3; //#27344
        $_.tofixedbits(); //#27344
        $_.addtometapart(); //#27344
        $k[$j++] = $geti($_.metapart, 0, $_.p); //#27345
        $k[$j++] = 2; //#27345
        $k[$j++] = -1; //#27345
        $_.ldpc(); //#27345
        $_.addtometabits(); //#27345
        $_.p = 0; //#27345
        $k[$j++] = $_.metass; //#27348
        $k[$j++] = 1; //#27348
        $_.tofixedbits(); //#27348
        $_.addtometapart(); //#27348
        $k[$j++] = $_.metavf; //#27349
        $k[$j++] = 2; //#27349
        $_.tofixedbits(); //#27349
        $_.addtometapart(); //#27349
        $k[$j++] = $_.metamask; //#27350
        $k[$j++] = 3; //#27350
        $_.tofixedbits(); //#27350
        $_.addtometapart(); //#27350
        if ($_.hasslaves) { //#27351
            $k[$j++] = "1"; //#27351
        } else { //#27351
            $k[$j++] = "0"; //#27351
        } //#27351
        $_.addtometapart(); //#27351
        $k[$j++] = $geti($_.metapart, 0, $_.p); //#27352
        $k[$j++] = 2; //#27352
        $k[$j++] = -1; //#27352
        $_.ldpc(); //#27352
        $_.addtometabits(); //#27352
        $_.p = 0; //#27352
        if ($_.metass == 0) { //#27362
            $k[$j++] = $f(($f((~~($f($_.cols - 17) / 4)) - $get($a([0, 4, 8, 16]), $_.metavf))) - 1); //#27357
            $k[$j++] = $_.metavlen; //#27357
            $_.tofixedbits(); //#27357
            $_.addtometapart(); //#27357
        } else { //#27362
            $k[$j++] = (~~($f($_.cols - 17) / 4)) - 1; //#27360
            $k[$j++] = ~~($_.metavlen / 2); //#27360
            $_.tofixedbits(); //#27360
            $_.addtometapart(); //#27360
            $k[$j++] = (~~($f($_.rows - 17) / 4)) - 1; //#27362
            $k[$j++] = ~~($_.metavlen / 2); //#27362
            $_.tofixedbits(); //#27362
            $_.addtometapart(); //#27362
        } //#27362
        $k[$j++] = $_.datawc - 3; //#27364
        $k[$j++] = ~~($_.metaelen / 2); //#27364
        $_.tofixedbits(); //#27364
        $_.addtometapart(); //#27364
        $k[$j++] = $_.datawr - 4; //#27365
        $k[$j++] = ~~($_.metaelen / 2); //#27365
        $_.tofixedbits(); //#27365
        $_.addtometapart(); //#27365
        if ($_.hasslaves) { //#27368
            $k[$j++] = 0; //#27367
            $k[$j++] = 4; //#27367
            $_.tofixedbits(); //#27367
            $_.addtometapart(); //#27367
        } //#27367
        $k[$j++] = $geti($_.metapart, 0, $_.p); //#27369
        $k[$j++] = 2; //#27369
        $k[$j++] = -1; //#27369
        $_.ldpc(); //#27369
        $_.addtometabits(); //#27369
        $_.p = 0; //#27369
    } else { //#27394
        var _Rc = $_.sameshape ? 0 : 1; //#27374
        $k[$j++] = _Rc; //#27374
        $k[$j++] = 1; //#27374
        $_.tofixedbits(); //#27374
        $_.addtometapart(); //#27374
        var _Re = $_.sameecc ? 0 : 1; //#27375
        $k[$j++] = _Re; //#27375
        $k[$j++] = 1; //#27375
        $_.tofixedbits(); //#27375
        $_.addtometapart(); //#27375
        var _Rg = $_.hasslaves ? 1 : 0; //#27376
        $k[$j++] = _Rg; //#27376
        $k[$j++] = 1; //#27376
        $_.tofixedbits(); //#27376
        $_.addtometapart(); //#27376
        $k[$j++] = $geti($_.metapart, 0, $_.p); //#27377
        $k[$j++] = 2; //#27377
        $k[$j++] = -1; //#27377
        $_.ldpc(); //#27377
        $_.addtometabits(); //#27377
        $_.p = 0; //#27377
        if (!$_.sameshape) { //#27383
            $k[$j++] = (~~(($_.diffside - 17) / 4)) - 1; //#27382
            $k[$j++] = 5; //#27382
            $_.tofixedbits(); //#27382
            $_.addtometapart(); //#27382
        } //#27382
        if ($_.hasslaves) { //#27386
            $k[$j++] = 0; //#27385
            $k[$j++] = 3; //#27385
            $_.tofixedbits(); //#27385
            $_.addtometapart(); //#27385
        } //#27385
        $k[$j++] = $geti($_.metapart, 0, $_.p); //#27387
        $k[$j++] = 2; //#27387
        $k[$j++] = -1; //#27387
        $_.ldpc(); //#27387
        $_.addtometabits(); //#27387
        $_.p = 0; //#27387
        if (!$_.sameecc) { //#27393
            $k[$j++] = $_.datawc - 3; //#27391
            $k[$j++] = ~~($_.metaelen / 2); //#27391
            $_.tofixedbits(); //#27391
            $_.addtometapart(); //#27391
            $k[$j++] = $_.datawr - 4; //#27392
            $k[$j++] = ~~($_.metaelen / 2); //#27392
            $_.tofixedbits(); //#27392
            $_.addtometapart(); //#27392
        } //#27392
        $k[$j++] = $geti($_.metapart, 0, $_.p); //#27394
        $k[$j++] = 2; //#27394
        $k[$j++] = -1; //#27394
        $_.ldpc(); //#27394
        $_.addtometabits(); //#27394
        $_.p = 0; //#27394
    } //#27394
    for (var _S1 = $_.q, _S0 = $f($_.nummetabits - 1); _S1 <= _S0; _S1 += 1) { //#27399
        $put($_.metabits, _S1, 48); //#27398
    } //#27398
    $_.i = 0; //#27402
    $_.j = 0; //#27402
    if (!$_.slave) { //#27410
        var _S6 = $geti($_.metabits, $_.i, 6); //#27404
        for (var _S7 = 0, _S8 = _S6.length; _S7 < _S8; _S7++) { //#27408
            $k[$j++] = $get(_S6, _S7); //#27405
            if ($_.colors == 4) { //#27405
                $k[$j++] = $a([$_.bi, $_.yi]); //#27405
            } else { //#27405
                $k[$j++] = $a([$_.ki, $_.wi]); //#27405
            } //#27405
            var _SH = $k[--$j]; //#27405
            var _SJ = $get(_SH, $f($k[--$j] - 48)); //#27405
            $k[$j++] = _SJ; //#27406
            $k[$j++] = $_.pixs; //#27406
            $aload($get($_.metadatamap, $_.j)); //#27406
            $_.jmv(); //#27406
            var _SO = $k[--$j]; //#27406
            var _SP = $k[--$j]; //#27406
            $put(_SP, _SO, $k[--$j]); //#27406
            $_.j = $_.j + 1; //#27407
        } //#27407
        $_.i = $_.i + 6; //#27409
    } //#27409
    for (var _SW = 0, _SX = ~~($f($_.nummetabits - $_.i) / $_.metabpm); _SW < _SX; _SW++) { //#27417
        var _Sb = $geti($_.metabits, $_.i, $_.metabpm); //#27412
        $k[$j++] = 0; //#27412
        for (var _Sc = 0, _Sd = _Sb.length; _Sc < _Sd; _Sc++) { //#27412
            var _Sf = $k[--$j]; //#27412
            $k[$j++] = ($f(_Sf + $f($get(_Sb, _Sc) - 48))) * 2; //#27412
        } //#27412
        var _Si = $get($_.metacolorindex, ~~($k[--$j] / 2)); //#27413
        $k[$j++] = _Si; //#27414
        $k[$j++] = $_.pixs; //#27414
        $aload($get($_.metadatamap, $_.j)); //#27414
        $_.jmv(); //#27414
        var _Sn = $k[--$j]; //#27414
        var _So = $k[--$j]; //#27414
        $put(_So, _Sn, $k[--$j]); //#27414
        $_.i = $f($_.i + $_.metabpm); //#27415
        $_.j = $_.j + 1; //#27416
    } //#27416
    var _T0 = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $_.pixs],
        ["pixx", $_.cols],
        ["pixy", $_.rows],
        ["colormap", $_.palette],
        ["height", ($_.rows * 2) / 72],
        ["width", ($_.cols * 2) / 72],
        ["borderleft", 0],
        ["borderright", 0],
        ["bordertop", 0],
        ["borderbottom", 0],
        ["opt", $_.options]
    ]); //#27431
    $k[$j++] = _T0; //#27434
    if (!$_.dontdraw) { //#27434
        bwipp_renmatrix(); //#27434
    } //#27434
    $_ = Object.getPrototypeOf($_); //#27436
} //bwipp_jabcode
function bwipp_gs1_cc() {
    $_ = Object.create($_); //#27469
    $_.parse = false; //#27472
    $_.dontlint = false; //#27473
    $_.lintreqs = false; //#27474
    $_.dontdraw = false; //#27475
    $_.ccversion = "a"; //#27476
    $_.cccolumns = -1; //#27477
    $_.lintype = ""; //#27478
    $_.linwidth = -1; //#27479
    $k[$j++] = $_; //#27481
    bwipp_processoptions(); //#27481
    $_.options = $k[--$j]; //#27481
    $_.barcode = $k[--$j]; //#27482
    bwipp_loadctx(bwipp_gs1_cc) //#27484
    if (($ne($_.ccversion, "a") && $ne($_.ccversion, "b")) && $ne($_.ccversion, "c")) { //#27488
        $k[$j++] = 'bwipp.gs1ccBadCCversion#27487'; //#27487
        $k[$j++] = "ccversion must be a, b or c"; //#27487
        bwipp_raiseerror(); //#27487
    } //#27487
    if ($_.cccolumns > 30) { //#27492
        $k[$j++] = 'bwipp.gs1ccColumnsTooBig#27491'; //#27491
        $k[$j++] = "The maximum number of composite component columns is 30"; //#27491
        bwipp_raiseerror(); //#27491
    } //#27491
    if (!bwipp_gs1_cc.__27509__) { //#27509
        $_ = Object.create($_); //#27509
        var _6 = new Map([
            ["ean13", 4],
            ["upca", 4],
            ["ean8", 3],
            ["upce", 2],
            ["gs1-128", 4],
            ["databaromni", 4],
            ["databarstacked", 2],
            ["databarstackedomni", 2],
            ["databartruncated", 4],
            ["databarlimited", 3],
            ["databarexpanded", 4],
            ["databarexpandedstacked", 4]
        ]); //#27507
        $_.lintypecccolumns = _6; //#27508
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_gs1_cc.$ctx[id] = $_[id]); //#27508
        bwipp_gs1_cc.__27509__ = 1; //#27508
        $_ = Object.getPrototypeOf($_); //#27508
    } //#27508
    if ($ne($_.lintype, "")) { //#27515
        var _B = $get($_.lintypecccolumns, $_.lintype) !== undefined; //#27512
        if (!_B) { //#27514
            $k[$j++] = 'bwipp.gs1ccBadLinType#27513'; //#27513
            $k[$j++] = "The lintype is not recognised"; //#27513
            bwipp_raiseerror(); //#27513
        } //#27513
    } //#27513
    if ($_.cccolumns == -1) { //#27531
        if ($eq($_.lintype, "gs1-128") && $eq($_.ccversion, "c")) { //#27528
            if ($_.linwidth < 0) { //#27522
                $k[$j++] = 'bwipp.gs1ccMissingLinWidth#27521'; //#27521
                $k[$j++] = "linwidth must be set for a GS1-128 with a CC-C composite component"; //#27521
                bwipp_raiseerror(); //#27521
            } //#27521
            if ($_.linwidth < 68) { //#27525
                $k[$j++] = 'bwipp.gs1ccMinimumLinWidth#27524'; //#27524
                $k[$j++] = "Minimum linwidth for a GS1-128 with a CC-C composite component is 68"; //#27524
                bwipp_raiseerror(); //#27524
            } //#27524
            if ($_.linwidth == 68) { //#27526
                $k[$j++] = 1; //#27526
            } else { //#27526
                $k[$j++] = ~~(($_.linwidth - 52) / 17); //#27526
            } //#27526
        } else { //#27528
            if ($ne($_.lintype, "")) { //#27528
                $k[$j++] = $get($_.lintypecccolumns, $_.lintype); //#27528
            } else { //#27528
                $k[$j++] = 2; //#27528
            } //#27528
        } //#27528
        $_.cccolumns = $k[--$j]; //#27530
    } //#27530
    $k[$j++] = $_.barcode; //#27533
    $k[$j++] = 'ai'; //#27533
    bwipp_gs1process(); //#27533
    $_.fncs = $k[--$j]; //#27534
    $_.vals = $k[--$j]; //#27535
    $_.ais = $k[--$j]; //#27536
    $_.isupper = function() {
        var _S = $k[--$j]; //#27539
        $k[$j++] = (_S >= 65) && (_S <= 90); //#27539
    }; //#27539
    $_.isnum0 = function() {
        var _T = $k[--$j]; //#27540
        $k[$j++] = (_T >= 48) && (_T <= 57); //#27540
    }; //#27540
    $_.isnum1 = function() {
        var _U = $k[--$j]; //#27541
        $k[$j++] = (_U >= 49) && (_U <= 57); //#27541
    }; //#27541
    for (;;) { //#27587
        if ($_.ais.length >= 1) { //#27549
            if (($eq($get($_.ais, 0), "10") || $eq($get($_.ais, 0), "11")) || $eq($get($_.ais, 0), "17")) { //#27548
                $k[$j++] = -1; //#27547
                $k[$j++] = "10"; //#27547
                break; //#27547
            } //#27547
        } //#27547
        if ($_.ais.length >= 1) { //#27582
            if ($eq($get($_.ais, 0), "90")) { //#27581
                $_.v = $get($_.vals, 0); //#27554
                if ($_.v.length >= 1) { //#27559
                    $k[$j++] = $get($_.v, 0); //#27556
                    $_.isupper(); //#27556
                    if ($k[--$j]) { //#27558
                        $k[$j++] = 0; //#27557
                        $k[$j++] = "11"; //#27557
                        break; //#27557
                    } //#27557
                } //#27557
                if ($_.v.length >= 2) { //#27565
                    $k[$j++] = $get($_.v, 0); //#27561
                    $_.isnum1(); //#27561
                    $k[$j++] = $get($_.v, 1); //#27562
                    $_.isupper(); //#27562
                    var _q = $k[--$j]; //#27562
                    var _r = $k[--$j]; //#27562
                    if ((_r && _q)) { //#27564
                        $k[$j++] = 1; //#27563
                        $k[$j++] = "11"; //#27563
                        break; //#27563
                    } //#27563
                } //#27563
                if ($_.v.length >= 3) { //#27572
                    $k[$j++] = $get($_.v, 0); //#27567
                    $_.isnum1(); //#27567
                    $k[$j++] = $get($_.v, 1); //#27568
                    $_.isnum0(); //#27568
                    var _x = $k[--$j]; //#27568
                    var _y = $k[--$j]; //#27568
                    $k[$j++] = $an(_y, _x); //#27569
                    $k[$j++] = $get($_.v, 2); //#27569
                    $_.isupper(); //#27569
                    var _11 = $k[--$j]; //#27569
                    var _12 = $k[--$j]; //#27569
                    if ((_12 && _11)) { //#27571
                        $k[$j++] = 2; //#27570
                        $k[$j++] = "11"; //#27570
                        break; //#27570
                    } //#27570
                } //#27570
                if ($_.v.length >= 4) { //#27580
                    $k[$j++] = $get($_.v, 0); //#27574
                    $_.isnum1(); //#27574
                    $k[$j++] = $get($_.v, 1); //#27575
                    $_.isnum0(); //#27575
                    var _18 = $k[--$j]; //#27575
                    var _19 = $k[--$j]; //#27575
                    $k[$j++] = $an(_19, _18); //#27576
                    $k[$j++] = $get($_.v, 2); //#27576
                    $_.isnum0(); //#27576
                    var _1C = $k[--$j]; //#27576
                    var _1D = $k[--$j]; //#27576
                    $k[$j++] = $an(_1D, _1C); //#27577
                    $k[$j++] = $get($_.v, 3); //#27577
                    $_.isupper(); //#27577
                    var _1G = $k[--$j]; //#27577
                    var _1H = $k[--$j]; //#27577
                    if ((_1H && _1G)) { //#27579
                        $k[$j++] = 3; //#27578
                        $k[$j++] = "11"; //#27578
                        break; //#27578
                    } //#27578
                } //#27578
            } //#27578
        } //#27578
        $k[$j++] = -1; //#27585
        $k[$j++] = "0"; //#27585
        break; //#27585
    } //#27585
    $_.method = $k[--$j]; //#27588
    $_.npre = $k[--$j]; //#27589
    $_.tobin = function() {
        var _1L = $s($k[--$j]); //#27592
        $k[$j++] = _1L; //#27592
        for (var _1N = 0, _1M = _1L.length - 1; _1N <= _1M; _1N += 1) { //#27592
            var _1O = $k[--$j]; //#27592
            $put(_1O, _1N, 48); //#27592
            $k[$j++] = _1O; //#27592
        } //#27592
        var _1P = $k[--$j]; //#27593
        var _1S = $cvrs($s(_1P.length), $k[--$j], 2); //#27593
        $puti(_1P, _1P.length - _1S.length, _1S); //#27593
        $k[$j++] = _1P; //#27593
    }; //#27593
    if (!bwipp_gs1_cc.__27644__) { //#27644
        $_ = Object.create($_); //#27644
        $_.fnc1 = -1; //#27598
        $_.lnumeric = -2; //#27598
        $_.lalphanumeric = -3; //#27598
        $_.liso646 = -4; //#27598
        $k[$j++] = Infinity; //#27600
        for (var _1T = 65; _1T <= 90; _1T += 1) { //#27601
            $k[$j++] = _1T; //#27601
            $k[$j++] = _1T - 65; //#27601
            $k[$j++] = 5; //#27601
            $_.tobin(); //#27601
        } //#27601
        for (var _1U = 48; _1U <= 57; _1U += 1) { //#27602
            $k[$j++] = _1U; //#27602
            $k[$j++] = _1U + 4; //#27602
            $k[$j++] = 6; //#27602
            $_.tobin(); //#27602
        } //#27602
        $k[$j++] = $_.fnc1; //#27603
        $k[$j++] = "11111"; //#27603
        $_.alpha = $d(); //#27604
        $k[$j++] = Infinity; //#27606
        for (var _1X = 0; _1X <= 119; _1X += 1) { //#27615
            var _1Z = $strcpy($s(2), "00"); //#27608
            var _1b = $cvrs($s(2), _1X, 11); //#27608
            $puti(_1Z, 2 - _1b.length, _1b); //#27609
            $k[$j++] = _1X; //#27610
            $k[$j++] = _1Z; //#27610
            if ($get(_1Z, 0) == 65) { //#27610
                var _1d = $k[--$j]; //#27610
                $put(_1d, 0, 94); //#27610
                $k[$j++] = _1d; //#27610
            } //#27610
            var _1e = $k[--$j]; //#27611
            $k[$j++] = _1e; //#27611
            if ($get(_1e, 1) == 65) { //#27611
                var _1g = $k[--$j]; //#27611
                $put(_1g, 1, 94); //#27611
                $k[$j++] = _1g; //#27611
            } //#27611
            var _1h = $k[--$j]; //#27612
            var _1k = $strcpy($s(7), "0000000"); //#27613
            var _1m = $cvrs($s(7), $f($k[--$j] + 8), 2); //#27613
            $puti(_1k, 7 - _1m.length, _1m); //#27614
            $k[$j++] = _1h; //#27614
            $k[$j++] = _1k; //#27614
        } //#27614
        $k[$j++] = $_.lalphanumeric; //#27616
        $k[$j++] = "0000"; //#27616
        $_.numeric = $d(); //#27617
        $k[$j++] = Infinity; //#27619
        for (var _1p = 48; _1p <= 57; _1p += 1) { //#27620
            $k[$j++] = _1p; //#27620
            $k[$j++] = _1p - 43; //#27620
            $k[$j++] = 5; //#27620
            $_.tobin(); //#27620
        } //#27620
        $k[$j++] = $_.fnc1; //#27622
        $k[$j++] = "01111"; //#27622
        for (var _1r = 65; _1r <= 90; _1r += 1) { //#27622
            $k[$j++] = _1r; //#27622
            $k[$j++] = _1r - 33; //#27622
            $k[$j++] = 6; //#27622
            $_.tobin(); //#27622
        } //#27622
        $k[$j++] = 42; //#27624
        $k[$j++] = "111010"; //#27624
        for (var _1s = 44; _1s <= 47; _1s += 1) { //#27624
            $k[$j++] = _1s; //#27624
            $k[$j++] = _1s + 15; //#27624
            $k[$j++] = 6; //#27624
            $_.tobin(); //#27624
        } //#27624
        $k[$j++] = $_.lnumeric; //#27626
        $k[$j++] = "000"; //#27626
        $k[$j++] = $_.liso646; //#27626
        $k[$j++] = "00100"; //#27626
        $_.alphanumeric = $d(); //#27627
        $k[$j++] = Infinity; //#27629
        for (var _1w = 48; _1w <= 57; _1w += 1) { //#27630
            $k[$j++] = _1w; //#27630
            $k[$j++] = _1w - 43; //#27630
            $k[$j++] = 5; //#27630
            $_.tobin(); //#27630
        } //#27630
        $k[$j++] = $_.fnc1; //#27632
        $k[$j++] = "01111"; //#27632
        for (var _1y = 65; _1y <= 90; _1y += 1) { //#27632
            $k[$j++] = _1y; //#27632
            $k[$j++] = _1y - 1; //#27632
            $k[$j++] = 7; //#27632
            $_.tobin(); //#27632
        } //#27632
        for (var _1z = 97; _1z <= 122; _1z += 1) { //#27633
            $k[$j++] = _1z; //#27633
            $k[$j++] = _1z - 7; //#27633
            $k[$j++] = 7; //#27633
            $_.tobin(); //#27633
        } //#27633
        $k[$j++] = 33; //#27636
        $k[$j++] = "11101000"; //#27636
        $k[$j++] = 34; //#27636
        $k[$j++] = "11101001"; //#27636
        for (var _20 = 37; _20 <= 47; _20 += 1) { //#27636
            $k[$j++] = _20; //#27636
            $k[$j++] = _20 + 197; //#27636
            $k[$j++] = 8; //#27636
            $_.tobin(); //#27636
        } //#27636
        for (var _21 = 58; _21 <= 63; _21 += 1) { //#27637
            $k[$j++] = _21; //#27637
            $k[$j++] = _21 + 187; //#27637
            $k[$j++] = 8; //#27637
            $_.tobin(); //#27637
        } //#27637
        $k[$j++] = 95; //#27641
        $k[$j++] = "11111011"; //#27641
        $k[$j++] = 32; //#27641
        $k[$j++] = "11111100"; //#27641
        $k[$j++] = $_.lnumeric; //#27641
        $k[$j++] = "000"; //#27641
        $k[$j++] = $_.lalphanumeric; //#27641
        $k[$j++] = "00100"; //#27641
        $_.iso646 = $d(); //#27642
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_gs1_cc.$ctx[id] = $_[id]); //#27642
        bwipp_gs1_cc.__27644__ = 1; //#27642
        $_ = Object.getPrototypeOf($_); //#27642
    } //#27642
    if ($eq($_.method, "10")) { //#27679
        if ($eq($get($_.ais, 0), "11") || $eq($get($_.ais, 0), "17")) { //#27662
            var _2C = $get($_.vals, 0); //#27648
            var _2H = $strcpy($s(16), "0000000000000000"); //#27652
            var _2J = $cvrs($s(16), ($cvi($geti(_2C, 0, 2)) * 384) + ((($cvi($geti(_2C, 2, 2)) - 1) * 32) + $cvi($geti(_2C, 4, 2))), 2); //#27652
            $puti(_2H, 16 - _2J.length, _2J); //#27653
            $k[$j++] = _2H; //#27656
            $k[$j++] = Infinity; //#27654
            var _2K = $k[--$j]; //#27655
            var _2L = $k[--$j]; //#27655
            $k[$j++] = _2K; //#27655
            $k[$j++] = 1; //#27655
            $k[$j++] = 0; //#27655
            $forall(_2L, function() { //#27655
                var _2M = $k[--$j]; //#27655
                $k[$j++] = $f(_2M - 48); //#27655
            }); //#27655
            var _2P = $eq($get($_.ais, 0), "11") ? 0 : 1; //#27656
            $k[$j++] = _2P; //#27656
            $_.cdf = $a(); //#27657
            $_.ais = $geti($_.ais, 1, $_.ais.length - 1); //#27658
            $_.vals = $geti($_.vals, 1, $_.vals.length - 1); //#27659
            $_.fncs = $geti($_.fncs, 1, $_.fncs.length - 1); //#27660
        } else { //#27662
            $_.cdf = $a([1, 0, 1, 1]); //#27662
        } //#27662
        if ($_.ais.length != 0) { //#27676
            if ($eq($get($_.ais, 0), "10")) { //#27672
                $k[$j++] = Infinity; //#27666
                $forall($get($_.vals, 0)); //#27666
                $_.gpf = $a(); //#27666
                if ($_.ais.length > 1) { //#27667
                    $k[$j++] = Infinity; //#27667
                    $aload($_.gpf); //#27667
                    $k[$j++] = $_.fnc1; //#27667
                    $_.gpf = $a(); //#27667
                } //#27667
                $_.ais = $geti($_.ais, 1, $_.ais.length - 1); //#27668
                $_.vals = $geti($_.vals, 1, $_.vals.length - 1); //#27669
                $_.fncs = $geti($_.fncs, 1, $_.fncs.length - 1); //#27670
            } else { //#27672
                $_.gpf = $a([$_.fnc1]); //#27672
            } //#27672
        } else { //#27676
            $k[$j++] = Infinity; //#27675
            $aload($_.cdf); //#27675
            $k[$j++] = 0; //#27675
            $k[$j++] = 0; //#27675
            $k[$j++] = 0; //#27675
            $k[$j++] = 0; //#27675
            $k[$j++] = 0; //#27675
            $k[$j++] = 1; //#27675
            $k[$j++] = 1; //#27675
            $k[$j++] = 1; //#27675
            $k[$j++] = 1; //#27675
            $_.cdf = $a(); //#27675
            $_.gpf = $a([]); //#27676
        } //#27676
        $_.mode = "numeric"; //#27678
    } //#27678
    if ($eq($_.method, "11")) { //#27773
        $_.cdf = $a([1, 1]); //#27682
        $_.ai90 = $get($_.vals, 0); //#27683
        if ($f($_.npre + 1) != $_.ai90.length) { //#27687
            $k[$j++] = $geti($_.ai90, $f($_.npre + 1), $f($f($_.ai90.length - $_.npre) - 1)); //#27685
        } else { //#27687
            $k[$j++] = ""; //#27687
        } //#27687
        $_.ai90rem = $k[--$j]; //#27689
        $k[$j++] = 'nalpha'; //#27690
        $k[$j++] = 0; //#27690
        $forall($_.ai90rem, function() { //#27690
            var _3C = $k[--$j]; //#27690
            if ((_3C >= 65) && (_3C <= 90)) { //#27690
                var _3D = $k[--$j]; //#27690
                $k[$j++] = $f(_3D + 1); //#27690
            } //#27690
        }); //#27690
        var _3E = $k[--$j]; //#27690
        $_[$k[--$j]] = _3E; //#27690
        $k[$j++] = 'nnums'; //#27691
        $k[$j++] = 0; //#27691
        $forall($_.ai90rem, function() { //#27691
            var _3H = $k[--$j]; //#27691
            if ((_3H >= 48) && (_3H <= 57)) { //#27691
                var _3I = $k[--$j]; //#27691
                $k[$j++] = $f(_3I + 1); //#27691
            } //#27691
        }); //#27691
        var _3J = $k[--$j]; //#27691
        $_[$k[--$j]] = _3J; //#27691
        $k[$j++] = 'mode'; //#27692
        if ($gt($_.nalpha, $_.nnums)) { //#27692
            $k[$j++] = "alpha"; //#27692
        } else { //#27692
            if ($_.nalpha == 0) { //#27692
                $k[$j++] = "numeric"; //#27692
            } else { //#27692
                $k[$j++] = "alphanumeric"; //#27692
            } //#27692
        } //#27692
        var _3O = $k[--$j]; //#27692
        $_[$k[--$j]] = _3O; //#27692
        if ($f($_.nalpha + $_.nnums) != $_.ai90rem.length) { //#27693
            $_.mode = "alphanumeric"; //#27693
        } //#27693
        $k[$j++] = Infinity; //#27694
        $aload($_.cdf); //#27695
        if ($eq($_.mode, "alphanumeric")) { //#27696
            $k[$j++] = 0; //#27696
        } //#27696
        if ($eq($_.mode, "numeric")) { //#27697
            $k[$j++] = 1; //#27697
            $k[$j++] = 0; //#27697
        } //#27697
        if ($eq($_.mode, "alpha")) { //#27698
            $k[$j++] = 1; //#27698
            $k[$j++] = 1; //#27698
        } //#27698
        $_.cdf = $a(); //#27698
        $k[$j++] = 'ais1'; //#27700
        if ($_.ais.length > 1) { //#27700
            $k[$j++] = $get($_.ais, 1); //#27700
        } else { //#27700
            $k[$j++] = -1; //#27700
        } //#27700
        var _3b = $k[--$j]; //#27700
        $_[$k[--$j]] = _3b; //#27700
        $k[$j++] = 'vals1'; //#27701
        if ($_.vals.length > 1) { //#27701
            $k[$j++] = $get($_.vals, 1); //#27701
        } else { //#27701
            $k[$j++] = -1; //#27701
        } //#27701
        var _3g = $k[--$j]; //#27701
        $_[$k[--$j]] = _3g; //#27701
        if ($eq($_.ais1, "21") || $eq($_.ais1, "8004")) { //#27705
            $k[$j++] = Infinity; //#27703
            $aload($_.cdf); //#27703
            if ($eq($_.ais1, "21")) { //#27703
                $k[$j++] = 1; //#27703
                $k[$j++] = 0; //#27703
            } else { //#27703
                $k[$j++] = 1; //#27703
                $k[$j++] = 1; //#27703
            } //#27703
            $_.cdf = $a(); //#27703
        } else { //#27705
            $k[$j++] = Infinity; //#27705
            $aload($_.cdf); //#27705
            $k[$j++] = 0; //#27705
            $_.cdf = $a(); //#27705
        } //#27705
        $k[$j++] = 'nval'; //#27707
        if ($_.npre != 0) { //#27707
            $k[$j++] = $cvi($geti($_.ai90, 0, $_.npre)); //#27707
        } else { //#27707
            $k[$j++] = 0; //#27707
        } //#27707
        var _3t = $k[--$j]; //#27707
        $_[$k[--$j]] = _3t; //#27707
        $search("BDHIJKLNPQRSTVXZ", $geti($_.ai90, $_.npre, 1)); //#27708
        if ($k[--$j]) { //#27712
            var _3z = $k[--$j]; //#27709
            var _40 = $k[--$j]; //#27709
            $k[$j++] = _3z.length; //#27709
            $k[$j++] = _40; //#27709
            $j--; //#27709
            var _41 = $k[--$j]; //#27709
            var _42 = $k[--$j]; //#27709
            $k[$j++] = _41; //#27709
            $k[$j++] = _42; //#27709
            $j--; //#27709
            $_.aval = $k[--$j]; //#27710
        } else { //#27712
            $j--; //#27712
            $_.aval = -1; //#27712
        } //#27712
        if (($_.nval < 31) && ($_.aval != -1)) { //#27738
            var _47 = $strcpy($s(5), "00000"); //#27715
            var _4A = $cvrs($s(5), $_.nval, 2); //#27715
            $puti(_47, 5 - _4A.length, _4A); //#27716
            $k[$j++] = _47; //#27717
            $k[$j++] = Infinity; //#27717
            var _4B = $k[--$j]; //#27717
            var _4C = $k[--$j]; //#27717
            $k[$j++] = _4B; //#27717
            $forall(_4C, function() { //#27717
                var _4D = $k[--$j]; //#27717
                $k[$j++] = $f(_4D - 48); //#27717
            }); //#27717
            $_.nbits = $a(); //#27717
            var _4G = $strcpy($s(4), "0000"); //#27718
            var _4J = $cvrs($s(4), $_.aval, 2); //#27718
            $puti(_4G, 4 - _4J.length, _4J); //#27719
            $k[$j++] = _4G; //#27720
            $k[$j++] = Infinity; //#27720
            var _4K = $k[--$j]; //#27720
            var _4L = $k[--$j]; //#27720
            $k[$j++] = _4K; //#27720
            $forall(_4L, function() { //#27720
                var _4M = $k[--$j]; //#27720
                $k[$j++] = $f(_4M - 48); //#27720
            }); //#27720
            $_.abits = $a(); //#27720
            $k[$j++] = Infinity; //#27721
            $aload($_.cdf); //#27722
            $aload($_.nbits); //#27723
            $aload($_.abits); //#27724
            $_.cdf = $a(); //#27724
        } else { //#27738
            var _4T = $strcpy($s(10), "0000000000"); //#27727
            var _4W = $cvrs($s(10), $_.nval, 2); //#27727
            $puti(_4T, 10 - _4W.length, _4W); //#27728
            $k[$j++] = _4T; //#27729
            $k[$j++] = Infinity; //#27729
            var _4X = $k[--$j]; //#27729
            var _4Y = $k[--$j]; //#27729
            $k[$j++] = _4X; //#27729
            $forall(_4Y, function() { //#27729
                var _4Z = $k[--$j]; //#27729
                $k[$j++] = $f(_4Z - 48); //#27729
            }); //#27729
            $_.nbits = $a(); //#27729
            var _4c = $strcpy($s(5), "00000"); //#27730
            var _4h = $cvrs($s(5), $f($get($_.ai90, $_.npre) - 65), 2); //#27730
            $puti(_4c, 5 - _4h.length, _4h); //#27731
            $k[$j++] = _4c; //#27732
            $k[$j++] = Infinity; //#27732
            var _4i = $k[--$j]; //#27732
            var _4j = $k[--$j]; //#27732
            $k[$j++] = _4i; //#27732
            $forall(_4j, function() { //#27732
                var _4k = $k[--$j]; //#27732
                $k[$j++] = $f(_4k - 48); //#27732
            }); //#27732
            $_.abits = $a(); //#27732
            $k[$j++] = Infinity; //#27733
            $aload($_.cdf); //#27734
            $k[$j++] = 1; //#27736
            $k[$j++] = 1; //#27736
            $k[$j++] = 1; //#27736
            $k[$j++] = 1; //#27736
            $k[$j++] = 1; //#27736
            $aload($_.nbits); //#27736
            $aload($_.abits); //#27737
            $_.cdf = $a(); //#27737
        } //#27738
        if ($ne($_.mode, "alpha")) { //#27756
            $k[$j++] = Infinity; //#27741
            $forall($_.ai90rem); //#27741
            if ($_.ais.length > 1) { //#27741
                $k[$j++] = $_.fnc1; //#27741
            } //#27741
            $_.gpf = $a(); //#27741
        } else { //#27756
            $k[$j++] = Infinity; //#27743
            $forall($_.ai90rem); //#27743
            if ($_.ais.length > 1) { //#27743
                $k[$j++] = $_.fnc1; //#27743
            } //#27743
            $_.in = $a(); //#27743
            $_.out = $a($_.in.length * 6); //#27744
            $_.j = 0; //#27745
            for (var _53 = 0, _52 = $_.in.length - 1; _53 <= _52; _53 += 1) { //#27750
                var _57 = $get($_.alpha, $get($_.in, _53)); //#27747
                $k[$j++] = _57; //#27748
                $k[$j++] = _57; //#27748
                $k[$j++] = Infinity; //#27748
                var _58 = $k[--$j]; //#27748
                var _59 = $k[--$j]; //#27748
                $k[$j++] = _58; //#27748
                $forall(_59, function() { //#27748
                    var _5A = $k[--$j]; //#27748
                    $k[$j++] = $f(_5A - 48); //#27748
                }); //#27748
                $puti($_.out, $_.j, $a()); //#27748
                $_.j = $k[--$j].length + $_.j; //#27749
            } //#27749
            $k[$j++] = Infinity; //#27751
            $aload($_.cdf); //#27752
            $aload($geti($_.out, 0, $_.j)); //#27753
            $_.cdf = $a(); //#27753
            $_.gpf = $a([]); //#27755
            if ($_.ais.length > 1) { //#27756
                $_.mode = "numeric"; //#27756
            } //#27756
        } //#27756
        $_.ais = $geti($_.ais, 1, $_.ais.length - 1); //#27758
        $_.vals = $geti($_.vals, 1, $_.vals.length - 1); //#27759
        $_.fncs = $geti($_.fncs, 1, $_.fncs.length - 1); //#27760
        if ($_.ais.length != 0) { //#27772
            if ($eq($_.ais1, "21") || $eq($_.ais1, "8004")) { //#27771
                $k[$j++] = Infinity; //#27763
                $aload($_.gpf); //#27764
                $forall($_.vals1); //#27765
                $_.gpf = $a(); //#27765
                $_.ais = $geti($_.ais, 1, $_.ais.length - 1); //#27767
                $_.vals = $geti($_.vals, 1, $_.vals.length - 1); //#27768
                $_.fncs = $geti($_.fncs, 1, $_.fncs.length - 1); //#27769
                if ($_.ais.length != 0) { //#27770
                    $k[$j++] = Infinity; //#27770
                    $aload($_.gpf); //#27770
                    $k[$j++] = $_.fnc1; //#27770
                    $_.gpf = $a(); //#27770
                } //#27770
            } //#27770
        } //#27770
    } //#27770
    if ($eq($_.method, "0")) { //#27779
        $_.cdf = $a([0]); //#27776
        $_.gpf = $a([]); //#27777
        $_.mode = "numeric"; //#27778
    } //#27778
    for (var _5u = 0, _5t = $_.ais.length - 1; _5u <= _5t; _5u += 1) { //#27797
        $_.i = _5u; //#27783
        $_.ai = $get($_.ais, $_.i); //#27784
        $_.val = $get($_.vals, $_.i); //#27785
        var _64 = $a(($_.gpf.length + $_.ai.length) + $_.val.length); //#27786
        $puti(_64, 0, $_.gpf); //#27787
        $k[$j++] = _64; //#27788
        $k[$j++] = _64; //#27788
        $k[$j++] = $_.gpf.length; //#27788
        $k[$j++] = $_.ai; //#27788
        $k[$j++] = Infinity; //#27788
        var _68 = $k[--$j]; //#27788
        var _69 = $k[--$j]; //#27788
        $k[$j++] = _68; //#27788
        $forall(_69); //#27788
        var _6A = $a(); //#27788
        var _6B = $k[--$j]; //#27788
        $puti($k[--$j], _6B, _6A); //#27788
        var _6D = $k[--$j]; //#27789
        $k[$j++] = _6D; //#27789
        $k[$j++] = _6D; //#27789
        $k[$j++] = $_.gpf.length + $_.ai.length; //#27789
        $k[$j++] = $_.val; //#27789
        $k[$j++] = Infinity; //#27789
        var _6H = $k[--$j]; //#27789
        var _6I = $k[--$j]; //#27789
        $k[$j++] = _6H; //#27789
        $forall(_6I); //#27789
        var _6J = $a(); //#27789
        var _6K = $k[--$j]; //#27789
        $puti($k[--$j], _6K, _6J); //#27789
        $_.gpf = $k[--$j]; //#27790
        if (($_.i != ($_.ais.length - 1)) && $get($_.fncs, $_.i)) { //#27796
            var _6T = $a($_.gpf.length + 1); //#27792
            $puti(_6T, 0, $_.gpf); //#27793
            $put(_6T, $_.gpf.length, $_.fnc1); //#27794
            $_.gpf = _6T; //#27795
        } //#27795
    } //#27795
    if (!bwipp_gs1_cc.__27813__) { //#27813
        $_ = Object.create($_); //#27813
        var _6f = new Map([
            ["a", $a([$a([167, 138, 118, 108, 88, 78, 59]), $a([167, 138, 118, 98, 78]), $a([197, 167, 138, 108, 78])])],
            ["b", $a([$a([336, 296, 256, 208, 160, 104, 56]), $a([768, 648, 536, 416, 304, 208, 152, 112, 72, 32]), $a([1184, 1016, 840, 672, 496, 352, 264, 208, 152, 96, 56])])]
        ]); //#27810
        $_.bitcapsmaps = _6f; //#27812
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_gs1_cc.$ctx[id] = $_[id]); //#27812
        bwipp_gs1_cc.__27813__ = 1; //#27812
        $_ = Object.getPrototypeOf($_); //#27812
    } //#27812
    $_.rembits = function() {
        $_.used = $k[--$j]; //#27816
        if ($ne($_.ccversion, "c")) { //#27839
            $_.bitcaps = $get($get($_.bitcapsmaps, $_.ccversion), $f($_.cccolumns - 2)); //#27818
            $k[$j++] = -1; //#27819
            $forall($_.bitcaps, function() { //#27819
                var _6p = $k[--$j]; //#27819
                $k[$j++] = _6p; //#27819
                if ($ge(_6p, $_.used)) { //#27819
                    var _6r = $k[--$j]; //#27819
                    var _6s = $k[--$j]; //#27819
                    $k[$j++] = _6r; //#27819
                    $k[$j++] = _6s; //#27819
                } //#27819
                $j--; //#27819
            }); //#27819
            var _6t = $k[--$j]; //#27820
            $k[$j++] = _6t; //#27820
            if (_6t != -1) { //#27820
                var _6v = $k[--$j]; //#27820
                $k[$j++] = $f(_6v - $_.used); //#27820
            } //#27820
        } else { //#27839
            var _6w = new Map([
                ["c", -1]
            ]); //#27822
            var _6y = $get(_6w, $_.ccversion); //#27822
            var _70 = ~~Math.ceil($_.used / 8); //#27823
            $_.m = ((~~(_70 / 6)) * 5) + (_70 % 6); //#27823
            if ($_.m <= 40) { //#27824
                $k[$j++] = 8; //#27824
            } //#27824
            if (($_.m >= 41) && ($_.m <= 160)) { //#27825
                $k[$j++] = 16; //#27825
            } //#27825
            if (($_.m >= 161) && ($_.m <= 320)) { //#27826
                $k[$j++] = 32; //#27826
            } //#27826
            if (($_.m >= 321) && ($_.m <= 833)) { //#27827
                $k[$j++] = 64; //#27827
            } //#27827
            if ($_.m >= 834) { //#27828
                $k[$j++] = 32; //#27828
            } //#27828
            $_.eccws = $k[--$j]; //#27829
            $_.m = $f($f($_.m + $_.eccws) + 3); //#27830
            if ($_.cccolumns > 30) { //#27831
                $_.cccolumns = 30; //#27831
            } //#27831
            for (;;) { //#27835
                if (((~~Math.ceil($_.m / $_.cccolumns)) <= 30) || ($_.cccolumns >= 30)) { //#27833
                    break; //#27833
                } //#27833
                $_.cccolumns = $_.cccolumns + 1; //#27834
            } //#27834
            $_.r = ~~Math.ceil($_.m / $_.cccolumns); //#27836
            if ($_.r < 3) { //#27837
                $_.r = 3; //#27837
            } //#27837
            var _7N = $f(($f(($_.cccolumns * $_.r) - $_.eccws)) - 3); //#27838
            $_.tgt = ($f(((~~(_7N / 5)) * 6) + (_7N % 5))) * 8; //#27838
            if ($_.used <= 8304) { //#27839
                $k[$j++] = $f($_.tgt - $_.used); //#27839
            } else { //#27839
                $k[$j++] = -1; //#27839
            } //#27839
        } //#27839
        var _7R = $k[--$j]; //#27841
        $k[$j++] = _7R; //#27854
        if (_7R == -1) { //#27854
            $j--; //#27842
            if ($eq($_.ccversion, "a")) { //#27850
                $_.ccversion = "b"; //#27844
            } else { //#27850
                if ($eq($_.ccversion, "b") && $eq($_.lintype, "gs1-128")) { //#27850
                    $_.ccversion = "c"; //#27847
                    $_.cccolumns = ~~(($_.linwidth - 52) / 17); //#27848
                } else { //#27850
                    $_.ccversion = -1; //#27850
                } //#27850
            } //#27850
            $k[$j++] = $_.used; //#27853
            $_.rembits(); //#27853
        } //#27853
    }; //#27853
    $_.encode = function() {
        var _7X = $k[--$j]; //#27858
        $k[$j++] = _7X; //#27858
        if ($ne(_7X, 'raw')) { //#27858
            var _7Y = $k[--$j]; //#27858
            var _7a = $get(_7Y, $k[--$j]); //#27858
            $k[$j++] = _7a; //#27858
        } else { //#27858
            $j--; //#27858
        } //#27858
        $k[$j++] = Infinity; //#27859
        var _7b = $k[--$j]; //#27859
        var _7c = $k[--$j]; //#27859
        $k[$j++] = _7b; //#27859
        $forall(_7c, function() { //#27859
            var _7d = $k[--$j]; //#27859
            $k[$j++] = $f(_7d - 48); //#27859
        }); //#27859
        var _7e = $a(); //#27859
        $puti($_.gpfenc, $_.j, _7e); //#27861
        $_.j = _7e.length + $_.j; //#27862
    }; //#27862
    $k[$j++] = Infinity; //#27866
    for (var _7j = 0, _7k = $_.gpf.length; _7j < _7k; _7j++) { //#27866
        $k[$j++] = 0; //#27866
    } //#27866
    $k[$j++] = 0; //#27866
    $k[$j++] = -1; //#27866
    $_.numericruns = $a(); //#27866
    $k[$j++] = Infinity; //#27867
    for (var _7n = 0, _7o = $_.gpf.length; _7n < _7o; _7n++) { //#27867
        $k[$j++] = 0; //#27867
    } //#27867
    $k[$j++] = 0; //#27867
    $_.alphanumericruns = $a(); //#27867
    $k[$j++] = Infinity; //#27868
    for (var _7r = 0, _7s = $_.gpf.length; _7r < _7s; _7r++) { //#27868
        $k[$j++] = 0; //#27868
    } //#27868
    $k[$j++] = 9999; //#27868
    $_.nextiso646only = $a(); //#27868
    for (var _7v = $_.gpf.length - 1; _7v >= 0; _7v -= 1) { //#27890
        $_.i = _7v; //#27870
        var _80 = $strcpy($s(2), "00"); //#27872
        var _83 = $get($_.gpf, $_.i); //#27873
        $k[$j++] = $get($_.gpf, $_.i); //#27873
        $k[$j++] = _80; //#27873
        $k[$j++] = _80; //#27873
        $k[$j++] = 0; //#27873
        $k[$j++] = _83; //#27873
        if (_83 == $_.fnc1) { //#27873
            $j--; //#27873
            $k[$j++] = 94; //#27873
        } //#27873
        var _85 = $k[--$j]; //#27873
        var _86 = $k[--$j]; //#27873
        $put($k[--$j], _86, _85); //#27873
        if ($_.i < ($_.gpf.length - 1)) { //#27874
            var _8A = $k[--$j]; //#27874
            var _8D = $get($_.gpf, $_.i + 1); //#27874
            $k[$j++] = _8A; //#27874
            $k[$j++] = _8A; //#27874
            $k[$j++] = 1; //#27874
            $k[$j++] = _8D; //#27874
            if (_8D == $_.fnc1) { //#27874
                $j--; //#27874
                $k[$j++] = 94; //#27874
            } //#27874
            var _8F = $k[--$j]; //#27874
            var _8G = $k[--$j]; //#27874
            $put($k[--$j], _8G, _8F); //#27874
        } //#27874
        var _8K = $get($_.numeric, $k[--$j]) !== undefined; //#27875
        if (_8K) { //#27878
            $put($_.numericruns, $_.i, $f($get($_.numericruns, $_.i + 2) + 2)); //#27876
        } else { //#27878
            $put($_.numericruns, $_.i, 0); //#27878
        } //#27878
        var _8S = $k[--$j]; //#27880
        var _8U = $get($_.alphanumeric, _8S) !== undefined; //#27880
        $k[$j++] = _8S; //#27884
        if (_8U) { //#27883
            $put($_.alphanumericruns, $_.i, $f($get($_.alphanumericruns, $_.i + 1) + 1)); //#27881
        } else { //#27883
            $put($_.alphanumericruns, $_.i, 0); //#27883
        } //#27883
        var _8c = $k[--$j]; //#27885
        var _8e = $get($_.iso646, _8c) !== undefined; //#27885
        var _8g = $get($_.alphanumeric, _8c) !== undefined; //#27885
        if (_8e && (!_8g)) { //#27888
            $put($_.nextiso646only, $_.i, 0); //#27886
        } else { //#27888
            $put($_.nextiso646only, $_.i, $f($get($_.nextiso646only, $_.i + 1) + 1)); //#27888
        } //#27888
    } //#27888
    $_.gpfenc = $a(8304); //#27893
    $_.i = 0; //#27894
    $_.j = 0; //#27894
    for (;;) { //#27984
        if ($_.i == $_.gpf.length) { //#27896
            break; //#27896
        } //#27896
        for (;;) { //#27983
            if ($eq($_.mode, "numeric")) { //#27932
                if ($_.i <= ($_.gpf.length - 2)) { //#27929
                    var _8u = $s(2); //#27901
                    var _8x = $get($_.gpf, $_.i); //#27902
                    $k[$j++] = _8u; //#27902
                    $k[$j++] = _8u; //#27902
                    $k[$j++] = 0; //#27902
                    $k[$j++] = _8x; //#27902
                    if (_8x == $_.fnc1) { //#27902
                        $j--; //#27902
                        $k[$j++] = 94; //#27902
                    } //#27902
                    var _8z = $k[--$j]; //#27902
                    var _90 = $k[--$j]; //#27902
                    $put($k[--$j], _90, _8z); //#27902
                    var _92 = $k[--$j]; //#27903
                    var _95 = $get($_.gpf, $_.i + 1); //#27903
                    $k[$j++] = _92; //#27903
                    $k[$j++] = _92; //#27903
                    $k[$j++] = 1; //#27903
                    $k[$j++] = _95; //#27903
                    if (_95 == $_.fnc1) { //#27903
                        $j--; //#27903
                        $k[$j++] = 94; //#27903
                    } //#27903
                    var _97 = $k[--$j]; //#27903
                    var _98 = $k[--$j]; //#27903
                    $put($k[--$j], _98, _97); //#27903
                    var _9A = $k[--$j]; //#27904
                    var _9C = $get($_.numeric, _9A) !== undefined; //#27904
                    $k[$j++] = _9A; //#27908
                    if (_9C) { //#27908
                        $k[$j++] = $_.numeric; //#27905
                        $_.encode(); //#27905
                        $_.i = $_.i + 2; //#27906
                        break; //#27907
                    } //#27907
                    $j--; //#27909
                    $k[$j++] = $_.lalphanumeric; //#27910
                    $k[$j++] = $_.numeric; //#27910
                    $_.encode(); //#27910
                    $_.mode = "alphanumeric"; //#27911
                    break; //#27912
                } else { //#27929
                    var _9J = $get($_.gpf, $_.i); //#27914
                    if ((_9J < 48) || (_9J > 57)) { //#27918
                        $k[$j++] = $_.lalphanumeric; //#27915
                        $k[$j++] = $_.numeric; //#27915
                        $_.encode(); //#27915
                        $_.mode = "alphanumeric"; //#27916
                        break; //#27917
                    } //#27917
                    $k[$j++] = 'rem'; //#27919
                    $k[$j++] = $_.cdf.length + $_.j; //#27919
                    $_.rembits(); //#27919
                    var _9O = $k[--$j]; //#27919
                    $_[$k[--$j]] = _9O; //#27919
                    if (($_.rem >= 4) && ($_.rem <= 6)) { //#27929
                        var _9V = $geti($strcpy($s(6), "000000"), 0, $_.rem); //#27921
                        var _9a = $cvrs($s(4), $f($get($_.gpf, $_.i) - 47), 2); //#27922
                        $puti(_9V, 4 - _9a.length, _9a); //#27923
                        $k[$j++] = _9V; //#27923
                        $k[$j++] = 'raw'; //#27923
                        $_.encode(); //#27923
                        $_.i = $_.i + 1; //#27924
                        break; //#27925
                    } else { //#27929
                        var _9c = $s(2); //#27927
                        $put(_9c, 0, $get($_.gpf, $_.i)); //#27927
                        $put(_9c, 1, 94); //#27927
                        $k[$j++] = _9c; //#27927
                        $k[$j++] = $_.numeric; //#27927
                        $_.encode(); //#27927
                        $_.i = $_.i + 1; //#27928
                        break; //#27929
                    } //#27929
                } //#27929
            } //#27929
            if ($eq($_.mode, "alphanumeric")) { //#27959
                if ($get($_.gpf, $_.i) == $_.fnc1) { //#27940
                    $k[$j++] = $_.fnc1; //#27936
                    $k[$j++] = $_.alphanumeric; //#27936
                    $_.encode(); //#27936
                    $_.mode = "numeric"; //#27937
                    $_.i = $_.i + 1; //#27938
                    break; //#27939
                } //#27939
                var _9s = $get($_.gpf, $_.i); //#27941
                var _9u = $get($_.iso646, _9s) !== undefined; //#27941
                var _9w = $get($_.alphanumeric, _9s) !== undefined; //#27941
                if (_9u && (!_9w)) { //#27945
                    $k[$j++] = $_.liso646; //#27942
                    $k[$j++] = $_.alphanumeric; //#27942
                    $_.encode(); //#27942
                    $_.mode = "iso646"; //#27943
                    break; //#27944
                } //#27944
                if ($get($_.numericruns, $_.i) >= 6) { //#27950
                    $k[$j++] = $_.lnumeric; //#27947
                    $k[$j++] = $_.alphanumeric; //#27947
                    $_.encode(); //#27947
                    $_.mode = "numeric"; //#27948
                    break; //#27949
                } //#27949
                var _A6 = $get($_.numericruns, $_.i); //#27951
                if ((_A6 >= 4) && ($f(_A6 + $_.i) == $_.gpf.length)) { //#27955
                    $k[$j++] = $_.lnumeric; //#27952
                    $k[$j++] = $_.alphanumeric; //#27952
                    $_.encode(); //#27952
                    $_.mode = "numeric"; //#27953
                    break; //#27954
                } //#27954
                $k[$j++] = $get($_.gpf, $_.i); //#27956
                $k[$j++] = $_.alphanumeric; //#27956
                $_.encode(); //#27956
                $_.i = $_.i + 1; //#27957
                break; //#27958
            } //#27958
            if ($eq($_.mode, "iso646")) { //#27981
                if ($get($_.gpf, $_.i) == $_.fnc1) { //#27967
                    $k[$j++] = $_.fnc1; //#27963
                    $k[$j++] = $_.iso646; //#27963
                    $_.encode(); //#27963
                    $_.mode = "numeric"; //#27964
                    $_.i = $_.i + 1; //#27965
                    break; //#27966
                } //#27966
                if (($get($_.numericruns, $_.i) >= 4) && ($get($_.nextiso646only, $_.i) >= 10)) { //#27972
                    $k[$j++] = $_.lnumeric; //#27969
                    $k[$j++] = $_.iso646; //#27969
                    $_.encode(); //#27969
                    $_.mode = "numeric"; //#27970
                    break; //#27971
                } //#27971
                if (($get($_.alphanumericruns, $_.i) >= 5) && ($get($_.nextiso646only, $_.i) >= 10)) { //#27977
                    $k[$j++] = $_.lalphanumeric; //#27974
                    $k[$j++] = $_.iso646; //#27974
                    $_.encode(); //#27974
                    $_.mode = "alphanumeric"; //#27975
                    break; //#27976
                } //#27976
                $k[$j++] = $get($_.gpf, $_.i); //#27978
                $k[$j++] = $_.iso646; //#27978
                $_.encode(); //#27978
                $_.i = $_.i + 1; //#27979
                break; //#27980
            } //#27980
        } //#27980
    } //#27980
    $_.gpf = $geti($_.gpfenc, 0, $_.j); //#27985
    $k[$j++] = 'pad'; //#27988
    $k[$j++] = $_.cdf.length + $_.gpf.length; //#27988
    $_.rembits(); //#27988
    var _Ap = $a($k[--$j]); //#27988
    $_[$k[--$j]] = _Ap; //#27988
    if ($_.pad.length > 0) { //#28000
        for (var _Au = 0, _At = $_.pad.length - 1; _Au <= _At; _Au += 5) { //#27993
            $_.i = _Au; //#27991
            var _Av = $_.pad; //#27992
            var _Aw = $_.i; //#27992
            var _Ax = $a([0, 0, 1, 0, 0]); //#27992
            var _Ay = $_.pad; //#27992
            var _Az = $_.i; //#27992
            var _B0 = 5; //#27992
            var _B1 = _Ay.length - _Az; //#27992
            if ((_Ay.length - _Az) > 5) { //#27992
                var _ = _B0; //#27992
                _B0 = _B1; //#27992
                _B1 = _; //#27992
            } //#27992
            $puti(_Av, _Aw, $geti(_Ax, 0, _B1)); //#27992
        } //#27992
        if ($eq($_.mode, "numeric")) { //#27996
            $k[$j++] = Infinity; //#27995
            $k[$j++] = 0; //#27995
            $k[$j++] = 0; //#27995
            $k[$j++] = 0; //#27995
            $k[$j++] = 0; //#27995
            $aload($_.pad); //#27995
            $_.pad = $geti($a(), 0, $_.pad.length); //#27995
        } //#27995
        if ($eq($_.mode, "alpha")) { //#27999
            $k[$j++] = Infinity; //#27998
            $k[$j++] = 1; //#27998
            $k[$j++] = 1; //#27998
            $k[$j++] = 1; //#27998
            $k[$j++] = 1; //#27998
            $k[$j++] = 1; //#27998
            $k[$j++] = 0; //#27998
            $k[$j++] = 0; //#27998
            $k[$j++] = 0; //#27998
            $k[$j++] = 0; //#27998
            $aload($_.pad); //#27998
            $_.pad = $geti($a(), 0, $_.pad.length); //#27998
        } //#27998
    } //#27998
    $k[$j++] = Infinity; //#28003
    $aload($_.cdf); //#28004
    $aload($_.gpf); //#28005
    $aload($_.pad); //#28006
    $_.bits = $a(); //#28006
    if (!bwipp_gs1_cc.__28024__) { //#28024
        $_ = Object.create($_); //#28024
        $k[$j++] = Infinity; //#28010
        $k[$j++] = $a([0, 0, 0, 0, 0, 0, 1]); //#28012
        for (var _BI = 0, _BJ = 68; _BI < _BJ; _BI++) { //#28012
            $k[$j++] = $a(7); //#28012
        } //#28012
        $_.pwr928 = $a(); //#28012
        for (var _BM = 1; _BM <= 68; _BM += 1) { //#28023
            $_.j = _BM; //#28015
            $_.v = 0; //#28016
            for (var _BN = 6; _BN >= 1; _BN -= 1) { //#28021
                $_.i = _BN; //#28018
                $_.v = $f(($get($get($_.pwr928, $_.j - 1), $_.i) * 2) + (~~($_.v / 928))); //#28019
                $put($get($_.pwr928, $_.j), $_.i, $_.v % 928); //#28020
            } //#28020
            $put($get($_.pwr928, $_.j), 0, $f(($get($get($_.pwr928, $_.j - 1), 0) * 2) + (~~($_.v / 928)))); //#28022
        } //#28022
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_gs1_cc.$ctx[id] = $_[id]); //#28022
        bwipp_gs1_cc.__28024__ = 1; //#28022
        $_ = Object.getPrototypeOf($_); //#28022
    } //#28022
    if ($_.ccversion == "a") { //#28066
        $k[$j++] = Infinity; //#28027
        for (var _Bj = 0, _Bk = 28; _Bj < _Bk; _Bj++) { //#28027
            $k[$j++] = 0; //#28027
        } //#28027
        $_.cws = $a(); //#28027
        $_.b = 0; //#28028
        $_.c = 0; //#28028
        for (;;) { //#28052
            if ($_.b == $_.bits.length) { //#28030
                break; //#28030
            } //#28030
            var _Bo = $_.bits; //#28031
            var _Bp = $_.b; //#28031
            var _Bq = $_.bits; //#28031
            var _Br = $_.b; //#28031
            var _Bs = _Bq.length - _Br; //#28031
            var _Bt = 69; //#28031
            if (69 > (_Bq.length - _Br)) { //#28031
                var _ = _Bs; //#28031
                _Bs = _Bt; //#28031
                _Bt = _; //#28031
            } //#28031
            $_.bs = $geti(_Bo, _Bp, _Bt); //#28031
            $_.bsl = $_.bs.length; //#28032
            $_.cs = $geti($_.cws, $_.c, (~~($_.bsl / 10)) + 1); //#28033
            $_.csl = $_.cs.length; //#28034
            for (var _C3 = 0, _C2 = $_.bsl - 1; _C3 <= _C2; _C3 += 1) { //#28044
                $_.i = _C3; //#28036
                for (var _C6 = 0, _C5 = $_.csl - 1; _C6 <= _C5; _C6 += 1) { //#28043
                    $_.j = _C6; //#28038
                    var _C7 = $_.cs; //#28039
                    var _C8 = $_.j; //#28039
                    $put(_C7, _C8, $f($get(_C7, _C8) + ($get($get($_.pwr928, $_.i), ($_.j + 7) - $_.csl) * $get($_.bs, ($_.bsl - $_.i) - 1)))); //#28042
                } //#28042
            } //#28042
            for (var _CL = $_.csl - 1; _CL >= 1; _CL -= 1) { //#28049
                $_.i = _CL; //#28046
                var _CM = $_.cs; //#28047
                var _CN = $_.i; //#28047
                $put(_CM, _CN - 1, $f($get(_CM, _CN - 1) + (~~($get($_.cs, $_.i) / 928)))); //#28047
                var _CS = $_.cs; //#28048
                var _CT = $_.i; //#28048
                $put(_CS, _CT, $get(_CS, _CT) % 928); //#28048
            } //#28048
            $_.b = $_.b + $_.bsl; //#28050
            $_.c = $_.c + $_.csl; //#28051
        } //#28051
        $_.cws = $geti($_.cws, 0, $_.c); //#28053
        $_.barcode = $s($_.cws.length * 4); //#28054
        for (var _Cg = 0, _Cf = $_.cws.length - 1; _Cg <= _Cf; _Cg += 1) { //#28060
            $_.i = _Cg; //#28056
            var _Ci = $strcpy($s(4), "^000"); //#28057
            var _Cn = $cvrs($s(4), $get($_.cws, $_.i), 10); //#28057
            $puti(_Ci, 4 - _Cn.length, _Cn); //#28058
            $puti($_.barcode, $_.i * 4, _Ci); //#28059
        } //#28059
        delete $_.options["parse"]; //#28061
        $put($_.options, "dontdraw", true); //#28062
        $put($_.options, "cca", true); //#28063
        $put($_.options, "columns", $_.cccolumns); //#28064
        $k[$j++] = 'args'; //#28065
        $k[$j++] = $_.barcode; //#28065
        $k[$j++] = $_.options; //#28065
        bwipp_micropdf417(); //#28065
        var _Cx = $k[--$j]; //#28065
        $_[$k[--$j]] = _Cx; //#28065
    } //#28065
    if ($_.ccversion == "b") { //#28080
        $_.barcode = $s(~~($_.bits.length / 8)); //#28069
        for (var _D4 = 0, _D3 = $_.barcode.length - 1; _D4 <= _D3; _D4 += 1) { //#28074
            $_.i = _D4; //#28071
            var _D7 = $geti($_.bits, $_.i * 8, 8); //#28072
            $k[$j++] = 0; //#28072
            for (var _D8 = 0, _D9 = _D7.length; _D8 < _D9; _D8++) { //#28072
                var _DB = $k[--$j]; //#28072
                $k[$j++] = $f(_DB + $get(_D7, _D8)) * 2; //#28072
            } //#28072
            $put($_.barcode, $_.i, ~~($k[--$j] / 2)); //#28073
        } //#28073
        delete $_.options["parse"]; //#28075
        $put($_.options, "dontdraw", true); //#28076
        $put($_.options, "ccb", true); //#28077
        $put($_.options, "columns", $_.cccolumns); //#28078
        $k[$j++] = 'args'; //#28079
        $k[$j++] = $_.barcode; //#28079
        $k[$j++] = $_.options; //#28079
        bwipp_micropdf417(); //#28079
        var _DM = $k[--$j]; //#28079
        $_[$k[--$j]] = _DM; //#28079
    } //#28079
    if ($_.ccversion == "c") { //#28095
        $_.barcode = $s(~~($_.bits.length / 8)); //#28083
        for (var _DT = 0, _DS = $_.barcode.length - 1; _DT <= _DS; _DT += 1) { //#28088
            $_.i = _DT; //#28085
            var _DW = $geti($_.bits, $_.i * 8, 8); //#28086
            $k[$j++] = 0; //#28086
            for (var _DX = 0, _DY = _DW.length; _DX < _DY; _DX++) { //#28086
                var _Da = $k[--$j]; //#28086
                $k[$j++] = $f(_Da + $get(_DW, _DX)) * 2; //#28086
            } //#28086
            $put($_.barcode, $_.i, ~~($k[--$j] / 2)); //#28087
        } //#28087
        delete $_.options["parse"]; //#28089
        $put($_.options, "dontdraw", true); //#28090
        $put($_.options, "ccc", true); //#28091
        $put($_.options, "columns", $_.cccolumns); //#28092
        $put($_.options, "eclevel", (~~(Math.log($_.eccws) / Math.log(2))) - 1); //#28093
        $k[$j++] = 'args'; //#28094
        $k[$j++] = $_.barcode; //#28094
        $k[$j++] = $_.options; //#28094
        bwipp_pdf417(); //#28094
        var _Dn = $k[--$j]; //#28094
        $_[$k[--$j]] = _Dn; //#28094
    } //#28094
    $k[$j++] = $_.args; //#28098
    if (!$_.dontdraw) { //#28098
        bwipp_renmatrix(); //#28098
    } //#28098
    $_ = Object.getPrototypeOf($_); //#28100
    $_ = Object.getPrototypeOf($_); //#28102
} //bwipp_gs1_cc
function bwipp_ean13composite() {
    $_ = Object.create($_); //#28134
    $_.dontdraw = false; //#28137
    $_.usematrix = false; //#28138
    $_.parse = false; //#28139
    $_.dontlint = false; //#28140
    $_.lintreqs = true; //#28141
    $k[$j++] = $_; //#28143
    bwipp_processoptions(); //#28143
    $_.options = $k[--$j]; //#28143
    $_.barcode = $k[--$j]; //#28144
    if ($_.dontdraw) { //#28146
        $_.usematrix = true; //#28146
    } //#28146
    $search($_.barcode, "|"); //#28149
    if ($k[--$j]) { //#28154
        $_.linear = $k[--$j]; //#28150
        $j--; //#28151
        $_.comp = $k[--$j]; //#28152
    } else { //#28154
        $j--; //#28154
        $k[$j++] = 'bwipp.missingCompositeComponent#28154'; //#28154
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#28154
        bwipp_raiseerror(); //#28154
    } //#28154
    $put($_.options, "lintype", "ean13"); //#28157
    $put($_.options, "inkspreadv", 0); //#28158
    $put($_.options, "dontdraw", true); //#28159
    $put($_.options, "dontlint", true); //#28160
    var _C = $s($_.comp.length + 18); //#28163
    $puti(_C, 0, "(01)00000000000000"); //#28164
    $puti(_C, 18, $_.comp); //#28165
    $k[$j++] = _C; //#28166
    $k[$j++] = 'ai'; //#28166
    bwipp_gs1process(); //#28166
    $j -= 3; //#28166
    $k[$j++] = $_.linear; //#28169
    $k[$j++] = $_.options; //#28169
    bwipp_ean13(); //#28169
    if (!$_.usematrix) { //#28259
        $$.save(); //#28171
        bwipp_renlinear(); //#28173
        $$.rmoveto(-1, 72); //#28176
        $k[$j++] = Infinity; //#28176
        $k[$j++] = Infinity; //#28178
        $k[$j++] = 0; //#28179
        $k[$j++] = 1; //#28179
        for (var _H = 0, _I = 93; _H < _I; _H++) { //#28179
            $k[$j++] = 0; //#28179
        } //#28179
        $k[$j++] = 1; //#28180
        $k[$j++] = 0; //#28180
        $k[$j++] = 1; //#28180
        $k[$j++] = 0; //#28180
        for (var _J = 0, _K = 93; _J < _K; _J++) { //#28180
            $k[$j++] = 0; //#28180
        } //#28180
        $k[$j++] = 0; //#28181
        $k[$j++] = 1; //#28181
        $k[$j++] = 0; //#28181
        $k[$j++] = 1; //#28181
        for (var _L = 0, _M = 93; _L < _M; _L++) { //#28181
            $k[$j++] = 0; //#28181
        } //#28181
        $k[$j++] = 1; //#28181
        $k[$j++] = 0; //#28181
        var _N = $a(); //#28181
        $k[$j++] = 'ren'; //#28187
        $k[$j++] = bwipp_renmatrix; //#28187
        $k[$j++] = 'pixs'; //#28187
        $k[$j++] = _N; //#28187
        $k[$j++] = 'pixx'; //#28187
        $k[$j++] = 97; //#28187
        $k[$j++] = 'pixy'; //#28187
        $k[$j++] = 3; //#28187
        $k[$j++] = 'height'; //#28187
        $k[$j++] = 6 / 72; //#28187
        $k[$j++] = 'width'; //#28187
        $k[$j++] = 97 / 72; //#28187
        $k[$j++] = 'opt'; //#28187
        $k[$j++] = $_.options; //#28187
        var _P = $d(); //#28187
        $k[$j++] = _P; //#28188
        bwipp_renmatrix(); //#28188
        $$.rmoveto(-2, 6); //#28191
        $k[$j++] = $_.comp; //#28191
        $k[$j++] = $_.options; //#28191
        bwipp_gs1_cc(); //#28191
        bwipp_renmatrix(); //#28191
        $$.restore(); //#28193
    } else { //#28259
        $_.linsym = $k[--$j]; //#28195
        $_.sbs = $get($_.linsym, 'sbs'); //#28196
        $_.bhs = $get($_.linsym, 'bhs'); //#28197
        $_.bbs = $get($_.linsym, 'bbs'); //#28198
        $k[$j++] = 'linwidth'; //#28199
        $k[$j++] = 0; //#28199
        $forall($_.sbs, function() { //#28199
            var _a = $k[--$j]; //#28199
            var _b = $k[--$j]; //#28199
            $k[$j++] = $f(_b + $cvi(_a)); //#28199
        }); //#28199
        var _c = $k[--$j]; //#28199
        $_[$k[--$j]] = _c; //#28199
        $k[$j++] = 'compsym'; //#28201
        $k[$j++] = $_.comp; //#28201
        $k[$j++] = $_.options; //#28201
        bwipp_gs1_cc(); //#28201
        var _g = $k[--$j]; //#28201
        $_[$k[--$j]] = _g; //#28201
        $_.ccpixs = $get($_.compsym, 'pixs'); //#28202
        $_.ccpixx = $get($_.compsym, 'pixx'); //#28203
        $k[$j++] = Infinity; //#28205
        for (var _n = 0, _o = $f($_.ccpixx - 97); _n < _o; _n++) { //#28205
            $k[$j++] = 0; //#28205
        } //#28205
        $_.linpad = $a(); //#28205
        $_.diff = $f(($f($f($_.linwidth + $_.linpad.length) + 1)) - $_.ccpixx); //#28207
        if ($_.diff > 0) { //#28213
            $k[$j++] = Infinity; //#28209
            for (var _v = 0, _w = $_.diff; _v < _w; _v++) { //#28209
                $k[$j++] = 0; //#28209
            } //#28209
            $_.ccrpad = $a(); //#28209
            $_.pixx = $f($_.ccpixx + $_.diff); //#28210
        } else { //#28213
            $_.ccrpad = $a(0); //#28212
            $_.pixx = $_.ccpixx; //#28213
        } //#28213
        $k[$j++] = Infinity; //#28216
        for (var _15 = 0, _16 = $_.ccpixx, _14 = $_.ccpixs.length - 1; _16 < 0 ? _15 >= _14 : _15 <= _14; _15 += _16) { //#28220
            $_.i = _15; //#28218
            $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#28219
            $aload($_.ccrpad); //#28219
        } //#28219
        for (var _1C = 0, _1D = 2; _1C < _1D; _1C++) { //#28221
            $aload($_.linpad); //#28221
            $k[$j++] = 0; //#28221
            $k[$j++] = 1; //#28221
            for (var _1F = 0, _1G = 93; _1F < _1G; _1F++) { //#28221
                $k[$j++] = 0; //#28221
            } //#28221
            $k[$j++] = 1; //#28221
            $k[$j++] = 0; //#28221
            $aload($_.ccrpad); //#28221
        } //#28221
        for (var _1I = 0, _1J = 2; _1I < _1J; _1I++) { //#28222
            $aload($_.linpad); //#28222
            $k[$j++] = 1; //#28222
            $k[$j++] = 0; //#28222
            for (var _1L = 0, _1M = 93; _1L < _1M; _1L++) { //#28222
                $k[$j++] = 0; //#28222
            } //#28222
            $k[$j++] = 0; //#28222
            $k[$j++] = 1; //#28222
            $aload($_.ccrpad); //#28222
        } //#28222
        for (var _1O = 0, _1P = 2; _1O < _1P; _1O++) { //#28223
            $aload($_.linpad); //#28223
            $k[$j++] = 0; //#28223
            $k[$j++] = 1; //#28223
            for (var _1R = 0, _1S = 93; _1R < _1S; _1R++) { //#28223
                $k[$j++] = 0; //#28223
            } //#28223
            $k[$j++] = 1; //#28223
            $k[$j++] = 0; //#28223
            $aload($_.ccrpad); //#28223
        } //#28223
        for (var _1U = 71; _1U >= 0; _1U -= 1) { //#28242
            $_.y = _1U; //#28225
            $aload($_.linpad); //#28226
            $k[$j++] = 0; //#28240
            for (var _1Y = 0, _1X = $_.sbs.length - 1; _1Y <= _1X; _1Y += 1) { //#28240
                $_.i = _1Y; //#28229
                if (($_.i % 2) == 0) { //#28238
                    var _1d = $get($_.bbs, ~~($_.i / 2)) * 72; //#28232
                    if ((_1d > $_.y) || (($f(_1d + ($get($_.bhs, ~~($_.i / 2)) * 72))) < $_.y)) { //#28235
                        for (var _1m = 0, _1n = $cvi($get($_.sbs, $_.i)); _1m < _1n; _1m++) { //#28233
                            $k[$j++] = 0; //#28233
                        } //#28233
                    } else { //#28235
                        for (var _1r = 0, _1s = $cvi($get($_.sbs, $_.i)); _1r < _1s; _1r++) { //#28235
                            $k[$j++] = 1; //#28235
                        } //#28235
                    } //#28235
                } else { //#28238
                    for (var _1w = 0, _1x = $cvi($get($_.sbs, $_.i)); _1w < _1x; _1w++) { //#28238
                        $k[$j++] = 0; //#28238
                    } //#28238
                } //#28238
            } //#28238
            if ($_.diff < 0) { //#28241
                $k[$j++] = 0; //#28241
            } //#28241
        } //#28241
        $_.pixs = $a(); //#28241
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#28245
        var _28 = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#28253
        $k[$j++] = _28; //#28260
        if (!$_.dontdraw) { //#28260
            $$.save(); //#28257
            bwipp_renmatrix(); //#28258
            $$.restore(); //#28259
        } //#28259
    } //#28259
    $_ = Object.getPrototypeOf($_); //#28263
} //bwipp_ean13composite
function bwipp_ean8composite() {
    $_ = Object.create($_); //#28295
    $_.dontdraw = false; //#28298
    $_.usematrix = false; //#28299
    $_.parse = false; //#28300
    $_.dontlint = false; //#28301
    $_.lintreqs = true; //#28302
    $k[$j++] = $_; //#28304
    bwipp_processoptions(); //#28304
    $_.options = $k[--$j]; //#28304
    $_.barcode = $k[--$j]; //#28305
    if ($_.dontdraw) { //#28307
        $_.usematrix = true; //#28307
    } //#28307
    $search($_.barcode, "|"); //#28310
    if ($k[--$j]) { //#28315
        $_.linear = $k[--$j]; //#28311
        $j--; //#28312
        $_.comp = $k[--$j]; //#28313
    } else { //#28315
        $j--; //#28315
        $k[$j++] = 'bwipp.missingCompositeComponent#28315'; //#28315
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#28315
        bwipp_raiseerror(); //#28315
    } //#28315
    $put($_.options, "lintype", "ean8"); //#28319
    $put($_.options, "inkspreadv", 0); //#28320
    $put($_.options, "dontdraw", true); //#28321
    $put($_.options, "dontlint", true); //#28322
    var _C = $s($_.comp.length + 18); //#28325
    $puti(_C, 0, "(01)00000000000000"); //#28326
    $puti(_C, 18, $_.comp); //#28327
    $k[$j++] = _C; //#28328
    $k[$j++] = 'ai'; //#28328
    bwipp_gs1process(); //#28328
    $j -= 3; //#28328
    $k[$j++] = $_.linear; //#28331
    $k[$j++] = $_.options; //#28331
    bwipp_ean8(); //#28331
    if (!$_.usematrix) { //#28423
        $$.save(); //#28333
        bwipp_renlinear(); //#28335
        $$.rmoveto(-1, 72); //#28338
        $k[$j++] = Infinity; //#28338
        $k[$j++] = Infinity; //#28340
        $k[$j++] = 0; //#28341
        $k[$j++] = 1; //#28341
        for (var _H = 0, _I = 65; _H < _I; _H++) { //#28341
            $k[$j++] = 0; //#28341
        } //#28341
        $k[$j++] = 1; //#28342
        $k[$j++] = 0; //#28342
        $k[$j++] = 1; //#28342
        $k[$j++] = 0; //#28342
        for (var _J = 0, _K = 65; _J < _K; _J++) { //#28342
            $k[$j++] = 0; //#28342
        } //#28342
        $k[$j++] = 0; //#28343
        $k[$j++] = 1; //#28343
        $k[$j++] = 0; //#28343
        $k[$j++] = 1; //#28343
        for (var _L = 0, _M = 65; _L < _M; _L++) { //#28343
            $k[$j++] = 0; //#28343
        } //#28343
        $k[$j++] = 1; //#28343
        $k[$j++] = 0; //#28343
        var _N = $a(); //#28343
        $k[$j++] = 'ren'; //#28349
        $k[$j++] = bwipp_renmatrix; //#28349
        $k[$j++] = 'pixs'; //#28349
        $k[$j++] = _N; //#28349
        $k[$j++] = 'pixx'; //#28349
        $k[$j++] = 69; //#28349
        $k[$j++] = 'pixy'; //#28349
        $k[$j++] = 3; //#28349
        $k[$j++] = 'height'; //#28349
        $k[$j++] = 6 / 72; //#28349
        $k[$j++] = 'width'; //#28349
        $k[$j++] = 69 / 72; //#28349
        $k[$j++] = 'opt'; //#28349
        $k[$j++] = $_.options; //#28349
        var _P = $d(); //#28349
        $k[$j++] = _P; //#28350
        bwipp_renmatrix(); //#28350
        $k[$j++] = $_.comp; //#28353
        $k[$j++] = $_.options; //#28353
        bwipp_gs1_cc(); //#28353
        var _S = $k[--$j]; //#28354
        $$.rmoveto($f(69 - $get(_S, "pixx")), 6); //#28354
        $k[$j++] = _S; //#28355
        bwipp_renmatrix(); //#28355
        $$.restore(); //#28357
    } else { //#28423
        $_.linsym = $k[--$j]; //#28359
        $_.sbs = $get($_.linsym, 'sbs'); //#28360
        $_.bhs = $get($_.linsym, 'bhs'); //#28361
        $_.bbs = $get($_.linsym, 'bbs'); //#28362
        $k[$j++] = 'linwidth'; //#28363
        $k[$j++] = 0; //#28363
        $forall($_.sbs, function() { //#28363
            var _c = $k[--$j]; //#28363
            var _d = $k[--$j]; //#28363
            $k[$j++] = $f(_d + $cvi(_c)); //#28363
        }); //#28363
        var _e = $k[--$j]; //#28363
        $_[$k[--$j]] = _e; //#28363
        var _g = $_.comp; //#28365
        $k[$j++] = 'compsym'; //#28365
        $k[$j++] = _g; //#28365
        $k[$j++] = $_.options; //#28365
        bwipp_gs1_cc(); //#28365
        var _i = $k[--$j]; //#28365
        $_[$k[--$j]] = _i; //#28365
        $_.ccpixs = $get($_.compsym, 'pixs'); //#28366
        $_.ccpixx = $get($_.compsym, 'pixx'); //#28367
        $k[$j++] = Infinity; //#28369
        for (var _p = 0, _q = $f($_.ccpixx - 69); _p < _q; _p++) { //#28369
            $k[$j++] = 0; //#28369
        } //#28369
        $_.linpad = $a(); //#28369
        $_.diff = $f(($f($f($_.linwidth + $_.linpad.length) + 1)) - $_.ccpixx); //#28371
        if ($_.diff > 0) { //#28377
            $k[$j++] = Infinity; //#28373
            for (var _x = 0, _y = $_.diff; _x < _y; _x++) { //#28373
                $k[$j++] = 0; //#28373
            } //#28373
            $_.ccrpad = $a(); //#28373
            $_.pixx = $f($_.ccpixx + $_.diff); //#28374
        } else { //#28377
            $_.ccrpad = $a(0); //#28376
            $_.pixx = $_.ccpixx; //#28377
        } //#28377
        $k[$j++] = Infinity; //#28380
        for (var _17 = 0, _18 = $_.ccpixx, _16 = $_.ccpixs.length - 1; _18 < 0 ? _17 >= _16 : _17 <= _16; _17 += _18) { //#28384
            $_.i = _17; //#28382
            $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#28383
            $aload($_.ccrpad); //#28383
        } //#28383
        for (var _1E = 0, _1F = 2; _1E < _1F; _1E++) { //#28385
            $aload($_.linpad); //#28385
            $k[$j++] = 0; //#28385
            $k[$j++] = 1; //#28385
            for (var _1H = 0, _1I = 65; _1H < _1I; _1H++) { //#28385
                $k[$j++] = 0; //#28385
            } //#28385
            $k[$j++] = 1; //#28385
            $k[$j++] = 0; //#28385
            $aload($_.ccrpad); //#28385
        } //#28385
        for (var _1K = 0, _1L = 2; _1K < _1L; _1K++) { //#28386
            $aload($_.linpad); //#28386
            $k[$j++] = 1; //#28386
            $k[$j++] = 0; //#28386
            for (var _1N = 0, _1O = 65; _1N < _1O; _1N++) { //#28386
                $k[$j++] = 0; //#28386
            } //#28386
            $k[$j++] = 0; //#28386
            $k[$j++] = 1; //#28386
            $aload($_.ccrpad); //#28386
        } //#28386
        for (var _1Q = 0, _1R = 2; _1Q < _1R; _1Q++) { //#28387
            $aload($_.linpad); //#28387
            $k[$j++] = 0; //#28387
            $k[$j++] = 1; //#28387
            for (var _1T = 0, _1U = 65; _1T < _1U; _1T++) { //#28387
                $k[$j++] = 0; //#28387
            } //#28387
            $k[$j++] = 1; //#28387
            $k[$j++] = 0; //#28387
            $aload($_.ccrpad); //#28387
        } //#28387
        for (var _1W = 71; _1W >= 0; _1W -= 1) { //#28406
            $_.y = _1W; //#28389
            $aload($_.linpad); //#28390
            $k[$j++] = 0; //#28404
            for (var _1a = 0, _1Z = $_.sbs.length - 1; _1a <= _1Z; _1a += 1) { //#28404
                $_.i = _1a; //#28393
                if (($_.i % 2) == 0) { //#28402
                    var _1f = $get($_.bbs, ~~($_.i / 2)) * 72; //#28396
                    if ((_1f > $_.y) || (($f(_1f + ($get($_.bhs, ~~($_.i / 2)) * 72))) < $_.y)) { //#28399
                        for (var _1o = 0, _1p = $cvi($get($_.sbs, $_.i)); _1o < _1p; _1o++) { //#28397
                            $k[$j++] = 0; //#28397
                        } //#28397
                    } else { //#28399
                        for (var _1t = 0, _1u = $cvi($get($_.sbs, $_.i)); _1t < _1u; _1t++) { //#28399
                            $k[$j++] = 1; //#28399
                        } //#28399
                    } //#28399
                } else { //#28402
                    for (var _1y = 0, _1z = $cvi($get($_.sbs, $_.i)); _1y < _1z; _1y++) { //#28402
                        $k[$j++] = 0; //#28402
                    } //#28402
                } //#28402
            } //#28402
            if ($_.diff < 0) { //#28405
                $k[$j++] = 0; //#28405
            } //#28405
        } //#28405
        $_.pixs = $a(); //#28405
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#28409
        var _2A = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#28417
        $k[$j++] = _2A; //#28424
        if (!$_.dontdraw) { //#28424
            $$.save(); //#28421
            bwipp_renmatrix(); //#28422
            $$.restore(); //#28423
        } //#28423
    } //#28423
    $_ = Object.getPrototypeOf($_); //#28427
} //bwipp_ean8composite
function bwipp_upcacomposite() {
    $_ = Object.create($_); //#28459
    $_.dontdraw = false; //#28462
    $_.usematrix = false; //#28463
    $_.parse = false; //#28464
    $_.dontlint = false; //#28465
    $_.lintreqs = true; //#28466
    $k[$j++] = $_; //#28468
    bwipp_processoptions(); //#28468
    $_.options = $k[--$j]; //#28468
    $_.barcode = $k[--$j]; //#28469
    if ($_.dontdraw) { //#28471
        $_.usematrix = true; //#28471
    } //#28471
    $search($_.barcode, "|"); //#28474
    if ($k[--$j]) { //#28479
        $_.linear = $k[--$j]; //#28475
        $j--; //#28476
        $_.comp = $k[--$j]; //#28477
    } else { //#28479
        $j--; //#28479
        $k[$j++] = 'bwipp.missingCompositeComponent#28479'; //#28479
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#28479
        bwipp_raiseerror(); //#28479
    } //#28479
    $put($_.options, "lintype", "ean13"); //#28482
    $put($_.options, "inkspreadv", 0); //#28483
    $put($_.options, "dontdraw", true); //#28484
    $put($_.options, "dontlint", true); //#28485
    var _C = $s($_.comp.length + 18); //#28488
    $puti(_C, 0, "(01)00000000000000"); //#28489
    $puti(_C, 18, $_.comp); //#28490
    $k[$j++] = _C; //#28491
    $k[$j++] = 'ai'; //#28491
    bwipp_gs1process(); //#28491
    $j -= 3; //#28491
    $k[$j++] = $_.linear; //#28494
    $k[$j++] = $_.options; //#28494
    bwipp_upca(); //#28494
    if (!$_.usematrix) { //#28584
        $$.save(); //#28496
        bwipp_renlinear(); //#28498
        $$.rmoveto(-1, 72); //#28501
        $k[$j++] = Infinity; //#28501
        $k[$j++] = Infinity; //#28503
        $k[$j++] = 0; //#28504
        $k[$j++] = 1; //#28504
        for (var _H = 0, _I = 93; _H < _I; _H++) { //#28504
            $k[$j++] = 0; //#28504
        } //#28504
        $k[$j++] = 1; //#28505
        $k[$j++] = 0; //#28505
        $k[$j++] = 1; //#28505
        $k[$j++] = 0; //#28505
        for (var _J = 0, _K = 93; _J < _K; _J++) { //#28505
            $k[$j++] = 0; //#28505
        } //#28505
        $k[$j++] = 0; //#28506
        $k[$j++] = 1; //#28506
        $k[$j++] = 0; //#28506
        $k[$j++] = 1; //#28506
        for (var _L = 0, _M = 93; _L < _M; _L++) { //#28506
            $k[$j++] = 0; //#28506
        } //#28506
        $k[$j++] = 1; //#28506
        $k[$j++] = 0; //#28506
        var _N = $a(); //#28506
        $k[$j++] = 'ren'; //#28512
        $k[$j++] = bwipp_renmatrix; //#28512
        $k[$j++] = 'pixs'; //#28512
        $k[$j++] = _N; //#28512
        $k[$j++] = 'pixx'; //#28512
        $k[$j++] = 97; //#28512
        $k[$j++] = 'pixy'; //#28512
        $k[$j++] = 3; //#28512
        $k[$j++] = 'height'; //#28512
        $k[$j++] = 6 / 72; //#28512
        $k[$j++] = 'width'; //#28512
        $k[$j++] = 97 / 72; //#28512
        $k[$j++] = 'opt'; //#28512
        $k[$j++] = $_.options; //#28512
        var _P = $d(); //#28512
        $k[$j++] = _P; //#28513
        bwipp_renmatrix(); //#28513
        $$.rmoveto(-2, 6); //#28516
        $k[$j++] = $_.comp; //#28516
        $k[$j++] = $_.options; //#28516
        bwipp_gs1_cc(); //#28516
        bwipp_renmatrix(); //#28516
        $$.restore(); //#28518
    } else { //#28584
        $_.linsym = $k[--$j]; //#28520
        $_.sbs = $get($_.linsym, 'sbs'); //#28521
        $_.bhs = $get($_.linsym, 'bhs'); //#28522
        $_.bbs = $get($_.linsym, 'bbs'); //#28523
        $k[$j++] = 'linwidth'; //#28524
        $k[$j++] = 0; //#28524
        $forall($_.sbs, function() { //#28524
            var _a = $k[--$j]; //#28524
            var _b = $k[--$j]; //#28524
            $k[$j++] = $f(_b + $cvi(_a)); //#28524
        }); //#28524
        var _c = $k[--$j]; //#28524
        $_[$k[--$j]] = _c; //#28524
        $k[$j++] = 'compsym'; //#28526
        $k[$j++] = $_.comp; //#28526
        $k[$j++] = $_.options; //#28526
        bwipp_gs1_cc(); //#28526
        var _g = $k[--$j]; //#28526
        $_[$k[--$j]] = _g; //#28526
        $_.ccpixs = $get($_.compsym, 'pixs'); //#28527
        $_.ccpixx = $get($_.compsym, 'pixx'); //#28528
        $k[$j++] = Infinity; //#28530
        for (var _n = 0, _o = $f($_.ccpixx - 97); _n < _o; _n++) { //#28530
            $k[$j++] = 0; //#28530
        } //#28530
        $_.linpad = $a(); //#28530
        $_.diff = $f(($f($f($_.linwidth + $_.linpad.length) + 1)) - $_.ccpixx); //#28532
        if ($_.diff > 0) { //#28538
            $k[$j++] = Infinity; //#28534
            for (var _v = 0, _w = $_.diff; _v < _w; _v++) { //#28534
                $k[$j++] = 0; //#28534
            } //#28534
            $_.ccrpad = $a(); //#28534
            $_.pixx = $f($_.ccpixx + $_.diff); //#28535
        } else { //#28538
            $_.ccrpad = $a(0); //#28537
            $_.pixx = $_.ccpixx; //#28538
        } //#28538
        $k[$j++] = Infinity; //#28541
        for (var _15 = 0, _16 = $_.ccpixx, _14 = $_.ccpixs.length - 1; _16 < 0 ? _15 >= _14 : _15 <= _14; _15 += _16) { //#28545
            $_.i = _15; //#28543
            $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#28544
            $aload($_.ccrpad); //#28544
        } //#28544
        for (var _1C = 0, _1D = 2; _1C < _1D; _1C++) { //#28546
            $aload($_.linpad); //#28546
            $k[$j++] = 0; //#28546
            $k[$j++] = 1; //#28546
            for (var _1F = 0, _1G = 93; _1F < _1G; _1F++) { //#28546
                $k[$j++] = 0; //#28546
            } //#28546
            $k[$j++] = 1; //#28546
            $k[$j++] = 0; //#28546
            $aload($_.ccrpad); //#28546
        } //#28546
        for (var _1I = 0, _1J = 2; _1I < _1J; _1I++) { //#28547
            $aload($_.linpad); //#28547
            $k[$j++] = 1; //#28547
            $k[$j++] = 0; //#28547
            for (var _1L = 0, _1M = 93; _1L < _1M; _1L++) { //#28547
                $k[$j++] = 0; //#28547
            } //#28547
            $k[$j++] = 0; //#28547
            $k[$j++] = 1; //#28547
            $aload($_.ccrpad); //#28547
        } //#28547
        for (var _1O = 0, _1P = 2; _1O < _1P; _1O++) { //#28548
            $aload($_.linpad); //#28548
            $k[$j++] = 0; //#28548
            $k[$j++] = 1; //#28548
            for (var _1R = 0, _1S = 93; _1R < _1S; _1R++) { //#28548
                $k[$j++] = 0; //#28548
            } //#28548
            $k[$j++] = 1; //#28548
            $k[$j++] = 0; //#28548
            $aload($_.ccrpad); //#28548
        } //#28548
        for (var _1U = 71; _1U >= 0; _1U -= 1) { //#28567
            $_.y = _1U; //#28550
            $aload($_.linpad); //#28551
            $k[$j++] = 0; //#28565
            for (var _1Y = 0, _1X = $_.sbs.length - 1; _1Y <= _1X; _1Y += 1) { //#28565
                $_.i = _1Y; //#28554
                if (($_.i % 2) == 0) { //#28563
                    var _1d = $get($_.bbs, ~~($_.i / 2)) * 72; //#28557
                    if ((_1d > $_.y) || (($f(_1d + ($get($_.bhs, ~~($_.i / 2)) * 72))) < $_.y)) { //#28560
                        for (var _1m = 0, _1n = $cvi($get($_.sbs, $_.i)); _1m < _1n; _1m++) { //#28558
                            $k[$j++] = 0; //#28558
                        } //#28558
                    } else { //#28560
                        for (var _1r = 0, _1s = $cvi($get($_.sbs, $_.i)); _1r < _1s; _1r++) { //#28560
                            $k[$j++] = 1; //#28560
                        } //#28560
                    } //#28560
                } else { //#28563
                    for (var _1w = 0, _1x = $cvi($get($_.sbs, $_.i)); _1w < _1x; _1w++) { //#28563
                        $k[$j++] = 0; //#28563
                    } //#28563
                } //#28563
            } //#28563
            if ($_.diff < 0) { //#28566
                $k[$j++] = 0; //#28566
            } //#28566
        } //#28566
        $_.pixs = $a(); //#28566
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#28570
        var _28 = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#28578
        $k[$j++] = _28; //#28585
        if (!$_.dontdraw) { //#28585
            $$.save(); //#28582
            bwipp_renmatrix(); //#28583
            $$.restore(); //#28584
        } //#28584
    } //#28584
    $_ = Object.getPrototypeOf($_); //#28588
} //bwipp_upcacomposite
function bwipp_upcecomposite() {
    $_ = Object.create($_); //#28620
    $_.dontdraw = false; //#28623
    $_.usematrix = false; //#28624
    $_.parse = false; //#28625
    $_.dontlint = false; //#28626
    $_.lintreqs = true; //#28627
    $k[$j++] = $_; //#28629
    bwipp_processoptions(); //#28629
    $_.options = $k[--$j]; //#28629
    $_.barcode = $k[--$j]; //#28630
    if ($_.dontdraw) { //#28632
        $_.usematrix = true; //#28632
    } //#28632
    $search($_.barcode, "|"); //#28635
    if ($k[--$j]) { //#28640
        $_.linear = $k[--$j]; //#28636
        $j--; //#28637
        $_.comp = $k[--$j]; //#28638
    } else { //#28640
        $j--; //#28640
        $k[$j++] = 'bwipp.missingCompositeComponent#28640'; //#28640
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#28640
        bwipp_raiseerror(); //#28640
    } //#28640
    $put($_.options, "lintype", "upce"); //#28643
    $put($_.options, "inkspreadv", 0); //#28644
    $put($_.options, "dontdraw", true); //#28645
    $put($_.options, "dontlint", true); //#28646
    var _C = $s($_.comp.length + 18); //#28649
    $puti(_C, 0, "(01)00000000000000"); //#28650
    $puti(_C, 18, $_.comp); //#28651
    $k[$j++] = _C; //#28652
    $k[$j++] = 'ai'; //#28652
    bwipp_gs1process(); //#28652
    $j -= 3; //#28652
    $k[$j++] = $_.linear; //#28655
    $k[$j++] = $_.options; //#28655
    bwipp_upce(); //#28655
    if (!$_.usematrix) { //#28745
        $$.save(); //#28657
        bwipp_renlinear(); //#28659
        $$.rmoveto(-1, 72); //#28662
        $k[$j++] = Infinity; //#28662
        $k[$j++] = Infinity; //#28664
        $k[$j++] = 0; //#28665
        $k[$j++] = 1; //#28665
        for (var _H = 0, _I = 49; _H < _I; _H++) { //#28665
            $k[$j++] = 0; //#28665
        } //#28665
        $k[$j++] = 1; //#28666
        $k[$j++] = 0; //#28666
        $k[$j++] = 1; //#28666
        $k[$j++] = 0; //#28666
        for (var _J = 0, _K = 49; _J < _K; _J++) { //#28666
            $k[$j++] = 0; //#28666
        } //#28666
        $k[$j++] = 0; //#28667
        $k[$j++] = 1; //#28667
        $k[$j++] = 0; //#28667
        $k[$j++] = 1; //#28667
        for (var _L = 0, _M = 49; _L < _M; _L++) { //#28667
            $k[$j++] = 0; //#28667
        } //#28667
        $k[$j++] = 1; //#28667
        $k[$j++] = 0; //#28667
        var _N = $a(); //#28667
        $k[$j++] = 'ren'; //#28673
        $k[$j++] = bwipp_renmatrix; //#28673
        $k[$j++] = 'pixs'; //#28673
        $k[$j++] = _N; //#28673
        $k[$j++] = 'pixx'; //#28673
        $k[$j++] = 53; //#28673
        $k[$j++] = 'pixy'; //#28673
        $k[$j++] = 3; //#28673
        $k[$j++] = 'height'; //#28673
        $k[$j++] = 6 / 72; //#28673
        $k[$j++] = 'width'; //#28673
        $k[$j++] = 53 / 72; //#28673
        $k[$j++] = 'opt'; //#28673
        $k[$j++] = $_.options; //#28673
        var _P = $d(); //#28673
        $k[$j++] = _P; //#28674
        bwipp_renmatrix(); //#28674
        $$.rmoveto(-2, 6); //#28677
        $k[$j++] = $_.comp; //#28677
        $k[$j++] = $_.options; //#28677
        bwipp_gs1_cc(); //#28677
        bwipp_renmatrix(); //#28677
        $$.restore(); //#28679
    } else { //#28745
        $_.linsym = $k[--$j]; //#28681
        $_.sbs = $get($_.linsym, 'sbs'); //#28682
        $_.bhs = $get($_.linsym, 'bhs'); //#28683
        $_.bbs = $get($_.linsym, 'bbs'); //#28684
        $k[$j++] = 'linwidth'; //#28685
        $k[$j++] = 0; //#28685
        $forall($_.sbs, function() { //#28685
            var _a = $k[--$j]; //#28685
            var _b = $k[--$j]; //#28685
            $k[$j++] = $f(_b + $cvi(_a)); //#28685
        }); //#28685
        var _c = $k[--$j]; //#28685
        $_[$k[--$j]] = _c; //#28685
        $k[$j++] = 'compsym'; //#28687
        $k[$j++] = $_.comp; //#28687
        $k[$j++] = $_.options; //#28687
        bwipp_gs1_cc(); //#28687
        var _g = $k[--$j]; //#28687
        $_[$k[--$j]] = _g; //#28687
        $_.ccpixs = $get($_.compsym, 'pixs'); //#28688
        $_.ccpixx = $get($_.compsym, 'pixx'); //#28689
        $k[$j++] = Infinity; //#28691
        for (var _n = 0, _o = $f($_.ccpixx - 53); _n < _o; _n++) { //#28691
            $k[$j++] = 0; //#28691
        } //#28691
        $_.linpad = $a(); //#28691
        $_.diff = $f(($f($f($_.linwidth + $_.linpad.length) + 1)) - $_.ccpixx); //#28693
        if ($_.diff > 0) { //#28699
            $k[$j++] = Infinity; //#28695
            for (var _v = 0, _w = $_.diff; _v < _w; _v++) { //#28695
                $k[$j++] = 0; //#28695
            } //#28695
            $_.ccrpad = $a(); //#28695
            $_.pixx = $f($_.ccpixx + $_.diff); //#28696
        } else { //#28699
            $_.ccrpad = $a(0); //#28698
            $_.pixx = $_.ccpixx; //#28699
        } //#28699
        $k[$j++] = Infinity; //#28702
        for (var _15 = 0, _16 = $_.ccpixx, _14 = $_.ccpixs.length - 1; _16 < 0 ? _15 >= _14 : _15 <= _14; _15 += _16) { //#28706
            $_.i = _15; //#28704
            $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#28705
            $aload($_.ccrpad); //#28705
        } //#28705
        for (var _1C = 0, _1D = 2; _1C < _1D; _1C++) { //#28707
            $aload($_.linpad); //#28707
            $k[$j++] = 0; //#28707
            $k[$j++] = 1; //#28707
            for (var _1F = 0, _1G = 49; _1F < _1G; _1F++) { //#28707
                $k[$j++] = 0; //#28707
            } //#28707
            $k[$j++] = 1; //#28707
            $k[$j++] = 0; //#28707
            $aload($_.ccrpad); //#28707
        } //#28707
        for (var _1I = 0, _1J = 2; _1I < _1J; _1I++) { //#28708
            $aload($_.linpad); //#28708
            $k[$j++] = 1; //#28708
            $k[$j++] = 0; //#28708
            for (var _1L = 0, _1M = 49; _1L < _1M; _1L++) { //#28708
                $k[$j++] = 0; //#28708
            } //#28708
            $k[$j++] = 0; //#28708
            $k[$j++] = 1; //#28708
            $aload($_.ccrpad); //#28708
        } //#28708
        for (var _1O = 0, _1P = 2; _1O < _1P; _1O++) { //#28709
            $aload($_.linpad); //#28709
            $k[$j++] = 0; //#28709
            $k[$j++] = 1; //#28709
            for (var _1R = 0, _1S = 49; _1R < _1S; _1R++) { //#28709
                $k[$j++] = 0; //#28709
            } //#28709
            $k[$j++] = 1; //#28709
            $k[$j++] = 0; //#28709
            $aload($_.ccrpad); //#28709
        } //#28709
        for (var _1U = 71; _1U >= 0; _1U -= 1) { //#28728
            $_.y = _1U; //#28711
            $aload($_.linpad); //#28712
            $k[$j++] = 0; //#28726
            for (var _1Y = 0, _1X = $_.sbs.length - 1; _1Y <= _1X; _1Y += 1) { //#28726
                $_.i = _1Y; //#28715
                if (($_.i % 2) == 0) { //#28724
                    var _1d = $get($_.bbs, ~~($_.i / 2)) * 72; //#28718
                    if ((_1d > $_.y) || (($f(_1d + ($get($_.bhs, ~~($_.i / 2)) * 72))) < $_.y)) { //#28721
                        for (var _1m = 0, _1n = $cvi($get($_.sbs, $_.i)); _1m < _1n; _1m++) { //#28719
                            $k[$j++] = 0; //#28719
                        } //#28719
                    } else { //#28721
                        for (var _1r = 0, _1s = $cvi($get($_.sbs, $_.i)); _1r < _1s; _1r++) { //#28721
                            $k[$j++] = 1; //#28721
                        } //#28721
                    } //#28721
                } else { //#28724
                    for (var _1w = 0, _1x = $cvi($get($_.sbs, $_.i)); _1w < _1x; _1w++) { //#28724
                        $k[$j++] = 0; //#28724
                    } //#28724
                } //#28724
            } //#28724
            if ($_.diff < 0) { //#28727
                $k[$j++] = 0; //#28727
            } //#28727
        } //#28727
        $_.pixs = $a(); //#28727
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#28731
        var _28 = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#28739
        $k[$j++] = _28; //#28746
        if (!$_.dontdraw) { //#28746
            $$.save(); //#28743
            bwipp_renmatrix(); //#28744
            $$.restore(); //#28745
        } //#28745
    } //#28745
    $_ = Object.getPrototypeOf($_); //#28749
} //bwipp_upcecomposite
function bwipp_databaromnicomposite() {
    $_ = Object.create($_); //#28781
    $_.dontdraw = false; //#28784
    $_.usematrix = false; //#28785
    $_.parse = false; //#28786
    $_.dontlint = false; //#28787
    $_.lintreqs = true; //#28788
    $k[$j++] = $_; //#28790
    bwipp_processoptions(); //#28790
    $_.options = $k[--$j]; //#28790
    $_.barcode = $k[--$j]; //#28791
    if ($_.dontdraw) { //#28793
        $_.usematrix = true; //#28793
    } //#28793
    $search($_.barcode, "|"); //#28796
    if ($k[--$j]) { //#28801
        $_.linear = $k[--$j]; //#28797
        $j--; //#28798
        $_.comp = $k[--$j]; //#28799
    } else { //#28801
        $j--; //#28801
        $k[$j++] = 'bwipp.missingCompositeComponent#28801'; //#28801
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#28801
        bwipp_raiseerror(); //#28801
    } //#28801
    if (!$_.usematrix) { //#28804
        $$.save(); //#28804
    } //#28804
    $put($_.options, "lintype", "databaromni"); //#28806
    $put($_.options, "linkage", true); //#28807
    $put($_.options, "inkspreadv", 0); //#28808
    $put($_.options, "dontdraw", true); //#28809
    $put($_.options, "dontlint", true); //#28810
    var _F = $s($_.linear.length + $_.comp.length); //#28813
    $puti(_F, 0, $_.linear); //#28814
    $puti(_F, $_.linear.length, $_.comp); //#28815
    $k[$j++] = _F; //#28816
    $k[$j++] = 'ai'; //#28816
    bwipp_gs1process(); //#28816
    $j -= 3; //#28816
    $k[$j++] = $_.linear; //#28819
    $k[$j++] = $_.options; //#28819
    bwipp_databaromni(); //#28819
    var _L = $k[--$j]; //#28820
    $_.linsbs = $get(_L, "sbs"); //#28820
    $_.linheight = $get($get(_L, "bhs"), 0) * 72; //#28821
    $k[$j++] = _L; //#28822
    if (!$_.usematrix) { //#28822
        bwipp_renlinear(); //#28822
    } else { //#28822
        $j--; //#28822
    } //#28822
    $_.sepfinder = function() {
        $_.fp = $k[--$j]; //#28826
        for (var _U = $_.fp, _T = $f($_.fp + 12); _U <= _T; _U += 1) { //#28839
            $_.i = _U; //#28828
            if ($get($_.bot, $_.i) == 0) { //#28836
                if ($get($_.bot, $_.i - 1) == 1) { //#28833
                    $k[$j++] = 1; //#28831
                } else { //#28833
                    var _e = ($get($_.sep, $_.i - 1) == 0) ? 1 : 0; //#28833
                    $k[$j++] = _e; //#28833
                } //#28833
            } else { //#28836
                $k[$j++] = 0; //#28836
            } //#28836
            $put($_.sep, $_.i, $k[--$j]); //#28838
        } //#28838
        $_.f3 = $a([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1]); //#28840
        $k[$j++] = true; //#28841
        for (var _j = 0; _j <= 12; _j += 1) { //#28841
            var _p = $k[--$j]; //#28841
            $k[$j++] = _p && $eq($get($_.bot, $f(_j + $_.fp)), $get($_.f3, _j)); //#28841
        } //#28841
        if ($k[--$j]) { //#28844
            $puti($_.sep, $_.fp, $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0])); //#28843
        } //#28843
    }; //#28843
    $k[$j++] = Infinity; //#28846
    $k[$j++] = 0; //#28847
    $forall($_.linsbs, function() { //#28847
        var _v = $k[--$j]; //#28847
        var _w = $k[--$j]; //#28847
        var _x = (_w == 1) ? 0 : 1; //#28847
        $k[$j++] = _w; //#28847
        for (var _y = 0, _z = _v; _y < _z; _y++) { //#28847
            $k[$j++] = _x //#28847
        } //#28847
    }); //#28847
    $astore($a($counttomark() - 1)); //#28848
    $_.bot = $k[--$j]; //#28848
    $j -= 2; //#28848
    $k[$j++] = Infinity; //#28849
    $forall($_.bot, function() { //#28849
        var _14 = $k[--$j]; //#28849
        $k[$j++] = $f(1 - _14); //#28849
    }); //#28849
    $_.sep = $a(); //#28849
    $puti($_.sep, 0, $a([0, 0, 0])); //#28850
    $puti($_.sep, $_.sep.length - 4, $a([0, 0, 0, 0])); //#28851
    $k[$j++] = 18; //#28852
    $_.sepfinder(); //#28852
    $k[$j++] = 64; //#28852
    $_.sepfinder(); //#28852
    if (!$_.usematrix) { //#28903
        $$.rmoveto(0, $_.linheight); //#28854
        var _1H = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $_.sep],
            ["pixx", $_.sep.length],
            ["pixy", 1],
            ["height", 1 / 72],
            ["width", $_.sep.length / 72],
            ["opt", $_.options]
        ]); //#28861
        $k[$j++] = _1H; //#28862
        bwipp_renmatrix(); //#28862
        $$.rmoveto(-5, 1); //#28865
        $k[$j++] = $_.comp; //#28865
        $k[$j++] = $_.options; //#28865
        bwipp_gs1_cc(); //#28865
        bwipp_renmatrix(); //#28865
        $$.restore(); //#28867
    } else { //#28903
        $k[$j++] = 'compsym'; //#28869
        $k[$j++] = $_.comp; //#28869
        $k[$j++] = $_.options; //#28869
        bwipp_gs1_cc(); //#28869
        var _1M = $k[--$j]; //#28869
        $_[$k[--$j]] = _1M; //#28869
        $_.ccpixs = $get($_.compsym, 'pixs'); //#28870
        $_.ccpixx = $get($_.compsym, 'pixx'); //#28871
        $k[$j++] = Infinity; //#28873
        $k[$j++] = 0; //#28874
        $forall($_.linsbs, function() { //#28874
            var _1T = $k[--$j]; //#28874
            var _1U = $k[--$j]; //#28874
            var _1V = (_1U == 0) ? 1 : 0; //#28874
            $k[$j++] = _1U; //#28874
            for (var _1W = 0, _1X = $cvi(_1T); _1W < _1X; _1W++) { //#28874
                $k[$j++] = _1V //#28874
            } //#28874
        }); //#28874
        $_.linpixs = $a(); //#28874
        $k[$j++] = Infinity; //#28876
        $k[$j++] = 0; //#28876
        $aload($_.sep); //#28876
        $_.sep = $a(); //#28876
        $_.linheight = ~~$_.linheight; //#28878
        $k[$j++] = Infinity; //#28880
        for (var _1f = 0, _1g = $_.ccpixx, _1e = $_.ccpixs.length - 1; _1g < 0 ? _1f >= _1e : _1f <= _1e; _1f += _1g) { //#28884
            $_.i = _1f; //#28882
            $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#28883
            $k[$j++] = 0; //#28883
        } //#28883
        $k[$j++] = 0; //#28885
        $k[$j++] = 0; //#28885
        $k[$j++] = 0; //#28885
        $k[$j++] = 0; //#28885
        $aload($_.sep); //#28885
        for (var _1n = 0, _1o = $_.linheight; _1n < _1o; _1n++) { //#28885
            $k[$j++] = 0; //#28885
            $k[$j++] = 0; //#28885
            $k[$j++] = 0; //#28885
            $k[$j++] = 0; //#28885
            $aload($_.linpixs); //#28885
        } //#28885
        $_.pixs = $a(); //#28885
        $_.pixx = $f($_.ccpixx + 1); //#28887
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#28889
        var _20 = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#28897
        $k[$j++] = _20; //#28904
        if (!$_.dontdraw) { //#28904
            $$.save(); //#28901
            bwipp_renmatrix(); //#28902
            $$.restore(); //#28903
        } //#28903
    } //#28903
    $_ = Object.getPrototypeOf($_); //#28907
} //bwipp_databaromnicomposite
function bwipp_databarstackedcomposite() {
    $_ = Object.create($_); //#28938
    $_.dontdraw = false; //#28941
    $_.usematrix = false; //#28942
    $_.parse = false; //#28943
    $_.dontlint = false; //#28944
    $_.lintreqs = true; //#28945
    $k[$j++] = $_; //#28947
    bwipp_processoptions(); //#28947
    $_.options = $k[--$j]; //#28947
    $_.barcode = $k[--$j]; //#28948
    if ($_.dontdraw) { //#28950
        $_.usematrix = true; //#28950
    } //#28950
    $search($_.barcode, "|"); //#28953
    if ($k[--$j]) { //#28958
        $_.linear = $k[--$j]; //#28954
        $j--; //#28955
        $_.comp = $k[--$j]; //#28956
    } else { //#28958
        $j--; //#28958
        $k[$j++] = 'bwipp.missingCompositeComponent#28958'; //#28958
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#28958
        bwipp_raiseerror(); //#28958
    } //#28958
    if (!$_.usematrix) { //#28961
        $$.save(); //#28961
    } //#28961
    $put($_.options, "lintype", "databarstacked"); //#28963
    $put($_.options, "linkage", true); //#28964
    $put($_.options, "inkspreadv", 0); //#28965
    $put($_.options, "dontdraw", true); //#28966
    $put($_.options, "dontlint", true); //#28967
    var _F = $s($_.linear.length + $_.comp.length); //#28970
    $puti(_F, 0, $_.linear); //#28971
    $puti(_F, $_.linear.length, $_.comp); //#28972
    $k[$j++] = _F; //#28973
    $k[$j++] = 'ai'; //#28973
    bwipp_gs1process(); //#28973
    $j -= 3; //#28973
    $k[$j++] = $_.linear; //#28976
    $k[$j++] = $_.options; //#28976
    bwipp_databarstacked(); //#28976
    var _L = $k[--$j]; //#28977
    $_.bot = $geti($get(_L, "pixs"), 0, $get(_L, "pixx")); //#28977
    $_.linheight = $get(_L, "pixy"); //#28978
    $k[$j++] = _L; //#28979
    if (!$_.usematrix) { //#28979
        bwipp_renmatrix(); //#28979
    } else { //#28979
        $_.linpixs = $get($k[--$j], 'pixs'); //#28979
    } //#28979
    $_.sepfinder = function() {
        $_.fp = $k[--$j]; //#28983
        for (var _X = $_.fp, _W = $f($_.fp + 12); _X <= _W; _X += 1) { //#28996
            $_.i = _X; //#28985
            if ($get($_.bot, $_.i) == 0) { //#28993
                if ($get($_.bot, $_.i - 1) == 1) { //#28990
                    $k[$j++] = 1; //#28988
                } else { //#28990
                    var _h = ($get($_.sep, $_.i - 1) == 0) ? 1 : 0; //#28990
                    $k[$j++] = _h; //#28990
                } //#28990
            } else { //#28993
                $k[$j++] = 0; //#28993
            } //#28993
            $put($_.sep, $_.i, $k[--$j]); //#28995
        } //#28995
        $_.f3 = $a([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1]); //#28997
        $k[$j++] = true; //#28998
        for (var _m = 0; _m <= 12; _m += 1) { //#28998
            var _s = $k[--$j]; //#28998
            $k[$j++] = _s && $eq($get($_.bot, $f(_m + $_.fp)), $get($_.f3, _m)); //#28998
        } //#28998
        if ($k[--$j]) { //#29001
            $puti($_.sep, $_.fp, $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0])); //#29000
        } //#29000
    }; //#29000
    $k[$j++] = Infinity; //#29003
    var _x = $_.bot; //#29003
    for (var _y = 0, _z = _x.length; _y < _z; _y++) { //#29003
        $k[$j++] = $f(1 - $get(_x, _y)); //#29003
    } //#29003
    $_.sep = $a(); //#29003
    $puti($_.sep, 0, $a([0, 0, 0, 0])); //#29004
    $puti($_.sep, $_.sep.length - 4, $a([0, 0, 0, 0])); //#29005
    $k[$j++] = 18; //#29006
    $_.sepfinder(); //#29006
    if (!$_.usematrix) { //#29056
        $$.rmoveto(0, $_.linheight); //#29008
        var _1D = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $_.sep],
            ["pixx", $_.sep.length],
            ["pixy", 1],
            ["height", 1 / 72],
            ["width", $_.sep.length / 72],
            ["opt", $_.options]
        ]); //#29015
        $k[$j++] = _1D; //#29016
        bwipp_renmatrix(); //#29016
        $$.rmoveto(1, 1); //#29019
        $k[$j++] = $_.comp; //#29019
        $k[$j++] = $_.options; //#29019
        bwipp_gs1_cc(); //#29019
        bwipp_renmatrix(); //#29019
        $$.restore(); //#29021
    } else { //#29056
        $k[$j++] = 'compsym'; //#29023
        $k[$j++] = $_.comp; //#29023
        $k[$j++] = $_.options; //#29023
        bwipp_gs1_cc(); //#29023
        var _1I = $k[--$j]; //#29023
        $_[$k[--$j]] = _1I; //#29023
        $_.ccpixs = $get($_.compsym, 'pixs'); //#29024
        $_.ccpixx = $get($_.compsym, 'pixx'); //#29025
        $_.linwidth = $_.sep.length; //#29027
        $k[$j++] = Infinity; //#29029
        for (var _1S = 0, _1T = $_.ccpixx, _1R = $_.ccpixs.length - 1; _1T < 0 ? _1S >= _1R : _1S <= _1R; _1S += _1T) { //#29033
            $_.i = _1S; //#29031
            $k[$j++] = 0; //#29032
            $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#29032
        } //#29032
        $aload($_.sep); //#29034
        $k[$j++] = 0; //#29038
        $k[$j++] = 0; //#29038
        $k[$j++] = 0; //#29038
        $k[$j++] = 0; //#29038
        $k[$j++] = 0; //#29038
        $k[$j++] = 0; //#29038
        for (var _1c = 0, _1d = $_.linwidth, _1b = $_.linpixs.length - 1; _1d < 0 ? _1c >= _1b : _1c <= _1b; _1c += _1d) { //#29038
            $_.i = _1c; //#29036
            $aload($geti($_.linpixs, $_.i, $_.linwidth)); //#29037
            $k[$j++] = 0; //#29037
            $k[$j++] = 0; //#29037
            $k[$j++] = 0; //#29037
            $k[$j++] = 0; //#29037
            $k[$j++] = 0; //#29037
            $k[$j++] = 0; //#29037
        } //#29037
        $_.pixs = $a(); //#29037
        $_.pixx = $f($_.ccpixx + 1); //#29040
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#29042
        var _1s = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#29050
        $k[$j++] = _1s; //#29057
        if (!$_.dontdraw) { //#29057
            $$.save(); //#29054
            bwipp_renmatrix(); //#29055
            $$.restore(); //#29056
        } //#29056
    } //#29056
    $_ = Object.getPrototypeOf($_); //#29060
} //bwipp_databarstackedcomposite
function bwipp_databarstackedomnicomposite() {
    $_ = Object.create($_); //#29091
    $_.dontdraw = false; //#29094
    $_.usematrix = false; //#29095
    $_.parse = false; //#29096
    $_.dontlint = false; //#29097
    $_.lintreqs = true; //#29098
    $k[$j++] = $_; //#29100
    bwipp_processoptions(); //#29100
    $_.options = $k[--$j]; //#29100
    $_.barcode = $k[--$j]; //#29101
    if ($_.dontdraw) { //#29103
        $_.usematrix = true; //#29103
    } //#29103
    $search($_.barcode, "|"); //#29106
    if ($k[--$j]) { //#29111
        $_.linear = $k[--$j]; //#29107
        $j--; //#29108
        $_.comp = $k[--$j]; //#29109
    } else { //#29111
        $j--; //#29111
        $k[$j++] = 'bwipp.missingCompositeComponent#29111'; //#29111
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#29111
        bwipp_raiseerror(); //#29111
    } //#29111
    if (!$_.usematrix) { //#29114
        $$.save(); //#29114
    } //#29114
    $put($_.options, "lintype", "databarstackedomni"); //#29116
    $put($_.options, "linkage", true); //#29117
    $put($_.options, "inkspreadv", 0); //#29118
    $put($_.options, "dontdraw", true); //#29119
    $put($_.options, "dontlint", true); //#29120
    var _F = $s($_.linear.length + $_.comp.length); //#29123
    $puti(_F, 0, $_.linear); //#29124
    $puti(_F, $_.linear.length, $_.comp); //#29125
    $k[$j++] = _F; //#29126
    $k[$j++] = 'ai'; //#29126
    bwipp_gs1process(); //#29126
    $j -= 3; //#29126
    $k[$j++] = $_.linear; //#29129
    $k[$j++] = $_.options; //#29129
    bwipp_databarstackedomni(); //#29129
    var _L = $k[--$j]; //#29130
    $_.bot = $geti($get(_L, "pixs"), 0, $get(_L, "pixx")); //#29130
    $_.linheight = $get(_L, "pixy"); //#29131
    $k[$j++] = _L; //#29132
    if (!$_.usematrix) { //#29132
        bwipp_renmatrix(); //#29132
    } else { //#29132
        $_.linpixs = $get($k[--$j], 'pixs'); //#29132
    } //#29132
    $_.sepfinder = function() {
        $_.fp = $k[--$j]; //#29136
        for (var _X = $_.fp, _W = $f($_.fp + 12); _X <= _W; _X += 1) { //#29149
            $_.i = _X; //#29138
            if ($get($_.bot, $_.i) == 0) { //#29146
                if ($get($_.bot, $_.i - 1) == 1) { //#29143
                    $k[$j++] = 1; //#29141
                } else { //#29143
                    var _h = ($get($_.sep, $_.i - 1) == 0) ? 1 : 0; //#29143
                    $k[$j++] = _h; //#29143
                } //#29143
            } else { //#29146
                $k[$j++] = 0; //#29146
            } //#29146
            $put($_.sep, $_.i, $k[--$j]); //#29148
        } //#29148
        $_.f3 = $a([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1]); //#29150
        $k[$j++] = true; //#29151
        for (var _m = 0; _m <= 12; _m += 1) { //#29151
            var _s = $k[--$j]; //#29151
            $k[$j++] = _s && $eq($get($_.bot, $f(_m + $_.fp)), $get($_.f3, _m)); //#29151
        } //#29151
        if ($k[--$j]) { //#29154
            $puti($_.sep, $_.fp, $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0])); //#29153
        } //#29153
    }; //#29153
    $k[$j++] = Infinity; //#29156
    var _x = $_.bot; //#29156
    for (var _y = 0, _z = _x.length; _y < _z; _y++) { //#29156
        $k[$j++] = $f(1 - $get(_x, _y)); //#29156
    } //#29156
    $_.sep = $a(); //#29156
    $puti($_.sep, 0, $a([0, 0, 0, 0])); //#29157
    $puti($_.sep, $_.sep.length - 4, $a([0, 0, 0, 0])); //#29158
    $k[$j++] = 18; //#29159
    $_.sepfinder(); //#29159
    if (!$_.usematrix) { //#29209
        $$.rmoveto(0, $_.linheight); //#29161
        var _1D = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $_.sep],
            ["pixx", $_.sep.length],
            ["pixy", 1],
            ["height", 1 / 72],
            ["width", $_.sep.length / 72],
            ["opt", $_.options]
        ]); //#29168
        $k[$j++] = _1D; //#29169
        bwipp_renmatrix(); //#29169
        $$.rmoveto(1, 1); //#29172
        $k[$j++] = $_.comp; //#29172
        $k[$j++] = $_.options; //#29172
        bwipp_gs1_cc(); //#29172
        bwipp_renmatrix(); //#29172
        $$.restore(); //#29174
    } else { //#29209
        $k[$j++] = 'compsym'; //#29176
        $k[$j++] = $_.comp; //#29176
        $k[$j++] = $_.options; //#29176
        bwipp_gs1_cc(); //#29176
        var _1I = $k[--$j]; //#29176
        $_[$k[--$j]] = _1I; //#29176
        $_.ccpixs = $get($_.compsym, 'pixs'); //#29177
        $_.ccpixx = $get($_.compsym, 'pixx'); //#29178
        $_.linwidth = $_.sep.length; //#29180
        $k[$j++] = Infinity; //#29182
        for (var _1S = 0, _1T = $_.ccpixx, _1R = $_.ccpixs.length - 1; _1T < 0 ? _1S >= _1R : _1S <= _1R; _1S += _1T) { //#29186
            $_.i = _1S; //#29184
            $k[$j++] = 0; //#29185
            $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#29185
        } //#29185
        $aload($_.sep); //#29187
        $k[$j++] = 0; //#29191
        $k[$j++] = 0; //#29191
        $k[$j++] = 0; //#29191
        $k[$j++] = 0; //#29191
        $k[$j++] = 0; //#29191
        $k[$j++] = 0; //#29191
        for (var _1c = 0, _1d = $_.linwidth, _1b = $_.linpixs.length - 1; _1d < 0 ? _1c >= _1b : _1c <= _1b; _1c += _1d) { //#29191
            $_.i = _1c; //#29189
            $aload($geti($_.linpixs, $_.i, $_.linwidth)); //#29190
            $k[$j++] = 0; //#29190
            $k[$j++] = 0; //#29190
            $k[$j++] = 0; //#29190
            $k[$j++] = 0; //#29190
            $k[$j++] = 0; //#29190
            $k[$j++] = 0; //#29190
        } //#29190
        $_.pixs = $a(); //#29190
        $_.pixx = $f($_.ccpixx + 1); //#29193
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#29195
        var _1s = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#29203
        $k[$j++] = _1s; //#29210
        if (!$_.dontdraw) { //#29210
            $$.save(); //#29207
            bwipp_renmatrix(); //#29208
            $$.restore(); //#29209
        } //#29209
    } //#29209
    $_ = Object.getPrototypeOf($_); //#29213
} //bwipp_databarstackedomnicomposite
function bwipp_databartruncatedcomposite() {
    $_ = Object.create($_); //#29245
    $_.dontdraw = false; //#29248
    $_.usematrix = false; //#29249
    $_.parse = false; //#29250
    $_.dontlint = false; //#29251
    $_.lintreqs = true; //#29252
    $k[$j++] = $_; //#29254
    bwipp_processoptions(); //#29254
    $_.options = $k[--$j]; //#29254
    $_.barcode = $k[--$j]; //#29255
    if ($_.dontdraw) { //#29257
        $_.usematrix = true; //#29257
    } //#29257
    $search($_.barcode, "|"); //#29260
    if ($k[--$j]) { //#29265
        $_.linear = $k[--$j]; //#29261
        $j--; //#29262
        $_.comp = $k[--$j]; //#29263
    } else { //#29265
        $j--; //#29265
        $k[$j++] = 'bwipp.missingCompositeComponent#29265'; //#29265
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#29265
        bwipp_raiseerror(); //#29265
    } //#29265
    if (!$_.usematrix) { //#29268
        $$.save(); //#29268
    } //#29268
    $put($_.options, "lintype", "databartruncated"); //#29270
    $put($_.options, "linkage", true); //#29271
    $put($_.options, "inkspreadv", 0); //#29272
    $put($_.options, "dontdraw", true); //#29273
    $put($_.options, "dontlint", true); //#29274
    var _F = $s($_.linear.length + $_.comp.length); //#29277
    $puti(_F, 0, $_.linear); //#29278
    $puti(_F, $_.linear.length, $_.comp); //#29279
    $k[$j++] = _F; //#29280
    $k[$j++] = 'ai'; //#29280
    bwipp_gs1process(); //#29280
    $j -= 3; //#29280
    $k[$j++] = $_.linear; //#29283
    $k[$j++] = $_.options; //#29283
    bwipp_databartruncated(); //#29283
    var _L = $k[--$j]; //#29284
    $_.linsbs = $get(_L, "sbs"); //#29284
    $_.linheight = $get($get(_L, "bhs"), 0) * 72; //#29285
    $k[$j++] = _L; //#29286
    if (!$_.usematrix) { //#29286
        bwipp_renlinear(); //#29286
    } else { //#29286
        $j--; //#29286
    } //#29286
    $_.sepfinder = function() {
        $_.fp = $k[--$j]; //#29290
        for (var _U = $_.fp, _T = $f($_.fp + 12); _U <= _T; _U += 1) { //#29303
            $_.i = _U; //#29292
            if ($get($_.bot, $_.i) == 0) { //#29300
                if ($get($_.bot, $_.i - 1) == 1) { //#29297
                    $k[$j++] = 1; //#29295
                } else { //#29297
                    var _e = ($get($_.sep, $_.i - 1) == 0) ? 1 : 0; //#29297
                    $k[$j++] = _e; //#29297
                } //#29297
            } else { //#29300
                $k[$j++] = 0; //#29300
            } //#29300
            $put($_.sep, $_.i, $k[--$j]); //#29302
        } //#29302
        $_.f3 = $a([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1]); //#29304
        $k[$j++] = true; //#29305
        for (var _j = 0; _j <= 12; _j += 1) { //#29305
            var _p = $k[--$j]; //#29305
            $k[$j++] = _p && $eq($get($_.bot, $f(_j + $_.fp)), $get($_.f3, _j)); //#29305
        } //#29305
        if ($k[--$j]) { //#29308
            $puti($_.sep, $_.fp, $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0])); //#29307
        } //#29307
    }; //#29307
    $k[$j++] = Infinity; //#29310
    $k[$j++] = 0; //#29311
    $forall($_.linsbs, function() { //#29311
        var _v = $k[--$j]; //#29311
        var _w = $k[--$j]; //#29311
        var _x = (_w == 1) ? 0 : 1; //#29311
        $k[$j++] = _w; //#29311
        for (var _y = 0, _z = _v; _y < _z; _y++) { //#29311
            $k[$j++] = _x //#29311
        } //#29311
    }); //#29311
    $astore($a($counttomark() - 1)); //#29312
    $_.bot = $k[--$j]; //#29312
    $j -= 2; //#29312
    $k[$j++] = Infinity; //#29313
    $forall($_.bot, function() { //#29313
        var _14 = $k[--$j]; //#29313
        $k[$j++] = $f(1 - _14); //#29313
    }); //#29313
    $_.sep = $a(); //#29313
    $puti($_.sep, 0, $a([0, 0, 0])); //#29314
    $puti($_.sep, $_.sep.length - 4, $a([0, 0, 0, 0])); //#29315
    $k[$j++] = 18; //#29316
    $_.sepfinder(); //#29316
    $k[$j++] = 64; //#29316
    $_.sepfinder(); //#29316
    if (!$_.usematrix) { //#29367
        $$.rmoveto(0, $_.linheight); //#29318
        var _1H = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $_.sep],
            ["pixx", $_.sep.length],
            ["pixy", 1],
            ["height", 1 / 72],
            ["width", $_.sep.length / 72],
            ["opt", $_.options]
        ]); //#29325
        $k[$j++] = _1H; //#29326
        bwipp_renmatrix(); //#29326
        $$.rmoveto(-5, 1); //#29329
        $k[$j++] = $_.comp; //#29329
        $k[$j++] = $_.options; //#29329
        bwipp_gs1_cc(); //#29329
        bwipp_renmatrix(); //#29329
        $$.restore(); //#29331
    } else { //#29367
        $k[$j++] = 'compsym'; //#29333
        $k[$j++] = $_.comp; //#29333
        $k[$j++] = $_.options; //#29333
        bwipp_gs1_cc(); //#29333
        var _1M = $k[--$j]; //#29333
        $_[$k[--$j]] = _1M; //#29333
        $_.ccpixs = $get($_.compsym, 'pixs'); //#29334
        $_.ccpixx = $get($_.compsym, 'pixx'); //#29335
        $k[$j++] = Infinity; //#29337
        $k[$j++] = 0; //#29338
        $forall($_.linsbs, function() { //#29338
            var _1T = $k[--$j]; //#29338
            var _1U = $k[--$j]; //#29338
            var _1V = (_1U == 0) ? 1 : 0; //#29338
            $k[$j++] = _1U; //#29338
            for (var _1W = 0, _1X = $cvi(_1T); _1W < _1X; _1W++) { //#29338
                $k[$j++] = _1V //#29338
            } //#29338
        }); //#29338
        $_.linpixs = $a(); //#29338
        $k[$j++] = Infinity; //#29340
        $k[$j++] = 0; //#29340
        $aload($_.sep); //#29340
        $_.sep = $a(); //#29340
        $_.linheight = ~~$_.linheight; //#29342
        $k[$j++] = Infinity; //#29344
        for (var _1f = 0, _1g = $_.ccpixx, _1e = $_.ccpixs.length - 1; _1g < 0 ? _1f >= _1e : _1f <= _1e; _1f += _1g) { //#29348
            $_.i = _1f; //#29346
            $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#29347
            $k[$j++] = 0; //#29347
        } //#29347
        $k[$j++] = 0; //#29349
        $k[$j++] = 0; //#29349
        $k[$j++] = 0; //#29349
        $k[$j++] = 0; //#29349
        $aload($_.sep); //#29349
        for (var _1n = 0, _1o = $_.linheight; _1n < _1o; _1n++) { //#29349
            $k[$j++] = 0; //#29349
            $k[$j++] = 0; //#29349
            $k[$j++] = 0; //#29349
            $k[$j++] = 0; //#29349
            $aload($_.linpixs); //#29349
        } //#29349
        $_.pixs = $a(); //#29349
        $_.pixx = $f($_.ccpixx + 1); //#29351
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#29353
        var _20 = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#29361
        $k[$j++] = _20; //#29368
        if (!$_.dontdraw) { //#29368
            $$.save(); //#29365
            bwipp_renmatrix(); //#29366
            $$.restore(); //#29367
        } //#29367
    } //#29367
    $_ = Object.getPrototypeOf($_); //#29371
} //bwipp_databartruncatedcomposite
function bwipp_databarlimitedcomposite() {
    $_ = Object.create($_); //#29403
    $_.dontdraw = false; //#29406
    $_.usematrix = false; //#29407
    $_.parse = false; //#29408
    $_.dontlint = false; //#29409
    $_.lintreqs = true; //#29410
    $k[$j++] = $_; //#29412
    bwipp_processoptions(); //#29412
    $_.options = $k[--$j]; //#29412
    $_.barcode = $k[--$j]; //#29413
    if ($_.dontdraw) { //#29415
        $_.usematrix = true; //#29415
    } //#29415
    $search($_.barcode, "|"); //#29418
    if ($k[--$j]) { //#29423
        $_.linear = $k[--$j]; //#29419
        $j--; //#29420
        $_.comp = $k[--$j]; //#29421
    } else { //#29423
        $j--; //#29423
        $k[$j++] = 'bwipp.missingCompositeComponent#29423'; //#29423
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#29423
        bwipp_raiseerror(); //#29423
    } //#29423
    if (!$_.usematrix) { //#29426
        $$.save(); //#29426
    } //#29426
    $put($_.options, "lintype", "databarlimited"); //#29428
    $put($_.options, "linkage", true); //#29429
    $put($_.options, "inkspreadv", 0); //#29430
    $put($_.options, "dontdraw", true); //#29431
    $put($_.options, "dontlint", true); //#29432
    var _F = $s($_.linear.length + $_.comp.length); //#29435
    $puti(_F, 0, $_.linear); //#29436
    $puti(_F, $_.linear.length, $_.comp); //#29437
    $k[$j++] = _F; //#29438
    $k[$j++] = 'ai'; //#29438
    bwipp_gs1process(); //#29438
    $j -= 3; //#29438
    $k[$j++] = $_.linear; //#29441
    $k[$j++] = $_.options; //#29441
    bwipp_databarlimited(); //#29441
    var _L = $k[--$j]; //#29442
    $_.linsbs = $get(_L, "sbs"); //#29442
    $_.linheight = $get($get(_L, "bhs"), 0) * 72; //#29443
    $k[$j++] = _L; //#29444
    if (!$_.usematrix) { //#29444
        bwipp_renlinear(); //#29444
    } else { //#29444
        $j--; //#29444
    } //#29444
    $k[$j++] = Infinity; //#29447
    $k[$j++] = 1; //#29448
    $forall($_.linsbs, function() { //#29448
        var _R = $k[--$j]; //#29448
        var _S = $k[--$j]; //#29448
        var _T = (_S == 0) ? 1 : 0; //#29448
        $k[$j++] = _S; //#29448
        for (var _U = 0, _V = _R; _U < _V; _U++) { //#29448
            $k[$j++] = _T //#29448
        } //#29448
    }); //#29448
    $astore($a($counttomark() - 1)); //#29449
    $_.sep = $k[--$j]; //#29449
    $j -= 2; //#29449
    $puti($_.sep, 0, $a([0, 0, 0])); //#29450
    var _c = $_.sep; //#29451
    $puti($_.sep, _c.length - 9, $a([0, 0, 0, 0, 0, 0, 0, 0, 0])); //#29451
    if (!$_.usematrix) { //#29516
        $$.rmoveto(0, $_.linheight); //#29454
        var _g = $_.sep; //#29456
        var _k = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", _g],
            ["pixx", $_.sep.length],
            ["pixy", 1],
            ["height", 1 / 72],
            ["width", $_.sep.length / 72],
            ["opt", $_.options]
        ]); //#29461
        $k[$j++] = _k; //#29462
        bwipp_renmatrix(); //#29462
        $k[$j++] = $_.comp; //#29465
        $k[$j++] = $_.options; //#29465
        bwipp_gs1_cc(); //#29465
        var _n = $k[--$j]; //#29466
        $$.rmoveto($f(72 - $get(_n, "pixx")), 1); //#29466
        $k[$j++] = _n; //#29467
        bwipp_renmatrix(); //#29467
        $$.restore(); //#29469
    } else { //#29516
        $k[$j++] = 'compsym'; //#29471
        $k[$j++] = $_.comp; //#29471
        $k[$j++] = $_.options; //#29471
        bwipp_gs1_cc(); //#29471
        var _r = $k[--$j]; //#29471
        $_[$k[--$j]] = _r; //#29471
        $_.ccpixs = $get($_.compsym, 'pixs'); //#29472
        $_.ccpixx = $get($_.compsym, 'pixx'); //#29473
        $k[$j++] = Infinity; //#29475
        $k[$j++] = 0; //#29476
        $forall($_.linsbs, function() { //#29476
            var _y = $k[--$j]; //#29476
            var _z = $k[--$j]; //#29476
            var _10 = (_z == 0) ? 1 : 0; //#29476
            $k[$j++] = _z; //#29476
            for (var _11 = 0, _12 = $cvi(_y); _11 < _12; _11++) { //#29476
                $k[$j++] = _10 //#29476
            } //#29476
        }); //#29476
        $_.linpixs = $a(); //#29476
        $k[$j++] = Infinity; //#29478
        $k[$j++] = 0; //#29478
        $aload($_.sep); //#29478
        $_.sep = $a(); //#29478
        $_.linheight = ~~$_.linheight; //#29480
        if ($_.ccpixx == 72) { //#29499
            $k[$j++] = Infinity; //#29483
            for (var _1B = 0, _1C = $_.ccpixx, _1A = $_.ccpixs.length - 1; _1C < 0 ? _1B >= _1A : _1B <= _1A; _1B += _1C) { //#29487
                $_.i = _1B; //#29485
                $k[$j++] = 0; //#29486
                $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#29486
                $k[$j++] = 0; //#29486
                $k[$j++] = 0; //#29486
                $k[$j++] = 0; //#29486
                $k[$j++] = 0; //#29486
                $k[$j++] = 0; //#29486
                $k[$j++] = 0; //#29486
            } //#29486
            $aload($_.sep); //#29488
            for (var _1J = 0, _1K = $_.linheight; _1J < _1K; _1J++) { //#29488
                $aload($_.linpixs); //#29488
            } //#29488
            $_.pixs = $a(); //#29488
            $_.pixx = $_.linpixs.length; //#29490
        } else { //#29499
            $k[$j++] = Infinity; //#29492
            for (var _1R = 0, _1S = $_.ccpixx, _1Q = $_.ccpixs.length - 1; _1S < 0 ? _1R >= _1Q : _1R <= _1Q; _1R += _1S) { //#29496
                $_.i = _1R; //#29494
                $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#29495
                $k[$j++] = 0; //#29495
                $k[$j++] = 0; //#29495
                $k[$j++] = 0; //#29495
                $k[$j++] = 0; //#29495
                $k[$j++] = 0; //#29495
                $k[$j++] = 0; //#29495
            } //#29495
            $k[$j++] = 0; //#29497
            $k[$j++] = 0; //#29497
            $k[$j++] = 0; //#29497
            $k[$j++] = 0; //#29497
            $k[$j++] = 0; //#29497
            $k[$j++] = 0; //#29497
            $k[$j++] = 0; //#29497
            $k[$j++] = 0; //#29497
            $k[$j++] = 0; //#29497
            $aload($_.sep); //#29497
            for (var _1Z = 0, _1a = $_.linheight; _1Z < _1a; _1Z++) { //#29497
                $k[$j++] = 0; //#29497
                $k[$j++] = 0; //#29497
                $k[$j++] = 0; //#29497
                $k[$j++] = 0; //#29497
                $k[$j++] = 0; //#29497
                $k[$j++] = 0; //#29497
                $k[$j++] = 0; //#29497
                $k[$j++] = 0; //#29497
                $k[$j++] = 0; //#29497
                $aload($_.linpixs); //#29497
            } //#29497
            $_.pixs = $a(); //#29497
            $_.pixx = $f($_.ccpixx + 6); //#29499
        } //#29499
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#29502
        var _1m = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#29510
        $k[$j++] = _1m; //#29517
        if (!$_.dontdraw) { //#29517
            $$.save(); //#29514
            bwipp_renmatrix(); //#29515
            $$.restore(); //#29516
        } //#29516
    } //#29516
    $_ = Object.getPrototypeOf($_); //#29520
} //bwipp_databarlimitedcomposite
function bwipp_databarexpandedcomposite() {
    $_ = Object.create($_); //#29552
    $_.dontdraw = false; //#29555
    $_.usematrix = false; //#29556
    $_.parse = false; //#29557
    $_.dontlint = false; //#29558
    $_.lintreqs = true; //#29559
    $k[$j++] = $_; //#29561
    bwipp_processoptions(); //#29561
    $_.options = $k[--$j]; //#29561
    $_.barcode = $k[--$j]; //#29562
    if ($_.dontdraw) { //#29564
        $_.usematrix = true; //#29564
    } //#29564
    $search($_.barcode, "|"); //#29567
    if ($k[--$j]) { //#29572
        $_.linear = $k[--$j]; //#29568
        $j--; //#29569
        $_.comp = $k[--$j]; //#29570
    } else { //#29572
        $j--; //#29572
        $k[$j++] = 'bwipp.missingCompositeComponent#29572'; //#29572
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#29572
        bwipp_raiseerror(); //#29572
    } //#29572
    if (!$_.usematrix) { //#29575
        $$.save(); //#29575
    } //#29575
    $put($_.options, "lintype", "databarexpanded"); //#29577
    $put($_.options, "linkage", true); //#29578
    $put($_.options, "inkspreadv", 0); //#29579
    $put($_.options, "dontdraw", true); //#29580
    $put($_.options, "dontlint", true); //#29581
    var _F = $s($_.linear.length + $_.comp.length); //#29584
    $puti(_F, 0, $_.linear); //#29585
    $puti(_F, $_.linear.length, $_.comp); //#29586
    $k[$j++] = _F; //#29587
    $k[$j++] = 'ai'; //#29587
    bwipp_gs1process(); //#29587
    $j -= 3; //#29587
    $k[$j++] = $_.linear; //#29590
    $k[$j++] = $_.options; //#29590
    bwipp_databarexpanded(); //#29590
    var _L = $k[--$j]; //#29591
    $_.linsbs = $get(_L, "sbs"); //#29591
    $_.linheight = $get($get(_L, "bhs"), 0) * 72; //#29592
    $k[$j++] = _L; //#29593
    if (!$_.usematrix) { //#29593
        bwipp_renlinear(); //#29593
    } else { //#29593
        $j--; //#29593
    } //#29593
    $_.sepfinder = function() {
        $_.fp = $k[--$j]; //#29597
        for (var _U = $_.fp, _T = $f($_.fp + 12); _U <= _T; _U += 1) { //#29610
            $_.i = _U; //#29599
            if ($get($_.bot, $_.i) == 0) { //#29607
                if ($get($_.bot, $_.i - 1) == 1) { //#29604
                    $k[$j++] = 1; //#29602
                } else { //#29604
                    var _e = ($get($_.sep, $_.i - 1) == 0) ? 1 : 0; //#29604
                    $k[$j++] = _e; //#29604
                } //#29604
            } else { //#29607
                $k[$j++] = 0; //#29607
            } //#29607
            $put($_.sep, $_.i, $k[--$j]); //#29609
        } //#29609
    }; //#29609
    $k[$j++] = Infinity; //#29612
    $k[$j++] = 0; //#29613
    $forall($_.linsbs, function() { //#29613
        var _j = $k[--$j]; //#29613
        var _k = $k[--$j]; //#29613
        var _l = (_k == 1) ? 0 : 1; //#29613
        $k[$j++] = _k; //#29613
        for (var _m = 0, _n = _j; _m < _n; _m++) { //#29613
            $k[$j++] = _l //#29613
        } //#29613
    }); //#29613
    $astore($a($counttomark() - 1)); //#29614
    $_.bot = $k[--$j]; //#29614
    $j -= 2; //#29614
    $k[$j++] = Infinity; //#29615
    $forall($_.bot, function() { //#29615
        var _s = $k[--$j]; //#29615
        $k[$j++] = $f(1 - _s); //#29615
    }); //#29615
    $_.sep = $a(); //#29615
    $puti($_.sep, 0, $a([0, 0, 0])); //#29616
    $puti($_.sep, $_.sep.length - 4, $a([0, 0, 0, 0])); //#29617
    $k[$j++] = Infinity; //#29618
    for (var _11 = 18, _10 = $_.bot.length - 13; _11 <= _10; _11 += 98) { //#29619
        $k[$j++] = _11; //#29619
    } //#29619
    for (var _14 = 69, _13 = $_.bot.length - 13; _14 <= _13; _14 += 98) { //#29620
        $k[$j++] = _14; //#29620
    } //#29620
    var _15 = $a(); //#29620
    for (var _16 = 0, _17 = _15.length; _16 < _17; _16++) { //#29621
        $k[$j++] = $get(_15, _16); //#29621
        $_.sepfinder(); //#29621
    } //#29621
    if (!$_.usematrix) { //#29674
        $$.rmoveto(0, $_.linheight); //#29624
        var _1F = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $_.sep],
            ["pixx", $_.sep.length],
            ["pixy", 1],
            ["height", 1 / 72],
            ["width", $_.sep.length / 72],
            ["opt", $_.options]
        ]); //#29631
        $k[$j++] = _1F; //#29632
        bwipp_renmatrix(); //#29632
        $$.rmoveto(1, 1); //#29635
        $k[$j++] = $_.comp; //#29635
        $k[$j++] = $_.options; //#29635
        bwipp_gs1_cc(); //#29635
        bwipp_renmatrix(); //#29635
        $$.restore(); //#29637
    } else { //#29674
        $k[$j++] = 'compsym'; //#29639
        $k[$j++] = $_.comp; //#29639
        $k[$j++] = $_.options; //#29639
        bwipp_gs1_cc(); //#29639
        var _1K = $k[--$j]; //#29639
        $_[$k[--$j]] = _1K; //#29639
        $_.ccpixs = $get($_.compsym, 'pixs'); //#29640
        $_.ccpixx = $get($_.compsym, 'pixx'); //#29641
        $k[$j++] = Infinity; //#29643
        $k[$j++] = 0; //#29644
        $forall($_.linsbs, function() { //#29644
            var _1R = $k[--$j]; //#29644
            var _1S = $k[--$j]; //#29644
            var _1T = (_1S == 0) ? 1 : 0; //#29644
            $k[$j++] = _1S; //#29644
            for (var _1U = 0, _1V = $cvi(_1R); _1U < _1V; _1U++) { //#29644
                $k[$j++] = _1T //#29644
            } //#29644
        }); //#29644
        $_.linpixs = $a(); //#29644
        $k[$j++] = Infinity; //#29646
        $k[$j++] = 0; //#29646
        $aload($_.sep); //#29646
        $_.sep = $a(); //#29646
        $_.linheight = ~~$_.linheight; //#29648
        $_.diff = $f($_.linpixs.length - $_.ccpixx); //#29649
        $k[$j++] = Infinity; //#29650
        for (var _1d = 0, _1e = $f($_.diff - 2); _1d < _1e; _1d++) { //#29650
            $k[$j++] = 0; //#29650
        } //#29650
        $_.ccrpad = $a(); //#29650
        $k[$j++] = Infinity; //#29651
        for (var _1j = 0, _1k = $_.ccpixx, _1i = $_.ccpixs.length - 1; _1k < 0 ? _1j >= _1i : _1j <= _1i; _1j += _1k) { //#29655
            $_.i = _1j; //#29653
            $k[$j++] = 0; //#29654
            $k[$j++] = 0; //#29654
            $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#29654
            $aload($_.ccrpad); //#29654
        } //#29654
        $aload($_.sep); //#29656
        for (var _1s = 0, _1t = $_.linheight; _1s < _1t; _1s++) { //#29656
            $aload($_.linpixs); //#29656
        } //#29656
        $_.pixs = $a(); //#29656
        $_.pixx = $_.linpixs.length; //#29659
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#29660
        var _25 = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#29668
        $k[$j++] = _25; //#29675
        if (!$_.dontdraw) { //#29675
            $$.save(); //#29672
            bwipp_renmatrix(); //#29673
            $$.restore(); //#29674
        } //#29674
    } //#29674
    $_ = Object.getPrototypeOf($_); //#29678
} //bwipp_databarexpandedcomposite
function bwipp_databarexpandedstackedcomposite() {
    $_ = Object.create($_); //#29709
    $_.dontdraw = false; //#29712
    $_.usematrix = false; //#29713
    $_.parse = false; //#29714
    $_.dontlint = false; //#29715
    $_.lintreqs = true; //#29716
    $k[$j++] = $_; //#29718
    bwipp_processoptions(); //#29718
    $_.options = $k[--$j]; //#29718
    $_.barcode = $k[--$j]; //#29719
    if ($_.dontdraw) { //#29721
        $_.usematrix = true; //#29721
    } //#29721
    $search($_.barcode, "|"); //#29724
    if ($k[--$j]) { //#29729
        $_.linear = $k[--$j]; //#29725
        $j--; //#29726
        $_.comp = $k[--$j]; //#29727
    } else { //#29729
        $j--; //#29729
        $k[$j++] = 'bwipp.missingCompositeComponent#29729'; //#29729
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#29729
        bwipp_raiseerror(); //#29729
    } //#29729
    if (!$_.usematrix) { //#29732
        $$.save(); //#29732
    } //#29732
    $put($_.options, "lintype", "databarexpandedstacked"); //#29734
    $put($_.options, "linkage", true); //#29735
    $put($_.options, "inkspreadv", 0); //#29736
    $put($_.options, "dontdraw", true); //#29737
    $put($_.options, "dontlint", true); //#29738
    var _F = $s($_.linear.length + $_.comp.length); //#29741
    $puti(_F, 0, $_.linear); //#29742
    $puti(_F, $_.linear.length, $_.comp); //#29743
    $k[$j++] = _F; //#29744
    $k[$j++] = 'ai'; //#29744
    bwipp_gs1process(); //#29744
    $j -= 3; //#29744
    $k[$j++] = $_.linear; //#29747
    $k[$j++] = $_.options; //#29747
    bwipp_databarexpandedstacked(); //#29747
    var _L = $k[--$j]; //#29748
    $_.bot = $geti($get(_L, "pixs"), 0, $get(_L, "pixx")); //#29748
    $_.linheight = $get(_L, "pixy"); //#29749
    $k[$j++] = _L; //#29750
    if (!$_.usematrix) { //#29750
        bwipp_renmatrix(); //#29750
    } else { //#29750
        $_.linpixs = $get($k[--$j], 'pixs'); //#29750
    } //#29750
    $_.sepfinder = function() {
        $_.fp = $k[--$j]; //#29754
        for (var _X = $_.fp, _W = $f($_.fp + 12); _X <= _W; _X += 1) { //#29767
            $_.i = _X; //#29756
            if ($get($_.bot, $_.i) == 0) { //#29764
                if ($get($_.bot, $_.i - 1) == 1) { //#29761
                    $k[$j++] = 1; //#29759
                } else { //#29761
                    var _h = ($get($_.sep, $_.i - 1) == 0) ? 1 : 0; //#29761
                    $k[$j++] = _h; //#29761
                } //#29761
            } else { //#29764
                $k[$j++] = 0; //#29764
            } //#29764
            $put($_.sep, $_.i, $k[--$j]); //#29766
        } //#29766
    }; //#29766
    $k[$j++] = Infinity; //#29769
    var _l = $_.bot; //#29769
    for (var _m = 0, _n = _l.length; _m < _n; _m++) { //#29769
        $k[$j++] = $f(1 - $get(_l, _m)); //#29769
    } //#29769
    $_.sep = $a(); //#29769
    $puti($_.sep, 0, $a([0, 0, 0, 0])); //#29770
    $puti($_.sep, $_.sep.length - 4, $a([0, 0, 0, 0])); //#29771
    $k[$j++] = Infinity; //#29772
    for (var _x = 19, _w = $_.bot.length - 13; _x <= _w; _x += 98) { //#29773
        $k[$j++] = _x; //#29773
    } //#29773
    for (var _10 = 70, _z = $_.bot.length - 13; _10 <= _z; _10 += 98) { //#29774
        $k[$j++] = _10; //#29774
    } //#29774
    var _11 = $a(); //#29774
    for (var _12 = 0, _13 = _11.length; _12 < _13; _12++) { //#29775
        $k[$j++] = $get(_11, _12); //#29775
        $_.sepfinder(); //#29775
    } //#29775
    if (!$_.usematrix) { //#29822
        $$.rmoveto(0, $_.linheight); //#29777
        var _1B = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $_.sep],
            ["pixx", $_.sep.length],
            ["pixy", 1],
            ["height", 1 / 72],
            ["width", $_.sep.length / 72],
            ["opt", $_.options]
        ]); //#29784
        $k[$j++] = _1B; //#29785
        bwipp_renmatrix(); //#29785
        var _1E = ($get($_.bot, 0) == 0) ? 2 : 0; //#29788
        $$.rmoveto(_1E, 1); //#29788
        $k[$j++] = $_.comp; //#29789
        $k[$j++] = $_.options; //#29789
        bwipp_gs1_cc(); //#29789
        bwipp_renmatrix(); //#29789
        $$.restore(); //#29791
    } else { //#29822
        $k[$j++] = 'compsym'; //#29793
        $k[$j++] = $_.comp; //#29793
        $k[$j++] = $_.options; //#29793
        bwipp_gs1_cc(); //#29793
        var _1J = $k[--$j]; //#29793
        $_[$k[--$j]] = _1J; //#29793
        $_.ccpixs = $get($_.compsym, 'pixs'); //#29794
        $_.ccpixx = $get($_.compsym, 'pixx'); //#29795
        $_.pixx = $_.sep.length; //#29797
        $k[$j++] = Infinity; //#29798
        for (var _1S = 0, _1T = ~~(($f($f($_.pixx - $_.ccpixx) + 1)) / 2); _1S < _1T; _1S++) { //#29798
            $k[$j++] = 0; //#29798
        } //#29798
        $_.cclpad = $a(); //#29798
        $k[$j++] = Infinity; //#29799
        for (var _1X = 0, _1Y = ~~($f($_.pixx - $_.ccpixx) / 2); _1X < _1Y; _1X++) { //#29799
            $k[$j++] = 0; //#29799
        } //#29799
        $_.ccrpad = $a(); //#29799
        $k[$j++] = Infinity; //#29800
        for (var _1d = 0, _1e = $_.ccpixx, _1c = $_.ccpixs.length - 1; _1e < 0 ? _1d >= _1c : _1d <= _1c; _1d += _1e) { //#29804
            $_.i = _1d; //#29802
            $aload($_.cclpad); //#29803
            $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#29803
            $aload($_.ccrpad); //#29803
        } //#29803
        $aload($_.sep); //#29805
        $aload($_.linpixs); //#29805
        $_.pixs = $a(); //#29805
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#29808
        var _1w = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#29816
        $k[$j++] = _1w; //#29823
        if (!$_.dontdraw) { //#29823
            $$.save(); //#29820
            bwipp_renmatrix(); //#29821
            $$.restore(); //#29822
        } //#29822
    } //#29822
    $_ = Object.getPrototypeOf($_); //#29826
} //bwipp_databarexpandedstackedcomposite
function bwipp_gs1_128composite() {
    $_ = Object.create($_); //#29858
    $_.dontdraw = false; //#29861
    $_.usematrix = false; //#29862
    $_.parse = false; //#29863
    $_.dontlint = false; //#29864
    $_.lintreqs = true; //#29865
    $k[$j++] = $_; //#29867
    bwipp_processoptions(); //#29867
    $_.options = $k[--$j]; //#29867
    $_.barcode = $k[--$j]; //#29868
    if ($_.dontdraw) { //#29870
        $_.usematrix = true; //#29870
    } //#29870
    $search($_.barcode, "|"); //#29873
    if ($k[--$j]) { //#29878
        $_.linear = $k[--$j]; //#29874
        $j--; //#29875
        $_.comp = $k[--$j]; //#29876
    } else { //#29878
        $j--; //#29878
        $k[$j++] = 'bwipp.missingCompositeComponent#29878'; //#29878
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#29878
        bwipp_raiseerror(); //#29878
    } //#29878
    if (!$_.usematrix) { //#29881
        $$.save(); //#29881
    } //#29881
    $put($_.options, "inkspreadv", 0); //#29883
    $put($_.options, "dontdraw", true); //#29884
    $put($_.options, "dontlint", true); //#29885
    var _D = $s($_.linear.length + $_.comp.length); //#29888
    $puti(_D, 0, $_.linear); //#29889
    $puti(_D, $_.linear.length, $_.comp); //#29890
    $k[$j++] = _D; //#29891
    $k[$j++] = 'ai'; //#29891
    bwipp_gs1process(); //#29891
    $j -= 3; //#29891
    $put($_.options, "linkagea", true); //#29894
    $k[$j++] = $_.linear; //#29895
    $k[$j++] = Infinity; //#29895
    $forall($_.options); //#29895
    var _K = $d(); //#29895
    $k[$j++] = _K; //#29895
    bwipp_gs1_128(); //#29895
    var _M = $get($k[--$j], "sbs"); //#29896
    $k[$j++] = 0; //#29896
    $forall(_M, function() { //#29896
        var _N = $k[--$j]; //#29896
        var _O = $k[--$j]; //#29896
        $k[$j++] = $f(_O + _N); //#29896
    }); //#29896
    $_.linwidth = $k[--$j]; //#29896
    $put($_.options, "lintype", "gs1-128"); //#29899
    $put($_.options, "linwidth", $_.linwidth); //#29900
    $k[$j++] = $_.comp; //#29901
    $k[$j++] = Infinity; //#29901
    $forall($_.options); //#29901
    var _V = $d(); //#29901
    $k[$j++] = _V; //#29901
    bwipp_gs1_cc(); //#29901
    $_.compsym = $k[--$j]; //#29901
    if ($get($_.compsym, "pixx") == 99) { //#29902
        $k[$j++] = "a"; //#29902
    } else { //#29902
        $k[$j++] = "c"; //#29902
    } //#29902
    $_.linktype = $k[--$j]; //#29902
    if ($eq($_.linktype, "a")) { //#29910
        $put($_.options, "linkagea", true); //#29906
        $put($_.options, "linkagec", false); //#29907
    } else { //#29910
        $put($_.options, "linkagea", false); //#29909
        $put($_.options, "linkagec", true); //#29910
    } //#29910
    $k[$j++] = $_.linear; //#29912
    $k[$j++] = Infinity; //#29912
    var _g = $_.options; //#29912
    $forall(_g); //#29912
    var _h = $d(); //#29912
    $k[$j++] = _h; //#29912
    bwipp_gs1_128(); //#29912
    var _i = $k[--$j]; //#29913
    $_.linsbs = $get(_i, "sbs"); //#29913
    $_.linheight = $get($get(_i, "bhs"), 0) * 72; //#29914
    $k[$j++] = _i; //#29915
    if (!$_.usematrix) { //#29915
        bwipp_renlinear(); //#29915
    } else { //#29915
        $j--; //#29915
    } //#29915
    $k[$j++] = Infinity; //#29918
    $k[$j++] = 1; //#29919
    $forall($_.linsbs, function() { //#29919
        var _o = $k[--$j]; //#29919
        var _p = $k[--$j]; //#29919
        var _q = (_p == 0) ? 1 : 0; //#29919
        $k[$j++] = _p; //#29919
        for (var _r = 0, _s = _o; _r < _s; _r++) { //#29919
            $k[$j++] = _q //#29919
        } //#29919
    }); //#29919
    $astore($a($counttomark() - 1)); //#29920
    $_.sep = $k[--$j]; //#29920
    $j -= 2; //#29920
    if (!$_.usematrix) { //#29931
        $$.rmoveto(0, $_.linheight); //#29922
        var _12 = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $_.sep],
            ["pixx", $_.sep.length],
            ["pixy", 1],
            ["height", 1 / 72],
            ["width", $_.sep.length / 72],
            ["opt", $_.options]
        ]); //#29929
        $k[$j++] = _12; //#29930
        bwipp_renmatrix(); //#29930
    } //#29930
    if ($eq($_.linktype, "a")) { //#29939
        $_.s = ~~($f($_.linwidth - 2) / 11); //#29935
        $_.p = ~~(($_.s - 9) / 2); //#29936
        $k[$j++] = 'x'; //#29937
        $k[$j++] = ((($_.s - $_.p) - 1) * 11) + 10; //#29937
        if ($_.p == 0) { //#29937
            var _19 = $k[--$j]; //#29937
            $k[$j++] = $f(_19 + 2); //#29937
        } //#29937
        var _1A = $k[--$j]; //#29937
        $_[$k[--$j]] = $f(_1A - 99); //#29937
    } else { //#29939
        $_.x = -7; //#29939
    } //#29939
    if (!$_.usematrix) { //#29996
        $$.rmoveto($_.x, 1); //#29943
        $k[$j++] = $_.compsym; //#29943
        bwipp_renmatrix(); //#29943
        $$.restore(); //#29945
    } else { //#29996
        $_.ccpixs = $get($_.compsym, 'pixs'); //#29947
        $_.ccpixx = $get($_.compsym, 'pixx'); //#29948
        $k[$j++] = Infinity; //#29950
        $forall($_.linsbs, function() { //#29951
            var _1K = $k[--$j]; //#29951
            var _1L = $k[--$j]; //#29951
            var _1M = (_1L == 1) ? 0 : 1; //#29951
            $k[$j++] = _1L; //#29951
            for (var _1N = 0, _1O = _1K; _1N < _1O; _1N++) { //#29951
                $k[$j++] = _1M //#29951
            } //#29951
        }); //#29951
        $_.linpixs = $a(); //#29951
        if ($_.x > 0) { //#29959
            $k[$j++] = Infinity; //#29955
            for (var _1S = 0, _1T = $_.x; _1S < _1T; _1S++) { //#29955
                $k[$j++] = 0; //#29955
            } //#29955
            $_.cclpad = $a(); //#29955
            $_.linlpad = $a(0); //#29956
        } else { //#29959
            $_.cclpad = $a(0); //#29958
            $k[$j++] = Infinity; //#29959
            for (var _1Y = 0, _1Z = -$_.x; _1Y < _1Z; _1Y++) { //#29959
                $k[$j++] = 0; //#29959
            } //#29959
            $_.linlpad = $a(); //#29959
        } //#29959
        $_.diff = $f($_.linwidth - $f($_.ccpixx + $_.x)); //#29962
        if ($_.diff > 0) { //#29968
            $k[$j++] = Infinity; //#29964
            for (var _1g = 0, _1h = $_.diff; _1g < _1h; _1g++) { //#29964
                $k[$j++] = 0; //#29964
            } //#29964
            $_.ccrpad = $a(); //#29964
            $_.linrpad = $a(0); //#29965
        } else { //#29968
            $_.ccrpad = $a(0); //#29967
            $k[$j++] = Infinity; //#29968
            for (var _1m = 0, _1n = -$_.diff; _1m < _1n; _1m++) { //#29968
                $k[$j++] = 0; //#29968
            } //#29968
            $_.linrpad = $a(); //#29968
        } //#29968
        $_.linheight = ~~$_.linheight; //#29971
        $k[$j++] = Infinity; //#29972
        for (var _1t = 0, _1u = $_.ccpixx, _1s = $_.ccpixs.length - 1; _1u < 0 ? _1t >= _1s : _1t <= _1s; _1t += _1u) { //#29976
            $_.i = _1t; //#29974
            $aload($_.cclpad); //#29975
            $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#29975
            $aload($_.ccrpad); //#29975
        } //#29975
        $aload($_.linlpad); //#29977
        $aload($_.sep); //#29977
        $aload($_.linrpad); //#29977
        for (var _25 = 0, _26 = $_.linheight; _25 < _26; _25++) { //#29978
            $aload($_.linlpad); //#29978
            $aload($_.linpixs); //#29978
            $aload($_.linrpad); //#29978
        } //#29978
        $_.pixs = $a(); //#29978
        $_.pixx = $f($f($_.cclpad.length + $_.ccpixx) + $_.ccrpad.length); //#29981
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#29982
        var _2M = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#29990
        $k[$j++] = _2M; //#29997
        if (!$_.dontdraw) { //#29997
            $$.save(); //#29994
            bwipp_renmatrix(); //#29995
            $$.restore(); //#29996
        } //#29996
    } //#29996
    $_ = Object.getPrototypeOf($_); //#30000
} //bwipp_gs1_128composite
function bwipp_gs1datamatrix() {
    $_ = Object.create($_); //#30030
    $_.dontdraw = false; //#30033
    $_.parse = false; //#30034
    $_.dontlint = false; //#30035
    $_.lintreqs = true; //#30036
    $_.gssep = false; //#30037
    $k[$j++] = $_; //#30039
    bwipp_processoptions(); //#30039
    $_.options = $k[--$j]; //#30039
    $_.barcode = $k[--$j]; //#30040
    $k[$j++] = $_.barcode; //#30042
    $k[$j++] = 'ai'; //#30042
    bwipp_gs1process(); //#30042
    $_.fncs = $k[--$j]; //#30043
    $_.vals = $k[--$j]; //#30044
    $_.ais = $k[--$j]; //#30045
    $_.fnc1 = -1; //#30048
    $_.dmtx = $a([$_.fnc1]); //#30049
    for (var _A = 0, _9 = $_.ais.length - 1; _A <= _9; _A += 1) { //#30065
        $_.i = _A; //#30051
        $_.ai = $get($_.ais, $_.i); //#30052
        $_.val = $get($_.vals, $_.i); //#30053
        var _K = $a(($_.dmtx.length + $_.ai.length) + $_.val.length); //#30054
        $puti(_K, 0, $_.dmtx); //#30055
        $k[$j++] = _K; //#30056
        $k[$j++] = _K; //#30056
        $k[$j++] = $_.dmtx.length; //#30056
        $k[$j++] = $_.ai; //#30056
        $k[$j++] = Infinity; //#30056
        var _O = $k[--$j]; //#30056
        var _P = $k[--$j]; //#30056
        $k[$j++] = _O; //#30056
        $forall(_P); //#30056
        var _Q = $a(); //#30056
        var _R = $k[--$j]; //#30056
        $puti($k[--$j], _R, _Q); //#30056
        var _T = $k[--$j]; //#30057
        $k[$j++] = _T; //#30057
        $k[$j++] = _T; //#30057
        $k[$j++] = $_.dmtx.length + $_.ai.length; //#30057
        $k[$j++] = $_.val; //#30057
        $k[$j++] = Infinity; //#30057
        var _X = $k[--$j]; //#30057
        var _Y = $k[--$j]; //#30057
        $k[$j++] = _X; //#30057
        $forall(_Y); //#30057
        var _Z = $a(); //#30057
        var _a = $k[--$j]; //#30057
        $puti($k[--$j], _a, _Z); //#30057
        $_.dmtx = $k[--$j]; //#30058
        if (($_.i != ($_.ais.length - 1)) && $get($_.fncs, $_.i)) { //#30064
            var _j = $a($_.dmtx.length + 1); //#30060
            $puti(_j, 0, $_.dmtx); //#30061
            $k[$j++] = _j; //#30062
            $k[$j++] = _j; //#30062
            $k[$j++] = $_.dmtx.length; //#30062
            if ($_.gssep) { //#30062
                $k[$j++] = 29; //#30062
            } else { //#30062
                $k[$j++] = $_.fnc1; //#30062
            } //#30062
            var _o = $k[--$j]; //#30062
            var _p = $k[--$j]; //#30062
            $put($k[--$j], _p, _o); //#30062
            $_.dmtx = $k[--$j]; //#30063
        } //#30063
    } //#30063
    $_.barcode = $s(($_.dmtx.length + 1) * 5); //#30068
    $_.i = 0; //#30069
    $_.j = 0; //#30069
    for (;;) { //#30079
        if ($_.i == $_.dmtx.length) { //#30070
            break; //#30070
        } //#30070
        var _y = $get($_.dmtx, $_.i); //#30071
        $k[$j++] = _y; //#30076
        if (_y == $_.fnc1) { //#30075
            $j--; //#30072
            $puti($_.barcode, $_.j, "^FNC1"); //#30072
            $_.j = $_.j + 4; //#30073
        } else { //#30075
            $put($_.barcode, $_.j, $k[--$j]); //#30075
        } //#30075
        $_.i = $_.i + 1; //#30077
        $_.j = $_.j + 1; //#30078
    } //#30078
    $_.barcode = $geti($_.barcode, 0, $_.j); //#30080
    delete $_.options["parse"]; //#30083
    $put($_.options, "dontdraw", true); //#30084
    $put($_.options, "parsefnc", true); //#30085
    $k[$j++] = 'args'; //#30086
    $k[$j++] = $_.barcode; //#30086
    $k[$j++] = $_.options; //#30086
    bwipp_datamatrix(); //#30086
    var _1G = $k[--$j]; //#30086
    $_[$k[--$j]] = _1G; //#30086
    $put($_.args, "opt", $_.options); //#30088
    $k[$j++] = $_.args; //#30091
    if (!$_.dontdraw) { //#30091
        bwipp_renmatrix(); //#30091
    } //#30091
    $_ = Object.getPrototypeOf($_); //#30093
} //bwipp_gs1datamatrix
function bwipp_gs1datamatrixrectangular() {
    $_ = Object.create($_); //#30123
    $_.parse = false; //#30126
    $_.dontlint = false; //#30127
    $_.lintreqs = true; //#30128
    $_.dontdraw = false; //#30129
    $_.gssep = false; //#30130
    $k[$j++] = $_; //#30132
    bwipp_processoptions(); //#30132
    $_.options = $k[--$j]; //#30132
    $_.barcode = $k[--$j]; //#30133
    $k[$j++] = $_.barcode; //#30135
    $k[$j++] = 'ai'; //#30135
    bwipp_gs1process(); //#30135
    $_.fncs = $k[--$j]; //#30136
    $_.vals = $k[--$j]; //#30137
    $_.ais = $k[--$j]; //#30138
    $_.fnc1 = -1; //#30141
    $_.dmtx = $a([$_.fnc1]); //#30142
    for (var _A = 0, _9 = $_.ais.length - 1; _A <= _9; _A += 1) { //#30158
        $_.i = _A; //#30144
        $_.ai = $get($_.ais, $_.i); //#30145
        $_.val = $get($_.vals, $_.i); //#30146
        var _K = $a(($_.dmtx.length + $_.ai.length) + $_.val.length); //#30147
        $puti(_K, 0, $_.dmtx); //#30148
        $k[$j++] = _K; //#30149
        $k[$j++] = _K; //#30149
        $k[$j++] = $_.dmtx.length; //#30149
        $k[$j++] = $_.ai; //#30149
        $k[$j++] = Infinity; //#30149
        var _O = $k[--$j]; //#30149
        var _P = $k[--$j]; //#30149
        $k[$j++] = _O; //#30149
        $forall(_P); //#30149
        var _Q = $a(); //#30149
        var _R = $k[--$j]; //#30149
        $puti($k[--$j], _R, _Q); //#30149
        var _T = $k[--$j]; //#30150
        $k[$j++] = _T; //#30150
        $k[$j++] = _T; //#30150
        $k[$j++] = $_.dmtx.length + $_.ai.length; //#30150
        $k[$j++] = $_.val; //#30150
        $k[$j++] = Infinity; //#30150
        var _X = $k[--$j]; //#30150
        var _Y = $k[--$j]; //#30150
        $k[$j++] = _X; //#30150
        $forall(_Y); //#30150
        var _Z = $a(); //#30150
        var _a = $k[--$j]; //#30150
        $puti($k[--$j], _a, _Z); //#30150
        $_.dmtx = $k[--$j]; //#30151
        if (($_.i != ($_.ais.length - 1)) && $get($_.fncs, $_.i)) { //#30157
            var _j = $a($_.dmtx.length + 1); //#30153
            $puti(_j, 0, $_.dmtx); //#30154
            $k[$j++] = _j; //#30155
            $k[$j++] = _j; //#30155
            $k[$j++] = $_.dmtx.length; //#30155
            if ($_.gssep) { //#30155
                $k[$j++] = 29; //#30155
            } else { //#30155
                $k[$j++] = $_.fnc1; //#30155
            } //#30155
            var _o = $k[--$j]; //#30155
            var _p = $k[--$j]; //#30155
            $put($k[--$j], _p, _o); //#30155
            $_.dmtx = $k[--$j]; //#30156
        } //#30156
    } //#30156
    $_.barcode = $s(($_.dmtx.length + 1) * 5); //#30161
    $_.i = 0; //#30162
    $_.j = 0; //#30162
    for (;;) { //#30172
        if ($_.i == $_.dmtx.length) { //#30163
            break; //#30163
        } //#30163
        var _y = $get($_.dmtx, $_.i); //#30164
        $k[$j++] = _y; //#30169
        if (_y == $_.fnc1) { //#30168
            $j--; //#30165
            $puti($_.barcode, $_.j, "^FNC1"); //#30165
            $_.j = $_.j + 4; //#30166
        } else { //#30168
            $put($_.barcode, $_.j, $k[--$j]); //#30168
        } //#30168
        $_.i = $_.i + 1; //#30170
        $_.j = $_.j + 1; //#30171
    } //#30171
    $_.barcode = $geti($_.barcode, 0, $_.j); //#30173
    delete $_.options["parse"]; //#30176
    $put($_.options, "dontdraw", true); //#30177
    $put($_.options, "parsefnc", true); //#30178
    $put($_.options, "format", "rectangle"); //#30179
    $k[$j++] = 'args'; //#30180
    $k[$j++] = $_.barcode; //#30180
    $k[$j++] = $_.options; //#30180
    bwipp_datamatrix(); //#30180
    var _1H = $k[--$j]; //#30180
    $_[$k[--$j]] = _1H; //#30180
    $put($_.args, "opt", $_.options); //#30182
    $k[$j++] = $_.args; //#30185
    if (!$_.dontdraw) { //#30185
        bwipp_renmatrix(); //#30185
    } //#30185
    $_ = Object.getPrototypeOf($_); //#30187
} //bwipp_gs1datamatrixrectangular
function bwipp_gs1dldatamatrix() {
    $_ = Object.create($_); //#30217
    $_.parse = false; //#30220
    $_.dontlint = false; //#30221
    $_.lintreqs = true; //#30222
    $_.dontdraw = false; //#30223
    $k[$j++] = $_; //#30225
    bwipp_processoptions(); //#30225
    $_.options = $k[--$j]; //#30225
    $_.barcode = $k[--$j]; //#30226
    var _3 = new Map([
        ["parse", $_.parse],
        ["parseonly", true],
        ["parsefnc", false]
    ]); //#30232
    $_.fncvals = _3; //#30233
    $k[$j++] = 'barcode'; //#30234
    $k[$j++] = $_.barcode; //#30234
    $k[$j++] = $_.fncvals; //#30234
    bwipp_parseinput(); //#30234
    var _6 = $k[--$j]; //#30234
    $_[$k[--$j]] = _6; //#30234
    $k[$j++] = $_.barcode; //#30236
    $k[$j++] = 'dl'; //#30236
    bwipp_gs1process(); //#30236
    $j -= 3; //#30236
    delete $_.options["parse"]; //#30239
    $put($_.options, "dontdraw", true); //#30240
    $k[$j++] = 'args'; //#30241
    $k[$j++] = $_.barcode; //#30241
    $k[$j++] = $_.options; //#30241
    bwipp_datamatrix(); //#30241
    var _D = $k[--$j]; //#30241
    $_[$k[--$j]] = _D; //#30241
    $put($_.args, "opt", $_.options); //#30243
    $k[$j++] = $_.args; //#30246
    if (!$_.dontdraw) { //#30246
        bwipp_renmatrix(); //#30246
    } //#30246
    $_ = Object.getPrototypeOf($_); //#30248
} //bwipp_gs1dldatamatrix
function bwipp_gs1qrcode() {
    $_ = Object.create($_); //#30277
    $_.parse = false; //#30280
    $_.dontlint = false; //#30281
    $_.lintreqs = true; //#30282
    $_.dontdraw = false; //#30283
    $k[$j++] = $_; //#30285
    bwipp_processoptions(); //#30285
    $_.options = $k[--$j]; //#30285
    $_.barcode = $k[--$j]; //#30286
    $k[$j++] = $_.barcode; //#30288
    $k[$j++] = 'ai'; //#30288
    bwipp_gs1process(); //#30288
    $_.fncs = $k[--$j]; //#30289
    $_.vals = $k[--$j]; //#30290
    $_.ais = $k[--$j]; //#30291
    $_.fnc1 = -1; //#30294
    $_.qrc = $a([$_.fnc1]); //#30295
    for (var _A = 0, _9 = $_.ais.length - 1; _A <= _9; _A += 1) { //#30311
        $_.i = _A; //#30297
        $_.ai = $get($_.ais, $_.i); //#30298
        $_.val = $get($_.vals, $_.i); //#30299
        var _K = $a(($_.qrc.length + $_.ai.length) + $_.val.length); //#30300
        $puti(_K, 0, $_.qrc); //#30301
        $k[$j++] = _K; //#30302
        $k[$j++] = _K; //#30302
        $k[$j++] = $_.qrc.length; //#30302
        $k[$j++] = $_.ai; //#30302
        $k[$j++] = Infinity; //#30302
        var _O = $k[--$j]; //#30302
        var _P = $k[--$j]; //#30302
        $k[$j++] = _O; //#30302
        $forall(_P); //#30302
        var _Q = $a(); //#30302
        var _R = $k[--$j]; //#30302
        $puti($k[--$j], _R, _Q); //#30302
        var _T = $k[--$j]; //#30303
        $k[$j++] = _T; //#30303
        $k[$j++] = _T; //#30303
        $k[$j++] = $_.qrc.length + $_.ai.length; //#30303
        $k[$j++] = $_.val; //#30303
        $k[$j++] = Infinity; //#30303
        var _X = $k[--$j]; //#30303
        var _Y = $k[--$j]; //#30303
        $k[$j++] = _X; //#30303
        $forall(_Y); //#30303
        var _Z = $a(); //#30303
        var _a = $k[--$j]; //#30303
        $puti($k[--$j], _a, _Z); //#30303
        $_.qrc = $k[--$j]; //#30304
        if (($_.i != ($_.ais.length - 1)) && $get($_.fncs, $_.i)) { //#30310
            var _j = $a($_.qrc.length + 1); //#30306
            $puti(_j, 0, $_.qrc); //#30307
            $put(_j, $_.qrc.length, $_.fnc1); //#30308
            $_.qrc = _j; //#30309
        } //#30309
    } //#30309
    $_.barcode = $s(($_.qrc.length + 1) * 5); //#30314
    $_.i = 0; //#30315
    $_.j = 0; //#30315
    for (;;) { //#30325
        if ($_.i == $_.qrc.length) { //#30316
            break; //#30316
        } //#30316
        var _t = $get($_.qrc, $_.i); //#30317
        $k[$j++] = _t; //#30322
        if (_t == $_.fnc1) { //#30321
            $j--; //#30318
            $puti($_.barcode, $_.j, "^FNC1"); //#30318
            $_.j = $_.j + 4; //#30319
        } else { //#30321
            $put($_.barcode, $_.j, $k[--$j]); //#30321
        } //#30321
        $_.i = $_.i + 1; //#30323
        $_.j = $_.j + 1; //#30324
    } //#30324
    $_.barcode = $geti($_.barcode, 0, $_.j); //#30326
    delete $_.options["parse"]; //#30329
    $put($_.options, "dontdraw", true); //#30330
    $put($_.options, "parsefnc", true); //#30331
    $k[$j++] = 'args'; //#30332
    $k[$j++] = $_.barcode; //#30332
    $k[$j++] = $_.options; //#30332
    bwipp_qrcode(); //#30332
    var _1B = $k[--$j]; //#30332
    $_[$k[--$j]] = _1B; //#30332
    $put($_.args, "opt", $_.options); //#30334
    $k[$j++] = $_.args; //#30337
    if (!$_.dontdraw) { //#30337
        bwipp_renmatrix(); //#30337
    } //#30337
    $_ = Object.getPrototypeOf($_); //#30339
} //bwipp_gs1qrcode
function bwipp_gs1dlqrcode() {
    $_ = Object.create($_); //#30369
    $_.parse = false; //#30372
    $_.dontlint = false; //#30373
    $_.lintreqs = true; //#30374
    $_.dontdraw = false; //#30375
    $k[$j++] = $_; //#30377
    bwipp_processoptions(); //#30377
    $_.options = $k[--$j]; //#30377
    $_.barcode = $k[--$j]; //#30378
    var _3 = new Map([
        ["parse", $_.parse],
        ["parseonly", true],
        ["parsefnc", false]
    ]); //#30384
    $_.fncvals = _3; //#30385
    $k[$j++] = 'barcode'; //#30386
    $k[$j++] = $_.barcode; //#30386
    $k[$j++] = $_.fncvals; //#30386
    bwipp_parseinput(); //#30386
    var _6 = $k[--$j]; //#30386
    $_[$k[--$j]] = _6; //#30386
    $k[$j++] = $_.barcode; //#30388
    $k[$j++] = 'dl'; //#30388
    bwipp_gs1process(); //#30388
    $j -= 3; //#30388
    delete $_.options["parse"]; //#30391
    $put($_.options, "dontdraw", true); //#30392
    $k[$j++] = 'args'; //#30393
    $k[$j++] = $_.barcode; //#30393
    $k[$j++] = $_.options; //#30393
    bwipp_qrcode(); //#30393
    var _D = $k[--$j]; //#30393
    $_[$k[--$j]] = _D; //#30393
    $put($_.args, "opt", $_.options); //#30395
    $k[$j++] = $_.args; //#30398
    if (!$_.dontdraw) { //#30398
        bwipp_renmatrix(); //#30398
    } //#30398
    $_ = Object.getPrototypeOf($_); //#30400
} //bwipp_gs1dlqrcode
function bwipp_gs1dotcode() {
    $_ = Object.create($_); //#30430
    $_.dontdraw = false; //#30433
    $_.parse = false; //#30434
    $_.dontlint = false; //#30435
    $_.lintreqs = true; //#30436
    $k[$j++] = $_; //#30438
    bwipp_processoptions(); //#30438
    $_.options = $k[--$j]; //#30438
    $_.barcode = $k[--$j]; //#30439
    $k[$j++] = $_.barcode; //#30441
    $k[$j++] = 'ai'; //#30441
    bwipp_gs1process(); //#30441
    $_.fncs = $k[--$j]; //#30442
    $_.vals = $k[--$j]; //#30443
    $_.ais = $k[--$j]; //#30444
    $_.fnc1 = -1; //#30447
    $_.dmtx = $a([$_.fnc1]); //#30448
    for (var _A = 0, _9 = $_.ais.length - 1; _A <= _9; _A += 1) { //#30464
        $_.i = _A; //#30450
        $_.ai = $get($_.ais, $_.i); //#30451
        $_.val = $get($_.vals, $_.i); //#30452
        var _K = $a(($_.dmtx.length + $_.ai.length) + $_.val.length); //#30453
        $puti(_K, 0, $_.dmtx); //#30454
        $k[$j++] = _K; //#30455
        $k[$j++] = _K; //#30455
        $k[$j++] = $_.dmtx.length; //#30455
        $k[$j++] = $_.ai; //#30455
        $k[$j++] = Infinity; //#30455
        var _O = $k[--$j]; //#30455
        var _P = $k[--$j]; //#30455
        $k[$j++] = _O; //#30455
        $forall(_P); //#30455
        var _Q = $a(); //#30455
        var _R = $k[--$j]; //#30455
        $puti($k[--$j], _R, _Q); //#30455
        var _T = $k[--$j]; //#30456
        $k[$j++] = _T; //#30456
        $k[$j++] = _T; //#30456
        $k[$j++] = $_.dmtx.length + $_.ai.length; //#30456
        $k[$j++] = $_.val; //#30456
        $k[$j++] = Infinity; //#30456
        var _X = $k[--$j]; //#30456
        var _Y = $k[--$j]; //#30456
        $k[$j++] = _X; //#30456
        $forall(_Y); //#30456
        var _Z = $a(); //#30456
        var _a = $k[--$j]; //#30456
        $puti($k[--$j], _a, _Z); //#30456
        $_.dmtx = $k[--$j]; //#30457
        if (($_.i != ($_.ais.length - 1)) && $get($_.fncs, $_.i)) { //#30463
            var _j = $a($_.dmtx.length + 1); //#30459
            $puti(_j, 0, $_.dmtx); //#30460
            $put(_j, $_.dmtx.length, $_.fnc1); //#30461
            $_.dmtx = _j; //#30462
        } //#30462
    } //#30462
    $_.barcode = $s(($_.dmtx.length + 1) * 5); //#30467
    $_.i = 0; //#30468
    $_.j = 0; //#30468
    for (;;) { //#30478
        if ($_.i == $_.dmtx.length) { //#30469
            break; //#30469
        } //#30469
        var _t = $get($_.dmtx, $_.i); //#30470
        $k[$j++] = _t; //#30475
        if (_t == $_.fnc1) { //#30474
            $j--; //#30471
            $puti($_.barcode, $_.j, "^FNC1"); //#30471
            $_.j = $_.j + 4; //#30472
        } else { //#30474
            $put($_.barcode, $_.j, $k[--$j]); //#30474
        } //#30474
        $_.i = $_.i + 1; //#30476
        $_.j = $_.j + 1; //#30477
    } //#30477
    $_.barcode = $geti($_.barcode, 0, $_.j); //#30479
    delete $_.options["parse"]; //#30482
    $put($_.options, "dontdraw", true); //#30483
    $put($_.options, "parsefnc", true); //#30484
    $k[$j++] = 'args'; //#30485
    $k[$j++] = $_.barcode; //#30485
    $k[$j++] = $_.options; //#30485
    bwipp_dotcode(); //#30485
    var _1B = $k[--$j]; //#30485
    $_[$k[--$j]] = _1B; //#30485
    $put($_.args, "opt", $_.options); //#30487
    $k[$j++] = $_.args; //#30490
    if (!$_.dontdraw) { //#30490
        bwipp_renmatrix(); //#30490
    } //#30490
    $_ = Object.getPrototypeOf($_); //#30492
} //bwipp_gs1dotcode
function bwipp_hibccode39() {
    $_ = Object.create($_); //#30523
    $_.dontdraw = false; //#30526
    $_.textfont = "OCR-B"; //#30527
    $_.textsize = 10; //#30528
    $_.textyoffset = -8; //#30529
    $_.textxoffset = 0; //#30530
    $_.validatecheck = false; //#30531
    $k[$j++] = $_; //#30533
    bwipp_processoptions(); //#30533
    $_.options = $k[--$j]; //#30533
    $_.barcode = $k[--$j]; //#30534
    if ($eq($_.barcode, "")) { //#30538
        $k[$j++] = 'bwipp.hibccode39emptyData#30537'; //#30537
        $k[$j++] = "The data must not be empty"; //#30537
        bwipp_raiseerror(); //#30537
    } //#30537
    bwipp_loadctx(bwipp_hibccode39) //#30540
    if (!bwipp_hibccode39.__30547__) { //#30547
        $_ = Object.create($_); //#30547
        $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#30544
        $_.charvals = new Map; //#30545
        for (var _3 = 0; _3 <= 42; _3 += 1) { //#30546
            $put($_.charvals, $geti($_.barchars, _3, 1), _3); //#30546
        } //#30546
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_hibccode39.$ctx[id] = $_[id]); //#30546
        bwipp_hibccode39.__30547__ = 1; //#30546
        $_ = Object.getPrototypeOf($_); //#30546
    } //#30546
    for (var _A = 0, _9 = $_.barcode.length - 1; _A <= _9; _A += 1) { //#30554
        var _E = $get($_.charvals, $geti($_.barcode, _A, 1)) !== undefined; //#30551
        if (!_E) { //#30553
            $k[$j++] = 'bwipp.hibccode39badCharacter#30552'; //#30552
            $k[$j++] = "HIBC Code 39 must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#30552
            bwipp_raiseerror(); //#30552
        } //#30552
    } //#30552
    $k[$j++] = 'barlen'; //#30556
    $k[$j++] = $_.barcode.length; //#30556
    if ($_.validatecheck) { //#30556
        var _H = $k[--$j]; //#30556
        $k[$j++] = $f(_H - 1); //#30556
    } //#30556
    var _I = $k[--$j]; //#30556
    $_[$k[--$j]] = _I; //#30556
    $_.checksum = 41; //#30558
    for (var _M = 0, _L = $f($_.barlen - 1); _M <= _L; _M += 1) { //#30562
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _M, 1)) + $_.checksum); //#30561
    } //#30561
    $_.checksum = $_.checksum % 43; //#30563
    if ($_.validatecheck) { //#30569
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#30567
            $k[$j++] = 'bwipp.hibccode39badCheckDigit#30566'; //#30566
            $k[$j++] = "Incorrect HIBC Code 39 check digit provided"; //#30566
            bwipp_raiseerror(); //#30566
        } //#30566
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#30568
    } //#30568
    var _e = $s($f($_.barlen + 2)); //#30571
    $puti(_e, 1, $_.barcode); //#30571
    $_.barcode = _e; //#30571
    $put($_.barcode, 0, 43); //#30572
    $put($_.barcode, $f($_.barlen + 1), $get($_.barchars, $_.checksum)); //#30573
    $_.text = $s($f($_.barlen + 4)); //#30575
    $put($_.text, 0, 42); //#30576
    $puti($_.text, 1, $_.barcode); //#30577
    var _v = $get($_.barcode, $f($_.barlen + 1)); //#30578
    $k[$j++] = $_.text; //#30578
    $k[$j++] = $f($_.barlen + 2); //#30578
    $k[$j++] = _v; //#30578
    if (_v == 32) { //#30578
        $j--; //#30578
        $k[$j++] = 95; //#30578
    } //#30578
    var _w = $k[--$j]; //#30578
    var _x = $k[--$j]; //#30578
    $put($k[--$j], _x, _w); //#30578
    $put($_.text, $f($_.barlen + 3), 42); //#30579
    $put($_.options, "dontdraw", true); //#30582
    $put($_.options, "includecheck", false); //#30583
    $put($_.options, "validatecheck", false); //#30584
    $k[$j++] = 'args'; //#30585
    $k[$j++] = $_.barcode; //#30585
    $k[$j++] = $_.options; //#30585
    bwipp_code39(); //#30585
    var _16 = $k[--$j]; //#30585
    $_[$k[--$j]] = _16; //#30585
    $put($_.args, "txt", $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])])); //#30587
    $put($_.args, "textxalign", "center"); //#30588
    $put($_.args, "opt", $_.options); //#30589
    $k[$j++] = $_.args; //#30592
    if (!$_.dontdraw) { //#30592
        bwipp_renlinear(); //#30592
    } //#30592
    $_ = Object.getPrototypeOf($_); //#30594
    $_ = Object.getPrototypeOf($_); //#30596
} //bwipp_hibccode39
function bwipp_hibccode128() {
    $_ = Object.create($_); //#30627
    $_.dontdraw = false; //#30630
    $_.textfont = "OCR-B"; //#30631
    $_.textsize = 10; //#30632
    $_.textyoffset = -8; //#30633
    $_.textxoffset = 0; //#30634
    $_.validatecheck = false; //#30635
    $k[$j++] = $_; //#30637
    bwipp_processoptions(); //#30637
    $_.options = $k[--$j]; //#30637
    $_.barcode = $k[--$j]; //#30638
    if ($eq($_.barcode, "")) { //#30642
        $k[$j++] = 'bwipp.hibccode128emptyData#30641'; //#30641
        $k[$j++] = "The data must not be empty"; //#30641
        bwipp_raiseerror(); //#30641
    } //#30641
    bwipp_loadctx(bwipp_hibccode128) //#30644
    if (!bwipp_hibccode128.__30651__) { //#30651
        $_ = Object.create($_); //#30651
        $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#30648
        $_.charvals = new Map; //#30649
        for (var _3 = 0; _3 <= 42; _3 += 1) { //#30650
            $put($_.charvals, $geti($_.barchars, _3, 1), _3); //#30650
        } //#30650
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_hibccode128.$ctx[id] = $_[id]); //#30650
        bwipp_hibccode128.__30651__ = 1; //#30650
        $_ = Object.getPrototypeOf($_); //#30650
    } //#30650
    for (var _A = 0, _9 = $_.barcode.length - 1; _A <= _9; _A += 1) { //#30658
        var _E = $get($_.charvals, $geti($_.barcode, _A, 1)) !== undefined; //#30655
        if (!_E) { //#30657
            $k[$j++] = 'bwipp.hibccode128badCharacter#30656'; //#30656
            $k[$j++] = "HIBC Code 128 must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#30656
            bwipp_raiseerror(); //#30656
        } //#30656
    } //#30656
    $k[$j++] = 'barlen'; //#30660
    $k[$j++] = $_.barcode.length; //#30660
    if ($_.validatecheck) { //#30660
        var _H = $k[--$j]; //#30660
        $k[$j++] = $f(_H - 1); //#30660
    } //#30660
    var _I = $k[--$j]; //#30660
    $_[$k[--$j]] = _I; //#30660
    $_.checksum = 41; //#30662
    for (var _M = 0, _L = $f($_.barlen - 1); _M <= _L; _M += 1) { //#30666
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _M, 1)) + $_.checksum); //#30665
    } //#30665
    $_.checksum = $_.checksum % 43; //#30667
    if ($_.validatecheck) { //#30673
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#30671
            $k[$j++] = 'bwipp.hibccode128badCheckDigit#30670'; //#30670
            $k[$j++] = "Incorrect HIBC Code 128 check digit provided"; //#30670
            bwipp_raiseerror(); //#30670
        } //#30670
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#30672
    } //#30672
    var _e = $s($f($_.barlen + 2)); //#30675
    $puti(_e, 1, $_.barcode); //#30675
    $_.barcode = _e; //#30675
    $put($_.barcode, 0, 43); //#30676
    $put($_.barcode, $f($_.barlen + 1), $get($_.barchars, $_.checksum)); //#30677
    $_.text = $s($f($_.barlen + 4)); //#30679
    $put($_.text, 0, 42); //#30680
    $puti($_.text, 1, $_.barcode); //#30681
    var _v = $get($_.barcode, $f($_.barlen + 1)); //#30682
    $k[$j++] = $_.text; //#30682
    $k[$j++] = $f($_.barlen + 2); //#30682
    $k[$j++] = _v; //#30682
    if (_v == 32) { //#30682
        $j--; //#30682
        $k[$j++] = 95; //#30682
    } //#30682
    var _w = $k[--$j]; //#30682
    var _x = $k[--$j]; //#30682
    $put($k[--$j], _x, _w); //#30682
    $put($_.text, $f($_.barlen + 3), 42); //#30683
    $put($_.options, "dontdraw", true); //#30686
    $put($_.options, "validatecheck", false); //#30687
    $k[$j++] = 'args'; //#30688
    $k[$j++] = $_.barcode; //#30688
    $k[$j++] = $_.options; //#30688
    bwipp_code128(); //#30688
    var _15 = $k[--$j]; //#30688
    $_[$k[--$j]] = _15; //#30688
    $put($_.args, "txt", $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])])); //#30690
    $put($_.args, "textxalign", "center"); //#30691
    $put($_.args, "opt", $_.options); //#30692
    $k[$j++] = $_.args; //#30695
    if (!$_.dontdraw) { //#30695
        bwipp_renlinear(); //#30695
    } //#30695
    $_ = Object.getPrototypeOf($_); //#30697
    $_ = Object.getPrototypeOf($_); //#30699
} //bwipp_hibccode128
function bwipp_hibcdatamatrix() {
    $_ = Object.create($_); //#30730
    $_.dontdraw = false; //#30733
    $_.validatecheck = false; //#30734
    $k[$j++] = $_; //#30736
    bwipp_processoptions(); //#30736
    $_.options = $k[--$j]; //#30736
    $_.barcode = $k[--$j]; //#30737
    if ($eq($_.barcode, "")) { //#30741
        $k[$j++] = 'bwipp.hibcdatamatrixEmptyData#30740'; //#30740
        $k[$j++] = "The data must not be empty"; //#30740
        bwipp_raiseerror(); //#30740
    } //#30740
    bwipp_loadctx(bwipp_hibcdatamatrix) //#30743
    if (!bwipp_hibcdatamatrix.__30750__) { //#30750
        $_ = Object.create($_); //#30750
        $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#30747
        $_.charvals = new Map; //#30748
        for (var _3 = 0; _3 <= 42; _3 += 1) { //#30749
            $put($_.charvals, $geti($_.barchars, _3, 1), _3); //#30749
        } //#30749
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_hibcdatamatrix.$ctx[id] = $_[id]); //#30749
        bwipp_hibcdatamatrix.__30750__ = 1; //#30749
        $_ = Object.getPrototypeOf($_); //#30749
    } //#30749
    for (var _A = 0, _9 = $_.barcode.length - 1; _A <= _9; _A += 1) { //#30757
        var _E = $get($_.charvals, $geti($_.barcode, _A, 1)) !== undefined; //#30754
        if (!_E) { //#30756
            $k[$j++] = 'bwipp.hibcdatamatrixBadCharacter#30755'; //#30755
            $k[$j++] = "HIBC Data Matrix must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#30755
            bwipp_raiseerror(); //#30755
        } //#30755
    } //#30755
    $k[$j++] = 'barlen'; //#30759
    $k[$j++] = $_.barcode.length; //#30759
    if ($_.validatecheck) { //#30759
        var _H = $k[--$j]; //#30759
        $k[$j++] = $f(_H - 1); //#30759
    } //#30759
    var _I = $k[--$j]; //#30759
    $_[$k[--$j]] = _I; //#30759
    $_.checksum = 41; //#30761
    for (var _M = 0, _L = $f($_.barlen - 1); _M <= _L; _M += 1) { //#30765
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _M, 1)) + $_.checksum); //#30764
    } //#30764
    $_.checksum = $_.checksum % 43; //#30766
    if ($_.validatecheck) { //#30772
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#30770
            $k[$j++] = 'bwipp.hibcdatamatrixBadCheckDigit#30769'; //#30769
            $k[$j++] = "Incorrect HIBC Data Matrix check digit provided"; //#30769
            bwipp_raiseerror(); //#30769
        } //#30769
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#30771
    } //#30771
    var _d = $_.barlen; //#30774
    var _e = $s($f(_d + 2)); //#30774
    $puti(_e, 1, $_.barcode); //#30774
    $_.barcode = _e; //#30774
    $put($_.barcode, 0, 43); //#30775
    $put($_.barcode, $f($_.barlen + 1), $get($_.barchars, $_.checksum)); //#30776
    $put($_.options, "dontdraw", true); //#30779
    $put($_.options, "validatecheck", false); //#30780
    $k[$j++] = 'args'; //#30781
    $k[$j++] = $_.barcode; //#30781
    $k[$j++] = $_.options; //#30781
    bwipp_datamatrix(); //#30781
    var _q = $k[--$j]; //#30781
    var _r = $k[--$j]; //#30781
    $_[_r] = _q; //#30781
    $put($_.args, "opt", $_.options); //#30783
    $k[$j++] = $_.args; //#30786
    if (!$_.dontdraw) { //#30786
        bwipp_renmatrix(); //#30786
    } //#30786
    $_ = Object.getPrototypeOf($_); //#30788
    $_ = Object.getPrototypeOf($_); //#30790
} //bwipp_hibcdatamatrix
function bwipp_hibcdatamatrixrectangular() {
    $_ = Object.create($_); //#30821
    $_.dontdraw = false; //#30824
    $_.validatecheck = false; //#30825
    $k[$j++] = $_; //#30827
    bwipp_processoptions(); //#30827
    $_.options = $k[--$j]; //#30827
    $_.barcode = $k[--$j]; //#30828
    if ($eq($_.barcode, "")) { //#30832
        $k[$j++] = 'bwipp.hibcdatamatrixrectangularEmptyData#30831'; //#30831
        $k[$j++] = "The data must not be empty"; //#30831
        bwipp_raiseerror(); //#30831
    } //#30831
    bwipp_loadctx(bwipp_hibcdatamatrixrectangular) //#30834
    if (!bwipp_hibcdatamatrixrectangular.__30841__) { //#30841
        $_ = Object.create($_); //#30841
        $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#30838
        $_.charvals = new Map; //#30839
        for (var _3 = 0; _3 <= 42; _3 += 1) { //#30840
            $put($_.charvals, $geti($_.barchars, _3, 1), _3); //#30840
        } //#30840
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_hibcdatamatrixrectangular.$ctx[id] = $_[id]); //#30840
        bwipp_hibcdatamatrixrectangular.__30841__ = 1; //#30840
        $_ = Object.getPrototypeOf($_); //#30840
    } //#30840
    for (var _A = 0, _9 = $_.barcode.length - 1; _A <= _9; _A += 1) { //#30848
        var _E = $get($_.charvals, $geti($_.barcode, _A, 1)) !== undefined; //#30845
        if (!_E) { //#30847
            $k[$j++] = 'bwipp.hibcdatamatrixrectangularBadCharacter#30846'; //#30846
            $k[$j++] = "HIBC Data Matrix Rectangular must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#30846
            bwipp_raiseerror(); //#30846
        } //#30846
    } //#30846
    $k[$j++] = 'barlen'; //#30850
    $k[$j++] = $_.barcode.length; //#30850
    if ($_.validatecheck) { //#30850
        var _H = $k[--$j]; //#30850
        $k[$j++] = $f(_H - 1); //#30850
    } //#30850
    var _I = $k[--$j]; //#30850
    $_[$k[--$j]] = _I; //#30850
    $_.checksum = 41; //#30852
    for (var _M = 0, _L = $f($_.barlen - 1); _M <= _L; _M += 1) { //#30856
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _M, 1)) + $_.checksum); //#30855
    } //#30855
    $_.checksum = $_.checksum % 43; //#30857
    if ($_.validatecheck) { //#30863
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#30861
            $k[$j++] = 'bwipp.hibcdatamatrixrectangularBadCheckDigit#30860'; //#30860
            $k[$j++] = "Incorrect HIBC Data Matrix Rectangular check digit provided"; //#30860
            bwipp_raiseerror(); //#30860
        } //#30860
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#30862
    } //#30862
    var _d = $_.barlen; //#30865
    var _e = $s($f(_d + 2)); //#30865
    $puti(_e, 1, $_.barcode); //#30865
    $_.barcode = _e; //#30865
    $put($_.barcode, 0, 43); //#30866
    $put($_.barcode, $f($_.barlen + 1), $get($_.barchars, $_.checksum)); //#30867
    $put($_.options, "dontdraw", true); //#30870
    $put($_.options, "validatecheck", false); //#30871
    $put($_.options, "format", "rectangle"); //#30872
    $k[$j++] = 'args'; //#30873
    $k[$j++] = $_.barcode; //#30873
    $k[$j++] = $_.options; //#30873
    bwipp_datamatrix(); //#30873
    var _r = $k[--$j]; //#30873
    $_[$k[--$j]] = _r; //#30873
    $put($_.args, "opt", $_.options); //#30875
    $k[$j++] = $_.args; //#30878
    if (!$_.dontdraw) { //#30878
        bwipp_renmatrix(); //#30878
    } //#30878
    $_ = Object.getPrototypeOf($_); //#30880
    $_ = Object.getPrototypeOf($_); //#30882
} //bwipp_hibcdatamatrixrectangular
function bwipp_hibcpdf417() {
    $_ = Object.create($_); //#30913
    $_.dontdraw = false; //#30916
    $_.columns = 2; //#30917
    $_.validatecheck = false; //#30918
    $k[$j++] = $_; //#30920
    bwipp_processoptions(); //#30920
    $_.options = $k[--$j]; //#30920
    $_.barcode = $k[--$j]; //#30921
    if ($eq($_.barcode, "")) { //#30925
        $k[$j++] = 'bwipp.hibcpdf417EmptyData#30924'; //#30924
        $k[$j++] = "The data must not be empty"; //#30924
        bwipp_raiseerror(); //#30924
    } //#30924
    bwipp_loadctx(bwipp_hibcpdf417) //#30927
    if (!bwipp_hibcpdf417.__30934__) { //#30934
        $_ = Object.create($_); //#30934
        $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#30931
        $_.charvals = new Map; //#30932
        for (var _3 = 0; _3 <= 42; _3 += 1) { //#30933
            $put($_.charvals, $geti($_.barchars, _3, 1), _3); //#30933
        } //#30933
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_hibcpdf417.$ctx[id] = $_[id]); //#30933
        bwipp_hibcpdf417.__30934__ = 1; //#30933
        $_ = Object.getPrototypeOf($_); //#30933
    } //#30933
    for (var _A = 0, _9 = $_.barcode.length - 1; _A <= _9; _A += 1) { //#30941
        var _E = $get($_.charvals, $geti($_.barcode, _A, 1)) !== undefined; //#30938
        if (!_E) { //#30940
            $k[$j++] = 'bwipp.hibcpdf417BadCharacter#30939'; //#30939
            $k[$j++] = "HIBC PDF417 must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#30939
            bwipp_raiseerror(); //#30939
        } //#30939
    } //#30939
    $k[$j++] = 'barlen'; //#30943
    $k[$j++] = $_.barcode.length; //#30943
    if ($_.validatecheck) { //#30943
        var _H = $k[--$j]; //#30943
        $k[$j++] = $f(_H - 1); //#30943
    } //#30943
    var _I = $k[--$j]; //#30943
    $_[$k[--$j]] = _I; //#30943
    $_.checksum = 41; //#30945
    for (var _M = 0, _L = $f($_.barlen - 1); _M <= _L; _M += 1) { //#30949
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _M, 1)) + $_.checksum); //#30948
    } //#30948
    $_.checksum = $_.checksum % 43; //#30950
    if ($_.validatecheck) { //#30956
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#30954
            $k[$j++] = 'bwipp.hibcpdf417BadCheckDigit#30953'; //#30953
            $k[$j++] = "Incorrect HIBC PDF417 check digit provided"; //#30953
            bwipp_raiseerror(); //#30953
        } //#30953
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#30955
    } //#30955
    var _e = $s($f($_.barlen + 2)); //#30958
    $puti(_e, 1, $_.barcode); //#30958
    $_.barcode = _e; //#30958
    $put($_.barcode, 0, 43); //#30959
    $put($_.barcode, $f($_.barlen + 1), $get($_.barchars, $_.checksum)); //#30960
    $put($_.options, "dontdraw", true); //#30963
    $put($_.options, "columns", $_.columns); //#30964
    var _p = $_.options; //#30965
    $put(_p, "validatecheck", false); //#30965
    var _r = $_.options; //#30966
    $k[$j++] = 'args'; //#30966
    $k[$j++] = $_.barcode; //#30966
    $k[$j++] = _r; //#30966
    bwipp_pdf417(); //#30966
    var _s = $k[--$j]; //#30966
    $_[$k[--$j]] = _s; //#30966
    $put($_.args, "opt", $_.options); //#30968
    $k[$j++] = $_.args; //#30971
    if (!$_.dontdraw) { //#30971
        bwipp_renmatrix(); //#30971
    } //#30971
    $_ = Object.getPrototypeOf($_); //#30973
    $_ = Object.getPrototypeOf($_); //#30975
} //bwipp_hibcpdf417
function bwipp_hibcmicropdf417() {
    $_ = Object.create($_); //#31006
    $_.dontdraw = false; //#31009
    $_.columns = 2; //#31010
    $_.validatecheck = false; //#31011
    $k[$j++] = $_; //#31013
    bwipp_processoptions(); //#31013
    $_.options = $k[--$j]; //#31013
    $_.barcode = $k[--$j]; //#31014
    if ($eq($_.barcode, "")) { //#31018
        $k[$j++] = 'bwipp.hibcmicropdf417EmptyData#31017'; //#31017
        $k[$j++] = "The data must not be empty"; //#31017
        bwipp_raiseerror(); //#31017
    } //#31017
    bwipp_loadctx(bwipp_hibcmicropdf417) //#31020
    if (!bwipp_hibcmicropdf417.__31027__) { //#31027
        $_ = Object.create($_); //#31027
        $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#31024
        $_.charvals = new Map; //#31025
        for (var _3 = 0; _3 <= 42; _3 += 1) { //#31026
            $put($_.charvals, $geti($_.barchars, _3, 1), _3); //#31026
        } //#31026
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_hibcmicropdf417.$ctx[id] = $_[id]); //#31026
        bwipp_hibcmicropdf417.__31027__ = 1; //#31026
        $_ = Object.getPrototypeOf($_); //#31026
    } //#31026
    for (var _A = 0, _9 = $_.barcode.length - 1; _A <= _9; _A += 1) { //#31034
        var _E = $get($_.charvals, $geti($_.barcode, _A, 1)) !== undefined; //#31031
        if (!_E) { //#31033
            $k[$j++] = 'bwipp.hibcmicropdf417BadCharacter#31032'; //#31032
            $k[$j++] = "HIBC MicroPDF417 must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#31032
            bwipp_raiseerror(); //#31032
        } //#31032
    } //#31032
    $k[$j++] = 'barlen'; //#31036
    $k[$j++] = $_.barcode.length; //#31036
    if ($_.validatecheck) { //#31036
        var _H = $k[--$j]; //#31036
        $k[$j++] = $f(_H - 1); //#31036
    } //#31036
    var _I = $k[--$j]; //#31036
    $_[$k[--$j]] = _I; //#31036
    $_.checksum = 41; //#31038
    for (var _M = 0, _L = $f($_.barlen - 1); _M <= _L; _M += 1) { //#31042
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _M, 1)) + $_.checksum); //#31041
    } //#31041
    $_.checksum = $_.checksum % 43; //#31043
    if ($_.validatecheck) { //#31049
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#31047
            $k[$j++] = 'bwipp.hibcmicropdf417BadCheckDigit#31046'; //#31046
            $k[$j++] = "Incorrect HIBC MicroPDF417 check digit provided"; //#31046
            bwipp_raiseerror(); //#31046
        } //#31046
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#31048
    } //#31048
    var _e = $s($f($_.barlen + 2)); //#31051
    $puti(_e, 1, $_.barcode); //#31051
    $_.barcode = _e; //#31051
    $put($_.barcode, 0, 43); //#31052
    $put($_.barcode, $f($_.barlen + 1), $get($_.barchars, $_.checksum)); //#31053
    var _m = $_.options; //#31056
    $put(_m, "dontdraw", true); //#31056
    $put($_.options, "columns", $_.columns); //#31057
    $put($_.options, "validatecheck", false); //#31058
    var _r = $_.options; //#31059
    $k[$j++] = 'args'; //#31059
    $k[$j++] = $_.barcode; //#31059
    $k[$j++] = _r; //#31059
    bwipp_micropdf417(); //#31059
    var _s = $k[--$j]; //#31059
    $_[$k[--$j]] = _s; //#31059
    $put($_.args, "opt", $_.options); //#31061
    $k[$j++] = $_.args; //#31064
    if (!$_.dontdraw) { //#31064
        bwipp_renmatrix(); //#31064
    } //#31064
    $_ = Object.getPrototypeOf($_); //#31066
    $_ = Object.getPrototypeOf($_); //#31068
} //bwipp_hibcmicropdf417
function bwipp_hibcqrcode() {
    $_ = Object.create($_); //#31099
    $_.dontdraw = false; //#31102
    $_.validatecheck = false; //#31103
    $k[$j++] = $_; //#31105
    bwipp_processoptions(); //#31105
    $_.options = $k[--$j]; //#31105
    $_.barcode = $k[--$j]; //#31106
    if ($eq($_.barcode, "")) { //#31110
        $k[$j++] = 'bwipp.hibcqrcodeEmptyData#31109'; //#31109
        $k[$j++] = "The data must not be empty"; //#31109
        bwipp_raiseerror(); //#31109
    } //#31109
    bwipp_loadctx(bwipp_hibcqrcode) //#31112
    if (!bwipp_hibcqrcode.__31119__) { //#31119
        $_ = Object.create($_); //#31119
        $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#31116
        $_.charvals = new Map; //#31117
        for (var _3 = 0; _3 <= 42; _3 += 1) { //#31118
            $put($_.charvals, $geti($_.barchars, _3, 1), _3); //#31118
        } //#31118
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_hibcqrcode.$ctx[id] = $_[id]); //#31118
        bwipp_hibcqrcode.__31119__ = 1; //#31118
        $_ = Object.getPrototypeOf($_); //#31118
    } //#31118
    for (var _A = 0, _9 = $_.barcode.length - 1; _A <= _9; _A += 1) { //#31126
        var _E = $get($_.charvals, $geti($_.barcode, _A, 1)) !== undefined; //#31123
        if (!_E) { //#31125
            $k[$j++] = 'bwipp.hibcqrcodeBadCharacter#31124'; //#31124
            $k[$j++] = "HIBC QR Code must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#31124
            bwipp_raiseerror(); //#31124
        } //#31124
    } //#31124
    $k[$j++] = 'barlen'; //#31128
    $k[$j++] = $_.barcode.length; //#31128
    if ($_.validatecheck) { //#31128
        var _H = $k[--$j]; //#31128
        $k[$j++] = $f(_H - 1); //#31128
    } //#31128
    var _I = $k[--$j]; //#31128
    $_[$k[--$j]] = _I; //#31128
    $_.checksum = 41; //#31130
    for (var _M = 0, _L = $f($_.barlen - 1); _M <= _L; _M += 1) { //#31134
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _M, 1)) + $_.checksum); //#31133
    } //#31133
    $_.checksum = $_.checksum % 43; //#31135
    if ($_.validatecheck) { //#31141
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#31139
            $k[$j++] = 'bwipp.hibcqrcodeBadCheckDigit#31138'; //#31138
            $k[$j++] = "Incorrect HIBC QR Code check digit provided"; //#31138
            bwipp_raiseerror(); //#31138
        } //#31138
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#31140
    } //#31140
    var _e = $s($f($_.barlen + 2)); //#31143
    $puti(_e, 1, $_.barcode); //#31143
    $_.barcode = _e; //#31143
    $put($_.barcode, 0, 43); //#31144
    $put($_.barcode, $f($_.barlen + 1), $get($_.barchars, $_.checksum)); //#31145
    $put($_.options, "dontdraw", true); //#31148
    $put($_.options, "validatecheck", false); //#31149
    $k[$j++] = 'args'; //#31150
    $k[$j++] = $_.barcode; //#31150
    $k[$j++] = $_.options; //#31150
    bwipp_qrcode(); //#31150
    var _q = $k[--$j]; //#31150
    var _r = $k[--$j]; //#31150
    $_[_r] = _q; //#31150
    $put($_.args, "opt", $_.options); //#31152
    $k[$j++] = $_.args; //#31155
    if (!$_.dontdraw) { //#31155
        bwipp_renmatrix(); //#31155
    } //#31155
    $_ = Object.getPrototypeOf($_); //#31157
    $_ = Object.getPrototypeOf($_); //#31159
} //bwipp_hibcqrcode
function bwipp_hibccodablockf() {
    $_ = Object.create($_); //#31190
    $_.dontdraw = false; //#31193
    $_.validatecheck = false; //#31194
    $k[$j++] = $_; //#31196
    bwipp_processoptions(); //#31196
    $_.options = $k[--$j]; //#31196
    $_.barcode = $k[--$j]; //#31197
    if ($eq($_.barcode, "")) { //#31201
        $k[$j++] = 'bwipp.hibccodablockfEmptyData#31200'; //#31200
        $k[$j++] = "The data must not be empty"; //#31200
        bwipp_raiseerror(); //#31200
    } //#31200
    bwipp_loadctx(bwipp_hibccodablockf) //#31203
    if (!bwipp_hibccodablockf.__31210__) { //#31210
        $_ = Object.create($_); //#31210
        $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#31207
        $_.charvals = new Map; //#31208
        for (var _3 = 0; _3 <= 42; _3 += 1) { //#31209
            $put($_.charvals, $geti($_.barchars, _3, 1), _3); //#31209
        } //#31209
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_hibccodablockf.$ctx[id] = $_[id]); //#31209
        bwipp_hibccodablockf.__31210__ = 1; //#31209
        $_ = Object.getPrototypeOf($_); //#31209
    } //#31209
    for (var _A = 0, _9 = $_.barcode.length - 1; _A <= _9; _A += 1) { //#31217
        var _E = $get($_.charvals, $geti($_.barcode, _A, 1)) !== undefined; //#31214
        if (!_E) { //#31216
            $k[$j++] = 'bwipp.hibccodablockfBadCharacter#31215'; //#31215
            $k[$j++] = "HIBC Codablock F must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#31215
            bwipp_raiseerror(); //#31215
        } //#31215
    } //#31215
    $k[$j++] = 'barlen'; //#31219
    $k[$j++] = $_.barcode.length; //#31219
    if ($_.validatecheck) { //#31219
        var _H = $k[--$j]; //#31219
        $k[$j++] = $f(_H - 1); //#31219
    } //#31219
    var _I = $k[--$j]; //#31219
    $_[$k[--$j]] = _I; //#31219
    $_.checksum = 41; //#31221
    for (var _M = 0, _L = $f($_.barlen - 1); _M <= _L; _M += 1) { //#31225
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _M, 1)) + $_.checksum); //#31224
    } //#31224
    $_.checksum = $_.checksum % 43; //#31226
    if ($_.validatecheck) { //#31232
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#31230
            $k[$j++] = 'bwipp.hibccodablockfBadCheckDigit#31229'; //#31229
            $k[$j++] = "Incorrect HIBC Codablock F check digit provided"; //#31229
            bwipp_raiseerror(); //#31229
        } //#31229
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#31231
    } //#31231
    var _e = $s($f($_.barlen + 2)); //#31234
    $puti(_e, 1, $_.barcode); //#31234
    $_.barcode = _e; //#31234
    $put($_.barcode, 0, 43); //#31235
    $put($_.barcode, $f($_.barlen + 1), $get($_.barchars, $_.checksum)); //#31236
    $put($_.options, "dontdraw", true); //#31239
    $put($_.options, "validatecheck", false); //#31240
    $k[$j++] = 'args'; //#31241
    $k[$j++] = $_.barcode; //#31241
    $k[$j++] = $_.options; //#31241
    bwipp_codablockf(); //#31241
    var _q = $k[--$j]; //#31241
    var _r = $k[--$j]; //#31241
    $_[_r] = _q; //#31241
    $put($_.args, "opt", $_.options); //#31243
    $k[$j++] = $_.args; //#31246
    if (!$_.dontdraw) { //#31246
        bwipp_renmatrix(); //#31246
    } //#31246
    $_ = Object.getPrototypeOf($_); //#31248
    $_ = Object.getPrototypeOf($_); //#31250
} //bwipp_hibccodablockf
function bwipp_hibcazteccode() {
    $_ = Object.create($_); //#31281
    $_.dontdraw = false; //#31284
    $_.validatecheck = false; //#31285
    $k[$j++] = $_; //#31287
    bwipp_processoptions(); //#31287
    $_.options = $k[--$j]; //#31287
    $_.barcode = $k[--$j]; //#31288
    if ($eq($_.barcode, "")) { //#31292
        $k[$j++] = 'bwipp.hibcazteccodeEmptyData#31291'; //#31291
        $k[$j++] = "The data must not be empty"; //#31291
        bwipp_raiseerror(); //#31291
    } //#31291
    bwipp_loadctx(bwipp_hibcazteccode) //#31294
    if (!bwipp_hibcazteccode.__31301__) { //#31301
        $_ = Object.create($_); //#31301
        $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#31298
        $_.charvals = new Map; //#31299
        for (var _3 = 0; _3 <= 42; _3 += 1) { //#31300
            $put($_.charvals, $geti($_.barchars, _3, 1), _3); //#31300
        } //#31300
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_hibcazteccode.$ctx[id] = $_[id]); //#31300
        bwipp_hibcazteccode.__31301__ = 1; //#31300
        $_ = Object.getPrototypeOf($_); //#31300
    } //#31300
    for (var _A = 0, _9 = $_.barcode.length - 1; _A <= _9; _A += 1) { //#31308
        var _E = $get($_.charvals, $geti($_.barcode, _A, 1)) !== undefined; //#31305
        if (!_E) { //#31307
            $k[$j++] = 'bwipp.hibcazteccodeBadCharacter#31306'; //#31306
            $k[$j++] = "HIBC Aztec Code must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#31306
            bwipp_raiseerror(); //#31306
        } //#31306
    } //#31306
    $k[$j++] = 'barlen'; //#31310
    $k[$j++] = $_.barcode.length; //#31310
    if ($_.validatecheck) { //#31310
        var _H = $k[--$j]; //#31310
        $k[$j++] = $f(_H - 1); //#31310
    } //#31310
    var _I = $k[--$j]; //#31310
    $_[$k[--$j]] = _I; //#31310
    $_.checksum = 41; //#31312
    for (var _M = 0, _L = $f($_.barlen - 1); _M <= _L; _M += 1) { //#31316
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _M, 1)) + $_.checksum); //#31315
    } //#31315
    $_.checksum = $_.checksum % 43; //#31317
    if ($_.validatecheck) { //#31323
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#31321
            $k[$j++] = 'bwipp.hibcazteccodeBadCheckDigit#31320'; //#31320
            $k[$j++] = "Incorrect HIBC Aztec Code check digit provided"; //#31320
            bwipp_raiseerror(); //#31320
        } //#31320
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#31322
    } //#31322
    var _e = $s($f($_.barlen + 2)); //#31325
    $puti(_e, 1, $_.barcode); //#31325
    $_.barcode = _e; //#31325
    $put($_.barcode, 0, 43); //#31326
    $put($_.barcode, $f($_.barlen + 1), $get($_.barchars, $_.checksum)); //#31327
    $put($_.options, "dontdraw", true); //#31330
    $put($_.options, "validatecheck", false); //#31331
    $k[$j++] = 'args'; //#31332
    $k[$j++] = $_.barcode; //#31332
    $k[$j++] = $_.options; //#31332
    bwipp_azteccode(); //#31332
    var _q = $k[--$j]; //#31332
    var _r = $k[--$j]; //#31332
    $_[_r] = _q; //#31332
    $put($_.args, "opt", $_.options); //#31334
    $k[$j++] = $_.args; //#31337
    if (!$_.dontdraw) { //#31337
        bwipp_renmatrix(); //#31337
    } //#31337
    $_ = Object.getPrototypeOf($_); //#31339
    $_ = Object.getPrototypeOf($_); //#31341
} //bwipp_hibcazteccode
function bwipp_channelcode() {
    $_ = Object.create($_); //#31369
    $_.options = $k[--$j]; //#31371
    $_.barcode = $k[--$j]; //#31372
    $_.dontdraw = false; //#31374
    $_.shortfinder = false; //#31375
    $_.includetext = false; //#31376
    $_.includecheck = false; //#31377
    $_.height = 1; //#31378
    $forall($_.options, function() { //#31389
        var _3 = $k[--$j]; //#31389
        $_[$k[--$j]] = _3; //#31389
    }); //#31389
    $_.height = +$_.height; //#31391
    if (($_.barcode.length < 2) || ($_.barcode.length > 7)) { //#31396
        $k[$j++] = 'bwipp.channelcodeBadLength#31395'; //#31395
        $k[$j++] = "Channel Code must be 2 to 7 digits"; //#31395
        bwipp_raiseerror(); //#31395
    } //#31395
    $forall($_.barcode, function() { //#31401
        var _9 = $k[--$j]; //#31398
        if ((_9 < 48) || (_9 > 57)) { //#31400
            $k[$j++] = 'bwipp.channelcodeBadCharacter#31399'; //#31399
            $k[$j++] = "Channel Code must contain only digits"; //#31399
            bwipp_raiseerror(); //#31399
        } //#31399
    }); //#31399
    if ($cvi($_.barcode) > $get($a([26, 292, 3493, 44072, 576688, 7742862]), $_.barcode.length - 2)) { //#31404
        $k[$j++] = 'bwipp.channelcodeTooBig#31403'; //#31403
        $k[$j++] = "The Channel Code value is too big for the number of channels"; //#31403
        bwipp_raiseerror(); //#31403
    } //#31403
    $_.nextb = function() {
        var _E = $k[--$j]; //#31407
        var _N = (($f($get($_.s, _E) + ($f($get($_.b, $f(_E - 1)) + $f($get($_.b, $f(_E - 2)) + $get($_.s, $f(_E - 1))))))) > 4) ? 1 : 2; //#31412
        $k[$j++] = _E; //#31428
        $k[$j++] = _N; //#31428
        if (_E < $f($_.chan + 2)) { //#31426
            var _P = $k[--$j]; //#31414
            var _Q = $k[--$j]; //#31414
            var _R = $k[--$j]; //#31414
            $k[$j++] = _R; //#31417
            $k[$j++] = _Q; //#31417
            $k[$j++] = _P; //#31417
            for (var _T = _P, _S = _R; _T <= _S; _T += 1) { //#31417
                var _V = $k[--$j]; //#31415
                var _W = $k[--$j]; //#31415
                $put($_.b, _W, _T); //#31415
                var _X = $k[--$j]; //#31416
                var _Y = $k[--$j]; //#31416
                $k[$j++] = _Y; //#31416
                $k[$j++] = _X; //#31416
                $k[$j++] = _W; //#31416
                $k[$j++] = _V; //#31416
                $k[$j++] = $f($f(_X - _T) + 1); //#31416
                $k[$j++] = _Y; //#31416
                $k[$j++] = $f(_W + 1); //#31416
                $_.nexts(); //#31416
            } //#31416
        } else { //#31426
            var _Z = $k[--$j]; //#31419
            var _a = $k[--$j]; //#31419
            var _b = $k[--$j]; //#31419
            $k[$j++] = _b; //#31427
            $k[$j++] = _a; //#31427
            $k[$j++] = _Z; //#31427
            if ($le(_Z, _b)) { //#31427
                var _d = $k[--$j]; //#31420
                var _e = $k[--$j]; //#31420
                var _f = $k[--$j]; //#31420
                $put($_.b, _e, _f); //#31420
                $k[$j++] = _f; //#31425
                $k[$j++] = _e; //#31425
                $k[$j++] = _d; //#31425
                if ($_.value == $_.target) { //#31425
                    $k[$j++] = Infinity; //#31422
                    for (var _i = 3; _i <= 10; _i += 1) { //#31423
                        $k[$j++] = $get($_.s, _i); //#31423
                        $k[$j++] = $get($_.b, _i); //#31423
                    } //#31423
                    $_.out = $geti($a(), 0, $_.chan * 2); //#31424
                } //#31424
                $_.value = $_.value + 1; //#31426
            } //#31426
        } //#31426
        $j -= 4; //#31429
    }; //#31430
    $_.nexts = function() {
        var _r = $k[--$j]; //#31433
        $k[$j++] = _r; //#31433
        if (_r < $f($_.chan + 2)) { //#31433
            $k[$j++] = 1; //#31433
        } else { //#31433
            var _t = $k[--$j]; //#31433
            var _u = $k[--$j]; //#31433
            $k[$j++] = _u; //#31433
            $k[$j++] = _t; //#31433
            $k[$j++] = _u; //#31433
        } //#31433
        var _v = $k[--$j]; //#31433
        var _w = $k[--$j]; //#31433
        var _x = $k[--$j]; //#31433
        $k[$j++] = _x; //#31436
        $k[$j++] = _w; //#31436
        for (var _z = _v, _y = _x; _z <= _y; _z += 1) { //#31436
            var _11 = $k[--$j]; //#31434
            $put($_.s, _11, _z); //#31434
            var _12 = $k[--$j]; //#31435
            var _13 = $k[--$j]; //#31435
            $k[$j++] = _13; //#31435
            $k[$j++] = _12; //#31435
            $k[$j++] = _11; //#31435
            $k[$j++] = $f($f(_12 - _z) + 1); //#31435
            $k[$j++] = _13; //#31435
            $k[$j++] = _11; //#31435
            $_.nextb(); //#31435
        } //#31435
        $j -= 3; //#31437
    }; //#31438
    $_.encode = function() {
        $_.chan = $k[--$j]; //#31441
        $_.target = $k[--$j]; //#31442
        $_.value = 0; //#31443
        $_.out = -1; //#31444
        $_.b = $a([1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]); //#31445
        $_.s = $a([0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]); //#31446
        var _18 = $_.chan; //#31447
        $k[$j++] = _18; //#31447
        $k[$j++] = _18; //#31447
        $k[$j++] = 3; //#31447
        $_.nexts(); //#31447
        $k[$j++] = $_.out; //#31448
    }; //#31449
    $_.barlen = $_.barcode.length; //#31451
    $k[$j++] = 'finder'; //#31454
    if ($_.shortfinder) { //#31454
        $k[$j++] = $a([1, 1, 1, 1, 1]); //#31454
    } else { //#31454
        $k[$j++] = $a([1, 1, 1, 1, 1, 1, 1, 1, 1]); //#31454
    } //#31454
    var _1E = $k[--$j]; //#31454
    $_[$k[--$j]] = _1E; //#31454
    $k[$j++] = 'data'; //#31457
    $k[$j++] = $cvi($_.barcode); //#31457
    $k[$j++] = $_.barlen + 1; //#31457
    $_.encode(); //#31457
    var _1I = $k[--$j]; //#31457
    $_[$k[--$j]] = _1I; //#31457
    $_.check = $a([]); //#31460
    if ($_.includecheck) { //#31476
        $_.mod23 = $get($a([$a([]), $a([]), $a([13, 12, 4, 9, 3, 1]), $a([13, 2, 12, 3, 18, 16, 4, 1]), $a([11, 16, 17, 8, 20, 4, 10, 2, 5, 1]), $a([1, 4, 16, 18, 3, 12, 2, 8, 9, 13, 6, 1]), $a([20, 16, 22, 13, 15, 12, 5, 4, 8, 9, 21, 3, 7, 1]), $a([2, 6, 18, 8, 1, 3, 9, 4, 12, 13, 16, 2, 6, 18, 8, 1])]), $_.barlen); //#31470
        $k[$j++] = 0; //#31474
        for (var _1Z = 0, _1Y = $_.data.length - 1; _1Z <= _1Y; _1Z += 1) { //#31474
            var _1e = $k[--$j]; //#31473
            $k[$j++] = $f(_1e + ($f($get($_.data, _1Z) - 1) * $get($_.mod23, _1Z))); //#31473
        } //#31473
        var _1f = $k[--$j]; //#31475
        $k[$j++] = _1f % 23; //#31475
        $k[$j++] = 3; //#31475
        $_.encode(); //#31475
        $_.check = $k[--$j]; //#31475
    } //#31475
    $k[$j++] = Infinity; //#31479
    $aload($_.finder); //#31480
    $aload($_.data); //#31481
    $aload($_.check); //#31482
    $_.sbs = $a(); //#31482
    $_.txt = $a($_.barlen); //#31486
    for (var _1p = 0, _1o = $_.barlen - 1; _1p <= _1o; _1p += 1) { //#31490
        $_.i = _1p; //#31488
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), 0, 0, "", 0])); //#31489
    } //#31489
    $k[$j++] = Infinity; //#31493
    var _1w = $_.sbs; //#31495
    $k[$j++] = Infinity; //#31496
    for (var _1y = 0, _1z = ~~(($_.sbs.length + 1) / 2); _1y < _1z; _1y++) { //#31496
        $k[$j++] = $_.height; //#31496
    } //#31496
    var _21 = $a(); //#31496
    $k[$j++] = Infinity; //#31497
    for (var _23 = 0, _24 = ~~(($_.sbs.length + 1) / 2); _23 < _24; _23++) { //#31497
        $k[$j++] = 0; //#31497
    } //#31497
    var _25 = $a(); //#31497
    $k[$j++] = 'ren'; //#31500
    $k[$j++] = bwipp_renlinear; //#31500
    $k[$j++] = 'sbs'; //#31500
    $k[$j++] = _1w; //#31500
    $k[$j++] = 'bhs'; //#31500
    $k[$j++] = _21; //#31500
    $k[$j++] = 'bbs'; //#31500
    $k[$j++] = _25; //#31500
    $k[$j++] = 'txt'; //#31500
    $k[$j++] = $_.txt; //#31500
    $k[$j++] = 'textxalign'; //#31500
    $k[$j++] = "center"; //#31500
    $k[$j++] = 'opt'; //#31500
    $k[$j++] = $_.options; //#31500
    var _28 = $d(); //#31500
    $k[$j++] = _28; //#31503
    if (!$_.dontdraw) { //#31503
        bwipp_renlinear(); //#31503
    } //#31503
    $_ = Object.getPrototypeOf($_); //#31505
} //bwipp_channelcode
function bwipp_renlinear() {
    if ($_.bwipjs_dontdraw) { //#31533
        return; //#31533
    } //#31533
    $_ = Object.create($_); //#31534
    $_.sbs = $a([]); //#31539
    $_.bhs = $a([]); //#31540
    $_.bbs = $a([]); //#31541
    $_.txt = $a([]); //#31542
    $_.barcolor = "unset"; //#31543
    $_.includetext = false; //#31544
    $_.textcolor = "unset"; //#31545
    $_.textxalign = "unset"; //#31546
    $_.textyalign = "unset"; //#31547
    $_.textfont = "OCR-B"; //#31548
    $_.textsize = 10; //#31549
    $_.textxoffset = 0; //#31550
    $_.textyoffset = 0; //#31551
    $_.textgaps = 0; //#31552
    $_.alttext = ""; //#31553
    $_.bordercolor = "unset"; //#31554
    $_.backgroundcolor = "unset"; //#31555
    $_.inkspread = 0; //#31556
    $_.width = 0; //#31557
    $_.barratio = 1; //#31558
    $_.spaceratio = 1; //#31559
    $_.showborder = false; //#31560
    $_.showbearer = false; //#31561
    $_.borderleft = 10; //#31562
    $_.borderright = 10; //#31563
    $_.bordertop = 1; //#31564
    $_.borderbottom = 1; //#31565
    $_.borderwidth = 0.5; //#31566
    $_.guardwhitespace = false; //#31567
    $_.guardleftpos = 0; //#31568
    $_.guardleftypos = 0; //#31569
    $_.guardrightpos = 0; //#31570
    $_.guardrightypos = 0; //#31571
    $_.guardwidth = 7; //#31572
    $_.guardheight = 7; //#31573
    $forall($k[--$j], function() { //#31575
        var _6 = $k[--$j]; //#31575
        $_[$k[--$j]] = _6; //#31575
    }); //#31575
    $k[$j++] = $_.opt; //#31576
    delete $_['opt']; //#31576
    $k[$j++] = $_; //#31576
    bwipp_processoptions(); //#31576
    $j--; //#31576
    if ($_.textsize <= 0) { //#31580
        $k[$j++] = 'bwipp.renlinearBadTextsize#31579'; //#31579
        $k[$j++] = "The font size must be greater than zero"; //#31579
        bwipp_raiseerror(); //#31579
    } //#31579
    $_.bars = $a(~~(($_.sbs.length + 1) / 2)); //#31583
    $_.pixx = 0; //#31584
    $_.pixy = 0; //#31584
    for (var _E = 0, _D = ((~~(($_.sbs.length + 1) / 2)) * 2) - 2; _E <= _D; _E += 1) { //#31603
        $_.i = _E; //#31586
        if (($_.i % 2) == 0) { //#31600
            $_.d = $f(($f(($get($_.sbs, $_.i) * $_.barratio) - $_.barratio)) + 1); //#31588
            if ($get($_.sbs, $_.i) != 0) { //#31597
                $_.h = $get($_.bhs, ~~($_.i / 2)) * 72; //#31590
                $_.c = $f(($_.d / 2) + $_.pixx); //#31591
                $_.y = $get($_.bbs, ~~($_.i / 2)) * 72; //#31592
                $_.w = $f($_.d - $_.inkspread); //#31593
                $put($_.bars, ~~($_.i / 2), $a([$_.h, $_.c, $_.y, $_.w])); //#31594
                if ($f($_.h + $_.y) > $_.pixy) { //#31595
                    $_.pixy = $f($_.h + $_.y); //#31595
                } //#31595
            } else { //#31597
                $put($_.bars, ~~($_.i / 2), -1); //#31597
            } //#31597
        } else { //#31600
            $_.d = $f(($f(($get($_.sbs, $_.i) * $_.spaceratio) - $_.spaceratio)) + 1); //#31600
        } //#31600
        $_.pixx = $f($_.pixx + $_.d); //#31602
    } //#31602
    $$.save(); //#31605
    var _t = $$.currpos(); //#31607
    $$.translate(_t.x, _t.y); //#31607
    if ($_.width != 0) { //#31612
        $$.scale(($_.width * 72) / $_.pixx, 1); //#31611
    } //#31611
    $_.tl = $a([-($f($_.borderleft + ($_.borderwidth / 2))), $f($f($_.pixy + $_.bordertop) + ($_.borderwidth / 2))]); //#31622
    $_.tr = $a([$f($f($_.pixx + $_.borderright) + ($_.borderwidth / 2)), $f($f($_.pixy + $_.bordertop) + ($_.borderwidth / 2))]); //#31623
    $_.bl = $a([-($f($_.borderleft + ($_.borderwidth / 2))), -($f($_.borderbottom + ($_.borderwidth / 2)))]); //#31624
    $_.br = $a([$f($f($_.pixx + $_.borderright) + ($_.borderwidth / 2)), -($f($_.borderbottom + ($_.borderwidth / 2)))]); //#31625
    if ($_.showbearer) { //#31650
        $$.save(); //#31627
        $$.newpath(); //#31628
        $aload($_.bl); //#31629
        var _1N = $k[--$j]; //#31629
        $$.moveto($k[--$j], _1N); //#31629
        $aload($_.br); //#31629
        var _1Q = $k[--$j]; //#31629
        $$.lineto($k[--$j], _1Q); //#31629
        $aload($_.tl); //#31630
        var _1T = $k[--$j]; //#31630
        $$.moveto($k[--$j], _1T); //#31630
        $aload($_.tr); //#31630
        var _1W = $k[--$j]; //#31630
        $$.lineto($k[--$j], _1W); //#31630
        if ($ne($_.bordercolor, "unset")) { //#31631
            $$.setcolor($_.bordercolor); //#31631
        } //#31631
        $$.setlinewidth($f($_.borderwidth - ($_.inkspread * 2))); //#31632
        $$.stroke(); //#31632
        $$.restore(); //#31633
    } else { //#31650
        if ($_.showborder) { //#31651
            $$.save(); //#31646
            $$.newpath(); //#31647
            $aload($_.bl); //#31647
            var _1e = $k[--$j]; //#31647
            $$.moveto($k[--$j], _1e); //#31647
            var _1j = $a([$_.br, $_.tr, $_.tl]); //#31647
            for (var _1k = 0, _1l = _1j.length; _1k < _1l; _1k++) { //#31647
                $aload($get(_1j, _1k)); //#31647
                var _1n = $k[--$j]; //#31647
                $$.lineto($k[--$j], _1n); //#31647
            } //#31647
            $$.closepath(); //#31647
            if ($ne($_.bordercolor, "unset")) { //#31648
                $$.setcolor($_.bordercolor); //#31648
            } //#31648
            $$.setlinewidth($_.borderwidth); //#31649
            $$.stroke(); //#31649
            $$.restore(); //#31650
        } //#31650
    } //#31650
    $$.save(); //#31654
    if ($ne($_.barcolor, "unset")) { //#31656
        $$.setcolor($_.barcolor); //#31656
    } //#31656
    var _1u = $_.bars; //#31657
    for (var _1v = 0, _1w = _1u.length; _1v < _1w; _1v++) { //#31663
        var _1x = $get(_1u, _1v); //#31663
        $k[$j++] = _1x; //#31662
        if (_1x != -1) { //#31661
            $aload($k[--$j]); //#31659
            $$.newpath(); //#31659
            $$.setlinewidth($k[--$j]); //#31659
            var _20 = $k[--$j]; //#31659
            $$.moveto($k[--$j], _20); //#31659
            $$.rlineto(0, $k[--$j]); //#31659
            $$.stroke(); //#31659
        } else { //#31661
            $j--; //#31661
        } //#31661
    } //#31661
    $$.restore(); //#31664
    if ($ne($_.textcolor, "unset")) { //#31667
        $$.setcolor($_.textcolor); //#31667
    } //#31667
    if ($_.includetext) { //#31724
        if (($eq($_.textxalign, "unset") && $eq($_.textyalign, "unset")) && $eq($_.alttext, "")) { //#31722
            $_.s = 0; //#31670
            $_.fn = ""; //#31670
            var _29 = $_.txt; //#31671
            for (var _2A = 0, _2B = _29.length; _2A < _2B; _2A++) { //#31680
                $forall($get(_29, _2A)); //#31672
                var _2D = $k[--$j]; //#31673
                var _2E = $k[--$j]; //#31673
                $k[$j++] = _2E; //#31678
                $k[$j++] = _2D; //#31678
                if ((_2D != $_.s) || $ne(_2E, $_.fn)) { //#31677
                    var _2H = $k[--$j]; //#31674
                    var _2I = $k[--$j]; //#31674
                    $_.s = _2H; //#31674
                    $_.fn = _2I; //#31674
                    $$.selectfont(_2I, _2H); //#31675
                } else { //#31677
                    $j -= 2; //#31677
                } //#31677
                var _2J = $k[--$j]; //#31679
                $$.moveto($k[--$j], _2J); //#31679
                $$.show($k[--$j], 0, 0); //#31679
            } //#31679
        } else { //#31722
            $$.selectfont($_.textfont, $_.textsize); //#31682
            if ($eq($_.alttext, "")) { //#31688
                $k[$j++] = Infinity; //#31684
                var _2P = $_.txt; //#31684
                for (var _2Q = 0, _2R = _2P.length; _2Q < _2R; _2Q++) { //#31684
                    $forall($get($get(_2P, _2Q), 0)); //#31684
                } //#31684
                $_.txt = $a(); //#31684
                $_.tstr = $s($_.txt.length); //#31685
                for (var _2Z = 0, _2Y = $_.txt.length - 1; _2Z <= _2Y; _2Z += 1) { //#31686
                    $put($_.tstr, _2Z, $get($_.txt, _2Z)); //#31686
                } //#31686
            } else { //#31688
                $_.tstr = $_.alttext; //#31688
            } //#31688
            if ($_.tstr.length == 0) { //#31698
                $k[$j++] = 0; //#31693
            } else { //#31698
                $$.save(); //#31695
                $$.newpath(); //#31696
                $$.moveto(0, 0); //#31696
                $$.charpath("0", false); //#31696
                var _2f = $$.pathbbox(); //#31696
                $$.restore(); //#31698
                $k[$j++] = _2f.ury; //#31698
            } //#31698
            $_.textascent = $k[--$j]; //#31707
            var _2i = $$.stringwidth($_.tstr); //#31708
            $_.textwidth = $f(_2i.w + (($_.tstr.length - 1) * $_.textgaps)); //#31708
            $_.textxpos = $f($_.textxoffset + ($f($_.pixx - $_.textwidth) / 2)); //#31710
            if ($eq($_.textxalign, "left")) { //#31711
                $_.textxpos = $_.textxoffset; //#31711
            } //#31711
            if ($eq($_.textxalign, "right")) { //#31712
                $_.textxpos = $f($f($_.pixx - $_.textxoffset) - $_.textwidth); //#31712
            } //#31712
            if ($eq($_.textxalign, "offleft")) { //#31713
                $_.textxpos = -$f($_.textwidth + $_.textxoffset); //#31713
            } //#31713
            if ($eq($_.textxalign, "offright")) { //#31714
                $_.textxpos = $f($_.pixx + $_.textxoffset); //#31714
            } //#31714
            if ($eq($_.textxalign, "justify") && ($_.textwidth < $_.pixx)) { //#31718
                $_.textxpos = 0; //#31716
                $_.textgaps = $f($_.pixx - $_.textwidth) / ($_.tstr.length - 1); //#31717
            } //#31717
            $_.textypos = -($f($f($_.textyoffset + $_.textascent) + 1)); //#31719
            if ($eq($_.textyalign, "above")) { //#31720
                $_.textypos = $f($f($_.textyoffset + $_.pixy) + 1); //#31720
            } //#31720
            if ($eq($_.textyalign, "center")) { //#31721
                $_.textypos = $f($_.textyoffset + ($f($_.pixy - $_.textascent) / 2)); //#31721
            } //#31721
            $$.moveto($_.textxpos, $_.textypos); //#31722
            $$.show($_.tstr, $_.textgaps, 0); //#31722
        } //#31722
    } //#31722
    if ($_.guardwhitespace) { //#31737
        $$.selectfont("OCR-B", $_.guardheight * 2); //#31728
        if ($_.guardleftpos != 0) { //#31732
            $$.moveto((-$_.guardleftpos) - 2, $f(($f($_.guardleftypos - ($_.guardheight / 2))) - 1.25)); //#31730
            $$.show("<", 0, 0); //#31731
        } //#31731
        if ($_.guardrightpos != 0) { //#31736
            $$.moveto($f(($f($f($_.guardrightpos + $_.pixx) - $_.guardwidth)) + 1), $f(($f($_.guardrightypos - ($_.guardheight / 2))) - 1.25)); //#31734
            $$.show(">", 0, 0); //#31735
        } //#31735
    } //#31735
    $$.restore(); //#31739
    $_ = Object.getPrototypeOf($_); //#31741
} //bwipp_renlinear
function bwipp_renmaximatrix() {
    if ($_.bwipjs_dontdraw) { //#31759
        return; //#31759
    } //#31759
    $_ = Object.create($_); //#31761
    $_.args = $k[--$j]; //#31763
    $_.barcolor = "unset"; //#31766
    $_.backgroundcolor = "unset"; //#31767
    $forall($_.args, function() { //#31770
        var _3 = $k[--$j]; //#31770
        $_[$k[--$j]] = _3; //#31770
    }); //#31770
    var _5 = $_.opt; //#31771
    for (var _A = _5.size, _9 = _5.keys(), _8 = 0; _8 < _A; _8++) { //#31771
        var _6 = _9.next().value; //#31771
        $_[_6] = _5.get(_6); //#31771
    } //#31771
    $_.barcolor = "" + $_.barcolor; //#31773
    $_.backgroundcolor = "" + $_.backgroundcolor; //#31774
    $$.save(); //#31776
    if ($ne($_.barcolor, "unset")) { //#31778
        $$.setcolor($_.barcolor); //#31778
    } //#31778
    $$.maxicode($_.pixs); //#31779
    $$.restore(); //#31781
    $_ = Object.getPrototypeOf($_); //#31783
} //bwipp_renmaximatrix
// bwip-js/barcode-ftr.js
//
// This code is injected below the cross-compiled barcode.js.

// `encoder` is one of the bwipp_ functions
function bwipp_encode(bwipjs, encoder, text, opts, dontdraw) {
    if (typeof text !== 'string') {
        throw new Error('bwipp.typeError: barcode text not a string (' +
            text + ')');
    }
    opts = opts || {};
    if (typeof opts === 'string') {
        var tmp = opts.split(' ');
        opts = {};
        for (var i = 0; i < tmp.length; i++) {
            if (!tmp[i]) {
                continue;
            }
            var eq = tmp[i].indexOf('=');
            if (eq == -1) {
                opts[tmp[i]] = true;
            } else {
                opts[tmp[i].substr(0, eq)] = tmp[i].substr(eq + 1);
            }
        }
    } else if (typeof opts !== 'object' || opts.constructor !== Object) {
        throw new Error('bwipp.typeError: options not an object');
    }

    // Convert utf-16 to utf-8 unless caller has pre-encoded the text.
    if (opts.binarytext) {
        // No 16-bit chars allowed.
        if (/[\u0100-\uffff]/.test(text)) {
            throw new Error('bwip-js: 16-bit chars not allowed with binarytext');
        }
    } else if (/[\u0080-\uffff]/.test(text)) {
        text = unescape(encodeURIComponent(text));
    }

    // Convert opts to a Map
    var map = new Map;
    for (var id in opts) {
        if (opts.hasOwnProperty(id)) {
            map.set(id, opts[id]);
        }
    }

    // Set up the initial postscript state and invoke the encoder
    $$ = bwipjs;
    $k = [text, map];
    $j = 2;
    $_ = {
        bwipjs_dontdraw: opts.dontdraw || dontdraw || false
    };
    encoder();

    // Return what is left on the stack.  This branch should only be taken
    // when running with the dontdraw option.
    if ($j) {
        return $k.splice(0, $j);
    }

    return true;
}

function bwipp_lookup(symbol) {
    if (!symbol) {
        throw new Error("bwipp.undefinedEncoder: bcid is not defined");
    }
    switch (symbol.replace(/-/g, "_")) {
        case "auspost":
            return bwipp_auspost;
        case "azteccode":
            return bwipp_azteccode;
        case "azteccodecompact":
            return bwipp_azteccodecompact;
        case "aztecrune":
            return bwipp_aztecrune;
        case "bc412":
            return bwipp_bc412;
        case "channelcode":
            return bwipp_channelcode;
        case "codablockf":
            return bwipp_codablockf;
        case "code11":
            return bwipp_code11;
        case "code128":
            return bwipp_code128;
        case "code16k":
            return bwipp_code16k;
        case "code2of5":
            return bwipp_code2of5;
        case "code32":
            return bwipp_code32;
        case "code39":
            return bwipp_code39;
        case "code39ext":
            return bwipp_code39ext;
        case "code49":
            return bwipp_code49;
        case "code93":
            return bwipp_code93;
        case "code93ext":
            return bwipp_code93ext;
        case "codeone":
            return bwipp_codeone;
        case "coop2of5":
            return bwipp_coop2of5;
        case "daft":
            return bwipp_daft;
        case "databarexpanded":
            return bwipp_databarexpanded;
        case "databarexpandedcomposite":
            return bwipp_databarexpandedcomposite;
        case "databarexpandedstacked":
            return bwipp_databarexpandedstacked;
        case "databarexpandedstackedcomposite":
            return bwipp_databarexpandedstackedcomposite;
        case "databarlimited":
            return bwipp_databarlimited;
        case "databarlimitedcomposite":
            return bwipp_databarlimitedcomposite;
        case "databaromni":
            return bwipp_databaromni;
        case "databaromnicomposite":
            return bwipp_databaromnicomposite;
        case "databarstacked":
            return bwipp_databarstacked;
        case "databarstackedcomposite":
            return bwipp_databarstackedcomposite;
        case "databarstackedomni":
            return bwipp_databarstackedomni;
        case "databarstackedomnicomposite":
            return bwipp_databarstackedomnicomposite;
        case "databartruncated":
            return bwipp_databartruncated;
        case "databartruncatedcomposite":
            return bwipp_databartruncatedcomposite;
        case "datalogic2of5":
            return bwipp_datalogic2of5;
        case "datamatrix":
            return bwipp_datamatrix;
        case "datamatrixrectangular":
            return bwipp_datamatrixrectangular;
        case "datamatrixrectangularextension":
            return bwipp_datamatrixrectangularextension;
        case "dotcode":
            return bwipp_dotcode;
        case "ean13":
            return bwipp_ean13;
        case "ean13composite":
            return bwipp_ean13composite;
        case "ean14":
            return bwipp_ean14;
        case "ean2":
            return bwipp_ean2;
        case "ean5":
            return bwipp_ean5;
        case "ean8":
            return bwipp_ean8;
        case "ean8composite":
            return bwipp_ean8composite;
        case "flattermarken":
            return bwipp_flattermarken;
        case "gs1_128":
            return bwipp_gs1_128;
        case "gs1_128composite":
            return bwipp_gs1_128composite;
        case "gs1_cc":
            return bwipp_gs1_cc;
        case "gs1datamatrix":
            return bwipp_gs1datamatrix;
        case "gs1datamatrixrectangular":
            return bwipp_gs1datamatrixrectangular;
        case "gs1dldatamatrix":
            return bwipp_gs1dldatamatrix;
        case "gs1dlqrcode":
            return bwipp_gs1dlqrcode;
        case "gs1dotcode":
            return bwipp_gs1dotcode;
        case "gs1northamericancoupon":
            return bwipp_gs1northamericancoupon;
        case "gs1qrcode":
            return bwipp_gs1qrcode;
        case "hanxin":
            return bwipp_hanxin;
        case "hibcazteccode":
            return bwipp_hibcazteccode;
        case "hibccodablockf":
            return bwipp_hibccodablockf;
        case "hibccode128":
            return bwipp_hibccode128;
        case "hibccode39":
            return bwipp_hibccode39;
        case "hibcdatamatrix":
            return bwipp_hibcdatamatrix;
        case "hibcdatamatrixrectangular":
            return bwipp_hibcdatamatrixrectangular;
        case "hibcmicropdf417":
            return bwipp_hibcmicropdf417;
        case "hibcpdf417":
            return bwipp_hibcpdf417;
        case "hibcqrcode":
            return bwipp_hibcqrcode;
        case "iata2of5":
            return bwipp_iata2of5;
        case "identcode":
            return bwipp_identcode;
        case "industrial2of5":
            return bwipp_industrial2of5;
        case "interleaved2of5":
            return bwipp_interleaved2of5;
        case "isbn":
            return bwipp_isbn;
        case "ismn":
            return bwipp_ismn;
        case "issn":
            return bwipp_issn;
        case "itf14":
            return bwipp_itf14;
        case "jabcode":
            return bwipp_jabcode;
        case "japanpost":
            return bwipp_japanpost;
        case "kix":
            return bwipp_kix;
        case "leitcode":
            return bwipp_leitcode;
        case "mailmark":
            return bwipp_mailmark;
        case "mands":
            return bwipp_mands;
        case "matrix2of5":
            return bwipp_matrix2of5;
        case "maxicode":
            return bwipp_maxicode;
        case "micropdf417":
            return bwipp_micropdf417;
        case "microqrcode":
            return bwipp_microqrcode;
        case "msi":
            return bwipp_msi;
        case "onecode":
            return bwipp_onecode;
        case "pdf417":
            return bwipp_pdf417;
        case "pdf417compact":
            return bwipp_pdf417compact;
        case "pharmacode":
            return bwipp_pharmacode;
        case "pharmacode2":
            return bwipp_pharmacode2;
        case "planet":
            return bwipp_planet;
        case "plessey":
            return bwipp_plessey;
        case "posicode":
            return bwipp_posicode;
        case "postnet":
            return bwipp_postnet;
        case "pzn":
            return bwipp_pzn;
        case "qrcode":
            return bwipp_qrcode;
        case "rationalizedCodabar":
            return bwipp_rationalizedCodabar;
        case "raw":
            return bwipp_raw;
        case "rectangularmicroqrcode":
            return bwipp_rectangularmicroqrcode;
        case "royalmail":
            return bwipp_royalmail;
        case "sscc18":
            return bwipp_sscc18;
        case "swissqrcode":
            return bwipp_swissqrcode;
        case "symbol":
            return bwipp_symbol;
        case "telepen":
            return bwipp_telepen;
        case "telepennumeric":
            return bwipp_telepennumeric;
        case "ultracode":
            return bwipp_ultracode;
        case "upca":
            return bwipp_upca;
        case "upcacomposite":
            return bwipp_upcacomposite;
        case "upce":
            return bwipp_upce;
        case "upcecomposite":
            return bwipp_upcecomposite;
    }
    throw new Error("bwipp.unknownEncoder: unknown encoder name: " + symbol);
}
var BWIPP_VERSION = '2024-01-03';
export { bwipp_auspost,bwipp_azteccode,bwipp_azteccodecompact,bwipp_aztecrune,bwipp_bc412,bwipp_channelcode,bwipp_codablockf,bwipp_code11,bwipp_code128,bwipp_code16k,bwipp_code2of5,bwipp_code32,bwipp_code39,bwipp_code39ext,bwipp_code49,bwipp_code93,bwipp_code93ext,bwipp_codeone,bwipp_coop2of5,bwipp_daft,bwipp_databarexpanded,bwipp_databarexpandedcomposite,bwipp_databarexpandedstacked,bwipp_databarexpandedstackedcomposite,bwipp_databarlimited,bwipp_databarlimitedcomposite,bwipp_databaromni,bwipp_databaromnicomposite,bwipp_databarstacked,bwipp_databarstackedcomposite,bwipp_databarstackedomni,bwipp_databarstackedomnicomposite,bwipp_databartruncated,bwipp_databartruncatedcomposite,bwipp_datalogic2of5,bwipp_datamatrix,bwipp_datamatrixrectangular,bwipp_datamatrixrectangularextension,bwipp_dotcode,bwipp_ean13,bwipp_ean13composite,bwipp_ean14,bwipp_ean2,bwipp_ean5,bwipp_ean8,bwipp_ean8composite,bwipp_flattermarken,bwipp_gs1_128,bwipp_gs1_128composite,bwipp_gs1_cc,bwipp_gs1datamatrix,bwipp_gs1datamatrixrectangular,bwipp_gs1dldatamatrix,bwipp_gs1dlqrcode,bwipp_gs1dotcode,bwipp_gs1northamericancoupon,bwipp_gs1qrcode,bwipp_hanxin,bwipp_hibcazteccode,bwipp_hibccodablockf,bwipp_hibccode128,bwipp_hibccode39,bwipp_hibcdatamatrix,bwipp_hibcdatamatrixrectangular,bwipp_hibcmicropdf417,bwipp_hibcpdf417,bwipp_hibcqrcode,bwipp_iata2of5,bwipp_identcode,bwipp_industrial2of5,bwipp_interleaved2of5,bwipp_isbn,bwipp_ismn,bwipp_issn,bwipp_itf14,bwipp_jabcode,bwipp_japanpost,bwipp_kix,bwipp_leitcode,bwipp_mailmark,bwipp_mands,bwipp_matrix2of5,bwipp_maxicode,bwipp_micropdf417,bwipp_microqrcode,bwipp_msi,bwipp_onecode,bwipp_pdf417,bwipp_pdf417compact,bwipp_pharmacode,bwipp_pharmacode2,bwipp_planet,bwipp_plessey,bwipp_posicode,bwipp_postnet,bwipp_pzn,bwipp_qrcode,bwipp_rationalizedCodabar,bwipp_raw,bwipp_rectangularmicroqrcode,bwipp_royalmail,bwipp_sscc18,bwipp_swissqrcode,bwipp_symbol,bwipp_telepen,bwipp_telepennumeric,bwipp_ultracode,bwipp_upca,bwipp_upcacomposite,bwipp_upce,bwipp_upcecomposite,bwipp_lookup,bwipp_encode,BWIPP_VERSION };

#!/bin/bash
##
## file : bwipjs/uncover
##
## Analyze the branch coverage files.
##

TMPFILE=coverage/temp$$
TBLFILE=covertbl.md
JSONFILE=coverage/json$$

##
## Initialize the json file that will be input to node and uncover.js.
##
echo '{' > $JSONFILE

sort coverage/functions | while read FUNCTION ; do
    if [ ! -r coverage/$FUNCTION ] ; then
        ## Complain about missing functions only when no filter is applied
        if [ $# = 0 ] ; then
            echo "$FUNCTION: --no-data--" 1>&2
        fi
        continue
    fi

    ##
    ## Don't bother with raiseerror or the renderers.  Their metrics will
    ## always be wrong.
    ##
    if [ $FUNCTION = raiseerror -o ${FUNCTION:0:3} = ren ] ; then
        ## Keep the files svelte
        rm -f coverage/$FUNCTION 2>/dev/null
        continue;
    fi

    ##
    ## The maximum value in each file is the number of branches total.
    ## The lines in the file are the branches taken, minus the line
    ## containing the branch count.
    ##
    sort -u -n coverage/$FUNCTION > $TMPFILE
    let TOTAL=$(tail -n1 $TMPFILE)
    let COUNT=$(wc -l < $TMPFILE)-1
    let PCT=($COUNT*1000/$TOTAL+5)/10
    echo "| [$FUNCTION](https://rawgit.com/metafloor/bwip-js/develop/covermap.html#$FUNCTION) | $TOTAL | $COUNT | $PCT% |" >>$TBLFILE

    ## jsonify the data
    echo "\"$FUNCTION\":[$(xargs < $TMPFILE | sed -e 's/ /,/g')]," >> $JSONFILE

    ## Keep the smaller post-processed file
    mv -f $TMPFILE coverage/$FUNCTION
done

echo '}' >> $JSONFILE

##
## Begin wiki Code Coverage page
##
T3='```'        ## Tildes cause trouble in the heredoc

cat - > ../wiki/Code-Coverage.md <<@EOF
This is the state of the test cases coverage as of $(date +%Y-%m-%d).

$T3
$(node uncover.js $JSONFILE)
$T3

| Barcode Type | Total Branches | Branches Covered | Percent |
| :--- | :---: | :---: | :---: |
$(cat $TBLFILE)

If there is a barcode encoder that has low test coverage that you would
like to adopt, please help out.  

To run the tests, you will first need to follow the instructions in
[[Compiling bwipjs]].  Make sure to install ghostscript and create the \`gs\`
wrapper script, if necessary.

Next we need to create test cases.  Take a look at the \`bwip-js/runtests\`
script to see the existing test cases.  The format reflects what
you would enter in the bwipjs demo:

$T3
run <encoder> "<barcode text>" "<options>"
$T3

Then click on the encoder link in the table above.  That takes you to the
code coverage map for the encoder.  Black text has been covered.  Red text
needs a test case.

Low priority are the branches that contain a call to \`raiseerror\` (although
test cases for them will be happily accepted).

Highest priority are \`forall\` loops that have either of the following
structures:

$T3
// With callback
\$forall(<expression>, function() {
    <lots of red code here>
});

// Without callback
\$forall(<expression>);
$T3

Those loops implement a slow-path as the trace compiler was not able to
properly analyze the type of object in the forall-expression and had to 
let the runtime library determine the correct postscript semantics.

The goal is to have test coverage for all of these worst-case loops.
The cross-compiler can then be enhanced with runtime feedback that allows it
to emit optimized code.

Next highest priority are loop bodies with any red code.  Loops can be tricky
in postscript and may manipulate the operand stack in unexpected ways.  Each
one needs testing.

Trying to determine a test case that will exercise a branch of code is a bit
of an art.  Postscript is not an intuitive language and has a fairly steep
learning curve.  The code generated by the cross-compiler, in my opinion, 
is actually easier to read than the original postscript (Terry will likely
disagree!).

Before running your test cases, you need to build bwipjs with code coverage
enabled.  Simply:

$T3
\$ ./psc --with-coverage
$T3

The new \`bwipp.js\` will contain embedded logic to record branch coverage
at runtime.  This code is not as performant as the standard \`bwipp.js\` code
so remember to re-compile your code without coverage after you are done:

$T3
\$ ./psc  # do this only after you are done with code coverage testing
$T3

Now, add your test cases to \`runtests\` under the existing test cases for the
encoder.  Run the tests and generate a new coverage map:

$T3
\$ ./runtests <encoder>
\$ ./uncover
$T3

Where \`<encoder>\` is the name of the encoder you added test cases for.

\`uncover\` will update \`covermap.html\` in your local directory.  Go to
your browser and use a 
\`file:///\` URL to navigate to the page.  For example, if you installed bwipjs
under \`C:\\\`, the URL will be:

$T3
file:///c:/bwip-js/covermap.html#encoder
$T3

Where \`encoder\` is the name of the encoder.  Verify that the test cases
covered the code branches you were targetting.

Finally, use the demo to verify that your test cases are either generating a 
barcode or the expected error message.

Please submit your tests cases as a new issue on the project's github pages.
I will not take pull
requests for the \`runtests\` file as I often modify it and only push
changes when releasing.

After you submit your tests cases, a 2D bar code scanner is used to
verify the barcodes are readable and contain the correct data.
If all goes ok, your test cases (and my warm thanks!) will be part of the
next release.
@EOF

rm -f $JSONFILE 2>/dev/null
rm -f $TBLFILE 2>/dev/null

/runtest_microqrcode {
20 dict begin
% Barcode Writer in Pure PostScript
% https://bwipp.terryburton.co.uk
%
% Copyright (c) 2004-2024 Terry Burton

% ISO/IEC 18004:2015

% vim: set ts=4 sw=4 et :

%%/microqrcode dup /uk.co.terryburton.bwipp findresource cvx def

/eq_tmpl {
    /e exch def
    /o exch def
    /t exch def
    { t o microqrcode /pixs get } e isEqual
} def

/er_tmpl {
    /e exch def
    /o exch def
    /t exch def
    { t o microqrcode /pixs get } e isError
} def


% numBs calculation

{  % B1 not in Kanji 1st byte range
    (^128) (parse fixedeclevel debugcws) microqrcode
} [134 0 0 236 17 236 17 236 17 236 0] debugIsEqual

{  % B1 in Kanji 1st byte range
    (^129) (parse fixedeclevel debugcws) microqrcode
} [134 4 0 236 17 236 17 236 17 236 0] debugIsEqual


% Encodation examples

{
    % A11, 11 alphanumerics max for M3-M (Table 7)
    (ABCDEFGHIJK) (version=M3 eclevel=M fixedeclevel debugcws) microqrcode
} [108 230 162 149 10 184 89 234 128] debugIsEqual

{
    % B15, 15 bytes max for M4-L (Table 7)
    (???????????????) (version=M4 eclevel=L fixedeclevel debugcws) microqrcode
} [79 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63] debugIsEqual

{
    % K9 (点茗や点茗や点茗や), 9 Kanji max for M4-L (Table 7); note ^226^147 (0xE293) also valid Shift JIS
    (^147^095^228^170^130^226^147^095^228^170^130^226^147^095^228^170^130^226) (parse version=M4 eclevel=L fixedeclevel debugcws) microqrcode
} [114 217 253 85 5 137 179 250 170 11 19 103 245 84 22 32] debugIsEqual

{
    % B12 (?点茗や点茗?), modeBKbeforeB M4 change 5 -> 6, previously B1 K5 B1 (same msgbits length)
    (?^147^095^228^170^130^226^147^095^228^170?) (parse version=M4 eclevel=L fixedeclevel debugcws) microqrcode
} [76 63 147 95 228 170 130 226 147 95 228 170 63 0 0 236] debugIsEqual

{
    % B1 K3 N1 (?点茗や1), modeBKbeforeN M3 change 5 -> 3, previously B8 (longer msgbits length)
    (?^147^095^228^170^130^2261) (parse version=M3 eclevel=L fixedeclevel debugcws) microqrcode
} [132 255 109 159 213 80 88 128 136 0 0] debugIsEqual

{
    % B1 K4 N1 (?点茗や点1), modeBKbeforeN M3 change 5 -> 3, previously not encodable (msgbits too long)
    (?^147^095^228^170^130^226^147^0951) (parse version=M3 eclevel=L fixedeclevel debugcws) microqrcode
} [132 255 141 159 213 80 88 155 62 4 64] debugIsEqual

{
    % B1 K5 N1 (?点茗や点茗?), modeBKbeforeN M4 change 6 -> 5, previously B12 (longer msgbits length)
    (?^147^095^228^170^130^226^147^095^228^1701) (parse version=M4 eclevel=L fixedeclevel debugcws) microqrcode
} [65 63 106 217 253 85 5 137 179 250 170 0 136 0 236 17] debugIsEqual

{
    % A3 K1 (ABC点), new initial mode A before K re-using modeBAbeforeE array, previously B5 (longer msgbits length)
    (ABC^147^095) (parse version=M3 eclevel=L fixedeclevel debugcws) microqrcode
} [76 230 153 150 207 128 236 17 236 17 0] debugIsEqual

{
    % B14, issue #237, initial AN, removal of mode0forceA AbeforeN, previously not encodable A2 B12
    (K9^000^000^000^000^000^000^000^000^000^000^000^000^000) (parse fixedeclevel debugcws) microqrcode
} [79 75 57 0 0 0 0 0 0 0 0 0 0 0 0 0] debugIsEqual
{
    % B14, issue #237, initial NA, removal of numN 1 ge test, previously not encodable A2 B12
    (9K^000^000^000^000^000^000^000^000^000^000^000^000^000) (parse fixedeclevel debugcws) microqrcode
} [79 57 75 0 0 0 0 0 0 0 0 0 0 0 0 0] debugIsEqual

{
    % B14, initial ANA
    (K9K^000^000^000^000^000^000^000^000^000^000^000^000) (parse fixedeclevel debugcws) microqrcode
} [79 75 57 75 0 0 0 0 0 0 0 0 0 0 0 0] debugIsEqual
{
    % B14, inversion of above
    (^000^000^000^000^000^000^000^000^000^000^000^000K9K) (parse fixedeclevel debugcws) microqrcode
} [79 0 0 0 0 0 0 0 0 0 0 0 0 75 57 75] debugIsEqual

{
    % A4 B11, issue #237, initial ANAN, new AorN before B re-using modeBAbeforeE array
    % (needed after removals mentioned above), previously the same
    (K9K9^000^000^000^000^000^000^000^000^000^000^000) (parse fixedeclevel debugcws) microqrcode
} [36 113 174 53 44 0 0 0 0 0 0 0 0 0 0 0] debugIsEqual
{
    % B11 A4, inversion of above
    (^000^000^000^000^000^000^000^000^000^000^000K9K9) (parse fixedeclevel debugcws) microqrcode
} [75 0 0 0 0 0 0 0 0 0 0 0 36 113 174 52] debugIsEqual

{
    % A7 B9, initial ANANANA
    (K9K9K9K^000^000^000^000^000^000^000^000^000) (parse fixedeclevel debugcws) microqrcode
} [39 113 174 53 198 168 146 0 0 0 0 0 0 0 0 0] debugIsEqual
{
    % B9 A7, inversion of above, new mode B terminal short AorN sequence
    (^000^000^000^000^000^000^000^000^000K9K9K9K) (parse fixedeclevel debugcws) microqrcode
} [73 0 0 0 0 0 0 0 0 0 39 113 174 53 198 168] debugIsEqual
{
    % B9 A7, with AorN sequence containg N3
    (^000^000^000^000^000^000^000^000^000KK999KK) (parse fixedeclevel debugcws) microqrcode
} [73 0 0 0 0 0 0 0 0 0 39 115 6 120 212 168] debugIsEqual
    % With AorN sequence containing N4 fails with unencodable B11 N4 A1 (due to next N sequence shorter than NbeforeA)
    (^000^000^000^000^000^000^000^000^000KK9999K) (parse fixedeclevel dontdraw) /bwipp.qrcodeNoValidSymbol er_tmpl

{
    % A8 B8, initial ANANANAN
    (K9K9K9K9^000^000^000^000^000^000^000^000) (parse fixedeclevel debugcws) microqrcode
} [40 113 174 53 198 184 212 128 0 0 0 0 0 0 0 0] debugIsEqual
{
    % B8 A8, inversion of above
    (^000^000^000^000^000^000^000^000K9K9K9K9) (parse fixedeclevel debugcws) microqrcode
} [72 0 0 0 0 0 0 0 0 40 113 174 53 198 184 208] debugIsEqual

{
    % A10 B7, initial ANANANANAN
    (K9K9K9K9K9^000^000^000^000^000^000^000) (parse fixedeclevel debugcws) microqrcode
} [42 113 174 53 198 184 215 26 142 0 0 0 0 0 0 0] debugIsEqual
    % Inversion of above fails with unencodable B9 A8 (terminal AorN sequence too long to produce B7 A10)
    (^000^000^000^000^000^000^000K9K9K9K9K9) (parse dontdraw) /bwipp.qrcodeNoValidSymbol er_tmpl
{
    % B7 A9, one less works
    (^000^000^000^000^000^000^000K9K9K9K9K) (parse fixedeclevel debugcws) microqrcode
} [72 0 0 0 0 0 0 0 75 40 53 38 164 212 154 144] debugIsEqual


% Figures

(01234567) (dontdraw eclevel=L fixedeclevel)  % Figure 2 (and I.2), same
[
    1 1 1 1 1 1 1 0 1 0 1 0 1
    1 0 0 0 0 0 1 0 1 1 1 0 1
    1 0 1 1 1 0 1 0 0 1 1 0 1
    1 0 1 1 1 0 1 0 0 1 1 1 1
    1 0 1 1 1 0 1 0 1 1 1 0 0
    1 0 0 0 0 0 1 0 1 0 0 0 1
    1 1 1 1 1 1 1 0 0 1 1 1 1
    0 0 0 0 0 0 0 0 0 1 1 0 0
    1 1 0 1 0 0 0 0 1 0 0 0 1
    0 1 1 0 1 0 1 0 1 0 1 0 1
    1 1 1 0 0 1 1 1 1 1 1 1 0
    0 0 0 1 0 1 0 0 0 0 1 1 0
    1 1 1 0 1 0 0 1 1 0 1 1 1
] eq_tmpl

(12345) (dontdraw eclevel=M fixedeclevel)  % Figure 38, same
[
    1 1 1 1 1 1 1 0 1 0 1 0 1
    1 0 0 0 0 0 1 0 1 0 0 0 0
    1 0 1 1 1 0 1 0 1 1 1 0 1
    1 0 1 1 1 0 1 0 0 0 0 1 1
    1 0 1 1 1 0 1 0 0 1 1 1 0
    1 0 0 0 0 0 1 0 1 0 0 0 1
    1 1 1 1 1 1 1 0 0 0 1 0 1
    0 0 0 0 0 0 0 0 0 1 0 1 1
    1 1 1 0 0 1 1 1 1 0 0 0 0
    0 1 1 1 1 0 0 1 0 1 1 0 0
    1 1 1 0 0 0 0 0 0 1 1 1 0
    0 1 0 0 1 0 0 0 1 0 1 0 1
    1 1 1 1 1 1 1 0 1 0 0 1 1
] eq_tmpl
end
} bind def
